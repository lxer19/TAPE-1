URL: http://www-sal.cs.uiuc.edu/~nachum/papers/survey-draft.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Title: REWRITE SYSTEMS  Volume B: Formal Methods and Semantics  
Author: Nachum Dershowitz and Jean-Pierre Jouannaud J. van Leeuwen, ed. 
Note: Chapter 6 of Handbook of Theoretical Computer Science  pages 243-320 North-Holland Amsterdam, 1990  
Abstract-found: 0
Intro-found: 1
Reference: [ Ackermann, 1954 ] <author> W. Ackermann, </author> <title> Solvable Cases of the Decision Problem, </title> <publisher> North-Holland, </publisher> <address> Amsterdam (1954). </address>
Reference-contexts: And without deduce, completion will not loop. Thus, for any finite set of ground equations, completion is sure to generate a decision procedure [ Lankford, 1975 ] , which is not surprising, since all such theories are decidable <ref> [ Ackermann, 1954 ] </ref> . In fact, various O (n lg n) congruence-closure algorithms exist for the purpose (e.g. [ Downey-etal, 1980 ] ; see also [ Snyder, 1989 ] ).
Reference: [ Anantharaman-etal, 1989 ] <author> S. Anantharaman, J. Hsiang and J. Mzali, SbReve2: </author> <title> A term rewriting laboratory with (AC-)unfailing completion, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <pages> pp. 533-537, </pages> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin (April 1989). </address>
Reference-contexts: The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] . Early forerunners of ordered completion were [ Lankford, 1975; Brown, 1975 ] . Ordered completion modulo a congruence has been implemented by <ref> [ Anantharaman-etal, 1989 ] </ref> . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] .
Reference: [ Ardis, 1980 ] <author> M. A. Ardis, </author> <title> Data abstraction transformations, </title> <type> Report TR-925, Ph.D. thesis, </type> <institution> Department of Computer Science, University of Maryland. </institution> <month> (August </month> <year> 1980). </year>
Reference-contexts: If success occurs after a finite number of steps, then the resultant system R 1 is a decision procedure for E 0 . But the completion may "loop", producing an infinitely large set of persisting rules. A simple example <ref> [ Ardis, 1980 ] </ref> of looping is provided by the equation f (g (f (x))) = g (f (x)).
Reference: [ Avenhaus, 1985 ] <author> J. Avenhaus, </author> <title> On the termination of the Knuth-Bendix completion algorithm, </title> <type> Report 120/84, </type> <institution> Universitat Kaiserslautern, Kaiserslautern, </institution> <address> West Germany (1985). </address>
Reference-contexts: For a given reduction ordering , a (not necessarily finite) convergent system R contained in exists for an equational theory E, iff each E-congruence class of terms has a unique minimal element vis-a-vis <ref> [ Avenhaus, 1985 ] </ref> . Nonetheless, completion may fail to find R, even when given ! + R as the reduction ordering [ Dershowitz-etal, 1988 ] . <p> In fact, on account of the partialness of the ordering, some sequences may fail while others may succeed <ref> [ Avenhaus, 1985; Dershowitz-etal, 1988 ] </ref> . For example, let be a recursive path ordering with precedence f d c a and d b a (but b and c are incomparable), and let E 0 = ff (c) = c; b = d; c = d; f (d) = ag.
Reference: [ Baader, 1986 ] <author> F. Baader, </author> <title> Unification in idempotent semigroups is of type zero, </title> <journal> J. </journal> <note> Automated Reasoning 2 (3) (1986). </note>
Reference-contexts: (an example is the set of solutions fa i ji 1g to x a = a x, where "" is associative [ Plotkin, 1972 ] ), and there are some for which there are solutions, but no most general one [ Fages-Huet, 1983 ] (an example is associativity plus idempotence <ref> [ Baader, 1986 ] </ref> ). We say that a set S of E-unifiers is complete if for every E-unifier there is one in S that is more general with respect to E-subsumption.
Reference: [ Bachmair-Dershowitz, 1986 ] <author> L. Bachmair and N. Dershowitz, </author> <title> Commutation, transformation, and termination, </title> <booktitle> Proc. of the Eighth International Conference on Automated Deduction, </booktitle> <editor> J. H. Siekmann, ed., </editor> <publisher> Oxford, </publisher> <address> England, </address> <pages> pp. 5-20. </pages> <note> Available as Vol. 230, Lecture Notes in Computer Science, Springer, Berlin (July 1986). </note>
Reference-contexts: The general use of rewrite systems as transforms and the formulation of abstract conditions of the resultant reduction ordering are explored in <ref> [ Bachmair-Dershowitz, 1986; Bellegarde-Lescanne, 1987 ] </ref> . Termination of the union of term- or class-rewriting systems can be reduced to the termination of each: Let R and S be two binary relations contained in well-founded orderings R and S , respectively. <p> These ideas generalize results in <ref> [ Bachmair-Dershowitz, 1986; Jouannaud-Munoz, 1984 ] </ref> .
Reference: [ Bachmair-Dershowitz, 1987a ] <author> L. Bachmair and N. Dershowitz, </author> <title> Completion for rewriting modulo a congruence, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 192-203. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin; revised version to appear in Theoretical Computer Science [1988] (May 1987). </note>
Reference-contexts: The critical pair condition can then be tailored to the different kinds of rules, with term rewriting used for the left-linear subset and extended rewriting for the rest [ Jouannaud-Kirchner, 1986 ] . Ad ditional improvements are provided by critical pair criteria for extended rewriting, as described in <ref> [ Bachmair-Dershowitz, 1987a ] </ref> . 7.4 Ordered Rewriting Ordered rewriting systems enjoy a similar critical pair condition for confluence, but only for certain classes of orderings and only for ground terms. <p> However, the limit SnR 1 need not be reduced. Additional aspects of completion modulo equational theories have been considered: [ Huet, 1980 ] deals with the left-linear case; [ Jouannaud-Kirchner, 1986 ] analyze exactly which critical pairs are necessary when some rules are left-linear and others are not; <ref> [ Bachmair-Dershowitz, 1987a ] </ref> take the inference rule approach and generalize previous results. 8.4 Ordered Completion We have seen that completion can have any one of three outcomes: it may succeed in finding a decision procedure for validity after a finite number of steps; it may loop and generate more and
Reference: [ Bachmair-Dershowitz, 1987b ] <author> L. Bachmair and N. Dershowitz, </author> <title> Inference rules for rewrite-based first-order theorem proving, </title> <booktitle> Proc. of the Second Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <pages> pp. </pages> <month> 331-337 (June </month> <year> 1987). </year>
Reference-contexts: A different completion-like procedure for first-order theorem proving, incorporating simplification, has been proved correct by <ref> [ Bachmair-Dershowitz, 1987b ] </ref> . A first-order method, using Boolean rings and based on polynomial ideals, is [ Kapur-Narendran, 1985 ] . 8.7 Further Reading A survey of completion and its manifold applications may be found in [ Dershowitz, 1989 ] .
Reference: [ Bachmair-Dershowitz, 1988 ] <author> L. Bachmair and N. Dershowitz, </author> <title> Critical pair criteria for completion, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 6 (1), </booktitle> <pages> pp. </pages> <month> 1-18 </month> <year> (1988). </year>
Reference-contexts: The critical pair criteria mentioned in the Section 7.1 may be used to improve on the above requirements for fairness, by necessitating consideration of fewer critical pairs; see <ref> [ Bachmair-Dershowitz, 1988 ] </ref> . It follows from the above theorem that the limit R 1 of a fair sequence is canonical. Furthermore, since $ fl 0 , completion, correctly implemented, provides a semi-decision procedure for validity, or else aborts.
Reference: [ Bachmair-Plaisted, 1985 ] <author> L. Bachmair and D. A. Plaisted, </author> <title> Associative path ordering, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 1 (4), </booktitle> <pages> pp. </pages> <month> 329-349 (December </month> <year> 1985). </year>
Reference-contexts: To overcome this problem, the multiset path ordering has been adapted to handle associative-commutative operators by flattening and also transforming terms (distributing symbols that are bigger in the precedence over smaller ones) before comparing <ref> [ Bachmair-Plaisted, 1985 ] </ref> , i.e. s is greater than t iff the T -normal form T (s) of s is greater under mpo than the T -normal form T (t) of t, for some convergent "transform" system T and precedence .
Reference: [ Bachmair, 1988 ] <author> L. Bachmair, </author> <title> Proof by consistency in equational theories, </title> <booktitle> Proc. of the Third IEEE Symposium on Logic in Computer Science, </booktitle> <address> Edinburgh, Scotland, </address> <pages> pp. </pages> <month> 228-233 (July </month> <year> 1988). </year> <month> 47 </month>
Reference-contexts: Thus, for each inference step (H i ; R i ) ` OC (H i+1 ; R i+1 ), the equational hypotheses in H i should be inductive consequences of H i+1 [ R i , and the rules in R i+1 should be inductive consequences of R i <ref> [ Bachmair, 1988 ] </ref> . Then, at each stage n, H 0 [ R 0 follows from H n [ R 0 ; the original hypotheses H 0 are proved as soon as an empty H n suffices.
Reference: [ Bachmair, 1989a ] <author> L. Bachmair, </author> <title> Proof normalization for resolution and paramodulation, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, </address> <publisher> NC, </publisher> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 15-28 (April </month> <year> 1989). </year>
Reference-contexts: One approach is to use resolution for non-equality literals together with some kind of superposition of left-hand sides of equality literals within clauses <ref> [ Lankford-Ballantyne, 1979; Peterson, 1983; Hsiang-Rusinowitch, 1986; Bachmair, 1989a ] </ref> . An alternative approach [ Hsiang-Dershowitz, 1983 ] is to use the Boolean ring system BA of Section 2 and treat logical connectives equationally.
Reference: [ Bachmair, 1989b ] <author> L. Bachmair, </author> <title> Canonical Equational Proofs, </title> <address> Pitman-Wiley, London. </address> <note> To appear (1989). </note>
Reference-contexts: Since it can be verified that C is contained in c , the former is terminating. Note how this proof ordering considers the justification of a proof and not just the terms in it. For further details, consult <ref> [ Bachmair, 1989b ] </ref> . 38 8.2 Fairness For any given completion sequence (E 0 ; ;) ` KB (E 1 ; R 1 ) ` KB , let $ fl i stand for $ fl E i [R i , that is, for a proof at the ith stage, using <p> The use of critical pair criteria in this connection is explored in [ Gobel, 1987; Kuchlin, 1989 ] . How to handle inductive equations that cannot be oriented is discussed in <ref> [ Bachmair, 1989b; Jouannaud-Kounalis, 1989 ] </ref> . 8.6 First-Order Theorem Proving Rewriting techniques have been applied to first-order theorem proving in two ways. <p> For a book focusing on the abstract view of completion and its variants, see <ref> [ Bachmair, 1989b ] </ref> . The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and [ Buchberger, 1987 ] .
Reference: [ Bachmair-etal, 1986 ] <author> L. Bachmair, N. Dershowitz and J. Hsiang, </author> <title> Orderings for equational proofs, </title> <booktitle> Proc. of the Symposium on Logic in Computer Science, </booktitle> <address> Cambridge, MA, </address> <pages> pp. </pages> <month> 346-357 (June </month> <year> 1986). </year>
Reference-contexts: Running the procedure can have one of three outcomes: success in finding a canonical system, failure in finding anything, or looping and generating an infinite number of rules (forming an infinite canonical system). 8.1 Abstract Completion Completion has recently been put in a more abstract framework <ref> [ Bachmair-etal, 1986 ] </ref> , an approach we adopt here. As in traditional proof theory (cf. [ Takeuti, 1987 ] ), proofs are reduced, in some well-founded sense, by replacing locally maximal subproofs with smaller ones, until a normal-form proof is obtained. <p> Huet introduced the notion of fairness of completion and proved this theorem for a specific fair implementation; the following proof <ref> [ Bachmair-etal, 1986 ] </ref> builds on the above development and holds for any implementation of the inference system KB : Proof. The proof is by induction with respect to ) C . Suppose that s $ fl i t is not a rewrite proof s ! fl R 1 t.
Reference: [ Bachmair-etal, 1989 ] <author> L. Bachmair, N. Dershowitz and D. A. Plaisted, </author> <title> Completion without failure, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 1-30 </month> <year> (1989). </year>
Reference-contexts: Let be a reduction ordering that can be extended to a complete simplification ordering, and let * be the encompassment ordering. Consider the following set OC of inference rules, operating on set of equations E (cf. <ref> [ Bachmair-etal, 1989 ] </ref> ): Delete: E [ fs = sg ` E Simplify: E [ fs = tg ` E [ fs = ug if t ! u and s u Collapse: E [ fs = tg ` E [ fs = ug if t ! u by l = <p> The natural question is whether ordered completion must succeed in generating a canonical set of rules whenever one exists for the given reduction ordering . The answer is affirmative <ref> [ Bachmair-etal, 1989 ] </ref> , provided can be extended to a complete reduction ordering.
Reference: [ Baeten-etal, 1984 ] <author> J. C. M. Baeten, J. A. Bergstra and J. W. Klop, </author> <title> Priority rewrite systems, </title> <type> Report CS-R8407, </type> <institution> Math Centrum, </institution> <address> Amsterdam (1984). </address>
Reference-contexts: Priority term-rewriting systems were first formally studied in <ref> [ Baeten-etal, 1984 ] </ref> . Their definition is subtle, since an outermost redex is rewritten only if no possible derivation of its proper subterms enables a higher-priority rule at the outermost position. A condition is given under which this definition of rewriting is computable.
Reference: [ Barendregt, 1984 ] <author> H. P. Barendregt, </author> <title> The Lambda Calculus, its Syntax and Semantics, </title> <publisher> North-Holland, </publisher> <address> Amsterdam. </address> <note> Second edition (1984). </note>
Reference-contexts: The relation ! is equivalent to the intersection when is total. 2.6 Further Reading The standard work on the Lambda Calculus is <ref> [ Barendregt, 1984 ] </ref> ; its role in the semantics of functional programming is discussed in [ Barendregt, 1989 ] . Evans [ 1951 ] and Knuth [ Knuth-Bendix, 1970 ] pioneered the use of rewrite systems as decision procedures for validity in equational theories. <p> Strong confluence is used in the classical proofs of the Church-Rosser property for the -calculus, since confluence of ! is exactly strong confluence of ! fl (see <ref> [ Barendregt, 1984 ] </ref> ). Definition 11. A binary relation ! on any set T is locally confluent if any local divergence ffi ! is contained in the joinability relation ! fl ffi fl . See Figure 1 (d).
Reference: [ Barendregt, 1989 ] <author> H. Barendregt, </author> <title> Functional programming and lambda calculus, </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam (1989). </address>
Reference-contexts: The relation ! is equivalent to the intersection when is total. 2.6 Further Reading The standard work on the Lambda Calculus is [ Barendregt, 1984 ] ; its role in the semantics of functional programming is discussed in <ref> [ Barendregt, 1989 ] </ref> . Evans [ 1951 ] and Knuth [ Knuth-Bendix, 1970 ] pioneered the use of rewrite systems as decision procedures for validity in equational theories.
Reference: [ Bauderon-Courcelle, 1987 ] <author> M. Bauderon and B. Courcelle, </author> <title> Graph expressions and graph rewritings, </title> <booktitle> Mathematical Systems Theory 20, </booktitle> <pages> pp. </pages> <month> 83-127 </month> <year> (1987). </year>
Reference-contexts: Though the categorical apparatus leads to apparently complicated definitions, many proofs, e.g. the Critical Pair Lemma, become nothing more than commutativity of diagrams. A completely different approach to graph rewriting is taken in <ref> [ Bauderon-Courcelle, 1987 ] </ref> , where finite graphs are treated as algebraic expressions. Finitely-oriented labeled hypergraphs are considered as a set of hyperedges glued together by means of vertices.
Reference: [ Baxter, 1976 ] <author> L. D. Baxter, </author> <title> A practically linear unification algorithm, </title> <type> Report CS-76-13, </type> <institution> University of Waterloo, Waterloo, </institution> <address> Canada (1976). </address>
Reference: [ Bellegarde-Lescanne, 1987 ] <author> F. Bellegarde and P. Lescanne, </author> <title> Transformation orderings, </title> <booktitle> Proc. of the Twelfth Colloquium on Trees in Algebra and Programming (1987). </booktitle>
Reference-contexts: The general use of rewrite systems as transforms and the formulation of abstract conditions of the resultant reduction ordering are explored in <ref> [ Bachmair-Dershowitz, 1986; Bellegarde-Lescanne, 1987 ] </ref> . Termination of the union of term- or class-rewriting systems can be reduced to the termination of each: Let R and S be two binary relations contained in well-founded orderings R and S , respectively.
Reference: [ BenCherifa-Lescanne, 1987 ] <author> A. Ben Cherifa and P. Lescanne, </author> <title> Termination of rewriting systems by polynomial interpretations and its implementation, </title> <booktitle> Science of Computer Programming 9 (2), </booktitle> <pages> pp. </pages> <month> 137-159 (October </month> <year> 1987). </year>
Reference-contexts: general, such polynomials must be of either the quadratic form f t (x; y) = ffxy + fi (x + y) + fi (fi 1)=ff (ff 6= 0) or the linear form f t (x; y) = x + y + fl (where ff, fi, and fl are natural numbers) <ref> [ BenCherifa-Lescanne, 1987 ] </ref> . For example, one can use the following polynomial interpretation to prove termination of the BA=AC system of Section 2: xor t (a; b) = a + b + 1 c t = 2.
Reference: [ Benninghofen-etal, 1987 ] <author> B. Benninghofen, S. Kemmerich and M. M. Richter, </author> <title> Systems of Reductions, </title> <booktitle> Lecture Notes in Computer Science 277, </booktitle> <publisher> Springer, </publisher> <address> Berlin (1987). </address>
Reference-contexts: Reve [ Lescanne, 1983 ] , Formel [ Fages, 1984 ] , Kads [ Stickel, 1986 ] , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion. Rewrite-based decision procedures for semigroups, monoids, and groups are investigated in <ref> [ Benninghofen-etal, 1987 ] </ref> ; experiments with the completion of finitely-presented algebras are described in [ Lankford-etal, 1984; LeChenadec, 1985 ] ; some new classes of decidable monadic word problems were found in [ Pedersen, 1989 ] .
Reference: [ Bergstra-Klop, 1986 ] <author> J. A. Bergstra and J. W. Klop, </author> <title> Conditional rewrite rules: Confluency and termination, </title> <journal> J. of Computer and System Sciences 32, </journal> <pages> pp. </pages> <month> 323-362 </month> <year> (1986). </year>
Reference-contexts: In the above example, is a term push (top (s); pop (s)) rewritten whenever the subterm s is such that the condition empty?(s) = no can be proved, whenever a rewrite proof exists, or only when empty?(s) rewrites to no? The ramifications of various choices are discussed in <ref> [ Brand-etal, 1978; Bergstra-Klop, 1986; Dershowitz-etal, 1988 ] </ref> .
Reference: [ Birkhoff, 1935 ] <author> G. Birkhoff, </author> <title> On the structure of abstract algebras, </title> <booktitle> Proc. of the Cambridge Philosophical Society 31, </booktitle> <pages> pp. </pages> <month> 433-454 </month> <year> (1935). </year>
Reference-contexts: Validity of an equation s = t (that is, validity in all models) is expressed as Mod (E) j= s = t, or s = E t for short. Varieties are characterized in the following algebraic way <ref> [ Birkhoff, 1935 ] </ref> : A class of algebras K is a variety iff it is closed under Cartesian products, subalgebras, and homomorphic images.
Reference: [ Birkhoff, 1948 ] <author> G. Birkhoff, </author> <title> Lattice Theory, </title> <publisher> American Mathematical Society, </publisher> <address> New York. </address> <note> Revised edition (1948). </note>
Reference-contexts: For example, the least generalization of f (g (a); g (b); a) and f (g (b); g (a); b) is f (g (x); g (y); x). It follows from properties of well-founded lattices <ref> [ Birkhoff, 1948 ] </ref> that every pair of terms s and t that are bounded from above (i.e., there exists a term that is an instance of both) have a least (i.e. most general) upper-bound, denoted lub (s; t).
Reference: [ Bledsoe, 1977 ] <author> W. Bledsoe, </author> <title> Non-resolution theorem proving, </title> <booktitle> Artificial Intelligence 9, </booktitle> <pages> pp. </pages> <month> 1-35 </month> <year> (1977). </year>
Reference: [ Bockmayr, 1987 ] <author> A. Bockmayr, </author> <title> A note on a canonical theory with undecidable unification and matching problem, </title> <editor> J. </editor> <booktitle> of Automated Reasoning 3, </booktitle> <pages> pp. </pages> <month> 379-381 </month> <year> (1987). </year>
Reference-contexts: The latter is Hilbert's Tenth Problem, shown to be undecidable in [ Matijasevic, 1970 ] . (Cf. <ref> [ Bockmayr, 1987; Heilbrunner-Holldobler, 1987 ] </ref> .) When a convergent R is available, a one-way sort of paramodulation suffices, due to the existence of a rewrite proof for an arbitrary valid equation [ Dershowitz-etal, 1987b; Martelli-etal, 1989 ] .
Reference: [ Book, 1987 ] <author> R. V. </author> <title> Book, Thue systems as rewriting systems, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 3 (1&2), </booktitle> <pages> pp. </pages> <month> 39-68 (February/April </month> <year> 1987). </year>
Reference-contexts: A string-rewriting system, or semi-Thue system, is one that has monadic words ending in the same variable (i.e. strings of elements of T (F 1 ; fxg)) as left- and right-hand side terms; <ref> [ Book, 1987 ] </ref> is a survey of string rewriting. The (first three) Coffee Can Games can 6 be formulated as string-rewriting systems, with white and black as monadic symbols.
Reference: [ Book-etal, 1981 ] <author> R. V. Book, M. Jantzen and C. Wrathan, </author> <title> Monadic Thue systems, </title> <booktitle> Theoretical Computer Science 19 (3), </booktitle> <pages> pp. </pages> <month> 231-251 </month> <year> (1981). </year> <month> 48 </month>
Reference-contexts: In particular, we will see that confluence is decidable for finite, terminating systems. Confluence, in general, is undecidable [ Huet, 1980 ] , even if all rules are monadic <ref> [ Book-etal, 1981 ] </ref> . For finite ground systems|even if they are nonterminating|decision procedures exist (see [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] ). Ground confluence, on the other hand, is undecidable, even if the system is terminating [ Kapur-etal, 1987 ] .
Reference: [ Bloom-Tindell, 1983 ] <author> S. L. Bloom and R. Tindell, </author> <title> Varieties of `if-then-else', </title> <journal> SIAM J. on Computing 12 (4), </journal> <pages> pp. </pages> <month> 677-707 (November </month> <year> 1983). </year>
Reference-contexts: Still, it is remarkable that equational axioms E can be given for if then else such that an equation is valid for Mod (E) iff it is valid in the "if-then-else" models <ref> [ Bloom-Tindell, 1983; Guessarian-Meseguer, 1987 ] </ref> . Let E be a set of equations. Clearly, replacement of equals for equals is sound, i.e. E ` s = t implies Mod (E) j= s = t for all s and t.
Reference: [ Boudet, 1989 ] <author> A. Boudet, </author> <title> AC-unification is easy, </title> <type> Report, </type> <institution> Laboratoire de Recherche en Informatique, Universite Paris-Sud, Orsay, </institution> <address> France (April 1989). </address>
Reference-contexts: For example, a complete unification algorithm exists for associativity and commutativity (AC) [ Stickel, 1981; Herold-Siekmann, 1987 ] ; alternative algorithms with better performance are <ref> [ Kirchner, 1989; Boudet, 1989 ] </ref> . Other theories for which algorithms are available that compute finite, complete sets of most general E-unifiers include commutativity, AC with identity and/or idempotency (see [ Fages, 1987 ] ), as well as Boolean rings (see [ Boudet-etal, 1988 ] ).
Reference: [ Boudet-etal, 1988 ] <author> A. Boudet, J.-P. Jouannaud and M. Schmidt-Schau, </author> <title> Unification in free extensions of Boolean rings and Abelian groups, </title> <booktitle> Proc. of the Third Symposium on Logic in Computer Science, </booktitle> <address> Edinburgh, Scotland, </address> <pages> pp. 121-130. </pages> <note> To appear in J. of Symbolic Computation (July 1988). </note>
Reference-contexts: Other theories for which algorithms are available that compute finite, complete sets of most general E-unifiers include commutativity, AC with identity and/or idempotency (see [ Fages, 1987 ] ), as well as Boolean rings (see <ref> [ Boudet-etal, 1988 ] </ref> ). For many of these theories, unification is believed intractable from the time-complexity point of view [ Kapur-Narendran, 1986 ] . Of course, E-unifiability is semi-decidable for recursively-enumerable E. <p> Methods of combining unification algorithms for well-behaved theories that do not share symbols have been given in <ref> [ Yelick, 1987; Kirchner, 1989; Boudet-etal, 1988 ] </ref> ; The general case was solved in [ Schmidt-Schauss, 1988 ] . <p> With fairness, we get that a rewrite proof between two ground terms s and t will eventually be generated iff s $ fl E 0 t [ Hsiang-Rusinowitch, 1987 ] . Thus, the word problem in arbitrary equational theories can always be semi-decided by ordered completion. (See <ref> [ Boudet-etal, 1988 ] </ref> for an interesting application.) It is not hard to see that OC can mimic KB for any given equational theory E and reduction ordering (not necessarily total on G).
Reference: [ Brand-etal, 1978 ] <author> D. Brand, J. A. Darringer and W. J. Joyner, Jr., </author> <title> Completeness of conditional reductions, </title> <type> Report RC 7404, </type> <institution> IBM Thomas J. Watson Research Center, </institution> <address> Yorktown Heights, NY (De-cember 1978). </address>
Reference-contexts: In the above example, is a term push (top (s); pop (s)) rewritten whenever the subterm s is such that the condition empty?(s) = no can be proved, whenever a rewrite proof exists, or only when empty?(s) rewrites to no? The ramifications of various choices are discussed in <ref> [ Brand-etal, 1978; Bergstra-Klop, 1986; Dershowitz-etal, 1988 ] </ref> .
Reference: [ Brown, 1975 ] <author> T. C. Brown, Jr., </author> <title> A structured design-method for specialized proof procedures, </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, Pasadena, </institution> <address> CA (1975). </address>
Reference-contexts: The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] . Early forerunners of ordered completion were <ref> [ Lankford, 1975; Brown, 1975 ] </ref> . Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] .
Reference: [ Burckert-etal, 1987 ] <author> H.-J. J. B urckert, A. Herold and M. Schmidt-Schau, </author> <title> On equational theories, unification and decidability, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 204-215. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin (May 1987). </note>
Reference-contexts: Note that a unification algorithm that generates a complete set of most general unifiers (for terms without free constants) does not automatically work for matching (one cannot just treat the variables of t as constants, since that changes the algebra and may introduce unsound solutions) <ref> [ Burckert-etal, 1987 ] </ref> . 6.3 Narrowing Even when a convergent system R exists for a theory E, E-unification problem remains only semi-decidable.
Reference: [ Buchberger-Loos, 1982 ] <author> B. Buchberger and R. Loos, </author> <title> Algebraic simplification, in: Computer Algebra, </title> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 11-43 </month> <year> (1982). </year>
Reference-contexts: The completion procedure, its extensions, refinements, and main uses, are examined in Section 8. Brief mention of variations on the rewriting theme is made in the final section. 1.1 Further Reading Previous surveys of term rewriting include <ref> [ Huet-Oppen, 1980; Buchberger-Loos, 1982; Jouannaud-Lescanne, 1987; Klop, 1987 ] </ref> . 2 SYNTAX Algebraic data types are an important application area for rewrite-based equational reasoning.
Reference: [ Buchberger, 1987 ] <author> B. </author> <title> Buchberger, History and basic features of the critical-pair/completion procedure, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 3 (1&2), </booktitle> <pages> pp. </pages> <month> 3-38 (February/April </month> <year> 1987). </year>
Reference-contexts: For a book focusing on the abstract view of completion and its variants, see [ Bachmair, 1989b ] . The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and <ref> [ Buchberger, 1987 ] </ref> . Reve [ Lescanne, 1983 ] , Formel [ Fages, 1984 ] , Kads [ Stickel, 1986 ] , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion.
Reference: [ Butler-Lankford, 1980 ] <author> G. Butler and D. S. Lankford, </author> <title> Experiments with computer implementations of procedures which often derive decision algorithms for the word problem in abstract algebras, </title> <institution> Memo MTP-7, Department of Mathematics, Louisiana Tech. University, Ruston, </institution> <note> LA (August 1980). </note>
Reference-contexts: One of the nice things about reduced systems is that, for any given equational theory, there can be only one (finite or infinite) canonical system contained in a particular reduction ordering <ref> [ Butler-Lankford, 1980; Metivier, 1983 ] </ref> . This uniqueness result is up to literal similarity.
Reference: [ Choppy-etal, 1987 ] <author> C. Choppy, S. Kaplan and M. Soria, </author> <title> Algorithmic complexity of term rewriting systems, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 256-285. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin (May 1987). </note>
Reference-contexts: The multiset and lexicographic path orderings, and their variants (see [ Rusinowitch, 1987 ] ), have been implemented in many rewriting-rule based theorem provers (e.g. [ Lescanne, 1984 ] ). Some 25 results on the complexity of derivations appear in <ref> [ Choppy-etal, 1987 ] </ref> . 6 SATISFIABILITY We turn our attention now to the determination of satisfiability.
Reference: [ Church-Rosser, 1936 ] <author> A. Church and J. B. Rosser, </author> <title> Some properties of conversion, </title> <journal> Transactions of the American Mathematical Society 39, </journal> <pages> pp. </pages> <month> 472-482 </month> <year> (1936). </year>
Reference-contexts: When that is the case, i.e. when the relation $ fl R is contained in ! fl R ffi fl the system is called Church-Rosser , after a property in <ref> [ Church-Rosser, 1936 ] </ref> . See Figure 1 (a).
Reference: [ Cohn, 1981 ] <author> P. M. Cohn, </author> <title> Universal Algebra, </title> <address> D. </address> <publisher> Reidel, </publisher> <address> Dordrecht, Holland. </address> <note> Second edition (1981). </note>
Reference-contexts: Induction on terminating relations, sometimes called "Noetherian induction," is essentially well-founded induction (i.e. transfinite induction extended to partial orderings); see, for example, <ref> [ Cohn, 1981 ] </ref> . We will have occasion to employ this technique in Sections 4.1 and 8.2.
Reference: [ Collins, 1975 ] <author> G. Collins, </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition, </title> <booktitle> Proc. Second GI Conference on Automata Theory and Formal Languages, </booktitle> <pages> pp. 134-183. </pages> <note> Available as Vol. 33, Lecture Notes in Computer Science, Springer, Berlin (1975). </note>
Reference-contexts: Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic [ Presburger, 1927; Shostak, 1979 ] , real closed fields <ref> [ Tarski, 1951; Collins, 1975 ] </ref> and monoids [ Makanin, 1978 ] .
Reference: [ Colmerauer, 1984 ] <author> A. Colmerauer, </author> <title> Equations and inequations on finite and infinite trees, </title> <booktitle> Proc. of the Second International Conference on Fifth Generation Computer Systems, </booktitle> <address> Tokyo, Japan, </address> <pages> pp. </pages> <month> 85-99 </month> <year> (1984). </year>
Reference-contexts: The coalesce rule allows us to avoid the use of "multi-equations"; cf. [ Martelli-Montanari, 1982 ] . Eliminating the check rule produces solutions over the domain of (infinite) "rational" trees [ Huet, 1976 ] , and has ramifications for the semantics of some Prolog implementations <ref> [ Colmerauer, 1984 ] </ref> . 6.2 Semantic Unification When it comes to E-unification, the situation is much more complex.
Reference: [ Comon-Lescanne, 1989 ] <author> H. Comon and P. Lescanne, </author> <title> Equational problems and disunification, </title> <journal> J. of Symbolic Computation. </journal> <note> To appear (1989). </note>
Reference: [ Comon, 1989 ] <author> H. Comon, </author> <title> Disunification and inductive proofs, </title> <journal> J. of Computer Systems and Sciences. </journal> <note> To appear (1989). </note>
Reference-contexts: Ground reducibility is decidable for finite R and empty S [ Plaisted, 1985; Kapur-etal, 1987 ] . A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms <ref> [ Comon, 1989 ] </ref> . Testing for ground R-reducibility, however, requires exponential time, even for left-linear R [ Kapur-etal, 1987 ] . In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems.
Reference: [ Curry-Feys, 1958 ] <author> H. B. Curry and R. Feys, </author> <title> Combinatory Logic, 1, </title> <publisher> North-Holland, </publisher> <address> Amsterdam (1958). </address> <month> 49 </month>
Reference-contexts: (See the interesting historical comments at the end of [ Tarski-Givant, 1985 ] .) A prime example of an undecidable equational theory is Combinatory Logic (with binary infix symbol "" and constants S, K, and I): I x = x ((S x) y) z = (x z) (y z) (see <ref> [ Curry-Feys, 1958 ] </ref> ). Most disconcertingly, there are finitely-based, decidable theories for which there can be no rewriting-system decision procedure. For example, no finite system|even over an enlarged vocabulary|can rewrite any two terms, equal by commutativity, to the same term [ Dershowitz-etal, 1988 ] . <p> If R is regular, then ! k R is strongly confluent. The symbol ! k R denotes one "parallel" application of rules in R at disjoint redexes. (For the name and inspiration of this lemma, cf. <ref> [ Curry-Feys, 1958 ] </ref> ). The confluence of regular systems establishes the consistency of the operational semantics of recursive programming languages; see [ Raoult-Vuillemin, 1980 ] .
Reference: [ Dauchet, 1989 ] <author> M. Dauchet, </author> <title> Simulation of Turing machines by a left-linear rewrite rule, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, </address> <publisher> NC, </publisher> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 109-120 (April </month> <year> 1989). </year>
Reference-contexts: In general, it is undecidable whether a system is terminating, even if both sides of all rules are monadic [ Huet-Lankford, 1978 ] or if it has only one left-linear rule <ref> [ Dauchet, 1989 ] </ref> . For ground systems, however, termination is decidable [ Huet-Lankford, 1978 ] .
Reference: [ Dauchet-etal, 1987 ] <author> M. Dauchet, S. Tison, T. Heuillard and P. Lescanne, </author> <title> Decidability of the confluence of ground term rewriting systems, </title> <booktitle> Proc. of the Second Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <pages> pp. </pages> <month> 353-359 (June </month> <year> 1987). </year>
Reference-contexts: In particular, we will see that confluence is decidable for finite, terminating systems. Confluence, in general, is undecidable [ Huet, 1980 ] , even if all rules are monadic [ Book-etal, 1981 ] . For finite ground systems|even if they are nonterminating|decision procedures exist (see <ref> [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] </ref> ). Ground confluence, on the other hand, is undecidable, even if the system is terminating [ Kapur-etal, 1987 ] .
Reference: [ Davis-Hersh, 1973 ] <author> M. Davis and R. </author> <title> Hersh, </title> <booktitle> Hilbert's 10th problem, Scientific American 229 (5), </booktitle> <pages> pp. </pages> <month> 84-91 (November </month> <year> 1973). </year>
Reference-contexts: Questions of decidability of unification in equational theories are summarized in [ Siekmann, 1984 ] ; a summary of complexity results for some of the decidable cases is [ Kapur-Narendran, 1987 ] . A popular exposition on the undecidability of the existence of solutions to Diophantine equations is <ref> [ Davis-Hersh, 1973 ] </ref> . For a comprehensive treatment of narrowing and E-unification, see [ Kirchner, 1985 ] .
Reference: [ Dehn, 1911 ] <author> M. Dehn, </author> <title> Uber unendliche diskontinuierliche Gruppen, </title> <journal> Mathematische Ann. </journal> <volume> 71, </volume> <pages> pp. </pages> <month> 116-144 </month> <year> (1911). </year>
Reference-contexts: See Figure 1 (a). Equivalent properties are defined in Section 4 and methods of establishing them are described in Section 7. 2.4 Decision Procedures One of our main concerns is in decision procedures for equational theories; an early example of such a procedure for groups is <ref> [ Dehn, 1911 ] </ref> . Terminating, Church-Rosser rewrite systems are convergent and define unique normal forms. For a convergent system R to determine provability in its underlying equational theory (treating its rules as equational axioms), it should have only a finite number of rules.
Reference: [ Dershowitz-Manna, 1979 ] <author> N. Dershowitz and Z. Manna, </author> <title> Proving termination with multiset orderings, </title> <booktitle> Communications of the ACM 22 (8), </booktitle> <pages> pp. </pages> <month> 465-476 (August </month> <year> 1979). </year>
Reference-contexts: If is well-founded, the induced ordering mul also is, as a consequence of Konig's Lemma for infinite trees <ref> [ Dershowitz-Manna, 1979 ] </ref> .
Reference: [ Dershowitz-Okada, 1988a ] <author> N. Dershowitz and M. Okada, </author> <title> Proof-theoretic techniques and the theory of rewriting, </title> <booktitle> Proc. of the Third Symposium on Logic in Computer Science, </booktitle> <address> Edinburgh, Scotland, </address> <pages> pp. </pages> <month> 104-111 (July </month> <year> 1988). </year>
Reference-contexts: Combining multiset and lexicographic path orderings into one [ Kamin-Levy, 1980 ] , gives a more powerful ordering, which we call the recursive path ordering and which is related to Ackermann's ordinal notation <ref> [ Dershowitz-Okada, 1988a ] </ref> . (The original "recursive path ordering" [ Dershowitz, 1982a ] was of the multiset variety.) Determining if a precedence exists that makes two terms comparable is NP-complete [ Krishnamoorthy-Narendran, 1984 ] . 24 These precedence-based orderings are "syntactic", looking at function symbols one at a time.
Reference: [ Dershowitz-Okada, 1988b ] <author> N. Dershowitz and M. Okada, </author> <title> Conditional equational programming and the theory of conditional term rewriting, </title> <booktitle> Proc. of the International Conference on Fifth Generation Computer Systems, </booktitle> <address> Tokyo, Japan (November 1988). </address>
Reference-contexts: Decreasing systems generalize the concept of "hierarchy" in the work of [ Remy, 1982 ] , and are slightly more general than the systems considered in [ Kaplan, 1987; Jouannaud-Waldmann, 1986 ] ; they have been extended in <ref> [ Dershowitz-Okada, 1988b ] </ref> to cover systems (important in logic programming) with variables in conditions that do not also appear in the left-hand side, e.g. g (x) = z j f (x) ! h (z).
Reference: [ Dershowitz-Plaisted, 1985 ] <author> N. Dershowitz and D. A. Plaisted, </author> <title> Logic programming cum applicative programming, </title> <booktitle> Proc. of the IEEE Symposium on Logic Programming, </booktitle> <address> Boston, MA, </address> <pages> pp. </pages> <month> 54-66 (July </month> <year> 1985). </year>
Reference-contexts: Recent proposals for logic programming languages, incorporating equality, have been based on conditional rewriting and narrowing (e.g. <ref> [ Dershowitz-Plaisted, 1985; Goguen-Meseguer, 1986 ] </ref> ; see [ Reddy, 1986 ] . For the above recursive definition of ! R to yield a decidable relation, restrictions must be made on the rules.
Reference: [ Dershowitz, 1979 ] <author> N. Dershowitz, </author> <title> A note on simplification orderings, </title> <booktitle> Information Processing Letters 9 (5), </booktitle> <pages> pp. </pages> <month> 212-215 (November </month> <year> 1979). </year>
Reference-contexts: Virtually all the reduction orderings used in rewriting-system termination proofs are simplification or derings. For instance, integer polynomial interpretations with nonnegative coefficients are. One can even 22 associate polynomials over the reals with function symbols and interpret terms as before <ref> [ Dershowitz, 1979 ] </ref> .
Reference: [ Dershowitz, 1982a ] <author> N. Dershowitz, </author> <title> Orderings for term-rewriting systems, </title> <booktitle> Theoretical Computer Science 17 (3), </booktitle> <pages> pp. </pages> <month> 279-301 (March </month> <year> 1982). </year>
Reference-contexts: Such orderings are the main tool for proving termination of rewriting: Definition 14. A transitive and reflexive rewrite relation _ is a simplification ordering if it contains the subterm ordering &gt;. Simplification orderings are quasi-orderings (called "quasi-simplification orderings" in <ref> [ Dershowitz, 1982a ] </ref> ) and are what Higman [ Higman, 1952 ] called "divisibility orders." For finite R, only a finite number of function symbols can appear in any derivation t 1 ! R t 2 ! R . <p> Thus, a finite R over T is terminating if there exists any simplification ordering _ of T such that R is contained in its strict part <ref> [ Dershowitz, 1982a ] </ref> . The existence of such a simplification ordering means that t j _ t k for all k &gt; j, which precludes any t j from being homeomorphically embedded in a subsequent t k , as would necessarily be the case for any infinite derivation. <p> This suggests the possibility of construct ing simplification orderings directly from well-founded orderings of vocabularies, or precedences. The idea <ref> [ Plaisted, 1978; Dershowitz, 1982a ] </ref> is that a term s should be bigger than any term that is built from terms smaller than s which are connected together by a structure of function symbols smaller, in the precedence, than the root of s. <p> One such ordering is the "multiset path ordering" introduced in <ref> [ Dershowitz, 1982a ] </ref> : Definition 15. <p> The multiset path ordering contains the homeomorphic embedding relation and is, therefore, a simplification ordering. (That ! + mpo is irreflexive is true, but not self-evident.) Moreover, if is a well-founded ordering of (possibly infinite) F , then mpo is a well-founded ordering of T . To see this <ref> [ Huet, 1980; Dershowitz, 1982a ] </ref> , note that (by Zorn's Lemma) a given precedence may be extended to an ordering &gt; such that the quasi-ordering &gt; [ , call it &gt; _ , is a total well-quasi-ordering of F . <p> Combining multiset and lexicographic path orderings into one [ Kamin-Levy, 1980 ] , gives a more powerful ordering, which we call the recursive path ordering and which is related to Ackermann's ordinal notation [ Dershowitz-Okada, 1988a ] . (The original "recursive path ordering" <ref> [ Dershowitz, 1982a ] </ref> was of the multiset variety.) Determining if a precedence exists that makes two terms comparable is NP-complete [ Krishnamoorthy-Narendran, 1984 ] . 24 These precedence-based orderings are "syntactic", looking at function symbols one at a time.
Reference: [ Dershowitz, 1982b ] <author> N. Dershowitz, </author> <title> Applications of the Knuth-Bendix completion procedure, </title> <booktitle> Proc. of the Seminaire d'Informatique Theorique, Paris, France, </booktitle> <pages> pp. </pages> <month> 95-111 (December </month> <year> 1982). </year>
Reference-contexts: It can readily be shown that R (G) R 0 (G), for any two systems R and R 0 , iff every left-hand side of R 0 is ground R-reducible <ref> [ Dershowitz, 1982b; 15 Jouannaud-Kounalis, 1989 ] </ref> . It follows that R and R 0 have the same inductive theory if they are both ground convergent and every left-hand side of one system is ground reducible by the other. <p> If R 0 passes this test, then the two systems have the same ground normal forms and s = I (R) t for each s = t in H <ref> [ Dershowitz, 1982b; Jouannaud-Kounalis, 1989 ] </ref> . If, on the other hand, s 6= I (R) t, then fair completion will uncover an inconsistency, if it does not fail. This approach is also valid when extended-completion (or ordered-completion) is used [ Goguen, 1980 ] .
Reference: [ Dershowitz, 1984 ] <author> N. Dershowitz, </author> <title> Equations as programming language, </title> <booktitle> Proc. of the Fourth Jerusalem Conference on Information Technology, IEEE Computer Society, </booktitle> <pages> pp. 114-123, pp. </pages> <month> 114-124 (May </month> <year> 1984). </year>
Reference-contexts: The discovery [ Fay, 1979 ] that convergent rewrite systems can also be used to enumerate answers to satisfiability questions for equational theories led to their application <ref> [ Dershowitz, 1984 ] </ref> within the logic programming paradigm. Rewriting methods have turned out to be among the more successful approaches to equational theorem proving.
Reference: [ Dershowitz, 1985 ] <author> N. Dershowitz, </author> <title> Computing with rewrite systems, </title> <booktitle> Information and Control 64 (2/3), </booktitle> <pages> pp. </pages> <month> 122-157 (May/June </month> <year> 1985). </year>
Reference-contexts: In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in <ref> [ Dershowitz, 1985 ] </ref> and [ Kounalis, 1985 ] .
Reference: [ Dershowitz, 1987 ] <author> N. Dershowitz, </author> <title> Termination of rewriting, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 3 (1&2), </booktitle> <pages> pp. 69-115. </pages> <booktitle> Corrigendum [December 1987], </booktitle> <volume> Vol. 4, No. 3, </volume> <pages> pp. </pages> <month> 409-410 (February/April </month> <year> 1987). </year>
Reference-contexts: computations can be simulated by rewrite systems in at least two different ways: by systems of monadic rules that rewrite instantaneous descriptions according to the machine's transitions [ Huet-Lankford, 1978 ] , and by a (non-monadic) one-rule system in which the transitions appear as part of the terms ([Dauchet-1989], refining <ref> [ Dershowitz, 1987 ] </ref> ). Thus, rewrite systems provide a fully general programming paradigm (to the extent that Church's Thesis defines "fully general"). These constructions also imply that most interesting properties, including convergence, are in general undecidable. <p> For a survey of the history and applications of well-quasi-orderings, see [ Kruskal, 1972 ] . For a comprehensive survey of termination, see <ref> [ Dershowitz, 1987 ] </ref> . The multiset and lexicographic path orderings, and their variants (see [ Rusinowitch, 1987 ] ), have been implemented in many rewriting-rule based theorem provers (e.g. [ Lescanne, 1984 ] ).
Reference: [ Dershowitz, 1988 ] <author> N. Dershowitz, </author> <title> Proving equational Horn clauses, </title> . <note> Submitted (1988). </note>
Reference-contexts: To handle more general systems of conditional rules, rules must be overlapped on 45 conditions, extending ordered completion to what has been called "oriented paramodulation" <ref> [ Ganzinger, 1987; Dershowitz, 1988; Kounalis-Rusinowitch, 1988 ] </ref> . 9.3 Priority Rewriting In priority rewriting, the choice among several possible redexes is constrained to meet, a priori, given priorities on the rules. Priorities, then, are just a partial ordering of rules.
Reference: [ Dershowitz, 1989 ] <author> N. Dershowitz, </author> <title> Completion and its applications, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 31-86 </month> <year> (1989). </year>
Reference-contexts: A first-order method, using Boolean rings and based on polynomial ideals, is [ Kapur-Narendran, 1985 ] . 8.7 Further Reading A survey of completion and its manifold applications may be found in <ref> [ Dershowitz, 1989 ] </ref> . For a book focusing on the abstract view of completion and its variants, see [ Bachmair, 1989b ] .
Reference: [ Dershowitz-etal, 1987a ] <author> N. Dershowitz, M. Okada and G. Sivakumar, </author> <title> Confluence of conditional rewrite systems, </title> <booktitle> Proc. of the First International Workshop on Conditional Term Rewriting Systems, </booktitle> <editor> S. Kaplan, J.-P. Jouannaud, ed., </editor> <address> Orsay, France. </address> <note> Available as Vol. </note> <month> 308, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin [1988], </address> <pages> pp. </pages> <month> 31-44 (July </month> <year> 1987). </year> <month> 50 </month>
Reference-contexts: For non-decreasing systems, even ones for which the rewrite relation is terminating, the rewrite relation may be undecidable [ Kaplan, 1987 ] , and the Critical Pair Lemma does not hold, though terminating systems having no critical pairs are confluent (see <ref> [ Dershowitz-etal, 1987a ] </ref> ).
Reference: [ Dershowitz-etal, 1987b ] <author> N. Dershowitz and G. Sivakumar, </author> <title> Solving goals in equational languages, </title> <booktitle> Proc. of the First International Workshop on Conditional Term Rewriting Systems, </booktitle> <editor> S. Kaplan, J.-P. Jouan-naud, ed., </editor> <address> Orsay, France. </address> <note> Available as Vol. </note> <month> 308, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin [1988], </address> <pages> pp. </pages> <month> 45-55 (July </month> <year> 1987). </year>
Reference-contexts: The latter is Hilbert's Tenth Problem, shown to be undecidable in [ Matijasevic, 1970 ] . (Cf. [ Bockmayr, 1987; Heilbrunner-Holldobler, 1987 ] .) When a convergent R is available, a one-way sort of paramodulation suffices, due to the existence of a rewrite proof for an arbitrary valid equation <ref> [ Dershowitz-etal, 1987b; Martelli-etal, 1989 ] </ref> .
Reference: [ Dershowitz-etal, 1988 ] <author> N. Dershowitz, L. Marcus and A. Tarlecki, </author> <title> Existence, uniqueness, and construction of rewrite systems, </title> <journal> SIAM J. on Computing 17 (4), </journal> <pages> pp. </pages> <month> 629-639 (August </month> <year> 1988). </year>
Reference-contexts: Most disconcertingly, there are finitely-based, decidable theories for which there can be no rewriting-system decision procedure. For example, no finite system|even over an enlarged vocabulary|can rewrite any two terms, equal by commutativity, to the same term <ref> [ Dershowitz-etal, 1988 ] </ref> . In other words, no term-rewriting system can decide validity in the decidable theory defined by the commu-tativity axiom, x y = y x, since that equation, oriented in either direction, gives a non-terminating rewrite system. <p> This uniqueness result is up to literal similarity. Uniqueness does not, however, hold for arbitrary canonical class-rewriting systems <ref> [ Dershowitz-etal, 1988 ] </ref> , but does for associative-commutative systems [ Lankford-Ballantyne, 1983 ] . 7.6 Further Reading A detailed study of the Church-Rosser property of non-overlapping systems is [ Klop, 1980 ] . <p> Nonetheless, completion may fail to find R, even when given ! + R as the reduction ordering <ref> [ Dershowitz-etal, 1988 ] </ref> . For example, despite the existence of ff (a) ! a; c ! a; b ! ag, no successful sequence exists for ff (b) = a; f (c) = c; b = cg, as long as b and c are incomparable under the given ordering. <p> In fact, on account of the partialness of the ordering, some sequences may fail while others may succeed <ref> [ Avenhaus, 1985; Dershowitz-etal, 1988 ] </ref> . For example, let be a recursive path ordering with precedence f d c a and d b a (but b and c are incomparable), and let E 0 = ff (c) = c; b = d; c = d; f (d) = ag. <p> In the above example, is a term push (top (s); pop (s)) rewritten whenever the subterm s is such that the condition empty?(s) = no can be proved, whenever a rewrite proof exists, or only when empty?(s) rewrites to no? The ramifications of various choices are discussed in <ref> [ Brand-etal, 1978; Bergstra-Klop, 1986; Dershowitz-etal, 1988 ] </ref> . <p> For the above recursive definition of ! R to yield a decidable relation, restrictions must be made on the rules. The most general well-behaved proposal are decreasing systems, terminating systems with conditions that are smaller (in a well-defined sense) than left-hand sides <ref> [ Dershowitz-etal, 1988 ] </ref> ; hence, recursively evaluating the conditions always terminates.
Reference: [ Dershowitz-etal, 1988 ] <author> N. Dershowitz, M. Okada and G. Sivakumar, </author> <title> Canonical conditional rewrite systems, </title> <booktitle> Proc. of the Ninth Conference on Automated Deduction, </booktitle> <address> Argonne, IL, </address> <pages> pp. 538-549. </pages> <note> Available as Vol. 310, Lecture Notes in Computer Science, Springer, Berlin (May 1988). </note>
Reference-contexts: Most disconcertingly, there are finitely-based, decidable theories for which there can be no rewriting-system decision procedure. For example, no finite system|even over an enlarged vocabulary|can rewrite any two terms, equal by commutativity, to the same term <ref> [ Dershowitz-etal, 1988 ] </ref> . In other words, no term-rewriting system can decide validity in the decidable theory defined by the commu-tativity axiom, x y = y x, since that equation, oriented in either direction, gives a non-terminating rewrite system. <p> This uniqueness result is up to literal similarity. Uniqueness does not, however, hold for arbitrary canonical class-rewriting systems <ref> [ Dershowitz-etal, 1988 ] </ref> , but does for associative-commutative systems [ Lankford-Ballantyne, 1983 ] . 7.6 Further Reading A detailed study of the Church-Rosser property of non-overlapping systems is [ Klop, 1980 ] . <p> Nonetheless, completion may fail to find R, even when given ! + R as the reduction ordering <ref> [ Dershowitz-etal, 1988 ] </ref> . For example, despite the existence of ff (a) ! a; c ! a; b ! ag, no successful sequence exists for ff (b) = a; f (c) = c; b = cg, as long as b and c are incomparable under the given ordering. <p> In fact, on account of the partialness of the ordering, some sequences may fail while others may succeed <ref> [ Avenhaus, 1985; Dershowitz-etal, 1988 ] </ref> . For example, let be a recursive path ordering with precedence f d c a and d b a (but b and c are incomparable), and let E 0 = ff (c) = c; b = d; c = d; f (d) = ag. <p> In the above example, is a term push (top (s); pop (s)) rewritten whenever the subterm s is such that the condition empty?(s) = no can be proved, whenever a rewrite proof exists, or only when empty?(s) rewrites to no? The ramifications of various choices are discussed in <ref> [ Brand-etal, 1978; Bergstra-Klop, 1986; Dershowitz-etal, 1988 ] </ref> . <p> For the above recursive definition of ! R to yield a decidable relation, restrictions must be made on the rules. The most general well-behaved proposal are decreasing systems, terminating systems with conditions that are smaller (in a well-defined sense) than left-hand sides <ref> [ Dershowitz-etal, 1988 ] </ref> ; hence, recursively evaluating the conditions always terminates.
Reference: [ Dick-Cunningham, 1985 ] <author> R. J. Cunningham and A. J. J. Dick, </author> <title> Rewrite systems on a lattice of types, </title> <journal> Acta Informatica 22, </journal> <pages> pp. </pages> <month> 149-169 </month> <year> (1985). </year>
Reference: [ Downey-etal, 1980 ] <author> P. J. Downey, R. Sethi and R. E. Tarjan, </author> <title> Variations on the common subexpres-sions problem, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 27 (4), </booktitle> <pages> pp. </pages> <month> 758-771 </month> <year> (1980). </year>
Reference-contexts: In fact, various O (n lg n) congruence-closure algorithms exist for the purpose (e.g. <ref> [ Downey-etal, 1980 ] </ref> ; see also [ Snyder, 1989 ] ).
Reference: [ Ehrenfeucht-etal, 1983 ] <author> A. Ehrenfeucht, D. Haussler and G. Rozenberg, </author> <title> On regularity of context-free languages, </title> <booktitle> Theoretical Computer Science 27 (3), </booktitle> <pages> pp. </pages> <month> 311-332 (December </month> <year> 1983). </year>
Reference-contexts: The well-foundedness of this "pattern path ordering" is based on a powerful extension of Kruskal's Tree Theorem [ Puel, 1989 ] (analogous to a similar theorem on strings in <ref> [ Ehrenfeucht-etal, 1983 ] </ref> ). 5.4 Combined Systems We saw above that polynomial orderings are applicable to associative-commutative systems, but are severely restrictive. The multiset path ordering, though compatible with commutativity axioms, is not well-founded when associativity is added as a bi-directional rule to mpo.
Reference: [ Ehrig, 1977 ] <author> H. Ehrig, </author> <title> Introduction to the algebraic theory of graph grammars, </title> <booktitle> Proc. of the International Conferenece on the Fundamentals of Complexity Theory, Poznan-Kornik, Poland, </booktitle> <pages> pp. 245-255. </pages> <note> Available as Vol. 56, Lecture Notes in Computer Science, Springer, Berlin (1977). </note>
Reference-contexts: Unlike trees, graphs do not have a simple structure lending itself to inductive definitions and proofs, for which reason, the graph-rewriting definitions, as introduced in <ref> [ Ehrig, 1977 ] </ref> and simplified in [ Raoult, 1984 ] , have a global flavor. A categorical framework is used to precisely define matching and replacement; a rewriting is then a pushout in a suitable category.
Reference: [ Evans, 1951 ] <author> T. Evans, </author> <title> On multiplicative systems defined by generators and relations, I, </title> <booktitle> Proc. of the Cambridge Philosophical Society 47, </booktitle> <pages> pp. </pages> <month> 637-649 </month> <year> (1951). </year>
Reference-contexts: Actually, it is enough if R is ground-convergent , that is, if every ground term has a unique normal form. Many rewriting-system decision procedures are known; perhaps the first rewriting-based decision procedure for a word problem is the one in <ref> [ Evans, 1951 ] </ref> for "loops". When a rewriting decision procedure exists, it can be very effective. In Section 8, we will elaborate on systematic methods used to generate convergent systems from given equational axioms. Of course, not all equational theories can be decided by rewriting|for a variety of reasons.
Reference: [ Fages-Huet, 1983 ] <author> F. Fages and G. Huet, </author> <title> Unification and matching in equational theories, </title> <booktitle> Proc. of the Eighth Colloquium on Trees in Algebra and Programming, l'Aquilla, Italy, </booktitle> <pages> pp. 205-220. </pages> <note> Available as Vol. 159, Lecture Notes in Computer Science, Springer, Berlin (1983). </note>
Reference-contexts: are decidable theories with infinite sets of most general unifiers (an example is the set of solutions fa i ji 1g to x a = a x, where "" is associative [ Plotkin, 1972 ] ), and there are some for which there are solutions, but no most general one <ref> [ Fages-Huet, 1983 ] </ref> (an example is associativity plus idempotence [ Baader, 1986 ] ). We say that a set S of E-unifiers is complete if for every E-unifier there is one in S that is more general with respect to E-subsumption.
Reference: [ Fages, 1984 ] <author> F. Fages, </author> <title> Le systeme KB: manuel de reference: </title> <editor> presentation et bibliographie, mise en oeuvre, Report R. G. 10.84, Greco de Programmation, </editor> <address> Bordeaux, France (1984). </address>
Reference-contexts: The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and [ Buchberger, 1987 ] . Reve [ Lescanne, 1983 ] , Formel <ref> [ Fages, 1984 ] </ref> , Kads [ Stickel, 1986 ] , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion.
Reference: [ Fages, 1987 ] <author> F. Fages, </author> <title> Associative-commutative unification, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 3 (3), </booktitle> <pages> pp. </pages> <month> 257-275 (June </month> <year> 1987). </year>
Reference-contexts: Other theories for which algorithms are available that compute finite, complete sets of most general E-unifiers include commutativity, AC with identity and/or idempotency (see <ref> [ Fages, 1987 ] </ref> ), as well as Boolean rings (see [ Boudet-etal, 1988 ] ). For many of these theories, unification is believed intractable from the time-complexity point of view [ Kapur-Narendran, 1986 ] . Of course, E-unifiability is semi-decidable for recursively-enumerable E.
Reference: [ Fay, 1979 ] <author> M. Fay, </author> <title> First-order unification in an equational theory, </title> <booktitle> Proc. of the Fourth Workshop on Automated Deduction, </booktitle> <address> Austin, TX, </address> <pages> pp. </pages> <month> 161-167 (February </month> <year> 1979). </year>
Reference-contexts: In that seminal paper, it was also demonstrated how failure of the test (as transpires for the first Coffee Can game) often suggests additional rules that can be used to "complete" a non-convergent system into a convergent one. The discovery <ref> [ Fay, 1979 ] </ref> that convergent rewrite systems can also be used to enumerate answers to satisfiability questions for equational theories led to their application [ Dershowitz, 1984 ] within the logic programming paradigm. Rewriting methods have turned out to be among the more successful approaches to equational theorem proving. <p> : ; s n ! ? y n ; y ! ? f (y 1 ; : : : ; y n )g [ P ; S) if y 2 X and the y i are new variables This set of rules subsumes "narrowing", as used for this purpose in <ref> [ Fay, 1979 ] </ref> : 29 Definition 19. <p> Variations on narrowing include: normal narrowing <ref> [ Fay, 1979 ] </ref> (in which terms are normalized via ! ! R before narrowing), basic narrowing [ Hullot, 1980 ] (in which the substitution part of prior narrowings is not subsequently narrowed), and their combination [ Rety-etal, 198? ] , all of which are semi-complete for convergent R.
Reference: [ Feferman, 1968 ] <author> S. Feferman, </author> <title> Systems of predicative analysis II: Representation of ordinals, </title> <editor> J. </editor> <booktitle> of Symbolic Logic 33 (2), </booktitle> <pages> pp. </pages> <month> 193-220 (June </month> <year> 1968). </year>
Reference-contexts: If the strict part of a precedence is of order type ff, then the multiset path ordering on the set of terms is of order type ff (0) in the notation of <ref> [ Feferman, 1968 ] </ref> .
Reference: [ Filman, 1978 ] <author> R. E. </author> <title> Filman, </title> <type> Personal communication (1978). </type>
Reference-contexts: A system is terminating iff such W, t , and exist. For example, the system below, which computes the disjunctive normal form of formulae, can be shown terminating <ref> [ Filman, 1978 ] </ref> with an exponential mapping into the natural numbers: not (not (x)) ! x not (and (x; y)) ! or (not (x); not (y)) and (or (y; z); x) ! or (and (y; x); and (z; x)) The mapping t : T ! f2; 3; : : :g
Reference: [ Freese-etal, 1989 ] <author> R. Freese, R. McKenzie, G. F. McNulty and W. Taylor, </author> <title> Algebras, Lattices, Varieties, II, </title> <publisher> Wadsworth, </publisher> <address> Monterey, CA. </address> <note> To appear (1989). </note>
Reference-contexts: On the other hand, equality (the word problem) is decidable in what are called "computable" algebras [ Meseguer-Goguen, 1985 ] ; see [ Wirsing, 1989 ] . 3.4 Further Reading For a survey of equational logic, see [ Taylor, 1979 ] . A comprehensive multi-volume work on varieties is <ref> [ McKenzie-etal, 1987; Freese-etal, 1989 ] </ref> . Some relevant recent results are summarized in [ McNulty, 1989 ] .
Reference: [ Fribourg, 1986 ] <author> L. </author> <title> Fribourg, A strong restriction of the inductive completion procedure, </title> <booktitle> Proc. of the Thirteenth EATCS International Conference on Automata, Languages and Programming, </booktitle> <editor> L. Kott, ed., </editor> <publisher> Rennes, France, </publisher> <pages> pp. 105-115. </pages> <note> Available as Vol. 226, Lecture Notes in Computer Science, Springer, Berlin; to appear in J. Symbolic Computation (July 1986). </note>
Reference-contexts: Consequently, there is no need (though it may help) to generate critical pairs between two rules derived from H 0 ; it suffices to consider critical pairs obtained by narrowing with R at a set of "covering" positions in H i <ref> [ Fribourg, 1986 ] </ref> . When, and if, these pairs all simplify away, the inductive theorems are proven. On the other hand, if any of the hypotheses are false, a contradiction must eventually surface in a fair derivation.
Reference: [ Futatsugi-etal, 1985 ] <author> K. Futatsugi, J. A. Goguen, J.-P. Jouannaud and J. Meseguer, </author> <booktitle> Principles of OBJ2, Conference Record of the Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> New Orleans, LA, </address> <pages> pp. </pages> <month> 52-66 (January </month> <year> 1985). </year> <month> 51 </month>
Reference-contexts: Thus, rewriting computes ground normal forms that are representatives of their congruence classes. It is in this sense that rewriting is a "correct" implementation of initial-algebra semantics. Specification languages based on abstract data types, such as OBJ <ref> [ Futatsugi-etal, 1985 ] </ref> , follow this implementation scheme: equations are used as rewrite rules, and unique normalization is needed for the operational and initial algebra semantics to coincide. Exactly those variable-free equations that follow necessarily from E hold in the initial algebra.
Reference: [ Gallier-Snyder, 1987 ] <author> J. H. Gallier and W. Snyder, </author> <title> A general complete E-unification procedure, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 192-203. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin (May 1987). </note>
Reference-contexts: Paramodulation (without the functional reflexivity axioms) [ Robinson-Wos, 1969 ] is one improvement over the obvious "British-museum" method of interleaving the production of substitutions with the search for equational proofs. Paramodulation may be improved upon by a more goal-oriented process. The following set of rules, inspired by <ref> [ Gallier-Snyder, 1987; Hsiang-Jouannaud, 1988 ] </ref> , does the trick: Decompose: (ff (s 1 ; : : : ; s m ) $ ? f (t 1 ; : : : ; t m )g [ P ; S) ) (fs 1 $ ? t 1 ; : : :; s
Reference: [ Ganzinger, 1987 ] <author> H. Ganzinger, </author> <title> A completion procedure for conditional equations, </title> <booktitle> Proc. of the First International Workshop on Conditional Term Rewriting Systems, </booktitle> <editor> S. Kaplan, J.-P. Jouannaud, ed., </editor> <address> Orsay, France. </address> <note> Available as Vol. </note> <month> 308, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin [1988], </address> <pages> pp. </pages> <month> 62-83 (July </month> <year> 1987). </year>
Reference-contexts: To handle more general systems of conditional rules, rules must be overlapped on 45 conditions, extending ordered completion to what has been called "oriented paramodulation" <ref> [ Ganzinger, 1987; Dershowitz, 1988; Kounalis-Rusinowitch, 1988 ] </ref> . 9.3 Priority Rewriting In priority rewriting, the choice among several possible redexes is constrained to meet, a priori, given priorities on the rules. Priorities, then, are just a partial ordering of rules.
Reference: [ Gardner, 1983 ] <author> M. Gardner, </author> <title> Mathematical games: Tasks you cannot help finishing no matter how hard you try to block finishing them, </title> <booktitle> Scientific American 24 (2), </booktitle> <pages> pp. </pages> <month> 12-21 (August </month> <year> 1983). </year>
Reference: [ Gobel, 1987 ] <author> R. G obel, </author> <title> Ground confluence, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 156-167. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin (May 1987). </note>
Reference-contexts: When, and if, these pairs all simplify away, the inductive theorems are proven. On the other hand, if any of the hypotheses are false, a contradiction must eventually surface in a fair derivation. The use of critical pair criteria in this connection is explored in <ref> [ Gobel, 1987; Kuchlin, 1989 ] </ref> . How to handle inductive equations that cannot be oriented is discussed in [ Bachmair, 1989b; Jouannaud-Kounalis, 1989 ] . 8.6 First-Order Theorem Proving Rewriting techniques have been applied to first-order theorem proving in two ways.
Reference: [ Gogolla, 1983 ] <author> M. Gogolla, </author> <title> Algebraic specifications with partially ordered sets and declarations, </title> <address> Forschungsbericht Informatik 169, Universitat Dortmund, Dortmund, West Germany (1983). </address>
Reference: [ Goguen-Meseguer, 1985 ] <author> J. A. Goguen and J. Meseguer, </author> <title> Completeness of many sorted equational deduction, </title> <editor> Houston J. </editor> <booktitle> of Mathematics 11 (3), </booktitle> <pages> pp. </pages> <month> 307-334 </month> <year> (1985). </year>
Reference-contexts: The appropriate semantic notion in this case is the many-sorted (heterogeneous) algebra. Under reasonable assumptions, virtually everything we have said extends to the multisorted case. Sorted (i.e. typed) rewriting has been dealt with, for example, in <ref> [ Huet-Oppen, 1980; Goguen-Meseguer, 1985 ] </ref> .
Reference: [ Goguen-Meseguer, 1986 ] <author> J. A. Goguen and J. </author> <title> Meseguer Eqlog: Equality, types, and generic modules for logic programming, in: Logic Programming: Functions, Relations, and Equations, </title> <editor> D. DeGroot, G. Lindstrom, ed., </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <pages> pp. </pages> <month> 295-363 </month> <year> (1986). </year>
Reference-contexts: Recent proposals for logic programming languages, incorporating equality, have been based on conditional rewriting and narrowing (e.g. <ref> [ Dershowitz-Plaisted, 1985; Goguen-Meseguer, 1986 ] </ref> ; see [ Reddy, 1986 ] . For the above recursive definition of ! R to yield a decidable relation, restrictions must be made on the rules.
Reference: [ Goguen-Meseguer, 1987 ] <author> J. A. Goguen and J. Meseguer, </author> <title> Order-sorted algebra I: Partial and overloaded operators, errors and inheritance, </title> <type> Unpublished report, </type> <institution> SRI International, </institution> <address> Menlo Park, CA (1987). </address>
Reference-contexts: Free algebras can be constructed in the order-sorted case <ref> [ Goguen-Meseguer, 1987 ] </ref> , but the algebra obtained is, in general, an amalgamation of the term algebra. To avoid this complication, a syntactic "regularity" condition (namely, that every term has a least sort) may be imposed on the signature [ Goguen-Meseguer, 1987 ] . <p> Free algebras can be constructed in the order-sorted case <ref> [ Goguen-Meseguer, 1987 ] </ref> , but the algebra obtained is, in general, an amalgamation of the term algebra. To avoid this complication, a syntactic "regularity" condition (namely, that every term has a least sort) may be imposed on the signature [ Goguen-Meseguer, 1987 ] . Subsorts also require run-time checking for syntactic validity. For example, the term pop (push (e; push (e; fl))) has sort Stack, so its top cannot be taken, yet that term is equal to the nonempty stack push (e; fl). <p> Additional problems are caused when a sort is allowed to be empty, as pointed out in [ Huet-Oppen, 1980 ] . A sound and complete set of inference rules for order-sorted equality is given in <ref> [ Goguen-Meseguer, 1987 ] </ref> . 44 For order-sorted rewriting, confluence does not imply that every theorem has a rewrite proof. Consider the same example as in the previous paragraph.
Reference: [ Goguen-Tardo, 1979 ] <author> J. A. Goguen and J. J. Tardo, </author> <title> An introduction to OBJ: A language for writing and testing formal algebraic specifications, </title> <booktitle> Proc. of the Specification of Reliable Software Conference, </booktitle> <pages> pp. </pages> <month> 170-189 (April </month> <year> 1979). </year>
Reference-contexts: When computations for equal terms always terminate in a unique normal form, a rewrite system may be used as a non-deterministic functional program <ref> [ Goguen-Tardo, 1979 ] </ref> . Such a system also serves as a procedure for deciding whether two terms are equal in the equational theory defined by the rules, and, in particular, solves the "word problem" for that theory.
Reference: [ Goguen, 1978 ] <author> J. A. Goguen, </author> <title> Exception and error sorts, coercion and overloading operators, </title> <type> Research Report, </type> <institution> Stanford Research Institute (1978). </institution>
Reference-contexts: The appropriate semantic notion in this case is the many-sorted (heterogeneous) algebra. Under reasonable assumptions, virtually everything we have said extends to the multisorted case. Sorted (i.e. typed) rewriting has been dealt with, for example, in [ Huet-Oppen, 1980; Goguen-Meseguer, 1985 ] . Order-sorted algebras, introduced in <ref> [ Goguen, 1978 ] </ref> and developed in [ Gogolla, 1983; Dick-Cunningham, 1985; Goguen-etal, 1985; Goguen-Meseguer, 1987; Smolka-etal, 1989 ] , and others, extend sorted algebras by imposing a partial ordering on the sorts, intended to capture the subset relation between them.
Reference: [ Goguen, 1980 ] <author> J. A. Goguen, </author> <title> How to prove algebraic inductive hypotheses without induction, with applications to the correctness of data type implementations, </title> <booktitle> Proc. of the Fifth International Conference on Automated Deduction, Les Arcs, France, </booktitle> <pages> pp. 356-373. </pages> <note> Available as Vol. 87, Lecture Notes in Computer Science, Springer, Berlin, </note> <editor> W. Bibel, ed., R. Kowalski, ed. </editor> <month> (July </month> <year> 1980). </year>
Reference-contexts: This algebra is (isomorphic to) the initial algebra I (R) of the variety defined by the rules in R (considered as equations) <ref> [ Goguen, 1980 ] </ref> . Thus, rewriting computes ground normal forms that are representatives of their congruence classes. It is in this sense that rewriting is a "correct" implementation of initial-algebra semantics. <p> This method, relating validity in the initial algebra to ground-reducibility, extends to class-rewriting, with ground R=S-reducibility replacing its ordinary counterpart <ref> [ Goguen, 1980; Lankford, 1981; Jouannaud-Kounalis, 1989 ] </ref> . In Section 8, we will consider how to search for an appropriate R 0 . <p> If, on the other hand, s 6= I (R) t, then fair completion will uncover an inconsistency, if it does not fail. This approach is also valid when extended-completion (or ordered-completion) is used <ref> [ Goguen, 1980 ] </ref> .
Reference: [ Goguen-etal, 1985 ] <author> J. A. Goguen, J.-P. Jouannaud and J. Meseguer, </author> <title> Operational semantics of order-sorted algebra, </title> <booktitle> Proc. of the EATCS International Conference on Automata, Languages and Programming, </booktitle> <pages> pp. 221-231. </pages> <note> Available as Vol. 194, Lecture Notes in Computer Science, Springer, Berlin (1985). </note>
Reference-contexts: Subsorts also require run-time checking for syntactic validity. For example, the term pop (push (e; push (e; fl))) has sort Stack, so its top cannot be taken, yet that term is equal to the nonempty stack push (e; fl). Fortunately, the run-time checks require no additional overhead <ref> [ Goguen-etal, 1985 ] </ref> . Deduction in order-sorted algebras also presents some difficulties. For example, suppose that a sort S 0 contains two constants a and b, and S is the supersort S 0 [ fcg. <p> One way to preclude such anomalies is to insist that rules be "sort decreasing," i.e. that any instance of a right-hand side have a sort no larger than that of the corresponding left-hand side <ref> [ Goguen-etal, 1985 ] </ref> . Order-sorted unification is investigated in [ Walther, 1988; Meseguer-etal, 1989 ] and order-sorted completion, in [ Kirchner, 1987 ] . 9.2 Conditional Rewriting Another way to restrict applicability of equations is to add enabling conditions.
Reference: [ Goldfarb, 1981 ] <author> W. D. Goldfarb, </author> <title> Note on the undecidability of the second-order unification problem, </title> <booktitle> Theoretical Computer Science, </booktitle> <pages> pp. </pages> <month> 225-230 </month> <year> (1981). </year>
Reference-contexts: Satisfiability may be undecidable even even when congruence classes are finite (as for associativity, commutativity, and distributivity [ Siekmann, 1984 ] ). Second-order unifiability (equivalence of function definitions) is also undecidable, in general <ref> [ Goldfarb, 1981 ] </ref> . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic [ Presburger, 1927; Shostak, 1979 ] , real closed fields [ Tarski, 1951; Collins, 1975 ] and monoids [ Makanin, 1978 ] .
Reference: [ Gorn, 1967 ] <author> S. Gorn, </author> <title> Explicit definitions and linguistic dominoes, </title> <booktitle> in: Systems and Computer Science, </booktitle> <editor> J. Hart, S. Takasu, ed., </editor> <publisher> University of Toronto Press, </publisher> <pages> pp. </pages> <month> 77-115 </month> <year> (1967). </year>
Reference-contexts: The idea of simplifying expressions has been around as long as algebra has. As a form of computer program, rewrite systems made their debut in <ref> [ Gorn, 1967 ] </ref> ; many modern programs for symbolic manipulation continue to use rewrite rules for simplification in an ad hoc manner.
Reference: [ Gries, 1981 ] <editor> D. Gries, </editor> <booktitle> The Science of Programming, </booktitle> <publisher> Springer, </publisher> <address> New York (1981). </address>
Reference-contexts: To introduce some of the central ideas in rewriting, we consider several variations on the "Coffee Can Problem" (attributed to Carel Scholten in <ref> [ Gries, 1981 ] </ref> ). Imagine a can containing coffee beans of two varieties, white and black, arranged in some order. <p> Indeed, any initial state with an even number of black beans must now end in one white one. (The "semantic" argument given in <ref> [ Gries, 1981 ] </ref> , based on the invarying parity of black beans, requires some insight, whereas the above analysis is entirely mechanical, as we will see later in this chapter.) It is obvious that neither of the above games can go on forever, since the number of beans is reduced
Reference: [ Guessarian-Meseguer, 1987 ] <author> I. Guessarian and J. Meseguer, </author> <title> On the axiomatization of `if-then-else', </title> <journal> SIAM J. on Computing 16 (2), </journal> <pages> pp. </pages> <month> 332-357 (April </month> <year> 1987). </year> <month> 52 </month>
Reference-contexts: Still, it is remarkable that equational axioms E can be given for if then else such that an equation is valid for Mod (E) iff it is valid in the "if-then-else" models <ref> [ Bloom-Tindell, 1983; Guessarian-Meseguer, 1987 ] </ref> . Let E be a set of equations. Clearly, replacement of equals for equals is sound, i.e. E ` s = t implies Mod (E) j= s = t for all s and t.
Reference: [ Guttag, 1976 ] <author> J. V. Guttag, </author> <title> Abstract data types and the development of data structures, </title> <booktitle> Communications of the ACM 20 (6), </booktitle> <pages> pp. </pages> <month> 396-404 (July </month> <year> 1976). </year>
Reference-contexts: In the abstract approach to data specification, data are treated as abstract objects and the semantics of functions operating on data are described by a set of constraints. When constraints are given in the form of equations, a specification is called algebraic <ref> [ Guttag, 1976 ] </ref> . In this section, we talk about the syntax of equations and of equational proofs. <p> The notion of sufficient completeness of function definitions (and its relation to software specification) was introduced in <ref> [ Guttag, 1976 ] </ref> : Definition 6. Let the set F of function symbols be split into a set C of constructors and a set F C of other symbols. Let E be a set of equations in T (F; X ). <p> In this case, the algebra G (F )=E, considered as a C-algebra, is isomorphic to G (C)=E C . This allows one to build complex specifications from simpler ones. Unfortunately, both properties are undecidable in general (see <ref> [ Guttag, 1976 ] </ref> ). As mentioned above, term-rewriting is used to compute in the initial algebra.
Reference: [ Heilbrunner-Holldobler, 1987 ] <author> S. Heilbrunner and S. H olldobler, </author> <title> The undecidability of the unification and matching problem for canonical theories, </title> <journal> Acta Informatica 24 (2), </journal> <pages> pp. </pages> <month> 157-171 (April </month> <year> 1987). </year>
Reference-contexts: The latter is Hilbert's Tenth Problem, shown to be undecidable in [ Matijasevic, 1970 ] . (Cf. <ref> [ Bockmayr, 1987; Heilbrunner-Holldobler, 1987 ] </ref> .) When a convergent R is available, a one-way sort of paramodulation suffices, due to the existence of a rewrite proof for an arbitrary valid equation [ Dershowitz-etal, 1987b; Martelli-etal, 1989 ] .
Reference: [ Henkin, 1977 ] <author> L. </author> <title> Henkin, The logic of equality, </title> <journal> American Mathematical Monthly 84 (8), </journal> <pages> pp. </pages> <month> 597-612 (October </month> <year> 1977). </year>
Reference-contexts: Tarski [ 1968 ] dubbed !-complete those equational theories that coincide with the associated inductive theory, but !-completeness is not possible, in general <ref> [ Henkin, 1977 ] </ref> . Finally, note that if an equation s = t is not valid in I (E), that means that some ground equation u = v which does not hold for Mod (E) does hold for Mod (E [ fs = tg).
Reference: [ Herbrand, 1930 ] <author> J. </author> <type> Herbrand, </type> <institution> Recherches sur la theorie de la demonstration, These de doctorat, Univer-site de Paris, Paris, </institution> <address> France (1930). </address>
Reference-contexts: This fundamental uniqueness result for first-order terms does not hold true for higher-order languages with function variables [ Huet, 1976 ] . 26 Robinson [ 1965 ] was the first to give an algorithm for finding most general unifiers. Following <ref> [ Herbrand, 1930; Martelli-Montanari, 1982 ] </ref> , we view unification as a step-by-step process of transforming multisets of equations, until a "solved form" is obtained from which the most general unifier can be extracted. <p> Let R be BA, S be AC for xor and and , and E = fs = T g, where s is a logically unsatisfiable Boolean formula. It follows from Herbrand's Theorem <ref> [ Herbrand, 1930 ] </ref> that a finite conjunction of instances s i has normal form F under BA=AC.
Reference: [ Herold-Siekmann, 1987 ] <author> A. Herold and J. Siekmann, </author> <title> Unification in Abelian semigroups, </title> <editor> J. </editor> <booktitle> of Automated Reasoning 3 (3), </booktitle> <pages> pp. </pages> <month> 247-283 </month> <year> (1987). </year>
Reference-contexts: We say that a set S of E-unifiers is complete if for every E-unifier there is one in S that is more general with respect to E-subsumption. For example, a complete unification algorithm exists for associativity and commutativity (AC) <ref> [ Stickel, 1981; Herold-Siekmann, 1987 ] </ref> ; alternative algorithms with better performance are [ Kirchner, 1989; Boudet, 1989 ] .
Reference: [ Higman-Neumann, 1952 ] <author> G. Higman and B. H. Neumann, </author> <title> Groups as groupoids with one law, </title> <journal> Publ. Math. </journal> <volume> Debrecen 2, </volume> <pages> pp. </pages> <month> 215-221 </month> <year> (1952). </year>
Reference-contexts: by giving one associative operator "" and a constant 1 satisfying 8x9y (x y = 1), they may also be axiomatized in the following way: 1 x = x (x y) z = x (y z) Groups are actually "one-based," with the following axiom providing a basis: x=(((x=x)=y)=z)=(((x=x)=x)=z)) = y <ref> [ Higman-Neumann, 1952 ] </ref> .
Reference: [ Higman, 1952 ] <author> G. Higman, </author> <title> Ordering by divisibility in abstract algebras, </title> <booktitle> Proc. of the London Mathematical Society (3) 2 (7), </booktitle> <pages> pp. </pages> <month> 326-336 (September </month> <year> 1952). </year>
Reference-contexts: Using an auxiliary minimal counter-example argument, it can be shown that any infinite sequence of words over a well-quasi-ordered set contains a pair of words such that the first is a (not necessarily contiguous) subword of the second. (This result <ref> [ Higman, 1952 ] </ref> is known as "Higman's Lemma.") In our case, this means that the infinite sequence of words composed of the immediate subterms of t i 1 , t i 2 , : : : must contain a pair w i j and w i k (k &gt; j) <p> Such orderings are the main tool for proving termination of rewriting: Definition 14. A transitive and reflexive rewrite relation _ is a simplification ordering if it contains the subterm ordering &gt;. Simplification orderings are quasi-orderings (called "quasi-simplification orderings" in [ Dershowitz, 1982a ] ) and are what Higman <ref> [ Higman, 1952 ] </ref> called "divisibility orders." For finite R, only a finite number of function symbols can appear in any derivation t 1 ! R t 2 ! R .
Reference: [ Hindley, 1964 ] <author> J. R. Hindley, </author> <title> The Church-Rosser property and a result in combinatory logic, </title> <type> Ph.D. thesis, </type> <institution> University of Newcastle-upon-Tyne (1964). </institution>
Reference-contexts: See Figure 1 (d). Local confluence does not generally imply confluence; see the counter-examples in Figure 2, due to [ Newman, 1942 ] and <ref> [ Hindley, 1964 ] </ref> . However: Diamond Lemma ( [ Newman, 1942 ] ). A terminating relation is confluent iff it is locally confluent. The name derives from the pictorial proof in Figure 3, due to [ Huet, 1980 ] , which uses induction with respect to the terminating relation.
Reference: [ Hoffmann-O'Donnell, 1979 ] <author> C. M. Hoffmann and M. J. O'Donnell, </author> <title> Interpreter generation using tree pattern matching, </title> <booktitle> Proc. of the Sixth ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Antonio, TX, </address> <pages> pp. </pages> <month> 169-179 (January </month> <year> 1979). </year>
Reference-contexts: For regular systems, normal forms can be computed by a "parallel-outermost" redex evaluation scheme [ O'Donnell, 1977a ] , but not by a "leftmost-outermost" scheme [ Huet-Levy, 1990 ] ; with additional "sequential-ity" requirements, one can efficiently compute normal forms, without lookahead <ref> [ Hoffmann-O'Donnell, 1979; Huet-Levy, 1990 ] </ref> . How to avoid all unnecessary rewrites and obtain an optimal strategy is, however, an undecidable problem, in general [ Huet-Levy, 1990 ] .
Reference: [ Hsiang-Dershowitz, 1983 ] <author> J. Hsiang and N. Dershowitz, </author> <title> Rewrite methods for clausal and non-clausal theorem proving, </title> <booktitle> Proc. of the Tenth EATCS International Colloquium on Automata, Languages and Programming, Barcelona, Spain, </booktitle> <pages> pp. 331-346. </pages> <note> Available as Vol. 154, Lecture Notes in Computer Science, Springer, Berlin (July 1983). </note>
Reference-contexts: One approach is to use resolution for non-equality literals together with some kind of superposition of left-hand sides of equality literals within clauses [ Lankford-Ballantyne, 1979; Peterson, 1983; Hsiang-Rusinowitch, 1986; Bachmair, 1989a ] . An alternative approach <ref> [ Hsiang-Dershowitz, 1983 ] </ref> is to use the Boolean ring system BA of Section 2 and treat logical connectives equationally. Let R be BA, S be AC for xor and and , and E = fs = T g, where s is a logically unsatisfiable Boolean formula.
Reference: [ Hsiang-Jouannaud, 1988 ] <author> J. Hsiang and J.-P. Jouannaud, </author> <title> Complete sets of inference rules for E-unification, </title> <booktitle> Proc. of the Second Unification Workshop, </booktitle> <address> Val d'Ajol, France, Kirchner, C., </address> <note> ed. Available CRIN Report, </note> <institution> Universite de Nancy, </institution> <address> France (May 1988). </address>
Reference-contexts: Paramodulation (without the functional reflexivity axioms) [ Robinson-Wos, 1969 ] is one improvement over the obvious "British-museum" method of interleaving the production of substitutions with the search for equational proofs. Paramodulation may be improved upon by a more goal-oriented process. The following set of rules, inspired by <ref> [ Gallier-Snyder, 1987; Hsiang-Jouannaud, 1988 ] </ref> , does the trick: Decompose: (ff (s 1 ; : : : ; s m ) $ ? f (t 1 ; : : : ; t m )g [ P ; S) ) (fs 1 $ ? t 1 ; : : :; s <p> To generate a complete set of unifiers may not require computing all possible sequences. In particular, the use of imitate can be severely restricted <ref> [ Hsiang-Jouannaud, 1988 ] </ref> . The set of rules EU can be improved for particular classes of equations.
Reference: [ Hsiang-Rusinowitch, 1986 ] <author> J. Hsiang and M. Rusinowitch, </author> <title> A new method for establishing refutational completeness in theorem proving, </title> <booktitle> Proc. of the Eighth International Conference on Automated Deduction, </booktitle> <editor> J. H. Siekmann, ed., </editor> <publisher> Oxford, </publisher> <address> England, </address> <pages> pp. 141-152. </pages> <note> Available as Vol. 230, Lecture Notes in Computer Science, Springer, Berlin (July 1986). </note>
Reference-contexts: One approach is to use resolution for non-equality literals together with some kind of superposition of left-hand sides of equality literals within clauses <ref> [ Lankford-Ballantyne, 1979; Peterson, 1983; Hsiang-Rusinowitch, 1986; Bachmair, 1989a ] </ref> . An alternative approach [ Hsiang-Dershowitz, 1983 ] is to use the Boolean ring system BA of Section 2 and treat logical connectives equationally.
Reference: [ Hsiang-Rusinowitch, 1987 ] <author> J. Hsiang and M. Rusinowitch, </author> <title> On word problems in equational theories, </title> <booktitle> Proc. of the Fourteenth EATCS International Conference on Automata, Languages and Programming, </booktitle> <editor> T. Ottmann, ed., </editor> <address> Karlsruhe, West Germany, </address> <pages> pp. </pages> <month> 54-71 (July </month> <year> 1987). </year>
Reference-contexts: As a more interesting example, consider the following system for entropic groupoids <ref> [ Hsiang-Rusinowitch, 1987 ] </ref> : x (y z) ! x z (x y 1 ) z $ (x y 2 ) z and suppose we wish to decide validity of an equation s = t. <p> With fairness, we get that a rewrite proof between two ground terms s and t will eventually be generated iff s $ fl E 0 t <ref> [ Hsiang-Rusinowitch, 1987 ] </ref> . <p> With a completable reduction ordering (the Skolem constants are added to the algebra, hence must be comparable), the outcome T = F characterizes validity of s = t in the theory of E <ref> [ Hsiang-Rusinowitch, 1987 ] </ref> . 8.5 Inductive Theorem Proving An inductive theorem-proving method based on completion was first proposed in [ Musser, 1980 ] .
Reference: [ Hsiang, 1982 ] <author> J. Hsiang, </author> <title> Topics in automated theorem proving and program generation, </title> <type> Report R-82-1113, Ph.D. thesis, </type> <institution> Department of Computer Science, University of Illinois, Urbana, </institution> <note> IL (December 1982). </note>
Reference-contexts: AC and (x; F ) ! F and (x; y) $ and (y; x) xor (x; F ) ! x xor (x; y) $ xor (y; x) and (xor (x; y); z) ! xor (and (x; z); and (y; z)) This system is convergent, i.e. terminating and Church-Rosser modulo AC <ref> [ Hsiang, 1982 ] </ref> ; it computes normal forms of Boolean-ring expressions that are unique up to permutations under associativity and commutativity. (The exclusive-or normal form is due to [ Zhegalkin, 1927; Stone, 1936 ] .) The idea, then, is to put equations that cannot be handled by rewriting into S,
Reference: [ Hsiang, 1985 ] <author> J. Hsiang, </author> <title> Refutational theorem proving using term-rewriting systems, </title> <booktitle> Artificial Intelligence 25, </booktitle> <pages> pp. </pages> <month> 255-300 (March </month> <year> 1985). </year>
Reference: [ Huet-Hullot, 1980 ] <author> G. Huet and J.-M. Hullot, </author> <title> Proofs by induction in equational theories with constructors, </title> <booktitle> Proc. of the Twenty-First Annual Symposium on Foundations of Computer Science, </booktitle> <address> Lake Placid, NY, </address> <pages> pp. </pages> <month> 96-107 (October </month> <year> 1980). </year> <month> 53 </month>
Reference-contexts: This connection between sufficient completeness and ground reducibility is implicit in [ Plaisted, 1985 ] . If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. <ref> [ Huet-Hullot, 1980 ] </ref> . Ground reducibility is decidable for finite R and empty S [ Plaisted, 1985; Kapur-etal, 1987 ] . <p> Early forerunners of ordered completion were [ Lankford, 1975; Brown, 1975 ] . Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was <ref> [ Huet-Hullot, 1980 ] </ref> .
Reference: [ Huet-Lankford, 1978 ] <author> G. Huet and D. S. Lankford, </author> <title> On the uniform halting problem for term rewriting systems, </title> <institution> Rapport laboria 283, Institut de Recherche en Informatique et en Automatique, Le Chesnay, </institution> <address> France (March 1978). </address>
Reference-contexts: Turing machine computations can be simulated by rewrite systems in at least two different ways: by systems of monadic rules that rewrite instantaneous descriptions according to the machine's transitions <ref> [ Huet-Lankford, 1978 ] </ref> , and by a (non-monadic) one-rule system in which the transitions appear as part of the terms ([Dauchet-1989], refining [ Dershowitz, 1987 ] ). Thus, rewrite systems provide a fully general programming paradigm (to the extent that Church's Thesis defines "fully general"). <p> The rule f (f (x)) ! f (g (f (x))), for instance, is terminating, since the number of adjacent f 's is reduced with each application. In general, it is undecidable whether a system is terminating, even if both sides of all rules are monadic <ref> [ Huet-Lankford, 1978 ] </ref> or if it has only one left-linear rule [ Dauchet, 1989 ] . For ground systems, however, termination is decidable [ Huet-Lankford, 1978 ] . <p> In general, it is undecidable whether a system is terminating, even if both sides of all rules are monadic <ref> [ Huet-Lankford, 1978 ] </ref> or if it has only one left-linear rule [ Dauchet, 1989 ] . For ground systems, however, termination is decidable [ Huet-Lankford, 1978 ] . The decidability of termination of non-length-increasing string-rewriting systems is open. 5.1 Reduction Orderings The above method of establishing termination requires one to reason about the global effect of applying a rule at a subterm.
Reference: [ Huet-Oppen, 1980 ] <author> G. Huet and D. C. Oppen, </author> <title> Equations and rewrite rules: A survey, in: Formal Language Theory: Perspectives and Open Problems, </title> <editor> R. Book, ed., </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 349-405 </month> <year> (1980). </year>
Reference-contexts: The completion procedure, its extensions, refinements, and main uses, are examined in Section 8. Brief mention of variations on the rewriting theme is made in the final section. 1.1 Further Reading Previous surveys of term rewriting include <ref> [ Huet-Oppen, 1980; Buchberger-Loos, 1982; Jouannaud-Lescanne, 1987; Klop, 1987 ] </ref> . 2 SYNTAX Algebraic data types are an important application area for rewrite-based equational reasoning. <p> The appropriate semantic notion in this case is the many-sorted (heterogeneous) algebra. Under reasonable assumptions, virtually everything we have said extends to the multisorted case. Sorted (i.e. typed) rewriting has been dealt with, for example, in <ref> [ Huet-Oppen, 1980; Goguen-Meseguer, 1985 ] </ref> . <p> Clearly, the equation holds in all models, but this cannot be shown by replacement of equals, since f (c) is not well-formed. Additional problems are caused when a sort is allowed to be empty, as pointed out in <ref> [ Huet-Oppen, 1980 ] </ref> . A sound and complete set of inference rules for order-sorted equality is given in [ Goguen-Meseguer, 1987 ] . 44 For order-sorted rewriting, confluence does not imply that every theorem has a rewrite proof. Consider the same example as in the previous paragraph.
Reference: [ Huet, 1976 ] <author> G. Huet, </author> <title> Resolution d'equations dans des langages d'ordre 1, </title> <type> 2, </type> : : : !, <institution> These de doctorat, Universite de Paris VII, Paris, </institution> <address> France (1976). </address>
Reference-contexts: As a consequence, the most general unifier is unique up to literal similarity, but need not always exist. This fundamental uniqueness result for first-order terms does not hold true for higher-order languages with function variables <ref> [ Huet, 1976 ] </ref> . 26 Robinson [ 1965 ] was the first to give an algorithm for finding most general unifiers. <p> The coalesce rule allows us to avoid the use of "multi-equations"; cf. [ Martelli-Montanari, 1982 ] . Eliminating the check rule produces solutions over the domain of (infinite) "rational" trees <ref> [ Huet, 1976 ] </ref> , and has ramifications for the semantics of some Prolog implementations [ Colmerauer, 1984 ] . 6.2 Semantic Unification When it comes to E-unification, the situation is much more complex. <p> Class-rewriting yields similar results [ Jouannaud-etal, 1983 ] . 6.4 Further Reading For a survey regarding syntactic unification, see [ Lassez-etal, 1988 ] ; for unification in general, see <ref> [ Huet, 1976 ] </ref> . For a survey of theory and applications of syntactic and semantic unification, see [ Knight, 1989 ] .
Reference: [ Huet, 1980a ] <author> G. Huet, </author> <title> Personal communication (July 1980). </title>
Reference: [ Huet, 1980 ] <author> G. Huet, </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 27 (4), </booktitle> <pages> pp. </pages> <month> 797-821 (October </month> <year> 1980). </year>
Reference-contexts: These two restrictions are often placed a priori on rewrite rules (cf. <ref> [ Huet, 1980 ] </ref> ), something we prefer not to do. Methods for establishing termination are described in Section 5. <p> See Figure 1 (c). (A slightly weaker definition is given in <ref> [ Huet, 1980 ] </ref> , namely ffi ! ! fl ffi = , which also allows for circumstances like a ! b, a ! c, b ! d ! c, and c ! d ! b.) Strong confluence implies confluence [ Newman, 1942 ] by a "tiling" argument. <p> However: Diamond Lemma ( [ Newman, 1942 ] ). A terminating relation is confluent iff it is locally confluent. The name derives from the pictorial proof in Figure 3, due to <ref> [ Huet, 1980 ] </ref> , which uses induction with respect to the terminating relation. When ! is terminating, it follows from the above results that it is Church-Rosser iff ffi ! is contained in ! ! ffi ! . <p> In what follows, we will also use R, S, T , and R=S to refer to the relations ! R , $ S , ! T , and ! R=S , respectively. At one extreme, T can be R, a case partially dealt with in <ref> [ Sethi, 1974; Huet, 1980 ] </ref> ; at the other extreme, T can be R=S; the general case|considered here|was first studied in [ Jouannaud-Kirchner, 1986 ] . 17 18 If one is going to compute normal forms with T instead of with R, the natural question to ask is if their <p> The multiset path ordering contains the homeomorphic embedding relation and is, therefore, a simplification ordering. (That ! + mpo is irreflexive is true, but not self-evident.) Moreover, if is a well-founded ordering of (possibly infinite) F , then mpo is a well-founded ordering of T . To see this <ref> [ Huet, 1980; Dershowitz, 1982a ] </ref> , note that (by Zorn's Lemma) a given precedence may be extended to an ordering &gt; such that the quasi-ordering &gt; [ , call it &gt; _ , is a total well-quasi-ordering of F . <p> In particular, we will see that confluence is decidable for finite, terminating systems. Confluence, in general, is undecidable <ref> [ Huet, 1980 ] </ref> , even if all rules are monadic [ Book-etal, 1981 ] . For finite ground systems|even if they are nonterminating|decision procedures exist (see [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] ). <p> The proof [ Knuth-Bendix, 1970 ] , depicted in Figure 4, considers all relative positions of the two redexes. As stressed in <ref> [ Huet, 1980 ] </ref> , no assumption of termination is necessary for this lemma. It follows from this and the Diamond Lemma, that a terminating system R is confluent iff cp (R), regarded as a relation, is a subset of the joinability relation ! fl R ffi fl R . <p> Without termination, a system may have no critical pairs (hence be locally confluent), and still be non confluent. A system sans critical pairs (except trivial ones of the form t = t) is called non-overlapping , or non-ambiguous. The following example of a non-overlapping, but non-confluent system <ref> [ Huet, 1980 ] </ref> , is based on the "ladder" in Figure 2 (b): f (x; x) ! a c ! g (c) The term c has no normal form, but f (c; c) has two, a and b. <p> Examples of regular systems are the stack and Combinatory Logic systems (of Sections 2.3 and 2.4, respec tively). Mutually recursive function definitions, with one equation (employing if then else ) per defined function, are regular. Regular systems are always confluent, by the following result: Parallel Moves Lemma ( <ref> [ Huet, 1980 ] </ref> ). If R is regular, then ! k R is strongly confluent. The symbol ! k R denotes one "parallel" application of rules in R at disjoint redexes. (For the name and inspiration of this lemma, cf. [ Curry-Feys, 1958 ] ). <p> The confluence of regular systems establishes the consistency of the operational semantics of recursive programming languages; see [ Raoult-Vuillemin, 1980 ] . The above lemma may be weakened to allow critical pairs that join in one parallel step <ref> [ Huet, 1980 ] </ref> ; the ground case was considered in [ Rosen, 1973 ] . <p> That is, if cp (R [ S) is a subset of ! ! R ffi $ fl R , then $ fl R [S is also contained therein <ref> [ Huet, 1980 ] </ref> . Then, R-normal forms may be used to decide validity, provided S equivalence is decidable. For example, if S is commutativity and R includes all commutativity variants of its rules, then R-normal forms are unique up to permutations of operands. <p> However, the limit SnR 1 need not be reduced. Additional aspects of completion modulo equational theories have been considered: <ref> [ Huet, 1980 ] </ref> deals with the left-linear case; [ Jouannaud-Kirchner, 1986 ] analyze exactly which critical pairs are necessary when some rules are left-linear and others are not; [ Bachmair-Dershowitz, 1987a ] take the inference rule approach and generalize previous results. 8.4 Ordered Completion We have seen that completion can
Reference: [ Huet, 1981 ] <author> G. Huet, </author> <title> A complete proof of correctness of the Knuth-Bendix completion algorithm, </title> <editor> J. </editor> <booktitle> Computer and Systems Sciences 23 (1), </booktitle> <pages> pp. </pages> <month> 11-21 </month> <year> (1981). </year>
Reference-contexts: Subsumption and the subterm ordering are special cases of the encompassment quasi-ordering, in which s * t if a subterm of t is an instance of s. (Encompassment is called "containment" in <ref> [ Huet, 1981 ] </ref> .) For example, f (z) * g (f (a)), since f (a) is an instance of f (z). <p> A rewrite system R is said to be (inter-)reduced if, for each rule l ! r in R, the right-hand side r is irreducible under R and no term s less than l in the encompassment ordering * is reducible. (For convergent R, this is equivalent to the standard definition <ref> [ Huet, 1981 ] </ref> which requires that the left-hand side l not be rewritable by any other rule.) As we will see this, too, is a convenient property. We will reserve the adjective canonical for reduced convergent systems, though, in the literature, "canonical" is usually synonymous with "convergent". <p> But for implementations that are fair in their choice of inferences, one can show that|barring abortion|all provable equations eventually lend themselves to a direct proof by rewriting. This perspective on completion was taken by Huet <ref> [ Huet, 1981 ] </ref> , and in [ Lankford, 1975 ] from the refutational point of view. The difficult part is the need to show that deleting simplifiable rules does not|in the long run|shrink the class of equations having rewrite proofs. <p> Imposing fairness, we have: Proof Normalization Theorem ( <ref> [ Huet, 1981 ] </ref> ). <p> A marking scheme is generally used to keep track of which rules still need to be overlapped with which; see, for instance, <ref> [ Huet, 1981 ] </ref> . By generating the remaining critical pairs and then eliminating them, Figure 5 becomes fair.
Reference: [ Huet, 1985 ] <author> G. Huet, </author> <title> Cartesian closed categories and Lambda-calculus, </title> <booktitle> Proc. of the LITP Spring School on Combinators and Functional Programming Languages, Val d'Ajol, France, </booktitle> <pages> pp. 123-135. </pages> <note> Available as Vol. 242, Lecture Notes in Computer Science, Springer, Berlin (May 1985). </note>
Reference: [ Hullot, 1980 ] <author> J.-M. Hullot, </author> <title> Canonical forms and unification, </title> <booktitle> Proc. of the Fifth International Conference on Automated Deduction, Les Arcs, France, </booktitle> <pages> pp. 318-334. </pages> <note> Available as Vol. 87, Lecture Notes in Computer Science, Springer, Berlin, </note> <editor> W. Bibel, ed., R. Kowalski, ed. </editor> <month> (July </month> <year> 1980). </year>
Reference-contexts: rewrite system and s ! fl R t, then there exist terms u and v such that s ; fl R u, t ! fl If is irreducible (that is, if x is irreducible for all variables x), then t = v, and the lemma holds even for non-convergent R <ref> [ Hullot, 1980 ] </ref> . Without convergence, reducible solutions are lost. <p> Variations on narrowing include: normal narrowing [ Fay, 1979 ] (in which terms are normalized via ! ! R before narrowing), basic narrowing <ref> [ Hullot, 1980 ] </ref> (in which the substitution part of prior narrowings is not subsequently narrowed), and their combination [ Rety-etal, 198? ] , all of which are semi-complete for convergent R.
Reference: [ Iturriaga, 1967 ] <author> R. Iturriaga, </author> <title> Contributions to mechanical mathematics, </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <address> Pittsburgh, PA (1967). </address>
Reference-contexts: A class of exponential interpretations were used for termination arguments in <ref> [ Iturriaga, 1967 ] </ref> . The use, in particular, of polynomial interpretations was developed in [ Lankford, 1975; Lankford, 1979 ] .
Reference: [ Jouannaud-Kirchner, 1986 ] <author> J.-P. Jouannaud and H. Kirchner, </author> <title> Completion of a set of rules modulo a set of equations, </title> <journal> SIAM J. on Computing 15, </journal> <pages> pp. </pages> <month> 1155-1194 (November </month> <year> 1986). </year>
Reference-contexts: However, it is often the case that by adding certain consequences as new rules, the two relations can be made to coincide, as shown in [ Peterson-Stickel, 1981 ] for AC, and in <ref> [ Jouannaud-Kirchner, 1986 ] </ref> for the general case. When R=S is terminating and SnR is Church-Rosser modulo S, the theory R [ S can be decided by computing SnR-normal forms and testing for S-equivalence. <p> At one extreme, T can be R, a case partially dealt with in [ Sethi, 1974; Huet, 1980 ] ; at the other extreme, T can be R=S; the general case|considered here|was first studied in <ref> [ Jouannaud-Kirchner, 1986 ] </ref> . 17 18 If one is going to compute normal forms with T instead of with R, the natural question to ask is if their normal forms are equivalent. <p> Compare Figures 2 (g) and 2 (h) with 2 (d). The concept of coherence was developed by <ref> [ Jouannaud-Kirchner, 1986 ] </ref> and generalizes compatibility, as in [ Peterson-Stickel, 1981 ] . Coherence Lemma ( [ Jouannaud-Kirchner, 1986 ] ). Let R T R=S. If R=S is terminating, then T is Church-Rosser modulo S iff it is locally coherent modulo S with both R and S. <p> Compare Figures 2 (g) and 2 (h) with 2 (d). The concept of coherence was developed by <ref> [ Jouannaud-Kirchner, 1986 ] </ref> and generalizes compatibility, as in [ Peterson-Stickel, 1981 ] . Coherence Lemma ( [ Jouannaud-Kirchner, 1986 ] ). Let R T R=S. If R=S is terminating, then T is Church-Rosser modulo S iff it is locally coherent modulo S with both R and S. <p> Using this lemma, it can be shown that if R=S is terminating and the subterm relation modulo S is well-founded, then SnR is Church-Rosser modulo S iff cp S (R) and ex S (R) are contained in ! ! SnR ffi $ fl SnR <ref> [ Jouannaud-Kirchner, 1986 ] </ref> . If these conditions are satisfied, and an S-matching procedure is available, then validity in R [ S can be decided. Note that subterm modulo S is well-founded when S-congruence classes are finite. <p> It is possible to combine the above results by partitioning rules into left-linear and not necessarily left-linear subsets. The critical pair condition can then be tailored to the different kinds of rules, with term rewriting used for the left-linear subset and extended rewriting for the rest <ref> [ Jouannaud-Kirchner, 1986 ] </ref> . <p> With fairness, we get that an extended-rewrite proof s ! fl SnR 1 ffi $ fl SnR 1 t will eventually be generated if s $ S [E 0 t <ref> [ Jouannaud-Kirchner, 1986 ] </ref> . However, the limit SnR 1 need not be reduced. Additional aspects of completion modulo equational theories have been considered: [ Huet, 1980 ] deals with the left-linear case; [ Jouannaud-Kirchner, 1986 ] analyze exactly which critical pairs are necessary when some rules are left-linear and others <p> ffi $ fl SnR 1 t will eventually be generated if s $ S [E 0 t <ref> [ Jouannaud-Kirchner, 1986 ] </ref> . However, the limit SnR 1 need not be reduced. Additional aspects of completion modulo equational theories have been considered: [ Huet, 1980 ] deals with the left-linear case; [ Jouannaud-Kirchner, 1986 ] analyze exactly which critical pairs are necessary when some rules are left-linear and others are not; [ Bachmair-Dershowitz, 1987a ] take the inference rule approach and generalize previous results. 8.4 Ordered Completion We have seen that completion can have any one of three outcomes: it may succeed
Reference: [ Jouannaud-Kounalis, 1989 ] <author> J.-P. Jouannaud and E. Kounalis, </author> <title> Automatic proofs by induction in equational theories without constructors, </title> <journal> Information and Computation. </journal> <note> To appear (1989). </note>
Reference-contexts: Ground R=S-reducibility is undecidable when S is a set of associative-commutative axioms [ Kapur-etal, 1987 ] , but is decidable when R is left-linear <ref> [ Jouannaud-Kounalis, 1989 ] </ref> . For ground-convergent systems R, any equation between distinct R-normal forms is considered to be inconsistent with R (considering all symbols in F as constructors). <p> This method, relating validity in the initial algebra to ground-reducibility, extends to class-rewriting, with ground R=S-reducibility replacing its ordinary counterpart <ref> [ Goguen, 1980; Lankford, 1981; Jouannaud-Kounalis, 1989 ] </ref> . In Section 8, we will consider how to search for an appropriate R 0 . <p> If R 0 passes this test, then the two systems have the same ground normal forms and s = I (R) t for each s = t in H <ref> [ Dershowitz, 1982b; Jouannaud-Kounalis, 1989 ] </ref> . If, on the other hand, s 6= I (R) t, then fair completion will uncover an inconsistency, if it does not fail. This approach is also valid when extended-completion (or ordered-completion) is used [ Goguen, 1980 ] . <p> The use of critical pair criteria in this connection is explored in [ Gobel, 1987; Kuchlin, 1989 ] . How to handle inductive equations that cannot be oriented is discussed in <ref> [ Bachmair, 1989b; Jouannaud-Kounalis, 1989 ] </ref> . 8.6 First-Order Theorem Proving Rewriting techniques have been applied to first-order theorem proving in two ways.
Reference: [ Jouannaud-Lescanne, 1987 ] <editor> J.-P. Jouannaud and P. Lescanne, </editor> <booktitle> Rewriting systems, Technology and Science of Informatics 6 (3) Wiley, </booktitle> <pages> pp. </pages> <month> 181-199. </month> <title> Available in French as "La reecriture" Technique et Science de l'Informatique [1986], </title> <journal> vol. </journal> <volume> 5, no. 6, </volume> <pages> pp. </pages> <month> 433-452 </month> <year> (1987). </year>
Reference-contexts: The completion procedure, its extensions, refinements, and main uses, are examined in Section 8. Brief mention of variations on the rewriting theme is made in the final section. 1.1 Further Reading Previous surveys of term rewriting include <ref> [ Huet-Oppen, 1980; Buchberger-Loos, 1982; Jouannaud-Lescanne, 1987; Klop, 1987 ] </ref> . 2 SYNTAX Algebraic data types are an important application area for rewrite-based equational reasoning.
Reference: [ Jouannaud-Munoz, 1984 ] <author> J.-P. Jouannaud and M. Mu ~ noz, </author> <title> Termination of a set of rules modulo a set of equations, </title> <booktitle> Proc. of the Seventh International Conference on Automated Deduction, </booktitle> <editor> R. E. Shostak, ed., </editor> <address> Napa, CA, </address> <pages> pp. 175-193. </pages> <note> Available as Vol. 170, Lecture Notes in Computer Science, Springer, Berlin (May 1984). </note>
Reference-contexts: These ideas generalize results in <ref> [ Bachmair-Dershowitz, 1986; Jouannaud-Munoz, 1984 ] </ref> .
Reference: [ Jouannaud-Waldmann, 1986 ] <author> J.-P. Jouannaud and B. Waldmann, </author> <title> Reductive conditional term rewriting systems, </title> <booktitle> Proc. of the Third IFIP Working Conference on Formal Description of Programming Concepts, </booktitle> <address> Ebberup, Denmark (1986). </address>
Reference-contexts: Decreasing systems generalize the concept of "hierarchy" in the work of [ Remy, 1982 ] , and are slightly more general than the systems considered in <ref> [ Kaplan, 1987; Jouannaud-Waldmann, 1986 ] </ref> ; they have been extended in [ Dershowitz-Okada, 1988b ] to cover systems (important in logic programming) with variables in conditions that do not also appear in the left-hand side, e.g. g (x) = z j f (x) ! h (z).
Reference: [ Jouannaud, 1983 ] <author> J.-P. Jouannaud, </author> <title> Confluent and coherent sets of reductions with equations: Application to proofs in abstract data types, </title> <booktitle> Proc. of the Eighth Colloquium on Trees in Algebra and Programming, </booktitle> <editor> G. Ausiello, M. Protasi, </editor> <publisher> ed., </publisher> <pages> pp. 269-283. </pages> <note> Available as Vol. 59, Lecture Notes in Computer Science, Springer, Berlin (1983). 54 </note>
Reference-contexts: We also need the set ex S (R) of extended rules obtained by overlapping variants of rules in R on (renamed) equations in S. Extended Critical Pair Lemma ( <ref> [ Jouannaud, 1983 ] </ref> ).
Reference: [ Jouannaud-etal, 1983 ] <editor> J.-P. Jouannaud, C. Kirchner and H. Kirchner, </editor> <title> Incremental construction of unification algorithms in equational theories, </title> <booktitle> Proc. of the Tenth EATCS International Colloquium on Automata, Languages and Programming, Barcelona, Spain, </booktitle> <pages> pp. 361-373. </pages> <note> Available as Vol. 154, Lecture Notes in Computer Science, Springer, Berlin (July 1983). </note>
Reference-contexts: Class-rewriting yields similar results <ref> [ Jouannaud-etal, 1983 ] </ref> . 6.4 Further Reading For a survey regarding syntactic unification, see [ Lassez-etal, 1988 ] ; for unification in general, see [ Huet, 1976 ] . For a survey of theory and applications of syntactic and semantic unification, see [ Knight, 1989 ] .
Reference: [ Kamin-Levy, 1980 ] <author> S. Kamin and J.-J. L evy, </author> <title> Two generalizations of the recursive path ordering, Unpublished note, </title> <institution> Department of Computer Science, University of Illinois, Urbana, </institution> <note> IL (February 1980). </note>
Reference-contexts: One can think of the multiset path ordering as a functional mapping an ordering on function symbols (the precedence) to an ordering on terms, by recursively comparing the immediate subterms in the mul tiset extension of the term ordering. A related class of orderings <ref> [ Kamin-Levy, 1980 ] </ref> compares subterms lexicographically, instead. Definition 16. <p> If the strict part of a precedence is of order type ff, then the multiset path ordering on the set of terms is of order type ff (0) in the notation of [ Feferman, 1968 ] . Combining multiset and lexicographic path orderings into one <ref> [ Kamin-Levy, 1980 ] </ref> , gives a more powerful ordering, which we call the recursive path ordering and which is related to Ackermann's ordinal notation [ Dershowitz-Okada, 1988a ] . (The original "recursive path ordering" [ Dershowitz, 1982a ] was of the multiset variety.) Determining if a precedence exists that makes
Reference: [ Kaplan, 1987 ] <author> S. Kaplan, </author> <title> Simplifying conditional term rewriting systems: Unification, termination and confluence, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 4 (3), </booktitle> <pages> pp. </pages> <month> 295-334 (December </month> <year> 1987). </year>
Reference-contexts: Decreasing systems generalize the concept of "hierarchy" in the work of [ Remy, 1982 ] , and are slightly more general than the systems considered in <ref> [ Kaplan, 1987; Jouannaud-Waldmann, 1986 ] </ref> ; they have been extended in [ Dershowitz-Okada, 1988b ] to cover systems (important in logic programming) with variables in conditions that do not also appear in the left-hand side, e.g. g (x) = z j f (x) ! h (z). <p> For confluence, a suitable notion of "conditional critical pair," which is just the conditional equation derived from overlapping left-hand sides, is defined. The Critical Pair Lemma holds for decreasing systems R <ref> [ Kaplan, 1987 ] </ref> : a decreasing system R is locally confluent (and hence convergent) iff there is a rewrite proof s ! fl R ffi fl R t for each critical pair u 1 = v 1 ^ ^ u n = v n ) s = t and substitution <p> Nevertheless, confluence is only semi-decidable, on account of the semi-decidability of satisfiability of the conditions u i = v i . For non-decreasing systems, even ones for which the rewrite relation is terminating, the rewrite relation may be undecidable <ref> [ Kaplan, 1987 ] </ref> , and the Critical Pair Lemma does not hold, though terminating systems having no critical pairs are confluent (see [ Dershowitz-etal, 1987a ] ).
Reference: [ Kapur-Musser, 1987 ] <author> D. Kapur and D. R. Musser, </author> <title> Proof by consistency, </title> <booktitle> Artificial Intelligence 31 (2), </booktitle> <pages> pp. </pages> <month> 125-157 (February </month> <year> 1987). </year>
Reference-contexts: s = t is valid in the initial algebra I (R) iff no inconsistency follows from R [ fs = tg is the basis of the proof by consistency method of inductive theorem proving (for proving theorems in Ind (R)), pioneered by Musser [ 1980 ] (and so named in <ref> [ Kapur-Musser, 1987 ] </ref> ). If there exists a ground-convergent system R 0 , with the same ground normal forms as R, and which presents the same equational theory as R [ fs = tg, then inconsistency is precluded [ Lankford, 1981 ] . <p> Test-set based methods for proofs in the (non-initial) constructor model are described in [ Kapur-etal, 1986; Zhang, 1988 ] ; see also <ref> [ Kapur-Musser, 1987 ] </ref> . 3.3 Computable Algebras When a system R is not terminating, rewriting will not necessarily compute a representative for the congruence class of a term. However, as long as R is Church-Rosser, one knows that if a normal form is obtained, it is unique.
Reference: [ Kapur-Narendran, 1985 ] <author> D. Kapur and P. Narendran, </author> <title> An equational approach to theorem proving in first-order predicate calculus, </title> <booktitle> Proc. of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Angeles, CA, </address> <pages> pp. </pages> <month> 1146-1153 (August </month> <year> 1985). </year>
Reference-contexts: A different completion-like procedure for first-order theorem proving, incorporating simplification, has been proved correct by [ Bachmair-Dershowitz, 1987b ] . A first-order method, using Boolean rings and based on polynomial ideals, is <ref> [ Kapur-Narendran, 1985 ] </ref> . 8.7 Further Reading A survey of completion and its manifold applications may be found in [ Dershowitz, 1989 ] . For a book focusing on the abstract view of completion and its variants, see [ Bachmair, 1989b ] .
Reference: [ Kapur-Narendran, 1986 ] <author> D. Kapur and P. Narendran, </author> <title> NP-completeness of set unification and matching problems, </title> <booktitle> Proc. of the Eighth International Conference on Automated Deduction, Oxford, England, </booktitle> <editor> J. H. Siekmann, ed. </editor> <title> Available as Vol. </title> <booktitle> 230 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin Springer, </publisher> <pages> pp. </pages> <month> 489-495 (July </month> <year> 1986). </year>
Reference-contexts: For many of these theories, unification is believed intractable from the time-complexity point of view <ref> [ Kapur-Narendran, 1986 ] </ref> . Of course, E-unifiability is semi-decidable for recursively-enumerable E. Paramodulation (without the functional reflexivity axioms) [ Robinson-Wos, 1969 ] is one improvement over the obvious "British-museum" method of interleaving the production of substitutions with the search for equational proofs.
Reference: [ Kapur-Narendran, 1987 ] <author> D. Kapur and P. Narendran, </author> <title> Matching, unification and complexity (A preliminary note), </title> <journal> SIGSAM Bulletin 21 (4), </journal> <pages> pp. </pages> <month> 6-9 (November </month> <year> 1987). </year>
Reference-contexts: For a survey of theory and applications of syntactic and semantic unification, see [ Knight, 1989 ] . Questions of decidability of unification in equational theories are summarized in [ Siekmann, 1984 ] ; a summary of complexity results for some of the decidable cases is <ref> [ Kapur-Narendran, 1987 ] </ref> . A popular exposition on the undecidability of the existence of solutions to Diophantine equations is [ Davis-Hersh, 1973 ] . For a comprehensive treatment of narrowing and E-unification, see [ Kirchner, 1985 ] .
Reference: [ Kapur-Zhang, 1988 ] <author> D. Kapur and H. Zhang, </author> <title> An overview of Rewrite Rule Laboratory (RRL), </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <pages> pp. 559-563, </pages> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin (April 1989). </address>
Reference-contexts: The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and [ Buchberger, 1987 ] . Reve [ Lescanne, 1983 ] , Formel [ Fages, 1984 ] , Kads [ Stickel, 1986 ] , and Rrl <ref> [ Kapur-Zhang, 1988 ] </ref> are four current implementations of AC-completion.
Reference: [ Kapur-etal, 1986 ] <author> D. Kapur, P. Narendran and H. Zhang, </author> <title> Proof by induction using test sets, </title> <booktitle> Proc. of the Eighth International Conference on Automated Deduction, </booktitle> <editor> J. H. Siekmann, ed., </editor> <publisher> Oxford, </publisher> <address> England, </address> <pages> pp. 99-117. </pages> <note> Available as Vol. 230, Lecture Notes in Computer Science, Springer, Berlin (July 1986). </note>
Reference-contexts: In particular, the equation in question does not hold true for "error" terms like pop (fl): alternate (pop (fl); fl) = pop (fl) does not follow from the axioms. Test-set based methods for proofs in the (non-initial) constructor model are described in <ref> [ Kapur-etal, 1986; Zhang, 1988 ] </ref> ; see also [ Kapur-Musser, 1987 ] . 3.3 Computable Algebras When a system R is not terminating, rewriting will not necessarily compute a representative for the congruence class of a term.
Reference: [ Kapur-etal, 1987 ] <author> D. Kapur, P. Narendran and F. Otto, </author> <title> On ground confluence of term rewriting systems, </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, State University of New York at Albany, Albany, NY. </institution> <note> To appear in Information and Computation (March 1987). </note>
Reference-contexts: If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. [ Huet-Hullot, 1980 ] . Ground reducibility is decidable for finite R and empty S <ref> [ Plaisted, 1985; Kapur-etal, 1987 ] </ref> . A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . <p> A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . Testing for ground R-reducibility, however, requires exponential time, even for left-linear R <ref> [ Kapur-etal, 1987 ] </ref> . In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and [ Kounalis, 1985 ] . <p> Ground R=S-reducibility is undecidable when S is a set of associative-commutative axioms <ref> [ Kapur-etal, 1987 ] </ref> , but is decidable when R is left-linear [ Jouannaud-Kounalis, 1989 ] . For ground-convergent systems R, any equation between distinct R-normal forms is considered to be inconsistent with R (considering all symbols in F as constructors). <p> For finite ground systems|even if they are nonterminating|decision procedures exist (see [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] ). Ground confluence, on the other hand, is undecidable, even if the system is terminating <ref> [ Kapur-etal, 1987 ] </ref> .
Reference: [ Kapur-etal, 1987 ] <author> D. Kapur, P. Narendran, D. J. Rosenkrantz and H. Zhang, Sufficient-completeness, </author> <title> quasi-reducibility and their complexity, </title> <type> Technical report, </type> <institution> Department of Computer Science, State University of New York, Albany, </institution> <address> NY (1987). </address>
Reference-contexts: If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. [ Huet-Hullot, 1980 ] . Ground reducibility is decidable for finite R and empty S <ref> [ Plaisted, 1985; Kapur-etal, 1987 ] </ref> . A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . <p> A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . Testing for ground R-reducibility, however, requires exponential time, even for left-linear R <ref> [ Kapur-etal, 1987 ] </ref> . In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and [ Kounalis, 1985 ] . <p> Ground R=S-reducibility is undecidable when S is a set of associative-commutative axioms <ref> [ Kapur-etal, 1987 ] </ref> , but is decidable when R is left-linear [ Jouannaud-Kounalis, 1989 ] . For ground-convergent systems R, any equation between distinct R-normal forms is considered to be inconsistent with R (considering all symbols in F as constructors). <p> For finite ground systems|even if they are nonterminating|decision procedures exist (see [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] ). Ground confluence, on the other hand, is undecidable, even if the system is terminating <ref> [ Kapur-etal, 1987 ] </ref> .
Reference: [ Kapur-etal, 1987 ] <author> D. Kapur, P. Narendran and H. Zhang, </author> <title> On sufficient completeness and related properties of term rewriting systems, </title> <journal> Acta Informatica 24 (4), </journal> <pages> pp. </pages> <month> 395-415 (August </month> <year> 1987). </year>
Reference-contexts: If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. [ Huet-Hullot, 1980 ] . Ground reducibility is decidable for finite R and empty S <ref> [ Plaisted, 1985; Kapur-etal, 1987 ] </ref> . A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . <p> A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] . Testing for ground R-reducibility, however, requires exponential time, even for left-linear R <ref> [ Kapur-etal, 1987 ] </ref> . In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and [ Kounalis, 1985 ] . <p> Ground R=S-reducibility is undecidable when S is a set of associative-commutative axioms <ref> [ Kapur-etal, 1987 ] </ref> , but is decidable when R is left-linear [ Jouannaud-Kounalis, 1989 ] . For ground-convergent systems R, any equation between distinct R-normal forms is considered to be inconsistent with R (considering all symbols in F as constructors). <p> For finite ground systems|even if they are nonterminating|decision procedures exist (see [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] ). Ground confluence, on the other hand, is undecidable, even if the system is terminating <ref> [ Kapur-etal, 1987 ] </ref> .
Reference: [ Kapur-etal, 1988 ] <author> D. Kapur, D. R. Musser and P. Narendran, </author> <title> Only prime superpositions need be considered for the Knuth-Bendix procedure, </title> <journal> J. of Symbolic Computation 4, </journal> <pages> pp. </pages> <month> 19-36 (August </month> <year> 1988). </year>
Reference-contexts: that there exists another proof s $ fl R t, each term of which is derivable from u by ! + R [ Winkler-Buchberger, 1983 ] ; the compositeness criterion ignores critical pairs for which the overlapped term can be rewritten at a position strictly below the point of overlap <ref> [ Kapur-etal, 1988 ] </ref> . 7.2 Regular Systems By enforcing strong restrictions on the form of left-hand sides, confluence can be ensured even for non-terminating systems. Definition 21.
Reference: [ Kirby-Paris, 1982 ] <author> L. Kirby and J. Paris, </author> <title> Accessible independence results for Peano arithmetic, </title> <journal> Bulletin London Mathematical Society 14, </journal> <pages> pp. </pages> <month> 285-293 </month> <year> (1982). </year>
Reference-contexts: In particular, integer polynomials place a double-exponential bound on the length of a derivation [ Lautemann, 1988 ] . The following system, based on the "Battle of Hydra and Hercules" in <ref> [ Kirby-Paris, 1982 ] </ref> , is terminating, but not provably so in Peano Arithmetic: 20 h (z; e (x)) ! h (c (z); d (z; x)) d (z; g (x; y)) ! g (e (x); d (z; y)) g (e (x); e (y)) ! e (g (x; y)) Think of g
Reference: [ Kirchner, 1985 ] <editor> C. Kirchner, Methodes et outils de conception systematique d'algorithmes d'unification dans les theories equationnelles, These d'Etat, </editor> <address> Universite de Nancy, Nancy, France (June 1985). </address>
Reference-contexts: A popular exposition on the undecidability of the existence of solutions to Diophantine equations is [ Davis-Hersh, 1973 ] . For a comprehensive treatment of narrowing and E-unification, see <ref> [ Kirchner, 1985 ] </ref> . For the satisfiability problem of arbitrary first-order formulae with equality as the only predicate, see [ Maher, 1988 ] ,Comon-Lescanne-1989. 7 CRITICAL PAIRS In this section, we continue our study of the Church-Rosser property for rewrite systems.
Reference: [ Kirchner, 1986 ] <editor> C. Kirchner, </editor> <booktitle> Computing unification algorithms, Proc. of the First IEEE Symposium on Logic in Computer Science, </booktitle> <address> Cambridge, </address> <publisher> Massachussets, </publisher> <pages> pp. </pages> <month> 206-216 (June </month> <year> 1986). </year> <month> 55 </month>
Reference-contexts: Two special cases have been investigated: (i) when E is "strict" in the sense that for any valid equation s = t, there exists a proof with at most one proof step taking place at the top position <ref> [ Kirchner, 1986 ] </ref> ; and (ii) when there exists a ground-convergent set of rules complete for E. In the first case, axioms of the form x = t, for variable x, are disallowed; hence splice is superfluous.
Reference: [ Kirchner, 1987 ] <editor> C. Kirchner, </editor> <booktitle> Proc. of the Colloquium on Trees in Algebra and Programming, Order-sorted equational unification (1987). </booktitle>
Reference-contexts: Order-sorted unification is investigated in [ Walther, 1988; Meseguer-etal, 1989 ] and order-sorted completion, in <ref> [ Kirchner, 1987 ] </ref> . 9.2 Conditional Rewriting Another way to restrict applicability of equations is to add enabling conditions.
Reference: [ Kirchner, 1989 ] <author> C. Kirchner, </author> <title> From unification in combination of equational theories to a new AC-unification algorithm, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 171-210 </month> <year> (1989). </year>
Reference-contexts: For example, a complete unification algorithm exists for associativity and commutativity (AC) [ Stickel, 1981; Herold-Siekmann, 1987 ] ; alternative algorithms with better performance are <ref> [ Kirchner, 1989; Boudet, 1989 ] </ref> . Other theories for which algorithms are available that compute finite, complete sets of most general E-unifiers include commutativity, AC with identity and/or idempotency (see [ Fages, 1987 ] ), as well as Boolean rings (see [ Boudet-etal, 1988 ] ). <p> Methods of combining unification algorithms for well-behaved theories that do not share symbols have been given in <ref> [ Yelick, 1987; Kirchner, 1989; Boudet-etal, 1988 ] </ref> ; The general case was solved in [ Schmidt-Schauss, 1988 ] .
Reference: [ Klop, 1980 ] <author> J. W. Klop, </author> <title> Reduction cycles in combinatory logic, in: To H. </title> <editor> B. </editor> <booktitle> Curry, Essays on Combina-tory Logic, Lambda Calculus and Formalism, </booktitle> <editor> J. P. Seldin, R. Hendley, ed., </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 193-214 </month> <year> (1980). </year>
Reference-contexts: This uniqueness result is up to literal similarity. Uniqueness does not, however, hold for arbitrary canonical class-rewriting systems [ Dershowitz-etal, 1988 ] , but does for associative-commutative systems [ Lankford-Ballantyne, 1983 ] . 7.6 Further Reading A detailed study of the Church-Rosser property of non-overlapping systems is <ref> [ Klop, 1980 ] </ref> . Computing with regular systems is the subject of [ O'Donnell, 1977a ] . 8 COMPLETION In the previous section, we saw that confluence of finite terminating systems can be decided using the superposition test.
Reference: [ Klop, 1987 ] <author> J. W. Klop, </author> <title> Term rewriting systems: A tutorial, </title> <booktitle> Bulletin of the European Association for Theoretical Computer Science 32, </booktitle> <pages> pp. </pages> <month> 143-183 (June </month> <year> 1987). </year>
Reference-contexts: The completion procedure, its extensions, refinements, and main uses, are examined in Section 8. Brief mention of variations on the rewriting theme is made in the final section. 1.1 Further Reading Previous surveys of term rewriting include <ref> [ Huet-Oppen, 1980; Buchberger-Loos, 1982; Jouannaud-Lescanne, 1987; Klop, 1987 ] </ref> . 2 SYNTAX Algebraic data types are an important application area for rewrite-based equational reasoning. <p> But this same example (let F = f0; succ; g) demonstrates that not all decidable word problems can be decided by a finite rewrite system over the same vocabulary; cf. <ref> [ Klop, 1987 ] </ref> . <p> Huet [ 1980 ] introduced the use of (Noethe-rian) induction on terminating relations for studying these notions. Confluence (the vanilla-flavored kind) and many related properties of relations are discussed in <ref> [ Klop, 1987 ] </ref> . 5 TERMINATION Recall that a rewrite system R is terminating for a set of terms T if there are no infinite derivations t 1 ! R t 2 ! R of terms in T .
Reference: [ Knight, 1989 ] <author> K. Knight, </author> <title> Unification: A multidisciplinary survey, </title> <booktitle> Computing Surveys 21 (1), </booktitle> <pages> pp. </pages> <month> 93-124 (March </month> <year> 1989). </year>
Reference-contexts: Class-rewriting yields similar results [ Jouannaud-etal, 1983 ] . 6.4 Further Reading For a survey regarding syntactic unification, see [ Lassez-etal, 1988 ] ; for unification in general, see [ Huet, 1976 ] . For a survey of theory and applications of syntactic and semantic unification, see <ref> [ Knight, 1989 ] </ref> . Questions of decidability of unification in equational theories are summarized in [ Siekmann, 1984 ] ; a summary of complexity results for some of the decidable cases is [ Kapur-Narendran, 1987 ] .
Reference: [ Knuth-Bendix, 1970 ] <author> D. E. Knuth and P. B. Bendix, </author> <title> Simple word problems in universal algebras, in: Computational Problems in Abstract Algebra, </title> <editor> J. Leech, ed., </editor> <publisher> Pergamon Press, Oxford, U. K., </publisher> <pages> pp. 263-297. </pages> <booktitle> Reprinted [1983] in Automation of Reasoning 2, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1970). </year>
Reference-contexts: Such a system also serves as a procedure for deciding whether two terms are equal in the equational theory defined by the rules, and, in particular, solves the "word problem" for that theory. Knuth <ref> [ Knuth-Bendix, 1970 ] </ref> devised an effective test (based on critical overlaps) to determine for any given terminating system if, in fact, all computations converge to a canonical form, regardless of the non-deterministic choices made. <p> The relation ! is equivalent to the intersection when is total. 2.6 Further Reading The standard work on the Lambda Calculus is [ Barendregt, 1984 ] ; its role in the semantics of functional programming is discussed in [ Barendregt, 1989 ] . Evans [ 1951 ] and Knuth <ref> [ Knuth-Bendix, 1970 ] </ref> pioneered the use of rewrite systems as decision procedures for validity in equational theories. Bledsoe [ 1977 ] was an early advocate of incorporating rewriting techniques in general-purpose theorem provers. 3 SEMANTICS As is usual in logic, models give meaning to syntactic constructs. <p> Similar semantically-oriented orderings have been devised; they replace the test f g by s t, where is now a well-founded quasi-ordering of terms, not function symbols. For example, the Knuth-Bendix ordering <ref> [ Knuth-Bendix, 1970 ] </ref> assigns a weight to a term which is the sum of the weights of its constituent function symbols. Terms of equal weight have their subterms compared lexicographically. Methods for choosing weights are described in [ Lankford, 1979; Martin, 1987 ] . <p> Let cp (R) denote the set of all critical pairs between (not necessarily distinct, but perhaps renamed) rules in R and let $ cp (R) denote its symmetric rewrite closure. Critical Pair Lemma ( <ref> [ Knuth-Bendix, 1970 ] </ref> ). For any rewrite system R and peak s R u ! R t, there either exists a rewrite proof s ! fl R v fl R t or a critical-pair proof s $ cp (R) t. The proof [ Knuth-Bendix, 1970 ] , depicted in Figure <p> Critical Pair Lemma ( <ref> [ Knuth-Bendix, 1970 ] </ref> ). For any rewrite system R and peak s R u ! R t, there either exists a rewrite proof s ! fl R v fl R t or a critical-pair proof s $ cp (R) t. The proof [ Knuth-Bendix, 1970 ] , depicted in Figure 4, considers all relative positions of the two redexes. As stressed in [ Huet, 1980 ] , no assumption of termination is necessary for this lemma. <p> This holds, for instance, for the stack interleaving example of Section 3.2. Since finite systems have a finite number of critical pairs, their confluence is decidable, provided they are terminating. This criterion for confluence is called the superposition test <ref> [ Knuth-Bendix, 1970 ] </ref> . Without termination, a system may have no critical pairs (hence be locally confluent), and still be non confluent. A system sans critical pairs (except trivial ones of the form t = t) is called non-overlapping , or non-ambiguous. <p> But, often enough, repeating this process eventually leads to a convergent system, with all critical pairs having rewrite proofs. This procedure is called completion. Interestingly, the critical pairs generated along the way are frequently the kind of lemmata a mathematician would come up with <ref> [ Knuth-Bendix, 1970 ] </ref> . Starting with a finite set of equations and a reduction ordering on terms, the completion procedure attempts to find a finite canonical system for the theory presented by the equations by generating critical pairs and orienting them as necessary. <p> As pointed out already in <ref> [ Knuth-Bendix, 1970 ] </ref> , such failures can be circumvented by incorporating an inference rule that adds s ! k (x 1 ; : : : ; x n ) and t ! k (x 1 ; : : : ; x n ) to R i if s = t
Reference: [ Kounalis-Rusinowitch, 1988 ] <author> E. Kounalis and M. Rusinowitch, </author> <title> On word problems in Horn theories, </title> <booktitle> Proc. of the Ninth International Conference on Automated Deduction, </booktitle> <editor> E. Lusk, R. Overbeek, ed., </editor> <address> Argonne, Illinois. </address> <note> Available as Vol. </note> <month> 310, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 527-537 (May </month> <year> 1988). </year>
Reference-contexts: To handle more general systems of conditional rules, rules must be overlapped on 45 conditions, extending ordered completion to what has been called "oriented paramodulation" <ref> [ Ganzinger, 1987; Dershowitz, 1988; Kounalis-Rusinowitch, 1988 ] </ref> . 9.3 Priority Rewriting In priority rewriting, the choice among several possible redexes is constrained to meet, a priori, given priorities on the rules. Priorities, then, are just a partial ordering of rules.
Reference: [ Kounalis, 1985 ] <author> E. Kounalis, </author> <title> Validation de specifications algebriques par completion inductive, </title> <institution> These d'Etat, Universite de Nancy, </institution> <address> Nancy, France (July 1985). </address>
Reference-contexts: In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and <ref> [ Kounalis, 1985 ] </ref> .
Reference: [ Krishnamoorthy-Narendran, 1984 ] <author> M. S. Krishnamoorthy and P. Narendran, </author> <title> A note on recursive path ordering, Unpublished note, General Electric Corporate Research and Development, </title> <address> Schenectady, NY (1984). </address>
Reference-contexts: a more powerful ordering, which we call the recursive path ordering and which is related to Ackermann's ordinal notation [ Dershowitz-Okada, 1988a ] . (The original "recursive path ordering" [ Dershowitz, 1982a ] was of the multiset variety.) Determining if a precedence exists that makes two terms comparable is NP-complete <ref> [ Krishnamoorthy-Narendran, 1984 ] </ref> . 24 These precedence-based orderings are "syntactic", looking at function symbols one at a time. Similar semantically-oriented orderings have been devised; they replace the test f g by s t, where is now a well-founded quasi-ordering of terms, not function symbols.
Reference: [ Kruskal, 1960 ] <author> J. B. Kruskal, </author> <title> Well-quasi-ordering, the Tree Theorem, and Vazsonyi's conjecture, </title> <journal> Transactions of the American Mathematical Society 95, </journal> <pages> pp. </pages> <month> 210-225 (May </month> <year> 1960). </year>
Reference-contexts: The following deep result is at the heart of our argument: Tree Theorem ( <ref> [ Kruskal, 1960 ] </ref> ). If _ is a well-quasi-ordering of a vocabulary F, then the embedding relation _emb is a well-quasi-ordering of the terms T (F ). It has a beautiful proof, due to [ Nash-Williams, 1963 ] : Proof.
Reference: [ Kruskal, 1972 ] <author> J. B. Kruskal, </author> <title> The theory of well-quasi-ordering: A frequently discovered concept, </title> <journal> J. Combinatorial Theory Ser. </journal> <volume> A 13 (3), </volume> <pages> pp. </pages> <month> 297-305 (November </month> <year> 1972). </year>
Reference-contexts: For a survey of the history and applications of well-quasi-orderings, see <ref> [ Kruskal, 1972 ] </ref> . For a comprehensive survey of termination, see [ Dershowitz, 1987 ] . The multiset and lexicographic path orderings, and their variants (see [ Rusinowitch, 1987 ] ), have been implemented in many rewriting-rule based theorem provers (e.g. [ Lescanne, 1984 ] ).
Reference: [ Kuchlin, 1989 ] <author> W. K uchlin, </author> <title> Inductive completion by ground proof transformation, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 211-244 </month> <year> (1989). </year>
Reference-contexts: When, and if, these pairs all simplify away, the inductive theorems are proven. On the other hand, if any of the hypotheses are false, a contradiction must eventually surface in a fair derivation. The use of critical pair criteria in this connection is explored in <ref> [ Gobel, 1987; Kuchlin, 1989 ] </ref> . How to handle inductive equations that cannot be oriented is discussed in [ Bachmair, 1989b; Jouannaud-Kounalis, 1989 ] . 8.6 First-Order Theorem Proving Rewriting techniques have been applied to first-order theorem proving in two ways.
Reference: [ Lankford-Ballantyne, 1977a ] <author> D. S. Lankford and A. M. Ballantyne, </author> <title> Decision procedures for simple equational theories with permutative axioms: complete sets of permutative reductions, </title> <institution> ATP-37, Departments of Mathematics and Computer Sciences, University of Texas, Austin, </institution> <address> TX (April 1977). </address>
Reference-contexts: Thus, R is essentially computing in the quotient set T =S = f [[t]] S jt 2 T g of S-congruence classes (more precisely, $ fl S -congruence classes), rewriting a term by rewriting any S-equivalent term. Class-rewriting systems were introduced in <ref> [ Lankford-Ballantyne, 1977a ] </ref> for permutative congruences, that is, congruences for which each congruence class is finite. Of great practical importance are associative-commutative (AC) rewrite systems, where S is an equational system consisting of associativity and commutativity axioms for a subset of the binary symbols (in F 2 ).
Reference: [ Lankford-Ballantyne, 1977b ] <author> D. S. Lankford and A. M. Ballantyne, </author> <title> Decision procedures for simple equational theories with commutative-associative axioms: Complete sets of commutative-associative reductions, </title> <institution> Memo ATP-39, Department of Mathematics and Computer Sciences, University of Texas, Austin, </institution> <note> TX (August 1977). </note>
Reference-contexts: The most important case, in practice, is when S is a set of commutativity (C) or associativity-commutativity (AC) axioms for some binary function symbols <ref> [ Lankford-Ballantyne, 1977b; Peterson-Stickel, 1981 ] </ref> . For the purposes of AC-completion, rules are commonly flattened by removing nested occurrences of associative-commutative symbols.
Reference: [ Lankford-Ballantyne, 1979 ] <author> D. S. Lankford and A. M. Ballantyne, </author> <title> The refutation completeness of blocked permutative narrowing and resolution, </title> <booktitle> Proc. of the Fourth Workshop on Automated Deduction, </booktitle> <address> Austin, TX, </address> <pages> pp. </pages> <month> 53-59 (February </month> <year> 1979). </year> <month> 56 </month>
Reference-contexts: One approach is to use resolution for non-equality literals together with some kind of superposition of left-hand sides of equality literals within clauses <ref> [ Lankford-Ballantyne, 1979; Peterson, 1983; Hsiang-Rusinowitch, 1986; Bachmair, 1989a ] </ref> . An alternative approach [ Hsiang-Dershowitz, 1983 ] is to use the Boolean ring system BA of Section 2 and treat logical connectives equationally.
Reference: [ Lankford-Ballantyne, 1983 ] <author> D. S. Lankford and A. M. Ballantyne, </author> <title> On the uniqueness of term rewrit-ing systems, Unpublished note, </title> <institution> Department of Mathematics, Louisiana Tech. University, Ruston, </institution> <note> LA (December 1983). </note>
Reference-contexts: This uniqueness result is up to literal similarity. Uniqueness does not, however, hold for arbitrary canonical class-rewriting systems [ Dershowitz-etal, 1988 ] , but does for associative-commutative systems <ref> [ Lankford-Ballantyne, 1983 ] </ref> . 7.6 Further Reading A detailed study of the Church-Rosser property of non-overlapping systems is [ Klop, 1980 ] .
Reference: [ Lankford, 1975 ] <author> D. S. Lankford, </author> <title> Canonical inference, Memo ATP-32, Automatic Theorem Proving Project, </title> <institution> University of Texas, Austin, TX (December 1975). </institution>
Reference-contexts: A class of exponential interpretations were used for termination arguments in [ Iturriaga, 1967 ] . The use, in particular, of polynomial interpretations was developed in <ref> [ Lankford, 1975; Lankford, 1979 ] </ref> . Here a multivariate integer polynomial f t (x 1 ; : : : ; x n ) of degree n is associated with each n-ary symbol f in F n , for all n. <p> Let cp &gt; (E) denote the set of all such critical pairs between equations in E. Ordered Critical Pair Lemma ( <ref> [ Lankford, 1975 ] </ref> ). <p> But for implementations that are fair in their choice of inferences, one can show that|barring abortion|all provable equations eventually lend themselves to a direct proof by rewriting. This perspective on completion was taken by Huet [ Huet, 1981 ] , and in <ref> [ Lankford, 1975 ] </ref> from the refutational point of view. The difficult part is the need to show that deleting simplifiable rules does not|in the long run|shrink the class of equations having rewrite proofs. <p> Moreover, ground completion need never apply the deduce inference rule, since the collapse rule always applies to one of the rules contributing to a critical pair. And without deduce, completion will not loop. Thus, for any finite set of ground equations, completion is sure to generate a decision procedure <ref> [ Lankford, 1975 ] </ref> , which is not surprising, since all such theories are decidable [ Ackermann, 1954 ] . In fact, various O (n lg n) congruence-closure algorithms exist for the purpose (e.g. [ Downey-etal, 1980 ] ; see also [ Snyder, 1989 ] ). <p> The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] . Early forerunners of ordered completion were <ref> [ Lankford, 1975; Brown, 1975 ] </ref> . Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] .
Reference: [ Lankford, 1975 ] <author> D. S. Lankford, </author> <title> Canonical algebraic simplification in computational logic, Memo ATP-25, Automatic Theorem Proving Project, </title> <institution> University of Texas, Austin, </institution> <address> TX (May 1975). </address>
Reference-contexts: A class of exponential interpretations were used for termination arguments in [ Iturriaga, 1967 ] . The use, in particular, of polynomial interpretations was developed in <ref> [ Lankford, 1975; Lankford, 1979 ] </ref> . Here a multivariate integer polynomial f t (x 1 ; : : : ; x n ) of degree n is associated with each n-ary symbol f in F n , for all n. <p> Let cp &gt; (E) denote the set of all such critical pairs between equations in E. Ordered Critical Pair Lemma ( <ref> [ Lankford, 1975 ] </ref> ). <p> But for implementations that are fair in their choice of inferences, one can show that|barring abortion|all provable equations eventually lend themselves to a direct proof by rewriting. This perspective on completion was taken by Huet [ Huet, 1981 ] , and in <ref> [ Lankford, 1975 ] </ref> from the refutational point of view. The difficult part is the need to show that deleting simplifiable rules does not|in the long run|shrink the class of equations having rewrite proofs. <p> Moreover, ground completion need never apply the deduce inference rule, since the collapse rule always applies to one of the rules contributing to a critical pair. And without deduce, completion will not loop. Thus, for any finite set of ground equations, completion is sure to generate a decision procedure <ref> [ Lankford, 1975 ] </ref> , which is not surprising, since all such theories are decidable [ Ackermann, 1954 ] . In fact, various O (n lg n) congruence-closure algorithms exist for the purpose (e.g. [ Downey-etal, 1980 ] ; see also [ Snyder, 1989 ] ). <p> The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] . Early forerunners of ordered completion were <ref> [ Lankford, 1975; Brown, 1975 ] </ref> . Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] .
Reference: [ Lankford, 1979 ] <author> D. S. Lankford, </author> <title> On proving term rewriting systems are Noetherian, </title> <institution> Memo MTP-3, Mathematics Department, Louisiana Tech. University, Ruston, LA. </institution> <month> Revised October </month> <year> 1979 </year> <month> (May </month> <year> 1979). </year>
Reference-contexts: A class of exponential interpretations were used for termination arguments in [ Iturriaga, 1967 ] . The use, in particular, of polynomial interpretations was developed in <ref> [ Lankford, 1975; Lankford, 1979 ] </ref> . Here a multivariate integer polynomial f t (x 1 ; : : : ; x n ) of degree n is associated with each n-ary symbol f in F n , for all n. <p> For example, the Knuth-Bendix ordering [ Knuth-Bendix, 1970 ] assigns a weight to a term which is the sum of the weights of its constituent function symbols. Terms of equal weight have their subterms compared lexicographically. Methods for choosing weights are described in <ref> [ Lankford, 1979; Martin, 1987 ] </ref> . None of these orderings, however, can prove termination of the rule f (f (x)) ! f (g (f (x))), since the right-hand side is embedded in the left.
Reference: [ Lankford, 1981 ] <author> D. S. Lankford, </author> <title> A simple explanation of inductionless induction, </title> <institution> Memo MTP-14, Department of Mathematics, Louisiana Tech. University, Ruston, </institution> <note> LA (August 1981). </note>
Reference-contexts: If there exists a ground-convergent system R 0 , with the same ground normal forms as R, and which presents the same equational theory as R [ fs = tg, then inconsistency is precluded <ref> [ Lankford, 1981 ] </ref> . It can readily be shown that R (G) R 0 (G), for any two systems R and R 0 , iff every left-hand side of R 0 is ground R-reducible [ Dershowitz, 1982b; 15 Jouannaud-Kounalis, 1989 ] . <p> This method, relating validity in the initial algebra to ground-reducibility, extends to class-rewriting, with ground R=S-reducibility replacing its ordinary counterpart <ref> [ Goguen, 1980; Lankford, 1981; Jouannaud-Kounalis, 1989 ] </ref> . In Section 8, we will consider how to search for an appropriate R 0 .
Reference: [ Lankford-etal, 1984 ] <author> D. Lankford, G. Butler and A. Ballantyne, </author> <title> A progress report on new decision algorithms for finitely presented Abelian groups, </title> <editor> R. E. Shostak, ed., </editor> <address> Napa, CA. </address> <note> Available as Vol. </note> <month> 170, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 128-141 </month> <year> (1984). </year>
Reference-contexts: By supplying completion with a complete simplification ordering, these critical pairs can always be oriented. (The complete ordering must be compatible with the canonical system for the non-ground rules.) For example, AC-completion can be used in this way to generate decision procedures for finitely-presented Abelian groups starting from G=AC <ref> [ Lankford-etal, 1984 ] </ref> . We now turn our attention to completion of ordered rewriting systems, and call the process "ordered" (or "unfailing") completion. Ordered completion either returns a (finite) ordered rewriting system in finite time, or else loops and generates an infinite system. <p> Rewrite-based decision procedures for semigroups, monoids, and groups are investigated in [ Benninghofen-etal, 1987 ] ; experiments with the completion of finitely-presented algebras are described in <ref> [ Lankford-etal, 1984; LeChenadec, 1985 ] </ref> ; some new classes of decidable monadic word problems were found in [ Pedersen, 1989 ] . The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] .
Reference: [ Lassez-etal, 1988 ] <author> J.-L. Lassez, M. J. Maher and K. Marriott, </author> <title> Unification revisited, </title> <editor> J. Minker, ed., </editor> <booktitle> in: Foundations of Deductive Databases and Logic Programming, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <pages> pp. </pages> <month> 587-625 </month> <year> (1988). </year>
Reference-contexts: Class-rewriting yields similar results [ Jouannaud-etal, 1983 ] . 6.4 Further Reading For a survey regarding syntactic unification, see <ref> [ Lassez-etal, 1988 ] </ref> ; for unification in general, see [ Huet, 1976 ] . For a survey of theory and applications of syntactic and semantic unification, see [ Knight, 1989 ] .
Reference: [ Lautemann, 1988 ] <author> C. Lautemann, </author> <title> A note on polynomial interpretation, </title> <booktitle> Bulletin of the European Association for Theoretical Computer Science 36, </booktitle> <pages> pp. </pages> <month> 129-131 (October </month> <year> 1988 </year> ). 
Reference-contexts: Primitive-recursive interpretations cannot suffice for termination proofs in general, since they would place a bound on the length of computations [ Stickel, 1976 ] . In particular, integer polynomials place a double-exponential bound on the length of a derivation <ref> [ Lautemann, 1988 ] </ref> .
Reference: [ LeChenadec, 1985 ] <author> P. Le Chenadec, </author> <title> Canonical Forms in Finitely Presented Algebras, </title> <address> Pitman-Wiley, London (1985). </address>
Reference-contexts: Rewrite-based decision procedures for semigroups, monoids, and groups are investigated in [ Benninghofen-etal, 1987 ] ; experiments with the completion of finitely-presented algebras are described in <ref> [ Lankford-etal, 1984; LeChenadec, 1985 ] </ref> ; some new classes of decidable monadic word problems were found in [ Pedersen, 1989 ] . The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] .
Reference: [ LeChenadec, 1987 ] <author> P. Le Chenadec, </author> <title> Analysis of Dehn's algorithm by critical pairs, </title> <booktitle> Theoretical Computer Science 51 (1,2), </booktitle> <pages> pp. </pages> <month> 27-52 </month> <year> (1987). </year>
Reference-contexts: The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in <ref> [ LeChenadec, 1987 ] </ref> . Early forerunners of ordered completion were [ Lankford, 1975; Brown, 1975 ] . Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] .
Reference: [ Lescanne, 1983 ] <author> P. Lescanne, </author> <title> Computer experiments with the Reve term rewriting system generator, </title> <booktitle> Proc. of the Tenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, TX, </address> <pages> pp. </pages> <month> 99-108 (January </month> <year> 1983). </year>
Reference-contexts: For a book focusing on the abstract view of completion and its variants, see [ Bachmair, 1989b ] . The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and [ Buchberger, 1987 ] . Reve <ref> [ Lescanne, 1983 ] </ref> , Formel [ Fages, 1984 ] , Kads [ Stickel, 1986 ] , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion.
Reference: [ Lescanne, 1984 ] <author> P. Lescanne, </author> <title> Uniform termination of term-rewriting systems with status, </title> <booktitle> Proc. of the Ninth Colloquium on Trees in Algebra and Programming, </booktitle> <publisher> Cambridge University Press, </publisher> <address> Bordeaux, France (March 1984). </address>
Reference-contexts: For a comprehensive survey of termination, see [ Dershowitz, 1987 ] . The multiset and lexicographic path orderings, and their variants (see [ Rusinowitch, 1987 ] ), have been implemented in many rewriting-rule based theorem provers (e.g. <ref> [ Lescanne, 1984 ] </ref> ). Some 25 results on the complexity of derivations appear in [ Choppy-etal, 1987 ] . 6 SATISFIABILITY We turn our attention now to the determination of satisfiability.
Reference: [ Loos, 1981 ] <author> R. Loos, </author> <title> Term reduction systems and algebraic algorithms, </title> <booktitle> Proc. of the Fifth GI Workshop on Artificial Intelligence, </booktitle> <address> Bad Honnef, West Germany, </address> <pages> pp. 214-234. </pages> <note> Available as Informatik Fachberichte, Vol. 47 (1981). </note>
Reference-contexts: For a book focusing on the abstract view of completion and its variants, see [ Bachmair, 1989b ] . The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in <ref> [ Loos, 1981 ] </ref> and [ Buchberger, 1987 ] . Reve [ Lescanne, 1983 ] , Formel [ Fages, 1984 ] , Kads [ Stickel, 1986 ] , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion.
Reference: [ Maher, 1988 ] <author> M. J. Maher, </author> <title> Complete axiomatizations of the algebras of the finite, rational and infinite trees, </title> <booktitle> Proc. of the Third IEEE Symposium on Logic in Computer Science, </booktitle> <address> Edinburgh, UK, </address> <pages> pp. </pages> <month> 348-357 (July </month> <year> 1988). </year>
Reference-contexts: A popular exposition on the undecidability of the existence of solutions to Diophantine equations is [ Davis-Hersh, 1973 ] . For a comprehensive treatment of narrowing and E-unification, see [ Kirchner, 1985 ] . For the satisfiability problem of arbitrary first-order formulae with equality as the only predicate, see <ref> [ Maher, 1988 ] </ref> ,Comon-Lescanne-1989. 7 CRITICAL PAIRS In this section, we continue our study of the Church-Rosser property for rewrite systems. In particular, we will see that confluence is decidable for finite, terminating systems.
Reference: [ Makanin, 1978 ] <author> J. Makanin, </author> <title> The problem of solvability of equations in a free semi-group, </title> <journal> American Mathematical Society. </journal> <note> Also in Math. USSR Sbornik 32 (2), </note> <year> 1977 (1978). </year>
Reference-contexts: Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic [ Presburger, 1927; Shostak, 1979 ] , real closed fields [ Tarski, 1951; Collins, 1975 ] and monoids <ref> [ Makanin, 1978 ] </ref> .
Reference: [ Manna-Ness, 1970 ] <author> Z. Manna and Steven Ness, </author> <title> On the termination of Markov algorithms, </title> <booktitle> Proc. of the Third Hawaii International Conference on System Science, </booktitle> <address> Honolulu, HI, </address> <pages> pp. </pages> <month> 789-792 (January </month> <year> 1970). </year>
Reference-contexts: As suggested in <ref> [ Manna-Ness, 1970 ] </ref> , it is oftentimes convenient to separate reduction orderings into a homomorphism t from the ground terms G (F) to an F-algebra W and a "standard" well-founded ordering on W.
Reference: [ Markov, 1947 ] <author> A. A. </author> <title> Markov, The impossibility of some algorithms in the theory of associative systems, </title> <journal> Doklady Akademii Nauk SSSR 55 (7), </journal> <pages> pp. 587-590. </pages> <note> In Russian (1947). 57 </note>
Reference: [ Martelli-Montanari, 1982 ] <author> A. Martelli and U. Montanari, </author> <title> An efficient unification algorithm, </title> <booktitle> Transac--tions on Programming Languages and Systems 4 (2), </booktitle> <pages> pp. </pages> <month> 258-282 (April </month> <year> 1982). </year>
Reference-contexts: This fundamental uniqueness result for first-order terms does not hold true for higher-order languages with function variables [ Huet, 1976 ] . 26 Robinson [ 1965 ] was the first to give an algorithm for finding most general unifiers. Following <ref> [ Herbrand, 1930; Martelli-Montanari, 1982 ] </ref> , we view unification as a step-by-step process of transforming multisets of equations, until a "solved form" is obtained from which the most general unifier can be extracted. <p> The coalesce rule allows us to avoid the use of "multi-equations"; cf. <ref> [ Martelli-Montanari, 1982 ] </ref> .
Reference: [ Martelli-etal, 1989 ] <author> A. Martelli, G. F. Rossi and C. Moiso, </author> <title> Lazy unification algorithms for canonical rewrite systems, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 245-274 </month> <year> (1989). </year>
Reference-contexts: The latter is Hilbert's Tenth Problem, shown to be undecidable in [ Matijasevic, 1970 ] . (Cf. [ Bockmayr, 1987; Heilbrunner-Holldobler, 1987 ] .) When a convergent R is available, a one-way sort of paramodulation suffices, due to the existence of a rewrite proof for an arbitrary valid equation <ref> [ Dershowitz-etal, 1987b; Martelli-etal, 1989 ] </ref> .
Reference: [ Martin, 1987 ] <author> U. Martin, </author> <title> How to choose the weights in the Knuth-Bendix ordering, </title> <booktitle> Proc. of the Second International Conference on Rewriting Techniques and Applications, </booktitle> <editor> P. Lescanne, ed., </editor> <booktitle> Bordeaux, France, </booktitle> <pages> pp. 42-53. </pages> <note> Available as Vol. 256, Lecture Notes in Computer Science, Springer, Berlin (May 1987). </note>
Reference-contexts: For example, the Knuth-Bendix ordering [ Knuth-Bendix, 1970 ] assigns a weight to a term which is the sum of the weights of its constituent function symbols. Terms of equal weight have their subterms compared lexicographically. Methods for choosing weights are described in <ref> [ Lankford, 1979; Martin, 1987 ] </ref> . None of these orderings, however, can prove termination of the rule f (f (x)) ! f (g (f (x))), since the right-hand side is embedded in the left.
Reference: [ Matijasevic, 1967 ] <author> J. V. Matijasevic, </author> <title> Simple examples of undecidable associative calculi, </title> <booktitle> Soviet Mathematics (Dokladi) 8 (2), </booktitle> <pages> pp. </pages> <month> 555-557 </month> <year> (1967). </year>
Reference-contexts: The following is one of the simple (semigroup) theories with an undecidable word problem given in <ref> [ Matijasevic, 1967 ] </ref> (F 0 = fa; bg, F 2 = fg, and products are abbreviated as before): x (yz) = (xy)z a 2 bab 2 a = b 2 a 3 ba b 3 a 2 b 2 a 2 ba = b 3 a 2 b 2 a
Reference: [ Matijasevic, 1970 ] <author> J. V. Matijasevic, </author> ?, <note> Soviet Mathematics (Dokladi) (1970). </note>
Reference-contexts: E-unifiability is undecidable whenever the word problem is, and in many other cases as well. For example, the solvability of Diophantine equations, that is, polynomial equations over the integers, is undecidable <ref> [ Matijasevic, 1970 ] </ref> , as is unifiability under associativity and distributivity alone [ Szabo, 1982 ] ). Satisfiability may be undecidable even even when congruence classes are finite (as for associativity, commutativity, and distributivity [ Siekmann, 1984 ] ). <p> The latter is Hilbert's Tenth Problem, shown to be undecidable in <ref> [ Matijasevic, 1970 ] </ref> . (Cf. [ Bockmayr, 1987; Heilbrunner-Holldobler, 1987 ] .) When a convergent R is available, a one-way sort of paramodulation suffices, due to the existence of a rewrite proof for an arbitrary valid equation [ Dershowitz-etal, 1987b; Martelli-etal, 1989 ] .
Reference: [ McKenzie-etal, 1987 ] <author> R. McKenzie, G. F. McNulty and W. Taylor, </author> <title> Algebras, Lattices, Varieties, I, </title> <publisher> Wadsworth, </publisher> <address> Monterey, CA (1987). </address>
Reference-contexts: On the other hand, equality (the word problem) is decidable in what are called "computable" algebras [ Meseguer-Goguen, 1985 ] ; see [ Wirsing, 1989 ] . 3.4 Further Reading For a survey of equational logic, see [ Taylor, 1979 ] . A comprehensive multi-volume work on varieties is <ref> [ McKenzie-etal, 1987; Freese-etal, 1989 ] </ref> . Some relevant recent results are summarized in [ McNulty, 1989 ] .
Reference: [ McNulty, 1989 ] <author> G. F. McNulty, </author> <title> An equational logic sampler, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, </address> <publisher> NC, </publisher> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 234-262 (April </month> <year> 1989). </year>
Reference-contexts: A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . Some relevant recent results are summarized in <ref> [ McNulty, 1989 ] </ref> .
Reference: [ Meseguer-Goguen, 1985 ] <author> J. Meseguer and J. A. Goguen, Initiality, </author> <title> induction and computability, in: Alegbraic Methods in Semantics, </title> <editor> M. Nivat, J. Reynolds, ed., </editor> <publisher> Cambridge University Press, </publisher> <pages> pp. 459-540, </pages> <address> Cambridge (1985). </address>
Reference-contexts: Thus, rewrite systems provide a fully general programming paradigm (to the extent that Church's Thesis defines "fully general"). These constructions also imply that most interesting properties, including convergence, are in general undecidable. On the other hand, equality (the word problem) is decidable in what are called "computable" algebras <ref> [ Meseguer-Goguen, 1985 ] </ref> ; see [ Wirsing, 1989 ] . 3.4 Further Reading For a survey of equational logic, see [ Taylor, 1979 ] . A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . <p> A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . Some relevant recent results are summarized in [ McNulty, 1989 ] . A detailed exposition of algebraic aspects of rewriting is <ref> [ Meseguer-Goguen, 1985 ] </ref> ; algebraic semantics are the subject of [ Wirsing, 1989 ] . 4 CHURCH-ROSSER PROPERTIES Newman [ 1942 ] developed a general theory of "sets of moves," that is, of arbitrary binary relations.
Reference: [ Meseguer-etal, 1989 ] <author> J. Meseguer, J. A. Goguen and G. Smolka, </author> <title> Order-sorted unification, </title> <journal> J. of Symbolic Computation. </journal> <note> To appear (1989). </note>
Reference-contexts: One way to preclude such anomalies is to insist that rules be "sort decreasing," i.e. that any instance of a right-hand side have a sort no larger than that of the corresponding left-hand side [ Goguen-etal, 1985 ] . Order-sorted unification is investigated in <ref> [ Walther, 1988; Meseguer-etal, 1989 ] </ref> and order-sorted completion, in [ Kirchner, 1987 ] . 9.2 Conditional Rewriting Another way to restrict applicability of equations is to add enabling conditions.
Reference: [ Metivier, 1983 ] <author> Y. Metivier, </author> <title> About the rewriting systems produced by the Knuth-Bendix completion algorithm, </title> <booktitle> Information Processing Letters 16 (1), </booktitle> <pages> pp. </pages> <month> 31-34 (January </month> <year> 1983). </year>
Reference-contexts: with the occurrence of y 1 replaced by the smallest term (viz. c 1 ) under &gt; lpo . 7.5 Reduced Systems By reducing right-hand sides and deleting rules with rewritable left-hand sides, a convergent system can always be converted into a canonical, i.e. reduced and convergent, one (see, e.g., <ref> [ Metivier, 1983 ] </ref> ). One of the nice things about reduced systems is that, for any given equational theory, there can be only one (finite or infinite) canonical system contained in a particular reduction ordering [ Butler-Lankford, 1980; Metivier, 1983 ] . <p> One of the nice things about reduced systems is that, for any given equational theory, there can be only one (finite or infinite) canonical system contained in a particular reduction ordering <ref> [ Butler-Lankford, 1980; Metivier, 1983 ] </ref> . This uniqueness result is up to literal similarity.
Reference: [ Muller-Socher-Ambrosius, 1988 ] <author> J. M uller and R. Socher-Ambrosius, </author> <title> Topics in completion theorem proving, </title> <institution> SEKI-Report SR-88-13, Fachbereich Informatik, Universitat Kaiserslautern, Kaiserslautern, </institution> <address> West Germany (1988). </address>
Reference-contexts: Hsiang [ 1985 ] showed that if each equation in E is of the form xor (s; T ) = F , where s is the exclusive-or normal form of a clause, then only a subset of the critical pairs with BA must be computed. (See <ref> [ Muller-Socher-Ambrosius, 1988 ] </ref> for clarifications regarding the need for "factoring" if terms are simplified via BA.) This approach allows the integration of convergent systems for relevant equational theories, when such are available.
Reference: [ Musser, 1980 ] <author> D. R. Musser, </author> <title> On proving inductive properties of abstract data types, </title> <booktitle> Proc. of the Seventh ACM Symposium on Principles of Programming Languages, </booktitle> <address> Las Vegas, NV, </address> <pages> pp. </pages> <month> 154-162 </month> <year> (1980). </year>
Reference-contexts: Lankford's procedure paramodulates to circumvent failure of completion. Rewriting techniques have also been applied <ref> [ Musser, 1980 ] </ref> to proving inductive theorems by showing that no contradiction can result from assuming the validity of the theorem in question. In the next two sections, we take a brief look at the syntax and semantics of equations from the algebraic, logical, and operational points of view. <p> reduction ordering (the Skolem constants are added to the algebra, hence must be comparable), the outcome T = F characterizes validity of s = t in the theory of E [ Hsiang-Rusinowitch, 1987 ] . 8.5 Inductive Theorem Proving An inductive theorem-proving method based on completion was first proposed in <ref> [ Musser, 1980 ] </ref> . Recall from Section 3.2 that an inductive theorem s = I (E) t holds iff there is no equation u = v between ground terms that follows from E [ fs = tg, but not from E alone.
Reference: [ Nash-Williams, 1963 ] <author> C. St. J. A. Nash-Williams, </author> <title> On well-quasi-ordering finite trees, </title> <booktitle> Proc. of the Cam-bridge Philosophical Society 59 (4), </booktitle> <pages> pp. </pages> <month> 833-835 (October </month> <year> 1963). </year>
Reference-contexts: The following deep result is at the heart of our argument: Tree Theorem ( [ Kruskal, 1960 ] ). If _ is a well-quasi-ordering of a vocabulary F, then the embedding relation _emb is a well-quasi-ordering of the terms T (F ). It has a beautiful proof, due to <ref> [ Nash-Williams, 1963 ] </ref> : Proof. Note that, by the infinite version of Ramsey's Theorem, any infinite sequence of elements of a well-quasi-ordered set must contain a subsequence that constitutes an infinite quasi-ascending chain. Suppose, now, that the theorem were false.
Reference: [ Newman, 1942 ] <author> M. H. A. Newman, </author> <title> On theories with a combinatorial definition of `equivalence', </title> <booktitle> Annals of Mathematics 43 (2), </booktitle> <pages> pp. </pages> <month> 223-243 </month> <year> (1942). </year>
Reference-contexts: Sometimes the notation " is used for the common ancestor relation and # for joinability (common descendent); then confluence boils down to " #. See Figure 1 (b). The equivalence with the Church-Rosser property <ref> [ Newman, 1942 ] </ref> , can be shown by a simple inductive argument on the number of divergences fl ffi ! fl making up $ fl . <p> Figure 1 (c). (A slightly weaker definition is given in [ Huet, 1980 ] , namely ffi ! ! fl ffi = , which also allows for circumstances like a ! b, a ! c, b ! d ! c, and c ! d ! b.) Strong confluence implies confluence <ref> [ Newman, 1942 ] </ref> by a "tiling" argument. Strong confluence is used in the classical proofs of the Church-Rosser property for the -calculus, since confluence of ! is exactly strong confluence of ! fl (see [ Barendregt, 1984 ] ). Definition 11. <p> Definition 11. A binary relation ! on any set T is locally confluent if any local divergence ffi ! is contained in the joinability relation ! fl ffi fl . See Figure 1 (d). Local confluence does not generally imply confluence; see the counter-examples in Figure 2, due to <ref> [ Newman, 1942 ] </ref> and [ Hindley, 1964 ] . However: Diamond Lemma ( [ Newman, 1942 ] ). A terminating relation is confluent iff it is locally confluent. <p> See Figure 1 (d). Local confluence does not generally imply confluence; see the counter-examples in Figure 2, due to <ref> [ Newman, 1942 ] </ref> and [ Hindley, 1964 ] . However: Diamond Lemma ( [ Newman, 1942 ] ). A terminating relation is confluent iff it is locally confluent. The name derives from the pictorial proof in Figure 3, due to [ Huet, 1980 ] , which uses induction with respect to the terminating relation. <p> The induction is with respect to the well-founded ordering on multisets (see Section 5.1) induced by ! + R=S . It then follows that $ fl S [T is contained in ! fl T ffi $ fl T . 4.3 Further Reading Newman's 1942 paper <ref> [ Newman, 1942 ] </ref> defined the basic notions. Huet [ 1980 ] introduced the use of (Noethe-rian) induction on terminating relations for studying these notions.
Reference: [ Nipkow-Weikum, 1982 ] <author> T. Nipkow and G. Weikum, </author> <title> A decidability result about sufficient-completeness of axiomatically specified abstract data types, </title> <booktitle> Proc. of the Sixth GI Conference on Theoretical Computer Science, Cremers, </booktitle> <address> Kreigel, </address> <publisher> ed., </publisher> <pages> pp. 257-268. </pages> <note> Available as Vol. 145, Lecture Notes in Computer Science, Springer, Berlin (1982). </note>
Reference-contexts: Testing for ground R-reducibility, however, requires exponential time, even for left-linear R [ Kapur-etal, 1987 ] . In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in <ref> [ Nipkow-Weikum, 1982 ] </ref> for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and [ Kounalis, 1985 ] .
Reference: [ O'Donnell, 1977a ] <author> M. J. O'Donnell, </author> <title> Computing in systems described by equations, </title> <booktitle> 58, in: Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin, West Germany (1977). </address> <month> 58 </month>
Reference-contexts: The final result of an unextendible sequence of rule applications is called a "normal form." Rewrite systems defining at most one normal form for any input term can serve as functional programs or as interpreters for equational programs <ref> [ O'Donnell, 1977a ] </ref> . When computations for equal terms always terminate in a unique normal form, a rewrite system may be used as a non-deterministic functional program [ Goguen-Tardo, 1979 ] . <p> Furthermore, there are computational strategies (that is, specific choices of where to rewrite next), such as not forever ignoring an "outermost" redex (one that is not a subterm of another redex), that are guaranteed to result in a normal form whenever there is one <ref> [ O'Donnell, 1977a ] </ref> . An optimal strategy, i.e. one with normalizing derivations of minimal length, is not in general computable [ Huet-Levy, 1990 ] . <p> The above lemma may be weakened to allow critical pairs that join in one parallel step [ Huet, 1980 ] ; the ground case was considered in [ Rosen, 1973 ] . For regular systems, normal forms can be computed by a "parallel-outermost" redex evaluation scheme <ref> [ O'Donnell, 1977a ] </ref> , but not by a "leftmost-outermost" scheme [ Huet-Levy, 1990 ] ; with additional "sequential-ity" requirements, one can efficiently compute normal forms, without lookahead [ Hoffmann-O'Donnell, 1979; Huet-Levy, 1990 ] . <p> Computing with regular systems is the subject of <ref> [ O'Donnell, 1977a ] </ref> . 8 COMPLETION In the previous section, we saw that confluence of finite terminating systems can be decided using the superposition test. Suppose a given system fails that test because some critical pair has no rewrite proof.
Reference: [ O'Donnell, 1977b ] <author> M. J. O'Donnell, </author> <title> Subtree replacement systems: A unifying theory for recursive equa-tions, LISP, Lucid and Combinatory Logic, </title> <booktitle> Proc. of the Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. </pages> <month> 295-305 </month> <year> (1977). </year>
Reference-contexts: More interesting is the ability to code interpreters for functional languages as Church-Rosser systems that are normalizing for input programs that terminate for the given input values; see <ref> [ O'Donnell, 1977b ] </ref> .
Reference: [ Oyamaguchi, 1987 ] <author> M. Oyamaguchi, </author> <title> The Church-Rosser property for ground term rewriting systems is decidable, </title> <note> Theoretical Computer Science 49 (1) (1987). </note>
Reference-contexts: In particular, we will see that confluence is decidable for finite, terminating systems. Confluence, in general, is undecidable [ Huet, 1980 ] , even if all rules are monadic [ Book-etal, 1981 ] . For finite ground systems|even if they are nonterminating|decision procedures exist (see <ref> [ Dauchet-etal, 1987; Oyamaguchi, 1987 ] </ref> ). Ground confluence, on the other hand, is undecidable, even if the system is terminating [ Kapur-etal, 1987 ] .
Reference: [ Paterson-Wegman, 1978 ] <author> M. S. Paterson and M. N. Wegman, </author> <title> Linear unification, </title> <editor> J. </editor> <booktitle> of Computer and System Sciences 16, </booktitle> <publisher> Academic Press, </publisher> <pages> pp. </pages> <month> 158-167 </month> <year> (1978). </year>
Reference: [ Pedersen, 1989 ] <author> J. Pedersen, </author> <title> Morphocompletion for one-relation monoids, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, </address> <publisher> NC, </publisher> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 574-578 (April </month> <year> 1989). </year>
Reference-contexts: Rewrite-based decision procedures for semigroups, monoids, and groups are investigated in [ Benninghofen-etal, 1987 ] ; experiments with the completion of finitely-presented algebras are described in [ Lankford-etal, 1984; LeChenadec, 1985 ] ; some new classes of decidable monadic word problems were found in <ref> [ Pedersen, 1989 ] </ref> . The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] . Early forerunners of ordered completion were [ Lankford, 1975; Brown, 1975 ] .
Reference: [ Peterson-Stickel, 1981 ] <author> G. E. Peterson and M. E. Stickel, </author> <title> Complete sets of reductions for some equational theories, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 28 (2), </booktitle> <pages> pp. </pages> <month> 233-264 (April </month> <year> 1981). </year>
Reference-contexts: Even if S-equivalence classes are computable, they may be impractically large, making class-rewriting prohibitively expensive. These difficulties with R=S are usually circumvented by using a weaker rewrite relation, introduced in <ref> [ Peterson-Stickel, 1981 ] </ref> . We denote this relation by ! SnR (others have used ! R;S ); under it, a term is rewritten only if it has a subterm that is equivalent to an instance of a left-hand side. <p> However, it is often the case that by adding certain consequences as new rules, the two relations can be made to coincide, as shown in <ref> [ Peterson-Stickel, 1981 ] </ref> for AC, and in [ Jouannaud-Kirchner, 1986 ] for the general case. When R=S is terminating and SnR is Church-Rosser modulo S, the theory R [ S can be decided by computing SnR-normal forms and testing for S-equivalence. <p> Compare Figures 2 (g) and 2 (h) with 2 (d). The concept of coherence was developed by [ Jouannaud-Kirchner, 1986 ] and generalizes compatibility, as in <ref> [ Peterson-Stickel, 1981 ] </ref> . Coherence Lemma ( [ Jouannaud-Kirchner, 1986 ] ). Let R T R=S. If R=S is terminating, then T is Church-Rosser modulo S iff it is locally coherent modulo S with both R and S. <p> For example, if S is commutativity and R includes all commutativity variants of its rules, then R-normal forms are unique up to permutations of operands. To handle rewriting modulo a congruence in the presence of non-left-linear rules, <ref> [ Peterson-Stickel, 1981 ] </ref> suggested using the extended rewrite relation SnR to compute normal forms. The set of critical peaks of the 32 form t SnR s ! SnR s [r] p is in general infinite, so the Critical Pair Lemma is of little practical help. <p> The most important case, in practice, is when S is a set of commutativity (C) or associativity-commutativity (AC) axioms for some binary function symbols <ref> [ Lankford-Ballantyne, 1977b; Peterson-Stickel, 1981 ] </ref> . For the purposes of AC-completion, rules are commonly flattened by removing nested occurrences of associative-commutative symbols.
Reference: [ Peterson, 1983 ] <author> G. E. Peterson, </author> <title> A technique for establishing completeness results in theorem proving with equality, </title> <journal> SIAM J. on Computing 12 (1), </journal> <pages> pp. </pages> <month> 82-100 (February </month> <year> 1983). </year>
Reference-contexts: One approach is to use resolution for non-equality literals together with some kind of superposition of left-hand sides of equality literals within clauses <ref> [ Lankford-Ballantyne, 1979; Peterson, 1983; Hsiang-Rusinowitch, 1986; Bachmair, 1989a ] </ref> . An alternative approach [ Hsiang-Dershowitz, 1983 ] is to use the Boolean ring system BA of Section 2 and treat logical connectives equationally.
Reference: [ Plaisted, 1978 ] <author> D. A. Plaisted, </author> <title> Well-founded orderings for proving termination of systems of rewrite rules, </title> <type> Report R-78-932, </type> <institution> Department of Computer Science, University of Illinois, Urbana, </institution> <address> IL (July 1978). </address>
Reference-contexts: This suggests the possibility of construct ing simplification orderings directly from well-founded orderings of vocabularies, or precedences. The idea <ref> [ Plaisted, 1978; Dershowitz, 1982a ] </ref> is that a term s should be bigger than any term that is built from terms smaller than s which are connected together by a structure of function symbols smaller, in the precedence, than the root of s.
Reference: [ Plaisted, 1985 ] <author> D. A. Plaisted, </author> <title> Semantic confluence tests and completion methods, </title> <booktitle> Information and Control 65 (2/3), </booktitle> <pages> pp. </pages> <month> 182-215 (May/June </month> <year> 1985). </year>
Reference-contexts: The rationale is that, by ground reducibility, any non-constructor term t must contain a reducible subterm, and, since the system is terminating and sound for E, t must be equal to a constructor term. This connection between sufficient completeness and ground reducibility is implicit in <ref> [ Plaisted, 1985 ] </ref> . If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. [ Huet-Hullot, 1980 ] . <p> If each left-hand side of a rule in R and each side of an equation in S contains a non-constructor symbol, then property (b) is ensured; cf. [ Huet-Hullot, 1980 ] . Ground reducibility is decidable for finite R and empty S <ref> [ Plaisted, 1985; Kapur-etal, 1987 ] </ref> . A faster decision method is obtained by reducing ground reducibility to the emptiness problem of the language produced by a "conditional tree grammar" describing the system's ground normal forms [ Comon, 1989 ] .
Reference: [ Plotkin, 1972 ] <author> G. Plotkin, </author> <title> Building in equational theories, </title> <booktitle> Machine Intelligence 7, </booktitle> <editor> B. Meltzer, D. Michie, ed., </editor> <publisher> Edinburgh University Press, Edinburgh, Scotland, </publisher> <pages> pp. </pages> <month> 73-90 </month> <year> (1972). </year>
Reference-contexts: We show that the quotient T = * =, ordered by the subsumption relation * , is a lower semi-lattice, by showing that every pair of terms, s and t, has a greatest lower-bound, glb (s; t), called their least (general) generalization <ref> [ Plotkin, 1972 ] </ref> . (Note that T = * = is not an algebra, because literal similarity is not a congruence.) Let LG be the following set of "transformation" rules, operating on pairs (P ; w), where w is a term containing the partial solution, and P contains the pairs <p> Note that E-subsumption is not well-founded for all E. There are decidable theories with infinite sets of most general unifiers (an example is the set of solutions fa i ji 1g to x a = a x, where "" is associative <ref> [ Plotkin, 1972 ] </ref> ), and there are some for which there are solutions, but no most general one [ Fages-Huet, 1983 ] (an example is associativity plus idempotence [ Baader, 1986 ] ).
Reference: [ Post, 1947 ] <author> E. L. Post, </author> <title> Recursive unsolvability of a problem of Thue, </title> <journal> J. of Symbolic Logic 13, </journal> <pages> pp. </pages> <month> 1-11 </month> <year> (1947). </year>
Reference: [ Presburger, 1927 ] <author> M. </author> <title> Presburger, Uber de Vollstandigkeit eines gewissen Systems der Arithmetik ganzer Zahlen, in welchen, die Addition als einzige Operation hervortritt, </title> <institution> Comptes Rendus du Premier Congres des Mathematicienes des Pays Slaves, </institution> <address> Warsaw, </address> <pages> pp. 92-101, </pages> <month> 395 </month> <year> (1927). </year>
Reference-contexts: Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic <ref> [ Presburger, 1927; Shostak, 1979 ] </ref> , real closed fields [ Tarski, 1951; Collins, 1975 ] and monoids [ Makanin, 1978 ] .
Reference: [ Puel, 1989 ] <author> L. Puel, </author> <title> Using unavoidable sets of trees to generalize Kruskal's theorem, </title> <journal> J. of Symbolic Computation. </journal> <note> To appear (1989). </note>
Reference-contexts: The well-foundedness of this "pattern path ordering" is based on a powerful extension of Kruskal's Tree Theorem <ref> [ Puel, 1989 ] </ref> (analogous to a similar theorem on strings in [ Ehrenfeucht-etal, 1983 ] ). 5.4 Combined Systems We saw above that polynomial orderings are applicable to associative-commutative systems, but are severely restrictive.
Reference: [ Puel, 1989 ] <author> L. Puel, </author> <title> Embedding with patterns and associated recursive ordering, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <pages> pp. 371-387, </pages> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin (April 1989). </address>
Reference-contexts: The well-foundedness of this "pattern path ordering" is based on a powerful extension of Kruskal's Tree Theorem <ref> [ Puel, 1989 ] </ref> (analogous to a similar theorem on strings in [ Ehrenfeucht-etal, 1983 ] ). 5.4 Combined Systems We saw above that polynomial orderings are applicable to associative-commutative systems, but are severely restrictive.
Reference: [ Raoult-Vuillemin, 1980 ] <author> J.-C. Raoult and J. Vuillemin, </author> <title> Operational and semantic equivalence between recursive programs, </title> <journal> J. of the Association of Computing Machinery 27 (4), </journal> <pages> pp. </pages> <month> 772-796 (October </month> <year> 1980). </year>
Reference-contexts: The symbol ! k R denotes one "parallel" application of rules in R at disjoint redexes. (For the name and inspiration of this lemma, cf. [ Curry-Feys, 1958 ] ). The confluence of regular systems establishes the consistency of the operational semantics of recursive programming languages; see <ref> [ Raoult-Vuillemin, 1980 ] </ref> . The above lemma may be weakened to allow critical pairs that join in one parallel step [ Huet, 1980 ] ; the ground case was considered in [ Rosen, 1973 ] .
Reference: [ Raoult, 1981 ] <author> J.-C. Raoult, </author> <title> Finiteness results on rewriting systems, </title> <editor> R. A. I. R. O. </editor> <booktitle> Theoretical Informatics 15 (4), </booktitle> <pages> pp. </pages> <month> 373-391 </month> <year> (1981). </year>
Reference-contexts: Even for convergent systems R, the questions whether congruence classes defined by $ fl R are finite in number, or are all finite in size, are undecidable, unless R is ground <ref> [ Raoult, 1981 ] </ref> . 7.1 Term Rewriting Let l ! r and s ! t be two rules.
Reference: [ Raoult, 1984 ] <author> J.-C. Raoult, </author> <title> On graph rewritings, </title> <booktitle> Theoretical Computer Science 32 (1,2), </booktitle> <pages> pp. </pages> <month> 1-24 (July </month> <year> 1984). </year>
Reference-contexts: Unlike trees, graphs do not have a simple structure lending itself to inductive definitions and proofs, for which reason, the graph-rewriting definitions, as introduced in [ Ehrig, 1977 ] and simplified in <ref> [ Raoult, 1984 ] </ref> , have a global flavor. A categorical framework is used to precisely define matching and replacement; a rewriting is then a pushout in a suitable category.
Reference: [ Rety-etal, 198? ] <author> P. R ety, G. Smolka and W. </author> <title> Nutt, </title> <type> Narrowing ???, Report, </type>
Reference-contexts: Variations on narrowing include: normal narrowing [ Fay, 1979 ] (in which terms are normalized via ! ! R before narrowing), basic narrowing [ Hullot, 1980 ] (in which the substitution part of prior narrowings is not subsequently narrowed), and their combination <ref> [ Rety-etal, 198? ] </ref> , all of which are semi-complete for convergent R. Class-rewriting yields similar results [ Jouannaud-etal, 1983 ] . 6.4 Further Reading For a survey regarding syntactic unification, see [ Lassez-etal, 1988 ] ; for unification in general, see [ Huet, 1976 ] .
Reference: [ Reddy, 1986 ] <author> U. S. Reddy, </author> <title> On the relationship between logic and functional languages, in: Logic Programming: Functions, Relations, and Equations, </title> <editor> D. DeGroot, G. Lindstrom, ed., </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <pages> pp. </pages> <month> 3-36 </month> <year> (1986). </year> <month> 59 </month>
Reference-contexts: Recent proposals for logic programming languages, incorporating equality, have been based on conditional rewriting and narrowing (e.g. [ Dershowitz-Plaisted, 1985; Goguen-Meseguer, 1986 ] ; see <ref> [ Reddy, 1986 ] </ref> . For the above recursive definition of ! R to yield a decidable relation, restrictions must be made on the rules.
Reference: [ Remy, 1982 ] <institution> J.-L. R emy, Etude des systemes de reecriture conditionnels et applications aux types abstraits algebriques, These, Institut National Polytechnique de Lorraine, </institution> <address> Nancy, France (July 1982). </address>
Reference-contexts: Decreasing systems generalize the concept of "hierarchy" in the work of <ref> [ Remy, 1982 ] </ref> , and are slightly more general than the systems considered in [ Kaplan, 1987; Jouannaud-Waldmann, 1986 ] ; they have been extended in [ Dershowitz-Okada, 1988b ] to cover systems (important in logic programming) with variables in conditions that do not also appear in the left-hand side,
Reference: [ Robinson-Wos, 1969 ] <author> G. Robinson and L. Wos, </author> <title> Paramodulation and theorem-proving in first order theories with equality, </title> <booktitle> Machine Intelligence 4, </booktitle> <editor> B. Meltzer, D. Michie, ed., </editor> <publisher> Edinburgh University Press, Edinburgh, Scotland, </publisher> <pages> pp. </pages> <month> 135-150 </month> <year> (1969). </year>
Reference-contexts: For many of these theories, unification is believed intractable from the time-complexity point of view [ Kapur-Narendran, 1986 ] . Of course, E-unifiability is semi-decidable for recursively-enumerable E. Paramodulation (without the functional reflexivity axioms) <ref> [ Robinson-Wos, 1969 ] </ref> is one improvement over the obvious "British-museum" method of interleaving the production of substitutions with the search for equational proofs. Paramodulation may be improved upon by a more goal-oriented process.
Reference: [ Robinson, 1965 ] <author> J. A. Robinson, </author> <title> A machine-oriented logic based on the resolution principle, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 12 (1), </booktitle> <pages> pp. </pages> <month> 23-41 (January </month> <year> 1965). </year>
Reference: [ Rosen, 1973 ] <author> B. K. Rosen, </author> <title> Tree-manipulating systems and Church-Rosser theorems, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 20 (1), </booktitle> <pages> pp. </pages> <month> 160-187 (January </month> <year> 1973). </year>
Reference-contexts: One says that a rewrite system is normalizing if every term has at least one normal form. A ground rewriting-system is one all the rules of which are ground (i.e. elements of G fi G); an important early paper on ground rewriting is <ref> [ Rosen, 1973 ] </ref> . A string-rewriting system, or semi-Thue system, is one that has monadic words ending in the same variable (i.e. strings of elements of T (F 1 ; fxg)) as left- and right-hand side terms; [ Book, 1987 ] is a survey of string rewriting. <p> The confluence of regular systems establishes the consistency of the operational semantics of recursive programming languages; see [ Raoult-Vuillemin, 1980 ] . The above lemma may be weakened to allow critical pairs that join in one parallel step [ Huet, 1980 ] ; the ground case was considered in <ref> [ Rosen, 1973 ] </ref> .
Reference: [ Rusinowitch, 1987 ] <author> M. Rusinowitch, </author> <title> Path of subterms ordering and recursive decomposition ordering revisited, </title> <journal> J. </journal> <note> of Symbolic Computation 3 (1&2) (February/April 1987). </note>
Reference-contexts: For a survey of the history and applications of well-quasi-orderings, see [ Kruskal, 1972 ] . For a comprehensive survey of termination, see [ Dershowitz, 1987 ] . The multiset and lexicographic path orderings, and their variants (see <ref> [ Rusinowitch, 1987 ] </ref> ), have been implemented in many rewriting-rule based theorem provers (e.g. [ Lescanne, 1984 ] ). Some 25 results on the complexity of derivations appear in [ Choppy-etal, 1987 ] . 6 SATISFIABILITY We turn our attention now to the determination of satisfiability.
Reference: [ Rusinowitch, 1989 ] <author> M. Rusinowitch, </author> <title> Demonstration Automatique: Techniques de reecriture, </title> <address> InterEdi-tions, Paris, France (1989). </address>
Reference-contexts: Ordered completion modulo a congruence has been implemented by [ Anantharaman-etal, 1989 ] . One of the first implementations of inductive theorem proving by completion was [ Huet-Hullot, 1980 ] . A recent book on using rewrite techniques for theorem proving in first-order predicate calculus with equality is <ref> [ Rusinowitch, 1989 ] </ref> . 9 EXTENSIONS In this section, we briefly consider four variations of the rewriting theme: "order-sorted rewriting," "conditional rewriting," "priority rewriting," and "graph rewriting." 9.1 Order-Sorted Rewriting In ordered rewriting, replacement is constrained to make terms smaller in a given ordering; more syntactic means of limiting rewriting
Reference: [ Schmidt-Schauss, 1988 ] <author> M. Schmidt-Schau, </author> <title> Unification in a combination of arbitrary disjoint equational theories, </title> <booktitle> Proc. of the Ninth International Conference on Automated Deduction, </booktitle> <editor> E. Lusk, R. Overbeek, ed., </editor> <address> Argonne, Illinois. </address> <note> Available as Vol. </note> <month> 310, </month> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 378-396 (May </month> <year> 1988). </year>
Reference-contexts: Methods of combining unification algorithms for well-behaved theories that do not share symbols have been given in [ Yelick, 1987; Kirchner, 1989; Boudet-etal, 1988 ] ; The general case was solved in <ref> [ Schmidt-Schauss, 1988 ] </ref> .
Reference: [ Sethi, 1974 ] <author> R. Sethi, </author> <title> Testing for the Church-Rosser property, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 21, </booktitle> <pages> pp. 671-679. </pages> <note> Erratum: Vol. 22, </note> <author> p. </author> <month> 424 </month> <year> (1974). </year>
Reference-contexts: In what follows, we will also use R, S, T , and R=S to refer to the relations ! R , $ S , ! T , and ! R=S , respectively. At one extreme, T can be R, a case partially dealt with in <ref> [ Sethi, 1974; Huet, 1980 ] </ref> ; at the other extreme, T can be R=S; the general case|considered here|was first studied in [ Jouannaud-Kirchner, 1986 ] . 17 18 If one is going to compute normal forms with T instead of with R, the natural question to ask is if their
Reference: [ Shostak, 1979 ] <author> R. E. Shostak, </author> <title> An efficient decision procedure for arithmetic with function symbols, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 26 (2), </booktitle> <pages> pp. </pages> <month> 351-360 (April </month> <year> 1979). </year>
Reference-contexts: Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic <ref> [ Presburger, 1927; Shostak, 1979 ] </ref> , real closed fields [ Tarski, 1951; Collins, 1975 ] and monoids [ Makanin, 1978 ] .
Reference: [ Siekmann, 1984 ] <author> J. Siekmann, </author> <title> Universal unification, </title> <booktitle> Proc. of the Seventh International Conference on Automated Deduction, </booktitle> <editor> R. E. Shostak, ed., </editor> <address> Napa, CA, </address> <pages> pp. 1-42. </pages> <note> Available as Vol. 170, Lecture Notes in Computer Science, Springer, Berlin (May 1984). </note>
Reference-contexts: Satisfiability may be undecidable even even when congruence classes are finite (as for associativity, commutativity, and distributivity <ref> [ Siekmann, 1984 ] </ref> ). Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . <p> For a survey of theory and applications of syntactic and semantic unification, see [ Knight, 1989 ] . Questions of decidability of unification in equational theories are summarized in <ref> [ Siekmann, 1984 ] </ref> ; a summary of complexity results for some of the decidable cases is [ Kapur-Narendran, 1987 ] . A popular exposition on the undecidability of the existence of solutions to Diophantine equations is [ Davis-Hersh, 1973 ] .
Reference: [ Sivakumar, 1986 ] <author> G. </author> <title> Sivakumar, </title> <type> Personal communication (1986). </type>
Reference-contexts: This example can be modified so that the system is normalizing <ref> [ Sivakumar, 1986 ] </ref> : 31 f (x; x) ! g (x) h (c; y) ! f (h (y; c); h (y; y)) The Critical Pair Lemma can be weakened so that not all pairs need be considered.
Reference: [ Smolka-etal, 1989 ] <author> G. Smolka, W. Nutt, J. A. Goguen and J. Meseguer, </author> <title> Order-sorted equational computation, in: Resolution of Equations in Algebraic Structures, </title> <editor> H. Ait-Kaci, M. Nivat, ed., </editor> <title> II: Rewriting Techniques, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. </pages> <month> 299-369 </month> <year> (1989). </year>
Reference: [ Snyder, 1989 ] <author> W. Snyder, </author> <title> Efficient ground completion: An O(n log n) algorithm for generating reduced sets of ground rewrite rules equivalent to a set of ground equations E, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, </address> <publisher> NC, </publisher> <editor> N. Dershowitz, ed. </editor> <title> Available as Vol. </title> <booktitle> 355 Lecture Notes in Computer Science, </booktitle> <publisher> Springer, Berlin, </publisher> <pages> pp. </pages> <month> 419-433 (April </month> <year> 1989). </year>
Reference-contexts: In fact, various O (n lg n) congruence-closure algorithms exist for the purpose (e.g. [ Downey-etal, 1980 ] ; see also <ref> [ Snyder, 1989 ] </ref> ). More interesting are those cases where there are non-ground rules for which a canonical rewrite system is available, and all critical pairs between a ground rule and a non-ground one are either ground or simplify to a trivial rule.
Reference: [ Stickel, 1976 ] <author> M. E. Stickel, </author> <title> The inadequacy of primitive recursive complexity measures for determining finite termination of sets of reductions, </title> <type> Unpublished manuscript, </type> <institution> University of Arizona, Tucson, </institution> <note> AZ (December 1976). </note>
Reference-contexts: Primitive-recursive interpretations cannot suffice for termination proofs in general, since they would place a bound on the length of computations <ref> [ Stickel, 1976 ] </ref> . In particular, integer polynomials place a double-exponential bound on the length of a derivation [ Lautemann, 1988 ] .
Reference: [ Stickel, 1981 ] <author> M. E. Stickel, </author> <title> A unification algorithm for associative-commutative functions, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 28 (3), </booktitle> <pages> pp. </pages> <month> 423-434 </month> <year> (1981). </year>
Reference-contexts: We say that a set S of E-unifiers is complete if for every E-unifier there is one in S that is more general with respect to E-subsumption. For example, a complete unification algorithm exists for associativity and commutativity (AC) <ref> [ Stickel, 1981; Herold-Siekmann, 1987 ] </ref> ; alternative algorithms with better performance are [ Kirchner, 1989; Boudet, 1989 ] .
Reference: [ Stickel, 1986 ] <author> M. E. Stickel, </author> <title> The KLAUS automated deduction system, </title> <booktitle> Proc. of the Eighth International Conference on Automated Deduction, </booktitle> <address> Oxford, England, </address> <pages> pp. 703-704. </pages> <note> Available as Vol. 230, Lecture Notes in Computer Science, Springer, Berlin, </note> <editor> J. H. Siekmann, ed. </editor> <month> (July </month> <year> 1986). </year> <month> 60 </month>
Reference-contexts: The relationship 43 between completion and algorithms for finding canonical bases of polynomial ideals is discussed in [ Loos, 1981 ] and [ Buchberger, 1987 ] . Reve [ Lescanne, 1983 ] , Formel [ Fages, 1984 ] , Kads <ref> [ Stickel, 1986 ] </ref> , and Rrl [ Kapur-Zhang, 1988 ] are four current implementations of AC-completion.
Reference: [ Stone, 1936 ] <author> M. Stone, </author> <title> The theory of representations for Boolean algebra, </title> <journal> Transactions of the American Mathematical Society 40, </journal> <pages> pp. </pages> <month> 37-111 </month> <year> (1936). </year>
Reference-contexts: (x; y); z) ! xor (and (x; z); and (y; z)) This system is convergent, i.e. terminating and Church-Rosser modulo AC [ Hsiang, 1982 ] ; it computes normal forms of Boolean-ring expressions that are unique up to permutations under associativity and commutativity. (The exclusive-or normal form is due to <ref> [ Zhegalkin, 1927; Stone, 1936 ] </ref> .) The idea, then, is to put equations that cannot be handled by rewriting into S, placing in R only rules that preserve termination. If R=S is also Church-Rosser modulo S, then s $ fl R [S t iff their normal forms are S-equivalent.
Reference: [ Szabo, 1982 ] <author> P. Szabo, </author> <title> Unifikationstheorie erster Ordnung, </title> <type> Thesis, </type> <institution> Fakultat fur Informatik, University Karlsruhe, Karlsruhe, </institution> <address> West Germany (1982). </address>
Reference-contexts: E-unifiability is undecidable whenever the word problem is, and in many other cases as well. For example, the solvability of Diophantine equations, that is, polynomial equations over the integers, is undecidable [ Matijasevic, 1970 ] , as is unifiability under associativity and distributivity alone <ref> [ Szabo, 1982 ] </ref> ). Satisfiability may be undecidable even even when congruence classes are finite (as for associativity, commutativity, and distributivity [ Siekmann, 1984 ] ). Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] .
Reference: [ Takeuti, 1987 ] <author> G. Takeuti, </author> <title> Proof Theory, </title> <journal> North-Holland. </journal> <note> Revised edition (1987). </note>
Reference-contexts: As in traditional proof theory (cf. <ref> [ Takeuti, 1987 ] </ref> ), proofs are reduced, in some well-founded sense, by replacing locally maximal subproofs with smaller ones, until a normal-form proof is obtained.
Reference: [ Tarski-Givant, 1985 ] <author> A. Tarski and S. Givant, </author> <title> A Formalization of Set Theory Without Variables, in: </title> <publisher> Colloquium Publications 41, American Mathematical Society, </publisher> <address> Providence, RI (1985). </address>
Reference-contexts: 3 z 2 2 = y 3 x 3 z 2 2 Nor are all finitely-based equational theories decidable, the first counter-examples having been given by Markov [ 1947 ] and Post [ 1947 ] , in a slightly different context. (See the interesting historical comments at the end of <ref> [ Tarski-Givant, 1985 ] </ref> .) A prime example of an undecidable equational theory is Combinatory Logic (with binary infix symbol "" and constants S, K, and I): I x = x ((S x) y) z = (x z) (y z) (see [ Curry-Feys, 1958 ] ). <p> Rings, commutative rings, and lattices are also varieties; fields are not. Tarski has endeavored to equationally axiomatize the foundations of mathematics; see <ref> [ Tarski-Givant, 1985 ] </ref> . Huet [ 1985 ] has shown that much of category theory is equational.
Reference: [ Tarski, 1951 ] <author> A. Tarski, </author> <title> A Decision Method for Elementary Algebra and Geometry, </title> <publisher> University of Califor-nia Press, </publisher> <address> Berkeley, CA (1951). </address>
Reference-contexts: For termination, t (l) must be greater than t (r) for each rule l ! r. All these inequalities need hold only when their variables are assigned values at least as large as the minimal interpretation of a constant, and are decidable <ref> [ Tarski, 1951 ] </ref> . In difficult termination proofs, it is frequently useful to build more complicated orderings on top of simpler ones. <p> Second-order unifiability (equivalence of function definitions) is also undecidable, in general [ Goldfarb, 1981 ] . On the brighter side, many other theories have decidable unification problems, including Presburger arithmetic [ Presburger, 1927; Shostak, 1979 ] , real closed fields <ref> [ Tarski, 1951; Collins, 1975 ] </ref> and monoids [ Makanin, 1978 ] .
Reference: [ Tarski, 1968 ] <author> A. Tarski, </author> <title> Equational logic and equational theories of algebras, in: Contribution to Mathematical Logic, </title> <editor> K. Schutte, ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam (1968). </address>
Reference: [ Taylor, 1979 ] <author> W. Taylor, </author> <title> Equational logic, in: Universal Algebra, </title> <editor> G. Gratzer, ed., </editor> <publisher> Springer, </publisher> <address> New York, </address> <pages> pp. 378-400. </pages> <note> Second edition (1979). </note>
Reference-contexts: Of course, not all equational theories can be decided by rewriting|for a variety of reasons. First, some theories (classes of equations) are not finitely based ; for such theories there exists no finite set of axioms from which all other equations in the theory follow. An example <ref> [ Taylor, 1979 ] </ref> is the intersection of the theories (consequences) of the following two semigroups (abbreviating products by juxtaposition and exponentiation): x (yz) = (xy)z x (yz) = (xy)z x 3 y 3 z 2 2 = y 3 x 3 z 2 2 Nor are all finitely-based equational theories <p> On the other hand, equality (the word problem) is decidable in what are called "computable" algebras [ Meseguer-Goguen, 1985 ] ; see [ Wirsing, 1989 ] . 3.4 Further Reading For a survey of equational logic, see <ref> [ Taylor, 1979 ] </ref> . A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . Some relevant recent results are summarized in [ McNulty, 1989 ] .
Reference: [ Thiel, 1984 ] <author> J. J. Thiel, </author> <title> Stop losing sleep over incomplete data type specifications, </title> <booktitle> Proc. of the Eleventh ACM Symposium on Principles of Programming Languages, </booktitle> <address> Salt Lake City, UT, </address> <pages> pp. </pages> <month> 76-82 (January </month> <year> 1984). </year>
Reference-contexts: x n ) in all possible ways up to a bound that depends on the maximal depth of a left-hand side; the latter constructs a smaller test set, computed by repeated unification of f (x 1 ; : : : ; x n ) with left-hand sides, and improves on <ref> [ Thiel, 1984 ] </ref> . Ground R=S-reducibility is undecidable when S is a set of associative-commutative axioms [ Kapur-etal, 1987 ] , but is decidable when R is left-linear [ Jouannaud-Kounalis, 1989 ] .
Reference: [ Thue, 1914 ] <editor> A. Thue, Probleme uber Veranderungen von Zeichenreihen nach gegeben Regeln, Skr. Vid. Kristianaia I. Mat. Naturv. </editor> <month> Klasse 10/34 </month> <year> (1914). </year>
Reference-contexts: Priority systems cannot, in general, be expressed as term-rewriting systems. 9.4 Graph Rewriting Rewriting has also been generalized to apply to graphs, instead of terms. In fact, the idea of rewriting all kinds of objects is already in <ref> [ Thue, 1914 ] </ref> . In graph rewriting, subgraphs are replaced according to rules, containing variables, themselves referring to subgraphs.
Reference: [ Tourlakis, 1984 ] <author> G. J. Tourlakis, </author> <title> Computability, </title> <address> Reston, Reston, VA (1984). </address>
Reference-contexts: As a formalism, rewrite systems have the full power of Turing machines and may be thought of as non-deterministic Markov algorithms over terms, rather than strings. (Regarding Markov algorithms, see, e.g. <ref> [ Tourlakis, 1984 ] </ref> .) The theory of rewriting is in essence a theory of normal forms; to some extent it is an outgrowth of the study of Church's Lambda Calculus and Curry's Combinatory Logic.
Reference: [ Toyama, 1987a ] <author> Y. Toyama, </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems, </title> <editor> J. </editor> <booktitle> of the Association for Computing Machinery 34 (1), </booktitle> <pages> pp. </pages> <month> 128-143 (January </month> <year> 1987). </year>
Reference-contexts: For modularity of programming with rewrite systems, one would have wished that the union of two convergent systems over disjoint vocabularies be convergent. Unfortunately, though the union of two confluent systems sharing no function symbols is confluent <ref> [ Toyama, 1987a ] </ref> , the termination property (as we saw in Section 5.4) is not preserved under disjoint union. This is true even for confluent systems [ Toyama, 1987b ] .
Reference: [ Toyama, 1987b ] <author> Y. Toyama, </author> <title> Counterexamples to termination for the direct sum for the direct sum of term rewriting systems, </title> <journal> Information Processing Letters 25, </journal> <pages> pp. </pages> <month> 141-143 </month> <year> (1987). </year>
Reference-contexts: The following is one example of a nonterminating system <ref> [ Toyama, 1987b ] </ref> : f (a; b; x) ! f (x; x; x) g (x; y) ! y The depth (i.e. the maximum nesting of symbols) of a term in any of its derivations is bounded by the depth of the initial term, but it has a cycling derivation starting <p> These ideas generalize results in [ Bachmair-Dershowitz, 1986; Jouannaud-Munoz, 1984 ] . Note that commutation of ! R and ! S is not ensured by R and S having disjoint vocabularies, the system at the beginning of this section being a counter-example <ref> [ Toyama, 1987b ] </ref> . 5.5 Further Reading Martin Gardner [ 1983 ] talks about multiset orderings and the Hydra battle. For a survey of the history and applications of well-quasi-orderings, see [ Kruskal, 1972 ] . For a comprehensive survey of termination, see [ Dershowitz, 1987 ] . <p> Unfortunately, though the union of two confluent systems sharing no function symbols is confluent [ Toyama, 1987a ] , the termination property (as we saw in Section 5.4) is not preserved under disjoint union. This is true even for confluent systems <ref> [ Toyama, 1987b ] </ref> . If, however, the two convergent systems are also left-linear, then their union is convergent [ Toyama-etal, 1989 ] . 7.3 Class Rewriting Critical pairs also provide a necessary and sufficient condition for a left-linear terminating system R to be Church-Rosser modulo a congruence S.
Reference: [ Toyama-etal, 1989 ] <author> Y. Toyama, J. W. Klop and H. P. Barendregt, </author> <title> Termination for the direct sum of left-linear term rewriting systems, </title> <booktitle> Proc. of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, N. </address> <publisher> Dershowitz, ed., </publisher> <pages> pp. 477-491. </pages> <note> Available as Vol. 355 Lecture Notes in Computer Science, Springer, Berlin (April 1989). </note>
Reference-contexts: This is true even for confluent systems [ Toyama, 1987b ] . If, however, the two convergent systems are also left-linear, then their union is convergent <ref> [ Toyama-etal, 1989 ] </ref> . 7.3 Class Rewriting Critical pairs also provide a necessary and sufficient condition for a left-linear terminating system R to be Church-Rosser modulo a congruence S.
Reference: [ Walther, 1988 ] <author> C. Walther, </author> <title> Many-sorted unification, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 35 (1), </volume> <pages> pp. </pages> <month> 1-17 (January </month> <year> 1988). </year>
Reference-contexts: One way to preclude such anomalies is to insist that rules be "sort decreasing," i.e. that any instance of a right-hand side have a sort no larger than that of the corresponding left-hand side [ Goguen-etal, 1985 ] . Order-sorted unification is investigated in <ref> [ Walther, 1988; Meseguer-etal, 1989 ] </ref> and order-sorted completion, in [ Kirchner, 1987 ] . 9.2 Conditional Rewriting Another way to restrict applicability of equations is to add enabling conditions.
Reference: [ Winkler-Buchberger, 1983 ] <author> F. Winkler and B. </author> <title> Buchberger, A criterion for eliminating unnecessary reductions in the Knuth-Bendix algorithm, </title> <booktitle> Proc. of the Colloquium on Algebra, Combinatorics and Logic in Computer Science, </booktitle> <address> Gyor, Hungary (September 1983). </address>
Reference-contexts: Then it can be shown (by induction on multisets of elements; see Section 5.1) that ! is Church-Rosser <ref> [ Winkler-Buchberger, 1983 ] </ref> . <p> method of establishing local confluence (mentioned in Section 4.1) and ignores any critical pair s = t derived from an overlap s R u ! R t such that there exists another proof s $ fl R t, each term of which is derivable from u by ! + R <ref> [ Winkler-Buchberger, 1983 ] </ref> ; the compositeness criterion ignores critical pairs for which the overlapped term can be rewritten at a position strictly below the point of overlap [ Kapur-etal, 1988 ] . 7.2 Regular Systems By enforcing strong restrictions on the form of left-hand sides, confluence can be ensured even
Reference: [ Wirsing, 1989 ] <author> M. Wirsing, </author> <title> Algebraic specification, </title> <booktitle> in: Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam (1989). </address>
Reference-contexts: These constructions also imply that most interesting properties, including convergence, are in general undecidable. On the other hand, equality (the word problem) is decidable in what are called "computable" algebras [ Meseguer-Goguen, 1985 ] ; see <ref> [ Wirsing, 1989 ] </ref> . 3.4 Further Reading For a survey of equational logic, see [ Taylor, 1979 ] . A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . Some relevant recent results are summarized in [ McNulty, 1989 ] . <p> A comprehensive multi-volume work on varieties is [ McKenzie-etal, 1987; Freese-etal, 1989 ] . Some relevant recent results are summarized in [ McNulty, 1989 ] . A detailed exposition of algebraic aspects of rewriting is [ Meseguer-Goguen, 1985 ] ; algebraic semantics are the subject of <ref> [ Wirsing, 1989 ] </ref> . 4 CHURCH-ROSSER PROPERTIES Newman [ 1942 ] developed a general theory of "sets of moves," that is, of arbitrary binary relations. It has since become customary to deal separately with properties of such abstract binary relations and with those of relations on terms.
Reference: [ Yelick, 1987 ] <author> K. A. Yelick, </author> <title> Unification in combinations of collapse-free regular theories, </title> <editor> J. </editor> <booktitle> of Symbolic Computation 3 (1&2), </booktitle> <pages> pp. </pages> <month> 153-181 (February/April </month> <year> 1987). </year>
Reference-contexts: Methods of combining unification algorithms for well-behaved theories that do not share symbols have been given in <ref> [ Yelick, 1987; Kirchner, 1989; Boudet-etal, 1988 ] </ref> ; The general case was solved in [ Schmidt-Schauss, 1988 ] .
Reference: [ Zhang, 1988 ] <author> H. Zhang, </author> <title> Reduction, superposition & induction: automated reasoning in an equational logic, </title> <type> Ph.D. thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <address> Troy, NY (August 1988). </address>
Reference-contexts: In particular, the equation in question does not hold true for "error" terms like pop (fl): alternate (pop (fl); fl) = pop (fl) does not follow from the axioms. Test-set based methods for proofs in the (non-initial) constructor model are described in <ref> [ Kapur-etal, 1986; Zhang, 1988 ] </ref> ; see also [ Kapur-Musser, 1987 ] . 3.3 Computable Algebras When a system R is not terminating, rewriting will not necessarily compute a representative for the congruence class of a term.
Reference: [ Zhegalkin, 1927 ] <author> I. I. Zhegalkin, </author> <title> On a technique of evaluation of propositions in symbolic logic, </title> <booktitle> Matem-aticheskii Sbornik 34 (1), </booktitle> <pages> pp. </pages> <month> 9-27 </month> <year> (1927). </year> <month> 61 </month>
Reference-contexts: (x; y); z) ! xor (and (x; z); and (y; z)) This system is convergent, i.e. terminating and Church-Rosser modulo AC [ Hsiang, 1982 ] ; it computes normal forms of Boolean-ring expressions that are unique up to permutations under associativity and commutativity. (The exclusive-or normal form is due to <ref> [ Zhegalkin, 1927; Stone, 1936 ] </ref> .) The idea, then, is to put equations that cannot be handled by rewriting into S, placing in R only rules that preserve termination. If R=S is also Church-Rosser modulo S, then s $ fl R [S t iff their normal forms are S-equivalent.
Reference: [ Anatharaman-Hsiang, 1990 ] <author> Anatharaman, S. and J. Hsiang, </author> <title> Identities in alternative rings, </title> <journal> J. </journal> <note> of Automated Reasoning 6 (1990) 79-109. </note>
Reference: [ Bachmair-Ganzinger, 1990 ] <author> Bachmair, L. and H. Ganzinger, </author> <title> On restrictions of ordered paramodulation with simplification, </title> <booktitle> in: Proc. Second International Workshop on Conditional and Typed Rewriting Systems, Montreal, Canada, Lecture Notes in Computer Science (Springer, </booktitle> <address> Berlin, </address> <note> to appear). </note>
Reference: [ Baeten-etal, 1987 ] <author> Baeten, J.C.M., J.A. Bergstra and J.W. Klop, </author> <title> Priority rewrite systems, </title> <booktitle> in: Proc. Second International Conference on Rewriting Techniques and Applications, Bordeaux, France, Lecture Notes in Computer Science 256, </booktitle> <publisher> (Springer, </publisher> <address> Berlin, </address> <year> 1987) </year> <month> 83-94. </month>
Reference: [ Bertling-Ganzinger, 1989 ] <author> Bertling, H. and H. Ganzinger, </author> <title> Completion-time optimization of rewrite-time goal solving, </title> <booktitle> in: Proc. Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <booktitle> Lecture Notes in Computer Science 355 (Springer, </booktitle> <address> Berlin, </address> <year> 1989) </year> <month> 45-58. </month>
Reference: [ Book, 1982 ] <author> Book, R.V., </author> <title> Confluent and other types of Thue systems, </title> <journal> J. Assoc. Comput. </journal> <volume> Machin. </volume> <month> 29(1) </month> <year> (1982) </year> <month> 171-182. </month>
Reference: [ Borger, 1990 ] <author> B orger, E., </author> <title> Computability, Complexity, </title> <booktitle> Logic, Studies in Logic and the Foundations of Mathematics 128 (North-Holland, </booktitle> <address> Amsterdam, </address> <year> 1990). </year>
Reference: [ Boudet-etal, 1990 ] <author> Boudet, A., E. Contejean and H. Devie, </author> <title> A new AC unification algorithm with a new algorithm for solving Diophantine equations, </title> <type> Tech. Rep., </type> <institution> Univ. de Paris-Sud, Orsay, France, </institution> <year> 1990. </year>
Reference: [ Boudet, 1990 ] <author> Boudet, A., </author> <title> Unification dans les melanges de theories equationnelles, </title> <institution> These de Doctorat, Univ. de Paris-Sud, Orsay, Paris, </institution> <year> 1990. </year>
Reference: [ Brand-etal, 1979 ] <author> Brand, D., J.A. Darringer and W.J. Joyner, Jr., </author> <title> Completeness of Conditional Reductions, </title> <booktitle> in: Proc. Fourth Workshop on Automated Deduction, </booktitle> <address> Austin, TX (1979). </address>
Reference: [ Breazu-Tannen, 1990 ] <author> Breazu-Tannen, V. and J. Gallier, </author> <title> Polymorphic rewriting conserves algebraic strong normalization, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <note> (to appear). </note>
Reference: [ Chew, 1980 ] <author> Chew, P., </author> <title> An improved algorithm for computing with equations, </title> <booktitle> in Proc. Twenty-First IEEE Symposium on Foundations of Computer Science, </booktitle> <address> Lake Placid, NY (1980) 108-117. </address>
Reference: [ Comon, 1988 ] <author> Comon, H., </author> <title> Unification et disunification: Theorie et applications, </title> <institution> These de Doctorat, Institut Polytechnique de Grenoble, Grenoble, France, </institution> <year> 1988. </year>
Reference: [ Comon, 1990 ] <author> Comon, H., </author> <title> Disunification: A survey, </title> <editor> in: J. Lassez and G. Plotkin, eds., </editor> <booktitle> Computational Logic: Essays in Honour of Alan Robinson (MIT Press, </booktitle> <address> Cambridge, MA, </address> <note> to appear). </note>
Reference: [ Courcelle, 1990 ] <author> Courcelle, D., </author> <note> Graph rewriting (to appear). </note>
Reference: [ Dauchet-etal, 1990 ] <author> Dauchet, M., T. Heuillard, P. Lescanne and S. Tison, </author> <title> Decidability of the confluence of finite ground term rewriting systems and of other related term rewriting systems, </title> <journal> Inform. and Comput. </journal> <note> (to appear). </note>
Reference: [ Dershowitz, 1990 ] <author> Dershowitz, N., </author> <title> A maximal-literal unit strategy for Horn clauses, </title> <booktitle> in: Proc. Second International Workshop on Conditional and Typed Rewriting Systems, Montreal, Canada, Lecture Notes in Computer Science (Springer, </booktitle> <address> Berlin, </address> <note> to appear). </note>
Reference: [ Dershowitz-Jouannaud, 1990 ] <author> Dershowitz, N. and J.-P. Jouannaud, </author> <title> Notations for rewriting, </title> <journal> Bull. </journal> <note> European Assoc. Theoret. </note> <institution> Comput. Sci. (Autumn, </institution> <year> 1990). </year>
Reference: [ Dershowitz-Okada, 1990 ] <author> Dershowitz, N. and M. Okada, </author> <title> A rationale for conditional equational rewriting, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <note> (to appear). 62 </note>
Reference: [ Filman, 1978 ] <author> Filman, </author> <title> R.E., </title> <type> Personal communication, </type> <year> 1978. </year>
Reference-contexts: A system is terminating iff such W, t , and exist. For example, the system below, which computes the disjunctive normal form of formulae, can be shown terminating <ref> [ Filman, 1978 ] </ref> with an exponential mapping into the natural numbers: not (not (x)) ! x not (and (x; y)) ! or (not (x); not (y)) and (or (y; z); x) ! or (and (y; x); and (z; x)) The mapping t : T ! f2; 3; : : :g
Reference: [ Gallier-Snyder, 1990 ] <author> Gallier, J. and W. Synder, </author> <title> Designing unification procedures using transformations: A survey, </title> <booktitle> in: Proc. Workshop on Logic from Computer Science, </booktitle> <address> Berkeley, CA (1990). </address>
Reference: [ Gallier-Snyder, 1989 ] <author> Gallier, J. and W. Synder, </author> <title> Complete sets of transformations for general E-Unification, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 67 </month> <year> (1989) </year> <month> 203-260. </month>
Reference: [ Geser, 1989 ] <author> Geser, A., </author> <title> Termination Relative, </title> <type> Doctoral Dissertation, </type> <institution> Univ. Passau, Passau, </institution> <year> 1989. </year>
Reference: [ Gnaedig-etal, 1988 ] <author> Gnaedig, I., C. Kirchner and H. Kirchner, </author> <title> Equational completion in order-sorted algebras, </title> <booktitle> in: Proc. Thirteenth Colloquium on Trees in Algebra and Programming , Nancy, </booktitle> <address> France (1988) 165-184. </address>
Reference: [ Halpern-etal, 1990 ] <author> Halpern, J.Y., J.H. Williams and E.L. Wimmers, </author> <title> Completeness of rewrite rules and rewrite strategies for FP, </title> <journal> J. Assoc. </journal> <note> for Comput. Mach. 37(1) (1990) 86-143. </note>
Reference: [ Huet-Levy, 1990 ] <author> Huet, G. and J.-J. L evy, </author> <title> Computations in orthogonal term rewriting systems, </title> <editor> in: J. Lassez and G. Plotkin, eds., </editor> <booktitle> Computational Logic: Essays in Honour of Alan Robinson, </booktitle> <publisher> (MIT Press, </publisher> <address> Cambridge, MA, </address> <note> to appear). </note>
Reference-contexts: An optimal strategy, i.e. one with normalizing derivations of minimal length, is not in general computable <ref> [ Huet-Levy, 1990 ] </ref> . <p> For regular systems, normal forms can be computed by a "parallel-outermost" redex evaluation scheme [ O'Donnell, 1977a ] , but not by a "leftmost-outermost" scheme <ref> [ Huet-Levy, 1990 ] </ref> ; with additional "sequential-ity" requirements, one can efficiently compute normal forms, without lookahead [ Hoffmann-O'Donnell, 1979; Huet-Levy, 1990 ] . How to avoid all unnecessary rewrites and obtain an optimal strategy is, however, an undecidable problem, in general [ Huet-Levy, 1990 ] . <p> For regular systems, normal forms can be computed by a "parallel-outermost" redex evaluation scheme [ O'Donnell, 1977a ] , but not by a "leftmost-outermost" scheme [ Huet-Levy, 1990 ] ; with additional "sequential-ity" requirements, one can efficiently compute normal forms, without lookahead <ref> [ Hoffmann-O'Donnell, 1979; Huet-Levy, 1990 ] </ref> . How to avoid all unnecessary rewrites and obtain an optimal strategy is, however, an undecidable problem, in general [ Huet-Levy, 1990 ] . <p> ] , but not by a "leftmost-outermost" scheme <ref> [ Huet-Levy, 1990 ] </ref> ; with additional "sequential-ity" requirements, one can efficiently compute normal forms, without lookahead [ Hoffmann-O'Donnell, 1979; Huet-Levy, 1990 ] . How to avoid all unnecessary rewrites and obtain an optimal strategy is, however, an undecidable problem, in general [ Huet-Levy, 1990 ] . For modularity of programming with rewrite systems, one would have wished that the union of two convergent systems over disjoint vocabularies be convergent.
Reference: [ Jaffar, 1990 ] <author> Jaffar, J., </author> <title> Minimal and complete word unification, </title> <journal> J. Assoc. </journal> <note> for Comput. Mach. 37(1) (1990) 47-85. </note>
Reference: [ Jouannaud-Kirchner, 1990 ] <author> Jouannaud, J. and C. Kirchner, </author> <title> Solving equations in abstract algebras: A rule-based survey of unification, </title> <editor> in: J. Lassez and G. Plotkin, eds., </editor> <booktitle> Computational Logic: Essays in Honour of Alan Robinson (MIT Press, </booktitle> <address> Cambridge, MA, </address> <note> to appear). </note>
Reference: [ Kandri-Rody-etal, 1989 ] <author> Kandri-Rody, A., D. Kapur and F. Winkler, </author> <title> Knuth-Bendix procedure and Buchberger algorithm|A synthesis, </title> <type> Tech. Rep. 89-18, </type> <institution> Dep. of Computer Science, State Univ. of New York, Albany, </institution> <address> NY, </address> <year> 1989. </year>
Reference: [ Kaplan-Remy, 1989 ] <author> Kaplan, S. and J.-L. R emy, </author> <title> Completion algorithms for conditional rewriting systems, </title> <editor> in: H. Ait-Kaci and M. Nivat, eds., </editor> <title> Resolution of Equations in Algebraic Structures (Academic Press, </title> <address> Boston, </address> <year> 1989) </year> <month> 141-170. </month>
Reference: [ Kapur-Musser, 1986 ] <author> Kapur, D. and D.R. Musser, </author> <title> Inductive reasoning for incomplete specifications, </title> <booktitle> in: Proc. IEEE Symposium on Logic in Computer Science, </booktitle> <address> Cambridge, MA, </address> <year> (1986) </year> <month> 367-377. </month>
Reference: [ Kirchner, 1988 ] <author> Kirchner, C., </author> <title> Order-sorted equational unification, </title> <type> Report 954, </type> <institution> Institut National de Recherche en Informatique et en Automatique, Le Chesnay, France, </institution> <year> 1988. </year>
Reference: [ Klop, 1980 ] <author> Klop, J.-W., </author> <title> Combinatory Reduction Systems, </title> <publisher> Mathematical Centre Tracts 127 (Mathema-tisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1980). </year>
Reference-contexts: This uniqueness result is up to literal similarity. Uniqueness does not, however, hold for arbitrary canonical class-rewriting systems [ Dershowitz-etal, 1988 ] , but does for associative-commutative systems [ Lankford-Ballantyne, 1983 ] . 7.6 Further Reading A detailed study of the Church-Rosser property of non-overlapping systems is <ref> [ Klop, 1980 ] </ref> . Computing with regular systems is the subject of [ O'Donnell, 1977a ] . 8 COMPLETION In the previous section, we saw that confluence of finite terminating systems can be decided using the superposition test.
Reference: [ Kounalis, 1985 ] <author> Kounalis, E., </author> <title> Completeness in data type specifications, </title> <booktitle> in: Proc. EUROCAL Conference, </booktitle> <address> Linz, Austria (1985). </address>
Reference-contexts: In the special case where all constructors are free, ground reducibility is more easily testable. This case had been considered in [ Nipkow-Weikum, 1982 ] for left-linear systems. The general case was considered in [ Dershowitz, 1985 ] and <ref> [ Kounalis, 1985 ] </ref> .
Reference: [ Kuchlin, 1985 ] <author> K uchlin, W., </author> <title> A confluence criterion based on the generalized newman lemma, </title> <booktitle> in: Proc. EUROCAL Conference, </booktitle> <address> Linz, Austria (1985). </address>
Reference: [ Lankford-etal, 1984 ] <author> Lankford, D., G. Butler and A. Ballantyne, </author> <title> A progress report on new decision algorithms for finitely presented Abelian groups, </title> <booktitle> in: Proc. Seventh International Conference on Automated Deduction, Napa, CA, Lecture Notes in Computer Science 170 (Springer, </booktitle> <address> Berlin, </address> <year> 1984) </year> <month> 128-141. </month>
Reference-contexts: By supplying completion with a complete simplification ordering, these critical pairs can always be oriented. (The complete ordering must be compatible with the canonical system for the non-ground rules.) For example, AC-completion can be used in this way to generate decision procedures for finitely-presented Abelian groups starting from G=AC <ref> [ Lankford-etal, 1984 ] </ref> . We now turn our attention to completion of ordered rewriting systems, and call the process "ordered" (or "unfailing") completion. Ordered completion either returns a (finite) ordered rewriting system in finite time, or else loops and generates an infinite system. <p> Rewrite-based decision procedures for semigroups, monoids, and groups are investigated in [ Benninghofen-etal, 1987 ] ; experiments with the completion of finitely-presented algebras are described in <ref> [ Lankford-etal, 1984; LeChenadec, 1985 ] </ref> ; some new classes of decidable monadic word problems were found in [ Pedersen, 1989 ] . The use of completion and its relation to Dehn's method for deciding word problems and small cancellation theory is explored in [ LeChenadec, 1987 ] .
Reference: [ Martin, 1989 ] <author> Martin, U., </author> <title> A geometrical approach to multiset orderings, </title> <type> Theoret. </type> <institution> Comput. Sci. </institution> <month> 67 </month> <year> (1989) </year> <month> 37-54. </month>
Reference: [ Middeldorp, 1989 ] <author> Middeldorp, A., </author> <title> Modular aspects of properties of term rewriting systems related to normal forms, </title> <booktitle> in: Proc. Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <booktitle> Lecture Notes in Computer Science 355 (Springer, </booktitle> <address> Berlin, </address> <year> 1989) </year> <month> 263-277. </month>
Reference: [ Okada-Steele, 1990 ] <author> Okada, M. and A. Steele, </author> <title> Ordering structures and the Knuth-Bendix completion algorithm, </title> <type> Unpublished manuscript, </type> <institution> Dept. Computer Science, Concordia Univ., Montreal, Canada. </institution>
Reference: [ Padawitz, 1990 ] <author> Padawitz, P., </author> <title> Horn logic and rewriting for functional and logic program design, </title> <type> Report MIP-9002, </type> <institution> Fakultat fur Mathematik und Informatik, Univ. Passau, Passau, West Germany, </institution> <year> 1990. </year>
Reference: [ Paul, 1985 ] <author> Paul, E., </author> <title> Equational methods in first order predicate calculus, </title> <journal> J. </journal> <note> of Symbolic Computation 1(1) (1985) 7-29. </note>
Reference: [ Plaisted, 1978 ] <author> Plaisted, D.A., </author> <title> A recursively defined ordering for proving termination of term rewriting systems, </title> <type> Report R-78-943, </type> <institution> Dept. of Computer Science, Univ. of Illinois, Urbana, IL, </institution> <year> 1978. </year>
Reference-contexts: This suggests the possibility of construct ing simplification orderings directly from well-founded orderings of vocabularies, or precedences. The idea <ref> [ Plaisted, 1978; Dershowitz, 1982a ] </ref> is that a term s should be bigger than any term that is built from terms smaller than s which are connected together by a structure of function symbols smaller, in the precedence, than the root of s.
Reference: [ Plotkin, 1970 ] <author> Plotkin, G., </author> <title> Lattice theoretic properties of subsumption, </title> <type> Tech. Rep. </type> <institution> MIP-R-77, Univ. of Edinburgh, Edinburgh, </institution> <address> Scotland, </address> <year> 1970. </year>
Reference: [ Ruzicka-Privara, 1989 ] <author> Ruzicka, P. and I. Privara, </author> <title> An almost linear Robinson unification algorithm, </title> <journal> Acta Informat. </journal> <month> 27 </month> <year> (1989) </year> <month> 61-71. </month>
Reference: [ Sekar-Ramakrishnan, 1990 ] <author> Sekar, R.C. and I.V. Ramakrishnan, </author> <title> Programming in equational logic: Beyond strong sequentiality, </title> <booktitle> in: Proc. Fifth IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadel-phia, PA (1990). </address>
Reference: [ Sivakumar, 1986 ] <author> Sivakumar, G., </author> <type> Personal communication, </type> <year> 1986. </year>
Reference-contexts: This example can be modified so that the system is normalizing <ref> [ Sivakumar, 1986 ] </ref> : 31 f (x; x) ! g (x) h (c; y) ! f (h (y; c); h (y; y)) The Critical Pair Lemma can be weakened so that not all pairs need be considered.
Reference: [ Slagle, 1974 ] <author> Slagle, J.R., </author> <title> Automated theorem-proving for theories with simplifiers, commutativity, and associativity, </title> <journal> J. Assoc. </journal> <note> for Comput. Mach. 21(4) (1974) 622-642. </note>
Reference: [ Zhang-Kapur, 1988 ] <author> Zhang, H. and D. Kapur, </author> <title> First-order theorem proving using conditional equations, </title> <booktitle> in: Proc. Ninth International Conference on Automated Deduction, </booktitle> <address> Argonne, Illinois, </address> <booktitle> Lecture Notes in Computer Science 310 (Springer, </booktitle> <address> Berlin, </address> <year> 1988) </year> <month> 1-20. 64 </month>
References-found: 292

