URL: ftp://ftp.cs.utexas.edu/pub/predator/ecbs-95.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/schwartz/pub.htm
Root-URL: 
Title: Abstract  
Abstract: Domain modeling is believed to be a key factor in developing an economical and scalable means for constructing families of related software systems. In this paper, we review the current state of domain modeling, and present some of our work on the ADAGE project, an integrated environment that relies heavily on domain models for generating real-time avionics applications. Specifically, we explain how we detect errors in the design of avionics systems that are expressed in terms of compositions of components. We also offer insights on how domain modeling can benefit the engineering of computer-based systems in other domains. 
Abstract-found: 1
Intro-found: 1
Reference: [Adj35] <author> K. Adjuciewicz, </author> <title> Die Syntaktische Konnexitat, </title> <journal> Studia Philophica, </journal> <volume> Vol #1 pp. 1 27, </volume> <year> 1935. </year> <title> Translated as Sytactic Connection in Strolls McCall (ed), Polish Logic: </title> <booktitle> 1920- 1939, </booktitle> <publisher> Oxford University Press, </publisher> <year> 1967. </year>
Reference-contexts: Type information specifies a set of well typed expressions in much the same way that a traditional grammar specifies a set of grammatical expressions. The relationship between types and grammars has been widely studied in the context of natural language syntax <ref> [Adj35, Bac88] </ref>. A design can be viewed as an attributed grammatical (or well typed) expression. However, the analogy with attribute grammars hides the fact that the VAG language is also a general purpose functional programming language.
Reference: [Bac88] <author> E. Bach, </author> <title> Categorial Grammars as Theories of Language, </title> <booktitle> in Categorial Grammars and Natural Language Structures, </booktitle> <pages> pp. 17-34, </pages> <editor> R. Oehrle and E. Bach (ed), D. </editor> <publisher> Reidel, </publisher> <year> 1988. </year>
Reference-contexts: Type information specifies a set of well typed expressions in much the same way that a traditional grammar specifies a set of grammatical expressions. The relationship between types and grammars has been widely studied in the context of natural language syntax <ref> [Adj35, Bac88] </ref>. A design can be viewed as an attributed grammatical (or well typed) expression. However, the analogy with attribute grammars hides the fact that the VAG language is also a general purpose functional programming language.
Reference: [Bar94] <author> D. Barstow, </author> <title> Domain-Specific Architectures and Software Customization: A Case Study, </title> <booktitle> key note presentation at the 3rd International Conference on Software Reuse, </booktitle> <month> November, </month> <year> 1994. </year>
Reference-contexts: The benefits of creating (domain) models that define families of related systems are clear [Par79]; the cost of creating multiple systems is amortized over the lifetime of a domain model. (Reports that a payback is achieved within the first few systems uses of the domain model are common <ref> [Bar94] </ref>). Much effort has been invested in studying the practices of other (non-software) disciplines in order to discern how to build software better. These efforts have largely failed; it is not obvious how lessons learned from, say, the mechanics of building bridges or designing homes can be applied to software.
Reference: [Bat92a] <author> D. Batory and S. OMalley, </author> <title> The Design and Implementation of Hierarchical Software Systems with Reusable Components, </title> <journal> ACM Trans. Software Engineering and Methodology, </journal> <month> October </month> <year> 1992. </year>
Reference: [Cog92] <author> Lou Coglianese, et al., </author> <title> An Avionics Domain-Specific Software Architecture, </title> <booktitle> ARPA PI Conference, </booktitle> <year> 1992. </year> <note> Also in CrossTalk, </note> <month> October </month> <year> 1992, </year> <institution> and IBM Owego T.R. ADAGE IBM-92-07, </institution> <month> April </month> <year> 1992. </year>
Reference: [Cog93] <author> L. Coglianese and R. Szymanski, </author> <title> DSSA-ADAGE: An Environment for Architecture-based Avionics Development, </title> <note> Proceedings of AGARD 1993. Also, IBM Owego T.R. ADAGE-IBM-93-04, </note> <month> May </month> <year> 1993. </year>
Reference-contexts: have evolved independently and their unification has not yet been achieved. 3 The ADAGE Generative Model ADAGE uses integrative and generative domain models to produce avionics systems to produce avionics systems (consisting Navigation, Guidance, and Flight Director subsystems) that can support programs as JAST (Joint Advanced Strike Technology) and others <ref> [Cog93] </ref>. The development and experimentation with ADAGE is ongoing; recent descriptions of the ADAGE environment and its support for specific avionics applications are presented in [Tra95, Bat95]. <p> Because components are standardized, composition tools, generators, analysis tools, etc. can be created to support the development of families of avionics software systems quickly and inexpensively. It is this integrated suite of tools that defines the ADAGE environment <ref> [Cog93] </ref>. An important problem that arises in modeling avionics software in ADAGE (and GenVoca) is that there are syntactically correct type equations (i.e., compositions of components) that are not semantically correct. That is, the specified composition of components simply will not produce a correctly functioning avionics system.
Reference: [Coh91] <author> S.G. Cohen, J.L. Stanley, A.S. Peterson, R.W. Krut, </author> <title> Application of Feature-Oriented Domain Analysis to the Army Movement Control Domain, </title> <institution> Software Engineering Institute, Carnegie Mellon University, CMU/SEI-91-TR-28. </institution>
Reference: [Cou88] <author> B. Courcelle and P. Deransart, </author> <title> Proofs of Partial Correctness for Attribute Grammars with Applications to Recursive Procedures and Logic Programming, </title> <journal> Information and Computation, </journal> <volume> Vol. #78, </volume> <pages> pp. 1 55, </pages> <year> 1988. </year>
Reference-contexts: In a VAG expression, attributes are related by constraints which allow multidirectional ow of information. Variational attribute grammars are similar to, but formally simpler than, relational attribute grammars as described in <ref> [Cou88] </ref>. Although the value of a VAG attribute can be inferred using multidirectional constraint ow, at a semantic level the VAG language has only synthesized attributes.
Reference: [Der88] <author> P. Deransart, M. Jourdan, and B. Lorho, </author> <title> Attribute Grammars: Defintions, Systems and Bibliography, </title> <booktitle> Springer-Verlag 1988, in Lecture Notes in Computer Science Vol. </booktitle> <pages> 323. </pages>
Reference-contexts: A computer program is an expression satisfying the syntactic requirements embodied in a grammar which describes the language in which the program is written. Traditional attribute grammars augment traditional context free grammars with equations that define attributes of programs and program fragments <ref> [Rep85, Der88] </ref>. A set of VAG programs can be viewed as an attribute grammar and a VAG programmer can be viewed as a grammar designer. Actually, it is the type information associated with defined functions that plays the role of a grammar.
Reference: [Gam94] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Examples of generative models are DRACO [Nei89], DTRE [Bla91], and GenVoca [Bat92]. Special cases of the basic ideas behind generative models include object-oriented frameworks and design patterns <ref> [Gam94] </ref>. Generative models capture much of the same information as integrative models, but present only a limited, implementation-oriented view of target systems (i.e., in terms of software components, their compositions, and communication protocols). Ideally, a generative model should be another submodel of an integrated model.
Reference: [Gar93] <author> D. Garlan and M. Shaw, </author> <title> An Introduction to Software Architecture, </title> <booktitle> in Adances in Software Engineering and Knowledge Engineering, Volume I, </booktitle> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: The design environments for computer software have not matched their counterparts of computer hardware. How one designs large software systems from existing components is only now becoming the focus of extensive research <ref> [Gar93] </ref>. The benefits of creating (domain) models that define families of related systems are clear [Par79]; the cost of creating multiple systems is amortized over the lifetime of a domain model. (Reports that a payback is achieved within the first few systems uses of the domain model are common [Bar94]).
Reference: [Gom94] <author> H. Gomaa, L. Kerschberg, V. Sugumaran, C. Bosch, and I. Tavakoli, </author> <title> A Prototype Domain Modeling Environment for Reusable Software Architectures, </title> <booktitle> International Conference on Software Reuse, </booktitle> <year> 1994. </year>
Reference-contexts: It is using the information in these consistent, integrated submodels that specifications for the target system can be generated automatically. Well-known examples of integrative models are the Evolutionary Domain Life Cycle (EDLC) Model <ref> [Gom94] </ref>, Feature Oriented Domain Analysis (FODA) [Coh94], and Organization Domain Modeling (ODM) [Sim94]. Integrative models do not generate code for the target system; they rely on software system generators for the target domain.
Reference: [Goo92a] <author> M. Goodwin and L. Coglianese, </author> <title> Dictionary for the Avionics Domain Architecture Generation Environment of the Domain-Specific Software Architecture Project, </title> <publisher> ADAGE-IBM-92-04. </publisher>
Reference: [Goo92b] <author> M. Goodwin and M. Kushner, </author> <title> Domain Analysis for the Avionics Domain Architecture Generation Environment of Domain Specific Software Architecture, </title> <address> ADAGE-IBM-92-11, </address> <month> November </month> <year> 1992. </year>
Reference: [Nei89] <author> J.M. Neighbors, </author> <title> DRACO: A Method for Engineering Reusable Software Systems, in Software Reusability, </title> <editor> T. Biggerstaff and A. Perlis, ed., </editor> <publisher> ACM Press Frontier Series, Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Examples of generative models are DRACO <ref> [Nei89] </ref>, DTRE [Bla91], and GenVoca [Bat92]. Special cases of the basic ideas behind generative models include object-oriented frameworks and design patterns [Gam94].
Reference: [Par79] <author> D.L. Parnas, </author> <title> Designing Software for Ease of Extension and Contraction, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> March </month> <year> 1979. </year>
Reference-contexts: The design environments for computer software have not matched their counterparts of computer hardware. How one designs large software systems from existing components is only now becoming the focus of extensive research [Gar93]. The benefits of creating (domain) models that define families of related systems are clear <ref> [Par79] </ref>; the cost of creating multiple systems is amortized over the lifetime of a domain model. (Reports that a payback is achieved within the first few systems uses of the domain model are common [Bar94]).
Reference: [Reps85] <author> T. Reps and T. Teitelbaum, </author> <title> The Synthesizer Generator Manual, </title> <institution> Cornell University, </institution> <month> August </month> <year> 1985. </year>
Reference: [Sim94] <author> M.A. Simos, </author> <title> An Introduction to Organization Domain Modeling, </title> <booktitle> tutorial notes, International Conference on Software Reuse, </booktitle> <year> 1994. </year>
Reference-contexts: It is using the information in these consistent, integrated submodels that specifications for the target system can be generated automatically. Well-known examples of integrative models are the Evolutionary Domain Life Cycle (EDLC) Model [Gom94], Feature Oriented Domain Analysis (FODA) [Coh94], and Organization Domain Modeling (ODM) <ref> [Sim94] </ref>. Integrative models do not generate code for the target system; they rely on software system generators for the target domain. Generative models or reference architecture models are the second kind of domain model that serve as blueprints for domain-specific software generators.
References-found: 18

