URL: http://www.cs.toronto.edu/~micah/pubs/coding.ps
Refering-URL: http://www.cs.toronto.edu/~micah/pubs/pubs.html
Root-URL: http://www.cs.toronto.edu
Email: micah@cs.berkeley.edu  
Title: New Coding Techniques for Improved Bandwidth Utilization  
Author: Micah Adler 
Date: January 11, 1998  
Affiliation: Computer Science Division University of California Berkeley and International Computer Science Institute  
Abstract-found: 0
Intro-found: 1
Reference: [ABK95] <author> M. Adler, J. Byers, R. Karp. </author> <title> Parallel Sorting with Limited Bandwidth Proc. </title> <booktitle> 7th ACM Symp. on Parallel Algorithms and Architectures: </booktitle> <pages> pp. 129 - 136, </pages> <year> 1995. </year>
Reference-contexts: We provide new algorithms for the problems of sorting and permutation routing. For the concurrent read PRAM (m), as p grows with m held constant, our sorting algorithm outperforms any previous algorithm by (log c p) for any constant c. The combination of a lower bound from <ref> [ABK95] </ref> for sorting in the exclusive read PRAM (m) model and this algorithm implies that the concurrent read PRAM (m) is strictly more powerful than the exclusive read PRAM (m). 1.1 An I/O Complexity Application We first describe an application of our technique in a simplified version of Aggarwal and Vitter's <p> Low communication throughput has been shown to be a primary bottleneck in parallel computation by several results, including [VW85], [MNV94], <ref> [ABK95] </ref>, and [Goo96]. Thus, in many situations, using the available bandwidth as efficiently as possible is crucial. In the PRAM (m), p processors communicate only through a small, globally shared memory consisting of m bits. The input, assumed to be of size n, is stored in a globally readable ROM. <p> This model provides another useful tool for designing algorithms that use bandwidth efficiently. As with the classical PRAM, two versions of the PRAM (m) have been proposed: the CR (concurrent read) PRAM (m) [MNV94] and the ER (exclusive read) PRAM (m) <ref> [ABK95] </ref>. For both models, we here assume that writing is exclusive, and that reading from the ROM containing the input may be performed concurrently. The two distinct models capture a fundamental difference in the power of limited bandwidth settings. <p> The running time of our algorithm also beats a lower bound of ( n log m m ) for the same problem in the ER PRAM (m) given in <ref> [ABK95] </ref>. Thus, in addition to showing that bound does not apply to the CR PRAM (m), the combination of the two results implies that the CR PRAM (m) is strictly more powerful than the ER PRAM (m). <p> We also develop an improved upper bound for sorting in the ER PRAM (m) of O ( n log p m ). This is within a constant factor of the lower bound of <ref> [ABK95] </ref> when p = m c for any constant c. The remainder of this paper is organized as follows. The following subsection gives a brief summary of relevant previous work. In section 2, we describe our new coding technique in the context of the single column transposition problem. <p> Leighton also shows that this bound is asymptotically optimal with his column sort algorithm. <ref> [ABK95] </ref> show that column sort can be used in both the ER and CR PRAM (m) to sort in time O ( n log n m ). This was the best known running time for sorting in both models prior to this paper. <p> p mp * ), with probability at least 1 1 n , finds keys z 0 : : : z p that form an approximate output partition. 8 Proof: The first p 3=2 p m log n input keys, denoted K, are sorted using for example the sorting algorithm of <ref> [ABK95] </ref>. This requires time O i m , which by the assumptions that n p 2 log p and m &lt; p 1* is O ( n log p mp * ). <p> As p and n grow with m held constant, while maintaining the property that mp 2+* log p n 2 p log p p j the separation is 2 p : Proof: We see that the upper bound of theorem 3 and the lower bound given in <ref> [ABK95] </ref> of n log m 8m imply that the separation is log p 2 4 log 2 m+log p 1 10 3.1 Performing Permutation Routing In this subsection we provide the proof of Lemma 4.
Reference: [ACS90] <author> A. Aggarwal, A. Chandra, and M. Snir. </author> <title> Communication Complexity of PRAMs. </title> <booktitle> Theoretical Computer Science 71: </booktitle> <pages> pp 3-28, </pages> <year> 1990. </year>
Reference: [AV88] <author> A. Aggarwal, J. Vitter. </author> <title> The Input/Output Complexity of Sorting and Related Problems. </title> <journal> Communications of the ACM, </journal> <pages> pp 116-127, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: the exclusive read PRAM (m) model and this algorithm implies that the concurrent read PRAM (m) is strictly more powerful than the exclusive read PRAM (m). 1.1 An I/O Complexity Application We first describe an application of our technique in a simplified version of Aggarwal and Vitter's external memory model <ref> [AV88] </ref>. This application serves as a simple introduction to the new coding technique, and highlights the technique's power. The external memory model represents a computer with a small internal memory, and a larger, but much slower external memory. <p> For example, this assumption has been used either explicitly or implicitly for I/O complexity lower bounds in [Flo72], <ref> [AV88] </ref>, [CGG+95], and others. Using this assumption, we give the following easy lower bound for this problem. Let M (n) be the set of entries of the matrix that are stored in the additional external memory.
Reference: [AKS83] <author> M. Ajtai, J. Komlos and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <journal> Combinatorica 3: pp. </journal> <volume> 1 - 19, </volume> <year> 1983. </year>
Reference: [BC82] <author> A. Borodin and S. Cook. </author> <title> A Time-Space Tradeoff for Sorting on a General Sequential Model of Computation. </title> <journal> SIAM J. of Computing, </journal> <volume> 11(2): </volume> <pages> pp. 287 - 297, </pages> <year> 1982. </year>
Reference: [CGG+95] <author> Y. Chiang, M. Goodrich, E. Grove, R. Tamassia, D. Vengroff, J. Vitter. </author> <booktitle> External-Memory Graph Algorithms Proc. 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pp. 139 - 149, </pages> <year> 1995. </year>
Reference-contexts: For example, this assumption has been used either explicitly or implicitly for I/O complexity lower bounds in [Flo72], [AV88], <ref> [CGG+95] </ref>, and others. Using this assumption, we give the following easy lower bound for this problem. Let M (n) be the set of entries of the matrix that are stored in the additional external memory.
Reference: [C88] <author> R. Cole. </author> <title> Parallel Merge Sort. </title> <journal> SIAM J. of Computing, </journal> <volume> 17(4): </volume> <pages> pp. 770 - 785, </pages> <year> 1988. </year>
Reference: [CKP+93] <author> D. Culler, R. M. Karp, D. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subramonian and T. von Eicken. </author> <title> LogP: Towards a Realistic Model of Parallel Computation. </title> <booktitle> In Proc. 4th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, </booktitle> <pages> pp. 1-12, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The PRAM (m) model allows us to study limited bandwidth in a setting that is almost as simple as the traditional PRAM. Ignoring other communication costs, such as message latency, that are incorporated into other, more precise parallel models such as the BSP model [Val90a] and the LogP model <ref> [CKP+93] </ref> is useful because limited bandwidth is easier to study in an environment that does not complicate the issue with these other costs. Furthermore, these other costs can often be hidden using techniques such as parallel slackness, but no such technique exists for limited bandwidth.
Reference: [CS92] <author> R. Cypher and J. Sanz. Cubesort: </author> <title> A Parallel Algorithm for Sorting N Data Items with S-Sorters. </title> <journal> Journal of Algorithms 13: </journal> <pages> pp. 211-234, </pages> <year> 1992. </year>
Reference: [Flo72] <author> R. Floyd. </author> <title> Permuting Information in Idealized Two-Level Storage. In Complexity of Computer Calculations, </title> <editor> R. Miller and J. Thatcher, ed., </editor> <publisher> Plenum, </publisher> <pages> pp. 105 - 109, </pages> <year> 1972. </year>
Reference-contexts: For example, this assumption has been used either explicitly or implicitly for I/O complexity lower bounds in <ref> [Flo72] </ref>, [AV88], [CGG+95], and others. Using this assumption, we give the following easy lower bound for this problem. Let M (n) be the set of entries of the matrix that are stored in the additional external memory.
Reference: [Goo96] <author> M. Goodrich. </author> <booktitle> Communication-Efficient Parallel Sorting Proceedings of the 28 th Annual ACM Symposium on Theory of Computing: </booktitle> <pages> pp. 247 - 256, </pages> <year> 1996. </year>
Reference-contexts: Low communication throughput has been shown to be a primary bottleneck in parallel computation by several results, including [VW85], [MNV94], [ABK95], and <ref> [Goo96] </ref>. Thus, in many situations, using the available bandwidth as efficiently as possible is crucial. In the PRAM (m), p processors communicate only through a small, globally shared memory consisting of m bits. The input, assumed to be of size n, is stored in a globally readable ROM. <p> They state the exact complexity of sorting as one of the most interesting open problems in the PRAM (m) model. Their result remains the best lower bound for sorting in the CR PRAM (m), and thus there is still a large gap. Other recent work on parallel sorting includes <ref> [Goo96] </ref>, where Goodrich provides an algorithm for the BSP model which sorts using internal computation time O ( n log n p ) and O ( log n log (n=p+1) ) communication rounds. 2 Single Column Transposition We present a solution to the single column transposition problem.
Reference: [KR90] <author> R. M. Karp and V. Ramachandran. </author> <title> Parallel Algorithms for Shared-Memory Machines. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, </editor> <publisher> Ed., </publisher> <pages> pp. 869-941. </pages> <publisher> Elsevier Science Publishers: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference: [Lei85] <author> T. Leighton. </author> <title> Tight Bounds on the Complexity of Parallel Sorting. </title> <journal> IEEE Trans. on Computers, </journal> <volume> c-34(4): </volume> <pages> pp. 344-354, </pages> <year> 1985. </year>
Reference-contexts: Note that the broadcast problem does not imply the separation between the two models due to the presence of the globally readable ROM. Leighton studies the bandwidth requirements of sorting in <ref> [Lei85] </ref>. Using Thompson's VLSI model [Tho80], he proves a lower bound of AT 2 = (n 2 log 2 n) for sorting n keys of size fi (log n), where A is the area of 3 a VLSI chip and T is the running time of the chip.
Reference: [LRT93] <author> C. Leiserson, S. Rao, S. Toledo. </author> <title> Efficient Out-Of-Core Algorithms for Linear Relaxation Using Blocking Covers. </title> <booktitle> In Proc. 34 th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pp. 704-713, </pages> <year> 1993. </year>
Reference: [MNV94] <author> Y. Mansour, N. Nisan and U. Vishkin. </author> <title> Trade-offs Between Communication Throughput and Parallel Time. </title> <booktitle> In Proceedings of the 26 th Annual ACM Symposium on Theory of Computing: </booktitle> <pages> pp. 372-381, </pages> <year> 1994. </year>
Reference-contexts: The technique is described in section 2, and is the main technical contribution of this paper. 1.2 The PRAM (m) Model The main application of the new coding technique in this paper is reducing the bandwidth requirements of algorithms in the PRAM (m), a limited bandwidth parallel model introduced by <ref> [MNV94] </ref>. Low communication throughput has been shown to be a primary bottleneck in parallel computation by several results, including [VW85], [MNV94], [ABK95], and [Goo96]. Thus, in many situations, using the available bandwidth as efficiently as possible is crucial. <p> Model The main application of the new coding technique in this paper is reducing the bandwidth requirements of algorithms in the PRAM (m), a limited bandwidth parallel model introduced by <ref> [MNV94] </ref>. Low communication throughput has been shown to be a primary bottleneck in parallel computation by several results, including [VW85], [MNV94], [ABK95], and [Goo96]. Thus, in many situations, using the available bandwidth as efficiently as possible is crucial. In the PRAM (m), p processors communicate only through a small, globally shared memory consisting of m bits. <p> Furthermore, these other costs can often be hidden using techniques such as parallel slackness, but no such technique exists for limited bandwidth. For further motivation for the PRAM (m), we refer the reader to <ref> [MNV94] </ref>. We also point out that by eliminating the globally readable ROM, one can use a variant of the PRAM (m) in limited bandwidth analysis that includes the cost of distributing the input. <p> This model provides another useful tool for designing algorithms that use bandwidth efficiently. As with the classical PRAM, two versions of the PRAM (m) have been proposed: the CR (concurrent read) PRAM (m) <ref> [MNV94] </ref> and the ER (exclusive read) PRAM (m) [ABK95]. For both models, we here assume that writing is exclusive, and that reading from the ROM containing the input may be performed concurrently. The two distinct models capture a fundamental difference in the power of limited bandwidth settings. <p> This was the best known running time for sorting in both models prior to this paper. When introducing the PRAM (m) model in <ref> [MNV94] </ref>, Mansour, Nisan and Vishkin prove a lower bound of ( n p mp ) for several problems, including sorting, in the CR PRAM (m). They state the exact complexity of sorting as one of the most interesting open problems in the PRAM (m) model. <p> On the other hand, it is also interesting to note that the lower bound of section 2.1 implies a lower bound for using the technique described in this paper for sorting in the CR PRAM (M ) which is identical to that given in <ref> [MNV94] </ref>. Related to this open problem is finding the exact complexity of sorting in the CR PRAM (M ). 6 Acknowledgments The author would like to thank Satish Rao for suggesting applying the coding technique to I/O complexity.
Reference: [MR95] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference: [Rei85] <author> R. Reischuk. </author> <title> Probabilistic Parallel Algorithms For Sorting and Selection. </title> <note> SIAM Journal on Computing 14:2 pp 396-409, </note> <year> 1985. </year>
Reference: [Sni85] <author> M. Snir. </author> <title> On Parallel Searching. </title> <journal> SIAM Journal of Computing: </journal> <volume> 14: </volume> <pages> pp. 688-708, </pages> <year> 1985. </year>
Reference-contexts: In section 3, we give an outline of the CR PRAM (m) sorting algorithm. A description of the improved ER PRAM (m) sorting algorithm is given in section 4. 1.4 Previous Work By using the results of <ref> [Sni85] </ref>, we can show that parallel binary search on n keys requires time (log N ) in the ER PRAM (m) model and can be performed in time O (log p n) in the CR PRAM (m).
Reference: [Tho80] <author> C. Thompson. </author> <title> A Complexity Theory for VLSI. </title> <type> PhD Thesis. </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1980. </year>
Reference-contexts: Note that the broadcast problem does not imply the separation between the two models due to the presence of the globally readable ROM. Leighton studies the bandwidth requirements of sorting in [Lei85]. Using Thompson's VLSI model <ref> [Tho80] </ref>, he proves a lower bound of AT 2 = (n 2 log 2 n) for sorting n keys of size fi (log n), where A is the area of 3 a VLSI chip and T is the running time of the chip.
Reference: [Val90a] <author> L. Valiant. </author> <title> A Bridging Model for Parallel Computation. </title> <journal> Communications of the ACM, </journal> <volume> 33(8): </volume> <pages> pp 103-111, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The PRAM (m) model allows us to study limited bandwidth in a setting that is almost as simple as the traditional PRAM. Ignoring other communication costs, such as message latency, that are incorporated into other, more precise parallel models such as the BSP model <ref> [Val90a] </ref> and the LogP model [CKP+93] is useful because limited bandwidth is easier to study in an environment that does not complicate the issue with these other costs. Furthermore, these other costs can often be hidden using techniques such as parallel slackness, but no such technique exists for limited bandwidth.
Reference: [Val90b] <author> L. Valiant. </author> <title> General Purpose Parallel Architectures. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, </editor> <publisher> Ed., </publisher> <pages> pp. 943-971. </pages> <publisher> Elsevier Science Publishers: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference: [VW85] <author> U. Vishkin and A. Wigderson. </author> <title> Trade-Offs between Depth and Width in Parallel Computation. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2): </volume> <pages> pp. 303 - 314, </pages> <year> 1985. </year>
Reference-contexts: Low communication throughput has been shown to be a primary bottleneck in parallel computation by several results, including <ref> [VW85] </ref>, [MNV94], [ABK95], and [Goo96]. Thus, in many situations, using the available bandwidth as efficiently as possible is crucial. In the PRAM (m), p processors communicate only through a small, globally shared memory consisting of m bits.
Reference: [VS94] <author> J. Vitter, E. Shriver. </author> <title> Algorithms for Parallel Memory I: Two-Level Memories. </title> <journal> Algorithmica, </journal> <volume> 12(2/3): </volume> <pages> pp. 110-147, </pages> <year> 1994. </year>
References-found: 23

