URL: http://www.cs.washington.edu/homes/mernst/pubs/serialize-tr638.ps
Refering-URL: http://www.cs.washington.edu/homes/mernst/pubs/serialize-tr638-abstract.html
Root-URL: 
Title: Serializing Parallel Programs by Removing Redundant Computation  
Author: Michael D. Ernst 
Date: August 31, 1992 Revised August 21, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Harold Abelson and Gerald Jay Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> MIT Electrical Engineering and Computer Science Series. MIT Press and McGraw-Hill, </publisher> <year> 1985. </year>
Reference: [2] <author> Santosh G. Abraham and David E. Hudak. </author> <title> Compile-time partitioning of iterative parallel loops to reduce cache coherency traffic. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(3) </volume> <pages> 318-328, </pages> <month> July </month> <year> 1991. </year>
Reference: [3] <author> Anant Agarwal. </author> <title> Limits on interconnection network performance. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 398-412, </pages> <month> October </month> <year> 1991. </year>
Reference: [4] <author> Anant Agarwal, Beng-Hong Lim, David Kranz, and John Kubiatowicz. </author> <month> APRIL: </month> <title> A processor architecture for multiprocessing. </title> <booktitle> In Proceedings, 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 104-114, </pages> <address> Seattle, Washington, </address> <month> May </month> <year> 1990. </year>
Reference: [5] <author> A. V. Aho, S. C. Johnson, and J. D. Ullman. </author> <title> Code generation for expressions with common subex-pressions. </title> <journal> Journal of the ACM, </journal> <volume> 24(1) </volume> <pages> 146-160, </pages> <month> January </month> <year> 1977. </year>
Reference: [6] <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. Computer Science Series. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference: [7] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <booktitle> In Proceedings of the Fifteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-9, </pages> <year> 1983. </year>
Reference: [8] <author> F. E. Allen and J. Cocke. </author> <title> A catalogue of optimizing transformations. </title> <editor> In R. Rustin, editor, </editor> <booktitle> Design and Optimization of Compilers, </booktitle> <pages> pages 1-30. </pages> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1972. </year>
Reference: [9] <author> Randy Allen and Ken Kennedy. </author> <title> Vector register allocation. </title> <type> Technical report, </type> <institution> Rice University, Houston, Texas, </institution> <month> April </month> <year> 1986. </year> <month> Revised March </month> <year> 1988. </year>
Reference: [10] <author> Bowen Alpern, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Detecting equality of variables in programs. </title> <booktitle> In Conference Record of the 15th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 296-306, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1988. </year>
Reference: [11] <author> William F. Ames. </author> <title> Numerical methods for partial differential equations. </title> <publisher> Academic Press, </publisher> <address> second edition, </address> <year> 1977. </year>
Reference-contexts: B.4. OTHER APPLICATIONS 87 for the two-dimensional stencil is the convolution of the 5-point Laplacian operator with itself <ref> [11] </ref>: 1 1 8 20 8 1 ; 1 Starting from the 9-point form of the Laplacian results in a better stencil, 1 8 18 8 1 18 144 468 144 18 ; 1 8 18 8 1 but this still isn't as good as one customized to work well for
Reference: [12] <author> R. S. Anderssen and P. Bloomfield. </author> <title> Numerical differentiation procedures for non-exact data. </title> <journal> Numer. Math., </journal> <volume> 22 </volume> <pages> 157-182, </pages> <year> 1974. </year>
Reference: [13] <author> ANSI. </author> <title> ANSI Fortran Draft S8, </title> <type> Version 111. </type>
Reference: [14] <author> Arvind and Rishiyur S. Nikhil. </author> <title> Executing a program on the MIT tagged-token dataflow architecture. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(3) </volume> <pages> 300-318, </pages> <month> March </month> <year> 1990. </year>
Reference: [15] <author> M. Auslander and M. Hopkins. </author> <title> An overview of the PL.8 compiler. </title> <booktitle> In Proceedings of the SIGPLAN '82 Symposium on Compiler Construction, </booktitle> <pages> pages 22-31, </pages> <address> Boston, Massachusetts, </address> <month> June </month> <year> 1982. </year> <note> Proceedings were also published as SIGPLAN Notices 17(6). </note>
Reference: [16] <author> Robert A. Ballance, Arthur B. Maccabe, and Karl J. Ottenstein. </author> <title> The program dependence web: a representation supporting control-, data-, and demand-driven interpretation of imperative languages. </title> <booktitle> In Proceedings of the SIGPLAN '90 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 257-271. </pages> <publisher> ACM Press, </publisher> <month> June </month> <year> 1990. </year>
Reference: [17] <author> Guy E. Blelloch. NESL: </author> <title> A nested data-parallel language. </title> <type> Technical Report CMU-CS-92-103, </type> <institution> Carnegie Mellon University, Pittsburgh, Pennsylvania, </institution> <month> January </month> <year> 1992. </year> <note> 89 90 BIBLIOGRAPHY </note>
Reference: [18] <author> Guy E. Blelloch and Siddhartha Chatterjee. </author> <title> VCODE: A data-parallel intermediate language. </title> <booktitle> In Proceedings of the Third Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 471-480, </pages> <address> College Park, Maryland, </address> <month> October </month> <year> 1990. </year>
Reference: [19] <author> Manuel Blum, Robert W. Floyd, Vaughan Pratt, Ronald L. Rivest, and Robert E. Tarjan. </author> <title> Time bounds for selection. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7(4) </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference: [20] <author> Martin L. Brady and Whanki Yong. </author> <title> Parallel discrete approximation algorithms for the Radon transform. </title> <booktitle> In Proceedings of SPAA '92: The 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 91-99, </pages> <address> San Diego, California, June 29-July 1, </address> <year> 1992. </year>
Reference-contexts: APPLICATIONS Reconstructing images from their projections is done via convolution [107]. This problem is also known as the inverse Radon or inverse Hough transform. There are also interesting ad hoc approaches to removing redundant computations for this problem <ref> [20] </ref>. Template matching can be solved by performing two-dimensional convolution [88]. Stereo matching is done by shifting an image by a small amount and checking correlation locally (using a small section of the image).
Reference: [21] <author> Melvin A. Breuer. </author> <title> Generation of optimal code for expressions via factorization. </title> <journal> Communications of the ACM, </journal> <volume> 12(6) </volume> <pages> 333-340, </pages> <month> June </month> <year> 1969. </year>
Reference: [22] <author> Mark Bromley, Steven Heller, Tim McNerney, and Guy L. Steele Jr. </author> <title> Fortran at ten gigaflops: The Connection Machine convolution compiler. </title> <booktitle> In Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 145-156, </pages> <month> June 26-28, </month> <year> 1991. </year>
Reference: [23] <author> John Bruno and Ravi Sethi. </author> <title> Code generation for a one-register machine. </title> <journal> Journal of the ACM, </journal> <volume> 23(3) </volume> <pages> 502-510, </pages> <month> July </month> <year> 1976. </year>
Reference: [24] <author> Philip L. Campbell, Ksheerabdhi Krishna, and Robert A. Ballance. </author> <title> Refining and defining the program dependence web. </title> <type> Technical Report CS93-6, </type> <institution> University of New Mexico, </institution> <address> Albuquerque, </address> <month> March </month> <year> 1993. </year>
Reference: [25] <author> John Francis Canny. </author> <title> Finding edges and lines in images. </title> <type> Technical Report 720, </type> <institution> MIT Artificial Intelligence Laboratory, Cambridge, Massachusetts, </institution> <month> June </month> <year> 1983. </year>
Reference: [26] <author> Brice Carnahan, H. A. Luther, and James O. Wilkes. </author> <title> Applied Numerical Methods. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: in a program for interpolating digital terrain models from contours [66] was: 1 1 4 1 1 4 18 76 18 4 : 1 1 4 1 1 There are many other applications for the biharmonic operator, such as the stress function for the edges of a plate under tension <ref> [26] </ref>. B.4 Other applications Our optimizations can benefit many other applications, from the direct implementation of Neville's algorithm for constructing an interpolating polynomial [108] to histogram equalization, which computes the average of the neighborhood around each point [107].
Reference: [27] <author> Todd Cass. canny.lisp, </author> <year> 1987. </year> <title> Connection Machine implementation of Canny's edge detector. </title>
Reference: [28] <author> David Chaiken, Beng-Hong Lim, and Dan Nussbaum. </author> <note> ASIM users manual. Alewife Systems Memo 13, </note> <institution> MIT Laboratory for Computer Science, Cambridge, Massachusetts, </institution> <month> August </month> <year> 1990. </year> <note> 9 pages; revised November 26, </note> <year> 1991. </year>
Reference: [29] <author> K. Mani Chandy and Stephen Taylor. </author> <title> An Introduction to Parallel Programming. </title> <publisher> Jones and Bartlett, </publisher> <address> Boston, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: An iterative relaxation method can be used to solve partial differential equations. The key is computing a partial derivative using old values at adjacent points and using fixed values where boundary conditions apply. (This is the Dirichlet space <ref> [29] </ref>.) The discrete approximations of these partial derivative operators are also called computational molecules [66]; these are just stencils, so our methods are directly applicable. We briefly discuss just one vision application, the variational approach to machine vision.
Reference: [30] <author> J. Cocke. </author> <title> Global common subexpression elimination. </title> <journal> SIGPLAN Notices, </journal> <volume> 5(7) </volume> <pages> 20-24, </pages> <month> July </month> <year> 1970. </year>
Reference: [31] <author> John Cocke and Peter Markstein. </author> <title> Measurement of program improvement algorithms. </title> <institution> Computer Science 35193, IBM Thomas J. Watson Research Center, </institution> <address> Yorktown Heights, New York, </address> <month> February 7, </month> <year> 1980. </year>
Reference: [32] <author> W. J. Cody. </author> <title> Analysis of proposals for the floating-point standard. </title> <journal> IEEE Computer, </journal> <volume> 14(3) </volume> <pages> 63-68, </pages> <month> March </month> <year> 1981. </year>
Reference: [33] <author> Jerome T. Coonen. </author> <title> An implementation guide to a proposed standard for floating-point arithmetic. </title> <journal> IEEE Computer, </journal> <volume> 13(1) </volume> <pages> 68-79, </pages> <month> January </month> <year> 1980. </year> <note> Errata appear in IEEE Computer, 14(3):61, </note> <month> March </month> <year> 1981. </year>
Reference: [34] <author> Jerome T. Coonen. </author> <title> Underflow and the denormalized numbers. </title> <journal> IEEE Computer, </journal> <volume> 14(3) </volume> <pages> 75-87, </pages> <month> March </month> <year> 1981. </year>
Reference: [35] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Electrical Engineering and Computer Science Series. MIT Press and McGraw-Hill, </publisher> <address> Cambridge, Mas-sachusetts and New York, New York, </address> <year> 1990. </year>
Reference: [36] <author> David E. Culler. </author> <title> Managing parallelism and resources in scientific dataflow programs. </title> <type> Technical Report MIT-LCS-TR-446, </type> <institution> MIT Laboratory for Computer Science, Cambridge, Massachusetts, </institution> <month> March </month> <year> 1990. </year>
Reference: [37] <author> Ron Cytron. </author> <title> Doacross: Beyond vectorization for multiprocessors. </title> <booktitle> In Proceedings of the 1986 International Conference on Parallel Processing, </booktitle> <pages> pages 836-844, </pages> <month> August </month> <year> 1986. </year>
Reference: [38] <author> Ron Cytron. </author> <title> Limited processor scheduling of doacross loops. </title> <booktitle> In Proceedings of the 1987 International Conference on Parallel Processing, </booktitle> <pages> pages 226-234, </pages> <month> August </month> <year> 1987. </year>
Reference: [39] <author> William J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(6) </volume> <pages> 775-785, </pages> <month> June </month> <year> 1990. </year>
Reference: [40] <author> F. Darema-Rogers, V. A. Norton, and G. F. Pfister. </author> <title> Using a single-program-multiple-data computa BIBLIOGRAPHY 91 tional model for parallel execution of scientific application. </title> <type> Technical Report RC 1152, </type> <institution> IBM, </institution> <address> Yorktown Heights, New York, </address> <month> November 12, </month> <year> 1986. </year> <note> Revised version. </note>
Reference: [41] <author> Robert B. K. Dewar. </author> <title> The SETL programming language. </title> <type> Manuscript, </type> <year> 1978. </year>
Reference: [42] <author> D. M. Dhamdhere. </author> <title> A usually linear algorithm for register assignment using edge placement of load and store instructions. </title> <journal> Computer Languages, </journal> <volume> 15(2) </volume> <pages> 83-94, </pages> <year> 1990. </year>
Reference: [43] <author> Karl-Heinz Drechsler and Manfred P. Stadel. </author> <title> A solution to a problem with Morel and Renvoise's "Global optimization by suppression of partial redundancies". </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(4) </volume> <pages> 635-640, </pages> <month> October </month> <year> 1988. </year>
Reference: [44] <author> J. Earley. </author> <title> High level iterators and a method for automatically designing data structure representation. </title> <journal> Computer Languages, </journal> <volume> 1(4) </volume> <pages> 321-342, </pages> <year> 1975. </year>
Reference: [45] <author> Charles Henry Edwards, Jr. and David E. Penney. </author> <title> Elementary Differential Equations with Applications. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference: [46] <author> Michael D. Ernst. </author> <title> Sequentializing parallel grid programs. </title> <type> Manuscript, </type> <month> May 13, </month> <year> 1992. </year>
Reference: [47] <author> Michael D. Ernst. </author> <title> Serializing parallel programs (abstract). </title> <editor> In Charles E. Leiserson, editor, </editor> <booktitle> Proceedings of the 1992 MIT Student Workshop on VLSI and Parallel Systems, </booktitle> <pages> pages 13-1-13-2, </pages> <month> July 21, </month> <year> 1992. </year>
Reference: [48] <author> Michael D. Ernst. </author> <title> Serializing parallel programs by removing redundant computation. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> August </month> <year> 1992. </year>
Reference: [49] <author> Jeanne Ferrante and Mary Mace. </author> <title> On linearizing parallel code. </title> <booktitle> In Proceedings of the Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 179-190, </pages> <month> January </month> <year> 1985. </year>
Reference: [50] <author> Jeanne Ferrante, Mary Mace, and Barbara Simons. </author> <title> Generating sequential code from parallel code. </title> <booktitle> In Proceedings of the 1988 International Conference on Supercomputing, </booktitle> <pages> pages 582-592, </pages> <month> June </month> <year> 1988. </year>
Reference: [51] <author> Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. </author> <title> The program dependence graph and its use in optimization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(3) </volume> <pages> 319-349, </pages> <month> July </month> <year> 1987. </year>
Reference: [52] <author> Amelia C. Fong. </author> <title> Inductively computable constructs in very high level languages. </title> <booktitle> In Conference Record of the Sixth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 21-28, </pages> <address> San Antonio, Texas, </address> <month> January 29-31, </month> <year> 1979. </year>
Reference: [53] <author> Amelia C. Fong and Jeffrey D. Ullman. </author> <title> Induction variables in very high level languages. </title> <booktitle> In Conference Record of the Third ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 104-112, </pages> <address> Atlanta, Georgia, </address> <month> January 19-21, </month> <year> 1976. </year>
Reference: [54] <author> G. C. Fox, A. Kolawa, and R. Williams. </author> <booktitle> The implementation of a dynamic load balancer. </booktitle> <pages> Pages 114-121. </pages>
Reference: [55] <author> Geoffrey Fox, Seema Hiranandani, Ken Kennedy, Charles Koelbel, Uli Kremer, Chau-Wen Tseng, and Min-You Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report COMP TR90-141, </type> <institution> Rice University Department of Computer Science, Houston, Texas, </institution> <month> December </month> <year> 1991. </year> <note> Revised February, </note> <year> 1991. </year>
Reference: [56] <author> W. Eric L. </author> <title> Grimson. Computing stereopsis using feature point contour matching. </title> <editor> In A. Rosenfeld, editor, </editor> <booktitle> Techniques for 3-D Machine Perception, </booktitle> <pages> pages 75-111. </pages> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1986. </year>
Reference-contexts: Stereo matching is done by shifting an image by a small amount and checking correlation locally (using a small section of the image). Motion detection is similar but may have to deal with two-dimensional shifts and different shifts in different parts of an image <ref> [56] </ref>. B.3 Partial differential equations Partial differential equations (PDEs) [108, pp. 636ff] are very common in scientific applications. Perhaps the most popular method for solving them is the finite element method (the finite differencing method is the same solution, recast in a different light).
Reference: [57] <author> Patrick A. V. Hall. </author> <title> Common subexpression identification in general algebraic systems. </title> <type> Technical Report UKSC 0060, </type> <institution> IBM United Kingdom Scientific Centre, Peterlee, County Durham, </institution> <address> England, </address> <month> November </month> <year> 1974. </year>
Reference: [58] <author> Patrick A. V. Hall. </author> <title> Optimization of single expressions in a relational data base system. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 20 </volume> <pages> 244-257, </pages> <month> May </month> <year> 1976. </year>
Reference: [59] <author> Robert H. Halstead, Jr. </author> <title> Multilisp: A language for concurrent symbolic computation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(4) </volume> <pages> 501-538, </pages> <month> October </month> <year> 1985. </year>
Reference: [60] <author> Philip J. Hatcher and Michael J. Quinn. </author> <title> Data-Parallel Programming on MIMD Computers. Scientific and Engineering Computation. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1991. </year>
Reference: [61] <author> Philip J. Hatcher, Michael J. Quinn, Anthony J. Lapadula, Bradley K. Seevers, Ray J. Anderson, and Robert R. Jones. </author> <title> Data-parallel programming on MIMD computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(3) </volume> <pages> 377-383, </pages> <month> July </month> <year> 1991. </year> <note> 92 BIBLIOGRAPHY </note>
Reference: [62] <author> James E. Hicks. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference: [63] <author> Seema Hiranandani, Ken Kennedy, and Chau-Wen Tseng. </author> <title> Compiler optimizations for Fortran D on MIMD distributed-memory machines. </title> <type> Technical Report CRPC-TR91162, </type> <institution> Rice University Center for Research on Parallel Computation, Houston, Texas, </institution> <month> April </month> <year> 1991. </year> <note> Revised August, </note> <year> 1991. </year>
Reference: [64] <author> Berthold K. P. Horn. </author> <title> Hill shading and the reflectance map. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 69(1) </volume> <pages> 14-47, </pages> <month> January </month> <year> 1981. </year>
Reference: [65] <author> Berthold K. P. Horn. </author> <title> Height and gradient from shading. </title> <journal> International Journal of Computer Vision, </journal> <volume> 5(1) </volume> <pages> 37-75, </pages> <year> 1990. </year>
Reference-contexts: However, multigrid does not work when the PDE is nonlinear (as in this case: the reflectance map usually depends nonlinearly on the gradient 7 ), and multigrid becomes complicated when there are boundary conditions <ref> [65] </ref>. The traditional characteristic strip method is neither biologically likely nor efficient and robust [67]. Optical flow (computing a vector field showing how image brightness patterns appear to be moving) [68, 69] was the first problem solved using the variational approach. Another application is determining height and gradient from shading [65]. <p> <ref> [65] </ref>. The traditional characteristic strip method is neither biologically likely nor efficient and robust [67]. Optical flow (computing a vector field showing how image brightness patterns appear to be moving) [68, 69] was the first problem solved using the variational approach. Another application is determining height and gradient from shading [65]. Hundreds of iterations may be required, even for images of moderate size, especially if the contrast is low, so it is a good candidate for optimization. The fourth-order biharmonic operator is preferable to the second-order Laplacian for iteratively computing these partial derivatives [66].
Reference: [66] <author> Berthold K. P. Horn. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference-contexts: The key is computing a partial derivative using old values at adjacent points and using fixed values where boundary conditions apply. (This is the Dirichlet space [29].) The discrete approximations of these partial derivative operators are also called computational molecules <ref> [66] </ref>; these are just stencils, so our methods are directly applicable. We briefly discuss just one vision application, the variational approach to machine vision. It sets up a criterion function to determine the goodness of fit between an actual image and that predicted from one's solution. <p> Hundreds of iterations may be required, even for images of moderate size, especially if the contrast is low, so it is a good candidate for optimization. The fourth-order biharmonic operator is preferable to the second-order Laplacian for iteratively computing these partial derivatives <ref> [66] </ref>. The Laplacian is only marginally stable, while the bihar-monic is numerically stable even in the presence of noise. The biharmonic is also more amenable to our optimizations because its stencil is larger. (Generally, large stencils are desirable, to ensure stability [108]. <p> One used in a program for interpolating digital terrain models from contours <ref> [66] </ref> was: 1 1 4 1 1 4 18 76 18 4 : 1 1 4 1 1 There are many other applications for the biharmonic operator, such as the stress function for the edges of a plate under tension [26].
Reference: [67] <author> Berthold K. P. Horn and Michael J. Brooks, </author> <title> editors. Shape From Shading. </title> <booktitle> Artificial Intelligence. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: However, multigrid does not work when the PDE is nonlinear (as in this case: the reflectance map usually depends nonlinearly on the gradient 7 ), and multigrid becomes complicated when there are boundary conditions [65]. The traditional characteristic strip method is neither biologically likely nor efficient and robust <ref> [67] </ref>. Optical flow (computing a vector field showing how image brightness patterns appear to be moving) [68, 69] was the first problem solved using the variational approach. Another application is determining height and gradient from shading [65].
Reference: [68] <author> Berthold K. P. Horn and Brian G. Schunck. </author> <title> Determining optical flow. </title> <journal> Artificial Intelligence, </journal> <volume> 17 </volume> <pages> 185-203, </pages> <year> 1981. </year>
Reference-contexts: The traditional characteristic strip method is neither biologically likely nor efficient and robust [67]. Optical flow (computing a vector field showing how image brightness patterns appear to be moving) <ref> [68, 69] </ref> was the first problem solved using the variational approach. Another application is determining height and gradient from shading [65]. Hundreds of iterations may be required, even for images of moderate size, especially if the contrast is low, so it is a good candidate for optimization.
Reference: [69] <author> Berthold Klaus Paul Horn. </author> <title> Robot Vision. </title> <publisher> MIT Electrical Engineering and Computer Science Series. MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: A larger averaging area reduces the effects of noise and makes weak edges easier to detect (but an excessively large area can include other edges by accident) <ref> [69] </ref>. Repetitive smoothing is required by some stereo matching algorithms that use very heavily smoothed images to find an initial match and successively less-smoothed images for finer matching, once an approximate match has been computed [69]. 86 APPENDIX B. APPLICATIONS Reconstructing images from their projections is done via convolution [107]. <p> edges easier to detect (but an excessively large area can include other edges by accident) <ref> [69] </ref>. Repetitive smoothing is required by some stereo matching algorithms that use very heavily smoothed images to find an initial match and successively less-smoothed images for finer matching, once an approximate match has been computed [69]. 86 APPENDIX B. APPLICATIONS Reconstructing images from their projections is done via convolution [107]. This problem is also known as the inverse Radon or inverse Hough transform. There are also interesting ad hoc approaches to removing redundant computations for this problem [20]. <p> The traditional characteristic strip method is neither biologically likely nor efficient and robust [67]. Optical flow (computing a vector field showing how image brightness patterns appear to be moving) <ref> [68, 69] </ref> was the first problem solved using the variational approach. Another application is determining height and gradient from shading [65]. Hundreds of iterations may be required, even for images of moderate size, especially if the contrast is low, so it is a good candidate for optimization.
Reference: [70] <author> David Hough. </author> <title> Applications of the proposed IEEE 754 standard for floating-point arithmetic. </title> <journal> IEEE Computer, </journal> <volume> 14(3) </volume> <pages> 70-74, </pages> <month> March </month> <year> 1981. </year>
Reference: [71] <author> IBM. </author> <title> XL C User's Guide. </title>
Reference: [72] <institution> IBM. </institution> <note> XL FORTRAN Compiler/6000 Version 2.2 User's Guide. </note>
Reference: [73] <author> IBM. </author> <title> APL2 Programming: Language Reference, </title> <month> August </month> <year> 1984. </year> <title> Order number SH20-9227-0. </title>
Reference: [74] <author> Institute of Electrical and Electronics Engineers. </author> <title> IEEE standard for binary floating-point arithmetic. </title> <address> 345 East 47th Street, New York, NY 10017, </address> <month> August 12, </month> <year> 1985. </year> <note> IEEE Standard 754-1985. </note>
Reference: [75] <author> Institute of Electrical and Electronics Engineers Computer Society. </author> <title> A proposed standard for binary floating-point arithmetic: Draft 8.0 of IEEE Task P754. </title> <journal> IEEE Computer, </journal> <volume> 14(3) </volume> <pages> 51-62, </pages> <month> March </month> <year> 1981. </year>
Reference: [76] <author> K. E. Iverson. </author> <title> A Programming Language. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1962. </year>
Reference: [77] <author> K. E. Iverson. </author> <title> A dictionary of apl. </title> <journal> APL Quote Quad, </journal> <volume> 18(1) </volume> <pages> 5-40, </pages> <month> September </month> <year> 1987. </year>
Reference: [78] <author> Joseph JaJa. </author> <title> An Introduction to Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1992. </year>
Reference: [79] <author> Mattias Jarke. </author> <title> Common subexpression isolation in multiple query optimization. </title> <editor> In Won Kim, Davis S. Reiner, and Don S. Batory, editors, </editor> <title> Query Processing in Database Systems, </title> <booktitle> Topics in Information Systems, </booktitle> <pages> pages 191-205. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference: [80] <author> M. A. Jenkins, J. I. Glasgow, and C. McCrosky. </author> <title> Programming styles in Nial. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> January </month> <year> 1986. </year>
Reference: [81] <author> Kirk Johnson. </author> <title> Using the LALR parser generator, </title> <note> September 19, 1991. Documentation version 0.9. </note>
Reference: [82] <author> S. M. Joshi and D. M. Dhamdhere. </author> <title> A composite hoisting-strength reduction transformation for global program optimization: Part I. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 11 </volume> <pages> 21-41, </pages> <year> 1982. </year>
Reference: [83] <author> S. M. Joshi and D. M. Dhamdhere. </author> <title> A composite hoisting-strength reduction transformation for global program optimization: Part II. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 11 </volume> <pages> 111-126, </pages> <year> 1982. </year>
Reference: [84] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. Software Series. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <note> second edition, </note> <year> 1988. </year>
Reference: [85] <author> Greg Klanderman. </author> <title> Canny edge detector. </title> <address> smooth.c, </address> <month> May 18, </month> <year> 1990. </year>
Reference: [86] <author> Kathleen Knobe, Joan D. Lukas, and Guy L. Steele Jr. </author> <title> Data optimization: Allocation of arrays to reduce communication on SIMD machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8 </volume> <pages> 102-118, </pages> <year> 1990. </year>
Reference: [87] <author> Donald E. Knuth. </author> <title> Seminumerical Algorithms, </title> <booktitle> volume 2 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <note> second edition, </note> <year> 1981. </year>
Reference: [88] <editor> Vipin Kumar, P. S. Gopalakrishnan, and Laveen N. Kanal, editors. </editor> <booktitle> Parallel Algorithms for Machine Intelligence and Vision. Symbolic Computation|Artificial Intelligence Series. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year> <note> BIBLIOGRAPHY 93 </note>
Reference-contexts: APPLICATIONS Reconstructing images from their projections is done via convolution [107]. This problem is also known as the inverse Radon or inverse Hough transform. There are also interesting ad hoc approaches to removing redundant computations for this problem [20]. Template matching can be solved by performing two-dimensional convolution <ref> [88] </ref>. Stereo matching is done by shifting an image by a small amount and checking correlation locally (using a small section of the image). Motion detection is similar but may have to deal with two-dimensional shifts and different shifts in different parts of an image [56].
Reference: [89] <author> H. T. Kung and S. W. Wong. </author> <title> A systolic array chip for the convolution operator in image processing. VLSI Document V046, </title> <institution> Carnegie-Mellon University Computer Science Department, Pittsburgh, Pennsylvania, </institution> <month> February </month> <year> 1980. </year>
Reference: [90] <author> S. Lakshimivarahan and Sudarshan K. Dhall. </author> <title> Analysis and Design of Parallel Algorithms: Arithmetic and Matrix Problems. </title> <booktitle> Supercomputing and Parallel Processing. </booktitle> <address> McGraw Hill, New York, </address> <year> 1990. </year>
Reference: [91] <author> Daniel LaLiberte. </author> <title> Edebug User Manual: A Source Level Debugger for GNU Emacs Lisp, </title> <month> March </month> <year> 1992. </year> <note> Edition 1.2. </note>
Reference: [92] <author> C. </author> <title> Lasser. The Essential *Lisp Manual. </title> <institution> Thinking Machines Corporation, Cambridge, Massachusetts, </institution> <month> July </month> <year> 1986. </year>
Reference: [93] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hyper-cubes. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1992. </year>
Reference: [94] <author> Bil Lewis, Dan LaLiberte, </author> <title> and the GNU Manual Group. GNU Emacs Lisp Reference Manual. Free Software Foundation, </title> <address> Cambridge, Massachusetts, </address> <month> December </month> <year> 1990. </year> <note> Version 1.03. </note>
Reference: [95] <author> John D. C. Little, Kattta G. Murty, Dura W. Sweeney, and Caroline Karel. </author> <title> An algorithm for the traveling salesman problem. </title> <journal> Operations Research, </journal> <volume> 11(6) </volume> <pages> 972-989, </pages> <month> November-December </month> <year> 1963. </year>
Reference: [96] <author> J. M. LoSecco, Frederick Reines, and Daniel Sinclair. </author> <title> The search for proton decay. </title> <publisher> Scientific American, </publisher> <address> 252:54ff, </address> <month> June </month> <year> 1985. </year>
Reference: [97] <author> Larry Meadows. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference: [98] <author> Randall Mercer. </author> <title> The CONVEX FORTRAN 5.0 compiler. </title> <editor> In Lana P. Kartashev and Steven I. Karta-shev, editors, </editor> <booktitle> Third International Conference on Supercomputing, </booktitle> <volume> volume II, </volume> <pages> pages 164-175, </pages> <address> Boston, Massachusetts, </address> <month> May </month> <year> 1988. </year>
Reference: [99] <author> Joseph Mohan. </author> <title> A study in parallel computation|the traveling salesman problem. </title> <type> Technical Report CMU-CS-82-136, </type> <institution> Carnegie-Mellon University Department of Computer Science, </institution> <month> August 18, </month> <year> 1982. </year>
Reference: [100] <author> Joseph Mohan. </author> <title> Experience with two parallel programs solving the traveling salesman problem. </title> <booktitle> In Proceedings of the 1983 International Conference on Parallel Processing, </booktitle> <pages> pages 191-193, </pages> <year> 1983. </year>
Reference: [101] <author> Etienne Morel and Claude Renvoise. </author> <title> Global optimization by suppression of partial redundancies. </title> <journal> Communications of the ACM, </journal> <volume> 22(2) </volume> <pages> 96-103, </pages> <month> February </month> <year> 1979. </year>
Reference: [102] <author> Jacek Myczkowski and Guy L. Steele Jr. </author> <title> Seismic modeling at 14 gigaflops on the Connection Machine. </title> <booktitle> In Proceedings, Supercomputing '91, </booktitle> <pages> pages 316-326, </pages> <address> Albuquerque, New Mexico, </address> <month> November 18-22, </month> <year> 1991. </year>
Reference-contexts: Subsurface imaging, an important seismic application used for oil exploration, uses iterative methods which involve the stencil 1 1 16 60 16 1 1 and a few other terms; this operator is fourth order in both space dimensions <ref> [102] </ref>. 88 APPENDIX B. APPLICATIONS
Reference: [103] <author> Dan Nussbaum. </author> <note> ASIM reference manual. Alewife Systems Memo 28, </note> <institution> MIT Laboratory for Computer Science, Cambridge, Massachusetts, </institution> <month> January </month> <year> 1991. </year> <note> 17 pages; revised November 26, </note> <year> 1991. </year>
Reference: [104] <author> Bob Paige and J. T. Schwartz. </author> <title> Expression continuity and the formal differentiation of algorithms. </title> <booktitle> In Conference Record of the Fourth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 58-71, </pages> <address> Los Angeles, California, </address> <month> January 17-19, </month> <year> 1977. </year>
Reference: [105] <author> Robert Paige and Shaye Koenig. </author> <title> Finite differencing of computable expressions. </title> <type> Technical Report LCSR-TR-8, </type> <institution> Rutgers University Laboratory for Computer Science Research, </institution> <address> New Brunswick, New Jersey, </address> <month> August </month> <year> 1980. </year> <note> Revised December, </note> <year> 1981. </year>
Reference: [106] <author> Robert Paige and Shaye Koenig. </author> <title> Finite differencing of computable expressions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 402-454, </pages> <month> July </month> <year> 1982. </year>
Reference: [107] <author> Theodosios Pavlidis. </author> <title> Algorithms for Graphics and Image Processing. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1982. </year>
Reference-contexts: Repetitive smoothing is required by some stereo matching algorithms that use very heavily smoothed images to find an initial match and successively less-smoothed images for finer matching, once an approximate match has been computed [69]. 86 APPENDIX B. APPLICATIONS Reconstructing images from their projections is done via convolution <ref> [107] </ref>. This problem is also known as the inverse Radon or inverse Hough transform. There are also interesting ad hoc approaches to removing redundant computations for this problem [20]. Template matching can be solved by performing two-dimensional convolution [88]. <p> B.4 Other applications Our optimizations can benefit many other applications, from the direct implementation of Neville's algorithm for constructing an interpolating polynomial [108] to histogram equalization, which computes the average of the neighborhood around each point <ref> [107] </ref>. We have already mentioned others, such as numerical integration, and simulation of physical systems such as electrical circuits. Some of these only use a value twice, but that use is in the inner loop, where any gain is worthwhile.
Reference: [108] <author> William H. Press, Brian P. Flannery, Saul A. Teukolksy, and William T. Vetterling. </author> <title> Numerical Recipes in C: </title> <booktitle> The Art of Scientific Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1988. </year>
Reference-contexts: Motion detection is similar but may have to deal with two-dimensional shifts and different shifts in different parts of an image [56]. B.3 Partial differential equations Partial differential equations (PDEs) <ref> [108, pp. 636ff] </ref> are very common in scientific applications. Perhaps the most popular method for solving them is the finite element method (the finite differencing method is the same solution, recast in a different light). An iterative relaxation method can be used to solve partial differential equations. <p> The Laplacian is only marginally stable, while the bihar-monic is numerically stable even in the presence of noise. The biharmonic is also more amenable to our optimizations because its stencil is larger. (Generally, large stencils are desirable, to ensure stability <ref> [108] </ref>. When stencils are large, then there is more opportunity for redundant computation to be eliminated, and the expense of the computation makes efficient execution even more important.) The Laplacian uses only 5 to 9 points, but the biharmonic uses 13 to 25 points. <p> B.4 Other applications Our optimizations can benefit many other applications, from the direct implementation of Neville's algorithm for constructing an interpolating polynomial <ref> [108] </ref> to histogram equalization, which computes the average of the neighborhood around each point [107]. We have already mentioned others, such as numerical integration, and simulation of physical systems such as electrical circuits.
Reference: [109] <author> William Pugh and Tim Teitelbaum. </author> <title> Incremental computation via function caching. </title> <booktitle> In Principles of Programming Languages, </booktitle> <pages> pages 315-328, </pages> <year> 1989. </year>
Reference: [110] <author> J. Rose and G. L. Steele Jr. </author> <title> C*: An extended C language for data parallel programming. </title> <type> Technical Report PL87-5, </type> <institution> Thinking Machines Corporation, Cambridge, Massachusetts, </institution> <month> April </month> <year> 1987. </year>
Reference: [111] <author> Barry K. Rosen, Mark N. Wegman, and F. Kenneth Zadeck. </author> <title> Global value numbers and redundant computations. </title> <booktitle> In Conference Record of the 15th Annual ACM Symposium on Principles of Programming 94 BIBLIOGRAPHY Languages, </booktitle> <pages> pages 12-27, </pages> <address> San Diego, California, </address> <month> January </month> <year> 1988. </year>
Reference: [112] <author> Bill Ross. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference: [113] <author> Gary Sabot. </author> <title> Paralation Lisp Reference Manual, </title> <month> May </month> <year> 1988. </year>
Reference: [114] <author> Gary W. Sabot. </author> <title> The Paralation Model: Architecture-Independent Parallel Programming. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1988. </year>
Reference: [115] <author> Gary W. Sabot. </author> <title> Optimized CM Fortran compiler for the Connection Machine computer. </title> <booktitle> In Proceedings of Hawaii International Conference on System Sciences 25, </booktitle> <pages> pages 161-172. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference: [116] <author> J. T. Schwartz. </author> <title> On programming: An interim report on the SETL project, Installments I and II. </title> <type> Technical report, </type> <institution> Courant Institute of Mathematical Sciences, </institution> <address> New York University, New York, New York, </address> <year> 1974. </year>
Reference: [117] <author> Stephen D. Senturia and Bruce D. Wedlock. </author> <title> Electronic Circuits and Applications. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, New York, </address> <year> 1975. </year>
Reference: [118] <author> Ravi Sethi and J. D. Ullman. </author> <title> The generation of optimal code for arithmetic expressions. </title> <journal> Journal of the ACM, </journal> <volume> 17(4) </volume> <pages> 715-728, </pages> <month> October </month> <year> 1970. </year>
Reference: [119] <author> William McC. Siebert. </author> <title> Circuits, Signals, and Systems. </title> <publisher> MIT Electrical Engineering and Computer Science Series. MIT Press and McGraw-Hill, </publisher> <address> Cambridge, Massachusetts and New York, New York, </address> <year> 1986. </year>
Reference-contexts: Some of these only use a value twice, but that use is in the inner loop, where any gain is worthwhile. Band-pass filters are used to convert an ordinary or suppressed-carrier AM signal into single-side-band (SSB) AM signal, which only occupies half as much bandwidth <ref> [119] </ref>. Because of the real-time constraint, if this is done digitally, it should be done in the time domain as a stencil convolution.
Reference: [120] <author> Barbara Simons, David Alpern, and Jeanne Ferrante. </author> <title> A foundation for sequentializing parallel code | extended abstract. </title> <booktitle> In Proceedings of the 2nd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 350-359, </pages> <year> 1990. </year>
Reference: [121] <author> Barbara Simons and Jeanne Ferrante. </author> <title> An efficient algorithm for constructing a control flow graph for parallel code. </title> <type> Technical Report TR 03.465, </type> <institution> IBM, Santa Teresa Laboratory, </institution> <address> San Jose, California, </address> <month> February </month> <year> 1993. </year>
Reference: [122] <author> John Miles Smith and Philip Yen-Tang Chang. </author> <title> Optimizing the performance of a relational algebra database interface. </title> <journal> Communications of the ACM, </journal> <volume> 18(10) </volume> <pages> 568-579, </pages> <month> October </month> <year> 1975. </year>
Reference: [123] <author> Arthur Sorkin. </author> <title> Some comments on "A solution to a problem with Morel and Renvoise's `Global optimization by suppression of partial redundancies' ". ACM Transactions on Programming Languages and Systems, </title> <booktitle> 11(4) </booktitle> <pages> 666-668, </pages> <month> October </month> <year> 1989. </year>
Reference: [124] <author> Richard M. Stallman. </author> <title> The C Preprocessor. Free Software Foundation, </title> <address> Cambridge, Massachusetts, first edition, </address> <month> April </month> <year> 1989. </year>
Reference: [125] <author> Richard M. Stallman. </author> <title> Using and Porting GNU CC. Free Software Foundation, </title> <address> Cambridge, Mas-sachusetts, </address> <month> February </month> <year> 1992. </year> <note> For GNU CC version 2.0. </note>
Reference: [126] <author> Guy L. Steele Jr. CM-Lisp. </author> <type> Technical report, </type> <institution> Thinking Machines Corporation, </institution> <address> Cambridge, Mas-sachusetts, </address> <year> 1986. </year>
Reference: [127] <author> Guy L. Steele Jr. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference: [128] <author> Bjarne Steensgaard. </author> <title> Sequentializing program dependence graphs for irreducible programs. </title> <type> Technical Report MSR-TR-93-14, </type> <institution> Microsoft Research, </institution> <address> Redmond, WA, </address> <month> August </month> <year> 1993. </year>
Reference: [129] <author> J. M. Stone, F. Darema-Rogers, A. Norton, and G. F. Pfister. </author> <title> The VM/EPEX FORTRAN preprocessor reference. </title> <type> Technical report, </type> <institution> IBM, </institution> <address> Yorktown Heights, New York. </address>
Reference: [130] <author> Sun Microsystems. </author> <title> C Programmer's Guide, </title> <booktitle> 1989. Part number 800-3844-10. </booktitle>
Reference: [131] <author> Barbara Tansy. </author> <title> SPARCstation1 Sun System User's Guide. Sun Microsystems, </title> <year> 1989. </year>
Reference: [132] <author> Thinking Machines Corporation. </author> <title> Connection Machine Model CM-2 technical summary. </title> <type> Technical Report HA87-4, </type> <address> Cambridge, Massachusetts, </address> <month> April </month> <year> 1987. </year>
Reference: [133] <institution> Thinking Machines Corporation, Cambridge, Massachusetts. </institution> <note> C* Programming Guide, 1990. Version 6.0 Beta. </note>
Reference: [134] <institution> Thinking Machines Corporation, Cambridge, Massachusetts. </institution> <note> CM Fortran User's Guide, preliminary edition, </note> <month> October </month> <year> 1991. </year> <title> Thinking Machines confidential. BIBLIOGRAPHY 95 </title>
Reference: [135] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, Massachusetts. </address> <booktitle> Getting Started in *Lisp, </booktitle> <month> June </month> <year> 1991. </year> <note> Version 6.1. First printing. </note>
Reference: [136] <institution> Thinking Machines Corporation, Cambridge, Massachusetts. *Lisp Dictionary, </institution> <month> October </month> <year> 1991. </year> <note> Version 6.1. Revised printing. </note>
Reference: [137] <author> Kenneth R. Traub. </author> <title> A compiler for the MIT tagged-token dataflow architecture. </title> <type> Technical Report MIT-LCS-TR-370, </type> <institution> MIT Laboratory for Computer Science, Cambridge, Massachusetts, </institution> <month> August </month> <year> 1986. </year>
Reference: [138] <author> Kenneth R. Traub. </author> <title> Sequential implementation of lenient programming languages. </title> <type> Technical Report LCS-TR-417, </type> <institution> MIT Laboratory for Computer Science, Cambridge, Massachusetts, </institution> <month> October </month> <year> 1988. </year>
Reference: [139] <author> J. D. Ullman. </author> <title> Fast algorithms for the elimination of common subexpressions. </title> <journal> Acta Informatica, </journal> <volume> 2(3) </volume> <pages> 191-213, </pages> <year> 1973. </year>
Reference: [140] <author> Daniel Weise, Roger F. Crew, Michael Ernst, and Bjarne Steensgaard. </author> <title> Value dependence graphs: Representation without taxation. </title> <type> Technical Report MSR-TR-94-03, </type> <institution> Microsoft Research, </institution> <address> Redmond, WA, </address> <month> April 13, </month> <year> 1994. </year>
Reference: [141] <author> Skef Wholey. </author> <title> Automatic data mapping for distributed-memory parallel computers. </title> <type> Technical Report CMU-CS-91-121, </type> <institution> Carnegie Mellon University, Pittsburgh, Pennsylvania, </institution> <month> May </month> <year> 1991. </year>
Reference: [142] <author> Robert G. Willhoft. </author> <title> Parallel expression in the APL2 language. </title> <journal> IBM Systems Journal, </journal> <volume> 30(4) </volume> <pages> 498-512, </pages> <year> 1991. </year>
Reference: [143] <author> Michael Wolfe. </author> <title> Optimizing Supercompilers for Supercomputers. </title> <booktitle> Research Monographs in Parallel and Distributed Computing. </booktitle> <publisher> MIT Press and Pitman, </publisher> <address> Cambridge, Massachusetts and London, England, </address> <year> 1989. </year>
Reference: [144] <author> Jamie Zawinski and Hallvard Furuseth. </author> <title> Compilation of Lisp code into byte code. </title> <address> bytecomp.el, March 9, </address> <year> 1992. </year> <note> Version 2.05. </note>
References-found: 144

