URL: ftp://ftp.cs.umass.edu/pub/lesser/neiman-93-24.ps
Refering-URL: http://dis.cs.umass.edu/~dann/dann-pubs.html
Root-URL: 
Email: Email: DANN@CS.UMASS.EDU  
Phone: Phone: (413)545-3444  
Title: An Implementation of Multiple Worlds for Parallel Rule-Firing Production Systems 1  
Author: Daniel E. Neiman 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: One of the principal advantages of parallelizing a rule-based system, or more generally, any A.I. system, is the ability to pursue alternate search paths concurrently. Conventional memory representations for production systems cannot easily or efficiently support parallel search because of the essentially flat structure of working memory and the combinatorics of pursuing pattern matching in a large memory space. A further obstacle to the effective exploitation of parallelism is the problem of maintaining the internal consistency of each search space while performing parallel activities in other spaces. This paper presents an approach to parallel search for rule-based systems which involves maintaining multiple separate worlds, each representing a search space. Constructs for creating, manipulating, and merging separate spaces are discussed. We describe how the addition of a language mechanism for specifying multiple worlds simplifies the design of parallel search algorithms, increases the efficiency of the pattern matcher, provides a framework for implementing advanced control mechanisms such as task-based or hierarchical problem solvers, and reduces or eliminates the overhead of runtime consistency checking. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Elizabeth Allen. YAPS: </author> <title> A production rule system meets objects. </title> <booktitle> In Proceedings of the Second National Conference on Artificial Intelligence, </booktitle> <pages> pages 5-7, </pages> <year> 1983. </year>
Reference-contexts: The concept of partitioned spaces is not a new one in A.I. problem solvers. The CONNIVER system introduced the notion of contexts to represent hypothetical worlds [25]. YAPS <ref> [1] </ref>, an object-oriented version of OPS5, supported multiple databases, as well as a global database. The knowledge-based systems KEE [3] and ART [26], also incorporate methods for reasoning about hypothetical worlds.
Reference: [2] <author> Johan de Kleer. </author> <title> An assumption-based TMS. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 127-162, </pages> <year> 1986. </year> <month> 10 </month>
Reference-contexts: YAPS [1], an object-oriented version of OPS5, supported multiple databases, as well as a global database. The knowledge-based systems KEE [3] and ART [26], also incorporate methods for reasoning about hypothetical worlds. Many of these systems use an assumption-based truth maintenance approach <ref> [2] </ref> although there is reason to believe that the overhead of maintaining beliefs would limit pattern-matching performance and require synchronization between parallel processes. An approach to managing multiple worlds 2 for parallel production systems which is similar in concept to assumption-based truth maintenance was investigated by Matsuzawa [13].
Reference: [3] <author> Robert E. Filman. </author> <title> Reasoning with worlds and truth maintenance in a knowledge-based program-ming environment. </title> <journal> Communications of the ACM, </journal> <volume> 31(4) </volume> <pages> 382-401, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: The concept of partitioned spaces is not a new one in A.I. problem solvers. The CONNIVER system introduced the notion of contexts to represent hypothetical worlds [25]. YAPS [1], an object-oriented version of OPS5, supported multiple databases, as well as a global database. The knowledge-based systems KEE <ref> [3] </ref> and ART [26], also incorporate methods for reasoning about hypothetical worlds. Many of these systems use an assumption-based truth maintenance approach [2] although there is reason to believe that the overhead of maintaining beliefs would limit pattern-matching performance and require synchronization between parallel processes. <p> A rule which matches any element not in the base space is said to be executing in the space of that element. 1 For similar reasons, the mechanism in KEE for maintainingpossible worlds <ref> [3] </ref> allowed the specification of background facts which were not subject to assumption-based truth maintenance. 3 space. * Unless explicitly specified, working memory elements added by a rule are asserted into the space in which the rule is executing. * Changes made to working memory elements in one space (excepting the
Reference: [4] <author> C. L. Forgy. </author> <title> OPS5 user's manual. </title> <type> Technical Report CMU-CS-81-135, </type> <institution> CMU Computer Science Department, </institution> <month> July </month> <year> 1981. </year>
Reference-contexts: following discussion is restricted to a Rete net implementation, the concept of partitioned memory spaces is also applicable to non-Rete algorithms such as TREAT [15]. 4.1 Partitioned memory in the Rete net The Rete net is a data structure that has been widely used in the implementation of production systems <ref> [4, 7] </ref>. Much of its efficiency results from taking advantage of temporal redundancy by storing partial matches. Because the database is expected to change only slowly, this allows rapid matching as new data arrives.
Reference: [5] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19(1) </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference: [6] <author> Douglas N. Gordin and Alexander J. Pasik. </author> <title> Set-oriented constructs: From Rete rule bases to database systems. </title> <booktitle> In Proceedings 10th ACM Symposium on PODS, </booktitle> <pages> pages 60-67, </pages> <year> 1991. </year>
Reference-contexts: In addition to the above commands, our production system includes a set-oriented semantics similar to that described by Gordin and Pasik <ref> [6] </ref> the use of this construct allows the programmer to match selected sets of working memory elements on the lefthand side of the rule and copy them into a new state. The addition of many new righthand side operators to the language represents a tradeoff in programming versus representational complexity.
Reference: [7] <author> A. Gupta, M. Tambe, D. Kalp, C. Forgy, and A. Newell. </author> <title> Parallel implementation of OPS5 on the Encore multiprocessor: Results and analysis. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 17(2), </volume> <year> 1988. </year>
Reference-contexts: Thus, the matching time and the space required to store partial matches increases combinatorially in proportion to the number of states. If memory is hashed, as in more recent implementations of production systems (such as CParaOPS5 <ref> [7] </ref>), the most obvious choice for a hash key is the state tag, but this reduces the effectiveness of the hashing implementation to that of a linear memory representation: within a state there is no internal hashing and all matching is done on the contents of the bucket accessed by the <p> following discussion is restricted to a Rete net implementation, the concept of partitioned memory spaces is also applicable to non-Rete algorithms such as TREAT [15]. 4.1 Partitioned memory in the Rete net The Rete net is a data structure that has been widely used in the implementation of production systems <ref> [4, 7] </ref>. Much of its efficiency results from taking advantage of temporal redundancy by storing partial matches. Because the database is expected to change only slowly, this allows rapid matching as new data arrives.
Reference: [8] <author> Anoop Gupta. </author> <title> Parallelism in Production Systems. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: One method of reducing the cost of creating new states is to insert working memory elements into the new state in parallel using action level parallelism <ref> [8] </ref>.
Reference: [9] <author> T. Ishida and S. Stolfo. </author> <title> Towards the parallel execution of rules in production system programs. </title> <booktitle> In Proceedings of the IEEE International Conference on Parallel Processing, </booktitle> <pages> pages 568-575, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets. <p> The problem of maintaining working memory consistency during the course of parallel rule-firing has been extensively studied <ref> [9, 10, 22, 23] </ref>. One of the motivating factors for the development of the multiple world paradigm for parallel production systems is the virtual elimination of overhead for consistency maintenance.
Reference: [10] <author> Toru Ishida. </author> <title> Methods and effectiveness of parallel rule firing. </title> <booktitle> In Sixth IEEE Conference on Artificial Intelligence Applications, </booktitle> <month> March </month> <year> 1990. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets. <p> The problem of maintaining working memory consistency during the course of parallel rule-firing has been extensively studied <ref> [9, 10, 22, 23] </ref>. One of the motivating factors for the development of the multiple world paradigm for parallel production systems is the virtual elimination of overhead for consistency maintenance.
Reference: [11] <author> Chin-Ming Kuo, Daniel Miranker, and James C. Browne. </author> <title> On the performance of the CREL system. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 424-441, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets. <p> The complete independence of partitions means that rule firings in different spaces can be scheduled and executed asynchronously with respect to each other, increasing the potential processor utilization. The asynchronous execution of rules in multiple worlds is similar to the control architecture proposed by Miranker, Kuo and Browne <ref> [14, 11] </ref>, however, the 5 parallel partitions are generated explicitly by the task-based semantics of the problem solving process rather than extracted via an analysis mechanism. It is still possible for rules operating within the same partition to interact.
Reference: [12] <author> Steve Kuo and Dan Moldovan. </author> <title> Implementation of multiple rule firing production systems on hypercube. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 305-309, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets.
Reference: [13] <author> Kazumitsu Matsuzawa. </author> <title> A parallel execution method of production systems with multiple worlds. </title> <booktitle> In First International Conference on Tools for AI, </booktitle> <pages> pages 339-344, </pages> <year> 1989. </year>
Reference-contexts: An approach to managing multiple worlds 2 for parallel production systems which is similar in concept to assumption-based truth maintenance was investigated by Matsuzawa <ref> [13] </ref>. In this work, a method was proposed for a parallel system that produces all possible results in an expert system by firing all rules simultaneously. This method involves creating a separate tag for each working memory element created.
Reference: [14] <author> Daniel Miranker, Chin-Ming Kuo, and James C. Browne. </author> <title> Parallelizing transformations for a concurrent rule execution language. </title> <type> Technical Report TR-89-30, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: The complete independence of partitions means that rule firings in different spaces can be scheduled and executed asynchronously with respect to each other, increasing the potential processor utilization. The asynchronous execution of rules in multiple worlds is similar to the control architecture proposed by Miranker, Kuo and Browne <ref> [14, 11] </ref>, however, the 5 parallel partitions are generated explicitly by the task-based semantics of the problem solving process rather than extracted via an analysis mechanism. It is still possible for rules operating within the same partition to interact.
Reference: [15] <author> Daniel P. Miranker. </author> <title> TREAT: A New and Efficient Match Algorithm for AI Production Systems. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1990. </year>
Reference-contexts: The system runs on a 16 processor Sequent shared-memory multiprocessor and is implemented in Top Level Common Lisp 2 . Although the following discussion is restricted to a Rete net implementation, the concept of partitioned memory spaces is also applicable to non-Rete algorithms such as TREAT <ref> [15] </ref>. 4.1 Partitioned memory in the Rete net The Rete net is a data structure that has been widely used in the implementation of production systems [4, 7]. Much of its efficiency results from taking advantage of temporal redundancy by storing partial matches.
Reference: [16] <author> D. I. Moldovan. Rubic: </author> <title> a multiprocessor for rule-based systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 19(4) </volume> <pages> 699-706, </pages> <month> July/August </month> <year> 1989. </year> <month> 11 </month>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets.
Reference: [17] <author> Daniel Neiman. </author> <title> Control issues in parallel rule-firing production systems. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 310-316, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets. <p> parallel search algorithms, increases the efficiency of the pattern matcher, provides a framework for implementing advanced control mechanisms such as task-based or hierarchical problem solvers, solves the problem of determing local quiescence of tasks, and reduces or eliminates the overhead of runtime consistency checking. 1.1 Motivation In research reported in <ref> [17, 18] </ref>, we demonstrated that conventional conflict resolution techniques would cause synchronization delays in parallel rule execution due to unequal rule matching times and proposed an asynchronous rule-firing scheme in which rules are executed as soon as they become enabled. <p> Because the communication between spaces occurs only at well-defined points in the computation and only for specific purposes, it is possible to design inexpensive constructs for ensuring correctness, i.e. the idiom for merging multiple solutions described in [18]. 3.3 Multiple Worlds and Control of Parallel Rule-firing In <ref> [17] </ref>, we raised a number of issues relevant to the sophisticated control of production systems, namely: * How can a task- or goal-oriented control scheme be imposed on the essentially data-driven paradigm of rule-based programming? * How can we insure that all related rules have become quiescent before beginning a control
Reference: [18] <author> Daniel Neiman. </author> <title> Parallel OPS5 user's manual and technical report. </title> <type> COINS Technical Report 92-28 (Supersedes TR 91-1), </type> <institution> Computer and Information Sciences Dept., University of Mas-sachusetts, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: parallel search algorithms, increases the efficiency of the pattern matcher, provides a framework for implementing advanced control mechanisms such as task-based or hierarchical problem solvers, solves the problem of determing local quiescence of tasks, and reduces or eliminates the overhead of runtime consistency checking. 1.1 Motivation In research reported in <ref> [17, 18] </ref>, we demonstrated that conventional conflict resolution techniques would cause synchronization delays in parallel rule execution due to unequal rule matching times and proposed an asynchronous rule-firing scheme in which rules are executed as soon as they become enabled. <p> Because the communication between spaces occurs only at well-defined points in the computation and only for specific purposes, it is possible to design inexpensive constructs for ensuring correctness, i.e. the idiom for merging multiple solutions described in <ref> [18] </ref>. 3.3 Multiple Worlds and Control of Parallel Rule-firing In [17], we raised a number of issues relevant to the sophisticated control of production systems, namely: * How can a task- or goal-oriented control scheme be imposed on the essentially data-driven paradigm of rule-based programming? * How can we insure that <p> To ensure this, we need to modify our rule-scheduling mechanisms to ensure that all rules referencing a currently instantiated state are executed expeditiously so that the state may generate its successors and be reclaimed. 7 4 Implementation A multiple world implementation has been developed for UMass Parallel OPS5 (UMPOPS) <ref> [18] </ref>. The system runs on a 16 processor Sequent shared-memory multiprocessor and is implemented in Top Level Common Lisp 2 .
Reference: [19] <author> Daniel E. Neiman. </author> <title> Design and Control of Parallel Rule-Firing Production Systems. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Our own research in this area has indicated that the automatic extraction of parallelism and run-time detection of concurrently executable rules limits the performance of the rule-firing system to a single order of magnitude speedup <ref> [23, 19] </ref>. As a result, our research has focused on explicitly reformulating problems to exploit the underlying parallelism within the domain and designing the rule-based algorithms accordingly. <p> It is still possible for rules operating within the same partition to interact. However, the number of rules executing within each space can reasonably be expected to be small; because the cost of interaction detection is dependent on the number of rules concurrently executing <ref> [19, 23] </ref> the cost of ensuring serializability will be greatly reduced. 3.2.1 Communication between Spaces In general, the separation between spaces is held to be absolute, that is, there is no interaction between rules executing in separate partitions.
Reference: [20] <author> A. Pasik and S. Stolfo. </author> <title> Improving production system performance on parallel architectures by creating constrained copies of rules. </title> <type> Technical report, </type> <institution> Computer Science Dept., Columbia University, </institution> <year> 1987. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets.
Reference: [21] <author> Daniel J. </author> <title> Scales. Efficient matching algorithms for the SOAR/OPS5 production system. </title> <type> Technical Report KSL 86-47, </type> <institution> Knowledge Systems Laboratory, Computer Science Dept., Stanford University, </institution> <year> 1986. </year>
Reference-contexts: Only working memory elements with the same annotation are allowed to match. The SOAR system, for example uses this technique to link all related objects within a sub-task <ref> [21] </ref>. This approach is suitable for cases in which there are few states and each state is represented by only a small set of working memory elements, however, there are a number of disadvantages. First, annotation increases the complexity of both the left and righthand sides of a production.
Reference: [22] <author> James G. Schmolze. </author> <title> Guaranteeing serializable results in synchronous parallel production systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets. <p> The problem of maintaining working memory consistency during the course of parallel rule-firing has been extensively studied <ref> [9, 10, 22, 23] </ref>. One of the motivating factors for the development of the multiple world paradigm for parallel production systems is the virtual elimination of overhead for consistency maintenance.
Reference: [23] <author> James G. Schmolze and Daniel E. Neiman. </author> <title> Comparison of three algorithms for ensuring serializability in parallel production systems. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-92), </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Our own research in this area has indicated that the automatic extraction of parallelism and run-time detection of concurrently executable rules limits the performance of the rule-firing system to a single order of magnitude speedup <ref> [23, 19] </ref>. As a result, our research has focused on explicitly reformulating problems to exploit the underlying parallelism within the domain and designing the rule-based algorithms accordingly. <p> The problem of maintaining working memory consistency during the course of parallel rule-firing has been extensively studied <ref> [9, 10, 22, 23] </ref>. One of the motivating factors for the development of the multiple world paradigm for parallel production systems is the virtual elimination of overhead for consistency maintenance. <p> It is still possible for rules operating within the same partition to interact. However, the number of rules executing within each space can reasonably be expected to be small; because the cost of interaction detection is dependent on the number of rules concurrently executing <ref> [19, 23] </ref> the cost of ensuring serializability will be greatly reduced. 3.2.1 Communication between Spaces In general, the separation between spaces is held to be absolute, that is, there is no interaction between rules executing in separate partitions.
Reference: [24] <author> Salvatore J. Stolfo, Ouri Wolfson, Philip K. Chan, Hasanat M. Dewan, Leland Woodbury, Jason S. Glazier, and David A Ohsie. PARULEL: </author> <title> Parallel rule processing using meta-rules for redaction. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13(4) </volume> <pages> 366-382, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets.
Reference: [25] <author> Gerald Jay Sussman and Drew Vincent McDermott. </author> <title> Why conniving is better than planning. </title> <booktitle> Artificial Intelligence Memo 255A, A.I. </booktitle> <institution> Laboratory, Massachusetts Institute of Technology, </institution> <month> April </month> <year> 1972. </year>
Reference-contexts: The concept of partitioned spaces is not a new one in A.I. problem solvers. The CONNIVER system introduced the notion of contexts to represent hypothetical worlds <ref> [25] </ref>. YAPS [1], an object-oriented version of OPS5, supported multiple databases, as well as a global database. The knowledge-based systems KEE [3] and ART [26], also incorporate methods for reasoning about hypothetical worlds.
Reference: [26] <author> Chuck Williams. </author> <title> Art the advanced reasoning tool, conceptual overview. INFERENCE Corporation, </title> <year> 1984. </year>
Reference-contexts: The CONNIVER system introduced the notion of contexts to represent hypothetical worlds [25]. YAPS [1], an object-oriented version of OPS5, supported multiple databases, as well as a global database. The knowledge-based systems KEE [3] and ART <ref> [26] </ref>, also incorporate methods for reasoning about hypothetical worlds. Many of these systems use an assumption-based truth maintenance approach [2] although there is reason to believe that the overhead of maintaining beliefs would limit pattern-matching performance and require synchronization between parallel processes.
Reference: [27] <author> Ouri Wolfson and Aya Ozeri. </author> <title> A new paradigm for parallel and distributed rule-processing. </title> <booktitle> In Proceedings of the ACM-SIGMOD 1990 International Conference on Management of Data, </booktitle> <pages> pages 133-142, </pages> <month> May </month> <year> 1990. </year> <month> 12 </month>
Reference-contexts: 1 Introduction In recent years, the parallel firing of rules has been explored as a method of increasing the performance of rule-based systems <ref> [9, 10, 11, 12, 16, 17, 20, 22, 24, 27] </ref>. Much of this work has concentrated on automatically identifying sets of concurrently executable rules based on a syntactic analysis of rule sets.
References-found: 27

