URL: http://java.sun.com/people/gong/papers/jdk12impl.ps.gz
Refering-URL: http://www.rstcorp.com/javasecurity/links.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fgong,schemersg@eng.sun.com  
Title: Implementing Protection Domains in the Java TM Development Kit 1.2  
Author: Li Gong and Roland Schemers 
Date: March 1988  
Address: San Diego, CA,  
Affiliation: Security,  JavaSoft, Sun Microsystems, Inc.  
Note: In Proceedings of the Internet Society Symp. on Network and Distributed System  
Abstract: The forthcoming Java TM Development Kit (JDK1.2) provides fine-grained access control via an easily configurable security policy. In this paper, we describe the design and implementation in JDK1.2 of the concept of protection domain, which is a cornerstone of the new security architecture. We present design rationales, implementation details, and performance data, which demonstrate the utility and efficiency of the new security architecture.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuchynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety, and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Colorado, </address> <month> December </month> <year> 1995. </year> <note> Published as ACM Operating System Review 29(5) 251-266, </note> <year> 1995. </year>
Reference-contexts: Another character of Java is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 11] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 7 Conclusion This paper describes in detail the design and implementation of the concept of protection domains, which is an important foundation of the new security architecture delivered in the upcoming
Reference: [2] <author> J.S. Chase, H.M. Levy, M.J. Feeley, and E.D. Lazowska. </author> <title> Sharing and Protection in a Single-Address-Space Operating System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4) </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Another character of Java is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 11] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 7 Conclusion This paper describes in detail the design and implementation of the concept of protection domains, which is an important foundation of the new security architecture delivered in the upcoming
Reference: [3] <author> L. Gong. </author> <title> Java Security: Present and Near Future. </title> <journal> IEEE Micro, </journal> <volume> 17(3) </volume> <pages> 14-19, </pages> <month> May/June </month> <year> 1997. </year>
Reference-contexts: also explain how protection domain is utilized, and compare it with exist ing work. 2 Overview of Security Architecture Looking from a high level, the new architecture is symbolized by security policy, access permission, run 1 For a broader overview of the architecture and its motiva tion, please refer to <ref> [3, 4] </ref>. 1 ning code that is granted (some) permissions, and ac-cess control checking. First, there is a system security policy, set by the user or by a system administrator, that is represented by a policy object, which is instantiated from the class java.security.Policy.
Reference: [4] <author> L. Gong, M. Mueller, H. Prafullchandra, and R. Schemers. </author> <title> Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java TM Development Kit 1.2. </title> <booktitle> In Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> Monterey, California, </address> <month> Decem-ber </month> <year> 1997. </year>
Reference-contexts: also explain how protection domain is utilized, and compare it with exist ing work. 2 Overview of Security Architecture Looking from a high level, the new architecture is symbolized by security policy, access permission, run 1 For a broader overview of the architecture and its motiva tion, please refer to <ref> [3, 4] </ref>. 1 ning code that is granted (some) permissions, and ac-cess control checking. First, there is a system security policy, set by the user or by a system administrator, that is represented by a policy object, which is instantiated from the class java.security.Policy.
Reference: [5] <author> J. Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The original Java security model <ref> [5, 7] </ref>, known as the sandbox model, provides a very restricted environment in which to run untrusted code (called applet) obtained from the open network. <p> Typically the second class is loaded by the same classloader that loaded the first class, except when either class is a system class, in which case the system class is loaded with a null classloader <ref> [5] </ref>. The special null system classloader is a historical feature system classes (i.e., those classes 2 The current implementation may create more domains than absolutely necessary.
Reference: [6] <author> A.K. Jones. </author> <title> Protection in Programmed Systems. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> June </month> <year> 1973. </year>
Reference-contexts: Significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics [10, 8], and right amplification in Hydra <ref> [6, 12] </ref>. One feature that is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [7] <author> T. Lindholm and F. Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction The original Java security model <ref> [5, 7] </ref>, known as the sandbox model, provides a very restricted environment in which to run untrusted code (called applet) obtained from the open network.
Reference: [8] <author> J.H. Saltzer. </author> <title> Protection and the Control of Information Sharing in Multics. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 388-402, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics <ref> [10, 8] </ref>, and right amplification in Hydra [6, 12]. One feature that is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [9] <author> J.H. Saltzer and M.D. Schroeder. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: trust model is extended so that all code (remote or local, signed or not) runs under a security policy that po tentially grants different permissions to different programs, and these sets of permissions may or may not overlap, as shown in Figure 1. 1 The concept of a protection domain <ref> [9] </ref> is a vital component of the new architecture in that it is the basis for making access control decisions. Moreover, its design and implementation must be efficient to meet the stringent standard required by certain applications. <p> We answer these questions in the rest of this paper. 3 Protection Domain According to the classical definition of a protection domain <ref> [9] </ref>, a domain is scoped by the set of objects that are currently directly accessible by a principal, where a principal is an entity in the computer system to which authorizations (and as a result, accountability) are granted.
Reference: [10] <author> M.D. Schroeder. </author> <title> Cooperation of Mutually Suspicious Subsystems in a Computer Utility. </title> <type> Ph.D. dissertation, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> September </month> <year> 1972. </year>
Reference-contexts: Significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics <ref> [10, 8] </ref>, and right amplification in Hydra [6, 12]. One feature that is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [11] <author> M. I. Seltzer, Y. Endo, C. Small, and K. A. Smith. </author> <title> Dealing with Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 213-227, </pages> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year> <note> Published as ACM Operating Systems Review, 30, special winter issue, </note> <year> 1996. </year>
Reference-contexts: Another character of Java is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 11] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 7 Conclusion This paper describes in detail the design and implementation of the concept of protection domains, which is an important foundation of the new security architecture delivered in the upcoming
Reference: [12] <author> W.A. Wulf, R. Levin, and S.P. Harbison. </author> <title> HYDRA/C.mmp An Experimental Computer System. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: Significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics [10, 8], and right amplification in Hydra <ref> [6, 12] </ref>. One feature that is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
References-found: 12

