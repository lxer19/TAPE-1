URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/papers/composition_final.ps.gz
Refering-URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/papers.html
Root-URL: 
Email: Email: fine@sctc.com  
Title: A Framework for Composition  
Author: Todd Fine 
Address: 2675 Long Lake Road, Roseville, Minnesota 55113-2536  
Affiliation: Secure Computing Corporation  
Abstract: Analysis of complex systems requires the use of a divide-and-conquer approach to specification and verification. Existing theories for specification composition provide a starting point for a framework for such an approach. This paper describes a new framework that is a hybrid of two existing frameworks, explains the advantages of the new framework, and illustrates its use through a simple example. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> Conjoining specifications. </title> <type> Technical Report 118, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction In this paper, we describe a variation of Lamport's TLA specification language <ref> [1, 2] </ref> and provide a framework for composition of specifications based on the work of Abadi and Lamport [1, 2] and Shankar [6]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. <p> 1 Introduction In this paper, we describe a variation of Lamport's TLA specification language <ref> [1, 2] </ref> and provide a framework for composition of specifications based on the work of Abadi and Lamport [1, 2] and Shankar [6]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. Viewed from the other direction, the composition framework allows the specification and verification of a complex system to be decomposed into the specification and verification of simpler components. <p> Since system and component are interchangeable from the standpoint of the framework, we often use the terms interchangeably in the following. 2 Some variants of TLA, such as that in reference <ref> [1] </ref>, ignore agents and define behaviors in terms of only states. 3 Components Abadi and Lamport usually specify components in the following normal form: Init ^ 2N ^ F where: * Init is a state predicate characterizing the initial state, * N is a disjunction of action predicates characterizing valid transitions <p> A possible enhancement would be to define a function which takes a sequence of components and composes them together using the pairwise composition. This might be more convenient for specification writers. The approach used to accomplish the composition is a hybrid of the approaches advocated by Abadi-Lamport <ref> [1, 2] </ref> and Shankar [6].
Reference: [2] <author> J. de Bakker, W. de Roever, and G. Rosenberg. </author> <title> Stepwise Refinement of Distributed Systems, </title> <publisher> LNCS 430. Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction In this paper, we describe a variation of Lamport's TLA specification language <ref> [1, 2] </ref> and provide a framework for composition of specifications based on the work of Abadi and Lamport [1, 2] and Shankar [6]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. <p> 1 Introduction In this paper, we describe a variation of Lamport's TLA specification language <ref> [1, 2] </ref> and provide a framework for composition of specifications based on the work of Abadi and Lamport [1, 2] and Shankar [6]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. Viewed from the other direction, the composition framework allows the specification and verification of a complex system to be decomposed into the specification and verification of simpler components. <p> A possible enhancement would be to define a function which takes a sequence of components and composes them together using the pairwise composition. This might be more convenient for specification writers. The approach used to accomplish the composition is a hybrid of the approaches advocated by Abadi-Lamport <ref> [1, 2] </ref> and Shankar [6].
Reference: [3] <author> T. Fine and S. E. Minear. </author> <title> Assuring Distributed Trusted Mach. </title> <booktitle> In Proceedings IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <pages> pages 206-218, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The components in the example are: * A kernel which provides services to client processes. * A security server which performs policy computa tions as requested by the kernel. The example presented here is a much simplified version of the DTOS security architecture described in references [4] and <ref> [3] </ref>. The kernel is policy neutral in that it simply enforces policy decisions made by the security server. The kernel attaches labels called security identifiers (SIDs) to processes and system resources. <p> Upon receiving a request from the kernel, the security server would first determine the levels associated with the provided SIDs, next perform the computation, and finally return the access vector. Another example of the type of policy that might be defined in the security server is type enforcement <ref> [3] </ref>. In this policy, a process SID is mapped to 5 The DTOS kernel does not actually provide files as a resource. Instead, files are provided by an operating system personality that runs on top of DTOS.
Reference: [4] <author> S. E. Minear. </author> <title> Providing Policy Control Over Object Operations in a Mach Based System. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 141-156, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The components in the example are: * A kernel which provides services to client processes. * A security server which performs policy computa tions as requested by the kernel. The example presented here is a much simplified version of the DTOS security architecture described in references <ref> [4] </ref> and [3]. The kernel is policy neutral in that it simply enforces policy decisions made by the security server. The kernel attaches labels called security identifiers (SIDs) to processes and system resources.
Reference: [5] <author> NCSC. </author> <title> Trusted Computer Systems Evaluation Criteria. Standard, </title> <institution> DOD 5200.28-STD, US National Computer Security Center, Fort George G. Meade, Maryland 20755-6000, </institution> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: The overall system policy is that the kernel only provides services that are permitted by the policy defined in the security server. One example of the type of policy that might be defined in the security server is a Multilevel Security (MLS) policy <ref> [5] </ref>. In this policy, sensitivity levels (such as UNCLASSIFIED, SECRET, and TOP SECRET) are associated with processes and resources and policy decisions are made based on the levels. For example, a process with level TOP SECRET is permitted to read (but not write) a file with level UNCLASSIFIED.
Reference: [6] <author> N. Shankar. </author> <title> A lazy approach to compositional verification. </title> <type> Technical Report TSL-93-08, </type> <institution> SRI International, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction In this paper, we describe a variation of Lamport's TLA specification language [1, 2] and provide a framework for composition of specifications based on the work of Abadi and Lamport [1, 2] and Shankar <ref> [6] </ref>. Composition is a technique for constructing more complex specifications by building upon simpler specifications. Viewed from the other direction, the composition framework allows the specification and verification of a complex system to be decomposed into the specification and verification of simpler components. <p> The set of transitions by other agents that the specification of the component allows places restrictions on the processing performed by other components. In other words, these transitions define the component's environmental assumptions. Following the approach in <ref> [6] </ref>, we use guar to denote the transitions in N that are caused by the component's agents and rely to denote the transitions in N that are caused by environment agents. <p> This might be more convenient for specification writers. The approach used to accomplish the composition is a hybrid of the approaches advocated by Abadi-Lamport [1, 2] and Shankar <ref> [6] </ref>.
References-found: 6

