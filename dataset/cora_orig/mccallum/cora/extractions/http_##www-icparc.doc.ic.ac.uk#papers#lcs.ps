URL: http://www-icparc.doc.ic.ac.uk/papers/lcs.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: vl@doc.ic.ac.uk  ebr@doc.ic.ac.uk  
Title: Least Commitment An optimal planning strategy  
Author: Vassilis Liatsos Barry Richards 
Address: London, SW7 2AZ  London, SW7 2AZ  
Affiliation: IC-Parc, Imperial College  IC-Parc, Imperial College  
Abstract: We develop an extension of Least Commitment Search (LCS), which represents a new strategy for recovering from failure in planning. The particular type of failure addressed here is that which requires extra actions to be introduced into the plan. The strategy is explored in the context of an optimisation problem, that of generating plans of minimal length when given a single resource. There are two main results in this paper, both of which are established empirically. The first is that LCS is effective as a strategy for introducing new actions. The second is that it is a limited strategy. When the planner is required to introduce a substantial number of new actions, i.e. when search becomes relatively deep, LCS is not in itself an adequate strategy. The challenge which emerges is one which planners have largely ignored. Is there an effective general strategy for dealing with the task of introducing extra actions? This is a question not only for planners which seek to optimise on certain dimensions; it is also a problem for planners which seek only to establish feasibility.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James F. Allen and J. A. Koomen. </author> <title> Planning Using a Temporal World Model. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, IJCAI-83, </booktitle> <pages> pages 741-747, </pages> <address> Karlsruhe, Germany, </address> <year> 1983. </year>
Reference-contexts: In section 5 we present related work to least commitment search and finally, we conclude in section 6 with an assessment of the experimental results and future direction of research. 2 The parcPLAN Architecture parcPLAN falls within the general planning paradigm of Allen & Koomen <ref> [1] </ref>. It is a temporal planner based on interval reasoning and designed to support parallel action execution. Unlike [1], however, parcPLAN adopts a point-based representation of intervals. It also extends the paradigm by integrating temporal and resource reasoning. <p> we conclude in section 6 with an assessment of the experimental results and future direction of research. 2 The parcPLAN Architecture parcPLAN falls within the general planning paradigm of Allen & Koomen <ref> [1] </ref>. It is a temporal planner based on interval reasoning and designed to support parallel action execution. Unlike [1], however, parcPLAN adopts a point-based representation of intervals. It also extends the paradigm by integrating temporal and resource reasoning. <p> However, when parallel execution of actions are considered as in the case of parcPLAN- this type of action can be effective in obtaining an optimal solution. 3 The term "collapsing" originates from <ref> [1] </ref>. temporal constraints. The collapsing phase is handled as a constraint satisfaction problem where each goal is associated with a finite domain variable whose domain represents the potential collapsers for that goal. Choosing a value for a variable collapses the associated goal with a particular potential collapser.
Reference: [2] <author> Avrim L. Blum and Merrick L. Furst. </author> <title> Fast Planning Through Planning Graph Analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 90 </volume> <pages> 281-300, </pages> <year> 1997. </year>
Reference-contexts: Our results would appear to challenge this conjecture. We use least commitment to handle the introduction of new actions. This allows us to solve problems which require a larger number of actions than the number cited in [8]. Another planning system which generates optimal plans is GraphPlan <ref> [2] </ref>. GraphPlan follows a "construct then search" approach which resembles LCS. However, instead of introducing one extra uninstantiated action to recover from failure as LCS does, GraphPlan introduces an extra time point where every possible instantiation of every possible action can take place.
Reference: [3] <author> Ho Jin Choi. </author> <title> Controlling Temporal Constraints in Planning. </title> <type> PhD thesis, </type> <institution> Imperial College, University of London, </institution> <year> 1995. </year>
Reference-contexts: In general, however, collapsing is an intractable task since it may be necessary to solve an exponential number of temporal constraint networks <ref> [3] </ref>.
Reference: [4] <author> ECRC. </author> <title> ECL i PS e User Manual. </title> <booktitle> European Computer Industry Research Centre, </booktitle> <address> Munich, 3.5.2 edition, </address> <year> 1996. </year>
Reference-contexts: Once again the strategy can be improved by removing the symmetries. 4.3 Experimental Results We have implemented both IDS and LCS in parcPLAN. This has been realised in the ECL i PS e constraint logic programming environment <ref> [4] </ref>. In this section we report the results of comparing the two strategies on blocks world problems with limited table positions. We used 4 sets of problems, each containing 100 problems (see table 1). All the problems involve 10 blocks, and only one arm.
Reference: [5] <author> A. El-Kholy and B. Richards. </author> <title> Temporal and Resource Reasoning in Planning: the parcPLAN approach. </title> <booktitle> In Proceedings of the 12th European Conference on Artificial Intelligence, ECAI-96, </booktitle> <pages> pages 614-618, </pages> <address> Budapest, Hungary, 1996. </address> <publisher> John Wiley and Sons, Ltd. </publisher>
Reference-contexts: We show empirically that LCS can be an effective strategy, although we also show that it has certain limits. Least commitment search is explored in the context of a new optimisation algorithm developed by El-Kholy & Richards <ref> [5] </ref>. This algorithm is designed to support the efficient search for plans that minimise plan length and resource usage. The algorithm, together with least commitment search, have been implemented in the parcPLAN architecture. There least commitment is used to handle action variables, ordering of conflicting properties and resource reasoning. <p> To solve this problem (the resource feasibility problem) effectively requires special techniques to integrate temporal and resource reasoning efficiently. One such technique is given in El-Kholy & Richards <ref> [5] </ref>, which uses Boolean meta-variables to support the necessary integrated reasoning. Example To illustrate the planning process, we show how the problem given in figure 1 is solved in parcPLAN. <p> This occurs if only one arm is available. Failure will be detected quickly using the method proposed in El-Kholy & Richards <ref> [5] </ref>. At this point the planner will backtrack to the collapsing step. 4 Controlling Search In this section we describe and compare two different strategies for recovering from failure where new actions must be introduced.
Reference: [6] <author> Amin El-Kholy. </author> <title> Resource Feasibility in Planning. </title> <type> PhD thesis, </type> <institution> Imperial College, University of London, </institution> <year> 1996. </year>
Reference-contexts: Unlike [1], however, parcPLAN adopts a point-based representation of intervals. It also extends the paradigm by integrating temporal and resource reasoning. This is handled in a module of the system called parcTREC which is described in more detail in <ref> [6] </ref>. 2.1 Representation In parcPLAN we represent properties and actions by terms indexed to time intervals. For example, the expression Q@[start,end) says that the property (or action) Q holds (or occurs) over the time interval [start,end).
Reference: [7] <author> N. Gupta and D. S. Nau. </author> <title> Complexity Results for Blocks-World Planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, AAAI-91, </booktitle> <pages> pages 629-633, </pages> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: a moving block has to be clear throughout the action and that 1 As a result of that the optimal plan length for n blocks in this domain can be more than 2n 2 which is the worst case of the optimal plan length in the traditional blocks world (see <ref> [7] </ref>). 2 Note that in traditional approaches there is a non-codesignation constraint From 6= To, which prevents the duration of the action should be at least 3 time units. All of these constraints are posted when the action is introduced.
Reference: [8] <author> D. Joslin and M. E. Pollack. </author> <booktitle> Is "early commitment" in plan generation ever a good idea? In Proceedings of the 13th National Conference on Artificial Intelligence, AAAI-96, </booktitle> <pages> pages 1188-1193, </pages> <address> Portland, Oregon, </address> <year> 1996. </year>
Reference-contexts: Note further that LCS (s) takes less than 60 seconds on average to solve problems involving up to 5 extra actions. 9 Experiments were run on a Sun Ultra Enterprise 2. 5 Related Work Joslin & Pollack's LC-Descartes <ref> [8] </ref> uses a similar strategy to LCS for introducing new actions to the plan after failure. LC-Descartes uses a simpler representation than parcPLAN. Based on the results in [8], Joslin & Pollack conjecture that least commitment should be used at all points except those at which the planner adds new actions. <p> up to 5 extra actions. 9 Experiments were run on a Sun Ultra Enterprise 2. 5 Related Work Joslin & Pollack's LC-Descartes <ref> [8] </ref> uses a similar strategy to LCS for introducing new actions to the plan after failure. LC-Descartes uses a simpler representation than parcPLAN. Based on the results in [8], Joslin & Pollack conjecture that least commitment should be used at all points except those at which the planner adds new actions. Our results would appear to challenge this conjecture. We use least commitment to handle the introduction of new actions. <p> Our results would appear to challenge this conjecture. We use least commitment to handle the introduction of new actions. This allows us to solve problems which require a larger number of actions than the number cited in <ref> [8] </ref>. Another planning system which generates optimal plans is GraphPlan [2]. GraphPlan follows a "construct then search" approach which resembles LCS.
Reference: [9] <author> R.E. Korf. </author> <title> Depth-first iterative-deepening: An optimal admissible tree search. </title> <journal> Artificial Intelligence, </journal> <volume> 27 </volume> <pages> 97-109, </pages> <year> 1985. </year>
Reference-contexts: Both search strategies are complete (in the sense that there is no risk of missing solutions) and generate minimal length plans in the given blocks world domain. The first one, iterative deepening search (IDS), is based on depth first iterative deepening which is described in <ref> [9] </ref>; and the second, least commitment search (LCS), is based on the least-commitment principle. One may wonder why we have chosen IDS since it is likely to be inefficient and unscalable.
Reference: [10] <author> J. M. Lever and B. Richards. parcPLAN: </author> <title> a Planning Architecture with Parallel Actions, Resources and Constraints. </title> <booktitle> In Proceedings of the 9th International Symposium on Methodologies for Intelligent Systems, </booktitle> <pages> pages 213-222, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Many planning applications seek to optimise on two dimensions, (1) the number of actions necessary to achieve the goal state and (2) on the number of resources (or amount of time) required to execute the actions. Both dimensions are addressed in parcPLAN <ref> [10] </ref>, which is a temporal planning system under development in IC-Parc. In this paper we consider a particular type of optimisation problem, viz. that of generating plans of minimal length when given just one resource.
References-found: 10

