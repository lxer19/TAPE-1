URL: http://www-cad.eecs.berkeley.edu/~ellen/Pubs/rem_latch.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~ellen/Html/pub.html
Root-URL: 
Title: Latch Optimization in Circuits Generated from High-level Descriptions  
Author: Ellen M. Sentovich, Horia Toma, Gerard Berry N 
Note: THE ME 1  
Date: Juillet 1996  
Affiliation: INSTITUT NATIONAL DE RECHERCHE EN INFORMATIQUE ET EN AUTOMATIQUE  
Abstract-found: 0
Intro-found: 1
Reference: [BCM90] <author> C. Berthet, O. Coudert, and J.C. Madre. </author> <title> New Ideas on Symbolic Manipulations of Finite State Machines. </title> <booktitle> In Proc of ICCAD, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Condition: A single latch l i can be replaced by a combinational function of the others if R l i R l i = 0 (1) This condition was originally given in <ref> [BCM90] </ref>.
Reference: [BT93] <author> G. Berry and H. Touati. </author> <title> Optimized Controller Synthesis Using Esterel. </title> <booktitle> In Proc of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: State assignment from high-level languages chooses an encoding according to the delay state <p>- ments in the specitcation, relying on logic synthesis to later optimize the gate-level implementa <p>- tion <ref> [BT93] </ref>. Explicit state assignment is impractical for large designs, and despite sophisticated techniques for determining an optimal assignment, it can produce results far worse than hand-coded implementations. Furthermore, explicit state assignment programs have not targeted greater-than-minimum-latch implementations. With current technology (e.g. <p> State assignment from high-level languages is typically done by a statement-by-statement translation, which results in a natural insertion of registers at the delay statements in the description. This is a good starting point for logic synthesis, but results in far more latches than are required to implement the design <ref> [BT93] </ref>. Even if the number of latches is not important for the tnal implementation, too many can drastically reduce the eciency of many synthesis and optimization algorithms (e.g., symbolic state traversal). After state assignment, the latch/logic tradeo can be explored via logic optimization.
Reference: [CHM + 94] <author> H. Cho, G. D. Hachtel, E. Macii, M. Poncino, and F. Somenzi. </author> <title> A Structural Approach to State Space Decomposition for Approximate Reachability Analysis. </title> <booktitle> In Proc of the ICCD, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: It is very important to note that the transformation is proven to preserve behavior on the reachable state set and remains correct for every over-approximation of the reachable state set. Therefore it could be used in conjunction with ecient techniques for approximate reachability analysis <ref> [CHM + 94] </ref>. 2.2 Circuit Transformation The transformation is illustrated in Figure 1. The original FSM is M and the transformed one is M 0 . We call L = fl k j 1 k ng the set of latches of M .
Reference: [CMT93] <author> O. Coudert, J.-C. Madre, and H. Touati, </author> <month> December </month> <year> 1993. </year> <title> TiGeR Version 1.0 User Guide, </title> <institution> Digital Paris Research Lab. </institution>
Reference-contexts: These two dierent metrics imply the need for dierent strategies combining latch removal and logic optimization. 4.1 Implementation We implemented our program rem_latch using the TiGeR library <ref> [CMT93] </ref> (which contains a BDD package and the reachable states computation) to implement the latch removal algorithms, and the Berkeley SIS environment [SSL + 92] to perform combinational logic optimization.
Reference: [DBSV85] <author> G. DeMicheli, R.K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Optimal State Assignment for Finite State Machines. </title> <journal> IEEE Trans. on CAD, </journal> <volume> 4(3):269285, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: To date, primarily two approaches have been used: Explicit state assignment begins from an explicit state transition graph and chooses a minimum <p>- latch encoding while minimizing the size of the combinational logic <ref> [DBSV85, VSV90, Har61] </ref>. State assignment from high-level languages chooses an encoding according to the delay state <p>- ments in the specitcation, relying on logic synthesis to later optimize the gate-level implementa <p>- tion [BT93].
Reference: [Har61] <author> J. Hartmanis. </author> <title> On the State Assignment Problem for Sequential Machines. </title> <journal> IRE Trans on Electronic Computers, </journal> <volume> EC-10(2):157165, </volume> <month> June </month> <year> 1961. </year>
Reference-contexts: To date, primarily two approaches have been used: Explicit state assignment begins from an explicit state transition graph and chooses a minimum <p>- latch encoding while minimizing the size of the combinational logic <ref> [DBSV85, VSV90, Har61] </ref>. State assignment from high-level languages chooses an encoding according to the delay state <p>- ments in the specitcation, relying on logic synthesis to later optimize the gate-level implementa <p>- tion [BT93].
Reference: [LN91] <author> B. Lin and A. Richard Newton. </author> <title> Exact Redundant State Registers Removal Based on Binary Decision Diagrams. </title> <booktitle> In Proc of the International Workshop on Logic Synthesis, </booktitle> <month> mai </month> <year> 1991. </year>
Reference-contexts: Equivalent state variable identitcation and removal has been done as part of several works (e.g., [SSM + 92, vEJ95, QCC + 95]). With current BDD and symbolic traversal techniques, this also is a simple operation. A more robust algorithm for single latch removal was published in <ref> [LN91] </ref>. It is directly relevant to our single latch removal algorithm described in Section 3.1 and is treated more thoroughly in that section. <p> In general, a subset of the latches will each satisfy this condition. Once a single latch is removed, the remaining subset of removable latches may change. We apply heuristic techniques, as described in the algorithms below, to determine which latches to remove. In <ref> [LN91] </ref>, an exact branch-and-bound algorithm is used to determine the maximum number of single latches that can be removed. <p> We use the branching heuristic of <ref> [LN91] </ref>, so compute_cost sets C l i = jRj abs (jR l i j jR l i j), where jRj is the onset size of the BDD R. The absolute value term is highest for those latches with the most potential for distinguishing states. <p> This technique can increase the number of levels of the circuit, so it must be used with caution. 4.2 Results The trst set test is the ISCAS-89 sequential test benchmarks, which we used for comparison with the exact single latch algorithm in <ref> [LN91] </ref>. The results are shown in Table 1. Only for s444 are the results of the exact algorithm better. A run-time comparison would not be fair as we do not have the implementation of the exact algorithm by the author. <p> A run-time comparison would not be fair as we do not have the implementation of the exact algorithm by the author. Our algorithm ran in a few seconds for all the ISCAS benchmarks, which compares favorably to the results in <ref> [LN91] </ref>. Our implementation of the exact algorithm ran more than an hour for all but the smallest of the Esterel examples. The other benchmarks we used are all synthesized by the Esterel v5 compiler.
Reference: [MSBSV91] <author> S. Malik, E.M. Sentovich, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimizing Sequential Networks with Combinational Techniques. </title> <journal> IEEE Trans on CAD, </journal> <volume> CAD-10(1):7484, </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: Standard techniques, e.g., extracting common factors, function simplitcation, and retiming, may result in some latch/logic rearrangement, but largely the state assignment is txed and optimization only improves the implementation for the given assignment. The goal of retiming and resynthesis <ref> [MSBSV91] </ref> was to jointly optimize latch positions and combinational logic, but the optimization potential was too limited by the initial state assignment. RR n2943 4 Ellen M. Sentovich, Horia Toma, Grard Berry Removal of redundant latches has been done ubiquitously.
Reference: [QCC + 95] <author> S. Quer, G. Cabodi, P. Camurati, L. Lavagno, E.M. Sentovich, and R.K. Brayton. </author> <title> Incremental FSM Re-Encoding for Simplifying Veritcation by Symbolic Traversal. </title> <booktitle> In Proc of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: We do not consider simple redundant latch removal here (latches that do not fanout, latches that are constant) as the results are straightforward. Equivalent state variable identitcation and removal has been done as part of several works (e.g., <ref> [SSM + 92, vEJ95, QCC + 95] </ref>). With current BDD and symbolic traversal techniques, this also is a simple operation. A more robust algorithm for single latch removal was published in [LN91]. <p> It is exact (precisely for replacing a single latch with logic), and far too expensive when the number of latches exceeds the minimum (log 2 (reachable states)) even for small circuits. In <ref> [QCC + 95] </ref>, a more general technique for re-encoding tnite state machines was given. While some of the work there is relevant to ours (e.g., controlling the size of the encoding/decoding logic), the target was quite dierent.
Reference: [SBT96] <author> T. Shiple, G. Berry, and H. Touati. </author> <title> Constructive Analysis of Cyclic Circuits. </title> <booktitle> In ED-TC, </booktitle> <pages> pages 328333, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The designs generated directly from the Esterel compiler have a manageable initial implementation in terms of encoding and logic, but far too many redundant registers. The other case arises from examples that initially have combinational cycles. If the design is causal, the causality analysis program <ref> [SBT96] </ref> generates an initial acyclic implementation directly from the BDDs and is thus huge in terms of logic (e.g., trappes). In Table 2, the initial circuit is compared with the minimum-latch rem_latch result optimized with COMBOPT. We obtained close to the minimum number of latches on most examples.
Reference: [SSL + 92] <author> E.M. Sentovich, K.J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P.R. Stephan, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <type> Technical Report Memorandum No. </type> <institution> UCB/ERL M92/41, University of California Berkeley, </institution> <year> 1992. </year>
Reference-contexts: These two dierent metrics imply the need for dierent strategies combining latch removal and logic optimization. 4.1 Implementation We implemented our program rem_latch using the TiGeR library [CMT93] (which contains a BDD package and the reachable states computation) to implement the latch removal algorithms, and the Berkeley SIS environment <ref> [SSL + 92] </ref> to perform combinational logic optimization. We used mainly two scripts for logic optimization in SIS: a fast but less robust one (COMBOPT), and a more expensive one which includes, e.g., full_simplify (BLIFOPT).
Reference: [SSM + 92] <author> E.M. Sentovich, K.J. Singh, C. Moon, H. Savoj, R.K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Sequential Circuit Design Using Synthesis and Optimization. </title> <booktitle> In Proc of the ICCD, </booktitle> <pages> pages 328333, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: We do not consider simple redundant latch removal here (latches that do not fanout, latches that are constant) as the results are straightforward. Equivalent state variable identitcation and removal has been done as part of several works (e.g., <ref> [SSM + 92, vEJ95, QCC + 95] </ref>). With current BDD and symbolic traversal techniques, this also is a simple operation. A more robust algorithm for single latch removal was published in [LN91].
Reference: [vEJ95] <author> C.A.J. van Eijk and J.A.G. Jess. </author> <title> Detection of Equivalent State Variables in Finite State Machine Veritcation. </title> <booktitle> In Proc of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1995. </year> <note> Appeared in the poster session. </note>
Reference-contexts: We do not consider simple redundant latch removal here (latches that do not fanout, latches that are constant) as the results are straightforward. Equivalent state variable identitcation and removal has been done as part of several works (e.g., <ref> [SSM + 92, vEJ95, QCC + 95] </ref>). With current BDD and symbolic traversal techniques, this also is a simple operation. A more robust algorithm for single latch removal was published in [LN91].

References-found: 13

