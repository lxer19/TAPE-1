URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/psdir/iwls95.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/publications.html
Root-URL: http://www.cs.berkeley.edu
Title: Efficient BDD Algorithms for FSM Synthesis and Verification  
Author: Rajeev K. Ranjan Adnan Aziz Robert K. Brayton Bernard Plessier Carl Pixley 
Address: MD OE321  Berkeley 6501 Wm Cannon Drive West Berkeley, CA 94720 Austin, TX 78735  
Affiliation: Department of Electrical Engg. and Computer Sc. Motorola Inc.,  University of California at  
Abstract: We describe a set of BDD based algorithms for efficient FSM synthesis and verification. We establish that the core computation in both synthesis and verification is forming the image and pre-image of sets of states under the transition relation characterizing the design. To make these steps as efficient as possible, we address BDD variable ordering, use of partitioned transition relations, and use of clustering. We provide an integrated set of algorithms and give references and comparisons with previous work. We report experimental results on a series of seven industrial examples containing from 28 to 172 binary valued latches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aziz, F. Balarin, S.-T. Cheng, R. Hojati, T. Kam, S. C. Krishnan, R. K. Ranjan, T. R. Shiple, V. Singhal, S. Tasiran, H.-Y. Wang, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. HSIS: </author> <title> A BDD-Based Environment for Formal Verification. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 454-459, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: These algorithms are an integral part of a second generation BDD based tool (HSIS-II) for both logic synthesis and formal design verification using either model checking or language containment. The input is an enhanced version of Verilog which is compiled to a hierarchical netlist <ref> [1] </ref>. This is determinized and read into a network of latches and gates.
Reference: [2] <author> A. Aziz, T. R. Shiple, V. Singhal, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Formula-Dependent Equivalence for Compositional CTL Model Checking. </title> <booktitle> In Computer Aided Verification, volume 818 of Lecture Notes in Computer Science, </booktitle> <pages> pages 324-337. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This combinatorial blow up explosion is referred to as state explosion. [9] pioneered the use of Binary Decision Diagrams (BDD's) to implicitly manipulate the product state space in the context of implementation verification. Since then BDD's have been extended to manipulate transition systems in the area of design verification <ref> [2, 5, 7, 10, 12] </ref>. However, the size of BDD's arising in synthesis and verification computations continues to be a bottleneck. <p> Other data structures like GBDDs, XBDDs, ZB-DDs [14] might be useful in these cases. There are also a wide class of heuristics for coping with state explosion that are orthogonal to the approaches we have taken, such as property specific reductions <ref> [2] </ref>, abstractions [12], and conservative approximations to reached state sets [7]. We believe these techniques can be conveniently developed in our framework and then tested and compared on realistic examples. 5 Acknowledgements We would like to thank Thomas R. Shiple and the reviewers for their helpful and constructive comments.
Reference: [3] <author> A. Aziz, S. Tasiran, and R. K. Brayton. </author> <title> BDD Variable Ordering for Interacting Finite State Machines. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <address> San Diago, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Given a logic function, the problem of finding the ordering that leads to a minimum sized BDD for the function is algorithmically intractable. Hence we need to apply some heuristics <ref> [3, 15, 20] </ref>. In the dynamic reordering scheme [19], the BDD package automatically reorders variables to minimize the total number of BDD nodes. Starting with a good heuristic ordering leads to better results. <p> These parameters can be chosen at the prompt and can be changed dynamically in the course of computation. 3.1.1 Results and Discussion In our framework, we provide options for using ordering heuristics given in <ref> [3] </ref> and [20]. For our experiments we chose the heuristic in [3] as it was shown to outperform the other. To demonstrate the effectiveness of dynamic ordering where the initial ordering is either random or based on a good heuristic, we performed some experiments. <p> These parameters can be chosen at the prompt and can be changed dynamically in the course of computation. 3.1.1 Results and Discussion In our framework, we provide options for using ordering heuristics given in <ref> [3] </ref> and [20]. For our experiments we chose the heuristic in [3] as it was shown to outperform the other. To demonstrate the effectiveness of dynamic ordering where the initial ordering is either random or based on a good heuristic, we performed some experiments. <p> This can substantially improve the dynamic reordering performance. 3.2 Use of Clustered Transition Functions As described in x2, the transition relation of the design is a single BDD <ref> [3] </ref> which is the conjunction of the latch transition relations. As the complexity of the design grows, the size of this BDD often explodes. Hence computing the image and pre-image directly as given in definition 2 becomes infeasible for large designs. <p> We make the following observations: setting higher limits obviously leads to fewer clusters but the total number of BDD nodes taken by the clusters becomes bigger. From Equation <ref> [3] </ref>, we observe that the image computation is performed by taking the product of cluster transition relations sequentially (we will refer to them as sequential iterations). The time taken in forming this product is a function of number of clusters as well as the cluster sizes.
Reference: [4] <author> J. R. Burch, E. M. Clarke, and D. E. </author> <title> Long. Representing Circuits More Efficiently in Symbolic Model Checking. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: If there are K clusters C 1 ; C 2 ; C k of latches, then the image computation can be equivalently written as, Img (A (~x)) = (9 ~x; ~ i) [ A (~x) k where T C k = Q In <ref> [4] </ref>, Burch also proposed the use of clustered transition relations to represent circuits more efficiently. Latches were grouped together to form clusters but no automatic way to form clusters was given. <p> This range computation is performed using a balanced binary tree leaves correspond to terms and variables at nodes of the tree that do not appear in the support of nodes elsewhere are existentially quantified. They reported better performance than [10]. Burch <ref> [4] </ref> criticized this approach on the grounds that generalized co-factor may introduce new variables in the supports of the terms, which delays the ability to quantify out variables. Heuristically, this would lead to larger BDD size of the intermediate product terms. <p> Thus the space requirement and the efficiency of image and pre-image computations become dependent on the order in which these clusters are processed. In <ref> [4] </ref>, an ordering scheme of the partitioned transition relation is proposed and is based on the semantics of the underlying model. However, this requires detailed understanding of the semantics of the model and hence is not easily automated.
Reference: [5] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill. </author> <title> Sequential Circuit Verification Using Symbolic Model Checking. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: This combinatorial blow up explosion is referred to as state explosion. [9] pioneered the use of Binary Decision Diagrams (BDD's) to implicitly manipulate the product state space in the context of implementation verification. Since then BDD's have been extended to manipulate transition systems in the area of design verification <ref> [2, 5, 7, 10, 12] </ref>. However, the size of BDD's arising in synthesis and verification computations continues to be a bottleneck.
Reference: [6] <author> G. Cabodi and P. Camurati. </author> <title> Exploiting Cofactoring for Efficient FSM Symbolic Traversal Based on the Transition Relation. </title> <booktitle> In Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pages 299-313, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Currently, a major area of research in logic synthesis is the automatic optimization of sequential hardware, i.e. finite state machines (FSM's) described as a netlist of gates and latches. This includes exploiting sequential don't cares, state minimization, FSM equivalence checking, and sequential ATPG <ref> [6, 15, 17, 20] </ref>. Formal design verification is a term given to the process of mathematically proving that a system possesses a given set of properties. Two popular paradigms for automated verification are language containment and model checking. <p> Hence the ability to set parameters at the prompt is provided; further experiments possibly will lead to a general purpose robust script for novice users. Other BDD based techniques which look promising in 7 clude the exists-cofactor of <ref> [6] </ref>, and the implicitly con-joined invariants of [13]. We plan to experiment with them since it should be relatively easy with the data structure proposed in this paper to implement these methods. We also intend to experiment with the functional and structural approaches for automatic state variable clustering [8].
Reference: [7] <author> H. Cho, G. D. Hachtel, E. Macii, B. Plessier, and F. Somenzi. </author> <title> Algorithms for Approximate FSM Traversal. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 25-30, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This combinatorial blow up explosion is referred to as state explosion. [9] pioneered the use of Binary Decision Diagrams (BDD's) to implicitly manipulate the product state space in the context of implementation verification. Since then BDD's have been extended to manipulate transition systems in the area of design verification <ref> [2, 5, 7, 10, 12] </ref>. However, the size of BDD's arising in synthesis and verification computations continues to be a bottleneck. <p> There are also a wide class of heuristics for coping with state explosion that are orthogonal to the approaches we have taken, such as property specific reductions [2], abstractions [12], and conservative approximations to reached state sets <ref> [7] </ref>. We believe these techniques can be conveniently developed in our framework and then tested and compared on realistic examples. 5 Acknowledgements We would like to thank Thomas R. Shiple and the reviewers for their helpful and constructive comments.
Reference: [8] <author> H. Cho, G. D. Hachtel, E. Macii, M. Poncino, and F. </author> <month> Somenzi. </month>
Reference-contexts: We plan to experiment with them since it should be relatively easy with the data structure proposed in this paper to implement these methods. We also intend to experiment with the functional and structural approaches for automatic state variable clustering <ref> [8] </ref>. Certain limitations of BDD based formal design verification can not be solved by the techniques described in this work. For example, the size of the reached set may be large under any variable ordering. Other data structures like GBDDs, XBDDs, ZB-DDs [14] might be useful in these cases.
References-found: 8

