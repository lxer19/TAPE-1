URL: http://www.win.tue.nl/cs/tt/jaco/papers/termination.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Email: email: jaco@phil.ruu.nl  
Phone: 8, 3584  
Title: Termination Proofs for Higher-order Rewrite Systems  
Author: Jaco van de Pol 
Address: Heidelberglaan  Netherlands  
Affiliation: Department of Philosophy, Utrecht University  CS Utrecht, The  
Abstract: This paper deals with termination proofs for Higher-Order Rewrite Systems (HRSs), introduced in [12]. This formalism combines the computational aspects of term rewriting and simply typed lambda calculus. The result is a proof technique for the termination of a HRS, similar to the proof technique "Termination by interpretation in a well-founded monotone algebra", described in [8, 19]. The resulting technique is as follows: Choose a higher-order algebra with operations for each function symbol in the HRS, equipped with some well-founded partial ordering. The operations must be strictly monotonic in this ordering. This choice generates a model for the HRS. If the choice can be made in such a way that for each rule the interpretation of the left hand side is greater than the interpretation of the right hand side, then the HRS is terminating. At the end of the paper some applications of this technique are given, which show that this technique is natural and can easily be applied. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G.J. Akkerman and J.C.M. Baeten. </author> <title> Term rewriting analysis in process algebra. </title> <type> Technical Report CS-R9130, </type> <institution> Centre for Mathematics and Computer Science, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: We only concentrate on the fragment of Process Algebra with choice (+), sequential composition () and deadlock (ffi) and the data dependent choice () from CRL. The Process Algebra part can be formulated in a first order Term Rewriting System (see for instance <ref> [1] </ref>). The rules for the Sum-operator require higher-order rewrite rules to deal with the bound variables. This reformulation of CRL can be found in [16, p. 33]. There are two base types: fProc; Datag. <p> The function symbols are interpreted in the following way: [[]] = a:b:a fi b + a [[ ]] = f:3 fi f (1) + 1 This is an extension of the interpretation in <ref> [1] </ref> for the Process Algebra part of the system. The type level of all these function symbols is bounded by 2, so it is sufficient to check if the interpretations for them are strictly mon &gt;-monotonic (Lemma 33). The first three functions are clearly strictly monotonic.
Reference: 2. <author> H.P. Barendregt. </author> <title> The Lambda Calculus. Its Syntax and Semantics. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <note> second, revised edition, </note> <year> 1984. </year>
Reference-contexts: Terms that only differ in the renaming of bound variables (known as ff-conversion) are identified. This permits us to stick to the convention that variables never occur free and bound as well in any mathematical context. See <ref> [2, p. 26] </ref> for details about the variable convention. To express the complexity of a term, the notion of type level is defined in ductively on types: Definition 4.
Reference: 3. <editor> M. Bezem and J.F. Groote, editors. </editor> <booktitle> Proceedings of the 1 st International Conference on Typed Lambda Calculi and Applications, TLCA '93, Utrecht, The Netherlands, volume 664 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: 4. <author> V. Breazu-Tannen. </author> <title> Combining algebra and higher-order types. </title> <booktitle> In Proceedings 3 th Annual Symposium on Logic in Computer Science, </booktitle> <publisher> Edinburgh, </publisher> <pages> pages 82-90, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: In [12, 13] the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. A more general setting is given in [18]. Quite other approaches can be found in <ref> [4, 9] </ref>. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and [13] respectively. In [11, ch. II.3] the confluence of regular CRSs is proved. <p> This fi-normal form is denoted by t # fi . Normal forms are always of the form x 1 : x n :(at 1 t m ), where a 2 V [ C. 2.2 Higher-order Rewrite Systems There are various definitions of higher-order rewrite mechanisms in recent literature <ref> [11, 4, 12, 13, 18] </ref>. The definition in this subsection is not meant to add a new formalism to the existing ones. Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible.
Reference: 5. <author> R. de Vrijer. </author> <title> Surjective Pairing and Strong Normalization: Two Themes in Lambda Calculus. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1987. </year>
Reference-contexts: The main result is that such a generalisation is possible. The interpretation of terms can be extended to the interpretation of higher-order terms. The orderings and the notion of strictness can also be generalised. The techniques to achieve this are similar to those used in <ref> [5, 6] </ref>. Moreover, the result that termination proofs can be given with a well-founded monotone algebra in [19] carries over to HRSs with simple conditions on the well-founded ordering. With this technique some natural HRSs are proved to be terminating (see Section 6). <p> This second ordering will be well-founded, thus proving termination of the HRS. In this chapter we will define an interpretation for the terms into the hereditarily monotonic functions. A similar idea occurs already in [6] and <ref> [5] </ref>. One difference is that in this paper two fi-equivalent terms have the same interpretation. This difference stems from the fact that we don't count fi-steps. <p> Furthermore, the interpretation in the model of two fi; j-convertible terms is the same. Together with Lemma 19 this proves that M forms a ! -model. No new technique is used here, the proofs resemble those in <ref> [6, 5, 19] </ref>. Definition 23. Let be a substitution and ff a valuation. Then the composition ff ffi is a new valuation, mapping x 7! [[x ]] ff . The mapping ff ffi is indeed a valuation, because [[x ]] ff is monotonic by Proposi tion 19. <p> Below a simultaneous definition of a new notion of strictness and a new ordering str &gt; is given, in such a way that strictness is stronger than strictly mon &gt;-monotonic and str &gt; is weaker than mon &gt;. Here we diverge from <ref> [6, 5] </ref>. Definition 29. <p> For mon &gt; this is stated in Lemma 22. Lemma 42. If for two fl ! -terms s str &gt; t then x:s str &gt; x:t. 4 See [6, p. 461] and <ref> [5, p. 83] </ref> for comparable functionals Proof. Analogous to the proof of Lemma 22. Instead of arbitrary k and ff, strict k and ff have to be chosen. ut Now we are ready to prove that contexts preserve some order: Proposition 43.
Reference: 6. <author> R.O. </author> <title> Gandy. Proofs of strong normalization. </title> <editor> In J.R. Hindley and J.P. Seldin, editors, </editor> <booktitle> To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 457-477. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: The main result is that such a generalisation is possible. The interpretation of terms can be extended to the interpretation of higher-order terms. The orderings and the notion of strictness can also be generalised. The techniques to achieve this are similar to those used in <ref> [5, 6] </ref>. Moreover, the result that termination proofs can be given with a well-founded monotone algebra in [19] carries over to HRSs with simple conditions on the well-founded ordering. With this technique some natural HRSs are proved to be terminating (see Section 6). <p> This second ordering will be well-founded, thus proving termination of the HRS. In this chapter we will define an interpretation for the terms into the hereditarily monotonic functions. A similar idea occurs already in <ref> [6] </ref> and [5]. One difference is that in this paper two fi-equivalent terms have the same interpretation. This difference stems from the fact that we don't count fi-steps. <p> A type interpretation I is a set of non-empty strict partial orders f (M B ; &gt; B )jB 2 Bg. Starting from a base type interpretation I, we define the interpretation of all types as sets of hereditarily monotonic functionals. A similar idea occurs in <ref> [6, p. 457] </ref>, which shows that terms of the typed -I calculus denote strictly monotonic functions. The sets of hereditarily monotonic functions (monotonic functions for short) are denoted by M ae and depend on an ordering, denoted by mon . <p> Furthermore, the interpretation in the model of two fi; j-convertible terms is the same. Together with Lemma 19 this proves that M forms a ! -model. No new technique is used here, the proofs resemble those in <ref> [6, 5, 19] </ref>. Definition 23. Let be a substitution and ff a valuation. Then the composition ff ffi is a new valuation, mapping x 7! [[x ]] ff . The mapping ff ffi is indeed a valuation, because [[x ]] ff is monotonic by Proposi tion 19. <p> Below a simultaneous definition of a new notion of strictness and a new ordering str &gt; is given, in such a way that strictness is stronger than strictly mon &gt;-monotonic and str &gt; is weaker than mon &gt;. Here we diverge from <ref> [6, 5] </ref>. Definition 29. <p> For mon &gt; this is stated in Lemma 22. Lemma 42. If for two fl ! -terms s str &gt; t then x:s str &gt; x:t. 4 See <ref> [6, p. 461] </ref> and [5, p. 83] for comparable functionals Proof. Analogous to the proof of Lemma 22. Instead of arbitrary k and ff, strict k and ff have to be chosen. ut Now we are ready to prove that contexts preserve some order: Proposition 43.
Reference: 7. <author> J.F. Groote and A. Ponse. </author> <title> The syntax and semantics of CRL. </title> <type> Report CS-R9076, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: In the next section the applicability of this proof method is shown. 6 Applications 6.1 Process Algebra The first application comes from Process Algebra, or better an extension of it: CRL <ref> [7] </ref>. We only concentrate on the fragment of Process Algebra with choice (+), sequential composition () and deadlock (ffi) and the data dependent choice () from CRL. The Process Algebra part can be formulated in a first order Term Rewriting System (see for instance [1]).
Reference: 8. <author> G. Huet and D.C. Oppen. </author> <title> Equations and rewrite rules: A survey. </title> <editor> In R. Book, editor, </editor> <booktitle> Formal Language Theory: Perspectives and Open Problems, </booktitle> <pages> pages 349-405. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: Termination of first-order Term Rewriting is already an undecidable problem. But as the termination of TRSs is an interesting question, many semi-algorithms and characterisations of termination are proposed in the literature. A nice char-acterisation of termination is given in [19]. It builds on the "Increasing Interpretation Method" of <ref> [8, p. 367] </ref>. The function symbols of a TRS R have to be interpreted as strictly monotonic operations in some well-founded algebra. This interpretation is extended to closed terms as a usual algebraic homomorphism. <p> rewrite steps: Term Reduct Context used P + P ! P 2:2P (P + P ) + (P + P ) ! P 2:2 (2P ) 3 The Model of Hereditarily Monotonic Functionals We try to apply the general idea of the proof technique "termination by interpretation" for TRSs in <ref> [8, 19] </ref> to HRSs. The outline of this technique is as follows: The function symbols are interpreted by operations of the same arity in an algebra, equipped with a well-founded partial order. This interpretation is extended to the terms of the TRS in an algebraic way.
Reference: 9. <author> J.P. Jouannaud and M. Okada. </author> <title> A computation model for executable higher-order algebraic specification languages. </title> <booktitle> In Proceedings 6 th Annual Symposium on Logic in Computer Science, </booktitle> <address> Amsterdam, The Netherlands, </address> <pages> pages 350-361, </pages> <year> 1991. </year>
Reference-contexts: In [12, 13] the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. A more general setting is given in [18]. Quite other approaches can be found in <ref> [4, 9] </ref>. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and [13] respectively. In [11, ch. II.3] the confluence of regular CRSs is proved. <p> II.6.2] a sufficient condition for termination of regular CRSs is given. With this condition, stated in terms of redexes and descendants, a termination proof for CRSs remains a syntactical matter. Other work on this line is done in [10]. We also refer to <ref> [9] </ref> where a recursion scheme for higher-order rules is given that guarantees termination. Termination of first-order Term Rewriting is already an undecidable problem. But as the termination of TRSs is an interesting question, many semi-algorithms and characterisations of termination are proposed in the literature.
Reference: 10. <author> Z. Khasidashvili. </author> <title> Perpetual reductions and strong normalization in orthogonal term rewriting systems. </title> <type> Technical Report CS-R9345, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: As far as we know, only in [11, ch. II.6.2] a sufficient condition for termination of regular CRSs is given. With this condition, stated in terms of redexes and descendants, a termination proof for CRSs remains a syntactical matter. Other work on this line is done in <ref> [10] </ref>. We also refer to [9] where a recursion scheme for higher-order rules is given that guarantees termination. Termination of first-order Term Rewriting is already an undecidable problem. But as the termination of TRSs is an interesting question, many semi-algorithms and characterisations of termination are proposed in the literature.
Reference: 11. <author> J.W. Klop. </author> <title> Combinatory Reduction Systems, volume 127 of Mathematical Centre Tracts. </title> <publisher> Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: This development is mirrored in the research on Term Rewriting Systems (TRS). There are different formalisms dealing with the combination of term rewriting and an abstraction mechanism. In <ref> [11] </ref> the concept of Combinatory Reduction Systems (CRS) was introduced. These systems essentially are TRSs with bound variables. In [12, 13] the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. <p> A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and [13] respectively. In <ref> [11, ch. II.3] </ref> the confluence of regular CRSs is proved. However, the question of termination of the higher-order frameworks seems hardly to have been explored. As far as we know, only in [11, ch. II.6.2] a sufficient condition for termination of regular CRSs is given. <p> In [11, ch. II.3] the confluence of regular CRSs is proved. However, the question of termination of the higher-order frameworks seems hardly to have been explored. As far as we know, only in <ref> [11, ch. II.6.2] </ref> a sufficient condition for termination of regular CRSs is given. With this condition, stated in terms of redexes and descendants, a termination proof for CRSs remains a syntactical matter. Other work on this line is done in [10]. <p> This fi-normal form is denoted by t # fi . Normal forms are always of the form x 1 : x n :(at 1 t m ), where a 2 V [ C. 2.2 Higher-order Rewrite Systems There are various definitions of higher-order rewrite mechanisms in recent literature <ref> [11, 4, 12, 13, 18] </ref>. The definition in this subsection is not meant to add a new formalism to the existing ones. Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible.
Reference: 12. <author> T. Nipkow. </author> <title> Higher-order critical pairs. </title> <booktitle> In Proceedings 6 th Annual Symposium on Logic in Computer Science, </booktitle> <address> Amsterdam, The Netherlands, </address> <pages> pages 342-349, </pages> <year> 1991. </year>
Reference-contexts: This development is mirrored in the research on Term Rewriting Systems (TRS). There are different formalisms dealing with the combination of term rewriting and an abstraction mechanism. In [11] the concept of Combinatory Reduction Systems (CRS) was introduced. These systems essentially are TRSs with bound variables. In <ref> [12, 13] </ref> the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. <p> A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to <ref> [12] </ref> and [13] respectively. In [11, ch. II.3] the confluence of regular CRSs is proved. However, the question of termination of the higher-order frameworks seems hardly to have been explored. As far as we know, only in [11, ch. II.6.2] a sufficient condition for termination of regular CRSs is given. <p> This semantical approach is more convenient than a syntactical technique. The aim of this paper is to generalise this semantical characterisation of termination for TRSs to one for HRSs. The definition of Higher-order Rewriting we use, is close to [18], so it is an extension of <ref> [12, 13] </ref>. The main result is that such a generalisation is possible. The interpretation of terms can be extended to the interpretation of higher-order terms. The orderings and the notion of strictness can also be generalised. The techniques to achieve this are similar to those used in [5, 6]. <p> This fi-normal form is denoted by t # fi . Normal forms are always of the form x 1 : x n :(at 1 t m ), where a 2 V [ C. 2.2 Higher-order Rewrite Systems There are various definitions of higher-order rewrite mechanisms in recent literature <ref> [11, 4, 12, 13, 18] </ref>. The definition in this subsection is not meant to add a new formalism to the existing ones. Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible. <p> The other step is to show that the ordering is closed under placing terms into a context. This can be proved 1 In the notion of positions and occurrences, a replacement can introduce new bindings. Therefore contexts cannot be seen modulo ff-conversion. See <ref> [12, p. 343] </ref> using the fact that the function symbols are interpreted by strictly monotonic functions, thus preserving the ordering. Now we have for any substitution and context C that C [l ] &gt; C [r ]. <p> So this system of Process Algebra- and Sum rules is terminating. 6.2 Quantifier reasoning In <ref> [12] </ref> some HRSs concerning first order predicate logic are presented as an example. One of them is called mini scoping, pushing quantifiers inwards. The base types are fTerm; Formg. <p> The rules are: case (inl (X); F; G) ! F (X) case (inr (X); F; G) ! G (X) case (U; x:F (inl (x)); x:F (inr (x))) ! F (U ) Note that this example does not fit in the framework of <ref> [12] </ref> (see page 347). Termination for this example is less trivial, because there is a real application in the interpretation of the function symbols.
Reference: 13. <author> T. Nipkow. </author> <title> Orthogonal higher-order rewrite systems are confluent. </title> <booktitle> In Bezem and Groote [3], </booktitle> <pages> pages 306-317. </pages>
Reference-contexts: This development is mirrored in the research on Term Rewriting Systems (TRS). There are different formalisms dealing with the combination of term rewriting and an abstraction mechanism. In [11] the concept of Combinatory Reduction Systems (CRS) was introduced. These systems essentially are TRSs with bound variables. In <ref> [12, 13] </ref> the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. <p> A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and <ref> [13] </ref> respectively. In [11, ch. II.3] the confluence of regular CRSs is proved. However, the question of termination of the higher-order frameworks seems hardly to have been explored. As far as we know, only in [11, ch. II.6.2] a sufficient condition for termination of regular CRSs is given. <p> This semantical approach is more convenient than a syntactical technique. The aim of this paper is to generalise this semantical characterisation of termination for TRSs to one for HRSs. The definition of Higher-order Rewriting we use, is close to [18], so it is an extension of <ref> [12, 13] </ref>. The main result is that such a generalisation is possible. The interpretation of terms can be extended to the interpretation of higher-order terms. The orderings and the notion of strictness can also be generalised. The techniques to achieve this are similar to those used in [5, 6]. <p> This fi-normal form is denoted by t # fi . Normal forms are always of the form x 1 : x n :(at 1 t m ), where a 2 V [ C. 2.2 Higher-order Rewrite Systems There are various definitions of higher-order rewrite mechanisms in recent literature <ref> [11, 4, 12, 13, 18] </ref>. The definition in this subsection is not meant to add a new formalism to the existing ones. Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible. <p> Free variables are not admitted in a rule, for reasons explained below. In the examples, we mostly leave out the -binders in front of the left- and right hand side of the rules for shortness, thus introducing free variables par abuse. The definition of HRSs in <ref> [13, p. 308] </ref> is a special case of Definition 7, because it has some extra conditions on the occurrences of the free variables (which should be abstracted from in the present definition) to guarantee decidability of a rewrite step. This restriction is not needed in the termination result. Definition 8.
Reference: 14. <author> C. Paulin-Mohring. </author> <title> Inductive definitions in the system Coq. Rules and properties. </title> <booktitle> In Bezem and Groote [3], </booktitle> <pages> pages 328-345. </pages>
Reference-contexts: 1 Introduction In the field of automated proof verification one sees a development towards higher-order concepts. In the generic theorem prover Isabelle [15], typed lambda calculus is used as the syntax for the formulae. In other systems, as Coq <ref> [14] </ref>, typed lambda calculus is even used for the logic, using the Curry-Howard iso-morphism which links formulae to types and proofs to terms. This development is mirrored in the research on Term Rewriting Systems (TRS). There are different formalisms dealing with the combination of term rewriting and an abstraction mechanism.
Reference: 15. <author> L. C. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 361-386. </pages> <publisher> Academic Press Limited, </publisher> <address> London, </address> <year> 1990. </year> <note> In: The APIC-series 31. </note>
Reference-contexts: 1 Introduction In the field of automated proof verification one sees a development towards higher-order concepts. In the generic theorem prover Isabelle <ref> [15] </ref>, typed lambda calculus is used as the syntax for the formulae. In other systems, as Coq [14], typed lambda calculus is even used for the logic, using the Curry-Howard iso-morphism which links formulae to types and proofs to terms.
Reference: 16. <author> M.P.A. </author> <title> Sellink. Verifying process algebra proofs in type theory. </title> <type> Technical Report 87, </type> <institution> Logic Group Preprint Series, Utrecht University, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The Process Algebra part can be formulated in a first order Term Rewriting System (see for instance [1]). The rules for the Sum-operator require higher-order rewrite rules to deal with the bound variables. This reformulation of CRL can be found in <ref> [16, p. 33] </ref>. There are two base types: fProc; Datag.
Reference: 17. <author> V. van Oostrom and F. van Raamsdonk. </author> <title> Comparing combinatory reduction systems and higher-order rewrite systems. </title> <type> Technical Report IR-333, </type> <institution> Vrije Universiteit Amsterdam, </institution> <month> August </month> <year> 1993. </year> <note> Appears in this Volume. </note>
Reference-contexts: These systems essentially are TRSs with bound variables. In [12, 13] the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in <ref> [17] </ref>. A more general setting is given in [18]. Quite other approaches can be found in [4, 9]. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and [13] respectively.
Reference: 18. <author> D.A. Wolfram. </author> <title> The Clausal Theory of Types, </title> <booktitle> volume 21 of Cambridge tracts in theoretical computer science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: These systems essentially are TRSs with bound variables. In [12, 13] the formalism of Higher-order Rewrite Systems (HRS) is described, which is very similar to CRSs in essence, but rather different in presentation. A precise comparison is given in [17]. A more general setting is given in <ref> [18] </ref>. Quite other approaches can be found in [4, 9]. Two important issues concerning rewrite systems are termination and confluence. For results about local confluence of HRSs and confluence of orthogonal HRSs the reader is referred to [12] and [13] respectively. In [11, ch. <p> This semantical approach is more convenient than a syntactical technique. The aim of this paper is to generalise this semantical characterisation of termination for TRSs to one for HRSs. The definition of Higher-order Rewriting we use, is close to <ref> [18] </ref>, so it is an extension of [12, 13]. The main result is that such a generalisation is possible. The interpretation of terms can be extended to the interpretation of higher-order terms. The orderings and the notion of strictness can also be generalised. <p> This fi-normal form is denoted by t # fi . Normal forms are always of the form x 1 : x n :(at 1 t m ), where a 2 V [ C. 2.2 Higher-order Rewrite Systems There are various definitions of higher-order rewrite mechanisms in recent literature <ref> [11, 4, 12, 13, 18] </ref>. The definition in this subsection is not meant to add a new formalism to the existing ones. Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible. <p> Most conditions on the rules are dropped, because they are not necessary in the proof. The rewrite relation is as liberal as possible. Of course, the main result applies to formalisms admitting fewer rules and fewer rewrite steps. The chosen formalism is much like the formalism in <ref> [18, ch. 4.1] </ref>, but we made some choices. A Higher-order Rewrite System is given by a signature and a set of rules: Definition 7. A Higher-order Rewrite System R is a tuple (F ; R), where F is a signature and R is a set of rules in this signature. <p> Rules (l; r) are denoted by l ! r. In this rule, l is called the left hand side and r the right hand side. The definition of a rule is the same as in <ref> [18, p. 46] </ref>, except that we don't use j-long forms. Free variables are not admitted in a rule, for reasons explained below. <p> Only s and t in fi-normal form will be considered. Definition 9 differs in three aspects from the definition of the higher-order rewrite relation in <ref> [18, p. 46] </ref>. Firstly, j-long forms are not required, but furthermore the notion of positions is circumvented. In this way the variable convention can be upheld 1 . To be able to rewrite subterms with bound variables the rules are required to be closed. <p> Let l ! r be a rule of HRS R. If 2:a were a context, we would have the rewrite step a = ((2:a)l) # fi ! R ((2:a)r) # fi = a. The same example can be given if 2:(y:a)2 were a context. The last difference with <ref> [18] </ref> is that more occurrences of 2 in a context are admitted. This is another advantage of seeing contexts as ordinary -terms and is close to the pragmatics of Leibniz equality.
Reference: 19. <author> H. Zantema. </author> <title> Termination of term rewriting by interpretation. </title> <editor> In M. Rusinowitch and J.L. Remy, editors, </editor> <title> Conditional Term Rewriting Systems, </title> <booktitle> proceedings third international workshop CTRS-92, volume 656 of Lecture Notes in Computer Science, </booktitle> <pages> pages 155-167. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> Full version appeared as report RUU-CS-92-14, </note> <editor> Utrecht University. </editor> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Termination of first-order Term Rewriting is already an undecidable problem. But as the termination of TRSs is an interesting question, many semi-algorithms and characterisations of termination are proposed in the literature. A nice char-acterisation of termination is given in <ref> [19] </ref>. It builds on the "Increasing Interpretation Method" of [8, p. 367]. The function symbols of a TRS R have to be interpreted as strictly monotonic operations in some well-founded algebra. This interpretation is extended to closed terms as a usual algebraic homomorphism. <p> The orderings and the notion of strictness can also be generalised. The techniques to achieve this are similar to those used in [5, 6]. Moreover, the result that termination proofs can be given with a well-founded monotone algebra in <ref> [19] </ref> carries over to HRSs with simple conditions on the well-founded ordering. With this technique some natural HRSs are proved to be terminating (see Section 6). I like to thank Jan Friso Groote, who supplied some crucial ideas. <p> rewrite steps: Term Reduct Context used P + P ! P 2:2P (P + P ) + (P + P ) ! P 2:2 (2P ) 3 The Model of Hereditarily Monotonic Functionals We try to apply the general idea of the proof technique "termination by interpretation" for TRSs in <ref> [8, 19] </ref> to HRSs. The outline of this technique is as follows: The function symbols are interpreted by operations of the same arity in an algebra, equipped with a well-founded partial order. This interpretation is extended to the terms of the TRS in an algebraic way. <p> Furthermore, the interpretation in the model of two fi; j-convertible terms is the same. Together with Lemma 19 this proves that M forms a ! -model. No new technique is used here, the proofs resemble those in <ref> [6, 5, 19] </ref>. Definition 23. Let be a substitution and ff a valuation. Then the composition ff ffi is a new valuation, mapping x 7! [[x ]] ff . The mapping ff ffi is indeed a valuation, because [[x ]] ff is monotonic by Proposi tion 19. <p> We would like that this ordering is also closed under placing a term into a context. The first objection to this is the interpretation of the constants. We have to ensure that this interpretation is order preserving. The proof in <ref> [19] </ref> also uses the condition that the constants have to be interpreted by strictly monotonic operations. Therefore we define the following notion: Definition 28.
References-found: 19

