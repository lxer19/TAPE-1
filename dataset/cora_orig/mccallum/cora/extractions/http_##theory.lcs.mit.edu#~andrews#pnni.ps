URL: http://theory.lcs.mit.edu/~andrews/pnni.ps
Refering-URL: http://theory.lcs.mit.edu/~andrews/
Root-URL: 
Email: (kalyan@cc.gatech.edu)  (andrews@lcs.mit.edu)  (bhatt@bellcore.com)  
Phone: Phone: (404) 894-9390 Fax: (404) 894-9442  Phone: (617) 253-7583 Fax: (617) 253-3480  Phone: (201) 829-4319 Fax: (201) 829-2645  
Title: A Virtual PNNI Network Testbed  
Author: Kalyan Perumalla Matthew Andrews Sandeep Bhatt 
Keyword: Modeling methodology: transparent reusable models, parallel simulation  
Note: Corresponding author  
Address: 801 Atlantic Dr. Atlanta, GA 30332-0280  545 Technology .Sq., Rm 338 Cambridge, MA 02139  445 South St. Morristown, NJ 07960  
Affiliation: College of Computing Georgia Inst. of Technology  Lab. for Computer Science M.I.T.  DIMACS, Rutgers Univ., and Bell Communications Research  
Abstract: We describe our experiences designing and implementing a virtual PNNI network testbed. The network elements and signaling protocols modeled are consistent with the ATM Forum PNNI draft specifications. The models will serve as a high-fidelity testbed of the transport and network layers for simulation-based studies of the scalability and performance of PNNI protocols. Our models are written in the new network description language TeD which offers two advantages. First, the testbed design is transparent; the model descriptions are developed separately from, and are independent of, the simulation-specific code. Second, TeD is compiled to run with the GTW (Georgia Tech Time Warp) simulation engine which is supported on shared-memory multiprocessors. Therefore, we directly obtain the advantages of parallel simulation. This is the first complex test of the TeD modeling and simulation software system. The feedback from our experiences resulted in some significant improvements to the simulation software. The resulting PNNI models are truly transparent and the performance of the simulations is encouraging. We give results from preliminary simulations of call admission, set-up and tear-down in sample PNNI networks consisting of two hundred nodes and over three hundred edges. The time to simulate ten thousand call requests decreases significantly with the number of processors; we observe a speedup factor of 5.3 when 8 processors are employed compared to a single processor. Our initial implementations demonstrate the advantages of TeD for parallel simulations of large-scale networks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ATM Forum, </author> <title> "PNNI Draft Specification," ATM Forum 94-0471R12, ATM Forum, </title> <booktitle> 1994. </booktitle> <pages> 12 </pages>
Reference-contexts: 1 Introduction The Private Network-Network Interface (PNNI) protocol suite <ref> [1] </ref> is an international draft standard proposed by the ATM Forum. The protocol defines a single interface for use between the switches in a private network of ATM (asynchronous transfer mode) switches, as well as between groups of private ATM networks. <p> This separation allows the development of complex models which can exploit state-of-the-art technologies for parallel and distributed simulation. 2.2 PNNI Overview The PNNI protocol is a complex set of ATM routing and signaling mechanisms proposed by the ATM Forum <ref> [1] </ref>. It represents one of the most sophisticated signaling protocols devised to date, aimed at supporting QoS-based routing along with unprecedented levels of scalability. The PNNI specifications are based on a hierarchical addressing scheme which is used for maintaining network topology information and for call routing.
Reference: [2] <author> B. Awerbuch, Y. Azar, and S. Plotkin, </author> <title> "Throughput competitive on-line routing," </title> <booktitle> Pro--ceedings of the 34th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <month> Nov </month> <year> 1993. </year>
Reference: [3] <author> J. Bhasker, </author> <title> "A VHDL Primer," Prentice Hall, 1995 [4] "The Next-Generation ATM Switch: From Testbeds to Production Networks," </title> <address> http://www.cisco.com/warp/public/730/General/ngatm wp.htm </address>
Reference-contexts: Entities, the basic building block for TeD models, are object-oriented encapsulations. These abstractions are in the spirit as the VHDL language <ref> [3] </ref> for hardware description. An entity specifies the abstract interface of a network element or protocol. Entity interfaces are defined in terms of channels through which events flow; mappings among channels interconnect entities. The behavior of an entity is specified by its architecture which consists of processes and components (sub-entities).
Reference: [5] <author> R. Gawlick, A. Kamath, S. Plotkin, and K. Ramakrishnan, </author> <title> "Routing and admission control in general topology networks," </title> <institution> Stanford University Technical Report STAN-CS-TR-95-1548, </institution> <year> 1995. </year>
Reference: [6] <author> K. Perumalla, A. Ogielski, and R. Fujimoto, "MetaTeD: </author> <title> A Meta Language for Modeling Telecommunication Networks," </title> <institution> GIT-CC-96-32, College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: Moreover, we do not wish to be tied to a single simulation engine | we prefer to leverage advances in parallel discrete-event simulation technology without having to rewrite the testbed. Our testbed uses the new network description language TeD <ref> [6, 7] </ref>. TeD is designed with the goals of reuse, transparent modeling, and efficient parallel execution. We have used the C ++ version of the TeD software system that utilizes the GTW (Georgia Tech Time Warp) library as the underlying parallel simulation engine.
Reference: [7] <author> K. Perumalla and R. Fujimoto, </author> <title> "A C ++ Instance of TeD," </title> <institution> GIT-CC-96-33, College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: Moreover, we do not wish to be tied to a single simulation engine | we prefer to leverage advances in parallel discrete-event simulation technology without having to rewrite the testbed. Our testbed uses the new network description language TeD <ref> [6, 7] </ref>. TeD is designed with the goals of reuse, transparent modeling, and efficient parallel execution. We have used the C ++ version of the TeD software system that utilizes the GTW (Georgia Tech Time Warp) library as the underlying parallel simulation engine.
References-found: 6

