URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/online-netflow.ps.Z
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/
Root-URL: http://www.cs.yale.edu
Title: Online Load Balancing and Network Flow  
Author: Steven Phillips Jeffery Westbrook 
Keyword: measures.  
Affiliation: Computer Science Department Stanford University  Computer Science Department Yale University  
Abstract: In this paper we study two problems that can be viewed as on-line games on a dynamic bipartite graph. The first problem is on-line load balancing with preemption. A centralized scheduler must assign tasks to servers, processing online a sequence of task arrivals and departures. Each task is restricted to run on some subset of the servers. The scheduler attempts to keep the load well-balanced. If preemptive reassignments are dissallowed, Azar, Broder and Karlin [3] proved a lower bound of ( n) on the ratio between the maximum load achieved by an on-line algorithm and the optimum off-line maximum load. We show that this ratio can be greatly reduced by an efficient scheduler using only a small amount of rescheduling. We then apply these ideas to network flow. Cheriyan and Hagerup [6] introduced an on-line game on a bipartite graph as a fundamental step in improving algorithms for computing the maximum flow in networks. They described a randomized strategy to play the game. King, Rao and Tarjan [11] studied a modified version of this game, called "node kill", and gave a deterministic strategy. We obtain an improved deterministic algorithm for the node kill game (and hence for maximum flow) in all but the sparsest graphs. The running time achieved is O(mn log m=n n + n 2 log 2+* n), compared to the King, Rao and Tarjan's O(mn + n 2+* ). These problems combine a demand for good competitive ratios with more traditional requirements of implementation efficiency. Our solutions deal with the tradeoffs between these p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon. </author> <title> Generating pseudo-random permutations and maximum flow algorithms. </title> <journal> Inf. Process. Lett., </journal> <year> 1990. </year>
Reference-contexts: Alon <ref> [1] </ref> derandomized this strategy. King et al. extended the game to the form described above and found an improved deterministic strategy. We apply ideas from online load balancing to play the node-kill game well. The ratio algorithm for the node kill game is presented in Section 3.
Reference: [2] <author> Y. Azar, B. Kalyanasundaram, S. Plotkin, K. Pruhs, and O. Waarts. </author> <title> Online load balancing of temporary tasks. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <month> August </month> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: These strong bounds indicate that the performance of an online scheduler may be severely impacted by the lack of information about future tasks. The O ( n) lower bound has recently been shown to be tight <ref> [2] </ref>. We address the problem of the huge lower bound on the achievable competitive ratio by giving the scheduler a little more power. We study load balancing with task preemption.
Reference: [3] <author> Y. Azar, A. Karlin, and A. Broder. </author> <title> On-line load balancing. </title> <booktitle> In Proc. 33nd Symp. of Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <year> 1992. </year>
Reference-contexts: A server may have multiple tasks assigned to it simultaneously. The load on a server is the number of tasks currently assigned to it. Azar, Karlin and Broder <ref> [3] </ref> proposed the dynamic load balancing problem as an abstraction of scheduling problems that can occur in heterogenous networks containing workstations, I/O devices, etc. Servers correspond to communication channels and tasks to requests for communication links between devices. <p> If for each task the eligible subset is all servers, however, then the competitive ratio falls to 2 * for some small constant * [10, 5]. Azar, Broder and Karlin <ref> [3] </ref> studied the dynamic load balancing problem when tasks both arrive and depart, but retained the restriction that tasks cannot be preempted. In this version, the picture is worse: using our definition of Load (A; ), the best possible competitive ratio is n. <p> They also proved a bound of ( p on the competitive ratio of any randomized or deterministic strategy. (Again, under this definition the ratio is 2 * if the eligible subset is all servers.) In both <ref> [3, 4] </ref> the same bounds are shown for an extension where tasks have weights. These strong bounds indicate that the performance of an online scheduler may be severely impacted by the lack of information about future tasks. <p> For comparison, consider two other preemptive scheduling algorithms. First, we may never preempt and use the algorithm of Azar et al. <ref> [3] </ref>. This gives a ratio of fi (n 2=3 ) and optimal computation time linear in the total degree. At the other extreme, we may rebuild an optimum assignment each time a task arrives or departs.
Reference: [4] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The competitiveness of on-line assignments. </title> <booktitle> In Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: Partially supported by NSF Grant 9009753. 1 Azar, Naor and Rom <ref> [4] </ref> studied dynamic load balancing under two restrictions: first, that no tasks ever depart; and second, that tasks cannot be preempted. Azar et al. showed that the greedy strategy has a competitive ratio of log n and that this is optimal within constant factors among both deterministic and randomized algorithms. <p> They also proved a bound of ( p on the competitive ratio of any randomized or deterministic strategy. (Again, under this definition the ratio is 2 * if the eligible subset is all servers.) In both <ref> [3, 4] </ref> the same bounds are shown for an extension where tasks have weights. These strong bounds indicate that the performance of an online scheduler may be severely impacted by the lack of information about future tasks. <p> Consider the set of tasks that are in R j+1 after the reassignment: these tasks were assigned greedily, without any task departures, so by the log n-competitiveness of the greedy algorithm for static load balancing <ref> [4] </ref>, the maximum server load is at most (j + 1)` + OPT log n 13 OPT log n= after the reassignment. 2 Note that our algorithm belongs to a class of algorithms that does no preemptive rescheduling unless tasks depart the system. <p> Hence we cannot hope to achieve a bound on the competitive ratio better than (log n), since the lower bound of Azar et al. <ref> [4] </ref> applies in the case of permanent tasks. This lower bound also applies to randomized algorithms in the same class. 2.2 Running Time of Balance-A If a task arrives with a list of d edges to eligible servers, greedily assigning it takes fi (d) time. <p> The EXACT-LOAD assignment of items in I to columns in C is a greedy assignment, and the following analysis is similar to the proof that greedy algorithm for online assignments is log n-competitive <ref> [4] </ref>. Order the items on columns of C under EXACT-LOAD's assignment according to the time they were assigned. Partition each column into levels of dh W (c)e.
Reference: [5] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proc. 24nd ACM Symp. on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: If for each task the eligible subset is all servers, however, then the competitive ratio falls to 2 * for some small constant * <ref> [10, 5] </ref>. Azar, Broder and Karlin [3] studied the dynamic load balancing problem when tasks both arrive and depart, but retained the restriction that tasks cannot be preempted. In this version, the picture is worse: using our definition of Load (A; ), the best possible competitive ratio is n.
Reference: [6] <author> J. Cheriyan and T. Hagerup. </author> <title> A randomized maximum flow algorithm. </title> <booktitle> In Proceedings IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 118-123, </pages> <year> 1989. </year> <month> 15 </month>
Reference-contexts: (N 2 ; N M ) log N ): Theorem 2 When the node kill game is used for network flows, if at most P (n; m) points are scored in the node kill game, then the number of edge kills is at most O ( p Cheriyan and Hagerup <ref> [6, 7] </ref> first introduced a restricted form of this game, in which player A may not redesignate edges, and described a randomized strategy. Alon [1] derandomized this strategy. King et al. extended the game to the form described above and found an improved deterministic strategy.
Reference: [7] <author> J. Cheriyan, T. Hagerup, and K. Mehlhorn. </author> <title> Can a maximum flow be computed in o(mn) time? In Int. </title> <booktitle> Colloq. on Automata, Languages, and Programming (ICALP 90), </booktitle> <year> 1990. </year>
Reference-contexts: (N 2 ; N M ) log N ): Theorem 2 When the node kill game is used for network flows, if at most P (n; m) points are scored in the node kill game, then the number of edge kills is at most O ( p Cheriyan and Hagerup <ref> [6, 7] </ref> first introduced a restricted form of this game, in which player A may not redesignate edges, and described a randomized strategy. Alon [1] derandomized this strategy. King et al. extended the game to the form described above and found an improved deterministic strategy.
Reference: [8] <author> J. Cheriyan, T. Hagerup, and K. Mehlhorn. </author> <title> A o(n 3 )-time maximum flow algorithm. </title> <type> Technical report, </type> <address> MP11, Saarbruecken, Germany, </address> <year> 1990. </year>
Reference-contexts: Follows from Theorems 12 and 13, with r = 1= log n and ffi = (n=m) * , and from Theorem 1. 2 4.2 Flow operations The number of flow operations is just O (log n) times the number of points scored <ref> [8] </ref>. To determine the minimum number of flow operations our algorithm can perform, while maintaining the running time given in Theorem 14, we use the slack in the choice of r, mentioned above.
Reference: [9] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> A new approach to the maximum flow problem. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: Edge kills are closely related to task departures. The number of points scored by B is the number of dynamic tree operations performed by the Goldberg-Tarjan algorithm for maximum flow <ref> [9] </ref>. The correspondence between the game and the running time for network flow is given by the following theorems from King et al.
Reference: [10] <author> R. L. Graham. </author> <title> Bounds for certain multiprocessing anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: If for each task the eligible subset is all servers, however, then the competitive ratio falls to 2 * for some small constant * <ref> [10, 5] </ref>. Azar, Broder and Karlin [3] studied the dynamic load balancing problem when tasks both arrive and depart, but retained the restriction that tasks cannot be preempted. In this version, the picture is worse: using our definition of Load (A; ), the best possible competitive ratio is n.
Reference: [11] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A faster deterministic maximum flow algorithm. </title> <booktitle> In Proc. 3rd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 157-164, </pages> <year> 1992. </year>
Reference-contexts: Our algorithms extend to more general versions of the problem where both tasks and servers may arrive and depart, and where tasks have an associated weight and the maximum weighted load must be minimized. 2 1.2 Network Flow The node kill game, introduced by King et al. <ref> [11] </ref>, is played on a bipartite graph G = (U; V; E) where jU j = jV j = n and jEj = m. We refer to the nodes in U as items and the nodes in V as columns. The rules of the game are as follows. 1. <p> This way many assignments or edge kills must occur on a column before its estimated level changes. Greedy assignments are based on estimated level. The algorithm of King et al. <ref> [11] </ref> also used greedy assignments by estimated level. The Ratio Algorithm sometimes makes some columns inactive Initially, any column v with degree d v log n is made inactive. When all the remaining neighbours of an item have become inactive, the item is also inactive.
Reference: [12] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ., </address> <year> 1982. </year> <month> 16 </month>
Reference-contexts: At the other extreme, we may rebuild an optimum assignment each time a task arrives or departs. An optimum assignment can be computed in fi (n 3 log n) time using binary search and a b-matching algorithm <ref> [12] </ref>. This results in a ratio of 1, fi (m 2 ) reassignments, and fi (mn 3 log n) total computation.
References-found: 12

