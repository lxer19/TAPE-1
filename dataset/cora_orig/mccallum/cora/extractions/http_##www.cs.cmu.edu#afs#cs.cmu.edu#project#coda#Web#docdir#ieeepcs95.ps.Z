URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/coda/Web/docdir/ieeepcs95.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/coda/Web/docs-ody.html
Root-URL: 
Title: Mobile Information Access  
Author: M. Satyanarayanan 
Note: To appear in IEEE Personal Communications, Volume 3, No.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: January 1996  1, February 1996  
Pubnum: CMU-CS-96-107  
Abstract: The ability to access information on demand when mobile will be a critical capability in the 21st century. In this paper, we examine the fundamental forces at work in mobile computing systems and explain how they constrain the problem of mobile information access. From these constraints, we derive the importance of adaptivity as a crucial requirement of mobile clients. We then develop a taxonomy of adaptation strategies, and summarize our research in application-transparent and This research was supported by the Air Force Materiel Command (AFMC) and the Advanced Research Projects Agency (ARPA) under contract number F196828-93-C-0193. Additional support was provided by the IBM Corp., Digital Equipment Corp., Intel Corp., Xerox Corp., and AT&T Corp. The U.S. government is authorized to reproduce and distribute reprints for government purposes, notwithstanding any copyright notation thereon. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the AFMC, ARPA, IBM, DEC, Intel, Xerox, AT&T, CMU, or the U.S. Government. application-aware adaptation in the Coda and Odyssey systems respectively.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bruegge, B., Bennington, B. </author> <title> Applications of Mobile Computing and Communications. </title> <journal> IEEE Personal Communications 3(1), </journal> <month> February, </month> <year> 1996. </year>
Reference-contexts: Mobile IP, described by Johnson and Maltz [5], represents a networking layer below Coda and Odyssey. The different quality streams of Generative Video, described by Moura et al [12], correspond to different levels of video fidelity on an Odyssey client. The applications described by Bruegge and Bennington <ref> [1] </ref> could benefit from Coda's support for mobile file access. The Wireless Andrew Network, described by Hills and Johnson [3], provides the infrastructure nececssary for the Coda user community to remain connected while mobile.
Reference: [2] <author> Gray, J., Reuter, A. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: An IOT is a sequence of file operations that are treated as a unit for purposes of conflict detection and resolution. The name ``IOT'' stems from the fact that this mechanism focuses solely on the isolation aspect of the classic ACID transactional properties <ref> [2] </ref>. In other words, IOTs do not guarantee failure atomicity and only conditionally guarantee permanence. The IOT subsystem of Venus performs automatic read/write conflict detection based on certain serializability constraints. It supports a variety of conflict resolution mechanisms such as re-execution and the use of ASRs.
Reference: [3] <author> Hills, A., Johnson, </author> <type> D.B. </type> <institution> Wireless Data Network Infrastructure at Carnegie Mellon University. </institution> <note> IEEE Personal Communications 3(1), </note> <month> February, </month> <year> 1996. </year>
Reference-contexts: The applications described by Bruegge and Bennington [1] could benefit from Coda's support for mobile file access. The Wireless Andrew Network, described by Hills and Johnson <ref> [3] </ref>, provides the infrastructure nececssary for the Coda user community to remain connected while mobile. Finally, the wearable computers described by Smailagic and Siewiorek [20] are now powerful enough to run Coda, thus enabling a new and unique class of applications.
Reference: [4] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., Sidebotham, R.N., West, M.J. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems 6(1), </journal> <month> February, </month> <year> 1988. </year>
Reference-contexts: We have been exploring application-transparent adaptation since about 1990. Our research vehicle has been the Coda File System, a descendant of AFS <ref> [4] </ref>. More recently, we have begun exploration of application-aware adaptation in Odyssey, a platform for mobile computing. 4. Coda: Application-Transparent Adaptation Coda is an experimental file system whose goal is to offer clients continued access to data in the face of server and network failures [16]. <p> Rapid Cache Validation Coda's original technique for cache coherence while connected was based on callbacks <ref> [4, 16] </ref>. When a client is disconnected, it can no longer rely on callbacks. Upon reconnection, it must validate all cached objects before use to detect updates at the server. Unfortunately, the time for this validation can be substantial on a slow network.
Reference: [5] <author> Johnson, </author> <title> D.B., Maltz, D.A. Protocols for Adaptive Wireless and Mobile Networking. </title> <journal> IEEE Personal Communications 3(1), </journal> <month> February, </month> <year> 1996. </year>
Reference-contexts: Conclusion Our work bears a complementary relationship to the other efforts described in this special issue. Mobile IP, described by Johnson and Maltz <ref> [5] </ref>, represents a networking layer below Coda and Odyssey. The different quality streams of Generative Video, described by Moura et al [12], correspond to different levels of video fidelity on an Odyssey client. The applications described by Bruegge and Bennington [1] could benefit from Coda's support for mobile file access.
Reference: [6] <author> Kistler, J.J., Satyanarayanan, M. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems 10(1), </journal> <month> February, </month> <year> 1992. </year>
Reference-contexts: At each client, a cache manager, Venus, dynamically obtains and caches data as well as volume mappings. 4.1. Disconnected Operation Disconnected operation, a concept first conceived and demonstrated in Coda, is an important initial step in mobile computing <ref> [6, 7, 17] </ref>. In this mode of operation, a client continues to have read and write access to data in its cache during temporary network outages.
Reference: [7] <author> Kistler, J.J. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> May, </month> <year> 1993. </year>
Reference-contexts: At each client, a cache manager, Venus, dynamically obtains and caches data as well as volume mappings. 4.1. Disconnected Operation Disconnected operation, a concept first conceived and demonstrated in Coda, is an important initial step in mobile computing <ref> [6, 7, 17] </ref>. In this mode of operation, a client continues to have read and write access to data in its cache during temporary network outages.
Reference: [8] <author> Kumar, P., Satyanarayanan, M. </author> <title> Log-Based Directory Resolution in the Coda File System. </title> <booktitle> In Proceedings of the Second International Conference on Parallel and Distributed Information Systems. </booktitle> <address> San Diego, CA, </address> <month> January, </month> <year> 1993. </year>
Reference-contexts: Resolution fails only if a newly created name collides with an existing name, if an object updated at the client or the server has been deleted by the other, or if directory attributes have been modified at the server and the client <ref> [8] </ref>. Since Unix treats files as uninterpreted byte strems, Coda does not possess sufficient semantic knowledge to resolve file conflicts. Rather, it offers a mechanism for installing and transparently invoking application-specific resolvers (ASRs) [10].
Reference: [9] <author> Kumar, P. </author> <title> Mitigating the Effects of Optimistic Replication in a Distributed File System. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> December, </month> <year> 1994. </year>
Reference-contexts: This offers the highest degree of availability, since data can be updated in any network partition. Upon reintegration, the system ensures detection of conflicting updates and provides mechanisms to help users recover from these situations. Coda uses different strategies for handling concurrent updates on directories and files <ref> [9] </ref>. For directories, Venus possesses enough semantic knowledge to attempt transparent resolution of conflicts.
Reference: [10] <author> Kumar, P., Satyanarayanan, M. </author> <title> Flexible and Safe Resolution of File Conflicts. </title> <booktitle> In Procedings of the 1995 USENIX Technical Conference. </booktitle> <address> New Orleans, LA, </address> <month> January, </month> <year> 1995. </year>
Reference-contexts: Since Unix treats files as uninterpreted byte strems, Coda does not possess sufficient semantic knowledge to resolve file conflicts. Rather, it offers a mechanism for installing and transparently invoking application-specific resolvers (ASRs) <ref> [10] </ref>. An ASR is a program that encapsulates the detailed, application-specific knowledge necessary to distinguish genuine inconsistencies from reconcilable differences. Appointment calendars, electronic checkbooks, and project diaries are examples of applications where an application-specific approach to conflict resolution can have high payoff.
Reference: [11] <author> Lu, Q., Satyanarayanan, M. </author> <title> Improving Data Consistency in Mobile Computing Using Isolation-Only Transactions. </title> <booktitle> In Proceedings of the Fifth Workshop on Hot Topics in Operating Systems. </booktitle> <address> Orcas Island, WA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: Rather it is a read-write conflict, between the spreadsheet and the report. No Unix system has the ability to detect and deal with such problems. We have extended Coda with a new mechanism called isolation-only transactions (IOTs) to alleviate this shortcoming <ref> [11] </ref>. The IOT mechanism offers improved consistency for applications in a convenient and easy to use fashion. The mechanism is efficient, minimally demanding of resource-poor mobile clients, and upward compatible with existing Unix software.
Reference: [12] <author> Moura, J.M.F., Jasinchi, R.S., Shiojiri, H., Lin, J-C. </author> <title> Video Over Wireless. </title> <journal> IEEE Personal Communications 3(1), </journal> <month> February, </month> <year> 1996. </year>
Reference-contexts: Conclusion Our work bears a complementary relationship to the other efforts described in this special issue. Mobile IP, described by Johnson and Maltz [5], represents a networking layer below Coda and Odyssey. The different quality streams of Generative Video, described by Moura et al <ref> [12] </ref>, correspond to different levels of video fidelity on an Odyssey client. The applications described by Bruegge and Bennington [1] could benefit from Coda's support for mobile file access.
Reference: [13] <author> Mummert, L.B., Ebling, M.R., Satyanarayanan, M. </author> <title> Exploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles. </booktitle> <address> Copper Mountain Resort, CO, </address> <month> December, </month> <year> 1995. </year>
Reference-contexts: Cache misses may impede progress. Updates are at risk due to theft, loss or damage. Update conflicts become more likely. Exhaustion of cache space is a concern. We have implemented a series of modifications to Coda that alleviate these limitations by exploiting weak connectivity <ref> [13] </ref>. Our modifications span a number of areas. At the lowest level, the transport protocol has been extended to be robust, efficient and adaptive over a wide range of network bandwidths.
Reference: [14] <author> Noble, B., Satyanarayanan, M. </author> <title> An Empirical Study of a Highly-Available File System. </title> <booktitle> In Proceedings of the 1994 ACM Sigmetrics Conference. </booktitle> <address> Nashville, TN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: For example, consider the create of a file, followed by a store. If they are followed by an unlink, all three CML records and the data associated with the store can be eliminated. Both trace-driven simulations and measurements of Coda in actual use confirm the effectiveness of log optimizations <ref> [14, 17] </ref>. Venus combines implicit and explicit sources of information into a priority-based cache management algorithm. The implicit information consists of recent reference history, as in LRU caching algorithms. <p> As a first step in answering this question, we have instrumented our deployed Coda system and have been conducting an ongoing empirical study of system and user behavior <ref> [14] </ref>. Our data shows that Coda clients do experience various kinds of service failures, but that Coda is able to mask these failures effectively. Our observations confirm many earlier simulation-based predictions on resource usage, as well as many anecdotal reports from our user community.
Reference: [15] <author> Noble, B., Price, M., Satyanarayanan, </author> <note> M. </note>
Reference-contexts: For example, if the application were a video editor rather than a video player, slowing the frame rate would be a more appropriate form of degradation than dropping frames to preserve frame rate. 5.1.2. Resource Negotiation API Odyssey provides an interface for resource negotiation <ref> [15] </ref>. The resources in question may be generic, such as network bandwidth, cache space, processor cycles, or battery life. Resources may also be application-specific, such as the number of queries left to a limited-subscription stock quotation service. An application initially tries to access data at the highest level of fidelity.
References-found: 15

