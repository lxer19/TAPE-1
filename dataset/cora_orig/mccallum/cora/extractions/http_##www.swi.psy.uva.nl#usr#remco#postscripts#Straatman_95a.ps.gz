URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Straatman:95a.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: remco@swi.psy.uva.nl  
Title: A Performance Model for Knowledge-based Systems  
Author: Remco Straatman and Pascal Beys 
Note: This work has been (partially) funded by the Netherlands Computer Science Research Foundation with financial support form the Netherlands Organization for Scientific Research (NWO) within the REVISE-project, SION-project no. 612-322-316  
Address: Roetersstraat 15 1018 WB Amsterdam, the Netherlands  
Affiliation: Department of Social Science Informatics (S.W.I.) University of Amsterdam  
Abstract: Most techniques for verification and validation are directed at functional properties of programs. However, other properties of programs are also essential. This paper describes a model for the average computing time of a KADS knowledge-based system based on its structure. An example taken from an existing knowledge-based system is used to demonstrate the use of the cost-model in designing the system. 
Abstract-found: 1
Intro-found: 1
Reference: [Beys, 1994] <institution> Pascal Beys. Modelisation des couts pour l`apprentissage. </institution> <type> Master's thesis, </type> <institution> LAFORIA-IBP, Univer-site P. et M. Curie, Paris, </institution> <month> August </month> <year> 1994. </year> <note> (in French). </note>
Reference-contexts: We start by describing the concepts that form the cost-model and the simplifying assumptions made by the model. After this we list the formulae for the different parts of the structure of a system. The cost-model is explained in more detail in <ref> [Beys, 1994] </ref>. 3.1 Assumptions of the Cost-model The cost model presented here assumes that a system consists of functional components. A functional component can either be primitive in which case it is not decomposed any further, or composite in which case it is decomposed into sub-components.
Reference: [Fensel, 1995] <author> D. Fensel. </author> <title> Assumptions and limitations of a problem-solving method: A case study. </title> <booktitle> In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW'95), </booktitle> <address> Banff, Canada, </address> <note> February 26th - February 3th 1995. </note>
Reference-contexts: The elevator is represented by a set of parameters (such as hoist-cable-diameter) that have to be assigned acceptable values. A propose-and-refine method is used to implement the configuration-task. The top-level task of the VT-system, configuration, will be the focus of this example. Fensel <ref> [Fensel, 1995] </ref> describes that multiple variants of a control-structure for the configure task are possible. This observation was the result of studying the VT-specification described in [Poeck et al., 1994].
Reference: [Harel, 1984] <author> D. Harel. </author> <title> Dynamic logic. </title> <editor> In D. Gabbay and F. Guenthner, editors, </editor> <booktitle> Handbook of Philosophical Logic, Vol. II: extensions of Classical Logic, </booktitle> <pages> pages 497-604. </pages> <publisher> Reidel, </publisher> <address> Dordrecht, The Netherlands, </address> <year> 1984. </year>
Reference-contexts: A formal language for describing KADS-models is (M L) 2 [vanHarmelen & Balder, 1992]. The formal task-layer language of (M L) 2 is based on quantified dynamic logic <ref> [Harel, 1984] </ref>, which enables us to also derive functional properties of the system. Another assumption of the cost model is that two properties of the primitive components can be obtained: the average cost and probability of success of a component in the actual knowledge-based system. <p> Primitive components can change the state of the system, expressions are used in tests to guide the inference and do not change the state of the system. The formal semantics of the control-constructs have been described in quantified dynamic logic (QDL) <ref> [Harel, 1984] </ref>. As a result we can prove functional properties of the system. The central concept of the our model is the cost of a system, meaning the average solution time needed to calculate the solution (s) for a system.
Reference: [Poeck et al., 1994] <author> K. Poeck, D. Fensel, D. Landes, and J. Angele. </author> <title> Combining karl and configurable role limiting methods for configuring elevator systems. </title> <editor> In G. Schreiber and B. Birmingham, editors, </editor> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-based Systems Workshop (KAW+94), volume III, Sisyphus II - VT Elevator Design Problem, </booktitle> <address> Banff, Canada, </address> <month> January 30 - February 4 </month> <year> 1994. </year>
Reference-contexts: The top-level task of the VT-system, configuration, will be the focus of this example. Fensel [Fensel, 1995] describes that multiple variants of a control-structure for the configure task are possible. This observation was the result of studying the VT-specification described in <ref> [Poeck et al., 1994] </ref>. Some of these variants are generally valid (functionally correct) but inefficient, whereas others are more efficient but only functionally valid under certain assumptions. This once again shows that it is important to reason both about the functional and the performance properties of systems.
Reference: [Schreiber et al., 1993] <editor> A. Th. Schreiber, B. J. Wielinga, and J. A. Breuker, editors. KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development, volume 11 of Knowledge-Based Systems Book Series. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1993. </year> <note> ISBN 0-12-629040-7. </note>
Reference-contexts: In this paper we will focus on one of the performance properties, average computing time. This work is done in the context of designing knowledge-based systems (KBS) following the KADS methodology <ref> [Schreiber et al., 1993] </ref>. An important idea in this methodology is the reuse of existing knowledge in the construction of new systems. A new knowledge-based system is designed and constructed from existing domain knowledge and problem solving methods, completed by knowledge that is acquired for a new application.
Reference: [Straatman, 1994] <author> R. Straatman. </author> <title> Learning control knowledge in KADS knowledge-based systems: Machine learning meets knowledge engineering. </title> <editor> In J. C. Bioch and S. H. Nienhuys-Cheng, editors, </editor> <booktitle> BENELEARN-94 Proceedings of the 4th Belgian-Dutch Conference on Machine Learning, </booktitle> <pages> pages 9-16. </pages> <institution> Dept. of Computer Science, Faculty of Economics Erasmus University Rotterdam, </institution> <year> 1994. </year>
Reference-contexts: A new knowledge-based system is designed and constructed from existing domain knowledge and problem solving methods, completed by knowledge that is acquired for a new application. The goal of our research is to partially automate the construction and improvement of these knowledge-based systems <ref> [Straatman, 1994] </ref>. To be able to (re)design a knowledge-based system semi-automatically, the design system has to know when an acceptable design has been created and in what direction to search for it.
Reference: [Subramanian & Hunter, 1992] <author> D. Subramanian and Scott Hunter. </author> <title> Computational impact of biases in learning. </title> <editor> In Diana Gordon, editor, </editor> <booktitle> ML92 Workshop on Biases in Inductive Learning, </booktitle> <year> 1992. </year>
Reference-contexts: Likewise, we have constructed a mathematical model for a performance property, the average solution time, of a program. The idea of modeling the average solution time of a program in a mathematical model based on its structure is not new. <ref> [Subramanian & Hunter, 1992] </ref> describe a similar model of the average cost of finding a solution in a system with a fixed backward rule-chaining strategy. In contrast, our model describes systems that apply imperative control constructs (such as choices and loops) to specify control.
Reference: [vanHarmelen & Balder, 1992] <author> F. van Harmelen and J. R. Balder. </author> <title> (ML) 2 : a formal language for KADS models of expertise. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(1), </volume> <year> 1992. </year> <title> Special issue: `The KADS approach to knowledge engineering', reprinted in KADS: A Principled Approach to Knowledge-Based System Development, 1993, </title> <editor> Schreiber, A.Th. et al. </editor> <publisher> (eds.). </publisher>
Reference-contexts: The tasks correspond to the functional components of our model, the inferences to the primitive components, the task-layer control-language is based on imperative constructs such as loops and choices. A formal language for describing KADS-models is (M L) 2 <ref> [vanHarmelen & Balder, 1992] </ref>. The formal task-layer language of (M L) 2 is based on quantified dynamic logic [Harel, 1984], which enables us to also derive functional properties of the system.
Reference: [Yost, 1992] <author> G. Yost. </author> <title> Configuring elevator systems. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation, </institution> <address> 111 Locke Drive (LMO2/K11), Marlboro MA 02172, </address> <year> 1992. </year>
Reference-contexts: The average number of times the test will be executed is: 1 1P s ()P s (ff) . 4 Using the cost-model to evaluate design alternatives In this section we use an example to show how the model is used to make decisions in designing knowledge-based systems. The VT-domain <ref> [Yost, 1992] </ref> (Vertical Transportation) deals with the configuration of elevators. This domain has been widely used as a testbed for specification formalisms for knowledge-based systems within the so-called Sisyphus-II project.
References-found: 9

