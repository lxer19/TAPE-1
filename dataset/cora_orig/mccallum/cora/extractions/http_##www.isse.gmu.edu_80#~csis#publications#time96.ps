URL: http://www.isse.gmu.edu:80/~csis/publications/time96.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: A General Framework and Reasoning Models for Time Granularity  
Author: Claudio Bettini X. Sean Wang Sushil Jajodia 
Address: Milan, Italy 20135 Fairfax,VA 22030  
Affiliation: Dept. of Information Science (DSI) Dept. of Info.& Software Systems Eng. University of Milan George Mason University  
Abstract: This paper presents a general framework to define time granularity systems. We identify the main choices differentiating the systems and investigate the formal relationships among granularities in these systems. The paper also introduces the notion of a network of temporal constraints with granularities emphasizing the semantical and computational differences from constraint networks with a single granularity. Consistency is shown to be NP-hard and an approximate algorithm proposed. 
Abstract-found: 1
Intro-found: 1
Reference: [BWBJ95] <author> C. Bettini, X. Wang, E. Bertino, and S. Jajodia. </author> <title> Semantic assumptions and query evaluation in temporal databases. </title> <booktitle> In Proc. of ACM SIGMOD-95, </booktitle> <pages> pages 257-268, </pages> <address> San Jose,CA, </address> <year> 1995. </year>
Reference-contexts: This last restriction is enforced by the condition that the first non-empty tick (if any) must start with index 1 (condition 2 in the definition of T T S 1 ). An example of a more restrictive granularity system is the one we defined in <ref> [WJS95, BWBJ95] </ref> where a discrete absolute time and index set (positive integers) are used. <p> It is sometimes desirable to obtain the rainfall amount of a month. Here, the information about rainfall is viewed as "converted" into that in terms of month. The conversion function used is the summation. In <ref> [BWBJ95] </ref>, we proposed a framework for specifying such informa-tion conversion and studied related query evaluation problems. 3 Temporal constraints with granular ities In the temporal reasoning area a lot of work has been done on formalisms to express networks of constraints and on algorithms to solve the related problems of consistency <p> We have applied the proposed framework for time granularities in several areas: federated temporal databases [WJS95], logical design of temporal databases with multiple granularities [WBBJ], querying temporal databases with semantic assumptions <ref> [BWBJ95] </ref>, and mining large event sequences for complex temporal relationships [BWJ96]. There is certainly another broad area that deserves an investigation for the application of the presented granularity model and constraint propagation techniques.
Reference: [BWJ96] <author> C. Bettini, X. Wang, and S. Jajodia. </author> <title> Testing complex temporal relationships involving multiple granularities and its application to data mining. </title> <booktitle> In Proc. of ACM PODS-96, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: We have applied the proposed framework for time granularities in several areas: federated temporal databases [WJS95], logical design of temporal databases with multiple granularities [WBBJ], querying temporal databases with semantic assumptions [BWBJ95], and mining large event sequences for complex temporal relationships <ref> [BWJ96] </ref>. There is certainly another broad area that deserves an investigation for the application of the presented granularity model and constraint propagation techniques. This area includes the many A.I. applications involving temporal reasoning, from scheduling and planning to diagnosis and natural language processing.
Reference: [CCMP93] <author> E. Ciapessoni, E. Corsetti, A. Montanari, and P. San Pietro. </author> <title> Embedding time granularity in a logical specification language for synchronous real time systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 20(1), </volume> <year> 1993. </year>
Reference-contexts: Relevant work on this subject has been done also in other areas like logic programming [MMCR92], and real time system specification <ref> [CCMP93] </ref>. In these papers the emphasis is on embedding these notions into a logical formalism. The granularity system proposed in [MMCR92] can be described in our framework exactly as the one discussed above for [Dea89] with the extra restriction (4) of equal size granules in each granularity. In [CCMP93] a slightly <p> system specification <ref> [CCMP93] </ref>. In these papers the emphasis is on embedding these notions into a logical formalism. The granularity system proposed in [MMCR92] can be described in our framework exactly as the one discussed above for [Dea89] with the extra restriction (4) of equal size granules in each granularity. In [CCMP93] a slightly generalized version of that system is used, eliminating restriction (4) on ticks and restriction (2) on type relationships, while more prop erties on these relationships are specified through logic axioms. Considering constraint propagation, a related work is that of [Euz95]. <p> This area includes the many A.I. applications involving temporal reasoning, from scheduling and planning to diagnosis and natural language processing. With respect to temporal logics, an interesting direction is the study of metric temporal logics along the work of <ref> [CCMP93] </ref>, but extending these formalisms to deal with such general models of granularity.
Reference: [CR87] <author> J. Clifford and A. Rao. </author> <title> A simple, general structure for temporal domains. </title> <booktitle> In Proceedings of the Conference on Temporal Aspects in Information Systems, </booktitle> <pages> pages 23-30, </pages> <address> France, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: The algorithm may derive tighter constraints (in the sense of logical implication) if additional tem poral types are used. 4 Related work Most of the time granularity systems proposed in the literature are quite restrictive, often imposing a total order on granularities <ref> [CR87, Dea89, MMCR92] </ref>. The restrictions are usually motivated by useful formal and computational properties that can be achieved with them. granularity must be a subset of that corresponding to the target granularity.
Reference: [CSS94] <author> R. Chandra, A. Segev, and M. Stone-braker. </author> <title> Implementing calendars and temporal rules in next generation databases. </title> <booktitle> In Proc. </booktitle> <address> ICDE, </address> <year> 1994. </year>
Reference-contexts: While we address the problem of reasoning with quantitative temporal constraints on multiple granularities, that paper considers both temporal and spatial aspects of granularity, but limited to qualitative constraints. Finally, several papers address the problem of the representation and implementation of calendars and granularities <ref> [LMF86, NS92, TSQL2, CSS94] </ref>. The set of granularities expressible in these proposals are often characterized only by a representation language. This set can be formally described as one of our temporal type systems. We see this work as complementary to ours.
Reference: [Dea89] <author> T. Dean. </author> <title> Artificial intelligence: Using temporal hierarchies to efficiently maintain large temporal databases. </title> <journal> JACM, </journal> <volume> 36(4):687, </volume> <year> 1989. </year>
Reference-contexts: The algorithm may derive tighter constraints (in the sense of logical implication) if additional tem poral types are used. 4 Related work Most of the time granularity systems proposed in the literature are quite restrictive, often imposing a total order on granularities <ref> [CR87, Dea89, MMCR92] </ref>. The restrictions are usually motivated by useful formal and computational properties that can be achieved with them. granularity must be a subset of that corresponding to the target granularity. <p> The restrictions are usually motivated by useful formal and computational properties that can be achieved with them. granularity must be a subset of that corresponding to the target granularity. In <ref> [Dea89] </ref> a time granularity system is introduced and the author shows how it can be exploited to expedite operations on large temporal databases. In particular, the emphasis is on temporal reasoning tasks on large repositories of event descriptions temporally related to each other. <p> In these papers the emphasis is on embedding these notions into a logical formalism. The granularity system proposed in [MMCR92] can be described in our framework exactly as the one discussed above for <ref> [Dea89] </ref> with the extra restriction (4) of equal size granules in each granularity. In [CCMP93] a slightly generalized version of that system is used, eliminating restriction (4) on ticks and restriction (2) on type relationships, while more prop erties on these relationships are specified through logic axioms.
Reference: [DMP91] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49, </volume> <year> 1991. </year>
Reference-contexts: That is, for each in M , let C be the set of all the constraints X Y 2 [m; n], where X, Y are in W and [m; n] 2 (X; Y ). Now, the propagation within C is a problem known as the Simple Temporal Problem <ref> [DMP91] </ref>. We apply a path consistency algorithm within each group. Since constraints expressed in a granularity could imply con straints in other granularities, we try to convert them and add the derived constraints to the corresponding groups.
Reference: [TSQL2] <editor> The TSQL2 Temporal Query Language, R. T. Snodgrass Editor, </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: This function is useful for finding, e.g., all the days in a month. If fi -, then bc - is always defined. It is worth mentioning that in <ref> [TSQL2] </ref>, it is assumed a similar function is provided by a calendar. For each tick of a source type the function gives the conversion factor for a certain target type. For example, given the month Feb, 1996, the function returns "29 days". The above transformation only concerns the temporal types. <p> In this paper we propose a different semantics for constraints with granularities, and, consequently, different algorithms. The recent proposal for the temporal extension of SQL (TSQL2) includes a substantial part dealing with time granularity <ref> [TSQL2] </ref>. Even if there is no formal description of the intended granularity system, it is clear that it is a very general system allowing, for example, non-contiguous ticks and incomparable types. <p> While we address the problem of reasoning with quantitative temporal constraints on multiple granularities, that paper considers both temporal and spatial aspects of granularity, but limited to qualitative constraints. Finally, several papers address the problem of the representation and implementation of calendars and granularities <ref> [LMF86, NS92, TSQL2, CSS94] </ref>. The set of granularities expressible in these proposals are often characterized only by a representation language. This set can be formally described as one of our temporal type systems. We see this work as complementary to ours.
Reference: [Euz95] <author> J. Euzenat. </author> <title> An algebraic approach for granularity in qualitative space and time representation. </title> <booktitle> In Proc. IJCAI-95, </booktitle> <pages> pages 894-900, </pages> <address> San Mateo, CA, </address> <year> 1995. </year>
Reference-contexts: In [CCMP93] a slightly generalized version of that system is used, eliminating restriction (4) on ticks and restriction (2) on type relationships, while more prop erties on these relationships are specified through logic axioms. Considering constraint propagation, a related work is that of <ref> [Euz95] </ref>. While we address the problem of reasoning with quantitative temporal constraints on multiple granularities, that paper considers both temporal and spatial aspects of granularity, but limited to qualitative constraints. Finally, several papers address the problem of the representation and implementation of calendars and granularities [LMF86, NS92, TSQL2, CSS94].
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability A guide to the theory of NP-completeness. W.H. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: However, we have: Theorem 2 It is NP-hard to decide if an arbitrary constraint network with granularities is consistent. The proof consists of a reduction from the "subset sum" problem <ref> [GJ79] </ref>. The result holds for our general definition of temporal type as well as for T T S 1 and T T S 2 (the proof only requires that incomparable granularities are allowed).
Reference: [LMF86] <author> B. Leban, D. Mcdonald, and D. Foster. </author> <title> A representation for collections of temporal intervals. </title> <booktitle> In Proc. AAAI-86, </booktitle> <pages> pages 367-371, </pages> <year> 1986. </year>
Reference-contexts: While we address the problem of reasoning with quantitative temporal constraints on multiple granularities, that paper considers both temporal and spatial aspects of granularity, but limited to qualitative constraints. Finally, several papers address the problem of the representation and implementation of calendars and granularities <ref> [LMF86, NS92, TSQL2, CSS94] </ref>. The set of granularities expressible in these proposals are often characterized only by a representation language. This set can be formally described as one of our temporal type systems. We see this work as complementary to ours.
Reference: [MMCR92] <author> A. Montanari, E. Maim, E. Ciapessoni, and E. Ratto. </author> <title> Dealing with time granularity in the event calculus. </title> <booktitle> In Proc. of the Int. Conf. on Fifth Generation Computer Systems 1992, </booktitle> <volume> volume 2, </volume> <pages> pages 702-712, </pages> <address> Tokyo, Japan, </address> <month> June </month> <year> 1992. </year> <pages> ICOT. </pages>
Reference-contexts: The algorithm may derive tighter constraints (in the sense of logical implication) if additional tem poral types are used. 4 Related work Most of the time granularity systems proposed in the literature are quite restrictive, often imposing a total order on granularities <ref> [CR87, Dea89, MMCR92] </ref>. The restrictions are usually motivated by useful formal and computational properties that can be achieved with them. granularity must be a subset of that corresponding to the target granularity. <p> In terms of our formal model it could be characterized by using a finite subset of integers for both absolute time and index set with only restriction (1) on the structure of ticks. Relevant work on this subject has been done also in other areas like logic programming <ref> [MMCR92] </ref>, and real time system specification [CCMP93]. In these papers the emphasis is on embedding these notions into a logical formalism. The granularity system proposed in [MMCR92] can be described in our framework exactly as the one discussed above for [Dea89] with the extra restriction (4) of equal size granules in <p> Relevant work on this subject has been done also in other areas like logic programming <ref> [MMCR92] </ref>, and real time system specification [CCMP93]. In these papers the emphasis is on embedding these notions into a logical formalism. The granularity system proposed in [MMCR92] can be described in our framework exactly as the one discussed above for [Dea89] with the extra restriction (4) of equal size granules in each granularity.
Reference: [NS92] <author> M. Niezette and J. Stevenne. </author> <title> An efficient symbolic representation of periodic time. </title> <booktitle> In Proc. </booktitle> <address> CIKM-92, Baltimore, </address> <year> 1992. </year>
Reference-contexts: While we address the problem of reasoning with quantitative temporal constraints on multiple granularities, that paper considers both temporal and spatial aspects of granularity, but limited to qualitative constraints. Finally, several papers address the problem of the representation and implementation of calendars and granularities <ref> [LMF86, NS92, TSQL2, CSS94] </ref>. The set of granularities expressible in these proposals are often characterized only by a representation language. This set can be formally described as one of our temporal type systems. We see this work as complementary to ours.
Reference: [WBBJ] <author> X. Wang, C. Bettini, A. Brodsky, and S. Jajodia. </author> <title> Logical design for temporal databases with multiple granularities. </title> <journal> ACM TODS, </journal> <note> to appear. </note>
Reference-contexts: There is a tradeoff in restricting a temporal type system between its expressiveness and the simplicity and efficiency of the algorithms needed to manage the temporal types. Here, we give the definition of a very expressive temporal type system <ref> [WBBJ] </ref> that we have found to be particularly interesting. <p> The same holds for the types definable in T T S 2 . The usefulness of the lattice structure has been shown, for example, in the logical design of temporal databases with multiple granularities <ref> [WBBJ] </ref>. 2.2 Data conversion We consider two kinds of data conversions. One is time tick conversions and the other timestamped information conversion. <p> We have applied the proposed framework for time granularities in several areas: federated temporal databases [WJS95], logical design of temporal databases with multiple granularities <ref> [WBBJ] </ref>, querying temporal databases with semantic assumptions [BWBJ95], and mining large event sequences for complex temporal relationships [BWJ96]. There is certainly another broad area that deserves an investigation for the application of the presented granularity model and constraint propagation techniques.
Reference: [WJS95] <author> X. Wang, S. Jajodia, </author> <title> and V.S. Subrahma-nian. Temporal modules: An approach toward federated temporal databases. </title> <journal> Information Sciences, </journal> <volume> 82 </volume> <pages> 103-128, </pages> <year> 1995. </year>
Reference-contexts: This last restriction is enforced by the condition that the first non-empty tick (if any) must start with index 1 (condition 2 in the definition of T T S 1 ). An example of a more restrictive granularity system is the one we defined in <ref> [WJS95, BWBJ95] </ref> where a discrete absolute time and index set (positive integers) are used. <p> Furthermore, we introduced the notion of a constraint network with time granulari-ties and showed that such a constraint network has semantical and computational differences wrt similar constraint networks without time granularities. We have applied the proposed framework for time granularities in several areas: federated temporal databases <ref> [WJS95] </ref>, logical design of temporal databases with multiple granularities [WBBJ], querying temporal databases with semantic assumptions [BWBJ95], and mining large event sequences for complex temporal relationships [BWJ96]. There is certainly another broad area that deserves an investigation for the application of the presented granularity model and constraint propagation techniques.
References-found: 15

