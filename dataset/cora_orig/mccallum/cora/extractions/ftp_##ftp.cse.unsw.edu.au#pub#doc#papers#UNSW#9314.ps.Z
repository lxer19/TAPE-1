URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9314.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Abstract: SCS&E Report 9314 November, 1993 Mungi: A Distributed Single Address-Space Operating System Gernot Heiser, Kevin Elphinstone, Stephen Russell, Jerry Vochteloo (The text of this report has been accepted for ACSC-17) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. A. Abramson and J. L. Keedy. </author> <title> Implementing a large virtual memory in a distributed computing system. </title> <booktitle> In Proceedings of the 18th Hawaii International Conference on System Sciences, </booktitle> <year> 1985. </year>
Reference-contexts: Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming [8, 20, 22], and Persistent Object systems <ref> [1, 9, 12] </ref>. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space.
Reference: [2] <author> M. Anderson, R. Pose, and C. Wallace. </author> <title> A password-capability system. </title> <journal> The Computer Journal, </journal> <volume> 29(1) </volume> <pages> 1-8, </pages> <year> 1986. </year>
Reference-contexts: The Distributed Systems group at UNSW is currently implementing Mungi, a SAOS designed for a medium-scale network of homogeneous machines. The system provides a single shared virtual memory where pages are transparently distributed amongst the individual nodes. Mungi features a protection mechanism based on password capabilities <ref> [2] </ref> which does not require specialised hardware for efficient operation, unlike other capability systems [11, 26, 31]. The protection scheme allows users to easily define protection domains which may be extended or restricted as required, and includes a mechanism similar to the UNIX set-uid facility. <p> As we do not want to impose any restrictions on the storage of capabilities, the obvious choice is a sparse capability scheme. Most of these, however, require encryption to prevent forgery, which makes creation and validation of capabilities expensive. We therefore chose password capabilities <ref> [2] </ref>, which, in Mungi, consist of two parts: a 64-bit address and (currently) a 64-bit password. Each object may have several different capabilities associated with it. Possession of a capability grants the holder a set of access modes for the object.
Reference: [3] <author> T. E. Anderson, H. M. Levy, B. N. Bershad, and E. D. Lazowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <volume> volume 4, </volume> <pages> pages 108-21, </pages> <year> 1991. </year>
Reference-contexts: A SAOS, on the other hand, directly supports persistence. Other improvements in efficiency result from eliminating unnecessary copying of data between address spaces, and by reducing the costs of context switches, a significant performance limitation for current operating systems <ref> [3] </ref>. Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming [8, 20, 22], and Persistent Object systems [1, 9, 12].
Reference: [4] <author> M. Atkinson, P. Bailey, K. Chisholm, P. Cockshott, and R. Morrison. </author> <title> An approach to persistent programming. </title> <journal> The Computer Journal, </journal> <volume> 26 </volume> <pages> 360-5, </pages> <year> 1983. </year>
Reference-contexts: The migration of data and processes is also greatly simplified, as addresses are location independent, and the environment a process sees does not depend on the node on which it is executing. Another advantage of a SAOS is its support for persistent programming systems. It has been observed <ref> [4] </ref> that typically 30% of the code of application programs only serves to convert between the structured, high-level representation for data in memory, and the flat, low-level representation required for long-term storage of data in file systems.
Reference: [5] <author> M. G. Baker, J. H. Hartman, M. D. Kupfer, K. W. Shirriff, and J. K. Ousterhout. </author> <title> Measurement of a distributed file system. </title> <booktitle> In Proceedings of the 13th ACM Symposium on OS Principles, </booktitle> <pages> pages 198-212, </pages> <year> 1991. </year>
Reference-contexts: The simulations were driven by synthetic data based on statistics gathered from local UNIX file systems, whose distribution agreed with results of other studies <ref> [5, 29] </ref>. Our results show that the sparse multi-level page table quickly reaches a steady state where it consumes around 0.2% of the allocated memory, provided addresses are being reused (Figure 2).
Reference: [6] <author> J. K. Bennett, J. B. Carter, and W. Zwaenepoel. Munin: </author> <title> Distributed shared memory based on type-specific memory coherence. </title> <booktitle> In Conference on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 168-176. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems [8, 20, 22], or provide a shared memory service maintained by the kernel [14] or by user-level servers <ref> [6, 23] </ref>. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [7] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: A write request causes ownership to be transferred as well as the page's contents. To avoid losing or duplicating page ownership in the case of node crashes or network errors, a variant of a two phase distributed commit protocol <ref> [7] </ref> is used for the ownership transfer. This transfer also invalidates all read-only copies of the page. The dynamic distributed ownership management is similar to the one used in Ivy [21].
Reference: [8] <author> R. Bisiani and M. Ravishankar. </author> <title> PLUS: A distributed shared-memory system. </title> <booktitle> In 17th International Symposium on Computer Architectures, </booktitle> <pages> pages 115-124. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming <ref> [8, 20, 22] </ref>, and Persistent Object systems [1, 9, 12]. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space. <p> For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems <ref> [8, 20, 22] </ref>, or provide a shared memory service maintained by the kernel [14] or by user-level servers [6, 23]. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [9] <author> A. Black, N. Hutchinson, E. Jul, H. Levy, and L. Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13:65-76, </volume> <year> 1987. </year>
Reference-contexts: Accessing any data requires nothing more than issuing the appropriate address. This should be compared to existing distributed operating systems which typically offer different interfaces for accessing local and remote variables <ref> [9, 33, 35, 18] </ref>. The migration of data and processes is also greatly simplified, as addresses are location independent, and the environment a process sees does not depend on the node on which it is executing. Another advantage of a SAOS is its support for persistent programming systems. <p> Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming [8, 20, 22], and Persistent Object systems <ref> [1, 9, 12] </ref>. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space.
Reference: [10] <author> J. S. Chase, H. M. Levy, M. Baker-Harvey, and E. D. Lazowska. Opal: </author> <title> A single address space system for 64-bit architectures. </title> <booktitle> In Proceedings of the 3rd Workshop on Workstation Operating Systems, </booktitle> <pages> pages 80-85, </pages> <address> Key Biscayne, Florida, 1992. </address> <publisher> IEEE. </publisher>
Reference-contexts: large enough to hold all the data a process may ever want to access during its lifetime, but is even large enough for all the data available in a medium-scale distributed system; i.e. a network of hundreds of computing nodes, and it will be large enough for years to come <ref> [10] </ref>. A single address-space operating system (SAOS) which supports this model offers many advantages. Naming, for example, is greatly simplified by eliminating the distinctions between local and remote storage, and between primary and secondary memory. <p> Mungi differs by providing an unsegmented address space which simplifies object migration, and password capabilities can be freely manipulated by users. Our design is also based on a conventional architecture. However we do not provide direct support for encapsulation other than the basic protection system. The Opal system <ref> [10] </ref> also supports a single large address space. While their goals are similar to ours, it is not yet clear what policies will be used for such important issues as address space management, object location and migration, or the software model of protection.
Reference: [11] <author> E. Cohen and D. Jefferson. </author> <title> Protection in the HYDRA operating system. </title> <booktitle> In Proceedings of the 5th ACM Symposium on OS Principles, </booktitle> <volume> volume 5, </volume> <pages> pages 141-59, </pages> <year> 1975. </year>
Reference-contexts: The system provides a single shared virtual memory where pages are transparently distributed amongst the individual nodes. Mungi features a protection mechanism based on password capabilities [2] which does not require specialised hardware for efficient operation, unlike other capability systems <ref> [11, 26, 31] </ref>. The protection scheme allows users to easily define protection domains which may be extended or restricted as required, and includes a mechanism similar to the UNIX set-uid facility. <p> To overcome these problems, we introduce an active protection domain (APD), which is a data structure defining the protection domain in which a process is executing. APDs are similar to local name spaces in HYDRA <ref> [11] </ref>, and process resource lists in CAP [27], and consist of an array of Clist and protection fault handler pointers held in the PCB.
Reference: [12] <author> P. Dasgupta, R. J. LeBlanc, and W. Appelbe. </author> <title> The clouds distributed operating system. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <year> 1988. </year>
Reference-contexts: Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming [8, 20, 22], and Persistent Object systems <ref> [1, 9, 12] </ref>. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space.
Reference: [13] <author> K. Elphinstone. </author> <title> Address space management issues in the Mungi operating system. </title> <type> Report 9312, </type> <institution> School of Computer Science and Engineering, University of NSW, Kensington, NSW, Australia, </institution> <year> 2033, </year> <month> November </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: higher level table. 2 OT.id password accounting data password password accounting data password limit base basebase limitlimit permissionspermissions permissionspermissions basebase limitlimit To test the suitability of the sparse multi-level page table we built a simulator which allows us to study the effect of memory allocation policies on page table size <ref> [13] </ref>. The simulations were driven by synthetic data based on statistics gathered from local UNIX file systems, whose distribution agreed with results of other studies [5, 29].
Reference: [14] <author> B. D. Fleisch and G. J. Popek. </author> <title> Mirage: A coherent distributed shared memory design. </title> <booktitle> In Proceedings of the 12th ACM Symposium on OS Principles, </booktitle> <pages> pages 211-223, </pages> <year> 1989. </year>
Reference-contexts: For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems [8, 20, 22], or provide a shared memory service maintained by the kernel <ref> [14] </ref> or by user-level servers [6, 23]. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [15] <author> C. G. Gray and D. R. Cheriton. Leases: </author> <title> An efficient fault-tolerant mechanism for distributed file cache consistency. </title> <booktitle> In Proceedings of the 12th ACM Symposium on OS Principles, </booktitle> <pages> pages 202-10, </pages> <year> 1989. </year>
Reference-contexts: We are therefore investigating other methods of garbage management such as charging users for backing store via leases <ref> [15] </ref> or other economic models [34]. 4 Protection The potentially biggest problem associated with a single address-space is protection.
Reference: [16] <author> F. Henskens. </author> <title> A Capability-Based Persistent Distributed Shared Virtual Memory. </title> <type> PhD thesis, </type> <institution> University of Newcastle, NSW, Australia, </institution> <year> 1991. </year>
Reference-contexts: Locality of reference makes it likely that neighbouring pages are owned by the same node, so the location hints of neighbouring pages are used if none exist for the required page. An alternative approach employed in Monads <ref> [16] </ref> uses pointer chaining to avoid broadcasts. If the page status is unknown, the kernel immediately broadcasts a request for the page. If there is an owner, it will respond to the broadcast.
Reference: [17] <author> F. A. Henskens, J. Rosenberg, and J. L. Keedy. </author> <title> A capability-based distributed shared memory. </title> <booktitle> In Proceedings of the 14th Australian Computer Science Conference, </booktitle> <pages> pages 29.1-12, </pages> <year> 1991. </year>
Reference-contexts: The availability of sufficiently large address spaces today overcomes the limitations that constrained these earlier systems. More recently, other groups have also considered the design of large address-space operating systems. The Monads project <ref> [31, 17] </ref> was one of the first to investigate supporting a global virtual address space. The goal of the system was to provide direct support for software engineering principles such as modularisation and encapsulation using a specialised architecture.
Reference: [18] <author> R. Lea, P. Amaral, and C. Jacquemot. COOL-2: </author> <title> an object oriented support platform built above the Chorus micro-kernel. </title> <editor> In L.-F. Cabrera, V. Russo, and M. Shapiro, editors, </editor> <booktitle> Proceedings of the 1st International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 68-72, </pages> <address> Palo Alto, USA, 1991. </address> <publisher> IEEE. </publisher>
Reference-contexts: Accessing any data requires nothing more than issuing the appropriate address. This should be compared to existing distributed operating systems which typically offer different interfaces for accessing local and remote variables <ref> [9, 33, 35, 18] </ref>. The migration of data and processes is also greatly simplified, as addresses are location independent, and the environment a process sees does not depend on the node on which it is executing. Another advantage of a SAOS is its support for persistent programming systems.
Reference: [19] <author> P. Leach, P. Levine, J. Hamilton, and B. Stumpf. </author> <title> The file system of an integrated local network. </title> <booktitle> In ACM Computer Science Conference, </booktitle> <address> New Orleans, </address> <year> 1985. </year>
Reference-contexts: Mungi also shares some similarities with previous operating systems, such as Multics [28], Locus [30], and Domain <ref> [19] </ref>, which allowed portions of files to be mapped into process address spaces. In Mungi, all objects reside in the single shared address space, so no explicit mapping is required. The availability of sufficiently large address spaces today overcomes the limitations that constrained these earlier systems.
Reference: [20] <author> D. Lenoski, J. Laudon, K. Gharachorloo, A. Gupta, and J. Hennessy. </author> <title> The directory-based cache coherence protocol for the DASH multiprocessor. </title> <booktitle> In International Symposium on Computer Architectures, </booktitle> <pages> pages 148-59. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming <ref> [8, 20, 22] </ref>, and Persistent Object systems [1, 9, 12]. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space. <p> For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems <ref> [8, 20, 22] </ref>, or provide a shared memory service maintained by the kernel [14] or by user-level servers [6, 23]. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [21] <author> K. Li and P. Hudak. </author> <title> Memory coherence in shared virtual memory systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7 </volume> <pages> 321-59, </pages> <year> 1989. </year>
Reference-contexts: This transfer also invalidates all read-only copies of the page. The dynamic distributed ownership management is similar to the one used in Ivy <ref> [21] </ref>. However, unlike DSM systems such as Ivy, we anticipate that sharing of pages in our system will fall into two categories: objects which are shared between very few processes, e.g. message buffers, and objects such as executable programs which are shared between almost all nodes.
Reference: [22] <author> K. Li and R. Schaefer. </author> <title> A hypercube shared virtual memory system. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <pages> pages 125-32. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: Other groups have also recognised the advantages of providing a form of shared memory in a distributed system. These include Distributed Shared Memory (DSM) systems for supporting parallel programming <ref> [8, 20, 22] </ref>, and Persistent Object systems [1, 9, 12]. While our objectives are similar to these earlier systems, 64-bit architectures allow new approaches to shared memory and persistence to be investigated. There are three major issues to be resolved as a consequence of switching to a single address-space. <p> For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems <ref> [8, 20, 22] </ref>, or provide a shared memory service maintained by the kernel [14] or by user-level servers [6, 23]. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [23] <author> R. G. Minnich and D. J. Farber. </author> <title> The Mether system: Distributed shared memory for SunOS 4.0. </title> <booktitle> In Proceedings of the 1989 Summer USENIX Conference, </booktitle> <pages> pages 51-60, </pages> <year> 1989. </year>
Reference-contexts: For example, Mungi shares some attributes of distributed shared memory (DSM) systems. However, it is different in emphasis. Existing DSM systems are either distributed multiprocessor systems [8, 20, 22], or provide a shared memory service maintained by the kernel [14] or by user-level servers <ref> [6, 23] </ref>. Both classes of DSM systems are specialised to support multiprocessing applications, while our goal is to provide a general-purpose operating system built on top of the single address-space.
Reference: [24] <author> R. Morrison, A. L. Brown, R. Conner, and A. Dearle. </author> <title> Napier88 reference manual. Persistent Programming Research Report PPRR-77-89, </title> <institution> Universities of Glasgow and St. Andrews, </institution> <year> 1989. </year>
Reference-contexts: It has been observed [4] that typically 30% of the code of application programs only serves to convert between the structured, high-level representation for data in memory, and the flat, low-level representation required for long-term storage of data in file systems. Persistent programming systems like Napier88 <ref> [24] </ref> try to eliminate this overhead by allowing the long-term storage of structured data, but have been hampered by a lack of support from traditional operating systems. A SAOS, on the other hand, directly supports persistence.
Reference: [25] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29 </volume> <pages> 289-99, </pages> <year> 1986. </year>
Reference-contexts: This implements a mechanism similar to the UNIX set-uid service, and is discussed further in Section 4.6. A scheme to derive less powerful capabilities is also provided. This is similar to a method proposed for Amoeba <ref> [25] </ref> and is based on the use of one-way functions. When an object is created, the system derives a full set of capabilities from the owner capability and enters them into the OT.
Reference: [26] <author> R. Needham and R. Walker. </author> <title> The Cambridge CAP computer and its protection system. </title> <booktitle> Proceedings of the 6th ACM Symposium on OS Principles, </booktitle> <pages> pages 1-10, </pages> <year> 1977. </year>
Reference-contexts: The system provides a single shared virtual memory where pages are transparently distributed amongst the individual nodes. Mungi features a protection mechanism based on password capabilities [2] which does not require specialised hardware for efficient operation, unlike other capability systems <ref> [11, 26, 31] </ref>. The protection scheme allows users to easily define protection domains which may be extended or restricted as required, and includes a mechanism similar to the UNIX set-uid facility.
Reference: [27] <author> R. Needham and R. Walker. </author> <title> The Cambridge CAP computer and its protection system. </title> <booktitle> In ACM Symposium on OS Principles, </booktitle> <pages> pages 1-10, </pages> <year> 1977. </year>
Reference-contexts: To overcome these problems, we introduce an active protection domain (APD), which is a data structure defining the protection domain in which a process is executing. APDs are similar to local name spaces in HYDRA [11], and process resource lists in CAP <ref> [27] </ref>, and consist of an array of Clist and protection fault handler pointers held in the PCB.
Reference: [28] <author> E. I. Organick. </author> <title> The Multics System: an Examination of its Structure. </title> <publisher> MIT Press, </publisher> <year> 1972. </year>
Reference-contexts: As well, the DSM systems are of limited size and scope, and do not address the problem of node failure, or of how to provide effective protection and access control for shared memory. Mungi also shares some similarities with previous operating systems, such as Multics <ref> [28] </ref>, Locus [30], and Domain [19], which allowed portions of files to be mapped into process address spaces. In Mungi, all objects reside in the single shared address space, so no explicit mapping is required.
Reference: [29] <author> J. Ousterhout, H. Da Costa, D. Harrison, J. Kunze, M. Kupfer, and J. Thompson. </author> <title> A trace-driven analysis of the UNIX 4.2 BSD file system. </title> <booktitle> In Proceedings of the 10th ACM Symposium on OS Principles, </booktitle> <pages> pages 15-24, </pages> <year> 1985. </year> <month> 12 </month>
Reference-contexts: The simulations were driven by synthetic data based on statistics gathered from local UNIX file systems, whose distribution agreed with results of other studies <ref> [5, 29] </ref>. Our results show that the sparse multi-level page table quickly reaches a steady state where it consumes around 0.2% of the allocated memory, provided addresses are being reused (Figure 2).
Reference: [30] <author> G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, and G. Thiel. </author> <title> LOCUS: a network transparent, high reliability distributed system. </title> <booktitle> In Proceedings of the 8th ACM Symposium on OS Principles, </booktitle> <pages> pages 169-77, </pages> <year> 1981. </year>
Reference-contexts: As well, the DSM systems are of limited size and scope, and do not address the problem of node failure, or of how to provide effective protection and access control for shared memory. Mungi also shares some similarities with previous operating systems, such as Multics [28], Locus <ref> [30] </ref>, and Domain [19], which allowed portions of files to be mapped into process address spaces. In Mungi, all objects reside in the single shared address space, so no explicit mapping is required. The availability of sufficiently large address spaces today overcomes the limitations that constrained these earlier systems.
Reference: [31] <author> J. Rosenberg and D. Abramson. </author> <title> MONADS-PCa capability-based workstation to support software engineering. </title> <booktitle> In Proceedings of the 18th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 222-31. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: The system provides a single shared virtual memory where pages are transparently distributed amongst the individual nodes. Mungi features a protection mechanism based on password capabilities [2] which does not require specialised hardware for efficient operation, unlike other capability systems <ref> [11, 26, 31] </ref>. The protection scheme allows users to easily define protection domains which may be extended or restricted as required, and includes a mechanism similar to the UNIX set-uid facility. <p> The availability of sufficiently large address spaces today overcomes the limitations that constrained these earlier systems. More recently, other groups have also considered the design of large address-space operating systems. The Monads project <ref> [31, 17] </ref> was one of the first to investigate supporting a global virtual address space. The goal of the system was to provide direct support for software engineering principles such as modularisation and encapsulation using a specialised architecture.
Reference: [32] <author> J. Rosenberg and J. L. Keedy. </author> <title> Object management and addressing in the MONADS architecture. </title> <booktitle> In Proceedings of the 2nd International Workshop on Persistent Object Systems, </booktitle> <address> Appin, Scotland, 1987. </address> <publisher> IEEE. </publisher>
Reference-contexts: The simulations also indicate that under a no-reuse policy the page tables will continue to grow even when the total amount of allocated memory is not increasing. Our design allows addresses to be reused safely, unlike other approachs which rely on unique addresses <ref> [32] </ref>. Each time a portion of the address-space is reallocated, new passwords are assigned to protect the region (as described in Section 4), invalidating any dangling references. 2.3 Page Location Each allocated page has a unique owner, which is the node holding the master copy of the page.
Reference: [33] <author> M. Shapiro, Y. Gourhant, S. Habert, L. Mosseri, M. Ruffin, and C. Valot. </author> <title> SOS: an object-oriented operating system assessment and perspectives. </title> <journal> Computing Systems, </journal> <volume> 2(4) </volume> <pages> 287-338, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Accessing any data requires nothing more than issuing the appropriate address. This should be compared to existing distributed operating systems which typically offer different interfaces for accessing local and remote variables <ref> [9, 33, 35, 18] </ref>. The migration of data and processes is also greatly simplified, as addresses are location independent, and the environment a process sees does not depend on the node on which it is executing. Another advantage of a SAOS is its support for persistent programming systems.
Reference: [34] <author> A. S. Tanenbaum and S. Mullender. </author> <title> The design of a capability-based distributed operating system. </title> <type> Technical Report IR-88, </type> <institution> Vrije Universiteit, </institution> <month> November </month> <year> 1984. </year>
Reference-contexts: We are therefore investigating other methods of garbage management such as charging users for backing store via leases [15] or other economic models <ref> [34] </ref>. 4 Protection The potentially biggest problem associated with a single address-space is protection. In traditional operating systems, protection relies on the separation of address-spaces: since it is impossible for a process to address any object outside its own address-space, explicit system intervention is required to make such objects accessible.
Reference: [35] <author> A. Tanenbaum, R. van Renesse, H. van Staveren, G. Sharp, S. Mullender, J. Jansen, and G. van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33 </volume> <pages> 46-63, </pages> <year> 1990. </year>
Reference-contexts: Accessing any data requires nothing more than issuing the appropriate address. This should be compared to existing distributed operating systems which typically offer different interfaces for accessing local and remote variables <ref> [9, 33, 35, 18] </ref>. The migration of data and processes is also greatly simplified, as addresses are location independent, and the environment a process sees does not depend on the node on which it is executing. Another advantage of a SAOS is its support for persistent programming systems.
Reference: [36] <author> J. Vochteloo, S. Russell, and G. Heiser. </author> <title> Capability-based protection in the Mungi operating system. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems. IEEE, </booktitle> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Unlike Amoeba, an owner can also create new capabilities and remove existing ones, which allows selective revocation of object access. Further details on the derivation scheme are presented in <ref> [36] </ref>. 4.3 The Capability Tree Data structures are needed to allow users to store and manipulate their capabilities, as well as allowing the system to quickly find capabilities while validating a memory access. Ideally, these data structures should also reflect the user's intuitive view of the protection model.
References-found: 36

