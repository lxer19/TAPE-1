URL: http://www.cs.umd.edu/users/imm/Papers/Sigmetrics92.ps.gz
Refering-URL: http://www.cs.umd.edu/users/imm/publications.html
Root-URL: 
Email: shankar@cs.umd.edu ca@cs.umd.edu imm@cs.umd.edu kmd@cs.umd.edu  
Title: Performance Comparison of Routing Protocols using MaRS: Distance-Vector versus Link-State  
Author: A. Udaya Shankar Cengiz Alaettinoglu Ibrahim Matta Klaudia Dussa-Zieger 
Date: June 1992.  
Note: This work is supported in part by RADC and DARPA under contract F30602-90-C-0010 to UMIACS at the University of Maryland, and by National Science Foundation Grant No. NCR 89-04590. The views, opinions, and/or findings contained in this paper are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, RADC, or the U.S. Government. Computer facilities were provided in part by NSF grant CCR-8811954. Also with  c flTo appear in ACM SIGMETRICS/PERFORMANCE '92,  
Address: College Park, Maryland 20742  College Park, MD 20742.  Newport, Rhode Island,  
Affiliation: Department of Computer Science University of Maryland  Institute for Advanced Computer Studies, University of Maryland,  
Abstract: gorithms use O(N 2 ), where N is the number of nodes in the network and e is the average degree of a node. The ARPANET started with a distance-vector algorithm (Distributed Bellman-Ford), but because of long-lived loops, changed to a link-state algorithm (SPF). We show, using a recently developed network simulator, MaRS, that a newly proposed distance-vector algorithm (ExBF) performs as well as SPF. This suggests that distance-vector algorithms are appropriate for very large wide-area networks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Alaettinoglu, K. Dussa-Zieger, I. Matta, and A. U. Shankar. </author> <title> MaRS (Maryland Routing Simulator) - Version 1.0 User's Manual. </title> <type> Technical Report UMIACS-TR-91-80, </type> <institution> CS-TR-2687, Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Thus, a related question is: How critical is the link cost function? We examine both these questions in this paper using simulation studies. We use a recently developed simulator called MaRS (Maryland Routing Simulator) <ref> [1] </ref>. We consider three algorithms: SPF; Merlin-Segall, henceforth called MS; and Extended Bellman-Ford, henceforth called ExBF. We consider the NSFNET-backbone network with today's hardware as well as a future high-speed hardware. We consider varying uniform and skewed workloads and failure distributions. <p> The scheduling of events can be done using random number generators, a trace file, or both. MaRS is implemented in C on a UNIX environment. It has an optional graphical (X Window System) interface. It is available in public domain by anonymous ftp from ftp.cs.umd.edu <ref> [1] </ref>. MaRS was verified through a series of tests. We conducted simple experiments on small network topologies. We examined the simulation logs. Snapshots of different network parameters, such as routing tables, link costs and status, etc. were taken to verify the correct operation of the simulator.
Reference: [2] <author> D. Bertsekas and R. </author> <title> Gallager. </title> <booktitle> Data Networks, </booktitle> <pages> pages 297-333. </pages> <publisher> Prentice-Hall, Inc., </publisher> <year> 1987. </year>
Reference-contexts: However it is well known that the straight-forward distributed implementation of the Bellman-Ford algorithm can have long-lived loops giving rise to large dissemination times, e.g. of the order of distances <ref> [2] </ref>. The ARPANET initially used this Distributed Bellman-Ford algorithm. Because of its long dissemination time, it was replaced in 1979 by a link state algorithm referred to as SPF (Shortest Path First) [20]. At that time, the link cost was the same as the link delay. <p> For example, reference [9] considers a queueing system with two identical independent exponential servers and determines an optimal way to route incoming packets to one of the two servers based on their "instantaneous" queue sizes. Imposing more assumptions results in more tractable flow models <ref> [2, 10] </ref>. Here, each link is modeled by a capacity and propagation time, and the message traffic on the link is modeled by a continuous-valued flow, representing the average rate of the message traffic. The routing problem is then formulated as an optimization problem. <p> Typically, the solution procedure is iterative. Flow models have been used to study both link-state algorithms [3] and distance-vector algorithms [12]. A serious limitation of flow models is the assumption that flows are static (or quasi-static) <ref> [2] </ref>. 3 Overview of Routing Algo rithms and Link Cost Func tion In this paper, we are concerned with next-hop routing; that is each data packet has its destination node id, and each node (other than the destination) maintains a neighboring node id, referred to as next hop, to forward the <p> If this causes a change in a minimum distance, it sends the new minimum distance to its neighbors; if as a result a minimum distance of a neighbor changes, it repeats the process. The above distance-vector algorithm is the classical Distributed Bellman-Ford algorithm <ref> [2, 11] </ref>. It is well known that this algorithm, in addition to short-lived next hop loops, can have long-lived loops of duration proportional to link cost changes [23]. The new distance-vector algorithms have mechanisms to avoid long-lived loops. MS is a distance-vector algorithm which avoids both short-lived and long-lived loops.
Reference: [3] <author> D.P. Bertsekas. </author> <title> Dynamic behavior of shortest path routing algorithms for communication networks. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 27(1) </volume> <pages> 60-74, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: Typically, the solution procedure is iterative. Flow models have been used to study both link-state algorithms <ref> [3] </ref> and distance-vector algorithms [12].
Reference: [4] <author> C. Cassandras, M. V. Abidi, and D. Towsley. </author> <title> Distributed routing with on-line marginal delay estimation. </title> <booktitle> 38(3) </booktitle> <pages> 348-359, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: In general, some cost function D (f ik ) is optimized with respect to variables f ik , where f ik indicates the flow on link (i; k) and is subject to constraints such as conservation of flow and nonnegativity of flows <ref> [4] </ref>. Typically, the solution procedure is iterative. Flow models have been used to study both link-state algorithms [3] and distance-vector algorithms [12].
Reference: [5] <author> C. Cheng, R. Riley, S. P. R. Kumar, and J. J. Garcia-Luna-Aceves. </author> <title> A loop-free Bellman-Ford routing protocol without bouncing effect. </title> <booktitle> In ACM SIGCOMM '89, </booktitle> <pages> pages 224-237, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [21, 15, 5, 13, 23] </ref> which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. The Jaffe-Mosse algorithm [15], the DUAL algorithm by Garcia-Luna-Aceves [13], and the Extended Bellman-Ford algorithm by Cheng et al. <ref> [5] </ref> all have worst-case dissemination time of O (D) hop count. Although the last three algorithms have the same order of dissemination times in terms of hop count, in terms of real time they have successively smaller dissemination times because they impose successively weaker coordination constraints.
Reference: [6] <author> Wushow Chou, Arnold Bragg, and Arne Nilsson. </author> <title> The need for adaptive routing in the chaotic and unbalanced traffic. </title> <journal> IEEE Transactions on Communications, </journal> <year> 1981. </year>
Reference-contexts: SPF) [20] and its new link cost function (i.e. hop-normalized delay function) [18]. The tests showed that the new algorithm and cost function give better performance than the old ARPANET algorithm (i.e. Distributed Bellman-Ford) and the old delay function. Regarding simulation approaches, reference <ref> [6] </ref> concluded that an adaptive strategy is needed in a skewed workload environment. For SPF, it investigated the effects of the link cost function parameters and demonstrated optimal settings. In [25], the original and new ARPANET algorithms (i.e. <p> In the rest of this section, we describe the range of parameters exercised in our simulations and the performance measures obtained. Assumptions and parameters were predetermined either consistently with those made in the literature, e.g. [20] [18] [14] <ref> [6] </ref>, or from statistics provided by Merit/NSFNET Information Services, or by experimentation. Physical Network experiments. All links have the same bandwidth, 1.5Mbit/sec for the low-speed case, and 100Mbit/sec for the high-speed case. There are no link or node failures unless stated otherwise.
Reference: [7] <author> E. Dijkstra. </author> <title> A note on two problems in connection with graphs. </title> <journal> Numer. Math., </journal> <volume> 1 </volume> <pages> 269-271, </pages> <year> 1959. </year>
Reference-contexts: SPF is a link-state algorithm where (1) each node calculates and broadcasts the costs of its outgoing links periodically or whenever a failure/repair occurs, and (2) Dijkstra's shortest path algorithm <ref> [7] </ref> is applied to the view of the network topology to determine next hops. Distance-Vector Algorithms In the distance-vector approach, for each destination d, every node i maintains a set of distances fD i (j)g where j ranges over the neighbors of i.
Reference: [8] <author> E. Dijkstra and C. Scholten. </author> <title> Termination detection for diffusing computations. </title> <journal> Information Processing Letters, </journal> <volume> 11(1) </volume> <pages> 1-4, </pages> <year> 1980. </year>
Reference-contexts: For each destination, MS guarantees that the next hops on the nodes that can reach the destination form a tree rooted at the destination. MS attains loop-free paths by coordinating the next hop updates for each destination as a diffusion computation <ref> [8] </ref> which is started by the destination 1 . When a failure/repair occurs, a request message is sent to each destination. Periodically or upon receiving a request message, the destination starts a new computation. ExBF is another distance-vector algorithm which avoids long-lived loops (but not short-lived loops).
Reference: [9] <author> A. Ephremides, P. Varaiya, and J. Walrand. </author> <title> A simple dynamic routing problem. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 25(4) </volume> <pages> 690-693, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: The obvious analytical approach is to use a queueing network model where routing is based on delayed state information. Unfortunately, this is usually intractable. The usual approach is to ignore the delay (and averaging) in the feedback, leading to queueing control models formulated as Markovian decision process problems <ref> [9, 10] </ref>. Even then only simple topologies can be considered. For example, reference [9] considers a queueing system with two identical independent exponential servers and determines an optimal way to route incoming packets to one of the two servers based on their "instantaneous" queue sizes. <p> Unfortunately, this is usually intractable. The usual approach is to ignore the delay (and averaging) in the feedback, leading to queueing control models formulated as Markovian decision process problems [9, 10]. Even then only simple topologies can be considered. For example, reference <ref> [9] </ref> considers a queueing system with two identical independent exponential servers and determines an optimal way to route incoming packets to one of the two servers based on their "instantaneous" queue sizes. Imposing more assumptions results in more tractable flow models [2, 10].
Reference: [10] <author> A. Ephremides and S. Verdu. </author> <title> Control and optimization methods in communication network problems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 34(9) </volume> <pages> 930-942, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: The obvious analytical approach is to use a queueing network model where routing is based on delayed state information. Unfortunately, this is usually intractable. The usual approach is to ignore the delay (and averaging) in the feedback, leading to queueing control models formulated as Markovian decision process problems <ref> [9, 10] </ref>. Even then only simple topologies can be considered. For example, reference [9] considers a queueing system with two identical independent exponential servers and determines an optimal way to route incoming packets to one of the two servers based on their "instantaneous" queue sizes. <p> For example, reference [9] considers a queueing system with two identical independent exponential servers and determines an optimal way to route incoming packets to one of the two servers based on their "instantaneous" queue sizes. Imposing more assumptions results in more tractable flow models <ref> [2, 10] </ref>. Here, each link is modeled by a capacity and propagation time, and the message traffic on the link is modeled by a continuous-valued flow, representing the average rate of the message traffic. The routing problem is then formulated as an optimization problem.
Reference: [11] <author> L. Ford and D. Fulkerson. </author> <booktitle> Flows in Networks, </booktitle> <pages> pages 297-333. </pages> <publisher> Prentice-Hall, Inc., </publisher> <year> 1962. </year>
Reference-contexts: The dissemination time is small and proportional to D where D is the network diameter in hops (this requires that routing packets are given priority over data packets, which is usually the case, e.g. [20]). The distance-vector approach which is based on the Bellman-Ford algorithm <ref> [11] </ref> is more subtle: each node maintains for each destination a set of distances, one for each of its neighbors. It routes packets through a neighbor with the minimum distance. <p> If this causes a change in a minimum distance, it sends the new minimum distance to its neighbors; if as a result a minimum distance of a neighbor changes, it repeats the process. The above distance-vector algorithm is the classical Distributed Bellman-Ford algorithm <ref> [2, 11] </ref>. It is well known that this algorithm, in addition to short-lived next hop loops, can have long-lived loops of duration proportional to link cost changes [23]. The new distance-vector algorithms have mechanisms to avoid long-lived loops. MS is a distance-vector algorithm which avoids both short-lived and long-lived loops.
Reference: [12] <author> R. Gallager. </author> <title> A minimum delay routing algorithm using distributed computation. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-25(1):73-85, </volume> <month> January </month> <year> 1977. </year>
Reference-contexts: Typically, the solution procedure is iterative. Flow models have been used to study both link-state algorithms [3] and distance-vector algorithms <ref> [12] </ref>.
Reference: [13] <author> J.J. Garcia-Luna-Aceves. </author> <title> A unified approach to loop free routing using distance vectors or link states. </title> <booktitle> In ACM SIGCOMM '89, </booktitle> <pages> pages 212-223, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [21, 15, 5, 13, 23] </ref> which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. The Jaffe-Mosse algorithm [15], the DUAL algorithm by Garcia-Luna-Aceves <ref> [13] </ref>, and the Extended Bellman-Ford algorithm by Cheng et al. [5] all have worst-case dissemination time of O (D) hop count.
Reference: [14] <author> S. A. Heimlich. </author> <title> Traffic characterization of the NSFNET national backbone. </title> <booktitle> In Proc. USENIX `90, </booktitle> <pages> pages 207-227, </pages> <address> Washington, D.C., </address> <month> January </month> <year> 1990. </year>
Reference-contexts: In the rest of this section, we describe the range of parameters exercised in our simulations and the performance measures obtained. Assumptions and parameters were predetermined either consistently with those made in the literature, e.g. [20] [18] <ref> [14] </ref> [6], or from statistics provided by Merit/NSFNET Information Services, or by experimentation. Physical Network experiments. All links have the same bandwidth, 1.5Mbit/sec for the low-speed case, and 100Mbit/sec for the high-speed case. There are no link or node failures unless stated otherwise.
Reference: [15] <author> J. M. Jaffe and F.H. Moss. </author> <title> A responsive distributed routing algorithm for computer networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-30(7):1758-1762, </volume> <month> July </month> <year> 1982. </year>
Reference-contexts: Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [21, 15, 5, 13, 23] </ref> which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [21, 15, 5, 13, 23] which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. The Jaffe-Mosse algorithm <ref> [15] </ref>, the DUAL algorithm by Garcia-Luna-Aceves [13], and the Extended Bellman-Ford algorithm by Cheng et al. [5] all have worst-case dissemination time of O (D) hop count.
Reference: [16] <author> R. Jain and S.A. Routhier. </author> <title> Packet trains measurements and a new model for computer network traffic. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> SAC-4(6):986-995, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: However, we use only FTP workload because experience indicates that this is the major NSFNET application [17]). The workload is defined in terms of source-sink pairs which are attached to nodes. An FTP source produces data packets according to a packet-train model <ref> [16] </ref>; intuitively, each train corresponds to a connection. This workload model incorporates a static send window-based flow control mechanism and an acknowledgment-with-retransmission mechanism using roundtrip time estimates. Retransmissions can be due to node or link failures or buffer space limitation.
Reference: [17] <author> Dale Johnson. </author> <title> NSFnet report. </title> <booktitle> In Proc. of the Nineteenth Internet Engineering Task Force, </booktitle> <pages> pages 377-382, </pages> <institution> University of Colorado, National Center for Atmospheric Research, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: The routing algorithms are SPF, MS and ExBF. The workload is file transfer (FTP). (MaRS also implements remote login (TELNET), and a simple workload. However, we use only FTP workload because experience indicates that this is the major NSFNET application <ref> [17] </ref>). The workload is defined in terms of source-sink pairs which are attached to nodes. An FTP source produces data packets according to a packet-train model [16]; intuitively, each train corresponds to a connection.
Reference: [18] <author> A. Khanna and J. Zinky. </author> <title> A revised ARPANET routing metric. </title> <booktitle> In ACM SIGCOMM '89, </booktitle> <pages> pages 45-56, </pages> <month> Septem-ber </month> <year> 1989. </year>
Reference-contexts: At that time, the link cost was the same as the link delay. Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc <ref> [18] </ref>. Since 1979, many new kinds of distance-vector algorithms have been proposed [21, 15, 5, 13, 23] which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> There is previous work examining these algorithms individually, and we mention experimental, simulation, and analytic approaches. Regarding experimental approaches, a series of tests was performed on the ARPANET to evaluate its new routing algorithm (i.e. SPF) [20] and its new link cost function (i.e. hop-normalized delay function) <ref> [18] </ref>. The tests showed that the new algorithm and cost function give better performance than the old ARPANET algorithm (i.e. Distributed Bellman-Ford) and the old delay function. Regarding simulation approaches, reference [6] concluded that an adaptive strategy is needed in a skewed workload environment. <p> The difference between different link cost functions lies in how they compute the RawCost. In this paper, we use the hop normalized delay function of the ARPANET <ref> [18] </ref>. Here the transmitting node monitors the average packet delay (queueing and transmission) and average packet transmission time for the link during the last update period. From these, assuming an M=M=1 model, it calculates the utilization, which it uses as the raw cost. <p> In the rest of this section, we describe the range of parameters exercised in our simulations and the performance measures obtained. Assumptions and parameters were predetermined either consistently with those made in the literature, e.g. [20] <ref> [18] </ref> [14] [6], or from statistics provided by Merit/NSFNET Information Services, or by experimentation. Physical Network experiments. All links have the same bandwidth, 1.5Mbit/sec for the low-speed case, and 100Mbit/sec for the high-speed case. There are no link or node failures unless stated otherwise. <p> The link-cost update period is uniformly distributed with mean 10 seconds and standard deviation 1 second. (These values were obtained from [20] <ref> [18] </ref>, and experimentation.) In some experiments, we vary the movement limit, slope, and the link-cost update period.
Reference: [19] <author> L. Kleinrock. </author> <title> Queueing Systems, </title> <booktitle> Volume II: Computer Applications. </booktitle> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1976. </year>
Reference-contexts: Therefore, the network behaves more or less as a closed system and its behavior is typical of closed queueing networks <ref> [19] </ref>. Thus, in every scenario, as the workload is increased, the data load, throughput and delay follow the classical behavior. The data load and throughput first increase linearly, then level off as the system becomes saturated.
Reference: [20] <author> J. M. McQuillan, I. Richer, and E. C. Rosen. </author> <title> The new routing algorithm for the ARPANET. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-28(5):711-719, </volume> <month> May </month> <year> 1980. </year>
Reference-contexts: The dissemination time is small and proportional to D where D is the network diameter in hops (this requires that routing packets are given priority over data packets, which is usually the case, e.g. <ref> [20] </ref>). The distance-vector approach which is based on the Bellman-Ford algorithm [11] is more subtle: each node maintains for each destination a set of distances, one for each of its neighbors. It routes packets through a neighbor with the minimum distance. <p> The ARPANET initially used this Distributed Bellman-Ford algorithm. Because of its long dissemination time, it was replaced in 1979 by a link state algorithm referred to as SPF (Shortest Path First) <ref> [20] </ref>. At that time, the link cost was the same as the link delay. Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. <p> There is previous work examining these algorithms individually, and we mention experimental, simulation, and analytic approaches. Regarding experimental approaches, a series of tests was performed on the ARPANET to evaluate its new routing algorithm (i.e. SPF) <ref> [20] </ref> and its new link cost function (i.e. hop-normalized delay function) [18]. The tests showed that the new algorithm and cost function give better performance than the old ARPANET algorithm (i.e. Distributed Bellman-Ford) and the old delay function. <p> In the rest of this section, we describe the range of parameters exercised in our simulations and the performance measures obtained. Assumptions and parameters were predetermined either consistently with those made in the literature, e.g. <ref> [20] </ref> [18] [14] [6], or from statistics provided by Merit/NSFNET Information Services, or by experimentation. Physical Network experiments. All links have the same bandwidth, 1.5Mbit/sec for the low-speed case, and 100Mbit/sec for the high-speed case. There are no link or node failures unless stated otherwise. <p> The link-cost update period is uniformly distributed with mean 10 seconds and standard deviation 1 second. (These values were obtained from <ref> [20] </ref> [18], and experimentation.) In some experiments, we vary the movement limit, slope, and the link-cost update period.
Reference: [21] <author> P. M. Merlin and A. Segall. </author> <title> A failsafe distributed routing protocol. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-27(9):1280-1287, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [21, 15, 5, 13, 23] </ref> which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [21, 15, 5, 13, 23] which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm <ref> [21, 24] </ref> has a worst-case dissemination time of O (D 2 ) hop count. The Jaffe-Mosse algorithm [15], the DUAL algorithm by Garcia-Luna-Aceves [13], and the Extended Bellman-Ford algorithm by Cheng et al. [5] all have worst-case dissemination time of O (D) hop count.
Reference: [22] <author> D. J. Nelson, K. Sayood, and H. Chang. </author> <title> An extended least-hop distributed routing algorithm. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 38(4) </volume> <pages> 520-528, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: It was observed that a shorter link-cost update period should be used for higher data workload. In [26], an extension to SPF was proposed where alternate paths are used in case of congestion and failures. It was concluded that the proposed algorithm gives higher throughput than SPF. In <ref> [22] </ref>, multi-path extensions to SPF were shown to perform better. Here, each node finds the min hop and min plus 1 hop paths for every destination, estimates their delays and chooses between them accordingly.
Reference: [23] <author> B. Rajagopalan and M. Faiman. </author> <title> A new responsive distributed shortest-path routing algorithm. </title> <booktitle> In ACM SIG-COMM '89, </booktitle> <pages> pages 237-246, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Experience showed that this leads to unstable oscillations, and in 1987 it was replaced by a more slowly changing hop-normalized-delay function, which uses exponential averaging, movement limit, etc [18]. Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [21, 15, 5, 13, 23] </ref> which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm [21, 24] has a worst-case dissemination time of O (D 2 ) hop count. <p> The above distance-vector algorithm is the classical Distributed Bellman-Ford algorithm [2, 11]. It is well known that this algorithm, in addition to short-lived next hop loops, can have long-lived loops of duration proportional to link cost changes <ref> [23] </ref>. The new distance-vector algorithms have mechanisms to avoid long-lived loops. MS is a distance-vector algorithm which avoids both short-lived and long-lived loops. For each destination, MS guarantees that the next hops on the nodes that can reach the destination form a tree rooted at the destination.
Reference: [24] <author> A. Segal. </author> <title> Advances in verifiable fail-safe routing procedures. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-29(4):491-497, </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed [21, 15, 5, 13, 23] which achieve significantly reduced dissemination times by using node coordination mechanisms. The Merlin-Segall algorithm <ref> [21, 24] </ref> has a worst-case dissemination time of O (D 2 ) hop count. The Jaffe-Mosse algorithm [15], the DUAL algorithm by Garcia-Luna-Aceves [13], and the Extended Bellman-Ford algorithm by Cheng et al. [5] all have worst-case dissemination time of O (D) hop count.
Reference: [25] <author> W.T. Tsai, C. Ramamoorthy, W.K. Tsai, and O. Nishiguchi. </author> <title> An adaptive hierarchical routing protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38 </volume> <pages> 1059-1075, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Distributed Bellman-Ford) and the old delay function. Regarding simulation approaches, reference [6] concluded that an adaptive strategy is needed in a skewed workload environment. For SPF, it investigated the effects of the link cost function parameters and demonstrated optimal settings. In <ref> [25] </ref>, the original and new ARPANET algorithms (i.e. Distributed Bellman-Ford and SPF) were evaluated in a comparison with two hierarchical extensions to these algorithms. It was observed that a shorter link-cost update period should be used for higher data workload.
Reference: [26] <author> Z. Wang and J. Crowcroft. </author> <title> Shortest path first with emergency exits. </title> <booktitle> In ACM SIGCOMM '90, </booktitle> <pages> pages 166-176, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In [25], the original and new ARPANET algorithms (i.e. Distributed Bellman-Ford and SPF) were evaluated in a comparison with two hierarchical extensions to these algorithms. It was observed that a shorter link-cost update period should be used for higher data workload. In <ref> [26] </ref>, an extension to SPF was proposed where alternate paths are used in case of congestion and failures. It was concluded that the proposed algorithm gives higher throughput than SPF. In [22], multi-path extensions to SPF were shown to perform better.
Reference: [27] <author> W. Zaumen and J.J. Garcia-Luna-Aceves. </author> <title> Dynamics of distributed shortest-path routing algorithms. </title> <booktitle> In ACM SIGCOMM '91, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: It was concluded that the proposed algorithm gives higher throughput than SPF. In [22], multi-path extensions to SPF were shown to perform better. Here, each node finds the min hop and min plus 1 hop paths for every destination, estimates their delays and chooses between them accordingly. Reference <ref> [27] </ref> compared SPF, Distributed Bellman-Ford and DUAL algorithms with respect to measures such as number of paths with loops after a node/link change. However, it has no workload and assumes unit link delays and zero processing time at the nodes.
References-found: 27

