URL: http://www.cs.duke.edu/~pankaj/spring97/term/tavi.ps.gz
Refering-URL: http://www.cs.duke.edu/~pankaj/spring97/cps234.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Data Structures for Spatial Database Systems  
Author: Octavian Procopiuc 
Date: May 12, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. J. Abel and J. L. Smith. </author> <title> Data structure and algorithm based on a linear key for a rectangle retrieval problem. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 24(1) </volume> <pages> 1-13, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: one-dimensional point using a space-filling curve. 4.1 The Quad-CIF-tree The version of the quadtree that can be used for accessing non-point data is called the quad-CIF-tree (CIF stands for Caltech Intermediate Form) and was developed by Kedem [46] (a similar data structure was also independently developed by Abel and Smith <ref> [1] </ref>). A region is recursively partitioned using iso-oriented lines going through the center of the region, like in the region quadtree. The process stops when the resulting region does not contain any data rectangle in its entirety.
Reference: [2] <author> David J. Abel and David M. Mark. </author> <title> A comparative analysis of some two-dimensional orderings. </title> <journal> International Journal of Geographical Information Systems, </journal> <volume> 4(1) </volume> <pages> 12-31, </pages> <year> 1990. </year>
Reference-contexts: A brief discussion of such orderings in two dimensions can be found in [73] and in [22]. Examples include row-wise ordering, the Gray ordering [21], the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies <ref> [2] </ref> show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail. Faloutsos and Rong [20] proposed an indexing method that combines the two transformation techniques.
Reference: [3] <author> Walid G. Aref and Hanan Samet. </author> <title> The spatial filter revisited. </title> <booktitle> In Sixth International symposium on Spatial Data Handling, </booktitle> <volume> volume 1, </volume> <pages> pages 190-208, </pages> <address> Edinburgh, Scotland, </address> <year> 1994. </year>
Reference-contexts: predicates include * intersects () * contains () * is enclosed by () * distance () q; q 2 IR * adjacent () * north () 3 * meets () Spatial join is a very complex operation and is consequently much studied, in conjunction or not with indexing data structures <ref> [70, 3, 49, 14] </ref>. 2.4 Point vs. Non-Point Data Most of the data structures used for indexing spatial databases are built on a space-partitioning scheme.
Reference: [4] <author> J. Banerjee and W. Kim. </author> <title> Supporting VLSI geometry operations in a database system. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 409, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1986. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [5] <author> Bruno Becker, Paolo Giulio Franciosa, Stephan Gschwind, Thomas Ohler, Gerald Thiemt, and Peter Widmayer. </author> <title> Enclosing many boxes by an optimal pair of boxes. </title> <booktitle> In 9th Annual Symposium on Theoretical Aspects of Computer Science, volume 577 of lncs, </booktitle> <pages> pages 475-486, </pages> <address> Cachan, France, 13-15 February 1992. </address> <publisher> Springer. </publisher>
Reference-contexts: That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed <ref> [38, 28, 8, 5, 45] </ref>. The most successful seems to be the one proposed by Beckman et al. [8], part of their R*-tree.
Reference: [6] <author> L. A. Becker. </author> <title> A New Algorithm and a Cost Model for Join Processing with Grid Files. </title> <address> Siegen, 1 edition, </address> <year> 1992. </year>
Reference-contexts: For a more detailed theoretical analysis of the grid file see <ref> [68, 6] </ref>. A plethora of variants of the grid file were proposed in the literature. The EXCELL method was proposed independently of the grid file by Tam-minen and Sulonen [75].
Reference: [7] <author> D. A. Beckley, M. W. Evans, and V. K. Raman. </author> <title> Multikey retrieval from KD-trees and quad-trees. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <pages> pages 291-301, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [8] <author> Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, and Bernhard Seeger. </author> <title> The R*-tree: An efficient and robust access method for points and rectangles. </title> <editor> In Hector Garcia-Molina and H. V. Jagadish, editors, </editor> <booktitle> Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> 23-25 May </month> <year> 1990. </year>
Reference-contexts: That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed <ref> [38, 28, 8, 5, 45] </ref>. The most successful seems to be the one proposed by Beckman et al. [8], part of their R*-tree. <p> That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed [38, 28, 8, 5, 45]. The most successful seems to be the one proposed by Beckman et al. <ref> [8] </ref>, part of their R*-tree. The main idea is the concept of forced reinsert: when a node overflows, some of its children are deleted and reinserted, usually resulting in a better structured R-tree.
Reference: [9] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searc hing. </title> <journal> Commun. ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <year> 1975. </year>
Reference-contexts: The main drawback of all the quadtree variants is that they don't take into account second storage management. They were designed as main memory data structures and are not suitable for disk or tape storage management. 3.2 The k-d-tree The k-d-tree was designed by Bentley <ref> [9, 10] </ref> for indexing multi-attribute data. Similar to the quadtree, it recursively subdivides the space into subspaces using iso-oriented hyperplanes. However, in contrast with the k-dimensional quadtrees where the space was divided in 2 k parts at each node, here the space is divided in two, using one hyperplane.
Reference: [10] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees in database applications. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> SE-5:333-340, </volume> <year> 1979. </year>
Reference-contexts: The main drawback of all the quadtree variants is that they don't take into account second storage management. They were designed as main memory data structures and are not suitable for disk or tape storage management. 3.2 The k-d-tree The k-d-tree was designed by Bentley <ref> [9, 10] </ref> for indexing multi-attribute data. Similar to the quadtree, it recursively subdivides the space into subspaces using iso-oriented hyperplanes. However, in contrast with the k-dimensional quadtrees where the space was divided in 2 k parts at each node, here the space is divided in two, using one hyperplane.
Reference: [11] <author> J. L. Bentley and J. H. Friedman. </author> <title> Data structures for range searching. </title> <journal> ACM Comput. Surv., </journal> <volume> 11 </volume> <pages> 397-409, </pages> <year> 1979. </year>
Reference-contexts: Each splitting hyperplane (line in two dimensions) has to contain one data point, corresponding to an interior node. While the searching and inserting operations are straightforward, deletion may cause a reorganization of 5 the whole subtree below the deleted point. To alleviate this problem, Bent--ley and Friedman <ref> [11] </ref> proposed an adaptive k-d-tree which splits evenly the points at each level, allowing the splitting hyperplanes to not contain a data point. As a result, all data points are stored in the leaves.
Reference: [12] <author> Stefan Berchtold, Daniel A. Keim, and Hans-Peter Kriegel. </author> <title> The x-tree: An index structure for high-dimensional data. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <pages> pages 28-39, </pages> <year> 1996. </year>
Reference-contexts: They also introduced a new splitting algorithm which takes into consideration not only the area as in Guttman's R-tree, but also the perimeter of the overlap of the regions. Recently, Berchtold et al. <ref> [12] </ref> proposed a modification of the R-tree| the X-tree|that seems particularly well suited for indexing high-dimensional data. The X-tree reduces the overlap between regions by using a new organization: it postpones node splitting by introducing supernodes, i.e., nodes larger than the usual page size.
Reference: [13] <author> T. Brinkhoff, H.-P. Kriegel, and R. Schneider. </author> <title> Comparison of approximations of complex objects used for approximation-based query processing in spatial database systems. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 40-49, </pages> <address> Los Alami-tos, Ca., USA, April 1993. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 16 </pages>
Reference-contexts: The most common such approximation is the minimum bounding box (MBB), the smallest d-dimensional interval that includes the whole object. In two dimensions, it is also termed the minimum bounding rectangle (MBR). A discussion of various types of approximations can be found in <ref> [13] </ref>. Methods based on overlapping regions The overlapping regions technique divides the space into regions that are allowed to overlap. This way, an object can be included in its entirety in a region. This scheme has a number of consequences. First, each object has to be stored only once.
Reference: [14] <author> Thomas Brinkhoff, Hans-Peter Kriegel, and Bernhard Seeger. </author> <title> Efficient processing of spatial joins using R-trees. </title> <editor> In Peter Buneman and Sushil Jajodia, editors, </editor> <booktitle> Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 237-246, </pages> <address> Washington, D.C., </address> <month> 26-28 May </month> <year> 1993. </year>
Reference-contexts: predicates include * intersects () * contains () * is enclosed by () * distance () q; q 2 IR * adjacent () * north () 3 * meets () Spatial join is a very complex operation and is consequently much studied, in conjunction or not with indexing data structures <ref> [70, 3, 49, 14] </ref>. 2.4 Point vs. Non-Point Data Most of the data structures used for indexing spatial databases are built on a space-partitioning scheme.
Reference: [15] <author> R. V. Carlone. </author> <title> Nasa's eosdis development approach. </title> <type> Technical report, </type> <institution> United States General Accounting Office, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: Second, spatial data is usually dynamic. Objects are inserted, deleted, or updated dynamically, so the access data structures must support these operations efficiently. Third, spatial data tends to be very large. GIS systems handle nowadays terabytes of data <ref> [15] </ref>. It is therefore essential to handle efficiently transfers from secondary and tertiary storage. Fourth, there is no standard algebra on spatial 2 data, although several proposals have been made [35, 37]. This implies that there is no standard set of operators.
Reference: [16] <author> Jo-Mei Chang and King-Sun Fu. </author> <title> Extended K-d tree database organization: A dynamic multiattribute clustering method. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7(3) </volume> <pages> 284-290, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [17] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Comput. Surv., </journal> <volume> 11 </volume> <pages> 121-137, </pages> <year> 1979. </year>
Reference-contexts: To address this problem, Robinson [69] proposed the k-d-B-tree. 3.3 The k-d-B-Tree As its name sugests, the k-d-B-tree [69] combines the features of the k-d-tree and the B-tree <ref> [17] </ref>. It uses the adaptive k-d-tree variant, which stores the points in the leaf nodes. A non-leaf node stores the description of subspaces in which the current space has to be split. Like in the B-tree, a node is stored in a disk page. <p> It was originally proposed by Guttman [38] and is a hierarchical data structure similar to the B-tree <ref> [17] </ref>. Like in the B-tree, each internal node of an R-tree has a big fanout. In order to guarantee a minimum storage utilization, a minimum bound m is imposed on the fanout of each internal node.
Reference: [18] <author> G. Evangelidis, D. Lomet, and B. Salzberg. </author> <title> The hb -tree: a multi-attribute index supporting concurrency, recovery and node consolidation. </title> <journal> The VLDB Journal, </journal> <volume> 6 </volume> <pages> 1-25, </pages> <year> 1997. </year>
Reference-contexts: Lomet and Salzberg [51] proved that such a split guarantees a data distribution to the two new k-d-trees of 1/3:2/3 in the worst case, guaranteeing a 33% minimum space utilization. In a recent paper <ref> [18] </ref>, the hB-tree has been extended to support con-currency and recovery. The hB-tree has been modified to become a special case of the -tree [50], which is an abstract index offering efficient concur-rency and recovery methods. Consequently, the new data structure is called hB -tree.
Reference: [19] <author> Ronald Fagin, Jurg Nievergelt, Nicholas Pippenger, and H. Raymond Strong. </author> <title> Extendible hashing | a fast access method for dynamic files. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(3) </volume> <pages> 315-344, </pages> <month> September </month> <year> 1979. </year> <note> Also published in/as: IBM Research Report RJ2305, </note> <month> Jul. </month> <year> 1978. </year>
Reference-contexts: and recovery support, it can also take advantage of the -tree node consolidation algorithm, insuring good storage utilization. 3.5 The Grid file While all previous data structures are based on the binary search tree, the grig file, introduced by Nievergelt et al. [57], is an extension of dynamic hashed organizations <ref> [19] </ref>. The original version of the structure partitions the space using a d-dimensional orthogonal grid. The grid is not necessarily regular, resulting in different size cells. The actual data structure has two components: the scales and the directory.
Reference: [20] <author> C. Faloutsos and Y. Rong. </author> <title> DOT: A spatial access method using fractals. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 152-159, </pages> <address> Los Alamitos, Ca., USA, April 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Examples include row-wise ordering, the Gray ordering [21], the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies [2] show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail. Faloutsos and Rong <ref> [20] </ref> proposed an indexing method that combines the two transformation techniques.
Reference: [21] <author> Christos Faloutsos. </author> <title> Multiattribute hashing using gray codes. </title> <editor> In Carlo Zaniolo, editor, </editor> <booktitle> Proceedings of the 1986 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 227-238, </pages> <address> Washington, D.C., </address> <month> 28-30 May </month> <year> 1986. </year>
Reference-contexts: A brief discussion of such orderings in two dimensions can be found in [73] and in [22]. Examples include row-wise ordering, the Gray ordering <ref> [21] </ref>, the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies [2] show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail.
Reference: [22] <author> Christos Faloutsos and Shari Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> In SIGART ACM SIGACT, SIGMOD, editor, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS '89), </booktitle> <pages> pages 247-252, </pages> <address> Philadelphia, PA, USA, March 1989. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Unfortunately, there is no total order that preserves spatial proximity, so people have tried to find heuristics that preserve spatial proximity at least to some extent. A brief discussion of such orderings in two dimensions can be found in [73] and in <ref> [22] </ref>. Examples include row-wise ordering, the Gray ordering [21], the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies [2] show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail. <p> A brief discussion of such orderings in two dimensions can be found in [73] and in <ref> [22] </ref>. Examples include row-wise ordering, the Gray ordering [21], the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies [2] show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail. Faloutsos and Rong [20] proposed an indexing method that combines the two transformation techniques.
Reference: [23] <author> Ysmar V. Silva Filho. </author> <title> Optimal choice of discriminators in a balanced k-d binary search tree. </title> <journal> Information Processing Letters, </journal> <volume> 13(2) </volume> <pages> 67-70, </pages> <month> 13 November </month> <year> 1981. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [24] <author> R. A. Finkel and J. L. Bentley. </author> <title> Quad trees: A data structure for retrieval by composite key. </title> <journal> Acta Informatica, </journal> <volume> 4(1) </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference-contexts: Another variant, governed by the position of the input points rather than symmetry, is called point quadtree and was proposed by Finkel and Bentley <ref> [24] </ref>. The point quadtree can be viewed as being constructed iteratively by inserting the data points one by one. A search is performed first for each point.
Reference: [25] <author> H. Fuchs, Z. M. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Comput. Graph., </journal> <volume> 14(3) </volume> <pages> 124-133, </pages> <year> 1980. </year> <note> Proc. SIGGRAPH '80. </note>
Reference-contexts: It was designed by Gunther [34, 30] in order to facilitate searches on objects of arbitrary shapes. The idea comes from the Binary Space Partition (BSP) trees <ref> [25] </ref>, which are binary trees that represent a recursive subdivision of the space into disjoint convex subspaces using arbitrary lines. Also, to efficiently store the tree on disk, ideas from the R + -tree were used.
Reference: [26] <author> V. </author> <title> Gaede. Optimal redundancy in spatial database systems. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 951:96-??, </address> <year> 1995. </year>
Reference-contexts: As it can be seen, odd bit positions correspond to vertical lines, and even bit positions correspond to horizontal lines, which is why this scheme is also called bit-interleaving. For a discussion on how much granularity is needed and other details on the z-ordering method, see <ref> [64, 26] </ref>. The z-ordering techniques is one of the few spatial access methods that have been implemented in a commercial database system [42]. 5 Conclusions As we have seen, access data structures for spatial databases form an active research area that spans more than two decades.
Reference: [27] <author> V. Gaede and O. Gunther. </author> <title> Multidimensional access methods. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: It supports spatial data types in its implementation, providing at least spatial indexing and efficient algorithms for spatial join. 2.2 Properties of Spatial Data To get a better understanding of the requirements in spatial database systems, let us discuss some basic properties of spatial data, as they are emphasized in <ref> [27] </ref>. First, spatial data has a complex structure. A spatial object can be a point, a line, a polygon, or a combination of these. This is one of the reasons spatial data cannot be stored in relational databases, which have fixed tuple size. <p> The intersection of polygons might return a combination of points, segments, and polygons. 2.3 Types of Queries Like in the relational databases world, there are two classes of operators that are applied to a spatial database: selection and join. Examples of spatial selection queries, as described in <ref> [27] </ref>, are given below. Exact Match Query or Object Query Given an object o, find all objects with the same spatial extent as o. Point Query Given a point p, find all objects containing p.
Reference: [28] <author> D. Greene. </author> <title> An implementation and performance analysis of spatial data access methods. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> pages 606-615, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed <ref> [38, 28, 8, 5, 45] </ref>. The most successful seems to be the one proposed by Beckman et al. [8], part of their R*-tree. <p> When such a leaf remains with too few entries, we need to merge it with its siblings, which is not always possible. This is another reason why R + -trees cannot guarantee a minimum storage utilization. A performance comparison conducted by Grene <ref> [28] </ref> shows that R + -trees perform better than R-trees for small objects and slightly worse for large objects. 4.4 The skd-tree The skd-tree or spatial k-d-tree [61, 63] is a variant of the k-d-tree (see Section 3.2) capable of storing non-point objects.
Reference: [29] <author> O. Guenther and A. Buchmann. </author> <title> Research issues in spatial databases. </title> <booktitle> SIGMOD Record (ACM Special Interest Group on Management of Data), </booktitle> <volume> 19(4) </volume> <pages> 61-68, </pages> <month> Decem-ber </month> <year> 1990. </year>
Reference-contexts: It is mainly used to treat the storing and data management problems specific to GIS in a more abstract setting, allowing other areas to benefit also. Gunther and Buchmann <ref> [29] </ref> define spatial databases as databases containing n-dimensional data with explicit knowledge about objects, their extent and position in space.
Reference: [30] <author> O. Gunther. </author> <title> The cell tree: An object-oriented index structure for geometric databases. </title> <booktitle> In Proc. 5th IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> pages 598-605, </pages> <address> Los An-geles, CA, </address> <month> February </month> <year> 1989. </year> <month> 17 </month>
Reference-contexts: If a page becomes empty, it has to be removed from the structure. No merging is attempted. 4.6 The Cell Tree While all the data structures presented so far use isolines to divide the space, the cell tree use any line for partitioning. It was designed by Gunther <ref> [34, 30] </ref> in order to facilitate searches on objects of arbitrary shapes. The idea comes from the Binary Space Partition (BSP) trees [25], which are binary trees that represent a recursive subdivision of the space into disjoint convex subspaces using arbitrary lines.
Reference: [31] <author> O. Gunther and J. Bilmes. </author> <title> Tree-based access methods for spatial databases: Im--plementation and performance evaluation. </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> 3(3) </volume> <pages> 342-356, </pages> <year> 1991. </year>
Reference-contexts: Since objects are approximated by sets of polygons, there is no upper bound on the space used by a cell tree. Concerning time performance, Gunther and Bilmes <ref> [31] </ref> claim that the cell tree is competitive with the R*-tree. To overcome the negative effects of fragmentation and duplication, inherent in all data structures based on clipping, Gunther and Noltemeier [33] proposed the concept of oversize shelves.
Reference: [32] <author> O. Gunther and V. Gaede. Oversize shelves: </author> <title> A storage management technique for large spatial data objects. </title> <journal> Int. J. Geographical Information Systems, </journal> <volume> 10(8), </volume> <year> 1996. </year>
Reference-contexts: Oversize shelves are disk pages attached to an interior node and which would have been otherwise split into too many fragments. In a recent paper, Gunther and Gaede <ref> [32] </ref> report important performance improvements over cell trees without oversize shelves. 4.7 Z-ordering The first step in obtaining the z-ordering representation of the data set is to partition the space recursively using alternatively vertical and horizontal lines that cut the space in equal sizes (the original space is rectangular).
Reference: [33] <author> O. Gunther and H. Noltemeier. </author> <title> Spatial database indices for large extended objects. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 520-529, </pages> <address> Los Alamitos, Ca., USA, April 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Concerning time performance, Gunther and Bilmes [31] claim that the cell tree is competitive with the R*-tree. To overcome the negative effects of fragmentation and duplication, inherent in all data structures based on clipping, Gunther and Noltemeier <ref> [33] </ref> proposed the concept of oversize shelves. Oversize shelves are disk pages attached to an interior node and which would have been otherwise split into too many fragments.
Reference: [34] <author> Oliver Gunther. </author> <title> Efficient structures for geometric data management, </title> <booktitle> volume 337 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag Inc., </publisher> <address> New York, NY, USA, </address> <year> 1988. </year> <note> "Revised and extended version of a Ph. D. </note> <institution> dissertation submitted to the Department of Electrical Engineering and Computer Sciences, University of California at Berkeley"-Pref. </institution>
Reference-contexts: If a page becomes empty, it has to be removed from the structure. No merging is attempted. 4.6 The Cell Tree While all the data structures presented so far use isolines to divide the space, the cell tree use any line for partitioning. It was designed by Gunther <ref> [34, 30] </ref> in order to facilitate searches on objects of arbitrary shapes. The idea comes from the Binary Space Partition (BSP) trees [25], which are binary trees that represent a recursive subdivision of the space into disjoint convex subspaces using arbitrary lines.
Reference: [35] <author> R. H. Guting. </author> <title> Gral: An extensible relational database system for geometric applications. </title> <booktitle> In Proceedings of the 15th Conference on Very Large Databases, </booktitle> <publisher> Morgan Kaufman pubs. </publisher> <address> (Los Altos CA), Amsterdam, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Third, spatial data tends to be very large. GIS systems handle nowadays terabytes of data [15]. It is therefore essential to handle efficiently transfers from secondary and tertiary storage. Fourth, there is no standard algebra on spatial 2 data, although several proposals have been made <ref> [35, 37] </ref>. This implies that there is no standard set of operators. The set of operators depends greatly on the specific application, although there are some common operators (like intersection). Fifth, many spatial operators are not closed.
Reference: [36] <author> Ralf Hartmut Guting. </author> <title> An introduction to spatial database systems. </title> <journal> VLDB Journal, </journal> <volume> 3(4) </volume> <pages> 357-400, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: The goal of the paper is not to exhaustively describe all the data structures in the literature, but to discuss the most prominent ones, and to give references to further literature. Several surveys have been published, describing the state-of-the-art at the moment of publication <ref> [73, 62, 36] </ref>. The rest of the paper is organized in three parts. Section 2 gives a more formal definition of a spatial database and describes the types of spatial 1 queries. <p> They point out that this definition excludes the so-called image databases, which place less emphasis on the need for analyzing the data, but provide storage and retrieval for unanalyzed pictorial data (like in multimedia, DNA analysis, medical diagnosis). Later, Guting <ref> [36] </ref> refines the above definition and presents it in a more formal context: 1. A spatial database system is a database system; 2. It offers spatial data types in its data model and query language; 3.
Reference: [37] <author> Ralf Hartmut Guting and Markus Schneider. </author> <title> Realm-based spatial data types: The ROSE algebra. </title> <journal> The VLDB Journal, </journal> <volume> 4(2) </volume> <pages> 243-286, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Third, spatial data tends to be very large. GIS systems handle nowadays terabytes of data [15]. It is therefore essential to handle efficiently transfers from secondary and tertiary storage. Fourth, there is no standard algebra on spatial 2 data, although several proposals have been made <ref> [35, 37] </ref>. This implies that there is no standard set of operators. The set of operators depends greatly on the specific application, although there are some common operators (like intersection). Fifth, many spatial operators are not closed.
Reference: [38] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM SIGACT-SIGMOD Conf. Principles Database Systems, </booktitle> <pages> pages 569-592, </pages> <year> 1984. </year>
Reference-contexts: The quad-CIF-tree has the drawbacks of all the quadtree variants: it 10 can be quite unbalanced, and it doesn't perform well when stored on disk. 4.2 The R-tree The R-tree, with its variants, is the most used data structure for indexing spatial databases. It was originally proposed by Guttman <ref> [38] </ref> and is a hierarchical data structure similar to the B-tree [17]. Like in the B-tree, each internal node of an R-tree has a big fanout. In order to guarantee a minimum storage utilization, a minimum bound m is imposed on the fanout of each internal node. <p> That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed <ref> [38, 28, 8, 5, 45] </ref>. The most successful seems to be the one proposed by Beckman et al. [8], part of their R*-tree.
Reference: [39] <author> K. Hinrichs. </author> <title> Implementation of the grid file: Design concepts and experience. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 569-592, </pages> <year> 1985. </year>
Reference-contexts: The EXCELL method was proposed independently of the grid file by Tam-minen and Sulonen [75]. Unlike the grid file, though, it decomposes the space regularly, which simplifies considerably the scales, but decreases the performance of insertions and deletions. The two-level grid file, proposed by Hinrichs <ref> [39] </ref>, uses a second grid file to manage the grid directory. To improve the low storage utilization of grid files, Hutflesz, Six and Widmayer [41, 40] designed the twin grid file, which uses two grid files for the same data space, in a non-hierarchical organization.
Reference: [40] <author> A. Hutflesz, H.-W. Six, and P. Widmayer. </author> <title> The twin grid file: A nearly space optimal index structure. </title> <editor> In M. Missikoff J.W. Schmidt, S. Ceri, editor, </editor> <booktitle> Proceedings of the International Conference on Extending Database Technology (EDBT '88), volume 303 of LNCS, </booktitle> <pages> pages 352-363, </pages> <address> Venice, Italy, March 1988. </address> <publisher> Springer. </publisher>
Reference-contexts: The two-level grid file, proposed by Hinrichs [39], uses a second grid file to manage the grid directory. To improve the low storage utilization of grid files, Hutflesz, Six and Widmayer <ref> [41, 40] </ref> designed the twin grid file, which uses two grid files for the same data space, in a non-hierarchical organization. None of these methods brings important performance improvements. 4 Data Structures for Non-Point Data Spatial databases used in GIS and CAD contain objects that have spatial extent: polygons, lines.
Reference: [41] <author> Andreas Hutflesz, Hans-Werner Six, and Peter Widmayer. </author> <title> Twin grid files: Space optimizing access schemes. </title> <editor> In Haran Boral and Per ke Larson, editors, </editor> <booktitle> Proceedings of the 1988 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 183-190, </pages> <address> Chicago, Illinois,, </address> <month> 1-3 June </month> <year> 1988. </year>
Reference-contexts: The two-level grid file, proposed by Hinrichs [39], uses a second grid file to manage the grid directory. To improve the low storage utilization of grid files, Hutflesz, Six and Widmayer <ref> [41, 40] </ref> designed the twin grid file, which uses two grid files for the same data space, in a non-hierarchical organization. None of these methods brings important performance improvements. 4 Data Structures for Non-Point Data Spatial databases used in GIS and CAD contain objects that have spatial extent: polygons, lines.
Reference: [42] <author> Oracle Inc. </author> <title> Oracle 7 multidimension: Advances in relational database technology for spatial data management, </title> <note> 1995. White Paper. </note>
Reference-contexts: For a discussion on how much granularity is needed and other details on the z-ordering method, see [64, 26]. The z-ordering techniques is one of the few spatial access methods that have been implemented in a commercial database system <ref> [42] </ref>. 5 Conclusions As we have seen, access data structures for spatial databases form an active research area that spans more than two decades.
Reference: [43] <author> H. V. Jagadish. </author> <title> Spatial search with polyhedra. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 311, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: Second, a point query may not be a single-path traversal. Third, the performance of such a data structure depends crucially on the region-splitting procedure. 8 Examples of methods based on overlapping regions include the R-tree (section 4.2), the skd-tree (section 4.4), the GBD-tree [60], the P-tree <ref> [43] </ref>. Methods based on clipping Clipping-based methods divide the space in regions that are mutually disjoint. As a result, objects have to be split into fragments that fit in such regions, meaning that an object reference may be stored in many places (object duplication).
Reference: [44] <author> Vinit Jain and Ben Shneiderman. </author> <title> Data structures for dynamic queries: An analytical and experimantal evaluation. </title> <type> Technical Report CS-TR-3133, </type> <institution> Human Computer Interaction Laboratory Center for Automation Research Dept. of Computer Science, Univ. of Maryland Institute for Systems Research, College Park, MD, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [45] <author> I. Kamel and C. Faloutsos. Hilbert R-tree: </author> <title> An improved R-tree using fractals. </title> <editor> In Jorgeesh Bocca, Matthias Jarke, and Carlo Zaniolo, editors, </editor> <booktitle> 20th International Conference on Very Large Data Bases, </booktitle> <month> September 12-15, </month> <year> 1994, </year> <title> Santiago, </title> <booktitle> Chile proceedings, </booktitle> <pages> pages 500-509, </pages> <address> Los Altos, CA 94022, USA, 1994. </address> <publisher> Morgan Kaufmann Publishers. </publisher> <pages> 18 </pages>
Reference-contexts: That's why it is essential that overlapping regions be small. This is determined by the split strategy 11 when an insertion results in overflow. Several heuristics have been pro-posed <ref> [38, 28, 8, 5, 45] </ref>. The most successful seems to be the one proposed by Beckman et al. [8], part of their R*-tree.
Reference: [46] <author> G. Kedem. </author> <title> The quad-CIF tree: A data structure for hierarchical on-line algorithms. </title> <booktitle> In ACM IEEE Nineteenth Design Automation Conference Proceedings, </booktitle> <pages> pages 352-357, </pages> <address> Los Alamitos, Ca., USA, June 1982. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: mapped into an nk-dimensional point, and then this point is mapped into a one-dimensional point using a space-filling curve. 4.1 The Quad-CIF-tree The version of the quadtree that can be used for accessing non-point data is called the quad-CIF-tree (CIF stands for Caltech Intermediate Form) and was developed by Kedem <ref> [46] </ref> (a similar data structure was also independently developed by Abel and Smith [1]). A region is recursively partitioned using iso-oriented lines going through the center of the region, like in the region quadtree. The process stops when the resulting region does not contain any data rectangle in its entirety. <p> Every data rectangle is stored only once, the first time it crosses a division line. Since there may be many data rectangles stored in a node, an efficient method for storing them is needed. Kedem <ref> [46] </ref> uses two binary trees, corresponding to the two division lines. These binary trees are one-dimensional analogs of the quad-CIF-tree. One-dimensional analogs of other types of quadtrees can also be used [73].
Reference: [47] <author> A. Klinger. </author> <title> Patterns and search statistics. </title> <editor> In J. S. Rustagi, editor, </editor> <booktitle> Optimizing Methods in Statistics, </booktitle> <pages> pages 303-337. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: As already mentioned, there are numerous variants of the basic definition. One of the oldest, the region quadtree, is the one described above, when the rectangles are decomposed in equal parts (i.e., a regular decomposition), and was first used by Morton [54] and Klinger <ref> [47] </ref>. Another variant, governed by the position of the input points rather than symmetry, is called point quadtree and was proposed by Finkel and Bentley [24]. The point quadtree can be viewed as being constructed iteratively by inserting the data points one by one.
Reference: [48] <author> K. Knowlton. </author> <title> Progressive transmission of grey-scale and binary pictures by simple, efficient, and lossless encoding schemes. </title> <booktitle> In Proceedings of the IEEE 68, </booktitle> <pages> pages 885-896, </pages> <year> 1980. </year>
Reference-contexts: The structure performs best when the nodes are known a priori and few updates are made after its creation. The equivalent of the region quadtree in the k-d-tree spectrum is termed the bintree <ref> [48, 76] </ref>. It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori.
Reference: [49] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Spatial joins using seeded trees. </title> <editor> In Richard T. Snodgrass and Marianne Winslett, editors, </editor> <booktitle> Proceedings of the 1994 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 209-220, </pages> <address> Min-neapolis, Minnesota, </address> <month> 24-27 May </month> <year> 1994. </year>
Reference-contexts: predicates include * intersects () * contains () * is enclosed by () * distance () q; q 2 IR * adjacent () * north () 3 * meets () Spatial join is a very complex operation and is consequently much studied, in conjunction or not with indexing data structures <ref> [70, 3, 49, 14] </ref>. 2.4 Point vs. Non-Point Data Most of the data structures used for indexing spatial databases are built on a space-partitioning scheme.
Reference: [50] <author> D. Lomet and B. Salzberg. </author> <title> Access method concurrency with recovery. </title> <editor> In M. Stone-braker, editor, </editor> <booktitle> sigmod, </booktitle> <volume> volume 21, </volume> <pages> pages 351-360, </pages> <address> San Diego, California, June 1992. </address> <publisher> acm, Acm Press. </publisher>
Reference-contexts: In a recent paper [18], the hB-tree has been extended to support con-currency and recovery. The hB-tree has been modified to become a special case of the -tree <ref> [50] </ref>, which is an abstract index offering efficient concur-rency and recovery methods. Consequently, the new data structure is called hB -tree.
Reference: [51] <author> D. B. Lomet and B. Salzberg. </author> <title> A robust multi-attribute search structure. </title> <booktitle> In Proceedings of the Fifth International Conference on Data Engineering, </booktitle> <pages> pages 296-304, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: To alleviate this, some local reorganization can be performed. The main drawback of the k-d-B-tree is that no minimum space utilization is guaranteed. 6 3.4 The hB-Tree The hB-tree, introduced by Lomet and Salzberg <ref> [51, 52] </ref>, evolved from the k-d-B-tree and its weakness: the possibility of sparse nodes at lower levels. The term hB-tree stands for "holey brick B-tree". A brick is a hyperrectangle and a holey brick [59] is a brick from which one or more smaller bricks may have been extracted. <p> The nodes in an hB-tree are organized as k-d-trees and correspond to holey bricks. The reason such peculiar regions appear is that node splitting is based on multiple atributes and on the internal k-d-tree of the data node to be split. Lomet and Salzberg <ref> [51] </ref> proved that such a split guarantees a data distribution to the two new k-d-trees of 1/3:2/3 in the worst case, guaranteeing a 33% minimum space utilization. In a recent paper [18], the hB-tree has been extended to support con-currency and recovery.
Reference: [52] <author> David B. Lomet and Betty Salzberg. </author> <title> The hB-Tree: A multiattribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: To alleviate this, some local reorganization can be performed. The main drawback of the k-d-B-tree is that no minimum space utilization is guaranteed. 6 3.4 The hB-Tree The hB-tree, introduced by Lomet and Salzberg <ref> [51, 52] </ref>, evolved from the k-d-B-tree and its weakness: the possibility of sparse nodes at lower levels. The term hB-tree stands for "holey brick B-tree". A brick is a hyperrectangle and a holey brick [59] is a brick from which one or more smaller bricks may have been extracted.
Reference: [53] <author> Takashi Matsuyama, Le Viet Hao, and Makoto Nagao. </author> <title> A file organization for geographic information systems based on spatial proximity. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 26(3) </volume> <pages> 303-318, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node. <p> According to the results reported in [62, 63], the skd-tree performs similarly to the R-tree both in storage utilization and search efficiency. 4.5 The Extended k-d-tree Another extension of the k-d-tree was given by Matsuyama, Hao and Nagao <ref> [53] </ref>. In contrast to the skd-tree, the extended k-d-tree is based on clipping. Each non-leaf node is partitioning its corresponding region using a hyper-plane. Objects that intersect this hyperplane are clipped. Each leaf node corresponds to a region containing objects that can be stored in one disk page.
Reference: [54] <author> G. M. Morton. </author> <title> A computer-oriented geodetic data base and a new technique in file sequencing. </title> <publisher> IBM Ltd. </publisher> <address> Ottawa, Canada, </address> <year> 1966. </year>
Reference-contexts: As already mentioned, there are numerous variants of the basic definition. One of the oldest, the region quadtree, is the one described above, when the rectangles are decomposed in equal parts (i.e., a regular decomposition), and was first used by Morton <ref> [54] </ref> and Klinger [47]. Another variant, governed by the position of the input points rather than symmetry, is called point quadtree and was proposed by Finkel and Bentley [24]. The point quadtree can be viewed as being constructed iteratively by inserting the data points one by one.
Reference: [55] <author> O. J. Murphy and S. M. Selkow. </author> <title> The efficiency of using k d trees for finding nearest neighbors in discrete space. </title> <journal> Information Processing Letters, </journal> <volume> 23(4) </volume> <pages> 215-218, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [56] <author> J. Nievergelt and K. Hinrichs. </author> <title> Storage and access data structures for geometric data bases. </title> <editor> In S. Ghosh, Y. Kambayashi, and K. Tanaka, editors, </editor> <booktitle> Proc. Int'l Conf. on Foundations of Data Organization 1985, </booktitle> <address> New York, 1987. </address> <publisher> Plenum Press. </publisher>
Reference-contexts: There are major disadvantages of this scheme. First, objects that are spatially close in the original space may be far apart in the parameter space, making nearest neighbor queries difficult. Second, point and range queries become more complicated <ref> [56] </ref> and some queries cannot be expressed at all in the parameter space [65]. Third, the distribution of points in the parameter space can be highly non-uniform, even though the original data is uniformly distributed.
Reference: [57] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: In addition to concurrency and recovery support, it can also take advantage of the -tree node consolidation algorithm, insuring good storage utilization. 3.5 The Grid file While all previous data structures are based on the binary search tree, the grig file, introduced by Nievergelt et al. <ref> [57] </ref>, is an extension of dynamic hashed organizations [19]. The original version of the structure partitions the space using a d-dimensional orthogonal grid. The grid is not necessarily regular, resulting in different size cells. The actual data structure has two components: the scales and the directory.
Reference: [58] <author> J. Nievergelt and P. Widmayer. </author> <title> Spatial data structures: Concepts and design choices. </title> <booktitle> In CISM Advanced school on Algorithmic Foundation of GIS, </booktitle> <year> 1996. </year>
Reference-contexts: The issue, as posed by Nievergelt and Widmayer <ref> [58] </ref>, is organizing the embedding space versus organizing its contents. A record with k fields in a relational database can be viewed as a point in the k-dimensional Cartesian product space. But the structure of this embedding space has no relevance for query processing.
Reference: [59] <author> Y. Ohsawa and M. Sakauchi. </author> <title> The bd-tree | a new n-dimensional data structure with highly efficient dynamic characteristics. </title> <editor> In North-Holland, editor, </editor> <booktitle> Proc. IFIP Congress, </booktitle> <pages> pages 539-544, </pages> <year> 1983. </year>
Reference-contexts: The term hB-tree stands for "holey brick B-tree". A brick is a hyperrectangle and a holey brick <ref> [59] </ref> is a brick from which one or more smaller bricks may have been extracted. The nodes in an hB-tree are organized as k-d-trees and correspond to holey bricks.
Reference: [60] <author> Y. Ohsawa and M. .Sakauchi. </author> <title> A new tree type data structure with homogeneous nodes suitable for very large spatial databases. </title> <booktitle> In Proc. IEEE Int'l. Conf. on Data Eng., </booktitle> <pages> page 296, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: Second, a point query may not be a single-path traversal. Third, the performance of such a data structure depends crucially on the region-splitting procedure. 8 Examples of methods based on overlapping regions include the R-tree (section 4.2), the skd-tree (section 4.4), the GBD-tree <ref> [60] </ref>, the P-tree [43]. Methods based on clipping Clipping-based methods divide the space in regions that are mutually disjoint. As a result, objects have to be split into fragments that fit in such regions, meaning that an object reference may be stored in many places (object duplication).
Reference: [61] <author> B. C. Ooi, K. J. McDonell, and R. Sacks-Davis. </author> <title> Spatial kd-tree: An indexing mech-anism for spatial databases. </title> <booktitle> In Proc. IEEE Int. Comp. Software and Applications Conf., </booktitle> <address> Japan, </address> <year> 1987. </year>
Reference-contexts: This is another reason why R + -trees cannot guarantee a minimum storage utilization. A performance comparison conducted by Grene [28] shows that R + -trees perform better than R-trees for small objects and slightly worse for large objects. 4.4 The skd-tree The skd-tree or spatial k-d-tree <ref> [61, 63] </ref> is a variant of the k-d-tree (see Section 3.2) capable of storing non-point objects. At each node of a k-d-tree, a value (the discriminator value) is chosen in one of the dimensions to partition the k-dimensional region into two subregions.
Reference: [62] <author> Beng Chin Ooi. </author> <title> Efficient query processing in geographic information systems, </title> <booktitle> volume 471 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag Inc., </publisher> <address> New York, NY, USA, </address> <year> 1990. </year> <title> Based on the author's Ph.D. </title> <type> dissertation. </type>
Reference-contexts: The goal of the paper is not to exhaustively describe all the data structures in the literature, but to discuss the most prominent ones, and to give references to further literature. Several surveys have been published, describing the state-of-the-art at the moment of publication <ref> [73, 62, 36] </ref>. The rest of the paper is organized in three parts. Section 2 gives a more formal definition of a spatial database and describes the types of spatial 1 queries. <p> To efficiently store the skd-tree on disk, the k-d-B-tree approach is taken: a number of nodes are collapsed to one node that has bigger fanout and can 13 be stored in one disk page. According to the results reported in <ref> [62, 63] </ref>, the skd-tree performs similarly to the R-tree both in storage utilization and search efficiency. 4.5 The Extended k-d-tree Another extension of the k-d-tree was given by Matsuyama, Hao and Nagao [53]. In contrast to the skd-tree, the extended k-d-tree is based on clipping.
Reference: [63] <author> Beng Chin Ooi, Ron Sacks-Davis, and Ken J. McDonell. </author> <title> Spatial indexing in binary decomposition and spatial bounding. </title> <journal> Information Systems, </journal> <volume> 16(2) </volume> <pages> 211-237, </pages> <year> 1991. </year>
Reference-contexts: This is another reason why R + -trees cannot guarantee a minimum storage utilization. A performance comparison conducted by Grene [28] shows that R + -trees perform better than R-trees for small objects and slightly worse for large objects. 4.4 The skd-tree The skd-tree or spatial k-d-tree <ref> [61, 63] </ref> is a variant of the k-d-tree (see Section 3.2) capable of storing non-point objects. At each node of a k-d-tree, a value (the discriminator value) is chosen in one of the dimensions to partition the k-dimensional region into two subregions. <p> To efficiently store the skd-tree on disk, the k-d-B-tree approach is taken: a number of nodes are collapsed to one node that has bigger fanout and can 13 be stored in one disk page. According to the results reported in <ref> [62, 63] </ref>, the skd-tree performs similarly to the R-tree both in storage utilization and search efficiency. 4.5 The Extended k-d-tree Another extension of the k-d-tree was given by Matsuyama, Hao and Nagao [53]. In contrast to the skd-tree, the extended k-d-tree is based on clipping.
Reference: [64] <author> Jack A. Orenstein. </author> <title> Redundancy in spatial databases. </title> <editor> In James Clifford, Bruce G. Lindsay, and David Maier, editors, </editor> <booktitle> Proceedings of the 1989 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 294-305, </pages> <address> Portland, Oregon, </address> <month> 31 May-2 June </month> <year> 1989. </year>
Reference-contexts: As it can be seen, odd bit positions correspond to vertical lines, and even bit positions correspond to horizontal lines, which is why this scheme is also called bit-interleaving. For a discussion on how much granularity is needed and other details on the z-ordering method, see <ref> [64, 26] </ref>. The z-ordering techniques is one of the few spatial access methods that have been implemented in a commercial database system [42]. 5 Conclusions As we have seen, access data structures for spatial databases form an active research area that spans more than two decades.
Reference: [65] <author> Jack A. Orenstein. </author> <title> A comparison of spatial query processing techniques for native and parameter spaces. </title> <editor> In Hector Garcia-Molina and H. V. Jagadish, editors, </editor> <booktitle> Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 343-352, </pages> <address> Atlantic City, NJ, </address> <month> 23-25 May </month> <year> 1990. </year>
Reference-contexts: First, objects that are spatially close in the original space may be far apart in the parameter space, making nearest neighbor queries difficult. Second, point and range queries become more complicated [56] and some queries cannot be expressed at all in the parameter space <ref> [65] </ref>. Third, the distribution of points in the parameter space can be highly non-uniform, even though the original data is uniformly distributed.
Reference: [66] <author> Jack A. Orenstein and T. H. Merrett. </author> <title> A class of data structures for associative searching. </title> <booktitle> In Proceedings of the Fourth ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 181-190, </pages> <address> Portland, Oregon, </address> <month> 25-27 March </month> <year> 1984. </year>
Reference: [67] <author> V. Ramasubramanian and K. K. Paliwal. </author> <title> A generalised optimisation of the K-D tree for fast nearest-neighbor search. </title> <booktitle> In International Conference on Acoustics, Speech, and Signal Processing, </booktitle> <year> 1989. </year>
Reference-contexts: It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori. Intensive research was done on k-d-trees <ref> [53, 7, 67, 44, 55, 4, 16, 23] </ref> as they alleviate many of the deficiencies of quadtrees. Specifically, in a k-d-tree, only one key needs to be compared instead of k at each node.
Reference: [68] <author> Mireille Regnier. </author> <title> Analysis of grid file algorithms. </title> <journal> BIT (Nordisk tidskrift for informa-tionsbehandling), </journal> <volume> 25(2) </volume> <pages> 335-357 (or 353-357??), </pages> <year> 1985. </year>
Reference-contexts: For a more detailed theoretical analysis of the grid file see <ref> [68, 6] </ref>. A plethora of variants of the grid file were proposed in the literature. The EXCELL method was proposed independently of the grid file by Tam-minen and Sulonen [75].
Reference: [69] <author> John T. Robinson. </author> <title> The K-D-B-tree: A search structure for large multidimensional dynamic indexes. </title> <editor> In Y. Edmund Lien, editor, </editor> <booktitle> Proceedings of the 1981 ACM SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, Michigan, 29 April-1 May 1981. </address> <publisher> ACM, </publisher> <address> New York. </address>
Reference-contexts: However, the k-d-trees, like the quadtrees, are main memory data structures and do not perform well in an environment with secondary storage, where the indexing data structure needs to be paged in and out of main memory. To address this problem, Robinson <ref> [69] </ref> proposed the k-d-B-tree. 3.3 The k-d-B-Tree As its name sugests, the k-d-B-tree [69] combines the features of the k-d-tree and the B-tree [17]. It uses the adaptive k-d-tree variant, which stores the points in the leaf nodes. <p> To address this problem, Robinson <ref> [69] </ref> proposed the k-d-B-tree. 3.3 The k-d-B-Tree As its name sugests, the k-d-B-tree [69] combines the features of the k-d-tree and the B-tree [17]. It uses the adaptive k-d-tree variant, which stores the points in the leaf nodes. A non-leaf node stores the description of subspaces in which the current space has to be split.
Reference: [70] <author> D. Rotem. </author> <title> Spatial join indices. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 500-509, </pages> <address> Los Alamitos, Ca., USA, April 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: predicates include * intersects () * contains () * is enclosed by () * distance () q; q 2 IR * adjacent () * north () 3 * meets () Spatial join is a very complex operation and is consequently much studied, in conjunction or not with indexing data structures <ref> [70, 3, 49, 14] </ref>. 2.4 Point vs. Non-Point Data Most of the data structures used for indexing spatial databases are built on a space-partitioning scheme.
Reference: [71] <author> H. Sagan. </author> <title> Space-filling curves. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: The second method, also called mapping to single attribute space, partitions the data into grid cells of the same size and then uses a space-filling curve to enumerate all cells of the grid. These space filling curves <ref> [71] </ref> give 9 thus a total ordering of the space, which allows us to use one-dimensional access methods, like B + -trees, to index the data.
Reference: [72] <author> Hanan Samet. </author> <title> Applications of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year> <title> chapter on ray tracing and efficiency, </title> <note> also discusses radiosity. </note>
Reference-contexts: This structure, with its many variants, is extensively discussed in two books by H. Samet <ref> [72, 73] </ref>. Although the name quadtree refers to the two-dimensional variant, the idea can be applied to an arbitrary dimension d. The quadtree is a generalization of the binary search tree to higher dimensions. It represents a recursive subdivision of the space into subspaces using iso-oriented hyperplanes.
Reference: [73] <author> Hanan Samet. </author> <title> The design and analysis of spatial data structures. </title> <address> Reading, Mass. </address> : <publisher> Addison-Wesley,, </publisher> <year> 1990. </year>
Reference-contexts: The goal of the paper is not to exhaustively describe all the data structures in the literature, but to discuss the most prominent ones, and to give references to further literature. Several surveys have been published, describing the state-of-the-art at the moment of publication <ref> [73, 62, 36] </ref>. The rest of the paper is organized in three parts. Section 2 gives a more formal definition of a spatial database and describes the types of spatial 1 queries. <p> This structure, with its many variants, is extensively discussed in two books by H. Samet <ref> [72, 73] </ref>. Although the name quadtree refers to the two-dimensional variant, the idea can be applied to an arbitrary dimension d. The quadtree is a generalization of the binary search tree to higher dimensions. It represents a recursive subdivision of the space into subspaces using iso-oriented hyperplanes. <p> Unfortunately, there is no total order that preserves spatial proximity, so people have tried to find heuristics that preserve spatial proximity at least to some extent. A brief discussion of such orderings in two dimensions can be found in <ref> [73] </ref> and in [22]. Examples include row-wise ordering, the Gray ordering [21], the Hilbert curve [22], the z-ordering (section 4.7) (also called the Peano curve). Performance studies [2] show that the last two curves are the most suitable for spatial data. Section 4.7 discusses z-ordering in more detail. <p> Kedem [46] uses two binary trees, corresponding to the two division lines. These binary trees are one-dimensional analogs of the quad-CIF-tree. One-dimensional analogs of other types of quadtrees can also be used <ref> [73] </ref>. To insert a new rectangle R, the division lines corresponding with the root node are checked for intersection with R. If they intersect, R is inserted in the root. Otherwise, the child node whose region contains R is searched recursively.
Reference: [74] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + -tree: A dynamic index for multi-dimensional objects. </title> <booktitle> In Proceedings of the 13th Conference on Very Large Databases, </booktitle> <publisher> Morgan Kaufman pubs. </publisher> <address> (Los Altos CA), Brighton, UK, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: In order to find a suitable split, the X-tree also maintains the history of previous splits. 4.3 The R + -tree Although derived from the R-tree, the R + -tree, developed by Sellis, Rous-sopoulus, and Faloutsos <ref> [74] </ref>, is essentially different. Like the R-tree, it divides the space hierarchically into regions. Unlike the R-tree, though, the regions are not allowed to overlap. But since the input objects may overlap, they may be stored in more than one leaf node.
Reference: [75] <author> M. Tamminen and R. Sulonen. </author> <title> The EXCELL method for efficient geometric access to data. </title> <booktitle> In ACM IEEE Nineteenth Design Automation Conference Proceedings, </booktitle> <pages> pages 345-351, </pages> <address> Los Alamitos, Ca., USA, June 1982. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: For a more detailed theoretical analysis of the grid file see [68, 6]. A plethora of variants of the grid file were proposed in the literature. The EXCELL method was proposed independently of the grid file by Tam-minen and Sulonen <ref> [75] </ref>. Unlike the grid file, though, it decomposes the space regularly, which simplifies considerably the scales, but decreases the performance of insertions and deletions. The two-level grid file, proposed by Hinrichs [39], uses a second grid file to manage the grid directory.
Reference: [76] <author> Markku Tamminen. </author> <title> Comments on quad- and octtrees. </title> <journal> Communications of the ACM, </journal> <volume> 27(3) </volume> <pages> 248-249, </pages> <month> March </month> <year> 1984. </year> <month> 20 </month>
Reference-contexts: The structure performs best when the nodes are known a priori and few updates are made after its creation. The equivalent of the region quadtree in the k-d-tree spectrum is termed the bintree <ref> [48, 76] </ref>. It decomposes the space recursively into d-dimensional hyperrectangles of equal size until each of them contains less than a given number of points. The advantage of this structure is that the partitioning is known a priori.
References-found: 76

