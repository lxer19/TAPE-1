URL: http://www.eecs.umich.edu/~qstout/pap/IF98pred.ps
Refering-URL: http://www.eecs.umich.edu/~qstout/papers.html
Root-URL: http://www.cs.umich.edu
Title: Predicting Algorithm Performance  
Author: Joshua Landrum Janis Hardwick Quentin F. Stout 
Keyword: and phrases: experimental algorithms, computer performance prediction, regression, model checking, design of experiments, adaptive sampling  
Address: Ann Arbor, Michigan 48109 USA  
Affiliation: University of Michigan,  
Date: 30 (1998)  
Note: To appear in Computing Science and Statistics  
Abstract: We examine the problem of predicting the time that an algorithm will take to solve a problem of specified size on a specified computer, and of predicting the uncertainty in the estimate. The predictions are based on an adaptive sampling approach, constrained by a fixed time budget for all experiments. Complications arise due to the poorly understood nature of system variation, because small inputs may be poor predictors of the performance for large inputs due to changes in cache behavior, and because time is both a constraint and the variable being estimated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tabe, T., Hardwick, J., and Stout, Q.F., </author> <title> "The communication performance of the IBM SP2", </title> <booktitle> Computing Science and Statistics 27 (1995), </booktitle> <pages> pp. 347-351. </pages>
Reference-contexts: Other measured sources of variation, such as those caused by poor clock resolution or periodic system interrupts, are in fact highly regular. A problem in which both small periodic and large aperiodic system interrupts occur is examined in <ref> [1] </ref>. Memory usage can also provide timing variations. An interrupt, for example, may cause cached memory to be flushed. If this memory is used again by the process, and would not have been flushed otherwise, it must be reloaded, and hence the interrupt causes a further delay.
Reference: [2] <author> Saavedra-Barrera, Rafael H. and Smith, Alan Jay, </author> <title> "Performance Prediction by Benchmark and Machine Analysis", </title> <type> Report No. </type> <institution> UCB/CSD 90/607 De-cember 1990 Computer Science Division (EECS) University of California </institution>
Reference-contexts: Further, we know of no previous work that incorporates a time budget into the prediction process. Certainly, there has been research on predicting machine performance using measures such as instruction counts. However, while these techniques are useful for improving code performance, especially when the instruction mix is known (see <ref> [2] </ref>), carrying out detailed counts for specific inputs completely ignores system variability. Furthermore, most timing methods require access to source code which we do not necessarily assume to be available to the end users making the predictions.
References-found: 2

