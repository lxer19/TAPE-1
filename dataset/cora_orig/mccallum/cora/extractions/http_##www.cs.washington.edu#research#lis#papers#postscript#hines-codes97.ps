URL: http://www.cs.washington.edu/research/lis/papers/postscript/hines-codes97.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/chinook/www/HB97a.html
Root-URL: http://www.cs.washington.edu
Email: fhineskj,gaetanog@cs.washington.edu  
Title: Optimizing Communication in Embedded System Co-simulation  
Author: Ken Hines and Gaetano Borriello 
Address: Box 352350  Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering,  University of Washington,  
Abstract: The Pia hardware-software co-simulator provides substantial speedups over traditional co-simulation methods by permitting dynamic changes in the level of detail when simulating communication channels between system components. However, it places a burden on the designer to develop several communication routines, at different levels of abstraction, for each communication operation. This often requires an intimate understanding of both the simulator and the design being simulated. This paper presents and demonstrates a way to use communication transaction annotations to provide a platform independent language for describing fast communication primitives. Additionally, we show a tool for automatically generating some of these annotations, so that the designer does not even require an intimate understanding of the design under simulation. This can be important when simulating systems where the design itself is synthesized by automatic tools, and is liable to change frequently. 
Abstract-found: 1
Intro-found: 1
Reference: [BST92] <author> D. Becker, R.K. Singh, and S. G. </author> <title> Tell. An engineering environment for hardware/software co-simulation. </title> <booktitle> In 29th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 129134, </pages> <year> 1992. </year>
Reference-contexts: The simulator core schedules all communication and component run time so there is no dependence on operating system communication primitives as in <ref> [TC95, BST92] </ref>. Several versions of time are maintained during a simulation run. For example, each component keeps a version of its own local time, and the main scheduler keeps a version of time called system time. There is also real time which functions in Pia as a meta-time.
Reference: [COB95] <author> Pai Chou, Ross B. Ortega, and Gaetano Borriello. </author> <title> Interface co-synthesis techniques for embedded systems. </title> <booktitle> In ICCAD Proceedings, </booktitle> <year> 1995. </year>
Reference-contexts: system to backtrack. 3 Optimizing communication The systems for which the Pia simulator was designed have these characteristics in common: * Many of the lowest level communications routines are provided by a protocol library. * The systems are synthesized from some higher level specification by a tool such as Chinook <ref> [COB95] </ref>. In both cases, there are many opportunities to short circuit detailed communication and provide better simulation performance where high detail levels aren't required.
Reference: [ea95] <author> Joseph T. Buck et. al. Almagest, </author> <note> Ptolemy manual version 0.5.2. UCB, </note> <year> 1995. </year>
Reference-contexts: The simulator core in the current version is built on Berkeley's Ptolemy <ref> [ea95] </ref>, but we are in the process of writing a stand alone core which has integrated Java support. Most portions of a system simulated with Pia are written in the Pia language, which is a language designed to explicitly support dynamic communication modes.
Reference: [Hin96] <author> Ken Hines. Pia: </author> <title> A framework for embedded system co-simulation with dynamic communication support. </title> <type> Technical Report UW-CSE-96-11-04, </type> <institution> University of Washington, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: The Pia co-simulator will choose an appropriate method at runtime based on criteria given by the designer. Previous work has shown this to be an effective way to substantially reduce simulation time while retaining many of the the benefits of detailed co-simulation <ref> [Hin96] </ref>. Detailed co-simulation can be a good way to validate a design as well as to evaluate some of its interesting features. For example, through detailed co-simulation a designer can gain better insight into resource utilization and the frequency of shared resource conflicts in a system.
Reference: [TC95] <author> D. E. Thomas and S. L. Coumeri. </author> <title> A simulation environment for hardware-software codesign. </title> <booktitle> In Proceedings, International Conference on Computer Design. </booktitle> <publisher> IEEE CS Press, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: The simulator core schedules all communication and component run time so there is no dependence on operating system communication primitives as in <ref> [TC95, BST92] </ref>. Several versions of time are maintained during a simulation run. For example, each component keeps a version of its own local time, and the main scheduler keeps a version of time called system time. There is also real time which functions in Pia as a meta-time.
References-found: 5

