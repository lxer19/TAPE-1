URL: ftp://ftp.dcs.qmw.ac.uk/programming/jape/papers/Quiet_interface.ps.gz
Refering-URL: http://www.comlab.ox.ac.uk/oucl/users/bernard.sufrin/jape.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: 1 Japes quiet interface  
Author: Richard Bornat, 
Date: March 1966  
Note: (submitted to UITP 96)  
Address: Oxford  
Affiliation: Dept of Computer Science, Queen Mary and Westfield College, University of London Bernard Sufrin, Programming Research Group, University of  
Abstract: 0 Abstract Jape is a proof editor designed for use by novices and to be programmed by tyro logicians. Its user interface intrudes as little as possible into the business of making and writing down a proof; its interface is passive, quiet in use. Four simple but important sub-principles use special-purpose fonts; make proof navigation simple; dont poke them in the eye with internal mechanisms; use the users proof tradition are illustrated. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> The Jape program, </author> <title> several logic encodings and an encoders manual are available via the World Wide Web at two sites. </title> <note> Consult ftp://ftp.dcs.qmw.ac.uk/programming/jape/index.html and http://www.comlab.ox.ac.uk/oucl/users/bernard.sufrin/jape.html. </note>
Reference-contexts: We hypothesise that many professional practitioners are novices too: the range of our application may prove not to be as restricted as we presently suppose. 2 Starting points and guiding stars Jape <ref> [1] </ref> started life as a solution to a problem. There were computer science students to whom someone had decided to teach logic, including Formal Logic. Those students were bewildered, floundering, lost in a maze of semantics, metalanguages, two kinds of turnstiles and arrows, all alike. <p> Though we have some satisfied users of the tool, we havent yet managed to persuade anyone other than ourselves to be an encoder. Perhaps the manual <ref> [1] </ref> will help. Japes quiet interface Page 4 March 1966 4 Rule 1: Flashy display helps Since we focus on writing down, our first aim must be that what is written on the paper should look like a proof to a novice. <p> At first, blinded by the simplicity of a mechanism based on the sequent calculus and using all-introduction backward reasoning, we imagined that forward reasoning was just for wimps. We know better now, not least because we have discovered how to model it <ref> [1] </ref>. Our modelling is not yet perfect, and in particular we intend to develop mechanisms to imitate the box-scoping of Fitch-style natural-deduction proofs and more perfectly imitate Reiteration. Even without those refinements, that encoding is our quietest of all. It can be no coincidence that it is the most used.
Reference: 2. <author> S. Reeves , D. Goldson and R.Bornat, </author> <title> A Review of Several Programs for the Teaching of Logic, </title> <journal> The Computer Journal. 1993, </journal> <volume> 36, </volume> <pages> 4. </pages>
Reference-contexts: There were computer science students to whom someone had decided to teach logic, including Formal Logic. Those students were bewildered, floundering, lost in a maze of semantics, metalanguages, two kinds of turnstiles and arrows, all alike. There were existing tools which were claimed to help <ref> [2] </ref>, but they didnt seem to help much. Most computer scientists, and all of Japes eventual authors, were bewildered too. Something had to be done. As good HCI practitioners, we focussed on the task.
Reference: 3. <author> R. Bornat and H.Thimbleby: </author> <title> the life and times of de d , in Cognitive Ergonomics and Human - Computer Interaction, </title> <editor> J. Long and A.Whitefield eds, CUP, </editor> <year> 1989. </year>
Reference-contexts: By recognising that writing down was the task we were on the familiar ground of good practice: modern word-processors use the magic paper idea which first saw light in the late 1970s <ref> [3] </ref> to ease the cognitive load of people writing documents like this one. A bewildered person trying to write down a proof needs an assistant which gets in the way as little as possible, and one which concentrates its efforts on the writing down.
Reference: 4. <institution> Macintosh Human Interface Guidelines, </institution> <note> Addison-Wesley, CD-ROM edition 1995 5.Jones C.B. </note> <editor> et al (1985) mural: </editor> <title> A Formal Development Support System. </title> <publisher> Springer-Verlag, </publisher> <year> 1985 </year>
Reference-contexts: Our job was to provide magic paper on which you could only write down proofs. To reduce bewilderment it is helpful to emphasise familiarity. The MacIntosh user interface <ref> [4] </ref> has as one of its design principles that cognitive load is reduced if every application seems to work in the same way, using substantially the same gestures, a similar vocabulary of commands, the same visual building-blocks.
Reference: 6. <author> Dyckhoff, R. </author> <title> (1987) Implementing a simple proof assistant , in Workshop on Programming for Logic Teaching, </title> <address> Leeds, </address> <month> July </month> <year> 1987, </year> <title> Centre for Theoretical Computer Science, University of Leeds (program available from Machine Assisted Logic Teaching Project, </title> <institution> Computational Science Division, University of St Andrews) </institution>
Reference-contexts: Mural [5] we decided was too large, too lumbering, too slow, and we vowed that our machinery would always be more lightweight than theirs. MacLogic <ref> [6] </ref> was lightweight enough far more so, it turned out, than Jape would become but we saw it as more about making proofs, less about writing them down.
Reference: 7. <author> B. Sufrin and R. Bornat, </author> <title> User Interfaces for Generic Proof Assistants, </title> <note> submitted to UITP 96 </note>
Reference-contexts: We believe that in the matter of encoding logic rules our interface is quiet enough, but we know that in the matter of writing programs to control the graphical interface and interpret the users gestures we have some way to go <ref> [7] </ref>. Though we have some satisfied users of the tool, we havent yet managed to persuade anyone other than ourselves to be an encoder. Perhaps the manual [1] will help.
Reference: 8. <editor> Fitch F.B. </editor> <booktitle> (1952) Symbolic Logic, </booktitle> <publisher> Ronald Press, </publisher> <address> New York </address>
Reference-contexts: Fitchs <ref> [8] </ref> presentation of natural deduction made it possible to say how to write proofs down systematically. It is very difficult to see how to describe how to write down an incomplete proof at all in the tree style in which it was originally presented.
Reference: 9. <author> Schmidt D, </author> <title> Natural Deduction Theorem Proving in Set Theory, </title> <institution> CSR-142-83, Department of Computer Science, University of Edinburgh, </institution> <year> 1983 </year>
Reference-contexts: Quietness comes at quite a price; it may be that this will be a barrier which will prevent all but the most expert from programming a Jape interface. As a matter of convenience we also provide a collection of proof rules, based on those in <ref> [9] </ref>, which treat set operations with natural-deduction-style rules and make shorter and more readable proofs than the Japes quiet interface Page 9 March 1966 axiomatic definitions.
References-found: 8

