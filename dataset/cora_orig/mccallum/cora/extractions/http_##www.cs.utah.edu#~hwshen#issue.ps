URL: http://www.cs.utah.edu/~hwshen/issue.ps
Refering-URL: http://www.cs.utah.edu/~hwshen/
Root-URL: 
Title: Isosurfacing in Span Space with Utmost Efficiency (ISSUE)  
Author: Han-Wei Shen Charles D. Hansen Yarden Livnat Christopher R. Johnson 
Address: Salt Lake City, UT Los Alamos, New Mexico  
Affiliation: Department of Computer Science Advanced Computing Laboratory University of Utah Los Alamos National Laboratory  
Abstract: We present efficient sequential and parallel algorithms for isosurface extraction. Based on the Span Space data representation, new data subdivision and searching methods are described. We also present a parallel implementation with an emphasis on load balancing. The performance of our sequential algorithm to locate the cell elements intersected by isosurfaces is faster than the Kd-tree searching method originally used for the Span Space algorithm. The parallel algorithm can achieve high load balancing for massively parallel machines with distributed memory architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.E. Lorensen and H. E. Cline. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 163-169, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Isosurfacing is an effective technique to explore three-dimensional scalar fields. A simple and effective method is the Marching Cubes algorithm, proposed by Lorensen and Cline <ref> [1] </ref>. The algorithm has a complexity of O (N ) since it is necessary to visit each cell fl in the three-dimensional field.
Reference: [2] <author> J. Wilhelms and A. Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 201-227, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: When the data set is large, visiting each cell is too costly and recent research efforts have investigated the acceleration of the isosurfacing process, namely Wilhelms and Van Gelder's octree spatial subdivision <ref> [2] </ref>, Gal-lengher's span filter [3], Itoh and Koyamada's extreme graph method [4], Shen and Johnson's sweeping sim-plices algorithm [5],and Livnat et al.'s near optimal isosurface extraction (NOISE) algorithm [6]. Among the above accelerating techniques, the NOISE algorithm is near optimal.
Reference: [3] <author> R. S. Gallagher. </author> <title> Span filter: An optimization scheme for volume visualization of large finite element models. </title> <booktitle> In Proceedings of Visualization '91, </booktitle> <pages> pages 68-75. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: When the data set is large, visiting each cell is too costly and recent research efforts have investigated the acceleration of the isosurfacing process, namely Wilhelms and Van Gelder's octree spatial subdivision [2], Gal-lengher's span filter <ref> [3] </ref>, Itoh and Koyamada's extreme graph method [4], Shen and Johnson's sweeping sim-plices algorithm [5],and Livnat et al.'s near optimal isosurface extraction (NOISE) algorithm [6]. Among the above accelerating techniques, the NOISE algorithm is near optimal. <p> To accelerate the iso-surfacing process, researchers have proposed different methods to decompose the data domain such that for each isovalue, there is only a small number of subdo-mains that need to be examined <ref> [3, 5] </ref>. Livnat et al. provide an interesting perspective for the isosurfacing problem [6].
Reference: [4] <author> T. Itoh and K. Koyyamada. </author> <title> Isosurface generation by using extreme graphs. </title> <booktitle> In Proceedings of Visualization '94, </booktitle> <pages> pages 77-83. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year>
Reference-contexts: When the data set is large, visiting each cell is too costly and recent research efforts have investigated the acceleration of the isosurfacing process, namely Wilhelms and Van Gelder's octree spatial subdivision [2], Gal-lengher's span filter [3], Itoh and Koyamada's extreme graph method <ref> [4] </ref>, Shen and Johnson's sweeping sim-plices algorithm [5],and Livnat et al.'s near optimal isosurface extraction (NOISE) algorithm [6]. Among the above accelerating techniques, the NOISE algorithm is near optimal.
Reference: [5] <author> H.W. Shen and C.R. Johnson. Sweeping sim-plices: </author> <title> A fast isosurface extraction algorithm for unstructure grids. </title> <booktitle> In Proceedings of Visualization '95. </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1995. </year>
Reference-contexts: To accelerate the iso-surfacing process, researchers have proposed different methods to decompose the data domain such that for each isovalue, there is only a small number of subdo-mains that need to be examined <ref> [3, 5] </ref>. Livnat et al. provide an interesting perspective for the isosurfacing problem [6]. <p> To achieve this, we can use any efficient isosurface extraction algorithm. For instance, we can build a Kd-tree structure for lattice element (p; p) and apply Kd-tree search to locate the isosurface cells or we could employ the Sweeping Simplices algorithm <ref> [5] </ref>. The search phase of our isosurfacing algorithm includes two binary searches in the regions of case 3 and case 4, and one min-max search in the lattice element of case 5.
Reference: [6] <author> Y. Livnat, H.W. Shen, and C.R. Johnson. </author> <title> A near optimal isosurface extraction algorithm using the span space. </title> <journal> IEEE Transaction on Visualization and Computer Graphics, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1996. </year>
Reference-contexts: too costly and recent research efforts have investigated the acceleration of the isosurfacing process, namely Wilhelms and Van Gelder's octree spatial subdivision [2], Gal-lengher's span filter [3], Itoh and Koyamada's extreme graph method [4], Shen and Johnson's sweeping sim-plices algorithm [5],and Livnat et al.'s near optimal isosurface extraction (NOISE) algorithm <ref> [6] </ref>. Among the above accelerating techniques, the NOISE algorithm is near optimal. <p> To accelerate the iso-surfacing process, researchers have proposed different methods to decompose the data domain such that for each isovalue, there is only a small number of subdo-mains that need to be examined [3, 5]. Livnat et al. provide an interesting perspective for the isosurfacing problem <ref> [6] </ref>. For a cell with minimum value a and maximum value b, instead of treating the [a; b] as an interval, they map the cell into an unique point position, (a; b), in an R 2 value space, termed the Span Space. Figure 1 illustrates the Span Space.
Reference: [7] <author> F.P. Preparata and M.I. Shamos. </author> <title> Computational Geometry, an introduction. </title> <publisher> Springer-Verlag Publishing Company, </publisher> <year> 1985. </year>
Reference-contexts: The crux of this algorithm is a novel data representation, termed the Span Space. Using this representation, the isosurface extraction process can be reduced into a range searching problem. Livnat et al. proposed a classical Kd-tree searching method <ref> [7] </ref> to locate, in that space, the cells that contain an isosurface. In this paper, we use the Span Space as the underlying representation to design high performance iso-surface extraction algorithms for both single processor workstations and massively parallel machines with distributed memory architectures.
Reference: [8] <author> S. Molnar, M. Cox, D Ellsworth, and H. Fuchs. </author> <title> A sorting classification of parallel rendering. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 23-32, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In this way, not only does our isosurfacing algorithm exhibit good scalability, it can also be directly connected to a parallel rendering process, which requires an even distribution of primitives for the initial geometry processing <ref> [8] </ref>. We achieve the load balancing by carefully designing a cell distribution scheme. Ideally, if cells within any scalar range [a; b] are evenly scattered, each PE would have approximately the same number of isosur-face cells for any isovalue.
Reference: [9] <author> J. Painter, P. McCormick, M. Krogh, C. Hansen, and G. Colin de Verdiere. </author> <title> The acl message passing library. </title> <journal> EPFL Supercomputing Review, </journal> <volume> 7, </volume> <month> November </month> <year> 1995. </year>
Reference-contexts: The Cray T3D is a massively parallel computer with a distributed memory architecture. Each processing element has a 64 bit DEC Alpha microprocessor and 8M words local memory. Our implementation uses the message passing paradigm by employing the ACLMPL message passing library <ref> [9] </ref> which is a high throughput, low latency communications library. y In y We used ACLMPL since the MPI implementation on the T3D is not yet mature.
Reference: [10] <author> K.-L. Ma. </author> <title> Parallel volume ray-casting for unstructured-grid data on distributed-memory architectures. </title> <booktitle> In Proceedings of 1995 Parallel Rendering Symposium, </booktitle> <pages> pages 23-30, </pages> <year> 1995. </year>
Reference-contexts: We used the brain data set which has 471,770 cell elements. To measure the load balance of our parallel algorithm, we use two different metrics. One is a formula of load imbalance used by Ma <ref> [10] </ref>: * Load Imbalance = 1 load Average load Max The other is a load difference formula: * Load Difference = (100 fi load Max load Min load T otal )% Two different measurements are used to define the workload for each PE.
References-found: 10

