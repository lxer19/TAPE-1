URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-98-25.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Title: The Cogency Monitor: An External Interface Architecture For a Distributed ObjectOriented Real-Time Database System  
Author: John A. Stankovic, Sang H. Son, and Chi D. Nguyen 
Keyword: Key Words: Real-time, objectoriented, database security, fault-tolerance, quality of service  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: We are developing a distributed database, called BeeHive, which could offer features along different types of requirements: real-time, fault-tolerance, security, and quality-of service for audio and video. Support of these features and potential tradeoffs between them could provide a significant improvement in performance and functionality over current distributed database and object management systems. The BeeHive system however, must be able to interact with existing databases and import such data. In this paper, we present a high level design for this external interface and introduce the concept of a cogency monitor which acts as a gateway between BeeHive and the external world. The cogency monitor filters, shapes, and controls the flow of information to guarantee specified properties along the real-time, fault tolerance, quality of service, and security dimensions. We also describe three implementations of the cogency monitor and present some preliminary performance results that demonstrate the value of the cogency monitor. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Adelberg, B. Kao, and H. Garcia-Molina, </author> <title> An Overview of the Stanford Real-time Information Processor, </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(1), </volume> <year> 1996. </year>
Reference: [2] <author> S.F. Andler, J. Hansson, J. Eriksson, J. Mellin, M. Berndtsson, and B. Eftring, DeeDS: </author> <title> Towards a Distributed and Active Real-Time Database Systems, </title> <journal> ACM SIGMOD Record, </journal> <volume> 15(1) </volume> <pages> 38-40, </pages> <month> March </month> <year> 1996. </year>
Reference: [3] <author> M. Balabanovic, </author> <title> An Adaptive Web Page Recommendation Service, </title> <booktitle> Proceedings of the First International Conference on Autonomous Agents, </booktitle> <year> 1997. </year>
Reference: [4] <author> R. J. Bayardo Jr., W. Bohrer, and et. al., </author> <title> InfoSleuth: Agent-Based Semantic Integration of Information in Open and Dynamic Environments, </title> <booktitle> ACM SIGMOD, </booktitle> <year> 1997. </year>
Reference-contexts: A firewall [6] is a device that secures a connection between a trusted network and another network. A firewall might simply filter packets based on headers or include a proxy that acts to limit operations, keep an audit trail, or apply security based rules. Intelligent agents <ref> [4] </ref> are proxies that try to provide some value added service in very general ways, perhaps even learning or using inference. Our cogency monitor is different from firewalls in that it extends significantly beyond firewalls, but is more focused on specified behavior than an intelligent agent is.
Reference: [5] <author> A. Bondavali, J. Stankovic, and L. Strigini, </author> <title> Adaptable Fault Tolerance for Real-Time Systems, </title> <booktitle> Third International Workshop on Responsive Computer Systems, </booktitle> <month> Sept. </month> <note> 1993; full version Proc. PDCS, </note> <month> September </month> <year> 1993. </year>
Reference-contexts: many innovative components, including: real-time database support based on a new notion of data deadlines [15], (rather than just transaction deadlines), parallel and real-time recovery based on semantics of data and system operational mode (e.g. crisis mode), use of reflective information and a specification language to support adaptive fault tolerance <ref> [5] </ref>, real-time performance and security [13], the idea of security rules embedded into objects together with the ability for these rules to utilize profiles of various types, composable fault tolerant objects that synergistically operate with the transaction properties of databases and with real-time logging and recovery, new architecture and model of
Reference: [6] <author> W. Cheswick and S. Bellovin, </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Our current idea is to use a compatibility function that identifies valid combinations of services. A cogency monitor is not a firewall or an intelligent agent. A firewall <ref> [6] </ref> is a device that secures a connection between a trusted network and another network. A firewall might simply filter packets based on headers or include a proxy that acts to limit operations, keep an audit trail, or apply security based rules.
Reference: [7] <author> T. Finin, R. Fritzson, D. McKay, R. McEntire, </author> <title> KQML as an Agent Communication Language, </title> <booktitle> Proceedings of the Third International Conference on Information and Knowledge Management, </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference: [8] <author> J. Hammer, H. Garcia-Molina, K. Ireland, Y. Papakonstantinou, J. Ullman, and J. Widom, </author> <title> Information Translation, Mediation, and Mosaic-Based Browsing in the TSIMMIS System, </title> <booktitle> ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Jose, CA., </address> <month> June </month> <year> 1995. </year>
Reference: [9] <author> H. Kaneko, J. Stankovic, S. Sen and K. Ramamritham, </author> <title> Integrated Scheduling of Multimedia and Hard Real-Time Tasks, </title> <booktitle> Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: operate with the transaction properties of databases and with real-time logging and recovery, new architecture and model of interaction between multimedia and transaction processing, a uniform task model for simultaneously supporting hard real-time control tasks and end-to-end multimedia processing [10], and new real-time QoS scheduling, resource management and renegotiation algorithms <ref> [9] </ref>. One of the interesting issues that is encountered is how to interact with the external Internet world. There are many sources of data that are publicly available and for many enterprises this data should be accessed and incorporated into their own enterprise database.
Reference: [10] <author> J. Liebeherr, D. E. Wrege, and D. Ferrari, </author> <title> Exact Admission Control in Networks with Bounded Delay Services, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 4, No. 6, </volume> <pages> pp. 885-901, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: utilize profiles of various types, composable fault tolerant objects that synergistically operate with the transaction properties of databases and with real-time logging and recovery, new architecture and model of interaction between multimedia and transaction processing, a uniform task model for simultaneously supporting hard real-time control tasks and end-to-end multimedia processing <ref> [10] </ref>, and new real-time QoS scheduling, resource management and renegotiation algorithms [9]. One of the interesting issues that is encountered is how to interact with the external Internet world.
Reference: [11] <author> J. Prichard, L. DiPippo, J. Peckham, and V. Wolfe, RTSORAC: </author> <title> A Real-Time ObjectOriented Database Model, </title> <booktitle> Database and Expert System Applications Conference (DEXA94), </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: In this section we briefly describe each component of the BOM. The BOM has some similarity in terms of the structure of objects to the RTSORAC object model <ref> [11] </ref>. One of the main differences is that while RTSORAC model supports only real-time and approximation requirements, BOM supports a rich set of types of requirements and their tradeoffs.
Reference: [12] <author> E. Selberg, and O. Etzioni, </author> <title> The MetaCrawler Architecture for Resource Aggregation on the Web, </title> <journal> IEEE Expert, </journal> <month> January/February </month> <year> 1997. </year>
Reference-contexts: The cogency monitor passes this query to three Internet search engines (Infoseek, AltaVista, and Yahoo) for their response. This setup is similar to other meta-searchers like MetaCrawler <ref> [12] </ref>, in that we are collating data from several other search engines versus actually querying our own data locally. The cogency monitor waits for the returned results from the search engines.
Reference: [13] <author> S. H. Son and C. Chaney, </author> <title> Supporting the Requirements for Multilevel Secure and Real-Time Databases in Distributed Environments, </title> <booktitle> Annual IFIP WG 11.3 Conference of Database Security, </booktitle> <address> Lake Tahoe, CA, </address> <month> Aug. </month> <year> 1997, </year> <pages> pp. 57-71. </pages>
Reference-contexts: database support based on a new notion of data deadlines [15], (rather than just transaction deadlines), parallel and real-time recovery based on semantics of data and system operational mode (e.g. crisis mode), use of reflective information and a specification language to support adaptive fault tolerance [5], real-time performance and security <ref> [13] </ref>, the idea of security rules embedded into objects together with the ability for these rules to utilize profiles of various types, composable fault tolerant objects that synergistically operate with the transaction properties of databases and with real-time logging and recovery, new architecture and model of interaction between multimedia and transaction
Reference: [14] <author> G. Wiederhold, </author> <title> Mediators in the Architecture of Future Information Systems, </title> <journal> IEEE Computer, </journal> <volume> Vol. 25, No. 3, </volume> <month> March </month> <year> 1992, </year> <pages> pp. 38-49. </pages>
Reference: [15] <author> M. Xiong, R. Sivasankaran, J. Stankovic, K. Ramamritham and D. Towsley, </author> <title> Scheduling Transactions with Temporal Constraints: Exploiting Data Semantics, </title> <booktitle> Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: The collection of software services that support this vision is called BeeHive. The BeeHive system that is currently being defined has many innovative components, including: real-time database support based on a new notion of data deadlines <ref> [15] </ref>, (rather than just transaction deadlines), parallel and real-time recovery based on semantics of data and system operational mode (e.g. crisis mode), use of reflective information and a specification language to support adaptive fault tolerance [5], real-time performance and security [13], the idea of security rules embedded into objects together with
Reference: [16] <author> J. Zinky, D. Bakken, and R. Schantz, </author> <title> Architectural Support for Quality of Service for CORBA Objects, </title> <journal> Theory and Practice of Object Systems, </journal> <volume> 3(1) </volume> <pages> 1-20, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: There have been even fewer that have dealt with trying to incorporate external data into a database with these (real-time, fault tolerance, quality of service, and security) characteristics. Due to space limitations we briefly describe just one of these projects. The QuO architecture <ref> [16] </ref> being developed at BBN aims at supporting QoS at the CORBA object level. It provides mechanisms for measuring and enforcing QoS agreements. Its goal is to help distributed applications be more predictable and adaptive even if end-to-end guarantees cannot be provided.
References-found: 16

