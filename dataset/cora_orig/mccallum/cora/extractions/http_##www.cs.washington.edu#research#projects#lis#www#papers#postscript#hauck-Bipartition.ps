URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hauck-Bipartition.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Title: An Evaluation of Bipartitioning Techniques  
Author: Scott Hauck, Gaetano Borriello 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: Chapel Hill Conference on Advanced Research in VLSI, 1995.  
Abstract: Logic partitioning is an important issue in VLSI CAD, and has been an area of active research for at least the last 25 years. Numerous approaches have been developed and many different techniques have been combined for a wide range of applications. In this paper, we examine many of the existing techniques for logic bipartitioning and present a methodology for determining the best mix of approaches. The result is a novel bipartitioning algorithm that includes both new and preexisting. Our algorithm produces results that are at least 17% better than the state-of-the-art while also being efficient in runtime.
Abstract-found: 1
Intro-found: 1
Reference: [Bui89] <author> T. Bui, C. Heigham, C. Jones, T. Leighton, </author> <title> Improving the Performance of the Kernighan-Lin and Simulated Annealing Graph Bisection Algorithms, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 775-778, </pages> <year> 1989. </year>
Reference-contexts: The simplest clustering method is to randomly combine connected nodes. The idea here is not to add any local optimization to the KLFM algorithm, but instead to simply exploit KLFMs better results when the nodes in the circuit have greater connectivity. A maximum random matching of the circuit graph <ref> [Bui89] </ref> can be formed by randomly picking pairs of connected nodes to cluster, and then reclustering as necessary to form the maximum number of disjoint pairs. Unfortunately, this is complex and time-consuming, possibly requiring O (n 3 ) time [Galil86].
Reference: [Cheng88] <author> C. K. Cheng, T. C. Hu, </author> <title> Maximum Concurrent Flow and Minimum Ratio-cut, </title> <type> Technical Report CS88-141, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> December, </month> <year> 1988. </year>
Reference-contexts: For all of these tasks, the goal is to minimize the communication between partitions while ensuring that each partition is no larger than the capacity of the target device. While it is possible to solve the case of unbounded partition sizes exactly <ref> [Cheng88] </ref>, the case of balanced partition sizes is NP-complete [Garey79]. As a result numerous heuristic algorithms have been proposed.
Reference: [Cong92] <author> J. Cong, L. Hagen, A. Kahng, </author> <title> Net Partitions Yield Better Module Partitions, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 47-52, </pages> <year> 1992. </year>
Reference-contexts: Specifically, there exists a large amount of work on spectral partitioning methods (as well as others) that constructs a partitioning from scratch. We will consider here the IG-Match <ref> [Cong92] </ref>, EIG1 and EIG-IG [Hagen92] spectral partitioning algorithms. Details of these approaches are beyond the scope of this paper. One important note is that these algorithms are designed to optimize for the ratio-cut objective [Wei89], which does not necessarily generate balanced partitions. <p> Mapping Random EIG1 EIG1-IG IG-Match All Spectral s38584 57 57 57 57 57 s15850 60 60 96 96 60 s9234 52 54 54 n/a 54 Geom. Mean 58.8 65.0 66.8 n/a 61.8 Table 7a. Quality comparison of Spectral initial partition creation methods. IG-Match <ref> [Cong92] </ref>, EIG1 and EIG-IG [Hagen92] are spectral partitioning algorithms, used here to generate initial partitions. Entries labeled n/a are situations where the algorithm failed to find a partitioning within the required partition size bounds.
Reference: [Cong93] <author> J. Cong, M. Smith, </author> <title> A Parallel Bottom-up Clustering Algorithm with Applications to Circuit Partitioning in VLSI Design, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 755-760, </pages> <year> 1993. </year>
Reference-contexts: In this way, the algorithm performs very coarse-grain optimization during early passes, very fine grain optimization during late passes, as well as medium-grain optimization during the middle passes. This algorithm, which we will refer to here as iterative unclustering, is based on work by Cong and Smith <ref> [Cong93] </ref>. Single-level Clustering Recursive Clustering Mapping No Unclustering Complete Unclustering No Unclustering Complete Unclustering Iterative Unclustering Edge Unclustering s38584 95 77 167 88 57 56 s15850 77 67 123 84 60 62 s9234 68 61 105 54 52 58 Geom. Mean 92.4 80.1 119.3 75.6 58.8 59.7 the specified algorithm.
Reference: [Donath88] <author> W. E. Donath, </author> <title> "Logic Partitioning", in Physical Design Automation of VLSI Systems, </title> <editor> B. Preas, M. Lorenzetti, Editors, </editor> <address> Menlo Park, CA: </address> <publisher> Benjamin/Cummings, </publisher> <pages> pp. 65-86, </pages> <year> 1988. </year>
Reference-contexts: While it is possible to solve the case of unbounded partition sizes exactly [Cheng88], the case of balanced partition sizes is NP-complete [Garey79]. As a result numerous heuristic algorithms have been proposed. In a 1988 survey of partitioning algorithms <ref> [Donath88] </ref> Donath stated there is a disappointing lack of data comparing partitioning algorithms, and unfortunately, comparisons of the available algorithms have not kept pace with their development, so we cannot always judge the cost-effectiveness of the different methods. This statement still holds true, with many approaches but few overall comparisons.
Reference: [Fiduccia82] <author> C. M. Fiduccia, R. M. Mattheyses, </author> <title> "A Linear-Time Heuristic for Improved Network Partitions", </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 241-247, </pages> <year> 1982. </year>
Reference-contexts: This statement still holds true, with many approaches but few overall comparisons. This paper addresses the bipartitioning problem by comparing many of the existing techniques, along with some new optimizations. It focuses primarily on those approaches that build on the Kernighan-Lin, Fiduccia-Mattheyses (KLFM) algorithm <ref> [Kernighan70, Fiduccia82] </ref>. One of the surprising results to emerge from this study is that by appropriately applying existing techniques, an algorithm based upon KLFM can produce results better than the current state-of-the-art. <p> Basic Kernighan-Lin, Fiduccia-Matheyses Bipartitioning One of the best-known, and most widely extended, bipartitioning algorithms is that of Kernighan and Lin [Kernighan70], especially the variant developed by Fiduccia and Mattheyses <ref> [Fiduccia82] </ref>. Pseudo-code for the algorithm is given in figure 1. It is an iterative-improvement algorithm that begins with an initial partition and iteratively modifies it to improve the cutsize. The cutsize is the number of nets connected to nodes in both partitions, and is the value to be optimized.
Reference: [Ford62] <author> L. R. Ford, Jr., D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton, </publisher> <address> NJ: </address> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference: [Galil86] <author> Z. Galil, </author> <title> Efficient Algorithms for Finding Maximum Matching in Graphs, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 18, No. 1, </volume> <pages> pp. 23-38, </pages> <month> March, </month> <year> 1986. </year>
Reference-contexts: A maximum random matching of the circuit graph [Bui89] can be formed by randomly picking pairs of connected nodes to cluster, and then reclustering as necessary to form the maximum number of disjoint pairs. Unfortunately, this is complex and time-consuming, possibly requiring O (n 3 ) time <ref> [Galil86] </ref>. We chose to test a simpler algorithm (referred to here as random clustering), that should generate similar results while being more efficient and easier to implement.
Reference: [Garbers90] <author> J. Garbers, H. J. Prmel, A. Steger, </author> <title> Finding Clusters in VLSI Circuits, </title> <booktitle> International Conference on Computer-Aided Design, </booktitle> <pages> pp. 520-523, </pages> <year> 1990. </year>
Reference-contexts: Note that with random clustering, a new clustering is generated for each run of the KLFM algorithm. Numerous more intelligent clustering algorithms exist. K-L clustering <ref> [Garbers90] </ref> (not to be confused with KL, the Kernighan-Lin algorithm) is a method that looks for multiple independent short paths between nodes, expecting that these nodes should be placed into the same partition. Otherwise, each of these paths will have a net in the cutset, degrading the partition quality. <p> In our study of K-L clustering we ignored all nets with fanout greater than 10, and used k = 2, l 1 = 1, l 2 = 3. The values of maximum considered fanout and l 1 were chosen to give reasonable computation times. While <ref> [Garbers90] </ref> recommends k = 3, l 1 = 1, l 2 = 3, l 3 = 3, we have found that this yielded few clustering opportunities (this will be discussed later), and the parameters we chose gave the greatest clustering opportunities with reasonable runtime.
Reference: [Garey79] <author> M. Garey, D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <address> San Francisco, CA: </address> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: While it is possible to solve the case of unbounded partition sizes exactly [Cheng88], the case of balanced partition sizes is NP-complete <ref> [Garey79] </ref>. As a result numerous heuristic algorithms have been proposed.
Reference: [Goldberg83] <author> M. K. Goldberg, M. Burstein, </author> <title> Heuristic Improvement Technique for Bisection of VLSI Networks, </title> <booktitle> International Conference on Computer Design, </booktitle> <pages> pp. 122-125, </pages> <year> 1983. </year>
Reference-contexts: Secondly, it has been shown that the KLFM algorithm performs much better when the nodes in the circuit are connected to at least an average of 6 nets, while nodes in circuits are typically connected to between 2.8 to 3.5 nets <ref> [Goldberg83] </ref>. Clustering should in general increase the number of nets connected to each node, and thus improve the KLFM algorithm.
Reference: [Hagen92] <author> L. Hagen, A. B. Kahng, </author> <title> New Spectral Methods for Ratio Cut Partitioning and Clustering, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> Vol. 11, No. 9, </volume> <pages> pp. 1074-1085, </pages> <month> September, </month> <year> 1992. </year>
Reference-contexts: In table 1 we present the results of our algorithm (Optimized KLFM), along with results of three of the best current methods (Paraboli [Riess94], EIG1 <ref> [Hagen92] </ref>, and Network Flow [Yang94]), on a set of standard benchmarks [MCNC93]. Note that the EIG1 algorithm is meant to be used for ratio-cut partitioning, not mincut partitioning as presented here. <p> Quality comparison of partitioning methods. Values for KLFM and Optimized KLFM 1 are the best of ten trials. The EIG1 and Paraboli results are from [Riess94] (though EIG1 was proposed in <ref> [Hagen92] </ref>), and the Network Flow results are from [Yang94]. All tests require partition sizes to be between 45% and 55% of the total circuit sizes. Although the work described in this paper is applicable to many situations, it has been biased by the fact that we are targeting multi-FPGA systems. <p> Specifically, there exists a large amount of work on spectral partitioning methods (as well as others) that constructs a partitioning from scratch. We will consider here the IG-Match [Cong92], EIG1 and EIG-IG <ref> [Hagen92] </ref> spectral partitioning algorithms. Details of these approaches are beyond the scope of this paper. One important note is that these algorithms are designed to optimize for the ratio-cut objective [Wei89], which does not necessarily generate balanced partitions. <p> Mapping Random EIG1 EIG1-IG IG-Match All Spectral s38584 57 57 57 57 57 s15850 60 60 96 96 60 s9234 52 54 54 n/a 54 Geom. Mean 58.8 65.0 66.8 n/a 61.8 Table 7a. Quality comparison of Spectral initial partition creation methods. IG-Match [Cong92], EIG1 and EIG-IG <ref> [Hagen92] </ref> are spectral partitioning algorithms, used here to generate initial partitions. Entries labeled n/a are situations where the algorithm failed to find a partitioning within the required partition size bounds.
Reference: [Hauck95] <author> S. Hauck, G. Borriello, </author> <title> Logic Partition Orderings for Multi-FPGA Systems, </title> <booktitle> submitted to International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1995. </year>
Reference-contexts: Since this is not an important issue for our purposes, it was not included in our implementation. There are several alterations that can be made to this algorithm to boost performance, details of which can be found elsewhere <ref> [Hauck95] </ref>. Once the algorithm splits up a group into subpartitions, the size of the new groups are checked to determine if they should be further subdivided. For our purposes, the maximum allowable cluster size is equal to (total circuit size)/100, which is half the maximum partition size variation.
Reference: [Kernighan70] <author> B. W. Kernighan, S. Lin, </author> <title> "An Efficient Heuristic Procedure for Partitioning of Electrical Circuits", </title> <journal> Bell Systems Technical Journal, </journal> <volume> Vol. 49, No. 2, </volume> <pages> pp. </pages> <address> 291- 307, </address> <month> February </month> <year> 1970. </year>
Reference-contexts: This statement still holds true, with many approaches but few overall comparisons. This paper addresses the bipartitioning problem by comparing many of the existing techniques, along with some new optimizations. It focuses primarily on those approaches that build on the Kernighan-Lin, Fiduccia-Mattheyses (KLFM) algorithm <ref> [Kernighan70, Fiduccia82] </ref>. One of the surprising results to emerge from this study is that by appropriately applying existing techniques, an algorithm based upon KLFM can produce results better than the current state-of-the-art. <p> Basic Kernighan-Lin, Fiduccia-Matheyses Bipartitioning One of the best-known, and most widely extended, bipartitioning algorithms is that of Kernighan and Lin <ref> [Kernighan70] </ref>, especially the variant developed by Fiduccia and Mattheyses [Fiduccia82]. Pseudo-code for the algorithm is given in figure 1. It is an iterative-improvement algorithm that begins with an initial partition and iteratively modifies it to improve the cutsize.
Reference: [Krishnamurthy84] <author> B. Krishnamurthy, </author> <title> "An Improved Min-Cut Algorithm for Partitioning VLSI Networks", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-33, No. 5, </volume> <pages> pp. 438-446, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: D) to remove the newly cut three-terminal net from the cutset, and this would still keep the cutsize at 2 because of the edge from C to the rest of the logic. 13 To deal with this problem, and give the KLFM algorithm some lookahead ability, Krishnamurthy proposed higher-level gains <ref> [Krishnamurthy84] </ref>. As in the standard KLFM algorithm, a net that is not in the cutset contributes an immediate (first-level) increase of 1 (gain of -1) in cutsize if any of the nodes connected to it move to another partition. <p> We have also created the presweeping clustering preprocessor to help most algorithms handle small fanout gates. We have also shown how shortest-path clustering can be implemented efficiently. We developed the edge unclustering method, which is competitive with iterative unclustering. Finally, we have extended the work of Krishnamurthy <ref> [Krishnamurthy84] </ref>, both to allow higher-order gains to be applied to nets not in the cutset, and also to give an efficient implementation, even when the circuit is clustered. Beyond the details of how exactly to construct the best partitioner, there are several important lessons to be learned.
Reference: [Kuznar94a] <author> R. Kuznar, F. Brglez, B. Zajc, </author> <title> Multi-way Netlist Partitioning into Heterogeneous FPGAs and Minimization of Total Device Cost and Interconnect, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 238-243, </pages> <year> 1994. </year>
Reference-contexts: Our algorithm is also fast, taking at most 7 minutes on the largest examples. Note that bipartitioning with replication has shown some promising results (all of the algorithms in the table do not allow replication). <ref> [Kuznar94a, Kuznar94b] </ref> has reported results only 7-10% worse than ours. However, these results have no cap on the maximum partition size, while all other trials have a maximum partition size of 55% of the logic. In fact, some of the runs have partitions of size 60% or larger.
Reference: [Kuznar94b] <author> R. Kuznar, F. Brglez, B. Zajc, </author> <title> A Unified Cost Model for Min-cut Partitioning with Replication Applied to Optimization of Large Heterogeneous FPGA Partitions, </title> <booktitle> European Design Automation Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Our algorithm is also fast, taking at most 7 minutes on the largest examples. Note that bipartitioning with replication has shown some promising results (all of the algorithms in the table do not allow replication). <ref> [Kuznar94a, Kuznar94b] </ref> has reported results only 7-10% worse than ours. However, these results have no cap on the maximum partition size, while all other trials have a maximum partition size of 55% of the logic. In fact, some of the runs have partitions of size 60% or larger.
Reference: [MCNC93] <institution> MCNC Partitioning93 benchmark suite. </institution> <note> Email benchmarks@mcnc.org for ftp access. </note>
Reference-contexts: In table 1 we present the results of our algorithm (Optimized KLFM), along with results of three of the best current methods (Paraboli [Riess94], EIG1 [Hagen92], and Network Flow [Yang94]), on a set of standard benchmarks <ref> [MCNC93] </ref>. Note that the EIG1 algorithm is meant to be used for ratio-cut partitioning, not mincut partitioning as presented here. <p> Mapping s38584 s35932 s15850 s13207 s9234 s5378 Nodes (gates, latches, IOs) 22451 19880 11071 9445 6098 3225 Table 2. Sizes of example circuits. The 6 largest circuits from the MCNC partitioning benchmark suite <ref> [MCNC93] </ref> are used as test cases for this work (one of the largest, s38417, was not used because it was found to be corrupted at the storage site).
Reference: [Riess94] <author> B. M. Riess, K. Doll, F. M. Johannes, </author> <title> Partitioning Very Large Circuits Using Analytical Placement Techniques, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 646-651, </pages> <year> 1994. </year>
Reference-contexts: In table 1 we present the results of our algorithm (Optimized KLFM), along with results of three of the best current methods (Paraboli <ref> [Riess94] </ref>, EIG1 [Hagen92], and Network Flow [Yang94]), on a set of standard benchmarks [MCNC93]. Note that the EIG1 algorithm is meant to be used for ratio-cut partitioning, not mincut partitioning as presented here. <p> Mean 118.8 4 9 . 8 156.5 73.1 60.3 Normalized 2.386 1 . 0 0 0 3.143 1.468 1.211 Table 1. Quality comparison of partitioning methods. Values for KLFM and Optimized KLFM 1 are the best of ten trials. The EIG1 and Paraboli results are from <ref> [Riess94] </ref> (though EIG1 was proposed in [Hagen92]), and the Network Flow results are from [Yang94]. All tests require partition sizes to be between 45% and 55% of the total circuit sizes.
Reference: [Roy93] <author> K. Roy, C. Sechen, </author> <title> A Timing Driven N-Way Chip and Multi-Chip Partitioner, </title> <booktitle> International Conference on Computer-Aided Design, </booktitle> <pages> pp. 240-247, </pages> <year> 1993. </year>
Reference-contexts: Using l 2 = 4 would increase the clustering opportunities, but would also greatly increase runtime. A much more efficient clustering algorithm, related to K-L clustering, has been proposed <ref> [Roy93] </ref> (referred to here as bandwidth clustering). In this method, each net e in the circuit provides a bandwidth of 1/(|e|-1) between all nodes connected to it, where |e| is the number of nodes or clusters connected to that net.
Reference: [Schuler72] <author> D. M. Schuler, E. G. Ulrich, </author> <title> Clustering and Linear Placement, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 50-56, </pages> <year> 1972. </year>
Reference-contexts: A clustering algorithm similar to bandwidth clustering, but which does not put an absolute lower bound on the necessary amount of bandwidth between the nodes, and which also considers the fanout of the nodes involved, has also been tested. It is based upon work done by Schuler and Ulrich <ref> [Schuler72] </ref>, with several modifications. We will refer to it as connectivity clustering. Like random clustering, each node is examined in a random order and clustered with one of its neighbors. <p> The table in the introduction shows that applying all of these techniques generates results at least 17% better than the state-of-the-art in partitioning research. This paper has included several novel techniques, or efficient implementations of existing work. We have started from the base work of Schuler and Ulrich <ref> [Schuler72] </ref> to develop an efficient, effective clustering method. We have also created the presweeping clustering preprocessor to help most algorithms handle small fanout gates. We have also shown how shortest-path clustering can be implemented efficiently. We developed the edge unclustering method, which is competitive with iterative unclustering.
Reference: [Wei89] <author> Y.-C. Wei, C.-K. Cheng, </author> <title> Towards Efficient Hierarchical Designs by Ratio Cut Partitioning, </title> <booktitle> International Conference on Computer-Aided Design, </booktitle> <pages> pp. 298-301, </pages> <year> 1989. </year>
Reference-contexts: Mean 667.6 641.0 652.5 647.5 Table 6b. Performance comparison of initial partition creation methods. Values are total CPU time on a SPARC-IPX for ten runs using the specified algorithm. An alternative to this is seeded initialization, which is based on work by Wei and Cheng <ref> [Wei89] </ref>. The idea is to allow the KLFM algorithm to do all the work of finding the initial partitioning. It randomly chooses one cluster to put into one partition, and all other clusters are placed into the other partition. <p> We will consider here the IG-Match [Cong92], EIG1 and EIG-IG [Hagen92] spectral partitioning algorithms. Details of these approaches are beyond the scope of this paper. One important note is that these algorithms are designed to optimize for the ratio-cut objective <ref> [Wei89] </ref>, which does not necessarily generate balanced partitions. However, we obtained the programs from the authors and altered them to generate only partitions with sizes between 49% and 51% of the complete circuit size, the same allowed partition size variation used throughout this paper. <p> Note that by a similar argument we can show that partitioning algorithms that lack strong control over partition sizes, such as ratio-cut algorithms <ref> [Wei89] </ref>, are unsuitable for our purposes. As we discussed above, the greater the allowed variation in partition sizes, the better the expected partitioning results. To test this out, we applied our partitioning algorithm with various allowed size variations.
Reference: [Weinmann94] <author> U. Weinmann, </author> <title> FPGA Partitioning under Timing Constraints, </title> <editor> in W. R. Moore, W. Luk, Eds., More FPGAs, </editor> <publisher> Oxford: Abingdon EE&CS Books, </publisher> <pages> pp. 120-128, </pages> <year> 1994. </year> <month> 20 </month>
Reference-contexts: Gray loops at right indicate logic grouped together during technology-mapping. The only balanced partitioning has the largest group in one partition, the other two in the other partition, yielding a cutsize of 5. The effects of technology mapping on cutsize have been examined previously by Weinmann <ref> [Weinmann94] </ref>, who determined that technology-mapping before partitioning is actually a good idea, primarily for performance reasons. However, in his study he used only a basic implementation of Kernighan-Lin (apparently not even the Fiduccia-Mattheyses optimizations were applied), thus generating cutsizes significantly larger than what our algorithm produces, with much slower performance.
Reference: [Xilinx92] <author> Xilinx, Inc., </author> <title> The Programmable Gate Array Data Book, </title> <year> 1992. </year>
Reference-contexts: Before describing the last clustering method, it is necessary to discuss how to calculate the size of a logic node in the circuit being clustered. For our application (multi-FPGA systems), we are targeting FPGAs such as the Xilinx 3000 series <ref> [Xilinx92] </ref>, where all logic is implemented by lookup-tables (LUTs). A LUT is a logic block that can implement any function of N variables, where N is typically 4 or 5.
Reference: [Yang94] <author> H. Yang, D. F. Wong, </author> <title> Efficient Network Flow Based Min-Cut Balanced Partitioning, </title> <booktitle> to appear in International Conference on Computer-Aided Design, </booktitle> <year> 1994. </year>
Reference-contexts: In table 1 we present the results of our algorithm (Optimized KLFM), along with results of three of the best current methods (Paraboli [Riess94], EIG1 [Hagen92], and Network Flow <ref> [Yang94] </ref>), on a set of standard benchmarks [MCNC93]. Note that the EIG1 algorithm is meant to be used for ratio-cut partitioning, not mincut partitioning as presented here. <p> Quality comparison of partitioning methods. Values for KLFM and Optimized KLFM 1 are the best of ten trials. The EIG1 and Paraboli results are from [Riess94] (though EIG1 was proposed in [Hagen92]), and the Network Flow results are from <ref> [Yang94] </ref>. All tests require partition sizes to be between 45% and 55% of the total circuit sizes. Although the work described in this paper is applicable to many situations, it has been biased by the fact that we are targeting multi-FPGA systems.
Reference: [Yeh91] <author> C.-W. Yeh, C.-K. Cheng, T.-T. Y. Lin, </author> <title> A General Purpose Multiple Way Partitioning Algorithm, </title> <booktitle> Design Automation Conference, </booktitle> <pages> pp. 421-426, </pages> <year> 1991. </year>
Reference-contexts: Dual Partitioning During bipartitioning, the goal is to optimize the number of nets in the cutset. Because of this, it seems odd that we move nodes from partition to partition instead of moving nets. As suggested by Yeh, Cheng, and Lin <ref> [Yeh91] </ref>, we can combine both approaches in a single partitioning algorithm. The algorithm consists of Primal passes, which are identical to one pass of the KLFM outer loop, and Dual passes, which are similar to the KLFM passes, except that nets are moved instead of nodes.
Reference: [Yeh92] <author> C.-W. Yeh, C.-K. Cheng, T.-T. Lin, </author> <title> "A Probabilistic Multicommodity-Flow Solution to Circuit Clustering Problems", </title> <booktitle> International Conference on Computer-Aided Design, </booktitle> <pages> pp. 428-431, </pages> <year> 1992. </year>
Reference-contexts: A method proposed by Yeh, Cheng, and Lin <ref> [Yeh92] </ref> (referred to here as shortest-path clustering) iteratively applies a partitioning method to the circuit until all pieces are small enough to be considered clusters.
References-found: 27

