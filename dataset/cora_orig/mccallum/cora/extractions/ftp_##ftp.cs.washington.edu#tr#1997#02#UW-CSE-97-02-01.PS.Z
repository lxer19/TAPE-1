URL: ftp://ftp.cs.washington.edu/tr/1997/02/UW-CSE-97-02-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: On the Limitations of Ordered Representations of Functions (Revised Version)  
Address: Box 352350 Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Jayram S. Thathachar Technical Report UW-CSE-97-02-01 February 1997 
Abstract-found: 1
Intro-found: 1
Reference: [BBB + 96] <author> Amos Beimel, Francesco Bergadano, Nader H. Bshouty, Eyal Kushilevitz, and Stefano Var-ricchio. </author> <title> On the applications of multiplicity automata in learning. </title> <booktitle> In 37th Annual Symposium on Foundations of Computer Science, </booktitle> <address> Burlington, Vermont, </address> <month> 14-16 October </month> <year> 1996. </year> <note> IEEE. To appear. </note>
Reference-contexts: Multiplicity automata are an important generalization of classic automata and have been used in a variety of areas. In learning theory, they have attracted a lot of attention because of their implications in the learnability of several classes of DNF-formulae (see <ref> [BBB + 96] </ref> for references to work in this area). In conjunction with the theory of formal series, they have been used to solve some old problems in automata theory (see, for example, [HK91]). They have also been used to model certain Markov-like stochastic processes with external inputs [CP71].
Reference: [BC95] <author> R.E. Bryant and Y.-A. Chen. </author> <title> Verification of arithmetic circuits with binary moment diagrams. </title> <booktitle> In 32nd ACM/IEEE Design Automation Conference, </booktitle> <address> Pittsburgh, </address> <month> June </month> <year> 1995. </year> <institution> Carnegie Mellon University. </institution>
Reference-contexts: Therefore, a large number of other representations, such as Multi-Terminal Binary Decision Diagrams (EVBDDs) [CMZ + 93], Edge-Valued Binary Decision Diagrams (EVBDDs) [McM93], Binary Moment Diagrams (*-BMDs) 1 <ref> [BC95] </ref> and Hybrid Decision Diagrams (HDDs) [CFZ95], have been proposed and applied to overcome some of the limitations of OBDDs. <p> Progress in the direction of concisely representing the multiplication function was made by Bryant and Chen <ref> [BC95] </ref> who proposed the *-BMD representation for efficiently representing multiplication and other integer functions. An immediate and important question that arose was whether *-BMDs are more powerful than MTBDDs or EVBDDs or, at the least, OBDDs.
Reference: [BCL + 94] <author> J.R. Burch, E.M. Clarke, D.E. Long, K.L. MacMillan, and D.L. Dill. </author> <title> Symbolic model checking for sequential circuit verification. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(4) </volume> <pages> 401-424, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Subsequently, OBDDs were also used as the underlying representation in symbolic model checking to alleviate the state explosion problem (see, for example, [BCM + 90], <ref> [BCL + 94] </ref> and [McM93]). Despite its success, the OBDD representation has proved to be unsatisfactory for many important functions.
Reference: [BCM + 90] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 1-33, </pages> <address> Washington, D.C., June 1990. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 20 </pages>
Reference-contexts: Subsequently, OBDDs were also used as the underlying representation in symbolic model checking to alleviate the state explosion problem (see, for example, <ref> [BCM + 90] </ref>, [BCL + 94] and [McM93]). Despite its success, the OBDD representation has proved to be unsatisfactory for many important functions.
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transac--tions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: Central to these symbolic methods is an underlying representation for various boolean and integer functions. Ideally, these representations have to be concise, canonical and easy to manipulate. The Ordered Binary Decision Diagram (OBDD) representation due to Bryant <ref> [Bry86] </ref> has been successfully used as the underlying representation in a variety of symbolic techniques for verification. The main drawback of OBDDs is in concisely representing some important functions, particularly integer functions such as multiplication which requires exponential size. <p> We then show that a variety of integer and boolean functions from arithmetic, formal languages, and graph theory have exponential complexity in the BLD representation. Our bounds also apply to other ordered representations such as Functional Decision Diagrams (FDDs) [KSR92] and *-BDDs [End95]. Bryant <ref> [Bry86] </ref> introduced the OBDD representation for boolean functions and showed that OBDDs can be manipulated efficiently and can compactly represent many useful functions, thereby enabling many tasks in digital-system design, verification and testing to be performed efficiently.
Reference: [Bry91] <author> R. E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representations of boolean functions with application to integer multiplication. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(2) </volume> <pages> 205-213, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Examples of boolean functions that have exponentially large fooling sets | including those that have been stated above | can be found in Lipton and Sedgewick [LS81], Papadimitriou and Sipser [PS84] and Bryant <ref> [Bry91] </ref>. Our final result concerns the separation between *-BMDs and OBDDs. We know that *-BMDs can efficiently represent many arithmetic functions that have exponential complexity in the OBDD representation. <p> Let (L; R) be any partition in P. The following proposition which is proved in <ref> [Bry91] </ref> will be used to construct a submatrix of M f = M L;R f having exponential rank. <p> &lt; ff &lt; 1. (Fooling Set) [LS81] Factor Verification: Verify if the product of two n-bit numbers equals a 2n-bit number. (Fooling Set) [LS81] Middle bit of Product: In contrast with the previous function, here we compute the middle bit of the product of two n bit numbers. (Fooling Set) <ref> [Bry91] </ref> Selection/Equality Testing: Given two n bit numbers, x and y such that x has exactly n=2 bits set to 1, check if the n=2-bit number obtained by selecting those bits in y at the positions corresponding to the 0s in x equals the remaining n=2-bit number in y. (Fooling Set) <p> The drawback is that these shifted versions may not be natural. Graph Properties: Verifying any of the following predicates on undirected graphs: Connectivity, Bipartiteness, and s-t-Connectivity. (Rank) [HMT88] For more details on these and other functions, see [LS81], [PS84], <ref> [Bry91] </ref> and [HMT88]. 16 6. *-BMDs and Regular Languages In the earlier sections, we saw that the rank method is a useful tool for proving bounds that hold uniformly in all the ordered representations. <p> This variant is similar in spirit to the one used by Enders [End95] and Bryant <ref> [Bry91] </ref>.
Reference: [CFZ95] <author> E. M. Clarke, M. Fujita, and X. Zhao. </author> <title> Hybrid decision diagrams | overcoming limitations of MTBDDs and BMDs. </title> <booktitle> In International Conference on Computer Aided Design, </booktitle> <pages> pages 159-163, </pages> <address> Los Alamitos, Ca., USA, November 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Therefore, a large number of other representations, such as Multi-Terminal Binary Decision Diagrams (EVBDDs) [CMZ + 93], Edge-Valued Binary Decision Diagrams (EVBDDs) [McM93], Binary Moment Diagrams (*-BMDs) 1 [BC95] and Hybrid Decision Diagrams (HDDs) <ref> [CFZ95] </ref>, have been proposed and applied to overcome some of the limitations of OBDDs. <p> This question was answered in the negative by Enders [End95], who exhibited functions with exponential complexity in the *-BMD representation but only need polynomial size OBDDs. Recently, Clarke et al. (see <ref> [CFZ95] </ref> and [CKZ96]) defined a generalization of MTBDDs and BMDs, called HDD, that combines the advantages of both representations. It is essential to understand the power and usefulness of all these representations by characterizing the complexity of various important functions in these representations.
Reference: [CKZ96] <author> E.M. Clarke, Manpreet Khaira, and Xudong Zhao. </author> <title> Word level symbolic model checking | avoiding the Pentium FDIV error. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 645-648, </pages> <year> 1996. </year>
Reference-contexts: This question was answered in the negative by Enders [End95], who exhibited functions with exponential complexity in the *-BMD representation but only need polynomial size OBDDs. Recently, Clarke et al. (see [CFZ95] and <ref> [CKZ96] </ref>) defined a generalization of MTBDDs and BMDs, called HDD, that combines the advantages of both representations. It is essential to understand the power and usefulness of all these representations by characterizing the complexity of various important functions in these representations.
Reference: [CMZ + 93] <author> E. Clarke, K.L. McMillian, X. Zhao, M. Fujita, and J.C.-Y. Yang. </author> <title> Spectral transforms for large boolean functions with application to technologie mapping. </title> <booktitle> In 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 54-60, </pages> <address> Dallas, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The main drawback of OBDDs is in concisely representing some important functions, particularly integer functions such as multiplication which requires exponential size. Therefore, a large number of other representations, such as Multi-Terminal Binary Decision Diagrams (EVBDDs) <ref> [CMZ + 93] </ref>, Edge-Valued Binary Decision Diagrams (EVBDDs) [McM93], Binary Moment Diagrams (*-BMDs) 1 [BC95] and Hybrid Decision Diagrams (HDDs) [CFZ95], have been proposed and applied to overcome some of the limitations of OBDDs. <p> To overcome some of its limitations, there have been several efforts to extend the OBDD concept to various ordered representations that, like OBDDs, still preserve the notion of an implicit order on the variables, but represent functions with boolean, integer or real ranges. Thus, representations such as MTBDDs <ref> [CMZ + 93] </ref> and EVBDDs [LS92] were defined that have been effective for some additional functions but still have exponential size complexity for other functions such as multiplication and exponentiation.
Reference: [CP71] <author> J. W. Carlyle and A. Paz. </author> <title> Realizations by stochastic finite automata. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 5(1) </volume> <pages> 26-40, </pages> <month> February </month> <year> 1971. </year>
Reference-contexts: is usually considered for a fixed partition of the inputs and handling the best-case partition is considerably harder. (An excellent source for results and references pertaining to the two kinds of partition is [KN95].) Our technique is analogous to that used in characterizing the minimum size of a multiplicity automaton <ref> [Fli74, CP71] </ref> computing some function in terms of the rank of the Hankel matrix associated with that function. Our technique provides insight into the contrast between boolean and integer representations. For example, consider the multiplication function. <p> In conjunction with the theory of formal series, they have been used to solve some old problems in automata theory (see, for example, [HK91]). They have also been used to model certain Markov-like stochastic processes with external inputs <ref> [CP71] </ref>. In this case, 0 and 1 are the stochastic matrices containing the transition probabilities corresponding to the external inputs 0 and 1 respectively, and fl is the characteristic vector of the desirable final states.
Reference: [DHS94] <author> M. Dietzfelbinger, J. Hromkovic, and G. Schnitger. </author> <title> A comparison of two lower bound methods for communication complexity. </title> <booktitle> In Symposium on Mathematical Foundations of Computer Science, </booktitle> <pages> pages 326-335, </pages> <year> 1994. </year>
Reference-contexts: In general, directly bounding the rank seems to be a hard problem, so there are fewer results of this kind. The other method that we use for bounding the rank is to construct large fooling sets. Dietzfelbinger et al. <ref> [DHS94] </ref> showed that for any boolean function, the rank is at least the square-root of the size of any fooling set; applying this, we can recast all the fooling set bounds for boolean functions as size bounds for the BLD representation. <p> For our application, we are interested in knowing how the fooling set size relates to the rank. The following proposition due to Dietzfelbinger et al. <ref> [DHS94] </ref> shows that if the fooling set size is exponential, then so is the rank. Although they considered equipartitions, the proof can be extended to handle unequal-sized partitions as well. Proposition 6 ([DHS94]): For any boolean function f , and any partition of its variable set into L and R, let <p> In general, constructing fooling sets is easier than computing the rank directly. However, there are functions for which the rank is exponentially larger than the size of any fooling set. In fact, Dietzfelbinger et al. <ref> [DHS94] </ref>, in the same paper referred to above, showed that almost all boolean functions satisfy the property that the rank is exponential but no fooling set is larger than linear in 6 We are dealing with 0-1 matrices here, so the rank is well-defined over any field. 15 size.
Reference: [End95] <author> R. Enders. </author> <title> Note on the complexity of binary moment diagram representations. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: We then show that a variety of integer and boolean functions from arithmetic, formal languages, and graph theory have exponential complexity in the BLD representation. Our bounds also apply to other ordered representations such as Functional Decision Diagrams (FDDs) [KSR92] and *-BDDs <ref> [End95] </ref>. Bryant [Bry86] introduced the OBDD representation for boolean functions and showed that OBDDs can be manipulated efficiently and can compactly represent many useful functions, thereby enabling many tasks in digital-system design, verification and testing to be performed efficiently. <p> An immediate and important question that arose was whether *-BMDs are more powerful than MTBDDs or EVBDDs or, at the least, OBDDs. This question was answered in the negative by Enders <ref> [End95] </ref>, who exhibited functions with exponential complexity in the *-BMD representation but only need polynomial size OBDDs. Recently, Clarke et al. (see [CFZ95] and [CKZ96]) defined a generalization of MTBDDs and BMDs, called HDD, that combines the advantages of both representations. <p> Our final result concerns the separation between *-BMDs and OBDDs. We know that *-BMDs can efficiently represent many arithmetic functions that have exponential complexity in the OBDD representation. However, Enders <ref> [End95] </ref> showed that the graph-predicate that checks whether a graph is a triangle has polynomial-sized OBDDs but has exponential complexity in the *-BMD representation. An interesting problem is to contrast these representations for natural classes of languages. <p> In this section, we show that there is a simple regular language that has exponential complexity in the *-BMD representation. In order to prove this, we use Enders' <ref> [End95] </ref> approach in bounding the number of distinct path functions. We now state our main result of this section. <p> As before, partition X into L and R, where L = fx p 1 ; x p 1 ; : : : ; x p k g. For any input : L ! f0; 1g, we have the following equations: Proposition 8 (Enders <ref> [End95] </ref>): f = t h () = t (1) jjjtj f t : (8) To bound the number of nodes in any particular level, we define a variant of the fooling set that we used earlier. This variant is similar in spirit to the one used by Enders [End95] and Bryant <p> 8 (Enders <ref> [End95] </ref>): f = t h () = t (1) jjjtj f t : (8) To bound the number of nodes in any particular level, we define a variant of the fooling set that we used earlier. This variant is similar in spirit to the one used by Enders [End95] and Bryant [Bry91].
Reference: [Fli74] <author> M. Fliess. </author> <title> Matrices de Hankel. </title> <journal> J. Math. Pures et Appl., </journal> <volume> 53 </volume> <pages> 197-224, </pages> <year> 1974. </year>
Reference-contexts: is usually considered for a fixed partition of the inputs and handling the best-case partition is considerably harder. (An excellent source for results and references pertaining to the two kinds of partition is [KN95].) Our technique is analogous to that used in characterizing the minimum size of a multiplicity automaton <ref> [Fli74, CP71] </ref> computing some function in terms of the rank of the Hankel matrix associated with that function. Our technique provides insight into the contrast between boolean and integer representations. For example, consider the multiplication function.
Reference: [GM92] <author> J. Gergov and Ch. Meinel. </author> <title> Efficient boolean manipulation with OBDD's can be extended to read-once only branching programs. </title> <type> Technical report, </type> <institution> Univ. Trier, </institution> <year> 1992. </year>
Reference-contexts: Another direction that can be taken is to study the power of read-once representations that relax the notion of an implicit order on the variables. An important example is the Free Binary Decision Diagram <ref> [GM92] </ref> representation but we could also consider generalizations of this representation similar to the BLD representation. Acknowledgments I am indebted to Paul Beame for his invaluable guidance and support during the course of this work and for his comments and clarifications in the paper.
Reference: [HK91] <author> Harju and Karhumaki. </author> <title> The equivalence problem of multitape finite automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 78, </volume> <year> 1991. </year>
Reference-contexts: In conjunction with the theory of formal series, they have been used to solve some old problems in automata theory (see, for example, <ref> [HK91] </ref>). They have also been used to model certain Markov-like stochastic processes with external inputs [CP71]. In this case, 0 and 1 are the stochastic matrices containing the transition probabilities corresponding to the external inputs 0 and 1 respectively, and fl is the characteristic vector of the desirable final states.
Reference: [HMT88] <author> Andras Hajnal, Wolfgang Maass, and Gyorgy Turan. </author> <title> On the communication complexity of graph properties. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 186-191, </pages> <address> Chicago, Illinois, </address> <month> 2-4 May </month> <year> 1988. </year>
Reference-contexts: These results are a byproduct of two main approaches that have been traditionally used for bounding the best-case communication complexity of boolean functions. For the graph predicates stated above, Hajnal et al. <ref> [HMT88] </ref> bounded the rank directly by using deep algebraic and combinatorial arguments and showed that the matrix associated with each predicate has exponential rank. In general, directly bounding the rank seems to be a hard problem, so there are fewer results of this kind. <p> The drawback is that these shifted versions may not be natural. Graph Properties: Verifying any of the following predicates on undirected graphs: Connectivity, Bipartiteness, and s-t-Connectivity. (Rank) <ref> [HMT88] </ref> For more details on these and other functions, see [LS81], [PS84], [Bry91] and [HMT88]. 16 6. *-BMDs and Regular Languages In the earlier sections, we saw that the rank method is a useful tool for proving bounds that hold uniformly in all the ordered representations. <p> The drawback is that these shifted versions may not be natural. Graph Properties: Verifying any of the following predicates on undirected graphs: Connectivity, Bipartiteness, and s-t-Connectivity. (Rank) <ref> [HMT88] </ref> For more details on these and other functions, see [LS81], [PS84], [Bry91] and [HMT88]. 16 6. *-BMDs and Regular Languages In the earlier sections, we saw that the rank method is a useful tool for proving bounds that hold uniformly in all the ordered representations.
Reference: [KN95] <author> E. Kushilevitz and N. </author> <title> Nisan. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: Note that this matrix is usually considered for a fixed partition of the inputs and handling the best-case partition is considerably harder. (An excellent source for results and references pertaining to the two kinds of partition is <ref> [KN95] </ref>.) Our technique is analogous to that used in characterizing the minimum size of a multiplicity automaton [Fli74, CP71] computing some function in terms of the rank of the Hankel matrix associated with that function. Our technique provides insight into the contrast between boolean and integer representations.
Reference: [KSR92] <author> U. Kebschull, E. Schubert, and W. Rosenstiel. </author> <title> Multilevel logic synthesis based on functional decision diagrams. </title> <booktitle> In 29th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 43-47, </pages> <year> 1992. </year>
Reference-contexts: We then show that a variety of integer and boolean functions from arithmetic, formal languages, and graph theory have exponential complexity in the BLD representation. Our bounds also apply to other ordered representations such as Functional Decision Diagrams (FDDs) <ref> [KSR92] </ref> and *-BDDs [End95]. Bryant [Bry86] introduced the OBDD representation for boolean functions and showed that OBDDs can be manipulated efficiently and can compactly represent many useful functions, thereby enabling many tasks in digital-system design, verification and testing to be performed efficiently.
Reference: [Len90] <author> Thomas Lengauer. </author> <title> VLSI theory. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> Ed. Jan van Leeuwen, </editor> <title> Elsevier and MIT Press (Volume A (= "1"): Algorithms and Complexity), volume 1. </title> <publisher> The MIT Press/Elsevier, </publisher> <year> 1990. </year> <month> 21 </month>
Reference-contexts: the form wcw R , for some w 2 f0; 1g fl . (Fooling Set) [LS81] Shifted Equality: Given two input strings and a number i, the function evaluates to 1 if and only if the first string equals the second shifted circularly to the right i times. (Fooling Set) <ref> [Len90] </ref> The proof that this function has fooling sets of exponential size under all partitions was generalized by Lam and Ruzzo [LR92].
Reference: [LR92] <author> Tak Wah Lam and Larry Ruzzo. </author> <title> Results on communication complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 44, </volume> <year> 1992. </year>
Reference-contexts: strings and a number i, the function evaluates to 1 if and only if the first string equals the second shifted circularly to the right i times. (Fooling Set) [Len90] The proof that this function has fooling sets of exponential size under all partitions was generalized by Lam and Ruzzo <ref> [LR92] </ref>. Using this result, one can transform a function f that has a large fooling set under some fixed partition to a shifting version of f which can be shown to have large fooling sets under all partitions. The drawback is that these shifted versions may not be natural.
Reference: [LS81] <author> Richard J. Lipton and Robert Sedgewick. </author> <title> Lower bounds for VLSI. </title> <booktitle> In Conference Proceedings of the Thirteenth Annual ACM Symposium on Theory of Computation, </booktitle> <pages> pages 300-307, </pages> <address> Milwaukee, Wisconsin, </address> <month> 11-13 May </month> <year> 1981. </year>
Reference-contexts: Examples of boolean functions that have exponentially large fooling sets | including those that have been stated above | can be found in Lipton and Sedgewick <ref> [LS81] </ref>, Papadimitriou and Sipser [PS84] and Bryant [Bry91]. Our final result concerns the separation between *-BMDs and OBDDs. We know that *-BMDs can efficiently represent many arithmetic functions that have exponential complexity in the OBDD representation. <p> Pattern Matching: Verify if the binary pattern string of ffn bits occurs in the binary text string of (1 ff)n bits, where 0 &lt; ff &lt; 1. (Fooling Set) <ref> [LS81] </ref> Factor Verification: Verify if the product of two n-bit numbers equals a 2n-bit number. (Fooling Set) [LS81] Middle bit of Product: In contrast with the previous function, here we compute the middle bit of the product of two n bit numbers. (Fooling Set) [Bry91] Selection/Equality Testing: Given two n bit <p> Pattern Matching: Verify if the binary pattern string of ffn bits occurs in the binary text string of (1 ff)n bits, where 0 &lt; ff &lt; 1. (Fooling Set) <ref> [LS81] </ref> Factor Verification: Verify if the product of two n-bit numbers equals a 2n-bit number. (Fooling Set) [LS81] Middle bit of Product: In contrast with the previous function, here we compute the middle bit of the product of two n bit numbers. (Fooling Set) [Bry91] Selection/Equality Testing: Given two n bit numbers, x and y such that x has exactly n=2 bits set to 1, check if the <p> Selection/Equality Testing: Given two n bit numbers, x and y such that x has exactly n=2 bits set to 1, check if the n=2-bit number obtained by selecting those bits in y at the positions corresponding to the 0s in x equals the remaining n=2-bit number in y. (Fooling Set) <ref> [LS81] </ref> A Deterministic Context-Free Language: The input is an encoding of a string u 2 f0; 1; c; flg fl and we have to verify that the string with the fl's removed from u is of the form wcw R , for some w 2 f0; 1g fl . (Fooling Set) <p> A Deterministic Context-Free Language: The input is an encoding of a string u 2 f0; 1; c; flg fl and we have to verify that the string with the fl's removed from u is of the form wcw R , for some w 2 f0; 1g fl . (Fooling Set) <ref> [LS81] </ref> Shifted Equality: Given two input strings and a number i, the function evaluates to 1 if and only if the first string equals the second shifted circularly to the right i times. (Fooling Set) [Len90] The proof that this function has fooling sets of exponential size under all partitions was <p> The drawback is that these shifted versions may not be natural. Graph Properties: Verifying any of the following predicates on undirected graphs: Connectivity, Bipartiteness, and s-t-Connectivity. (Rank) [HMT88] For more details on these and other functions, see <ref> [LS81] </ref>, [PS84], [Bry91] and [HMT88]. 16 6. *-BMDs and Regular Languages In the earlier sections, we saw that the rank method is a useful tool for proving bounds that hold uniformly in all the ordered representations.
Reference: [LS92] <author> Y.-T. Lai and S. Sastry. </author> <title> Edge-valued binary decision diagrams for multi-level hierarchical verification. </title> <booktitle> In 29th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 608-613, </pages> <year> 1992. </year>
Reference-contexts: Thus, representations such as MTBDDs [CMZ + 93] and EVBDDs <ref> [LS92] </ref> were defined that have been effective for some additional functions but still have exponential size complexity for other functions such as multiplication and exponentiation.
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, Norwell Mas-sachusetts, </publisher> <year> 1993. </year>
Reference-contexts: The main drawback of OBDDs is in concisely representing some important functions, particularly integer functions such as multiplication which requires exponential size. Therefore, a large number of other representations, such as Multi-Terminal Binary Decision Diagrams (EVBDDs) [CMZ + 93], Edge-Valued Binary Decision Diagrams (EVBDDs) <ref> [McM93] </ref>, Binary Moment Diagrams (*-BMDs) 1 [BC95] and Hybrid Decision Diagrams (HDDs) [CFZ95], have been proposed and applied to overcome some of the limitations of OBDDs. <p> Subsequently, OBDDs were also used as the underlying representation in symbolic model checking to alleviate the state explosion problem (see, for example, [BCM + 90], [BCL + 94] and <ref> [McM93] </ref>). Despite its success, the OBDD representation has proved to be unsatisfactory for many important functions.
Reference: [MS82] <author> Kurt Mehlhorn and Erik M. Schmidt. </author> <title> Las Vegas is better than determinism in VLSI and distributed computing (extended abstract). </title> <booktitle> In Proceedings of the Fourteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 330-337, </pages> <address> San Francisco, California, </address> <month> 5-7 May </month> <year> 1982. </year>
Reference-contexts: Therefore, for some functions we have to resort to computing the rank directly. This again is a classic problem that has been extensively studied in communication complexity. As shown by Mehlhorn and Schmidt <ref> [MS82] </ref>, the fixed-partition communication complexity of any function is bounded below by the logarithm of the rank of the associated matrix. In terms of the best-partition model, this means that the logarithm of the best-partition rank is a lower bound on the best-partition communication complexity.
Reference: [PS84] <author> C. Papadimitriou and M. Sipser. </author> <title> Communication complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28, </volume> <year> 1984. </year>
Reference-contexts: Examples of boolean functions that have exponentially large fooling sets | including those that have been stated above | can be found in Lipton and Sedgewick [LS81], Papadimitriou and Sipser <ref> [PS84] </ref> and Bryant [Bry91]. Our final result concerns the separation between *-BMDs and OBDDs. We know that *-BMDs can efficiently represent many arithmetic functions that have exponential complexity in the OBDD representation. <p> The drawback is that these shifted versions may not be natural. Graph Properties: Verifying any of the following predicates on undirected graphs: Connectivity, Bipartiteness, and s-t-Connectivity. (Rank) [HMT88] For more details on these and other functions, see [LS81], <ref> [PS84] </ref>, [Bry91] and [HMT88]. 16 6. *-BMDs and Regular Languages In the earlier sections, we saw that the rank method is a useful tool for proving bounds that hold uniformly in all the ordered representations.
Reference: [Yao79] <author> Andrew Chi-Chih Yao. </author> <title> Some complexity questions related to distributive computing (preliminary report). </title> <booktitle> In Conference Record of the Eleventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 209-213, </pages> <address> Atlanta, Georgia, </address> <month> 30 April-2 May </month> <year> 1979. </year> <month> 22 </month>
References-found: 26

