URL: ftp://ftp.ifad.dk/pub/papers/savdm.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Email: E-mail: peter@ifad.dk, fjan, nico, kees, toetg@dutiaa.tudelft.nl  
Title: SVDM: An Integrated Combination of SA and VDM  
Author: Peter Gorm Larsen Jan van Katwijk Nico Plat Kees Pronk Hans Toetenel 
Address: P.O. Box 356, NL-2600 AJ Delft, The Netherlands  
Affiliation: Delft University of Technology Faculty of Technical Mathematics and Informatics  
Abstract: In this paper we present Structured VDM (SVDM), a combination of Structured Analysis (SA) and the Vienna Development Method (VDM). Using this method, the designer is able to move back and forth between an SA graphical specification and a VDM textual specification. In this way the most appropriate notation for explaining the specification to people with a different background can be selected. An overview of the methodological aspects of the approach is given.
Abstract-found: 1
Intro-found: 1
Reference: [Bjtrner&82] <author> Dines Bjtrner and Cliff B. Jones. </author> <title> Formal Specification & Software Development. </title> <booktitle> Series in Computer Science, Prentice-Hall International, </booktitle> <year> 1982. </year>
Reference-contexts: an increase in the use of formal methods, it seems worthwhile to investigate possibilities to either annotate the analysis and design results (the most important ones are data flow diagrams (DFDs)) or to exchange either SA or SD with a formal method, in our case the Vienna Development Method (VDM) <ref> [Bjtrner&82, Jones90] </ref>.
Reference: [Constantine&79] <author> L.L. Constantine and E. Yourdon. </author> <title> Structured Design. </title> <publisher> Prentice Hall, </publisher> <year> 1979. </year>
Reference-contexts: A method in which aspects of formal methods and structured methods are somehow combined seems more appropriate. Structured Analysis/Structured Design (SA/SD) <ref> [Constantine&79] </ref> is one of the most widely used software development methods.
Reference: [Dick&91] <author> Jeremy Dick and Jerome Loubersac. </author> <title> A Visual Approach to VDM: Entity-Structure Diagrams. </title> <type> Technical Report DE/DRPA/91001, Bull, 68, Route de Versailles, </type> <address> 78430 Louveciennes (France), </address> <month> January </month> <year> 1991. </year>
Reference-contexts: Therefore, we consider this generated document as a secondary document. The level 0 VDM specification can be used to perform a consistency check of the system specified so far. The type information provided as entity-relationship diagrams is transformed into VDM domain definitions similar to the way done in <ref> [Dick&91] </ref>. The type information for the data stores is modeled as a part of the state for that DFD, similar to the way done in [Plat&91b]. Example: the spelling checker component (continued) The level 0 VDM specification for the spelling checker component is given below.
Reference: [Hall90] <author> Anthony Hall. </author> <title> Seven Myths of Formal Methods. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 11-19, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: This work was funded with the financial support of the Commission of the European Communities under the COMETT program (90/5199-Bc), IFAD and the Danish COWI foundation. 1 methods <ref> [Hall90] </ref>, most professional software developers are scared by the apparent amount of mathematics needed to read or write a formal specification. It is very hard to convince those professionals that using formal methods will lead to better specifications and programs, and that investments in these methods are indeed cost-effective.
Reference: [Hayes&89] <author> Ian J. Hayes and Cliff B. Jones. </author> <title> Specifications are not (necessarily) executable. </title> <type> Technical Report UMCS-89-12-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> December </month> <year> 1989. </year> <note> will be published in "Software Engineering Journal". </note>
Reference: [Jones90] <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM (second edition). </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: an increase in the use of formal methods, it seems worthwhile to investigate possibilities to either annotate the analysis and design results (the most important ones are data flow diagrams (DFDs)) or to exchange either SA or SD with a formal method, in our case the Vienna Development Method (VDM) <ref> [Bjtrner&82, Jones90] </ref>.
Reference: [Larsen&91a] <author> Peter Gorm Larsen, Nico Plat, and Hans Toetenel. </author> <title> A Complete Formal Semantics of Data Flow Diagrams. </title> <type> Technical Report, </type> <institution> Delft University of Technology, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: A complete and formal transformation from a hierarchy of DFDs to a collection of modules of VDM specifications is given in <ref> [Larsen&91a] </ref>. Generating the level 1 structure charts On basis of the decomposition hierarchy of DFDs, and the control information which has been added, it is possible to automatically generate structure charts which can be used as a graphical overview of the system. <p> Therefore, it is essential to make a further analysis of how such tools can be developed, and what the problems in this area are. We have defined a precise transformation, expressed in VDM-SL itself, from SA to VDM <ref> [Larsen&91a] </ref>. This definition can serve as a basis for the implementation of a prototype tool, illustrating the ideas of the combined method.
Reference: [Larsen&91b] <author> Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> An Executable Subset of Meta-IV with Loose Specification. In Submitted to the VDM'91 Symposium, VDM Europe, </title> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1991. </year>
Reference-contexts: This design step is similar to the reification step in VDM. Having transformed the mini-specifications into explicit function and operation definitions, and assuring an executable subset of VDM-SL has been used (see e.g. <ref> [Larsen&91b] </ref>), the designer can now execute the specification. This enables the designer to animate the entire specification which may be an advantage if the design is to be shown to an end-user. In this way errors can be corrected before the actual coding of the system is started.
Reference: [Longworth&86] <author> G. Longworth and D. </author> <title> Nicholls. SSADM Manual. </title> <publisher> NCC, </publisher> <month> December </month> <year> 1986. </year> <month> 19 </month>
Reference-contexts: A DFD is a directed graph consisting of elementary building blocks. Each building block can be represented graphically (Figure 1). Through the years a number of different dialects have evolved, and extensions have been defined (e.g. SA/RT [Ward&85] and SSADM <ref> [Longworth&86] </ref>), but we will limit ourselves to a very elementary form of DFDs with a small number of different building blocks: 3 (a) Data transformers. Data transformers are usually denoted as bubbles. They can have an arbitrary number of inputs, and an arbitrary number of outputs. (b) Data stores.
Reference: [Myers75] <author> G.J. Myers. </author> <title> Reliable Software through Composite Design. </title> <publisher> Van Nostrand, </publisher> <year> 1975. </year>
Reference: [Plat&91a] <author> Nico Plat, Jan van Katwijk, and Hans Toetenel. </author> <title> Applications and Benefits of Formal Methods in Software Development. </title> <type> Technical Report 91-33, </type> <institution> Delft University of Technology, Faculty of Technical Mathematics and Informatics, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Furthermore, these languages contain constructions for expressing abstraction. Abstraction makes designing complex systems easier, by characterizing the essential properties of the problem and emphasizing what is required rather than how it is achieved. The interested reader is referred to e.g. <ref> [Plat&91a] </ref> for a more in-depth discussion on formal methods. 2.1 Structured Analysis/Structured Design Structured Analysis/Structured Design (SA/SD) is one of the most widely used software development methods.
Reference: [Plat&91b] <author> Nico Plat, Jan van Katwijk, and Kees Pronk. </author> <title> A Case for Structured Analysis/Formal Design. In Submitted to the VDM'91 Symposium, VDM Europe, </title> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Essentially, this VDM specification gives a semantics to the hierarchy of DFDs. A possible transformation from DFDs to VDM is described in <ref> [Plat&91b] </ref> 2 . Although it is possible to generate a VDM specification at this stage, the specification will not be very helpful to the designer in itself. Therefore, we consider this generated document as a secondary document. <p> The type information provided as entity-relationship diagrams is transformed into VDM domain definitions similar to the way done in [Dick&91]. The type information for the data stores is modeled as a part of the state for that DFD, similar to the way done in <ref> [Plat&91b] </ref>. Example: the spelling checker component (continued) The level 0 VDM specification for the spelling checker component is given below. <p> ) ^ post Split (file name 0 ; word list ; docs 0 ) ^ preSort (word list ) ^ post Sort (word list ; sorted word list ) 2 The principle for the composition of data transformers is similar to what is called the Parallel ACcess (PAC) approach in <ref> [Plat&91b] </ref>. 10 At this stage, the post conditions of Split and Sort always yield the value `true'. Because no mini-specifications have been provided yet, from a semantical point of view any implementation with the right signature will satisfy Split and Sort. <p> This is achieved by using quantified expressions `introducing' values which will satisfy the pre conditions and post conditions of Split and Sort. For a more detailed discussion on this subject, the reader is referred to <ref> [Plat&91b] </ref>. 4.4 Producing mini-specifications When type information has been provided, the designer develops mini-specifications (directly expressed in VDM-SL) for each of the primitive data transformers.
Reference: [Sommerville82] <author> I. Sommerville. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: Thus, the result of this refinement activity is a decomposition hierarchy of DFDs. Example: the spelling checker component In our example we will show how a small component of a spelling checker can be developed using SVDM. The spelling checker example is used in <ref> [Sommerville82] </ref> to explain the notions of data flow diagrams and structure charts. The component which we will use to illustrate SVDM, will expect a file name, and checks whether a file having this name is present in a file system docs.
Reference: [Toetenel&90] <author> Hans Toetenel, Jan van Katwijk, Nico Plat. </author> <title> Structured Analysis Formal Design, using Stream & Object oriented Formal Specification. </title> <booktitle> In Proc. of the ACM SIGSOFT International Workshop on Formal Methods in Software Development. Software Engineering Notes 15(4): </booktitle> <pages> 118-127, </pages> <publisher> ACM Press, </publisher> <address> Napa, California, USA, </address> <month> 9-11 May </month> <year> 1990. </year>
Reference: [Ward&85] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems. Volume 1-3, </title> <publisher> Yourdon Press, </publisher> <address> New York, </address> <pages> 1985-1986. </pages>
Reference-contexts: A DFD is a directed graph consisting of elementary building blocks. Each building block can be represented graphically (Figure 1). Through the years a number of different dialects have evolved, and extensions have been defined (e.g. SA/RT <ref> [Ward&85] </ref> and SSADM [Longworth&86]), but we will limit ourselves to a very elementary form of DFDs with a small number of different building blocks: 3 (a) Data transformers. Data transformers are usually denoted as bubbles.
Reference: [Watt&87] <author> David A. Watt, Brian A. Wichmann and William Findlay. </author> <title> ADA Language and Methodology. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1987. </year>
Reference: [Wing90] <author> Jeannette M. Wing. </author> <title> A Specifier's Introduction to Formal Methods. </title> <journal> IEEE Software, </journal> <volume> 23(9) </volume> <pages> 8-24, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In addition to this, notations are provided in which the designer can express his design products. Usually these notations are graphical, and they lack a formal meaning. Therefore, the design products are potentially ambiguous. In <ref> [Wing90] </ref> formal methods are described as "mathematically based techniques for describing system properties.
Reference: [Yourdon&75] <author> E. Yourdon. </author> <title> Techniques of Program Structure and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1975. </year>
References-found: 18

