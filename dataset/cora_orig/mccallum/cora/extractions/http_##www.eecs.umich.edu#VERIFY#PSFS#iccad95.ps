URL: http://www.eecs.umich.edu/VERIFY/PSFS/iccad95.ps
Refering-URL: http://www.eecs.umich.edu/VERIFY/main.html
Root-URL: http://www.eecs.umich.edu
Note: 1. This research was supported by the National Science Foundation under Grant No. MIP-9200526 and by General Motors R&D Cen International Conference on Computer-Aided Design, 1995, pp. 174-180. Abstract  
Abstract: We present a simulation-based method for combinational design verification that aims at complete coverage of specified design errors using conventional ATPG tools. The error models used in prior research are examined and reduced to four types: gate substitution errors (GSEs), gate count errors (GCEs), input count errors (ICEs), and wrong input errors (WIEs). Conditions are derived for a gate to be completely testable for GSEs; These conditions lead to small test sets for GSEs. Near-minimal test sets are also derived for GCEs. We analyze redundancy in design errors and relate this to single stuck-line (SSL) redundancy. We show how to map all the foregoing error types into SSL faults, and describe an extensive set of experiments to evaluate the proposed method. Our experiments demonstrate that high coverage of the modeled design errors can be achieved with small test sets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Yoeli (ed.), </author> <title> Formal Verification of Hardware Design, </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> Calif., </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Design verification is the process of ensuring that a new design exhibits specified behavior. Many approaches to design error detection have been proposed based on formal verification <ref> [1] </ref>. However, formal verification is impractical for large logic circuits. In practice, such circuits are verified by simulation using representative input patterns (tests) [2].
Reference: [2] <author> M. Abramovici, M. A. Breuer, and A. D. Friedman, </author> <title> Digital Systems Testing and Testable Design, </title> <publisher> Computer Science Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Many approaches to design error detection have been proposed based on formal verification [1]. However, formal verification is impractical for large logic circuits. In practice, such circuits are verified by simulation using representative input patterns (tests) <ref> [2] </ref>. <p> A basic question concerning MIEs (WIEs) is the source of the missing (wrong) input. It must not depend on the erroneous gates output, otherwise, the circuit can become sequential. Errors that make a combinational circuit sequential can be detected by a levelization procedure <ref> [2] </ref>. The coverage relationships for the various design errors are summarized as follows; A complete test set for MIGSEs N n m 1+= Missing Correct circuit Erroneous circuit G G gate N = n + m - 1 G" G n 1 detecting GSEs. <p> To determine the capability of a given test set to detect design errors and SSL faults, we developed an error/fault simulator ESIM. The simulator uses parallel-pattern evaluation and critical path tracing techniques <ref> [2] </ref>; It simulates the circuit with multiple vectors concurrently and determines the detected errors/faults without explicit simulation of each error/fault. The circuits used throughout the experiments are ISCAS 85 benchmarks [10] and standard TTL circuits [11]. Note that all the circuits except c432 and c499 are SSL-irredun-dant.
Reference: [3] <author> M. S. Abadir, J. Ferguson, and T. E. Kirkland, </author> <title> "Logic design verification via test generation", </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 7, </volume> <pages> pp. 138-148, </pages> <month> Jan. </month> <year> 1988. </year>
Reference-contexts: However, formal verification is impractical for large logic circuits. In practice, such circuits are verified by simulation using representative input patterns (tests) [2]. A basic question that we address here is: Which tests should be applied and what is their efficiency? Abadir et al. <ref> [3] </ref> have defined a set of likely design errors for combinational logic and have shown that complete test sets for single stuck-line (SSL) faults detect many, but not all, such errors. <p> These error types are not necessarily complete, but they are believed to be common in the design process. We condense the errors identified by Abadir et al. <ref> [3] </ref> into four categories. (A similar classification is given independently in [5]). Gate substitution error (GSE): This refers to mistakenly replacing a gate by another gate with the same number of inputs. <p> The extra and missing inverter errors of [3,5-7] are considered as substitution of an inverter for a buffer and a buffer for an inverter, respectively. Gate count error (GCE): This corresponds to incorrectly adding or removing a gate, and includes the extra and missing gate errors of <ref> [3] </ref>. This category is combined with gate substitution in [5], where, unlike here, XOR and XNOR gates are not considered. A class of "local" errors is defined in [6] which includes only some of the errors in this category. <p> To cover extra/missing inverters in GSEs, a buffer can be inserted in each of a gates fanout branches as well as inputs with fanout. It has been suggested that most GSEs can be detected by a complete test set for SSL faults <ref> [3] </ref>. Our simulation study (Section 4) shows that such a test set can cover 80% to 100% of MIGSEs and 100% of SIGSEs. The actual coverage of MIGSEs is a function of the circuit structure, as well as the types of gates used in the circuit. <p> On the other hand, a test set generated for GSEs by assuming the gates are fully excitable or strong partially excitable may not detect all GSEs. A complete test set for SSL faults guarantees the detection of all SIGSEs <ref> [3] </ref>. Tests for MIGSEs also cover many SIGSEs. A circuit is SSL-irredundant if it contains no undetectable SSL faults. <p> Hence, we use simulation to extract the errors detected by the test set , where S SSL , S GSE , and S MGE are complete test sets for SSL faults, GSEs, and MGEs, respectively. In fact, all EIEs are detected by the test set for SSL faults alone <ref> [3] </ref>, hence, we only have to generate tests for the undetected MIEs and WIEs. Our experimental results show that most MIEs and WIEs are detected by the set S T . A basic question concerning MIEs (WIEs) is the source of the missing (wrong) input. <p> We conducted a preliminary experiment to determine the coverage of design errors using a complete test set for all detectable SSL faults. The results in Table 3 show that a complete test set for SSL faults guarantees the detection of all SIGSEs and EIEs, confirming results in <ref> [3] </ref>. The detection of the other design errors is not guaranteed but they are likely to be detected because the test set does exercise each net in the circuit. Our next experiments are concerned with generating almost complete test sets for all design errors.
Reference: [4] <author> D. Brand, </author> <title> "Exhaustive simulation need not require an expo nential number of tests", </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 12, </volume> <pages> pp. 1635-1641, </pages> <month> Nov. </month> <year> 1993. </year>
Reference: [5] <author> B. Chen, C. L. Lee, and J. E. Chen, </author> <title> "Design verification by using universal test sets", </title> <booktitle> Proc. Third Asian Test Symposium, </booktitle> <year> 1994, </year> <pages> pp. 261-266. </pages>
Reference-contexts: These error types are not necessarily complete, but they are believed to be common in the design process. We condense the errors identified by Abadir et al. [3] into four categories. (A similar classification is given independently in <ref> [5] </ref>). Gate substitution error (GSE): This refers to mistakenly replacing a gate by another gate with the same number of inputs. The extra and missing inverter errors of [3,5-7] are considered as substitution of an inverter for a buffer and a buffer for an inverter, respectively. <p> Gate count error (GCE): This corresponds to incorrectly adding or removing a gate, and includes the extra and missing gate errors of [3]. This category is combined with gate substitution in <ref> [5] </ref>, where, unlike here, XOR and XNOR gates are not considered. A class of "local" errors is defined in [6] which includes only some of the errors in this category. Input count error (ICE): This corresponds to using a gate with more or fewer inputs than required.
Reference: [6] <author> S. Kang and S. A. Szygenda, </author> <title> "The simulation automation system (SAS); concepts, implementation, and results", </title> <journal> IEEE Trans. on VLSI Systems, </journal> <volume> Vol. 2, </volume> <pages> pp. 89-99, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Recent research has considered the use of implementation-independent "universal" test sets [4,5], as well as random tests <ref> [6] </ref> for design error detection. In each case, the number of tests needed for good coverage of design errors can be excessive, and 100 percent coverage is not guaranteed. <p> This category is combined with gate substitution in [5], where, unlike here, XOR and XNOR gates are not considered. A class of "local" errors is defined in <ref> [6] </ref> which includes only some of the errors in this category. Input count error (ICE): This corresponds to using a gate with more or fewer inputs than required. Wrong input error (WIE): This error corresponds to connecting a gate input to a wrong signal. The "signal-like-source" error [6], is a special <p> is defined in <ref> [6] </ref> which includes only some of the errors in this category. Input count error (ICE): This corresponds to using a gate with more or fewer inputs than required. Wrong input error (WIE): This error corresponds to connecting a gate input to a wrong signal. The "signal-like-source" error [6], is a special case of WIE. Although a WIE may be viewed as a multiple ICE, a multiple ICE cannot model a WIE in an inverter. The errors in each category are studied next, and test patterns to detect them are determined. <p> It is difficult to compare the coverage results obtained in this paper to related work in the literature for the following reasons: (1) different error models are used; (2) test set sizes are missing from the results of <ref> [6] </ref>; and (3) standard benchmarks are not used in most prior work. Moreover, the CPU times cannot be accurately compared because ATALANTA runs on a SUN workstation while ESIM runs on an IBM PC.
Reference: [7] <author> E. J. Aas, T. Steen, and K. Klingsheim, </author> <title> "Quantifying design quality through design experiments", </title> <journal> IEEE Design and Test, </journal> <volume> Vol. 11, </volume> <pages> pp. 27-37, </pages> <month> Spring </month> <year> 1994. </year>
Reference-contexts: In general, to verify the identity of a gate G, that is, to determine the tests required for verification, we use the above notation in conjunction with Table 1. 2.2 Gate Substitution Errors (GSEs) According to experiments reported in <ref> [7] </ref>, the most frequent design error made by humans is gate substitution, accounting for around 67% of all errors. Gate substitution refers to mistakenly replacing a gate G with another gate G that has the same number of inputs. We represent this error by G/G. <p> If a vector v detects WI (u,w,G), then it must set u and w to opposite values and propagate the signal at u to a primary output. WIE appears to be the second most common design erroraround 17% of the errors reported in <ref> [7] </ref>. The relationship between MIEs and WIEs is stated in the following theorem: Theorem 6 A complete test set for MIEs on gates of type AND, NAND, OR, or NOR is a complete test set for WIEs on the same gates.
Reference: [8] <author> J. P. Hayes, </author> <title> "On the properties of irredundant logic net works", </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-25, </volume> <pages> pp. 884-892, </pages> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: For example, a test for MIEs detects many, but not necessarily all, SSL faults. 2.5 Design Error Redundancy We noted earlier that some design errors are undetectable. This leads to a type of redundancy that is quite different from that previously studied <ref> [8] </ref>. Definition 4 A gate G in a circuit C has redundant inputs if the function implemented by C is not changed when a proper subset of the inputs of G are removed. A circuit C is called GI-irredundant if no gate in C has redundant inputs.
Reference: [9] <author> H. K. Lee and D. S. Ha, </author> <title> "On the generation of test patterns for combinational circuits", </title> <institution> Dept. of Elec. Eng., Virginia Tech., </institution> <type> Rep. </type> <pages> 12-93, </pages> <year> 1993. </year>
Reference-contexts: checking for all modeled errors, the implementation is found to match the functional specifications, we can conclude with high confidence that the circuit is correct as designed. 4 Experimental Results In this section we describe the experiments performed to support the preceding analysis; these experiments used the ATPG tool ATALANTA <ref> [9] </ref>. To determine the capability of a given test set to detect design errors and SSL faults, we developed an error/fault simulator ESIM.
Reference: [10] <author> F. Brglez and H. Fujiwara, </author> <title> "A neutral netlist of 10 combina tional benchmark circuits and a target translator in fortran", </title> <booktitle> Proc. IEEE International Symposium on Circuits and Sys tems, </booktitle> <year> 1985, </year> <pages> pp. 695-698. </pages>
Reference-contexts: The simulator uses parallel-pattern evaluation and critical path tracing techniques [2]; It simulates the circuit with multiple vectors concurrently and determines the detected errors/faults without explicit simulation of each error/fault. The circuits used throughout the experiments are ISCAS 85 benchmarks <ref> [10] </ref> and standard TTL circuits [11]. Note that all the circuits except c432 and c499 are SSL-irredun-dant. We conducted a preliminary experiment to determine the coverage of design errors using a complete test set for all detectable SSL faults.
Reference: [11] <editor> Texas Instruments, </editor> <booktitle> The TTL Logic Data Book, </booktitle> <address> Dallas, </address> <year> 1988. </year> <title> S T S SSL S GSE S MGE = Table 5 Improved coverage of MIEs and WIEs after the second phase of test generation. Cir cuit Tests targeting MIEs not detected by S T Tests targeting WIEs not detected by S T Total test set size Detected MIEs (%) Total test set size Detected WIEs (%) c17 13 95.0 12 100.0 c432nr 190 89.9 195 99.6 c499nr 220 95.8 147 99.8 7485 91 91.2 92 96.4 74283 58 90.0 56 96.4 </title>
Reference-contexts: The simulator uses parallel-pattern evaluation and critical path tracing techniques [2]; It simulates the circuit with multiple vectors concurrently and determines the detected errors/faults without explicit simulation of each error/fault. The circuits used throughout the experiments are ISCAS 85 benchmarks [10] and standard TTL circuits <ref> [11] </ref>. Note that all the circuits except c432 and c499 are SSL-irredun-dant. We conducted a preliminary experiment to determine the coverage of design errors using a complete test set for all detectable SSL faults.
References-found: 11

