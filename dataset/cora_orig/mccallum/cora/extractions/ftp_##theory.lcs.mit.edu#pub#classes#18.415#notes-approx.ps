URL: ftp://theory.lcs.mit.edu/pub/classes/18.415/notes-approx.ps
Refering-URL: http://theory.lcs.mit.edu/~goemans/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Approximation Algorithms  
Author: Lecturer: Michel X. Goemans 
Date: November 1994  
Note: 18.415/6.854 Advanced Algorithms  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: See Section 6 for more details. Approx-2 Until 1992, pedestrian arguments such as this provided essentially the only known examples of non-approximability results. Then came a string of papers culminating in the result of Arora, Lund, Motwani, Sudan, and Szegedy <ref> [1] </ref> (based on the work of Arora and Safra [2]). They introduced a new characterization of N P in terms of probabilistically checkable proofs (PCP). <p> Corollary 8 z MC = max X arccos (v i v j ) Unfortunately this is as difficult to solve as the original problem and so at first glance we have not made any progress. Approx-24 5.2 Choosing a good set of vectors Let f : <ref> [1; 1] </ref> ! [0; 1] be a function which satisfies f (1) = 1, f (1) = 0. <p> Corollary 8 z MC = max X arccos (v i v j ) Unfortunately this is as difficult to solve as the original problem and so at first glance we have not made any progress. Approx-24 5.2 Choosing a good set of vectors Let f : [1; 1] ! <ref> [0; 1] </ref> be a function which satisfies f (1) = 1, f (1) = 0.
Reference: [2] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: See Section 6 for more details. Approx-2 Until 1992, pedestrian arguments such as this provided essentially the only known examples of non-approximability results. Then came a string of papers culminating in the result of Arora, Lund, Motwani, Sudan, and Szegedy [1] (based on the work of Arora and Safra <ref> [2] </ref>). They introduced a new characterization of N P in terms of probabilistically checkable proofs (PCP).
Reference: [3] <author> Y. Aumann and Y. Rabani. </author> <title> An O(log k) approximate min-cut max-flow theorem and approximation algorithm. </title> <type> Manuscript, </type> <year> 1994. </year>
Reference-contexts: In this section, we describe a very recent, elegant and general answer due to Linial, London and Rabinovitch [20]. The technique they used is the embedding of metrics. The application to multicommodity flows was also independently obtained by Aumann and Rabani <ref> [3] </ref>. We first describe some background material on metrics and their embeddings.
Reference: [4] <author> R. Bar-Yehuda and S. </author> <title> Even. A linear time approximation algorithm for the weighted vertex cover problem. </title> <journal> Journal of Algorithms, </journal> <volume> 2 </volume> <pages> 198-203, </pages> <year> 1981. </year> <month> Approx-47 </month>
Reference-contexts: Also X v2U X w (v)2x fl (v) = 2LB since 2x fl (v) 1 for all v 2 U . 3.4.2 Primal-Dual applied to VC This is due to Bar-Yehuda and Even <ref> [4] </ref>. First formulate the dual problem. Let y 2 R jEj ; the elements of y are y (e) for e = (u; v) 2 E.
Reference: [5] <author> M. Bellare and M. Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 184-193, </pages> <year> 1994. </year>
Reference-contexts: The fact that MAX 3SAT is MAX-SNP-complete and Theorem 1 implies the corollary mentioned previously. For MAX 3SAT, " in the statement of Theorem 1 can be chosen can be set to 1=74 (Bellare and Sudan <ref> [5] </ref>). Minimization problems may not be able to be expressed so that they are in MAX SNP, but they can still be MAX-SNP hard. Examples of such problems are: * TSP with edge weights 1 and 2 (i.e., d (i; j) 2 f1; 2g for all i; j).
Reference: [6] <author> N. Christofides. </author> <title> Worst-case analysis of a new heuristic for the travelling salesman problem. </title> <type> Technical Report 388, </type> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1976. </year>
Reference-contexts: LB C OP T 2. C H ffLB Here LB is a lower bound on the optimal solution. 3.1 Relating to Optimum Directly This is not always necessary, however. One algorithm whose solution is easy to relate directly to the optimal solution is Christofides' <ref> [6] </ref> algorithm for the TSP with the triangle inequality (d (i; j) + d (j; k) d (i; k) for all i; j; k). This is a 3 2 -approximation algorithm, and is the best known for this problem. The algorithm is as follows: 1.
Reference: [7] <author> W. F. de la Vega and G. S. Luecker. </author> <title> Bin packing can be solved within (1 + *) in linear time. </title> <journal> Combinatorica, </journal> <volume> 1(4), </volume> <year> 1981. </year>
Reference-contexts: For P k C max there exists a pas. This is due to Hochbaum and Shmoys [17]. We will study this algorithm in more detail in today's lecture. 3. For bin packing there exists a paas. (Fernandez de la Vega and Lueker <ref> [7] </ref>). 4. For P k C max there exists no fpaas unless P = NP .
Reference: [8] <author> J. Edmonds. </author> <title> Maximum matching and a polyhedron with 0,1-vertices. </title> <journal> Journal of Research of the National Bureau of Standards B, </journal> <volume> 69B:125-130, </volume> <year> 1965. </year>
Reference-contexts: with jV j even and a nonnegative cost function c e 0 on the edges e 2 E, find a perfect matching M such that the cost c (M ) is minimized, where c (M ) = P The first polynomial time algorithm for this problem was given by Edmonds <ref> [8] </ref> and has a running time of O (n 4 ) where n = jV j. To date, the fastest strongly polynomial time algorithm is due to Gabow [10] and has a running time of O (n (m + n lg n)) where m = jEj.
Reference: [9] <author> R. Fagin. </author> <title> Generalized first-order spectra, and polynomial-time recognizable sets. </title> <editor> In R. Karp, editor, </editor> <title> Complexity of Computations. </title> <publisher> AMS, </publisher> <year> 1974. </year>
Reference-contexts: The Travelling Salesman Problem with the triangle inequality is MAX-SNP hard. (There is a technical snag here: MAX-SNP contains only maximization problems, whereas TSP is a minimization problem.) 2.1 MAX-SNP Complete Problems Let's consider an alternative definition of NP due to Fagin <ref> [9] </ref>. NP, instead of being defined computationally, is defined as a set of predicates or functions on structures G: where is a quantifier free expression. Here S corresponds to the witness or the proof. Consider for example the problem SAT.
Reference: [10] <author> H. N. Gabow. </author> <title> Data structures for weighted matching and nearest common ancestors with linking. </title> <booktitle> In Proceedings of the 1st ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 434-443, </pages> <year> 1990. </year>
Reference-contexts: To date, the fastest strongly polynomial time algorithm is due to Gabow <ref> [10] </ref> and has a running time of O (n (m + n lg n)) where m = jEj. For dense graphs, m = fi (n 2 ), this algorithm gives a running time of O (n 3 ).
Reference: [11] <author> H. N. Gabow, M. X. Goemans, and D. P. Williamson. </author> <title> An efficient approximation algorithm for the survivable network design problem. </title> <booktitle> In Proceedings of the Third MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 57-74, </pages> <year> 1993. </year>
Reference-contexts: In this section, we discuss an approximation algorithm by Goe-mans and Williamson [13] that runs in time O (n 2 lg n). (This bound has recently been improved by Gabow, Goemans and Williamson <ref> [11] </ref> to O (n (n + p Although MCPMP itself is in PTIME, this algorithm is sufficiently general to give approximations for many NP-hard problems as well.
Reference: [12] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for general graph matching problems. </title> <type> Technical Report CU-CS-432-89, </type> <institution> University of Colorado, Boulder, </institution> <year> 1989. </year>
Reference-contexts: For dense graphs, m = fi (n 2 ), this algorithm gives a running time of O (n 3 ). The best weakly polynomial algorithm is due to Gabow and Tarjan <ref> [12] </ref> and runs in time O (m q nff (m; n) log n log nC) where C is a bound on the costs c e . For dense graphs with C = O (n), this bound gives an O fl (n 2:5 ) running time.
Reference: [13] <author> M. X. Goemans and D. P. Williamson. </author> <title> A general approximation technique for constrained forest problems. </title> <booktitle> In Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 307-316, </pages> <year> 1992. </year>
Reference-contexts: As you might suspect from these bounds, the algorithms involved are fairly complicated. Also, these algorithms are too slow for many of the instances of the problem that arise in practice. In this section, we discuss an approximation algorithm by Goe-mans and Williamson <ref> [13] </ref> that runs in time O (n 2 lg n). (This bound has recently been improved by Gabow, Goemans and Williamson [11] to O (n (n + p Although MCPMP itself is in PTIME, this algorithm is sufficiently general to give approximations for many NP-hard problems as well.
Reference: [14] <author> M. X. Goemans and D. P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 422-431, </pages> <year> 1994. </year>
Reference-contexts: Until 1993 the best known ff was 0.5 but now it is 0.878 due to an approximation algorithm of Goemans and Williamson <ref> [14] </ref>. We shall first of all look at three (almost identical) algorithms which have an approximation ratio of 0.5. 1. Randomized construction. We select S uniformly from all subsets of V . i.e.
Reference: [15] <author> A. Haken and M. Luby. </author> <title> Steepest descent can take exponential time for symmetric connection networks. </title> <journal> Complex Systems, </journal> <volume> 2 </volume> <pages> 191-196, </pages> <year> 1988. </year>
Reference-contexts: In the unweighted case this is a polynomial time algorithm since the number of different values that a cut can take is O (n 2 ). In the weighted case the running time can be exponential. Haken and Luby <ref> [15] </ref> have shown that this can be true even for 4-regular graphs. For cubic graphs the running time is polynomial [22]. Over the last 15-20 years a number of small improvements were made in the approxi mation ratio obtainable for MAX-CUT.
Reference: [16] <author> D. Hochbaum. </author> <title> Approximation algorithms for set covering and vertex cover problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11 </volume> <pages> 555-556, </pages> <year> 1982. </year> <month> Approx-48 </month>
Reference-contexts: We now illustrate these techniques on the minimum weight vertex cover problem. 3.4.1 Rounding applied to VC This is due to Hochbaum <ref> [16] </ref>. Let x fl be the optimal solution of the LP relaxation. Let 1 g We claim U is a 2-approximation of the minimum weight VC.
Reference: [17] <author> D. Hochbaum and D. Shmoys. </author> <title> Using dual approximation algorithms for schedul-ing problems: theoretical and practical results. </title> <journal> Journal of the ACM, </journal> <volume> 34(1), </volume> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Therefore there is no pas for bin packing unless P = N P . 2. For P k C max there exists a pas. This is due to Hochbaum and Shmoys <ref> [17] </ref>. We will study this algorithm in more detail in today's lecture. 3. For bin packing there exists a paas. (Fernandez de la Vega and Lueker [7]). 4. For P k C max there exists no fpaas unless P = NP . <p> This was shown by Karmarkar and Karp [18]. 6.1 Approximation algorithm for P jjC max We will now present a polynomial approximation scheme for the P jjC max scheduling problem. We analyze a pas for P jjC max , discovered by Hochbaum and Shmoys <ref> [17] </ref>. The idea is to use a relation similar to the one between an optimization problem and its decision problem. That is, if we have a way to solve decision problem, we can use binary search to find the exact solution.
Reference: [18] <author> N. Karmarkar and R. Karp. </author> <title> An efficient approximation scheme for the one-dimensional bin-packing problem. </title> <booktitle> In Proceedings of the 23rd Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1982. </year>
Reference-contexts: For bin packing there even exists a fpaas. This was shown by Karmarkar and Karp <ref> [18] </ref>. 6.1 Approximation algorithm for P jjC max We will now present a polynomial approximation scheme for the P jjC max scheduling problem. We analyze a pas for P jjC max , discovered by Hochbaum and Shmoys [17].
Reference: [19] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: We shall consider the following two related questions. 1. In the worst case, how large can fi fl ff fl be? 2. Can we obtain an approximation algorithm for the multicommodity cut prob lem? Approx-39 In special cases, answers have been given to these questions by Leighton and Rao <ref> [19] </ref> and in subsequent work by many other authors. In this section, we describe a very recent, elegant and general answer due to Linial, London and Rabinovitch [20]. The technique they used is the embedding of metrics.
Reference: [20] <author> N. Linial, E. London, and Y. Rabinovich. </author> <title> The geometry of graphs and some of its algorithmic applications. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: In this section, we describe a very recent, elegant and general answer due to Linial, London and Rabinovitch <ref> [20] </ref>. The technique they used is the embedding of metrics. The application to multicommodity flows was also independently obtained by Aumann and Rabani [3]. We first describe some background material on metrics and their embeddings.
Reference: [21] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation, and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference-contexts: Approx-3 time (since our construction can be carried out in polynomial time). This proves the theorem. The above theorem implies a host of negative results, by considering the complexity class MAX-SNP. defined by Papadimitriou and Yannakakis <ref> [21] </ref>. Corollary 2 For any MAX-SNP-complete problem, there is an absolute constant * &gt; 0 such that there is no (1 *)-approximation algorithm unless P = N P . The class of MAX-SNP problems is defined in the next section and the corollary is derived there. <p> These maximization problems comprise the class MAX-SNP (MAXimization, Strict NP) defined by Papadimitriou and Yannakakis <ref> [21] </ref>. Thus, MAX 3SAT is in MAX-SNP. Papadimitriou and Yannakakis then introduce an L-reduction (L for linear), which preserverses approximability.
Reference: [22] <author> S. Poljak. </author> <title> Integer linear programs and local search for max-cut. </title> <type> Preprint, </type> <year> 1993. </year>
Reference-contexts: In the weighted case the running time can be exponential. Haken and Luby [15] have shown that this can be true even for 4-regular graphs. For cubic graphs the running time is polynomial <ref> [22] </ref>. Over the last 15-20 years a number of small improvements were made in the approxi mation ratio obtainable for MAX-CUT.
Reference: [23] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37 </volume> <pages> 130-143, </pages> <year> 1988. </year>
Reference-contexts: We will need to supplement this technique, however, with an additional trick to carry through the derandomization. This result is due to Raghavan <ref> [23] </ref>. We can represent the probability space using a decision tree. At the root of the tree we haven't made any decisions. As we descend the tree from the root we represent the choices first for commodity 1, then for commodity 2, etc.
Reference: [24] <author> P. Raghavan and C. D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7:365 - 374, </volume> <year> 1987. </year> <note> Approx-49 Approx-50 </note>
Reference-contexts: The "width" of an edge is defined to be the number of paths using that edge. This multicommodity flow problem is NP-complete in general. Approx-33 The randomized approximation algorithm that we discuss in these notes is due to Raghavan and Thompson <ref> [24] </ref>. 7.1 Reformulating the problem The multicommodity flow problem can be formulated as the following integer program: Min W subject to: X x i (v; w) w 8 &gt; : 1 if v = t i 0 otherwise i = 1; : : : ; k; v 2 V;(6) X x
References-found: 24

