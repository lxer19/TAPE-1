URL: http://www.cis.udel.edu/~pollock/papers/ictcs.ps
Refering-URL: http://www.cis.udel.edu/~jochen/passages/pubs.htm
Root-URL: http://www.cis.udel.edu
Phone: (302) 831-1953  
Title: The Challenges in Automated Testing of Multithreaded Programs  
Author: Cheer-Sun D. Yang and Lori L. Pollock 
Address: 19716  
Affiliation: Department of Computer and Information Sciences University of Delaware Newark, DE  
Abstract: To take full advantage of parallel architectures, programmers need to be presented with a good set of software tools for developing, debugging, testing, and maintaining their parallel programs. This paper focuses on the challenges that need to be addressed to provide automatic generation of test cases for multithreaded programs, particularly focusing on a program-based, structural testing approach. The major challenges include dealing with nondeterministic execution for reproducible testing, extending the test data adequacy criteria for timing-related testing, extension of the existing structural testing methodologies for multithreaded programs, and the inclusion of timing-related testing. We demonstrate some of the more intricate issues through a more thorough look at providing all-du-path coverage in mul-tithreaded programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Balasundaram and K. Kennedy. </author> <title> Compile-time detection of race conditions in a parallel program. </title> <booktitle> In 1989 International Conference on Supercomputing, </booktitle> <year> 1989. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions <ref> [1, 6, 5] </ref>, debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [2] <author> B. Beizer. </author> <title> Software Testing Techniques. </title> <publisher> Van Nostrand Rein-hold Company, </publisher> <year> 1983. </year>
Reference-contexts: Program-based testing approaches have been developed for the testing of sequential programs, including executing every statement or every branch in a program at least once <ref> [2] </ref>. These methods are called all-statement coverage and all-branch coverage, respectively. In general, dynamic testing methodologies specify what needs to be tested, known as criterion.
Reference: [3] <author> S. C. Cheung and J. Kramer. </author> <title> Tractable dataflow analysis for distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(8) </volume> <pages> 579-593, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems <ref> [23, 3, 28] </ref>. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14].
Reference: [4] <author> J.-H. Chow and W. Harrison. </author> <title> Compile time analysis of parallel programs that share memory. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1992. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources. <p> In the paper [12], Srinivasan and Wolfe describe semantics for parallel constructs, and introduce new intermediate forms, called the Parallel Control Flow Graph, and the Parallel Precedence Graph. Chow and Harrison <ref> [4] </ref> present a data flow framework for analyzing parallel programs with cobegin/coend parallelism without explicit synchronization. Long and Clarke [17] develop a data flow framework for Ada programs with task parallelism and "rendezvous" synchronization, but they do not handle shared variables.
Reference: [5] <author> S. K. Damodaran-Kamal and J. M. Francioni. </author> <title> Testing races in parallel programs with an otot strategy. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 216-227, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions <ref> [1, 6, 5] </ref>, debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [6] <author> A. Dinning and E. Schonberg. </author> <title> An empirical comparison of monitoring algorithms on access anomaly detection. </title> <booktitle> In ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <year> 1990. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions <ref> [1, 6, 5] </ref>, debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [7] <author> M. B. Dwyer and L. A. Clarke. </author> <title> Data flow analysis for verifying properties of concurrent programs. </title> <type> Technical Report CS-1994-045, </type> <institution> University of Massachusetts, Department of Computer Science, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Chow and Harrison [4] present a data flow framework for analyzing parallel programs with cobegin/coend parallelism without explicit synchronization. Long and Clarke [17] develop a data flow framework for Ada programs with task parallelism and "rendezvous" synchronization, but they do not handle shared variables. Dwyer and Clarke <ref> [7] </ref> present an approach based on data flow analysis for verifying properties of Ada-like concurrent programs. A specific type of regular expression, e.g., qualified regular expressions (QRE), is used for specifying a property of a concurrent program.
Reference: [8] <author> P. A. Emrath, S. Ghosh, and D. Pandua. </author> <title> Detecting nonde-terminacy in parallel programs. </title> <journal> IEEE Software, </journal> <pages> pages 69-77, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources.
Reference: [9] <author> J. Ferrante, D. Grunwald, and H. Srinivasan. </author> <title> Computing communication sets for control parallel progrms. </title> <editor> In K. Pin-gali, U. Banerjee, D. Gelernter, A. Nicolau, and D. Pan-dua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, 7th International Workshop Proceedings, </booktitle> <pages> pages 316-330. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources.
Reference: [10] <author> C. J. Fidge. </author> <title> Partial orders for parallel debugging. </title> <booktitle> In ACM SIGPLAN/SIGOPS Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 183-194, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging <ref> [16, 10, 18, 21, 19] </ref>, and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [11] <author> J. Gait. </author> <title> A probe effect in concurrent programs. </title> <journal> Software-Practice and Experience, </journal> <volume> 16(3) </volume> <pages> 225-233, </pages> <month> Mar. </month> <year> 1986. </year>
Reference-contexts: These examples begin to demonstrate how multiple thread creation, event synchronization, and message passing all complicate test case generation beyond simple extension to current algorithms for generating test cases for sequential programs. Section 5 looks more closely at some of these issues. 3.4 Timing-related Testing In the paper <ref> [11] </ref>, Gait studied the effect of inserting delay statements into concurrent programs. In particular, the behavior of concurrent programs with synchronization errors was observed. The probe effect is seen as an alteration in the frequency of run-time computational errors observed when delays are introduced into concurrent programs.
Reference: [12] <author> D. Grunwald and H. Srinivasan. </author> <title> Efficient computation of precedence information in parallel programs. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 502-616. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources. <p> Srinivasan and Wolfe [24] present a solution to the reaching definitions data flow problem for programs with explicit lexically specified parallel constructs, such as cobegin/coend or parallel sections, both with and without synchronization operations, such as post, wait, or advance. In the paper <ref> [12] </ref>, Srinivasan and Wolfe describe semantics for parallel constructs, and introduce new intermediate forms, called the Parallel Control Flow Graph, and the Parallel Precedence Graph. Chow and Harrison [4] present a data flow framework for analyzing parallel programs with cobegin/coend parallelism without explicit synchronization.
Reference: [13] <author> R. Gupta and M. Spezialetti. </author> <title> Towards a non-intrusive approach for monitoring distributed computations through perturbation analysis. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 586-501. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: On a similar notion of reducing cost, a perturbation analysis <ref> [13] </ref> can be performed in attempt to reduce the intrusiveness of program instrumentation for the monitoring and debugging of distributed systems. The goal is to identify the situation in which the run-time monitoring activities can be performed non-intrusively, that is, without affecting the outcome of non-deterministic events. <p> Although the concept of intrusion is exploited in the delay execution work when delay statements are introduced for the testing of parallel language constructs, the major goal of the paper <ref> [13] </ref> and the delay execution work is different.
Reference: [14] <author> P. V. Koppol and K.-C. Tai. </author> <title> An incremental approach to structural testing of concurrent software. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 14-23, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9].
Reference: [15] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 558-564, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: We use the symbol "" to represent the Lamport's happen before relation between two nodes <ref> [15] </ref>. We say a b if the node a is executed before the node b. 5.1 Issues In this section, we use some simplified examples to demonstrate some issues to be addressed in finding all-du-paths in multithreaded programs.
Reference: [16] <author> T. J. LeBlanc and J. M. Mellor-Crummey. </author> <title> Debugging parallel programs with instant replay. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(4), </volume> <month> Apr. </month> <year> 1987. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging <ref> [16, 10, 18, 21, 19] </ref>, and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. <p> However, controlling the order of synchronization event sequences by coordi nating with an additional control task when executing multiple threads on multiple processors is a difficult task to achieve. In <ref> [16] </ref>, LeBlanc and Mellor-Crummey present an approach to record a partial order of the shared object accesses at run-time; at the subsequent re-run, the trace information is used to control the execution sequence.
Reference: [17] <author> D. Long and L. Clarke. </author> <title> Data flow analysis of concurrent systems that use the rendezvous model of synchronization. </title> <type> Technical Report COINS 91-31, </type> <institution> University of Massachusetts, Department of Computer Science, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Chow and Harrison [4] present a data flow framework for analyzing parallel programs with cobegin/coend parallelism without explicit synchronization. Long and Clarke <ref> [17] </ref> develop a data flow framework for Ada programs with task parallelism and "rendezvous" synchronization, but they do not handle shared variables. Dwyer and Clarke [7] present an approach based on data flow analysis for verifying properties of Ada-like concurrent programs.
Reference: [18] <author> D. C. Marinescu, J. E. L. Jr., T. L. Casavant, and H. J. Siege. </author> <title> A model for monitoring and debugging parallel and distributed software. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 81-88, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging <ref> [16, 10, 18, 21, 19] </ref>, and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [19] <author> J. May and J. D. Choi. </author> <title> A portable, extensible parallel debugger. </title> <booktitle> In Proceedings of the ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 96-106, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging <ref> [16, 10, 18, 21, 19] </ref>, and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach.
Reference: [20] <author> S. Morasca and M. Pezze. </author> <title> Using high-level petri nets for testing concurrent and real-time systems. </title> <editor> In H. Zedan, editor, </editor> <booktitle> Real-Time Systems: Theory and Applications, Proceedings of the conference organized by the British Computer Society, </booktitle> <pages> pages 119-131. </pages> <address> Elsevier Science Publishings, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. <p> Furthermore, this approach hides the sequential activities in each concurrent state. It may be difficult to find the corresponding path coverage with respect to each state and transition. In <ref> [20] </ref>, Morasca and Pezze use a high level Petri Net, called ER net, to derive test data adequacy criteria for concurrent and real-time systems. They propose test data adequacy criteria such as Firing Testing, Firing Sequence Testing, Transition Testing, and Transition Sequence Testing.
Reference: [21] <author> R. H. Netzer and B. P. Miller. </author> <title> Optimal tracing and replay for debugging a message-passing parallel program. </title> <booktitle> In Supercomputing, </booktitle> <pages> pages 502-511, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14]. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging <ref> [16, 10, 18, 21, 19] </ref>, and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. <p> In [16], LeBlanc and Mellor-Crummey present an approach to record a partial order of the shared object accesses at run-time; at the subsequent re-run, the trace information is used to control the execution sequence. In <ref> [21] </ref>, Netzer and Miller propose a novel strategy to trace and replay message passing parallel programs for debugging purposes.
Reference: [22] <author> V. Sarkar and B. Simons. </author> <title> Parallel program graphs and their classification. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 633-655. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources.
Reference: [23] <author> M. Spezialetti and P. Kearns. </author> <title> Simultaneous regions: A framework for the consistent monitoring of distributed computations. </title> <booktitle> In Proceedings of the Ninth IEEE International Conference on Distributed Computing Systems, </booktitle> <pages> pages 61-68, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems <ref> [23, 3, 28] </ref>. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14].
Reference: [24] <author> H. Srinivasan and M. Wolfe. </author> <title> Analyzing programs with explicit parallelism. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Pandua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 405-419. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation <ref> [8, 4, 24, 12, 22, 9] </ref>. However, little work has focused on the automatic generation of test cases for the testing of parallel programs, particularly with a program-based approach. Multiprocessors are being used increasingly as desktop workstations, server platforms, and parallel computing resources. <p> There has been a handful of researchers investigating static analysis of parallel programs, all with different objectives, unrelated to automatic generation of test cases. Srinivasan and Wolfe <ref> [24] </ref> present a solution to the reaching definitions data flow problem for programs with explicit lexically specified parallel constructs, such as cobegin/coend or parallel sections, both with and without synchronization operations, such as post, wait, or advance.
Reference: [25] <author> K. C. Tai. </author> <title> Testing of concurrent software. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 62-64, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. <p> Similar to using the concurrency graph for generating path coverages, it is not an easy task to relate path coverages to transitions or firing sequences. 4.3 Timing-related Testing In addition to the deterministic execution method (DET), Tai <ref> [25] </ref> also suggests multiple execution as an approach to dealing with nondeterministic execution. This approach, MET, executes a program multiple times, thus, increasing the possibility of fault finding.
Reference: [26] <author> K. C. Tai, R. H. Carver, and E. E. Obaid. </author> <title> Debugging concurrent Ada programs by deterministic execution. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-17(1):45-63, </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The focus of these techniques needs to be reducing the number of inserted delay statements and the number of different durations of delays tested. 4 Current State of the Art 4.1 Nondeterministic Execution In <ref> [26] </ref>, Tai, Carver, and Orbid present an approach, known as deterministic execution (DET), to deal with non-deterministic execution during debugging and testing of Ada-like concurrent programs. A compiler is provided to insert a conceptual "request for permission" call in front of each rendezvous call.
Reference: [27] <author> R. N. Taylor, D. L. Levine, and C. D. Kelly. </author> <title> Structural testing of concurrent programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 206-215, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. <p> The main idea is to be able to employ the program-based testing criteria originally used for testing sequential programs to test concurrent programs. However, the implementation of serialization is not viable for testing multithreaded programs running on multiple processors as serialization simulates program execution by a single process. In <ref> [27] </ref>, Taylor, Levine, and Kelly design a con-currency graph to represent the state transitions of a concurrent program. In addition, a set of state-based test data adequacy criteria and a hierarchy of subsump-tion are presented.
Reference: [28] <author> S. Venkatesan and B. Dathan. </author> <title> Testing and debugging distributed programs using global predicates. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 163-177, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems <ref> [23, 3, 28] </ref>. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs [29, 31, 25, 20, 27, 14].
Reference: [29] <author> S. N. Weiss. </author> <title> A formal framework for studying concurrent program testing. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 106-113, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9]. <p> By making run-time tracing decisions, their method traces only a fraction of the total number of messages, gaining two orders of magnitude reduction in trace size over traditional techniques which trace every message, without slowing down the execution speed of replay. In <ref> [29] </ref>, Weiss proposes the use of serialization to simulate the execution of Ada-like concurrent programs. He motivates the need to find a good representative set of serializations to test parallel programs due to the impractical number of serializations. <p> Based on all of the previous work in dealing with nondeterminism for reproducible testing, we do not consider this issue further for the automatic generation of test cases for multithreaded programs. 4.2 Test Data Adequacy Criteria Weiss <ref> [29] </ref> suggests the need for modification of the notion of "applicability" of existing test data adequacy criteria for the testing of Ada-like concurrent programs. In his paper, Weiss claims, for example, that there are concurrent programs with unreachable statements, therefore all-statement coverage is not applicable for testing concurrent programs.
Reference: [30] <author> C.-S. Yang and L. L. Pollock. </author> <title> Identifying redundant test cases for testing explicitly parallel language constructs. </title> <booktitle> ARL-ATIRP First Annual Technical Conference, </booktitle> <month> January </month> <year> 1997. </year>
Reference-contexts: This approach, MET, executes a program multiple times, thus, increasing the possibility of fault finding. Instead of ordering event sequences explicitly, Yang and Pollock <ref> [30] </ref> have extended and improved Tai's MET method for delaying execution of concurrent programs in order to test the use of parallel language constructs in multithreaded programs. <p> These locations are referred to as delay points. In the next subsection, we describe our approach to reducing the number of timing-related test cases potentially generated using this approach. 4.4 Reducing the Cost of Testing Yang and Pollock <ref> [30] </ref> have developed a technique for reducing the number of timing-related test cases for multi-threaded programs, based on identifying redundant delays. A redundant delay is defined informally as a delay point whose effect of delaying execution can be achieved by another delay point.
Reference: [31] <author> M. Young, R. N. Tylor, K. Forester, and D. Brodbeck. </author> <title> Integrated concurrent analysis in a software development environment. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 200-209, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Using software tools to automatically generate test cases, generally referred to as software testing, has been studied extensively for sequential programs as well as distributed systems [23, 3, 28]. Recently, some researchers have studied issues regarding the analysis, testing, and debugging of Ada-like concurrent programs <ref> [29, 31, 25, 20, 27, 14] </ref>. There has also been considerable work in analyzing parallel programs for the detection of deadlock and race conditions [1, 6, 5], debugging [16, 10, 18, 21, 19], and optimizing analysis and transformation [8, 4, 24, 12, 22, 9].
References-found: 31

