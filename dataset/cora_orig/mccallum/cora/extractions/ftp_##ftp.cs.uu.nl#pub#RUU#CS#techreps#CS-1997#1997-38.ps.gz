URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-38.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fbram,aardalg@cs.ruu.nl  gkant@ortec.nl  
Phone: 2  
Title: On an Integer Multicommodity Flow Problem from the Airplane Industry  
Author: Bram Verweij Karen Aardal and Goos Kant 
Address: P.O. Box 80.089 3508 TB Utrecht, the Netherlands  Groningenweg 6-33 2803 PV Gouda, the Netherlands  
Affiliation: 1 Department of Computer Science, Utrecht University,  ORTEC Consultants bv,  
Abstract: Here we discuss a new integer multicommodity flow problem in which the commodities can not be shipped independently. The problem emerges in the routing of airplane parts from production sites to assembly sites. The parts are of such size that they have to be carried on dedicated trailers. Each type of part has its own type of trailer. A part is loaded on its trailer after it is produced, carried on its trailer to its assembly site, and then the trailer has to be recycled. The transport of the parts is done with huge specially built transportation aircrafts. For reasons of stability such aircrafts can only carry some pre-specified combinations of parts on trailers and empty trailers. We consider the problem of finding a feasible transportation plan that minimises the total flying time of the transportation aircrafts. For this purpose we develop both optimisation and approximation algorithms.
Abstract-found: 1
Intro-found: 1
Reference: [AMO93] <author> Ahuja, R. K., Magnanti, T. L., and Orlin, J. B. </author> <title> Network Flows. </title> <publisher> Prentice Hall, Inc., </publisher> <year> 1993. </year>
Reference-contexts: We will use LPA to find lower bounds, and an heuristic to find upper bounds. The branch and bound framework will impose lower- and upper bounds on the x ij` variables. With these lower- and upper bounds LPA can be seen as a generalisation of network flow <ref> [AMO93] </ref>. Network flow optimality conditions, and some network transformations do generalise to LPA, but we have been unable to generalise algorithms for network flow to LPA. Instead we apply LP column generation techniques. Although these techniques are well established they recently received a lot of attention, see e.g. <p> This way, only O (dn) arcs are added to the problem formulation in each iteration of the column generation process. Lower and upper bounds on the flow that passes a node can be handled by an operation called node splitting, see also the book on network flows <ref> [AMO93] </ref>. We implemented and tested this refined column generation scheme. When compared to the column generation scheme proposed in Section 3.1, the number of variables is reduced by a factor of approximately 0.6 on our test instances. The number of LPs solved was about the same.
Reference: [BJN + 96] <author> Barnhart, C., Johnson, E. L., Nemhauser, G. L., Savelsbergh, M. W. P., and Vance, P. H. Branch-and-price: </author> <title> Column generation for solving huge integer programs. </title> <institution> Opns. Res. </institution> <year> (1996). </year>
Reference-contexts: Instead we apply LP column generation techniques. Although these techniques are well established they recently received a lot of attention, see e.g. Vanderbeck [Van94], Barnarth et al. <ref> [BJN + 96] </ref>, Sol [Sol94], and Desrochers et al. [DDS92]. The success of the column generation approach can be motivated by the improvement in hardware and in the quality of the available LP solvers, which allow much larger LP models to be solved.
Reference: [BKOS97] <author> Berg, M. de, Kreveld, M. van, Overmars, M., and Schwarzkopf, O. </author> <title> Computational Geometry: Algorithms and Applications. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The data structure is an adapted version of the kd-tree <ref> [BKOS97] </ref>. Each node of the tree corresponds to a set of loading configurations. The set associated with node p is denoted L p . In the root of the tree, we store the bounding box of all characteristic vectors.
Reference: [CPL90] <institution> CPLEX Optimization, Inc. </institution> <address> Using the CPLEX Callable Library, </address> <year> 1990. </year>
Reference-contexts: This in turn destroys the proof of termination. 6 Experimental Results Experimental study of the proposed algorithms can be found in Table 9. The LPs were solved using the CPLEX LP solver version 4.0.9 <ref> [CPL90] </ref>. Computation times were observed on a 200 MHz Sun Enterprise 2.
Reference: [DDS92] <author> Desrochers, M., Desrosiers, J., and Solomon, M. </author> <title> A new optimization algorithm for the vehicle routing problem with time windows. </title> <journal> Opns. Res. </journal> <volume> 40, 2 (1992), </volume> <pages> 342-354. </pages>
Reference-contexts: Instead we apply LP column generation techniques. Although these techniques are well established they recently received a lot of attention, see e.g. Vanderbeck [Van94], Barnarth et al. [BJN + 96], Sol [Sol94], and Desrochers et al. <ref> [DDS92] </ref>. The success of the column generation approach can be motivated by the improvement in hardware and in the quality of the available LP solvers, which allow much larger LP models to be solved.
Reference: [FF62] <author> Ford, Jr., L. R. and Fulkerson, D. R. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: Moreover, we concentrate on the problem of finding feasible flows for LPA in a loading configuration graph D = (V; L; A) instead of minimum cost feasible flows. We assume the reader is familiar with the augmenting path algorithm by Ford and Fulkerson <ref> [FF62] </ref> and with the preflow-push algorithm by Goldberg and Tarjan [GT88]. Augmenting Paths. Let e + (x) denote the total positive excess in the current flow x, i.e. e + (x) = 1 P i2V;k2K je ik (x)j.
Reference: [GJ79] <author> Garey, M. R. and Johnson, D. S. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: Furthermore, IPA is related to the NP-complete Integral Network Flow problem with Homologous Arcs <ref> [GJ79] </ref> as follows. Let V := V [ fs; tg. For each x ij` , make a set H ij` containing ` (k) arcs (i; j) for each commodity k. Let E = S H = ij` fH ij` g.
Reference: [GT88] <author> Goldberg, A. V. and Tarjan, R. E. </author> <title> A new approach to the maximum flow problem. </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 35 (1988), </volume> <pages> 921-940. </pages> <booktitle> Also in Proc. 18th ACM Symp. on Theory of Comp., </booktitle> <pages> pages 136-146, </pages> <year> 1986. </year>
Reference-contexts: We assume the reader is familiar with the augmenting path algorithm by Ford and Fulkerson [FF62] and with the preflow-push algorithm by Goldberg and Tarjan <ref> [GT88] </ref>. Augmenting Paths. Let e + (x) denote the total positive excess in the current flow x, i.e. e + (x) = 1 P i2V;k2K je ik (x)j. Consider the class of problems LPA for which d = 1 on a loading configuration graph D = (V; L; A).
Reference: [GT90] <author> Goldberg, A. V. and Tarjan, R. E. </author> <title> Solving minimum cost flow problem by successive approximation. </title> <institution> Mathematics of Opns. Res. </institution> <month> 15 </month> <year> (1990), </year> <pages> 430-466. </pages>
Reference-contexts: Stage s ends by setting x := x + x 0 . Pseudo code can be found in Al gorithm 2. For the computation of the minimum cost flows, we use the cost scaling algorithm by Goldberg and Tarjan <ref> [GT90] </ref>, which we implemented using LEDA graphs [MNU96]. Lemma 2.2 The MCF heuristic returns a feasible solution of IPA. Proof. The lemma can be proved by induction on the stage number s, where stage 0 denotes the initialisation. <p> Proof. The complexity follows from the fact that the heuristic computes d minimum cost flows, each of which can be computed in O (n 3 log C) time <ref> [GT90] </ref>. fl 2.2 An Implementable Order Let c k = max `2L ` (k) be the maximal number of times an element of commodity k occurs in any admissible loading configuration.
Reference: [HH86] <author> Hall, N. G. and Hochbaum, D. S. </author> <title> A fast approximation algorithm for the multicovering problem. </title> <journal> Discr. Appl. </journal> <note> Mathematics 15 (1986), 35-40. </note>
Reference-contexts: IPA differs from the operational problem that ORTEC solves for their client as IPA ignores all timing aspects. Problem LPA is of interest to ORTEC because it can be used to gain insight in the structure of low cost solutions. Related literature. Problem IPA contains the NP-hard multicover problem <ref> [HH86] </ref> as follows. For each cut (S; V n S), at least the parts that are produced in S and not consumed in S have to be covered by sets associated with the admissible loading configurations going from S to V n S.
Reference: [MK97] <author> Munier, A. and K onig, J.-C. </author> <title> A heuristic for a scheduling problem with communication delays. </title> <journal> Opns. Res. </journal> <volume> 45, 1 (1997), </volume> <pages> 145-147. </pages>
Reference-contexts: LP-based approximation algorithms have been quite successful in different problem domains. Examples of these are facility location problems [STA97] and scheduling with communication delays <ref> [MK97] </ref>. This paper is organised as follows. In Section 2 we consider a straightforward heuristic based on minimum cost flow. We discuss solving and "repairing" LPA in Section 3.
Reference: [MNU96] <author> Mehlhorn, K., N aher, S., and Uhrig, C. </author> <title> The LEDA User Manual Version R 3.4.1. </title> <institution> Max-Planck-Institut fur Informatik, Saarbrucken, </institution> <year> 1996. </year>
Reference-contexts: Stage s ends by setting x := x + x 0 . Pseudo code can be found in Al gorithm 2. For the computation of the minimum cost flows, we use the cost scaling algorithm by Goldberg and Tarjan [GT90], which we implemented using LEDA graphs <ref> [MNU96] </ref>. Lemma 2.2 The MCF heuristic returns a feasible solution of IPA. Proof. The lemma can be proved by induction on the stage number s, where stage 0 denotes the initialisation. Let x s denote the value of x at the end of stage s.
Reference: [PS82] <author> Papadimitriou, C. H. and Steiglitz, K. </author> <title> Combinatorial Optimization. </title> <publisher> Prentice Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: In this section, we impose without loss of generality an upper bound u on the x-variables. 3.1 Solution by LP Column Generation The basic column generation approach is described in <ref> [PS82, Chapter 4] </ref>. The idea behind LP column generation is the following. Instead of using all decision variables, we use only a small subset and calculate an optimal LP solution for this restricted formulation.
Reference: [Sol94] <author> Sol, M. </author> <title> Column generation techniques for pickup and delivery problems. </title> <type> Ph.D. thesis, </type> <institution> Technische Universiteit Eindhoven, </institution> <year> 1994. </year>
Reference-contexts: Instead we apply LP column generation techniques. Although these techniques are well established they recently received a lot of attention, see e.g. Vanderbeck [Van94], Barnarth et al. [BJN + 96], Sol <ref> [Sol94] </ref>, and Desrochers et al. [DDS92]. The success of the column generation approach can be motivated by the improvement in hardware and in the quality of the available LP solvers, which allow much larger LP models to be solved.
Reference: [STA97] <author> Shmoys, D. B., Tardos, E., and Aardal, K. </author> <title> Approximation algorithms for facility location problems (extended abstract). </title> <booktitle> In Proc. Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing (El Paso, </booktitle> <address> Texas, </address> <year> 1997), </year> <pages> pp. 265-274. </pages>
Reference-contexts: LP-based approximation algorithms have been quite successful in different problem domains. Examples of these are facility location problems <ref> [STA97] </ref> and scheduling with communication delays [MK97]. This paper is organised as follows. In Section 2 we consider a straightforward heuristic based on minimum cost flow. We discuss solving and "repairing" LPA in Section 3.
Reference: [Thi95] <author> Thienel, S. </author> <title> Abacus|a branch-and-cut system. </title> <type> Ph.D. thesis, </type> <institution> Universitat zu Koln, </institution> <year> 1995. </year>
Reference-contexts: the instances in our datasets, it turned out that the solutions obtained this way were good, as can be seen in the experimental results in Section 6. 4 Solving IPA by Branch and Bound We implemented a branch and bound algorithm for IPA in the ABACUS framework provided by Thienel <ref> [Thi95] </ref>. To obtain upper bounds on the value of the optimal solution, we apply the round and repair algorithm from Section 3.4 to the solutions of the LP relaxations that are computed in each node of the branch and bound tree.
Reference: [Van94] <author> Vanderbeck, F. </author> <title> Decomposition and column generation for integer programs. </title> <type> Ph.D. thesis, </type> <institution> Universite Catholique de Louvain, </institution> <year> 1994. </year> <month> 20 </month>
Reference-contexts: Network flow optimality conditions, and some network transformations do generalise to LPA, but we have been unable to generalise algorithms for network flow to LPA. Instead we apply LP column generation techniques. Although these techniques are well established they recently received a lot of attention, see e.g. Vanderbeck <ref> [Van94] </ref>, Barnarth et al. [BJN + 96], Sol [Sol94], and Desrochers et al. [DDS92]. The success of the column generation approach can be motivated by the improvement in hardware and in the quality of the available LP solvers, which allow much larger LP models to be solved.
References-found: 17

