URL: http://cs.jhu.edu/~yairamir/fta-93.ps
Refering-URL: http://cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Email: E-mail: ofiramir, yairamir, dolev @cs.huji.ac.il  
Title: A Highly Available Application in the Transis Environment  
Author: Ofir Amir, Yair Amir and Danny Dolev 
Address: Jerusalem,Israel  
Affiliation: Institute of Computer Science The Hebrew University of  
Abstract: This paper presents a typical replicated application in a distributed system. The application was developed on top of Transis, a reliable and efficient transport layer protocol. The basic properties of the protocol and the advantages of using Transis as the transport layer are discussed. The algorithms used in this application can lead to better solutions in the area of distributed transaction systems and replicated databases.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms for multi-cast communication groups. </title> <booktitle> In Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (LCNS, 647), number 6th, </booktitle> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: It is a known fact [13, 8] that the membership problem in a dynamic asynchronous environment, when faults may exist, is unsolvable. The problem is the inability to distinguish between a slow machine and one that has crashed. A number of approaches to bypassing this obstruction exist <ref> [1] </ref>. In practical asynchronous systems it is often preferable to give up on a slow machine, rather than get stuck in waiting. The rest of the paper is organized as follows: The next section describes the Transis environment. The third section describes the Replicated Mail Service application. <p> It also describes the conceptual solution. The detailed algorithm of the Replicated Mail Server can be found in Section four. Section five compares the designed solution with other strategies, with and without Transis. Section six concludes the paper. 2 The Transis Environment The Transis System <ref> [1, 2] </ref> is currently under development at the Hebrew University of Jerusalem. The Transis domain consists of a set of processors that can communicate via multicast messages. Processes in the Transis environment use group communication mechanisms in order to send and receive ordered messages.
Reference: 2. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication subsystem for high availability. </title> <booktitle> In Annual International Symposium on Fault-Tolerant Computing, </booktitle> <volume> number 22, </volume> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: It also describes the conceptual solution. The detailed algorithm of the Replicated Mail Server can be found in Section four. Section five compares the designed solution with other strategies, with and without Transis. Section six concludes the paper. 2 The Transis Environment The Transis System <ref> [1, 2] </ref> is currently under development at the Hebrew University of Jerusalem. The Transis domain consists of a set of processors that can communicate via multicast messages. Processes in the Transis environment use group communication mechanisms in order to send and receive ordered messages. <p> Messages include piggybacked information about preceding messages. Upon receiving messages that follow missing messages, the server discovers that certain messages are missing, and requests for retransmission. This is similar to other lower-level algorithms such as in the Trans algorithm [17], the Psync algorithm [18],,, and in Transis <ref> [2] </ref>. Recovery of messages, after partitions are remerged, occurs only if new messages are generated. This is a major drawback because it creates the necessity to initiate new messages from time to time. Long timeouts lead to inconsistent views among servers in the same partition.
Reference: 3. <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agarwal, and P. Ciarfella. </author> <title> Fast message ordering and membership using a logical token-passing ring. </title> <booktitle> In International Conference on Distributed Computing Systems, number 13th, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The novelty of ISIS is in the formal and rigorous definition of the service interface. Moreover, ISIS utilizes algorithms that are formally proven to have certain needed properties [6] such as virtual synchrony. The Trans and Totem protocols <ref> [3, 17] </ref> for ordered multicast utilize the broadcast capability of the network. These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. <p> This order is consistent with the causal order. Moreover, it is consistent over overlapping groups. Transis utilizes two different algorithms to implement this service efficiently <ref> [3, 9] </ref>. The Safe multicast service delivers the messages in the same order as the Agreed multicast service. A message is delivered only after it was received by all the processors in the currently installed membership.
Reference: 4. <author> P. Bernstein, D. Shipman, and J. Rothnie, J.B. </author> <title> Concurrency control in a system for distributed databases (sdd-1). </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 5(1) </volume> <pages> 18-51, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: For example, in a fully replicated database, achieving a quorum is enough to resolve the transaction [21]. Some solutions limit the transactional model to commutative transactions. Others give special weight to a specific processor or to a specific transaction [20]. Explicit use of timestamps enables others <ref> [4] </ref> to overcome the difficulty. More advanced solutions define the quorum adaptively. When a partition occurs, if a majority of the previous quorum is connected, a new and smaller quorum is established and updates can be performed within this partition [10, 11].
Reference: 5. <author> K. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. </month>
Reference-contexts: When point-to-point communication mechanisms are used, the message ordering must be determined above the communication layer. Group communication services that utilize broadcast or multicast mechanisms can lead to simpler and more efficient solutions. One of the leading systems in the area of group communication is the ISIS system <ref> [5] </ref>. The novelty of ISIS is in the formal and rigorous definition of the service interface. Moreover, ISIS utilizes algorithms that are formally proven to have certain needed properties [6] such as virtual synchrony.
Reference: 6. <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference-contexts: One of the leading systems in the area of group communication is the ISIS system [5]. The novelty of ISIS is in the formal and rigorous definition of the service interface. Moreover, ISIS utilizes algorithms that are formally proven to have certain needed properties <ref> [6] </ref> such as virtual synchrony. The Trans and Totem protocols [3, 17] for ordered multicast utilize the broadcast capability of the network. These protocols spare the need of separate send operations and acknowledgment management for each of the destinations.
Reference: 7. <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. Similar approaches can be found in the Psync protocol [18], in the Amoeba system [15], in Delta-4 [22], and in the Chang and Maxemchuk protocol <ref> [7] </ref>. The above systems and protocols are leading the way for better usage of the hardware capabilities, where certain data replication is needed in an environment which is built as a collection of several local area networks.
Reference: 8. <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchrony needed for distributed consensus. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: A good membership algorithm provides this knowledge, even in the presence of processor crashes, processors recovery, network partitions and merges, and booting of new processors. It is a known fact <ref> [13, 8] </ref> that the membership problem in a dynamic asynchronous environment, when faults may exist, is unsolvable. The problem is the inability to distinguish between a slow machine and one that has crashed. A number of approaches to bypassing this obstruction exist [1].
Reference: 9. <author> D. Dolev, S. Kramer, and D. Malki. </author> <title> Early delivery totally ordered broadcast in asynchronous environments. </title> <booktitle> In 23rd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 544-553, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This order is consistent with the causal order. Moreover, it is consistent over overlapping groups. Transis utilizes two different algorithms to implement this service efficiently <ref> [3, 9] </ref>. The Safe multicast service delivers the messages in the same order as the Agreed multicast service. A message is delivered only after it was received by all the processors in the currently installed membership.
Reference: 10. <author> A. El Abbadi and N. Dani. </author> <title> A dynamic accessibility protocol for replicated databases. </title> <journal> Data and Knowledge Engineering, </journal> (6):319-332, 1991. 
Reference-contexts: Explicit use of timestamps enables others [4] to overcome the difficulty. More advanced solutions define the quorum adaptively. When a partition occurs, if a majority of the previous quorum is connected, a new and smaller quorum is established and updates can be performed within this partition <ref> [10, 11] </ref>. The advantage of those methods is that in many cases, when faults occur and even if the network splits into two, the larger partition can perform updates.
Reference: 11. <author> A. El Abbadi and S. Toueg. </author> <title> Availability in partitioned replicated databases. </title> <booktitle> In ACM SIGACT-SIGMOD Symp. on Principles of Database systems, </booktitle> <volume> number 5, </volume> <pages> pages 240-251, </pages> <address> Cambridge, MA, </address> <month> March </month> <year> 1986. </year>
Reference-contexts: Explicit use of timestamps enables others [4] to overcome the difficulty. More advanced solutions define the quorum adaptively. When a partition occurs, if a majority of the previous quorum is connected, a new and smaller quorum is established and updates can be performed within this partition <ref> [10, 11] </ref>. The advantage of those methods is that in many cases, when faults occur and even if the network splits into two, the larger partition can perform updates.
Reference: 12. <author> K. Eswaran, J. Gray, R. Lorie, and I. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, 1976. 
Reference-contexts: We suggest that the methods used to build this mail service can lead to better solutions in the area of distributed transaction systems and replicated databases. Related Work A lot of work has been done in the area of distributed and replicated databases. Two-phase-commit-like protocols <ref> [12] </ref> are the main tool for providing a consistent view in a distributed database system over an unreliable network. In a typical protocol [14] of this kind, the transaction coordinator sends a request to prepare to commit to all the participant processors.
Reference: 13. <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: A good membership algorithm provides this knowledge, even in the presence of processor crashes, processors recovery, network partitions and merges, and booting of new processors. It is a known fact <ref> [13, 8] </ref> that the membership problem in a dynamic asynchronous environment, when faults may exist, is unsolvable. The problem is the inability to distinguish between a slow machine and one that has crashed. A number of approaches to bypassing this obstruction exist [1].
Reference: 14. <author> J. Gray. </author> <booktitle> Notes on database operating systems. In Operating Systems: An Advanced Course,Lecture Notes in Computer Science, </booktitle> <volume> volume 60, </volume> <pages> pages 393-481. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: Related Work A lot of work has been done in the area of distributed and replicated databases. Two-phase-commit-like protocols [12] are the main tool for providing a consistent view in a distributed database system over an unreliable network. In a typical protocol <ref> [14] </ref> of this kind, the transaction coordinator sends a request to prepare to commit to all the participant processors. Each processor answers by a "ready to commit" or an "abort" message. If any processor suggests to abort, all processors abort.
Reference: 15. <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The Trans and Totem protocols [3, 17] for ordered multicast utilize the broadcast capability of the network. These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. Similar approaches can be found in the Psync protocol [18], in the Amoeba system <ref> [15] </ref>, in Delta-4 [22], and in the Chang and Maxemchuk protocol [7]. The above systems and protocols are leading the way for better usage of the hardware capabilities, where certain data replication is needed in an environment which is built as a collection of several local area networks.
Reference: 16. <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Comm. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: the state of the message database among the servers in the current configuration, knowledge from servers which are not part of the current configuration can be introduced only after a merge occurs. 4 The Algorithm The basic idea is to order update messages (i.e transactions) according to a Lamport timestamp <ref> [16] </ref> which is stamped by the transaction initiator (i.e one of the Replicated Mail Servers) at the time of creation. When two transactions are stamped with the same Lamport timestamp, they are ordered according to the initiator's server id.
Reference: 17. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: The novelty of ISIS is in the formal and rigorous definition of the service interface. Moreover, ISIS utilizes algorithms that are formally proven to have certain needed properties [6] such as virtual synchrony. The Trans and Totem protocols <ref> [3, 17] </ref> for ordered multicast utilize the broadcast capability of the network. These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. <p> Messages include piggybacked information about preceding messages. Upon receiving messages that follow missing messages, the server discovers that certain messages are missing, and requests for retransmission. This is similar to other lower-level algorithms such as in the Trans algorithm <ref> [17] </ref>, the Psync algorithm [18],,, and in Transis [2]. Recovery of messages, after partitions are remerged, occurs only if new messages are generated. This is a major drawback because it creates the necessity to initiate new messages from time to time.
Reference: 18. <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: The Trans and Totem protocols [3, 17] for ordered multicast utilize the broadcast capability of the network. These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. Similar approaches can be found in the Psync protocol <ref> [18] </ref>, in the Amoeba system [15], in Delta-4 [22], and in the Chang and Maxemchuk protocol [7]. <p> Messages include piggybacked information about preceding messages. Upon receiving messages that follow missing messages, the server discovers that certain messages are missing, and requests for retransmission. This is similar to other lower-level algorithms such as in the Trans algorithm [17], the Psync algorithm <ref> [18] </ref>,,, and in Transis [2]. Recovery of messages, after partitions are remerged, occurs only if new messages are generated. This is a major drawback because it creates the necessity to initiate new messages from time to time. Long timeouts lead to inconsistent views among servers in the same partition.
Reference: 19. <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In ACM SIGMOD Symp. on Management of Data, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Moreover, when a partition occurs, the lack of dynamic replication forces many distributed transactions to abort. There are many protocols that optimize specific cases <ref> [19] </ref>. For example, in a fully replicated database, achieving a quorum is enough to resolve the transaction [21]. Some solutions limit the transactional model to commutative transactions. Others give special weight to a specific processor or to a specific transaction [20].
Reference: 20. <author> M. Stonebraker. </author> <title> Concurrency control and consistency of multiple copies of data in distributed Ingres. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 3(3) </volume> <pages> 188-194, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: There are many protocols that optimize specific cases [19]. For example, in a fully replicated database, achieving a quorum is enough to resolve the transaction [21]. Some solutions limit the transactional model to commutative transactions. Others give special weight to a specific processor or to a specific transaction <ref> [20] </ref>. Explicit use of timestamps enables others [4] to overcome the difficulty. More advanced solutions define the quorum adaptively. When a partition occurs, if a majority of the previous quorum is connected, a new and smaller quorum is established and updates can be performed within this partition [10, 11].
Reference: 21. <author> R. Thomas. </author> <title> A majority consensus approach to concurrency control for multiple copy databases. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Moreover, when a partition occurs, the lack of dynamic replication forces many distributed transactions to abort. There are many protocols that optimize specific cases [19]. For example, in a fully replicated database, achieving a quorum is enough to resolve the transaction <ref> [21] </ref>. Some solutions limit the transactional model to commutative transactions. Others give special weight to a specific processor or to a specific transaction [20]. Explicit use of timestamps enables others [4] to overcome the difficulty. More advanced solutions define the quorum adaptively.
Reference: 22. <author> P. Verissimo, L. Rodrigues, and J. Rufino. </author> <title> The Atomic Multicast Protocol (AMp). </title> <editor> In D. Powell, editor, Delta-4: </editor> <booktitle> A Generic Architecture for Dependable Distributed Computing, </booktitle> <pages> pages 267-294. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: These protocols spare the need of separate send operations and acknowledgment management for each of the destinations. Similar approaches can be found in the Psync protocol [18], in the Amoeba system [15], in Delta-4 <ref> [22] </ref>, and in the Chang and Maxemchuk protocol [7]. The above systems and protocols are leading the way for better usage of the hardware capabilities, where certain data replication is needed in an environment which is built as a collection of several local area networks.
References-found: 22

