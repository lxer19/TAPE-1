URL: http://www.eecs.umich.edu/techreports/cse/1995/CSE-TR-255-95.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse95.html
Root-URL: http://www.eecs.umich.edu
Title: Functional Abstraction and Partial Specification of Boolean Functions  
Author: Karem A. Sakallah - 
Date: August 9, 1995  
Address: Ann Arbor, Michigan 48109-2122 USA  
Affiliation: Computer Science and Engineering Division Department of Electrical Engineering and Computer Science  THE UNIVERSITY OF MICHIGAN  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abramovici, M. A. Breuer and A. D. Friedman, </author> <title> Digital Systems Testing and Testable Design . Electrical Engineering, Communications, and Signal Processing, </title> <editor> ed. R.L. Pickholtz. </editor> <booktitle> 1990, </booktitle> <publisher> Computer Science Press. </publisher>
Reference-contexts: Since the abstraction of variables gives rise to independent cases, such an approach is infeasible except for small values of only other way of eliminating apparent uncertainty is to express the model only in terms of independent variables such as those corresponding to primary inputs or head lines <ref> [1, p. 208] </ref> in the circuit implementation. Unfortunately, for many functions such representations are impractical since their sizes can be exponential in the number of independent variables.
Reference: [2] <author> R. K. Brayton, J. D. Cohen, G. D. Hachtel, B. M. Trager and D. Y. Y. Yun, </author> <title> Fast Recursive Boolean Function Manipulation, </title> <booktitle> in Proc. IEEE International Symposium on Circuits and Systems (ISCAS) , pp. </booktitle> <pages> 58-62, </pages> <address> 1982, Rome, Italy. </address>
Reference-contexts: x 1 x 2 ,( ) 0 x 2 x 2 1 , , , - 5 G 3 x 1 x 2 ,( ) x 1 - 5 CSE-TR-255-95: Functional Abstraction and Partial Specification of Boolean Functions 6 where the last operation was the cofactor of with respect to <ref> [2] </ref>. Finally, let us note that the function space forms a -element Boolean algebra [5, p. 48], i.e. it is a distributive and complemented lattice [11, p. 64]. Thus, each subset of has a unique greatest lower bound (glb) and a unique least upper bound (lub). <p> Theorem 3.1 Proof: The following expression for follows directly from definitions 3.1 and 3.2 and from application of the functional composition rule in (2.3): (3.1) Thus is a subset of . Example 3.1 Let . Functional abstraction of yields: 3. This notation is similar to the cofactor notation <ref> [2] </ref> and can be read as the function with unspecified. It suggests the eval uation of the function at the values indicated in the subscript. CSE-TR-255-95: Functional Abstraction and Partial Specification of Boolean Functions 8 Note that . Example 3.2 Let .
Reference: [3] <author> R. K. Brayton and F. Somenzi, </author> <title> An Exact Minimizer for Boolean Relations, </title> <booktitle> in Digest of IEEE International Conference on Computer-Aided Design (ICCAD) , pp. </booktitle> <pages> 316-319, </pages> <address> 1989, Santa Clara, California. </address>
Reference-contexts: This example suggests that function sets arise naturally in the context of modeling functional uncertainty. Indeed, function sets provide the most general framework for modeling uncertainty in the functional behavior of logic circuits. Other models, such as dont-cares, Boolean relations <ref> [3] </ref>, or function intervals [5, p. 45], are easily shown to be special cases of function sets. In the remainder of this section, we provide a formal definition of partially specified Boolean functions as function sets and examine several of their properties.
Reference: [4] <author> M. A. Breuer, </author> <title> A Note on Three-Valued Logic Simulation, </title> <journal> IEEE Transaction on Computers, </journal> <volume> vol. C-21, </volume> <pages> pp. 399-402, </pages> <month> April </month> <year> 1972. </year>
Reference-contexts: Muller also pointed out that the resulting ternary algebra was formally equivalent to the strong 3-valued logic of Kleene [10]. Since that time, this third value has become a standard feature of logic simulation models and has found additional applications such as circuit initialization, hazard detection, race detection, etc. <ref> [4] </ref>. More recently, Hayes [8, 9] examined uncertainty in the context of multiple-valued logics and showed how logics that incorporate more than one uncertain value can be systematically generated.
Reference: [5] <author> F. M. Brown, </author> <title> Boolean Reasoning . ed. </title> <editor> J. Allen. </editor> <booktitle> 1990, </booktitle> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: This example suggests that function sets arise naturally in the context of modeling functional uncertainty. Indeed, function sets provide the most general framework for modeling uncertainty in the functional behavior of logic circuits. Other models, such as dont-cares, Boolean relations [3], or function intervals <ref> [5, p. 45] </ref>, are easily shown to be special cases of function sets. In the remainder of this section, we provide a formal definition of partially specified Boolean functions as function sets and examine several of their properties. <p> The function sets generated by such dont-cares are identical to those produced by a Boolean relation from to . In contrast, function intervals result when the functions are individually treated as single-output partially specified functions. 2. Brown <ref> [5, p. 47] </ref> denotes this set by where is, in general, a -element Boolean algebra. CSE-TR-255-95: Functional Abstraction and Partial Specification of Boolean Functions 5 The sets , , and correspond to partially specified 2-variable functions whose uncertainties are equal to 2, 3, and 1, respectively. <p> Finally, let us note that the function space forms a -element Boolean algebra <ref> [5, p. 48] </ref>, i.e. it is a distributive and complemented lattice [11, p. 64]. Thus, each subset of has a unique greatest lower bound (glb) and a unique least upper bound (lub). The following definition prescribes how these bounds are calculated. <p> Intervals in the function space are function sets that can be described compactly by specifying two distinguished members. In this section we define function intervals, derive some of their properties, and show how they can be used for functional abstraction. Definition 4.1 (Function Interval <ref> [5, p. 45] </ref>) The partially specified function is a function interval if it can be expressed as where and are two n-variable Boolean functions such that . <p> Several examples of function intervals in are shown in Figure 4-1. Function intervals have many useful properties most of which derive from the partial ordering (inclusion) relation its various equivalents <ref> [5, p. 28] </ref>. <p> Brown <ref> [5, pp. 106-110] </ref> refers to these bounds, respectively, as the conjunctive and disjunctive eliminants, and views what we have called conservative abstraction as the elimination of from the function interval .
Reference: [6] <author> C. L. Harkness, </author> <title> An Approach to Uncertainty in VLSI Design , Ph.D. </title> <type> Thesis, </type> <institution> Brown University, </institution> <year> 1991. </year>
Reference-contexts: More recently, Hayes [8, 9] examined uncertainty in the context of multiple-valued logics and showed how logics that incorporate more than one uncertain value can be systematically generated. Examples, other than timing analysis, of approximate modeling through careful introduction of uncertainty have been studied by Harkness <ref> [6, 7] </ref> and include switch Abstraction of with respect to Interval in between and Smallest interval containing Conservative abstraction of with respect to Expand operator; interval containing Notation Meaning Example 2 CSE-TR-255-95: Functional Abstraction and Partial Specification of Boolean Functions 3 level simulation with uncertain signal strength, delay in RC networks
Reference: [7] <author> C. L. Harkness and D. P. Lopresti, </author> <title> Interval Methods for Modeling Uncertainty in RC Timing Analysis, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems , vol. </journal> <volume> 11, no. 11, </volume> <pages> pp. 1388-1401, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: More recently, Hayes [8, 9] examined uncertainty in the context of multiple-valued logics and showed how logics that incorporate more than one uncertain value can be systematically generated. Examples, other than timing analysis, of approximate modeling through careful introduction of uncertainty have been studied by Harkness <ref> [6, 7] </ref> and include switch Abstraction of with respect to Interval in between and Smallest interval containing Conservative abstraction of with respect to Expand operator; interval containing Notation Meaning Example 2 CSE-TR-255-95: Functional Abstraction and Partial Specification of Boolean Functions 3 level simulation with uncertain signal strength, delay in RC networks
Reference: [8] <author> J. P. Hayes, </author> <title> Uncertainty, Energy, and Multiple-Valued Logics, </title> <journal> IEEE Transactions on Computes , vol. </journal> <volume> C-35, no. 2, </volume> <pages> pp. 107-114, </pages> <month> Feb-ruary </month> <year> 1986. </year>
Reference-contexts: Since that time, this third value has become a standard feature of logic simulation models and has found additional applications such as circuit initialization, hazard detection, race detection, etc. [4]. More recently, Hayes <ref> [8, 9] </ref> examined uncertainty in the context of multiple-valued logics and showed how logics that incorporate more than one uncertain value can be systematically generated.
Reference: [9] <author> J. P. Hayes, </author> <title> Digital Simulation with Multiple Logic Values, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems , vol. CAD-5, </journal> <volume> no. 2, </volume> <pages> pp. 274-283, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Since that time, this third value has become a standard feature of logic simulation models and has found additional applications such as circuit initialization, hazard detection, race detection, etc. [4]. More recently, Hayes <ref> [8, 9] </ref> examined uncertainty in the context of multiple-valued logics and showed how logics that incorporate more than one uncertain value can be systematically generated. <p> It is, therefore, appropriate to manipulate partially specified functions algebraically. Such alge braic manipulation is based on the following pair of functional composition rules <ref> [9] </ref>. Definition 2.3 (Functional Composition Rules for Partially Specified Boolean Functions) Composition Rule #1 : Let be a k-variable Boolean function, and let be k partially specified n-variable Boolean functions.
Reference: [10] <author> S. C. Kleene, </author> <title> Introduction to Mathematics . 1952, </title> <publisher> Princeton, </publisher> <address> N.J.: D. </address> <publisher> Van Nostrand, Inc. </publisher>
Reference-contexts: This third valuewhich Muller wrote as was meant to model digital signals in transition between the binary values 0 and 1. Muller also pointed out that the resulting ternary algebra was formally equivalent to the strong 3-valued logic of Kleene <ref> [10] </ref>. Since that time, this third value has become a standard feature of logic simulation models and has found additional applications such as circuit initialization, hazard detection, race detection, etc. [4].
Reference: [11] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory . Second ed. </title> <booktitle> Computer Science Series, 1978, </booktitle> <publisher> McGraw-Hill. </publisher>
Reference-contexts: Finally, let us note that the function space forms a -element Boolean algebra [5, p. 48], i.e. it is a distributive and complemented lattice <ref> [11, p. 64] </ref>. Thus, each subset of has a unique greatest lower bound (glb) and a unique least upper bound (lub). The following definition prescribes how these bounds are calculated.
Reference: [12] <author> P. C. McGeer, </author> <title> On the Interaction of Functional and Timing Behavior of Combinational Logic Circuits , Ph.D. </title> <type> Thesis, </type> <institution> University of California, Berkeley, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: of Boolean Functions 16 from (4.11) and (3.1) from (4.6) (interval operator) from (2.4) by perfect induction from Lemma 4.3 It is interesting to note that the conservative abstraction of with respect to is the interval whose glb is the consen sus operator and whose lub is the smoothing operator <ref> [12] </ref>. Brown [5, pp. 106-110] refers to these bounds, respectively, as the conjunctive and disjunctive eliminants, and views what we have called conservative abstraction as the elimination of from the function interval .
Reference: [13] <author> D. E. Muller, </author> <title> Treatment of Transition Signals in Electronic Switching Circuits by Algebraic Methods, </title> <journal> IRE Trans. on Electronic Computers , vol. </journal> <volume> EC-8, </volume> <pages> pp. 401, </pages> <year> 1959. </year>
Reference-contexts: Tighter bounds can be obtained by abstracting away only some but not all functional dependencies. The use of uncertain signal values in models of logic gate circuits has a long history that started with the introduction, by Muller <ref> [13] </ref>, of a third value to the two-element switching algebra. This third valuewhich Muller wrote as was meant to model digital signals in transition between the binary values 0 and 1.
Reference: [14] <author> K. A. Sakallah, </author> <title> Dynamic Modeling of Logic Gate Circuits, </title> <type> Technical Report CSE-TR-253-95, </type> <institution> The University of Michigan, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: In related work, we describe a comprehensive model of the dynamic behavior of logic gate circuits that builds on this foundation <ref> [14] </ref>. We are also developing a general model for the timing of logic gate circuits that is derived through careful functional abstraction.
Reference: [15] <author> B. Stroustrup, </author> <title> The C++ Programming Language . Addison-Wesley Series in Computer Science, </title> <editor> ed. </editor> <address> M.A. Harrison. 1986, </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The interval operator introduced next is useful in converting unrestricted partially specified functions into intervals. It can be viewed as a type cast <ref> [15] </ref> that converts objects of type function set to objects of type function interval. Definition 4.2 (Interval Operator [ ]) The interval operator is a unary operator that returns the smallest function interval containing a given partially specified function.
Reference: [16] <author> C. A. Zukowski, </author> <title> The Bounding Approach to VLSI Circuit Simulation . The Kluwer International Series in Engineering and Computer Science, </title> <editor> ed. J. Allen. </editor> <booktitle> 1986, </booktitle> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Zukowski <ref> [16] </ref> also demonstrated that tight bounds on voltage waveforms in circuit simulation can be effi ciently obtained when appropriate bounds on the circuit excitations are assumed. The remainder of this report is divided into four sections.
References-found: 16

