URL: http://www.win.tue.nl/cs/tt/jaco/papers/modularity.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Title: Modularity in Many-sorted Term Rewriting Systems  
Author: Jaco van de Pol 
Date: Januar 1993  
Abstract: Many-sorted term rewriting systems (MTRS) are an extension of the formalism of term rewriting systems (TRS). The direct sum of TRS's is generalized to the direct sum of MTRS's. Some equivalence between "taking the direct sum" and "eliminating the sorts" is established: Component closed reduction properties which are resistant against disjoint union (modularity), are also resistant against sort elimination (persistence). The reverse has been proved earlier. 
Abstract-found: 1
Intro-found: 1
Reference: [GJM85] <author> J.A. Goguen, J.-P. Jouannaud, and J. Meseguer. </author> <title> Operational semantics of order-sorted algebra. </title> <booktitle> In Proceedings of the 12th International Colloquium on Automata, Languages and Programming, volume 194 of Lecture Notes in Computer Science, </booktitle> <pages> pages 221-231, </pages> <address> Nafplion, </address> <year> 1985. </year>
Reference-contexts: To meet this applications several extensions are proposed: Graph and infinite rewriting, conditional term rewriting, term rewriting with rule priorities and order-sorted term rewriting <ref> [GJM85] </ref>. The extension to many-sorted term rewriting (which is a special case of order-sorted rewriting) is the main subject of this thesis. More recently is the research on the modularity of properties of term rewriting systems. <p> The notion of a well-sorted substitution could be used to give a definition of well-sorted rewriting, without using unsorted rewriting. Another issue is, whether the notion of persistency can be generalized for order-sorted term rewriting systems <ref> [GJM85] </ref>. A related question is if the proof as given in this thesis could be generalized for the order-sorted case. 35
Reference: [KK88] <author> M. Kurihara and I. Kaji. </author> <title> Modular term rewriting systems: Termination, confluence and strategies. </title> <type> Report, </type> <institution> Hokkaido University, Sapporo, </institution> <year> 1988. </year>
Reference-contexts: Furthermore, Toyama proved the modularity of confluence (CR) in [Toy87b]. This proof is presented more accessible in [KMTdV91]. Middeldorp proved in [Mid90] the modularity of weak confluence (WCR) and unique normalization (UN). Furthermore he describes a proof for the modularity of weak normalization (WN), due to Kurihara and Kaji <ref> [KK88] </ref>. Finally, there are counterexamples for the modularity of the normal form property (NF) and the unique normal form with respect to reduction (UN ! ) [Mid90, p.97, p.101].
Reference: [KMTdV91] <author> J.W. Klop, A. Middeldorp, Y. Toyama, and R. de Vrijer. </author> <title> A simplified proof of toyama's theorem. </title> <type> Technical Report IR-270, </type> <institution> Vrije Universiteit Amsterdam, </institution> <month> dec </month> <year> 1991. </year>
Reference-contexts: Middeldorp showed that the following condition was sufficient to have modularity of termination: One of the term rewriting systems contains neither collapsing rules nor duplicating rules [Mid89]. Furthermore, Toyama proved the modularity of confluence (CR) in [Toy87b]. This proof is presented more accessible in <ref> [KMTdV91] </ref>. Middeldorp proved in [Mid90] the modularity of weak confluence (WCR) and unique normalization (UN). Furthermore he describes a proof for the modularity of weak normalization (WN), due to Kurihara and Kaji [KK88]. <p> Also some important syntactic properties are maintained by the constructions of the proof, so we are able to restrict to left-linear, collapse free or duplicate free MTRS's. Proving that confluence is a persistent property, only depends on checking Toyama's proof of the modularity of confluence in <ref> [KMTdV91] </ref>. As a conjecture we state that confluence is a persistent property of many-sorted term rewriting systems. This statement gives a strong proof technique for the confluence of concrete TRS's.
Reference: [Mid89] <author> A. Middeldorp. </author> <title> A sufficient condition for the termination of the direct sum of term rewriting systems. </title> <booktitle> In Proceedings of the 4th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 396-401, </pages> <address> Pacific Grove, </address> <year> 1989. </year>
Reference-contexts: Middeldorp showed that the following condition was sufficient to have modularity of termination: One of the term rewriting systems contains neither collapsing rules nor duplicating rules <ref> [Mid89] </ref>. Furthermore, Toyama proved the modularity of confluence (CR) in [Toy87b]. This proof is presented more accessible in [KMTdV91]. Middeldorp proved in [Mid90] the modularity of weak confluence (WCR) and unique normalization (UN).
Reference: [Mid90] <author> A. Middeldorp. </author> <title> Modular Properties of Term Rewriting Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit te Amsterdam, Amster-dam, </institution> <year> 1990. </year>
Reference-contexts: More recently is the research on the modularity of properties of term rewriting systems. A property is called modular if it is preserved by the disjoint-union-operator, also called the direct sum on TRS's <ref> [Toy87b, Toy87a, Rus87, Mid90] </ref>. This notion is extended to many-sorted term rewriting systems. This thesis can be seen as a continuation of the research of H. Zantema on the persistence of properties of many-sorted TRS's. A property is called persistent if it is preserved by the sort-elimination-operator on many-sorted TRS's. <p> For a discussion on these properties and a proof of the relations between them we refer to <ref> [Mid90, x1.1] </ref>. Here we only state the relationship between these properties, in the same form as A. Middeldorp in the just cited book. (see figure 1) All these properties say something about the whole reduction relation. <p> This insight has led to the study on the union of TRS's. However, it turns out that the union of two TRS's doesn't inherit important properties of the original TRS's. See <ref> [Mid90, 29] </ref> for examples. The reason is that the TRS's can share function symbols. Therefore only the union of disjoint 8 TRS's is regarded. <p> In other words: T = (F ; R ; T ). This is known in the literature [Toy87b, Rus87] as the direct sum. This definition of the direct sum of TRS's can also be found in <ref> [Mid90, 31] </ref> and originates from [Toy87b, 131]. We can ask about the influence of the disjoint union operator on the properties of the two term rewriting systems. <p> So we define for a property P on TRS's: P is modular iff for all term rewriting systems R 1 and R 2 holds: P (R 1 R 2 ) () (P (R 1 ) ^ P (R 2 )) This definition is equivalent to the definition in <ref> [Mid90, 29] </ref>. 2.5 Previous Results The modularity of many properties is known, due to recent research by Toyama, Rusinowitch and Middeldorp. For a detailed overview on these results [Mid90] can be read. <p> For a detailed overview on these results <ref> [Mid90] </ref> can be read. In 1987 Toyama presented his famous counter example, showing that strong normalization is not a modular property for term rewriting systems [Toy87a, 141]. It reads as follows: the following TRS's are both terminating. <p> Middeldorp showed that the following condition was sufficient to have modularity of termination: One of the term rewriting systems contains neither collapsing rules nor duplicating rules [Mid89]. Furthermore, Toyama proved the modularity of confluence (CR) in [Toy87b]. This proof is presented more accessible in [KMTdV91]. Middeldorp proved in <ref> [Mid90] </ref> the modularity of weak confluence (WCR) and unique normalization (UN). Furthermore he describes a proof for the modularity of weak normalization (WN), due to Kurihara and Kaji [KK88]. <p> Furthermore he describes a proof for the modularity of weak normalization (WN), due to Kurihara and Kaji [KK88]. Finally, there are counterexamples for the modularity of the normal form property (NF) and the unique normal form with respect to reduction (UN ! ) <ref> [Mid90, p.97, p.101] </ref>. <p> Finally, there are counterexamples for the modularity of the normal form property (NF) and the unique normal form with respect to reduction (UN ! ) [Mid90, p.97, p.101]. However, NF is modular for left-linear TRS's <ref> [Mid90, p.100] </ref>. 3 Many-sorted Term Rewriting 3.1 Many-sorted Signatures and Terms We can put a sort restriction on terms as follows: every function symbol gets a sort (type) and a sequence of sorts, defining which sort it expects from each of its arguments. Variables get a sort too.
Reference: [Rus87] <author> M. Rusinowitch. </author> <title> On termination of the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: More recently is the research on the modularity of properties of term rewriting systems. A property is called modular if it is preserved by the disjoint-union-operator, also called the direct sum on TRS's <ref> [Toy87b, Toy87a, Rus87, Mid90] </ref>. This notion is extended to many-sorted term rewriting systems. This thesis can be seen as a continuation of the research of H. Zantema on the persistence of properties of many-sorted TRS's. A property is called persistent if it is preserved by the sort-elimination-operator on many-sorted TRS's. <p> The disjoint union of the TRS's T 1 T 2 is defined as the new TRS (F ; R ; T (F )). In other words: T = (F ; R ; T ). This is known in the literature <ref> [Toy87b, Rus87] </ref> as the direct sum. This definition of the direct sum of TRS's can also be found in [Mid90, 31] and originates from [Toy87b, 131]. We can ask about the influence of the disjoint union operator on the properties of the two term rewriting systems. <p> Rusi-nowitch showed in <ref> [Rus87] </ref> that if term rewriting systems R 1 and R 2 both lack collapsing rules, or if they both lack duplicating rules, then the direct sum R 1 R 2 is terminating if and only if R 1 and R 2 are terminating. <p> This is a useful generalization, because the modularity of strong normalization is restricted to combinations of collapse free and duplicate free TRS's <ref> [Rus87] </ref>. 5 Conclusions and Questions In section 3.4 a convenient definition of the direct sum of many-sorted term rewriting systems has been given. With this definition the direct sum of two MTRS's yields an MTRS again.
Reference: [SS87] <author> M. Schmidt-Schau. </author> <title> Computational Aspects of an Order-Sorted Logic with Term Declarations, </title> <booktitle> volume 395 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <note> subseries of LNCS. </note>
Reference-contexts: From the view point of many-sorted signatures, T contains ill-sorted terms. For a detailed discussion of order-sorted algebra we refer to <ref> [SS87] </ref>. Note also that if there is only one sort, then by definition the set wsa (f (t 1 ; : : : ; t n )) = f1; : : : ; ng. Therefore: Proposition 3.1 If #S = 1 then WT = T .
Reference: [Toy87a] <author> Y. Toyama. </author> <title> Counterexamples to termination for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: More recently is the research on the modularity of properties of term rewriting systems. A property is called modular if it is preserved by the disjoint-union-operator, also called the direct sum on TRS's <ref> [Toy87b, Toy87a, Rus87, Mid90] </ref>. This notion is extended to many-sorted term rewriting systems. This thesis can be seen as a continuation of the research of H. Zantema on the persistence of properties of many-sorted TRS's. A property is called persistent if it is preserved by the sort-elimination-operator on many-sorted TRS's. <p> For a detailed overview on these results [Mid90] can be read. In 1987 Toyama presented his famous counter example, showing that strong normalization is not a modular property for term rewriting systems <ref> [Toy87a, 141] </ref>. It reads as follows: the following TRS's are both terminating.
Reference: [Toy87b] <author> Y. Toyama. </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 128-143, </pages> <year> 1987. </year>
Reference-contexts: More recently is the research on the modularity of properties of term rewriting systems. A property is called modular if it is preserved by the disjoint-union-operator, also called the direct sum on TRS's <ref> [Toy87b, Toy87a, Rus87, Mid90] </ref>. This notion is extended to many-sorted term rewriting systems. This thesis can be seen as a continuation of the research of H. Zantema on the persistence of properties of many-sorted TRS's. A property is called persistent if it is preserved by the sort-elimination-operator on many-sorted TRS's. <p> The disjoint union of the TRS's T 1 T 2 is defined as the new TRS (F ; R ; T (F )). In other words: T = (F ; R ; T ). This is known in the literature <ref> [Toy87b, Rus87] </ref> as the direct sum. This definition of the direct sum of TRS's can also be found in [Mid90, 31] and originates from [Toy87b, 131]. We can ask about the influence of the disjoint union operator on the properties of the two term rewriting systems. <p> In other words: T = (F ; R ; T ). This is known in the literature [Toy87b, Rus87] as the direct sum. This definition of the direct sum of TRS's can also be found in [Mid90, 31] and originates from <ref> [Toy87b, 131] </ref>. We can ask about the influence of the disjoint union operator on the properties of the two term rewriting systems. Does taking the direct sum preserve important properties, as confluence, strong normalization etc.? Properties that are resistant against the disjoint union operator are called "modular". <p> Middeldorp showed that the following condition was sufficient to have modularity of termination: One of the term rewriting systems contains neither collapsing rules nor duplicating rules [Mid89]. Furthermore, Toyama proved the modularity of confluence (CR) in <ref> [Toy87b] </ref>. This proof is presented more accessible in [KMTdV91]. Middeldorp proved in [Mid90] the modularity of weak confluence (WCR) and unique normalization (UN). Furthermore he describes a proof for the modularity of weak normalization (WN), due to Kurihara and Kaji [KK88].
Reference: [Zan91] <author> H. Zantema. </author> <title> Termination of term rewriting: from many-sorted to one-sorted. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Computing Science in The Netherlands, volume 2 of CSN proceedings, </booktitle> <pages> pages 617-629. </pages> <address> SION, CSN'91, </address> <month> nov </month> <year> 1991. </year>
Reference-contexts: A property is called persistent if it is preserved by the sort-elimination-operator on many-sorted TRS's. Zantema proved that persistent properties are modular, for some class of properties (reduction properties or component closed properties). In fact we can partially answer one of the "Concluding remarks" of his article <ref> [Zan91, 628] </ref>: "It is unknown whether there are modular reduction properties that are not persistent": For modular properties on many-sorted TRS's the answer is: No, there are none. 1.2 Overview and Main Results You are reading my master thesis, which is the closure of my study in Computer Science on the <p> Note that rules of a sort different to ff can also play a role in the last system. This definition of MTRS's and well-sorted rewriting is equivalent to the definition of a many-sorted term rewriting system in <ref> [Zan91, 618] </ref>, but the notations are quite different. 3.4 The Direct Sum for Many-sorted TRS We can generalize the disjoint union operator to S-sorted term rewriting systems. <p> More precisely, a property P on TRS's is called persistent if for all many-sorted TRS's M : P (M ) () P (fi (M )) This definition of persistence is equivalent to the definition of <ref> [Zan91, 619] </ref> in which an MTRS is transformed into a copied version with a new one-sorted signature. In [Zan91] a proof is given that persistent properties are modular. The same proof technique can be used for MS-modularity. <p> In <ref> [Zan91] </ref> a proof is given that persistent properties are modular. The same proof technique can be used for MS-modularity. This gives the following theorem: 17 Theorem 3.10 Persistent and component closed properties are MS-modular. Proof: Let P be a component closed and persistent property. <p> In fact <ref> [Zan91] </ref> shows that (1) implies (2). With the same method we could prove in theorem 3.10 that (1) implies (3). Furthermore it is evident that (3) implies (2). The main theorem of this thesis is that (3) implies (1) (Theorem 4.23). <p> As a conjecture we state that confluence is a persistent property of many-sorted term rewriting systems. This statement gives a strong proof technique for the confluence of concrete TRS's. The following TRS, due to Toyama, can be found in <ref> [Zan91, 629] </ref>: R = &gt; &gt; &gt; &lt; a ( x; y) ! a ( f ( x ); f ( x)) b ( f ( x ); x) ! b (x; f ( x)) Proving the confluence of this TRS is not easy, but we can assign the following compatible
Reference: [Zan92] <author> H. Zantema. </author> <title> Type removal in term rewriting. </title> <editor> In M. Rusinow-itch and J.L. Remy, editors, </editor> <booktitle> CTRS 92 (Extended Abstracts), 36 Conditional Term Rewriting Systems, </booktitle> <pages> pages 86-90, </pages> <address> Ponta--Mousson, </address> <month> july </month> <year> 1992. </year> <institution> Centre de Recherche en Informatique de Nancy. </institution> <note> To be published in the Springer-Verlag collection. 37 </note>
Reference-contexts: But if we analyze them, we see that it is enough to verify them for every equivalence class generated by the reduction relation. This feature on properties is called component closed. The formal definition is given below and can be found in <ref> [Zan92, 67] </ref>. Let A = (A; R) be some ARS. Then with A i we denote the family of equivalence classes under the relation = R . With R i we denote the relation R restricted to the equivalence class A i .
References-found: 11

