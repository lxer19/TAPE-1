URL: http://euler.mcs.utulsa.edu/~corcoran/ps/libga.ps
Refering-URL: http://euler.mcs.utulsa.edu/~corcoran/pubs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: corcoran@penguin.mcs.utulsa.edu  rogerw@penguin.mcs.utulsa.edu  
Phone: Phone: (918) 631-2228 Fax: (918) 631-3077  
Title: Using LibGA to Develop Genetic Algorithms for Solving Combinatorial Optimization Problems  
Author: Arthur L. Corcoran Roger L. Wainwright 
Address: 600 South College Avenue Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical and Computer Sciences The University of Tulsa  
Abstract: In this paper we provide an introduction to genetic algorithms and how they are used to solve combinatorial optimization problems. We describe LibGA, a genetic algorithm development library. LibGA is used to solve three simple combinatorial optimization problems: bin packing, the traveling salesman problem, and multiprocessor scheduling. Sufficient details of LibGA are provided to enable the reader to easily use LibGA as a tool for solving additional combinatorial optimization problems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. S. Baker, E. G. Coffman, and R. L. Rivest. </author> <title> Orthogonal packings in two dimensions. </title> <journal> SIAM Journal of Computing, </journal> <volume> 9(4) </volume> <pages> 846-855, </pages> <month> Nov. </month> <year> 1980. </year>
Reference-contexts: Program ============================================================================*/ #include "ga.h" int obj_fun (); /*--- Forward declaration ---*/ /*--------------------------------------------------------------- | main () ----------------------------------------------------------------*/ main (argc, argv) int argc; char *argv []; - GA_Info_Ptr ga_info; /*--- Initialize the genetic algorithm ---*/ ga_info = GA_config ("ga-test.cfg", obj_fun); /*--- Select crossover ---*/ if (argc &gt; 1) - X_select (ga_info, argv <ref> [1] </ref>); -; GA_run (ga_info); #if 0 /*--- Rerun the GA ---*/ GA_run (ga_info); /*--- Reset and rerun the GA ---*/ GA_reset (ga_info, "ga-test.cfg"); ga_info-&gt;chrom_len = 15; GA_run (ga_info); #endif - 5 /*--------------------------------------------------------------- | obj_fun () user specified objective function ----------------------------------------------------------------*/ int obj_fun (chrom) Chrom_Ptr chrom; - double val = 0.0, penalty, <p> However, some applications may allow rotation or translation of the packages. Packing efficiency may be improved if each package is rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results are presented in Baker et al. <ref> [1] </ref>, Carpenter and Dowsland [7], Coffman et al. [8], Dowsland [14] and Leung et al. [27]. When extending the problem to three dimensions, it is desirable to apply the results of two dimensional research to obtain similar efficiency.
Reference: [2] <editor> R. K. Belew and L. B. Booker, editors. </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <address> San Diego, California, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [3] <author> J. L. Blanton and R. L. Wainwright. </author> <title> Vehicle routing with time windows using genetic algorithms. </title> <editor> In W. A. Coberly, editor, </editor> <booktitle> Proceedings of the Sixth Oklahoma Symposium on Artificial Intelligence, </booktitle> <pages> pages 242-251, </pages> <institution> Tulsa, Oklahoma, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Other combinatorial optimization problems that fall into this category include the bin packing problem, job scheduling problems, stock cutting, vehicle routing and transportation scheduling problems, etc. Developing efficient genetic algorithms to solve this problem will have direct applications for solving a host of other practical combinatorial optimization problems <ref> [3, 37, 38, 41] </ref>. program is adapted from gabp.c and ga-test.c. The main program is shown in Figure 9.
Reference: [4] <author> J. L. Blanton and R. L. Wainwright. </author> <title> Multiple vehicle routing with time and capacity constraints using genetic algorithms. </title> <booktitle> In Forrest [18], </booktitle> <pages> pages 452-459. </pages>
Reference-contexts: The goal is the same: to minimize the number of vehicles (bins) required, while meeting all of the constraints. Blanton and Wainwright have developed special GA crossover operators called MX1 and MX2 specifically for the VRPTW <ref> [4] </ref>. The classic bin packing problem is expressed using one dimensional packages. This approach blindly generates partitions so that the sum of the one dimensional package parameters in each partition does not exceed the bin capacity. This parameter is typically stated as the package weight.
Reference: [5] <author> L. Bodin, B. Golden, A. Assad, and M. Ball. </author> <title> Routing and scheduling of vehicles and crews: The state of the art. </title> <journal> Comput. Opns. Res., </journal> <volume> 10 </volume> <pages> 62-212, </pages> <year> 1983. </year>
Reference-contexts: The fleet of vehicles service a set of customers with a known set of constraints. All customers must be assigned to vehicles such that each customer is serviced exactly once and each vehicle cannot exceed its capacity. The vehicle routing problem has been studied extensively. Bodin et al. <ref> [5] </ref> provides a comprehensive survey of VRP and several variations. The vehicle routing problem with time windows (VRPTW) adds the additional constraint to the VRP where each customer provides a time window for servicing.
Reference: [6] <author> R. Bruns. </author> <title> Direct chromosome representation and advanced genetic operators for production scheduling. </title> <note> In Forrest [18]. </note>
Reference-contexts: Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [7] <author> H. Carpenter and W. B. Dowsland. </author> <title> Practical considerations of the pallet-loading problem. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 36(6) </volume> <pages> 489-497, </pages> <year> 1985. </year>
Reference-contexts: However, some applications may allow rotation or translation of the packages. Packing efficiency may be improved if each package is rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results are presented in Baker et al. [1], Carpenter and Dowsland <ref> [7] </ref>, Coffman et al. [8], Dowsland [14] and Leung et al. [27]. When extending the problem to three dimensions, it is desirable to apply the results of two dimensional research to obtain similar efficiency.
Reference: [8] <author> E. G. Coffman, M. R. Garey, D. S. Johnson, and R. E. Tarjan. </author> <title> Performance bounds for level-oriented two-dimensional packing algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 9(4) </volume> <pages> 808-826, </pages> <month> Nov. </month> <year> 1980. </year>
Reference-contexts: Packing efficiency may be improved if each package is rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results are presented in Baker et al. [1], Carpenter and Dowsland [7], Coffman et al. <ref> [8] </ref>, Dowsland [14] and Leung et al. [27]. When extending the problem to three dimensions, it is desirable to apply the results of two dimensional research to obtain similar efficiency. Ideally, the packages would be presorted, then placed level by level, using a two dimensional method to pack each level.
Reference: [9] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A genetic algorithm for packing in three dimensions. </title> <editor> In H. Berghel, E. Deaton, G. Hedrick, D. Roach, and R. Wainwright, editors, </editor> <booktitle> Proceedings of the 1992 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 1021-1030, </pages> <address> New York, 1992. </address> <publisher> ACM Press. </publisher> <pages> 27 </pages>
Reference-contexts: Other classical problems related to bin packing include Job Scheduling, Network Routing, various other layout problems, and the vehicle routing problem (VRP) <ref> [9] </ref>. The vehicle routing problem (VRP) involves determining minimum cost vehicle routes for a fleet of vehicles originating and terminating from a central location. The fleet of vehicles service a set of customers with a known set of constraints. <p> For example, sorting by decreasing package size before applying First Fit results in packings which are no worse than 11/9 times optimal, a 28% improvement. This variation is called First Fit Decreasing. Similar improvements can be found in Next Fit Decreasing and Best Fit Decreasing <ref> [9] </ref>. Expanding the problem to two dimensions (rectangle packing) demands different techniques. The first technique uses a `bottom up left justified' packing rule, or simply `bottom-left'. <p> Unlike the purely two dimensional problem, the two dimensional packing stage must deal with a boundary on the second dimension (the length). Clearly, three dimensional packing is a very practical problem, yet proves to be a very difficult problem to solve <ref> [9] </ref>. 9 In this paper, we will concentrate on the simple example of solving the one-dimensional bin packing problem using LibGA. To apply genetic algorithms to the one dimensional packing problem, one must define the encoding of the chromosome, the evaluation function, and the recombination operator. <p> In any case, the GA has found a very good solution. Additional details about genetic algorithms for bin packing can be found in Smith [32], and in our previous work <ref> [9, 10, 11] </ref>. 10 /*============================================================================ | (c) Copyright Arthur L. Corcoran, 1993.
Reference: [10] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A heuristic for improved genetic bin packing. </title> <journal> Information Processing Letters, </journal> <month> May </month> <year> 1993. </year> <note> Submitted. </note>
Reference-contexts: In any case, the GA has found a very good solution. Additional details about genetic algorithms for bin packing can be found in Smith [32], and in our previous work <ref> [9, 10, 11] </ref>. 10 /*============================================================================ | (c) Copyright Arthur L. Corcoran, 1993.
Reference: [11] <author> A. L. Corcoran and R. L. Wainwright. LibGA: </author> <title> A user-friendly workbench for order-based genetic algorithm research. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 111-118, </pages> <address> New York, 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: This information is used with the idea of `survival of the fittest' to conduct the genetic search. As a result GAs are very successful in finding good near-optimal solutions for combinatorial optimization problems. 2 4 LibGA The LibGA software package <ref> [11] </ref> was developed primarily because of the noticeable deficiencies of existing GA packages at the time. LibGA is a collection of routines written in the C programming language. It can run on a variety of workstations and PC's. <p> In any case, the GA has found a very good solution. Additional details about genetic algorithms for bin packing can be found in Smith [32], and in our previous work <ref> [9, 10, 11] </ref>. 10 /*============================================================================ | (c) Copyright Arthur L. Corcoran, 1993.
Reference: [12] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A parallel island model genetic algorithm for the multiprocessor scheduling problem. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1994 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <address> New York, </address> <year> 1994. </year> <note> ACM Press. Submitted. </note>
Reference-contexts: For other related work see [6, 15, 16, 24, 36, 41]. The LibGA implementation for the multiprocessor scheduling problem is shown below. This is an extremely simplified version of the one the authors studied in more detail in <ref> [12] </ref>. configured with GA config (), the set of tasks is read from the data file, and the chromosome length is set to the number of tasks. The objective function in Figure 18 evaluates the total time required for the task list ordering indicated by the chromosome.
Reference: [13] <author> Y. Davidor, T. Yamada, and R. Nakano. </author> <title> The ECOlogical framework II: Improving GA performance at virtually zero cost. </title> <note> In Forrest [18]. </note>
Reference-contexts: The multiprocessor scheduling problem and its variations of other scheduling problems are economically very important problems, especially in industrial applications. 21 For the interested reader, Yamada and Nakano [42] present a GA implementation for large-scale job shop problems. Davidor et al. <ref> [13] </ref> investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [26] developed a GA to schedule distributed tasks on a bus-based system.
Reference: [14] <author> K. A. Dowsland. </author> <title> An exact algorithm for the pallet loading problem. </title> <journal> European Journal of Operational Research, </journal> <volume> 31 </volume> <pages> 78-84, </pages> <year> 1987. </year>
Reference-contexts: Packing efficiency may be improved if each package is rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results are presented in Baker et al. [1], Carpenter and Dowsland [7], Coffman et al. [8], Dowsland <ref> [14] </ref> and Leung et al. [27]. When extending the problem to three dimensions, it is desirable to apply the results of two dimensional research to obtain similar efficiency. Ideally, the packages would be presorted, then placed level by level, using a two dimensional method to pack each level.
Reference: [15] <author> F. F. Easton and N. Mansour. </author> <title> A distributed genetic algorithm for employee staffing and scheduling problems. </title> <note> In Forrest [18]. </note>
Reference-contexts: Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [16] <author> H.-L. Fang, P. Ross, and D. Corne. </author> <title> A promising genetic algorithm approach to job-shop scheduling, re-scheduling, and open-shop scheduling problems. </title> <note> In Forrest [18]. </note>
Reference-contexts: Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [17] <author> S. Floyd and R. M. Karp. </author> <title> Ffd bin packing for item sizes with uniform distributions on [0, 1/2]. </title> <journal> Algorithmica, </journal> <volume> 6(2) </volume> <pages> 222-239, </pages> <year> 1991. </year>
Reference-contexts: The three best-known approximation algorithms for bin packing are Next Fit, First Fit, and Best Fit. There are many other algorithms, however, most are variations or refinements of these basic methods and only offer modest improvements in packing efficiency. For more details, see Floyd and Karp <ref> [17] </ref>, Garey and Johnson [19] and Johnson et al. [25]. Next Fit heuristic is described as follows: beginning with a single bin, the packages are taken from the list in order, and placed in the next available position.
Reference: [18] <editor> S. Forrest, editor. </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <address> Urbana-Champaign, Illinois, July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [19] <author> M. R. Garey and D. S. Johnson. </author> <title> Approximation algorithms for bin packing problems: A survey. </title> <editor> In G. Ausiello and M. Lucertini, editors, </editor> <booktitle> Analysis and Design of Algorithms in Combinatorial Optimization, </booktitle> <pages> pages 147-172. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: There are many other algorithms, however, most are variations or refinements of these basic methods and only offer modest improvements in packing efficiency. For more details, see Floyd and Karp [17], Garey and Johnson <ref> [19] </ref> and Johnson et al. [25]. Next Fit heuristic is described as follows: beginning with a single bin, the packages are taken from the list in order, and placed in the next available position.
Reference: [20] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [20, 21] </ref> or a `steady-state' [39] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population.
Reference: [21] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, Michigan, </address> <year> 1975. </year>
Reference-contexts: Conclusions are presented in Section 6. 2 Genetic Algorithms A genetic algorithm (GA) is an adaptive search technique based on the principles and mechanisms of natural selection and `survival of the fittest' from natural evolution. GAs grew out of Holland's <ref> [21] </ref> study of adaptation in artificial and natural systems. By simulating natural evolution in this way, a GA can effectively search the problem domain and easily solve complex problems. Furthermore, by emulating biological selection and reproduction techniques, a GA can perform the search in a general, representation-independent manner. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [20, 21] </ref> or a `steady-state' [39] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population.
Reference: [22] <author> E. Horowitz and S. Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1984. </year>
Reference-contexts: The tasks for any job J i are to be carried out in the order 1, 2, 3, ..., etc., where each task j cannot begin until task j 1 (j &gt; 1) has been completed <ref> [22] </ref>. In the job shop scheduling problem, the processor capacity is not considered. It is assumed every task in every job uses the entire capacity of a given processor.
Reference: [23] <author> T. C. Hu. </author> <title> Combinatorial Algorithms. </title> <address> Addision-Wesley, </address> <year> 1982. </year>
Reference-contexts: However, there are worst case examples which are far from optimal. Some algorithms like the Modified First Fit Decreasing algorithm have tried to improve absolute bounds by special treatment of these worst cases. See Hu <ref> [23] </ref> for more details on bin packing. The bin packing problem is applicable in a variety of situations. In computer systems it is used in allocation problems, such as allocating core memory to programs, or space on a disk or tape.
Reference: [24] <author> P. Husbands and F. Mill. </author> <title> Simulated co-evolution as the mechanism for emergent planning and scheduling. </title> <note> In Belew and Booker [2]. </note>
Reference-contexts: Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [25] <author> D. S. Johnson, A. Demers, J. D. Ullman, M. R. Garey, and R. L. Graham. </author> <title> Worst-case performance bounds for simple one-dimensional packing algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 3(4) </volume> <pages> 299-325, </pages> <month> Dec. </month> <year> 1974. </year>
Reference-contexts: There are many other algorithms, however, most are variations or refinements of these basic methods and only offer modest improvements in packing efficiency. For more details, see Floyd and Karp [17], Garey and Johnson [19] and Johnson et al. <ref> [25] </ref>. Next Fit heuristic is described as follows: beginning with a single bin, the packages are taken from the list in order, and placed in the next available position.
Reference: [26] <author> M. D. Kidwell. </author> <title> Using genetic algorithms to schedule distributed tasks on a bus-based system. </title> <note> In Forrest [18]. </note>
Reference-contexts: Davidor et al. [13] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell <ref> [26] </ref> developed a GA to schedule distributed tasks on a bus-based system. Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two.
Reference: [27] <author> J. Y. Leung, T. W. Tam, C. S. Wong, G. H. Young, and F. Y. Chin. </author> <title> Packing squares into a square. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 271-275, </pages> <year> 1990. </year>
Reference-contexts: Packing efficiency may be improved if each package is rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results are presented in Baker et al. [1], Carpenter and Dowsland [7], Coffman et al. [8], Dowsland [14] and Leung et al. <ref> [27] </ref>. When extending the problem to three dimensions, it is desirable to apply the results of two dimensional research to obtain similar efficiency. Ideally, the packages would be presorted, then placed level by level, using a two dimensional method to pack each level.
Reference: [28] <author> K. Li and K.-H. Cheng. </author> <title> Job scheduling in a partitionable mesh using a two-dimensional buddy system partitioning scheme. </title> <journal> IEEE Transaactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 413-422, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Davidor et al. [13] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [26] developed a GA to schedule distributed tasks on a bus-based system. Li and Cheng <ref> [28] </ref> developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see [6, 15, 16, 24, 36, 41].
Reference: [29] <editor> R. Manner and B. Manderick, editors. </editor> <title> Parallel Problem Solving from Nature, 2. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference: [30] <author> C. H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1982. </year>
Reference-contexts: As a result, researchers have focused on approximation techniques which provide efficient, near optimal solutions. Some of these techniques, which are applicable to bin packing and related problems, include heuristic techniques, simulated annealing, neural networks, tabu search and genetic algorithms. Papadimitriou and Steiglitz <ref> [30] </ref> and Parker and Rardin [31] present several classical techniques for solving the bin packing problem. In the classic bin packing problem, a finite collection of packages is packed into a set of bins. The packages and bins are characterized by their weights and capacities, respectively.
Reference: [31] <author> R. G. Parker and R. L. Rardin. </author> <title> Discrete Optimization. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1988. </year> <month> 28 </month>
Reference-contexts: As a result, researchers have focused on approximation techniques which provide efficient, near optimal solutions. Some of these techniques, which are applicable to bin packing and related problems, include heuristic techniques, simulated annealing, neural networks, tabu search and genetic algorithms. Papadimitriou and Steiglitz [30] and Parker and Rardin <ref> [31] </ref> present several classical techniques for solving the bin packing problem. In the classic bin packing problem, a finite collection of packages is packed into a set of bins. The packages and bins are characterized by their weights and capacities, respectively.
Reference: [32] <author> D. Smith. </author> <title> Bin packing with adaptive search. </title> <editor> In J. J. Grefenstette, editor, </editor> <booktitle> Proceedings of the First International Conference on Genetic Algorithms and Their Applications, </booktitle> <pages> pages 202-207, </pages> <address> Hillsdale, New Jersey, 1985. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: In any case, the GA has found a very good solution. Additional details about genetic algorithms for bin packing can be found in Smith <ref> [32] </ref>, and in our previous work [9, 10, 11]. 10 /*============================================================================ | (c) Copyright Arthur L. Corcoran, 1993.
Reference: [33] <author> M. M. Solomon. </author> <title> Algorithms for the vehicle routing and scheduling problems with time window constraints. </title> <journal> Operations Research, </journal> <volume> 35(2) </volume> <pages> 254-265, </pages> <year> 1987. </year>
Reference-contexts: Time windows also arise in most retail distribution systems. This is an extremely practical problem; efficient routing and scheduling can save industry and government millions of dollars each year. Solomon <ref> [33, 34] </ref> provides an excellent survey of the vehicle routing problem with time windows. The VRPTW is a variation of the bin packing problem, where each vehicle corresponds to a `bin' and each customer to be serviced corresponds to a `package'.
Reference: [34] <author> M. M. Solomon and J. Desrosiers. </author> <title> Time window constrained routing and scheduling problems: A survey. </title> <journal> Transportation Science, </journal> <volume> 22(1) </volume> <pages> 1-11, </pages> <year> 1988. </year>
Reference-contexts: Time windows also arise in most retail distribution systems. This is an extremely practical problem; efficient routing and scheduling can save industry and government millions of dollars each year. Solomon <ref> [33, 34] </ref> provides an excellent survey of the vehicle routing problem with time windows. The VRPTW is a variation of the bin packing problem, where each vehicle corresponds to a `bin' and each customer to be serviced corresponds to a `package'.
Reference: [35] <author> T. Starkweather, S. McDaniel, K. Mathias, D. Whitley, and C. Whitley. </author> <title> A comparison of genetic sequencing operators. </title> <booktitle> In Belew and Booker [2], </booktitle> <pages> pages 69-76. </pages>
Reference-contexts: Note, however, these crossover operators do not work for order-based problems, since order is not preserved. The other crossover operators preserve order information. Order1, order2, position, cycle, and PMX operators are described in Starkweather et al. <ref> [35] </ref>. The asexual operator is a simple swap of two randomly selected genes, which also is suitable for order-based problems. LibGA currently offers the following mutation operators: simple-invert, simple-random, and swap. Simple-invert and simple-random are both used with bit string representations. They both randomly select a gene for mutation.
Reference: [36] <author> H. Tamaki and Y. Nishikawa. </author> <title> A paralleled genetic algorithm based on a neighborhood model and its application to the jobshop scheduling. </title> <note> In Manner and Manderick [29]. </note>
Reference-contexts: Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [37] <author> S. R. Thangiah. </author> <title> GIDEON: A Genetic Algorithm System for Vehicle Routing with Time Windows. </title> <type> PhD thesis, </type> <institution> North Dakota State University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Other combinatorial optimization problems that fall into this category include the bin packing problem, job scheduling problems, stock cutting, vehicle routing and transportation scheduling problems, etc. Developing efficient genetic algorithms to solve this problem will have direct applications for solving a host of other practical combinatorial optimization problems <ref> [3, 37, 38, 41] </ref>. program is adapted from gabp.c and ga-test.c. The main program is shown in Figure 9.
Reference: [38] <author> S. R. Thangiah, K. E. Nygard, and P. L. Juell. </author> <title> Gideon: A genetic algorithm system for vehicle routing with time windows. </title> <booktitle> In Proceedings of the Seventh Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 322-325, </pages> <address> Miami, Florida, </address> <year> 1991. </year>
Reference-contexts: Other combinatorial optimization problems that fall into this category include the bin packing problem, job scheduling problems, stock cutting, vehicle routing and transportation scheduling problems, etc. Developing efficient genetic algorithms to solve this problem will have direct applications for solving a host of other practical combinatorial optimization problems <ref> [3, 37, 38, 41] </ref>. program is adapted from gabp.c and ga-test.c. The main program is shown in Figure 9.
Reference: [39] <author> D. Whitley and J. Kauth. </author> <title> GENITOR: A different genetic algorithm. </title> <booktitle> In Proceedings of the Rocky Mountain Conference on Artificial Intelligence, </booktitle> <pages> pages 118-130, </pages> <address> Denver, Colorado, </address> <year> 1988. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' [20, 21] or a `steady-state' <ref> [39] </ref> genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population.
Reference: [40] <author> D. Whitley and T. Starkweather. </author> <title> GENITOR II: A distributed genetic algorithm. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-214, </pages> <year> 1990. </year>
Reference-contexts: Fortunately, there are several general purpose crossover functions which meet the requirement. The possible crossover functions that can be used for order based problems include Order1, Order2, Cycle, Position, and Partially Mapped Crossover (PMX). These are described by Whitley and Starkweather <ref> [40] </ref>. In addition, we have developed an asexual crossover operator which simply exchanges two packages in the list. This is precisely what is done by swap mutation. program is adapted from ga-test.c. Figure 5 shows the main program.
Reference: [41] <author> D. Whitley, T. Starkweather, and D. Fuquat. </author> <title> Scheduling problems and traveling salesman: The genetic edge recombination operator. </title> <editor> In J. D. Schaffer, editor, </editor> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <address> Arlington, Virginia, 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Other combinatorial optimization problems that fall into this category include the bin packing problem, job scheduling problems, stock cutting, vehicle routing and transportation scheduling problems, etc. Developing efficient genetic algorithms to solve this problem will have direct applications for solving a host of other practical combinatorial optimization problems <ref> [3, 37, 38, 41] </ref>. program is adapted from gabp.c and ga-test.c. The main program is shown in Figure 9. <p> Li and Cheng [28] developed a job shop scheduling algorithm to partition a mesh connected system where jobs require meshes an the system itself is a square mesh of size a power of two. For other related work see <ref> [6, 15, 16, 24, 36, 41] </ref>. The LibGA implementation for the multiprocessor scheduling problem is shown below.
Reference: [42] <author> T. Yamada and R. Nakano. </author> <title> A genetic algorithm applicable to large-scale job-shop problems. In Manner and Manderick [29]. </title> <type> 29 </type>
Reference-contexts: The multiprocessor scheduling problem and its variations of other scheduling problems are economically very important problems, especially in industrial applications. 21 For the interested reader, Yamada and Nakano <ref> [42] </ref> present a GA implementation for large-scale job shop problems. Davidor et al. [13] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [26] developed a GA to schedule distributed tasks on a bus-based system.
References-found: 42

