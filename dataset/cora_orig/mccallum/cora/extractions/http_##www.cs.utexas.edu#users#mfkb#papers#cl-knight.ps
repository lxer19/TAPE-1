URL: http://www.cs.utexas.edu/users/mfkb/papers/cl-knight.ps
Refering-URL: http://www.cs.utexas.edu/users/porter/
Root-URL: 
Title: Developing and Empirically Evaluating Robust Explanation Generators: The KNIGHT Experiments  
Author: James C. Lester Bruce W. Porter 
Keyword: Explanation, natural language generation, discourse planning, large-scale knowl edge bases.  
Note: Support for this research is provided by a grant from the National Science Foundation (IRI-9120310), a contract from the Air Force Office of Scientific Research (F49620-93-1-0239), and donations from the Digital Equipment Corporation. This research was conducted at the  
Address: Raleigh, NC 27695-8206 Austin, Texas 78712-1188  
Affiliation: Department of Computer Science Department of Computer Sciences North Carolina State University University of Texas at Austin  University of Texas at Austin.  
Email: lester@adm.csc.ncsu.edu porter@cs.utexas.edu  
Phone: (919) 515-7135 (512) 471-9578  
Date: December 1, 1995  
Abstract: To explain complex phenomena, an explanation system must be able to select information from a formal representation of domain knowledge, organize the selected information into multi-sentential discourse plans, and realize the discourse plans in text. Although recent years have witnessed significant progress in the development of sophisticated computational mechanisms for explanation, empirical results have been limited. This paper reports on a seven year effort to empirically study explanation generation from semantically rich, large-scale knowledge bases. In particular, it describes Knight, a robust explanation system that constructs multi-sentential and multi-paragraph explanations from the Biology Knowledge Base, a large-scale knowledge base in the domain of botanical anatomy, physiology, and development. We introduce the Two Panel evaluation methodology and describe how Knight's performance was assessed with this methodology in the most extensive empirical evaluation conducted on an explanation system. In this evaluation, Knight scored within "half a grade" of domain experts, and its performance exceeded that of one of the domain experts. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. E. H. Acker. </author> <title> Access Methods for Large, Multifunctional Knowledge Bases. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, Austin, Texas, </institution> <year> 1992. </year>
Reference-contexts: largest knowledge bases in existence, it is encoded in the Km frame-based knowledge representation language. 1 Km provides the basic functionalities of other frame-based representation languages and is accompanied by a graphical 1 A detailed description of the semantics of the representation language may be found in Ch. 2 of <ref> [1] </ref>. 5 user interface, KnEd, for entering, viewing, and editing frame-based structures [14]. The backbone of the Biology Knowledge Base is its taxonomy, which is a large hierarchical structure of biological objects and biological processes. <p> Knight's views are very similar to McCoy's and Suthers in that they define the relations and properties of a concept that are relevant when considering a concept from a viewpoint belonging to that view type <ref> [3, 1] </ref>. They also provide four types of knowledge-base access robustness, as discussed in Section 3. Discourse Generation. Two principle mechanisms have been developed for generating discourse: schemata and top-down planners. 19 McKeown's pioneering work on schemata marks the beginning of the "modern era" of discourse generation [41].
Reference: [2] <author> L. E. H. Acker and B. W. Porter. </author> <title> Extracting viewpoints from knowledge bases. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 547-552, </pages> <year> 1994. </year>
Reference-contexts: By using these techniques in tandem, we have developed a KB accessing system that has constructed several thousand views without failing. Moreover, the view types on which the accessors are based performed well in a preliminary empirical study <ref> [2] </ref>, and evaluations of the KB accessors' ability to construct coherent views, as measured by domain experts' ratings of Knight's explanations (Section 8), are encouraging. 4 A Programming Language for Discourse Knowledge Since the time of Aristotle, a central tenet of rhetoric has been that a rich structure underlies text.
Reference: [3] <author> L. H. Acker, J. C. Lester, A. F. Souther, and B. W. Porter. </author> <title> Generating coherent explanations to answer students' questions. </title> <editor> In H. Burns, J. Parlett, and C. Redfield, editors, </editor> <booktitle> Intelligent Tutoring Systems: Evolutions in Design, </booktitle> <pages> pages 151-176. </pages> <publisher> Lawrence Earlbaum, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1991. </year>
Reference-contexts: Knight's views are very similar to McCoy's and Suthers in that they define the relations and properties of a concept that are relevant when considering a concept from a viewpoint belonging to that view type <ref> [3, 1] </ref>. They also provide four types of knowledge-base access robustness, as discussed in Section 3. Discourse Generation. Two principle mechanisms have been developed for generating discourse: schemata and top-down planners. 19 McKeown's pioneering work on schemata marks the beginning of the "modern era" of discourse generation [41].
Reference: [4] <author> D. E. Appelt. </author> <title> Planning english referring expressions. </title> <journal> Artificial Intelligence, </journal> <volume> 26 </volume> <pages> 1-33, </pages> <year> 1985. </year>
Reference-contexts: both the humans and the system may 20 Unlike McKeown's and Paris' schemata|as well as Knight's EDPs|Romper's schemata do not impose an order on the propositions. 21 The planning approach, which has dominated the field for the past few years can be traced to Appelt's work on planning referring expressions <ref> [4] </ref>, which itself builds on earlier work on reasoning about speech acts in a planning paradigm [9]. 39 reveal which characteristics of the highly rated texts are desirable. These in turn can be used to improve the EDPs.
Reference: [5] <author> D. G. Bobrow and T. Winograd. </author> <title> An overview of KRL, a knowledge representation language. </title> <journal> Cognitive Science, </journal> <volume> 1 </volume> <pages> 3-46, </pages> <year> 1977. </year>
Reference-contexts: Individual Writers Pauline Edge Example Ana Streak Knight Generator Formality Informal Informal Formal Formal Formal Formal "Judges" None Humans Humans Corpus Corpus Humans Large-Scale KB? No No No No No Yes System vs. Human No No No* No No Yes Table 8: Evaluation Methodologies 37 the Krl <ref> [5] </ref> and Kodiak [66] systems. More recent work in this area has demonstrated how views can be "reified," i.e., encoded as first-class objects in their representations [57, 11, 28].
Reference: [6] <author> B. G. Buchanan and E. H. Shortliffe, </author> <title> editors. Rule-Based Expert Systems: The MYCIN Experiments of the Stanford Heuristic Programming Project. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: First, it required us to grapple with difficult representational problems. Unlike a domain such as introductory geometry, biology cannot be characterized by a small number of axioms. Second, biology is not a "single-task" subject. Unlike the knowledge bases of conventional expert systems, e.g., Mycin <ref> [6] </ref>, the Biology Knowledge Base is not committed to any particular task or problem-solving method. Rather, it encodes general knowledge that can support diverse tasks and methods such as tutoring students, performing diagnosis, and organizing reference materials.
Reference: [7] <author> C. B. Callaway and J. C. Lester. </author> <title> Robust natural language generation from large-scale knowledge bases. </title> <booktitle> In Proceedings of the Fourth Bar-Ilan Symposium on Foundations of Artificial Intelligence, </booktitle> <pages> pages 96-105, </pages> <year> 1995. </year>
Reference-contexts: The explanation planner considers the desired length of explanations and the relative importance of sub-topics as it constructs explanation plans encoding content and organization. * Functional Realization: Knight's functional realization system <ref> [7] </ref> is built on top of a unification based surface generator with a large systemic grammar [15, 16]. To assess Knight's performance, we developed the Two-Panel Evaluation Methodology for natural language generation and employed it in the most extensive and rigorous empirical evaluation ever conducted on an explanation system. <p> To construct functional descriptions from views extracted from a knowledge base, Knight employs a functional realization system <ref> [7] </ref>. Given a view, the functional realizer uses its knowledge of case mappings, syntax, and lexical information to construct a functional description, which it then passes to the Fuf surface generator. <p> The resulting explanation plan is shown in Figure 14. Note that the Subevent Description Iteration, together with the Subevent Participants nested con 13 More comprehensive descriptions of Knight's realization component may be found in [29] and <ref> [7] </ref>. 14 In this example, Knight is given a High verbosity specification. 27 tent specifications, enabled Knight to construct two Participants views in the explanation plan: one for each of the subevents in embryo sac formation (Figure 13).
Reference: [8] <author> A. </author> <title> Cawsey. Explanation and Interaction: The Computer Generation of Explanatory Dialogues. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Research on text planning [42, 52, 39, 24, 38] has developed techniques for determining the content and organization of many genres, and explanation generation <ref> [44, 8, 47] </ref> in particular has been the subject of intense investigation. In addition to exploring a panorama of application domains, the explanation community has begun to assemble these myriad designs into a coherent framework. <p> Despite this success, empirical results in explanation generation are limited. Although techniques for developing and evaluating robust explanation generation should yield results that are more conclusive than those produced by prototype, "proof-of-concept" systems, with only a few notable exceptions <ref> [27, 23, 8, 46, 54] </ref>, most work has adopted a research methodology in which a proof-of-concept system is constructed and its operation is analyzed on a few examples. <p> Third, we developed a novel evaluation methodology for gauging the effectiveness of explanation systems and employed this methodology to evaluate Knight. This paper describes the lessons learned during the course of the "Knight experiments." In the spirit of Edge <ref> [8] </ref> and Pauline [16], which synthesize work in interactive explanation systems and generational pragmatics, respectively, Knight addresses a broad range of issues, all in the context of semantically rich, large-scale knowledge bases: * Robust Knowledge-Base Access: Knight exploits a library of robust knowledge-base access 1 methods that insulate discourse planners from <p> We discuss each of these in turn. Evaluation Methodologies. With regard to evaluation, Knight is perhaps most closely related to five NLG projects that have been empirically evaluated: Pauline [23], Edge <ref> [8] </ref>, the Example Generator 17 [46], Ana [27], and Streak [54]. By varying pragmatic information such as tone, Hovy enabled Pauline to generate many different paragraphs on the same topic. <p> In a second landmark evaluation, Cawsey undertook a study in which subjects were allowed to interact with her explanation generation system, Edge <ref> [8] </ref>. Subjects posed questions to Edge about the operation of four circuits. Cawsey analyzed the system's behavior as the dialogs progressed, interviewed subjects, and used the results to revise the system. <p> An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> A related approach has been taken by Cawsey in the Edge system <ref> [8] </ref>. Because Edge has facilities for managing conversations, users may interrupt the system to ask questions, and Edge can either answer the question immediately or postpone its response.
Reference: [9] <author> P. R. Cohen and C. R. Perrault. </author> <title> Elements of a plan-based theory of speech acts. </title> <journal> Cognitive Science, </journal> <volume> 3 </volume> <pages> 177-212, </pages> <year> 1979. </year>
Reference-contexts: EDPs|Romper's schemata do not impose an order on the propositions. 21 The planning approach, which has dominated the field for the past few years can be traced to Appelt's work on planning referring expressions [4], which itself builds on earlier work on reasoning about speech acts in a planning paradigm <ref> [9] </ref>. 39 reveal which characteristics of the highly rated texts are desirable. These in turn can be used to improve the EDPs. On the empirical side, a particularly intriguing kind of experiment is an ablation study.
Reference: [10] <author> M. Cornell, D. Suthers, and B. Woolf. </author> <title> Using "live information" in a multimedia framework. </title> <editor> In M. T. Maybury, editor, </editor> <title> Intelligent Multimedia Interfaces, chapter 13. </title> <publisher> AAAI Press, </publisher> <year> 1993. </year>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods [12] should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation <ref> [17, 36, 65, 51, 10] </ref>. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [11] <author> J. Crawford. </author> <title> Access-limited logic|a language for knowledge representation. </title> <institution> Technical Report AI Laboratory AI90-141, University of Texas at Austin, Austin, Texas, </institution> <year> 1990. </year>
Reference-contexts: Human No No No* No No Yes Table 8: Evaluation Methodologies 37 the Krl [5] and Kodiak [66] systems. More recent work in this area has demonstrated how views can be "reified," i.e., encoded as first-class objects in their representations <ref> [57, 11, 28] </ref>. Related research in intelligent tutoring systems explored how different views could be used to model different aspects of the domain and, hence, to answer different kinds of questions [58]. Work in automated knowledge acquisition systems has shown how to use views to constrain search [50].
Reference: [12] <author> R. Dale. </author> <title> Generating Referring Expressions. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods <ref> [12] </ref> should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation [17, 36, 65, 51, 10]. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [13] <author> R. de Beaugrande. </author> <title> Text Discourse and Process. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1980. </year>
Reference-contexts: In addition, it can help build explanations that are coherent. Studies of coherence have focused on one aspect of coherence, cohesion, which is determined by the overall organization and realization of the explanation <ref> [13, 18, 19, 20, 26] </ref>. However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan [19] term this aspect of coherence semantic unity.
Reference: [14] <author> E. Eilerts. KnEd: </author> <title> An interface for a frame-based knowledge representation system. </title> <type> Master's thesis, </type> <institution> The University of Texas at Austin, Austin, Texas, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: knowledge representation language. 1 Km provides the basic functionalities of other frame-based representation languages and is accompanied by a graphical 1 A detailed description of the semantics of the representation language may be found in Ch. 2 of [1]. 5 user interface, KnEd, for entering, viewing, and editing frame-based structures <ref> [14] </ref>. The backbone of the Biology Knowledge Base is its taxonomy, which is a large hierarchical structure of biological objects and biological processes. In addition to the objects and processes, the taxonomy also includes the hierarchy of relations that may appear on concepts.
Reference: [15] <author> M. Elhadad. FUF: </author> <title> The universal unifier user manual version 5.0. </title> <type> Technical Report CUCS-038-91, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1991. </year>
Reference-contexts: The explanation planner considers the desired length of explanations and the relative importance of sub-topics as it constructs explanation plans encoding content and organization. * Functional Realization: Knight's functional realization system [7] is built on top of a unification based surface generator with a large systemic grammar <ref> [15, 16] </ref>. To assess Knight's performance, we developed the Two-Panel Evaluation Methodology for natural language generation and employed it in the most extensive and rigorous empirical evaluation ever conducted on an explanation system. In this study, Knight constructed explanations on randomly chosen topics from the Biology Knowledge Base. <p> Our work focuses on content determination and organization and deem-phasizes issues in realization. However, to more cleanly evaluate the explanation planning work, we have developed a robust realization system that is built on FUF <ref> [15, 16] </ref>, a unification-based implementation of a large systemic grammar. 2.1 Evaluation Criteria and Desiderata Evaluating the performance of explanation systems is a critical and non-trivial problem. <p> The feature set for the circum clause indicates the wide range of possibilities for placement of the clause as well as for introducing additional phrasal substructures into the purpose clause. Knight employs the Fuf surface realization system <ref> [15, 16] </ref> to translate functional descriptions into text. Developed by Elhadad and his colleagues at Columbia, Fuf is accompanied by an extensive, portable English grammar, which is "the result of five years of intensive experimentation in grammar writing" and is currently the largest "generation grammar" in existence.
Reference: [16] <author> M. Elhadad. </author> <title> Using Argumentation to Control Lexical Choice: A Functional Unification Implementation. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1992. </year>
Reference-contexts: Third, we developed a novel evaluation methodology for gauging the effectiveness of explanation systems and employed this methodology to evaluate Knight. This paper describes the lessons learned during the course of the "Knight experiments." In the spirit of Edge [8] and Pauline <ref> [16] </ref>, which synthesize work in interactive explanation systems and generational pragmatics, respectively, Knight addresses a broad range of issues, all in the context of semantically rich, large-scale knowledge bases: * Robust Knowledge-Base Access: Knight exploits a library of robust knowledge-base access 1 methods that insulate discourse planners from the idiosyncracies and <p> The explanation planner considers the desired length of explanations and the relative importance of sub-topics as it constructs explanation plans encoding content and organization. * Functional Realization: Knight's functional realization system [7] is built on top of a unification based surface generator with a large systemic grammar <ref> [15, 16] </ref>. To assess Knight's performance, we developed the Two-Panel Evaluation Methodology for natural language generation and employed it in the most extensive and rigorous empirical evaluation ever conducted on an explanation system. In this study, Knight constructed explanations on randomly chosen topics from the Biology Knowledge Base. <p> Our work focuses on content determination and organization and deem-phasizes issues in realization. However, to more cleanly evaluate the explanation planning work, we have developed a robust realization system that is built on FUF <ref> [15, 16] </ref>, a unification-based implementation of a large systemic grammar. 2.1 Evaluation Criteria and Desiderata Evaluating the performance of explanation systems is a critical and non-trivial problem. <p> The feature set for the circum clause indicates the wide range of possibilities for placement of the clause as well as for introducing additional phrasal substructures into the purpose clause. Knight employs the Fuf surface realization system <ref> [15, 16] </ref> to translate functional descriptions into text. Developed by Elhadad and his colleagues at Columbia, Fuf is accompanied by an extensive, portable English grammar, which is "the result of five years of intensive experimentation in grammar writing" and is currently the largest "generation grammar" in existence.
Reference: [17] <author> S. K. Feiner and K. R. McKeown. </author> <title> Coordinating text and graphics in explanation generation. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 442-449, </pages> <address> Boston, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods [12] should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation <ref> [17, 36, 65, 51, 10] </ref>. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [18] <author> J. E. Grimes. </author> <title> The Thread of Discourse. </title> <publisher> Mouton, </publisher> <address> The Hague, </address> <year> 1975. </year> <month> 42 </month>
Reference-contexts: In addition, it can help build explanations that are coherent. Studies of coherence have focused on one aspect of coherence, cohesion, which is determined by the overall organization and realization of the explanation <ref> [13, 18, 19, 20, 26] </ref>. However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan [19] term this aspect of coherence semantic unity.
Reference: [19] <author> M. A. K. Halliday and R. Hassan. </author> <title> Cohesion in English. </title> <publisher> Longman, </publisher> <address> London, </address> <year> 1976. </year>
Reference-contexts: In addition, it can help build explanations that are coherent. Studies of coherence have focused on one aspect of coherence, cohesion, which is determined by the overall organization and realization of the explanation <ref> [13, 18, 19, 20, 26] </ref>. However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan [19] term this aspect of coherence semantic unity. <p> However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan <ref> [19] </ref> term this aspect of coherence semantic unity. There are at least two approaches to achieving semantic unity: either "packets" of propositions must be directly represented in the domain knowledge, or a KB accessing system must be able to extract them at runtime.
Reference: [20] <author> J. R. Hobbs. </author> <title> On the coherence and structure of discourse. </title> <type> Technical Report CSLI-85-37, </type> <institution> Center for the Study of Language and Information, Stanford University, Stanford, California, </institution> <month> October </month> <year> 1985. </year>
Reference-contexts: In addition, it can help build explanations that are coherent. Studies of coherence have focused on one aspect of coherence, cohesion, which is determined by the overall organization and realization of the explanation <ref> [13, 18, 19, 20, 26] </ref>. However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan [19] term this aspect of coherence semantic unity.
Reference: [21] <author> E. H. Hovy. </author> <title> Approaches to the planning of coherent text. </title> <booktitle> In Fourth International Workshop on Text Generation, </booktitle> <address> Catalina Island, California, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: An alternative to schemata is the top-down planning approach [49, 62, 8, 37, 24, 48, 47]. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. Hovy's Structurer <ref> [22, 21, 24] </ref> is a hierarchical planner whose operators instantiate relations from RST, and Hovy and McCoy have developed methods for increasing the organizational flexibility of the Structurer [25]. The Reactive Planner also uses RST-like operators.
Reference: [22] <author> E. H. Hovy. </author> <title> Planning coherent multisentential text. </title> <booktitle> In Proceedings of the 26th Annual Meeting, </booktitle> <pages> pages 163-169, </pages> <address> Buffalo, </address> <year> 1988. </year> <institution> Association for Computational Linguistics. </institution>
Reference-contexts: An alternative to schemata is the top-down planning approach [49, 62, 8, 37, 24, 48, 47]. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. Hovy's Structurer <ref> [22, 21, 24] </ref> is a hierarchical planner whose operators instantiate relations from RST, and Hovy and McCoy have developed methods for increasing the organizational flexibility of the Structurer [25]. The Reactive Planner also uses RST-like operators.
Reference: [23] <author> E. H. Hovy. </author> <title> Pragmatics and natural language generation. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 153-197, </pages> <year> 1990. </year>
Reference-contexts: Despite this success, empirical results in explanation generation are limited. Although techniques for developing and evaluating robust explanation generation should yield results that are more conclusive than those produced by prototype, "proof-of-concept" systems, with only a few notable exceptions <ref> [27, 23, 8, 46, 54] </ref>, most work has adopted a research methodology in which a proof-of-concept system is constructed and its operation is analyzed on a few examples. <p> We discuss each of these in turn. Evaluation Methodologies. With regard to evaluation, Knight is perhaps most closely related to five NLG projects that have been empirically evaluated: Pauline <ref> [23] </ref>, Edge [8], the Example Generator 17 [46], Ana [27], and Streak [54]. By varying pragmatic information such as tone, Hovy enabled Pauline to generate many different paragraphs on the same topic.
Reference: [24] <author> E. H. Hovy. </author> <title> Automated discourse generation using discourse structure relations. </title> <journal> Artificial Intelligence, </journal> <volume> 63 </volume> <pages> 341-385, </pages> <year> 1993. </year>
Reference-contexts: In an effort to computationalize this critical ability, research in natural language generation has addressed a broad range of issues in automatically constructing text from formal representations of domain knowledge. Research on text planning <ref> [42, 52, 39, 24, 38] </ref> has developed techniques for determining the content and organization of many genres, and explanation generation [44, 8, 47] in particular has been the subject of intense investigation. <p> An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> An alternative to schemata is the top-down planning approach [49, 62, 8, 37, 24, 48, 47]. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. Hovy's Structurer <ref> [22, 21, 24] </ref> is a hierarchical planner whose operators instantiate relations from RST, and Hovy and McCoy have developed methods for increasing the organizational flexibility of the Structurer [25]. The Reactive Planner also uses RST-like operators.
Reference: [25] <author> E. H. Hovy and K. F. McCoy. </author> <title> Focusing your RST: A step toward generating coherent multisentential text. </title> <booktitle> In Proceedings of the Eleventh Cognitive Science Society Conference, </booktitle> <pages> pages 667-674, </pages> <address> Ann Arbor, Michigan, </address> <year> 1989. </year>
Reference-contexts: Hovy's Structurer [22, 21, 24] is a hierarchical planner whose operators instantiate relations from RST, and Hovy and McCoy have developed methods for increasing the organizational flexibility of the Structurer <ref> [25] </ref>. The Reactive Planner also uses RST-like operators. However, unlike all of the preceding research|and unlike Knight as well|it offers sophisticated mechanisms for generating explanations in interactive contexts [49, 48, 47].
Reference: [26] <author> A. K. Joshi and S. Weinstein. </author> <title> Control of inference: The role of some aspects of discourse structure| centering. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 385-387, </pages> <address> Cambridge, England, </address> <year> 1981. </year>
Reference-contexts: In addition, it can help build explanations that are coherent. Studies of coherence have focused on one aspect of coherence, cohesion, which is determined by the overall organization and realization of the explanation <ref> [13, 18, 19, 20, 26] </ref>. However, an equally important question is, "To insure coherence, how should the content of individual portions of an explanation be selected?" Halliday and Hassan [19] term this aspect of coherence semantic unity.
Reference: [27] <author> K. Kukich. </author> <title> Knowledge-Based Report Generation: A Knowledge Engineering Approach to Natural Language Report Generation. </title> <type> PhD thesis, </type> <institution> University of Pittsburgh, </institution> <year> 1983. </year>
Reference-contexts: Despite this success, empirical results in explanation generation are limited. Although techniques for developing and evaluating robust explanation generation should yield results that are more conclusive than those produced by prototype, "proof-of-concept" systems, with only a few notable exceptions <ref> [27, 23, 8, 46, 54] </ref>, most work has adopted a research methodology in which a proof-of-concept system is constructed and its operation is analyzed on a few examples. <p> We discuss each of these in turn. Evaluation Methodologies. With regard to evaluation, Knight is perhaps most closely related to five NLG projects that have been empirically evaluated: Pauline [23], Edge [8], the Example Generator 17 [46], Ana <ref> [27] </ref>, and Streak [54]. By varying pragmatic information such as tone, Hovy enabled Pauline to generate many different paragraphs on the same topic. <p> Although Edge does not include a realization system (other than simple templates) and it was not subjected to a tightly controlled, formal evaluation, it was sufficiently robust to be used interactively by eight subjects. The Example Generator [46], Ana <ref> [27] </ref>, and Streak [54] were each subjected to formal (quantitative) evaluations.
Reference: [28] <author> D. B. Lenat and R. V. Guha. </author> <title> Building Large Knowledge Based Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Human No No No* No No Yes Table 8: Evaluation Methodologies 37 the Krl [5] and Kodiak [66] systems. More recent work in this area has demonstrated how views can be "reified," i.e., encoded as first-class objects in their representations <ref> [57, 11, 28] </ref>. Related research in intelligent tutoring systems explored how different views could be used to model different aspects of the domain and, hence, to answer different kinds of questions [58]. Work in automated knowledge acquisition systems has shown how to use views to constrain search [50].
Reference: [29] <author> J. Lester. </author> <title> Generating Natural Language Explanations from Large-Scale Knowledge Bases. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, Austin, Texas, </institution> <year> 1994. </year>
Reference-contexts: First, our domain experts (one employed full-time) constructed the Biology Knowledge Base [53], a very large structure representing more than 180,000 facts about botanical anatomy, physiology, and development. Second, we designed, implemented, and empirically evaluated Knight <ref> [29] </ref>, a robust explanation system that extracts information from the Biology Knowledge Base, organizes it, and realizes it in multi-sentential and multi-paragraph expository explanations of complex biological phenomena. Third, we developed a novel evaluation methodology for gauging the effectiveness of explanation systems and employed this methodology to evaluate Knight. <p> These include procedures for extracting particular aspects of views previously constructed by the system. For example, the Collect Actors Accessor extracts the objects that serve as participants in a Participants view of process. For a more comprehensive description of the accessors, see <ref> [29] </ref>. 8 argument to the Participants accessor|the external agent can request a view of the process from the perspective of the reference process. <p> In general, a node of a particular type in an EDP is used by the explanation planner to construct a corresponding node in an explanation plan. We discuss the salient aspects of each type of node below. 3 3 Representational details of EDPs are discussed in <ref> [29] </ref>. 14 Node Type Attributes Attribute Value (s) Exposition Children hTopicsi Topic Children hContent Specificationsi Centrality fLow, Medium, Highg Inclusion Condition hVariable Boolean Expressioni Local Variables (hVari , hVariable Expr.i) Pairs Content Children fhContent Spec'si, hElaborationsig Specification Content Specification hVariable Expression Template with KB Accessori Iteration Type fNon-Iter., Iter., Conditional-Iter.g Iterate-Over <p> Explanation generation terminates when the realization component has translated all of the views in the explanation plan to natural language. 7 As the planner constructs explanation plans, it consults the user model. User-sensitive explanation generation is not addressed in this paper. For a discussion of this work, see <ref> [33, 29] </ref>. 20 21 Explain (Query-T ype, Concept, V erbosity) if legal-query (Query-T ype, Concept, V erbosity) then EDP select-edp (Query-T ype) EDP Exposition-N ode get-root (EDP ) N ewExposition-N ode construct-node (EDP Exposition-N ode) Explanation-P lan apply-edp (EDP Exposition-N ode, N ewExposition-N ode, V erbosity, nil) Explanation-Leaves linearize (Explanation-P lan) <p> The resulting explanation plan is shown in Figure 14. Note that the Subevent Description Iteration, together with the Subevent Participants nested con 13 More comprehensive descriptions of Knight's realization component may be found in <ref> [29] </ref> and [7]. 14 In this example, Knight is given a High verbosity specification. 27 tent specifications, enabled Knight to construct two Participants views in the explanation plan: one for each of the subevents in embryo sac formation (Figure 13).
Reference: [30] <author> J. C. Lester and B. W. Porter. </author> <title> Generating integrative explanations: A delayed-commitment approach. </title> <booktitle> In Proceedings of the AAAI Workshop on Explanation, </booktitle> <pages> pages 80-89, </pages> <address> Boston, Massachusetts, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Our previous explanation generators employed a representation of discourse knowledge that consisted of collections of operators, coded directly in Lisp, for determining the content and organization of explanations <ref> [30, 32, 33, 31] </ref>. Although this approach worked well for small prototypes, it proved unsatisfactory for building fully functioning explanation systems. In particular, it was very difficult to maintain and extend discourse knowledge expressed directly in code.
Reference: [31] <author> J. C. Lester and B. W. Porter. </author> <title> An architecture for planning multi-paragraph pedagogical explanations. </title> <booktitle> In AAAI Workshop on Comparative Analysis of Explanation Planning Architectures, </booktitle> <pages> pages 27-41, </pages> <year> 1991. </year>
Reference-contexts: Our previous explanation generators employed a representation of discourse knowledge that consisted of collections of operators, coded directly in Lisp, for determining the content and organization of explanations <ref> [30, 32, 33, 31] </ref>. Although this approach worked well for small prototypes, it proved unsatisfactory for building fully functioning explanation systems. In particular, it was very difficult to maintain and extend discourse knowledge expressed directly in code.
Reference: [32] <author> J. C. Lester and B. W. Porter. </author> <title> A revision-based model of instructional multi-paragraph discourse production. </title> <booktitle> In Proceedings of the Thirteenth Cognitive Science Society Conference, </booktitle> <pages> pages 796-800, </pages> <year> 1991. </year>
Reference-contexts: Our previous explanation generators employed a representation of discourse knowledge that consisted of collections of operators, coded directly in Lisp, for determining the content and organization of explanations <ref> [30, 32, 33, 31] </ref>. Although this approach worked well for small prototypes, it proved unsatisfactory for building fully functioning explanation systems. In particular, it was very difficult to maintain and extend discourse knowledge expressed directly in code.
Reference: [33] <author> J. C. Lester and B. W. Porter. </author> <title> A student-sensitive discourse generator for intelligent tutoring systems. </title> <booktitle> In Proceedings of the International Conference on the Learning Sciences, </booktitle> <pages> pages 298-304, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Our previous explanation generators employed a representation of discourse knowledge that consisted of collections of operators, coded directly in Lisp, for determining the content and organization of explanations <ref> [30, 32, 33, 31] </ref>. Although this approach worked well for small prototypes, it proved unsatisfactory for building fully functioning explanation systems. In particular, it was very difficult to maintain and extend discourse knowledge expressed directly in code. <p> Explanation generation terminates when the realization component has translated all of the views in the explanation plan to natural language. 7 As the planner constructs explanation plans, it consults the user model. User-sensitive explanation generation is not addressed in this paper. For a discussion of this work, see <ref> [33, 29] </ref>. 20 21 Explain (Query-T ype, Concept, V erbosity) if legal-query (Query-T ype, Concept, V erbosity) then EDP select-edp (Query-T ype) EDP Exposition-N ode get-root (EDP ) N ewExposition-N ode construct-node (EDP Exposition-N ode) Explanation-P lan apply-edp (EDP Exposition-N ode, N ewExposition-N ode, V erbosity, nil) Explanation-Leaves linearize (Explanation-P lan)
Reference: [34] <author> J. C. Lester and B. W. Porter. </author> <title> Designing multi-media knowledge delivery systems: The strong representation paradigm. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Intelligent Multi-Media Multi-Modal Systems, </booktitle> <year> 1994. </year>
Reference-contexts: By tightly coupling multimedia object indices to a formal representation of domain knowledge, a multimedia explanation generator should be able to dynamically generate responses involving text, graphics, animation, audio, and video. To this end, we have begun work on an architecture for multimedia explanation generation <ref> [34] </ref>.
Reference: [35] <author> W. C. Mann and S. A. Thompson. </author> <title> Rhetorical structure theory: A theory of text organization. </title> <type> Technical Report ISI/RS-87-190, </type> <institution> USC/Information Sciences Institute, Marina del Rey, California, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: We manually "parsed" each passage into a discourse tree. The discourse trees were expressed in an informal language centering around viewpoints [59, 56]. The viewpoints were in turn expressed in an informal language of structure, function, and process which is commonly found in the discourse literature, e.g., <ref> [41, 35, 52] </ref>. Our final step was to generalize the most commonly occurring patterns into abstractions that covered as many aspects of the passages as possible. After generalizing the commonly occurring patterns into abstractions, we encoded the abstractions in two Explanation Design Packages. <p> An alternative to schemata is the top-down planning approach [49, 62, 8, 37, 24, 48, 47]. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) <ref> [35] </ref>. Hovy's Structurer [22, 21, 24] is a hierarchical planner whose operators instantiate relations from RST, and Hovy and McCoy have developed methods for increasing the organizational flexibility of the Structurer [25]. The Reactive Planner also uses RST-like operators.
Reference: [36] <author> M. T. </author> <title> Maybury. Planning multimedia explanations using communicative acts. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 61-66, </pages> <address> Anaheim, California, </address> <year> 1991. </year> <month> 43 </month>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods [12] should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation <ref> [17, 36, 65, 51, 10] </ref>. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [37] <author> M. T. </author> <title> Maybury. Communicative acts for explanation generation. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 37(2) </volume> <pages> 135-172, </pages> <year> 1992. </year>
Reference-contexts: An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35].
Reference: [38] <author> M. T. </author> <title> Maybury. Communicative acts for generating natural language arguments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 357-364, </pages> <year> 1993. </year>
Reference-contexts: In an effort to computationalize this critical ability, research in natural language generation has addressed a broad range of issues in automatically constructing text from formal representations of domain knowledge. Research on text planning <ref> [42, 52, 39, 24, 38] </ref> has developed techniques for determining the content and organization of many genres, and explanation generation [44, 8, 47] in particular has been the subject of intense investigation.
Reference: [39] <author> K. F. McCoy. </author> <title> Generating context-sensitive responses to object-related misconceptions. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 157-195, </pages> <year> 1989 1990. </year>
Reference-contexts: In an effort to computationalize this critical ability, research in natural language generation has addressed a broad range of issues in automatically constructing text from formal representations of domain knowledge. Research on text planning <ref> [42, 52, 39, 24, 38] </ref> has developed techniques for determining the content and organization of many genres, and explanation generation [44, 8, 47] in particular has been the subject of intense investigation. <p> If a KB accessing system could dynamically construct views, the discourse-knowledge engineer would be freed from the task of having to anticipate all queries and rhetorical situations and precompiling semantic units for each situation. Knight, Romper <ref> [39] </ref>, and Suthers work [59, 60, 61, 63] use these types of views to determine the content of their explanations. Once a perspective is selected, Romper includes in its explanations only those attributes whose salience values are the highest.
Reference: [40] <author> K. McKeown, J. Robin, and K. Kukick. </author> <title> Generating concise natural language summaries. </title> <booktitle> Information Processing and Management, </booktitle> <year> 1995. </year> <note> Special Issue on Summarization. </note>
Reference-contexts: Kukich employed a corpus-based methodology to judge the coverage of Ana's knowledge structures. Streak, which constructs summaries of basketball games, is part of of a larger effort by J. Robin, K. McKeown, and their colleagues at Columbia and Bellcore to develop robust document generation systems <ref> [43, 40] </ref>. It was evaluated with a corpus-based study that produced estimates of Streak's sub-language coverage, extensibility, and the overall effectiveness of its revision-based generation techniques.
Reference: [41] <author> K. R. McKeown. </author> <title> Generating Natural Language Text in Response to Questions about Database Structure. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1982. </year>
Reference-contexts: The Explanation Design Package (EDP) formalism is a convenient, schema-like <ref> [41, 52] </ref> programming language for text planning. Because the EDP formalism is a hybrid of the declarative and procedural paradigms, discourse-knowledge engineers can easily understand EDPs, modify them, and use them to represent new discourse knowledge. <p> They combine a frame-based representation language with embedded procedural constructs. To mirror the structure of expository texts, an EDP contains a hierarchy of nodes, which provides the "global organization" of explanations. EDPs are schema-like <ref> [41, 52] </ref> structures that include constructs found in traditional programming languages. Just as prototypical programming languages offer conditionals, iterative control structures, and procedural 13 abstraction, EDPs offer discourse-knowledge engineers counterparts of these constructs that are precisely customized for explanation planning. <p> We manually "parsed" each passage into a discourse tree. The discourse trees were expressed in an informal language centering around viewpoints [59, 56]. The viewpoints were in turn expressed in an informal language of structure, function, and process which is commonly found in the discourse literature, e.g., <ref> [41, 35, 52] </ref>. Our final step was to generalize the most commonly occurring patterns into abstractions that covered as many aspects of the passages as possible. After generalizing the commonly occurring patterns into abstractions, we encoded the abstractions in two Explanation Design Packages. <p> They also provide four types of knowledge-base access robustness, as discussed in Section 3. Discourse Generation. Two principle mechanisms have been developed for generating discourse: schemata and top-down planners. 19 McKeown's pioneering work on schemata marks the beginning of the "modern era" of discourse generation <ref> [41] </ref>. Schemata are ATN-like structures that represent naturally occurring patterns of discourse. For example, a schema for defining a concept includes instructions to identify its superclass, to name its parts, and to list its attributes.
Reference: [42] <author> K. R. McKeown. </author> <title> Text Generation: Using Discourse Strategies and Focus Constraints to Generate Natural Language Text. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: In an effort to computationalize this critical ability, research in natural language generation has addressed a broad range of issues in automatically constructing text from formal representations of domain knowledge. Research on text planning <ref> [42, 52, 39, 24, 38] </ref> has developed techniques for determining the content and organization of many genres, and explanation generation [44, 8, 47] in particular has been the subject of intense investigation.
Reference: [43] <author> K. R. McKeown, K. Kukich, and J. Shaw. </author> <title> Practical issues in automatic documentation generation. </title> <booktitle> In Proceedings of the Conference on Applied Natural Language Processing, </booktitle> <year> 1994. </year>
Reference-contexts: Kukich employed a corpus-based methodology to judge the coverage of Ana's knowledge structures. Streak, which constructs summaries of basketball games, is part of of a larger effort by J. Robin, K. McKeown, and their colleagues at Columbia and Bellcore to develop robust document generation systems <ref> [43, 40] </ref>. It was evaluated with a corpus-based study that produced estimates of Streak's sub-language coverage, extensibility, and the overall effectiveness of its revision-based generation techniques.
Reference: [44] <author> K. R. McKeown, M. Wish, and K. Matthews. </author> <title> Tailoring explanations for the user. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 794-798, </pages> <year> 1985. </year>
Reference-contexts: Research on text planning [42, 52, 39, 24, 38] has developed techniques for determining the content and organization of many genres, and explanation generation <ref> [44, 8, 47] </ref> in particular has been the subject of intense investigation. In addition to exploring a panorama of application domains, the explanation community has begun to assemble these myriad designs into a coherent framework. <p> Work in automated knowledge acquisition systems has shown how to use views to constrain search [50]. Several projects in explanation generation have exploited views to improve the quality of the explanations they provide. The Advisor system <ref> [44] </ref> represents views with a multiple-hierarchy knowledge base. Advisor infers a user's current goal from his most recent utterances and uses this goal to select a hierarchy from the multiple-hierarchy knowledge base. The selected view controls the content of the explanation and the reasoning that produced that content.
Reference: [45] <author> K. P. Mitchell. </author> <title> A system to generate natural language sentences for explanations from a large knowledge base. </title> <type> Master's thesis, </type> <institution> The University of Texas at Austin, Austin, Texas, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The first realizer, which was designed and implemented by the first author, was a template-based generator. The second realizer, which was designed by Kathy Mitchell and the authors, used the Penman surface generator. Her implementation of the second system is described in <ref> [45] </ref>. The third realizer is described briefly in this section; it was designed by the first author and C.
Reference: [46] <author> V. O. Mittal. </author> <title> Generating Natural Language Descriptions with Integrated Text and Examples. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Despite this success, empirical results in explanation generation are limited. Although techniques for developing and evaluating robust explanation generation should yield results that are more conclusive than those produced by prototype, "proof-of-concept" systems, with only a few notable exceptions <ref> [27, 23, 8, 46, 54] </ref>, most work has adopted a research methodology in which a proof-of-concept system is constructed and its operation is analyzed on a few examples. <p> We discuss each of these in turn. Evaluation Methodologies. With regard to evaluation, Knight is perhaps most closely related to five NLG projects that have been empirically evaluated: Pauline [23], Edge [8], the Example Generator 17 <ref> [46] </ref>, Ana [27], and Streak [54]. By varying pragmatic information such as tone, Hovy enabled Pauline to generate many different paragraphs on the same topic. <p> Although Edge does not include a realization system (other than simple templates) and it was not subjected to a tightly controlled, formal evaluation, it was sufficiently robust to be used interactively by eight subjects. The Example Generator <ref> [46] </ref>, Ana [27], and Streak [54] were each subjected to formal (quantitative) evaluations.
Reference: [47] <author> J. D. Moore. </author> <title> Participating in Explanatory Dialogues. </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Research on text planning [42, 52, 39, 24, 38] has developed techniques for determining the content and organization of many genres, and explanation generation <ref> [44, 8, 47] </ref> in particular has been the subject of intense investigation. In addition to exploring a panorama of application domains, the explanation community has begun to assemble these myriad designs into a coherent framework. <p> An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> The Reactive Planner also uses RST-like operators. However, unlike all of the preceding research|and unlike Knight as well|it offers sophisticated mechanisms for generating explanations in interactive contexts <ref> [49, 48, 47] </ref>. Because the operators explicitly record the rhetorical effects achieved, and because the system records alternative operators it could have chosen, as well as assumptions it made about the user, the Reactive Planner can respond to follow-up questions|even if they are ambiguous|in a principled manner.
Reference: [48] <author> J. D. Moore and C. L. Paris. </author> <title> Planning text for advisory dialogues: Capturing intentional and rhetorical information. </title> <journal> Computational Linguistics, </journal> <volume> 19(4) </volume> <pages> 651-694, </pages> <year> 1993. </year>
Reference-contexts: An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> The Reactive Planner also uses RST-like operators. However, unlike all of the preceding research|and unlike Knight as well|it offers sophisticated mechanisms for generating explanations in interactive contexts <ref> [49, 48, 47] </ref>. Because the operators explicitly record the rhetorical effects achieved, and because the system records alternative operators it could have chosen, as well as assumptions it made about the user, the Reactive Planner can respond to follow-up questions|even if they are ambiguous|in a principled manner.
Reference: [49] <author> J. D. Moore and W. R. Swartout. </author> <title> A reactive approach to explanation: Taking the user's feedback into account. </title> <editor> In C. L. Paris, W. R. Swartout, and W. C. Mann, editors, </editor> <booktitle> Natural Language Generation in Artificial Intelligence and Computational Linguistics, </booktitle> <pages> pages 3-48. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> The Reactive Planner also uses RST-like operators. However, unlike all of the preceding research|and unlike Knight as well|it offers sophisticated mechanisms for generating explanations in interactive contexts <ref> [49, 48, 47] </ref>. Because the operators explicitly record the rhetorical effects achieved, and because the system records alternative operators it could have chosen, as well as assumptions it made about the user, the Reactive Planner can respond to follow-up questions|even if they are ambiguous|in a principled manner.
Reference: [50] <author> K. S. Murray and B. W. Porter. </author> <title> Controlling search for the consequences of new information during knowledge integration. </title> <booktitle> In Proceedings of the Sixth International Workshop on Machine Learning, </booktitle> <pages> pages 290-295, </pages> <year> 1989. </year>
Reference-contexts: Related research in intelligent tutoring systems explored how different views could be used to model different aspects of the domain and, hence, to answer different kinds of questions [58]. Work in automated knowledge acquisition systems has shown how to use views to constrain search <ref> [50] </ref>. Several projects in explanation generation have exploited views to improve the quality of the explanations they provide. The Advisor system [44] represents views with a multiple-hierarchy knowledge base.
Reference: [51] <author> J. G. Neal and S. C. Shapiro. </author> <title> Intelligent multi-media interface technology. </title> <editor> In J. W. Sullivan and S. W. Tyler, editors, </editor> <booktitle> Intelligent User Interfaces, </booktitle> <pages> pages 11-43. </pages> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods [12] should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation <ref> [17, 36, 65, 51, 10] </ref>. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [52] <author> C. L. Paris. </author> <title> Tailoring object descriptions to a user's level of expertise. </title> <journal> Computational Linguistics, </journal> <volume> 14(3) </volume> <pages> 64-78, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: In an effort to computationalize this critical ability, research in natural language generation has addressed a broad range of issues in automatically constructing text from formal representations of domain knowledge. Research on text planning <ref> [42, 52, 39, 24, 38] </ref> has developed techniques for determining the content and organization of many genres, and explanation generation [44, 8, 47] in particular has been the subject of intense investigation. <p> The Explanation Design Package (EDP) formalism is a convenient, schema-like <ref> [41, 52] </ref> programming language for text planning. Because the EDP formalism is a hybrid of the declarative and procedural paradigms, discourse-knowledge engineers can easily understand EDPs, modify them, and use them to represent new discourse knowledge. <p> They combine a frame-based representation language with embedded procedural constructs. To mirror the structure of expository texts, an EDP contains a hierarchy of nodes, which provides the "global organization" of explanations. EDPs are schema-like <ref> [41, 52] </ref> structures that include constructs found in traditional programming languages. Just as prototypical programming languages offer conditionals, iterative control structures, and procedural 13 abstraction, EDPs offer discourse-knowledge engineers counterparts of these constructs that are precisely customized for explanation planning. <p> We manually "parsed" each passage into a discourse tree. The discourse trees were expressed in an informal language centering around viewpoints [59, 56]. The viewpoints were in turn expressed in an informal language of structure, function, and process which is commonly found in the discourse literature, e.g., <ref> [41, 35, 52] </ref>. Our final step was to generalize the most commonly occurring patterns into abstractions that covered as many aspects of the passages as possible. After generalizing the commonly occurring patterns into abstractions, we encoded the abstractions in two Explanation Design Packages. <p> To construct an explanation plan, McKeown's Text system traverses the schemata and sequentially instantiates rhetorical predicates with propositions from a knowledge base. Paris extended schemata to generate descriptions of complex objects in a manner that is appropriate for the user's level of expertise <ref> [52] </ref>, and Romper's schemata include information about the content of proposi 19 A third alternative proposed by Sibun are short-range strategies that exploit relations such as spatial proximity to guide the generator through the domain knowledge [55].
Reference: [53] <author> B. Porter, J. Lester, K. Murray, K. Pittman, A. Souther, L. Acker, and T. Jones. </author> <title> AI research in the context of a multifunctional knowledge base: The botany knowledge base project. </title> <institution> Technical Report AI Laboratory AI88-88, University of Texas at Austin, Austin, Texas, </institution> <year> 1988. </year> <month> 44 </month>
Reference-contexts: To empirically study explanation generation from semantically rich, large-scale knowledge bases, we undertook a seven year experiment. First, our domain experts (one employed full-time) constructed the Biology Knowledge Base <ref> [53] </ref>, a very large structure representing more than 180,000 facts about botanical anatomy, physiology, and development. <p> Hence, they represent information not only about a large number of concepts but also about a large number of relationships that hold between the concepts. One such knowledge base is the Biology Knowledge Base <ref> [53] </ref>, an immense structure encoding information about botanical anatomy, physiology, and development.
Reference: [54] <author> J. Robin. </author> <title> Revision-Based Generation of Natural Language Summaries Providing Historical Background. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Despite this success, empirical results in explanation generation are limited. Although techniques for developing and evaluating robust explanation generation should yield results that are more conclusive than those produced by prototype, "proof-of-concept" systems, with only a few notable exceptions <ref> [27, 23, 8, 46, 54] </ref>, most work has adopted a research methodology in which a proof-of-concept system is constructed and its operation is analyzed on a few examples. <p> We discuss each of these in turn. Evaluation Methodologies. With regard to evaluation, Knight is perhaps most closely related to five NLG projects that have been empirically evaluated: Pauline [23], Edge [8], the Example Generator 17 [46], Ana [27], and Streak <ref> [54] </ref>. By varying pragmatic information such as tone, Hovy enabled Pauline to generate many different paragraphs on the same topic. <p> Although Edge does not include a realization system (other than simple templates) and it was not subjected to a tightly controlled, formal evaluation, it was sufficiently robust to be used interactively by eight subjects. The Example Generator [46], Ana [27], and Streak <ref> [54] </ref> were each subjected to formal (quantitative) evaluations.
Reference: [55] <author> P. Sibun. </author> <title> Generating text without trees. </title> <journal> Computational Intelligence, </journal> <volume> 8(1) </volume> <pages> 102-122, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: complex objects in a manner that is appropriate for the user's level of expertise [52], and Romper's schemata include information about the content of proposi 19 A third alternative proposed by Sibun are short-range strategies that exploit relations such as spatial proximity to guide the generator through the domain knowledge <ref> [55] </ref>.
Reference: [56] <author> A. Souther, L. Acker, J. Lester, and B. Porter. </author> <title> Using view types to generate explanations in intelligent tutoring systems. </title> <booktitle> In Proceedings of the Eleventh Cognitive Science Society Conference, </booktitle> <pages> pages 123-130, </pages> <year> 1989. </year>
Reference-contexts: Most of the texts also contained information about other aspects of botany, e.g., experimental methods and historical developments; these were omitted from the analysis. We manually "parsed" each passage into a discourse tree. The discourse trees were expressed in an informal language centering around viewpoints <ref> [59, 56] </ref>. The viewpoints were in turn expressed in an informal language of structure, function, and process which is commonly found in the discourse literature, e.g., [41, 35, 52].
Reference: [57] <author> J. F. Sowa. </author> <title> Conceptual Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: Human No No No* No No Yes Table 8: Evaluation Methodologies 37 the Krl [5] and Kodiak [66] systems. More recent work in this area has demonstrated how views can be "reified," i.e., encoded as first-class objects in their representations <ref> [57, 11, 28] </ref>. Related research in intelligent tutoring systems explored how different views could be used to model different aspects of the domain and, hence, to answer different kinds of questions [58]. Work in automated knowledge acquisition systems has shown how to use views to constrain search [50].
Reference: [58] <author> A. L. Stevens and A. Collins. </author> <title> Multiple conceptual models of a complex system. </title> <editor> In R. E. Snow, P. Federico, and W. E. Montague, editors, Aptitutde, </editor> <booktitle> Learning, and Instruction, </booktitle> <volume> volume 2, </volume> <pages> pages 177-197. </pages> <publisher> Lawrence Earlbaum, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1980. </year>
Reference-contexts: Related research in intelligent tutoring systems explored how different views could be used to model different aspects of the domain and, hence, to answer different kinds of questions <ref> [58] </ref>. Work in automated knowledge acquisition systems has shown how to use views to constrain search [50]. Several projects in explanation generation have exploited views to improve the quality of the explanations they provide. The Advisor system [44] represents views with a multiple-hierarchy knowledge base.
Reference: [59] <author> D. D. Suthers. </author> <title> Providing multiple views for explanation. </title> <booktitle> In Proceedings of the AAAI-88 Workshop on Explanation, </booktitle> <pages> pages 12-15, </pages> <year> 1988. </year>
Reference-contexts: Most of the texts also contained information about other aspects of botany, e.g., experimental methods and historical developments; these were omitted from the analysis. We manually "parsed" each passage into a discourse tree. The discourse trees were expressed in an informal language centering around viewpoints <ref> [59, 56] </ref>. The viewpoints were in turn expressed in an informal language of structure, function, and process which is commonly found in the discourse literature, e.g., [41, 35, 52]. <p> If a KB accessing system could dynamically construct views, the discourse-knowledge engineer would be freed from the task of having to anticipate all queries and rhetorical situations and precompiling semantic units for each situation. Knight, Romper [39], and Suthers work <ref> [59, 60, 61, 63] </ref> use these types of views to determine the content of their explanations. Once a perspective is selected, Romper includes in its explanations only those attributes whose salience values are the highest.
Reference: [60] <author> D. D. Suthers. </author> <title> Perspectives in explanation. </title> <type> Technical Report COINS 89-24, </type> <institution> University of Massachusetts, Amherst, Massachusetts, </institution> <year> 1989. </year>
Reference-contexts: If a KB accessing system could dynamically construct views, the discourse-knowledge engineer would be freed from the task of having to anticipate all queries and rhetorical situations and precompiling semantic units for each situation. Knight, Romper [39], and Suthers work <ref> [59, 60, 61, 63] </ref> use these types of views to determine the content of their explanations. Once a perspective is selected, Romper includes in its explanations only those attributes whose salience values are the highest.
Reference: [61] <author> D. D. Suthers. </author> <title> The epistemological structure of explanation. </title> <booktitle> In Proceedings of the AAAI-90 Workshop on Explanation, </booktitle> <pages> pages 178-187, </pages> <year> 1990. </year>
Reference-contexts: If a KB accessing system could dynamically construct views, the discourse-knowledge engineer would be freed from the task of having to anticipate all queries and rhetorical situations and precompiling semantic units for each situation. Knight, Romper [39], and Suthers work <ref> [59, 60, 61, 63] </ref> use these types of views to determine the content of their explanations. Once a perspective is selected, Romper includes in its explanations only those attributes whose salience values are the highest.
Reference: [62] <author> D. D. Suthers. </author> <title> A task-appropriate hybrid architecture for explanation. </title> <journal> Computational Intelligence, </journal> <volume> 7(4) </volume> <pages> 315-333, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: In addition to exploring a panorama of application domains, the explanation community has begun to assemble these myriad designs into a coherent framework. As a result, we have begun to see a crystalization of the major components, as well as detailed analyses of their roles in explanation <ref> [62, 63] </ref>. Despite this success, empirical results in explanation generation are limited. <p> An alternative to schemata is the top-down planning approach <ref> [49, 62, 8, 37, 24, 48, 47] </ref>. 21 The operators of two of these planning systems are based on Rhetorical Structure Theory (RST) [35]. <p> A related approach has been taken by Cawsey in the Edge system [8]. Because Edge has facilities for managing conversations, users may interrupt the system to ask questions, and Edge can either answer the question immediately or postpone its response. Suthers <ref> [62] </ref> has developed a sophisticated hybrid approach that includes planning techniques as well as plan critics, simulation models, reorganization methods, and graph traversal. By assembling these diverse mechanisms into a single architecture, he demonstrates how the complexities of explanation planning can be dealt with in a coherent framework.
Reference: [63] <author> D. D. Suthers. </author> <title> An Analysis of Explanation and Its Implications for the Design of Explanation Planners. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: In addition to exploring a panorama of application domains, the explanation community has begun to assemble these myriad designs into a coherent framework. As a result, we have begun to see a crystalization of the major components, as well as detailed analyses of their roles in explanation <ref> [62, 63] </ref>. Despite this success, empirical results in explanation generation are limited. <p> If a KB accessing system could dynamically construct views, the discourse-knowledge engineer would be freed from the task of having to anticipate all queries and rhetorical situations and precompiling semantic units for each situation. Knight, Romper [39], and Suthers work <ref> [59, 60, 61, 63] </ref> use these types of views to determine the content of their explanations. Once a perspective is selected, Romper includes in its explanations only those attributes whose salience values are the highest.
Reference: [64] <author> W. R. Swartout. XPLAIN: </author> <title> A system for creating and explaining expert consulting programs. </title> <journal> Artificial Intelligence, </journal> <volume> 21 </volume> <pages> 285-325, </pages> <year> 1983. </year>
Reference-contexts: Advisor infers a user's current goal from his most recent utterances and uses this goal to select a hierarchy from the multiple-hierarchy knowledge base. The selected view controls the content of the explanation and the reasoning that produced that content. In a similar vein, viewpoints in Swartout's Xplain <ref> [64] </ref> are annotations that indicate when to include a piece of knowledge in an explanation. It is preferable to construct (i.e., extract) views at runtime rather than encoding them in a knowledge base.
Reference: [65] <author> W. Wahlster, E. Andre, W. Finkler, H.-J. Profitlich, and T. Rist. </author> <title> Plan-based integration of natural language and graphics generation. </title> <journal> Artificial Intelligence, </journal> <volume> 63 </volume> <pages> 387-427, </pages> <year> 1993. </year>
Reference-contexts: Moreover, Knight currently employs very rudimentary pronominalization techniques. Including more sophisticated methods [12] should result in a significant increase in text quality. Finally, one of the most fruitful area for future work is research on multimedia explanation generation <ref> [17, 36, 65, 51, 10] </ref>. A multimedia explanation generator can combine the explanatory capabilities of Knight with the powerful display technologies of multimedia devices.
Reference: [66] <author> R. Wilensky. </author> <title> KODIAK|a knowledge representation language. </title> <booktitle> In Proceedings of the Sixth AnnualCon-ference of the Cognitive Science Society, </booktitle> <pages> pages 344-352, </pages> <year> 1984. </year> <month> 45 </month>
Reference-contexts: Human No No No* No No Yes Table 8: Evaluation Methodologies 37 the Krl [5] and Kodiak <ref> [66] </ref> systems. More recent work in this area has demonstrated how views can be "reified," i.e., encoded as first-class objects in their representations [57, 11, 28].
References-found: 66

