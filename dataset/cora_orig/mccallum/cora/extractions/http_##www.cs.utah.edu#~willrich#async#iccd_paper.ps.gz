URL: http://www.cs.utah.edu/~willrich/async/iccd_paper.ps.gz
Refering-URL: http://www.cs.utah.edu/~willrich/async/mypapers.html
Root-URL: 
Email: willrich@cs.utah.edu elb@cs.utah.edu  
Title: Precise Exception Handling for a Self-Timed Processor  
Author: William F. Richardson Erik Brunvand 
Address: Salt Lake City, UT 84112 Salt Lake City, UT 84112  
Affiliation: Computer Science Department Computer Science Department University of Utah University of Utah  
Note: Copyright 1995 IEEE Reproduction without permission is prohibited.  
Abstract: Self-timed systems structured as multiple concurrent processes and communicating through self-timed queues are a convenient way to implement decoupled computer architectures. Machines of this type can exploit instruction level parallelism in a natural way, and can be easily modified and extended. However, providing a precise exception model for a self-timed micropipelined processor can be difficult, since the processor state does not change at uniformly discrete intervals. We present a precise exception method implemented for Fred, a self-timed, decoupled, pipelined computer architecture with out-of-order instruction completion. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Erik Brunvand. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the 26th Annual Hawaii International Confer ence on System Sciences, </booktitle> <pages> pages 428435, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1993. </year>
Reference: [2] <author> Alan L. Davis. </author> <title> Asynchronous advantages often cited and NOT often cited. </title> <booktitle> Distributed at the Async94 conference, November 1994. </booktitle> <address> Salt Lake City, Utah. </address>
Reference-contexts: While this may provide advantages in achieving average-case performance or simplifying modular composition <ref> [2] </ref>, it makes exception processing dif ficult. Much of the state of the Fred processor is contained in the pipelines but it is problematic to determine exactly how many items are in a particular pipeline at a given moment in time.
Reference: [3] <author> Harry Dwyer and H. C. Torng. </author> <title> An out-of-order superscalar processor with speculative execution and fast, precise interrupts. </title> <booktitle> In Proceedings of the 25th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 272281, </pages> <month> December </month> <year> 1992. </year>
Reference: [4] <author> S. B. Furber, P. Day, J. D. Garside, N. C. Paver, and J. V. Woods. </author> <title> A micropipelined ARM. </title> <booktitle> In Proceedings of the VII Banff Workshop: Asynchronous Hardware Design, </booktitle> <address> Banff, Canada, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: This problem has been addressed in part by the AMULET group at the University of Manchester <ref> [4] </ref>, who have built a self-timed implementation of the ARM. However , its precise exception model is a simple one since its single ALU causes all instructions to issue and complete sequentially.
Reference: [5] <author> William F. Richardson and Erik Brunvand. </author> <title> The NSR processor prototype. </title> <type> Technical Report UUCS92029, </type> <institution> University of Utah, </institution> <month> August </month> <year> 1992. </year> <note> ftp://ftp.cs.utah.edu/ techreports/1992/UUCS-92-029.ps.Z. </note>
Reference: [6] <author> William F. Richardson and Erik Brunvand. Fred: </author> <title> An architecture for a self-timed decoupled computer . Technical Report UUCS95008, </title> <institution> University of Utah, </institution> <month> May </month> <year> 1995. ftp://ftp.cs.utah.edu/techreports/1995/UUCS-95-008.ps.Z. </year>
Reference-contexts: The NSR is a simple 16-bit machine designed to explore the potential of self-timed organization for computer design, but includes little support for anything but the basic microprocessor features. The Fred architecture <ref> [6] </ref> borrows many ideas from the NSR. However, Fred includes 32-bit data paths and memory addressing, provides a lar ger register file, and extends the instruction set in a variety of ways that make the architecture more realistic and more comparable to commercial microprocessors.
Reference: [7] <author> James E. Smith and Andrew R. Pleszkun. </author> <title> Implementing precise interrupts in pipelined processors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(5):562573, </volume> <month> May </month> <year> 1988. </year>
Reference: [8] <author> Gurindar S. Sohi. </author> <title> Instruction issue logic for high-performance, interruptible, multiple functional unit, pipelined computers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(3):349 359, </volume> <month> March </month> <year> 1990. </year>
Reference: [9] <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6):720738, </volume> <year> 1989. </year>
Reference-contexts: 1. Introduction Fred 1 is an architecture for a self-timed processor structured as a set of communicating micropipelines <ref> [9] </ref>. The basic Fred architecture is based roughly on the NSR (Non-Synchronous RISC) architecture developed at the University of Utah [1,5]. The NSR is a simple 16-bit machine designed to explore the potential of self-timed organization for computer design, but includes little support for anything but the basic microprocessor features.
Reference: [10] <author> H. C. Torng and Martin Day. </author> <title> Interrupt handling for out-of-order execution processors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(1):122127, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: Freds decoupled concurrent architecture requires a more general solution. 3.1 The Instruction Window To resolve the uncertainty regarding instruction status, Fred uses an Instruction W indow (IW), similar to that described in <ref> [10] </ref>, to fetch and dispatch instructions. The IW is a set of internal registers located in the Dispatch Unit, which tracks the state of all current instructions. Each slot in the IW contains information about each instruction, such as its opcode, its address, its current status, and various other parameters. <p> This early completion signaling has no effect on data hazards. 3.3 Out-of-Order Completion Because instructions may complete out of order , recoverable exceptions can cause unforeseen WAW hazards. The IW contains enough information to resolve these issues. In <ref> [10] </ref>, provision was made to reduce interrupt latency by aborting issued instructions which would take a long time to complete. In a self-timed processor there is no way to tell how soon an instruction will complete, since there are no clock cycles by which to measure progress.
Reference: [11] <author> David W. Wall. </author> <title> Limits of instruction-level parallelism. </title> <note> WRL Technical Note TN-15, </note> <institution> Digital Western Research Laboratory, </institution> <address> 100 Hamilton Avenue, Palo Alto, CA 94301, </address> <month> December </month> <year> 1990. </year> <note> ftp://gatekeeper.dec.com/pub/ DEC/WRL/research-reports/WRL-TN-15.ps. </note>
Reference-contexts: A more significant drawback would be the possible reduction in program efficiency. The degree of parallelism in most programs is not great <ref> [11] </ref>, yet is enough that some pipelining is possible. With WAW-safe dispatch, no two concurrent instructions can use the same registers for either source or destination. It is questionable whether typical programs have enough parallelism to maintain performance under these conditions. 6.
Reference: [12] <author> Wm. A. Wulf. </author> <title> The WM computer architecture. </title> <journal> Computer Architecture News, </journal> <volume> 16(1), </volume> <month> March </month> <year> 1988. </year>
References-found: 12

