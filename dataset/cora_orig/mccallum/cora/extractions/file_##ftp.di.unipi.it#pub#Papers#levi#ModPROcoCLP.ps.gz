URL: file://ftp.di.unipi.it/pub/Papers/levi/ModPROcoCLP.ps.gz
Refering-URL: http://www.di.unipi.it/di/groups/lp/papers.html
Root-URL: 
Title: Modelling PROLOG Control in Constraint Logic Languages  
Author: Giorgio Levi Daniele Micciancio 
Date: November 14, 1994  
Abstract: We define a "logical denotational semantics" for pure PROLOG programs, and prove it correct and complete wrt an operational one. Our semantics is given as an instance of a generalized semantics for CLP and is naturally oriented towards abstract interpretation. The key feature is that prolog control strategy is modeled inside the constraint system, mantaining the logical flavor of classical semantics for pure logic programming. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Birkhoff. </author> <title> Lattice Theory. </title> <booktitle> In AMS Colloquium Publication, third ed., </booktitle> <year> 1967. </year> <month> 14 </month>
Reference: [2] <author> A. Bossi, M. Bugliesi, and M. Fabris. </author> <title> Fixpoint semantics for PROLOG. </title> <editor> In D. S. Warren, editor, </editor> <booktitle> Proc. Tenth Int'l Conf. on Logic Programming, </booktitle> <pages> pages 374-389. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1993. </year>
Reference-contexts: The semantics we present here is a reconstruction in the style of [10] of that in [9]. Our first formulation ([9]) was a refinement of <ref> [2] </ref>. We chose to "translate" our semantics in the language of [10], because its structured approach seems to yield a more clean formulation. The paper is organized as follows. In section 2 we recall some notions from the theory of lattices and orders that will be used in the sequel.
Reference: [3] <author> P. Codognet and G. </author> <title> File. Computations, Abstractions and Constraints. </title> <booktitle> In Proc. Fourth IEEE Int'l Conference on Computer Languages. </booktitle> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction An elegant and promising technique for analyzing logic programs is that based on constraints, first introduced in <ref> [3] </ref> and then formalized in terms of the so-called generalized semantics in [6, 7, 5]. The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]).
Reference: [4] <author> B. A. Davey and H. A. Priestley. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [5] <author> R. Giacobazzi. </author> <title> Semantic Aspects of Logic Program Analysis. </title> <type> PhD thesis, </type> <institution> Dipartimento di Informatica, Universita di Pisa, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction An elegant and promising technique for analyzing logic programs is that based on constraints, first introduced in [3] and then formalized in terms of the so-called generalized semantics in <ref> [6, 7, 5] </ref>. The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, [8, 13]).
Reference: [6] <author> R. Giacobazzi, S. K. Debray, and G. Levi. </author> <title> A Generalized Semantics for Constraint Logic Programs. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems 1992, </booktitle> <pages> pages 581-591, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction An elegant and promising technique for analyzing logic programs is that based on constraints, first introduced in [3] and then formalized in terms of the so-called generalized semantics in <ref> [6, 7, 5] </ref>. The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, [8, 13]).
Reference: [7] <author> R. Giacobazzi, G. Levi, and S. K. Debray. </author> <title> Joining Abstract and Concrete Computations in Constraint Logic Programming. </title> <editor> In M. Nivat, C. Rattray, T. Rus, and G. Scollo, editors, </editor> <booktitle> Algebraic Methodology and Software Technology (AMAST'93), Proceedings of the Third International Conference on Algebraic Methodology and Software Technology, Workshops in Computing, </booktitle> <pages> pages 111-127. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction An elegant and promising technique for analyzing logic programs is that based on constraints, first introduced in [3] and then formalized in terms of the so-called generalized semantics in <ref> [6, 7, 5] </ref>. The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, [8, 13]).
Reference: [8] <author> J. Jaffar and J.-L. Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> In Proc. Fourteenth Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference-contexts: The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, <ref> [8] </ref>). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, [8, 13]). We follow here the approach of [8], which defines constraint systems along the lines of Scott's information systems ([14]). <p> The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, <ref> [8, 13] </ref>). We follow here the approach of [8], which defines constraint systems along the lines of Scott's information systems ([14]). Constraint systems provide flexible domains of computation, without requiring complicate embeddings in first order languages. <p> logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, <ref> [8] </ref>). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, [8, 13]). We follow here the approach of [8], which defines constraint systems along the lines of Scott's information systems ([14]). Constraint systems provide flexible domains of computation, without requiring complicate embeddings in first order languages.
Reference: [9] <author> G. Levi and D. Micciancio. </author> <title> Analysis of pure PROLOG programs. </title> <type> Technical report, </type> <institution> Comp. Sci. Dept. University of Pisa, </institution> <year> 1994. </year>
Reference-contexts: Using this framework we define a semantics for CLP that takes into account the prolog search rule, that is the left-most selection rule and depth-first search strategy. The semantics we present here is a reconstruction in the style of [10] of that in <ref> [9] </ref>. Our first formulation ([9]) was a refinement of [2]. We chose to "translate" our semantics in the language of [10], because its structured approach seems to yield a more clean formulation. The paper is organized as follows. <p> Our fixpoint semantics is given as an instance of a generalized semantics for CLP and is oriented towards abstract interpretation. The applicability of our approach to abstract interpretation is argued in <ref> [9] </ref>, where we showed that the approximation of the semantics of pure PROLOG programs can essentially be based on domains developed for the analysis of logic programs.
Reference: [10] <author> A. Di Pierro and C. Palamidessi. </author> <title> A Logical Denotational Semantics for Constraint Logic Programming. </title> <booktitle> In Proc. TAPSOFT/ESOP 1994, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Using this framework we define a semantics for CLP that takes into account the prolog search rule, that is the left-most selection rule and depth-first search strategy. The semantics we present here is a reconstruction in the style of <ref> [10] </ref> of that in [9]. Our first formulation ([9]) was a refinement of [2]. We chose to "translate" our semantics in the language of [10], because its structured approach seems to yield a more clean formulation. The paper is organized as follows. <p> The semantics we present here is a reconstruction in the style of <ref> [10] </ref> of that in [9]. Our first formulation ([9]) was a refinement of [2]. We chose to "translate" our semantics in the language of [10], because its structured approach seems to yield a more clean formulation. The paper is organized as follows. In section 2 we recall some notions from the theory of lattices and orders that will be used in the sequel. In section 3 we introduce the language. <p> Following the approach of <ref> [10] </ref> we specify the syntax of CLP programs by means of a context free grammar. Agents are terms of the grammar (parametric wrt a basic constraint system C) showed in table 1. <p> The applicability of our approach to abstract interpretation is argued in [9], where we showed that the approximation of the semantics of pure PROLOG programs can essentially be based on domains developed for the analysis of logic programs. We have followed the "logical denotational" style of <ref> [10] </ref> and showed how less logical feature (here control strategy) can be modeled inside the constraint system, without affecting the logical style of the definitions. An interesting research direction is the extention of this approach to full PROLOG, with the aim of making the existing analysis useful in real PROLOG compilers.
Reference: [11] <author> G. Plotkin. </author> <title> A structured approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference: [12] <author> V. A. Saraswat, M. Rinard, and P. Panangaden. </author> <title> Semantic Foundation of Concurrent Constraint Programming. </title> <booktitle> In Proc. Eighteenth Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 333-353. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: The rule we use (proposed in <ref> [12] </ref>) is not subject to this problem. Definition 11 The operational semantics of a program P is the function from Agent to -(Goal): O P (A) = fG j hA; *i ! fl Gg While the given transition relation embeds a left-most selection rule, the control strategy is left unspecified.
Reference: [13] <author> V.A. Saraswat and M. Rinard. </author> <title> Concurrent constraint programming. </title> <booktitle> In Proc. of the Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 232-245. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The extension of logic programming ([15]) that replaces the usual unification on the Herbrand universe with a more general notion of constraint is called constraint logic programming (CLP, [8]). The semantics of CLP is usually given in terms of algebraic structures, called constraint systems (CS, <ref> [8, 13] </ref>). We follow here the approach of [8], which defines constraint systems along the lines of Scott's information systems ([14]). Constraint systems provide flexible domains of computation, without requiring complicate embeddings in first order languages. <p> The minimal structure needed to give an operational semantics to CLP is a set of constraints C equipped with a binary operation ^, called conjunction, to be used to collect constraints together during the computation, and finally some way to avoid name clashes. We follow the approach of <ref> [13] </ref> and introduce a family fl Dipartimento di Informatica, Univesrita di Pisa, Corso Italia 40, 56125 Pisa, Italy. E.mail: levi@di.unipi.it y Laboratory for Computer Science, MIT, Cambridge MA 02139 USA.
Reference: [14] <author> D. Scott. </author> <title> Domains for Denotational Semantics. </title> <editor> In M. Nielsen and E. M. Schmidt, editors, </editor> <booktitle> Proc. ninth Int. Coll. on Automata, Languages and Programming, volume 140 of Lecture Notes in Computer Science, </booktitle> <pages> pages 577-613. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1982. </year>
Reference: [15] <author> M. H. van Emden and R. A. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
References-found: 15

