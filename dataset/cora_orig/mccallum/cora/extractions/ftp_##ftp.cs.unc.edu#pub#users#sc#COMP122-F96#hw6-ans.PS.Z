URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP122-F96/hw6-ans.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP122-F1996/homework.html
Root-URL: http://www.cs.unc.edu
Title: COMP 122: Algorithms and Analysis Solutions to Problem Set 6 Most of the problems in
Author: Siddhartha Chatterjee 
Date: Fall 1996  
Abstract: P-2 Exercise 23.1-3 (page 468). The transpose of a directed graph G = (V; E) is the graph G T = (V;E T ), where E T = f(v; u) 2 V fi V : (u; v) 2 Eg. Thus, G T is G with all its edges reversed. Describe efficient algorithms for computing G T from G, for both the adjacency-list and adjacency-matrix representations of G. Analyze the running times of your algorithms. Solution: In the adjacency-list representation of G, we would need to insert each edge (u; v) in the adjacency list of v rather than the adjacency list of v. This can clearly be done in fi(E) time. In the adjacency-matrix representation of G, we would need to transpose the adjacency matrix representing the edges. This takes time fi(V 2 ). Note that by augmenting the representation just a little bit, we can reduce these times to fi(1) for either representation. For the adjacency matrix representation, we can keep a bit to indicate whether the graph is transposed. If it is not, then the matrix entry A ij indicates edge (i; j); otherwise, the matrix entry A ji indicated edge (i; j). For the adjacency list representation, we could thread each edge (u; v) on two lists, one for u and the other for v. Then transposing the graph would simply be a matter of interchanging the two lists. 
Abstract-found: 1
Intro-found: 1
References-found: 0

