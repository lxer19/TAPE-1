URL: http://www.cs.cornell.edu/home/migod/papers/icse16-swEngEdu.ps
Refering-URL: http://www.cs.cornell.edu/home/migod/papersIndex.html
Root-URL: 
Title: Tool Support for Software Engineering Education  
Author: Spiros Mancoridis, Richard C. Holt, Michael W. Godfrey 
Keyword: Key Words: CASE, Design, Education, Interface Viewer, Object-Oriented Turing, Program Understanding, Programming Environment, Reuse, Soft ware Engineering, Software Landscape, Star System, Tool Integration.  
Address: 10 King's College Road Toronto, Ontario M5S 1A4 CANADA  
Affiliation: Department of Computer Science University of Toronto  
Abstract: Although software engineering is a well-documented area of computer science, courses in software engineering frequently do not give students enough practical experience with concepts such as software design, prototyping, programming, debugging, program understanding, software reuse, and so on. As a result, computer science graduates too often acquire a sound theoretical understanding of software engineering concepts, without practical experience using these concepts (a recurrent complaint from industry). We believe that this problem is partly due to a lack of appropriate tools for software engineering education. In this paper we present an overview of the tools we have developed for software engineering education and how they are successfully being used in the instruction of a software engineering course at the University of Toronto. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bannister, H. </author> <title> Borland Introduces Turbo Prolog, </title> <note> Version 1.1. InfoWorld 8, </note> <month> 39 (September </month> <year> 1986). </year>
Reference-contexts: The central window is a run-time window which shows the output generated by running a system. and titles. OOT's support of a rapid edit-compile-link-debug cycle is similar to that of Borland's Turbo environments <ref> [1] </ref>. What is missing from most programming environments, such as those offered by Borland, is support for large-scale software development such as CASE tools. To support large-scale software development, the OOT environment was extended by two additional tools that provide higher-level, abstract views of OOT programs.
Reference: 2. <author> Blum, B. I. </author> <title> Software Engineering: A Holistic View. </title> <publisher> Oxford University Press, </publisher> <address> New York, New York, </address> <year> 1992. </year>
Reference-contexts: What is meant is that code templates can be generated automatically from the diagrams. 3 Using the Tools in a Software Engineering Course A fourth year University of Toronto course provides a standard coverage of software engineering concepts <ref> [14, 2] </ref>. At the beginning of the course, the students are given a set of milestones representing the phases in the life cycle of a software "product" that teams of three students in the course are required to create.
Reference: 3. <author> Dart, S. A., Ellison, R. J., Feiler, P. H., and Habermann, A. N. </author> <booktitle> Software Development Environments. IEEE Computer (November 1987), </booktitle> <pages> 18-28. </pages>
Reference-contexts: An important aspect of the OOT environment is its consistent user-interface. To the user, OOT consists of a number of windows easily identifiable by variations in their colour, size, screen position, 1 There are a few good surveys on programming environments <ref> [3, 12] </ref>. Fig. 1. OOT Snapshot. This figure is a snapshot of the OOT environment. On the top left corner resides the Control Panel. Under this is an OOT File Viewer containing source code. Under the File Viewer is the Interface Viewer which shows the interfaces of a module.
Reference: 4. <author> Holt, R. C., and Cordy, J. R. </author> <title> The Turing Programming Language. </title> <journal> Communications of the ACM 31, </journal> <month> 12 (December </month> <year> 1988), </year> <pages> 1410-1423. </pages>
Reference-contexts: A thorough description of OOT has been presented elsewhere [8]. In this paper, we will emphasize the features of OOT that are related to large-scale software development. 2.1 OOT: A Programming Environment Object-Oriented Turing (OOT) is an extension of the Turing language <ref> [4] </ref>. Its programming environment 1 includes a tightly-integrated set of tools for editing, high-speed compiling, linking, executing, and debugging OOT programs, as well as for browsing the Unix file system. An important aspect of the OOT environment is its consistent user-interface.
Reference: 5. <author> Holt, R. C., Penny, D. A., and Mancoridis, S. </author> <title> Multicolour Programming and Metamorphic Programming: Object Oriented Programming-in-the-Large. </title> <booktitle> In Proceedings of the 1992 IBM CASCON Conference (November 1992), </booktitle> <pages> pp. 43-58. </pages>
Reference-contexts: These interface files are created automatically by the Star system described in Section 2.2. The interface information serves as a form of documentation, and is used for program understanding. Software Landscape Viewer The Software Landscape <ref> [5, 7] </ref> is a graphical notation for relating software entities, such as designs, with non-graphical entities, such as source code, in a controlled, integrated and consistent manner. A distinguishing feature of the Software Landscape is its formally-defined rules of well-formedness [11].
Reference: 6. <author> Mancoridis, S., Holt, R. C., and Godfrey, M. W. </author> <title> A Program Understanding Environment Based on the "Star" Approach to Tool Integration. </title> <booktitle> In To appear in the Proceedings of the Twenty-Second ACM Computer Science Conference (March 1994). </booktitle>
Reference-contexts: The viewer also provides a hyperlink from each box in the diagram to the corresponding source code. We now describe a system for tool integration called Star, and elaborate on how it complements the OOT environment. A more detailed coverage of the Star system has been presented previously <ref> [6] </ref>. 2.2 Star: A Mechanism for Tool Integration Each of the tools described in Section 2.1 uses text files to store their information persistently. These text files are represented in Figure 2 as cylinders; the tools Fig. 2. Architecture of Star.
Reference: 7. <author> Mancoridis, S., Holt, R. C., and Penny, D. A. </author> <title> A Conceptual Framework for Software Development. </title> <booktitle> In Proceedings of the Twenty-First ACM Computer Science Conference (February 1993), </booktitle> <pages> pp. 74-80. </pages>
Reference-contexts: These interface files are created automatically by the Star system described in Section 2.2. The interface information serves as a form of documentation, and is used for program understanding. Software Landscape Viewer The Software Landscape <ref> [5, 7] </ref> is a graphical notation for relating software entities, such as designs, with non-graphical entities, such as source code, in a controlled, integrated and consistent manner. A distinguishing feature of the Software Landscape is its formally-defined rules of well-formedness [11].
Reference: 8. <author> Mancoridis, S., Holt, R. C., and Penny, D. A. </author> <title> A "Curriculum-Cycle" Environment for Teaching Programming. </title> <booktitle> In Proceedings of the Twenty-Fourth ACM SIGCSE Technical Symposium on Computer Science Education (February 1993), </booktitle> <pages> pp. 15-19. </pages>
Reference-contexts: Later, in Section 3, we will discuss how these tools are used at the University of Toronto for teaching a course in software engineering. 2 Tool Descriptions In this section, we briefly describe the OOT programming environment. A thorough description of OOT has been presented elsewhere <ref> [8] </ref>. In this paper, we will emphasize the features of OOT that are related to large-scale software development. 2.1 OOT: A Programming Environment Object-Oriented Turing (OOT) is an extension of the Turing language [4].
Reference: 9. <author> M uller, H. A. </author> <title> Rigi as a Reverse Engineering Tool. </title> <type> Tech. Rep. Technical Report No. </type> <institution> DCS-160-IR, University of Victoria, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: When OOT and Star are used in a bottom-up fashion (i.e., Software Land- scapes are extracted from the source code), the tools act as a reverse engineering system similar to the Rigi environment <ref> [9] </ref>. The generated Software Landscapes are automatically laid out using a variation of the Sugiyama algorithm [15]. When used in a top-down fashion (i.e., code templates are generated from the Software Landscape design), the tools act as a CASE environment with "code-generation" 2 capabilities similar to ObjectMaker [16].
Reference: 10. <editor> M uller, H. A., and Slonim, J. J. </editor> <booktitle> National Workshop on Software Engineering Education. </booktitle> <institution> Center for Advanced Studies IBM Canada Ltd., Toronto, </institution> <address> Ontario, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction There is a perception in industry that universities have not been adequately preparing their computer science graduates to cope with the realities of industrial software engineering. Indeed, there has been much discussion recently of calls for educational standards, and renewed industrial interest in computer science education <ref> [10] </ref>. Many universities are now offering graduate degrees in software engineering, aimed at people already in industry. The shortcoming of current software engineering education practice seems to be that it does not concentrate on the activities that a practitioner is likely to engage in.
Reference: 11. <author> Penny, D. A. </author> <title> The Software Landscape: A Visual Formalism for Programming-inthe-Large. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: To support large-scale software development, the OOT environment was extended by two additional tools that provide higher-level, abstract views of OOT programs. The first tool is called the Interface viewer and the second the Software Landscape viewer <ref> [11] </ref>. These new tools are loosely integrated with the OOT environment through shared files. Figure 1 shows a snapshot of the OOT environment in execution. <p> Software Landscape Viewer The Software Landscape [5, 7] is a graphical notation for relating software entities, such as designs, with non-graphical entities, such as source code, in a controlled, integrated and consistent manner. A distinguishing feature of the Software Landscape is its formally-defined rules of well-formedness <ref> [11] </ref>. The term "Landscape" is intended to suggest a single visual framework within which all software development occurs; the products of software development are placed in the Landscape to be explored, understood, and used by others. These products are stored as variously related entities.
Reference: 12. <author> Perry, D. E., and Kaiser, G. E. </author> <title> Models of Software Development Environments. </title> <booktitle> In Proceedings of the 10th IEEE International Conference on Software Engineering (Singapore, </booktitle> <year> 1988), </year> <pages> pp. 60-68. </pages>
Reference-contexts: An important aspect of the OOT environment is its consistent user-interface. To the user, OOT consists of a number of windows easily identifiable by variations in their colour, size, screen position, 1 There are a few good surveys on programming environments <ref> [3, 12] </ref>. Fig. 1. OOT Snapshot. This figure is a snapshot of the OOT environment. On the top left corner resides the Control Panel. Under this is an OOT File Viewer containing source code. Under the File Viewer is the Interface Viewer which shows the interfaces of a module.
Reference: 13. <author> Shaw, M. </author> <title> Larger Scale Systems Require Higher-Level Abstractions. </title> <booktitle> In Proceed-ings of the Fifth International IEEE Computer Society Workshop on Software Specification and Design (1989), </booktitle> <pages> pp. 143-146. </pages>
Reference-contexts: Higher- level entities, such as subsystems, projects, and libraries, which have no analogue in most conventional programming languages, exist as well. The concept of the Software Landscape is related to a new stream of Software Engineering research dealing with software architectures <ref> [13] </ref>. Landscape entities are interconnected through explicitly defined relations. There are Landscape relations between language-level units, such as imports, exports, or inherits, as well as other relations, such as part of (e.g., an entity is part of a subsystem), which is not expressible in most programming languages.
Reference: 14. <author> Sommerville, I. </author> <title> Software Engineering, Fourth Edition. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: What is meant is that code templates can be generated automatically from the diagrams. 3 Using the Tools in a Software Engineering Course A fourth year University of Toronto course provides a standard coverage of software engineering concepts <ref> [14, 2] </ref>. At the beginning of the course, the students are given a set of milestones representing the phases in the life cycle of a software "product" that teams of three students in the course are required to create.
Reference: 15. <author> Sugiyama, K., Tagawa, S., and Toda, M. </author> <title> Methods for Visual Understanding of Hierarchical System Structures. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 11, </journal> <month> 2 (February </month> <year> 1981), </year> <pages> 109-125. </pages>
Reference-contexts: When OOT and Star are used in a bottom-up fashion (i.e., Software Land- scapes are extracted from the source code), the tools act as a reverse engineering system similar to the Rigi environment [9]. The generated Software Landscapes are automatically laid out using a variation of the Sugiyama algorithm <ref> [15] </ref>. When used in a top-down fashion (i.e., code templates are generated from the Software Landscape design), the tools act as a CASE environment with "code-generation" 2 capabilities similar to ObjectMaker [16].
Reference: 16. <author> Williams, T. </author> <title> Object-Oriented CASE Tool Lets User Tailor His Own Methods. Computer Design (September 1991), </title> <type> 122. </type>
Reference-contexts: The generated Software Landscapes are automatically laid out using a variation of the Sugiyama algorithm [15]. When used in a top-down fashion (i.e., code templates are generated from the Software Landscape design), the tools act as a CASE environment with "code-generation" 2 capabilities similar to ObjectMaker <ref> [16] </ref>. The following section elaborates our experiences gained from using OOT and Star to teach a course in software engineering. 2 The use of the term code generation in CASE tool advertisements is somewhat misleading.
References-found: 16

