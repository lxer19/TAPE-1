URL: http://www.cs.colostate.edu/~ftppub/TechReports/1996/tr96-120.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: mrice@uts.cs.wesleyan.edu seidman@cs.colostate.edu  
Phone: Phone: (970) 491-5862 Fax: (970) 491-2466  
Title: Z as a Substrate for an Architectural Style Description Language 1  
Author: Michael D. Rice Stephen B. Seidman 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  
Date: September 17, 1996  
Note: Using  
Affiliation: Computer Science Colorado  Computer Science Group Department of Computer Science Mathematics Department Colorado State University Wesleyan University  Department of Computer Science Colorado State University  
Pubnum: Technical Report CS-96-120  
Abstract: Technical Report State University 1 The research reported in this paper was partially supported by a grant from the U. S. Naval Research Laboratory. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Abowd, R. Allan, and D. Garlan, </author> <title> Using style to understand descriptions of software architecture, </title> <booktitle> Proceedings ACM SIGSOFT93 Symposium on Foundations of Software Engineering, </booktitle> <pages> pp. 9-20, </pages> <year> 1993. </year>
Reference-contexts: First, identifying common architectural patterns for software systems is analogous to identifying basic data structures such as lists, stacks, and trees. The importance of identifying useful architectural styles is now widely recognized <ref> [1] </ref>. Second, identifying appropriate architectural description notations is analogous to developing high level programming languages for describing and using data structures. This is an important issue that has received far less attention. Most research efforts have developed software systems for designing domain-specific architectures, as opposed to system-independent architectural notations.
Reference: [2] <author> R. Allan and D. Garlan, </author> <title> Formalizing architectural connection, </title> <booktitle> Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pp. 71-80, </pages> <year> 1994. </year>
Reference-contexts: Z has provided a powerful and flexible substrate for the software types and operations of ASDL. Other formal approaches to the specification of architectures and architectural styles have been proposed ([1], <ref> [2] </ref>, [5], [6], and [13]). The spirit of this work has much in common with our own ideas. However, we believe that the following features differentiate our work from previous efforts. First, the software types include a comprehensive set of variable declarations and constraints.
Reference: [3] <author> G. Berry and G. Boudol, </author> <title> The chemical abstract machine model, </title> <booktitle> Theoretical Computer Science 96 (1992), </booktitle> <pages> 217-248. </pages>
Reference-contexts: This approach was illustrated in example (b) where the special event names used in the composition expression referred to the operations create_node and assign_label. Some approaches (such as [5] and [6]) use languages (like the Chemical Abstract Machine <ref> [3] </ref> and the p-calculus [8]) that support the dynamic creation of processes. These languages can also be used to model evolving architectures, but they have the drawback of an added semantic complexity when compared to CSP and Z. In addition, the dynamic operations must be explicitly specified in these languages.
Reference: [4] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: The semantic interpretations are assigned to the templates interface by an interp mapping that associates a composition of guarded CSP processes <ref> [4] </ref> with each template. For example, if a template t has two ports p and q with direction attributes in and out, respectively, then the CSP process interp (t) = *(p ? x fi q ! x fi SKIP) specifies that the template provides a non-terminating copy operation.
Reference: [5] <author> P. Inverardi and A. L. Wolf, </author> <title> Formal specification and analysis of software architectures using the Chemical Abstract Machine model, </title> <journal> IEEE Transactions on Software Engineering 21 (1995), </journal> <pages> 373-386. </pages>
Reference-contexts: Z has provided a powerful and flexible substrate for the software types and operations of ASDL. Other formal approaches to the specification of architectures and architectural styles have been proposed ([1], [2], <ref> [5] </ref>, [6], and [13]). The spirit of this work has much in common with our own ideas. However, we believe that the following features differentiate our work from previous efforts. First, the software types include a comprehensive set of variable declarations and constraints. <p> Second, the operations provide a natural way to describe architectural styles that have dynamic features. This approach was illustrated in example (b) where the special event names used in the composition expression referred to the operations create_node and assign_label. Some approaches (such as <ref> [5] </ref> and [6]) use languages (like the Chemical Abstract Machine [3] and the p-calculus [8]) that support the dynamic creation of processes. These languages can also be used to model evolving architectures, but they have the drawback of an added semantic complexity when compared to CSP and Z.
Reference: [6] <author> J. Kramer and J. Magee, </author> <title> Modeling distributed software architectures, </title> <type> manuscript, </type> <year> 1995. </year>
Reference-contexts: Z has provided a powerful and flexible substrate for the software types and operations of ASDL. Other formal approaches to the specification of architectures and architectural styles have been proposed ([1], [2], [5], <ref> [6] </ref>, and [13]). The spirit of this work has much in common with our own ideas. However, we believe that the following features differentiate our work from previous efforts. First, the software types include a comprehensive set of variable declarations and constraints. <p> Second, the operations provide a natural way to describe architectural styles that have dynamic features. This approach was illustrated in example (b) where the special event names used in the composition expression referred to the operations create_node and assign_label. Some approaches (such as [5] and <ref> [6] </ref>) use languages (like the Chemical Abstract Machine [3] and the p-calculus [8]) that support the dynamic creation of processes. These languages can also be used to model evolving architectures, but they have the drawback of an added semantic complexity when compared to CSP and Z.
Reference: [7] <author> D. J. Kaplan and R.S. Stevens, </author> <title> Processing graph method 2.0 semantics, </title> <type> manuscript, </type> <institution> Naval Research Laboratory, </institution> <month> June, </month> <year> 1995. </year>
Reference-contexts: The ASDL_Setting schema can therefore be thought of as a semantic module type that contains the basic components and the information needed to execute the module. The following examples illustrate the use of library and module types. (a) A module type in the Processing Graph Method (PGM, <ref> [7] </ref>, [11]) corresponds to a graph whose nodes perform signal processing operations. The primitive templates underlying the nodes belong to two categories: transitions that represent computations and data restructuring operations and places that represent data transfers between transitions.
Reference: [8] <author> R. Milner, J. Parrow, and D. Walker, </author> <title> A calculus of mobile processes, </title> <type> Technical Reports ECS-LFCS 89-85, 89-86, </type> <institution> University of Edinburgh, </institution> <year> 1989. </year>
Reference-contexts: This approach was illustrated in example (b) where the special event names used in the composition expression referred to the operations create_node and assign_label. Some approaches (such as [5] and [6]) use languages (like the Chemical Abstract Machine [3] and the p-calculus <ref> [8] </ref>) that support the dynamic creation of processes. These languages can also be used to model evolving architectures, but they have the drawback of an added semantic complexity when compared to CSP and Z. In addition, the dynamic operations must be explicitly specified in these languages.
Reference: [9] <author> G. M. Reed and A. W. Roscoe, </author> <title> A timed model for communicating sequential processes, </title> <booktitle> Theoretical Computer Science 58 (1988), </booktitle> <pages> 249-261. </pages>
Reference-contexts: A node instantiated from a reference template is called a pseudonode. 5 ASDL_Setting [Indices, Attributes, Parts, SemanticDescriptions] MIL_Setting [Indices, Attributes] ASDL_Library [Indices, Attributes, Parts] comp-expr : ProcessExpressions semantic-descr : Labels |fi SemanticDescriptions dom semantic-descr = ran label A composition expression is a restricted type of timed CSP process <ref> [9] </ref> in which node names are viewed as processes. For example, it may specify that the nodes in a setting will be executed in parallel. The members of ProcessExpressions are described in Appendix B.
Reference: [10] <author> M.D. Rice and S.B. Seidman, </author> <title> A formal model for module interconnection languages, </title> <journal> IEEE Transactions on Software Engineering 20 (1994), </journal> <pages> 88-101. </pages>
Reference-contexts: The identification of logical views is a precursor to the formulation of an architectural style. 3 Examples are given to show how the ASDL schemas can be used to specify (a) execution semantics, (b) dynamic views, (c) interface semantics, and (d) relationships between views. MIL Types In <ref> [10] </ref>, Z schemas were used to describe module interconnection languages (MILs). Such languages express the structure of a software system in terms of constraints imposed on the systems modules and module interfaces. <p> Such languages express the structure of a software system in terms of constraints imposed on the systems modules and module interfaces. Since the modules and interfaces can be regarded as representing the syntax of a software architecture, the Z schemas of <ref> [10] </ref> provide an initial substrate for ASDL. The syntax and static semantics of the modules that make up a given software architecture are specified by the Z schemas MIL_Library and MIL_Setting. These schemas have been modified only slightly from the Library and Setting schemas of [10]. <p> architecture, the Z schemas of <ref> [10] </ref> provide an initial substrate for ASDL. The syntax and static semantics of the modules that make up a given software architecture are specified by the Z schemas MIL_Library and MIL_Setting. These schemas have been modified only slightly from the Library and Setting schemas of [10]. The schemas use infinite sets Labels, Nodes, Ports, and Templates that are assumed to be disjoint. The MIL_Library schema specifies a library type that provides a collection of templates and information about their interfaces. <p> On the other hand, if encapsulation permits a virtual port with no links, then another interpretation may allow characteristics of the node to be modified by using the port. In <ref> [10] </ref>, a top-down design methodology was modeled by using a family of generic connector templates. ASDL supports a more straightforward representation of this methodology, since it provides an operation to incorporate a special unit type into an existing module. The included unit corresponds to a module that may be empty.
Reference: [11] <author> M.D. Rice and S.B. Seidman, </author> <title> Describing the PGM architectural style, </title> <type> Technical Report CS-96-120, </type> <institution> Department of Computer Science, Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: The ASDL_Setting schema can therefore be thought of as a semantic module type that contains the basic components and the information needed to execute the module. The following examples illustrate the use of library and module types. (a) A module type in the Processing Graph Method (PGM, [7], <ref> [11] </ref>) corresponds to a graph whose nodes perform signal processing operations. The primitive templates underlying the nodes belong to two categories: transitions that represent computations and data restructuring operations and places that represent data transfers between transitions.
Reference: [12] <author> J. M. Spivey, </author> <title> The Z Notation, A Reference Manual, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Modeling software architectural styles may requre a variety of notations and methodologies, and it is important that the underlying formalism has enough expressive power.. We have done this by associating each software type with a Z schema <ref> [12] </ref> that is invariant across all applications. Collectively, the software types permit the description of execution and interface semantics, logical views, and relationships between logical views. In addition, there are schemas that correspond to basic operations for modifying the state described by the software types.
Reference: [13] <author> P. Zave and M. Jackson, </author> <title> Conjunction as composition, </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> 2(4), </volume> <pages> pp. 379-411, </pages> <month> Oct. </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Z has provided a powerful and flexible substrate for the software types and operations of ASDL. Other formal approaches to the specification of architectures and architectural styles have been proposed ([1], [2], [5], [6], and <ref> [13] </ref>). The spirit of this work has much in common with our own ideas. However, we believe that the following features differentiate our work from previous efforts. First, the software types include a comprehensive set of variable declarations and constraints.
References-found: 13

