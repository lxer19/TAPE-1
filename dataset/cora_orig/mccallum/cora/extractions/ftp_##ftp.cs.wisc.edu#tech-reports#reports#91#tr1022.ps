URL: ftp://ftp.cs.wisc.edu/tech-reports/reports/91/tr1022.ps
Refering-URL: http://www.cs.wisc.edu/math-prog/tech-reports/
Root-URL: 
Title: OPTIMAL PROCESSOR ASSIGNMENT FOR PARALLEL DATABASE DESIGN  
Author: SHAHRAM GHANDEHARIZADEH ROBERT R. MEYER GARY L. SCHULTZ AND JONATHAN YACKEL 
Abstract: The computing time benefits of parallelism in database systems (achieved by using multiple processors to execute a query) must be weighed against communication, startup, and termination overhead costs that increase as a function of the number of processors used. We consider problems of minimizing overhead subject to allocating data among the processors according to specified loads. We present lower bounds for these combinatorial problems and demonstrate how processors may be optimally assigned for some problem classes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Boral, W. Alexander, L. Clay, G. Copeland, S. Danforth, M. Franklin, B. Hart, M. Smith, and P. Valduriez, </author> <title> Prototyping Bubba, a highly parallel database system, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> 2 </month> <year> (1990). </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba <ref> [1] </ref>, Non-Stop SQL [12], XPRS [11] and Volcano [6]) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a
Reference: [2] <author> D. DeWitt, S. Ghandeharizadeh, D. Schneider, A. Bricker, H. Hsiao, and R. Rasmussen, </author> <title> The Gamma database machine project, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> 2 </month> <year> (1990). </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma <ref> [2] </ref>, Bubba [1], Non-Stop SQL [12], XPRS [11] and Volcano [6]) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting <p> DCR-8512862. y Computer Science Department, University of Southern California, Los Angeles, California 90089-0782. z Computer Sciences Department, University of Wisconsin, Madison, Wisconsin 53706. 1 This overhead is primarily in the form of additional messages to control the execution of the query on additional processors and, in the Gamma database machine <ref> [2] </ref>, increases linearly with the number of employed processors. 1 Age Years Salary in $K 0-20 20-50 &gt; 50 26-50 1 3 3 Fig. 1. Processor assignment for the EMP relation of the relation and must be assigned to some processor. <p> Given a processor p, let load p denote the number of cells assigned to p. The objective function for the optimization 2 The linear speedup results presented in <ref> [2] </ref> justify this assertion. 2 problem that we develop measures total or worst case overhead. total := P and max := max s2S -s .
Reference: [3] <author> S. Ghandeharizadeh, </author> <title> Physical Database Design in Multiprocessor Systems, </title> <type> PhD thesis, </type> <institution> University of Wisconsin - Madison, </institution> <year> 1990. </year>
Reference-contexts: In order to minimize overhead while balancing the workload among the processors, Multi-Attribute GrId deClustering (MAGIC) introduced by Ghandeharizadeh <ref> [3] </ref> partitions a relation by assigning ranges of several attribute values to each processor in the system. To illustrate MAGIC consider the partitioning of the Employee relation EMP in figure 1. For parallel computation, MAGIC partitions the EMP relation by establishing ranges of Salary and Age attribute values.
Reference: [4] <author> S. Ghandeharizadeh, L. Ramos, Z. Asad, and W. Qureshi, </author> <title> Object placement in parallel hypermedia systems. </title> <booktitle> to appear in the proceedings of the 1991 VLDB Conference. </booktitle>
Reference-contexts: In addition, we would like to deal with more general objective functions and load balancing constraints. Finally, it would be interesting to consider other applications that fit into the task assignment/parallel computing framework developed here (see, e.g., Ghandeharizadeh et al <ref> [4] </ref>). 5
Reference: [5] <author> S. Ghandeharizadeh, G. L. Schultz, R. R. Meyer, and J. Yackel, </author> <title> Optimal balanced assignments and a parallel database application, </title> <type> Computer Sciences Technical Report 986, </type> <institution> University of Wisconsin - Madison, Madison, WI, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: Below we demonstrate an optimal assignment for such an instance: a 6 fi 15 grid with 6 processors, each of which has a load of 15. (See Ghandeharizadeh et al <ref> [5] </ref> for a collection of classes for which optimal solutions are developed.) 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 <p> We have developed an algorithm that constructs optimal assignments for such problem instances <ref> [5] </ref>. Figure 1 is an example of such an assignment. Note that for any processor the slices in figure 1 may be permuted so that the set of cells occupied has the following optimal shape: . 5. Conclusions and Future Work.
Reference: [6] <author> G. Graefe, Volcano: </author> <title> An extensible and parallel dataflow query processing system, </title> <institution> Computer Science Technical Report, Oregon Graduate Center, Beaverton, </institution> <address> OR, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba [1], Non-Stop SQL [12], XPRS [11] and Volcano <ref> [6] </ref>) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a lower response time for the query.
Reference: [7] <author> G. Hardy, J. Littlewood, and G. Polya, </author> <title> Inequalities, </title> <address> Cambridge, </address> <year> 1959. </year>
Reference-contexts: Therefore the "volume" Q D d=1 p;d of this box is at least load p , i.e., load p D Y p;d :(2) Taking the Dth root of both sides of (2) and applying the arithmetic mean/geometric mean inequality (see Hardy et al <ref> [7] </ref>) we obtain (load p ) 1 Q D 1 1 P D p =D , whence D (load p ) 1 D p : Since the RHS of the last inequality is integral, we may take the ceiling of the LHS. Theorem 3.2.
Reference: [8] <author> P. Helman, </author> <title> A family of NP-complete data aggregation problems, </title> <journal> Acta Informatica, </journal> <volume> 26 (1989), </volume> <pages> pp. 485-499. </pages>
Reference-contexts: For example, given a 5 fi 5 grid, 5 processors, and a load of 5 for each processor, there are 623; 360; 743; 125; 120 assignments that satisfy the balancing constraint. A similar class of data aggregation problems was studied by Helman <ref> [8] </ref>. Suppose that we replace our notion of "slice" by "arbitrary subset", i.e., the problem data consist of the grid plus a collection of subsets of cells.
Reference: [9] <author> M. Livny, S. Khoshafian, and H. Boral, </author> <title> Multi-disk management algorithms, </title> <booktitle> in Proceedings of the 1987 ACM SIGMETRICS Int'l Conf. on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba [1], Non-Stop SQL [12], XPRS [11] and Volcano [6]) relations are partitioned across multiple processors. (Livny et al <ref> [9] </ref> and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a lower response time for the query.
Reference: [10] <author> D. Ries and R. Epstein, </author> <title> Evaluation of distribution criteria for distributed database systems, </title> <type> UCB/ERL Technical Report M78/22, </type> <institution> UC Berkeley, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba [1], Non-Stop SQL [12], XPRS [11] and Volcano [6]) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein <ref> [10] </ref> introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a lower response time for the query.
Reference: [11] <author> M. Stonebraker, D. Patterson, and J. Ousterhout, </author> <booktitle> The design of XPRS, in Proceedings of the 1988 VLDB Conference, </booktitle> <address> Los Angeles, CA, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba [1], Non-Stop SQL [12], XPRS <ref> [11] </ref> and Volcano [6]) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a lower response time for the
Reference: [12] <author> Tandem Performance Group, </author> <title> A benchmark non-stop SQL on the debit credit transaction, </title> <booktitle> in Proceedings of the 1988 SIGMOD Conference, </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year> <month> 6 </month>
Reference-contexts: 1. Introduction. In highly-parallel database machines (e.g., Gamma [2], Bubba [1], Non-Stop SQL <ref> [12] </ref>, XPRS [11] and Volcano [6]) relations are partitioned across multiple processors. (Livny et al [9] and Ries and Epstein [10] introduced the related concept of "horizontal" partitioning.) This allows each processor to execute a portion of a query in parallel with the other processors, resulting in a lower response time
References-found: 12

