URL: http://www.cs.rice.edu/~adve/CS615/nws-impl.sc97-submit.ps
Refering-URL: http://www.cs.rice.edu/~adve/comp615.html
Root-URL: 
Email: rich@cs.ucsd.edu, nspring@cs.ucsd.edu, cpeterso@microsoft.com  
Title: Implementing a Performance Forecasting System for Metacomputing: The Network Weather Service ditions (commonly used to
Author: Rich Wolski Neil Spring Chris Peterson 
Date: May 20, 1997  
Affiliation: UCSD  
Note: (Extended Abstract) submitted to SC97  email:  
Pubnum: Technical Report TR-CS97-540  
Abstract: In this paper we describe the design and implementation of a system called the Network Weather Service (NWS) that takes periodic measurements of deliverable resource performance from distributed networked resources, and uses numerical models to dynamically generate forecasts of future performance levels. These performance forecasts, along with measures of performance fluctuation (e.g. the mean square prediction error) and forecast lifetime that the NWS generates, are made available to schedulers and other resource management mechanisms at run-time so that they may determine the quality-of-service that will be available from each resource. We describe the architecture of the NWS and implementations that we have developed and are currently deploying for the Legion [11] and Globus/Nexus [7] metacomputing infrastructures. We also detail NWS forecasts of resource performance using both the Legion and Globus/Nexus implementations. Our results show that simple forecasting techniques substantially outperform measurements of current con 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AppLeS. </author> <note> http://www-cse.ucsd.edu/groups/hpcl/apples/apples.html. </note>
Reference-contexts: Initially, we have developed separate implementations of the NWS for the Globus/Nexus [8] and Legion [11] metacom-puting environments, each of which provides a software infrastructure that supports high-performance distributed and parallel computing. As part of the AppLeS (Application-Level Sched-ulers) project <ref> [2, 1] </ref> we are developing scheduling agents that make decisions based on application-level performance estimates. The NWS functionality is motivated by the requirements of these agents. In addition, quality-of-service guarantees in shared network environments (e.g. The Internet) are difficult to achieve.
Reference: [2] <author> F. Berman and R. Wolski. </author> <title> Scheduling from the perspective of the application. </title> <booktitle> In Proceedings of High-Performance Distributed Computing Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Initially, we have developed separate implementations of the NWS for the Globus/Nexus [8] and Legion [11] metacom-puting environments, each of which provides a software infrastructure that supports high-performance distributed and parallel computing. As part of the AppLeS (Application-Level Sched-ulers) project <ref> [2, 1] </ref> we are developing scheduling agents that make decisions based on application-level performance estimates. The NWS functionality is motivated by the requirements of these agents. In addition, quality-of-service guarantees in shared network environments (e.g. The Internet) are difficult to achieve.
Reference: [3] <author> F. Berman, R. Wolski, S. Figueira, J. Schopf, and G. Shao. </author> <title> Application level scheduling on distributed heterogeneous networks. </title> <booktitle> In Proceedings of Supercomputing 1996, </booktitle> <year> 1996. </year>
Reference-contexts: Our experience has been that system cycles (represented T system in the equation) are shared fairly in proportion to the amount of time the system, as a whole, spends executing in user state. While this empirically derived formula has worked well for some applications <ref> [3] </ref>, the NWS can easily accommodate more sophisticated techniques such as those described in [5]. 2.2 Forecasting Subsystem The Network Weather Service uses a number of predictive algorithms to anticipate performance fluctuations.
Reference: [4] <author> M. Devarakonda and R. Iyer. </author> <title> Predictability of process resource usage: A measurement-based study on unix. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> (12), </volume> <month> December </month> <year> 1989. </year> <month> 9 </month>
Reference-contexts: At present, the NWS is unable to predict in which mode a successive measurement will fall at any given moment. Neither a periodogram [9] nor a state-transition analysis <ref> [4] </ref> yield exploitable predictive 3 Legion is currently being reimplemented. In the next release of the system, it is our understanding that more robust communication protocols will be available. (a) (c) and Predictions (b), and a Scatter Plot of the Mea surements (c) from the PCL to SDSC 8 information.
Reference: [5] <author> S. Figueira and F. Berman. </author> <title> Modeling the effects of contention on the performance of heterogeneous applications. </title> <booktitle> In Proc. 5th IEEE Symp. on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: While this empirically derived formula has worked well for some applications [3], the NWS can easily accommodate more sophisticated techniques such as those described in <ref> [5] </ref>. 2.2 Forecasting Subsystem The Network Weather Service uses a number of predictive algorithms to anticipate performance fluctuations. Sensory data is ordered by time stamp so that the forecasting models may treat each prediction history as a time series.
Reference: [6] <author> I. Foster, J. Geisler, C. Kesselman, and S. Tuecke. </author> <title> Managing multiple communication methods in high-performance networked computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 40 </volume> <pages> 35-48, </pages> <year> 1997. </year>
Reference-contexts: Consequently, the forecast errors for Legion throughput measurements, shown in Table 2, are higher than for Nexus. Note that the NWS distributes its quantification of forecasting error so that schedulers and quality-of-service mechanisms, such as those proposed in <ref> [6] </ref>, can consider the performance predictability of a resource. If, for example, both the Nexus and Legion messaging systems were available to an application communicating between the PCL and SDSC, a scheduler might choose to use Nexus for the communication due to its greater predictability.
Reference: [7] <author> I. Foster and C. Kesselman. Globus: </author> <title> A meta-computing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. to appear. </note>
Reference: [8] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1997. to appear. </note>
Reference-contexts: As such, it must be implemented using the same communication and computation mechanisms that applications use so that forecasts accurately reflect the true performance an application can expect to obtain. Initially, we have developed separate implementations of the NWS for the Globus/Nexus <ref> [8] </ref> and Legion [11] metacom-puting environments, each of which provides a software infrastructure that supports high-performance distributed and parallel computing. As part of the AppLeS (Application-Level Sched-ulers) project [2, 1] we are developing scheduling agents that make decisions based on application-level performance estimates.
Reference: [9] <author> C. Granger and P. Newbold. </author> <title> Forecasting Economic Time Series. </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: At present, the NWS is unable to predict in which mode a successive measurement will fall at any given moment. Neither a periodogram <ref> [9] </ref> nor a state-transition analysis [4] yield exploitable predictive 3 Legion is currently being reimplemented.
Reference: [10] <author> A. Grimshaw. </author> <title> Easy-to-use object-oriented parallel programming with mentat. </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: In section 3, we present compara 1 We developed the implementation of the NWS for Legion that we describe in this paper using the prototype Legion environment based on Mentat <ref> [10] </ref>. tive forecasting results for both implementations and we conclude with an evaluation of the current system and a description of future research in section 4. 2 Architecture In this section, we present some high-level design issues that shaped the architecture of the Network Weather Service (NWS). <p> The units of mea (a) Predictions (b) in the PCL surement are megabits per second and the mean absolute error (MAE) for the prediction is 0:18. 2 The Mentat Programming Language is an object-oriented language based on C++ supported by Le gion <ref> [10] </ref>. 6 Predictor MAE LAST 0.28 RUN AVG 0.23 MEDIAN 0.18 Table 1: Forecasting Error for PCL Throughput using Legion That is, during the measurement period, at each time step the prediction of a measurement differed from the actual measurement it was predicting by an average of 0:18 megabits per second.
Reference: [11] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds. Legion: </author> <title> The next logical step towrd a nationwide virtual computer. </title> <type> Technical Report CS-94-21, </type> <institution> University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: As such, it must be implemented using the same communication and computation mechanisms that applications use so that forecasts accurately reflect the true performance an application can expect to obtain. Initially, we have developed separate implementations of the NWS for the Globus/Nexus [8] and Legion <ref> [11] </ref> metacom-puting environments, each of which provides a software infrastructure that supports high-performance distributed and parallel computing. As part of the AppLeS (Application-Level Sched-ulers) project [2, 1] we are developing scheduling agents that make decisions based on application-level performance estimates.
Reference: [12] <author> R. Wolski. </author> <title> Dynamically forecasting network performance using the network weather service. </title> <type> Technical Report TR-CS96-494, </type> <institution> U.C. </institution> <address> San Diego, </address> <month> October </month> <year> 1996. </year> <note> available from http://www.cs.ucsd.edu/users/rich/publications.html. </note>
Reference-contexts: Sensory data is ordered by time stamp so that the forecasting models may treat each prediction history as a time series. In <ref> [12, 13] </ref> we detail the specific algorithms that are part of the current NWS implementations. From the perspective of the forecasting subsystem's implementation, each forecasting model is an independent module that imports and exports a common interface. <p> Table 1 summarizes the predictive performance of several different forecasting methods. The NWS currently supports a variety of forecasting techniques, the details of which are more completely described in <ref> [12, 13] </ref>. In the interest of brevity, we demonstrate its functionality using only forecasters that are based on common summary statistics. The LAST predictor uses the last measurement as a prediction of the next measurement.
Reference: [13] <author> R. Wolski. </author> <title> Dynamically forecasting network performance to support dynamic scheduling using the network weather service. </title> <booktitle> In Proc. 6th IEEE Symp. on High Performance Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year> <note> to appear. 10 </note>
Reference-contexts: In addition, quality-of-service guarantees in shared network environments (e.g. The Internet) are difficult to achieve. NWS forecasts provide statistical estimates of available service quality from each resource, as well as the degree to which those estimates are likely to be accurate <ref> [13] </ref>. In this paper, we focus on the architecture and implementation of the Legion 1 and Globus/Nexus Network Weather Service versions. Section 2 describes the high-level architecture of the system and discusses some of the details specific to the Legion and Nexus implementations. <p> The NWS was designed as a modular system to provide performance information for distributed application scheduling. Some of its forecasting models (described more completely in <ref> [13] </ref>) require long-term history information. As such, we have designed the system to be persistent with the intention that it be a continually available service within the metacomputing environment. <p> Sensory data is ordered by time stamp so that the forecasting models may treat each prediction history as a time series. In <ref> [12, 13] </ref> we detail the specific algorithms that are part of the current NWS implementations. From the perspective of the forecasting subsystem's implementation, each forecasting model is an independent module that imports and exports a common interface. <p> Table 1 summarizes the predictive performance of several different forecasting methods. The NWS currently supports a variety of forecasting techniques, the details of which are more completely described in <ref> [12, 13] </ref>. In the interest of brevity, we demonstrate its functionality using only forecasters that are based on common summary statistics. The LAST predictor uses the last measurement as a prediction of the next measurement.
References-found: 13

