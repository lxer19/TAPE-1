URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/high-order-BVP.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Title: Improving performance when solving high order and mixed order boundary value problems in ODEs  
Author: W.H. Enright and Min Hu 
Keyword: multiple shooting method. Key Words: Runge-Kutta methods, boundary value problems  
Note: AMS Subject Classifications: 65L05, 65L10  
Abstract: Solving high order or mixed order boundary value problems by general purpose software often requires the system to be first converted to a larger equivalent first order system. The cost of solving such problems is generally O(m 3 ) where m is the dimension of the equivalent first order system. In this paper, we show how to reduce this cost by exploiting the special structure the `equivalent' first order system inherits from the original associated mixed-order system. This technique applies to a broad class of boundary value methods. We illustrate the potential benefits by considering in detail a general purpose Runge-Kutta method and a 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U. Ascher, R.M.M. Mattheij and R. Russell, </author> <title> Numerical solutions of boundary value problems for ordinary differential equations, </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1988. </year>
Reference-contexts: The special structure arises from the special form of (5). In particular, we will consider in detail an implicit Runge-Kutta BVP method ([2], [3]) and a multiple shooting method. It must be acknowledged that there are software package (eg. COLSYS, <ref> [1] </ref>) that can handle (4) directly and do not require the conversion to a first order systems. <p> time Saving Original Modified Expected Actual Problem 1 3:82 2:39 32% 34% Problem 2 fl = 0:0 1:48 1:34 17% 10% fl = 10:0 12:75 10:64 17% 17% Problem 3 * = 1:0 0:89 0:73 21% 18% * = 0:1 1:51 1:21 21% 20% Problem 2. (Swirling flow I family) <ref> [1] </ref> f 000 + 2f f 00 (f 0 ) 2 + g 2 = fl 0 &lt; x &lt; 1 the corresponding first order system form, y 0 2 = y 3 ; y 0 2 y 2 y 0 5 = 2y 2 y 4 2y 1 y 5 <p> Problem 3. (Swirling flow III family) <ref> [1] </ref> *f 0000 + f f 000 + gg 0 = 0; 0 &lt; x &lt; 1 with f (0) = f (1) = f 0 (0) = f 0 (1) = 0; the corresponding first order system form, y 0 2 = y 1 y 4 y 2 y 3
Reference: [2] <author> W.H. Enright and P.H. Muir, </author> <title> Efficient classes of Runge-Kutta methods for two-point boundary value problems, </title> <journal> Computing, </journal> <volume> 37 (1986), </volume> <pages> pp. 315-334. </pages>
Reference: [3] <author> W.H. Enright and P.H. Muir, </author> <title> A Runge-Kutta type boundary value ODE solver with defect control, </title> <type> Rep. 267, </type> <institution> Dept. of Computer Science, Univ. of Toronto, Canada, </institution> <year> 1993. </year>
Reference-contexts: The special structure arises from the special form of (5). In particular, we will consider in detail an implicit Runge-Kutta BVP method ([2], <ref> [3] </ref>) and a multiple shooting method. It must be acknowledged that there are software package (eg. COLSYS, [1]) that can handle (4) directly and do not require the conversion to a first order systems. <p> Similar modifications could be made to other methods designed for first order system. 2. Matrix multiplication in MIRK methods When a MIRK Runge-Kutta formula is applied to a boundary value problem ([2], <ref> [3] </ref>), we need to solve nonlinear equations of the form (Y ) = 0 for Y = (y 0 ; y 1 ; . . . ; y N ) T . The Newton Jacobian matrix for this equation has the form ([3]), 2 6 6 6 6 6 6 L <p> Taking ff 1 = 50 in (14) should therefore result in a reasonable estimate of the expected saving that can be realised when our approach is adopted in a multiple shooting code. 4. Numerical results In this section, we present the numerical testing for the MIRKDC code <ref> [3] </ref> and a multiple shooting code based on BVPMS of the IMSL library ([4], [5]), by only modifying the matrix products associated with (7) (8) and with the numerical solution of (13) respectively.
Reference: [4] <author> W.H. Enright and T.F.Fairgrieve, </author> <title> Performance of the boundary value solver BVPMS, </title> <booktitle> Contributed paper presented at the first IMSL users meeting, </booktitle> <address> Orlando, </address> <month> February </month> <year> 1988. </year>
Reference: [5] <editor> IMSL User's Manual. </editor> <booktitle> International Mathematical and Statistical Libraries, </booktitle> <address> Houston, </address> <year> 1987. </year>
Reference-contexts: Numerical results In this section, we present the numerical testing for the MIRKDC code [3] and a multiple shooting code based on BVPMS of the IMSL library ([4], <ref> [5] </ref>), by only modifying the matrix products associated with (7) (8) and with the numerical solution of (13) respectively. We have included three test problems to illustrate that the predicted saving can be realised through these minor changes. The computations were performed on a Sun Sparc 4 workstation.
Reference: [6] <author> P.H. Muir, </author> <title> Private communication, </title> <booktitle> 1994. </booktitle> <pages> 8 </pages>
Reference-contexts: In extensive testing and profiling of the MIRKDC program Muir <ref> [6] </ref> has observed that over a wide range of problems and accuracy requirements the time required to determine the L i and R i is generally close to 60% of the total time required to solve the problem. 3.
Reference: [7] <author> M.R. Scott and H.A. Watts, </author> <title> SUPORT a computer code for two-point boundary value problems via orthonormalization, </title> <type> Sandia Labs Report 75-0198, </type> <address> Albuquerque, New Mex-ico, </address> <month> June </month> <year> 1975. </year> <month> 9 </month>
Reference-contexts: Note that the multiple shooting method could not solve problem 2 for any of the prescribed values of the parameters fl. In all examples, the computed solutions agreed (to within round-off) with those produced by the unmodified methods. Problem 1. (Linear problem) <ref> [7] </ref> u (8) = 914u (7) 12649u (5) + 44136u (3) 32400u the corresponding first order system form, y 0 y 0 . . . 7 = y 8 8 = 914y 7 12649y 5 + 44136y 3 32400y 1 Table 2: Sixth order MIRKDC (s = 5) CPU time Saving
References-found: 7

