URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/spineless-tagless-gmachine.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Title: Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine Version 2.5 large new
Author: Simon L Peyton Jones 
Note: Changes in Version 2.0:  Previously entitled "The Spineless Tagless G-machine: a second attempt".  
Address: G12 8QQ  
Affiliation: Department of Computing Science, University of Glasgow  
Pubnum: (Section  
Email: simonpj@dcs.glasgow.ac.uk  
Date: March 17, 1993  9.3.3).  
Abstract: The Spineless Tagless G-machine is an abstract machine designed to support non-strict higher-order functional languages. This presentation of the machine falls into three parts. Firstly, we give a general discussion of the design issues involved in implementing non-strict functional languages. Next, we present the STG language, an austere but recognisably-functional language, which as well as a denotational meaning has a well-defined operational semantics. The STG language is the "abstract machine code" for the Spineless Tagless G-machine. Lastly, we discuss the mapping of the STG language onto stock hardware. The success of an abstract machine model depends largely on how efficient this mapping can be made, though this topic is often relegated to a short section. Instead, we give a detailed discussion of the design issues and the choices we have made. Our principal target is the C language, treating the C compiler as a portable assembler. Version 2.5 of this paper (minus appendix) appears in the Journal of Functional Programming 2(2) (April 1992), pp127-202. The indexing in the published version is one page out throughout, due to a CUP typesetting bug. 
Abstract-found: 1
Intro-found: 1
References-found: 0

