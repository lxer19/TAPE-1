URL: http://cs.nyu.edu/cs/projects/proteus/reports/papers/muc6-site.ps
Refering-URL: http://cs.nyu.edu/cs/projects/proteus/reports/index.html
Root-URL: http://www.cs.nyu.edu
Email: grishman@cs.nyu.edu  
Title: The NYU System for MUC-6 or Where's the Syntax?  
Author: Ralph Grishman 
Address: New York University  
Affiliation: Computer Science Department  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Appelt, J. Hobbs, J. Bear, D. Israel, M. Kameyama, and M. Tyson. </author> <title> SRI: Description of the JV-FASTUS System used for MUC-5. </title> <booktitle> In Proc. Fifth Message Understanding Conf. </booktitle> <address> (MUC-5), Baltimore, MD, August 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: All these considerations led us to conclude that we should "do a MUC" ourselves using the pattern matching approach, in order to better appreciate its strengths and weaknesses. In particular, we carefully studied the FASTUS system of Hobbs et al. <ref> [1] </ref>, who have clearly and eloquently set forth the advantages of this approach. This approach can be viewed as a form of conservative parsing, although the high-level structures which are created are not explicitly syntactic.
Reference: [2] <author> Ralph Grishman. </author> <title> Tipster Phase II Architecture Design Document, Version 1.52. </title> <address> New York University, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Response Generation For all the tasks, we use Tipster-style annotations as an intermediate representation for the information to be reported. A Tipster annotation includes a type, a set of start/end byte offsets, and a set of attributes <ref> [2] </ref>. The name recognition stage generates ENAMEX, PNAMEX, TIMEX, and NUMEX annotations as a byproduct of the recognition process, so Named Entity response generation only requires that the annotations be converted to SGML.
Reference: [3] <author> Ralph Grishman, Catherine Macleod, and Adam Meyers. </author> <title> Comlex Syntax: Building a computational lexicon. </title> <booktitle> In Proc. 15th Int'l Conf. Computational Linguistics (COLING 94), </booktitle> <pages> pages 268-272, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: THE SYSTEM We exaggerate, of course, the radicalness of our change since MUC-5 [4] (and since the MUC-6 dry run, which was conducted with our traditional syntactic system). Several components were direct descendants of earlier modules: the dictionary was Comlex Syntax <ref> [3] </ref>; the lexical analyzer (for names, etc.) had been gradually enhanced at least since MUC-3; the concept hierarchy code and reference resolution were essentially unchanged from earlier versions.
Reference: [4] <author> Ralph Grishman and John Sterling. </author> <title> New York University: Description of the PROTEUS System as used for MUC-5. </title> <booktitle> In Proc. Fifth Message Understanding Conf. </booktitle> <address> (MUC-5), Baltimore, MD, August 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: At the end of this paper we return to the question of the relation of pattern matching to approaches which use a comprehensive grammar. THE SYSTEM We exaggerate, of course, the radicalness of our change since MUC-5 <ref> [4] </ref> (and since the MUC-6 dry run, which was conducted with our traditional syntactic system).
References-found: 4

