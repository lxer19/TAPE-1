URL: ftp://ftp.gmd.de/ml-archive/GMD/papers/ML60.ps
Refering-URL: http://nathan.gmd.de/projects/ml/lit/mlpublist.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: kietz@gmd.de, luebbe@gmd.de  
Title: An Efficient Subsumption Algorithm for Inductive Logic Programming  
Author: Jorg-Uwe Kietz and Marcus Lubbe Cohen, W. and Hirsh, H. 
Web: http://www-fit-ki.gmd.de/projects/ml/lit/mlpublist.html, ML60.  
Note: In Machine learning: proceedings of the eleventh International Conference, 1994,  (eds.), pp. 130 138, San Francisco, Calif., Morgan Kaufman, 1994.  
Address: FIT, Schlo Birlinghoven, D-53754 St.Augustin, Germany  
Affiliation: German National Research Center for Computer Science,  
Abstract: In this paper we investigate the efficiency of - subsumption (` ), the basic provability relation in ILP. As D ` C is NP-complete even if we restrict ourselves to linked Horn clauses and fix C to contain only a small constant number of literals, we investigate in several restrictions of D. We first adapt the notion of determinate clauses used in ILP and show that -subsumption is decidable in polynomial time if D is determinate with respect to C. Secondly, we adapt the notion of k-local Horn clauses and show that - subsumption is efficiently computable for some reasonably small k. We then show how these results can be combined, to give an efficient reasoning procedure for determinate k-local Horn clauses, an ILP-problem recently suggested to be polynomial predictable by Cohen (1993) by a simple counting argument. We finally outline how the -reduction algorithm, an essential part of every lgg ILP-learning algorithm, can be im proved by these ideas.
Abstract-found: 1
Intro-found: 1
Reference: <author> Baxter, L. D. </author> <year> (1977). </year> <title> The NP-completeness of subsump-tion. </title> <type> unpublished manuscript. </type>
Reference: <author> Buntine, W. </author> <year> (1988). </year> <title> Generalized subsumption and its applications to induction and redundancy. </title> <journal> Artificial Intelligence, </journal> <volume> 36:149 - 176. </volume>
Reference: <author> Cohen, W. W. </author> <year> (1993). </year> <title> Learnability of restricted logic programs. </title> <editor> In Muggleton, S., editor, </editor> <booktitle> Proc. Third International Workshop on Inductive Logic Programming, ILP'93, </booktitle> <pages> pages 41-71. </pages> <institution> Jozef Stefan Institute, Ljubljana, Slovenia. </institution>
Reference-contexts: These implemeted - subsumption algorithms, which are supported by theoretical results and pratical tests, provide a necessary prerequisite for efficiently learning determinate k-local Horn clauses, an ILP-problem recently shown to be polynomially predictable <ref> (Cohen, 1993) </ref> (based on a counting argument, but without giving a learning algorithm for that problem). To gether with the improved -reduction algorithm for determinate and k-local clauses, our results will probably enable to implement an efficient lgg-based learning algorithm for that hypothesis space.
Reference: <author> De Raedt, L. </author> <year> (1992). </year> <title> Interactive Theory Revision: An Inductive Logic Programming Approach. </title> <publisher> Academic Press, London. </publisher>
Reference: <author> De Raedt, L. and Bruynooghe, M. </author> <year> (1993). </year> <title> A theory of clausal discovery. </title> <editor> In Muggleton, S., editor, </editor> <booktitle> The Third International Workshop on Inductive Logic Programming. </booktitle>
Reference-contexts: Something similar is proposed by 7 prolog-subsumes is the simple -subsumption algorithm, using Prolog as a theorem prover: prolog-subsumes (DHead-DBody,CHead-CBody):- skolemize (CHead-CBody), (member (L,CBody), assert (L),fail|true), DHead=CHead,!, call (DBody). <ref> (De Raedt and Bruynooghe, 1993) </ref> and used in MILES. * simple-subsumes: the simple implementation of -subsumption described in footnote 5 in this paper and in (Idestam-Almquist, 1993). The clause in table 1 is the unreduced Plotkin-lgg of two arch examples of the blocksworld domain. <p> by 7 prolog-subsumes is the simple -subsumption algorithm, using Prolog as a theorem prover: prolog-subsumes (DHead-DBody,CHead-CBody):- skolemize (CHead-CBody), (member (L,CBody), assert (L),fail|true), DHead=CHead,!, call (DBody). (De Raedt and Bruynooghe, 1993) and used in MILES. * simple-subsumes: the simple implementation of -subsumption described in footnote 5 in this paper and in <ref> (Idestam-Almquist, 1993) </ref>. The clause in table 1 is the unreduced Plotkin-lgg of two arch examples of the blocksworld domain. Due to the not touches literal, parts of this clause deterministically -subsumes itself according to definition 5.
Reference: <author> Dolsak, B. and Muggleton, S. </author> <year> (1992). </year> <title> The application of inductive logic programming to finite element mesh design. </title> <editor> In Muggleton, S., editor, </editor> <booktitle> Inductive Logic Programming, </booktitle> <pages> pages 453-472. </pages> <publisher> Academic Press. </publisher>
Reference-contexts: We summarize the results of reducing lgg's and testing lgg's against the examples in several well known ILP-domains, i.e. krk (Quinlan, 1990), mesh <ref> (Dolsak and Muggleton, 1992) </ref>, and speed (Sommer et al., 1993). For this comparison we choose the following algorithms, implemented in Quintus Prolog and running on a Sun Sparc station IPX. * select-best-subsumes: A -subsumption algorithm, which tries to reduce backtracking by using maximally instantiated literals first. <p> Finally, we have investigated how these algorithms per-fom in practice. We used a Plotkin-lgg based ILP algorithm to learn concepts in different domains. Among these domains is the well known krk domain (Quinlan, 1990), which models an endgame situation of chess, the finite element mesh design domain <ref> (Dolsak and Muggle-ton, 1992) </ref>, and speed, a domain for managing the security policy of distributed open systems (Sommer et al., 1993). We use the reduction-algorithms to remove redundant literals from the lgg's and the subsumption-algorithms to test which examples are covered by the found hypotheses.
Reference: <author> Garey, M. R. and Johnson, D. S. </author> <year> (1979). </year> <title> Computers and Intractability A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <publisher> Cal. </publisher>
Reference-contexts: following two linked Horn clauses D and C: D = h (L) p (L; '(x 1 )); : : : ; p (L; '(x n )); c ('(l m1 ); '(l m2 ); '(l m3 )); C = h (sat) p (sat; 0); p (sat; 1); 2 As stated in <ref> (Garey and Johnson, 1979) </ref>, the NP-completeness of D ` C between two clauses C and D was originally proven in an unpublished paper by Baxter (1977).
Reference: <author> Gottlob, G. </author> <year> (1987). </year> <title> Subsumption and implication. </title> <journal> Information Processing Letters, </journal> <volume> 24 </volume> <pages> 109-111. </pages>
Reference: <author> Gottlob, G. and Fermuller, C. G. </author> <year> (1993). </year> <title> Removing redundancy from a clause. </title> <journal> Artificial Intelligence, </journal> <volume> 61 </volume> <pages> 263-289. </pages>
Reference-contexts: The complexity follows from theorem 5. 2 Note, that this algorithm also uses atmost jD NONDET j calls to the NP-complete -subsumption algorithm, as the algorithm of <ref> (Gottlob and Fermuller, 1993) </ref>. However, these calls involve much smaller clauses as in the algorithm of (Gottlob and Fermuller, 1993). <p> The complexity follows from theorem 5. 2 Note, that this algorithm also uses atmost jD NONDET j calls to the NP-complete -subsumption algorithm, as the algorithm of <ref> (Gottlob and Fermuller, 1993) </ref>. However, these calls involve much smaller clauses as in the algorithm of (Gottlob and Fermuller, 1993). As, we do not have an 6 Note that using find-det-sub all vars (fD 0 ; D DET g) have been replaced by ground terms, so that the locals share no variables.
Reference: <author> Gottlob, G. and Leitsch, A. </author> <year> (1985). </year> <title> On the efficiency of subsumption algorithms. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 32(2) </volume> <pages> 280-295. </pages>
Reference: <author> Idestam-Almquist, P. </author> <year> (1993). </year> <title> Generalization of clauses. </title> <type> PhD thesis, </type> <institution> Stockholm University. </institution>
Reference: <author> Jung, B. </author> <year> (1993). </year> <title> On inverting generality relations. </title> <booktitle> In Proc. of the third International Workshop on Inductive Logic Programming (ILP'93), </booktitle> <pages> pages 87 - 102, </pages> <institution> Ljubljana, Slovenia. J. Stefan Institute. </institution>
Reference-contexts: This is a consequence of Jung's theorem 4 <ref> (Jung, 1993) </ref>, i.e. generalized subsumption is equivalent to -subsumption between saturated clauses. For most LH used in ILP we only need to consider example clauses which are much smaller, i.e., example clauses which are instantiations of hypotheses.
Reference: <author> Kapur, D. and Narendran, P. </author> <year> (1986). </year> <title> NP-completeness of the set unification and matching problems. </title> <booktitle> In 8th International Conference on Automated Deduction, </booktitle> <publisher> LNCS 230. Springer. </publisher>
Reference: <author> Kietz, J.-U. and Wrobel, S. </author> <year> (1992). </year> <title> Controlling the complexity of learning through syntactic and task-oriented models. </title> <editor> In Muggleton, S., editor, </editor> <booktitle> Inductive Logic Programming, </booktitle> <pages> pages 107 - 126. </pages> <publisher> Academic Press. </publisher>
Reference: <author> Lavrac, N. and Dzeroski, S. </author> <year> (1993). </year> <title> Inductive Logic Programming: Techniques and Applications. </title> <publisher> Ellis Hor-wood, </publisher> <address> Chichester. </address>
Reference: <author> Lloyd, J. W. </author> <year> (1987). </year> <title> Foundations of Logic Programming. </title> <publisher> Springer, </publisher> <address> Berlin, New York, 2nd edition. </address>
Reference: <author> Morik, K., Wrobel, S., Kietz, J.-U., and Emde, W. </author> <year> (1993). </year> <title> Knowledge Acquisition and Machine Learning: Theory, Methods and Applications. </title> <publisher> Academic Press, Lon-don. </publisher>
Reference: <author> Muggleton, S. H., </author> <title> editor (1992). Inductive Logic Programming. </title> <publisher> Academic Press, London. </publisher>
Reference-contexts: We summarize the results of reducing lgg's and testing lgg's against the examples in several well known ILP-domains, i.e. krk (Quinlan, 1990), mesh <ref> (Dolsak and Muggleton, 1992) </ref>, and speed (Sommer et al., 1993). For this comparison we choose the following algorithms, implemented in Quintus Prolog and running on a Sun Sparc station IPX. * select-best-subsumes: A -subsumption algorithm, which tries to reduce backtracking by using maximally instantiated literals first.
Reference: <author> Muggleton, S. H. </author> <year> (1993). </year> <title> Inverting implication. </title> <journal> Artificial Intelligence Journal. </journal> <note> To appear. </note>
Reference-contexts: Hence, tautologies must be excluded from the learning situation. Concerning self-resolving clauses D, self-resolution of D is used to derive a clause D 0 from D. Then D j= C, iff D 0 ` C <ref> (Muggleton, 1993) </ref> . As -subsumption is only defined between two clauses, the use of background knowledge is excluded at first sight. To repair this deficiency Plotkin (1971) has defined the notion of subsumption relative to a background theory. Buntine (1988) defined a special case of relative subsumption called generalized subsumption.
Reference: <author> Muggleton, S. H. and Feng, C. </author> <year> (1990). </year> <title> Efficient induction of logic programs. </title> <booktitle> In Proc. First Conference on Algorithmic Learning Theory, </booktitle> <pages> pages 368-381. </pages> <publisher> Ohmsha, </publisher> <address> Tokyo. </address>
Reference-contexts: This leads to the following corollary. Corollary 3 Let D and C = C 0 C 1 ; : : : ; C m be two Horn clauses. If D is determinate according to the definition of <ref> (Muggleton and Feng, 1990) </ref> with respect to E = fC 0 g; B = ffC 1 g; : : : fC m gg and D ` C, then D ` DET C.
Reference: <author> Plotkin, G. D. </author> <year> (1970). </year> <title> A note on inductive generalization. </title> <editor> In Meltzer, B. and Michie, D., editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 5, chapter 8, </volume> <pages> pages 153 - 163. </pages> <publisher> American Elsevier. </publisher>
Reference-contexts: One type of redundancy elimination most often used in lgg-based learning systems is based on the equivalence relation induced by -subsumption: D ~ C iff C ` D and D ` C. Plotkin defines reduced clauses as clauses containing no redundant literals with respect to -subsumption <ref> (Plotkin, 1970) </ref>. Definition 7 A clause D is reduced iff C D and C ~ D imply C = D.
Reference: <author> Plotkin, G. D. </author> <year> (1971). </year> <title> Automatic Methods of Inductive Inference. </title> <type> PhD thesis, </type> <institution> Edinburgh University. </institution>
Reference: <author> Quinlan, J. R. </author> <year> (1990). </year> <title> Learning logical definitions from relations. </title> <journal> Machine Learning, </journal> <volume> 5(3):239 - 266. </volume>
Reference-contexts: We use artificial, constructed determinate k-local Horn clauses of increasing size to demonstrate the usefulness of the algorithms presented in section 3 for learning determinate k-local clauses. 3. We summarize the results of reducing lgg's and testing lgg's against the examples in several well known ILP-domains, i.e. krk <ref> (Quinlan, 1990) </ref>, mesh (Dolsak and Muggleton, 1992), and speed (Sommer et al., 1993). For this comparison we choose the following algorithms, implemented in Quintus Prolog and running on a Sun Sparc station IPX. * select-best-subsumes: A -subsumption algorithm, which tries to reduce backtracking by using maximally instantiated literals first. <p> Finally, we have investigated how these algorithms per-fom in practice. We used a Plotkin-lgg based ILP algorithm to learn concepts in different domains. Among these domains is the well known krk domain <ref> (Quinlan, 1990) </ref>, which models an endgame situation of chess, the finite element mesh design domain (Dolsak and Muggle-ton, 1992), and speed, a domain for managing the security policy of distributed open systems (Sommer et al., 1993).
Reference: <author> Robinson, J. </author> <year> (1965). </year> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12(1):23 - 41. </volume>
Reference: <author> Shapiro, E. Y. </author> <year> (1983). </year> <title> Algorithmic Program Debugging. </title> <publisher> ACM Distinguished Doctoral Dissertations. The MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference: <author> Sommer, E., Morik, K., Andre, J.-M., and Uszynski, M. </author> <year> (1993). </year> <title> What online machine learning can do for knowledge acquisition a case study. </title> <type> Technical report, GMD Report No. 757. </type>
Reference-contexts: We summarize the results of reducing lgg's and testing lgg's against the examples in several well known ILP-domains, i.e. krk (Quinlan, 1990), mesh (Dolsak and Muggleton, 1992), and speed <ref> (Sommer et al., 1993) </ref>. For this comparison we choose the following algorithms, implemented in Quintus Prolog and running on a Sun Sparc station IPX. * select-best-subsumes: A -subsumption algorithm, which tries to reduce backtracking by using maximally instantiated literals first. <p> Among these domains is the well known krk domain (Quinlan, 1990), which models an endgame situation of chess, the finite element mesh design domain (Dolsak and Muggle-ton, 1992), and speed, a domain for managing the security policy of distributed open systems <ref> (Sommer et al., 1993) </ref>. We use the reduction-algorithms to remove redundant literals from the lgg's and the subsumption-algorithms to test which examples are covered by the found hypotheses.
Reference: <author> Stahl, I. and Tausend, B. </author> <year> (1994). </year> <title> MILES- a Modular Inductive Logic Programming Experimentation System. </title> <institution> Institut fur Informatik, </institution> <note> Universitat Stuttgart. </note> <author> van der Laag, P. and Nienhuys-Cheng, S.-H. </author> <year> (1993). </year> <title> Sub-sumption and refinement in model inference. </title> <editor> In Brazdil, P. B., editor, </editor> <booktitle> European Conference on Machine Learning, volume 667 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer. </publisher>
Reference-contexts: This algorithm additionally remembers all literals of C which are used to show D ` C. This is used by the reduction algorithm select-best-reduce, which is based on this subsumption algorithm. * miles-correct-reduce: an algorithm for reducing clauses in the ILP-toolbox MILES using reso lution methods <ref> (Stahl and Tausend, 1994) </ref>. * prolog-subsumes 7 , this is based on prologs SLD-resolution.
References-found: 27

