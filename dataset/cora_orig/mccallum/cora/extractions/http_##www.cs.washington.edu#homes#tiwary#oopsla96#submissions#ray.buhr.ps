URL: http://www.cs.washington.edu/homes/tiwary/oopsla96/submissions/ray.buhr.ps
Refering-URL: http://www.cs.washington.edu/homes/tiwary/oopsla96/submissions/program.html
Root-URL: 
Title: Understanding Large-Scale Behaviour Patterns in Complex Systems with the automobile analogy, the behaviour of an
Author: R.J.A. Buhr 
Note: 1.0 The Problem Continuing  additional force to be applied to the wheels through the  automative engineer will, of course, work with the details, but will also work with the patterns and how they relate to the details.  
Address: Ottawa, Canada  
Affiliation: Department of Systems Computer Engineering Carleton University,  
Abstract: Understanding how a complex system works as a whole can be difficult because it requires blending information about structure and behaviour into a coherent whole that can be understood without reference to details of how its parts are constructed, behave internally, or interact. The problem is doubly difficult for software systems, because we do not any good large-scale models of such systems to keep in the minds eye. We have details in code files, low-level diagrams of software details (for example, class inheritance hierarchies), and system views of hardware environments, but these are not enough. We suggest that models of whole systems that we can diagram and hold in the minds eye are so important for human understanding of complex systems of all kinds that, if they do not exist, they must be invented. Use case maps are an example of a model invented for this purpose. While use case maps were invented to deal with the problems of understanding software systems, they are useful for complex systems of all kinds. Imagine the difficulty of trying to understand how a complex physical system, such as an automobile, will behave as a whole, by piecing together information from parts manuals for its subsystems, such as gearbox, transmission, steering, engine, and frame (to name but a few). Imagine how much more difficult it would be if you had never seen or driven an automobile, so that you had no physical model of the look and feel of a whole automobile in your minds eye to provide context. This seems analagous to trying to piece together an understanding of a software system from details at the level of programming-language classes and methods, because the details combine in complex ways and there are no physical models of software systems to hold in the minds eye to provide context. Thus the behaviour of physical systems such as automobiles can be understood in terms of generic behaviour patterns that may be seen in the minds eye in terms not only of the system as a black box, but also in terms of causal relationships that produce purposeful behaviour from the joint functioning of its parts. They are held in the minds eye in a high-level way based on observation of and experience. They are easily held in the minds eye because mechanical systems are concrete, physical things that behave according to familiar physical laws and constraints. Such patterns are different in scale and kind from software design patterns that are emerging in the object-oriented community, such as those catalogued in [6] or embodied in the ACE framework [11]. There are also analogies in the automotive world to detailed design patterns such as those of [6] and [11]. For example, a multiratio gearbox pattern may be used to provide a generic solution to the design problem of matching a narrow range of engine speeds to a much wider range of automobile speeds. Such detailed patterns contribute to achieving higher level patterns such as steady progress and recovering from a skid, but one would not normally try to understand the higher level patterns in terms of pieced-together details except as a means of verifying that the details achieve the desired higher level results. We suggest that high-level behaviour patterns such as steady progress and recovering from a skid are also part of how we think about, understand, and design software systems. For example, recovering from a skid might be analagous to recovering from a communications failure in a distributed software system 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> R.J.A. Buhr, A. </author> <title> Hubbard,Understanding Real-Time and Distributed Systems Constructed with Frameworks, </title> .... 
Reference-contexts: bridge between requirements and DD solutions. 2.0 A Quick Glance at an Example Let us take a quick look at some highlights of a gateway system that is provided as an example with Doug Schmidts ACE framework (these are highlights of a case study written up in more detail elsewhere <ref> [1] </ref>). Three diagrams describing this system are appended at the end of this paper. The top diagram indicates that the gateway system is a distributed software application in which peer workstations use a gateway workstation to route messages to other peers.
Reference: [2] <author> R.J.A. Buhr, </author> <title> Use Case Maps for Attributing Behaviour to Architecture, SCE-96-2: July 24, </title> <booktitle> 1996, Contribution to the Fourth International Workshop on Parallel and Distributed Real Time Systems (WPDRTS), </booktitle> <address> April 15-16, 1996, Honolulu, Hawaii, http:// ftp.sce.carleton.ca/UseCaseMaps/attributing.ps. </address>
Reference: [3] <author> R.J.A. Buhr, R.S. Casselman, T.W. Pearce, </author> <title> Design Patterns with Use Case Maps:A Case Study in Reengineering an Object-Oriented Framework, </title> <address> SCE 95-17, http://ftp.sce.carleton.ca/UseCaseMaps/ dpwucm.ps. </address>
Reference: [4] <author> R.J.A. Buhr, </author> <title> R.S. Casselman, Use Case Maps for Object-Oriented Systems, </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference: [5] <author> B. Regnell, M. Andersson, J. Bergstrand, </author> <title> A Hierarchical Use Case Model with Graphical Representation, </title> <booktitle> Proc. ECBS96, IEEE Second International Symposium and Workshop on Engineering of Computer Based Systems, </booktitle> <month> March </month> <year> 1996. </year>
Reference: [6] <author> E. Gamma, R. Helm, R. Johnson, J. Vlissades, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: They are easily held in the minds eye because mechanical systems are concrete, physical things that behave according to familiar physical laws and constraints. Such patterns are different in scale and kind from software design patterns that are emerging in the object-oriented community, such as those catalogued in <ref> [6] </ref> or embodied in the ACE framework [11]. There are also analogies in the automotive world to detailed design patterns such as those of [6] and [11]. <p> Such patterns are different in scale and kind from software design patterns that are emerging in the object-oriented community, such as those catalogued in <ref> [6] </ref> or embodied in the ACE framework [11]. There are also analogies in the automotive world to detailed design patterns such as those of [6] and [11]. For example, a multiratio gearbox pattern may be used to provide a generic solution to the design problem of matching a narrow range of engine speeds to a much wider range of automobile speeds. <p> The HLD domain could also be referred to as the system architecture domain, assuming behaviour patterns are seen as part of architecture. The DD domain is at the level of detailed mechanical patterns such as multiratio gearbox, or software patterns such as those of <ref> [6] </ref> and [11]. For software, the DD domain uses popular design notations such as detailed class relationship diagrams, message sequence charts, object interaction diagrams, object visibility diagrams, and state transition diagrams.
Reference: [7] <author> I. Jacobson et. al., </author> <title> Object-Oriented Software Engineering (A Use Case Driven Approach). </title> <publisher> ACM Press, Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: UCMs are maps of cause-effect paths taken through systems by the scenarios of use cases <ref> [7] </ref>. The term use case is not restricted to human users interacting with system externalsin general, the term includes the possibility of scenerios involving many systems or subsystems that are users of each other.
Reference: [8] <author> B. Selic, G. Gullickson and P.T. Ward, </author> <title> Real-time Object-Oriented Modeling,Wiley, </title> <year> 1994. </year>
Reference: [9] <author> Shaw and Garlan, </author> <title> Software Architecture: Perspectives on an Emerging Discipline, </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference: [10] <author> CCITT Recommendation Z120: </author> <title> Message Sequence Charts (MSC), undated document. </title>

References-found: 10

