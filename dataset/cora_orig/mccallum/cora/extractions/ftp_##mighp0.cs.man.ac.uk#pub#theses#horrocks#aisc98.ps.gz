URL: ftp://mighp0.cs.man.ac.uk/pub/theses/horrocks/aisc98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/mig/people/horrocks/publications.html
Root-URL: http://www.cs.man.ac.uk
Email: (horrocks@cs.man.ac.uk)  (pfps@research.bell-labs.com)  
Phone: 2  
Title: Optimising Propositional Modal Satisfiability for Description Logic Subsumption  
Author: Ian Horrocks and Peter F. Patel-Schneider 
Address: Manchester, Manchester, UK  Murray Hill, NJ, U.S.A.  
Affiliation: 1 University of  Bell Labs Research,  
Abstract: Effective optimisation techniques can make a dramatic difference in the performance of knowledge representation systems based on expressive description logics. Because of the correspondence between description logics and propositional modal logic many of these techniques carry over into propositional modal logic satisfiability checking. Currently-implemented representation systems that employ these techniques, such as FaCT and DLP, make effective satisfiable checkers for various propositional modal logics. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> F. Baader, E. Franconi, B. Hollunder, B. Nebel, and H.-J. </editor> <title> Profitlich. An empirical analysis of optimization techniques for terminological representation systems or: Making KRIS get a move on. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 270281. </pages> <publisher> Morgan-Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1992. </year> <note> Also available as DFKI RR-93-03. </note>
Reference-contexts: in this form is no more complex than if they are in negation normal form: :(8R:C) can be dealt with in the same way as 9R::C and 2 KRIS addresses the same problem, in a less complete manner, by lazily expanding named concepts, and retaining their names in node labels <ref> [1] </ref>. 3 A similar technique is used in KSAT, but without the benefit of tagging [9]. :(C 1 u; : : : ; uC n ) can be dealt with in the same way as (:C 1 t; : : : ; t:C n ).
Reference: 2. <author> F. Baader and B. Hollunder. KRIS: </author> <title> Knowledge representation and inference system. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3):814, </volume> <year> 1991. </year>
Reference-contexts: Thus one part of a system that implements a description logic is equivalent to a satisfiability checker for a propositional modal or dynamic logic. Several description logic systems have been built for such description logics, and thus include what is essentially a satisfiability checker, including KRIS <ref> [2] </ref> and CRACK [5]. These two systems have incorporated a number of optimisations to achieve better performance of their subsumption checkers. Description logic systems are also optimised in other ways. In particular, their operations are optimised to avoid the potentially-costly subsumption checks whenever possible. <p> Determining subsumption in ALC R + is PSPACE-complete [15], as is the related problem of determining whether a concept in ALC R + is satisfiable. However, it is possible to build practical description logic systems based on expressive description logics <ref> [2, 5, 11] </ref> that have this sort of computationally intractable subsumption.
Reference: 3. <author> A. B. Baker. </author> <title> Intelligent Backtracking on Constraint Satisfaction Problems: Experimental and Theoretical Results. </title> <type> PhD thesis, </type> <institution> University of Oregon, </institution> <year> 1995. </year>
Reference-contexts: The search tree created by the tableau expansion algorithm is illustrated in Fig. 1. This problem is addressed by adapting a form of dependency directed backtracking called backjumping, which has been used in solving constraint satisfiability problems <ref> [3] </ref> (a similar technique was also used in the HARP theorem prover [13]). Back-jumping works by labeling concept expressions with a dependency set indicating the branching points on which they depend.
Reference: 4. <author> P. Balsiger and A. Heuerding. </author> <title> Comparison of theorem provers for modal logics introduction and summary. </title> <editor> In H. de Swart, editor, </editor> <title> Automated Reasoning with Analytic Tableaux and Related Methods: </title> <booktitle> International Conference Tableaux'98, number 1397 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 2526. </pages> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1998. </year>
Reference-contexts: Even DLP fl performed better than other systems due to the optimizations retained in it. DLP also outperformed the other systems that took part in the the Tableaux'98 comparison <ref> [4] </ref>. Further analysis of the difference between DLP and DLP fl , not presented here because of space limitations, shows that caching is more important than backjumping in these tests, which is more important than the heuristics. In fact the heuristics significantly degraded performance in some cases.
Reference: 5. <author> P. Bresciani, E. Franconi, and S. Tessaris. </author> <title> Implementing and testing expressive description logics: a preliminary report. </title> <editor> In Gerard Ellis, Robert A. Levinson, Andrew Fall, and Veronica Dahl, editors, </editor> <title> Knowledge Retrieval, Use and Storage for Efficiency: </title> <booktitle> Proceedings of the First International KRUSE Symposium, </booktitle> <pages> pages 2839, </pages> <year> 1995. </year>
Reference-contexts: Thus one part of a system that implements a description logic is equivalent to a satisfiability checker for a propositional modal or dynamic logic. Several description logic systems have been built for such description logics, and thus include what is essentially a satisfiability checker, including KRIS [2] and CRACK <ref> [5] </ref>. These two systems have incorporated a number of optimisations to achieve better performance of their subsumption checkers. Description logic systems are also optimised in other ways. In particular, their operations are optimised to avoid the potentially-costly subsumption checks whenever possible. <p> Determining subsumption in ALC R + is PSPACE-complete [15], as is the related problem of determining whether a concept in ALC R + is satisfiable. However, it is possible to build practical description logic systems based on expressive description logics <ref> [2, 5, 11] </ref> that have this sort of computationally intractable subsumption.
Reference: 6. <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A machine program for theorem proving. </title> <journal> Communications of the ACM, </journal> <volume> 5:394397, </volume> <year> 1962. </year>
Reference-contexts: fCg ) clash L (x) [ fD 1 g L (x 2 ) [ fCg ) clash L (x 2 ) [ fD 2 g This problem is dealt with by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPLL) commonly used to solve propositional satisfiability (SAT) problems <ref> [6, 8] </ref>. Instead of choosing an unexpanded disjunction in L (x), a single disjunct D is chosen from one of the unexpanded disjunctions in L (x). The two possible sub-trees obtained by adding either D or :D to L (x) are then searched.
Reference: 7. <author> F. Donini, G. De Giacomo, and F. Massacci. </author> <title> EXPTIME tableaux for ALC. </title> <editor> In L. Padgham, E. Franconi, M. Gehrke, D. L. McGuinness, and P. F. Patel-Schneider, editors, </editor> <booktitle> Collected Papers from the International Description Logics Workshop (DL'96), number WS-96-05 in AAAI Technical Report, </booktitle> <pages> pages 107110. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, California, </address> <year> 1996. </year>
Reference-contexts: The satisfiability status of the node is then completely determined by this set of concept expressions. Then, if there exists another node with the same set of initial formulae the two nodes will have the same satisfiability status <ref> [7] </ref>. Thus work need be done only on one of the two nodes, potentially saving a considerable amount of processing, as not only is the work at one of the nodes saved, but also the work at any of the successors of this node.
Reference: 8. <author> J. W. Freeman. </author> <title> Hard random 3-SAT problems and the Davis-Putnam procedure. </title> <journal> Artificial Intelligence, </journal> <volume> 81:183198, </volume> <year> 1996. </year>
Reference-contexts: fCg ) clash L (x) [ fD 1 g L (x 2 ) [ fCg ) clash L (x 2 ) [ fD 2 g This problem is dealt with by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPLL) commonly used to solve propositional satisfiability (SAT) problems <ref> [6, 8] </ref>. Instead of choosing an unexpanded disjunction in L (x), a single disjunct D is chosen from one of the unexpanded disjunctions in L (x). The two possible sub-trees obtained by adding either D or :D to L (x) are then searched. <p> Boolean constraint propagation (BCP) is a technique used to maximise deterministic expansion, and thus pruning of the search tree via clash detection, before performing non-deterministic expansion (branching) <ref> [8] </ref>. Before semantic branching is applied to the label of a node x, BCP deterministically expands disjunctions in L (x) which present only one expansion possibility and detects a clash when a disjunction in L (x) has no expansion possibilities. <p> A method which is widely used in DPLL SAT algorithms is to branch on the disjunct which has the Maximum number of Occurrences in disjunctions of Minimum Size <ref> [8] </ref>. By choosing a disjunct which occurs frequently in small disjunctions, this heuristic tries to maximise the effect of BCP.
Reference: 9. <author> F. Giunchiglia and R. Sebastiani. </author> <title> A SAT-based decision procedure for ALC. </title> <editor> In L. C. Aiello, J. Doyle, and S. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 304314. </pages> <publisher> Morgan Kauf-mann Publishers, </publisher> <address> San Francisco, CA, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: :(8R:C) can be dealt with in the same way as 9R::C and 2 KRIS addresses the same problem, in a less complete manner, by lazily expanding named concepts, and retaining their names in node labels [1]. 3 A similar technique is used in KSAT, but without the benefit of tagging <ref> [9] </ref>. :(C 1 u; : : : ; uC n ) can be dealt with in the same way as (:C 1 t; : : : ; t:C n ). <p> As the alternative branches of the search tree are not disjoint, there is nothing to prevent the recurrence of an un-satisfiable disjunct in different branches <ref> [9] </ref>. The resulting wasted expansion could be costly if discovering the unsatisfiability requires the solution of a complex sub-problem. <p> Our second propositional modal logic test suite uses a method for testing SAT decision procedures that has been adapted for use with propositional modal K by Giunchiglia and Sebastiani <ref> [9] </ref>, and further refined by Hustadt and Schmidt [12]. The method uses a random generator to produce formulae, with the characteristics of the formulae being controlled by a number of parameters.
Reference: 10. <author> A. Heuerding and S. Schwendimann. </author> <title> A benchmark method for the propositional modal logics k, kt, </title> <type> s4. Technical report IAM-96-015, </type> <institution> University of Bern, Switzerland, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: Our other testing has been against test suites for propositional modal logics, using the propositional modal logic interface for FaCT and DLP. We have tested against the test suite for the Tableaux'98 propositional modal logic comparison <ref> [10] </ref> and against a collection of random formulae initially generated by Hustadt and Schmidt [12]. The Tableaux'98 test suite consists of several classes of formulae (e.g. branch), in both provable (p) and non-provable (n) forms, for each of K, KT, and S4.
Reference: 11. <author> I. Horrocks. </author> <title> Optimising Tableaux Decision Procedures for Description Logics. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1997. </year>
Reference-contexts: We have built two systems that explore the optimisations required to build an expressive description logic system, namely FaCT <ref> [11] </ref>, a full description logic system, and DLP [14], an experimental system providing only a limited description logic in-terface. FaCT is available at http://www.cs.man.ac.uk/horrocks; DLP is available at http://www-db.research.bell-labs.com/user/pfps. We have incorporated a range of known, adapted and novel optimisation techniques into the subsumption checkers for these two systems. <p> Determining subsumption in ALC R + is PSPACE-complete [15], as is the related problem of determining whether a concept in ALC R + is satisfiable. However, it is possible to build practical description logic systems based on expressive description logics <ref> [2, 5, 11] </ref> that have this sort of computationally intractable subsumption. <p> Unfortunately this heuristic interacts adversely with the backjumping optimisation by overriding any oldest first order for choosing disjuncts: older disjuncts are those which resulted from earlier branching points and will thus lead to more effective pruning if a clash is discovered <ref> [11] </ref>.
Reference: 12. <author> U. Hustadt and R. A. Schmidt. </author> <title> On evaluating decision procedures for modal logic. </title> <type> Technical Report MPI-I-97-2-003, </type> <institution> Max-Planck-Institut Fur Informatik, Im Stadtwald, D 66123 Saarbrucken, Germany, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: We have tested against the test suite for the Tableaux'98 propositional modal logic comparison [10] and against a collection of random formulae initially generated by Hustadt and Schmidt <ref> [12] </ref>. The Tableaux'98 test suite consists of several classes of formulae (e.g. branch), in both provable (p) and non-provable (n) forms, for each of K, KT, and S4. <p> Our second propositional modal logic test suite uses a method for testing SAT decision procedures that has been adapted for use with propositional modal K by Giunchiglia and Sebastiani [9], and further refined by Hustadt and Schmidt <ref> [12] </ref>. The method uses a random generator to produce formulae, with the characteristics of the formulae being controlled by a number of parameters. Each formula is a conjunction of L K-clauses, where a K-clause is a disjunction of K elements, each element being negated with a probability of 0.5.
Reference: 13. <author> F. Oppacher and E. Suen. HARP: </author> <title> A tableau-based theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4:69100, </volume> <year> 1988. </year>
Reference-contexts: The search tree created by the tableau expansion algorithm is illustrated in Fig. 1. This problem is addressed by adapting a form of dependency directed backtracking called backjumping, which has been used in solving constraint satisfiability problems [3] (a similar technique was also used in the HARP theorem prover <ref> [13] </ref>). Back-jumping works by labeling concept expressions with a dependency set indicating the branching points on which they depend.
Reference: 14. <author> P. F. Patel-Schneider. </author> <title> System description: </title> <institution> DLP. Bell Labs Research, </institution> <address> Murray Hill, NJ, </address> <month> De-cember </month> <year> 1997. </year>
Reference-contexts: We have built two systems that explore the optimisations required to build an expressive description logic system, namely FaCT [11], a full description logic system, and DLP <ref> [14] </ref>, an experimental system providing only a limited description logic in-terface. FaCT is available at http://www.cs.man.ac.uk/horrocks; DLP is available at http://www-db.research.bell-labs.com/user/pfps. We have incorporated a range of known, adapted and novel optimisation techniques into the subsumption checkers for these two systems.
Reference: 15. <author> U. Sattler. </author> <title> A concept language extended with different kinds of transitive roles. </title> <editor> In G. Gorz and S. Holldobler, editors, </editor> <booktitle> 20. Deutsche Jahrestagung fur Kunstliche Intelligenz, number 1137 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 333345. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: ALC R + can also express formulae in KT (m) and S4 (m) via the usual encoding that maps 8R:C into C u 8R:C, etc. Determining subsumption in ALC R + is PSPACE-complete <ref> [15] </ref>, as is the related problem of determining whether a concept in ALC R + is satisfiable. However, it is possible to build practical description logic systems based on expressive description logics [2, 5, 11] that have this sort of computationally intractable subsumption. <p> If the algorithm fails to construct such a collection then the initial concept (formula) has no modelit is said to be unsatisfiable. The details of the algorithm, including precise termination conditions, are fairly standard, and can be found in <ref> [15] </ref>. 3 Optimisation Techniques The basic algorithm given above is too slow to form the basis of a useful description logic system.
Reference: 16. <author> K. Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 466471, </pages> <year> 1991. </year>
Reference-contexts: As description logic systems perform numerous subsumption checks in the course of their operations, they need to have a highly-optimised subsumption checker. Recent work <ref> [16] </ref> has shown that determining subsumption in expressive description logics is equivalent to determining satisfiability of formulae in propositional modal or dynamic logics. Thus one part of a system that implements a description logic is equivalent to a satisfiability checker for a propositional modal or dynamic logic.
References-found: 16

