URL: http://www.cse.psu.edu/~vaidya/papers/icpp.ps
Refering-URL: http://www.cse.psu.edu/~vaidya/publications.html
Root-URL: http://www.cse.psu.edu
Email: fvaidya j yoo j dasg@cse.psu.edu jkim@vision.postech.ac.kr  
Title: A Task-Based Dependability Model for k-ary n-cubes  
Author: Aniruddha S. Vaidya Byung S. Yoo Chita R. Das Jong Kim 
Address: Park, PA 16802 Pohang 790-784, South Korea  
Affiliation: Dept. of Computer Science and Engg. Dept. of Computer Science and Engg. The Pennsylvania State University Pohang University of Science and Technology University  
Abstract: Dependability (reliability and availability) modeling of k-ary n-cube architectures is addressed in this paper. The dependability model considered here is known as task-based dependability because the system working condition is specified by the task requirement. For the k-ary n-cube, we therefore compute the probability of finding a working k-ary m-cube. Due to the complexity of the problem, a structural decomposition technique is used to develop the analytical model. Two probability terms are required for computing either reliability or availability. The first term finds the probability that there are x working nodes in the system. Computation of this term for the availability analysis needs the solution of a simple Markov chain. The second term finds the probability that the x working nodes form the required subcube, called the task connection probability. A recursive expression is developed for this. Analytical results are provided for various system configurations and task requirements. It is shown through simulation that the analytical model is quite accurate. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. J. Dally, </author> <title> "Performance analysis of k-ary n-cube interconnection networks," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 39, </volume> <pages> pp. 775-785, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The k-ary n-cube is a direct network that has received increasing attention due to its desirable graph theoretical properties that are conducive from an architectural standpoint. A k-ary n-cube is a generalized n-dimensional structure where each dimension has an arity of k <ref> [1, 2] </ref>. Commercial and experimental machines that are built on this topology are the nCUBE, the MIT J-Machine, and the Cray T3D. A number of other machines can also be considered as instances of this topology. The focus of this paper is on the k-ary n-cube dependability.
Reference: [2] <author> B. Bose, B. Broeg, Y. Kwon, and Y. Ashir, </author> <title> "Lee Distance and Topological Properties of k-ary n-cubes," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 44, </volume> <pages> pp. 1021-1030, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The k-ary n-cube is a direct network that has received increasing attention due to its desirable graph theoretical properties that are conducive from an architectural standpoint. A k-ary n-cube is a generalized n-dimensional structure where each dimension has an arity of k <ref> [1, 2] </ref>. Commercial and experimental machines that are built on this topology are the nCUBE, the MIT J-Machine, and the Cray T3D. A number of other machines can also be considered as instances of this topology. The focus of this paper is on the k-ary n-cube dependability. <p> Second, since a number of topologies can be mapped onto the k-ary n-cube <ref> [2] </ref>, the task-based dependability model [4] becomes quite involved and challenging. Third, the high arity of this architecture (large k) brings in interesting theoretical issues that need careful examination in developing an efficient model.
Reference: [3] <author> S. Abraham and K. Padmanabhan, </author> <title> "Reliability of the Hypercube," </title> <booktitle> in Proc. of the Intl. Conf. on Parallel Processing, </booktitle> <volume> vol. I, </volume> <pages> pp. 90-94, </pages> <month> August </month> <year> 1988. </year>
Reference: [4] <author> C. R. Das and J. Kim, </author> <title> "A Unified Task-Based Dependability Model for Hypercube Computers," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 312-324, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Second, since a number of topologies can be mapped onto the k-ary n-cube [2], the task-based dependability model <ref> [4] </ref> becomes quite involved and challenging. Third, the high arity of this architecture (large k) brings in interesting theoretical issues that need careful examination in developing an efficient model. Finally, it has been argued earlier that dependability analysis of large interconnection networks is extremely complex [4]. <p> [2], the task-based dependability model <ref> [4] </ref> becomes quite involved and challenging. Third, the high arity of this architecture (large k) brings in interesting theoretical issues that need careful examination in developing an efficient model. Finally, it has been argued earlier that dependability analysis of large interconnection networks is extremely complex [4]. This complexity becomes evident in the development of the present model. The dependability model considered here is known as task-based dependability since the operational status of a system is dictated by the job or task requirement. <p> In other words, a system is considered operational as long as a task can be executed on the system. Since a system could be used in a single user mode or a multi-user mode, the model should address both uni-task dependability or multi-task dependability <ref> [4] </ref>. However, in this paper we restrict our attention to uni-task dependability, as this problem by itself is quite involved. Multi-task dependability can be obtained by direct extension of uni-task dependability as in [4]. <p> single user mode or a multi-user mode, the model should address both uni-task dependability or multi-task dependability <ref> [4] </ref>. However, in this paper we restrict our attention to uni-task dependability, as this problem by itself is quite involved. Multi-task dependability can be obtained by direct extension of uni-task dependability as in [4]. Since a variety of task graphs can be mapped on to a k-ary n-cube, unambiguous specification of the task requirement is essential to develop the dependability model. The most natural subgraph of a k-ary n-cube is a k-ary m-cube, for m n. <p> Both reliability and availability can be predicted by the model. Conceptually the approach used in this pa per is similar to that for hypercube dependability <ref> [4] </ref>. Since it is probably impossible to construct a single-level Markov Chain (MC) for this architecture, we use a structural decomposition approach to tackle the problem. Two terms are required for computing the dependability. <p> The second term denotes the probability that the x working nodes form at least the required subcube (k-ary m-cube) for the task. This is called the task connection probability. Computation of this term is the most challenging part that makes it different from the hypercube model <ref> [4] </ref>. A k-ary n-cube can be decomposed to k k-ary (n 1)-cubes, each (n 1)-cube in turn can be decomposed to k (n 2)-cubes and so on. This recursive decomposition is utilized in developing the task connection probability model. <p> Also, another problem with such an approach is that of a very large state space or state space explosion. These issues, which are applicable to the binary n-cube dependability modeling and which apply to this model too, are discussed in greater detail in <ref> [4] </ref>. Thus, we use a structural decomposition approach to determine the TD of k-ary n-cubes. <p> This approach of determining the task-based dependability was first proposed by Das and Kim <ref> [4] </ref>, for the binary n-cube (hypercube) systems. <p> The determination of this part makes the problem more difficult and different from that of a hypercube <ref> [4] </ref>. The procedure for computing this term is facilitated by the symmetry and the recursive definition of the k-ary n-cube. As discussed in Section 2 earlier, a k-ary n-cube can be considered to be composed of k disjoint k-ary (n 1)-cubes. <p> It is shown that the model is quite accurate and the maximum error between the analysis and simulation is limited to about 6%. The proposed model is a generalization of the hypercube dependability model <ref> [4] </ref>. However, unlike the hypercube model, the large arity k made the task connection probability computation extremely difficult. Therefore, we had to use efficient integer partitioning and various optimization techniques for numerical computation to handle problems such as computation of large combinatorial expressions.
Reference: [5] <author> J. T. Blake and K. S. Trivedi, </author> <title> "Reliability Analysis of Interconnection Networks Using Hierarchical Decomposition," </title> <journal> IEEE Trans. on Reliability, </journal> <pages> pp. 111-120, </pages> <month> April </month> <year> 1989. </year>
Reference: [6] <author> C. R. Das, P. Mohapatra, L. Tien, and L. N. Bhuyan, </author> <title> "An Availability Model for MIN-Based Multiprocessors," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 1118-1129, </pages> <month> Octo-ber </month> <year> 1993. </year>
Reference: [7] <author> P. Mohapatra and C. R. Das, </author> <title> "On Dependability Evaluation of Mesh-Connected Processors," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 44, </volume> <pages> pp. 1073-1084, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: A fl This research was supported in part by the National Science Foundation under Grant No. MIP-9406984. large body of literature is available on the dependability modeling of a variety of interconnection networks such as hypercubes [3,4], MINs [5,6] and meshes <ref> [7] </ref>. However, there is no reported work on the k-ary n-cube dependability. Dependability analysis of the k-ary n-cube becomes an interesting problem due to a number of reasons.
Reference: [8] <author> R. A. Sahner and K. S. Trivedi, SHARPE: </author> <title> Symbolic Hierarchical Automated Reliability and Performance Evaluator. Introduction and Guide for Users, </title> <month> February </month> <year> 1992. </year>
Reference-contexts: For nonrepairable systems, this is a simple combinatorial expression, whereas a Markov Chain solution is required for systems with repair facility. However, the MC is quite simple, has no state space problem, and is easily solved using a package, called SHARPE <ref> [8] </ref>. The second term denotes the probability that the x working nodes form at least the required subcube (k-ary m-cube) for the task. This is called the task connection probability. Computation of this term is the most challenging part that makes it different from the hypercube model [4]. <p> F i represents the failed state i, for I i N . The system can move from a working state to a failed state due to imperfect coverage (1 C) or imprecise repair (1 r). The MC can be solved numerically using a package such as SHARPE <ref> [8] </ref>, to determine the individual state probabilities. We are interested in the probability that the system is in state-x at time t, which is represented by A (k;n;x) (t). The above discussion presents the methodology to compute the probability of finding x working nodes at time t. <p> Computation of the task-based reliability can be done in a straight forward manner using (2). Computation of the task-based availability using (3) requires solution of a simple machine-repairperson Markov model in addition to the task connection probability. A software package called SHARPE <ref> [8] </ref> is used for solving the Markov model. 4.2 Simulation An extensive simulation study was conducted to validate the proposed analytical model. As in the analytical model, exponential failure and repair rate distributions were used for the simulation. We have implemented an event driven simulator.
Reference: [9] <author> Y. Zhu, </author> <title> "Efficient Processor Allocation Strategies for Mesh-Connected Parallel Computers," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 16, </volume> <pages> pp. 328-337, </pages> <year> 1992. </year>
Reference-contexts: The process of finding an available subcube for a task is called processor allocation. In this work, we only consider cubic requests, denoted by Q k m . We use the first fit (FF) <ref> [9] </ref> allocation algorithm for processor allocation. The FF algorithm was originally proposed for submesh allocation in two-dimensional meshes. Note that Q k m includes m-dimensional meshes of arity k. This algorithm is slightly modified so that it can be used to allocate subcube requests for k-ary n-cubes. <p> The original FF algorithm doesn't have the perfect subcube recognition ability. By considering all the possible orientations of incoming requests, the modified FF algorithm can provide the perfect sub-cube recognition ability. For detailed description of the algorithm, the reader should refer to <ref> [9] </ref>. Also, we are only considering modeling a single task (dedicated system) execution environment. Multitask dependability model is an extension of this model. Fig. 1 shows a Q 3 3 with an allocated subcube Q 3 2 . The allocated subcube is depicted by dark circles.
Reference: [10] <author> A. S. Vaidya, B. S. Yoo, and C. R. Das, </author> <title> "Sub-cube Dependability Modeling in k-ary n-cubes," </title> <type> Tech. Rep. </type> <institution> CSE-96-037, The Dept. of Computer Science and Engineering, The Pennsylvania State University, </institution> <year> 1996. </year>
Reference-contexts: However, with a more relaxed definition for a subcube, other ways of finding subcubes across the k (n 1)-cubes are possible. For the sake of brevity, we do not present the proof of the above theorem. The detailed proof can be found in <ref> [10] </ref>.
Reference: [11] <author> A. Nijenhuis and H. S. Wilf, </author> <title> Combinatorial Algorithms. </title> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: A critical part of the probability computation requires the determination of k-way partitions of a certain number of working nodes. This requires use of a partitioning algorithm for generating the k-way partitions of an integer. In our implementation, we used a modified version of the NEXTPAR algorithm of <ref> [11] </ref>. The NEXTPAR algorithm can be used to generate all partitions of an integer. We have modified this algorithm to generate only certain k-way partitions of interest to us.
References-found: 11

