URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-98-21.PS.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Email: jlp@cs.virginia.edu  drm9f@cs.virginia.edu  wre6s@virginia.edu  
Title: Representing Metadata in the ADAMS Database System  
Author: John L. Pfaltz David R. Mikesell William R. Emanuel 
Note: This research was supported in part by DOE Grant DE-FG05-95ER25254, and NASA's Mission to Planet Earth through Grant NAGW 2669.  
Date: July, 25 1998  
Address: Charlottesville VA  
Affiliation: Computer Science Department  Department of Environmental Science University of Virginia,  
Pubnum: Computer Science TR-98-21  
Abstract: A major concern of environmental scientists, and others with long term data requirements, has been the establishment of metadata standards so that data recorded today will be accessible 50 to 100 years hence. We contend that more important than the standards themselves will be a context in which they can be represented and can evolve as new requirements and technologies emerge. In this paper, we discuss an object oriented language which facilitates both the representation of metadata and its graceful evolution. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [AIL96] <author> V. Anjur, Y. E. Ioannidis and M. Livny, FROG and TURTLE: </author> <title> Visual Bridges Between Files and Object-Oriented Data, </title> <booktitle> in 8th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> P. Svensson and J. C. French (editors), </editor> <publisher> IEEE Press, </publisher> <address> Stockholm, </address> <month> June </month> <year> 1996, </year> <pages> 76-85. </pages>
Reference-contexts: One example of this kind of module interconnection can be found in <ref> [AIL96] </ref>. language, using for example the syntax of C++, need not gracefully migrate to some different, higher--level object-oriented language of the future. If an embedded metadata language can interface with two, or more, current programming languages, it can probably accommodate yet another ten years hence.
Reference: [BKK87] <author> J. Banerjee, W. Kim, H. Kim and H. F. Korth, </author> <title> Semantics and Implementation of Schema Evolution in Object-Oriented Databases, </title> <booktitle> Proceedings 1987 SIGMOD Conference, </booktitle> <address> San Francisco, CA, </address> <month> December </month> <year> 1987, </year> <pages> 311-322. </pages>
Reference-contexts: Adding, or deleting, attributes from the set of associated attributes is fundamental to schema evolution. Some have suggested that real schema evolution must involve more than just adding or deleting attributes, c.f . <ref> [BKK87, MoS93, Rod92] </ref>. However, evolving schema constraints and class methods is much more complex, and this ability to evolve schema "on the fly" without recompilation of code and without reformatting storage seems to be an important first step. Adding documentation is more complex. We must declare three new object classes.
Reference: [Bar94] <author> J. Barnett, </author> <title> The Schlumberger Data Model: A Meta Based Data Modeling Methodology, </title> <booktitle> IEEE Workshop on Metadata for Scientific and Technical Data Management, </booktitle> <address> Washington, DC, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The reader can easily identify examples of metadata associated with each of these functions. The interest in metadata has also generated considerable pressure to develop a set of standards specifying "what metadata should be provided" (a) to facilitate access to distributed data sets <ref> [Bar94] </ref>, (b) to interpret complex spatial data [FGD94], or (c) to ensure that long term data sets can be accurately interpreted in the future [Bla96, KGM96, Rot96]. The authors have encountered this metadata problem in the specific context of a global change simulation.
Reference: [Bla96] <author> G. Bland, </author> <title> EOSDIS Core System Metadata Design, </title> <booktitle> 1st IEEE Metadata Conference, </booktitle> <address> Bethesda, MD, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: metadata has also generated considerable pressure to develop a set of standards specifying "what metadata should be provided" (a) to facilitate access to distributed data sets [Bar94], (b) to interpret complex spatial data [FGD94], or (c) to ensure that long term data sets can be accurately interpreted in the future <ref> [Bla96, KGM96, Rot96] </ref>. The authors have encountered this metadata problem in the specific context of a global change simulation. We are implementing a large global environmental change system that had been written in Fortran using flat files for storage to one written in C using object-oriented database technology for storage.
Reference: [Bre93] <author> F. P. Bretherton, </author> <title> Reference Model for Metadata: A Strawman, </title> <booktitle> IEEE Workshop on Metadata for Scientific and Technical Data Management, </booktitle> <address> College Park, MD, </address> <month> May </month> <year> 1993. </year> <note> (position paper). </note>
Reference-contexts: 1. Introduction In the IEEE Metadata Workshop of 1993, Francis Bretherton asked a fundamental question, "if scientists fifty, one hundred, or two hundred years in the future look at the data we are recording now, will there be sufficient metadata for them to use it effectively?" <ref> [Bre93] </ref>. The answer, which was almost universally echoed by the participants, has been a resounding "no".
Reference: [BrS94] <author> F. P. Bretherton and P. T. Singley, </author> <title> Metadata: A User's View, </title> <booktitle> in 7th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> J. C. French and H. Hinterberger (editors), </editor> <publisher> IEEE Press, </publisher> <month> September </month> <year> 1994, </year> <pages> 166-174. </pages>
Reference-contexts: Only then does guide metadata facilitate automatic searching, browsing and retrieval. This suggests another taxonomy of metadata based on its intended usage including those above, and: ingest, quality assurance, reprocessing, machine to machine transfer, storage and archival functions <ref> [BrS94] </ref>. The reader can easily identify examples of metadata associated with each of these functions.
Reference: [Bre96] <author> F. P. Bretherton, </author> <title> Reinventing the Wheel, </title> <booktitle> 1st IEEE Metadata Conference, </booktitle> <address> Bethesda, MD, </address> <month> April </month> <year> 1996. </year> <title> (Keynote address). </title>
Reference-contexts: The answer, which was almost universally echoed by the participants, has been a resounding "no". In <ref> [Bre96] </ref>, the wording of this question was refined to what he calls the 20 year test: "what will our successors think 20 years from now when they observe changes between now and then and are trying to decide whether such changes are real, or artifacts of the way in which we <p> We are convinced that metadata is a conceptually deep problem which will never be solved, only managed incrementally; and that progress will only come from dispersed nuclear groups developing their own solutions <ref> [Bre96] </ref>. The emergence of database languages that facilitate the expression of metadata concepts will be necessary to coalesce such evolving standards. The ADAMS database system we discuss in the next section is being incorporated into GCSYS (Global Change SYStem) to manage its persistent data. <p> Our experience is that a large class of important metadata is more naturally asso 6 ciated with the attributes as a whole than with individual measurements. The ADAMS language facili-tates this. 2.3. Database Evolution In <ref> [Bre96] </ref>, it was emphasized that the representation of metadata should be evolutionary in nature. <p> In Section 1, we observed that there are two general kinds of metadata, guide and control. The former is intended for use by humans and is expressed in natural language; the latter is intended for use in computer system operations and may be expressed using a controlled vocabulary. In <ref> [Bre96] </ref>, it was noted that the boundary is not fixed and that "a strategy for improving our handling of guide metadata should be to move that boundary towards the control category in an evolutionary manner".
Reference: [CoK85] <author> G. P. Copeland and S. N. Khoshafian, </author> <title> A Decomposition Storage Model, </title> <booktitle> Proc. ACM-SIGMOD 1985 Conf. on Management of Data, </booktitle> <address> Austin, TX, </address> <month> May </month> <year> 1985, </year> <pages> 268-276. </pages>
Reference-contexts: Rather data associated with any object is obtained by evaluating the attribute function given the object identifier, or oid, as argument. As long ago as 1974, Lorie proposed much the same decomposed structure in XRM [Lor74]. Copeland and Khoshafian <ref> [CoK85, KCJ87] </ref> have also employed such a data 2 representation. They first coined the term DSM, or decomposed storage model. A primary difference between ADAMS and other object-oriented systems is that in our language we treat functions as first class objects, just like any other data object.
Reference: [DiM91] <author> J. Diederich and J. Milton, </author> <title> Creating Domain Specific Metadata for Scientific Data and Knowledge Bases, </title> <journal> IEEE Trans. on Knowledge and Data Engineering 3,4 (December 1991), </journal> <pages> 421-434. </pages>
Reference-contexts: These kinds of questions, by Bretherton and a growing community of researchers concerned with metadata issues, e.g. <ref> [DiM91, FJP90, GAL96, Les95] </ref>, have led to an evolving understanding of the nature and purpose of metadata.
Reference: [ElN94] <author> R. Elmasri and S. B. Navathe, </author> <title> Fundamentals of Database Systems, </title> <address> Benjamin/Cummings, Reading MA, </address> <year> 1994. </year>
Reference-contexts: On the other hand, a "seamless" database hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 Many object-oriented languages make this distinction explicitly, or in a de facto manner [ZdM90]; others do not [KGB90]. 2 There seems to be a consensus that object-oriented languages must support methods <ref> [ElN94, ZdM90] </ref>. 3 If properly designed, the language will facilitate the sharing of data models and the linking of modules implemented in different languages [PKW96].
Reference: [FGD94] <institution> Content Standards for Digital Geospatial Metadata, Federal Geographic Data Committee, </institution> <address> Washington, </address> <year> 1994. </year>
Reference-contexts: The interest in metadata has also generated considerable pressure to develop a set of standards specifying "what metadata should be provided" (a) to facilitate access to distributed data sets [Bar94], (b) to interpret complex spatial data <ref> [FGD94] </ref>, or (c) to ensure that long term data sets can be accurately interpreted in the future [Bla96, KGM96, Rot96]. The authors have encountered this metadata problem in the specific context of a global change simulation.
Reference: [FJP90] <author> J. C. French, A. Jones and J. L. Pfaltz, </author> <title> A Summary of the NSF Scientific Database Workshop, </title> <journal> IEEE Data Engineering Bulletin 13,3 (September 1990), </journal> <pages> 55-61. </pages>
Reference-contexts: These kinds of questions, by Bretherton and a growing community of researchers concerned with metadata issues, e.g. <ref> [DiM91, FJP90, GAL96, Les95] </ref>, have led to an evolving understanding of the nature and purpose of metadata.
Reference: [Ful88] <author> D. W. Fulker, </author> <title> The netCDF: Self-Describing, Portable Filesa Basis for Plug-Compatible Software Modules Connectable by Networks, </title> <booktitle> ISCU Workshop on Geophysical Informatics, </booktitle> <address> Moscow, USSR, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: One categorization has been into guide metadata and control metadata, where the former had been assumed to be natural language notes intended for interpretation by humans, and the latter were machine readable values, such as field lengths, intended to control data manipulation operations and data transfer. For example, netCDF <ref> [Ful88, ReD90] </ref> and others provide a way of specifying control metadata needed to exchange data files. To be machine readable, control metadata must be restricted to a controlled vocabulary with a well defined syntax.
Reference: [GAL96] <author> D. W. Gillman, M. V. Appel and W. P. LaPlant, Jr., </author> <title> Design Principles for a Unified Statistical Data/Metadata System, </title> <booktitle> in 8th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> P. Svensson and J. C. French (editors), </editor> <publisher> IEEE Press, </publisher> <address> Stockholm, </address> <month> June </month> <year> 1996, </year> <pages> 150-155. </pages>
Reference-contexts: These kinds of questions, by Bretherton and a growing community of researchers concerned with metadata issues, e.g. <ref> [DiM91, FJP90, GAL96, Les95] </ref>, have led to an evolving understanding of the nature and purpose of metadata.
Reference: [GrW97] <author> A. Grimshaw and W. Wulf, </author> <title> The Legion Vision of a Worldwide Virtual Computer, </title> <journal> Communications of the ACM 40,1 (January 1997), </journal> <pages> 39-45. </pages>
Reference-contexts: This scale up was achieved using a relatively large database of over 1 million objects. Discussion of the full details is inappropriate here. We will only note that we are in the process of implementing an ADAMS configuration over Legion <ref> [GrW97] </ref> which is an emerging operating system for managing globally distributed resources and that our department has just acquired a cluster of 64 DEC Alpha's (soon to be expanded to 128) on which we can continue our study of parallel performance.
Reference: [Had95] <author> R. F. Haddleton, </author> <title> An Implementation of a Parallel Object Oriented Database System, </title> <institution> TRCS-95-49, Department of Computer Science, University of Virginia, </institution> <month> August </month> <year> 1995. </year> <month> 14 </month>
Reference-contexts: On the other hand, ADAMS provides superior performance in multi-threaded database applications. The global change simulation described here is one such application because the computation and data access associated with one earth element can be performed asynchronously with relatively little cross talk between threads. In <ref> [Had95, Had97, HaP97, PHF98] </ref>, it is shown that a distributed, shared nothing ADAMS can obtain nearly linear scale 6 up of moderately complex queries involving implicit joins over 2, 4, or 8 processors. This scale up was achieved using a relatively large database of over 1 million objects.
Reference: [Had97] <author> R. F. Haddleton, </author> <title> An Implementation of a Parallel Object Oriented Database System, </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer Science, University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: On the other hand, ADAMS provides superior performance in multi-threaded database applications. The global change simulation described here is one such application because the computation and data access associated with one earth element can be performed asynchronously with relatively little cross talk between threads. In <ref> [Had95, Had97, HaP97, PHF98] </ref>, it is shown that a distributed, shared nothing ADAMS can obtain nearly linear scale 6 up of moderately complex queries involving implicit joins over 2, 4, or 8 processors. This scale up was achieved using a relatively large database of over 1 million objects.
Reference: [HaP97] <author> R. F. Haddleton and J. L. Pfaltz, </author> <title> Client/Server Architecture in the ADAMS Parallel, Object-Oriented Database System, </title> <booktitle> Proc. 1st Intern'l Conf. in Scientific Computing in Object-Oriented Parallel Environments, </booktitle> <address> Marina del Rey, CA, </address> <month> December </month> <year> 1997, </year> <pages> 257-266. </pages>
Reference-contexts: On the other hand, ADAMS provides superior performance in multi-threaded database applications. The global change simulation described here is one such application because the computation and data access associated with one earth element can be performed asynchronously with relatively little cross talk between threads. In <ref> [Had95, Had97, HaP97, PHF98] </ref>, it is shown that a distributed, shared nothing ADAMS can obtain nearly linear scale 6 up of moderately complex queries involving implicit joins over 2, 4, or 8 processors. This scale up was achieved using a relatively large database of over 1 million objects.
Reference: [Jon92] <editor> H. G. Jones, Plants and Microclimate, </editor> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1992. </year> <note> (2nd edition). </note>
Reference-contexts: declare our basic element as: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 4 Actually we can calculate incident solar energy from latitude, elevation, and time of day. (In the actual model we use a monthly average; in this paper we suggest how such refinements can be made to the database.) Standard solar radiation formulas come from <ref> [Jon92] </ref>. 4 EARTH_ELEMENT isa CLASS having attributes = latitude, longitude, elevation, s_rad - having obj_attributes = east, west, south, north - A class declaration Here, the elements east, west, south and north denote those earth elements standing in that relation to the current one.
Reference: [KDG96] <author> G. J. L. Kemp, J. Dupont and P. M. D. Gray, </author> <title> Using the Functional Data Model to Integrate Distributed Biological Data Sources, </title> <booktitle> in 8th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> P. Svensson and J. C. French (editors), </editor> <publisher> IEEE Press, </publisher> <address> Stockholm, </address> <month> June </month> <year> 1996, </year> <pages> 176-185. </pages>
Reference-contexts: For example, Kemp and Gray <ref> [KDG96] </ref>, whose system is based on the functional data model, have been quite successful in combining distributed genome data. Third, this treatment of attribute functions as first-class objects enhances several forms of class, or schema, evolution.
Reference: [KGM96] <author> L. Kerschberg, H. Gomaa, D. Menasce and J. P. Yoon, </author> <title> Data and Information Architectures for Large-Scale Distributed Data Intensive Information Systems, </title> <booktitle> in 8th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> P. Svensson and J. C. French (editors), </editor> <publisher> IEEE Press, </publisher> <address> Stockholm, </address> <month> June </month> <year> 1996, </year> <pages> 226-233. </pages>
Reference-contexts: metadata has also generated considerable pressure to develop a set of standards specifying "what metadata should be provided" (a) to facilitate access to distributed data sets [Bar94], (b) to interpret complex spatial data [FGD94], or (c) to ensure that long term data sets can be accurately interpreted in the future <ref> [Bla96, KGM96, Rot96] </ref>. The authors have encountered this metadata problem in the specific context of a global change simulation. We are implementing a large global environmental change system that had been written in Fortran using flat files for storage to one written in C using object-oriented database technology for storage.
Reference: [KCJ87] <author> S. N. Khoshafian, G. P. Copeland, T. Jagodits, H. Boral and P. Valduriez, </author> <title> A Query Processing Strategy for the Decomposed Storage Model, </title> <booktitle> Proc. Third International Conference on Data Engineering, </booktitle> <address> Los Angeles, CA, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: Rather data associated with any object is obtained by evaluating the attribute function given the object identifier, or oid, as argument. As long ago as 1974, Lorie proposed much the same decomposed structure in XRM [Lor74]. Copeland and Khoshafian <ref> [CoK85, KCJ87] </ref> have also employed such a data 2 representation. They first coined the term DSM, or decomposed storage model. A primary difference between ADAMS and other object-oriented systems is that in our language we treat functions as first class objects, just like any other data object.
Reference: [KGB90] <author> W. Kim, J. F. Garza, N. Ballou and D. Woelk, </author> <title> Architecture of the ORION Next-Generation Database System, </title> <journal> IEEE Trans. on Knowledge and Data Engineering 2,1 (March 1990), </journal> <pages> 109-124. </pages>
Reference-contexts: Third, this treatment of attribute functions as first-class objects enhances several forms of class, or schema, evolution. On the other hand, a "seamless" database hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 Many object-oriented languages make this distinction explicitly, or in a de facto manner [ZdM90]; others do not <ref> [KGB90] </ref>. 2 There seems to be a consensus that object-oriented languages must support methods [ElN94, ZdM90]. 3 If properly designed, the language will facilitate the sharing of data models and the linking of modules implemented in different languages [PKW96].
Reference: [Len94] <author> H. Lenz, </author> <title> The Conceptual Schema and External Schemata of Metadabases, </title> <booktitle> in 7th Intern'l Working Conf. on Scientific and Statistical Database Management, </booktitle> <editor> J. C. French and H. Hinterberger (editors), </editor> <publisher> IEEE Press, </publisher> <month> September </month> <year> 1994, </year> <pages> 160-165. </pages>
Reference-contexts: This problem is relevant because most metadata is about attributes. In <ref> [Len94] </ref>, Lenz describes a set of typical metadata associated with the Berlin Census of 1987. 7 Here, every example he cites is with hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 7 We would note that demographers have different metadata requirements than environmental scientists, who have different requirements than geneticists. 12 respect to an attribute of the statistical
Reference: [Les95] <author> M. Lester, </author> <title> Toward a Taxonomy of Metadata: The User's Perspective, </title> <booktitle> Proceedings of SDM-92 Planning Workshop, </booktitle> <address> Salt Lake City, UT, </address> <month> June </month> <year> 1995, </year> <pages> 85-90. </pages>
Reference-contexts: These kinds of questions, by Bretherton and a growing community of researchers concerned with metadata issues, e.g. <ref> [DiM91, FJP90, GAL96, Les95] </ref>, have led to an evolving understanding of the nature and purpose of metadata.
Reference: [Lor74] <author> R. A. Lorie, </author> <title> XRM An Extended (n-ary) Relational Memory, </title> <type> Tech. </type> <institution> Rpt. G320-2096, IBM Scientific Center, </institution> <address> Cambridge, MA, </address> <month> January </month> <year> 1974. </year>
Reference-contexts: Data is not regarded as a string of bits packed in some storage structure. Rather data associated with any object is obtained by evaluating the attribute function given the object identifier, or oid, as argument. As long ago as 1974, Lorie proposed much the same decomposed structure in XRM <ref> [Lor74] </ref>. Copeland and Khoshafian [CoK85, KCJ87] have also employed such a data 2 representation. They first coined the term DSM, or decomposed storage model.
Reference: [MoS93] <author> S. Monk and I. Sommervile, </author> <title> Schema Evolution in OODB's Using Class Versioning, </title> <booktitle> SIGMOD RECORD 22,3 (September 1993), </booktitle> <pages> 16-22. </pages>
Reference-contexts: Adding, or deleting, attributes from the set of associated attributes is fundamental to schema evolution. Some have suggested that real schema evolution must involve more than just adding or deleting attributes, c.f . <ref> [BKK87, MoS93, Rod92] </ref>. However, evolving schema constraints and class methods is much more complex, and this ability to evolve schema "on the fly" without recompilation of code and without reformatting storage seems to be an important first step. Adding documentation is more complex. We must declare three new object classes.
Reference: [PfF90] <author> J. L. Pfaltz and J. C. </author> <title> French, Implementing Subscripted Identifiers in Scientific Databases, in Statistical and Scientific Database Management, </title> <editor> Z. Michalewicz (editor), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <month> April </month> <year> 1990, </year> <pages> 80-91. </pages>
Reference-contexts: Consequently, we choose to subscript these attributes (with respect to the months, 1 to 12). Since attribute functions are simply objects, of course they can be subscripted <ref> [PfF90] </ref>.
Reference: [PFG92] <author> J. L. Pfaltz, J. C. French, A. S. Grimshaw and R. D. McElrath, </author> <booktitle> Functional Data Representation in Scientific Information Systems, Intern'l Space Year Conference on Earth and Space Science Information Systems (ESSIS), </booktitle> <address> Pasadena, CA, </address> <month> February </month> <year> 1992, </year> <pages> 788-799. </pages> <booktitle> AIP Conf. Proc. </booktitle> <pages> #283. </pages>
Reference-contexts: Metadata and Evolution in Practice All of the concepts in the preceding section have been implemented; some such as class evolution for over five years. This facility was reported in <ref> [PFG92] </ref> where we described the gradual evolution of a tactical battlefield database written in ADAMS. It is now routine to let the structure of an ADAMS database, such as a rather complex medical records prototype, evolve as operational experience accumulates.
Reference: [PfF93] <author> J. L. Pfaltz and J. C. </author> <title> French, Scientific Database Management with ADAMS, </title> <booktitle> Data Engineering 16,1 (March 1993), </booktitle> <pages> 14-18. </pages>
Reference-contexts: NetCDF would be one member of this family, as would SQL. The ADAMS database system <ref> [PfF93, Pfa93] </ref>, which facilitates access in shared, distributed databases provides another syntax for expressing metadata. We are convinced that metadata is a conceptually deep problem which will never be solved, only managed incrementally; and that progress will only come from dispersed nuclear groups developing their own solutions [Bre96].
Reference: [Pfa93] <author> J. L. Pfaltz, </author> <title> The ADAMS Language: A Tutorial and Reference Manual, </title> <institution> IPC TR-93-003, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: NetCDF would be one member of this family, as would SQL. The ADAMS database system <ref> [PfF93, Pfa93] </ref>, which facilitates access in shared, distributed databases provides another syntax for expressing metadata. We are convinced that metadata is a conceptually deep problem which will never be solved, only managed incrementally; and that progress will only come from dispersed nuclear groups developing their own solutions [Bre96].
Reference: [PHF98] <author> J. L. Pfaltz, R. F. Haddleton and J. C. </author> <title> French, Scalable, Parallel, Scientific Databases, </title> <booktitle> 10th International Conf. on Scientific and Statistical Database Management, </booktitle> <address> Capri, Italy, </address> <month> July </month> <year> 1998, </year> <pages> 4-11. </pages>
Reference-contexts: On the other hand, ADAMS provides superior performance in multi-threaded database applications. The global change simulation described here is one such application because the computation and data access associated with one earth element can be performed asynchronously with relatively little cross talk between threads. In <ref> [Had95, Had97, HaP97, PHF98] </ref>, it is shown that a distributed, shared nothing ADAMS can obtain nearly linear scale 6 up of moderately complex queries involving implicit joins over 2, 4, or 8 processors. This scale up was achieved using a relatively large database of over 1 million objects.
Reference: [PKW96] <author> W. M. Post, A. W. King and S. D. Wullschleger, </author> <title> Soil organic matter models and global estimates of soil organic carbon, in Evaluation of Soil Organic Model Models Using Existing Long-Term Datasets, </title> <editor> P. Smith, J. Smith and D. Powlson (editors), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: distinction explicitly, or in a de facto manner [ZdM90]; others do not [KGB90]. 2 There seems to be a consensus that object-oriented languages must support methods [ElN94, ZdM90]. 3 If properly designed, the language will facilitate the sharing of data models and the linking of modules implemented in different languages <ref> [PKW96] </ref>. One example of this kind of module interconnection can be found in [AIL96]. language, using for example the syntax of C++, need not gracefully migrate to some different, higher--level object-oriented language of the future.
Reference: [ReD90] <author> R. K. Rew and G. P. Davis, </author> <title> The Unidata netCDF: Software for Scientific Data Access, </title> <booktitle> 6th International Conference on Interactive Information Processing Systems for Meteorology, Oceanography, and Hydrology, </booktitle> <address> Anaheim, CA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: One categorization has been into guide metadata and control metadata, where the former had been assumed to be natural language notes intended for interpretation by humans, and the latter were machine readable values, such as field lengths, intended to control data manipulation operations and data transfer. For example, netCDF <ref> [Ful88, ReD90] </ref> and others provide a way of specifying control metadata needed to exchange data files. To be machine readable, control metadata must be restricted to a controlled vocabulary with a well defined syntax.
Reference: [Rod92] <author> J. F. Roddick, </author> <title> Schema Evolution in Database Systems An Annotated Bibliography, </title> <booktitle> SIGMOD Record 21,4 (December 1992), </booktitle> <pages> 35-39. </pages>
Reference-contexts: Adding, or deleting, attributes from the set of associated attributes is fundamental to schema evolution. Some have suggested that real schema evolution must involve more than just adding or deleting attributes, c.f . <ref> [BKK87, MoS93, Rod92] </ref>. However, evolving schema constraints and class methods is much more complex, and this ability to evolve schema "on the fly" without recompilation of code and without reformatting storage seems to be an important first step. Adding documentation is more complex. We must declare three new object classes.
Reference: [Rot96] <author> J. Rothenberg, </author> <title> Metadata to Support Date Quality and Longevity, </title> <booktitle> 1st IEEE Metadata Conference, </booktitle> <address> Bethesda, MD, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: metadata has also generated considerable pressure to develop a set of standards specifying "what metadata should be provided" (a) to facilitate access to distributed data sets [Bar94], (b) to interpret complex spatial data [FGD94], or (c) to ensure that long term data sets can be accurately interpreted in the future <ref> [Bla96, KGM96, Rot96] </ref>. The authors have encountered this metadata problem in the specific context of a global change simulation. We are implementing a large global environmental change system that had been written in Fortran using flat files for storage to one written in C using object-oriented database technology for storage.
Reference: [WSE95] <author> F. I. Woodward, T. M. Smith and W. R. Emanuel, </author> <title> A global land primary productivity and phytogeography model, Global Biochemical Cycles 9(1995), </title> <type> 471-490. </type>
Reference-contexts: The Global Change Application To illustrate some of the features we believe are appropriate in a metadata language, we examine a module that describes incident solar radiation at the terrestrial surface. <ref> [WSE95] </ref>. The basic unit of this model is a map pixel, or an unit of earth area 50km 50km, which has a known latitude, longitude, and elevation.
Reference: [ZdM90] <author> S. B. Zdonik and D. Maier, </author> <title> Readings in Object-Oriented Database Systems, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year> <month> 16 </month>
Reference-contexts: Third, this treatment of attribute functions as first-class objects enhances several forms of class, or schema, evolution. On the other hand, a "seamless" database hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 Many object-oriented languages make this distinction explicitly, or in a de facto manner <ref> [ZdM90] </ref>; others do not [KGB90]. 2 There seems to be a consensus that object-oriented languages must support methods [ElN94, ZdM90]. 3 If properly designed, the language will facilitate the sharing of data models and the linking of modules implemented in different languages [PKW96]. <p> On the other hand, a "seamless" database hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 Many object-oriented languages make this distinction explicitly, or in a de facto manner [ZdM90]; others do not [KGB90]. 2 There seems to be a consensus that object-oriented languages must support methods <ref> [ElN94, ZdM90] </ref>. 3 If properly designed, the language will facilitate the sharing of data models and the linking of modules implemented in different languages [PKW96].
References-found: 38

