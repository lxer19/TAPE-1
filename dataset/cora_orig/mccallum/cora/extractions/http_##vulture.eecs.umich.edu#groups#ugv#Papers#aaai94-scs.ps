URL: http://vulture.eecs.umich.edu/groups/ugv/Papers/aaai94-scs.ps
Refering-URL: http://vulture.eecs.umich.edu/groups/ugv/homepage.html
Root-URL: http://www.cs.umich.edu
Email: fjaeho,durfeeg@eecs.umich.edu  
Title: Structured Circuit Semantics for Reactive Plan Execution Systems  
Author: Jaeho Lee and Edmund H. Durfee 
Address: Ann Arbor, MI 48109  
Affiliation: Department of EE and CS University of Michigan  
Note: Twelfth National Conference on Artificial Intelligence (AAAI-94)  
Abstract: A variety of reactive plan execution systems have been developed in recent years, each attempting to solve the problem of taking reasonable courses of action fast enough in a dynamically changing world. Comparing these competing approaches, and collecting the best features of each, has been problematic because of the diverse representations and (sometimes implicit) control structures that they have employed. To rectify this problem, we have extended the circuit semantics notion of teleo-reactive programs into richer, yet compact semantics, called structured circuit semantics (SCS), that can be used to explicitly represent the control behavior of various reactive execution systems. By transforming existing systems into SCS, we can identify underlying control assumptions and begin to identify more rigorously the strengths and limitations of these systems. Moreover, SCS provides a basis for constructing new reactive execution systems, with more understandable semantics, that can be tailored to particular domain needs. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Agre, P. E., and Chapman, D. </author> <year> 1987. </year> <title> Pengi: An implementation of a theory of activity. </title> <booktitle> In AAAI-87, </booktitle> <pages> 268-272. </pages>
Reference-contexts: SCS can more generally capture reactive behavior required for applications such as playing video games (Sonja (Chapman 1990) and Pengi <ref> (Agre & Chapman 1987) </ref>) and for the traffic world scenario (CROS (Hendler & Sanborn 1987)). PRS deserves special mention, because a major motivation in developing SCS has been our need for formally specifying the PRS plan representation and its execution model.
Reference: <author> Chapman, D. </author> <year> 1990. </year> <title> Vision, instruction and action. </title> <type> Tech. Report 1204, </type> <institution> MIT AI Laboratory. </institution>
Reference-contexts: RPL (McDermott 1992) extends RAPs by incorporating fluents and a FILTER construct to represent durative conditions, but these are much more compactly and intuitively captured in SCS. The central system of Sonja <ref> (Chapman 1990) </ref> uses a circuit description language, MACNET and arbitration macrology. Although it supports circuit semantics at the (boolean) gate level, the arbitration macrology allows only compilation time arbitration in a non-structured manner because it compiles down into MACNET circuitry just before the system runs. <p> SCS can more generally capture reactive behavior required for applications such as playing video games (Sonja <ref> (Chapman 1990) </ref> and Pengi (Agre & Chapman 1987)) and for the traffic world scenario (CROS (Hendler & Sanborn 1987)). PRS deserves special mention, because a major motivation in developing SCS has been our need for formally specifying the PRS plan representation and its execution model.
Reference: <author> Drummond, M. </author> <year> 1989. </year> <title> Situated control rules. </title> <booktitle> In KR'89, </booktitle> <pages> 103-113. </pages>
Reference-contexts: We assume that a block, once placed, cannot be moved away again. As in <ref> (Drummond 1989) </ref>, we assume three predicates: free, at, and available; and four actions: place (A,1) (place block A at location 1), place (C,3) (place block C at location 3), Lplace (B,2) (sweep B in from the left), and Rplace (B,2) (sweep B in from the right). <p> Related Work and Future Work Because SCS embodies circuit semantics, previous comparisons (Nilsson 1992; 1994) between T-R programs and reactive plan execution systems such as SCR <ref> (Drummond 1989) </ref>, GAPPS (Pack Kaelbling 1988), PRS (Ingrand, Georgeff, & Rao 1992), and Universal Plans (Schoppers 1987), are applicable here as well. In this section, therefore, we concentrate on comparisons more specifically with SCS.
Reference: <author> Firby, R. J. </author> <year> 1989. </year> <title> Adaptive execution in complex dynamic worlds. </title> <type> Tech. </type> <note> Note YALE/DCS/RR #672, </note> <institution> Dept. of Computer Science, Yale University. </institution>
Reference: <author> Firby, R. J. </author> <year> 1992. </year> <title> Building symbolic primitives with continuous control routines. </title> <editor> In Hendler, J., ed., </editor> <booktitle> Artificial Intelligence Planning Systems: Proc. of the First International Conference, </booktitle> <pages> 62-68. </pages>
Reference: <author> Hendler, J. A., and Sanborn, J. C. </author> <year> 1987. </year> <title> A model of reaction for planning in dynamic environments. </title> <booktitle> In Proc. of the DARPA Knowledge-Based Planning Workshop, </booktitle> <address> 24.1-24.10. </address>
Reference-contexts: SCS can more generally capture reactive behavior required for applications such as playing video games (Sonja (Chapman 1990) and Pengi (Agre & Chapman 1987)) and for the traffic world scenario (CROS <ref> (Hendler & Sanborn 1987) </ref>). PRS deserves special mention, because a major motivation in developing SCS has been our need for formally specifying the PRS plan representation and its execution model.
Reference: <author> Ingrand, F. F.; Georgeff, M. P.; and Rao, A. S. </author> <year> 1992. </year> <title> An architecture for real-time reasoning and system control. </title> <booktitle> IEEE Expert 7(6) </booktitle> <pages> 34-44. </pages>
Reference-contexts: Some concepts are borrowed from the semantics of the Procedural Reasoning System (PRS) and a PRS implementation (UM-PRS (Lee et al. 1994)). Because of space limitations, we cannot describe the PRS architecture in detail here, but interested readers can refer to <ref> (Ingrand, Georgeff, & Rao 1992) </ref>. The purpose of most of the constructs is to wrap the actions and attach energizing conditions to collections of actions, corresponding to the conditions (K i ) in T-R programs. <p> Related Work and Future Work Because SCS embodies circuit semantics, previous comparisons (Nilsson 1992; 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS (Pack Kaelbling 1988), PRS <ref> (Ingrand, Georgeff, & Rao 1992) </ref>, and Universal Plans (Schoppers 1987), are applicable here as well. In this section, therefore, we concentrate on comparisons more specifically with SCS.
Reference: <author> Lee, J.; Huber, M. J.; Durfee, E. H.; and Kenny, P. G. </author> <year> 1994. </year> <title> UM-PRS: an implementation of the procedural reasoning system for multirobot applications. </title> <booktitle> In Conference on Intelligent Robotics in Field, Factory, Service, and Space (CIRFFSS '94), </booktitle> <pages> 842-849. </pages>
Reference-contexts: The challenge faced by a researcher who needs to incorporate a reactive plan execution system into a larger endeavor is determining how to decide among these candidate systems. For example, in a project to develop a system for controlling and coordinating outdoor robotic vehicles <ref> (Lee et al. 1994) </ref>, which reactive plan execution system is right for the job? A primary difficulty in answering this question is that many of the fundamental capabilities of and assumptions behind reactive plan execution systems are fl This work was sponsored, in part, by ARPA under contract DAAE-07-92-C-R012. not easily <p> Some concepts are borrowed from the semantics of the Procedural Reasoning System (PRS) and a PRS implementation (UM-PRS <ref> (Lee et al. 1994) </ref>). Because of space limitations, we cannot describe the PRS architecture in detail here, but interested readers can refer to (Ingrand, Georgeff, & Rao 1992).
Reference: <author> McDermott, D. </author> <year> 1992. </year> <title> Transformational planning of reactive behavior. </title> <type> Tech. </type> <note> Note YALEU/CSD/RR #941, </note> <institution> Dept. of Computer Science, Yale University. </institution>
Reference-contexts: SCS has clear failure semantics and specifies what to do and where to start. Another limitation of the RAP interpreter is that methods lack run-time priority information, which is expressed by utility functions in SCS do best. RPL <ref> (McDermott 1992) </ref> extends RAPs by incorporating fluents and a FILTER construct to represent durative conditions, but these are much more compactly and intuitively captured in SCS. The central system of Sonja (Chapman 1990) uses a circuit description language, MACNET and arbitration macrology.
Reference: <author> Nilsson, N. J. </author> <year> 1992. </year> <title> Toward agent programs with circuit semantics. </title> <type> Tech. Report STAN-CS-92-1412, </type> <institution> Dept. of Computer Science, Stanford University. </institution>
Reference-contexts: We conclude this paper with discussions on implementation issues and extensions to applications involving multiple agents. Circuit Semantics When executing on a computational system, a program is said to have circuit semantics when it produces (at least conceptually) electrical circuits that are in turn used for control <ref> (Nilsson 1992) </ref>. In particular, a teleo-reactive (T-R) sequence is an agent control program based on circuit semantics, combining notions of continuous feedback with more conventional computational mechanisms such as runtime parameter binding and passing, and hierarchical and recursive invocation structures. <p> Circuit semantics represents two different kinds of actions| energized and ballistic. Energized actions are those that must be sustained by an enabling condition to continue operating; ballistic ones, once called, run to completion <ref> (Nilsson 1992) </ref>. We argue that the energized actions can be implemented using ballistic actions by making the perception-cognition-action frequency higher than or equal to the characteristic frequency of the agent's environment. <p> By translating the T-R 3 In <ref> (Nilsson 1992) </ref>, a similar T-R program is presented, but it is for a simpler variation of the BNL problem. do* first f free (1) ^ free (2) ^ available (B) ! Lplace (B,2); free (3) ^ free (2) ^ available (B) ! Rplace (B,2); free (1) ^ free (3) ^ available
Reference: <author> Nilsson, N. J. </author> <year> 1994. </year> <title> Teleo-reactive programs for agent control. </title> <journal> Journal of Artificial Intelligence Research 1 </journal> <pages> 139-158. </pages>
Reference-contexts: In contrast with some of the behavior-based approaches, T-R programs are re sponsive to stored models of the environment as well as to their immediate sensory inputs <ref> (Nilsson 1994) </ref>. In its simplest form, a T-R program consists of an ordered set of production rules (from (Nilsson 1994)): K 1 ! a 1 ; K 2 ! a 2 ; ; K i ! a i ; ; K m ! a m ; The K i are conditions, <p> In contrast with some of the behavior-based approaches, T-R programs are re sponsive to stored models of the environment as well as to their immediate sensory inputs <ref> (Nilsson 1994) </ref>. In its simplest form, a T-R program consists of an ordered set of production rules (from (Nilsson 1994)): K 1 ! a 1 ; K 2 ! a 2 ; ; K i ! a i ; ; K m ! a m ; The K i are conditions, and the a i are actions.
Reference: <author> Pack Kaelbling, L. </author> <year> 1988. </year> <title> Goals as parallel program specifications. </title> <booktitle> In AAAI-88, </booktitle> <pages> 60-65. </pages>
Reference-contexts: Related Work and Future Work Because SCS embodies circuit semantics, previous comparisons (Nilsson 1992; 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS <ref> (Pack Kaelbling 1988) </ref>, PRS (Ingrand, Georgeff, & Rao 1992), and Universal Plans (Schoppers 1987), are applicable here as well. In this section, therefore, we concentrate on comparisons more specifically with SCS.
Reference: <author> Schoppers, M. J. </author> <year> 1987. </year> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In IJCAI-87, </booktitle> <pages> 1039-1046. </pages>
Reference-contexts: Related Work and Future Work Because SCS embodies circuit semantics, previous comparisons (Nilsson 1992; 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS (Pack Kaelbling 1988), PRS (Ingrand, Georgeff, & Rao 1992), and Universal Plans <ref> (Schoppers 1987) </ref>, are applicable here as well. In this section, therefore, we concentrate on comparisons more specifically with SCS. As illustrated in the previous section, the do first construct and the capability of defining a step covers the circuit semantics of T-R programs.
References-found: 13

