URL: http://www-ccsl.cs.umass.edu/~barrett/articles/waltcs.ps
Refering-URL: http://www-ccsl.cs.umass.edu/~barrett/publications.html
Root-URL: 
Title: Using an Imperative Language to Teach Applicative Methods  
Author: Daniel Barrett Robert Strandh 
Date: November 17, 1994  
Affiliation: Department of Computer Science The Johns Hopkins University  Department of Computer Science University of Bordeaux  
Abstract: Many universities teach traditional, imperative languages in their introductory programming courses, even though an applicative language may be preferable. In this paper, we present a compromise and show how applicative programming methods may be illustrated effectively using a subset of Pascal. The approach focuses on order of evaluation, the if statement, functions, and recursion. We discuss several program examples actually given in class, and interesting problems encountered by students who had previous imperative programming experience. Although we are just beginning to investigate the results of our approach, we believe that we have been able to cut the time to explain Pascal syntax to a minimum, allowing more coverage of programming techniques.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Harold Abelson and Gerald Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> MIT Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction It can be argued that an applicative programming language offers the best introduction to programming, given its simple syntax and few restrictions on combining expressions <ref> [1] </ref>. Unfortunately, some universities require that a traditional imperative language be used in the introductory programming courses. Such a university-wide decision may be influenced by: * conservative faculty; * students who prefer a language that is "actually used," as opposed to an academic "teaching" language.
Reference: [2] <author> Doug Cooper and Michael Clancey. Oh! Pascal!, </author> <title> 2nd edition. </title> <editor> W. W. </editor> <publisher> Norton & Company, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: When using this approach, instructors may have difficulty inventing Pascal programming assignments that use this restricted syntax. Many introductory programming textbooks are of no 1 help; "interesting" programming problems generally do not arise until structured data types (ar-rays, records, pointers) are discussed <ref> [2, 4, et. al.] </ref>. Therefore, an important problem is to find interesting programming problems that require recursion but not structured data types. We show two such examples that were given to chemistry and physics students.
Reference: [3] <author> Kathleen Jensen and Niklaus Wirth. </author> <title> Pascal User Manual And Report, 3rd edition. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: This problem is very real in places that emphasize practical usefulness of the computer science program. The purpose of this paper is to show that applicative programming techniques can be used within the framework of an imperative programming language (Pascal <ref> [3] </ref>). This approach solves several problems inherent in introductory courses that must use imperative languages. The instructor is no longer forced to spend a large amount of time discussing syntax; instead, he/she can concentrate on programming techniques.
Reference: [4] <author> Elliot Koffman. </author> <title> Pascal, 3rd edition. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: When using this approach, instructors may have difficulty inventing Pascal programming assignments that use this restricted syntax. Many introductory programming textbooks are of no 1 help; "interesting" programming problems generally do not arise until structured data types (ar-rays, records, pointers) are discussed <ref> [2, 4, et. al.] </ref>. Therefore, an important problem is to find interesting programming problems that require recursion but not structured data types. We show two such examples that were given to chemistry and physics students.
Reference: [5] <author> Elliot Koffman, </author> <year> 1990. </year> <type> Personal communication. 11 </type>
Reference-contexts: As one student wrote, "I got [functions and procedures] hopelessly messed up for two and a half weeks [because we] reversed the order that the book covered them." Unfortunately, we have encountered no Pascal textbook that emphasizes applicative programming (although one author is considering revising his textbook in this manner <ref> [5] </ref>). To combat this problem, printed lecture notes were distributed every day in class. Students complained that they did not learn all of the Pascal language in the course. We did not cover enumerated ordinal types, sets, variant records, file operations, and other Pascal-specific topics.
References-found: 5

