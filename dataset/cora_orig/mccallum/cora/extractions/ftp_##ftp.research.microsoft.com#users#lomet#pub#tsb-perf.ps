URL: ftp://ftp.research.microsoft.com/users/lomet/pub/tsb-perf.ps
Refering-URL: http://www.research.microsoft.com/users/lomet/pub/default.htm
Root-URL: http://www.research.microsoft.com
Title: THE PERFORMANCE OF A MULTIVERSION ACCESS METHOD  
Author: David Lomet Betty Salzberg 
Address: One Kendall Square, Bldg. 700 Cambridge, Massachusetts 02139  Boston, Massachusetts 02115  
Affiliation: Digital Equipment Corporation Cambridge Research Laboratory  College of Computer Science Northeastern University  
Abstract: The Time-Split B-tree is an integrated index structure for a versioned timestamped database. It gradually migrates data from a current database to an historical database, records migrating when nodes split. Records valid at the split time are placed in both an historical node and a current node. This implies some redundancy. Using both analysis and simulation, we characterize the amount of redundancy, the space utilization, and the record addition (insert or update) performance for a spectrum of different rates of insertion versus update. Three splitting policies are studied which alter the conditions under which either time splits or key space splits are performed. 
Abstract-found: 1
Intro-found: 1
Reference: [AhSn] <author> Ahn, I. and Snodgrass, R., </author> <title> "Partitioned Storage for Temporal Databases," </title> <journal> Information Systems, </journal> <volume> 13, 4, </volume> <year> 1988. </year> <pages> pp. 369-391. </pages>
Reference-contexts: 1. INTRODUCTION A growing area of interest in the database community is in the support of multiversioned data <ref> [LoSa, AhSn, JeMR, Ston] </ref>. Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest [McKe, SnAh, SeSh].
Reference: [BYLa] <author> Baeza-Yates, R. and Larson, </author> <title> P.A., "Performance of B + -trees with Partial Expansions," </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 1:2, </volume> <month> June </month> <year> 1989, </year> <pages> pp. 258-257. </pages>
Reference-contexts: When analyzing index-based access methods, the purpose of a uniform distribution is to realize the uniform growth assumption. We use a form of fringe analysis <ref> [EZGMW, BYLa] </ref>. This computes a closure on node probabilities and produces asymptotic performance results directly. The simulation entails multiple trials, each trial adding 50,000 records. Node probabilities are determined by actual count of each type of node. <p> FRINGE ANALYSIS We give an analysis of the TSB-tree for TLU and WOB policies like that made for B-trees in <ref> [BYLa, EZGMW] </ref>. We characterize (or type) data nodes by their number of records, number of old versions (equivalently, the number of updates) and number of insertions since the last update. Since there is a finite record capacity in each data node, the number of types of data nodes is finite.
Reference: [East] <author> Easton, M., </author> <title> "Key-Sequence Data Sets on Indelible Storage," </title> <institution> IBM J. Res. Develop., 30:3, </institution> <month> May </month> <year> 1986, </year> <pages> pp 230-241. </pages>
Reference-contexts: The simulation confirms the analysis and extends our results to nodes whose sizes are too large to analyze and to a split policy that did not succumb to analysis. Our base case split policy for multiversioned data is the write-once B-tree (WOB-tree) of Easton <ref> [East] </ref>. The additional split policies of the TSB-tree exploit the fact that current data is stored on a WMRM medium, unlike the WOB-tree's WORM medium. The impact of this difference, and of the additional split policies is shown to be substantial. <p> The middle key of the node is used as the split key. The considerations involved in performing a time split are more complicated. 2.3 Time Splitting Time splitting in a TSB-tree is derived from the time-splitting used in the WOB-tree <ref> [East] </ref>. The WOB-tree does not have separate historical and current databases and has a more rigid splitting policy forced by non-erasability. In particular, whenever a WOB-tree node needs splitting, a time split must be performed. Sometimes a key split also occurs.
Reference: [EZGMW] <author> Eisenbarth, B., Ziviani, N., Gonnet, G., Mehlhorn, K. and Wood, D., </author> <title> "The Theory of Fringe Analysis and Its Application to 2-3 Trees and B-Trees," </title> <journal> Inform. Contr., </journal> <volume> 55, </volume> <year> 1982, </year> <pages> pp. 125-174. </pages>
Reference-contexts: When analyzing index-based access methods, the purpose of a uniform distribution is to realize the uniform growth assumption. We use a form of fringe analysis <ref> [EZGMW, BYLa] </ref>. This computes a closure on node probabilities and produces asymptotic performance results directly. The simulation entails multiple trials, each trial adding 50,000 records. Node probabilities are determined by actual count of each type of node. <p> FRINGE ANALYSIS We give an analysis of the TSB-tree for TLU and WOB policies like that made for B-trees in <ref> [BYLa, EZGMW] </ref>. We characterize (or type) data nodes by their number of records, number of old versions (equivalently, the number of updates) and number of insertions since the last update. Since there is a finite record capacity in each data node, the number of types of data nodes is finite.
Reference: [JeMR] <author> Jensen, C.S., Mark, L., and Roussopoulos, N., </author> <title> "Incremental Implementation Model for Relational Databases with Transaction Time," </title> <institution> University of Maryland UMIACS-TR-89-63 CS-TR-2275 July, </institution> <year> 1989. </year>
Reference-contexts: 1. INTRODUCTION A growing area of interest in the database community is in the support of multiversioned data <ref> [LoSa, AhSn, JeMR, Ston] </ref>. Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest [McKe, SnAh, SeSh].
Reference: [LoSa] <author> Lomet, D. and Salzberg, B., </author> <title> "Access Methods for Multiversion Data," </title> <booktitle> Proc ACM SIGMOD, </booktitle> <address> Portland, </address> <year> 1989, </year> <month> pp.315-324. </month>
Reference-contexts: 1. INTRODUCTION A growing area of interest in the database community is in the support of multiversioned data <ref> [LoSa, AhSn, JeMR, Ston] </ref>. Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest [McKe, SnAh, SeSh]. <p> It is thus useful to keep the current database small and keep it on a high performance medium. The historical part can then be stored in a separate area, possibly on a slower medium. In <ref> [LoSa] </ref>, we developed the Time-Split B-tree for these applications. A Time-Split B-tree (TSB-tree) has a single unified index for retrieval from both the historical and the current database. Data is written to the historical database by appending at its end.
Reference: [McKe] <author> McKenzie, E., </author> <title> "Bibliography: Temporal Databases," </title> <booktitle> SIGMOD Record, </booktitle> <address> 15:2, </address> <month> Dec. </month> <year> 1986, </year> <pages> pp. 40-52. </pages>
Reference-contexts: Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest <ref> [McKe, SnAh, SeSh] </ref>. These include financial transactions, university transcripts, engineering design, legal and medical records, etc. One usually wants faster access to the current records while tolerating slower access to the historical records.
Reference: [SeSh] <author> Segev, A. and Shoshani, A., </author> <title> "Logical Modeling of Temporal Data," </title> <booktitle> Proc ACM SIGMOD, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. 454-466. </pages>
Reference-contexts: Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest <ref> [McKe, SnAh, SeSh] </ref>. These include financial transactions, university transcripts, engineering design, legal and medical records, etc. One usually wants faster access to the current records while tolerating slower access to the historical records.
Reference: [SnAh] <author> Snodgrass, R., and Ahn, I., </author> <title> "A Taxonomy of Time in Databases," </title> <booktitle> Proc ACM SIGMOD, </booktitle> <month> March </month> <year> 1985, </year> <pages> pp. 236-246. </pages>
Reference-contexts: Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest <ref> [McKe, SnAh, SeSh] </ref>. These include financial transactions, university transcripts, engineering design, legal and medical records, etc. One usually wants faster access to the current records while tolerating slower access to the historical records.
Reference: [Ston] <author> Stonebraker, M., </author> <title> "The Design of the POSTGRES Storage System," </title> <booktitle> Proc. 13th VLDB Conference, </booktitle> <address> Brighton, </address> <year> 1987, </year> <month> pp.289-300. </month>
Reference-contexts: 1. INTRODUCTION A growing area of interest in the database community is in the support of multiversioned data <ref> [LoSa, AhSn, JeMR, Ston] </ref>. Multiversioned data, when updated, results in a new version of the data being created. Because the old version is retained, several versions of a record can exist, each appropriate to some particular time. There are many applications where multiversioned data is of interest [McKe, SnAh, SeSh].
References-found: 10

