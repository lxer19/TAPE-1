URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1995/95-40.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1995.html
Root-URL: http://www.cs.rutgers.edu
Email: dudek@cim.mcgill.ca  romanik@dimacs.rutgers.edu  sue@cs.mcgill.ca  
Title: a Robot with Minimum Travel 1  
Author: by Gregory Dudek ; Kathleen Romanik ; Sue Whitesides 
Address: Montreal, Quebec, Canada H3A 2A7  Piscataway, NJ 08855-1179  Montreal, Quebec, Canada H3A 2A7  
Affiliation: Research Centre for Intelligent Machines and School of Computer Science McGill University,  Computer Science Rutgers University,  Research Centre for Intelligent Machines and School of Computer Science McGill University,  
Note: Localizing  DIMACS Center for Discrete Mathematics and Theoretical  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 95-40 August 1995 1 An earlier version of this paper appeared as a McGill University School of Computer Science technical report SOCS-94.5 in August 1994. Also, an abridged version appeared in the Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, pages 437-446, in January 1995. 2 Supported by NSERC research grants programme. 3 DIMACS University-Industry postdoctoral fellow 4 Author also received support from IRIS National Network of Centres of Excellence and NSERC while at McGill University. 5 Supported by NSERC research grants programme. 
Abstract-found: 1
Intro-found: 1
Reference: [AI90] <author> David Avis and Hiroshi Imai. </author> <title> Locating a Robot with Angle Measurements. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 10 </volume> <pages> 311-326, </pages> <year> 1990. </year>
Reference-contexts: Their algorithm runs in time linear in the number of landmarks, and it assumes that a correspondence is given between each landmark seen by the robot and a point in the map of the environment. Avis and Imai <ref> [AI90] </ref> also investigated the problem of localizing a robot using angle measurements, but they did not assume any correspondence between the landmarks seen by the robot and points in the environment.
Reference: [AMM + 93] <author> Esther M. Arkin, Hank Meijer, Joseph S.B. Mitchell, David Rappaport, and Steven S. Skiena. </author> <title> Decision Trees for Geometric Models. </title> <booktitle> In Proceedings of the Ninth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 369-378, </pages> <address> San Diego, CA, May 19-21 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: in the library is given a fixed position, orientation and scale, then it has been shown that both the problem of finding a minimum cardinality probe set (for a noninteractive probing strategy) [BS91] and the problem of con structing a minimum height decision tree for probing (for an interactive strategy) <ref> [AMM + 93] </ref> are NP-Complete. Arkin et al.[AMM + 93] give a greedy strategy that builds a decision tree of height at most dlog ke times that of an optimal decision tree, where k is the number of polygons in the library. <p> Arkin et al.<ref> [AMM + 93] </ref> give a greedy strategy that builds a decision tree of height at most dlog ke times that of an optimal decision tree, where k is the number of polygons in the library. The minimum height decision tree used for probing in [AMM + 93] is different than our localizing decision tree. It is a binary decision tree whose internal nodes represent point probes whose outcome is either positive or negative and whose edges are unweighted.
Reference: [BD90] <author> Kenneth Basye and Thomas Dean. </author> <title> Map learning with indistinguishable locations. </title> <editor> In M. Henrion L. N. Kanal J. F. Lemmer, editor, </editor> <booktitle> Uncertainty in Artificial Intelligence 5, </booktitle> <pages> pages 331-340. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: This motivates a search for strategies that direct the robot to travel around its environment and to collect additional sensory data <ref> [BD90, KB87, DJMW93] </ref> to deduce its exact position. In this paper, we view the general robot localization problem as consisting of two phases: hypothesis generation and hypothesis elimination.
Reference: [BG94] <author> Margrit Betke and Leonid Gurvits. </author> <title> Mobile Robot Localization Using Landmarks. Extended abstract, </title> <year> 1994. </year>
Reference-contexts: Betke and Gurvits <ref> [BG94] </ref> gave an algorithm that uses the angles subtended by landmarks in the robot's environment to localize a robot.
Reference: [BLM92] <author> Prosenjit K. Bose, Anna Lubiw, and J. Ian Munro. </author> <title> Efficient Visibility Queries in Simple Polygons. In Cao An Wang, editor, </title> <booktitle> Proceedings of the Fourth Canadian Conference on Computational Geometry, </booktitle> <pages> pages 23-28, </pages> <address> St. </address> <publisher> John's, </publisher> <address> Newfound-land, Canada, </address> <month> August 10-14 </month> <year> 1992. </year> <institution> Memorial University of Newfoundland. </institution> <note> Also P. </note> <author> Bose, </author> <type> Master's thesis, </type> <institution> University of Waterloo, </institution> <month> Dec. </month> <year> 1991. </year> <month> - 27 </month> - 
Reference-contexts: building a data structure for our greedy localization strategy. 4.1 Visibility cells and the overlay arrangement When we consider positions where the robot can move to localize itself, we reduce the infinite number of locations in P to a finite number by first creating a visibility cell decomposition of P <ref> [Bos91, BLM92, GMR92] </ref>. A visibility cell (or visibility region) C of P is a maximally connected subset of P with the property that any two points in C see the same subset of vertices of P ([Bos91, BLM92]). <p> of P with the property that any two points in C see the same subset of vertices of P (<ref> [Bos91, BLM92] </ref>). A visibility cell decomposition of P is simply a subdivision of P into visibility cells. This decomposition can be computed in O (n 3 log n) using techniques in [Bos91, BLM92]. It is created by introducing O (nr) lines, called visibility edges, into the interior of P , where r is the number of reflex vertices 2 of P . <p> If p is outside P , then V fl (p) is equal to the special symbol ;. For a complete discussion of visibility skeletons and a proof that V fl (p) = V fl (q) for any two points p and q in the same visibility cell, see <ref> [Bos91, BLM92, GMR92] </ref>. Because points in the same visibility cell have the same visibility skeleton, and there are only O (n 2 r) visibility cells, we use this for the signature of a location.
Reference: [Bos91] <author> Prosenjit K. Bose. </author> <title> Visibility in Simple Polygons. </title> <type> Master's thesis, </type> <institution> University of Waterloo, Waterloo, </institution> <address> Ontario, Canada, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: building a data structure for our greedy localization strategy. 4.1 Visibility cells and the overlay arrangement When we consider positions where the robot can move to localize itself, we reduce the infinite number of locations in P to a finite number by first creating a visibility cell decomposition of P <ref> [Bos91, BLM92, GMR92] </ref>. A visibility cell (or visibility region) C of P is a maximally connected subset of P with the property that any two points in C see the same subset of vertices of P ([Bos91, BLM92]). <p> of P with the property that any two points in C see the same subset of vertices of P (<ref> [Bos91, BLM92] </ref>). A visibility cell decomposition of P is simply a subdivision of P into visibility cells. This decomposition can be computed in O (n 3 log n) using techniques in [Bos91, BLM92]. It is created by introducing O (nr) lines, called visibility edges, into the interior of P , where r is the number of reflex vertices 2 of P . <p> If p is outside P , then V fl (p) is equal to the special symbol ;. For a complete discussion of visibility skeletons and a proof that V fl (p) = V fl (q) for any two points p and q in the same visibility cell, see <ref> [Bos91, BLM92, GMR92] </ref>. Because points in the same visibility cell have the same visibility skeleton, and there are only O (n 2 r) visibility cells, we use this for the signature of a location.
Reference: [BR93] <author> Ronen Basri and Ehud Rivlin. </author> <title> Homing using combinations of model views. </title> <booktitle> In Proceedings of the International Joint Conference of Artificial Intelligence, </booktitle> <pages> pages 1656-1591, </pages> <address> Chambery, France, August 1993. </address> <publisher> Morgan Kaufman Publishers. </publisher>
Reference-contexts: To date, mobile robot research that supposes the use of a map generally assumes either that the position of the robot is always known, or that it can be estimated using sensor data acquired by displacing the robot only small amounts <ref> [BR93, KMK93, TA92] </ref>. However, self-similarities between separate portions of the environment prevent a robot that has been dropped into or activated at some unknown place from uniquely determining its exact location without moving around.
Reference: [BRS91] <author> Avrim Blum, Prabhakar Raghavan, and Baruch Schieber. </author> <title> Navigating in Unfamiliar Geometric Terrain. </title> <booktitle> In Proceedings of the Twenty-third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 494-504, </pages> <year> 1991. </year> <note> To appear in SICOMP. </note>
Reference-contexts: Blum, Raghavan and Schieber <ref> [BRS91] </ref> gave a strategy that matched the ( p n) lower bound for navigating between two points with oriented, rectangular obstacles.
Reference: [BS91] <author> Patrice Belleville and Tom C. Shermer. </author> <title> Probing Polygons Minimally is Hard. </title> <type> Technical Report CMPT TR 91-12, </type> <institution> Simon Fraser University, Burnaby, B.C., Canada, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: If each polygon in the library is given a fixed position, orientation and scale, then it has been shown that both the problem of finding a minimum cardinality probe set (for a noninteractive probing strategy) <ref> [BS91] </ref> and the problem of con structing a minimum height decision tree for probing (for an interactive strategy) [AMM + 93] are NP-Complete.
Reference: [Cha90] <author> Bernard Chazelle. </author> <title> Triangulating a Simple Polygon in Linear Time. </title> <booktitle> In Proceedings of the 31 st Annual Foundations of Computer Science, </booktitle> <pages> pages 220-229. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: We first compute for each hypothetical initial location p j the shortest path tree from the origin to all of the vertices of P j using the algorithm given in [GHL + 87]. Since a simple polygon can be triangulated in linear time <ref> [Cha90] </ref>, the shortest path tree for each p j can also be computed in linear time.
Reference: [Dav86] <author> Ernest Davis. </author> <title> Representing and Acquiring Geographic Knowledge. </title> <publisher> Pitman and Morgan Kaufmann Publishers, Inc., </publisher> <address> London and Los Altos, CA, </address> <year> 1986. </year>
Reference-contexts: Also, the most common devices for measuring distance, and hence position, on actual mobile robots are relative measurement tools such as odometers. Therefore, they yield imperfect estimates of orientation, distance and velocity, and the errors in these estimates accumulate disastrously with successive motions <ref> [Dav86] </ref>. Our strategy is well-suited to handling the accumulation of error problem via simple recalibration, as we will point out later. A solution to the hypothesis generation phase of robot localization has been given by Guibas, Motwani and Raghavan in [GMR92].
Reference: [DI94] <author> Amitava Datta and Christian Icking. </author> <title> Competitive Searching in a Generalized Street. </title> <booktitle> In Proceedings of the Tenth Annual Symposium on Computational Geometry, </booktitle> <pages> pages 175-182, </pages> <address> Stony Brook, NY, June 6-8 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: That is, every point on L is visible to some point on R and visa versa. Kleinberg [Kle94a] gave a strategy that improved Klein's ratio to 2 p 2, and Datta - 8 - and Icking <ref> [DI94] </ref> gave a strategy with a ratio of 9.06 for a more general class of polygons called generalized streets, where every point on the boundary is visible from a point on a horizontal line segment joining L and R.
Reference: [DJMW93] <author> Gregory Dudek, Michael Jenkin, Evangelos Milios, and David Wilkes. </author> <title> Map validation and self-location in a graph-like world. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Artificial Intelligence, </booktitle> <pages> pages 1648-1653, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year> <booktitle> Internation Joint Conf. on Artificial Intelligence Inc. </booktitle>
Reference-contexts: This motivates a search for strategies that direct the robot to travel around its environment and to collect additional sensory data <ref> [BD90, KB87, DJMW93] </ref> to deduce its exact position. In this paper, we view the general robot localization problem as consisting of two phases: hypothesis generation and hypothesis elimination.
Reference: [ELW93] <author> Peter Eades, X. Lin, </author> <title> and N.C. Wormald. Performance Guarantees for Motion Planning with Temporal Uncertainty. </title> <journal> Australian Computing Journal, </journal> <volume> 25(1) </volume> <pages> 21-28, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: For squares of arbitrary size they gave a strategy achieving a ratio of p They also showed, along with Eades, Lin and Wormald <ref> [ELW93] </ref>, that when t is an infinite wall and the obstacles are oriented rectangles, there is a lower bound of ( p n) on the ratio achievable by any strategy.
Reference: [GA81] <author> Hossam A. El Gindy and David Avis. </author> <title> A Linear Algorithm for Computing the Visibility Polygon from a Point. </title> <journal> Journal of Algorithms, </journal> <volume> 2 </volume> <pages> 186-197, </pages> <year> 1981. </year>
Reference-contexts: Since the visibility polygon and the visibility skeleton for a point p 2 P can be computed in O (n) time (see <ref> [GA81] </ref>) and we can compare two visibility skeletons with m vertices in O (m) time to see if they are identical, we can compute the partition of H for C in O (kn+k 2 m) time, where m is the maximum number of vertices on any of the k visibility skeletons.
Reference: [GHL + 87] <author> Leonidas J. Guibas, John Hershberger, Daniel Leven, Micha Sharir, and Robert E. Tarjan. </author> <title> Linear-Time Algorithms for Visibility and Shortest Path Problems Inside Triangulated Simple Polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: We first compute for each hypothetical initial location p j the shortest path tree from the origin to all of the vertices of P j using the algorithm given in <ref> [GHL + 87] </ref>. Since a simple polygon can be triangulated in linear time [Cha90], the shortest path tree for each p j can also be computed in linear time. The algorithm in [GHL + 87] also gives a data-structure for storing the shortest path tree so that the length of the <p> path tree from the origin to all of the vertices of P j using the algorithm given in <ref> [GHL + 87] </ref>. Since a simple polygon can be triangulated in linear time [Cha90], the shortest path tree for each p j can also be computed in linear time. The algorithm in [GHL + 87] also gives a data-structure for storing the shortest path tree so that the length of the shortest path from the origin to any point x 2 P j can be found in time O (log n) and the path from the origin to x can be found in <p> We first use the data-structure in <ref> [GHL + 87] </ref> to determine in O (log n) time the length d x and the last edge e x on the shortest path (o; x) and the length d y and the last edge e y on the shortest path (o; y). <p> To find this edge we again use the data-structure in <ref> [GHL + 87] </ref> and follow the paths (o; x) and (o; y) to find the cusp v of the funnel. Since the data-structure in [GHL + 87] stores the shortest path tree by storing a parent pointer for each node of the tree, v can be found by tracing (o; x) <p> To find this edge we again use the data-structure in <ref> [GHL + 87] </ref> and follow the paths (o; x) and (o; y) to find the cusp v of the funnel. Since the data-structure in [GHL + 87] stores the shortest path tree by storing a parent pointer for each node of the tree, v can be found by tracing (o; x) back from x to o and marking all the vertices on the path and then tracing (o; y) back from y to the first <p> By keeping the shortest path tree computed by the algorithm in <ref> [GHL + 87] </ref> for each hypothetical initial location p j , we can later extract the actual shortest path to any cell C in A within any translate P j in time O (log n + l), where l is the number of segments on the shortest path. 5 A Greedy <p> Using the data structure in <ref> [GHL + 87] </ref> these paths can be easily computed. * For each point q C;j 2 Q, the partition of H associated with cell C, as defined in Section 4.2. Next we describe how Strategy MDL directs the robot to behave.
Reference: [GMR92] <author> Leonidas J. Guibas, Rajeev Motwani, and Prabhakar Raghavan. </author> <title> The Robot Localization Problem in Two Dimensions. </title> <booktitle> In Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 259-268, </pages> <address> Orlando, FL, </address> <month> January 27-29 </month> <year> 1992. </year> <month> - 28 </month> - 
Reference-contexts: Our strategy is well-suited to handling the accumulation of error problem via simple recalibration, as we will point out later. A solution to the hypothesis generation phase of robot localization has been given by Guibas, Motwani and Raghavan in <ref> [GMR92] </ref>. We describe this further in the next section, after making more precise the definitions of the two phases of robot localization. Our paper is concerned with minimizing the distance traveled in the hypothesis elimination phase of robot localization. It begins where [GMR92] left off. <p> been given by Guibas, Motwani and Raghavan in <ref> [GMR92] </ref>. We describe this further in the next section, after making more precise the definitions of the two phases of robot localization. Our paper is concerned with minimizing the distance traveled in the hypothesis elimination phase of robot localization. It begins where [GMR92] left off. Together, the two papers give a solution to the general robot localization problem. In this paper, we define a natural algorithmic variant of the problem of localizing a robot with minimum travel and show this variant is NP-hard. <p> The farthest that the robot must travel to determine its location is d 1 + d 3 , so the weighted height of this decision tree is d 1 + d 3 . - 6 - 2.3 Previous work Previous work on robot localization by Guibas, Motwani, and Raghavan in <ref> [GMR92] </ref> showed how to preprocess a map polygon P so that given the visibility polygon V that a robot sees, the set of points in P whose visibility polygon is congruent to V , and oriented the same way, can be returned quickly. <p> building a data structure for our greedy localization strategy. 4.1 Visibility cells and the overlay arrangement When we consider positions where the robot can move to localize itself, we reduce the infinite number of locations in P to a finite number by first creating a visibility cell decomposition of P <ref> [Bos91, BLM92, GMR92] </ref>. A visibility cell (or visibility region) C of P is a maximally connected subset of P with the property that any two points in C see the same subset of vertices of P ([Bos91, BLM92]). <p> The number of cells in this decomposition, as well as their total complexity, is O (n 2 r) (see <ref> [GMR92] </ref> for a proof). Although two points p and q in the same visibility cell C see the same subset of vertices of P , they may not have the same visibility polygon (i.e. it may be that V (p) 6= V (q)). <p> If p is outside P , then V fl (p) is equal to the special symbol ;. For a complete discussion of visibility skeletons and a proof that V fl (p) = V fl (q) for any two points p and q in the same visibility cell, see <ref> [Bos91, BLM92, GMR92] </ref>. Because points in the same visibility cell have the same visibility skeleton, and there are only O (n 2 r) visibility cells, we use this for the signature of a location. <p> The number k of such locations is bounded above by r (see <ref> [GMR92] </ref> for a proof). From this set H, we can select the first location p 1 (or any arbitrary location) to serve as an origin for a local coordinate system. <p> Using Strategy MDL for hypothesis elimination, a strategy for the complete robot localization problem can be obtained as follows. Preprocess the map polygon P using a method similar to that in <ref> [GMR92] </ref>.
Reference: [HR76] <author> Laurent Hyafil and Ronald L. Rivest. </author> <title> Constructing Optimal Binary Decision Trees is NP-Complete. </title> <journal> Information Processing Letters, </journal> <volume> 5(1) </volume> <pages> 15-17, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: of the possible initial locations in H is the true location of a robot, given that the initial visibility polygon of the robot is V ? We show that this problem is NP-hard by giving a reduction from the Abstract Decision Tree problem, proven NP-complete by Hyafil and Rivest in <ref> [HR76] </ref>.
Reference: [KB87] <author> Benjamin J. Kuipers and Y. T. Byun. </author> <title> A qualitative approach to robot exploration and map-learning. </title> <booktitle> In Proceedings of the IEEE Workshop on Spatial Reasoning and Multi-Sensor Fusion, </booktitle> <pages> pages 390-404, </pages> <address> Los Altos, CA, 1987. </address> <publisher> IEEE. </publisher>
Reference-contexts: This motivates a search for strategies that direct the robot to travel around its environment and to collect additional sensory data <ref> [BD90, KB87, DJMW93] </ref> to deduce its exact position. In this paper, we view the general robot localization problem as consisting of two phases: hypothesis generation and hypothesis elimination.
Reference: [Kle92] <author> Rolf Klein. </author> <title> Walking an Unknown Street with Bounded Detour. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 1 </volume> <pages> 325-351, </pages> <year> 1992. </year>
Reference-contexts: Several people have studied the problem of navigating from a vertex s to a vertex t inside an unknown simple polygon. They assume that at every point on its path the robot can get the visibility polygon of that point. Klein <ref> [Kle92] </ref> proved a lower bound of p 2 and gave a strategy achieving a ratio of 5:72 for the class of street polygons. A street is a simple polygon such that the clockwise chain L and the counterclockwise chain R from s to t are mutually weakly visible.
Reference: [Kle94a] <author> Jon Kleinberg. </author> <title> On-line Search in a Simple Polygon. </title> <booktitle> In Proceedings of the Fifth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 8-15, </pages> <year> 1994. </year>
Reference-contexts: A street is a simple polygon such that the clockwise chain L and the counterclockwise chain R from s to t are mutually weakly visible. That is, every point on L is visible to some point on R and visa versa. Kleinberg <ref> [Kle94a] </ref> gave a strategy that improved Klein's ratio to 2 p 2, and Datta - 8 - and Icking [DI94] gave a strategy with a ratio of 9.06 for a more general class of polygons called generalized streets, where every point on the boundary is visible from a point on a
Reference: [Kle94b] <author> Jon Kleinberg. </author> <title> The Localization Problem for Mobile Robots. </title> <booktitle> In Proceedings of the 35 th Annual Foundations of Computer Science, </booktitle> <pages> pages 521-533, </pages> <address> Santa Fe, NM, November 20-22 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: They also showed how to answer a single localization query in O (mn) time with no preprocessing. Kleinberg <ref> [Kle94b] </ref> has independently given an interactive strategy for localizing a robot in a known environment. As in our work, he seeks to minimize the ratio of the distance traveled by the robot using his strategy to the length of an optimal verification path.
Reference: [KMK93] <author> Akio Kosaka, Min Meng, and A. C. Kak. </author> <title> Vision-guided mobile robot navigation using retroactive updating of position uncertainty. </title> <booktitle> In Proceedings of the International Conference of Robotics and Automation, </booktitle> <volume> Volume 2, </volume> <pages> pages 1-7, </pages> <address> Atlanta, GA, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: To date, mobile robot research that supposes the use of a map generally assumes either that the position of the robot is always known, or that it can be estimated using sensor data acquired by displacing the robot only small amounts <ref> [BR93, KMK93, TA92] </ref>. However, self-similarities between separate portions of the environment prevent a robot that has been dropped into or activated at some unknown place from uniquely determining its exact location without moving around.
Reference: [Lat91] <author> Jean-Claude Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1991. </year>
Reference-contexts: The most common application domain for mobile robots is indoor "structured" environments. In such environments it is often possible to construct a map of the environment, and it is acceptable to use a polygonal approximation P of the free space <ref> [Lat91] </ref> as a map. A common sensing method used by mobile robots is range sensing (for example, sonar sensing or laser range sensing). 2.1 Assumptions about the robot We assume the following throughout this paper. * The robot is mobile and moves in a static 2-dimensional obstacle-free environment.
Reference: [LP84] <author> D.T. Lee and Franco P. Preparata. </author> <title> Euclidean Shortest Paths in the Presence of Rectilinear Barriers. </title> <journal> Networks, </journal> <volume> 14(3) </volume> <pages> 393-410, </pages> <year> 1984. </year>
Reference-contexts: Proof: It is shown in <ref> [LP84] </ref> that the shortest paths (s; x) and (s; y) are polygonal paths whose interior vertices are vertices of P , and that the union of these two paths (in fact, the union of any finite number of shortest paths from s to points in P ) forms a planar tree <p> As in <ref> [LP84] </ref> we call the union (v; x) [ (v; y) the funnel associated with xy, and we call v the cusp of the funnel.
Reference: [PY91] <author> Christos Papadimitriou and Mihalis Yannakakis. </author> <title> Shortest Paths without a Map. </title> <journal> Theoretical Computer Science, </journal> <volume> 84 </volume> <pages> 127-150, </pages> <year> 1991. </year>
Reference-contexts: As with localization strategies, this ratio is called the competitive ratio of the strategy. If a dynamic navigation strategy always reaches the target t by traveling a distance no more than k times the length of the shortest path, then the strategy is called k-competitive. Papadimitriou and Yannakakis <ref> [PY91] </ref> gave a strategy for navigating between two points, where all obstacles are unit squares, that achieves a competitive ratio of 1.5, which they show is optimal.
Reference: [ST85] <author> Daniel D. Sleator and Robert E. Tarjan. </author> <title> Amortized Efficiency of List Update and Paging Rules. </title> <journal> Communications of the ACM, </journal> <volume> 28 </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: Thus our strategy can be seen as a (k 1)-competitive on-line algorithm according to the notion of competitive on-line algorithms introduced by Sleator and Tarjan <ref> [ST85] </ref>, since the tour it generates is no longer than k 1 times the shortest tour. <p> The worst-case value of this ratio over all starting points is called the competitive ratio of the strategy, in the sense of on-line algorithms <ref> [ST85] </ref>. If the robot travels a distance no more than k times the length of an optimal verification path, then the strategy can be called k-competitive. Kleinberg's model differs from ours in several ways.
Reference: [TA92] <author> Raj Talluri and J. K. Aggarwal. </author> <title> Position estimation for an autonomous mobile robot in an outdoor environment. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 8(5) </volume> <pages> 573-584, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: To date, mobile robot research that supposes the use of a map generally assumes either that the position of the robot is always known, or that it can be estimated using sensor data acquired by displacing the robot only small amounts <ref> [BR93, KMK93, TA92] </ref>. However, self-similarities between separate portions of the environment prevent a robot that has been dropped into or activated at some unknown place from uniquely determining its exact location without moving around.
References-found: 28

