URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-033-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Title: Exact Essential-Hazard-Free State Minimization of Incompletely Specified Asynchronous Sequential Machines  
Author: Fu-Chiung J. Cheng Luis Plana 
Keyword: State minimization, essential hazards, hazard-free synthesis, flow tables, asynchronous sequential circuits.  
Note: On leave from  This author is supported by a grant from Consejo Nacional de Investigaciones Cientficas Tecnologicas, Venezuela.  
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  Universidad Nacional Experimental Politecnica, Barquisimeto, Venezuela.  
Pubnum: CUCS-033-94  
Email: fcheng, planag@cs.columbia.edu  
Phone: Tel: 212-939-7070, Fax: 212-666-0140  
Date: December 1994  
Abstract: To insure correct dynamic behaviour of asynchronous sequential machines, hazards must be eliminated for they may cause malfunctions of the whole system. However, Hazard-free state minimization has received almost no prior attention in the literature. This paper describes an exact algorithm for essential-hazard-free state minimization of incompletely specified asynchronous sequential machines. Novel techniques for the elimination of apparent and potential essential hazards are proposed and exploited in our algorithm. The algorithm has been implemented and applied to over a dozen asynchronous sequential machines. Results are compared with results of non-essential-hazard-free method SIS. Most of the tested cases can be reduced to essential hazard free flow tables. 
Abstract-found: 1
Intro-found: 1
Reference: [Bru91] <author> Erik Brunvand. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: The choice of a or b should be decided during the state assignment or logic minimization stages. 5 Experimental Results EHF-MinCover has been implemented in C++ and runs under Unix. Test cases were run on a Sun IPX workstation. These test cases are self-timed building blocks from <ref> [Ung93, Sut89, Bru91] </ref> and some of them are re-implemented using two-phase handshaking. Table 8 shows the main results of the EHF state minimization. N in , N out and N IT are the number of inputs, outputs and input transitions, respectively. <p> This work is important because a normal flow table has no hazard-free realization under unbounded delay assumption if it contains any essential hazard. One promising result obtained is that most of the building block elements in <ref> [Ung93, Sut89, Bru91] </ref> can be reduced to EHF flow tables. To synthesize a hazard-free asynchronous circuits, a critical race free state assignment [Tra66] and hazard-free logic minimization [ND92] must be applied to the EHF reduced flow table generated by EHF-MinCover.
Reference: [HRSJ91] <author> G.D. Hachtel, J.K. Rho, F. Somenzi, and R. </author> <title> Jacoby. Exact and heuristic algorithms for the minimization of incompletely specified state machines. </title> <booktitle> In Proc. European Design Automation Conf., </booktitle> <pages> pages 184-191. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: This paper addresses the problem of essential-hazard-free state minimization. State minimization is an important step for the synthesis of sequential circuits. Many researchers have worked on this problem <ref> [Ung69, HRSJ91, PG93] </ref>. However, The existing state minimization methods pay no attention to essential hazards. The reason for this may be due to the belief that state minimization has no impact on the presence of essential hazards in a reduced flow table. <p> For example, f1, 26, 34, 5g and f1, 26, 345g are both closed covers but the later is minimal and the former is not. The goal of state minimization is to find a minimal closed cover. The state minimization process <ref> [PG93, HRSJ91] </ref> usually has the following steps: 4 * Obtain the prime compatibles (or maximal compatibles). * Select a set of compatibles from the prime compatibles (or maximal compatibles) which satisfies the covering, closure, and minimal conditions. <p> Table 9 shows the results of state minimization by SIS <ref> [SSL + 92, HRSJ91] </ref> and EHF-MinCover. The Unix time command is used to measure the running time of EHF-MinCover. T real is the "wall-clock" time, T user the time running in user-mode and T sys the time running in system-mode in Unix. The experiments show that EHF-MinCover is very efficient.
Reference: [LKSV91] <author> Luciano Lavagno, Kurt Keutzer, and Alberto Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis of hazard-free asynchronous circuits. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 302-308, </pages> <year> 1991. </year> <month> 18 </month>
Reference-contexts: 1 Introduction Interest in asynchronous sequential circuits is growing due to several potential benefits: avoidance of clock skew, low power consumption, average-case instead of worst-case performance, and automatic adaptation to physical properties among others <ref> [LKSV91, MBM89, Mar86, ND91] </ref>. The synthesis of asynchronous circuits starts with an asynchronous state machine specification and consists of the following three steps: state minimization, state assignment, and logic minimization. One of the most important aspects of asynchronous design is to guarantee that the circuit implementations are hazard-free.
Reference: [Mar86] <author> Alain J. Martin. </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits. </title> <journal> Distributed Computing, </journal> <volume> 1(4) </volume> <pages> 226-234, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Interest in asynchronous sequential circuits is growing due to several potential benefits: avoidance of clock skew, low power consumption, average-case instead of worst-case performance, and automatic adaptation to physical properties among others <ref> [LKSV91, MBM89, Mar86, ND91] </ref>. The synthesis of asynchronous circuits starts with an asynchronous state machine specification and consists of the following three steps: state minimization, state assignment, and logic minimization. One of the most important aspects of asynchronous design is to guarantee that the circuit implementations are hazard-free.
Reference: [MBM89] <author> Teresa H.-Y. Meng, Robert W. Brodersen, and David G. Messerschmitt. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 8(11) </volume> <pages> 1185-1205, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Interest in asynchronous sequential circuits is growing due to several potential benefits: avoidance of clock skew, low power consumption, average-case instead of worst-case performance, and automatic adaptation to physical properties among others <ref> [LKSV91, MBM89, Mar86, ND91] </ref>. The synthesis of asynchronous circuits starts with an asynchronous state machine specification and consists of the following three steps: state minimization, state assignment, and logic minimization. One of the most important aspects of asynchronous design is to guarantee that the circuit implementations are hazard-free.
Reference: [ND91] <author> Steven M. Nowick and David L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. Int'l. Conf. Computer-Aided Design, </booktitle> <pages> pages 318-321. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Interest in asynchronous sequential circuits is growing due to several potential benefits: avoidance of clock skew, low power consumption, average-case instead of worst-case performance, and automatic adaptation to physical properties among others <ref> [LKSV91, MBM89, Mar86, ND91] </ref>. The synthesis of asynchronous circuits starts with an asynchronous state machine specification and consists of the following three steps: state minimization, state assignment, and logic minimization. One of the most important aspects of asynchronous design is to guarantee that the circuit implementations are hazard-free.
Reference: [ND92] <author> Steven M. Nowick and David L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <booktitle> In Proc. Int'l. Conf. Computer-Aided Design, </booktitle> <pages> pages 626-630. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Second, the state assignment must be free of critical races. Finally, the implementation must be free of combinational hazards. The exact hazard-free logic minimization for two-level combinational circuits, which solves the combinational-hazard-free problem, has been proposed by Nowick <ref> [ND92] </ref>. A unicode single transition time state (USTT) state assignment which solves the critical-race-free assignment problem, was proposed by Tracey [Tra66]. One important and difficult problem in designing hazard-free asynchronous sequential circuits is to guarantee that the specification remains free of essential hazards in every stage of the synthesis process. <p> One promising result obtained is that most of the building block elements in [Ung93, Sut89, Bru91] can be reduced to EHF flow tables. To synthesize a hazard-free asynchronous circuits, a critical race free state assignment [Tra66] and hazard-free logic minimization <ref> [ND92] </ref> must be applied to the EHF reduced flow table generated by EHF-MinCover.
Reference: [PG93] <author> Ruchir Puri and Jun Gu. </author> <title> An efficient algorithm to search for minimal closed covers in sequential machines. </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 12(6) </volume> <pages> 737-745, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This paper addresses the problem of essential-hazard-free state minimization. State minimization is an important step for the synthesis of sequential circuits. Many researchers have worked on this problem <ref> [Ung69, HRSJ91, PG93] </ref>. However, The existing state minimization methods pay no attention to essential hazards. The reason for this may be due to the belief that state minimization has no impact on the presence of essential hazards in a reduced flow table. <p> Section 4 describes the EHF state minimization algorithm in detail. Section 5 gives experimental results. Section 6 concludes this paper. 2 Definitions To simplify the discussion, we introduce some basic definitions in this section. These definitions are taken from <ref> [PG93, Ung69] </ref> with minor modifications. 2 2.1 State Minimization The behavior of a sequential machine can be described by a flow table. A flow table is a two-dimensional array where columns correspond to the input states and rows correspond to the internal states. <p> For example, f1, 26, 34, 5g and f1, 26, 345g are both closed covers but the later is minimal and the former is not. The goal of state minimization is to find a minimal closed cover. The state minimization process <ref> [PG93, HRSJ91] </ref> usually has the following steps: 4 * Obtain the prime compatibles (or maximal compatibles). * Select a set of compatibles from the prime compatibles (or maximal compatibles) which satisfies the covering, closure, and minimal conditions. <p> It is similar to the Puri method for efficiently searching for minimal closed covers <ref> [PG93] </ref>. The Puri method constructs a search tree from prime compatibles and builds up a tree-like search space by utilizing a tight lower bound derived from the maximal incompatibles. The tree is expanded if a solution is not found for the current lower bound.
Reference: [SSL + 92] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoy, P. R. Stephan, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> SIS: A system for sequential circuit synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Table 9 shows the results of state minimization by SIS <ref> [SSL + 92, HRSJ91] </ref> and EHF-MinCover. The Unix time command is used to measure the running time of EHF-MinCover. T real is the "wall-clock" time, T user the time running in user-mode and T sys the time running in system-mode in Unix. The experiments show that EHF-MinCover is very efficient.
Reference: [Sut89] <author> Ivan E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 720-738, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The choice of a or b should be decided during the state assignment or logic minimization stages. 5 Experimental Results EHF-MinCover has been implemented in C++ and runs under Unix. Test cases were run on a Sun IPX workstation. These test cases are self-timed building blocks from <ref> [Ung93, Sut89, Bru91] </ref> and some of them are re-implemented using two-phase handshaking. Table 8 shows the main results of the EHF state minimization. N in , N out and N IT are the number of inputs, outputs and input transitions, respectively. <p> This work is important because a normal flow table has no hazard-free realization under unbounded delay assumption if it contains any essential hazard. One promising result obtained is that most of the building block elements in <ref> [Ung93, Sut89, Bru91] </ref> can be reduced to EHF flow tables. To synthesize a hazard-free asynchronous circuits, a critical race free state assignment [Tra66] and hazard-free logic minimization [ND92] must be applied to the EHF reduced flow table generated by EHF-MinCover.
Reference: [Tra66] <author> James H. Tracey. </author> <title> Internal state assignment for asynchronous sequential circuits. </title> <journal> IEEE Trans. Electronic Computers, </journal> <volume> EC-15(4):551-560, </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: Finally, the implementation must be free of combinational hazards. The exact hazard-free logic minimization for two-level combinational circuits, which solves the combinational-hazard-free problem, has been proposed by Nowick [ND92]. A unicode single transition time state (USTT) state assignment which solves the critical-race-free assignment problem, was proposed by Tracey <ref> [Tra66] </ref>. One important and difficult problem in designing hazard-free asynchronous sequential circuits is to guarantee that the specification remains free of essential hazards in every stage of the synthesis process. This paper addresses the problem of essential-hazard-free state minimization. <p> One promising result obtained is that most of the building block elements in [Ung93, Sut89, Bru91] can be reduced to EHF flow tables. To synthesize a hazard-free asynchronous circuits, a critical race free state assignment <ref> [Tra66] </ref> and hazard-free logic minimization [ND92] must be applied to the EHF reduced flow table generated by EHF-MinCover.
Reference: [Ung68] <author> Stephen H. Unger. </author> <title> A row assignment for delay-free realizations of flow tables without essential hazards. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 17(2) </volume> <pages> 146-151, </pages> <month> February </month> <year> 1968. </year>
Reference-contexts: Second, an asynchronous circuit implemented from an EHF flow table would be fast and robust since no delays need to be added and no glitches will be generated <ref> [Ung68] </ref>. This paper is organized as follows: Section 2 gives some basic definitions that simplify the discussion. Section 3 illustrates the essential hazard problems in EHF state minimization. The techniques to eliminate and avoid EHs are also proposed here. Section 4 describes the EHF state minimization algorithm in detail.
Reference: [Ung69] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: This paper addresses the problem of essential-hazard-free state minimization. State minimization is an important step for the synthesis of sequential circuits. Many researchers have worked on this problem <ref> [Ung69, HRSJ91, PG93] </ref>. However, The existing state minimization methods pay no attention to essential hazards. The reason for this may be due to the belief that state minimization has no impact on the presence of essential hazards in a reduced flow table. <p> Section 4 describes the EHF state minimization algorithm in detail. Section 5 gives experimental results. Section 6 concludes this paper. 2 Definitions To simplify the discussion, we introduce some basic definitions in this section. These definitions are taken from <ref> [PG93, Ung69] </ref> with minor modifications. 2 2.1 State Minimization The behavior of a sequential machine can be described by a flow table. A flow table is a two-dimensional array where columns correspond to the input states and rows correspond to the internal states. <p> For example, compatible 345 is maximal but compatible 34 is not. Similarly, a maximal incompatible is an incompatible that is not covered by any other incompatible. The procedures to construct a pair chart and to obtain the maximal compatibles and maximal incompatibles can be found in <ref> [Ung69] </ref>. <p> We consider only SIC, normal flow tables <ref> [Ung69] </ref>. <p> Lemma 6 A flow table is SSEH-free if and only if every transition in the flow table is SSEH-free. 3.4 d-trios The flow table shown in Figure 3 (d) contains a pattern that is very similar to a SSEH. This pattern is called a d-trio <ref> [Ung69] </ref>. 9 Definition 6 A flow table contains a d-trio for the transition from total state (i; A) to total state (j; B) if and only if there exists state k such that k = N (j; A), k 6= i, k 6= j, and N (k; B) = j. <p> A d-trio is not considered an essential hazard because a circuit that contains a d-trio, if designed properly and allowed to settle, will not reach an incorrect state. In <ref> [Ung69] </ref>, Unger shows a procedure that produces a USTT state assignment that leads to a circuit which will reach the correct state even in the presence of SHs.
Reference: [Ung93] <author> S. H. Unger. </author> <title> A building block approach to unclocked systems. </title> <booktitle> In Proc. Hawaii International Conf. System Sciences, </booktitle> <pages> pages 339-348. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year> <month> 19 </month>
Reference-contexts: The choice of a or b should be decided during the state assignment or logic minimization stages. 5 Experimental Results EHF-MinCover has been implemented in C++ and runs under Unix. Test cases were run on a Sun IPX workstation. These test cases are self-timed building blocks from <ref> [Ung93, Sut89, Bru91] </ref> and some of them are re-implemented using two-phase handshaking. Table 8 shows the main results of the EHF state minimization. N in , N out and N IT are the number of inputs, outputs and input transitions, respectively. <p> This work is important because a normal flow table has no hazard-free realization under unbounded delay assumption if it contains any essential hazard. One promising result obtained is that most of the building block elements in <ref> [Ung93, Sut89, Bru91] </ref> can be reduced to EHF flow tables. To synthesize a hazard-free asynchronous circuits, a critical race free state assignment [Tra66] and hazard-free logic minimization [ND92] must be applied to the EHF reduced flow table generated by EHF-MinCover.
References-found: 14

