URL: file://theory.lcs.mit.edu/pub/people/segala/CONCUR95.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~segala/CONCUR95.html
Root-URL: 
Title: A Compositional Trace-Based Semantics for Probabilistic Automata  
Author: Roberto Segala 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: We extend the trace semantics for labeled transition systems to a randomized model of concurrent computation. The main objective is to obtain a compositional semantics. The role of a trace in the randomized model is played by a probability distribution over traces, called a trace distribution. We show that the preorder based on trace distribution inclusion is not a precongruence, and we build an elementary context, called the principal context , that is sufficiently powerful to characterize the coarsest precongruence that is contained in the trace distribution preorder. Finally, we introduce a notion of a probabilistic forward simulation and we prove that it is sound for the trace distribution precongruence. An important characteristic of probabilistic forward simulations is that they relate states to probability distributions over states.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Alpern and F.B. Schneider. </author> <title> Defining liveness. </title> <journal> Information Processing Letters, </journal> <volume> 21(4), </volume> <year> 1985. </year>
Reference-contexts: 7 gives some concluding remarks. 2 Preliminaries A probability space is a triple (; F ; P ) where is a set, F is a collection of subsets of that is closed under complement and countable union and such that 2 F, and P is a function from F to <ref> [0; 1] </ref> such that P [] = 1 and such that for any collection fC i g i of at most countably many pairwise disjoint elements of F , P [[ i C i ] = P called the sample space, F is called the field, and P is called the <p> The trace distribution preorder is not a precongruence. Fig. 4. A probabilistic execution of M 2 kC. The trace distribution precongruence preserves properties that resemble the safety properties of ordinary automata <ref> [1] </ref>. <p> That is, P 1 v R P 2 iff there exists a function w : 1 fi 2 ! <ref> [0; 1] </ref> such that 1. for each s 1 2 1 , P 2. for each s 2 2 2 , P 3. for each (s 1 ; s 2 ) 2 1 fi 2 , if w (s 1 ; s 2 ) &gt; 0 then s 1 R s
Reference: 2. <author> J. Aspnes and M.P. Herlihy. </author> <title> Fast randomized consensus using shared memory. </title> <journal> Journal of Algorithms, </journal> <volume> 15(1) </volume> <pages> 441-460, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction The growing interest in randomized algorithms for the solutions of problems in distributed computation <ref> [2, 3] </ref> has created a need for formal models where randomized distributed systems can be analyzed.
Reference: 3. <author> M. Ben-Or. </author> <title> Another advantage of free choice: completely asynchronous agreement protocols. </title> <booktitle> In Proceedings of the 2 nd Annual ACM PODC, </booktitle> <year> 1983. </year>
Reference-contexts: 1 Introduction The growing interest in randomized algorithms for the solutions of problems in distributed computation <ref> [2, 3] </ref> has created a need for formal models where randomized distributed systems can be analyzed.
Reference: 4. <author> S.D. Brookes, C.A.R. Hoare, and A.W. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference-contexts: Our second main theorem is that probabilistic forward simulations are sound for the trace distribution precongruence. We believe that our methodology can be applied to the study of other semantics based on abstract observations. In particular, in further work we plan to extend the failure semantics of <ref> [4] </ref> to the probabilistic framework, and possibly to study a related theory of testing. The rest of the paper is organized as follows.
Reference: 5. <author> I. Christoff. </author> <title> Testing Equivalences for Probabilistic Processes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Uppsala University, </institution> <year> 1990. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past <ref> [5, 7, 8, 10, 13, 19-23] </ref>, and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism.
Reference: 6. <author> R. Gawlick, R. Segala, J.F. Stgaard-Andersen, and N.A. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <booktitle> In Proceedings 21 th ICALP, </booktitle> <address> Jerusalem, </address> <note> LNCS 820, 1994. A full version appears as MIT Technical Report number MIT/LCS/TR-587. </note>
Reference-contexts: The proof that v F S is transitive is much more complicated and is based on a probabilistic version of the execution correspondence lemma of <ref> [6] </ref>. The complete proofs can be found in [19]. Theorem 16. Let M 1 v F S M 2 . Then M 1 v DC M 2 . ut The proof of Theorem 16, which appears in [19], is carried out in two steps.
Reference: 7. <author> R.J. van Glabbeek, S.A. Smolka, B. Steffen, and C.M.N. Tofts. </author> <title> Reactive, generative, and stratified models of probabilistic processes. </title> <booktitle> In Proceedings 5 th Annual Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, USA, </address> <pages> pages 130-141. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past <ref> [5, 7, 8, 10, 13, 19-23] </ref>, and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism. <p> probabilistic automaton is fully probabilistic if it has a unique start state and from each state there is at most one transition enabled. ut An ordinary automaton is a special case of a probabilistic automaton where each transition leads to a Dirac distribution; the generative model of probabilistic processes of <ref> [7] </ref> is a special case of a fully probabilistic automaton; simple probabilistic automata are partially captured by the reactive model of [7] in the sense that the reactive model assumes some form of nondeterminism between different actions. <p> transition enabled. ut An ordinary automaton is a special case of a probabilistic automaton where each transition leads to a Dirac distribution; the generative model of probabilistic processes of <ref> [7] </ref> is a special case of a fully probabilistic automaton; simple probabilistic automata are partially captured by the reactive model of [7] in the sense that the reactive model assumes some form of nondeterminism between different actions. However, the reactive model does not allow nondeterministic choices between transitions involving the same action.
Reference: 8. <author> H. Hansson. </author> <title> Time and Probability in Formal Design of Distributed Systems, volume 1 of Real-Time Safety Critical Systems. </title> <publisher> Elsevier, </publisher> <year> 1994. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past <ref> [5, 7, 8, 10, 13, 19-23] </ref>, and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism. <p> Several formal models for randomized concurrent systems were studied in the past [5, 7, 8, 10, 13, 19-23], and among those, the models of <ref> [8, 19, 20, 22] </ref> distinguish between probability and nondeterminism. Our long term goal is to build a model that extends Labeled Transition Systems [16], that has a strong mathematical foundation, and that can be used for the actual verification of systems. <p> However, the reactive model does not allow nondeterministic choices between transitions involving the same action. By restricting simple probabilistic automata to have finitely many states, we obtain objects with a structure similar to that of the Concurrent Labeled Markov Chains of <ref> [8] </ref>; however, in our model we do not need to distinguish between nondeterministic and probabilistic states. In our model nondeterminism is obtained by means of the structure of the transition relation. <p> The reader is referred to [19] for a complete justification of Definition 5. 3.5 Parallel Composition We now turn to the parallel composition operator, which is defined in the CSP style [9], i.e., by synchronizing two probabilistic automata on their common actions. As outlined in <ref> [8] </ref>, it is not clear how to define a parallel composition operator for general probabilistic automata that extends the CSP synchronization style; thus, we define it only for simple probabilistic automata, and we concentrate on simple probabilistic automata for the rest of this paper.
Reference: 9. <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: The reader is referred to [19] for a complete justification of Definition 5. 3.5 Parallel Composition We now turn to the parallel composition operator, which is defined in the CSP style <ref> [9] </ref>, i.e., by synchronizing two probabilistic automata on their common actions.
Reference: 10. <author> B. Jonsson and K.G. Larsen. </author> <title> Specification and refinement of probabilistic processes. </title> <booktitle> In Proceedings of the 6th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 266-277, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past <ref> [5, 7, 8, 10, 13, 19-23] </ref>, and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism. <p> transition s 1 a ! P 1 of M 1 , there exists a weak combined transition s 2 aext (M 2 ) =) C P 2 of M 2 such that P 1 v R P 2 , where v R is the lifting of R to probability spaces <ref> [10, 20] </ref>.
Reference: 11. <author> B. Jonsson and J. Parrow, </author> <title> editors. </title> <booktitle> Proceedings of CONCUR 94, LNCS 836, </booktitle> <year> 1994. </year>
Reference: 12. <author> C.C. Jou and S.A. Smolka. </author> <title> Equivalences, congruences, and complete axiomatizations for probabilistic processes. </title> <booktitle> In Proceedings of CONCUR 90, </booktitle> <volume> LNCS 458, </volume> <pages> pages 367-383, </pages> <year> 1990. </year>
Reference-contexts: This follows from standard measure theory arguments. In <ref> [12] </ref> Jou and Smolka study a probabilistic trace semantics for generative processes; our rule above to determine whether two probabilistic executions have the same trace distribution coincides with the trace equivalence of [12] (a probabilistic execution is essentially a generative process). Example 3. <p> This follows from standard measure theory arguments. In <ref> [12] </ref> Jou and Smolka study a probabilistic trace semantics for generative processes; our rule above to determine whether two probabilistic executions have the same trace distribution coincides with the trace equivalence of [12] (a probabilistic execution is essentially a generative process). Example 3. The reader may wonder why we have not defined to be trace ( H ).
Reference: 13. <author> K.G. Larsen and A. Skou. </author> <title> Compositional verification of probabilistic processes. </title> <booktitle> In Proceedings of CONCUR 92 LNCS 630, </booktitle> <pages> pages 456-471, </pages> <year> 1992. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past <ref> [5, 7, 8, 10, 13, 19-23] </ref>, and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism.
Reference: 14. <author> N.A. Lynch, I. Saias, and R. Segala. </author> <title> Proving time bounds for randomized distributed algorithms. </title> <booktitle> In Proceedings of the 13 th Annual ACM PODC, </booktitle> <pages> pages 314-323, </pages> <year> 1994. </year>
Reference-contexts: The choice of labeled transition systems is due to their successful application to model concurrency. In [20] we have extended the labeled transition systems model to account for randomization and we have extended the classical simulation and bisimulation relations to it; in <ref> [14, 17] </ref> we have shown how the model of [20] can be used for the actual analysis of randomized distributed systems.
Reference: 15. <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", </booktitle> <volume> LNCS 600, </volume> <pages> pages 397-446, </pages> <year> 1991. </year>
Reference-contexts: In this paper we show how it is possible to define a compositional semantics for proba-bilistic automata that relies on some form of traces rather than simulation relations; then, we show how the simulation method of <ref> [15] </ref> extends to the new framework. <p> As a consequence, the trace distribution precongruence can be characterized as inclusion of principal trace distributions, where a principal trace distribution of a probabilistic automaton is a trace distribution of the probabilistic automaton in parallel with the principal context. We extend the simulation method of <ref> [15] </ref> by studying a new relation for probabilistic automata in the style of the forward simulations of [15]. The new relation, which is called probabilistic forward simulation, is coarser than the relations of [20] and relates states to probability distributions over states. <p> We extend the simulation method of <ref> [15] </ref> by studying a new relation for probabilistic automata in the style of the forward simulations of [15]. The new relation, which is called probabilistic forward simulation, is coarser than the relations of [20] and relates states to probability distributions over states. <p> simple since we need to handle all the internal actions of M 2 that occur in H 0 2 between each pair of actions of the form a 1 ; a 2 . 6 Probabilistic Forward Simulations The second main result of this paper is that the simulation method of <ref> [15] </ref> extends to the probabilistic framework. Thus, the trace distribution precongruence relation can be verified by defining a relation between the states of two probabilistic automata and checking some simple local conditions. This is one of the major verification methods for ordinary automata. <p> Since from Proposition 15 v F S is a precongruence, the proof of Theorem 16 is completed. 7 Concluding Remarks We have defined a trace-based semantics for probabilistic automata that is preserved by the parallel composition operator, and we have extended the simulation method of <ref> [15] </ref> to the new framework. The main object of observation is a trace distribution, which is a probability distribution over traces. The compositionality result is obtained by studying the trace distributions of a system composed in parallel with an elementary context called the principal context.
Reference: 16. <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past [5, 7, 8, 10, 13, 19-23], and among those, the models of [8, 19, 20, 22] distinguish between probability and nondeterminism. Our long term goal is to build a model that extends Labeled Transition Systems <ref> [16] </ref>, that has a strong mathematical foundation, and that can be used for the actual verification of systems. The choice of labeled transition systems is due to their successful application to model concurrency.
Reference: 17. <author> A. Pogosyants and R. Segala. </author> <title> Formal verification of timed properties of randomized distributed algorithms. </title> <booktitle> In Proceedings of the 14 th Annual ACM PODC, </booktitle> <year> 1995. </year>
Reference-contexts: The choice of labeled transition systems is due to their successful application to model concurrency. In [20] we have extended the labeled transition systems model to account for randomization and we have extended the classical simulation and bisimulation relations to it; in <ref> [14, 17] </ref> we have shown how the model of [20] can be used for the actual analysis of randomized distributed systems.
Reference: 18. <author> M.O. Rabin. </author> <title> Probabilistic automata. </title> <journal> Information and Control, </journal> <volume> 6 </volume> <pages> 230-245, </pages> <year> 1963. </year>
Reference-contexts: The main objects of [20] are called probabilistic automata, and they differ from ordinary labeled transition systems in that a transition leads to a probability distribution over states rather than to a single state. Probabilistic automata are an extension of the probabilistic automata of Rabin <ref> [18] </ref> where the occurrence of an action can lead to several probability distributions over states.
Reference: 19. <author> R. Segala. </author> <title> Modeling and Verification of Randomized Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> MIT, Dept. of Electrical Engineering and Computer Science, </institution> <year> 1995. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past [5, 7, 8, 10, 13, 19-23], and among those, the models of <ref> [8, 19, 20, 22] </ref> distinguish between probability and nondeterminism. Our long term goal is to build a model that extends Labeled Transition Systems [16], that has a strong mathematical foundation, and that can be used for the actual verification of systems. <p> The rest of the paper is organized as follows. Section 2 gives some background on measure theory; Section 3 introduces the probabilistic automata of <ref> [19, 20] </ref>; Section 4 introduces the trace distributions and the trace distribution precongruence; Section 5 introduces the principal context and the alternative characterization of the trace distribution precongru-ence; Section 6 introduces our new simulation relations and shows their soundness for the trace distribution precongruence; Section 7 gives some concluding remarks. 2 <p> a discrete probability space and f is a function defined on , then f can be extended to P by defining f (P) to be the discrete probability space (f (); 2 f () ; f (P )). 3 Probabilistic Automata In this section we introduce the probabilistic automata of <ref> [19] </ref>, which appear also in [20] with a slightly different terminology. We start with an informal overview of the model. A labeled transition system, also called an automaton, is a state machine with labeled transitions. <p> In <ref> [19] </ref> it is shown that there is a unique measure H that extends H to the -field (C H ) generated by C H , i.e., the smallest -field that contains C H . Then, F H is (C H ) and P H is H . <p> The reader is referred to <ref> [19] </ref> for a complete justification of Definition 5. 3.5 Parallel Composition We now turn to the parallel composition operator, which is defined in the CSP style [9], i.e., by synchronizing two probabilistic automata on their common actions. <p> We use general probabilistic automata only for the analysis of probabilistic executions. The reader is referred to <ref> [19] </ref> for more details. Definition 6. Two simple probabilistic automata M 1 and M 2 are said to be compatible if int (M 1 ) " acts (M 2 ) = ;, and int (M 2 ) " acts (M 1 ) = ;. <p> The definition is non-trivial and the interested reader is referred to <ref> [19] </ref>. ut 3.6 Notation for Transitions We conclude this section with some notation for transitions. <p> Corollary 13. M 1 v DC M 2 iff ext (M 1 ) = ext (M 2 ) and ptdistrs (M 1 ) ptdistrs (M 2 ). ut We give a high level sketch of the proof of Theorem 12, which appears in <ref> [19] </ref>. The proof is structured in several steps where a generic distinguishing context C is transformed into a simpler distinguishing context C 0 till the point where the principal context is obtained. This shows the "if" part of the theorem. <p> The proof that v F S is transitive is much more complicated and is based on a probabilistic version of the execution correspondence lemma of [6]. The complete proofs can be found in <ref> [19] </ref>. Theorem 16. Let M 1 v F S M 2 . Then M 1 v DC M 2 . ut The proof of Theorem 16, which appears in [19], is carried out in two steps. Let R be a probabilistic forward simulation from M 1 to M 2 . <p> The complete proofs can be found in <ref> [19] </ref>. Theorem 16. Let M 1 v F S M 2 . Then M 1 v DC M 2 . ut The proof of Theorem 16, which appears in [19], is carried out in two steps. Let R be a probabilistic forward simulation from M 1 to M 2 . Given a probabilistic execution H 1 of M 1 , we build a probabilistic execution H 2 of M 2 that represents H 1 via R. <p> Finally, it is desirable to study further what can be done with general probabilistic automata and how to extend the work of this paper to models that include real-time or hybrid behavior. A trace-based semantics for probabilistic timed automata is studied in <ref> [19] </ref>. Acknowledgments. I would like to thank Nancy Lynch for useful discussion that lead to the definition of probabilistic forward simulations.
Reference: 20. <author> R. Segala and N.A. Lynch. </author> <title> Probabilistic simulations for probabilistic processes. </title> <booktitle> In Jonsson and Parrow [11], </booktitle> <pages> pages 481-496. </pages>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past [5, 7, 8, 10, 13, 19-23], and among those, the models of <ref> [8, 19, 20, 22] </ref> distinguish between probability and nondeterminism. Our long term goal is to build a model that extends Labeled Transition Systems [16], that has a strong mathematical foundation, and that can be used for the actual verification of systems. <p> Our long term goal is to build a model that extends Labeled Transition Systems [16], that has a strong mathematical foundation, and that can be used for the actual verification of systems. The choice of labeled transition systems is due to their successful application to model concurrency. In <ref> [20] </ref> we have extended the labeled transition systems model to account for randomization and we have extended the classical simulation and bisimulation relations to it; in [14, 17] we have shown how the model of [20] can be used for the actual analysis of randomized distributed systems. <p> In <ref> [20] </ref> we have extended the labeled transition systems model to account for randomization and we have extended the classical simulation and bisimulation relations to it; in [14, 17] we have shown how the model of [20] can be used for the actual analysis of randomized distributed systems. The main objects of [20] are called probabilistic automata, and they differ from ordinary labeled transition systems in that a transition leads to a probability distribution over states rather than to a single state. <p> we have extended the labeled transition systems model to account for randomization and we have extended the classical simulation and bisimulation relations to it; in [14, 17] we have shown how the model of <ref> [20] </ref> can be used for the actual analysis of randomized distributed systems. The main objects of [20] are called probabilistic automata, and they differ from ordinary labeled transition systems in that a transition leads to a probability distribution over states rather than to a single state. <p> We extend the simulation method of [15] by studying a new relation for probabilistic automata in the style of the forward simulations of [15]. The new relation, which is called probabilistic forward simulation, is coarser than the relations of <ref> [20] </ref> and relates states to probability distributions over states. Probabilistic forward simulations allow us to simulate a probabilistic transition like rolling a dice with eight faces by flipping three fair coins one after the other; this is not possible with the simulation relations of [20]. <p> is coarser than the relations of <ref> [20] </ref> and relates states to probability distributions over states. Probabilistic forward simulations allow us to simulate a probabilistic transition like rolling a dice with eight faces by flipping three fair coins one after the other; this is not possible with the simulation relations of [20]. Our second main theorem is that probabilistic forward simulations are sound for the trace distribution precongruence. We believe that our methodology can be applied to the study of other semantics based on abstract observations. <p> The rest of the paper is organized as follows. Section 2 gives some background on measure theory; Section 3 introduces the probabilistic automata of <ref> [19, 20] </ref>; Section 4 introduces the trace distributions and the trace distribution precongruence; Section 5 introduces the principal context and the alternative characterization of the trace distribution precongru-ence; Section 6 introduces our new simulation relations and shows their soundness for the trace distribution precongruence; Section 7 gives some concluding remarks. 2 <p> f is a function defined on , then f can be extended to P by defining f (P) to be the discrete probability space (f (); 2 f () ; f (P )). 3 Probabilistic Automata In this section we introduce the probabilistic automata of [19], which appear also in <ref> [20] </ref> with a slightly different terminology. We start with an informal overview of the model. A labeled transition system, also called an automaton, is a state machine with labeled transitions. <p> Thus, the trace distribution precongruence relation can be verified by defining a relation between the states of two probabilistic automata and checking some simple local conditions. This is one of the major verification methods for ordinary automata. We start with the coarsest simulation relation of <ref> [20] </ref>, and we show that it distinguishes too much. Then, we introduce our probabilistic forward simulation relations and we show their soundness for the trace distribution precongruence. <p> transition s 1 a ! P 1 of M 1 , there exists a weak combined transition s 2 aext (M 2 ) =) C P 2 of M 2 such that P 1 v R P 2 , where v R is the lifting of R to probability spaces <ref> [10, 20] </ref>.
Reference: 21. <author> K. Seidel. </author> <title> Probabilistic communicating processes. </title> <type> Technical Report PRG-102, Ph.D. Thesis, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <year> 1992. </year>
Reference: 22. <author> M.Y. Vardi. </author> <title> Automatic verification of probabilistic concurrent finite-state programs. </title> <booktitle> In Proceedings of 26th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 327-338, </pages> <year> 1985. </year>
Reference-contexts: Several formal models for randomized concurrent systems were studied in the past [5, 7, 8, 10, 13, 19-23], and among those, the models of <ref> [8, 19, 20, 22] </ref> distinguish between probability and nondeterminism. Our long term goal is to build a model that extends Labeled Transition Systems [16], that has a strong mathematical foundation, and that can be used for the actual verification of systems.
Reference: 23. <author> S.H. Wu, S. Smolka, </author> <title> and E.W. Stark. Composition and behaviors of probabilistic I/O automata. </title> <note> In Jonsson and Parrow [11]. </note>
References-found: 23

