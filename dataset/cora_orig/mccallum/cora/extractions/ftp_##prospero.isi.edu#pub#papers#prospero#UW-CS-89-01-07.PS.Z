URL: ftp://prospero.isi.edu/pub/papers/prospero/UW-CS-89-01-07.PS.Z
Refering-URL: http://gost.isi.edu/people/bcn/publications.html
Root-URL: http://www.isi.edu
Email: bcn@cs.washington.edu  
Title: The Virtual System Model for Large Distributed Operating Systems  
Author: B. Clifford Neuman 
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science, FR-35 University of Washington  
Abstract: Technical Report 89-01-07 April, 1989 Abstract Scale is a critical element in distributed systems. The effect of scale on the user has received little attention. As the number of distinct computers that compose a distributed system grows, it becomes increasingly difficult for users to organize and find objects and services. Today's users are able to cope because they tend to use only a small number of computers, and because only a tiny portion of the objects and services in the world are easily accessible. This observation suggests one way of organizing large systems: let each user see a smaller system containing only those parts that are of interest. The virtual system model provides a framework within which users can build a view of a system in which the parts of interest are logically nearby. This report discusses the virtual system model and describes a global file system being built using the model.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. T. Almes, A. P. Black, E. D. Lazowska, and J. D. Noe. </author> <title> The Eden system: A technical review. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(1) </volume> <pages> 43-59, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Finally, QuickSilver provides little support for finding and organizing files that might be of interest, but which have not yet been included in the user's namespace. Directory mechanisms in capability-based distributed systems such as Eden <ref> [1] </ref> and Amoeba [7] support the naming of all objects, not just files. Directories are objects that map from names of objects to the capabilities for the named objects. Capabilities correspond to links in other directory systems.
Reference: [2] <author> Andrew D. Birrell, Butler W. Lampson, Roger M. Needham, and Michael D. Schroeder. </author> <title> A global authentication service without global trust. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 223-230, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: More on this can be found in <ref> [2] </ref>. There may be different competing collections of authentication servers. Such services might differ in who they are run by, or perhaps even in the protocol required for initial authentication when the user logs on.
Reference: [3] <author> Luis-Felipe Cabrera and Jim Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <note> Also IBM Research Report RJ 5578, </note> <month> April </month> <year> 1987. </year>
Reference-contexts: Finding useful information could become impossible. One way to address this problem is to let each user see a smaller system containing only those parts that are of interest. QuickSilver <ref> [3] </ref> applies this approach to the file system by supporting user-centered namespaces. For every user, a nameserver stores a list of directory prefixes along with the information needed to locate a user's files. Users can only access files that have been included in their namespaces.
Reference: [4] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew <ref> [4, 6] </ref>, Locus [12, 16] and Sprite [11, 17] address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
Reference: [5] <author> Butler W. Lampson. </author> <title> Designing a global name service. </title> <booktitle> In Proceeding of the ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: In both of these cases, the system-level hostname can 6 If objects are replicated, the set of replicas can be thought of as a single object. 12 be further resolved using existing hierarchical nameservices such as the Internet Domain Naming System [15], or DEC's global naming system <ref> [5] </ref>. 5 Authentication & Authorization Authentication is used to make sure that an entity claiming to have a particular name is in fact, the entity to which that name refers. Authorization is used to make sure that a named entity is allowed to perform a particular operation.
Reference: [6] <author> James H. Morris, Mahadev Satyanarayanan, Michael H. Conner, John H. Howard, David S. H. Rosenthal, and F. Donelson Smith. Andrew: </author> <title> A distributed personal computing environment. </title> <journal> Communications of the ACM, </journal> <volume> 29(3) </volume> <pages> 184-201, </pages> <month> March </month> <year> 1986. </year> <month> 16 </month>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew <ref> [4, 6] </ref>, Locus [12, 16] and Sprite [11, 17] address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
Reference: [7] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: Finally, QuickSilver provides little support for finding and organizing files that might be of interest, but which have not yet been included in the user's namespace. Directory mechanisms in capability-based distributed systems such as Eden [1] and Amoeba <ref> [7] </ref> support the naming of all objects, not just files. Directories are objects that map from names of objects to the capabilities for the named objects. Capabilities correspond to links in other directory systems. <p> directory service can be used to name objects other than files and directories, and because the objects included in a directory do not need to be located on the same system as the directory, the directory service is actually much closer to directory services in object-based systems such as Amoeba <ref> [7] </ref> than to directories in traditional file systems. lazowska's systems respectively. Only those files and directories that are useful in the discussion that follows are included in the diagram. The actual virtual systems are really much larger. <p> Services analogous to banks will be required, and a mechanism to allow users to authorize their bank to pay a server will become part of the access protocol for certain services. See <ref> [7, 9] </ref> for related discussion. 6 Processes and Processors Each virtual system will be associated with zero or more processors. These will be the processors on which applications will run.
Reference: [8] <author> B. Clifford Neuman. </author> <title> The Prospero File System: A global file system based on the Virtual System Model. </title> <institution> Department of Computer Science, University of Washington. </institution> <note> In Preparation. </note>
Reference-contexts: The remainder of this section briefly describes the global file system that is being built and discusses ways to organize objects within it. Additional information about this file system can be found in <ref> [8] </ref>. 3.1 Directory Service A significant component of the global file system is the directory service. Directories map from names to object pointers. In the file system the objects are files and directories. <p> The equivalence of links presents a number of problems in the area of file owership, garbage collection, and what happens when a file with multiple links is modified. These issues are addressed in <ref> [8] </ref>. Information about files and directories is accessible through directory servers that run on each host that is part of the global file system. All directory queries are directed to these servers. The local format of directories and other information is hidden from the user by the servers.
Reference: [9] <author> B. Clifford Neuman. Sentry: </author> <title> A discretionary access contol server. </title> <type> Bachelor's Thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <month> June </month> <year> 1985. </year>
Reference-contexts: Services analogous to banks will be required, and a mechanism to allow users to authorize their bank to pay a server will become part of the access protocol for certain services. See <ref> [7, 9] </ref> for related discussion. 6 Processes and Processors Each virtual system will be associated with zero or more processors. These will be the processors on which applications will run.
Reference: [10] <author> B. Clifford Neuman. </author> <title> Issues of scale in large distributed operating systems. </title> <type> Generals Report, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> May </month> <year> 1988. </year>
Reference: [11] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <journal> Computer, </journal> <volume> 21(2) </volume> <pages> 23-35, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew [4, 6], Locus [12, 16] and Sprite <ref> [11, 17] </ref> address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
Reference: [12] <author> G. Popek and B. Walker, </author> <title> editors. The Locus Distributed System Architecture. </title> <publisher> M.I.T. Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew [4, 6], Locus <ref> [12, 16] </ref> and Sprite [11, 17] address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
Reference: [13] <author> R. Sandberg et al. </author> <title> Design and implementation of the Sun network file system. </title> <booktitle> In Proceedings of the Summer 1985 Usenix Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: Early systems, such as the ARPAnet, addressed few of these issues. Access to local objects was simple, but access to remote objects required one to first locate the object, and then to access it using a mechanism different from that used in the local case. Systems such as NFS <ref> [13] </ref> address the access mechanism, but little else. In NFS, remote file systems can be mounted locally and the same mechanism can be used for both local and remote file access.
Reference: [14] <author> M. F. Schwartz. </author> <title> The networked resource discovery project. </title> <booktitle> In Proceedings of the IFIP XI World Congress, </booktitle> <pages> pages 827-832, </pages> <month> August </month> <year> 1989. </year> <note> San Francisco. </note>
Reference-contexts: This information provides a matrix through which users can navigate to find the desired information. Services might even spring up to help users navigate through this matrix. An example of such a service is described in <ref> [14] </ref> and makes use of resource discovery agents. These agents accept queries from users and use the information provided by the user to find objects in which the user is interested.
Reference: [15] <author> Douglas B. Terry, Mark Painter, David W. Riggle, and Songnian Zhou. </author> <title> The Berkeley internet domain server. </title> <booktitle> In Proceedings of the 1984 Usenix Summer Conference, </booktitle> <pages> pages 23-31, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: In both of these cases, the system-level hostname can 6 If objects are replicated, the set of replicas can be thought of as a single object. 12 be further resolved using existing hierarchical nameservices such as the Internet Domain Naming System <ref> [15] </ref>, or DEC's global naming system [5]. 5 Authentication & Authorization Authentication is used to make sure that an entity claiming to have a particular name is in fact, the entity to which that name refers.
Reference: [16] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The Locus distributed operating system. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew [4, 6], Locus <ref> [12, 16] </ref> and Sprite [11, 17] address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
Reference: [17] <author> Brent B. Welch and John K. Ousterhout. </author> <title> Prefix tables: A simple mechanism for locating files in a distributed system. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 184-189, </pages> <month> May </month> <year> 1986. </year> <month> 17 </month>
Reference-contexts: This two-step process makes it cumbersome to maintain links between individual files on different file systems, and imposes constraints on the placement of files and the organization of the file system. Systems such as Andrew [4, 6], Locus [12, 16] and Sprite <ref> [11, 17] </ref> address the organization problem by attempting to present a single view of a system that extends across the users and sites that compose it.
References-found: 17

