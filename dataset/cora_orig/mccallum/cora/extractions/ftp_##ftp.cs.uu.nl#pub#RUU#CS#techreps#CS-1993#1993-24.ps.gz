URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1993/1993-24.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: hansz@cs.ruu.nl  
Title: Termination of term rewriting by semantic labelling  
Author: H. Zantema 
Address: P.O. box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Utrecht University, Department of Computer Science,  
Abstract: A new kind of transformation of term rewriting systems (TRS) is proposed, depending on a choice for a model for the TRS. The labelled TRS is obtained from the original one by labelling operation symbols, possibly creating extra copies of some rules. This construction has the remarkable property that the labelled TRS is terminating if and only if the original TRS is terminating. Although the labelled version has more operation symbols and may have more rules (sometimes infinitely many), termination is often easier to prove for the labelled TRS than for the original one. This provides a new technique for proving termination, making classical techniques like path orders and polynomial interpretations applicable even for non-simplifying TRS's. The requirement of having a model can slightly be weakened, yielding a remarkably simple termination proof of the system SUBST of [11] describing explicit substitution in -calculus. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abadi, M., Cardelli, L., Curien, P.-L., and L evy, J.-J. </author> <title> Explicit substitutions. </title> <journal> Journal of Functional Programming 1, </journal> <volume> 4 (1991), </volume> <pages> 375-416. </pages>
Reference-contexts: Both papers are devoted only to the termination proof of this particular system. The result implies termination of the process of explicit substitution in untyped -calculus; an overview of this approach to explicit substitution is given in <ref> [1] </ref>. In [21, 22] the technique of distribution elimination was developed to prove simple termination of 0 . <p> However, we are not forced to use a path order like approach to prove termination of the labelled system, for example the interpretation in the naturals 2 defined by [0] = <ref> [1] </ref> = 2; x [+]y = x + y; x [fl i ]y = x fl (y + 4i) provides another termination proof.
Reference: [2] <author> Arts, T., and Zantema, H. </author> <title> Termination of logic programs via labelled term rewrite systems. </title> <type> Tech. Rep. </type> <institution> UU-CS-1994-20, Utrecht University, </institution> <month> May </month> <year> 1994. </year>
Reference: [3] <author> Bellegarde, F., and Lescanne, P. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing 1, </journal> <volume> 2 (1990), </volume> <pages> 79-96. </pages>
Reference-contexts: This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in [10]. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in <ref> [18, 17, 3, 15, 22] </ref>. The technique of semantic labelling does not restrict to plain TRS's. In section 4 we show that the same construction and the preservation of termination behaviour also holds for term rewriting modulo equations.
Reference: [4] <author> Bergstra, J. A., and Klop, J. W. </author> <title> Algebra of communicating processes with abstraction. </title> <booktitle> Theoretical Computer Science 37, </booktitle> <month> 1 </month> <year> (1985), </year> <month> 77-121. </month> <title> 2 Essentially this labelling was independently proposed by Isabelle Gnaedig; she calls it typing 18 </title>
Reference-contexts: Hence according to theorem 8 the original system is terminating. In Appendix A of <ref> [4] </ref> termination of the TRS describing an algebra of communicating processes was proved by first transforming it to another TRS. This transformation is a particular case of our construction, and the proof of preservation of termination is a particular case of theorem 8.
Reference: [5] <author> Curien, P.-L., Hardin, T., and R os, A. </author> <title> Strong normalization of substitutions. </title> <booktitle> In Proceedings Mathematical Foundations of Computer Science 1992 (1992), </booktitle> <editor> I. M. Havel and V. Koubek, Eds., </editor> <volume> vol. </volume> <booktitle> 629 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 209-217. </pages>
Reference-contexts: Consider the TRS (x) ffi y ! (x ffi (1 (yffi "))) (x y) ffi z ! (x ffi z) (y ffi z) id ffi x ! x " ffiid ! " 1 ffi (x y) ! x named 0 in <ref> [5] </ref>, which is essentially the same as the system SUBST in [11]. This system describes the process of substitution in combinatory categorical logic. Here `' corresponds to currying, `ffi' to composition, `id' to the identity, `' to pairing and `1' and `"' to projections. <p> Here `' corresponds to currying, `ffi' to composition, `id' to the identity, `' to pairing and `1' and `"' to projections. The original termination proof of SUBST in [11] is very complicated; the same holds for the newer proof by <ref> [5] </ref>. Both papers are devoted only to the termination proof of this particular system. The result implies termination of the process of explicit substitution in untyped -calculus; an overview of this approach to explicit substitution is given in [1].
Reference: [6] <author> Dershowitz, N. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation 3, </journal> <volume> 1 and 2 (1987), </volume> <pages> 69-116. </pages>
Reference-contexts: Example 3. In the system (x fl y) fl z ! x fl (y fl z) x fl (y + f (z)) ! g (x; z) fl (y + a) from <ref> [6] </ref> we can force that the symbols `fl' in the last rule get distinct labels by choosing the model f1; 2g and defining a M = 1; f M (x) = 2; fl (x; y) = x + M y = y; x fl M y = 1 for all x; <p> The `only if' part of the theorem easily follows from this observation by defining s - t () 9u : s ! fl u ^ t u: A typical example of a termination proof by semantic path order is found in <ref> [6] </ref>: x fl (y + 1) ! (x fl (y + (1 fl 0))) + x x + 0 ! x which is not simply terminating. The semantic path order is defined as follows.
Reference: [7] <editor> Drosten, K. Termersetzungssysteme, </editor> <volume> vol. </volume> <booktitle> 210 of Informatik-Fachberichte. </booktitle> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: As a motivation consider the following TRS introduced in <ref> [7] </ref> for showing that completeness is not a modular property: f (a; b; x) ! f (x; x; x) a ! c Clearly this system is closely related to example 2 of section 3.
Reference: [8] <author> Fokkink, W. J., and Zantema, H. </author> <title> Basic process algebra with iteration: Completeness of its equational axioms. </title> <type> Tech. Rep. </type> <institution> RUU-CS-93-40, Utrecht University, </institution> <year> 1993. </year> <note> To appear in The Computer Journal. </note>
Reference: [9] <author> Geser, A. </author> <title> On a monotonic semantic path order. </title> <type> Tech. Rep. 92-13, </type> <institution> University of Ulm, </institution> <year> 1992. </year>
Reference: [10] <author> Gnaedig, I. </author> <title> Termination of order-sorted rewriting. In Algebraic and Logic Programming (1992), </title> <editor> H. Kirchner and G. Levi, Eds., </editor> <volume> vol. </volume> <booktitle> 632 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 37 - 52. </pages>
Reference-contexts: In this way we obtain termination proofs of systems like f (f (x)) ! f (g (f (x))) and f (0; 1; x) ! f (x; x; x). This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in <ref> [10] </ref>. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in [18, 17, 3, 15, 22]. The technique of semantic labelling does not restrict to plain TRS's.
Reference: [11] <author> Hardin, T., and Laville, A. </author> <title> Proof of termination of the rewriting system SUBST on CCL. </title> <booktitle> Theoretical Computer Science 46 (1986), </booktitle> <pages> 305-312. </pages>
Reference-contexts: TRS (x) ffi y ! (x ffi (1 (yffi "))) (x y) ffi z ! (x ffi z) (y ffi z) id ffi x ! x " ffiid ! " 1 ffi (x y) ! x named 0 in [5], which is essentially the same as the system SUBST in <ref> [11] </ref>. This system describes the process of substitution in combinatory categorical logic. Here `' corresponds to currying, `ffi' to composition, `id' to the identity, `' to pairing and `1' and `"' to projections. The original termination proof of SUBST in [11] is very complicated; the same holds for the newer proof <p> which is essentially the same as the system SUBST in <ref> [11] </ref>. This system describes the process of substitution in combinatory categorical logic. Here `' corresponds to currying, `ffi' to composition, `id' to the identity, `' to pairing and `1' and `"' to projections. The original termination proof of SUBST in [11] is very complicated; the same holds for the newer proof by [5]. Both papers are devoted only to the termination proof of this particular system.
Reference: [12] <author> Kamin, S., and L evy, J. J. </author> <title> Two generalizations of the recursive path ordering. </title> <institution> University of Illinois, </institution> <year> 1980. </year>
Reference: [13] <author> Kaplan, S. </author> <title> Simplifying conditional term rewriting systems: unification, termination and confluence. </title> <journal> Journal of Symbolic Computation 4, </journal> <volume> 3 (1987), </volume> <pages> 295-334. </pages>
Reference: [14] <author> Kurihara, M., and Ohuchi, A. </author> <title> Modularity of simple termination of term rewriting systems. </title> <journal> Journal of IPS Japan 31, </journal> <volume> 5 (1990), </volume> <pages> 633-642. </pages>
Reference: [15] <author> Lescanne, P. </author> <title> Well rewrite orderings and well quasi-orderings. </title> <journal> Journal of Symbolic Computation 14 (1992), </journal> <pages> 419-435. </pages>
Reference-contexts: This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in [10]. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in <ref> [18, 17, 3, 15, 22] </ref>. The technique of semantic labelling does not restrict to plain TRS's. In section 4 we show that the same construction and the preservation of termination behaviour also holds for term rewriting modulo equations.
Reference: [16] <author> Middeldorp, A., and Zantema, H. </author> <title> Simple termination revisited. </title> <type> Tech. Rep. </type> <institution> RUU-CS-93-41, Utrecht University, </institution> <month> December </month> <year> 1993. </year> <note> Accepted for CADE-12. </note>
Reference: [17] <author> Puel, L. </author> <title> Embedding with patterns and associated recursive path ordering. </title> <booktitle> In Proceedings of the 3rd Conference on Rewriting Techniques and Applications (1989), </booktitle> <editor> N. Dershowitz, Ed., </editor> <volume> vol. </volume> <booktitle> 355 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 371-387. </pages>
Reference-contexts: This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in [10]. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in <ref> [18, 17, 3, 15, 22] </ref>. The technique of semantic labelling does not restrict to plain TRS's. In section 4 we show that the same construction and the preservation of termination behaviour also holds for term rewriting modulo equations. <p> However, E is more restrictive than Emb (F ), so this theorem is more powerful than the basic version. For example, it succeeds in ordering f (f (x)) &gt; f (g (f (x))) (as in the approach of <ref> [18, 17] </ref>) and even f (0; 1; x) &gt; f (x; x; x).
Reference: [18] <author> Puel, L. </author> <title> Using unavoidable sets of trees to generalize Kruskal's theorem. </title> <journal> Journal of Symbolic Computation 8 (1989), </journal> <pages> 335-382. </pages>
Reference-contexts: This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in [10]. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in <ref> [18, 17, 3, 15, 22] </ref>. The technique of semantic labelling does not restrict to plain TRS's. In section 4 we show that the same construction and the preservation of termination behaviour also holds for term rewriting modulo equations. <p> However, E is more restrictive than Emb (F ), so this theorem is more powerful than the basic version. For example, it succeeds in ordering f (f (x)) &gt; f (g (f (x))) (as in the approach of <ref> [18, 17] </ref>) and even f (0; 1; x) &gt; f (x; x; x).
Reference: [19] <author> Steinbach, J. </author> <title> Extensions and comparison of simplification orderings. </title> <booktitle> In Proceedings of the 3rd Conference on Rewriting Techniques and Applications (1989), </booktitle> <editor> N. Dershowitz, Ed., </editor> <volume> vol. </volume> <booktitle> 355 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 434-448. </pages>
Reference-contexts: However, for the scope of this paper it suffices to see that some terminating TRS's are not simply terminating using our definition, and to know that standard techniques like RPO and Knuth-Bendix order, both with status (see e.g. <ref> [19] </ref>), and polynomial interpretations, all fail for TRS's that are not simply terminating. 3 Examples We start with three examples in which the (finite) model is based on syntactical observations.
Reference: [20] <author> Toyama, Y. </author> <title> Counterexamples to termination for the direct sum of term rewriting systems. </title> <booktitle> Information Processing Letters 25 (1987), </booktitle> <pages> 141-143. </pages>
Reference-contexts: Using theorem 4 we conclude that the original system R is terminating too. Example 2. Consider the TRS f (0; 1; x) ! f (x; x; x) from <ref> [20] </ref>. This system is not simply terminating. For proving termination we want to use the observation that in the left hand side the first and the second argument of f are distinct while in the right hand side they are equal.
Reference: [21] <author> Zantema, H. </author> <title> Termination of term rewriting by interpretation. In Conditional Term Rewriting Systems, </title> <booktitle> proceedings third international workshop CTRS-92 (1993), </booktitle> <editor> M. Rusinowitch and J. Remy, Eds., </editor> <volume> vol. </volume> <booktitle> 656 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 155-167. </pages> <note> Full version appeared as report RUU-CS-92-14, </note> <institution> Utrecht University. </institution>
Reference-contexts: Recent applications of semantic labelling outside the scope of pure term rewriting are in process algebra ([8]), logic programming ([2]) and in explicit substitution in 2 -calculus as described by the system SUBST. Two papers ([11, 5]) were devoted exclusively to termination of SUBST. In <ref> [21, 22] </ref> we gave a simpler proof even proving simple termination of SUBST, using the technique of distribution elimination. In section 6 we give an even more simpler proof of simple termination of SUBST using semantic labelling. <p> A TRS R over F is defined to be simply terminating if R <ref> [ Emb (F ) is terminating. In the literature ([14, 21] </ref>) some other equivalent definitions appear. If F is finite it is also equivalent to the notion of a simplifying TRS ([13]). If F is infinite then it is natural to change these definitions slightly ([16]). <p> Both papers are devoted only to the termination proof of this particular system. The result implies termination of the process of explicit substitution in untyped -calculus; an overview of this approach to explicit substitution is given in [1]. In <ref> [21, 22] </ref> the technique of distribution elimination was developed to prove simple termination of 0 . <p> Now theorem 8 yields termination of R, and hence simple termination of 0 . 7 Monotone algebras In this section we describe alternative proofs of our theorems based on the characterization of termination from <ref> [21, 22] </ref>; in fact this was the line along which semantic labelling was discovered. <p> Intuitively: t &gt; A t 0 means that for each interpretation of the variables in A the interpreted value of t is greater than that of t 0 . In <ref> [21, 22] </ref> the following characterization of termination was given. Theorem 9 A TRS R over F is terminating if and only if there is a non-empty well-founded monotone F -algebra (A; &gt;) for which l &gt; A r for every rule l ! r of R.
Reference: [22] <author> Zantema, H. </author> <title> Termination of term rewriting: interpretation and type elimination. </title> <type> 29 pages, </type> <note> to appear in Journal of Symbolic Computation, 1994. 19 </note>
Reference-contexts: This approach is closely related to typing the operation symbols and proving termination of the resulting order-sorted system as discussed in [10]. Other approaches of proving termination of non-simply terminating systems in a syntactic way can be found in <ref> [18, 17, 3, 15, 22] </ref>. The technique of semantic labelling does not restrict to plain TRS's. In section 4 we show that the same construction and the preservation of termination behaviour also holds for term rewriting modulo equations. <p> Recent applications of semantic labelling outside the scope of pure term rewriting are in process algebra ([8]), logic programming ([2]) and in explicit substitution in 2 -calculus as described by the system SUBST. Two papers ([11, 5]) were devoted exclusively to termination of SUBST. In <ref> [21, 22] </ref> we gave a simpler proof even proving simple termination of SUBST, using the technique of distribution elimination. In section 6 we give an even more simpler proof of simple termination of SUBST using semantic labelling. <p> Both papers are devoted only to the termination proof of this particular system. The result implies termination of the process of explicit substitution in untyped -calculus; an overview of this approach to explicit substitution is given in [1]. In <ref> [21, 22] </ref> the technique of distribution elimination was developed to prove simple termination of 0 . <p> Now theorem 8 yields termination of R, and hence simple termination of 0 . 7 Monotone algebras In this section we describe alternative proofs of our theorems based on the characterization of termination from <ref> [21, 22] </ref>; in fact this was the line along which semantic labelling was discovered. <p> Intuitively: t &gt; A t 0 means that for each interpretation of the variables in A the interpreted value of t is greater than that of t 0 . In <ref> [21, 22] </ref> the following characterization of termination was given. Theorem 9 A TRS R over F is terminating if and only if there is a non-empty well-founded monotone F -algebra (A; &gt;) for which l &gt; A r for every rule l ! r of R.
References-found: 22

