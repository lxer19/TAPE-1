URL: http://www.ticam.utexas.edu/CCV/shastra/papers/slices.ps
Refering-URL: 
Root-URL: 
Title: Sliced Configuration Spaces for Curved Planar Bodies  
Author: Elisha Sacks and Chandrajit Bajaj 
Note: To appear in International Journal of Robotics Research  
Date: May 2, 1997  
Address: Building  West Lafayette, IN 47907, USA  
Affiliation: 1398 Computer Science  Purdue University  
Abstract: We present the first practical, implemented configuration space computation algorithm for a curved planar object translating and rotating amidst stationary obstacles. The bodies are rigid, compact, regular, and bounded by a finite number of rational parametric curve segments. The algorithm represents the three-dimensional configuration space as two-dimensional slices in which the moving object has a fixed orientation. It discretizes the configuration space into intervals of equivalent slices separated by critical slices. The output is topologically correct and accurate to within a specified tolerance. We have implemented the algorithm for objects bounded by line segments and circular arcs, which is an important class for applications. The program is simple, fast, and robust. The slice representation is a natural and efficient abstract data type for geometric computations in robotics and engineering. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Artobolevsky, I. </author> <title> Mechanisms in Modern Engineering Design, volume 1-4. </title> <publisher> (MIR Publishers, </publisher> <address> Moscow, </address> <year> 1979). </year> <note> English translation. </note>
Reference: [2] <author> Avnaim, F., Boissonnat, J. D., and Faverjon, B. </author> <title> A practical exact motion planning algorithm for polygonal objects amidst polygonal obstacles. </title> <booktitle> in: IEEE International Conference on Robotics and Automation, </booktitle> <year> 1988. </year>
Reference-contexts: Several researchers have implemented boundary-based algorithms for polygonal bodies. The contact space consists of ruled surface patches generated by contacts between a moving vertex and an obstacle edge or between a moving edge and an obstacle vertex. Avnaim et al. <ref> [2] </ref> compute the contact patches by tracing their generating line segments through the range of orientations over which the patches are defined. They compute the singular orientations where changes occur in the number of segments or in the expressions that define their endpoints.
Reference: [3] <author> Bajaj, C., Bernardini, F., Lin, K., et al. </author> <title> Physical simulation of the visible human joints. </title> <booktitle> in: National Library of Medicine Visible Human Project Conference, </booktitle> <year> 1996. </year>
Reference-contexts: It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling <ref> [3, 19] </ref> (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. Configuration space is a concise, complete encoding of the motion constraints imposed on a rigid object by contacts with rigid obstacles. <p> The contact space consists 3 of curve segments that represent contacts between the features of the tibia and the femur. blocked space is the interior of the contact space and the free space is the exterior. The configuration space supports joint modeling and analysis <ref> [3] </ref>. It describes the range of motion of the tibia with respect to the femur and the configurations where it hyper-extends. Specific motions, such as flexion, extension, and rotation, correspond to paths in configuration space.
Reference: [4] <author> Bajaj, C., Hoffmann, C., Hopcroft, J., et al. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design 5 (1988) 285-307. </booktitle>
Reference-contexts: We can extend it to rational parametric curves by solving Equations (1-2) by resultants or by tracing. Resultants are robust, but slow. Tracing is robust and fast given a point on each curve component <ref> [4] </ref>. These points can be computed with resultants, by random sampling, or by homotopy. The homotopy method finds points on compact components by solving the equations along with their partials with respect to one parameter.
Reference: [5] <author> Bajaj, C. L. </author> <title> Electronic models of the human anatomy. in: Curves and Surfaces in Computer Vision and Graphics 2: </title> <booktitle> Proceedings of the Symposium on Electronic Imaging Science and Technology, </booktitle> <volume> volume 1610, </volume> <pages> pages 230-237, </pages> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: The inputs are the slices and the correspondence between the segments in adjacent slices. The output is a triangulated contact patch built by fitting triangles between adjacent slices and sometimes within slices. We can fit smooth patches to the triangles in a variety of ways <ref> [5] </ref>. The algorithm provides general solutions to the inherent reconstruction problems of contour tiling, correspondence, and contour branching given only the slices [25]. Tiling means triangulating the strip between two adjacent slices.
Reference: [6] <author> Bajaj, C. L., Coyle, E., and Lin, K.-N. </author> <title> Arbitrary topology shape reconstruction from planar cross sections. Graphical Models and Image Processing 58 (1996) 524-543. </title>
Reference-contexts: The channels begin and end at values where the pin simultaneously touches both sides of the slot. 7 8 2.5 Reconstruction We construct boundary representations of sliced configuration spaces with an algorithm that we developed in previous work <ref> [6] </ref>. We render the boundary representation to obtain the images shown in Figures 2, 3, 5, and 7. We can selectively construct the portion of the boundary within a bounding box or between two slices.
Reference: [7] <author> Briggs, A. </author> <title> An efficient algorithm for one-step compliant motion planning with uncertainty. </title> <note> Algorithmica 8 (1992) 195-208. </note>
Reference-contexts: It computes slices at fixed intervals and interpolates linearly between them. It does not compute the configuration space topology or bound the interpolation error. The algorithm is unreliable when it interpolates through critical slices because the interpolated curves can vanish or become singular. Donald [11] and Briggs <ref> [7] </ref> compute the critical slices of non-directional backprojections and use them to derive global properties relevant to path planning under motion uncertainty. The criticality conditions and the slice construction algorithms rely on the special structure of polygonal contact.
Reference: [8] <author> Brost, R. C. </author> <title> Analysis and planning of planar manipulation tasks. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1991. </year> <note> Available as Technical Report CMU-CS-91-149. </note>
Reference-contexts: It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing <ref> [8] </ref>, and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. <p> It must hold the part stably, must provide access to the part by tools or other parts, and must easily engage and disengage the part. Brost <ref> [8] </ref> uses configuration spaces to support the design of polygonal fixture/part pairs that meet these goals. The goals translate into constraints on the contact space geometry that express part support, stability, frictional sticking, and accessibility. Our algorithm extends Brost's method to curved parts and fixtures. part engages in the fixture. <p> They compute the singular orientations where changes occur in the number of segments or in the expressions that define their endpoints. They link adjacent patches to obtain the boundary topology. Brost <ref> [8] </ref> presents a similar algorithm that produces correct configuration spaces on 1599 out of 1600 challenging test cases. He computes contact patches by tracing the boundary curve segments 10 where vertex/vertex contacts occur. He intersects the patches and analyzes the arrangement of intersection edges to compute the contact space.
Reference: [9] <author> Caine, M. E. </author> <title> The design of shape from motion contraints. </title> <type> AI-TR 1425, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, 545 Technology Square, </institution> <address> Cam-bridge, MA, 02139, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction We present the first practical, implemented configuration space computation algorithm for a curved planar object moving amidst stationary obstacles. Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly <ref> [9] </ref>. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. <p> Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design <ref> [9, 10] </ref>, functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. <p> He computes contact patches by tracing the boundary curve segments 10 where vertex/vertex contacts occur. He intersects the patches and analyzes the arrangement of intersection edges to compute the contact space. Caine <ref> [9] </ref> computes contact patches at interactive speeds as part of an interactive design algorithm. He does not compute the patch intersections, so he cannot tell which contacts are adjacent or subsumed. Donald and Pai [12] compute paths through configuration space by quasi-static simulation. <p> The program uses simple heuristics and mouse input to traverse the space of solution parameter values. Caine <ref> [9, 10] </ref> takes a similar approach to polygonal feeder design. We need an efficient, robust algorithm that handles curved parts with three degrees of freedom and larger assemblies. The knee example requires configuration space composition to model the three way interactions among the femur, tibia, and patella (knee cap).
Reference: [10] <author> Caine, M. E. </author> <title> The design of shape interactions using motion constraints. </title> <booktitle> in: Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 366-371, </pages> <year> 1994. </year>
Reference-contexts: Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design <ref> [9, 10] </ref>, functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. <p> The program uses simple heuristics and mouse input to traverse the space of solution parameter values. Caine <ref> [9, 10] </ref> takes a similar approach to polygonal feeder design. We need an efficient, robust algorithm that handles curved parts with three degrees of freedom and larger assemblies. The knee example requires configuration space composition to model the three way interactions among the femur, tibia, and patella (knee cap).
Reference: [11] <author> Donald, B. R. </author> <title> The complexity of planar compliant motion planning with uncertainty. </title> <note> Algorithmica 5 (1990) 353-382. </note>
Reference-contexts: The algorithm handles polygonal bodies. It computes slices at fixed intervals and interpolates linearly between them. It does not compute the configuration space topology or bound the interpolation error. The algorithm is unreliable when it interpolates through critical slices because the interpolated curves can vanish or become singular. Donald <ref> [11] </ref> and Briggs [7] compute the critical slices of non-directional backprojections and use them to derive global properties relevant to path planning under motion uncertainty. The criticality conditions and the slice construction algorithms rely on the special structure of polygonal contact. <p> We can represent the traced segment by line segments, by conic splines, by other splines, or by recovering its implicit equations from the sampled points. We compute each configuration space slice independently of the other slices. We can reduce the running time with an incremental approach suggested by Donald <ref> [11] </ref>. We compute an initial contact graph at = , update the vertex and edge data (curve segments and intersection points) at each regular slice, and update the graph structure and data at each critical slice. We eliminate the cost of analyzing all the feature contacts at each slice.
Reference: [12] <author> Donald, B. R. and Pai, D. </author> <title> The motion of planar, compliantly connected rigid bodies in contact, with applications to automatic fastening. </title> <journal> International Journal of Robotics Research 12 (1993) 307-338. </journal> <volume> 23 </volume>
Reference-contexts: Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design <ref> [12] </ref>, part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. <p> A similar well appears at = where the part engages upside down. The rest of the contact space represents non-functional contacts between the part and the outer surfaces of the fixture. 2.4 Fastener design Fastener design is another important application of configuration spaces <ref> [12] </ref>. Figure 6 shows a simple example of a moving pin and a fixed fastener. The user rotates the pin to the vertical position, translates it vertically into the fastener slot, and rotates it to the horizontal position. <p> Caine [9] computes contact patches at interactive speeds as part of an interactive design algorithm. He does not compute the patch intersections, so he cannot tell which contacts are adjacent or subsumed. Donald and Pai <ref> [12] </ref> compute paths through configuration space by quasi-static simulation. The algorithms do not readily extend to curved bodies because they rely on the special structure of polygonal contact patches, which are simple, ruled surface patches. The boundary computations are complicated and subject to topological errors due to small numerical errors.
Reference: [13] <author> Erdmann, M. A. </author> <title> On motion planning with uncertainty. </title> <type> AI-TR 810, </type> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <year> 1984. </year>
Reference-contexts: The algorithms cannot detect or correct the errors. One error corrupts the entire boundary representation, often causing the algorithm to fail dramatically. In a personal communication, Brost reports that these problems are common in his applications. Lozano-Perez [23] suggests configuration space slicing for robot motion planning. Erd-mann <ref> [13] </ref> develops a slicing algorithm for configuration spaces and non-directional back-projections, which have the same geometry. The algorithm handles polygonal bodies. It computes slices at fixed intervals and interpolates linearly between them. It does not compute the configuration space topology or bound the interpolation error.
Reference: [14] <editor> Goldberg, K., Halperin, D., Latombe, J., et al. (Eds.). </editor> <booktitle> The Algorithmic Foundations of Robotics. </booktitle> <editor> (A. K. Peters, </editor> <address> Boston, MA, </address> <year> 1995). </year>
Reference: [15] <author> Guillemin, V. and Pollack, A. </author> <title> Differential Topology. </title> <publisher> (Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1974). </year>
Reference-contexts: Transversal intersection means that the tangent spaces of the intersecting sets span the ambient space at every intersection point, which implies that the intersections persist under small perturbations <ref> [15] </ref>. The theorem applies 12 condition 1 condition 2 condition 3 to differentiable manifolds, which have a tangent space everywhere. We extend it to semi-algebraic sets by requiring that both sets be regular at each intersection point, which implies that they are manifolds in a neighborhood of the intersection.
Reference: [16] <author> Joskowicz, L. and Sacks, E. </author> <note> Computational kinematics. Artificial Intelligence 51 (1991) 381-416. reprinted in [14]. </note>
Reference-contexts: These advantages are important in applications with many curved feature contacts, which are the norm in mechanical design. We found that many mechanisms can be modeled with lines and arcs based on an extensive survey <ref> [16] </ref>. We need to analyze three types of contacts: moving arc/fixed line, moving line/fixed arc, and moving arc/fixed arc (Figure 12). <p> We can embed the tibia/femur, tibia/patella, and femur/patella configuration spaces in the nine-dimensional joint configuration space then intersect the pairwise contact spaces to obtain the joint contact space. We <ref> [16] </ref> found this approach highly effective for pairs with two degrees of freedom. It may prove impractical for pairs with three degrees of freedom because of the large number of regions in the pairwise spaces, which is worst-case exponential in the number of parts with large constant factors [20].
Reference: [17] <author> Joskowicz, L. and Sacks, E. </author> <title> Configuration space computation for mechanism design. </title> <booktitle> in: Proceedings of the 1994 IEEE International Conference on Robotics and Automation. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: The blocked space, everything outside the channel, is omitted for clarity. 4 its four constituent arc segments. 5 The configuration space reveals the qualitative and quantitative function of the cam mechanism to the designer, thus supporting functional design and tolerancing <ref> [17, 18] </ref>. The free space consists of four almost linear bands. Starting from = , the first and third bands are parallel to the x axis, while the second and fourth are parallel to the y axis. <p> We have implemented a naive linearization algorithm for inverting the nonlinear, many to one mapping from assembly to configuration space and have tested it on a few planar, two degree of freedom pairs <ref> [17] </ref>. The program uses simple heuristics and mouse input to traverse the space of solution parameter values. Caine [9, 10] takes a similar approach to polygonal feeder design. We need an efficient, robust algorithm that handles curved parts with three degrees of freedom and larger assemblies.
Reference: [18] <author> Joskowicz, L., Sacks, E., and Srinivasan, V. </author> <title> Kinematic tolerance analysis. </title> <booktitle> Computer-Aided Design 29 (1997) 147-157. </booktitle>
Reference-contexts: It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing <ref> [18] </ref>, fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. <p> The blocked space, everything outside the channel, is omitted for clarity. 4 its four constituent arc segments. 5 The configuration space reveals the qualitative and quantitative function of the cam mechanism to the designer, thus supporting functional design and tolerancing <ref> [17, 18] </ref>. The free space consists of four almost linear bands. Starting from = , the first and third bands are parallel to the x axis, while the second and fourth are parallel to the y axis.
Reference: [19] <author> Joskowicz, L. and Taylor, R. H. </author> <title> Interference-free insertion of a solid body into a cavity: An algorithm and a medical application. </title> <note> International Journal of Robotics Research 15 (1996) 211-229. </note>
Reference-contexts: It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling <ref> [3, 19] </ref> (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29]. Configuration space is a concise, complete encoding of the motion constraints imposed on a rigid object by contacts with rigid obstacles.
Reference: [20] <author> Latombe, J.-C. </author> <title> Robot Motion Planning. </title> <publisher> (Kluwer Academic Publishers, </publisher> <year> 1991). </year>
Reference-contexts: 1 Introduction We present the first practical, implemented configuration space computation algorithm for a curved planar object moving amidst stationary obstacles. Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning <ref> [20] </ref> and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. <p> The times are in seconds averaged over three runs. 3 Previous work The configuration space approach to robot motion planning originates in the work of Lozano-Perez [22]. It has spawned a large literature that is surveyed by Latombe <ref> [20] </ref>. We discuss only the portions relevant to our work. Several boundary-based configuration space computation methods have been developed for bodies bounded by algebraic curve segments [20]. The task is formulated algebraically. <p> It has spawned a large literature that is surveyed by Latombe <ref> [20] </ref>. We discuss only the portions relevant to our work. Several boundary-based configuration space computation methods have been developed for bodies bounded by algebraic curve segments [20]. The task is formulated algebraically. The condition that the moving object touch an obstacle without overlap yields multivariate polynomial inequalities in the configuration space coordinates. The equations are solved by algebraic methods, such as cylindrical decomposition or Grobner basis calculation. The solution set is the contact space. <p> We [16] found this approach highly effective for pairs with two degrees of freedom. It may prove impractical for pairs with three degrees of freedom because of the large number of regions in the pairwise spaces, which is worst-case exponential in the number of parts with large constant factors <ref> [20] </ref>. We can fall back on dynamical simulation, for which pairwise configuration spaces suffice, coupled with local computation of the assembly configuration space in key regions. Acknowledgments Leo Joskowicz provided excellent comments that helped us significantly improve this paper.
Reference: [21] <author> Lin, M. C., Manocha, D., Cohen, J., et al. </author> <title> Collision detection: </title> <booktitle> Algorithms and applications. in: Proceedings of the 2nd Workshop on Algorithmic Foundations of Robotics, </booktitle> <year> 1996. </year>
Reference-contexts: Current simulators perform contact analysis at each time step. They try to avoid the quadratic worst-case performance with collision detection heuristics, such as spatial partitioning, which avoids comparisons between distant parts, and coherent computation, which predicts current contacts based on past <ref> [21] </ref>. It is unclear how well the heuristics work in the mechanical domain where most parts interact, contact changes are common, clearances are small, and parts are driven fast.
Reference: [22] <author> Lozano-Perez, T. </author> <title> Spatial planning: A configuration space approach. in: </title> <journal> IEEE Transactions on Computers, </journal> <volume> volume C-32. </volume> <publisher> IEEE Press, </publisher> <year> 1983. </year>
Reference-contexts: The endpoints are counted because they generate their own contacts and criticalities. The times are in seconds averaged over three runs. 3 Previous work The configuration space approach to robot motion planning originates in the work of Lozano-Perez <ref> [22] </ref>. It has spawned a large literature that is surveyed by Latombe [20]. We discuss only the portions relevant to our work. Several boundary-based configuration space computation methods have been developed for bodies bounded by algebraic curve segments [20]. The task is formulated algebraically.
Reference: [23] <author> Lozano-Perez, T. </author> <title> A simple motion-planning algorithm for general robot manipulators. </title> <journal> IEEE Journal of Robotics and Automation RA-3 (1987). </journal>
Reference-contexts: The algorithms cannot detect or correct the errors. One error corrupts the entire boundary representation, often causing the algorithm to fail dramatically. In a personal communication, Brost reports that these problems are common in his applications. Lozano-Perez <ref> [23] </ref> suggests configuration space slicing for robot motion planning. Erd-mann [13] develops a slicing algorithm for configuration spaces and non-directional back-projections, which have the same geometry. The algorithm handles polygonal bodies. It computes slices at fixed intervals and interpolates linearly between them.
Reference: [24] <author> Lozano-Perez, T. and Wilson, R. H. </author> <title> Assembly sequencing for arbitrary motions. </title> <booktitle> in: IEEE Conference on Robotics and Automation, </booktitle> <year> 1993. </year>
Reference-contexts: It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly <ref> [24, 30] </ref>. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29].
Reference: [25] <author> Meyers, D., Skinner, S., and Sloan, K. </author> <title> Surfaces from contours. </title> <journal> ACM Transactions on Graphics 11 (1992) 228-258. </journal>
Reference-contexts: We can fit smooth patches to the triangles in a variety of ways [5]. The algorithm provides general solutions to the inherent reconstruction problems of contour tiling, correspondence, and contour branching given only the slices <ref> [25] </ref>. Tiling means triangulating the strip between two adjacent slices. The results must be topologically correct and can also optimize metric properties such as surface area and enclosed volume. Correspondence means matching contours in adjacent slices.
Reference: [26] <author> Sacks, E. and Joskowicz, L. </author> <title> Computational kinematic analysis of higher pairs with multiple contacts. </title> <journal> Journal of Mechanical Design 117 (1995) 269-277. </journal> <volume> 24 </volume>
Reference-contexts: Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design <ref> [26, 27] </ref>, fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. <p> We use the HIPAIR program of Sacks and Joskowicz <ref> [26] </ref>. HIPAIR handles objects whose boundaries consist of line segments and circular arcs. It computes contact segments for every pair of interacting features by instantiating precomputed solutions to the contact equations. The totality of contact segments partitions the configuration space into the connected components of the free and blocked spaces. <p> Several simple algorithms achieve this bound, but with unacceptable constant factors. Our HIPAIR program reduces the constant factors enough to analyze pairs with 10,000 features in one second <ref> [26] </ref>. The complexity of computing all the slices is O (n 8 ) because there are O (n 6 ) slices due to the bounded feature complexity. General features are best analyzed by numerical methods for which discrete complexity analysis is inappropriate. <p> These findings are based on extensive testing on hundreds of pairs <ref> [26] </ref> and are consistent with the run times in the applications section. 9 Robustness Our sliced configuration space computation algorithm handles most non-generic situations correctly and is insensitive to numerical errors in its input or in its intermediate computations. The criticality equations are completely general.
Reference: [27] <author> Sacks, E. and Joskowicz, L. </author> <title> Mechanism design and analysis using configuration spaces. </title> <booktitle> in: Proceedings of the Ninth World Congress on the Theory of Machines and Mechanisms, </booktitle> <year> 1995. </year>
Reference-contexts: Configuration space computation is important because it underlies algorithmic approaches to geometric reasoning. It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design <ref> [26, 27] </ref>, fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly [24, 30]. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design.
Reference: [28] <author> Sacks, E. and Joskowicz, L. </author> <title> Dynamical simulation of assemblies of planar, 1dof parts with changing contacts using configuration spaces. </title> <booktitle> in: Proceedings of the 1997 IEEE International Conference on Robotics and Automation. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation <ref> [28, 29] </ref>. Configuration space is a concise, complete encoding of the motion constraints imposed on a rigid object by contacts with rigid obstacles. <p> The algorithms approximate curved boundary parts with polyhedra, which creates spurious discontinuities in the contact functions that distort the dynamics of high-speed systems and increase the simulation time. We have developed a simulator that replaces collision detection with configuration space computation <ref> [28, 29] </ref>. The program computes the configuration spaces of all pairs of parts before the simulation. It handles contacts between parts with curved boundaries without approximation. The worst-case running time of the computation is quadratic in the geometric complexity of the parts, as is a single collision detection.
Reference: [29] <author> Sacks, E. and Joskowicz, L. </author> <title> Dynamical simulation of planar assemblies with changing contacts using configuration spaces. </title> <type> Technical Report 97-008, </type> <institution> Purdue University, </institution> <year> 1997. </year> <note> submitted for publication. </note>
Reference-contexts: It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation <ref> [28, 29] </ref>. Configuration space is a concise, complete encoding of the motion constraints imposed on a rigid object by contacts with rigid obstacles. <p> The algorithms approximate curved boundary parts with polyhedra, which creates spurious discontinuities in the contact functions that distort the dynamics of high-speed systems and increase the simulation time. We have developed a simulator that replaces collision detection with configuration space computation <ref> [28, 29] </ref>. The program computes the configuration spaces of all pairs of parts before the simulation. It handles contacts between parts with curved boundaries without approximation. The worst-case running time of the computation is quadratic in the geometric complexity of the parts, as is a single collision detection.
Reference: [30] <author> Wilson, R., Kavraki, Latombe, J.-C., et al. </author> <title> Two handed assembly sequencing. </title> <journal> International Journal of Robotics Research 14 (1995) 335-350. </journal> <volume> 25 </volume>
Reference-contexts: It supports the robotics tasks of path planning [20] and compliant assembly [9]. It supports mechanical engineering tasks that involve contact analysis, including mechanism design [26, 27], fastener design [12], part feeder design [9, 10], functional tolerancing [18], fixturing [8], and design for assembly <ref> [24, 30] </ref>. It supports the biomedical task of joint modeling [3, 19] (knees, hips, elbows) for diagnosis, therapy, and prosthesis design. It provides an alternative to collision detection for fast, robust dynamical simulation [28, 29].
References-found: 30

