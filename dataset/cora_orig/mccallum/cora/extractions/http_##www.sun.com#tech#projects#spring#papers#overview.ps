URL: http://www.sun.com/tech/projects/spring/papers/overview.ps
Refering-URL: http://www.cs.gatech.edu/computing/classes/cs6420_97_winter/reading.html
Root-URL: 
Title: An Overview of the Spring System  
Author: James G. Mitchell, Jonathan J. Gibbons, Graham Hamilton, Peter B. Kessler, Yousef A. Khalidi, Panos Kougiouris, Peter W. Madany, Michael N. Nelson, Michael L. Powell, and Sanjay R. Radia 
Address: 2550 Garcia Avenue, Mountain View Ca 94303.  
Affiliation: Sun Microsystems Inc.  
Abstract: Spring is a highly modular, distributed, objectoriented operating system. This paper describes the goals of the Spring system and provides overviews of the Spring object model, the security model, and the naming ar chitecture. Implementation details of the Spring microkernel, virtual memory system, file system, and UNIX emulation ar e supplied. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Graham Hamilton and Panos Kougiouris, </author> <title> The Spring Nucleus: A Microkernel for Objects, </title> <booktitle> Proc. 1993 Summer USENIX Conference, </booktitle> <pages> pp. 147-160, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Spring is inherently distributed. All the services and objects available on one node are also available on other nodes in the same distributed system. 5 The nucleus The nucleus is Springs microkernel. It supports three basic abstractions: domains, threads, and doors <ref> [1] </ref>. Domains are analogous to processes in Unix or to tasks in Mach. They provide an address space for applications to run in and act as a container for various kinds of application resources such as threads and doors. Threads execute within domains. <p> For a call with minimal ar guments, Spring can execute a low-level cross-address-space door call in 1 1 ms on a SPARCstation 2, which is significantly faster than using more general purpose inter-process communication mechanisms <ref> [1] </ref>. Doors can be passed as ar guments or results of calls.
Reference: [2] <author> Graham Hamilton, Michael L. Powell, and James G. Mitch-ell, Subcontract: </author> <title> A Flexible Base for Distributed Programming, </title> <booktitle> Proc. 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 69-79, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: This mechanism, known as subcontract, allows control over how object invocation is implemented, over how object references are transmitted between address spaces, how object references are released, and similar object runtime operations <ref> [2] </ref>. For example, the widely used singleton subcontract provides simple access to objects in other address spaces. When a client invokes a singleton object, the subcontract implements the object invocation by transmitting the request to the address space where the objects implementation lives.
Reference: [3] <author> Graham Hamilton and Sanjay Radia, </author> <title> Using Interface Inheritance to Address Problems in System Software Evolution, </title> <booktitle> Proc. ACM Workshop on Interface Definition Languages, </booktitle> <month> January </month> <year> 1994. </year>
Reference: [4] <author> Peter B. Kessler, </author> <title> A ClientSide Stub Interpreter , Proc. </title> <booktitle> ACM Workshop on Interface Definition Languages, </booktitle> <month> January </month> <year> 1994. </year>
Reference: [5] <author> Yousef A. Khalidi and Michael N. Nelson, </author> <title> Extensible File Systems in Spring, </title> <booktitle> Proc. 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 1-14, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Spring includes file systems giving access to files on local disks as well as over the network. Each f ile system uses the Spring security and naming architectures to provide access control and directory services. A Spring file system typically consists of several layered file servers <ref> [5] </ref>. The pager cache object paradigm is used by file systems as a general layering mechanism between the different file servers and virtual memory managers.
Reference: [6] <author> Yousef A. Khalidi and Michael N. Nelson, </author> <title> An Implementation of UNIX on an Objectoriented Operating System, </title> <booktitle> Proc. Winter 1993 USENIX Conference, </booktitle> <pages> pp. 469-479, </pages> <month> Janu-ary </month> <year> 1993. </year>
Reference-contexts: By default, at startup each domain is passed from its parent a private domain name space, which incorporates the user and system name spaces. A domain can acquire other name spaces and contexts if it desires. 11 UNIX Emulation Spring can run Solaris binaries using the UNIX emulation subsystem <ref> [6] </ref>. It is implemented entirely by user level code, employs no actual UNIX code, and provides binary compatibility for a large set of Solaris programs. The subsystem uses services already provided by the underlying Spring system and only implements UNIX-specif ic features that have no counterpart in Spring (e.g., signals).
Reference: [7] <author> Yousef A. Khalidi and Michael N. Nelson, </author> <title> The Spring V ir-tual Memory System, </title> <institution> Sun Microsystems Laboratories Technical Report SMLI-93-9, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: makes it easy for application programs to pass objects to servers in a way that allows the server to actually use the given object. 8 Virtual Memory Spring implements an extensible, demand-paged virtual memory system that separates the functionality of caching pages from the tasks of storing and retrieving pages <ref> [7] </ref>. 8.1 Overview A permachine virtual memory manager (VMM) handles mapping, sharing, protecting, transferring, and caching of local memory. The VMM depends on external pagers for accessing backing store and maintaining inter machine coherency. Most clients of the virtual memory system only deal with address space and memory objects.
Reference: [8] <author> Yousef A. Khalidi and Michael N. Nelson, </author> <title> A Flexible External Paging Interface, </title> <booktitle> Proc. 2nd Workshop on Microkernels and Other Kernel Architectures, </booktitle> <month> September </month> <year> 1993. </year>
Reference: [9] <author> Michael N. Nelson and Graham Hamilton, </author> <title> High Performance Dynamic Linking Through Caching, </title> <booktitle> Proc. 1993 Summer USENIX Conference, </booktitle> <pages> pp. 253-266, </pages> <month> June </month> <year> 1993. </year>
Reference: [10] <author> Michael N. Nelson, Graham Hamilton, and Yousef A. Kha-lidi, </author> <title> Caching in an ObjectOriented System, </title> <booktitle> Proc. 3rd International Workshop on Object Orientation in Operating Systems (I-WOOOS III), </booktitle> <pages> pp. 95-106, </pages> <month> December </month> <year> 1993. </year>
Reference: [11] <author> Michael N. Nelson and Yousef A. Khalidi, </author> <title> Generic Support for Caching and Disconnected Operation, </title> <booktitle> Proc. 4th W ork-shop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pp. 61-65, </pages> <month> October </month> <year> 1993. </year>
Reference: [12] <author> Michael N. Nelson, Yousef A. Khalidi, and Peter W. Madany, </author> <title> Experience Building a File System on a Highly Modular Operating System, </title> <booktitle> Proc. 4th Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS IV), </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: The coherency protocol is not specif ied by the architectureexternal pagers are free to implement whatever coherency protocol they wish. The cache and pager object interfaces provide basic building blocks for constructing the coherency protocol. Our current external pager implementations use a single-writer/multiple-reader per-block coherency protocol <ref> [12, 13] </ref>. 9 File System The file system architecture defines file objects that are implemented by file servers. The file object interface inherits from the memory object and io interfaces.
Reference: [13] <author> Michael N. Nelson, Yousef A. Khalidi, and Peter W. Madany, </author> <title> The Spring File System, </title> <institution> Sun Microsystems Laboratories Technical Report SMLI-93-10, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The Spring file interface provides file read/write operations (but not page-in/page-out operations). Separating the memory abstraction from the interface that provides the paging operations is a feature of the Spring virtual memory system that we found very useful in implementing our file system <ref> [13] </ref>. This separation enables the memory object server to be in a dif ferent memory objects address space FIGURE 8. Users view of address spaces An address space is a linear range of addresses with regions mapped to memory objects. <p> The coherency protocol is not specif ied by the architectureexternal pagers are free to implement whatever coherency protocol they wish. The cache and pager object interfaces provide basic building blocks for constructing the coherency protocol. Our current external pager implementations use a single-writer/multiple-reader per-block coherency protocol <ref> [12, 13] </ref>. 9 File System The file system architecture defines file objects that are implemented by file servers. The file object interface inherits from the memory object and io interfaces.
Reference: [14] <author> Michael N. Nelson and Sanjay R. Radia, </author> <title> A Uniform Name Service for Springs Unix Environment, </title> <booktitle> Proc. Winter 1994 USENIX Conference, </booktitle> <month> Jan. </month> <year> 1994. </year>
Reference: [15] <author> Object Management Group, </author> <title> Common Object Request Broker Architecture and Specification, OMG Document 91.12.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: and it should be open, exible and extensible By a strong interface we mean one that specif ies what some software component does while saying very little about how it is implemented This way of stating our purpose led us to develop the idea of an Interface Definition Language (IDL) <ref> [15] </ref> so that we could define software interfaces without having to tie ourselves to a single programming language, which would have made the system less open. We also believed that the best way to get many of the system properties we wanted was to use an object-oriented approach. <p> The write method returns nothing (void) and takes a single argument, data, whose type is raw_data. As noted above, instead of returning normally , a method may raise one of a number of defined exceptions. A complete description of IDL is given in <ref> [15] </ref>. 3 Objects in Spring Although all Spring interfaces are def ined in IDL, IDL says nothing about how operations on an object are implemented, or even how an operation request should be conveyed to an object. The users of an object merely invoke operations defined in its interface.
Reference: [16] <author> Sanjay Radia, Peter Madany, and Michael L. Powell, </author> <booktitle> Persistence in the Spring System, Proc. 3rd International Workshop on Object Orientation in Operating Systems (I-WOOOS III), </booktitle> <pages> pp. 12-23, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: T radition-ally, such applications would have had to build their own naming facility, or incorporate the private name space into a larger systemwide name space, and access it indirectly via the root or working context. Since Spring objects are not persistent by default, naming is used to provide persistence <ref> [16] </ref>. It is expected that applications generally will (re)acquire objects from the name service. If the part of the name space in which the object is found is persistent, then the object will have been made persistent also.
Reference: [17] <author> Sanjay R. Radia, Michael N. Nelson, and Michael L. Pow-ell, </author> <title> The Spring Name Service, </title> <institution> Sun Microsystems Laboratories Technical Report SMLI-93-16, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: For example, f ile systems typically implement their own naming service for naming files (directories). FIGURE 10. Spring SFS Coherency layer Disk layer SFS All files are Disk drive exported by coherency layer In contrast, Spring provides a uniform name service <ref> [17] </ref>. In principle, any object can be bound to any name.
References-found: 17

