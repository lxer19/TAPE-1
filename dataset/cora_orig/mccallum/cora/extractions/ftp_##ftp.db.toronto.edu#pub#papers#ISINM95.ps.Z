URL: ftp://ftp.db.toronto.edu/pub/papers/ISINM95.ps.Z
Refering-URL: http://www.cs.toronto.edu/~zmhasan/papers.html
Root-URL: 
Email: zmhasan@db.toronto.edu  
Title: An Active Temporal Model for Network Management Databases 1  
Author: Masum Z. Hasan 
Address: Toronto, Canada M5S 1A1  
Affiliation: Computer Systems Research Institute University of Toronto  
Abstract: The purpose of a network management system is to provide smooth functioning of a large heterogeneous network through monitoring and controlling of network behavior. ISO/OSI has defined six management functionalities that aid in overall management of a network: configuration, fault, performance, security, directory and accounting management. These management functionalities provide tools for overall graceful functioning of the network on both day-to-day and long-term basis. All of the functionalities entail dealing with huge volumes of data. So network management in a sense is management of data, like a DBMS is used to manage data. This is precisely our purpose in this paper to show that by viewing the network as a conceptual global database the six management functionalities can be performed in a declarative fashion through specification of management functionalities as data manipulation statements. But to be able to do so we need a model that incorporates the unique properties of network management related data and functions. We propose a model of a database that combines and extends the features of active and temporal databases as a model for a network management database. This model of a network management database allows us to specify network management functions as Event-Condition-Action rules. The event in the rule is specified using our proposed event specification language. 
Abstract-found: 1
Intro-found: 1
Reference: [CH93] <author> Mariano Consens and Masum Hasan. </author> <title> Supporting network management through declaratively specified data visualizations. </title> <editor> In H.G. Hegering and Y. Yemini, editors, </editor> <booktitle> Proceedings of the IEEE/IFIP Third International Symposium on Integrated Network Management, III, </booktitle> <pages> pages 725-738. </pages> <publisher> Elsevier North Holland, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: The question then arises, how to specify polling, data pattern events, composite events and trace collection in a declarative way. By considering the network as a database, the data pattern events can be specified as data manipulation statements in any declarative database language, for example, SQL. In <ref> [CH93] </ref> we specified data pattern events as GraphLog queries. Management action is performed by monitoring on the network database. Polling or sampling is one form of monitoring. <p> We do not show query Q5 here. Similar query can be found in <ref> [CH93] </ref>. The routers found are passed to the query portion of RL4. PSU is defined as an interval. The interval is calculated using the int operator on the persistent composite event PSU.
Reference: [ea93] <author> C. Jensen et. al. </author> <title> Proposed temporal database concepts may 1993. </title> <booktitle> In Proceedings of the International Workshop On an Infrastructure for Temporal Databases, </booktitle> <pages> pages A-1-A-29, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Petri net [GD94] or finite state machines [GJS92] can be used to model the language operators and detect composite events expressed as event expressions. 2.2 Temporal Databases A temporal database in <ref> [ea93] </ref> is defined as a database that supports some aspect of time, not counting user-defined time. In other words, a TDBMS "understands" the notion of time and provides temporal operators that allow one to specify temporal queries. <p> Since time is generally considered as discrete, the notion of "instantaneous" requires definition. A term called chronon which is the shortest duration of time supported by a TDBMS, that is, a nondecomposable unit of time, is defined in <ref> [ea93] </ref>. An event occurs at any time during the chronon interval. In the network management domain we need the support for multiple choronons associated with each event entity or relation. The need for the support of multiple chronons is mentioned in [ea94]. An interval is the time between two events. <p> In the network management domain we need the support for multiple choronons associated with each event entity or relation. The need for the support of multiple chronons is mentioned in [ea94]. An interval is the time between two events. It may be represented by a set of contiguous chronons <ref> [ea93] </ref>. 2.3 Network Management Databases Network management consists of monitoring and controlling the behavior of a network, which require the presence of sophisticated mechanism for the specification of events and correlated events occurring at different time points and specification of rules for dealing with these events.
Reference: [ea94] <author> N. Pissinou et. al. </author> <title> Towards an infrastructure for temporal databases, report of an invitational ARPA/NSF workshop. </title> <type> Technical Report TR 94-01, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: An event occurs at any time during the chronon interval. In the network management domain we need the support for multiple choronons associated with each event entity or relation. The need for the support of multiple chronons is mentioned in <ref> [ea94] </ref>. An interval is the time between two events.
Reference: [GD94] <author> S. Gatziu and K. Dittrich. </author> <title> Detecting composite events in active database systems using petri nets. </title> <booktitle> In Proceedings of the Fourth International Workshop on Research Issues in Data Engineering, </booktitle> <pages> pages 2-9, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: So a composite event expression formed using algebra operators allows one to express relationship between events in the temporal dimension. The composite event happens when the specified relationship as defined by the algebra operators is detected in the event history. Petri net <ref> [GD94] </ref> or finite state machines [GJS92] can be used to model the language operators and detect composite events expressed as event expressions. 2.2 Temporal Databases A temporal database in [ea93] is defined as a database that supports some aspect of time, not counting user-defined time.
Reference: [GJS92] <author> N. Gehani, H. Jagadish, and O. Shmueli. </author> <title> Composite event specification in active databases: Model and implementation. </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Data Bases, </booktitle> <year> 1992. </year>
Reference-contexts: So a composite event expression formed using algebra operators allows one to express relationship between events in the temporal dimension. The composite event happens when the specified relationship as defined by the algebra operators is detected in the event history. Petri net [GD94] or finite state machines <ref> [GJS92] </ref> can be used to model the language operators and detect composite events expressed as event expressions. 2.2 Temporal Databases A temporal database in [ea93] is defined as a database that supports some aspect of time, not counting user-defined time. <p> It is possible to order the events totally at the central site where they are collected for processing. But this does not allow us to detect arbitrary temporal ordering, for example, overlap of intervals during which events happen. A total ordering in the event history is assumed in <ref> [GJS92] </ref>. We use Petri Net as implementation model of ESL expressions. Petri net allows reasoning about partial order of computation. 3.1 ESL Operators and Expressions We define a number of basic operators, we think are useful for a number of applications requiring active database support.
Reference: [Has94] <author> Masum Z. Hasan. </author> <title> Active and temporal issues in dynamic databases. </title> <type> PhD Thesis Proposal, </type> <institution> Department of Computer Science, University of Waterloo, Waterloo, </institution> <address> Ontario, Canada, </address> <year> 1994. </year>
Reference-contexts: Petri net allows reasoning about partial order of computation. 3.1 ESL Operators and Expressions We define a number of basic operators, we think are useful for a number of applications requiring active database support. Details about the language and its implementation can be found in <ref> [Has94] </ref>. * E = e 1 e 2 , Operator defines the event that occurs when either of e 1 or e 2 occurs. * E = e 1 e 2 , E occurs when both of the events occur in any order. * E = e 1 fb e 2
Reference: [HBNRD93] <author> J. Haritsa, M. Ball, J. Baras N. Roussopoulas, and A. Datta. </author> <title> Design of the MANDATE MIB. </title> <editor> In H.G. Hegering and Y. Yemini, editors, </editor> <booktitle> Proceedings of the IEEE/IFIP Third International Symposium on Integrated Network Management, III, </booktitle> <pages> pages 85-96. </pages> <publisher> Elsevier North Holland, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: We also provide a consistent mechanism to collect events and traces in a temporal database. The notion of persistence is mentioned in their work, but no formal definition of it is provided. The MANDATE MIB project <ref> [HBNRD93] </ref> also addresses similar network management database issues. But the proposal for a unified framework for incorporating active and temporal databases concepts in a network management database similar to ours is lacking in their work.
Reference: [MD89] <author> D. McCarthy and U. Dayal. </author> <title> The architecture of an active data base management system. </title> <booktitle> In Proceedings of the ACM-SIGMOD 1989 International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <year> 1989. </year>
Reference-contexts: On the other hand, an Active DBMS (ADBMS) provides facilities for specifying actions or database operations to be performed automatically in response to certain events and conditions. Active behavior in an ADBMS is achieved through Event-Condition-Action (ECA) <ref> [MD89] </ref> rules. The rules state that when the specified event (s) occurs and the condition holds, perform the action. A condition is defined over the state of the database and its environment (for example, transaction causing the event). An action can be an arbitrary program or a database operation.
Reference: [Shv93] <author> A. A. Shvartsman. </author> <title> An historical object base in an enterprise management director. </title> <editor> In H.G. Hegering and Y. Yemini, editors, </editor> <booktitle> Proceedings of the IEEE/IFIP Third International Symposium on Integrated Network Management, III, </booktitle> <pages> pages 123-134. </pages> <publisher> Elsevier North Holland, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: The MANDATE MIB project [HBNRD93] also addresses similar network management database issues. But the proposal for a unified framework for incorporating active and temporal databases concepts in a network management database similar to ours is lacking in their work. The work in <ref> [Shv93] </ref> discusses only the issues of a static (historical) temporal database for network management data. 6 Conclusion We have proposed a model for network management database where the network management functions are specified as Event-Condition- Action rules.
Reference: [Sta93] <author> W. Stallings. SNMP, SNMPv2, and CMIP, </author> <title> The Practical Guide to Network Management Standards. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1993. </year>
Reference-contexts: The mechanism by which small fluctuations are prevented from causing alarm is referred to in the RMON specification as hysteresis mechanism. Hysteresis mechanism is best explained through the Figure 3.a (similar to the figure in <ref> [Sta93] </ref>, we modify it to suit our purpose). As the rules for the hysteresis mechanism stipulates only the events marked as stars (*) will be reported. We assume that the events are reported at each sampling interval. Then the hysteresis mechanism can be specified as follows.
Reference: [Wal] <author> S. Waldbusser. </author> <title> Remote network monitoring management information base. </title> <type> RFC 1271, </type> <institution> Carnegie Mellon University. </institution>
Reference-contexts: An ECA rule using this event will fire the action repeatedly which may be undesirable. What we need is some filtering mechanism to prevent this. For example, first event since some other event or the hysteresis mechanism as defined in the RMON specification <ref> [Wal] </ref>. The mechanism by which small fluctuations are prevented from causing alarm is referred to in the RMON specification as hysteresis mechanism. Hysteresis mechanism is best explained through the Figure 3.a (similar to the figure in [Sta93], we modify it to suit our purpose).

References-found: 11

