URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Straatman:95b.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: remco@swi.psy.uva.nl  
Title: Learning Control Knowledge in Models of Expertise ECML'95 Workshop on Knowledge-Level Modelling and Machine Learning  
Author: Remco Straatman 
Address: Roetersstraat 15 1018 WB Amsterdam (the Netherlands)  
Affiliation: Department of Social Science Informatics (S.W.I.) University of Amsterdam  
Abstract: During the development and the life-cycle of knowledge-based systems the requirements on the system and the knowledge in the system will change. One of the types of knowledge affected by changing requirements is control-knowledge, which prescribes the ordering of problem-solving steps. Machine-learning can aid developers of knowledge-based systems in adapting their systems to changing requirements. A number of machine-learning techniques for learning control-knowledge have been applied to problem-solvers (Prodigy-EBL, LEX). In knowledge engineering, the focus has shifted to the construction of knowledge-level models of problem-solving instead of directly constructing a knowledge-based system in a problem-solver. In this paper we describe work in progress on how to apply machine learning techniques to the KADS model of expertise.
Abstract-found: 1
Intro-found: 1
Reference: [Angele et al., 1991] <author> J. Angele, D. Fensel, D. Landes, and R. Studer. KARL: </author> <title> An executable language for the conceptual model. </title> <booktitle> In Proceedings of the 6th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, pages 1.1-20, </booktitle> <address> Banff, Canada, </address> <year> 1991. </year> <institution> SRDG Publications, University of Calgary. </institution>
Reference-contexts: Another difference lies in the representation of the control-knowledge. Even though the kads framework as such does not prescribe a particular language for the control-structure, most kads expertise model languages (such as (M L) 2 [Balder & Akkermans, 1992], and karl <ref> [Angele et al., 1991] </ref>) represent the control structure using constructs based on imperative languages such as while-do, if-then-else. Modifying and learning such constructs of course differs from adding and modifying control-rules in a set of control-rules. <p> A propose-and-refine method is used to implement the configuration-task. The top-level task of the VT-system, configuration, will be the focus of this example. Fensel [Fensel, 1994] describes that multiple variants of a control-structure for the configure task are possible. This observation was the result of studying the karl <ref> [Angele et al., 1991] </ref> VT-specification described in [Poeck et al., 1994]. Some of these variants are generally valid but inefficient, whereas others are more efficient but only valid under certain assumptions. Figure 4 shows the (simplified) data-flow within the configuration task as described by Fensel.
Reference: [Balder & Akkermans, 1992] <author> J.R. Balder and J.M. Akkermans. </author> <title> Formal methods for knowledge modelling in the commonkads methodology: A compilation. </title> <type> Technical Report ECN-C-92-080, </type> <institution> Netherlands Energy Research Foundation ECN, </institution> <year> 1992. </year>
Reference-contexts: Another difference lies in the representation of the control-knowledge. Even though the kads framework as such does not prescribe a particular language for the control-structure, most kads expertise model languages (such as (M L) 2 <ref> [Balder & Akkermans, 1992] </ref>, and karl [Angele et al., 1991]) represent the control structure using constructs based on imperative languages such as while-do, if-then-else. Modifying and learning such constructs of course differs from adding and modifying control-rules in a set of control-rules.
Reference: [Beys, 1994] <institution> Pascal Beys. Modelisation des co^uts pour l`apprentissage. </institution> <type> Master's thesis, </type> <institution> LAFORIA-IBP, Universite P. et M. Curie, Paris, </institution> <month> August </month> <year> 1994. </year> <note> (in French). </note>
Reference-contexts: For this purpose we have developed a cost-model that calculates the average solution cost of a kads-based KBS from the control-structure and the costs and probability of the primitive components <ref> [Beys, 1994, Straatman & Beys, 1995] </ref>. This model is similar to cost-models proposed by [Subramanian & Hunter, 1992, Dejong & Gratch, 1991] that are employed in speedup-learning to deal with the utility problem.
Reference: [Dejong & Gratch, 1991] <author> G. Dejong and J. Gratch. </author> <title> A hybrid approach to guaranteed effective control strategies. </title> <booktitle> In ML91 Eighth International Workshop, </booktitle> <pages> pages 509-513. </pages> <editor> L.A. Birnbaum and G. C. Collins, </editor> <year> 1991. </year>
Reference-contexts: For this purpose we have developed a cost-model that calculates the average solution cost of a kads-based KBS from the control-structure and the costs and probability of the primitive components [Beys, 1994, Straatman & Beys, 1995]. This model is similar to cost-models proposed by <ref> [Subramanian & Hunter, 1992, Dejong & Gratch, 1991] </ref> that are employed in speedup-learning to deal with the utility problem. The model is able to show that the second variant is always more efficient than the first one.
Reference: [Etzioni, 1992] <author> O. Etzioni. </author> <title> Acquiring search-control knowledge via static analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 62 </volume> <pages> 255-301, </pages> <year> 1992. </year>
Reference-contexts: Of these methods, only the third is applicable to knowledge-level learning of control-knowledge, because it uses a separate and explicit representation of the control-knowledge. A number of systems for learning meta-level control constructs have been built. Among these are MetaLEX [Keller, 1988], STATIC <ref> [Etzioni, 1992] </ref>, Prodigy-EBL [Minton, 1988, Minton, 1990] and LEX [Mitchell et al., 1983]. These systems are built on top of meta-level problem solvers. The object-level of the problem solver consists of domain-knowledge and operators, that change the state of the problem solver.
Reference: [Keller, 1988] <author> R. M. Keller. </author> <title> Defining operationality for explanation-based learning. </title> <journal> Artificial Intelligence, </journal> <volume> 35 </volume> <pages> 227-241, </pages> <year> 1988. </year>
Reference-contexts: Of these methods, only the third is applicable to knowledge-level learning of control-knowledge, because it uses a separate and explicit representation of the control-knowledge. A number of systems for learning meta-level control constructs have been built. Among these are MetaLEX <ref> [Keller, 1988] </ref>, STATIC [Etzioni, 1992], Prodigy-EBL [Minton, 1988, Minton, 1990] and LEX [Mitchell et al., 1983]. These systems are built on top of meta-level problem solvers. The object-level of the problem solver consists of domain-knowledge and operators, that change the state of the problem solver.
Reference: [Minton, 1988] <author> S. Minton. </author> <title> Learning Effective Search Control Knowledge: An Explanation-Based Approach. </title> <publisher> Kluwer, </publisher> <year> 1988. </year>
Reference-contexts: Of these methods, only the third is applicable to knowledge-level learning of control-knowledge, because it uses a separate and explicit representation of the control-knowledge. A number of systems for learning meta-level control constructs have been built. Among these are MetaLEX [Keller, 1988], STATIC [Etzioni, 1992], Prodigy-EBL <ref> [Minton, 1988, Minton, 1990] </ref> and LEX [Mitchell et al., 1983]. These systems are built on top of meta-level problem solvers. The object-level of the problem solver consists of domain-knowledge and operators, that change the state of the problem solver.
Reference: [Minton, 1990] <author> S. Minton. </author> <title> Quantitative results concerning the utility of explanation-based learning. </title> <journal> Artificial Intelligence, </journal> <volume> 42(2-3):363-391, </volume> <year> 1990. </year>
Reference-contexts: Of these methods, only the third is applicable to knowledge-level learning of control-knowledge, because it uses a separate and explicit representation of the control-knowledge. A number of systems for learning meta-level control constructs have been built. Among these are MetaLEX [Keller, 1988], STATIC [Etzioni, 1992], Prodigy-EBL <ref> [Minton, 1988, Minton, 1990] </ref> and LEX [Mitchell et al., 1983]. These systems are built on top of meta-level problem solvers. The object-level of the problem solver consists of domain-knowledge and operators, that change the state of the problem solver.
Reference: [Mitchell et al., 1983] <author> T. M. Mitchell, P. E. Utgoff, and R. Banerji. </author> <title> Learning by experimentation : Acquiring and refining problem-solving heuristics. </title> <editor> In R. S. Michalski, J. G. Carbonell, and T. M. Mitchell, editors, </editor> <booktitle> Machine Learning : An Artificial Intelligence Approach, </booktitle> <volume> Vol. 1., </volume> <pages> pages 163-190. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1983. </year>
Reference-contexts: A number of systems for learning meta-level control constructs have been built. Among these are MetaLEX [Keller, 1988], STATIC [Etzioni, 1992], Prodigy-EBL [Minton, 1988, Minton, 1990] and LEX <ref> [Mitchell et al., 1983] </ref>. These systems are built on top of meta-level problem solvers. The object-level of the problem solver consists of domain-knowledge and operators, that change the state of the problem solver. <p> If the Utility of a control rule becomes negative, the control rule is removed. Because PRODIGY-EBL starts with an exhaustive search strategy and generates only "safe" control-rules (because it uses explanation-based specialisation) the only reason to remove a control rule is negative utility. 2.2 LEX LEX <ref> [Mitchell et al., 1983] </ref> begins with a heuristic problem solver without heuristics. LEX's problem domain is symbolic integration, it is given a set of operators for solving problems together with preconditions that state when they can be applied (e.g.
Reference: [Poeck et al., 1994] <author> K. Poeck, D. Fensel, D. Landes, and J. Angele. </author> <title> Combining karl and configurable role limiting methods for configuring elevator systems. </title> <editor> In G. Schreiber and B. Birm-ingham, editors, </editor> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-based I.2.12 Systems Workshop (KAW+94), volume III, Sisyphus II - VT Elevator Design Problem, </booktitle> <address> Banff, Canada, </address> <month> January 30 - February 4 </month> <year> 1994. </year>
Reference-contexts: The top-level task of the VT-system, configuration, will be the focus of this example. Fensel [Fensel, 1994] describes that multiple variants of a control-structure for the configure task are possible. This observation was the result of studying the karl [Angele et al., 1991] VT-specification described in <ref> [Poeck et al., 1994] </ref>. Some of these variants are generally valid but inefficient, whereas others are more efficient but only valid under certain assumptions. Figure 4 shows the (simplified) data-flow within the configuration task as described by Fensel.
Reference: [Schreiber et al., 1993] <editor> A. Th. Schreiber, B. J. Wielinga, and J. A. Breuker, editors. KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development, volume 11 of Knowledge-Based Systems Book Series. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1993. </year> <note> ISBN 0-12-629040-7. </note>
Reference-contexts: In this case we chose to apply machine-learning to control-knowledge in kads fl This work has been funded by the Netherlands Computer Science Research Foundation with financial support form the Netherlands Organization for Scientific Research (NWO) within the revise-project, sion-project no. 612-322-316 expertise-models. kads <ref> [Schreiber et al., 1993] </ref> is a well-known model-based knowledge acqui-sition approach. Creating a KBS in kads consists of the construction of a number of models, each describing different aspects of the KBS, ranging from organisational aspects to the knowledge present in the system.
Reference: [Straatman & Beys, 1995] <author> R. Straatman and P. Beys. </author> <title> A performance model for knowledge-based systems. </title> <editor> In M. C. Rousset, editor, </editor> <booktitle> EUROVAV-95 Proceedings of the European Symposium on Validation and Verification of Knowledge-based Systems, </booktitle> <year> 1995. </year> <note> (to appear). </note>
Reference-contexts: I.2.8 The learned constraints will restrict the number of possible control-variants, but in general there will still be multiple variants possible. We will somehow have to choose between the remaining control variants. This will be done on the basis of quantitative model as outlined in <ref> [Straatman & Beys, 1995] </ref>. We will now illustrate the above by a small example of an existing kads model of expertise. The VT-domain [Yost, 1992] (Vertical Transportation) deals with the configuration of elevators. <p> For this purpose we have developed a cost-model that calculates the average solution cost of a kads-based KBS from the control-structure and the costs and probability of the primitive components <ref> [Beys, 1994, Straatman & Beys, 1995] </ref>. This model is similar to cost-models proposed by [Subramanian & Hunter, 1992, Dejong & Gratch, 1991] that are employed in speedup-learning to deal with the utility problem. <p> Actual values for each for these are needed to decide which of the variants is more efficient. In <ref> [Straatman & Beys, 1995] </ref> a detailed description of these examples and the use of the cost model is given. The cost model will help the learning system to decide when it is more efficient to change the current control structure.
Reference: [Subramanian & Hunter, 1992] <author> D. Subramanian and Scott Hunter. </author> <title> Computational impact of biases in learning. </title> <editor> In Diana Gordon, editor, </editor> <booktitle> ML92 Workshop on Biases in Inductive Learning, </booktitle> <year> 1992. </year>
Reference-contexts: For this purpose we have developed a cost-model that calculates the average solution cost of a kads-based KBS from the control-structure and the costs and probability of the primitive components [Beys, 1994, Straatman & Beys, 1995]. This model is similar to cost-models proposed by <ref> [Subramanian & Hunter, 1992, Dejong & Gratch, 1991] </ref> that are employed in speedup-learning to deal with the utility problem. The model is able to show that the second variant is always more efficient than the first one.
Reference: [Yost, 1992] <author> G. Yost. </author> <title> Configuring elevator systems. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation, </institution> <address> 111 Locke Drive (LMO2/K11), Marlboro MA 02172, </address> <year> 1992. </year> <month> I.2.13 </month>
Reference-contexts: We will somehow have to choose between the remaining control variants. This will be done on the basis of quantitative model as outlined in [Straatman & Beys, 1995]. We will now illustrate the above by a small example of an existing kads model of expertise. The VT-domain <ref> [Yost, 1992] </ref> (Vertical Transportation) deals with the configuration of elevators. This domain has been widely used as a testbed for specification formalisms for knowledge-based systems within the so-called Sisyphus-II project.
References-found: 14

