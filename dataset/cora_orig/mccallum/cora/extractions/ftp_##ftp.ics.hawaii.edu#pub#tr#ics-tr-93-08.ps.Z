URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-93-08.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Title: Automated Derivation of Time Bounds in Uniprocessor Concurrent Systems  
Author: George S. Avrunin, James C. Corbett, Laura K. Dillon, Jack C. Wileden 
Keyword: Concurrent systems, Real-time systems, Automated analysis, Timing analysis, Linear inequalities, Integer programming, Finite state systems  
Date: 1994 1  
Note: IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. XX, NO. Y, MONTH  
Abstract: The successful development of complex real-time systems depends on analysis techniques that can accurately assess the timing properties of those systems. This paper describes a technique for deriving upper and lower bounds on the time that can elapse between two given events in an execution of a concurrent software system running on a single processor under arbitrary scheduling. The technique involves generating linear inequalities expressing conditions that must be satisfied by all executions of such a system and using integer programming methods to find appropriate solutions to the inequalities. The technique does not require construction of the state space of the system and its feasibility has been demonstrated by using an extended version of the constrained expression toolset to analyze the timing properties of some concurrent systems with very large state spaces. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. W. </author> <title> Alford. </title> <booktitle> SREM at the age of eight; the distributed computing design system. Computer, </booktitle> <volume> 18 </volume> <pages> 36-46, </pages> <month> April </month> <year> 1985. </year>
Reference: [2] <author> A. I. Ali, J. Kennington, and B. Shetty. </author> <title> The equal flow problem. </title> <journal> European J. Oper. Res., </journal> <volume> 36 </volume> <pages> 107-115, </pages> <year> 1988. </year>
Reference-contexts: Even papers proposing new methods for solving such problems validate those methods by presenting empirical data on their performance on standard test problems <ref> [2] </ref>. AVRUNIN, ET.
Reference: [3] <author> J. M. Atlee and J. Gannon. </author> <title> State-based model checking of event-driven system requirements. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 19(1) </volume> <pages> 24-40, </pages> <month> Jan. </month> <year> 1993. </year>
Reference: [4] <author> G. S. Avrunin, U. A. Buy, J. C. Corbett, L. K. Dillon, and J. C. Wileden. </author> <title> Automated analysis of concurrent systems with the constrained expression toolset. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 17(11) </volume> <pages> 1204-1222, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: execution on a multiprocessor results in significant performance improvements.) Other communication mechanisms, in addition to the synchronous message-passing discussed above, can be described by augmenting the DFAs representing sequential processes with a set of languages over subsets of the union of the DFA alphabets, as in the constrained expression formalism <ref> [4] </ref>, [9] where these languages are generated using regular expression operators and a single additional operator. (The constrained expression formalism is capable of describing all recursively enumerable languages.) The additional languages, called constraints, express restrictions on traces that are imposed by the communication (or other synchronization) primitives. <p> It also provides tools for generating systems of linear inequalities from constrained expressions, for solving systems of linear inequalities, and for generating sample traces representing behaviors of a system. (A detailed description of the toolset appears in <ref> [4] </ref>.) To perform timing analysis, we adapted the component of the toolset that generates inequalities to implement the techniques described in the previous sections. The integer linear programming (ILP) package provided in the toolset finds an optimal solution to the system of inequalities, assuming that one exists.
Reference: [5] <author> J. C. Corbett. </author> <title> Automated Formal Analysis Methods for Concurrent and Real-Time Software. </title> <type> PhD thesis, </type> <institution> University of Mas-sachusetts at Amherst, </institution> <year> 1992. </year>
Reference-contexts: The integer linear programming (ILP) package provided in the toolset finds an optimal solution to the system of inequalities, assuming that one exists. It requires the specification of an objective function, which is set to reflect the duration of events for timing analysis. In <ref> [5] </ref>, the modified tools are used to derive bounds for a version of Helmbold and Luck-ham's gas station problem [15], a mutual exclusion protocol based on coteries [10], and a system modeling resource contention [5]. <p> In <ref> [5] </ref>, the modified tools are used to derive bounds for a version of Helmbold and Luck-ham's gas station problem [15], a mutual exclusion protocol based on coteries [10], and a system modeling resource contention [5]. These relatively small and simple systems comprise between four and eight tasks, some of which had DFAs with up to 80 states and many interconnected cycles. <p> In theory, the technique can produce very loose bounds due to unenforced event orderings and cycles in the DFAs. In practice, however, the technique produced sharp bounds for all the experiments described here as well as those described in <ref> [5] </ref>, demonstrating that the necessary conditions are strong enough to be useful on some nontrivial systems. Finally, and most importantly, note that the state spaces of both examples grow exponentially in n (the size n prob 12 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. XX, NO.
Reference: [6] <author> J. C. Corbett and G. S. Avrunin. </author> <title> A practical method for bounding the time between events in concurrent real-time systems. </title> <editor> In T. Ostrand and E. Weyuker, editors, </editor> <booktitle> Proceedings of the 1993 International Symposium on Software Testing and Analysis (IS-STA), </booktitle> <pages> pages 110-116, </pages> <address> New York, June 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Although these examples are smaller and more restricted than real concurrent systems, the ability of our prototype implementation to analyze systems having more than 2 500 reachable states is very encouraging. Furthermore, initial work on extending the method to the multiprocessor setting <ref> [6] </ref> is quite promising. We therefore believe that our method has considerable potential as a foundation for practical tools for developers of real-time software. Acknowledgement This research has been supported by grants from the National Science Foundation, the Office of Naval Research, and the Defense Advanced Research Projects Agency.
Reference: [7] <author> C. Courcoubetis and M. Yannakakis. </author> <title> Minimum and maximum delay problems in real-time systems. </title> <editor> In K. G. Larsen and A. Skou, editors, </editor> <booktitle> Computer Aided Verification, 3rd International Workshop Proceedings, volume 575 of Lecture Notes in Computer Science, </booktitle> <pages> pages 399-409, </pages> <address> Aalborg, Denmark, July 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference: [8] <author> B. Dasarathy. </author> <title> Timing constraints of real-time systems: Constructs for expressing them, methods of validating them. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 11(1) </volume> <pages> 80-86, </pages> <year> 1985. </year>
Reference: [9] <author> L. K. Dillon, G. S. Avrunin, and J. C. Wileden. </author> <title> Constrained expressions: Toward broad applicability of analysis methods for distributed software systems. </title> <journal> ACM Trans. Prog. Lang. Syst., </journal> <volume> 10(3) </volume> <pages> 374-402, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: on a multiprocessor results in significant performance improvements.) Other communication mechanisms, in addition to the synchronous message-passing discussed above, can be described by augmenting the DFAs representing sequential processes with a set of languages over subsets of the union of the DFA alphabets, as in the constrained expression formalism [4], <ref> [9] </ref> where these languages are generated using regular expression operators and a single additional operator. (The constrained expression formalism is capable of describing all recursively enumerable languages.) The additional languages, called constraints, express restrictions on traces that are imposed by the communication (or other synchronization) primitives. <p> A detailed description of one such case can be found in <ref> [9] </ref>, for example. The inequality-based analysis method described below is easily adapted for use with this more general representation for a concurrent system. Clearly our model cannot represent all real-time systems. The most important restrictions are: Requires bounds on execution time of sequential code. <p> A broad range of systems can be represented using the model on which the method is based. As indicated earlier, the model can be applied to concurrent systems that assume different underlying models of computation and communication <ref> [9] </ref>. In particular, neither the restriction to two-party communication nor the assumption that the automata are deterministic, both made for purposes of the examples in this paper, is critical to the model or the analysis method.
Reference: [10] <author> H. Garcia-Molina and D. Barbara. </author> <title> How to assign votes in a distributed system. </title> <journal> J. ACM, </journal> <volume> 32(4) </volume> <pages> 841-860, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: It requires the specification of an objective function, which is set to reflect the duration of events for timing analysis. In [5], the modified tools are used to derive bounds for a version of Helmbold and Luck-ham's gas station problem [15], a mutual exclusion protocol based on coteries <ref> [10] </ref>, and a system modeling resource contention [5]. These relatively small and simple systems comprise between four and eight tasks, some of which had DFAs with up to 80 states and many interconnected cycles.
Reference: [11] <author> R. Gerber and I. Lee. </author> <title> A layered approach to automating the verification of real-time systems. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 18(9) </volume> <pages> 768-784, </pages> <month> Sept. </month> <year> 1992. </year>
Reference: [12] <author> C. Ghezzi, D. Mandriolli, and A. Morzenti. </author> <title> Trio: A logic language for executable specifications of real-time systems. </title> <journal> Journal of Systems and Software, </journal> <volume> 12(2) </volume> <pages> 107-123, </pages> <month> May </month> <year> 1990. </year>
Reference: [13] <author> V. H. Haase. </author> <title> Real-time behavior of programs. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 7(5) </volume> <pages> 494-501, </pages> <year> 1981. </year> <journal> 14 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, </journal> <volume> VOL. XX, NO. </volume> <pages> Y, </pages> <month> MONTH </month> <year> 1994 </year>
Reference: [14] <author> N. Halbwachs, P. Caspi, P. Raymond, and D. Pilaud. </author> <title> The synchronous data flow programming language Lustre. </title> <journal> Proc. IEEE, </journal> <volume> 79(9) </volume> <pages> 1305-1320, </pages> <month> Sept. </month> <year> 1991. </year>
Reference: [15] <author> D. Helmbold and D. Luckham. </author> <title> Debugging Ada tasking programs. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 47-57, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: It requires the specification of an objective function, which is set to reflect the duration of events for timing analysis. In [5], the modified tools are used to derive bounds for a version of Helmbold and Luck-ham's gas station problem <ref> [15] </ref>, a mutual exclusion protocol based on coteries [10], and a system modeling resource contention [5]. These relatively small and simple systems comprise between four and eight tasks, some of which had DFAs with up to 80 states and many interconnected cycles.
Reference: [16] <author> F. Jahanian and A. Mok. </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> 12(5) </volume> <pages> 890-904, </pages> <year> 1986. </year>
Reference: [17] <author> F. Jahanian and D. Stuart. </author> <title> A method for verifying properties of modechart specifications. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 12-21, </pages> <year> 1988. </year>
Reference: [18] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> J. ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference: [19] <author> A. J. Mok. </author> <title> Fundamental Design Problems of Distributed Systems for the Hard Real Time Environment. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1983. </year>
Reference: [20] <author> J. S. Ostroff. </author> <title> Deciding properties of timed transition models. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 170-183, </pages> <year> 1990. </year>
Reference: [21] <author> J. Reif and S. Smolka. </author> <title> The complexity of reachability in distributed communicating processes. </title> <journal> Acta Informatica, </journal> <volume> 25(3) </volume> <pages> 333-354, </pages> <year> 1988. </year>
Reference: [22] <author> L. Sha and J. B. Goodenough. </author> <title> Real-time scheduling theory and Ada. </title> <journal> IEEE Computer, </journal> <volume> 23 </volume> <pages> 53-62, </pages> <month> April </month> <year> 1990. </year>
Reference: [23] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> Sept. </month> <year> 1990. </year>
Reference: [24] <author> A. C. Shaw. </author> <title> Towards a timing semantics for programming languages. </title> <editor> In A. M. van Tilborg and G. M. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing: Formal Specifications and Methods, chapter 9, </booktitle> <pages> pages 217-249. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Clearly our model cannot represent all real-time systems. The most important restrictions are: Requires bounds on execution time of sequential code. We assume that a technique like that of Shaw <ref> [24] </ref> can be used to derive upper and lower bounds on the execution time of sequential code regions between communications. This is already a difficult problem for sequential programs since obtaining good bounds may require knowledge of the program's input as well as its structure. <p> For certain classes of relatively low-level events, of course, some of this information is available from component specifications, but obtaining such maxima and minima for higher-level events in the face of sophisticated compilers and complex hardware architectures is extremely challenging. Work like that of Shaw <ref> [24] </ref>, who has developed an automated proof rule-based technique for deriving timing properties from programs in high-level languages and has measured the accuracy of the derived times against actual run times, is necessary to provide guidance on the assignment of the durations used in our method.
Reference: [25] <author> J. A. Stankovic and K. Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> Computer Society Press, </publisher> <address> Washington, DC, </address> <year> 1988. </year>

References-found: 25

