URL: http://www.cs.colostate.edu/~ftppub/TechReports/1996/tr96-115.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Self-Stabilizing Leader Election Algorithm for Tree Graphs  
Author: Gheorghe Antonoiu and Pradip K Srimani 
Web: WWW: http://www.cs.colostate.edu  
Address: Ft. Collins, CO 80523  Fort Collins, CO 80523-1873  
Affiliation: Department of Computer Science Colorado State University  Computer Science Department Colorado State University  
Note: A  To appear in Journal of Parallel and Distributed Computing  
Pubnum: Technical Report CS-96-115  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [ADG92] <author> A. Arora, S. Dolev, and M. Gouda. </author> <title> Maintaining digital clocks in step. </title> <journal> Parallel Processing Letters, </journal> <volume> 1(1) </volume> <pages> 11-18, </pages> <year> 1992. </year>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [BGW89] <author> G. M. Brown, M. G. Gouda, and C. L. Wu. </author> <title> Token systems that self-stabilize. </title> <journal> IEEE Trans. Comput., </journal> <volume> 38(6) </volume> <pages> 845-852, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [BP89] <author> J. Burns and J. Pachl. </author> <title> Uniform stabilizing rings. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(2) </volume> <pages> 330-344, </pages> <year> 1989. </year> <month> 13 </month>
Reference-contexts: Thus, a global state, where an arbitrary node can be unambiguously elected leader as identified by some characteristics (unique from all other nodes), is a legitimate state. Self stabilizing leader election protocols for uniform rings of primal size has been proposed in [Hua93], while it has been shown in <ref> [BP89] </ref> that self stabilizing protocol for leader election cannot exist for a ring of composite size.
Reference: [CD94] <author> Z. Collin and S. Dolev. </author> <title> Self-stabilizing depth-first search. </title> <journal> Information Processing Letters, </journal> <volume> 49 </volume> <pages> 297-301, </pages> <year> 1994. </year>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [CS94] <author> S. Chandrasekar and P. K. Srimani. </author> <title> A self-stabilizing distributed algorithm for all-pairs shortest path problem. </title> <booktitle> Parallel Algorithms and Applications, </booktitle> 4(1&2):125-137, 1994. 
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [Dij74] <author> E. W. Dijkstra. </author> <title> Self-stabilizing systems in spite of distributed control. </title> <journal> Communications of the ACM, </journal> <volume> 17(11) </volume> <pages> 643-644, </pages> <month> November </month> <year> 1974. </year>
Reference-contexts: Systems that reach the legitimate state starting from any arbitrary (possibly illegitimate) state in a finite number of steps are called self-stabilizing systems <ref> [Dij74, Dij86] </ref>. This kind of property is highly desirable for fault tolerance [Lam84] in distributed systems, since without having a global memory, global synchronization is achieved in finite time without any intervention by any external agency and thus the system can correct itself automatically from spurious perturbations or failures. <p> We do not use this technique; instead we develop a new proof technique using induction on the number of nodes in the tree; this may prove useful in proving the correctness of other self 2 stabilizing protocols. Most self-stabilizing algorithms assume that there is a central daemon <ref> [Dij74] </ref> that decides which of the privileged nodes makes a move. In other words, the central daemon serializes the moves made by the privileged nodes, but the order in which the privileged nodes are chosen to make their moves is not known a priori.
Reference: [Dij86] <author> E. W. Dijkstra. </author> <title> A belated proof of self-stabilization. </title> <journal> J. of Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 5-6, </pages> <year> 1986. </year>
Reference-contexts: Systems that reach the legitimate state starting from any arbitrary (possibly illegitimate) state in a finite number of steps are called self-stabilizing systems <ref> [Dij74, Dij86] </ref>. This kind of property is highly desirable for fault tolerance [Lam84] in distributed systems, since without having a global memory, global synchronization is achieved in finite time without any intervention by any external agency and thus the system can correct itself automatically from spurious perturbations or failures.
Reference: [FD94] <author> M. Flatebo and A. K. Datta. </author> <title> Two state self stabilizing algorithms for token rings. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(6) </volume> <pages> 500-504, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [GH90] <author> M. Gouda and T. Herman. </author> <title> Stabilizing unison. </title> <journal> Inf. Processing Letters, </journal> <volume> 35(4) </volume> <pages> 171-175, </pages> <year> 1990. </year>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature <ref> [GH90, BGW89, ADG92, CD94, FD94, CS94] </ref>; a good survey of self--stabilizing algorithms can be found in [Sch93]. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs.
Reference: [Hua93] <author> S. T. Huang. </author> <title> Leader election in uniform rings. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(3) </volume> <pages> 563-573, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Thus, a global state, where an arbitrary node can be unambiguously elected leader as identified by some characteristics (unique from all other nodes), is a legitimate state. Self stabilizing leader election protocols for uniform rings of primal size has been proposed in <ref> [Hua93] </ref>, while it has been shown in [BP89] that self stabilizing protocol for leader election cannot exist for a ring of composite size. <p> One useful startegy to prove the correctness of self stabilizing algorithms is to use bounded monotonically decreasing functions defined on global system states [Kes88]; most existing self-stabilizing algorithms are proved to be correct by defining a bounded function that is shown to decrease monotonically at every step <ref> [Hua93] </ref>. We do not use this technique; instead we develop a new proof technique using induction on the number of nodes in the tree; this may prove useful in proving the correctness of other self 2 stabilizing protocols.
Reference: [Kes88] <author> J. L. W. Kessels. </author> <title> An exercise in proving self-stabilization with a variant function. </title> <journal> Inf. Processing Letters, </journal> <volume> 29(2) </volume> <pages> 39-42, </pages> <year> 1988. </year>
Reference-contexts: One useful startegy to prove the correctness of self stabilizing algorithms is to use bounded monotonically decreasing functions defined on global system states <ref> [Kes88] </ref>; most existing self-stabilizing algorithms are proved to be correct by defining a bounded function that is shown to decrease monotonically at every step [Hua93].
Reference: [Lam84] <author> L. Lamport. </author> <title> Solved problems, unsolved problems, </title> <booktitle> and non-problems in concurrency. In Proceedings of the 3rd Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-11, </pages> <year> 1984. </year>
Reference-contexts: Systems that reach the legitimate state starting from any arbitrary (possibly illegitimate) state in a finite number of steps are called self-stabilizing systems [Dij74, Dij86]. This kind of property is highly desirable for fault tolerance <ref> [Lam84] </ref> in distributed systems, since without having a global memory, global synchronization is achieved in finite time without any intervention by any external agency and thus the system can correct itself automatically from spurious perturbations or failures.
Reference: [Sch93] <author> M. Schneider. </author> <title> Self-stabilization. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(1) </volume> <pages> 45-67, </pages> <month> March </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Few such algorithms have fl To appear in Journal of Parallel and Distributed Computing 1 recently appeared in the literature [GH90, BGW89, ADG92, CD94, FD94, CS94]; a good survey of self--stabilizing algorithms can be found in <ref> [Sch93] </ref>. Our purpose in the present paper is to propose a self-stabilizing leader election protocol for tree graphs. Thus, a global state, where an arbitrary node can be unambiguously elected leader as identified by some characteristics (unique from all other nodes), is a legitimate state.
References-found: 13

