URL: http://pertsserver.cs.uiuc.edu/papers/StLi93.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Email: -storch, janeliu-@cs.uiuc.edu  
Title: Heuristic Algorithms for Periodic Job Assignment  
Author: M. F. Storch, J. W. S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science, University of Illinois,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. A. Bannister and K. S. Trivedi, </author> <title> "Task Allocation in Fault-Tolerant Distributed Systems", </title> <journal> Acta Informatica, </journal> <volume> 20, </volume> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Lo developed heuristics for the general case of n processors [4]. Using a model similar to ours, Bannister and Trivedi analyzed the load-balancing performance of a simple assignment heuristic <ref> [1] </ref>. Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints [8]. Peng and Shin propose an optimal branch-and-bound algorithm for a version of the periodic job assignment problem [7]. In a recent work [9], Shatz and Goto focus on achieving fault tolerance through task allocation.
Reference: [2] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: We call the problem of finding such an assignment the periodic job assignment problem. Most formulations of the job assignment problem, including the periodic job assignment problem, are known to be NP-hard <ref> [2] </ref>. In this paper we present five heuristic algorithms that provide approximate solutions to the periodic job assignment problem. Because it is difficult to analytically derive bounds on their performance, we use experimentation to determine the relative merits of these heuristics. <p> Since the processors are identical, any job may be assigned to any processor. We note that the periodic job assignment problem can be shown to be equivalent to the 0-1 integer programming problem. Since the latter is known to be NP-hard <ref> [2] </ref>, it follows immediately that the periodic job assignment problem is also NP-hard. 3. Heuristic Algorithms We now describe our five heuristic algorithms and the exhaustive exponential-time optimal algorithm. Detailed descriptions of the algorithms can be found in [11]. The following definitions are common to all six algorithms.
Reference: [3] <author> C. H. Lee, D. Lee, and M. Kim, </author> <title> "Optimal Task Assignment in Linear Array Networks", </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 44, No. 7, </volume> <month> July </month> <year> 1992, </year> <pages> pp. 877-880. </pages>
Reference-contexts: For the special case of two processors, Stone used a network flow algorithm to find the optimal solution [10]. This result has been recently extended by Lee, Kim, and Lee for a system with a linear chain of processors <ref> [3] </ref>. Lo developed heuristics for the general case of n processors [4]. Using a model similar to ours, Bannister and Trivedi analyzed the load-balancing performance of a simple assignment heuristic [1]. Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints [8].
Reference: [4] <author> V. M. Lo, </author> <title> "Heuristic Algorithms for Task Assignment in Distributed Systems", </title> <booktitle> Proc. of the IEEE 4th International Conference on Distributed Computer Systems, </booktitle> <month> May </month> <year> 1984, </year> <pages> pp. 30-39. </pages>
Reference-contexts: This result has been recently extended by Lee, Kim, and Lee for a system with a linear chain of processors [3]. Lo developed heuristics for the general case of n processors <ref> [4] </ref>. Using a model similar to ours, Bannister and Trivedi analyzed the load-balancing performance of a simple assignment heuristic [1]. Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints [8].
Reference: [5] <author> C. D. Locke, </author> <title> "General Avionic Software Specifications Draft", </title> <type> unpublished, </type> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: Data Sets We used two families of data sets to evaluate the heuristics. The first family of data is based on an early (unpublished) draft of the General Avionic Software Specification, which describes a class of avionics systems of several U.S. Navy aircraft <ref> [5] </ref>. (An updated version of this specification was later published as [6].) Such a system consists of a set of communicating periodic jobs. The second family of data sets was created synthetically. 4.1. Avionics Data Set The base version of this data set was derived from jobs listed in [5], which <p> aircraft <ref> [5] </ref>. (An updated version of this specification was later published as [6].) Such a system consists of a set of communicating periodic jobs. The second family of data sets was created synthetically. 4.1. Avionics Data Set The base version of this data set was derived from jobs listed in [5], which characterizes the jobs by period alone, so some assumptions regarding the running time of the jobs are necessary 3 . Given the period and running time, the utilization of each job is equal to its running time divided by its period.
Reference: [6] <author> C. D. Locke, </author> <title> "Building a Predictable Avionics Platform in Ada: A Case Study", </title> <booktitle> Proc. of the 12th Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1991, </year> <pages> pp. 181-189. </pages>
Reference-contexts: The first family of data is based on an early (unpublished) draft of the General Avionic Software Specification, which describes a class of avionics systems of several U.S. Navy aircraft [5]. (An updated version of this specification was later published as <ref> [6] </ref>.) Such a system consists of a set of communicating periodic jobs. The second family of data sets was created synthetically. 4.1.
Reference: [7] <author> D. T. Peng and K. G. Shin, </author> <title> "Static Allocation of Periodic Tasks with Precedence constraints in Distributed Real-time Systems", </title> <booktitle> Proc. of the IEEE 9th International Conference on Distributed Computer Systems, </booktitle> <month> June </month> <year> 1989, </year> <pages> pp. 190-198. </pages>
Reference-contexts: Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints [8]. Peng and Shin propose an optimal branch-and-bound algorithm for a version of the periodic job assignment problem <ref> [7] </ref>. In a recent work [9], Shatz and Goto focus on achieving fault tolerance through task allocation. The remainder of this paper is organized as follows. Section 2 formally defines the periodic job assignment problem. Section 3 describes the five heuristic algorithms and gives the rationale behind their design.
Reference: [8] <author> K. Ramamritham, </author> <title> "Allocation and Scheduling of Complex Period Tasks", </title> <booktitle> Proc. of the IEEE 10th International Conference on Distributed Computer Systems, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 108-115. </pages>
Reference-contexts: Lo developed heuristics for the general case of n processors [4]. Using a model similar to ours, Bannister and Trivedi analyzed the load-balancing performance of a simple assignment heuristic [1]. Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints <ref> [8] </ref>. Peng and Shin propose an optimal branch-and-bound algorithm for a version of the periodic job assignment problem [7]. In a recent work [9], Shatz and Goto focus on achieving fault tolerance through task allocation. The remainder of this paper is organized as follows.
Reference: [9] <author> S. M. Shatz and M. Goto, </author> <title> "Task Allocation for Maximizing Reliability of Distributed Computer Systems", </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 41, No. 9, </volume> <month> Sept. </month> <year> 1992, </year> <pages> pp. 1156-1168. </pages>
Reference-contexts: Ramamritham studied heuristics for a more complex model including precedence and fault tolerance constraints [8]. Peng and Shin propose an optimal branch-and-bound algorithm for a version of the periodic job assignment problem [7]. In a recent work <ref> [9] </ref>, Shatz and Goto focus on achieving fault tolerance through task allocation. The remainder of this paper is organized as follows. Section 2 formally defines the periodic job assignment problem. Section 3 describes the five heuristic algorithms and gives the rationale behind their design.
Reference: [10] <author> H. S. Stone, </author> <title> "Multiprocessor Scheduling with the Aid of Network Flow Algorithms", </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> Vol. SE-3, </volume> <month> Jan. </month> <year> 1977, </year> <pages> pp. 85-93. </pages>
Reference-contexts: Many researchers have studied variations of the job assignment problem. One common variation is to try to minimize the sum of communication and processing costs in systems with nonidentical processors. For the special case of two processors, Stone used a network flow algorithm to find the optimal solution <ref> [10] </ref>. This result has been recently extended by Lee, Kim, and Lee for a system with a linear chain of processors [3]. Lo developed heuristics for the general case of n processors [4].
Reference: [11] <author> M. F. Storch, J. W. S. Liu, </author> <title> "Periodic Job Assignment Heuristics", University of Illinois at Urbana-Champaign Internal Report. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 4 These plots were made with job utilization filter (or synthetic job type) and communication cost matrix filter (or synthetic communication cost matrix type) as the independent variables. </title>
Reference-contexts: Since the latter is known to be NP-hard [2], it follows immediately that the periodic job assignment problem is also NP-hard. 3. Heuristic Algorithms We now describe our five heuristic algorithms and the exhaustive exponential-time optimal algorithm. Detailed descriptions of the algorithms can be found in <ref> [11] </ref>. The following definitions are common to all six algorithms. A cluster is a group of one or more jobs that are to be placed on a single processor. We call the combination of two clusters into a single cluster the join operation. <p> Finally, the communication cost between the two jobs is the message frequency times the message length. The complete base avionics data set is given in <ref> [11] </ref>. The base avionics data set gives us only one data point for evaluating the heuristics. Because the base set alone is not sufficient, a number of mathematical filter functions were devised to systematically alter the avionics data.
References-found: 11

