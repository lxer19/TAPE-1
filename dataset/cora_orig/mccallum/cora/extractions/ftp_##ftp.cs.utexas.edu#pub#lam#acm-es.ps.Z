URL: ftp://ftp.cs.utexas.edu/pub/lam/acm-es.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/lam/NRL/network_security.html
Root-URL: 
Title: A Framework for Distributed Authorization (Extended Abstract)  
Author: Thomas Y.C. Woo Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Gasser, A. Goldstein, C. Kaufman, and B.W. Lampson. </author> <title> The Digital distributed system security architecture. </title> <booktitle> In Proceedings of the 12th National Computer Security Conference, </booktitle> <pages> pages 305-319, </pages> <month> Oc-tober </month> <year> 1989. </year>
Reference-contexts: These considerations give rise to the following problems: authentication, authorization, accounting and auditing. Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication <ref> [1, 3, 4, 10] </ref>. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM.
Reference: [2] <author> J.T. Kohl and B.C. Neuman. </author> <title> The Kerberos network authentication service: </title> <type> Version 5 draft protocol specification. </type> <month> April </month> <year> 1993. </year>
Reference-contexts: Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication [1, 3, 4, 10]. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT <ref> [2, 8] </ref> (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM. On the other hand, issues of authorization, accounting and auditing have remained relatively unexplored. In this paper, we focus on distributed authorization. <p> For example, a group server is trusted to maintain and hand out correct membership information. A standard technique to ensure such trustworthiness is to implement these servers on dedicated machines that are physically secure (cf. Kerberos <ref> [2, 8] </ref>). 4.2 Operation and Protocols In this section, we describe operational aspects of our framework, as well as the protocols needed in the framework. Due to length limitation, we will discuss just the the key ideas and omit details such as message format, file format and encryption/decryption issues.
Reference: [3] <author> B. Lampson, M. Abadi, M. Burrows, and T. Wobber. </author> <title> Authentication in distributed systems: Theory and practice. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 165-182, </pages> <month> Oc-tober 13-16 </month> <year> 1991. </year>
Reference-contexts: These considerations give rise to the following problems: authentication, authorization, accounting and auditing. Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication <ref> [1, 3, 4, 10] </ref>. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM. <p> Postscript files of this and other papers of the Networking Research Laboratory are available from http://www.cs.utexas.edu/~lam/NRL. ACL. In particular, it provides constructs for explicitly stating inheritance and defaults. Authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [3, 4, 6] </ref>. Most of these works, with the exception of [6], are focused on the authentication aspect. Our study of authenticated delegation is for authorization. Our idea is similar to the notion of proxy in [6].
Reference: [4] <author> J. Linn. </author> <title> Practical authentication for distributed com puting. </title> <booktitle> In Proceedings of the 11th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 31-40, </pages> <month> May 7-9 </month> <year> 1990. </year>
Reference-contexts: These considerations give rise to the following problems: authentication, authorization, accounting and auditing. Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication <ref> [1, 3, 4, 10] </ref>. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM. <p> Postscript files of this and other papers of the Networking Research Laboratory are available from http://www.cs.utexas.edu/~lam/NRL. ACL. In particular, it provides constructs for explicitly stating inheritance and defaults. Authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [3, 4, 6] </ref>. Most of these works, with the exception of [6], are focused on the authentication aspect. Our study of authenticated delegation is for authorization. Our idea is similar to the notion of proxy in [6].
Reference: [5] <author> R. Molva, G. Tsudik, E. Van Herreweghen, and S. Zatti. </author> <title> KryptoKnight authentication and key distribution system. </title> <booktitle> In Proceedings of the European Symposium on Research in Computer Security, </booktitle> <month> Novem-ber 23-25 </month> <year> 1993. </year>
Reference-contexts: Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight <ref> [5] </ref> from IBM. On the other hand, issues of authorization, accounting and auditing have remained relatively unexplored. In this paper, we focus on distributed authorization. We examine the major issues involved and propose a framework for constructing a distributed authorization service.
Reference: [6] <author> B.C. Neuman. </author> <title> Proxy-based authorization and ac counting for distributed systems. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Postscript files of this and other papers of the Networking Research Laboratory are available from http://www.cs.utexas.edu/~lam/NRL. ACL. In particular, it provides constructs for explicitly stating inheritance and defaults. Authenticated delegation is not new. For example, it has been discussed in one form or another in <ref> [3, 4, 6] </ref>. Most of these works, with the exception of [6], are focused on the authentication aspect. Our study of authenticated delegation is for authorization. Our idea is similar to the notion of proxy in [6]. <p> ACL. In particular, it provides constructs for explicitly stating inheritance and defaults. Authenticated delegation is not new. For example, it has been discussed in one form or another in [3, 4, 6]. Most of these works, with the exception of <ref> [6] </ref>, are focused on the authentication aspect. Our study of authenticated delegation is for authorization. Our idea is similar to the notion of proxy in [6]. <p> For example, it has been discussed in one form or another in [3, 4, 6]. Most of these works, with the exception of <ref> [6] </ref>, are focused on the authentication aspect. Our study of authenticated delegation is for authorization. Our idea is similar to the notion of proxy in [6]. The framework is the result of our attempt in exploring the theory and practice of constructing a distributed authorization service which parallels existing distributed authentication services. Since our focus is on authorization, we will discuss accounting and auditing issues only to the extent that they are relevant to authorization. <p> A client desiring service from an end server 1 This terminology is adapted from <ref> [6] </ref>, where the notion of an end server is defined in the context of a proxy, and is much more specific. <p> This provides the client with the authority to present its request to the desired end server. We explain both uses in greater details in Subsection 4.2. A similar scheme but with the name proxy is used in <ref> [6] </ref>. 4 Overview of Our Framework 4.1 Architecture servers in the figure. An operational description of these servers is provided in Subsection 4.2. * Service Locator | A service locator assists clients in locating servers implementing a particular service.
Reference: [7] <author> W. Rosenberry, D. Kenny, and G. Fisher. </author> <title> Under standing DCE. </title> <publisher> O'Reilley & Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Much work has recently been done on authentication [1, 3, 4, 10]. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service <ref> [7] </ref>), SPX [9] from DEC, and KryptoKnight [5] from IBM. On the other hand, issues of authorization, accounting and auditing have remained relatively unexplored. In this paper, we focus on distributed authorization. We examine the major issues involved and propose a framework for constructing a distributed authorization service.
Reference: [8] <author> J.G. Steiner, C. Neuman, and J.I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 191-202, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication [1, 3, 4, 10]. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT <ref> [2, 8] </ref> (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM. On the other hand, issues of authorization, accounting and auditing have remained relatively unexplored. In this paper, we focus on distributed authorization. <p> For example, a group server is trusted to maintain and hand out correct membership information. A standard technique to ensure such trustworthiness is to implement these servers on dedicated machines that are physically secure (cf. Kerberos <ref> [2, 8] </ref>). 4.2 Operation and Protocols In this section, we describe operational aspects of our framework, as well as the protocols needed in the framework. Due to length limitation, we will discuss just the the key ideas and omit details such as message format, file format and encryption/decryption issues.
Reference: [9] <author> J.J. Tardo and K. Alagappan. SPX: </author> <title> Global authen tication using public key certificates. </title> <booktitle> In Proceedings of the 12th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 232-244, </pages> <month> May 20-22 </month> <year> 1991. </year>
Reference-contexts: Much work has recently been done on authentication [1, 3, 4, 10]. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX <ref> [9] </ref> from DEC, and KryptoKnight [5] from IBM. On the other hand, issues of authorization, accounting and auditing have remained relatively unexplored. In this paper, we focus on distributed authorization. We examine the major issues involved and propose a framework for constructing a distributed authorization service.
Reference: [10] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authentication for dis tributed systems. </title> <journal> Computer, </journal> <volume> 25(1) </volume> <pages> 39-52, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: These considerations give rise to the following problems: authentication, authorization, accounting and auditing. Authentication is the most basic, as well as the most studied among the four problems. Much work has recently been done on authentication <ref> [1, 3, 4, 10] </ref>. Its main issues are fairly well-understood. In fact, several implementations of distributed authentication are available, e.g., Kerberos from MIT [2, 8] (which has also been integrated as part of the OSF DCE Security Service [7]), SPX [9] from DEC, and KryptoKnight [5] from IBM.
Reference: [11] <author> T.Y.C. Woo and S.S. Lam. </author> <title> Authorization in dis tributed systems: A formal approach. </title> <booktitle> In Proceedings of the 13th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 33-50, </pages> <month> May 4-6 </month> <year> 1992. </year> <month> 7 </month>
Reference-contexts: GACL is much more expressive than ordinary ACL. The main features of GACL include the following: * It provides constructs that can express in a straightforward way most commonly encountered authorization requirements. For example, the structural properties, closure, inheritance and defaults, identified in <ref> [11] </ref>, can be directly expressed in GACL. * It allows incomplete authorizations. That is, it is possible that for some request, neither grant nor denial can be determined. A failure is returned in this case. <p> GACL can be viewed as a practical "approxima-tion" of the logical language of policy base introduced in <ref> [11] </ref>. In what follows, we give an informal introduction to GACL by examples. This hopefully would provide sufficient background for discussions on the architectural and protocol aspects of our framework in Section 4. An example is specified using GACL in Figure 1.
References-found: 11

