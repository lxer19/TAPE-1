URL: ftp://ftp.cs.huji.ac.il/users/transis/thesis/david-msc.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/thesis.html
Root-URL: http://www.cs.huji.ac.il
Title: Group Communication as an Infrastructure for Distributed System and Network Management  
Author: Breitgand David Supervised by Prof. Danny Dolev 
Degree: A thesis submitted in fulfillment of the requirements for the degree of Master of Science by  
Address: Jerusalem Jerusalem, Israel.  
Affiliation: Institute of Computer Science The Hebrew University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> ISO 7498-4: </author> <title> Information Processing Systems Open Systems Interconnection Basic Reference Model Part 4: Management Framework. </title> <address> Geneva, </address> <year> 1989. </year>
Reference-contexts: We will show how advanced group communication and replication techniques can render the table management services efficient, symmetric, consistent and highly available, while preserving the existing interface to these services. The configuration management service is part of the management standard defined by OSI Management Framework <ref> [1] </ref> and OSF Distributed Management Environment (OSF DME) [33]. * Software Distribution and Upgrade: Presently, software distribution and upgrade are mostly performed manually by a system manager on a per-machine basis. <p> Suppose further, that hosts A, B need files f 1 f 3 to complete the packet, and the hosts C, D need files f 3 to complete the packet. Then two installation subgroups will be formed: Gr <ref> [1] </ref> = f (A, B); (f 1 , f 2 )g and Gr [2] = f (A,B,C,D); (f 3 )g. The inconsistencies among the hosts may be a result of the previously failed installation procedure.
Reference: [2] <editor> ACM. </editor> <booktitle> Communications of the ACM 39(4), special issue on Group Communications Systems, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Although we focus on the Unix environment, a de-facto standard for distributed environments, the same mechanisms are applicable to other settings as well. We see the proposed integration of a group communication paradigm <ref> [50, 9, 23, 12, 2] </ref> into distributed management as one of the main contributions of this thesis. <p> Then two installation subgroups will be formed: Gr [1] = f (A, B); (f 1 , f 2 )g and Gr <ref> [2] </ref> = f (A,B,C,D); (f 3 )g. The inconsistencies among the hosts may be a result of the previously failed installation procedure. As soon as the installation subgroups are defined, the monitor creates a slave process for each subgroup (the slave's algorithm is shown in Figure 5.6).
Reference: [3] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A highly available application in the Transis environment. </title> <booktitle> In Proceedings of the Workshop on Hardware and Software Architectures for Fault Tolerance, Lecture Notes in Computer Science 774, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: This limits the availability of the services and can become a bottleneck when the system expands. This chapter shows how group communication paradigm can be utilized for building efficient, reliable and scalable solutions for consistent distributed table management. Our solution adapts the novel techniques for object replication presented in <ref> [3, 4, 32] </ref>, but the 34 CHAPTER 6. LONG TERM CONSISTENCY SERVICES algorithms are modified and tailored to the specific demands of the system management. Such, our solution is not symmetric. A system manager's host presence in a network component helps to define this component as a primary one uniquely. <p> This also provides for easier employment of more replicas; * In our solution the updates can reach from one replication server to another even if these servers have never been directly connected. This is called an eventual path property <ref> [3] </ref>. This property remedies the drawback of NIS that secondary servers can not reach a consistent state in the absence of the primary server. <p> LONG TERM CONSISTENCY SERVICES * MQ is the queue of received updates. This queue is kept ordered according to the logical time-stamps of the update messages. MQ is partitioned into two zones: white and green according to the colors model defined in <ref> [3] </ref>, as described bellow: white zone: Each update in this zone is locally stable (i.e., this server knows that all the servers that belong to the same SG already have this update on disk). <p> Replication paradigms provided in <ref> [3, 4, 32, 6] </ref> and Chapter 6 assume that the set of the servers participating in the replication algorithm is fixed and known in advance. This may turn out to be too restricting for the real needs of a system administrator. An administrator may want, for 59 CHAPTER 7.
Reference: [4] <author> Y. Amir. </author> <title> Replication Using Group Communication Over a Dynamic Network. </title> <type> PhD thesis, </type> <institution> Institute of Computer Science, The Hebrew Universrity of Jerusalem, Israel, </institution> <year> 1995. </year>
Reference-contexts: This limits the availability of the services and can become a bottleneck when the system expands. This chapter shows how group communication paradigm can be utilized for building efficient, reliable and scalable solutions for consistent distributed table management. Our solution adapts the novel techniques for object replication presented in <ref> [3, 4, 32] </ref>, but the 34 CHAPTER 6. LONG TERM CONSISTENCY SERVICES algorithms are modified and tailored to the specific demands of the system management. Such, our solution is not symmetric. A system manager's host presence in a network component helps to define this component as a primary one uniquely. <p> Replication paradigms provided in <ref> [3, 4, 32, 6] </ref> and Chapter 6 assume that the set of the servers participating in the replication algorithm is fixed and known in advance. This may turn out to be too restricting for the real needs of a system administrator. An administrator may want, for 59 CHAPTER 7.
Reference: [5] <author> Y. Amir. </author> <title> Spread: Group communication toolkit for wan. </title> <type> Private communication, </type> <year> 1995. </year>
Reference-contexts: RELATED WORK The primary reason for DSMIT not to use group communication toolkits (such as Tran-sis) was that efficient group communication solutions were restricted to LANs at the time of DSMIT's development. Recent work ( <ref> [5, 27] </ref>) demonstrates that the group communication paradigm can be effectively extended to WAN environment. As the group communication technology over WAN matures, the reliability layer implemented in DSMIT becomes less efficient.
Reference: [6] <author> Y. Amir, D. B. G. V. Chockler, and D. Dolev. </author> <title> Group communication as an infrastructure for distributed system management. </title> <booktitle> In Proceedings of the Third International Workshop on Services in Distributed and Networked Environments (SDNE'96), </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Replication paradigms provided in <ref> [3, 4, 32, 6] </ref> and Chapter 6 assume that the set of the servers participating in the replication algorithm is fixed and known in advance. This may turn out to be too restricting for the real needs of a system administrator. An administrator may want, for 59 CHAPTER 7.
Reference: [7] <author> Y. Amir, G. Chockler, D. Dolev, and R. Vitenberg. </author> <title> Efficient State Transfer in Parti-tionable Environments. </title> <booktitle> In 2nd European Research Seminar on Advances in Distributed Systems , March 1997. to appear. </booktitle>
Reference-contexts: Otherwise, one of the most updated secondary servers is deterministically chosen (e.g., the server with the lowest identifier in the lexicographic order). Current implementation of the recovery procedure requires each NTMS server to send its state message. As was shown in <ref> [7] </ref> this is not always necessary. The number of state messages may be minimized requiring only some servers to send their state messages. As was explained in the previous section, the update messages are not removed from disk until it is known that nobody will ever need them.
Reference: [8] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms for multicast communication groups. </title> <booktitle> In Proceedings of the 6th International Workshop on Distributed Algorithms, Lecture Notes in Computer Science 647, </booktitle> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: This will cause the membership service to change a view of the currently connected processes constantly, without making progress. The membership service of Transis uses the above approach <ref> [8] </ref>. In practice, we can claim that the membership service can be fine-tuned using round-trip time measurements in such a way that false detections will be rare. Termination of the algorithms presented later in this work directly depends on the 12 CHAPTER 3. ENVIRONMENT MODEL termination of the membership service.
Reference: [9] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Although we focus on the Unix environment, a de-facto standard for distributed environments, the same mechanisms are applicable to other settings as well. We see the proposed integration of a group communication paradigm <ref> [50, 9, 23, 12, 2] </ref> into distributed management as one of the main contributions of this thesis. <p> Messages transmitted over the communication links may be lost, duplicated or reordered in an arbitrary way. We do not assume that messages may be corrupted by the communication links. 3.2 The Transis System Transis <ref> [9] </ref> is a group communication sub-system developed at the Hebrew University of Jerusalem. Transis supports the process group paradigm. Using Transis, messages can be addressed to the entire process group by specifying the group name (a character string selected by the user).
Reference: [10] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agrawal, and P. Ciarfella. </author> <title> The totem single-ring ordering and membership protocol. </title> <journal> Transactions on Computing Systems, </journal> <volume> 13(4), </volume> <month> November </month> <year> 1995. </year> <note> 67 BIBLIOGRAPHY </note>
Reference-contexts: The monitor is an externally developed management application that uses the management servers' API and exploits Transis in order to communicate with the management servers and to monitor their activity. Although we use Transis as our group communication layer, other existing toolkits such as Totem <ref> [10] </ref>, Horus [50] or Newtop [23] could have been used. 1 We use these terms interchangeably 14 CHAPTER 4. ARCHITECTURE With respect to consistency and reliability demands, the management server provides two classes of services: the long-term services and the short-term ones.
Reference: [11] <author> N. Amit, D. Ginat, S. Kipnis, and J. Mihaeli. </author> <title> Distributed SMIT: System management tool for large Unix environments. </title> <type> Research report, </type> <institution> IBM Israel Science and Technology, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: When problems occur, the versions of the ASCII files corresponding to the tables are examined and inconsistencies are resolved manually. In Chapter 6 we show how NIS implementation can be substantially improved while preserving all of its appealing features. 2.3 Distributed SMIT Distributed SMIT (DSMIT) <ref> [11] </ref> presents an integrated tool for heterogeneous system management. DSMIT consists of clients that emit management commands to servers in a unified platform-independent syntactic form. The servers translate the commands into a platform-specific form and perform them in parallel.
Reference: [12] <author> O. Babaouglu, R. Davoli, L. Giachini, and M. Baker. Relacs: </author> <title> A communication infrastructure for constructing reliable applications in large-scale distributed systems. </title> <type> Technical Report TR UBLCS94-15, </type> <institution> University of Bologna, Laboratory of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Although we focus on the Unix environment, a de-facto standard for distributed environments, the same mechanisms are applicable to other settings as well. We see the proposed integration of a group communication paradigm <ref> [50, 9, 23, 12, 2] </ref> into distributed management as one of the main contributions of this thesis.
Reference: [13] <author> R. Ben-Natan. </author> <title> CORBA: a guide to common object request broker architecture. </title> <publisher> McGraw-Hill, </publisher> <year> 1995. </year> <note> ISBN 0-07-005427-4. </note>
Reference-contexts: The DME is a set of distributed management APIs, The Systems Management Reference Model defined by X/Open Systems Management Work Group is shown in Figure 2.1. This reference model is build around the Common Object Request Broker Architecture (CORBA) <ref> [13] </ref> interface specification. The CORBA specification introduces the Interface Definition Language (IDL) and the concepts of an Object Request Broker (ORB) and Basic Object Adaptor (BOA) that provide a mechanism for methods invocation and return of results. <p> As shown in Figure reffig-tme, TMP is also composed of two components: Tivoli Management Framework (TMF) and Tivoli Application Services (TAS). The TMF provides an implementation of a CORBA <ref> [13] </ref> Object Request Broker (ORB), Basic Object Adaptor 7 CHAPTER 2. RELATED WORK (BOA), and related object, management and desktop services. TAS is a runtime library that includes convenience functions that do not depend on application.
Reference: [14] <author> K. Birman and R. V. Renesse. </author> <title> Reliable Distributed Computing with the ISIS Toolkit. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: This simplifies the view of the system and allows to keep track of what is happening in the system easier. Unlike other group communication toolkits <ref> [14, 50] </ref>, Transis' membership service is implemented on a processor level rather then on a process level. This makes joining or leaving a process group a local matter that does not affect the other Transis daemons.
Reference: [15] <author> K. P. Birman and T. A. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Proceedings of the 11th Annual ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Wherever it will not cause any ambiguity, we will simply say that m is delivered in V . Transis supports a virtually synchronous communication <ref> [15] </ref>. Stated simply, the virtual synchrony property guarantees that any two processors that proceed together from one view (membership) to another receive the same set of messages. 3.3 Transis Membership Service It is well known that reaching an agreement in an asynchronous environment is impossible [24, 19].
Reference: [16] <author> P. A. Brenstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems, chapter 7. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: MDist operates over WAN and allows flexible scheduling that takes the network load into account. Tivoli/Admin allows replication of certain configuration data in order to increase availability and performance. Consistency among the different copies is maintained using the two phase commit protocol <ref> [16] </ref>. The two phase commit performs an end-to-end acknowledgment between all of the replicas on each update. Therefore, it is resource consuming, and the protocol achieves a limited performance, which deteriorates linearly as the number of replicas increases.
Reference: [17] <author> J. Case, K. McCloghrie, M. Rose, and S. Waldbusser. </author> <title> Manager-to Manager Management Information. </title> <type> RFC 1451, </type> <month> April </month> <year> 1993. </year>
Reference-contexts: Removing of a single point of failure will render the whole management application to be more available and robust. Although the mid-level manager concept and hierarchical management are not new <ref> [43, 31, 18, 17] </ref> concepts, we are not yet aware of any work that suggests a systematic way to deploy such entities reliably.
Reference: [18] <author> J. Case, K. McCloghrie, M. Rose, and S. Waldbusser. </author> <title> Structure of Management Information for version 2 of the Simple Network Management Protocol (SNMPv2). </title> <type> RFC 1442, </type> <month> April </month> <year> 1993. </year>
Reference-contexts: Removing of a single point of failure will render the whole management application to be more available and robust. Although the mid-level manager concept and hierarchical management are not new <ref> [43, 31, 18, 17] </ref> concepts, we are not yet aware of any work that suggests a systematic way to deploy such entities reliably.
Reference: [19] <author> T. D. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost. </author> <title> On the impossibility of group membership. </title> <booktitle> In Proceedings of ACM Symp. on Prin. of Distributed Computing (PODC), </booktitle> <pages> pages 322-330, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Stated simply, the virtual synchrony property guarantees that any two processors that proceed together from one view (membership) to another receive the same set of messages. 3.3 Transis Membership Service It is well known that reaching an agreement in an asynchronous environment is impossible <ref> [24, 19] </ref>. Thus, no practical realization of a membership protocol is capable to represent the network situation precisely. In other words the snapshot of the network presented by the membership service at a specific time may differ from the actual network situation at that moment.
Reference: [20] <author> W. R. Cheswick and S. M. Bellovin. </author> <title> Firewalls and Internet Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: We suppose that only those management servers that are specified by the regular expression of the Join message will try to join the group and no other server will inadvertently or maliciously join G. This is a reasonable approach in many modern configurations, where a firewall <ref> [20] </ref> is used to impose some security policies on users outside of an organization, and users inside the organization are trusted. In [42] an efficient design for secure group communication are presented.
Reference: [21] <author> A. El Abbadi and N. Dani. </author> <title> A dynamic accessibility protocol for replicated databases. </title> <journal> Data and Knowledge Engineering, </journal> (6):319-332, 1991. 
Reference-contexts: Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component.
Reference: [22] <author> A. El Abbadi and S. Toueg. </author> <title> Availability in partitioned replicated databases. </title> <booktitle> In Proceedings of the 5th ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 240-251, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component.
Reference: [23] <author> P. Ezhilchelvan, R. Macedo, and S. Shrivastava. Newtop: </author> <title> A fault-tolerant group communication protocol. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Although we focus on the Unix environment, a de-facto standard for distributed environments, the same mechanisms are applicable to other settings as well. We see the proposed integration of a group communication paradigm <ref> [50, 9, 23, 12, 2] </ref> into distributed management as one of the main contributions of this thesis. <p> Although we use Transis as our group communication layer, other existing toolkits such as Totem [10], Horus [50] or Newtop <ref> [23] </ref> could have been used. 1 We use these terms interchangeably 14 CHAPTER 4. ARCHITECTURE With respect to consistency and reliability demands, the management server provides two classes of services: the long-term services and the short-term ones. Long-term services provide consistent semantics across network partitions and over time.
Reference: [24] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year> <note> 68 BIBLIOGRAPHY </note>
Reference-contexts: Stated simply, the virtual synchrony property guarantees that any two processors that proceed together from one view (membership) to another receive the same set of messages. 3.3 Transis Membership Service It is well known that reaching an agreement in an asynchronous environment is impossible <ref> [24, 19] </ref>. Thus, no practical realization of a membership protocol is capable to represent the network situation precisely. In other words the snapshot of the network presented by the membership service at a specific time may differ from the actual network situation at that moment.
Reference: [25] <author> G. S. Goldszmidt. </author> <title> Distributed Management by Delegation. </title> <type> PhD thesis, </type> <institution> Graduate School of Arts and Sciences, Columbia University, </institution> <year> 1996. </year>
Reference-contexts: Using a mid-level manager it is possible to distribute management algorithms by moving part of them closer to the data they manage. This may be done in form of dispatched scripts [28, 39] or dynamically linked programs <ref> [25] </ref>. Moving management application closer to the data that it manages, will reduce the traffic overhead and improve the response time. Removing of a single point of failure will render the whole management application to be more available and robust.
Reference: [26] <institution> Hewlett-Packard Company. HP OpenView: Technical Evaluation Guide, </institution> <year> 1992. </year>
Reference-contexts: TME is an open system. It allows efficient and elegant integration of the best third party management solutions into original Tivoli platform. Such, Tivoli network management is actually HP-OpenView <ref> [26] </ref>. Tivoli started a next-generation family, TME 10 that integrates the management techniques developed by IBM (NetFinity, NetView DM/6000 etc.) with the Tivoli management environment. Most of the TME 2.0 technical concepts migrated to TME 10.
Reference: [27] <author> N. Huleihel. </author> <title> Efficient ordering of messages in wide area networks. </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Israel, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: RELATED WORK The primary reason for DSMIT not to use group communication toolkits (such as Tran-sis) was that efficient group communication solutions were restricted to LANs at the time of DSMIT's development. Recent work ( <ref> [5, 27] </ref>) demonstrates that the group communication paradigm can be effectively extended to WAN environment. As the group communication technology over WAN matures, the reliability layer implemented in DSMIT becomes less efficient. <p> High performance is achieved by utilizing a non-reliable broadcast or multi-cast wherever possible (e.g., in local area networks). Transis performance can be seen in Transis is not limited to a LAN. Version of Transis that operates in a WAN environment is also available <ref> [27] </ref>. Transis is implemented as a daemon process. The Transis daemon handles the physical multicast communication. It keeps track of the processes that participate in group communication and run on its host, and it also keeps track of the hosts' membership (i.e. connectivity w.r.t. other hosts running the Transis daemons).
Reference: [28] <author> G. M. Inc. </author> <note> Telescript: White paper. Available from www.genmagic.com/Telescript/Whitepapers/, 1996. </note>
Reference-contexts: Using a mid-level manager it is possible to distribute management algorithms by moving part of them closer to the data they manage. This may be done in form of dispatched scripts <ref> [28, 39] </ref> or dynamically linked programs [25]. Moving management application closer to the data that it manages, will reduce the traffic overhead and improve the response time. Removing of a single point of failure will render the whole management application to be more available and robust.
Reference: [29] <author> T. Inc. Tme-10 deployment and migration. </author> <note> Available from www.tivoli.com/products/deploy/, 1996. </note>
Reference-contexts: Although these two 65 CHAPTER 8. CONCLUSIONS AND FUTURE WORK realms are traditionally viewed as separate issues, they have very much in common. The current trend in distributed management is to integrate these two realms. Such, TME 10 <ref> [29] </ref> intends to provide the functionality for both system and network management. One of the most challenging problems in both cases is to provide a truly distributed implementation of the control and representation functions of the managed resources.
Reference: [30] <author> S. Jajodia and D. Mutchler. </author> <title> Dynamic voting algorithms for maintaining the consistency of a replicated database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 230-280, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component.
Reference: [31] <author> M. Jander. </author> <title> Midlevel managers ease snmp information overload. </title> <journal> Data Communications, </journal> <year> 1993. </year>
Reference-contexts: Removing of a single point of failure will render the whole management application to be more available and robust. Although the mid-level manager concept and hierarchical management are not new <ref> [43, 31, 18, 17] </ref> concepts, we are not yet aware of any work that suggests a systematic way to deploy such entities reliably.
Reference: [32] <author> I. Keidar. </author> <title> A highly available paradigm for consistent object replication. </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: This limits the availability of the services and can become a bottleneck when the system expands. This chapter shows how group communication paradigm can be utilized for building efficient, reliable and scalable solutions for consistent distributed table management. Our solution adapts the novel techniques for object replication presented in <ref> [3, 4, 32] </ref>, but the 34 CHAPTER 6. LONG TERM CONSISTENCY SERVICES algorithms are modified and tailored to the specific demands of the system management. Such, our solution is not symmetric. A system manager's host presence in a network component helps to define this component as a primary one uniquely. <p> Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component. <p> In such situation it is useless to have a majority that allows updates, because the management application generating them is disconnected from the majority. Keidar <ref> [32] </ref> allows a non-primary components to initiate updates. These updates will not be applied until they become totally ordered at all the servers participating in the replication. This architecture is very powerful for the general purpose data-base replication, but is an overkill for system management applications. <p> Replication paradigms provided in <ref> [3, 4, 32, 6] </ref> and Chapter 6 assume that the set of the servers participating in the replication algorithm is fixed and known in advance. This may turn out to be too restricting for the real needs of a system administrator. An administrator may want, for 59 CHAPTER 7. <p> In [34] there is a primary server that may be re-elected each time a membership change occurs. A primary server is elected only in the component that contains a majority of the replication severs. In <ref> [32] </ref> the primary component may be re-established for the quorum of the replication servers that remained connected. In both cases the lack of direct control over a master server reelection, or a primary component establishment, precludes the direct usage of these algorithms for the purposes of management.
Reference: [33] <author> A. M. and S. C. </author> <title> DME Framework and Design, chapter 23. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: The configuration management service is part of the management standard defined by OSI Management Framework [1] and OSF Distributed Management Environment (OSF DME) <ref> [33] </ref>. * Software Distribution and Upgrade: Presently, software distribution and upgrade are mostly performed manually by a system manager on a per-machine basis. <p> Using membership service provided by our group communication toolkit we show how the servers that actually perform the installation of software packages can be elegantly and reliably controlled and coordinated. Software distribution service is defined as part of the OSF DME <ref> [33] </ref>. * Simultaneous Execution: It is often necessary to invoke the same management action at several locations simultaneously. By simultaneity we do not mean that the event 2 CHAPTER 1.
Reference: [34] <author> T. Mann, A. Hisgen, and G. Swart. </author> <title> An algorithm for data replication. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component. <p> An administrator may want, for 59 CHAPTER 7. DYNAMICALLY RECONFIGURABLE NTMS example, to add new replication servers on-demand in order to improve availability and/or response time. Another problem is how to reassign the protocol roles of the replication servers. The replication paradigm provided by DEC Inc. <ref> [34] </ref> is based on the primary component paradigm. In [34] there is a primary server that may be re-elected each time a membership change occurs. A primary server is elected only in the component that contains a majority of the replication severs. <p> DYNAMICALLY RECONFIGURABLE NTMS example, to add new replication servers on-demand in order to improve availability and/or response time. Another problem is how to reassign the protocol roles of the replication servers. The replication paradigm provided by DEC Inc. <ref> [34] </ref> is based on the primary component paradigm. In [34] there is a primary server that may be re-elected each time a membership change occurs. A primary server is elected only in the component that contains a majority of the replication severs.
Reference: [35] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: In other words the snapshot of the network presented by the membership service at a specific time may differ from the actual network situation at that moment. Existing implementation of membership protocols circumvent this difficulty in a number of ways. Essentially, the most widespread approach <ref> [35, 37, 38] </ref>, suggests that when a process is presumed faulty, it is taken out of the view. It could be the case, of course, that the process was not actually crashed, but rather was too slow. If this is the case it can rejoin the group later.
Reference: [36] <author> L. E. Moser, Y. Amir, P. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended virtual synchrony. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Termination of the algorithms presented later in this work directly depends on the 12 CHAPTER 3. ENVIRONMENT MODEL termination of the membership service. For the sake of simplicity we are not giving the full overview of the Transis membership and message delivery semantics. This information is presented in <ref> [36] </ref> in greater detail. One remark, however, is necessary in order to understand the presented algorithms. Transis always deliver a message to an application in the same membership as it was sent by the Transis daemon.
Reference: [37] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Proceedings of the IEEE 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 480-488, </pages> <address> Arlington, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In other words the snapshot of the network presented by the membership service at a specific time may differ from the actual network situation at that moment. Existing implementation of membership protocols circumvent this difficulty in a number of ways. Essentially, the most widespread approach <ref> [35, 37, 38] </ref>, suggests that when a process is presumed faulty, it is taken out of the view. It could be the case, of course, that the process was not actually crashed, but rather was too slow. If this is the case it can rejoin the group later.
Reference: [38] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Processor membership in asynchronous distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(5) </volume> <pages> 459-473, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In other words the snapshot of the network presented by the membership service at a specific time may differ from the actual network situation at that moment. Existing implementation of membership protocols circumvent this difficulty in a number of ways. Essentially, the most widespread approach <ref> [35, 37, 38] </ref>, suggests that when a process is presumed faulty, it is taken out of the view. It could be the case, of course, that the process was not actually crashed, but rather was too slow. If this is the case it can rejoin the group later.
Reference: [39] <author> P. Niemeyer and J. Peck. </author> <title> Exploring Java. </title> <address> O'Reilly, </address> <year> 1996. </year> <note> ISBN 1-56592-184-4. </note>
Reference-contexts: Using a mid-level manager it is possible to distribute management algorithms by moving part of them closer to the data they manage. This may be done in form of dispatched scripts <ref> [28, 39] </ref> or dynamically linked programs [25]. Moving management application closer to the data that it manages, will reduce the traffic overhead and improve the response time. Removing of a single point of failure will render the whole management application to be more available and robust.
Reference: [40] <author> R. Ramsey. </author> <title> All About Administering NIS+. </title> <note> SunSoft Press, second edition, 1995. 451 pages; ISBN 0-13-309576-2. 69 BIBLIOGRAPHY </note>
Reference-contexts: Some of these functions facilitate scheduling service, event notification service, data manipulation, data encryption, directory services, regular expression and pattern matching, message logging and catalog service, inter-object message facility etc. On top of TMP there are application-level services. Most interesting applications in our context include MDist [48], NIS++ <ref> [40] </ref>, Tivoli/Admin and Tivoli/Courier. Tivoli/Admin and Tivoli/Courier deal with configuration management and software distribution respectively. Both of these services make use of Multiplexed Distribution service (MDist).
Reference: [41] <author> M. Rose and K. McCloghrie. </author> <title> How to Manage Your Network Using SNMP. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: In this paradigm a management algorithm is located at a manager's station that issues commands to be evaluated at the management agent (server). The management agent is left with very simple passive role. This approach is especially widespread in the network management world <ref> [41, 45] </ref>. The problem with the above approach is that it does not scale. We propose to extend our platform (see Figure 8.1 with a reliable mid-level manager service that facilitates a development of reliable hierarchical management applications.
Reference: [42] <author> A. Rowley and J. Dollimore. </author> <title> Secure group communication for groupware applications. </title> <booktitle> In Proceedings of the 2nd European Research Seminar on Advances in Distributed Systems, </booktitle> <month> March </month> <year> 1997. </year>
Reference-contexts: This is a reasonable approach in many modern configurations, where a firewall [20] is used to impose some security policies on users outside of an organization, and users inside the organization are trusted. In <ref> [42] </ref> an efficient design for secure group communication are presented. One of the current research directions in the Transis project is to augment Transis with a secure secure group communication mechanisms.
Reference: [43] <author> M. R. Siegl and G. Trausmuth. </author> <title> Hierarchical network management: a concept and its prototype in snmpv2. </title> <booktitle> In Proceedings JENC6, </booktitle> <year> 1995. </year>
Reference-contexts: Removing of a single point of failure will render the whole management application to be more available and robust. Although the mid-level manager concept and hierarchical management are not new <ref> [43, 31, 18, 17] </ref> concepts, we are not yet aware of any work that suggests a systematic way to deploy such entities reliably.
Reference: [44] <author> D. Skeen. </author> <title> A quorum-based commit protocol. </title> <booktitle> In Berkeley Workshop on Distributed Data Management and Computer Network, </booktitle> <volume> number 6, </volume> <pages> pages 69-80, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: Our primary component scheme is preferable for a management application, because it always allows a system administrator to perform updates provided that certain machine (s) (e.g., the administrator's workstation) are connected and operational. In contrast to other known solutions based on primary component <ref> [44, 32, 34, 30, 22, 21] </ref>, we do not use the majority or quorum criteria in order to establish primary component. The only criteria that is used is the presence of administrator-defined machine in a component.
Reference: [45] <author> W. Stallings. SNMP, SNMPv2 and CMIP: </author> <title> The Practical Guide to Network Management Standards. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: In this paradigm a management algorithm is located at a manager's station that issues commands to be evaluated at the management agent (server). The management agent is left with very simple passive role. This approach is especially widespread in the network management world <ref> [41, 45] </ref>. The problem with the above approach is that it does not scale. We propose to extend our platform (see Figure 8.1 with a reliable mid-level manager service that facilitates a development of reliable hierarchical management applications.
Reference: [46] <author> H. Stern. </author> <title> Managing NFS and NIS, </title> <type> chapter 2, 3, 4. </type> <institution> O'Reilly & Associates Inc, </institution> <note> first edition, </note> <month> June </month> <year> 1991. </year>
Reference-contexts: It is important to understand that OSF DME does not prescribe the implementation, but only standardizes the APIs for inter-operability purposes. Thus, less efficient and more efficient implementations are possible within the same standard. 2.2 Network Information Service The Network Information Service (NIS) <ref> [46] </ref> is supplied as part of the operating system by all major UNIX vendors. In NIS, a collection of network tables (maps) constituting a 4 CHAPTER 2. RELATED WORK configuration database, can optionally be replicated among a group of servers.
Reference: [47] <author> W. F. Tichy. Rcs: </author> <title> A system for version control. </title> <journal> Software: Practice & Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: After each update (which is done manually to the ASCII file corresponding to a table using some ASCII editor) a table is completely rebuilt. When the system crashes it is difficult to pinpoint the update that screwed the system. Administrators use some external tools for version control (e.g., RCS <ref> [47] </ref>) in order to log the changes to the system's configuration. When problems occur, the versions of the ASCII files corresponding to the tables are examined and inconsistencies are resolved manually.
Reference: [48] <institution> Tivoli Systems Inc. Multiplexed Distribution (MDist), </institution> <month> November </month> <year> 1994. </year> <note> Available via anonymous ftp from ftp.tivoli.com /pub/info. </note>
Reference-contexts: Some of these functions facilitate scheduling service, event notification service, data manipulation, data encryption, directory services, regular expression and pattern matching, message logging and catalog service, inter-object message facility etc. On top of TMP there are application-level services. Most interesting applications in our context include MDist <ref> [48] </ref>, NIS++ [40], Tivoli/Admin and Tivoli/Courier. Tivoli/Admin and Tivoli/Courier deal with configuration management and software distribution respectively. Both of these services make use of Multiplexed Distribution service (MDist).
Reference: [49] <institution> Tivoli Systems Inc. TME 2.0: Technology Concepts and Facilities, </institution> <year> 1994. </year> <note> Technology white paper discussing Tivoli 2.0 components and capabilities. Available via anonymous ftp from ftp.tivoli.com /pub/info. </note>
Reference-contexts: Since then Tivoli became a part of OSF DME and X/Open Systems Management Reference Model. The Tivoli Management Environment (TME) <ref> [49] </ref> is probably the most comprehensive integrated solution for distributed system management existing today. Tivoli provides a unified management platform for problems of both distributed system and network management.
Reference: [50] <author> R. van Renesse, K. P. Birman, R. Friedman, M. Hayden, and D. Karr. </author> <title> A framework for protocol composition in horus. </title> <booktitle> In Proceedings of the ACM symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1995. </year> <month> 70 </month>
Reference-contexts: Although we focus on the Unix environment, a de-facto standard for distributed environments, the same mechanisms are applicable to other settings as well. We see the proposed integration of a group communication paradigm <ref> [50, 9, 23, 12, 2] </ref> into distributed management as one of the main contributions of this thesis. <p> The monitor is an externally developed management application that uses the management servers' API and exploits Transis in order to communicate with the management servers and to monitor their activity. Although we use Transis as our group communication layer, other existing toolkits such as Totem [10], Horus <ref> [50] </ref> or Newtop [23] could have been used. 1 We use these terms interchangeably 14 CHAPTER 4. ARCHITECTURE With respect to consistency and reliability demands, the management server provides two classes of services: the long-term services and the short-term ones. <p> This simplifies the view of the system and allows to keep track of what is happening in the system easier. Unlike other group communication toolkits <ref> [14, 50] </ref>, Transis' membership service is implemented on a processor level rather then on a process level. This makes joining or leaving a process group a local matter that does not affect the other Transis daemons.
References-found: 50

