URL: http://www.aic.nrl.navy.mil:80/~aha/aaai95-fss/papers/orsvarn.ps.Z
Refering-URL: http://www.aic.nrl.navy.mil:80/~aha/aaai95-fss/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: klasorsv@sics.se,  
Title: Adaptation of Generic Models in Model-driven Knowledge Acquisition  
Author: Klas Orsvarn 
Web: URL: http://www.sics.se/~klasorsv/  
Address: Box 1263, 164 28 Kista, Sweden  
Affiliation: Swedish Institute of Computer Science  
Abstract: Knowledge level modelling of knowledge-based systems is commonly facilitated with a library of generic models, that are specialized for classes of applications. The paper discusses guidelines for adapting such generic models, in particular task decompositions, to a given application. In this field of adaptation of reused knowledge structures, the kind of case for which reuse and adaptation is made is very complex and open the development of a knowledge-based system. In the current state-of-the-art, the process cannot be automated, but must be controlled by a human knowledge engineer. Therefore, the results so far are informal guidelines. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aamodt, A.; Benus, B.; Duursma, C.; Tomlin-son, C.; Schrooten, R.; and Van de Velde, W. </author> <year> 1992. </year> <title> Task features and their use in CommonKADS. </title> <institution> ESPRIT Project P5248 Deliverable D1.5 KADS-II/T1.5/VUB/TR/014/1.0, Free University of Brussels & University of Amsterdam & Lloyd's Register. </institution>
Reference-contexts: The Select-and-Modify Process The development process is decomposed into the following four activities, which are illustrated in figure 1: Select-IM: Select an interpretation model (IM), on the basis of selection critera called task features in CommonKADS <ref> (Aamodt et al. 1992) </ref>. Evaluate-IM: Investigate whether the selected interpretation model is suitable in the application, or whether it is necessary to modify it. Modify-IM: Modify the interpretation model, to match the modification requirements identified in the evaluation. The result of the modification is again evaluated. <p> This difficulty can be mitigated somewhat by using a predefined categorization of requirements, and an inventory of common requirements, which gives abstract and concrete examples of what to look for. Such a framework has been developed in CommonKADS <ref> (Aamodt et al. 1992) </ref>, for indexing reusable components in the library. The requirements in this framework are called task features, and describe properties of the real world, and domain knowledge requirements. <p> An example feature could be that the user is providing discriminating observations, and the cost of data-gathering should be minimized. These three categories in turn have a hierarchy of sub-categories, which is partly illustrated in figure 2. The rest of the hierarchy is found in <ref> (Aamodt et al. 1992) </ref>. It would be very valuable to find guidelines for associating classes of discrepancies with classes of requirements. One example of such an association is based on a larger category of task features that we call task setting features. <p> If the principles behind such a systematic adaptation process could be articulated, it would be a great potential for guidance. We have found that the task feature framework of CommonKADS <ref> (Aamodt et al. 1992) </ref> provides guidance in characterizing the requirements of modifications, but we believe it would be possible to provide stronger support by extending that framework, e.g. the classification and inventory of task features (the notion of task setting feature, introduced here, is one example).
Reference: <author> Benjamins, R., and Jansweijer, W. </author> <year> 1994. </year> <title> Towards a competence theory of diagnosis. </title> <journal> IEEE Expert 9(5). </journal>
Reference-contexts: Figure 3 shows an example of such an analysis, from a case-study (Orsvarn 1995) of using these guidelines for reverse engineering of an existing diagnosis application, using a library of task decomposition methods for diagnosis tasks <ref> (Benjamins & Jan-sweijer 1994) </ref>. An example of a violated task feature is that "knowledge exists for ranking hypotheses according to probability, based on association to specific symptoms". <p> Later, the guidelines have also been applied in a case-study (Orsvarn 1995) of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks <ref> (Benjamins & Jansweijer 1994) </ref>. The target of knowledge modelling was reverse engineering of an existing diagnosis application. The analysis illustrated in figure 3 was a big help in controlling the complex task of characterizing the discrepancies and making the necessary modifications, in particular to reduce the need for backtracking. <p> The case-study mentioned above (Orsvarn 1995), of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks <ref> (Benjamins & Jansweijer 1994) </ref>, also lead to identification of a number of principles that should be satisfied by libraries of generic task decomposition methods, in order to re duce probability and difficulty of having to modify a generic model in a given application.
Reference: <author> Breuker, J., and Van de Velde, W., eds. </author> <year> 1994. </year> <title> Com-monKADS Library for Expertise Modelling: Reusable Problem Solving Components. </title> <address> Amsterdam: IOS-Press. </address>
Reference-contexts: The guidelines are mainly based on our own experiences of knowledge modelling with generic models (e.g. (Orsvarn 1992)). The library in CommonKADS contains many different kinds of generic modelling components <ref> (Breuker & Van de Velde 1994) </ref>, but our guidelines only address the adaptation of a kind of generic model called interpretation models, which corresponds to what we have called a task decomposition method above. <p> A comprehensive task feature framework is also needed to build better libraries (note that the Com-monKADS task feature framework was hardly used at all in the CommonKADS library <ref> (Breuker & Van de Velde 1994) </ref>). This brings us to another interesting prospect for the future; to extend these guidelines to cover how to incorporate new generic models into the library, i.e. models that have been created by modifying a selected generic model in an application.
Reference: <author> Hinrichs, T. R. </author> <year> 1992. </year> <title> Problem Solving in Open Worlds: A Case Study in Design. </title> <address> Hillsdale, New Jersey: </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: Compared to the major classes of case-based reasoning, this makes it most similar to case-based design. Furthermore, it corresponds to design in an open world <ref> (Hinrichs 1992) </ref>: * The generic models are not selected only on the basis of selection criteria. The knowledge engineer may use any kind of evaluation to make a selection. <p> These subtasks are in turn decomposed further by other methods into lower level subtasks, until a level is reached where the subtask can be achived directly using domain models. With such generic models, the hierarchical decomposition can be used to determine where to make modifications, i.e. for localizing blame <ref> (Hinrichs 1992) </ref>. This is done by determining for each task decomposition whether it is consistent with the modification requirements. If not, it should also be possible to determine which requirements are violated in this task decomposition. <p> However, more work on this topic is needed. Approaches to automated design adaptation often make use of replacing components that are to blame with other predefined components that satisfy the requirements, e.g. replacing lasagne with spinach lasagne to make a meal vegetarian <ref> (Hinrichs 1992) </ref>. In model-driven knowledge acquisition, it is most often necessary to make structural modifications.
Reference: <author> Orsvarn, K., and Wells, S. </author> <year> 1994. </year> <title> Modelling scenario: SAT expertise model. </title> <editor> In Wielinga, B., ed., </editor> <title> Expertise Model Definition Document. </title> <institution> University of Ams-terdam. </institution>
Reference-contexts: A difficulty here is that the required modification always depends on what the selected generic model looks like. We have given some examples of such stereotypes, for task features that often cause modifications in libraries of task decomposition methods <ref> (Orsvarn, Olsson, & Hassan 1994) </ref>. However, more work on this topic is needed. Approaches to automated design adaptation often make use of replacing components that are to blame with other predefined components that satisfy the requirements, e.g. replacing lasagne with spinach lasagne to make a meal vegetarian (Hinrichs 1992). <p> This can be facilitated in the proposed process, since modification requirements are made explicit and attributed to parts of the generic model and the corresponding model after modification. Evaluation of the Guidelines The guidelines described in this paper were first tested by preparing a detailed example scenario <ref> (Orsvarn & Wells 1994) </ref> of developing an expertise model for a task of software assessment according to the guidelines. That model was originally developed using a select-and-modify approach, but without any guidelines. The scenario is a reconstruction of the process, which naturally deviates substantially from the original process.
Reference: <author> Orsvarn, K.; Olsson, O.; and Hassan, H. A. </author> <year> 1994. </year> <title> Guidelines for the Select-and-Modify approach. </title> <editor> In Wielinga, B., ed., </editor> <title> Expertise Model Definition Document. </title> <institution> University of Amsterdam. </institution>
Reference-contexts: A difficulty here is that the required modification always depends on what the selected generic model looks like. We have given some examples of such stereotypes, for task features that often cause modifications in libraries of task decomposition methods <ref> (Orsvarn, Olsson, & Hassan 1994) </ref>. However, more work on this topic is needed. Approaches to automated design adaptation often make use of replacing components that are to blame with other predefined components that satisfy the requirements, e.g. replacing lasagne with spinach lasagne to make a meal vegetarian (Hinrichs 1992). <p> This can be facilitated in the proposed process, since modification requirements are made explicit and attributed to parts of the generic model and the corresponding model after modification. Evaluation of the Guidelines The guidelines described in this paper were first tested by preparing a detailed example scenario <ref> (Orsvarn & Wells 1994) </ref> of developing an expertise model for a task of software assessment according to the guidelines. That model was originally developed using a select-and-modify approach, but without any guidelines. The scenario is a reconstruction of the process, which naturally deviates substantially from the original process.
Reference: <author> Orsvarn, K.; Olsson, O.; and Hassan, H. A. </author> <year> 1995. </year> <title> Guidelines for adapting an interpretation model in an application. </title> <booktitle> In Proc. Knowledge Engineering Forum 95, number 903 in Arbeitspapiere der GMD, </booktitle> <pages> 95-106. </pages> <address> Sankt Augustin, Germany: </address> <institution> GMD. </institution>
Reference-contexts: This is done by determining for each task decomposition whether it is consistent with the modification requirements. If not, it should also be possible to determine which requirements are violated in this task decomposition. Figure 3 shows an example of such an analysis, from a case-study <ref> (Orsvarn 1995) </ref> of using these guidelines for reverse engineering of an existing diagnosis application, using a library of task decomposition methods for diagnosis tasks (Benjamins & Jan-sweijer 1994). <p> Since the scenario is a reconstruction, it is not possible to draw any definite conclusions from it about the benefits of the guidelines, but it clearly indicates that the guidelines support developers by providing a rigorous method. Later, the guidelines have also been applied in a case-study <ref> (Orsvarn 1995) </ref> of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks (Benjamins & Jansweijer 1994). The target of knowledge modelling was reverse engineering of an existing diagnosis application. <p> Similarly, we hope that our analysis of the adaptation process in model-driven knowledge acquisition, and the specific guidelines, that we have presented here, can also be a source of inspiration for researchers in these other fields. The case-study mentioned above <ref> (Orsvarn 1995) </ref>, of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks (Benjamins & Jansweijer 1994), also lead to identification of a number of principles that should be satisfied by libraries of generic task decomposition methods, in order to re duce probability and difficulty of having to <p> We have so far described two scenarios of using the guidelines to develop two models of real KBS. These show that the guidelines are feasible to use, but no definite conclusions can yet be drawn empirically about the benefits. 3. What comparisons were made with other methods? Another paper <ref> (Orsvarn, Olsson, & Hassan 1995) </ref> compares with related reuse-based work on the same task, but noone has to our knowledge directly addressed the adaptation process before. No comparison has been made with approaches not based on reuse. 4.
Reference: <author> Orsvarn, K. </author> <year> 1992. </year> <title> Adaptation of a task specific problem solving method to the features of an application. </title> <booktitle> In Proc. 7th Banff Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <address> 19-1 - 19-. </address> <publisher> SRDG Publications, University of Calgary. </publisher>
Reference-contexts: So far, the support takes the form of written guidelines for the adaptation process (Orsvarn, Olsson, & Hassan 1994; 1995) for use by a knowledge engineer. The guidelines are mainly based on our own experiences of knowledge modelling with generic models (e.g. <ref> (Orsvarn 1992) </ref>). The library in CommonKADS contains many different kinds of generic modelling components (Breuker & Van de Velde 1994), but our guidelines only address the adaptation of a kind of generic model called interpretation models, which corresponds to what we have called a task decomposition method above.
Reference: <author> Orsvarn, K. </author> <year> 1995. </year> <title> Case-study in knowledge mod-elling with Benjamins' library of diagnosis methods. </title> <booktitle> In Proc. Knowledge Engineering Forum 95, number 903 in Arbeitspapiere der GMD, </booktitle> <pages> 83-94. </pages> <address> Sankt Au-gustin, Germany: </address> <institution> GMD. </institution>
Reference-contexts: This is done by determining for each task decomposition whether it is consistent with the modification requirements. If not, it should also be possible to determine which requirements are violated in this task decomposition. Figure 3 shows an example of such an analysis, from a case-study <ref> (Orsvarn 1995) </ref> of using these guidelines for reverse engineering of an existing diagnosis application, using a library of task decomposition methods for diagnosis tasks (Benjamins & Jan-sweijer 1994). <p> Since the scenario is a reconstruction, it is not possible to draw any definite conclusions from it about the benefits of the guidelines, but it clearly indicates that the guidelines support developers by providing a rigorous method. Later, the guidelines have also been applied in a case-study <ref> (Orsvarn 1995) </ref> of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks (Benjamins & Jansweijer 1994). The target of knowledge modelling was reverse engineering of an existing diagnosis application. <p> Similarly, we hope that our analysis of the adaptation process in model-driven knowledge acquisition, and the specific guidelines, that we have presented here, can also be a source of inspiration for researchers in these other fields. The case-study mentioned above <ref> (Orsvarn 1995) </ref>, of knowledge modelling using a library of task decomposition methods methods for diagnosis tasks (Benjamins & Jansweijer 1994), also lead to identification of a number of principles that should be satisfied by libraries of generic task decomposition methods, in order to re duce probability and difficulty of having to <p> We have so far described two scenarios of using the guidelines to develop two models of real KBS. These show that the guidelines are feasible to use, but no definite conclusions can yet be drawn empirically about the benefits. 3. What comparisons were made with other methods? Another paper <ref> (Orsvarn, Olsson, & Hassan 1995) </ref> compares with related reuse-based work on the same task, but noone has to our knowledge directly addressed the adaptation process before. No comparison has been made with approaches not based on reuse. 4.
Reference: <author> Puerta, A.; Egar, J.; Tu, S.; and Musen, M. </author> <year> 1992. </year> <title> A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <journal> Knowledge Acquisition 4 </journal> <pages> 171-196. </pages>
Reference-contexts: Introduction Our research on Adaptation of Knowledge for Reuse is done within the field of model-driven knowledge acquisition, where the major approaches today include COMMET (Steels 1990), CommonKADS (Schreiber et al. 1994), prot eg e-ii <ref> (Puerta et al. 1992) </ref>, and Spark-Burn-Firefighter (Yost et al. 1994).
Reference: <author> Schreiber, A. T., and Wielinga, B. J. </author> <year> 1993. </year> <title> Model construction. </title> <editor> In Schreiber, A. T.; Wielinga, B. J.; and Breuker, J. A., eds., KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development. </title> <publisher> London: Academic Press. </publisher> <pages> 93-118. </pages>
Reference-contexts: There is clearly a need to provide stronger support for the modification activity. The present guidelines are focused on identifying the requirements for modification, but more could be said about how to find the appropriate modification. In a related work, <ref> (Schreiber & Wielinga 1993) </ref> described examples of how to drive refinement of a task decomposition in a seemingly systematic way by task features. We believe that other modifications (structural change rather than refinement) can be described in a similar way, as generalization followed by the same kind of refinement.
Reference: <author> Schreiber, A. T.; Wielinga, B. J.; Akkermans, J. M.; Van de Velde, W.; and de Hoog., R. </author> <year> 1994. </year> <title> Com-monkads: A comprehensive methodology for kbs development. </title> <journal> IEEE Expert 9(6). </journal>
Reference-contexts: Introduction Our research on Adaptation of Knowledge for Reuse is done within the field of model-driven knowledge acquisition, where the major approaches today include COMMET (Steels 1990), CommonKADS <ref> (Schreiber et al. 1994) </ref>, prot eg e-ii (Puerta et al. 1992), and Spark-Burn-Firefighter (Yost et al. 1994).
Reference: <author> Steels, L. </author> <year> 1990. </year> <title> Components of expertise. </title> <journal> AI Magazine 11(2) </journal> <pages> 29-49. </pages>
Reference-contexts: Introduction Our research on Adaptation of Knowledge for Reuse is done within the field of model-driven knowledge acquisition, where the major approaches today include COMMET <ref> (Steels 1990) </ref>, CommonKADS (Schreiber et al. 1994), prot eg e-ii (Puerta et al. 1992), and Spark-Burn-Firefighter (Yost et al. 1994).
Reference: <author> Vanwelkenhuysen, J. </author> <year> 1995. </year> <title> Embedding nonfunctional requirements analyses in conceptual knowledge system designs. </title> <booktitle> In Proc. 9th Banff Knowledge-Acquisition for Knowledge-Based Systems Workshop. </booktitle>
Reference-contexts: Another difficulty in modification is that requirements may be conflicting, which calls for trade-off and compromise solutions. Johan Vanwelkenhuysen has given examples of concrete guidelines for compromise solutions to specific conflicting requirements in diagnosis applications <ref> (Vanwelkenhuysen 1995) </ref>.
Reference: <author> Yost, G.; Klinker, G.; Linster, M.; Marques, D.; and McDermott, J. </author> <year> 1994. </year> <title> The SBF framework, </title> <type> 1989-1994: </type> <note> From applications to workplaces. </note> <editor> In Steels, L.; Schreiber, G.; and Van de Velde, W., eds., </editor> <booktitle> Proc. EKAW`94, number 867 in LNAI, </booktitle> <pages> 318-339. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Introduction Our research on Adaptation of Knowledge for Reuse is done within the field of model-driven knowledge acquisition, where the major approaches today include COMMET (Steels 1990), CommonKADS (Schreiber et al. 1994), prot eg e-ii (Puerta et al. 1992), and Spark-Burn-Firefighter <ref> (Yost et al. 1994) </ref>. This research field addresses the question of how to support knowledge acquisition for development of knowledge-based systems (KBS), and the central idea in model-driven knowledge acquisition is to use a library of generic models, which are specialized for certain tasks and/or domains.
References-found: 15

