URL: ftp://ftp.cs.arizona.edu/reports/1998/TR98-01.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Optimizing TCP Forwarder Performance  
Author: Oliver Spatscheck, Jrgen S. Hansen John H. Hartman and Larry L. Peterson 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Note: February  
Date: TR 98-01  9, 1998  
Abstract: A TCP forwarder is a network node that establishes and forwards data between a pair of TCP connections. For example, a firewall that places a proxy between a TCP connection to an external host and a TCP connection to an internal hostfor the purpose of implementing access control to a resource on the internal hostis an example of a TCP forwarder. Once the proxy approves the access, it simply forwards data from one connection to the other. We use the term TCP forwarding to describe indirect TCP communication via a proxy in general. This paper characterizes the behavior of TCP forwarding, and illustrates the role TCP forwarding plays in common network services like firewalls and HTTP proxies. We introduce an optimization technique, called connection splicing, that can applied to a TCP forwarder, and reports the results of a performance study designed to evaluate its impact. Connection splicing has the effect of improving the performance of TCP forwarding by a factor of two to four, making it competitive with the performance of an IP router running on the same hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. L. Bailey, B. Gopal, M. A. Pagels, L. L. Peterson, and P. Sarkar. PathFinder: </author> <title> A pattern-based packet classifier. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 115123, </pages> <address> Monterey, CA, </address> <year> 1994. </year> <month> ACM/USENIX. </month>
Reference-contexts: The lack of filtering makes it unsuitable for more advanced proxies such as firewalls. Another research topic related to this paper is that of efficiently classifying packets <ref> [1, 6] </ref>. Of particular note are new algorithms to do fast routing table lookups based on variable length IP address prefixes [3, 10]. It is easy to imagine such techniques being extended to support fast IP filtering.
Reference: [2] <author> A. Bakre and B. Badrinath. </author> <title> Implementation and performance evaluation of indirect tcp. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 46(3), </volume> <month> March </month> <year> 1997. </year>
Reference-contexts: In other words, splicing can also make the administration of a TCP forwarder easier. 6 Related Work In mobile computing, TCP forwarders are used to separate the TCP connection on a wireless link from that of a wired network <ref> [2] </ref>. This increases performance as the characteristics of the two types of networks are very different. As a mobile host moves around, it might sometimes connect directly to a wired network, in which case the TCP forwarder becomes superfluous and can be removed.
Reference: [3] <author> A. Brodnik, S. Carlsson, M. Degermark, and S. Pink. </author> <title> Small forwarding tables for fast routing lookups. </title> <booktitle> In Proceedings of SIGCOMM '97 Symposium, </booktitle> <pages> pages 314, </pages> <address> Cannes, France, </address> <month> Sept. </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: The lack of filtering makes it unsuitable for more advanced proxies such as firewalls. Another research topic related to this paper is that of efficiently classifying packets [1, 6]. Of particular note are new algorithms to do fast routing table lookups based on variable length IP address prefixes <ref> [3, 10] </ref>. It is easy to imagine such techniques being extended to support fast IP filtering. Such an advance would be complementary to connection splicing, which can also exploit improved algorithms to determine to which path a particular packet belongs.
Reference: [4] <author> C. Brooks, M. Mazer, S. Meeks, and J. Miller. </author> <title> Application-Specific Proxy Servers as HTTP Stream Transducers. </title> <booktitle> In Electronic Proc. 4th Int. World Wide Web Conference The Web Revolution, </booktitle> <address> Boston, MA, </address> <month> Dec. </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: It could also provide more complex functionalities as described in <ref> [4] </ref>. 2.3 Process Migration The final example, perhaps a bit more esoteric, is that of transparent process migration. Process migration is the technique of moving a running process from one computer to another.
Reference: [5] <author> M. Chatel. </author> <title> RFC 1919: Classical versus transparent IP proxies, </title> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: A typical proxy accepts connections on one network, authenticates the entity making the connection request, and forwards the data to the other network, perhaps after applying a filter. The firewall either uses its own IP address (classical proxy) or is completely transparent to the user (transparent proxy) <ref> [5] </ref>. A classical proxy must use the control information in the request to determine the connection's true destination. 2.2 HTTP Server Proxy TCP forwarding can also be used to develop scalable servers such as HTTP servers.
Reference: [6] <author> D. Engler and M. F. Kaashoek. DPF: </author> <title> Fast, flexible message demultiplexing using dynamic code generation. </title> <booktitle> In Proceedings of SIGCOMM '96 Symposium, </booktitle> <pages> pages 5359, </pages> <address> Stanford, CA, </address> <month> Aug. </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: The lack of filtering makes it unsuitable for more advanced proxies such as firewalls. Another research topic related to this paper is that of efficiently classifying packets <ref> [1, 6] </ref>. Of particular note are new algorithms to do fast routing table lookups based on variable length IP address prefixes [3, 10]. It is easy to imagine such techniques being extended to support fast IP filtering.
Reference: [7] <author> J. S. Hansen, T. Reich, B. Andersen, and E. </author> <month> Jul. </month> <title> Dynamic adaptation of network connections in mobile environments. </title> <journal> IEEE Internet Computing, </journal> <volume> 2(1), </volume> <month> January/February </month> <year> 1998. </year>
Reference-contexts: This increases performance as the characteristics of the two types of networks are very different. As a mobile host moves around, it might sometimes connect directly to a wired network, in which case the TCP forwarder becomes superfluous and can be removed. This is done in the TACO system <ref> [7] </ref>, where mobile hosts candepending on what is required from their current type of network attachmentswitch between having a TCP forwarder and not without destroying their TCP connections.
Reference: [8] <author> D. Mosberger and L. Peterson. </author> <title> Making paths explicit in the scout operating system. </title> <booktitle> In Proceedings of OSDI '96, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: This being the case, FWD can be omitted and the TCP forwarder operates just like an IP router. 4 Connection Splicing in Scout Connection splicing can be implemented in any operating system, but the technique is particularly effective in a communication-oriented operating system such as Scout <ref> [8] </ref>. Scout is a configurable OS explicitly designed to support data flows, such as video streams through an MPEG player, or a pair of TCP connections through a firewall.
Reference: [9] <author> M. K. Ranum and F. M. Avolio. </author> <title> A toolkit and methods for Internet firewalls. </title> <booktitle> In USENIX Association, editor, Proceedings of the Summer 1994 USENIX Conference: </booktitle> <address> June 610, 1994, Boston, Massachusetts, USA, </address> <pages> pages 3744, </pages> <address> Berkeley, CA, USA, </address> <month> Summer </month> <year> 1994. </year> <booktitle> USENIX. </booktitle>
Reference: [10] <author> M. Waldvogel, G. Varghese, J. Turner, and B. Plattner. </author> <title> Scalable high speed IP routing lookups. </title> <booktitle> In Proceedings of SIGCOMM '97 Symposium, </booktitle> <pages> pages 2538, </pages> <address> Cannes, France, </address> <month> Sept. </month> <year> 1997. </year> <journal> ACM. </journal> <volume> 16 </volume>
Reference-contexts: The lack of filtering makes it unsuitable for more advanced proxies such as firewalls. Another research topic related to this paper is that of efficiently classifying packets [1, 6]. Of particular note are new algorithms to do fast routing table lookups based on variable length IP address prefixes <ref> [3, 10] </ref>. It is easy to imagine such techniques being extended to support fast IP filtering. Such an advance would be complementary to connection splicing, which can also exploit improved algorithms to determine to which path a particular packet belongs.
References-found: 10

