URL: http://www.cs.utah.edu/~ganesh/verpapers/chdl95.ps.Z
Refering-URL: http://www.cs.utah.edu/~ratan/res.html
Root-URL: 
Email: e-mail: ratan@cs.utah.edu e-mail: ganesh@cs.utah.edu  
Title: Explicit-enumeration based Verification made Memory-efficient  
Author: Ratan Nalumasu Ganesh Gopalakrishnan 
Address: Salt Lake City, UT 84112 Salt Lake City, UT 84112  
Affiliation: Department of Computer Science Department of Computer Science University of Utah University of Utah  
Abstract: We investigate new techniques for reducing the memory requirements of an on-the-fly model checking tool that employs explicit enumeration. Two techniques are studied in depth: exploiting symmetries in the model, and exploiting sequential regions in the model. These techniques can result in a significant reduction in memory requirements, and often find progress violations at much lower stack depths. Both techniques have been implemented as part of the SPIN verifier, a widely used on-the-fly model-checking tool. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Felice Balarin and Alberto L. Sangiovanni-Vincentelli. </author> <title> On the automatic computation of network invariants. </title> <booktitle> In Computer-Aided Verification, </booktitle> <pages> pages 234-246, </pages> <address> Stanford, CA, </address> <month> June </month> <year> 1994. </year>
Reference: [2] <author> E. Clarke, T. Filkorn, and S. Jha. </author> <title> Exploiting symmetry in temporal logic model checking. </title> <booktitle> In Computer Aided Verifcation, </booktitle> <pages> pages 450-463, </pages> <address> Elounda, Greece, </address> <month> June </month> <year> 1993. </year>
Reference: [3] <author> Edmund Clarke, Allen Emerson, and Arvind Sistla. </author> <title> Automatic verification of finite-state concurent systems using temporal logic. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference: [4] <author> C. Courcoubetis, M. Vardi, P. Wolper, and M. Yan-nakakis. </author> <title> Memory efficient algorithms for the verification of temporal properties. </title> <booktitle> In Computer-Aided Verification, </booktitle> <pages> pages 233-242, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: We do not advance any claims as far as checking for progress or accept loops with fairness (either weak or strong) imposed. In our current work, we are working on modifying a version of the fairness algorithm described in <ref> [4] </ref>. IV. State Saving by Exploiting Sequentiality The depth-first traversal method of SPIN is currently implemented in such a way that it saves newly generated states on the stack. However, in purely sequential regions of execution (in which only one thread is enabled), such state-savings are un-necessary.
Reference: [5] <author> E. Allen Emerson and Kedar S. Namjoshi. </author> <title> Reasoning about rings. </title> <booktitle> In Proc. of the 21st Annual Symposium on the Principles of Prog. Langs. ACM, </booktitle> <year> 1994. </year>
Reference: [6] <author> John V. Guttag, Ellis Horowitz, and David R. Musser. </author> <title> Abstract data types and software validation. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 1048-1064, </pages> <month> De-cember </month> <year> 1978. </year>
Reference: [7] <author> Z. Har'El and R.P. Kurshan. </author> <title> Software for analysis of coordination. </title> <booktitle> In Proc. Int'l Conference on System Science, </booktitle> <year> 1988. </year>
Reference: [8] <author> Gerard Holzmann. </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference: [9] <author> Alan Hu, David Dill, Andreas Drexler, and Han Yang. </author> <title> Higher-level specification and verification with BDDs. </title> <booktitle> In Computer Aided Verification, </booktitle> <pages> pages 82-96, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1992. </year>
Reference: [10] <author> C. Norris Ip and David L. Dill. </author> <title> Better verification through symmetry. </title> <booktitle> In Int'l Conference on Computer Hardware Description Language, </booktitle> <year> 1993. </year>
Reference-contexts: Conclusions and Future Work In conclusion, we present a symmetry exploitation procedure that helps combat the state-explosion problem in verifying concurrent systems through explicit enumeration based model-checking. Our technique is more general than scalar sets <ref> [10] </ref> or network invariants [12]. While not as general as homomorphic reductions [11], it is simpler, and straightforward to apply. We also present a technique to exploit sequential regions of a protocol to effect further space savings. A version of the verifier SPIN incorporating these techniques has been developed.
Reference: [11] <author> Robert P. Kurshan. </author> <title> Formal verification of coordinating processes. </title> <institution> Mathematics Research Center, AT&T Bell Labs Murray Hill, NJ, </institution> <year> 1994. </year>
Reference-contexts: Conclusions and Future Work In conclusion, we present a symmetry exploitation procedure that helps combat the state-explosion problem in verifying concurrent systems through explicit enumeration based model-checking. Our technique is more general than scalar sets [10] or network invariants [12]. While not as general as homomorphic reductions <ref> [11] </ref>, it is simpler, and straightforward to apply. We also present a technique to exploit sequential regions of a protocol to effect further space savings. A version of the verifier SPIN incorporating these techniques has been developed.
Reference: [12] <author> Kenneth L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1993. </year>
Reference-contexts: Conclusions and Future Work In conclusion, we present a symmetry exploitation procedure that helps combat the state-explosion problem in verifying concurrent systems through explicit enumeration based model-checking. Our technique is more general than scalar sets [10] or network invariants <ref> [12] </ref>. While not as general as homomorphic reductions [11], it is simpler, and straightforward to apply. We also present a technique to exploit sequential regions of a protocol to effect further space savings. A version of the verifier SPIN incorporating these techniques has been developed.
References-found: 12

