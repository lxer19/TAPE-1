URL: http://www-unix.mcs.anl.gov/prism/lib/techsrc/wn41.ps.Z
Refering-URL: http://www-unix.mcs.anl.gov/prism/lib/tech.html
Root-URL: http://www.mcs.anl.gov
Email: lederman@cs.wisc.edu  quintana@inf.uji.es  xiaobai@cs.duke.edu  jason.wu@boeing.com  
Title: PARALLEL SPECTRAL DIVISION VIA THE GENERALIZED MATRIX SIGN FUNCTION Parallel spectral division with the matrix
Author: STEVEN HUSS-LEDERMAN, ENRIQUE S. QUINTANA-ORT I, XIAOBAI SUN, YUAN-JYE Y. WU, 
Keyword: Key words. Generalized nonsymmetric eigenproblem, spectral division, matrix sign function, generalized Newton iteration, parallel distributed memory computers.  
Note: Short title:  
Address: Madison, 1210 W. Dayton St. Madison, WI 53706;  Jaime I, 12.080-Castellon (Spain)  Durham, NC 27708-0129  POB 3707, MS 7L-22, Seattle, WA 98124  
Affiliation: Computer Sciences Dept. University of Wisconsin at  Dept. de Informatica Universidad  Dept. of Computer Science Duke University,  Mathematics and Engineering Analysis Phantom Works, The Boeing Company  
Abstract: In this paper we demonstrate the parallelism of the spectral division via the matrix sign function for the generalized nonsymmetric eigenproblem. We employ the so-called generalized Newton iterative scheme in order to compute the sign function of a matrix pair. A recent study has allowed considerable reduction (by 75%) in the computational cost of this iteration, making this approach competitive when compared to the traditional QZ algorithm. The matrix sign function is thus revealed as an efficient and reliable spectral division method for applications that only require partial information of the eigenspectrum. For applications which require complete information of the eigendis-tribution, the matrix sign function can be used as an initial divide-and-conquer method, combined with the QZ algorithm for the last stages. The experimental results on an IBM SP2 multicomputer demonstrate the parallel performance (efficiency around 60-80%) and scalability of this approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <note> LAPACK User's Guide. SIAM, </note> <year> 1995. </year>
Reference-contexts: Unlike the QZ algorithm, the generalized Newton iteration is attractive for high performance and parallel computing in that the building blocks of the iteration are mainly triangular factorizations and matrix multiplications. High performance software for such matrix computations is available on a broad class of high performance computers <ref> [1] </ref>, and especially on parallel distributed memory computers [7,23]. 2. The parallelization of the QZ algorithm may be feasible but no parallel imple mentation exists so far. 3. <p> Experimental performance analysis All our experiments were performed on an ibm sp3 platform using ieee double precision arithmetic (" 2; 2 fi 10 16 ), the native BLAS (essl library), and LAPACK <ref> [1] </ref>. We also used available implementations of the parallel libraries BLACS, PBLAS, ScaLA-PACK, and PLAPACK for this architecture. The communication in these libraries was implemented on top of MPI. The ibm sp3 platform we used consists of 80 p2sc rs/6000 nodes at 120 MHz, and 256 MBytes RAM per node.
Reference: [2] <author> Z. Bai and J. Demmel. </author> <title> Using the matrix sign function to compute invariant subspaces. </title> <journal> SIAM J. Matrix Anal. Appl., </journal> <volume> 19(1) </volume> <pages> 205-225, </pages> <year> 1998. </year>
Reference-contexts: Note that this subspace extraction only requires one generalized Newton iteration for computing both the left and right-deflating subspaces and represents a reduction of 50% in the cost of previously proposed algorithms <ref> [2] </ref>. A variant of the generalized Newton iteration has been recently proposed in [22] which further reduces the cost.
Reference: [3] <author> Z. Bai, J. W. Demmel, J. Dongarra, A. Petitet, and H. Robinson. </author> <title> The spectral decomposition of nonsymmetric matrices on distributed memory multiprocessors. </title> <journal> SIAM J. Sci. Comp., </journal> <volume> 18 </volume> <pages> 1446-1461, </pages> <year> 1997. </year>
Reference-contexts: In this paper we revisit a spectral division method based on the generalized Newton iteration for the matrix sign function. Parallel implementations of the Newton iteration for the standard eigenproblem have been previously analyzed in <ref> [3] </ref>. The application of the generalized Newton iteration to a Hamiltonian eigenproblem has been studied, among others, in [10].
Reference: [4] <author> P. Benner, A.J. Laub, and V. Mehrmann. </author> <title> A collection of benchmark examples for the numerical solution of algebraic Riccati equations I: Continuous-time case. </title> <type> Technical Report SPC 95 22, </type> <institution> Fakultat fur Mathematik, TU Chemnitz, </institution> <address> 09107 Chemnitz, Germany, </address> <year> 1995. </year> <note> http://www.tu-chemnitz.de/sfb393/spc95pr.html. </note>
Reference-contexts: The first problem arises in the control of a string of high speed vehicles (hereafter, chsv); the second problem is constructed with an a priori known circulant solution matrix (hereafter, circ). For a description of these examples see, e.g., <ref> [4] </ref>. In both examples, E = I n=2 and a standard eigenvalue problem (H std ; I n ) is involved.
Reference: [5] <author> P. Benner and E. S. Quintana-Orti. </author> <title> Solving stable generalized Lyapunov equations with the matrix sign function. </title> <type> Technical Report SFB393/97-23, </type> <institution> TU Chemnitz-Zwickau, </institution> <year> 1997. </year>
Reference: [6] <author> C. H. Bischof and G. Quintana-Orti. </author> <title> Computing rank-revealing QR factorizations of dense matrices. </title> <type> Technical Report MCS-P559-0196, </type> <institution> MCS Division, Argonne National Laboratory, </institution> <year> 1996. </year> <note> To appear in ACM Trans. Math. Soft. </note>
Reference: [7] <author> L. S. Blackford, J. Choi, A. Cleary, E. D'Azevedo, J. Demmel, I. Dhillon, J. Dongarra, S. Hammarling, G. Henry, A. Petitet, K. Stanley, D. Walker, and R. C. Whaley. </author> <title> ScaLAPACK user's guide. </title> <publisher> SIAM, </publisher> <year> 1997. </year>
Reference-contexts: In Section 3 we outline how to obtain accurate deflating subspaces with the matrix sign function. In Section 4 we briefly describe our parallel algorithms and report the experimental results using two different parallel numerical algebra libraries: ScaLAPACK <ref> [7] </ref> and PLAPACK [23]. Finally, in Section 5 we present our concluding remarks. We use the following notation and conventions in addition to what is introduced so far. We denote by R (X) and N (X) the range space and the null space of matrix X, respectively. <p> Once the criterion is satisfied, due to the quadratic convergence, two additional iterations are carried out to guarantee the maximum attainable accuracy. We have developed two implementations of the spectral division algorithms (GGNEWT and GBNEWT), using two different parallel matrix algebra libraries: ScaLAPACK R2.0 <ref> [7] </ref> and PLAPACK R1.2 [23]. We name these routines as PDGGNEWT and PDGBNEWT for those based on ScaLAPACK and PLA Ggnewt and PLA Gbnewt for those based on PLAPACK. The implementations using the routines in both libraries obtained the same numerical results.
Reference: [8] <author> D. Boley and R. Maier. </author> <title> A parallel QR algorithm unsymmetric eigenvalue problem. </title> <type> Technical Report TR-88-12, </type> <institution> Univ. of Minn. at Minneapolis, Dept. of Computer Science, </institution> <year> 1988. </year>
Reference: [9] <author> T. Chan. </author> <title> Rank-revealing QR factorizations. </title> <journal> Lin. Alg. Appl., </journal> 88/89:67-82, 1987. 
Reference: [10] <author> J. Gardiner and A. J. Laub. </author> <title> A generalization of the matrix sign function solution for algebraic Riccati equations. </title> <journal> Int. J. Control, </journal> <volume> 44 </volume> <pages> 823-832, </pages> <year> 1986. </year>
Reference-contexts: Parallel implementations of the Newton iteration for the standard eigenproblem have been previously analyzed in [3]. The application of the generalized Newton iteration to a Hamiltonian eigenproblem has been studied, among others, in <ref> [10] </ref>. Our renewed interest is motivated by a recent paper [22] that reports two improvements of this approach: a reduction of the cost of the generalized Newton iteration by 75% and an important improvement of the numerical accuracy. Our paper is structured as follows. <p> We denote by C and C + the open left and the open right complex plane, respectively. 2. The Generalized Newton Iteration for the Spectral Division The matrix sign function was first defined by Roberts [19] and extended for matrix pairs by Gardiner and Laub <ref> [10] </ref>. A more recent definition [22] of the matrix sign function can be stated as follows. Consider a matrix pair (A; B) with no eigenvalues on the imaginary axis, and B nonsingular. <p> The definition can also be generalized for the case in which B is a singular matrix [21]. The matrix sign function of a matrix pair can be computed by means of the generalized Newton iteration <ref> [10] </ref> A k+1 = (A k + BA 1 The iteration converges to A 1 = B sign (B 1 A) = sign (AB 1 )B iff (A; B) has no eigenval-ues on the imaginary axis and B is nonsingular. <p> The algorithm includes the generalized Newton iteration, an acceleration technique based on the determinant of the matrix pair <ref> [10] </ref>, and a stopping criterion. The orthonormal bases for the left and right-deflating subspaces are obtained by using a Schur deflation technique proposed in [21].
Reference: [11] <author> G. A. Geist, R. C. Ward, G. J. Davis, and R. E. Funderlic. </author> <title> Finding eigenvalues and eigenvectors of unsymmetric matrices using a distributed memory multiprocessor. </title> <journal> Parallel Computing, </journal> <volume> 13(2) </volume> <pages> 199-209, </pages> <year> 1988. </year>
Reference: [12] <author> G. Golub and C. Van Loan. </author> <title> Matrix Computations. </title> <publisher> The Johns Hopkins University Press, </publisher> <year> 1989. </year>
Reference-contexts: The computation of the generalized Schur form of a matrix pair with real entries by means of the QZ algorithm requires approximately 84n 3 flops (floating-point arithmetic operations). Combined with a reordering routine, this algorithm also allows the computation of orthonormal bases for deflating subspaces of (A; B) <ref> [12] </ref>. A subspace X is a right-deflating subspace of (A; B) if dim (AX + BX ) dim (X ), where the equality holds if (A; B) is regular [12]. A left-deflating subspace of (A; B) is a right-deflating subspace of (A h ; B h ). <p> Combined with a reordering routine, this algorithm also allows the computation of orthonormal bases for deflating subspaces of (A; B) <ref> [12] </ref>. A subspace X is a right-deflating subspace of (A; B) if dim (AX + BX ) dim (X ), where the equality holds if (A; B) is regular [12]. A left-deflating subspace of (A; B) is a right-deflating subspace of (A h ; B h ). <p> The parallelization of the preceding methods on distributed memory, parallel computers has received considerable attention in the last few years due to the large number of applications where partial or total information about the eigendistribution is required. Parallel implementations of the double implicit-shift QR algorithm <ref> [12] </ref> (a simpler "variant" of the QZ algorithm for the standard eigenproblem, where B = I n , the identity 2 matrix) have been presented, among others, in [8,11,20]. A recent study in [13] reports the lack of scalability of this algorithm.
Reference: [13] <author> G. Henry and R. van de Geijn. </author> <title> Parallelizing the QR algorithm for the unsymmetric algebraic eigenvalue problem: Myths and reality. </title> <journal> SIAM J. Sci. Comp., </journal> <volume> 17 </volume> <pages> 870-883, </pages> <year> 1996. </year>
Reference-contexts: Parallel implementations of the double implicit-shift QR algorithm [12] (a simpler "variant" of the QZ algorithm for the standard eigenproblem, where B = I n , the identity 2 matrix) have been presented, among others, in [8,11,20]. A recent study in <ref> [13] </ref> reports the lack of scalability of this algorithm. Moreover, a complex data layout and large matrices are required to obtain acceptable performance. A generalization of the double implicit-shift QR is employed in [14].
Reference: [14] <author> G. Henry, D. Watkins, and J. Dongarra. </author> <title> A parallel implementation of the nonsymmetric QR algorithm for distributed memory architectures. </title> <type> Technical Report CS-97-352, </type> <institution> University of Tenneesee at Knoxville, </institution> <year> 1997. </year>
Reference-contexts: A recent study in [13] reports the lack of scalability of this algorithm. Moreover, a complex data layout and large matrices are required to obtain acceptable performance. A generalization of the double implicit-shift QR is employed in <ref> [14] </ref>. This algorithm relies on the use of multishift techniques, which results in a more expensive algorithm, to avoid idle processors and improve the performace of the algorithm. The final algorithm is reported as non-scalable and a large number of simultaneous bulges are required to obtain high performance.
Reference: [15] <author> P. Hong and C. T. Pan. </author> <title> The rank-revealing QR and SVD. </title> <journal> Math. Comp., </journal> <volume> 58 </volume> <pages> 213-232, </pages> <year> 1992. </year>
Reference: [16] <author> A. N. Malyshev. </author> <title> Parallel algorithm for solving some spectral problems of linear algebra. </title> <journal> Lin. Alg. Appl., </journal> 188/189:489-520, 1993. 
Reference-contexts: Our solution to this case relies in the use of an inverse-free spectral disivion method due to Malyshev <ref> [16] </ref>. Malyshev's iteration allows the spectral division of a matrix pair (A; B) along the unit circle. By using a Mobius transform (A + B; A B), the spectrum is divided along the imaginary axis (as in the generalized Newton iteration).
Reference: [17] <author> C. Moler and G. W. Stewart. </author> <title> An algorithm for generalized matrix eigenvalue problems. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 10 </volume> <pages> 241-256, </pages> <year> 1973. </year>
Reference-contexts: We denote by (A; B) the generalized eigenspectrum (or set of generalized eigenvalues) of (A; B). Hereafter we will omit the term "generalized" when refered to eigenspectrum, eigenproblems, and eigenvalues. In serial computations, the QZ algorithm <ref> [17] </ref> is the traditional method for solving eigenproblems.
Reference: [18] <author> E. S. Quintana-Orti, X. Sun G. Quintana Orti, and R. van de Geijn. </author> <title> Efficient matrix inversion via Gauss-Jordan elimination and its parallelization. </title> <type> Technical Report TR-98-19, </type> <institution> Dept. of Computer Sciences, The University of Texas at Austin, </institution> <year> 1998. </year>
Reference-contexts: In this implementation we also employed a faster matrix inversion algorithm based on Gauss-Jordan transformations <ref> [18] </ref>. This algorithm is reported to have the same numerical properties and computational cost as the traditional inversion via LU factorization. <p> The efficiency for algorithm PLA Gbnewt is higher, around 76-87%. Finally, the superior performance of the implementations based on PLAPACK over those using ScaLAPACK can be explained as the former employ a different, more efficient matrix inversion algorithm described in <ref> [18] </ref>. However, the same algorithm can be implemented using ScaLAPACK kernels and we honestly believe that, in such case, both ScaLAPACK and PLAPACK implementations would obtain nearly similar results. 5.
Reference: [19] <author> J. Roberts. </author> <title> Linear model reduction and solution of algebraic Riccati equations by the use of the sign function. </title> <journal> Int. J. Control, </journal> <volume> 32 </volume> <pages> 677-687, </pages> <year> 1980. </year> <month> 13 </month>
Reference-contexts: We denote by C and C + the open left and the open right complex plane, respectively. 2. The Generalized Newton Iteration for the Spectral Division The matrix sign function was first defined by Roberts <ref> [19] </ref> and extended for matrix pairs by Gardiner and Laub [10]. A more recent definition [22] of the matrix sign function can be stated as follows. Consider a matrix pair (A; B) with no eigenvalues on the imaginary axis, and B nonsingular.
Reference: [20] <author> G. W. Stewart. </author> <title> A parallel implementation of the QR algorithm. </title> <journal> Parallel Computing, </journal> <volume> 5 </volume> <pages> 187-196, </pages> <year> 1987. </year>
Reference: [21] <author> X. Sun and E. S. Quintana-Orti. </author> <title> Spectral division methods for block generalized Schur decompositions. </title> <type> Technical report, </type> <note> PRISM Working Note #32, 1996. http://www-unix.mcs.anl.gov/prism. </note>
Reference-contexts: The definition can also be generalized for the case in which B is a singular matrix <ref> [21] </ref>. <p> The algorithm includes the generalized Newton iteration, an acceleration technique based on the determinant of the matrix pair [10], and a stopping criterion. The orthonormal bases for the left and right-deflating subspaces are obtained by using a Schur deflation technique proposed in <ref> [21] </ref>. Note that this subspace extraction only requires one generalized Newton iteration for computing both the left and right-deflating subspaces and represents a reduction of 50% in the cost of previously proposed algorithms [2]. <p> Numerical tools exist to obtain reliable estimates, with a low computational cost, of the condition number of a matrix. We consider first the case in which only A is well-conditioned. The analysis in <ref> [21] </ref> shows that the sequence of A k produced by the generalized Newton iteration converges to A 1 = sign (A; B) def 0 B 22 X 1 : Stage Flop count GGNEWT GBNEWT Bidiagonalization of B - 8n 3 =3 Transformation A 0 = U T AV - 4n 3 <p> By using a Mobius transform (A + B; A B), the spectrum is divided along the imaginary axis (as in the generalized Newton iteration). Malyshev's iteration has two advantages: The iteration is completely inverse-free, and there are accurate subspace extraction schemes for the converged matrix pair <ref> [21] </ref>. To avoid the high computational cost of this iteration (40n 3 =3 flops per iteration), our approach consists in stopping the generalized Newton iteration when the current matrix pair (A 1=2 ; B) is "close enough" to the converged matrix pair (A 1 ; B).
Reference: [22] <author> X. Sun and E. S. Quintana-Orti. </author> <title> The generalized Newton iteration for the matrix sign function. </title> <type> Technical report, </type> <note> PRISM Working Note #36, 1997. http://www-unix.mcs.anl.gov/prism. </note>
Reference-contexts: Parallel implementations of the Newton iteration for the standard eigenproblem have been previously analyzed in [3]. The application of the generalized Newton iteration to a Hamiltonian eigenproblem has been studied, among others, in [10]. Our renewed interest is motivated by a recent paper <ref> [22] </ref> that reports two improvements of this approach: a reduction of the cost of the generalized Newton iteration by 75% and an important improvement of the numerical accuracy. Our paper is structured as follows. <p> Our paper is structured as follows. In Section 2 we review the generalized Newton iteration for the matrix sign function and its relation with the computation of deflating subspaces. In that section we also introduce two modifications, presented in <ref> [22] </ref>, which reduce the cost of the generalized Newton iteration by 75%. In Section 3 we outline how to obtain accurate deflating subspaces with the matrix sign function. <p> The Generalized Newton Iteration for the Spectral Division The matrix sign function was first defined by Roberts [19] and extended for matrix pairs by Gardiner and Laub [10]. A more recent definition <ref> [22] </ref> of the matrix sign function can be stated as follows. Consider a matrix pair (A; B) with no eigenvalues on the imaginary axis, and B nonsingular. <p> Note that this subspace extraction only requires one generalized Newton iteration for computing both the left and right-deflating subspaces and represents a reduction of 50% in the cost of previously proposed algorithms [2]. A variant of the generalized Newton iteration has been recently proposed in <ref> [22] </ref> which further reduces the cost. <p> For a comparison of the performance of these algorithms vs. the QZ algo rithm on serial architectures and a study of the accuracy, see <ref> [22] </ref>. 4.1. Implementation of parallel algorithms We implemented two different spectral division algorithms: - GGNEWT. The generalized Newton iteration for the matrix sign function and sub space extraction, as described in Fig. 1. - GBNEWT.
Reference: [23] <author> R. van de Geijn. </author> <title> Using PLAPACK. </title> <publisher> The MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: In Section 3 we outline how to obtain accurate deflating subspaces with the matrix sign function. In Section 4 we briefly describe our parallel algorithms and report the experimental results using two different parallel numerical algebra libraries: ScaLAPACK [7] and PLAPACK <ref> [23] </ref>. Finally, in Section 5 we present our concluding remarks. We use the following notation and conventions in addition to what is introduced so far. We denote by R (X) and N (X) the range space and the null space of matrix X, respectively. <p> Once the criterion is satisfied, due to the quadratic convergence, two additional iterations are carried out to guarantee the maximum attainable accuracy. We have developed two implementations of the spectral division algorithms (GGNEWT and GBNEWT), using two different parallel matrix algebra libraries: ScaLAPACK R2.0 [7] and PLAPACK R1.2 <ref> [23] </ref>. We name these routines as PDGGNEWT and PDGBNEWT for those based on ScaLAPACK and PLA Ggnewt and PLA Gbnewt for those based on PLAPACK. The implementations using the routines in both libraries obtained the same numerical results.
Reference: [24] <author> A. Varga. </author> <title> On stabilization methods of descriptor systems. </title> <journal> System Control Let., </journal> <volume> 24 </volume> <pages> 133-138, </pages> <year> 1995. </year>
References-found: 24

