URL: http://burton.cs.ucla.edu/tech-docs/sigmod.ps
Refering-URL: http://burton.cs.ucla.edu/tech-docs/sigmod/sigmod.html
Root-URL: http://www.cs.ucla.edu
Title: The Design and Implementation of CoBase  
Author: W. W. Chu M. A. Merzbacher L. Berkovich 
Address: Los Angeles, CA 90024  
Affiliation: Computer Science Department University of California  
Note: in Proceedings of ACM SIGMOD '93, Washington D.C.  
Abstract: CoBase, a cooperative database, is a new type of distributed database that integrates knowledge base technology with database systems to provide cooperative (approximate and conceptual) query answering. Based on the database schema and application characteristics, data are organized into conceptual (type abstraction) hierarchies. The higher levels of the hierarchy provide a more abstract data representation than the lower levels. Generalization (moving up in the hierarchy), specialization (moving down in the hierarchy) and association (moving between hierarchies) are the three key operations in deriving cooperative query answers. Relaxation in CoBase can also be specified explicitly in the query by the user or calling program through cooperative operators. We have extended SQL to CSQL by adding cooperative primitives. We describe the CoBase software implementation, including an inter-module data protocol that provides a uniform module interface. This modular approach provides flexibility in adding new relaxation modules and simplifies software maintenance. CoBase uses LOOM as its knowledge representation and inference system and supports relational data bases (e.g. Oracle and Sybase). We have demonstrated the feasibility and functionality of CoBase on top of a Transportation Database. The CoBase methodology has also been adopted in the multimedia medical distributed database project at UCLA, which provides approximate query answers to medical queries. fl Supported by DARPA contract N00174-91-C-0107
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Arens and C. Knoblock. </author> <title> Planning and reformulating queries for semantically-modelled mul-tidatabase systems. </title> <booktitle> In Proceedings First International Conference on Information and Knowledge Management (CIKM), </booktitle> <pages> pages 92-101, </pages> <address> Baltimore, Maryland, </address> <year> 1992. </year>
Reference-contexts: Oracle and Sybase) and LIM (the Loom Interface Module) [15, 11]. Access to distributed databases is made possible through SIMS, a transparent multi-database access layer <ref> [1] </ref>. We have demonstrated the feasibility and functionality of CoBase on top of the Transportation Database and it is a part of the Data Management provision of the Transportation Planning Initiative.
Reference: [2] <author> A. F. Cardenas, I. T. Ieong, R. Barker, R. K. Taira, and C. M. Breant. </author> <title> The knowledge-based object-oriented picquery+ language. </title> <journal> to appear in IEEE Transactions on Knowledge and Data Engineering, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: We have applied the CoBase technology to the medical imaging data base <ref> [3, 2] </ref>. The TAHs (see Figure 4) are constructed based on the available application domain and medical knowledge available in the textbooks and/or literature.
Reference: [3] <author> W. W. Chu, A. F. Cardenas, and R. K. Taira. </author> <title> A knowledge-based multimedia medical distributed database system | KMeD. </title> <type> Technical Report 93-005, </type> <institution> UCLA Computer Science Department, </institution> <year> 1993. </year>
Reference-contexts: We have applied the CoBase technology to the medical imaging data base <ref> [3, 2] </ref>. The TAHs (see Figure 4) are constructed based on the available application domain and medical knowledge available in the textbooks and/or literature.
Reference: [4] <author> W. W. Chu and Q. Chen. </author> <title> Neighborhood and associative query answering. </title> <journal> Journal of Intelligent Information Systems, </journal> 1(3/4):355-382, 1992. 
Reference-contexts: To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) <ref> [4, 6, 7, 12] </ref> for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1).
Reference: [5] <author> W. W. Chu and Q. Chen. </author> <title> Pattern-based data and knowledge integration for intelligent query answering. Heuristics, </title> <journal> Internation Journal of Knowledge Engineering, special issue on Intelligent Information Systems, </journal> <year> 1993. </year>
Reference-contexts: After the query is executed, the answer information is gathered with the query conditions, user profile and application constraints. This joint information is matched against rules from the knowledge base to identify relevant associative information <ref> [5] </ref>. The rules can include any CoBase construct, such as conceptual conditions (e.g. runway length ft = short) or explicit cooperative operations (city near-to `Bizerte').
Reference: [6] <author> W. W. Chu and Q. Chen. </author> <title> A structured approach for cooperative query answering. </title> <journal> to appear in IEEE Transactions on Knowledge and Data Engineering, </journal> <year> 1994. </year>
Reference-contexts: To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) <ref> [4, 6, 7, 12] </ref> for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1).
Reference: [7] <author> W. W. Chu, Q. Chen, and R. Lee. </author> <title> Cooperative query answering via type abstraction hierarchy. In S.M. </title> <editor> Deen, editor, </editor> <booktitle> Cooperating Knowledge Based Systems, </booktitle> <pages> pages 271-292. </pages> <publisher> North-Holland, Elsevier Science Publishing Co., Inc., </publisher> <year> 1991. </year>
Reference-contexts: To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) <ref> [4, 6, 7, 12] </ref> for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1).
Reference: [8] <author> W. W. Chu and K. Chiang. </author> <title> A distribution sensitive clustering method for numerical values. </title> <type> Technical Report 93-0006, </type> <institution> UCLA Computer Science Department, </institution> <year> 1993. </year>
Reference-contexts: Thus, our proposed structured approach to cooperative query answering is scalable to problems with large knowledge and data bases. We are currently researching how to generate TAH automatically from databases when given an application context and a set of queries <ref> [16, 8] </ref>. Although CoBase uses relaxation when no answer is found, query modification may also be specified explicitly by the user through a set of cooperative operations with a pre-specified relaxation range and specification.
Reference: [9] <author> W. W. Chu, I. T. Ieong, R. K. Taira, and C. M. Breant. </author> <title> A temporal evolutionary object-oriented data model and its query language for medical image management. </title> <booktitle> In Proceedings of the 18th VLDB Conference, </booktitle> <address> Vancouver, British Columbia, </address> <year> 1992. </year>
Reference-contexts: The queries asked are often conceptual and not precisely defined. We need to use knowledge about the application (e.g. age class, ethnic class, disease class, bone age etc.), user profile and query context to answer such queries <ref> [9] </ref>. Further, exact matching of features is very difficult, if not impossible.
Reference: [10] <author> F. Cuppens and R. Demolombe. </author> <title> Cooperative answering: a methodology to provide intelligent access to databases. </title> <booktitle> In Proc. of the 2nd international conference on expert database systems, </booktitle> <year> 1989. </year>
Reference-contexts: Finally, we discuss the technology transfer of CoBase to transportation and medical database applications. 2 A Structured Approach Although knowledge about the application domain can be expressed as a set of logical rules, such a rule-based approach lacks a systematic organization to guide the query transformation process <ref> [10, 13] </ref>. To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) [4, 6, 7, 12] for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1). <p> CoBase uses generalization (moving up the TAH) and specialization (moving down the TAH) to modify the query and broaden the search space. Type Abstraction Hierarchies provide a structured way for query modification which is different from the rule-based approach <ref> [10] </ref>. Thus, our proposed structured approach to cooperative query answering is scalable to problems with large knowledge and data bases. We are currently researching how to generate TAH automatically from databases when given an application context and a set of queries [16, 8].
Reference: [11] <author> T. W. Finin, D. P. McKay, </author> <title> and A O'Hare. The intelligent database interface. </title> <booktitle> Proceedings of the 7th National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1990. </year>
Reference-contexts: Oracle and Sybase) and LIM (the Loom Interface Module) <ref> [15, 11] </ref>. Access to distributed databases is made possible through SIMS, a transparent multi-database access layer [1]. We have demonstrated the feasibility and functionality of CoBase on top of the Transportation Database and it is a part of the Data Management provision of the Transportation Planning Initiative.
Reference: [12] <author> T. Gaasterland, P. Godfrey, and J. Minker. </author> <title> Relaxation as a platform of cooperative answering. </title> <booktitle> In Proceedings First International Workshop on Nonstandard Queries and Answers, </booktitle> <address> Toulouse, France, </address> <year> 1991. </year>
Reference-contexts: To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) <ref> [4, 6, 7, 12] </ref> for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1).
Reference: [13] <author> A. Hemerly, M. Casanova, and A. Furtado. </author> <title> Cooperative behavior through request modification. </title> <type> Technical report, </type> <institution> IBM Brasil, Brazil, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Finally, we discuss the technology transfer of CoBase to transportation and medical database applications. 2 A Structured Approach Although knowledge about the application domain can be expressed as a set of logical rules, such a rule-based approach lacks a systematic organization to guide the query transformation process <ref> [10, 13] </ref>. To remedy this problem, we use the notion of a type abstraction hierarchy (TAH) [4, 6, 7, 12] for providing an efficient and organized framework for cooperative query processing. Type abstraction emphasizes the abstract representation of object instances (see Figure 1).
Reference: [14] <author> R. MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <booktitle> in Principles of Semantic Networks: Explorations in the Representation of Knowledge, </booktitle> <year> 1991. </year> <note> J. Sowa, ed. </note>
Reference-contexts: The relaxation manager can change its relaxation behavior based on explicit user requirements such as not-relaxable and relaxation-order. and relaxation ranges for the explicit cooperators in a LOOM <ref> [14] </ref> knowledge base. When CoBase asks queries, it can either use the Loom Interface Module (LIM) [15], or directly query the underlying relational database (e.g. Oracle and SyBase). CoBase's control mechanisms include a graphical user interface (GUI), Explanation System and Relaxation Manager.
Reference: [15] <author> D. P. McKay, J. Pastor, and T. W. Finin. View-concepts: </author> <title> Knowledge-based access to databases. </title> <booktitle> In Proceedings First International Conference on Information and Knowledge Management (CIKM), </booktitle> <pages> pages 84-91, </pages> <address> Baltimore, Maryland, </address> <year> 1992. </year>
Reference-contexts: The relaxation manager can change its relaxation behavior based on explicit user requirements such as not-relaxable and relaxation-order. and relaxation ranges for the explicit cooperators in a LOOM [14] knowledge base. When CoBase asks queries, it can either use the Loom Interface Module (LIM) <ref> [15] </ref>, or directly query the underlying relational database (e.g. Oracle and SyBase). CoBase's control mechanisms include a graphical user interface (GUI), Explanation System and Relaxation Manager. The Relaxation Manager controls the search for approximate answers by directing the individual relaxation modules. <p> Oracle and Sybase) and LIM (the Loom Interface Module) <ref> [15, 11] </ref>. Access to distributed databases is made possible through SIMS, a transparent multi-database access layer [1]. We have demonstrated the feasibility and functionality of CoBase on top of the Transportation Database and it is a part of the Data Management provision of the Transportation Planning Initiative.
Reference: [16] <author> M. Merzbacher and W. W. Chu. </author> <title> Instance-based clustering for databases. </title> <booktitle> In ASIS Third Workshop on Classification Research, </booktitle> <pages> pages 101-114. </pages> <publisher> American Society for Information Science, </publisher> <month> Octo-ber </month> <year> 1992. </year>
Reference-contexts: Thus, our proposed structured approach to cooperative query answering is scalable to problems with large knowledge and data bases. We are currently researching how to generate TAH automatically from databases when given an application context and a set of queries <ref> [16, 8] </ref>. Although CoBase uses relaxation when no answer is found, query modification may also be specified explicitly by the user through a set of cooperative operations with a pre-specified relaxation range and specification.
Reference: [17] <author> A. Motro. </author> <title> FLEX: A tolerant and cooperative user interface to databases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(2) </volume> <pages> 231-245, </pages> <year> 1990. </year>
Reference-contexts: select airport name from airports, geoloc where country state name long = 'Tunisia' and geoloc.geo code = airports.geo code Based on the attributes runway length ft and run-way width ft and their corresponding weights, CoBase compares each of the query answers with 'Bizerte' by computing the weighted mean squared error <ref> [17] </ref>. The top n (a pre-specified answer set size) answers, ranked by similarity, are presented. 4 Implementation The Cobase control flow chart is shown in Figure 2. When a query is presented to CoBase, the system first relaxes any explicit cooperative operators in the query.
References-found: 17

