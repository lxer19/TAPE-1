URL: ftp://iamftp.unibe.ch/pub/TechReports/1996/iam-96-012.ps.gz
Refering-URL: 
Root-URL: 
Title: Fast Error-correcting Graph Isomorphism Based on Model Precompilation  
Author: B.T. Messmer and H. Bunke 
Date: September 1996  
Address: Bern, Neubruckstr. 10, Bern, Schweiz  
Affiliation: Institut fur Informatik und angewandte Mathematik, Universitat  
Pubnum: IAM-96-012  
Abstract-found: 0
Intro-found: 1
Reference: [AD93] <author> H.A. Almohamad and S.O. Duffuaa. </author> <title> A linear programming approach for the weighted graph matching problem. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence PAMI, </journal> <volume> 5 </volume> <pages> 522-525, </pages> <year> 1993. </year>
Reference-contexts: Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search [BA83, SH81, Ull76], probabilistic relaxation [KCP92], simulated annealing [HHVN90] or linear programming <ref> [AD93] </ref>. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete. Combinato- rial search methods such as A fl are guaranteed to always find the optimal solution.
Reference: [BA83] <author> H. Bunke and G. Allerman. </author> <title> Inexact graph matching for structural pat-tern recognition. </title> <journal> Pattern Recognition Letters 1, </journal> <volume> 4 </volume> <pages> 245-253, </pages> <year> 1983. </year>
Reference-contexts: Therefore, perfect correspondences between the models and the input do frequently not exist. Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search <ref> [BA83, SH81, Ull76] </ref>, probabilistic relaxation [KCP92], simulated annealing [HHVN90] or linear programming [AD93]. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete. <p> Similarly to the string matching problem where edit operations are used to define the string edit distance [WF74], we define a graph edit distance, which is based on the idea of correcting distortions in an input graph by means of edit operations <ref> [BA83] </ref>. The graph edit operations are used to modify either the model or the input graph until there exists a graph isomorphism between the model and the input. <p> In the first two experiments, we studied the performance of the off-line ec algorithm compared to the conventional A fl -based method for a varying number of vertices in the graphs and a varying number of models in the database <ref> [BA83] </ref>. Then, in the last four experiments, the performance of the on-line error-correcting algorithm was tested for varying model and database sizes and varying degrees of distortion. In the first experiment, documented in Figs. 6 and 7, the database contained a single model graph.
Reference: [CYS + 96] <author> L. Cinque, D. Yasuda, L.G. Shapiro, S. Tanimoto, and B. Allen. </author> <title> An inproved algorithm for relational distance graph matching. </title> <journal> Pattern Recognition, </journal> <volume> 29(2) </volume> <pages> 349-359, </pages> <year> 1996. </year>
Reference-contexts: C ( i ) = minfC ( j ); j = 1; : : : ; Lg. Traditionally, this problem is solved by applying an A fl -based algorithm to each model-input graph pair <ref> [SH81, SF83, Won90, CYS + 96] </ref>. In such an algorithm, the vertices of the model graph are tentatively mapped to the vertices of the input graph one after the other, and for each such mapping the necessary edit operations are recorded and the corresponding edit costs are accumulated.
Reference: [HHVN90] <author> L. Herault, R. Horaud, F. Veillon, and J.J. Niez. </author> <title> Symbolic image mat-ching by simulated annealing. </title> <booktitle> In Proc. British Machine Vision Conference, </booktitle> <pages> pages 319-324. </pages> <address> Oxford, </address> <year> 1990. </year>
Reference-contexts: Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search [BA83, SH81, Ull76], probabilistic relaxation [KCP92], simulated annealing <ref> [HHVN90] </ref> or linear programming [AD93]. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete. Combinato- rial search methods such as A fl are guaranteed to always find the optimal solution.
Reference: [KCP92] <author> J. Kittler, W. J. Christmas, and M. Petrou. </author> <title> Probabilistic relaxation for matching of symbolic structures. </title> <editor> In H. Bunke, editor, </editor> <booktitle> Advances in Structural and Syntactic Pattern Recognition, </booktitle> <pages> pages 471-480. </pages> <publisher> World Scientific, </publisher> <year> 1992. </year>
Reference-contexts: Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search [BA83, SH81, Ull76], probabilistic relaxation <ref> [KCP92] </ref>, simulated annealing [HHVN90] or linear programming [AD93]. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete.
Reference: [MB95a] <author> B.T. Messmer and H. Bunke. </author> <title> Efficient error-tolerant subgraph isomorphism detection. </title> <editor> In D. Dori and A. Bruckstein, editors, </editor> <booktitle> Shape, Structure and Pattern Recognition, </booktitle> <pages> pages 231-240. </pages> <publisher> World Scientific Publ. Company, </publisher> <address> Singapore, </address> <year> 1995. </year>
Reference-contexts: Note that the conventional A fl -based algorithm has in the best case a computational complexity of O (Ln 4 ) and in the worst case of O (Ln 2n ) <ref> [MB95a] </ref>. Hence, the decision tree approach outperforms the conventional algorithm at least by a factor of O (Ln 2 ). However, the disadvantage of this method is the size of the decision tree.
Reference: [MB95b] <author> B.T. Messmer and H. Bunke. </author> <title> Subgraph isomorphism detection in poly-nomial time on preprocessed model graphs. </title> <booktitle> In Proceedings of the Asian Conference on Computer Vision ACCV, </booktitle> <pages> pages 151-155, </pages> <year> 1995. </year>
Reference-contexts: In particular, the time complexity of the new method is completely independent of the number of model graphs in the database. The new algorithm is an extension of the method for exact subgraph isomorphism detection that was previously presented by the authors in <ref> [MB95b, MB95c] </ref>. It is based on the idea of generating all possible adjacency matrices of a model graph off-line and organizing them in a decision tree. At run time, the decision tree is used to classify the adjacency matrix of an unknown input graph. <p> In the second approach, the error corrections are considered at run time only. That is, the decision tree for a set of model graphs does not incorporate any information about possible errors. Hence, the decision tree compilation step is identical to the original preprocessing step presented in <ref> [MB95b, MB95c] </ref> and, consequently, the size of the decision tree is exponential only in the size of the model graphs. At run time, a set of distorted copies of the input graph are constructed such that all possible error corrections up to a certain error threshold are considered. <p> It is easy to see that this assumption guarantees the symmetry of the graph distance according to Def. 8. 3 Graph Isomorphism by Decision Tree A Brief Overview For the purpose of self-containedness, the approach presented in <ref> [MB95b, MB95c] </ref> is briefly reviewed in this section. It works for both graph and subgraph isomorphism, but in the context of the present paper we consider only graph isomorphism. <p> If such a matrix M P exists, the permutation matrix P associated with M P describes a graph isomorphism from G I to G, i.e. M I = M P = P M P T . In <ref> [MB95b, MB95c] </ref> it was proposed to organize the set A (G) in a decision tree such that each matrix in A (G) is classified by the tree. The features that will be used for the classification process are the individual elements in the adjacency matrices. <p> The permutation matrix P corresponding to the leaf node represents the graph isomorphism between G and G I , i.e. P M P T = M I . For a more detailed description of this algorithm see <ref> [MB95b, MB95c] </ref>. The most important aspect of decision tree based graph isomorphism detection is that no backtracking is necessary at any point in the decision tree traversal. On each level k, the process of deciding which successor node to follow can be performed in O (k) steps. <p> In [MB95c] various pruning techniques have been described which reduce the size of the decision tree to O (L3 n ). It has been shown in a number of practical experiments documented in <ref> [MB95b, MB95c] </ref> that the decision 9 tree approach to exact graph and subgraph isomorphism detection is applicable to single graphs with up to 22 vertices or, alternatively, to databases consisting of 100 graphs, each comprising up to 11 vertices. <p> The new algorithms are extensions of an algorithm for exact graph and subgraph isomorphism detection that was developed by the authors and described in <ref> [MB95b, MB95c] </ref>. The two new algorithms mainly differ in the way they handle error corrections. In the first method, the error-corrections are computed off-line and used to create a decision tree which is capable of detecting error-correcting graph isomorphisms in quadratic time only.
Reference: [MB95c] <author> B.T. Messmer and H. Bunke. </author> <title> Subgraph isomorphism in polynomial time. </title> <type> Technical Report IAM-95-003, </type> <institution> University of Bern, </institution> <year> 1995. </year>
Reference-contexts: In particular, the time complexity of the new method is completely independent of the number of model graphs in the database. The new algorithm is an extension of the method for exact subgraph isomorphism detection that was previously presented by the authors in <ref> [MB95b, MB95c] </ref>. It is based on the idea of generating all possible adjacency matrices of a model graph off-line and organizing them in a decision tree. At run time, the decision tree is used to classify the adjacency matrix of an unknown input graph. <p> In the second approach, the error corrections are considered at run time only. That is, the decision tree for a set of model graphs does not incorporate any information about possible errors. Hence, the decision tree compilation step is identical to the original preprocessing step presented in <ref> [MB95b, MB95c] </ref> and, consequently, the size of the decision tree is exponential only in the size of the model graphs. At run time, a set of distorted copies of the input graph are constructed such that all possible error corrections up to a certain error threshold are considered. <p> It is easy to see that this assumption guarantees the symmetry of the graph distance according to Def. 8. 3 Graph Isomorphism by Decision Tree A Brief Overview For the purpose of self-containedness, the approach presented in <ref> [MB95b, MB95c] </ref> is briefly reviewed in this section. It works for both graph and subgraph isomorphism, but in the context of the present paper we consider only graph isomorphism. <p> If such a matrix M P exists, the permutation matrix P associated with M P describes a graph isomorphism from G I to G, i.e. M I = M P = P M P T . In <ref> [MB95b, MB95c] </ref> it was proposed to organize the set A (G) in a decision tree such that each matrix in A (G) is classified by the tree. The features that will be used for the classification process are the individual elements in the adjacency matrices. <p> The permutation matrix P corresponding to the leaf node represents the graph isomorphism between G and G I , i.e. P M P T = M I . For a more detailed description of this algorithm see <ref> [MB95b, MB95c] </ref>. The most important aspect of decision tree based graph isomorphism detection is that no backtracking is necessary at any point in the decision tree traversal. On each level k, the process of deciding which successor node to follow can be performed in O (k) steps. <p> Hence, the size of the decision tree is bounded by O (n n ) for a single model graph and by O (Ln n ) for L model graphs. In <ref> [MB95c] </ref> various pruning techniques have been described which reduce the size of the decision tree to O (L3 n ). <p> In [MB95c] various pruning techniques have been described which reduce the size of the decision tree to O (L3 n ). It has been shown in a number of practical experiments documented in <ref> [MB95b, MB95c] </ref> that the decision 9 tree approach to exact graph and subgraph isomorphism detection is applicable to single graphs with up to 22 vertices or, alternatively, to databases consisting of 100 graphs, each comprising up to 11 vertices. <p> The new algorithms are extensions of an algorithm for exact graph and subgraph isomorphism detection that was developed by the authors and described in <ref> [MB95b, MB95c] </ref>. The two new algorithms mainly differ in the way they handle error corrections. In the first method, the error-corrections are computed off-line and used to create a decision tree which is capable of detecting error-correcting graph isomorphisms in quadratic time only.
Reference: [SF83] <author> A. Sanfeliu and K.S. Fu. </author> <title> A distance measure between attributed rela-tional graphs for pattern recognition. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 13 </volume> <pages> 353-363, </pages> <year> 1983. </year>
Reference-contexts: C ( i ) = minfC ( j ); j = 1; : : : ; Lg. Traditionally, this problem is solved by applying an A fl -based algorithm to each model-input graph pair <ref> [SH81, SF83, Won90, CYS + 96] </ref>. In such an algorithm, the vertices of the model graph are tentatively mapped to the vertices of the input graph one after the other, and for each such mapping the necessary edit operations are recorded and the corresponding edit costs are accumulated.
Reference: [SH81] <author> L.G. Shapiro and R.M. Haralick. </author> <title> Structural descriptions and inexact matching. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence PAMI, </journal> <volume> 3 </volume> <pages> 504-519, </pages> <year> 1981. </year>
Reference-contexts: Therefore, perfect correspondences between the models and the input do frequently not exist. Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search <ref> [BA83, SH81, Ull76] </ref>, probabilistic relaxation [KCP92], simulated annealing [HHVN90] or linear programming [AD93]. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete. <p> C ( i ) = minfC ( j ); j = 1; : : : ; Lg. Traditionally, this problem is solved by applying an A fl -based algorithm to each model-input graph pair <ref> [SH81, SF83, Won90, CYS + 96] </ref>. In such an algorithm, the vertices of the model graph are tentatively mapped to the vertices of the input graph one after the other, and for each such mapping the necessary edit operations are recorded and the corresponding edit costs are accumulated.
Reference: [Ull76] <author> J.R. Ullman. </author> <title> An algorithm for subgraph isomorphism. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 23(1) </volume> <pages> 31-42, </pages> <year> 1976. </year>
Reference-contexts: Therefore, perfect correspondences between the models and the input do frequently not exist. Hence, it is necessary to provide means for error-tolerant matching. In the past, different methods for finding 1 exact and error-tolerant graph and subgraph isomorphisms have been proposed, such as heuristic search <ref> [BA83, SH81, Ull76] </ref>, probabilistic relaxation [KCP92], simulated annealing [HHVN90] or linear programming [AD93]. One of the major problems of error-correcting graph or subgraph isomorphism detection is its exponential time complexity, which is due to the fact that the problem is NP-complete.
Reference: [WF74] <author> R.A. Wagner and M.J. Fischer. </author> <title> The string-to-string correction problem. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 21(1) </volume> <pages> 168-173, </pages> <year> 1974. </year>
Reference-contexts: In order to integrate the concept of error correction into graph matching, we define a distance measure for graphs. Similarly to the string matching problem where edit operations are used to define the string edit distance <ref> [WF74] </ref>, we define a graph edit distance, which is based on the idea of correcting distortions in an input graph by means of edit operations [BA83].
Reference: [Won90] <author> E. K. Wong. </author> <title> Three-dimensional object recognition by attributed graphs. </title> <editor> In H. Bunke and A. Sanfeliu, editors, </editor> <booktitle> Syntactic and Structural Pattern Recognition- Theory and Applications, </booktitle> <pages> pages 381-414. </pages> <publisher> World Scientific, </publisher> <year> 1990. </year>
Reference-contexts: C ( i ) = minfC ( j ); j = 1; : : : ; Lg. Traditionally, this problem is solved by applying an A fl -based algorithm to each model-input graph pair <ref> [SH81, SF83, Won90, CYS + 96] </ref>. In such an algorithm, the vertices of the model graph are tentatively mapped to the vertices of the input graph one after the other, and for each such mapping the necessary edit operations are recorded and the corresponding edit costs are accumulated.
References-found: 13

