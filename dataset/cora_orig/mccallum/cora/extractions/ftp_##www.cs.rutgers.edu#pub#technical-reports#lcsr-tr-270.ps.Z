URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-270.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: fwelling,badrig@cs.rutgers.edu  
Title: Exporting Environment Awareness to Mobile Applications  
Author: Girish Welling and B. R. Badrinath 
Address: New Brunswick, NJ 08903, USA.  
Affiliation: Dept. of Computer Science Rutgers University,  
Abstract: In mobile computing, factors such as add-on hardware components and heterogeneous networks result in an environment made up of changing resource constraints. An application in such a constrained environment must react to these changes so that available resources are properly utilized. In this paper, we propose an architecture to report changes in the environment to interested applications. The architecture is based on an event delivery mechanism that decouples event detection from delivery, giving the flexibility and extensibility that is necessary in a mobile computing environment. Information associated with the event is delivered as part of the event notification, while delivery latency is reduced by clever thread scheduling. We demonstrate the utility of our architecture by structuring an environment aware networking subsystem around a prototype implementation. The performance of this implementation is competitive with current event delivery mechanisms such as the Unix signal. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: The Unix signal mechanism <ref> [1] </ref> allows a task to be notified about the occurrence of an asynchronous event. The event is usually detected within the kernel and is directly associated with the destination task. Event detection and delivery are tightly integrated (Fig. 3a), making dynamic extension difficult.
Reference: [2] <author> M. Bender et al. </author> <title> Unix for nomads: Making unix support mobile computing. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: However, to our knowledge, there has been no attempt to extend the flexibility of signals. Extensions have usually been limited to adding signal support for a new condition, such 13 as the SIGFREEZE and SIGTHAW signals described in <ref> [2] </ref>. Many object-oriented languages provide language constructs for the delivery of synchronous events. These constructs are provided primarily so that exceptional conditions that may occur during code execution can be trapped and recovered from, while preserving as much of the execution state as is possible.
Reference: [3] <author> A. Birrell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network objects. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: With high probability, two types have the same fingerprint only if they are structurally identical. Such fingerprints have been used in systems supporting remote object method invocation <ref> [3] </ref>. 3.5 Discussion Decoupling event detection and delivery localizes mutual awareness of the participating entities in our archi 7 tecture. Awareness of all channels is restricted to the Registrar. Factories and handlers depend on the name-service provided by the Registrar to obtain channel references.
Reference: [4] <author> D. Clark. </author> <title> The structuring of systems with upcalls. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1985. </year>
Reference-contexts: Our event delivery mechanism, on the other hand, aims at providing extensible abstractions for asynchronous events. Since it cannot be determined a priori, where in the code such events actually occur, it difficult to design a general language construct for the same. Upcalls in Swift <ref> [4] </ref> are suggested to aid in organizing layered software around its natural flow of control. The upcall feature gives a programmer the choice of implementing an upward flow by procedure calls or asynchronous signals. This corresponds to organizing layered software into processes representing vertical or horizontal stripes, respectively.
Reference: [5] <author> H. Custer. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: Such an approach is also taken in the QuickLPC mechanism in Windows NT <ref> [5] </ref>. 6 Related Work An event in our architecture is an object that represents the occurrence of an asynchronous event in a system. We first compare our mechanism for event delivery with existing mechanisms in both operating systems and programming languages.
Reference: [6] <author> R. P. Draves. </author> <title> A revised ipc interface. </title> <booktitle> In Proceedings of the USENIX Mach Workshop, </booktitle> <year> 1990. </year>
Reference-contexts: We used C++ [18] to provide the language level object support, and the capability based Mach IPC <ref> [6] </ref> to provide intertask communication. Our architecture is encapsulated within a set of C++ classes which are extended according to the needs of a particular system. In this section, we demonstrate the utility of this architecture by structuring a network aware subsystem around it (Fig 10).
Reference: [7] <author> J. Ioannidis, D. Duchamp, and G. Q. Maguire. </author> <title> Ip-based protocols for mobile internetworking. </title> <booktitle> In Proceedings of the ACM SIGCOMM Symposium on Communication, Architectures and Protocols, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: A mobile computer can be intermittently network connected with untethered wireless links. These wireless links are associated with changing bandwidth, which usually deteriorates with distance (Fig. 2). While network protocols for mobile hosts <ref> [7, 12] </ref> can transparently maintain network connectivity, the changing characteristics of the link are largely ignored above the transport layer. This makes it difficult for an application to detect alternate network services (name-servers, file-servers, mail-servers, news-servers) while the mobile computer roams, or change functionality depending on the changing link characteristics. <p> Current protocols which maintain network connectivity for mobile computers <ref> [7, 12] </ref> are partly implemented in user-space. Certain interesting conditions, such as cell handoff, are detected in these user-space modules, making it imperative that the environment aware subsystem supports user-level detection of changes in the environment. <p> A factory is usually a software module associated with an aspect of the mobile environment, suitably augmented to produce Event Objects in our architecture. For instance, the mhmicp module in Columbia Mobile IP <ref> [7] </ref> is a prospective factory for events relating to network connectivity. When an event is detected, the factory packages information associated with it into an Event Object. This object is posted to a channel for delivery to interested environment aware applications. <p> A mobile host is equipped with both, a CDPD and a WaveLAN interface. We use a modified version of Columbia Mobile IP <ref> [7] </ref>, which is itself an extension of the Internetwork Protocol, to provide network packet routing to mobile hosts. The details of the changes made to Mobile IP are beyond the scope of this paper and are irrelevant for this discussion. <p> In our system, Connection Events, which represent the state of the network link, are generated in modified mhmicp and pumicp modules of Columbia Mobile IP <ref> [7] </ref>.
Reference: [8] <author> J. C. Mogul, R. F. Rashid, and M. J. Accetta. </author> <title> The packet filter: An efficient mechanism for user-level network code. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: Providing the channel abstraction as a kernel primitive will reduce the overhead of the additional context switch, making the performance comparable to signals. In this case, the delivery policy could be specified in an interpreted language using a mechanism similar to the Berkeley Packet Filter <ref> [8] </ref>. We also believe that the performance of event delivery will not degrade as much as that of a signal when the number of processes increases on a system, although we did not verify this experimentally.
Reference: [9] <author> G. Montenegro and S. Drach. </author> <title> System isolation and network fast-fail capability in solaris. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Researchers in mobile computing agree upon the necessity of application adaptation in response to the mobile environment [20, 14, 15, 10]. Montenegro and Drach <ref> [9] </ref> attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies.
Reference: [10] <author> B. Noble, M. Price, and M. Satyanarayanan. </author> <title> A programming interface for application-aware adaptation in mobile computing. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Our model can be considered to implement the push model of CORBA Event Services, where the delivery of environment related events is driven by entities that produce them. Researchers in mobile computing agree upon the necessity of application adaptation in response to the mobile environment <ref> [20, 14, 15, 10] </ref>. Montenegro and Drach [9] attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies. <p> Montenegro and Drach [9] attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey <ref> [10] </ref> provides an API aimed at supporting alternate file access policies. Schilit, Adams and Want [14] suggest servers, where the environment state is maintained as a set of environment variables. Our event delivery mechanism serves the same purpose, but takes into consideration the peculiar features of mobile computing.
Reference: [11] <institution> Object Management Group, Inc. CORBA Services: Common Object Services Specification, </institution> <month> March </month> <year> 1995. </year> <note> OMG Document 95-3-31. </note>
Reference-contexts: While, the Reactor pattern can be considered to decouple the event handler from the event demultiplexing mechanism, the channel abstraction in our architecture can be considered to decouple an event consumer from an event producer. Certain aspects of the event delivery model in CORBA Event Services <ref> [11] </ref> are similar to our architecture. CORBA suggests the push and pull models for event delivery, where the delivery is driven by the event producer and the event consumer, respectively.
Reference: [12] <author> C. Perkins. </author> <title> Ip mobility support. </title> <type> Internet Draft, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: A mobile computer can be intermittently network connected with untethered wireless links. These wireless links are associated with changing bandwidth, which usually deteriorates with distance (Fig. 2). While network protocols for mobile hosts <ref> [7, 12] </ref> can transparently maintain network connectivity, the changing characteristics of the link are largely ignored above the transport layer. This makes it difficult for an application to detect alternate network services (name-servers, file-servers, mail-servers, news-servers) while the mobile computer roams, or change functionality depending on the changing link characteristics. <p> Current protocols which maintain network connectivity for mobile computers <ref> [7, 12] </ref> are partly implemented in user-space. Certain interesting conditions, such as cell handoff, are detected in these user-space modules, making it imperative that the environment aware subsystem supports user-level detection of changes in the environment.
Reference: [13] <institution> Personal Computer Card Interface Association. </institution> <note> PCMCIA PC Card Standard, Release 2.1, </note> <month> July </month> <year> 1993. </year>
Reference-contexts: Although these constraints are becoming less noticeable, portability will always induce constraints in mobile computers, when compared to non-mobile computers. For instance, battery powered mobile computers will always face power constraints relative to their fixed counterparts. Since current technology <ref> [13] </ref> allows hardware components to be added or removed while a mobile computer is still powered on, resources related to such components may change, giving rise to dynamic constraints.
Reference: [14] <author> B. Schilit, N. Adams, and R. </author> <title> Want. </title> <booktitle> Context-aware mobile applications. In IEEE Workshop on Mobile Computing, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Our model can be considered to implement the push model of CORBA Event Services, where the delivery of environment related events is driven by entities that produce them. Researchers in mobile computing agree upon the necessity of application adaptation in response to the mobile environment <ref> [20, 14, 15, 10] </ref>. Montenegro and Drach [9] attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies. <p> Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies. Schilit, Adams and Want <ref> [14] </ref> suggest servers, where the environment state is maintained as a set of environment variables. Our event delivery mechanism serves the same purpose, but takes into consideration the peculiar features of mobile computing.
Reference: [15] <author> B. N. Schilit, M. M. Theimer, and B. B. Welch. </author> <title> Customizing mobile applications. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Our model can be considered to implement the push model of CORBA Event Services, where the delivery of environment related events is driven by entities that produce them. Researchers in mobile computing agree upon the necessity of application adaptation in response to the mobile environment <ref> [20, 14, 15, 10] </ref>. Montenegro and Drach [9] attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies.
Reference: [16] <author> D. C. Schmidt. </author> <title> Reactor: An object behavioral pattern for concurrent event demultiplexing and event handler dispatching. In Pattern Languages of Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: By separating the two ends of event delivery, our event delivery mechanism allows a flexible architecture where participating entities do not depend on the existence of others. The Reactor pattern in ACE (Asynchronous Communication Environment) <ref> [16] </ref> simplifies the structuring of event-driven applications by integrating the de-multiplexing of events and the dispatching of the corresponding handlers. The mechanism is provided so that application-specific event handlers can evolve independently of the event demultiplexing mechanism provided by the operating system (eg. select () in Unix).
Reference: [17] <author> C. Small and M. Seltzer. </author> <title> A comparison of os extension technologies. </title> <booktitle> In Proceedings of the USENIX 1996 Annual Technical Conference, </booktitle> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: 1.118 ms i486 Mach 3.0/UX 42 signal 0.873 ms i486 Linux 1.3 signal 0.140 ms SPARC Solaris SunOS 5.4 signal 0.174 ms Table 1: Performance Comparison The method used for measuring the latency of signals is based on that for estimating the overhead of an upcall by Small and Seltzer <ref> [17] </ref>. An initiating process sends SIGUSR1 to a previously blocked target process, immediately followed by SIGCONT. The target process, which had blocked itself using SIGTSTP, therefore returns from a kill system call and processes the SIGUSR1 signal.
Reference: [18] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: A newly activated application is notified of past events so that it becomes aware of the current environment. 4 A Network Aware Subsystem We built a prototype implementation of our ideas on i486 based laptops running the MACH 3.0 microker-nel. We used C++ <ref> [18] </ref> to provide the language level object support, and the capability based Mach IPC [6] to provide intertask communication. Our architecture is encapsulated within a set of C++ classes which are extended according to the needs of a particular system.
Reference: [19] <author> C. A. Thekkath and H. M. Levy. </author> <title> Hardware and software support for efficient exception handling. </title> <booktitle> In Proceedings of the 7th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Further, the signal delivery policy is fixed and restrictive, with all registered recipients being notified of the event. Modifications to the signal mechanism have been suggested in the context of synchronous exceptions by Thekkath and Levy <ref> [19] </ref>, where the signal handling latency is reduced by minimizing the number of cross-domain control transfers. However, to our knowledge, there has been no attempt to extend the flexibility of signals.
Reference: [20] <author> T. Watson. </author> <title> Application design for wireless computing. </title> <booktitle> In IEEE Workshop on Mobile Computing, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Our model can be considered to implement the push model of CORBA Event Services, where the delivery of environment related events is driven by entities that produce them. Researchers in mobile computing agree upon the necessity of application adaptation in response to the mobile environment <ref> [20, 14, 15, 10] </ref>. Montenegro and Drach [9] attempt to minimize application awareness in order to support existing services and applications. Such an approach is limited, and mechanisms have been suggested to convey environment related information to applications. Odyssey [10] provides an API aimed at supporting alternate file access policies.
Reference: [21] <author> G. Welling and B. R. Badrinath. Mobjects: </author> <title> Programming support for environment directed application policies in mobile computing. </title> <booktitle> In ECOOP'95 Workshop on Mobility and Replication, </booktitle> <month> August </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: This results in an architecture that is extensible and flexible, which is essential for a mobile computer. 7 Future Work and Conclusions We implemented our event delivery mechanism keeping in mind our long-term goal of designing software for mobile computing <ref> [21] </ref>. It is clear from our experience that such software will be reactive to mobility related events. Our mechanism provides the means to report these events to mobile applications.
References-found: 21

