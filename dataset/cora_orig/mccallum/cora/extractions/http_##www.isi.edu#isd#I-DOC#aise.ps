URL: http://www.isi.edu/isd/I-DOC/aise.ps
Refering-URL: http://www.isi.edu/isd/I-DOC/i-doc.html
Root-URL: http://www.isi.edu
Email: johnson@isi.edu  
Phone: tel: +1 310 822-1511; fax: +1 310 822 0751  
Title: Towards the Elimination of Documentation  
Author: W. Lewis Johnson 
Note: In Working Notes of the 1995 IJCAI Workshop on AI and Software Engineering  
Web: WWW: http://www.isi.edu/isd/johnson.html  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292-6695  
Affiliation: USC Information Sciences Institute Computer Science Dept.  
Abstract: The I-Doc project is developing automated support for the interactive inquiry and explanation process that is at the heart of software understanding activities. I-Doc is a hypermedia tool that allows software engineers to post queries about a software system, and generates focused explanations of the software in response. These explanations are task-oriented, i.e., they are sensitive to the software engineering task being performed by the user that led to the query in the first place. From the outset this project has been oriented toward providing results that can have impact on real software engineering problems. Such concerns have governed the choice of data sets to study in developing the system, the design of the system, and the plan for transitioning the technology to other groups. This paper explores these issues and their role in directing the course of the project. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.C. Anderson. </author> <title> Save time by automating design documents. </title> <journal> IEEE Software, </journal> <volume> 8(3) </volume> <pages> 116-118, </pages> <year> 1991. </year>
Reference-contexts: Unfortunately, typical tools aimed at this problem, such as document generators in CASE tools, do not get at the heart of the difficulty. Documentation generators such as Docgen and Ada DL <ref> [ 1 ] </ref> make it easier to create documentation, but the person understand ing the software must still search this documentation to find the necessary information. On-line tools such as LaSSIE [ 3 ] make search easier, but still leave the user with the responsibility to search for the answer.
Reference: [2] <author> R. Brooks. </author> <title> Towards a theory of the comprehen-sion of computer programs. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 18 </volume> <pages> 543-554, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction When people try to understand software, they typically go through a cycle of reading the code, forming questions in their mind about what the code does, and then searching the code and documentation to find answers to these questions <ref> [ 2; 9 ] </ref> . This search and discovery process has been claimed to take substantial portions of a typical developer's time [ 3 ] . There is thus a need for better documentation techniques and tools that can reduce the amount of time spent in software discovery.
Reference: [3] <author> P. Devanbu, R.J. Brachman, P.G. Selfridge, and B.W. Ballard. </author> <title> LaSSIE: A knowledge-based software information system. </title> <journal> Communications of the ACM, </journal> <volume> 34(5), </volume> <year> 1991. </year>
Reference-contexts: This search and discovery process has been claimed to take substantial portions of a typical developer's time <ref> [ 3 ] </ref> . There is thus a need for better documentation techniques and tools that can reduce the amount of time spent in software discovery. Unfortunately, typical tools aimed at this problem, such as document generators in CASE tools, do not get at the heart of the difficulty. <p> Documentation generators such as Docgen and Ada DL [ 1 ] make it easier to create documentation, but the person understand ing the software must still search this documentation to find the necessary information. On-line tools such as LaSSIE <ref> [ 3 ] </ref> make search easier, but still leave the user with the responsibility to search for the answer. The objective of the I-Doc project, in contrast, is to bypass the search and discovery process as much as possible.
Reference: [4] <author> W.L. Johnson, M.S. Feather, and D.R. Harris. </author> <title> Representation and presentation of requirements knowledge. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 18(10) </volume> <pages> 853-869, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: It must be able to handle substantial amounts of code, and it must be usable simultaneously by multiple project participants. Earlier systems providing automated documentation capabilities, such as ARIES <ref> [ 4 ] </ref> , were single-user systems implemented in Lisp, requiring substantial computational resources. A method needed to be found that would make it possible for multiple users to access repositories of information about large systems, without requiring each user to run a large Lisp application.
Reference: [5] <author> W.L. Johnson and J. Myers. </author> <title> Relating formal and informal descriptions. </title> <booktitle> In Proceedings of the 4th Knowledge-Based Software Assistant Conference, </booktitle> <address> Utica, NY, </address> <month> September </month> <year> 1989. </year> <note> Defense Technical Information Center. </note>
Reference-contexts: Although our group had previous experience in automated generation of paraphrases <ref> [ 10; 5; 7 ] </ref> , these systems applied only to descriptions in formal specification languages developed using knowledge-based software assistants. In order for such technology to be really useful, it needed to be applicable to conventional software artifacts.
Reference: [6] <author> J.D. Moore. </author> <title> Participating in Explanatory Dialogues. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: The software repository can thus be maintained as it is used. A system that makes use of source code and text strings as information sources cannot be as flexible as a system that generates explanations from a rich knowledge base (e.g., <ref> [ 6 ] </ref> ). However, it is still an improvement over manual documentation techniques. Furthermore, it enables software engineers to assume control of the technology more rapidly.
Reference: [7] <author> J.J. Myers and G. Williams. </author> <title> Exploiting meta-model correspondences to provide paraphrasing capabilities for the concept demonstration. </title> <booktitle> In Proceedings of the 5th KBSA Conference, </booktitle> <pages> pages 331-345, </pages> <address> Syracuse, NY, </address> <month> September </month> <year> 1990. </year> <note> Defense Technical Information Center. </note>
Reference-contexts: Although our group had previous experience in automated generation of paraphrases <ref> [ 10; 5; 7 ] </ref> , these systems applied only to descriptions in formal specification languages developed using knowledge-based software assistants. In order for such technology to be really useful, it needed to be applicable to conventional software artifacts.
Reference: [8] <author> P.G. Selfridge, L.G. Terveen, and M.D. </author> <title> Long. Managing design knowledge to provide assistance to large-scale software development. </title> <booktitle> In Proceedings of the Seventh Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 163-170, </pages> <address> McLean, Va, September 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, it is still an improvement over manual documentation techniques. Furthermore, it enables software engineers to assume control of the technology more rapidly. This approach has proven to be the key to previous successful KBSE efforts such as Selfridge et al.'s <ref> [ 8 ] </ref> , and we are hopeful that it will prove helpful to I-Doc as well. 6 Technology Transition The I-Doc project is not unlike many research efforts in that it is required to meet potentially incompatible goals.
Reference: [9] <author> E. Soloway, J. Pinto, S.I. Letovsky, D. Littman, and R. Lampert. </author> <title> Designing documentation to compensate for delocalized plans. </title> <journal> Communications of the ACM, </journal> <volume> 31(11), </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 Introduction When people try to understand software, they typically go through a cycle of reading the code, forming questions in their mind about what the code does, and then searching the code and documentation to find answers to these questions <ref> [ 2; 9 ] </ref> . This search and discovery process has been claimed to take substantial portions of a typical developer's time [ 3 ] . There is thus a need for better documentation techniques and tools that can reduce the amount of time spent in software discovery.
Reference: [10] <author> W.R. Swartout. </author> <title> Gist English generator. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 404-409, </pages> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1982. </year> <note> AAAI. </note>
Reference-contexts: Although our group had previous experience in automated generation of paraphrases <ref> [ 10; 5; 7 ] </ref> , these systems applied only to descriptions in formal specification languages developed using knowledge-based software assistants. In order for such technology to be really useful, it needed to be applicable to conventional software artifacts.
References-found: 10

