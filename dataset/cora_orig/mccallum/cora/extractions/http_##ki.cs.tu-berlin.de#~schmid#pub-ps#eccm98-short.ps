URL: http://ki.cs.tu-berlin.de/~schmid/pub-ps/eccm98-short.ps
Refering-URL: http://www.cs.tu-berlin.de/~schmid/publications.html
Root-URL: 
Email: schmid@cs.tu-berlin.de  
Phone: +49 30/314-23938,  
Title: Analogical Problem Solving by Adaptation of Schemes  
Author: Ute Schmid 
Address: FR 5-8, Franklinstrasse 28, 10587 Berlin, Germany  
Affiliation: Department of Applied Computer Science, Technical University Berlin  
Abstract: We present a computational approach to the acquisition of problem schemes by learning by doing and to their application in analogical problem solving. Our work has its background in automatic program construction and relies on the concept of recursive program schemes. In contrast to the usual approach to cognitive modelling where computational models are designed to fit specific data we propose a framework to describe certain empirically established characteristics of human problem solving and learning in a uniform and formally sound way.
Abstract-found: 1
Intro-found: 1
Reference: <author> Anderson, J., & Thompson, R. </author> <year> (1989). </year> <title> Use of analogy in a production system architecture. </title> <editor> In S. Vosniadou & A. Ortony (Eds.), Similarity and analogical reasoning (p. </editor> <address> 267-297). </address> <publisher> Cambridge University Press. </publisher>
Reference: <author> Falkenhainer, B., Forbus, K., & Gentner, D. </author> <year> (1989). </year> <title> The structure mapping engine: Algorithm and example. </title> <journal> Artificial Intelligence, </journal> <volume> 41, </volume> <pages> 1-63. </pages>
Reference: <author> Holland, J., Holyoak, K., Nisbett, R., & Thagard, P. </author> <year> (1986). </year> <title> Induction processes of inference, learning, and discovery. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: If found, the pattern and substitution are extrapolated to an RPS. This process describes a fundamental aspect of human intelligence: the ability of induction as for example described by <ref> (Holland, Holyoak, Nisbett, & Thagard, 1986) </ref>. 3 Transformation Based Adaptation RPSs formally are elements of a term algebra. That means, they represent syntactical structures only. The semantics of an RPS is gained by interpretation of the symbols in accordance to some domain model.
Reference: <author> Hummel, J., & Holyoak, K. </author> <year> (1997). </year> <title> Distributed representation of structure: A theory of analogical access and mapping. </title> <journal> Psychological Review, </journal> <volume> 104 (3), </volume> <pages> 427-466. </pages>
Reference: <author> Novick, L. R. </author> <year> (1988). </year> <title> Analogical transfer, problem similarity, and expertise. Journal of Experimental Psychology: Learning, Memory, </title> <journal> and Cognition, </journal> <volume> 14, </volume> <pages> 510-520. </pages>
Reference: <author> Pirolli, P., & Anderson, J. </author> <year> (1985). </year> <title> The role of learning from examples in the acquisition of recursive programming skills. </title> <journal> Canadian Journal of Psychology, </journal> <volume> 39, </volume> <pages> 240-272. </pages>
Reference: <author> Rumelhart, D. E., & Norman, D. A. </author> <year> (1981). </year> <title> Analogical processes in learning. </title> <editor> In J. R. Anderson (Ed.), </editor> <booktitle> Cognitive skills and their acquisition (p. </booktitle> <pages> 335-360). </pages> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: An RPS representing the knowledge of clearing an arbitrary block in a tower is clearblock (x, s) = if cleartop (x) then s else put-table (topof (x), clearblock (topof (x, s))). The representation format of an RPS simultaneously catches the structure of a problem and its executable solution strategy <ref> (cf. Rumelhart & Norman, 1981) </ref>. In our program IPAL (Schmid & Wysotzki, 1998) we are modelling the acquisition of RPSs by a two-step process: In a first step some initial states of a problem are solved by applying predefined production rules using heuristic search.
Reference: <author> Schmid, U., & Kaup, B. </author> <year> (1995). </year> <title> Analoges Lernen beim rekursiven Programmieren (Analogical learning in recursive programming). </title> <journal> Kognitionswissenschaft, </journal> <volume> 5, </volume> <pages> 31-41. </pages>
Reference: <author> Schmid, U., & Wysotzki, F. </author> <year> (1998). </year> <title> Induction of recursive program schemes. </title> <booktitle> In Proceedings of the 10th Euro-pean Conference on Machine Learning (ECML-98). </booktitle> <publisher> Springer. </publisher>
Reference-contexts: The representation format of an RPS simultaneously catches the structure of a problem and its executable solution strategy (cf. Rumelhart & Norman, 1981). In our program IPAL <ref> (Schmid & Wysotzki, 1998) </ref> we are modelling the acquisition of RPSs by a two-step process: In a first step some initial states of a problem are solved by applying predefined production rules using heuristic search. <p> Building initial program corresponds roughly to chunking and refinement of production rules. By using a method for inductive program synthesis initial programs can be generalized to RPSs <ref> (Schmid & Wysotzki, 1998) </ref>. The general idea of our algorithm is to identify a pattern and a substitution in the initial program which makes it possible to reproduce the whole structure.
References-found: 9

