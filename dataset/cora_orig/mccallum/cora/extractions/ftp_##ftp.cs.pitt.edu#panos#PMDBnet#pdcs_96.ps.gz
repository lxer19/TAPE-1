URL: ftp://ftp.cs.pitt.edu/panos/PMDBnet/pdcs_96.ps.gz
Refering-URL: http://www.cs.pitt.edu/~panos/publications/all.html
Root-URL: 
Title: A Fast and Robust Failure Recovery Scheme for Shared-Nothing Gigabit-Networked Databases  
Author: Sujata Banerjee Panos K. Chrysanthis 
Keyword: Concurrency control, log-based recovery, distributed transactions, distributed agreement protocol. forward recovery.  
Address: Pittsburgh Pittsburgh, PA 15260 Pittsburgh, PA 15260  
Affiliation: Dept. of Info. Sci. Telecomm. Dept. of Computer Science University of Pittsburgh University of  
Abstract: In the future, wide area gigabit networks will interconnect database servers around the globe creating extremely powerful distributed information systems. In a high speed network, the size of the message is less of a concern than the number of sequential phases of message passing. In a previous paper, we have developed a lock-based concurrency control protocol for gigabit-networked databases (GNDB). In this paper, we expand on a log-based recovery protocol that provides efficient recovery in a GNDB with the above mentioned concur-rency control scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Banerjee and P. K. Chrysanthis. </author> <title> Data Sharing and Recovery in Gigabit-Networked Databases. </title> <booktitle> Proc. of the 4th Int'l Conf. on Computer Communications and Networks: IC3N-95, </booktitle> <pages> pp. 204-211, </pages> <year> 1995. </year>
Reference-contexts: Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available. Towards this end, assuming a client-server distributed database system in a shared-nothing environment, in <ref> [1] </ref>, we proposed a lock-based concurrency control protocol, which is a variant of the strict two-phase locking [4], but specially tailored for a gigabit wide area environment. <p> However, these are the exact circumstances that make the recovery operation difficult. In this paper, we expand on the skeletal framework of the log-based recovery protocol that was proposed by us in <ref> [1] </ref>. Distributed concurrency control and recovery algorithms typically require sites to engage in conversations (sequential message transfers). <p> Within each window, the forward list may be created according to one of several rules (See <ref> [1] </ref> for details) to improve performance further. While the data items have been sent out to a group of clients, the server continues to collect requests. When a transaction commits, the client sends the new version of the data items to the clients next on the respective forward lists. <p> While not explicitly discussed here, the concurrency control scheme in <ref> [1] </ref> can handle the case of shared access as well. 3 Failure Recovery in GNDB 3.1 Preliminaries Although the recovery scheme described here is in the context of the concurrency control protocol described in the previous section, it can be applied in systems that support data migration or data shipping in <p> A log-based recovery scheme for a GNDB is proposed next. This new recovery scheme is designed to work in conjunction with a concurrency control scheme involving data migration (like in <ref> [1] </ref>). In the concurrency control mechanism in [1], data items migrate from client to client in each window, and each transaction can complete execution when all the data items required are available at that client, a very simple and fast commit procedure can be adopted, i.e., every transaction in a window <p> A log-based recovery scheme for a GNDB is proposed next. This new recovery scheme is designed to work in conjunction with a concurrency control scheme involving data migration (like in <ref> [1] </ref>). In the concurrency control mechanism in [1], data items migrate from client to client in each window, and each transaction can complete execution when all the data items required are available at that client, a very simple and fast commit procedure can be adopted, i.e., every transaction in a window can commit locally.
Reference: [2] <author> S. Banerjee, V. O. K. Li, and C. Wang. </author> <title> Distributed Database Systems in High-Speed Wide-Area Networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(4) </volume> <pages> 617-630, </pages> <year> 1993. </year>
Reference-contexts: In this paper, a special case of future distributed systems, that of distributed database systems interconnected by gigabit-per-second networks is discussed in the above context. We refer to these as gigabit-networked databases (GNDB). Traditional data access and data sharing techniques are not expected to scale to gigabit network rates <ref> [6, 11, 10, 14, 2] </ref>. Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available. <p> The recovery scheme in shared-nothing systems that support data migration is quite difficult, as supported by previous work in <ref> [13, 2] </ref>. The scheme described here not only achieves the objective of failure resiliency, but is also efficient in the number of message passing rounds, as warranted in a high speed network environment.
Reference: [3] <author> M. Carey, M. Franklin, M. Livny, and E. Shekita. </author> <title> Data Caching Tradeoffs in Client-Server DBMS Architectures. </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 357-366, </pages> <year> 1991. </year>
Reference-contexts: The new recovery scheme is presented in Section 3, and Section 4 concludes the paper. 2 Concurrency Control in GNDB In general, we assume that GNDB is a client-server distributed database system <ref> [3, 15] </ref>. To simplify the discussion, we consider here a distributed database system with a single traditional database (DB) server and multiple clients with local processing capabilities. When a client needs a data item, it sends a request to the DB server which responds with the requested data item.
Reference: [4] <author> K. P. Eswaran, J. Gray, R. Lorie, and I. Traiger. </author> <title> The Notion of Consistency and Predicate Locks in a Database System. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, 1976. 
Reference-contexts: Towards this end, assuming a client-server distributed database system in a shared-nothing environment, in [1], we proposed a lock-based concurrency control protocol, which is a variant of the strict two-phase locking <ref> [4] </ref>, but specially tailored for a gigabit wide area environment. This concurrency control scheme reduces the number of rounds of message passing by grouping fl Supported in part by N.S.F under grant IRI-95020091. the lock grants, client-end caching and data migration. <p> Again, only for the sake of simplicity, let us assume that each client executes one transaction at a time. In the presence of concurrent requests from different clients, the DB server ensures data consistency by following the well known strict two-phase locking con-currency control protocol (2PL) <ref> [4] </ref>. A transaction can access a data item only if no other transaction has a lock on it. In phase 1, a transaction requests data items which are shipped to it after the server acquires a lock on them.
Reference: [5] <author> J. N. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The server is always assumed to be a reliable node. Most database systems maintain some sort of recovery information which can be used to recover the data in case of failures. The type of recovery information maintained depends on whether the system has in-place updating or out-of-place updating <ref> [5] </ref>. In-place updating is more common than out-of-place updating. When updates are performed in-place, the value of a data item is directly changed by a transaction updating that data item, thus losing the previous values of the data item.
Reference: [6] <author> L. Kleinrock. </author> <title> The Latency/Bandwidth Tradeoff in Gigabit Networks. </title> <journal> IEEE Communications Magazine, </journal> <volume> 30(4) </volume> <pages> 36-40, </pages> <year> 1992. </year>
Reference-contexts: In this paper, a special case of future distributed systems, that of distributed database systems interconnected by gigabit-per-second networks is discussed in the above context. We refer to these as gigabit-networked databases (GNDB). Traditional data access and data sharing techniques are not expected to scale to gigabit network rates <ref> [6, 11, 10, 14, 2] </ref>. Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available.
Reference: [7] <author> C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz. </author> <title> ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 94-162, </pages> <year> 1992. </year>
Reference-contexts: A. Reliable Sites: Reliable sites are expected to be able to recover from failures relatively quickly, and hence the commit procedure is less complex. Reliable sites are assumed to support stable storage, combined with an efficient write-ahead-logging (WAL) scheme, e.g., Aries <ref> [7] </ref>. When a reliable site receives a data item, the site force-writes the data item along with its forward list to the stable storage, and then sends an acknowledgment message to its predecessor.
Reference: [8] <author> C. Mohan and I. Narang. </author> <title> Recovery and Coherency-Control Protocols for Fast Intersystem Page Transfer and Fine-Granularity Locking in a Shared Disks Transaction Environment. </title> <booktitle> Proc. of the 17th VLDB Conf., </booktitle> <year> 1991. </year>
Reference: [9] <author> L. Molesky and K. Ramamritham. </author> <title> Recovery Protocols for Shared Memory Database Systems. </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 11-22, </pages> <year> 1995. </year>
Reference-contexts: We do not currently discuss granularity issues, and assume that a data item is the unit of concurrency control and recovery as well as the unit of migration. Thus our scheme avoids data dependencies induced by data migration and supports isolated failure atomicity <ref> [9] </ref> ensuring that transactions executing on operational nodes are not affected by crashed nodes. The physical size of a data item may range from the record level to several pages long. The future high speed networking environment will provide quality of service (QoS) guarantees, including high network reliability.
Reference: [10] <author> C. Partridge. </author> <title> Gigabit Networking. Professional Computing. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: In this paper, a special case of future distributed systems, that of distributed database systems interconnected by gigabit-per-second networks is discussed in the above context. We refer to these as gigabit-networked databases (GNDB). Traditional data access and data sharing techniques are not expected to scale to gigabit network rates <ref> [6, 11, 10, 14, 2] </ref>. Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available.
Reference: [11] <author> C. Partridge. </author> <title> Protocols for High Speed Networks: Some questions and a few answers. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 25 </volume> <pages> 1019-1028, </pages> <year> 1993. </year>
Reference-contexts: In this paper, a special case of future distributed systems, that of distributed database systems interconnected by gigabit-per-second networks is discussed in the above context. We refer to these as gigabit-networked databases (GNDB). Traditional data access and data sharing techniques are not expected to scale to gigabit network rates <ref> [6, 11, 10, 14, 2] </ref>. Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available.
Reference: [12] <author> R. Ramaswami. </author> <title> Multiwavelength Lightwave Networks for Computer Communication. </title> <journal> IEEE Communications Magazine, </journal> <volume> 31(2) </volume> <pages> 78-88, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Several exciting advances are being made in the general area of high speed distributed computing. For instance, the rate at which information can be transmitted <ref> [12] </ref> and the rate at which information can be processed is increasing. Also, user desktops are being enhanced to the point that servers and clients may be indistinguishable in the future, with regards to computing power and functionality.
Reference: [13] <author> M. Stonebraker, P. M. Aoki, R. Devine, W. Litwin, and M. Olson. Mariposa: </author> <title> A New Architecture for Distributed Data. </title> <booktitle> Proc. of the 10th Int'l Conf. on Data Engineering, </booktitle> <pages> pp. 54-65, </pages> <year> 1994. </year>
Reference-contexts: The recovery scheme in shared-nothing systems that support data migration is quite difficult, as supported by previous work in <ref> [13, 2] </ref>. The scheme described here not only achieves the objective of failure resiliency, but is also efficient in the number of message passing rounds, as warranted in a high speed network environment.
Reference: [14] <author> J. D. Touch and D. J. Farber. </author> <title> The Effect of Latency on Protocols. </title> <booktitle> Proc. of the ACM SIGCOMM, </booktitle> <year> 1994. </year>
Reference-contexts: In this paper, a special case of future distributed systems, that of distributed database systems interconnected by gigabit-per-second networks is discussed in the above context. We refer to these as gigabit-networked databases (GNDB). Traditional data access and data sharing techniques are not expected to scale to gigabit network rates <ref> [6, 11, 10, 14, 2] </ref>. Thus if any advantages of a high speed network are to be realized, new schemes are required, that can efficiently utilize the huge bandwidths available.
Reference: [15] <author> Y. Wang and L. Rowe. </author> <title> Cache Consistency and Concur-rency Control in a Client/server DBMS Architecture. </title> <booktitle> Proc. of the ACM SIGMOD Conf., </booktitle> <pages> pp. 367-376, </pages> <year> 1991. </year>
Reference-contexts: The new recovery scheme is presented in Section 3, and Section 4 concludes the paper. 2 Concurrency Control in GNDB In general, we assume that GNDB is a client-server distributed database system <ref> [3, 15] </ref>. To simplify the discussion, we consider here a distributed database system with a single traditional database (DB) server and multiple clients with local processing capabilities. When a client needs a data item, it sends a request to the DB server which responds with the requested data item.
References-found: 15

