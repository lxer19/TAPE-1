URL: http://www.cs.umd.edu/~aporter/interval.ps
Refering-URL: http://www.cs.umd.edu/~aporter/html/selected_pubs.html
Root-URL: 
Title: Understanding the Effects of Developer Activities on Inspection Interval experiences suggest that regression models are
Author: Adam A. Porter Harvey P. Siy Lawrence G. Votta, Jr. 
Address: College Park, MD 20742 USA Naperville, IL 60566 USA  
Affiliation: Computer Science Department Software Production Research Department University of Maryland Lucent Technologies  
Note: Submitted to 19th International Conference on Software Engineering,  Moreover, these  
Email: faporter,harveyg@cs.umd.edu votta@research.bell-labs.com  
Phone: +1 630 224 6830 +1 630 713 4612  
Date: May 1997  
Abstract: We have conducted an industrial experiment to assess the cost-benefit tradeoffs of several software inspection processes. Our results to date explain the variation in observed effectiveness very well, but are unable to satisfactorily explain variation in inspection interval. In this article we examine the effect of a new factor - process environment on inspection interval (calendar time needed to complete the inspection). Our analysis suggests that process environment does indeed influence inspection interval. In particular, we found that nonuniform work priorities, time-varying workloads, and deadlines have significant effects. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> 9 development team who interact to develop and inspect software. </institution>
Reference-contexts: Finally, when rework is done, the code unit exits the system. This queueing system may be treated as a preemptive priority queue with feedback. Preemptive priority queues are analyzed in Kleinrock [6]. Simon <ref> [9] </ref> analyzed the case with feedback, where tasks are allowed to feed back into the system and change their priority and service requirements. <p> The former case is known as bulk arrivals and the latter is known as branching. The presence of bulk arrivals and branching means that tasks may not be independent of each other. There has been some previous work on this problem <ref> [9] </ref>. Hidden Dependencies. There may be other unknown dependencies between tasks which may cause one to wait on another. Miscellaneous Tasks. There may be other tasks that consume a significant amount of the developers' time and that must be accounted for. External Servers.
Reference: [1] <author> Richard A. Becker, John M. Chambers, and Al-lan R. Wilks. </author> <title> The New S Language. </title> <publisher> Wadsworth and Brooks/Cole, </publisher> <year> 1988. </year>
Reference: [2] <author> George E. Box, William G. Hunter, and J. Stuart Hunter. </author> <title> Statistics for Experimenters. </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1978. </year>
Reference-contexts: Analysis Strategy The goal of this analysis is to determine whether the data supports our hypothesis that the interaction of process environment and task priorities explain variation in inspection interval. We analyzed inspection interval using linear regression models <ref> [2] </ref>. We built one model for the pre-meeting interval (time from availability to meeting) and another for the post-meeting interval (time from meeting to the completion of repair).
Reference: [3] <author> Mark G. Bradac, Dewayne E. Perry, and Lawrence G. Votta. </author> <title> Prototyping a process monitoring experiment. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pages 155-165, </pages> <address> Baltimore, Maryland, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The variance appears to increase as the estimates do. This may suggest non-linear effects. estimated values. As with the pre-meeting model, the variance of the residuals is positively correlated with estimated values. See the previous Figure caption for a discussion of this plot. <ref> [3] </ref>, but little work has since been conducted on analyzing queues for particular applications. Our application suggests a queueing model in which each developer is a server, handling different tasks with different priorities. previous inspections. At any given time, developers can perform at most one task.
Reference: [4] <author> John M. Chambers and Trevor J. Hastie, </author> <title> editors. Statistical Models in S. </title> <publisher> Wadsworth & Brooks, </publisher> <year> 1992. </year>
Reference: [5] <author> Chris Chatfield. </author> <title> Model uncertainty, data mining and statistical inference. </title> <journal> Journal of the Royal Statistical Society, Series A, </journal> <volume> 158(3), </volume> <year> 1995. </year>
Reference: [6] <author> Leonard Kleinrock. </author> <title> Queueing Systems, </title> <booktitle> volume II: Computer Applications. </booktitle> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1976. </year>
Reference-contexts: Once the inspection is completed, the code unit is sent into the rework queue of the original developer. Finally, when rework is done, the code unit exits the system. This queueing system may be treated as a preemptive priority queue with feedback. Preemptive priority queues are analyzed in Kleinrock <ref> [6] </ref>. Simon [9] analyzed the case with feedback, where tasks are allowed to feed back into the system and change their priority and service requirements.
Reference: [7] <author> Audris Mockus, Adam A. Porter, Harvey P. Siy, and Lawrence G. Votta. </author> <title> Understanding the sources of variation in software inspections. </title> <type> Technical Report BL0112590-960416-12TM, </type> <institution> Bell Laboratories, Lucent Technologies, Naperville, IL, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: Using regression analysis, we found that although these factors explain much of the variation in effectiveness, they do not adequately explain variation in inspection interval <ref> [7] </ref>. In this article we examine whether a fourth factor process environment explains this variation. The process environment is the logistic, organization, and execution context in which a process operates. We conjecture that process environment affects interval when development processes subtly influence one another.
Reference: [8] <author> Adam A. Porter, Lawrence G. Votta, Harvey P. Siy, and Carol A. Toman. </author> <title> An experiment to assess the cost-benefits of code inspections in large scale software development. </title> <booktitle> In The Third Symposium on the Foundations of Software Engineering, </booktitle> <address> Washington, D.C., </address> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Therefore understanding, identifying, and eliminating bottlenecks in software development is extremely important. Until recently, however, little research has addressed this issue. Previously we conducted an industrial experiment at Lucent Technologies to determine which factors drive the cost and benefits of different software inspection processes <ref> [8] </ref>. To date we have explored the following factors. fl This work is supported in part by a National Science Foundation Faculty Early Career Development Award, CCR-9501354. Dr. <p> With the cooperation of professional developers working on an industrial software project at Lucent Technologies, we conducted a controlled experiment to compare the costs and benefits of several different software inspection processes (see Porter, et al. <ref> [8] </ref> for details). The project was to develop a compiler and environment to support developers of the 5ESS TM telephone switching system. The complete system contains over 55K new lines of C++ code, plus another 10K which was reused from a prototype.

References-found: 9

