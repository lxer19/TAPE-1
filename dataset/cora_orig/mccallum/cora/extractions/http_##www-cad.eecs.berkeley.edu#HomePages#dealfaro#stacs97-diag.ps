URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/stacs97-diag.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/papers.html
Root-URL: http://www.cs.berkeley.edu
Title: Hybrid Diagrams: A Deductive-Algorithmic Approach to Hybrid System Verification  
Author: Luca de Alfaro Arjun Kapur Zohar Manna 
Affiliation: Department of Computer Science Stanford University  
Note: In proceedings of STACS'97, LNCS, Springer-Verlag, February-March 1997.  
Abstract: We present a methodology for the verification of temporal properties of hybrid systems. The methodology is based on the deductive transformation of hybrid diagrams, which represent the system and its properties, and which can be algorithmically checked against the specification. This check either gives a positive answer to the verification problem, or provides guidance for the further transformation of the diagrams. The resulting methodology is complete for quantifier-free linear time temporal logic.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theor. Comp. Sci., </journal> <volume> 138(1) </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties <ref> [2, 1] </ref>, to deductive approaches for proving linear-time temporal logic properties [11, 7] and interval-based and duration properties [5, 3]. <p> Hybrid diagrams are related to the fairness diagrams of [4] and to the hybrid automata of <ref> [2, 1] </ref>. They consist of a graph whose vertices are labeled by assertions and whose edges are labeled by transition relations; associated with each diagram are fairness constraints, that encode acceptance conditions similar to those of !-automata. <p> Hybrid diagrams are related to hybrid automata, a formalism widely adopted for the modeling of hybrid systems and for the study of their temporal properties <ref> [2, 1] </ref>. While sharing a similar labeled-graph structure, the two formalisms differ in some respects. In a hybrid automaton, the dynamical behavior of the system and the discrete state-transitions are described by different components: the first by differential equations labeling the vertices, the second by transition relations labeling the edges.
Reference: 2. <author> R. Alur, C. Courcoubetis, T. Henzinger, and P. Ho. </author> <title> Hybrid automata: An algorithmic approach to the specification and analysis of hybrid systems. </title> <booktitle> In Workshop on Hybrid Systems, volume 736 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties <ref> [2, 1] </ref>, to deductive approaches for proving linear-time temporal logic properties [11, 7] and interval-based and duration properties [5, 3]. <p> Hybrid diagrams are related to the fairness diagrams of [4] and to the hybrid automata of <ref> [2, 1] </ref>. They consist of a graph whose vertices are labeled by assertions and whose edges are labeled by transition relations; associated with each diagram are fairness constraints, that encode acceptance conditions similar to those of !-automata. <p> We denote by L (S) the set of computations of a PTS S. ut A Room-Heater Example As our running example throughout the paper, we consider a variant of the temperature control system presented in <ref> [2] </ref>. The system, which we call RH, consists of a room with a window and a heater. The window, controlled by some independent agent, may be opened or closed at will. <p> Hybrid diagrams are related to hybrid automata, a formalism widely adopted for the modeling of hybrid systems and for the study of their temporal properties <ref> [2, 1] </ref>. While sharing a similar labeled-graph structure, the two formalisms differ in some respects. In a hybrid automaton, the dynamical behavior of the system and the discrete state-transitions are described by different components: the first by differential equations labeling the vertices, the second by transition relations labeling the edges.
Reference: 3. <author> Z. Chaochen, </author> <title> A.P. Ravn, and M.R. Hansen. An extended duration calculus for hybrid real-time systems. In Hybrid Systems, </title> <booktitle> volume 736 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 36-59. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties [2, 1], to deductive approaches for proving linear-time temporal logic properties [11, 7] and interval-based and duration properties <ref> [5, 3] </ref>. In this paper we present an approach that combines deductive and algorithmic methods into a methodology that is complete (relative to first-order reasoning) for proving linear-time temporal logic properties of hybrid systems, provided no temporal operator appears in the scope of a quantifier.
Reference: 4. <author> L. de Alfaro and Z. Manna. </author> <title> Temporal verification by diagram transformations. </title> <booktitle> In Computer Aided Verification, volume 1102 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 288-299. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Hybrid diagrams are related to the fairness diagrams of <ref> [4] </ref> and to the hybrid automata of [2, 1]. They consist of a graph whose vertices are labeled by assertions and whose edges are labeled by transition relations; associated with each diagram are fairness constraints, that encode acceptance conditions similar to those of !-automata. <p> Additionally, the CCPs can be used to guide the search for counterexamples, by directing the simulation of the original system along the CCPs. There are four rules to transform diagrams. The simulation rule modifies the graph structure of the diagram, enabling the study of safety properties <ref> [4] </ref>. The justice and compassion rules prove progress properties of the diagrams, and represent them as additional fairness constraints. The pruning rule eliminates portions of the diagram that are never traversed by any computation along which time diverges. <p> temperature eventually reaches the range from 65 ffi F to 75 ffi F, and that once the temperature is in this range, it will remain in this range forever. 3 Hybrid Diagrams To study the temporal behavior of a PTS, we introduce hybrid diagrams, derived from the fairness diagrams of <ref> [4] </ref>. A hybrid diagram (diagram, for short) A = (V; V; ; ; t; J ; C) consists of the following components. 1. A set V of typed state variables that includes the master clock T . 2. A set V of vertices. 3. <p> A just constraint indicates that a request that is performed without interruptions will eventually lead to gratification; a compassionate constraint indicates that a request performed infinitely often will be gratified infinitely often <ref> [11, 4] </ref>. Definition 2 (diagram computations). A run of a diagram is an infinite sequence of locations (v 0 ; s 0 ), (v 1 ; s 1 ), (v 2 ; s 2 ), . . . , satisfying the following conditions. 1. <p> of a hybrid system and of the safety and progress properties that have been proved about it, and are suited to the application of the diagram transformation rules that will be presented next. 4 Diagram Transformation Rules The temporal properties of a PTS are studied by means of transformation rules <ref> [4] </ref>. There are four rules: the simulation rule, used to study safety properties; the justice and compassion rules, used to study progress properties; and the pruning rule, used to prune portions of a diagram that are never traversed by runs along which time diverges. <p> This test, discussed in the next section, provides a sufficient condition for the diagram to satisfy the specification, and returns either a positive answer to the verification problem, or guidance for the extension of the chain of transformations. 4.1 Simulation Rule The simulation rule, derived from <ref> [4] </ref>, enables the transformation of a diagram into a new one, such that the second diagram is capable of simulating the first one. <p> This completeness result is relative to first-order reasoning, and is proved by giving the construction of the chain of transformations hd (S) fl ) A under the assumption L (S) L (A). The proof, which uses ideas from <ref> [10, 4] </ref>, has been omitted due to space constraints. 5 Proving Temporal Properties In this section we present an algorithm to check whether a diagram satisfies a specification written in the linear-time temporal logic T L s .
Reference: 5. <author> A. Kapur, T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Proving safety properties of hybrid systems. </title> <booktitle> In FTRTFT'94, volume 863 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 431-454. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties [2, 1], to deductive approaches for proving linear-time temporal logic properties [11, 7] and interval-based and duration properties <ref> [5, 3] </ref>. In this paper we present an approach that combines deductive and algorithmic methods into a methodology that is complete (relative to first-order reasoning) for proving linear-time temporal logic properties of hybrid systems, provided no temporal operator appears in the scope of a quantifier.
Reference: 6. <author> Y. Kesten, Z. Manna, and A. Pnueli. </author> <title> Verifying clocked transition systems. In Hybrid Systems III, </title> <booktitle> volume 1066 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 13-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The advantages of the proposed methodology over the rule-based approach of <ref> [11, 6] </ref> include the visual representation of the proof process, the provision of proof guidance, and the ability to prove specifications expressed by temporal formulas not in canonical form [10]. Hybrid diagrams are related to the fairness diagrams of [4] and to the hybrid automata of [2, 1]. <p> The diagrams represent the system behavior and the safety and progress properties that have been proved about it: the vertex and edge labels represent the safety properties, the fairness constraints represent the progress properties. Hybrid diagrams are sufficiently expressive to encode phase transition systems (PTSs) <ref> [9, 6] </ref>, which will be the system model adopted in this paper. <p> towards given goals, the rules enable the proof of justice and compassion properties of the systems; these properties are then represented as fairness constraints which are added to the diagrams. 2 Phase Transition Systems The hybrid system model we adopt in this paper is that of phase transition systems (PTS) <ref> [9, 6] </ref>. A PTS is a transition system that allows continuous state changes over time periods of positive duration, as well as discrete state changes in zero time. A PTS S = (V; ; T ; ; A) consists of the following components. 1. <p> For all 2 T , we require that the implication ! T = T 0 holds. 4. A time-progress assertion over V, used to specify a restriction on the progress of time (see <ref> [6] </ref> for a discussion of its use). 5. A finite set A of activities representing the continuous state changes. Each activity a 2 A consists of an enabling assertion C a over V d and of an evolution function F a : S fi IR 7! S. <p> The form of the assertion tick a [] insures that the progress constraint holds at every moment of a time-step, except possibly for the final one. As discussed in <ref> [6] </ref>, if is used only to encode upper bounds on the transition waiting times, assertion tick a [] can be rewritten without quantifiers. Definition 1 (PTS computations).
Reference: 7. <author> L. Lamport. </author> <title> Hybrid systems in TLA+. In Hybrid Systems, </title> <booktitle> volume 736 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 77-102. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties [2, 1], to deductive approaches for proving linear-time temporal logic properties <ref> [11, 7] </ref> and interval-based and duration properties [5, 3].
Reference: 8. <author> N.A. Lynch and H. Attiya. </author> <title> Using mappings to prove timing properties. </title> <journal> Distributed Computing, </journal> <volume> 6 </volume> <pages> 121-139, </pages> <year> 1992. </year>
Reference-contexts: To prove that all runs obey the constraint, the rules rely on ranking and delay functions to measure progress towards its gratification. The delay functions are similar to the mappings of <ref> [8] </ref>; our results indicate that to achieve completeness they need to be used in conjunction with ranking functions. Definition 9 (ranking and delay functions).
Reference: 9. <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <booktitle> In Proc. of the REX Workshop "Real-Time: Theory in Practice", volume 600 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The diagrams represent the system behavior and the safety and progress properties that have been proved about it: the vertex and edge labels represent the safety properties, the fairness constraints represent the progress properties. Hybrid diagrams are sufficiently expressive to encode phase transition systems (PTSs) <ref> [9, 6] </ref>, which will be the system model adopted in this paper. <p> towards given goals, the rules enable the proof of justice and compassion properties of the systems; these properties are then represented as fairness constraints which are added to the diagrams. 2 Phase Transition Systems The hybrid system model we adopt in this paper is that of phase transition systems (PTS) <ref> [9, 6] </ref>. A PTS is a transition system that allows continuous state changes over time periods of positive duration, as well as discrete state changes in zero time. A PTS S = (V; ; T ; ; A) consists of the following components. 1.
Reference: 10. <author> Z. Manna and A. Pnueli. </author> <title> Completing the temporal picture. </title> <journal> Theor. Comp. Sci., </journal> <volume> 83(1) </volume> <pages> 97-130, </pages> <year> 1991. </year>
Reference-contexts: The advantages of the proposed methodology over the rule-based approach of [11, 6] include the visual representation of the proof process, the provision of proof guidance, and the ability to prove specifications expressed by temporal formulas not in canonical form <ref> [10] </ref>. Hybrid diagrams are related to the fairness diagrams of [4] and to the hybrid automata of [2, 1]. <p> This completeness result is relative to first-order reasoning, and is proved by giving the construction of the chain of transformations hd (S) fl ) A under the assumption L (S) L (A). The proof, which uses ideas from <ref> [10, 4] </ref>, has been omitted due to space constraints. 5 Proving Temporal Properties In this section we present an algorithm to check whether a diagram satisfies a specification written in the linear-time temporal logic T L s .
Reference: 11. <author> Z. Manna and A. Pnueli. </author> <title> Models for reactivity. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 609-678, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Specification and verification methodologies for hybrid systems range from algorithmic methods for the verification of linear-time temporal logic properties [2, 1], to deductive approaches for proving linear-time temporal logic properties <ref> [11, 7] </ref> and interval-based and duration properties [5, 3]. <p> The advantages of the proposed methodology over the rule-based approach of <ref> [11, 6] </ref> include the visual representation of the proof process, the provision of proof guidance, and the ability to prove specifications expressed by temporal formulas not in canonical form [10]. Hybrid diagrams are related to the fairness diagrams of [4] and to the hybrid automata of [2, 1]. <p> A just constraint indicates that a request that is performed without interruptions will eventually lead to gratification; a compassionate constraint indicates that a request performed infinitely often will be gratified infinitely often <ref> [11, 4] </ref>. Definition 2 (diagram computations). A run of a diagram is an infinite sequence of locations (v 0 ; s 0 ), (v 1 ; s 1 ), (v 2 ; s 2 ), . . . , satisfying the following conditions. 1. <p> The formulas of T L s are obtained by combining first-order logic formulas by means of the future temporal operators e (next), 2 (always), 3 (eventually), U (until), and the corresponding past ones e , 2 - , 3 and S <ref> [11] </ref>. Given a diagram A and a formula 2 T L s , the algorithm provides either a positive answer to A j= , or information about the region of the diagram that can contain a counterexample to .
Reference: 12. <author> S. Safra. </author> <title> On the complexity of !-automata. </title> <booktitle> In Proc. 29th IEEE Symp. </booktitle> <institution> Found. of Comp. Sci., </institution> <year> 1988. </year>
Reference-contexts: The first step of the algorithm consists in constructing a Streett automaton N : that accepts all the computations that do not satisfy . The automaton is a first-order version of a classical Streett automaton <ref> [12] </ref>. 9 Definition 16 (Streett automaton).
Reference: 13. <author> H.B. Sipma, T.E. Uribe, and Z. Manna. </author> <title> Deductive model checking. </title> <booktitle> In Computer Aided Verification, </booktitle> <volume> volume 1102, </volume> <pages> pages 208-219. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 12 </month>
Reference-contexts: The CCPs provide guidance for the extension of the chain of transformations, following the insights of <ref> [13] </ref>. Additionally, the CCPs can be used to guide the search for counterexamples, by directing the simulation of the original system along the CCPs. There are four rules to transform diagrams. The simulation rule modifies the graph structure of the diagram, enabling the study of safety properties [4]. <p> Obtaining Guidance The presence of admissible and reachable SCSs in the product graph can be used to guide the further analysis of the system, following the insights of <ref> [13] </ref>. Given an admissible and reachable SCS X of (W; Z; H) = A N : , let X r W be the set of vertices that can appear along a path from Z to X in (W; H).
References-found: 13

