URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9504.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Email: e-mail: ftim,kamg@sarc.city.ac.uk,  e-mail: fsmr,gernotg@cse.unsw.edu.au,  e-mail: jochen.liedtke@gmd.de,  
Phone: fax: +44 171 477 8587 2  fax: +61 2 385 5995 3  fax: +49 2241 14 2105  
Title: Single Address Space Operating Systems  
Author: Tim Wilkinson Kevin Murray Stephen Russell Gernot Heiser Jochen Liedtke 
Address: City University, Northampton Square, London EC1V 0HB, UK,  Sydney 2052, Australia,  Birlinghoven, 53757 Sankt Augustin, Germany,  
Affiliation: 1 Systems Architecture Research Centre,  School of Computer Science and Engineering, University of New South Wales,  German National Research Center for Information Technology, GMD SET-RS, Schlo  
Date: 13 November 1995  
Pubnum: UNSW-CSE-TR-9504  
Abstract-found: 0
Intro-found: 0
Reference: [APW86] <author> M. Anderson, R. Pose, and C.S. Wallace. </author> <title> A password-capability system. </title> <journal> The Computer Journal, </journal> <volume> 29(1) </volume> <pages> 1-8, </pages> <year> 1986. </year>
Reference-contexts: Modification of permissions trees is controlled by additional permissions bits, defining which processes can modify the trees and thus preventing security being compromised. Mungi's protection model [VRH93] is based on password capabilities <ref> [APW86] </ref>. Capabilities may confer read, write, execute and delete rights. The password associated with each capability is a large random number chosen by the object's owner. Multiple capabilities may be created with the same rights but different passwords, allowing selective revocation at a later time.
Reference: [BCZ90] <author> John K. Bennett, John B. Carter, and Willy Zwaenepoel. Munin: </author> <title> Distributed shared memory based on type-specific memory coherence. </title> <booktitle> In Conference on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 168-176. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: Failure of a single node will not prevent access to other ring elements or subsequent repair. Secondly, data must be duplicated onto different machines to prevent failure of one making some data inaccessible. The multiple writer protocol <ref> [BCZ90] </ref> used for Angel's distributed shared memory (DSM) already maintains local copies of pages. Data are also written back to multiple disks to prevent disk failures causing problems.
Reference: [CLFL94] <author> Jeffrey S. Chase, Henry M. Levy, Michael J. Feeley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12 </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: A native 32-bit prototype of Angel has been in operation for about a year, while a native 64-bit prototype of Mungi is presently under development. A similar system, Opal <ref> [CLFL94] </ref> from the University of Washington, Seattle, USA, has recently been implemented on top of Mach. 2 Memory Protection While SASOS make sharing of data easy, this must not happen at the expense of security. <p> In fact, memory protection in SASOS is by no means weaker than in traditional systems <ref> [CLFL94] </ref>. As far as protection is concerned, the concept of an address space is replaced by a protection domain, which is the set of objects a process is allowed to access.
Reference: [D + 91] <editor> O. Deux et al. </editor> <title> The O 2 system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 34-48, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The question arises how this can be employed to present users with more attractive computing environments, and what an appropriate programming language might look like. A partial answer is given by object-oriented database systems, like ObjectStore [LLOW91] or O 2 <ref> [D + 91] </ref>. These systems present a very convenient data model. While their implementation is obviously possible on a traditional OS, their use of 64-bit unique object identifiers essentially simulates basic features of a SASOS.
Reference: [HERV93] <author> Gernot Heiser, Kevin Elphinstone, Stephen Russell, and Jerry Vochteloo. Mungi: </author> <title> A distributed single address-space operating system. </title> <type> Report 9314, </type> <institution> School of Computer Science and Engineering, University of NSW, </institution> <address> Sydney 2052, Australia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: In this paper we present some of the issues relating to SASOS design, and present possible approaches to their implementation. We use two SASOS as case studies: the Angel system [MSS + 93] developed at City University, London, UK, and the Mungi system <ref> [HERV93] </ref>, from the University of New South Wales, Sydney, Australia. A native 32-bit prototype of Angel has been in operation for about a year, while a native 64-bit prototype of Mungi is presently under development.
Reference: [LE95] <author> Jochen Liedtke and Kevin Elphinstone. </author> <title> Guarded page tables on MIPS R4600 or an exercise in architecture-dependent micro optimization. </title> <institution> School of Computer Science and Engineering Report 9503, University of NSW, University of NSW, </institution> <address> Sydney 2052, Australia, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: If a software cache for TLB entries is used to decrease the number of page table lookups, the GPT scheme performs well even with TLB miss rates of several percent <ref> [LE95] </ref>. 6 Fault tolerance and reliability Most operating systems neglect issues of fault tolerance. In UNIX systems this can be annoying but is not fatal to the operation of the machine. Most failures can be recovered by rebooting the relevant machine and checking the integrity of the data on disk.
Reference: [Lie94] <author> Jochen Liedtke. </author> <title> Address space sparsity and fine granularity. </title> <booktitle> In 6th SIGOPS European Workshop, </booktitle> <publisher> Schlo Dagstuhl, </publisher> <address> Germany, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: This basically requires a scan of the whole IPT, an expensive operation. Sharing is best supported by a hierarchical page table structure that can cope with sparse address spaces, such as guarded page tables (GPTs) <ref> [Lie94] </ref>.
Reference: [LLOW91] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The Object-Store database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 51-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The question arises how this can be employed to present users with more attractive computing environments, and what an appropriate programming language might look like. A partial answer is given by object-oriented database systems, like ObjectStore <ref> [LLOW91] </ref> or O 2 [D + 91]. These systems present a very convenient data model. While their implementation is obviously possible on a traditional OS, their use of 64-bit unique object identifiers essentially simulates basic features of a SASOS.
Reference: [MSS + 93] <author> Kevin Murray, Ashley Saulsbury, Tom Stiemerling, Tim Wilkinson, Paul Kelly, and Peter Osmon. </author> <title> Design and implementation of an object-orientated 64-bit single address space microkernel. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Microkernels and other Kernel Architectures, </booktitle> <pages> pages 31-43, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: In this paper we present some of the issues relating to SASOS design, and present possible approaches to their implementation. We use two SASOS as case studies: the Angel system <ref> [MSS + 93] </ref> developed at City University, London, UK, and the Mungi system [HERV93], from the University of New South Wales, Sydney, Australia. A native 32-bit prototype of Angel has been in operation for about a year, while a native 64-bit prototype of Mungi is presently under development.
Reference: [POS90] <author> Portable Operating System Interface (POSIX)Part 1: </author> <title> System Application Program Interface (API) [C Language]. </title> <journal> IEEE, </journal> <note> 1990. IEEE Std 1003.1-1990, ISO/IEC 9945-1. </note>
Reference-contexts: It is therefore important to show that a traditional OS can be emulated under a SASOS. As a typical example we therefore discuss how UNIX can be emulated, or, more accurately, how a POSIX <ref> [POS90] </ref> compliant library can be built. A large part of the POSIX interface deals with I/O. While no explicit file I/O exists in a SASOS, there is no reason why a file system cannot be emulated.
Reference: [PPTT91] <author> Dave Presotto, Rob Pike, Ken Thompson, and Howard Trickey. </author> <title> Plan 9, a distributed system. </title> <booktitle> In European Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 43-50, </pages> <address> Troms, Norway, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In practice, of course, users expect the system to provide a naming service. Both systems implement a default namespace scheme based on ideas demonstrated by Plan 9 <ref> [PPTT91] </ref>. Essentially, each process has its own tree-structured, private namespace which it can manipulate as it sees fit. Into this can be incorporated other namespaces, such as those of other processes, persistent file system stores, interfaces to servers, and so forth.
Reference: [RA85] <author> John Rosenberg and David Abramson. </author> <title> MONADS-PCa capability-based workstation to support software engineering. </title> <booktitle> In Proceedings of the 18th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 222-31. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: In a traditional OS, memory protection is based on the fact that address space boundaries can only be crossed with the cooperation of the OS, and so access to objects external to a process' address space is under full control of the system. 1 An exception was the Monads system <ref> [RA85] </ref> which used custom hardware to implement a large shared address space. 2 As there are no such address space boundaries in a SASOS, this seems, at a first glance, to weaken protection. In fact, memory protection in SASOS is by no means weaker than in traditional systems [CLFL94].
Reference: [VRH93] <author> Jerry Vochteloo, Stephen Russell, and Gernot Heiser. </author> <title> Capability-based protection in the Mungi operating system. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 108-15, </pages> <address> Ashev-ille, NC, USA, </address> <month> December </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Modification of permissions trees is controlled by additional permissions bits, defining which processes can modify the trees and thus preventing security being compromised. Mungi's protection model <ref> [VRH93] </ref> is based on password capabilities [APW86]. Capabilities may confer read, write, execute and delete rights. The password associated with each capability is a large random number chosen by the object's owner.
Reference: [Wil91] <author> Paul R. Wilson. </author> <title> Pointer swizzling at page fault time: Efficiently supporting huge address spaces on standard hardware. </title> <journal> Computer Architecture News, </journal> <volume> 19(4) </volume> <pages> 6-13, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: One is to convert pointers into position independent references for storage or communication. This process is called flattening, and must generally be done by the programmer. The alternative is to store pointers in a portable form, then translate them automatically when they are used, a process called pointer swizzling <ref> [Wil91] </ref>. Pointer swizzling is only possible if the system is able to detect all pointers. This imposes significant restrictions on pointer use, which are generally incompatible with languages like C. Shared memory offers a partial solution to these problems.
Reference: [Wil93] <author> Tim Wilkinson. </author> <title> Implementing Fault Tolerance in a 64-Bit Distributed Operating System. </title> <type> PhD thesis, </type> <institution> Systems Architecture Research Centre, City University, </institution> <address> London, UK, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The use of a single persistent data store, shared across a network of machines, makes the failure of any single machine difficult to tolerate the failure of one will generally result in the failure of all. Fault tolerance in single address space systems has been studied in <ref> [Wil93] </ref>. This proposed and modeled a highly distributed fault tolerance scheme based on the observation that, unlike multi-address space UNIX-like systems, in a SASOS only one resource must be reliablethe address space. Other software structures are built on top of this, and thereby inherit reliability.
Reference: [WMSS93] <author> Tim Wilkinson, Kevin Murray, Ashley Saulsbury, and Tom Stiemerling. </author> <title> Compiling for a 64-bit single address space architecture. </title> <type> Technical report TCU/SARC/1993/1, </type> <institution> Systems Architecture Research Centre, City University, </institution> <address> London, UK, </address> <month> March </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: In practice, very few programs actually use fork. Those which execute other processes mostly use some higher level function, e.g. popen (), which can implemented in a SASOS without problems. However, no POSIX compliance can be claimed without supporting fork. Fortunately, a solution is possible <ref> [WMSS93] </ref>. The program's code can be shared between child and parent without problems. However, all addresses in a data object are represented as offsets from the object's base address. Consequently, the data object can be duplicated for the child process, and its notion of the object's base changed.
References-found: 16

