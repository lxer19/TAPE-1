URL: http://www.cs.berkeley.edu/~daw/cs267/project/coll.ps
Refering-URL: http://www.cs.berkeley.edu/~daw/cs267/project/
Root-URL: http://www.cs.berkeley.edu
Email: fdaw,iangg@cs.berkeley.edu  
Title: Parallel Collision Search Making money the old-fashioned way| the NOW as a cash cow  
Author: David Wagner and Ian Goldberg 
Date: May 23, 1997  
Address: Berkeley  
Affiliation: University of California,  
Pubnum: CS 267 Final Project  
Abstract: Parallel collision search is the hard problem underlying a number of interesting applications in electronic commerce, graph theory, and codebreaking. Several algorithms, including one by Rivest and Shamir and another by van Oorschot and Wiener, have been proposed to solve this problem. In this paper, we present enhancements to these algorithms to achieve practical efficiency and near-perfect scalability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chaum, </author> <title> "Blind Signatures for Untraceable Payments," </title> <booktitle> Proc. of CRYPTO'82, </booktitle> <publisher> Plenum, </publisher> <address> D. </address> <note> Chaum, R.L. Rivest, & A.T. Sherman (Eds.). </note>
Reference-contexts: The shops then redeem these tokens at the bank to receive their payment. One key factor in any micropayment system is how to prevent customers from "minting" their own tokens. Whereas a number of electronic payment systems <ref> [1, 3, 9] </ref> solve this problem by using (somewhat heavyweight) digital signatures on tokens, the MicroMint electronic payment system proposed by Rivest and Shamir in [8] utilizes the collision search problem to allow the bank to mint tokens while making it infeasible for customers to do the same.
Reference: [2] <author> D.E. Knuth, </author> <title> The Art of Computer Programming, vol.2, </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: At each step, one checks to see if the two processes are at the same node in the graph; if they are, a cycle has been detected. It is an amazing and beautiful fact that this simple algorithm will always correctly detect cycling <ref> [2] </ref>. (Floyd's algorithm potentially imposes up to a factor of three increase in computational cost, but that can be virtually eliminated with some additional algorithmic design [10].) With these and other techniques, one can almost entirely eliminate the memory requirements and the expensive I/O operations that dominated performance of the naive
Reference: [3] <author> T. Okamoto and K. Ohta, </author> <title> "Universal Electronic Cash," </title> <booktitle> Proc. of CRYPTO'91, </booktitle> <publisher> Springer. </publisher>
Reference-contexts: The shops then redeem these tokens at the bank to receive their payment. One key factor in any micropayment system is how to prevent customers from "minting" their own tokens. Whereas a number of electronic payment systems <ref> [1, 3, 9] </ref> solve this problem by using (somewhat heavyweight) digital signatures on tokens, the MicroMint electronic payment system proposed by Rivest and Shamir in [8] utilizes the collision search problem to allow the bank to mint tokens while making it infeasible for customers to do the same.
Reference: [4] <author> J.M. Pollard, </author> <title> "A Monte Carlo method for factorization," </title> <journal> BIT, </journal> <volume> vol. 15 (1975), </volume> <pages> pp. 331-334. </pages>
Reference-contexts: In short, communications costs will totally overwhelm the computational costs, thus preventing any hope of scalability. 3.2 Other serial algorithms Pollard is credited with identifying the strong link between collision search and graph theory <ref> [4, 5] </ref>. Consider the (very large and sparse) graph with 2 n nodes (labelled 0 though 2 n 1), and a directed edge from x to y iff h (x) = y. Note that each node in this graph has outdegree exactly 1.
Reference: [5] <author> J.M. Pollard, </author> <title> "Monte Carlo Methods for Index Computation (mod p)," </title> <journal> Math. Comp., </journal> <volume> vol. 32, no. 143, </volume> <month> July </month> <year> 1978, </year> <pages> pp. 918-924. </pages>
Reference-contexts: In short, communications costs will totally overwhelm the computational costs, thus preventing any hope of scalability. 3.2 Other serial algorithms Pollard is credited with identifying the strong link between collision search and graph theory <ref> [4, 5] </ref>. Consider the (very large and sparse) graph with 2 n nodes (labelled 0 though 2 n 1), and a directed edge from x to y iff h (x) = y. Note that each node in this graph has outdegree exactly 1.
Reference: [6] <author> J.-J. Quisquater and J.-P. Delescaille, </author> <title> "How easy is collision search? Applications to DES," </title> <booktitle> Proc. of EUROCRYPT'89, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Note that, by the birthday paradox, we expect to walk for about 2 n=2 steps before cycling; therefore, Pollard's rho methods tend to detect a collision with about the same number of hash computations as more naive collision search algorithms. One cycle-detection technique, called "distinguished points" <ref> [6, 7] </ref> (attributed to Rivest [10]), is worth mentioning in particular.
Reference: [7] <author> J.-J. Quisquater and J.-P. Delescaille, </author> <title> "How easy is collision search? New results and applications to DES," </title> <booktitle> Proc. of CRYPTO'89, </booktitle> <publisher> Springer-Verlag. </publisher> <pages> 11 </pages>
Reference-contexts: Note that, by the birthday paradox, we expect to walk for about 2 n=2 steps before cycling; therefore, Pollard's rho methods tend to detect a collision with about the same number of hash computations as more naive collision search algorithms. One cycle-detection technique, called "distinguished points" <ref> [6, 7] </ref> (attributed to Rivest [10]), is worth mentioning in particular.
Reference: [8] <author> R.L. Rivest and A. Shamir, "PayWord and Micro--Mint: </author> <title> two simple micropayments schemes," </title> <booktitle> presented at the 1996 Security Protocols Workshop, </booktitle> <address> Cam-bridge, UK. </address>
Reference-contexts: One key factor in any micropayment system is how to prevent customers from "minting" their own tokens. Whereas a number of electronic payment systems [1, 3, 9] solve this problem by using (somewhat heavyweight) digital signatures on tokens, the MicroMint electronic payment system proposed by Rivest and Shamir in <ref> [8] </ref> utilizes the collision search problem to allow the bank to mint tokens while making it infeasible for customers to do the same. <p> Of course, the computation costs are unavoidable (because of the birthday paradox), but the I/O costs form a considerable amount of waste which we would very much like to avoid. The original algorithm described in the MicroMint paper <ref> [8] </ref> attempted to solve the collision search using a naive parallelization of the above algorithm. p processors each continually pick x's at random, calculate h (x), and stream them to a central server. This central server then stores and compares the expected 2 n=2 hash values as before. <p> The primary figure of interest is performance graphed against the number of processors. We have plotted our results in Figure 4. The bottommost (nearly flat) line in the graph shows the performance of our implementation of the naive MicroMint parallel collision search algorithm from <ref> [8] </ref>; Figure 5 shows a clos-eup of the plot near the origin, which is where all the interesting behavior happens for this algorithm.
Reference: [9] <author> M. Sirbu and J.D. Tygar, "NetBill: </author> <title> An Internet Commerce System Optimized for Network Delivered Services," </title> <journal> IEEE COMPCON'95, </journal> <year> 1995. </year>
Reference-contexts: The shops then redeem these tokens at the bank to receive their payment. One key factor in any micropayment system is how to prevent customers from "minting" their own tokens. Whereas a number of electronic payment systems <ref> [1, 3, 9] </ref> solve this problem by using (somewhat heavyweight) digital signatures on tokens, the MicroMint electronic payment system proposed by Rivest and Shamir in [8] utilizes the collision search problem to allow the bank to mint tokens while making it infeasible for customers to do the same.
Reference: [10] <author> P.C. van Oorschot and M.J. Wiener, </author> <title> "Parallel Collision Search with Cryptanalytic Applications," </title> <note> to appear, Sept 23 1996. 12 </note>
Reference-contexts: One cycle-detection technique, called "distinguished points" [6, 7] (attributed to Rivest <ref> [10] </ref>), is worth mentioning in particular. The idea is to single out a small subset of the graph nodes as "distinguished" based on some simple recognizable property; a convenient choice is to identify a node x as distinguished if the first d bits of x are zero, for some d. <p> It is an amazing and beautiful fact that this simple algorithm will always correctly detect cycling [2]. (Floyd's algorithm potentially imposes up to a factor of three increase in computational cost, but that can be virtually eliminated with some additional algorithmic design <ref> [10] </ref>.) With these and other techniques, one can almost entirely eliminate the memory requirements and the expensive I/O operations that dominated performance of the naive algorithm. In particular, serial collision search algorithms run near the theoretical upper bounds: there simply is very little room for improvement. <p> One simple approach is to have each of p processors independently execute a random walk, and do Pol-lard's rho cycling checks independently on each; this approach is attributed to Brent <ref> [10] </ref>. Rhos: only intra-processor collisions are detected This avoids the need for any communication, but one pays for the lack of sophistication with a significant performance hit: the speedup is only p p when using p processors. <p> See Figure 2. There is a much better approach, as discovered and related by van Oorschot and Wiener in recent work <ref> [10] </ref>. <p> The values from the previous iteration are then the desired collision. For more details on this algorithm of van Oorschot and Wiener, we refer the interested reader to their paper <ref> [10] </ref>. We decided to investigate their algorithm in more detail, implement in on a real-world parallel processing platform, and examine how well it behaves in practice. We report on that investigation in further detail in the following sections.
References-found: 10

