URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/3.ps
Refering-URL: http://www.cs.toronto.edu/~chechik/courses97/csc2108/projects/web/
Root-URL: 
Title: Automatic Verification of Asynchronous Retransmission Go-Back-N ARQ Protocols Using the Concurrency Workbench  
Author: Hai Wang and Hwei Sheng Teoh 
Address: Toronto, Ontario, Canada M5S 3G4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: The Go-Back-N and Selective-Repeat automatic repeat request (ARQ) protocols are widely used for error control in computer-communication networks. They are nearly optimal for channels characterized by low error rates and small propagation delays, and thus suitable for many classical data transmission applications. However, these protocols are not efficient for modern non-conventional channels with high error rates and/or large propagation delays, such as mobile links and satellite links. In this paper we present a family of new protocols, termed Asynchronous Retransmission Go-Back-N ARQ protocols, which offer the potential for better performance in environments characterized by high error rates and/or large propagation delays. We verify that these protocols are deadlock free using the Concurrency Workbench. We also verify that all these new protocols provide the same services to applications as the basic Go-Back-N protocol, and all of them are equivalent to the basic Go-Back-N protocol from the application point view. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Cleaveland, J. Parrow and B. Steffen. </author> <title> The Concurrency Workbench: A Semantics Based Tool for Verification of Concurrent Systems. </title> <journal> ACM Transaction on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: It is particularly suitable for automatic verification of communication protocols <ref> [1, 4] </ref>. <p> = 3 is presented in Appendix A. 8 p = (i + x h + N + 1)mod (N + 1) for all integers h 2 [0; j 1]. 3.4 Specification of the Asynchronous Retransmission Go-Back-N Protocols In the Concurrency Workbench, we can enumerate all possible states of a process <ref> [1, 4] </ref>. As mentioned in Section 2, the only difference between two different Asynchronous Retransmission Go-Back-N protocols is that they use different K which is an integer between 1 and N + 1 inclusive. <p> We first define some propositional macros. prop Can (a) = &lt;<a&gt;>T; prop Bx (P) = max (Z.P & [-]Z); Intuitively, a state satisfies Bx (P) if every state reachable from the argument state satisfies P, while a state satisfies Can (a) if a may occurs as the next visible action <ref> [1] </ref>. <p> to test whether two protocols are observationally congruent (i.e., observationally equal), observationally equivalent (i.e., weakly bisimilar), may equivalent (i.e., 11 protocol, where p = (i h + N + 1)mod (N + 1) for all integers h 2 [0; j]. trace equivalent), must equivalent, testing equivalent (i.e., failures equivalent) respectively <ref> [1, 4] </ref>.
Reference: [2] <author> F. Halsall. </author> <title> Data Communications, Computer networks and Open Systems, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: The Concurrency Workbench specification for N = 3 is presented in Appendix A. 5 3.2 Specification of the Basic Go-Back-N Protocol According to the definition of the basic Go-Back-N protocol <ref> [2] </ref>, the state transition diagram of the receiver of the basic Go-Back-N protocol is quite simple. The receiver has 2 (N + 1) states, namely, ReceiveiWhenNoNakSent and ReceiveiWhenNakSent for i = 0; 1; :::; N . <p> Here receive means delivering a correctly received packet to the application, and time-out represents 6 the occurrence of a time-out. The Concurrency Workbench specification of the receiver for N = 3 is presented in Appendix A. According to the definition of the basic Go-Back-N protocol <ref> [2] </ref>, the state transition diagram of the sender of the basic Go-Back-N protocol is complicated. It has (N + 1) 2 states for sending packets and 2 states for retransmitting packets.
Reference: [3] <author> S. Lin, D. J. Costello, Jr. and M. J. Miller. </author> <title> Automatic-repeat-request error-control schemes. </title> <journal> IEEE Communication Magazine, </journal> <volume> 22(12) </volume> <pages> 5-17, </pages> <month> December </month> <year> 1984. </year>
Reference-contexts: Approaches to this problem can be classified into three categories, namely, automatic repeat request (ARQ), forward error control (FEC), 1 and hybrid ARQ-FEC techniques <ref> [3] </ref>. In ARQ techniques, an error-detecting code is used to detect whether a received packet contains errors. If so, the receiver discards the erroneous packet, and a retransmission request is sent to the sender through a feedback channel. <p> In this case, no retransmission is required. In hybrid ARQ-FEC techniques, appropriate ARQ and FEC techniques are incorporated. Generally, hybrid ARQ-FEC techniques lead to better performance if the two basic error-control techniques are properly combined. There are three basic types of ARQ techniques: Stop-and-Wait, Go-Back-N and Selective-Repeat protocols <ref> [3] </ref>. In the Stop-and-Wait protocol, the sender sends a packet to the receiver and waits for an acknowledgment. Once the packet has been successfully received or it has been detected in error, the receiver returns a positive acknowledgment (ACK) or a negative acknowledgment (NAK) respectively. <p> Retransmissions continue until the sender receives an ACK. This protocol is simple but inherently inefficient due to the idle time spent in waiting for the receiver acknowledgment after each transmission <ref> [3] </ref>. In Go-Back-N protocols, the sender continuously transmits packets in order and then stores them pending receipt of an acknowledgment for each until N + 1 unacknowledged packets have been transmitted or a NAK has been received. Each packet contains a unique identifier. <p> Go-Back-N protocols are more efficient than the Stop-and-Wait protocol, and present a satisfactory performance when the error rate is not too high and the propagation delay is small, but they become rapidly inefficient for high error rates and/or large propagation delays <ref> [3, 5] </ref>. In the Selective-Repeat protocol, the sender also transmits packets continuously, but only retransmits those packets that are negatively acknowledged. This protocol is more efficient than Go-Back-N protocols, particularly when the propagation delay is large. <p> This protocol is more efficient than Go-Back-N protocols, particularly when the propagation delay is large. However, this protocol also requires extensive system resources (theoretically, an infinite buffer at receiver) and more complex logic at both sender and receiver <ref> [3] </ref>. Both the Go-Back-N and Selective-Repeat ARQ protocols are nearly optimal for channels characterized by low error rates and small propagation delays, and thus they are widely used for error control in many classical computer-communication networks. <p> This is the reason that the basic Go-Back-N protocol leads to much degraded performance when error rates are high and/or propagation delays are large <ref> [3, 5] </ref>. Like the Stutter Go-Back-N protocol, all Asynchronous Retransmission Go-Back-N Protocols try to improve the performance by utilizing these idle periods. Let p be the mean error rate and let d be the mean propagation delay during a given time interval.
Reference: [4] <author> F. Moller. </author> <title> The Edinburgh Concurrency Workbench (Version 7). </title> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, UK, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: It is particularly suitable for automatic verification of communication protocols <ref> [1, 4] </ref>. <p> = 3 is presented in Appendix A. 8 p = (i + x h + N + 1)mod (N + 1) for all integers h 2 [0; j 1]. 3.4 Specification of the Asynchronous Retransmission Go-Back-N Protocols In the Concurrency Workbench, we can enumerate all possible states of a process <ref> [1, 4] </ref>. As mentioned in Section 2, the only difference between two different Asynchronous Retransmission Go-Back-N protocols is that they use different K which is an integer between 1 and N + 1 inclusive. <p> to test whether two protocols are observationally congruent (i.e., observationally equal), observationally equivalent (i.e., weakly bisimilar), may equivalent (i.e., 11 protocol, where p = (i h + N + 1)mod (N + 1) for all integers h 2 [0; j]. trace equivalent), must equivalent, testing equivalent (i.e., failures equivalent) respectively <ref> [1, 4] </ref>.
Reference: [5] <author> D. Towsley. </author> <title> The stutter go-back-N ARQ protocol. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-27(6):869-875, </volume> <month> June </month> <year> 1979. </year> <month> 14 </month>
Reference-contexts: Go-Back-N protocols are more efficient than the Stop-and-Wait protocol, and present a satisfactory performance when the error rate is not too high and the propagation delay is small, but they become rapidly inefficient for high error rates and/or large propagation delays <ref> [3, 5] </ref>. In the Selective-Repeat protocol, the sender also transmits packets continuously, but only retransmits those packets that are negatively acknowledged. This protocol is more efficient than Go-Back-N protocols, particularly when the propagation delay is large. <p> However, these protocols are not efficient for modern non-conventional channels with high error rates and/or large propagation delays, such as mobile and satellite links. Many ARQ protocols have been developed to achieve better performance in this kind of environment. Towsley's Stutter Go-Back-N protocol is a well-known example <ref> [5] </ref>. In the Stutter Go-Back-N protocol, the sender repeatly transmits the last unacknowledged packet during the period of time the channel would normally be idle under the basic Go-Back-N protocol. <p> This is the reason that the basic Go-Back-N protocol leads to much degraded performance when error rates are high and/or propagation delays are large <ref> [3, 5] </ref>. Like the Stutter Go-Back-N protocol, all Asynchronous Retransmission Go-Back-N Protocols try to improve the performance by utilizing these idle periods. Let p be the mean error rate and let d be the mean propagation delay during a given time interval. <p> These Asynchronous Retransmission Go-Back-N protocols offer the potential for better performance in environments characterized by high error rates and/or large propagation delays. It has been proved that the Stutter Go-Back-N protocol achieves better performance than the basic Go-Back-N protocol when error rates are high and/or propagation delays are large <ref> [5] </ref>. 3 Verification of Protocols Using the Concurrency Workbench The Concurrency Workbench is an automatic tool that supports the verification of finite-state processes. It is particularly suitable for automatic verification of communication protocols [1, 4].
References-found: 5

