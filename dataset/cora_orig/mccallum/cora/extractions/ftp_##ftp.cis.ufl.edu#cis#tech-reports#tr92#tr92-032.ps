URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-032.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: pk@cis.ufl.edu ted@cis.ufl.edu  
Title: Implementing Distributed Search Structures  
Author: Padmashree Krishna Theodore Johnson 
Keyword: Data Structures, Distributed Databases, Distributed Search Structures, Load-balancing.  
Date: November 4, 1992  
Address: Gainesville, FL 32611  
Affiliation: Computer and Information Sciences Department University of Florida  
Abstract: Distributed search structures are useful for parallel databases and in maintaining distributed storage systems. Although a considerable amount of research has been done on developing parallel search structures on shared-memory multiprocessors, little has been done on the development of search structures for distributed-memory systems. In this paper we discuss some issues in the design and implementation of distributed B-trees, such as methods for low-overhead synchronization of tree restructuring and node mobility. One goal of this work is to implement a data-balanced dictionary which allows for balanced processor and space utilization. We present an algorithm for dynamic data-load balancing which uses node mobility mechanisms. We also study the effects that balancing and not balancing data have on the structure of a distributed B-tree. Finally, we demonstrate that our load-balancing algorithm distributes the nodes of a B-tree very well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bayer R. and McCreight E. </author> <title> Concurrency of operations on B-trees, </title> <journal> Acta Informatica 1, </journal> <year> 1972, </year> <pages> pp. 173-189. </pages>
Reference-contexts: In this paper we present some mechanisms for data balancing. Other issues that arise from load balancing are mechanisms for node mobility and out-of-order information handling. 1.1 Previous Work Several approaches to the concurrent B-tree problem have been proposed <ref> [1] </ref>, [10], [12], [16]. Each of these approaches uses some form of locking technique to ensure exclusive access to a node. All concurrent search tree algorithms require a concurrency control technique to keep two or more processes accessing the B-tree from interfering with one another.
Reference: [2] <author> Colbrook A., Brewer A. E., Dellarocas C.N. and Weihl E. W. </author> <title> An Algorithm for Concurrent Search Trees, </title> <booktitle> Proccedings of the 20th International Conference on Parallel Processing, </booktitle> <year> 1991, </year> <pages> pp. 38-41. </pages>
Reference-contexts: The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg [14], Colbrook et al. <ref> [2] </ref> and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. Colbrook et al. [2] have proposed a pipelined distributed B-tree, where each level of the tree is maintained by a different processor. <p> Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg [14], Colbrook et al. <ref> [2] </ref> and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. Colbrook et al. [2] have proposed a pipelined distributed B-tree, where each level of the tree is maintained by a different processor. The parallelism achieved is limited by the height of the B-tree and the processors are not data balanced. 2 Johnson and Colbrook [6] present a distributed B-tree suitable for message-passing architectures.
Reference: [3] <author> Ellis S. C. </author> <title> Distributed Data Structures: A Case Study, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-34, No. 12, </volume> <month> December </month> <year> 1985. </year> <month> 16 </month>
Reference-contexts: A distributed linear hashing method that's particularly useful for main memory databases is discussed in [17]. The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis <ref> [3] </ref>, Severance [17], Peleg [14], Colbrook et al. [2] and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. <p> The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis <ref> [3] </ref>, Severance [17], Peleg [14], Colbrook et al. [2] and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. Colbrook et al. [2] have proposed a pipelined distributed B-tree, where each level of the tree is maintained by a different processor.
Reference: [4] <author> Fan Z. and Cheng K. </author> <title> A Generalized Simultaneous Access Dictionary Machine, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 2, No. 2, </volume> <month> April </month> <year> 1991. </year>
Reference: [5] <author> Johnson T. and Shasha D. </author> <title> A Framework for the performance Analysis of Concurrent B-tree Algorithms, </title> <booktitle> Proceedings of the 9th ACM Symposium on Principles of Database Systems, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: The link provides a means of reaching a node when a split has occurred, thereby helping the node to recover from misnavigated operations. The B-link-tree algorithms have been found to have the highest performance of all concurrent B-tree algorithms <ref> [5] </ref>. In the concurrent B-link-tree proposed by Sagiv [15], every node has a field that is the highest-valued key stored in the subtree. 3 A search operation starts at the root node and proceeds downwards. In this algorithm at most only one node is locked at any time. <p> Experiment B: In the next experiment, we vary experiment A by changing the key distribution pattern dynamically. Since the B-tree property guarantees that the keys are nicely distributed among the nodes <ref> [5] </ref>, a noticeable performance enhancement may not be observed in a uniformly distributed data pattern. So, to study the effect of our load balancing algorithm when the distribution changes, we have introduced hot spots in our key generation pattern.
Reference: [6] <author> Johnson T. and Colbrook A. </author> <title> A Distributed Data-Balanced Dictionary Based on the B-link Tree, </title> <booktitle> International Parallel Processing Symposium, </booktitle> <month> March </month> <year> 1992, </year> <pages> pp. 319-325. </pages>
Reference-contexts: The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg [14], Colbrook et al. [2] and Johnson and Colbrook <ref> [6] </ref>: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. Colbrook et al. [2] have proposed a pipelined distributed B-tree, where each level of the tree is maintained by a different processor. <p> Colbrook et al. [2] have proposed a pipelined distributed B-tree, where each level of the tree is maintained by a different processor. The parallelism achieved is limited by the height of the B-tree and the processors are not data balanced. 2 Johnson and Colbrook <ref> [6] </ref> present a distributed B-tree suitable for message-passing architectures. The interior nodes are replicated to improve parallelism and alleviate the bottleneck. Data balancing among processors has been studied by Johnson and Colbrook [6]. Lee [9] et al. have discussed a fault-tolerant scheme for distributing queues. <p> limited by the height of the B-tree and the processors are not data balanced. 2 Johnson and Colbrook <ref> [6] </ref> present a distributed B-tree suitable for message-passing architectures. The interior nodes are replicated to improve parallelism and alleviate the bottleneck. Data balancing among processors has been studied by Johnson and Colbrook [6]. Lee [9] et al. have discussed a fault-tolerant scheme for distributing queues. Here, the space required by each processor is balanced. Each processor can keep the same size segment of the queue. Peleg [14] has proposed several structures for implementing a distributed dictionary. <p> Search Algorithm for a B-link Tree. An insert operation works in two phases: a search phase and a restructuring phase <ref> [6] </ref>. The difference between the search phase of an insert operation and the search operation described above is that, here the R lock on the leaf nodes is replaced by a W (exclusive write) lock. The key is inserted if not already present in the appropriate leaf.
Reference: [7] <author> Johnson T. </author> <title> Distributed Indices for Accessing Distributed Data, </title> <note> 12th IEEE Mass Storage Symposium 1992. [To appear]. </note>
Reference-contexts: 1 Introduction Current commercial and scientific database systems deal with vast amounts of data. Since the volume of data to be handled is so large, it may not be possible to store all the data at one place. Hence, distributed techniques are necessary to create large scale efficient distributed storage <ref> [7] </ref>. Larger amounts of data can be stored by partitioning the system, which also allows for parallel access to the data. The distributed data management's complexity depends strongly on the data structures used.
Reference: [8] <author> Jul E., Levy H., Hutchinson N. and Black A. </author> <title> Fine Grained Mobility in the Emerald System, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 6, No. 1, </volume> <month> February </month> <year> 1988, </year> <pages> pp. 109-133. </pages>
Reference-contexts: Each processor can keep the same size segment of the queue. Peleg [14] has proposed several structures for implementing a distributed dictionary. The paper addresses message-passing complexity and data balancing. In the context of node mobility, object mobility has been proposed in Emerald <ref> [8] </ref>. Objects keep forwarding information even after they have moved to another node and use a broadcast protocol if no forwarding information is available. Our algorithms require considerably less overhead. 2 Concurrent B-tree Link Algorithm A B-tree of order m is a tree that satisfies the following conditions: 1.
Reference: [9] <author> Lee P., Chen Y. and Holdman M. J. DRISP: </author> <title> A Versatile Scheme For Distributed Fault-tolerant Queues, </title> <booktitle> IEEE 11th International Conference on Distributed Computing Systems, </booktitle> <year> 1991. </year>
Reference-contexts: The interior nodes are replicated to improve parallelism and alleviate the bottleneck. Data balancing among processors has been studied by Johnson and Colbrook [6]. Lee <ref> [9] </ref> et al. have discussed a fault-tolerant scheme for distributing queues. Here, the space required by each processor is balanced. Each processor can keep the same size segment of the queue. Peleg [14] has proposed several structures for implementing a distributed dictionary. The paper addresses message-passing complexity and data balancing.
Reference: [10] <author> Lehman P.L., and Yao S.B. </author> <title> Efficient Locking for Concurrent Operations on B-trees, </title> <journal> ACM Transactions on Database Systems 6, </journal> <month> December </month> <year> 1981, </year> <pages> pp. 650-670. </pages>
Reference-contexts: In this paper we present some mechanisms for data balancing. Other issues that arise from load balancing are mechanisms for node mobility and out-of-order information handling. 1.1 Previous Work Several approaches to the concurrent B-tree problem have been proposed [1], <ref> [10] </ref>, [12], [16]. Each of these approaches uses some form of locking technique to ensure exclusive access to a node. All concurrent search tree algorithms require a concurrency control technique to keep two or more processes accessing the B-tree from interfering with one another. <p> In shared-memory, this scenario occurs when more than one process contends for the same memory location. In a distributed architecture, contention occurs when one processor receives messages requesting access to a node from every other processor. Sagiv [15] and Lehman and Yao <ref> [10] </ref> use a link technique to reduce contention. Several data structures suitable for shared memory parallel architectures have been described. A hash algorithm for massively parallel systems is proposed in [20]. This algorithm, called Two Phase Hashing, combines chaining and linear probing.
Reference: [11] <author> Matsliach G. and Shmueli O. </author> <title> An Efficient Method for Distributing Search Structures, </title> <booktitle> Proceedings of the 10th IEEE Symposium on Reliable Distributed Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Parker [13] describes a highly concurrent search structure for parallel shared memory that uses sibling tries. Parker uses links to increase concurrency. Search structures based on LOLS family, Linear Ordinary-Leaves Structures (such as B + -trees, K-D-B-trees, etc.) have been proposed in <ref> [11] </ref>. The paper addresses the problem of designing search structures to fit shared memory multiprocessor multidisk systems. Parallel B-trees using multi-version memory have been proposed by Wang and Weihl [19].
Reference: [12] <author> Miller R. and Snyder L. </author> <title> Multiple Access to B-trees, </title> <booktitle> Proccedings of the 1978 Conference on Information Sciences and Systems, </booktitle> <institution> Johns Hopkins University, Baltimore, </institution> <month> March </month> <year> 1978, </year> <pages> pp. 400-408. </pages>
Reference-contexts: In this paper we present some mechanisms for data balancing. Other issues that arise from load balancing are mechanisms for node mobility and out-of-order information handling. 1.1 Previous Work Several approaches to the concurrent B-tree problem have been proposed [1], [10], <ref> [12] </ref>, [16]. Each of these approaches uses some form of locking technique to ensure exclusive access to a node. All concurrent search tree algorithms require a concurrency control technique to keep two or more processes accessing the B-tree from interfering with one another.
Reference: [13] <author> Parker D. J. </author> <title> A Concurrent Search Structure, </title> <journal> Journal of Parallel and Distributed Computing 7, </journal> <year> 1989, </year> <pages> pp. 256-278. </pages>
Reference-contexts: Sagiv [15] and Lehman and Yao [10] use a link technique to reduce contention. Several data structures suitable for shared memory parallel architectures have been described. A hash algorithm for massively parallel systems is proposed in [20]. This algorithm, called Two Phase Hashing, combines chaining and linear probing. Parker <ref> [13] </ref> describes a highly concurrent search structure for parallel shared memory that uses sibling tries. Parker uses links to increase concurrency. Search structures based on LOLS family, Linear Ordinary-Leaves Structures (such as B + -trees, K-D-B-trees, etc.) have been proposed in [11].
Reference: [14] <author> Peleg D. </author> <title> Distributed Data Structures: A Complexity-Oriented View, </title> <booktitle> Fourth International Workshop on Distributed Algorithms, </booktitle> <year> 1990. </year>
Reference-contexts: A distributed linear hashing method that's particularly useful for main memory databases is discussed in [17]. The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg <ref> [14] </ref>, Colbrook et al. [2] and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here. <p> Data balancing among processors has been studied by Johnson and Colbrook [6]. Lee [9] et al. have discussed a fault-tolerant scheme for distributing queues. Here, the space required by each processor is balanced. Each processor can keep the same size segment of the queue. Peleg <ref> [14] </ref> has proposed several structures for implementing a distributed dictionary. The paper addresses message-passing complexity and data balancing. In the context of node mobility, object mobility has been proposed in Emerald [8].
Reference: [15] <author> Sagiv Y. </author> <title> Concurrent Operations on B-Trees with Overtaking, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 33(2), </volume> <month> October </month> <year> 1986, </year> <pages> pp. 275-296. </pages>
Reference-contexts: The contention is more pronounced at the higher levels of the tree. In shared-memory, this scenario occurs when more than one process contends for the same memory location. In a distributed architecture, contention occurs when one processor receives messages requesting access to a node from every other processor. Sagiv <ref> [15] </ref> and Lehman and Yao [10] use a link technique to reduce contention. Several data structures suitable for shared memory parallel architectures have been described. A hash algorithm for massively parallel systems is proposed in [20]. This algorithm, called Two Phase Hashing, combines chaining and linear probing. <p> The link provides a means of reaching a node when a split has occurred, thereby helping the node to recover from misnavigated operations. The B-link-tree algorithms have been found to have the highest performance of all concurrent B-tree algorithms [5]. In the concurrent B-link-tree proposed by Sagiv <ref> [15] </ref>, every node has a field that is the highest-valued key stored in the subtree. 3 A search operation starts at the root node and proceeds downwards. In this algorithm at most only one node is locked at any time.
Reference: [16] <author> Samadi B. </author> <title> B-trees in a system with multiple users, </title> <journal> Information Processing Letters, </journal> <volume> 5, </volume> <year> 1976, </year> <pages> pp. 107-112. </pages>
Reference-contexts: In this paper we present some mechanisms for data balancing. Other issues that arise from load balancing are mechanisms for node mobility and out-of-order information handling. 1.1 Previous Work Several approaches to the concurrent B-tree problem have been proposed [1], [10], [12], <ref> [16] </ref>. Each of these approaches uses some form of locking technique to ensure exclusive access to a node. All concurrent search tree algorithms require a concurrency control technique to keep two or more processes accessing the B-tree from interfering with one another.
Reference: [17] <author> Severance C. and Pramanik S. </author> <title> Distributed Linear Hashing for Main Memory Databases, </title> <booktitle> International Conference on Parallel Processing, </booktitle> <year> 1990. </year> <title> 17 Uniform distribution Hot spots distribution No load balancing Load balancing No load balancing Load balancing Keys Avg. </title> <institution> Coeff. of Avg. Coeff. of Keys Avg. Coeff. of Avg. Coeff. </institution> <note> of moves variation moves variation moves variation moves variation 500 0.79 0.14 0.81 0.13 500 0.77 0.14 0.67 0.65 4500 0.10 0.25 0.13 0.02 4275 0.09 1.15 0.18 0.03 8500 0.05 0.25 0.08 0.02 7622 0.05 1.13 0.11 0.02 Table 1: </note> <institution> Load Balancing Statistics </institution>
Reference-contexts: Parallel B-trees using multi-version memory have been proposed by Wang and Weihl [19]. Here, every processor has a copy of the leaf node, and updates to the copies are made in a "lazy" manner. A distributed linear hashing method that's particularly useful for main memory databases is discussed in <ref> [17] </ref>. The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg [14], Colbrook et al. [2] and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, <p> A distributed linear hashing method that's particularly useful for main memory databases is discussed in <ref> [17] </ref>. The paper addresses the problem of maintaining local copies of the centralized variables, and discusses various recovery mechanisms. Distributed memory data structures have been proposed by Ellis [3], Severance [17], Peleg [14], Colbrook et al. [2] and Johnson and Colbrook [6]: Ellis [3] has proposed a distributed extendible hashing technique, that uses techniques similar to the ones we use here.
Reference: [18] <author> Shasha D. and Goodman N. </author> <title> Concurrent Search Tree Algorithms, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(1), </volume> <year> 1988, </year> <pages> pp. 53-90. </pages>
Reference: [19] <author> Weihl E. W. and Wang P. </author> <title> Multi-version Memory: Software cache Management for Concurrent B Trees, </title> <booktitle> Proceedings of the 2nd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <year> 1990, </year> <pages> pp. 650-655. </pages>
Reference-contexts: Search structures based on LOLS family, Linear Ordinary-Leaves Structures (such as B + -trees, K-D-B-trees, etc.) have been proposed in [11]. The paper addresses the problem of designing search structures to fit shared memory multiprocessor multidisk systems. Parallel B-trees using multi-version memory have been proposed by Wang and Weihl <ref> [19] </ref>. Here, every processor has a copy of the leaf node, and updates to the copies are made in a "lazy" manner. A distributed linear hashing method that's particularly useful for main memory databases is discussed in [17].
Reference: [20] <author> Yen I. and Bastani F. </author> <title> Hash Table in Massively Parallel Systems, </title> <booktitle> Proceedings of the 1992 Interna tional Conferences on Computer Languages, </booktitle> <month> April 20-23, </month> <year> 1992, </year> <pages> pp. 660-664. </pages> <note> 18 spot distribution. 19 </note>
Reference-contexts: Sagiv [15] and Lehman and Yao [10] use a link technique to reduce contention. Several data structures suitable for shared memory parallel architectures have been described. A hash algorithm for massively parallel systems is proposed in <ref> [20] </ref>. This algorithm, called Two Phase Hashing, combines chaining and linear probing. Parker [13] describes a highly concurrent search structure for parallel shared memory that uses sibling tries. Parker uses links to increase concurrency.
References-found: 20

