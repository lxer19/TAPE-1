URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/Papers/Aero98.ps
Refering-URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/vouk.se.html
Root-URL: http://www.csc.ncsu.edu
Email: kim@bvcd.csc.ncsu.edu  
Phone: (919) 515-6014  
Title: Fault-Tolerant Software Voters Based on Fuzzy Equivalence Relations  
Author: Kalhee Kim, Mladen A. Vouk and David F. McAllister 
Note: TABLE OF CONTENTS  
Address: Raleigh, NC 27695-8206  
Affiliation: Department of Computer Science North Carolina State University  
Abstract: Redundancy based fault-tolerant software strategies frequently use some form of voting to decide which of the answers their functionally equivalent versions produce is correct. When voting involves comparisons of floating-point outputs, it is necessary to use a tolerance value in order to declare two outputs equal. Comparing more than two floating-point outputs for equivalence is potentially problematic since, in general, floating-point comparisons based on fixed tolerance may not form an equivalence relation, i.e., the comparisons may not be transitive. The more versions are involved, the more acute this problem becomes. This paper discusses an approach that in some situations alleviates this problem by forming a fuzzy equivalence relation (that preserves transitivity). We applied the method to different voting techniques such as Consensus Voting and Maximum Likelihood Voting. Our analyses, based on simulations, show that voting that uses fuzzy equivalence relations performs better than classical voting provided some criteria we discuss are met. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Avizienis and L. Chen, </author> <title> "On the Implementation of N-version Programming for Software Fault-Tolerance During Program Execution", </title> <booktitle> Proc. COMPSAC 77, </booktitle> <pages> pp 149-155, </pages> <year> 1977. </year>
Reference-contexts: 1. INTRODUCTION Many fault-tolerant software methodologies use multiple independently developed but functionally equivalent software versions in an attempt to increase system reliability <ref> [1, 2, 3] </ref>. Given the outputs from the redundant versions, there are numerous ways to select the correct output. The most common techniques are based on output classification. Examples are N-Version Programming with Majority Voting (NVP-MV), N-Version Programming with Consensus Voting (NVP-CV) and Maximum Likelihood Voting (MLV). <p> The fuzzy set approach can help in such a situation. 4.1. Crisp and Fuzzy Sets A fuzzy set has elements that have a varying degree of membership in that set, i.e., the degree of membership has a value in the closed interval <ref> [0, 1] </ref>. In contrast, for a classical, or crisp set, membership has no degree. An element is either a member or it is not a member [21]. Formally [22, 23, 21]: Let X be a space of points (i.e. all possible elements of concern in a particular context). <p> Unlike the agreement relation which uses only 0 and 1, a similarity relation is defined by the similarity measure which may take on any value in the range <ref> [0, 1] </ref>. A similarity relation can be represented by a similarity matrix, whose (i,j)th element is assigned the similarity measure between the two outputs represented by either fuzzy or crisp sets [25, 24]. <p> In a fuzzy relation, the strength of the relation between ordered pairs of the two universes is represented with degrees of strength of the relation whose range is <ref> [0, 1] </ref> [21]. The similarity relation defined earlier is a fuzzy relation. A fuzzy equivalence relation, proposed by Tamura, will be used to classify outputs from the similarity relation [17]. <p> The simulations are based on an independent inter-version failure model to isolate the tolerance related effects. Given a set of N versions, a random number was selected uniformly in the range <ref> [0, 1] </ref>. If the number was larger than the failure probability of a version, the version was deemed to have succeeded and we followed the correct output process (outlined below) to generate the output sample. Otherwise the incorrect output process was followed. <p> Most analyses shown here are for Consensus Voting . 7.1. Effect of l Cut Level Fuzzy voting uses the l -cut operation to form a crisp equivalence relation from a fuzzy equivalence relation constructed from a similarity relation. The value of l is in the range <ref> [0, 1] </ref> and the correct choice of l is the key to fuzzy voting since l is directly related to the cardinality of the output partitions. When l is very small (close to zero) all outputs are in the same equivalence class.
Reference: [2] <author> F. Belli and P. Jedrzejowicz, </author> <title> "Fault-Tolerant Programs and Their Reliability", </title> <journal> IEEE Trans. Rel., </journal> <volume> Vol. 29(2), </volume> <pages> pp 184-192, </pages> <year> 1990. </year>
Reference-contexts: 1. INTRODUCTION Many fault-tolerant software methodologies use multiple independently developed but functionally equivalent software versions in an attempt to increase system reliability <ref> [1, 2, 3] </ref>. Given the outputs from the redundant versions, there are numerous ways to select the correct output. The most common techniques are based on output classification. Examples are N-Version Programming with Majority Voting (NVP-MV), N-Version Programming with Consensus Voting (NVP-CV) and Maximum Likelihood Voting (MLV).
Reference: [3] <author> B. Randell, </author> <title> "System structure for software fault-tolerance", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-1, </volume> <pages> pp 220-232, </pages> <year> 1975. </year>
Reference-contexts: 1. INTRODUCTION Many fault-tolerant software methodologies use multiple independently developed but functionally equivalent software versions in an attempt to increase system reliability <ref> [1, 2, 3] </ref>. Given the outputs from the redundant versions, there are numerous ways to select the correct output. The most common techniques are based on output classification. Examples are N-Version Programming with Majority Voting (NVP-MV), N-Version Programming with Consensus Voting (NVP-CV) and Maximum Likelihood Voting (MLV).
Reference: [4] <author> R.K. Scott, J.W. Gault and D.F. McAllister, </author> <title> "Fault-Tolerant Software Reliability Modeling", </title> <journal> IEEE Trans. Software Eng., </journal> <volume> Vol SE-13, </volume> <pages> 582-592, </pages> <year> 1987. </year>
Reference-contexts: Given the outputs from the redundant versions, there are numerous ways to select the correct output. The most common techniques are based on output classification. Examples are N-Version Programming with Majority Voting (NVP-MV), N-Version Programming with Consensus Voting (NVP-CV) and Maximum Likelihood Voting (MLV). The NVP-MV and NVP-CV <ref> [4] </ref> make a decision based on the cardinality of the partitions that contain identical outputs. MLV chooses the output with the largest success likelihood based on the previous reliability history of the versions and the current outputs [5].
Reference: [5] <author> Y.W. Leung, </author> <title> "Maximum Likelihood Voting for Fault Tolerant Software with Finite Output Space", </title> <journal> IEEE Trans. Rel, </journal> <volume> Vol. </volume> <pages> 44(3) pp 419-427, </pages> <year> 1995. </year>
Reference-contexts: The NVP-MV and NVP-CV [4] make a decision based on the cardinality of the partitions that contain identical outputs. MLV chooses the output with the largest success likelihood based on the previous reliability history of the versions and the current outputs <ref> [5] </ref>. Classical theory assumes that it is possible to place all version outputs into pairwise disjoint subsets, or categories, called a partition of the outputs where each subset contains outputs which are equal or identical. There are also methods which are not based on output classification. <p> In Formalized Consensus Voting (FCV), the set with the largest number of outputs is chosen to contain the correct answer. The concept of Formalized Majority Voting (FMV) or Formalized Consensus Voting (FCV) can also be applied to Maximum Likelihood Voting <ref> [5] </ref>. This is called Formalized Maximum Likelihood Voting (FMLV). In FMLV, when the likelihood value for each version output is computed, the version outputs in the same sets are assumed to be identical. <p> The reliabilities are used for the outputs in the set, and the failure probabilities are used for outputs that are not in the set. More detailed description of MLV can be found in <ref> [5, 15] </ref>. 2. Crisp Equivalence Voting In section 3.2, an equivalence relation was obtained by applying compositions of a tolerance relation. This approach tends to increase the cardinality of the equivalence classes. Note that the approach in section 3.2 deals with binary, crisp relations.
Reference: [6] <author> J. E. Potter and M.C. Suman, </author> <title> "Extension of the Midvalue Selection Technique for Redundancy Management of Inertial Sensors", </title> <journal> Journal of Guidance, Control, and Dynamics, </journal> <volume> Vol. 9, No.1, </volume> <month> January-Februrary </month> <year> 1986. </year>
Reference-contexts: There are also methods which are not based on output classification. For example, the method called median voting chooses the median output value as the correct answer <ref> [6] </ref>. Similarly, the average of the version outputs, or a weighted average of outputs, can also be selected as the correct answer [7].
Reference: [7] <author> Z. Tong and R. Kain, </author> <title> "Vote assignments in weighted voting mechanisms", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol(40), </volume> <month> May </month> <year> 1991, </year> <month> pp664-667. </month>
Reference-contexts: There are also methods which are not based on output classification. For example, the method called median voting chooses the median output value as the correct answer [6]. Similarly, the average of the version outputs, or a weighted average of outputs, can also be selected as the correct answer <ref> [7] </ref>. The key assumption in all approaches that use redundant software is that the version failures are statistically independent [8], and that the probability of coincident version failures is quite small so that agreeing version outputs are almost always correct [9, 10].
Reference: [8] <author> K.S. Trivedi, </author> <title> Probability and Statistics with Reliability, Queueing, </title> <booktitle> and Computer Science Applications, </booktitle> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1982. </year>
Reference-contexts: Similarly, the average of the version outputs, or a weighted average of outputs, can also be selected as the correct answer [7]. The key assumption in all approaches that use redundant software is that the version failures are statistically independent <ref> [8] </ref>, and that the probability of coincident version failures is quite small so that agreeing version outputs are almost always correct [9, 10]. However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision.
Reference: [9] <author> D.E. Eckhardt, Jr. and L.D. Lee, </author> <title> "A Theoretical Basis for the Analysis of Multi-version Software Subject to Coincident Errors", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-11(12), </volume> <pages> pp 1511-1517, </pages> <year> 1985. </year>
Reference-contexts: The key assumption in all approaches that use redundant software is that the version failures are statistically independent [8], and that the probability of coincident version failures is quite small so that agreeing version outputs are almost always correct <ref> [9, 10] </ref>. However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers [e.g., 11, 12, 13, 14, 15].
Reference: [10] <author> D.F. McAllister, C.E. Sun and M.A. Vouk, </author> <title> "Reliability of Voting in Fault-Tolerant Software Systems for Small Output Spaces", </title> <journal> IEEE Trans. Rel., </journal> <volume> Vol 39(5), pp524-534, </volume> <year> 1990. </year>
Reference-contexts: The key assumption in all approaches that use redundant software is that the version failures are statistically independent [8], and that the probability of coincident version failures is quite small so that agreeing version outputs are almost always correct <ref> [9, 10] </ref>. However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers [e.g., 11, 12, 13, 14, 15].
Reference: [11] <author> J.C. Knight and N.G. Leveson, </author> <title> "An Experimental Evaluation of the assumption of Independence in Multi-version Programming", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-12(1), </volume> <pages> pp 96-109, </pages> <year> 1986. </year>
Reference-contexts: However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers <ref> [e.g., 11, 12, 13, 14, 15] </ref>. Excessive inter-version failure correlation is usually the result of common-cause faults in the software.
Reference: [12] <author> J. Kelly, D. Eckhardt, A. Caglayan, J. Knight, D. McAllister, M. Vouk, </author> <title> "A Large Scale Second Generation Experiment in Multi-Version Software: Description and Early Results", </title> <booktitle> Proc. </booktitle> <volume> FTCS 18, </volume> <pages> pp 9-14, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers <ref> [e.g., 11, 12, 13, 14, 15] </ref>. Excessive inter-version failure correlation is usually the result of common-cause faults in the software.
Reference: [13] <author> M.A. Vouk, A. Caglayan, D.E. Eckhardt, J. Kelly, J. Knight, D. McAllister, L. Walker, </author> <title> "Analysis of faults detected in a large-scale multiversion software development experiment," </title> <booktitle> Proc. </booktitle> <volume> DASC '90, </volume> <pages> pp 378-385, </pages> <year> 1990. </year>
Reference-contexts: However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers <ref> [e.g., 11, 12, 13, 14, 15] </ref>. Excessive inter-version failure correlation is usually the result of common-cause faults in the software.
Reference: [14] <author> M.A. Vouk, D.F. McAllister, D.E. Eckhardt, K. Kim, </author> <title> "An Empirical Evaluation of Consensus Voting and Consensus Recovery Block Reliability in the presence of Failure Correlation," </title> <journal> Journal of Computer Software Engineering, </journal> <volume> 1(4), </volume> <pages> pp 364-388, </pages> <year> 1993. </year>
Reference-contexts: However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers <ref> [e.g., 11, 12, 13, 14, 15] </ref>. Excessive inter-version failure correlation is usually the result of common-cause faults in the software. <p> Note that the previously obtained empirical results <ref> [14, 15] </ref> are based on minimum Crisp Equivalence voting methods.
Reference: [15] <author> K. Kim, M.A. Vouk, and D.F. McAllister, </author> <title> "An Empirical Evaluation of Maximum Likelihood Voting in Failure Correlation Conditions," </title> <booktitle> Proc. </booktitle> <volume> ISSRE 96, </volume> <pages> pp 330-339, </pages> <year> 1996. </year>
Reference-contexts: However, when these failures are correlated, several versions may agree on an incorrect response. This may eventually lead to an incorrect decision. The effect of inter-version failure correlation on voting performance has been explored by a number of researchers <ref> [e.g., 11, 12, 13, 14, 15] </ref>. Excessive inter-version failure correlation is usually the result of common-cause faults in the software. <p> The reliabilities are used for the outputs in the set, and the failure probabilities are used for outputs that are not in the set. More detailed description of MLV can be found in <ref> [5, 15] </ref>. 2. Crisp Equivalence Voting In section 3.2, an equivalence relation was obtained by applying compositions of a tolerance relation. This approach tends to increase the cardinality of the equivalence classes. Note that the approach in section 3.2 deals with binary, crisp relations. <p> Note that the previously obtained empirical results <ref> [14, 15] </ref> are based on minimum Crisp Equivalence voting methods.
Reference: [16] <author> P. R Lorczak,. A.K. Caglayan, D.E. Eckhardt, </author> <title> A Theoretical Investigation of Generalized Voters for Redundant Systems", </title> <booktitle> Proc. 19th FTCS, </booktitle> <address> Chicago, Illinois, </address> <month> June </month> <year> 1989, </year> <pages> pp. 444-451. </pages>
Reference-contexts: If NVP-MV, NVP-CV or MLV make decisions based on non-transitive equality relations, ambiguities may appear and a wrong answer may be selected as the correct one, or there may not be a consistent agreement. In both cases the system fails <ref> [16] </ref>. This tolerance effect can cause even systems of statistically independent versions to fail more often than the classical software fault-tolerance theory would suggest. This paper discusses voting techniques that are based on the concept of fuzzy sets, fuzzy equivalence relations, and the l -cut operation [17]. <p> However, without further modification, this approach has a serious limitation. For example, when the outputs are equidistant to a given fixed tolerance (x, x+ e , x+ 2e , ... , x+ Ne ), the transitive closure will declare all outputs to be identical <ref> [16] </ref>. This may negate any benefits of the voting approach In order to avoid this problem, Lorczak proposed two voting techniques, Formalized Majority Voting (FMV) and Formalized Consensus Voting (FCV) [16]. For an N-version system, these voting techniques create N output subsets which are not necessarily pairwise disjoint. <p> e , x+ 2e , ... , x+ Ne ), the transitive closure will declare all outputs to be identical <ref> [16] </ref>. This may negate any benefits of the voting approach In order to avoid this problem, Lorczak proposed two voting techniques, Formalized Majority Voting (FMV) and Formalized Consensus Voting (FCV) [16]. For an N-version system, these voting techniques create N output subsets which are not necessarily pairwise disjoint. For each class C i , they define a value x i with which outputs are compared if they are to fall into that class. <p> Lorczak does not specify how the FCV strategy breaks a tie when there are 2 or more classes that are candidates for the largest number of outputs category, nor does he mention how to choose the correct output out of the selected class <ref> [16] </ref>. Some obvious choices are random selection, mean value and median value. The approach is discussed further in Appendix I. 4. FUZZY CLASSIFICATION A key problem with equivalence relations derived using fixed tolerance is that they do not allow for graduated comparisons at a granularity smaller than e . <p> Formalized Voting Formalized Voting <ref> [16] </ref> creates N output sets and classifies outputs into each set. The partition for version i, C i , is defined such that C x X X i j i j = " - - | j , -e .
Reference: [17] <author> S. Tamura, S. Higuchi, and K. Tanaka, </author> <title> "Pattern Classification Based on Fuzzy Relations", </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, Vol(1), </journal> <volume> No.1, </volume> <month> Jan, </month> <year> 1971. </year>
Reference-contexts: This tolerance effect can cause even systems of statistically independent versions to fail more often than the classical software fault-tolerance theory would suggest. This paper discusses voting techniques that are based on the concept of fuzzy sets, fuzzy equivalence relations, and the l -cut operation <ref> [17] </ref>. These voting techniques attempt to mitigate the above problem by building a fuzzy transitive closure from a non-transitive equality relation before voting. We use simulation to study the approach. Section 3 discusses some classification and non-transitivity issues. Section 4 introduces fuzzy sets and fuzzy equivalence, and defines fuzzy voting. <p> The similarity relation defined earlier is a fuzzy relation. A fuzzy equivalence relation, proposed by Tamura, will be used to classify outputs from the similarity relation <ref> [17] </ref>. A fuzzy relation, R is a fuzzy equivalence relation if all three of the following properties for fuzzy relations are satisfied [17]. (Reflexivity) m R ( x i , x i ) = 1 (12a) (Symmetry) m R ( x i , x j ) = m R (Transitivity) m <p> The similarity relation defined earlier is a fuzzy relation. A fuzzy equivalence relation, proposed by Tamura, will be used to classify outputs from the similarity relation <ref> [17] </ref>. A fuzzy relation, R is a fuzzy equivalence relation if all three of the following properties for fuzzy relations are satisfied [17]. (Reflexivity) m R ( x i , x i ) = 1 (12a) (Symmetry) m R ( x i , x j ) = m R (Transitivity) m l m l ( , ) ( , ) R j k x x x x = 1 , where l l <p> Tamura showed that any fuzzy tolerance relation R of a finite set (size of N), which is reflexive and symmetric, can be transformed into a fuzzy equivalence relation by computing the union of at most the first N-1 fuzzy compositions of the fuzzy relation with itself <ref> [17] </ref>.
Reference: [18] <author> J. Bezdeck and D. Harris, </author> <title> Fuzzy Partitions and Relations; An Axiomatic Basis for Clustering", </title> <journal> Fuzzy Sets and Systems (1) pp 111-127, </journal> <year> 1978. </year>
Reference-contexts: Otherwise, r ij is 0. The equality relation represented by the agreement matrix R r ij = [ ] is an equivalence relation if and only if it satisfies the following three properties <ref> [18, 19] </ref>: (reflexivity) r i ii = "1 (1a) (symmetry) r r i j ij ji = " (1b) (transitivity) r r i j kj = fi = " 1 In order to use a voting method that relies on equivalence classes, the outputs should be partitioned into several classes such <p> The smallest equivalence relation which contains a binary relation is the reflexive, symmetric transitive closure. This relation allows more systematic decision making and more consistent voting results. 3.2. Equivalence Relation An equivalence relation must satisfy the reflexive, symmetric, and transitive properties, as described in Equations (1a), (1b) and (1c) <ref> [18, 19] </ref>. For a relation R on a set of N elements, its transitive closure is R R R L .
Reference: [19] <author> S.C. Althoen and R.J. Bumcrot, </author> <title> "Introduction to Discrete Mathematics", </title> <publisher> PWS-KENT publishing company, </publisher> <year> 1988. </year>
Reference-contexts: Otherwise, r ij is 0. The equality relation represented by the agreement matrix R r ij = [ ] is an equivalence relation if and only if it satisfies the following three properties <ref> [18, 19] </ref>: (reflexivity) r i ii = "1 (1a) (symmetry) r r i j ij ji = " (1b) (transitivity) r r i j kj = fi = " 1 In order to use a voting method that relies on equivalence classes, the outputs should be partitioned into several classes such <p> The smallest equivalence relation which contains a binary relation is the reflexive, symmetric transitive closure. This relation allows more systematic decision making and more consistent voting results. 3.2. Equivalence Relation An equivalence relation must satisfy the reflexive, symmetric, and transitive properties, as described in Equations (1a), (1b) and (1c) <ref> [18, 19] </ref>. For a relation R on a set of N elements, its transitive closure is R R R L .
Reference: [20] <author> S.S. Brilliant, J.C. Knight, and N.G. Leveson, </author> <title> "The Consistent Comparison Problem in N-Version Software", </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. SE-15(11), pp1481-1484, </volume> <year> 1989. </year>
Reference-contexts: We call this the inconsistent partitioning problem. It is similar to the problem discussed in <ref> [20] </ref> in the context of comparison voting. In either case above, N-Version Programming with Majority Voting (NVP-MV) will fail because the largest agreeing version count, which is 3, is less than m= N + 1 , which is 4 for a 7-version system.
Reference: [21] <author> T.J. Ross, </author> <title> Fuzzy Logic with Engineering Applications, </title> <publisher> McGraw Hill, </publisher> <year> 1995. </year>
Reference-contexts: But, if R is reflexive and symmetric, its transitive closure is obtained by applying at most (N-1) Boolean compositions of the agreement matrix with itself, where N is the total number of elements <ref> [21] </ref>. Note that a relation that satisfies only reflexivity and symmetry is called a tolerance relation [21]. <p> But, if R is reflexive and symmetric, its transitive closure is obtained by applying at most (N-1) Boolean compositions of the agreement matrix with itself, where N is the total number of elements <ref> [21] </ref>. Note that a relation that satisfies only reflexivity and symmetry is called a tolerance relation [21]. <p> R is only reflexive and symmetric, i.e., it is a tolerance relation. The transitive closure of this equality relation will produce an equivalence relation by taking the union of up to the first (N-1) compositions of R with itself <ref> [21] </ref>. In this example, the relation R 2 (= R oR ) satisfies the reflexivity, symmetry and transitivity properties. This is now an equivalence relation. <p> In contrast, for a classical, or crisp set, membership has no degree. An element is either a member or it is not a member <ref> [21] </ref>. Formally [22, 23, 21]: Let X be a space of points (i.e. all possible elements of concern in a particular context). Let X be called the universe of discourse. <p> In contrast, for a classical, or crisp set, membership has no degree. An element is either a member or it is not a member [21]. Formally <ref> [22, 23, 21] </ref>: Let X be a space of points (i.e. all possible elements of concern in a particular context). Let X be called the universe of discourse. <p> For crisp sets, Equation (8) becomes Equation (9). 1 A fuzzy number is a convex fuzzy set whose membership function has only one element in the universe, whose membership value is unity <ref> [21] </ref>. A convex fuzzy set is described by a membership function whose membership values are strictly monotonically increasing, or whose membership values are strictly monotonically decreasing, or whose membership values are strictly monotonically increasing then strictly monotonically decreasing with increasing values for elements in the universe [21]. <p> membership value is unity <ref> [21] </ref>. A convex fuzzy set is described by a membership function whose membership values are strictly monotonically increasing, or whose membership values are strictly monotonically decreasing, or whose membership values are strictly monotonically increasing then strictly monotonically decreasing with increasing values for elements in the universe [21]. S X X i j i j - - &lt; 1 e otherwise (9) Note that in the current work, because the same tolerance value is used for all outputs, the areas under the membership functions of two outputs are the same. <p> In a fuzzy relation, the strength of the relation between ordered pairs of the two universes is represented with degrees of strength of the relation whose range is [0, 1] <ref> [21] </ref>. The similarity relation defined earlier is a fuzzy relation. A fuzzy equivalence relation, proposed by Tamura, will be used to classify outputs from the similarity relation [17].
Reference: [22] <author> L.A. Zadeh, </author> <title> Fuzzy Sets, in Fuzzy Sets and Applications: Selected Papers by L.A. </title> <editor> Zadeh, eds. R.R. Yager, S. Ovchinnikov, R.M. Tong, H.T. Nguyen, </editor> <publisher> Wiley Interscience, </publisher> <year> 1987. </year>
Reference-contexts: In contrast, for a classical, or crisp set, membership has no degree. An element is either a member or it is not a member [21]. Formally <ref> [22, 23, 21] </ref>: Let X be a space of points (i.e. all possible elements of concern in a particular context). Let X be called the universe of discourse.
Reference: [23] <author> G. J. Klir and B. Yuan, </author> <title> Fuzzy Sets and Fuzzy Logic: Theory and Applications, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: In contrast, for a classical, or crisp set, membership has no degree. An element is either a member or it is not a member [21]. Formally <ref> [22, 23, 21] </ref>: Let X be a space of points (i.e. all possible elements of concern in a particular context). Let X be called the universe of discourse. <p> R l is defined as R i j i j R l m l= -( , ) | ( , ) - , i.e., if the strength of the relation between i and j is greater than or equal to l , it is replaced by 1, and 0 otherwise <ref> [23] </ref>. Depending on the values of l , outputs can be classified differently.
Reference: [24] <author> H.M. Hsu and C.T. Chen, </author> <title> "Aggregation of fuzzy opinions under group decision making", Fuzzy Sets and Systems 79 (1996) pp 279-285. </title>
Reference-contexts: + e x i 4.3 Similarity Measure In order to construct a relation which represents the degree of proximity between two outputs, where the outputs both belong to either a crisp set or a fuzzy set, a s im i la r i t y measure was proposed by Hsu <ref> [24] </ref>. A modified definition of Hsus similarity measure function is shown in Equation (8). <p> A similarity relation can be represented by a similarity matrix, whose (i,j)th element is assigned the similarity measure between the two outputs represented by either fuzzy or crisp sets <ref> [25, 24] </ref>. If all version outputs are specified as crisp sets, then the similarity matrix R can be formed by simply using Equation (9). That is, when the distance between two outputs is within the tolerance value, the distance is directly translated into the strength of the similarity.

References-found: 24

