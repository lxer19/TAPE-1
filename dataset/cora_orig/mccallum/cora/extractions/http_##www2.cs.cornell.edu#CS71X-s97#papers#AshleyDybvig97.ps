URL: http://www2.cs.cornell.edu/CS71X-s97/papers/AshleyDybvig97.ps
Refering-URL: http://www2.cs.cornell.edu/CS71X-s97/cs719bib.htm
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Practical and Flexible Flow Analysis for Higher-Order Languages  
Author: J. Michael Ashley R. Kent Dybvig 
Keyword: Categories and Subject Descriptors: D.3.4 [Programming Languages]: Processors|Optimization General Terms: Algorithms, Design Additional Key Words and Phrases: abstract interpretation, higher-order languages  
Address: Bloomington, Indiana  
Affiliation: University of Kansas, Lawrence, Kansas and  Indiana University,  
Abstract: A flow analysis collects data-flow and control-flow information about programs. A compiler can use this information to justify optimizations. The analysis described in this article unifies and extends previous work on flow analyses for higher-order languages supporting assignment and control operators. The analysis is abstract interpretation-based and is parameterized over two polyvari-ance operators and a projection operator. The polyvariance operators regulate the accuracy of the analysis while the projection operator regulates the speed. An implementation of the analysis is incorporated into and used in a production-quality Scheme compiler. The analysis can process any legal Scheme program without modification. Others have demonstrated that a 0CFA analysis can justify optimizations, but a 0CFA analysis is O(n 3 ). An O(n) instantiation of our analysis successfully justifies the optimization of closure representations and procedure calls. Experiments with the cheaper instantiation show that it is as effective as 0CFA for these optimizations. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ashley, J. M. </author> <year> 1996. </year> <title> A practical and flexible flow analysis for higher-order languages. </title> <publisher> Ph. </publisher>
Reference: <author> D. </author> <type> thesis, </type> <institution> Indiana University. </institution>
Reference: <author> Ashley, J. M. and Consel, C. </author> <year> 1994. </year> <title> Fixpoint computation for polyvariant static analyses of higher-order applicative programs. </title> <journal> ACM Transactions on Programming Languages and Systems 16, </journal> <volume> 5, </volume> <pages> 1431-1448. </pages>
Reference: <author> Ashley, J. M. and Dybvig, R. K. </author> <year> 1994. </year> <title> An efficient implementation of multiple return values in Scheme. </title> <booktitle> In Proceedings of the 1994 ACM Conference on LISP and Functional Programming (1994). ACM, </booktitle> <pages> pp. 140-149. </pages>
Reference: <author> Ayers, A. E. </author> <year> 1993. </year> <title> Abstract analysis and optimization of scheme. </title> <editor> Ph. D. </editor> <booktitle> thesis, </booktitle> <publisher> MIT. </publisher>
Reference: <author> Bondorf, A. </author> <year> 1993. </year> <note> Similix Manual, System Version 5.0. </note> <institution> University of Copenhagen, Den-mark: DIKU. </institution> <note> 23 Bose, </note> <author> B. </author> <year> 1991. </year> <title> DDD|A transformation system for Digital Design Derivation. </title> <type> Technical Report 331 (May), </type> <institution> Indiana University, Computer Science Department. </institution>
Reference: <author> Boucher, D. and Feeley, M. </author> <year> 1996. </year> <title> Abstract compilation: A new implementation paradigm for static analysis. </title> <booktitle> In Proceedings of the 1996 International Conference on Compiler Construction (April 1996). </booktitle>
Reference: <author> Bourdoncle, F. </author> <year> 1992. </year> <title> Abstract interpretation by dynamic partitioning. </title> <journal> Journal of Functional Programming 2, </journal> <volume> 4 (October), </volume> <pages> 407-436. </pages>
Reference: <author> Bourdoncle, F. </author> <year> 1993. </year> <title> Efficient chaotic iteration strategies with widening. </title> <booktitle> In Proceedings of the International Conference on Formal Methods in Programming and their Applications, Lecture Notes in Computer Science vol. 735 (1993). </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 128-141. </pages>
Reference: <author> Burger, R. G. </author> <year> 1994. </year> <title> The Scheme machine. </title> <type> Technical Report 413 (August), </type> <institution> Indiana University, Computer Science Department. </institution>
Reference: <author> Consel, C. </author> <year> 1993. </year> <title> Polyvariant binding-time analysis for higher-order, applicative languages. </title> <booktitle> In Proceedings of the Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '93 (1993). </booktitle> <pages> pp. 66-77. </pages>
Reference: <author> Cousot, P. and Cousot, R. </author> <year> 1977. </year> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Conference Record of the Fourth ACM Symposium on Principles of Programming Languages (1977). </booktitle> <pages> pp. 238-252. </pages>
Reference: <author> Dybvig, R. K. </author> <year> 1994. </year> <title> Chez Scheme System Manual, </title> <type> Rev. </type> <institution> 2.4. Cadence Research Systems, Bloomington, Indiana. </institution>
Reference: <author> Dybvig, R. K. and Hieb, R. </author> <year> 1990. </year> <title> A new approach to procedures with variable arity. </title> <booktitle> Lisp and Symbolic Computation 3, 3 (Sept.), </booktitle> <pages> 229-244. </pages>
Reference: <author> Felleisen, M. </author> <year> 1987. </year> <title> The calculi of lambda-v-cs-conversion: a syntactic theory of control and state in imperative higher-order programming languages. </title> <type> Ph. D. thesis, </type> <institution> Indiana University, Bloomington, Indiana. </institution>
Reference: <author> Flanagan, C. and Felleisen, M. </author> <year> 1995. </year> <title> Set-based analysis for full Scheme and its use in soft-typing. </title> <institution> Computer Science Department Technical Report 253 (Oct.), Rice University, </institution> <address> PO Box 1892, Houston, TX, </address> <pages> 77251-1892. </pages>
Reference: <author> Flanagan, C., Sabry, A., Duba, B. F., and Felleisen, M. </author> <year> 1993. </year> <title> The essence of compiling with continuations. </title> <booktitle> In Proceedings of the ACM SIGPLAN 1993 Conference on Programming Language Design and Implementation (1993). ACM, </booktitle> <pages> pp. 237-247. </pages>
Reference: <author> Gabriel, R. P. </author> <year> 1985. </year> <title> Performance and Evaluation of LISP Systems, </title> <publisher> MIT Press series in computer systems. MIT Press series in computer systems. MIT Press. </publisher>
Reference: <author> Harrison III, W. L. </author> <year> 1989. </year> <title> The interprocedural analysis and automatic parallelization of Scheme programs. </title> <booktitle> Lisp and Symbolic Computation 2, </booktitle> <volume> 3/4, </volume> <pages> 179-396. </pages>
Reference: <author> Heintze, N. </author> <year> 1994. </year> <title> Set-based analysis of ML programs. </title> <booktitle> In Proceedings of the 1994 ACM Conference on LISP and Functional Programming (1994). ACM, </booktitle> <pages> pp. 306-317. </pages>
Reference: <author> Jagannathan, S. and Weeks, S. </author> <year> 1995. </year> <title> A unified treatment of flow analysis in higher-order languages. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages (1995). </booktitle> <pages> pp. 393-407. </pages>
Reference: <author> Jagannathan, S. and Wright, A. </author> <year> 1995. </year> <title> Effective flow analysis for avoiding run-time checks. </title> <booktitle> In Proceedings of the 1995 International Static Analysis Symposium, Lecture Notes in Computer Science vol. 854 (1995). </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 207-224. </pages>
Reference: <author> Nielson, F. and Nielson, H. R. </author> <year> 1992. </year> <title> Two-Level Functional Languages, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science vol. </booktitle> <volume> 34. </volume> <publisher> Cambridge University Press. </publisher>
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> 1995. </year> <title> Safety analysis versus type inference. </title> <journal> Information and Computation 118, </journal> <volume> 1, </volume> <pages> 128-141. </pages>
Reference: <author> Serrano, M. and Feeley, M. </author> <year> 1996. </year> <title> Storage use analysis and its applications. </title> <booktitle> In Proceedings of the 1996 ACM SIGPLAN International Conference on Functional Programming (1996). ACM, </booktitle> <pages> pp. 50-61. </pages>
Reference: <author> Shao, Z. and Appel, A. W. </author> <year> 1994. </year> <title> Space-efficient closure representations. </title> <booktitle> In Proceedings of the 1994 ACM Conference on LISP and Functional Programming (1994). ACM, </booktitle> <pages> pp. 130-161. </pages>
Reference: <author> Shivers, O. </author> <year> 1988. </year> <title> Control flow analysis in Scheme. </title> <booktitle> In Proceedings of the ACM SIGPLAN 1988 Conference on Programming Language Design and Implementation (1988). </booktitle> <pages> pp. 164-174. </pages> <address> 24 Shivers, O. </address> <year> 1991a. </year> <title> Control-flow analysis of higher-order languages. </title> <type> Ph. D. thesis, </type> <institution> Carnegie Mellon University, </institution> <note> fix this. CMU-CS-91-145. </note>
Reference: <author> Shivers, O. </author> <year> 1991b. </year> <title> The semantics of Scheme control-flow analysis. </title> <booktitle> In Proceedings of the Symposium on Partial Evaluation and Semantics-based Program Manipulation, </booktitle> <address> PEPM '91 (New Haven, Connecticut, </address> <year> 1991). </year>
Reference: <author> Steckler, P. A. and Wand, M. </author> <year> 1997. </year> <title> Lightweight closure conversion. </title> <journal> ACM Transactions on Programming Languages and Systems 19, </journal> <volume> 1, </volume> <pages> 48-86. </pages>
Reference: <author> Wand, M. and Oliva, D. P. </author> <year> 1992. </year> <title> Proving the correctness of storage representations. </title> <booktitle> In Proceedings of the 1992 ACM Conference on LISP and Functional Programming (1992). </booktitle> <pages> pp. 151-160. </pages>
Reference: <author> Yi, K. and Harrison III, W. L. </author> <year> 1993. </year> <title> Automatic generation and management of inter-procedural program analyses. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages (1993). ACM, </booktitle> <pages> pp. 246-259. </pages>
Reference: <author> Young, J. H. </author> <year> 1987. </year> <title> The theory and practice: Semantic program analysis for higher-order functional programming languages. </title> <type> Ph. D. thesis, </type> <institution> Yale University. </institution>
References-found: 32

