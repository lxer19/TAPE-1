URL: http://www.csc.ncsu.edu/eos/users/j/jrossie/www/papers/ecoop96.ps.gz
Refering-URL: http://www.csc.ncsu.edu/eos/users/j/jrossie/www/papers.html
Root-URL: http://www.csc.ncsu.edu
Email: fjrossie,dfriedg@cs.indiana.edu  wand@ccs.neu.edu  
Phone: 2  
Title: Modeling Subobject-based Inheritance  
Author: Jonathan G. Rossie Jr. fl Daniel P. Friedman fl Mitchell Wand y 
Address: Bloomington, IN 47405, USA  Boston, MA 02115, USA  
Affiliation: 1 Department of Computer Science, Indiana University  College of Computer Science, Northeastern University  
Note: To Appear: Proceedings, ECOOP'96  
Abstract: A model of subobjects and subobject selection gives us a concise expression of key semantic relationships in a variety of inheritance-based languages. Subobjects and their selection have been difficult to reason about explicitly because they are not explicit in the languages that support them. The goal of this paper is to present a relatively simple calculus to describe subobjects and subobject selection explicitly. Rather than present any deep theorems here, we develop a general calculus that can be used to explore the design of inheritance systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Information Processing Systems Accredited Standards Committee X3. </institution> <note> Working paper for draft proposed international standard for information systems| programming language C++. Draft of 28 April 1995. </note>
Reference-contexts: In SRMI, instances of such a class will always find vf to be ambiguous, regardless of the static context of the dynamic reference. Unfortunately, only in the most recent semantics of C++ <ref> [1] </ref> can any similar requirement be found. This change in the C++ specification deserves further discussion. The problem with the original C++ specification [10, 26] is that ambiguity was not considered a problem with the class definition, but rather a problem with the specific reference. <p> Thus, J:dyn (vf ) is not necessarily the same as J:stat (vg):dyn (vf), and the semantics of the latter case is underspecified. In the recent drafts of the proposed standard for C++ <ref> [1] </ref>, this problem is remedied by forcing a class to provide its own definition of any such ambiguously inherited member function. The error is now associated with the class definition rather than the references.
Reference: 2. <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <year> 1985. </year>
Reference-contexts: Despite our interest in static issues, we do not develop a type theory for our object models. Some semantics have dealt chiefly with the type-safety vs. March 26, 1996 10:18 am Page 24 expressiveness issues that arise in object-oriented languages, including those that support multiple inheritance <ref> [2, 15, 5] </ref>. The kind of multiple inheritance modeled in these systems does not resemble SRMI as much as it does SMI, which is simpler in many respects.
Reference: 3. <author> Daniel J. Carnese. </author> <title> Multiple inheritance in contemporary programming languages. </title> <type> Technical Report MIT/LCS/TR-328, </type> <institution> M.I.T., </institution> <month> Sept. </month> <year> 1984. </year>
Reference-contexts: While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed. Multiple inheritance introduces many design issues that have not been given a fully satisfactory taxonomy, although Carnese <ref> [3] </ref>, Snyder [23] and Knudsen [13], for example, have made progress in this direction. Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects.
Reference: 4. <author> Bernard Carre and Jean-Marc Geib. </author> <title> The point of view notion for multiple inheritance. </title> <booktitle> In Proceedings OOPSLA-ECOOP '90, ACM SIGPLAN Notices, </booktitle> <pages> pages 312-321, </pages> <year> 1990. </year> <month> March 26, </month> <note> 1996 10:18 am Page 25 </note>
Reference-contexts: Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance <ref> [4] </ref> is also aimed at understanding subobjects. The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14]. The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object.
Reference: 5. <author> Adriana B. Compagnoni and Benjamin C. Pierce. </author> <title> Multiple inheritance via inter-section types. </title> <type> Technical Report ECS-LFCS-93-275, </type> <institution> University of Edinburgh, </institution> <year> 1993. </year> <type> Also Technical Report 93-18, C.S. </type> <institution> Department, Catholic University Nijmegen. </institution>
Reference-contexts: Despite our interest in static issues, we do not develop a type theory for our object models. Some semantics have dealt chiefly with the type-safety vs. March 26, 1996 10:18 am Page 24 expressiveness issues that arise in object-oriented languages, including those that support multiple inheritance <ref> [2, 15, 5] </ref>. The kind of multiple inheritance modeled in these systems does not resemble SRMI as much as it does SMI, which is simpler in many respects.
Reference: 6. <author> William R. Cook. </author> <title> A Denotational Semantics of Inheritance. </title> <type> PhD thesis, </type> <institution> Brown University, </institution> <year> 1989. </year> <note> Technical Report CS-89-33. </note>
Reference-contexts: Z in J:dyn (vf ) fl a=ff or ` Z in J:stat (vg):dyn (vf ) fl a=ff however, ` Z inI:dyn (vg) fl I=G ` Z inI:dyn (vg):dyn (vf ):stat (h) fl I=IFB 8 Related Work The models of inheritance developed by Kamin [11], Reddy [16], and Cook and Palsberg <ref> [7, 6] </ref> laid the foundations for formal models of inheritance. While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed.
Reference: 7. <author> William R. Cook and Jens Palsberg. </author> <title> A denotational semantics of inheritance and its correctness. </title> <booktitle> In Proceedings OOPSLA '89, ACM SIGPLAN Notices, </booktitle> <pages> pages 433-443, </pages> <year> 1989. </year>
Reference-contexts: Z in J:dyn (vf ) fl a=ff or ` Z in J:stat (vg):dyn (vf ) fl a=ff however, ` Z inI:dyn (vg) fl I=G ` Z inI:dyn (vg):dyn (vf ):stat (h) fl I=IFB 8 Related Work The models of inheritance developed by Kamin [11], Reddy [16], and Cook and Palsberg <ref> [7, 6] </ref> laid the foundations for formal models of inheritance. While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed.
Reference: 8. <author> Ole-Johan Dahl and Kristen Nygaard. </author> <title> Simula|an Algol-based simulation language. </title> <journal> CACM, </journal> <volume> 9(9) </volume> <pages> 671-678, </pages> <month> September </month> <year> 1966. </year>
Reference-contexts: March 26, 1996 10:18 am Page 5 3 Single Inheritance The single inheritance system SI is now defined as an extension of the CSC system. The rules and judgment forms of SI extend those of CSC. The result is a model of a single-inheritance system much like Simula <ref> [8] </ref> or single-inheritance C++. We consider both late-binding (dynamic) and early-binding (static) methods as well as instance-variables, which are static in the same sense as static methods.
Reference: 9. <author> Roland Ducournau, Michel Habib, Marianne Huchard, and Marie-Laure Mugnier. </author> <title> Proposal for a monotonic multiple inheritance linearization. </title> <booktitle> In Proceedings OOPSLA '94, ACM SIGPLAN Notices, </booktitle> <pages> pages 164-175, </pages> <year> 1994. </year>
Reference-contexts: which are analogous to those in SI, but there is no obvious multiple-inheritance analog for SI's super, since there is no longer an obvious total order among the subobjects. (The question of whether to impose a total order, and what total order to use, is still a source of discussion <ref> [9, 12] </ref>, especially for the CLOS [25] and Dylan [22] communities.) MIC Syntax T ::= MIC term Q query Q ::= MIC query a primary subobject of a Q:dyn (m) dynamic subobject selection Q:stat (m) static subobject selection Judgments in MIC include those in CSC, and some new forms.
Reference: 10. <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: In other systems, there may be only one subobject for each ancestor, despite multiple paths to the same ancestor. Yet other systems may allow both kinds of inheritance to coexist, as in C++ <ref> [10, 26] </ref>. Subobject selection is complicated by the multiple views supported by an object. <p> Unfortunately, only in the most recent semantics of C++ [1] can any similar requirement be found. This change in the C++ specification deserves further discussion. The problem with the original C++ specification <ref> [10, 26] </ref> is that ambiguity was not considered a problem with the class definition, but rather a problem with the specific reference. Classes were allowed to inherit members ambiguously; only a flagrant reference to the ambiguous member could cause a compile-time error.
Reference: 11. <author> Samuel Kamin. </author> <title> Inheritance in smalltalk-80: A denotational definition. </title> <booktitle> In Proceedings POPL '88, </booktitle> <pages> pages 80-87, </pages> <year> 1988. </year>
Reference-contexts: There is no a=ff such that ` Z in J:dyn (vf ) fl a=ff or ` Z in J:stat (vg):dyn (vf ) fl a=ff however, ` Z inI:dyn (vg) fl I=G ` Z inI:dyn (vg):dyn (vf ):stat (h) fl I=IFB 8 Related Work The models of inheritance developed by Kamin <ref> [11] </ref>, Reddy [16], and Cook and Palsberg [7, 6] laid the foundations for formal models of inheritance. While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed.
Reference: 12. <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaob-ject Protocol. </title> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: which are analogous to those in SI, but there is no obvious multiple-inheritance analog for SI's super, since there is no longer an obvious total order among the subobjects. (The question of whether to impose a total order, and what total order to use, is still a source of discussion <ref> [9, 12] </ref>, especially for the CLOS [25] and Dylan [22] communities.) MIC Syntax T ::= MIC term Q query Q ::= MIC query a primary subobject of a Q:dyn (m) dynamic subobject selection Q:stat (m) static subobject selection Judgments in MIC include those in CSC, and some new forms.
Reference: 13. <author> Jorgen Lindskov Knudsen. </author> <title> Name collision in multiple classification hierarchies. </title> <booktitle> In Proceedings ECOOP '88, </booktitle> <volume> LNCS 322, </volume> <pages> pages 93-108. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed. Multiple inheritance introduces many design issues that have not been given a fully satisfactory taxonomy, although Carnese [3], Snyder [23] and Knudsen <ref> [13] </ref>, for example, have made progress in this direction. Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects.
Reference: 14. <author> Stein Krogdahl. </author> <title> Multiple inheritance in Simula-like languages. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 318-326, </pages> <year> 1984. </year>
Reference-contexts: Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects. The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design <ref> [14] </ref>. The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object. Snyder's informal model [24] of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system.
Reference: 15. <author> Benjamin C. Pierce. </author> <title> Programming with Intersection Types and Bounded Poly-morphism. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: Despite our interest in static issues, we do not develop a type theory for our object models. Some semantics have dealt chiefly with the type-safety vs. March 26, 1996 10:18 am Page 24 expressiveness issues that arise in object-oriented languages, including those that support multiple inheritance <ref> [2, 15, 5] </ref>. The kind of multiple inheritance modeled in these systems does not resemble SRMI as much as it does SMI, which is simpler in many respects.
Reference: 16. <author> Uday Reddy. </author> <title> Objects as closures: Abstract semantics of object-oriented languages. </title> <booktitle> In Conf. on LISP and Functional Programming, </booktitle> <year> 1988. </year>
Reference-contexts: no a=ff such that ` Z in J:dyn (vf ) fl a=ff or ` Z in J:stat (vg):dyn (vf ) fl a=ff however, ` Z inI:dyn (vg) fl I=G ` Z inI:dyn (vg):dyn (vf ):stat (h) fl I=IFB 8 Related Work The models of inheritance developed by Kamin [11], Reddy <ref> [16] </ref>, and Cook and Palsberg [7, 6] laid the foundations for formal models of inheritance. While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed.
Reference: 17. <author> Jonathan G. Rossie Jr. and Daniel P. Friedman. </author> <title> An algebraic semantics of sub-objects. </title> <booktitle> In Proceedings OOPSLA '95, ACM SIGPLAN Notices, </booktitle> <pages> pages 187-199, </pages> <year> 1995. </year> <title> Published as Proceedings OOPSLA '95, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 30, number 10. </volume>
Reference-contexts: The semantics is almost entirely defined by the two systems RMI and SMI, with only two new rules added for SRMI. This merged system is essentially the same system we have previously defined with a less-formal semantics <ref> [17] </ref>. There, we demonstrated that this system captures the key semantic issues that arise in the C++ multiple-inheritance model. March 26, 1996 10:18 am Page 18 7.1 SRMI Syntax One new syntactic form is introduced|a variation on the inh form in which two sequences of base classes may be specified. <p> Given the information obtained at this stage, a member reference in the run-time system is resolved with only a small run-time cost. We have previously presented a subobject-based algebra <ref> [17] </ref> for resolving similar issues in a system that is essentially the same as the system SRMI developed here. The current treatment, in terms of a logic system, allows us to make detailed comparisons of the semantics of a family of related inheritance systems.
Reference: 18. <author> Markku Sakkinen. </author> <title> Disciplined inheritance. </title> <booktitle> In Proceedings ECOOP '89, The Brit-ish Computer Society Workshop Series, </booktitle> <pages> pages 39-56. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed. Multiple inheritance introduces many design issues that have not been given a fully satisfactory taxonomy, although Carnese [3], Snyder [23] and Knudsen [13], for example, have made progress in this direction. Sakkinen <ref> [18] </ref> gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects. The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14].
Reference: 19. <author> Markku Sakkinen. </author> <title> A critique of the inheritance principles of C++. </title> <journal> Computing Systems, </journal> <volume> 5(1) </volume> <pages> 69-110, </pages> <year> 1992. </year>
Reference-contexts: Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects. The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14]. The resulting system, as Sakkinen notes <ref> [19, 20] </ref>, is best understood in terms of the subob-jects of each kind of object. Snyder's informal model [24] of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system.
Reference: 20. <author> Markku Sakkinen. </author> <title> A critique of the inheritance principles of C++: Corrigendum. </title> <journal> Computing Systems, </journal> <volume> 5(3), </volume> <year> 1992. </year> <month> March 26, </month> <note> 1996 10:18 am Page 26 </note>
Reference-contexts: Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects. The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14]. The resulting system, as Sakkinen notes <ref> [19, 20] </ref>, is best understood in terms of the subob-jects of each kind of object. Snyder's informal model [24] of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system.
Reference: 21. <author> Adam Seligman. </author> <title> FACTS: A formal analysis of C++: Type rules and semantics. </title> <type> B.A. Honors Thesis, </type> <institution> Williams College, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object. Snyder's informal model [24] of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system. Although Wallace [27] and Seligman <ref> [21] </ref> have developed formal models of C++, the former sheds little light on issues such as subobjects, subobject selection, and ambiguity analysis, while the latter models only single inheritance. Unlike these models, our formalisms are not full language semantics.
Reference: 22. <author> Andrew Shalit, Orca Starbuck, and David Moon. </author> <title> Dylan Reference Manual. </title> <institution> Apple Computer, Inc., </institution> <year> 1995. </year> <note> Draft of September 29, </note> <year> 1995. </year>
Reference-contexts: is no obvious multiple-inheritance analog for SI's super, since there is no longer an obvious total order among the subobjects. (The question of whether to impose a total order, and what total order to use, is still a source of discussion [9, 12], especially for the CLOS [25] and Dylan <ref> [22] </ref> communities.) MIC Syntax T ::= MIC term Q query Q ::= MIC query a primary subobject of a Q:dyn (m) dynamic subobject selection Q:stat (m) static subobject selection Judgments in MIC include those in CSC, and some new forms.
Reference: 23. <author> Alan Snyder. </author> <title> Inheritance and the development of encapsulated software components. </title> <editor> In B. Shriver and P. Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 165-188. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: While some of these mention the desire to model multiple inheritance, there is no comprehensive model proposed. Multiple inheritance introduces many design issues that have not been given a fully satisfactory taxonomy, although Carnese [3], Snyder <ref> [23] </ref> and Knudsen [13], for example, have made progress in this direction. Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects.
Reference: 24. <author> Alan Snyder. </author> <title> Modeling the C++ object model, an application of an abstract object model. </title> <booktitle> In Proceedings ECOOP '91, </booktitle> <volume> LNCS 512, </volume> <pages> pages 1-20. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The C++ multiple-inheritance system [26] is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14]. The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object. Snyder's informal model <ref> [24] </ref> of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system.
Reference: 25. <author> Guy L. Steele Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: SI, but there is no obvious multiple-inheritance analog for SI's super, since there is no longer an obvious total order among the subobjects. (The question of whether to impose a total order, and what total order to use, is still a source of discussion [9, 12], especially for the CLOS <ref> [25] </ref> and Dylan [22] communities.) MIC Syntax T ::= MIC term Q query Q ::= MIC query a primary subobject of a Q:dyn (m) dynamic subobject selection Q:stat (m) static subobject selection Judgments in MIC include those in CSC, and some new forms.
Reference: 26. <author> Bjarne Stroustrup. </author> <title> Multiple inheritance for C++. </title> <journal> Computing Systems, </journal> <volume> 2(4), </volume> <year> 1989. </year>
Reference-contexts: In other systems, there may be only one subobject for each ancestor, despite multiple paths to the same ancestor. Yet other systems may allow both kinds of inheritance to coexist, as in C++ <ref> [10, 26] </ref>. Subobject selection is complicated by the multiple views supported by an object. <p> Unfortunately, only in the most recent semantics of C++ [1] can any similar requirement be found. This change in the C++ specification deserves further discussion. The problem with the original C++ specification <ref> [10, 26] </ref> is that ambiguity was not considered a problem with the class definition, but rather a problem with the specific reference. Classes were allowed to inherit members ambiguously; only a flagrant reference to the ambiguous member could cause a compile-time error. <p> Sakkinen [18] gives a comprehensive, informal introduction to the design issues surrounding subobjects in inheritance systems. Carre and Geib's point-of-view notion for multiple inheritance [4] is also aimed at understanding subobjects. The C++ multiple-inheritance system <ref> [26] </ref> is a combination of design ideas, originating with Krogdahl's multiple-inheritance design [14]. The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object.
Reference: 27. <author> Charles Wallace. </author> <title> The semantics of the C++ programming language. </title> <editor> In Egon Boerger, editor, </editor> <booktitle> Specification and Validation Methods for Programming Languages, </booktitle> <pages> pages 131-163. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1995. </year> <month> March 26, </month> <note> 1996 10:18 am Page 27 </note>
Reference-contexts: The resulting system, as Sakkinen notes [19, 20], is best understood in terms of the subob-jects of each kind of object. Snyder's informal model [24] of the C++ system, however, intentionally simplifies some of the complicating features of the multiple-inheritance system. Although Wallace <ref> [27] </ref> and Seligman [21] have developed formal models of C++, the former sheds little light on issues such as subobjects, subobject selection, and ambiguity analysis, while the latter models only single inheritance. Unlike these models, our formalisms are not full language semantics.
References-found: 27

