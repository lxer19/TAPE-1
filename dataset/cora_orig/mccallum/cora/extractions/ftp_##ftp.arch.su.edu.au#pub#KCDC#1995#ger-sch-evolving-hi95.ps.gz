URL: ftp://ftp.arch.su.edu.au/pub/KCDC/1995/ger-sch-evolving-hi95.ps.gz
Refering-URL: http://www.arch.su.edu.au/~thorsten/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fjohn,thorsteng@arch.su.edu.au  
Title: EVOLVING REPRESENTATIONS OF DESIGN CASES AND THEIR USE IN CREATIVE DESIGN  
Author: JOHN S. GERO AND THORSTEN SCHNIER 
Address: Sydney NSW 2006 Australia  
Affiliation: Key Centre of Design Computing Department of Architectural and Design Science University of  
Abstract: In case-based design, the adaptation of a design case to new design requirements plays an important role. If it is sufficient to adapt a predefined set of design parameters, the task is easily automated. If, however, more far-reaching, creative changes are required, current systems provide only limited success. This paper describes an approach to creative design adaptation based on the notion of creativity as 'goal oriented shift of focus of a search process'. An evolving representation is used to restructure the search space so that designs similar to the example case lie in the focus of the search. This focus is than used as a starting point to create new designs. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Angeline, P. J. & Pollack, J. B. </author> <year> (1994). </year> <title> Coevolving high-level representations, </title> <editor> in C. G. Langton (ed.), </editor> <booktitle> Artificial Life III, Vol. XVII of SFI Studies in the Sciences of Complexity, </booktitle> <address> Santa Fe Institute, </address> <publisher> Addison-Wesley Publishing Company, </publisher> <pages> pp. 5572. </pages>
Reference-contexts: RELATED WORK In Gero & Kazakov's (1995), a formal description of a very similar approach can be found but it has not been applied to case-based design. Automatic organization into hierarchical structures has also been used in the context of genetic programming <ref> (Koza 1994, Angeline & Pollack 1994) </ref>. As opposed to the application presented here, the basic function set in the genetic programming case is already relatively complex, and the abstraction by function generation usually does not exceed one or two levels of abstraction. 3.
Reference: <author> Back, T., Hofmeister, F. & Schwefel, H.-P. </author> <year> (1991). </year> <title> A survey of evolution strategies, </title> <booktitle> International Congress on Genetic Algorithms ICGA'91, </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA 94403, </address> <pages> pp. 1017. </pages>
Reference: <author> Coyne, R. D., Rosenman, M. A., Radford, A. D., Balachandran, M. & Gero, J. S. </author> <year> (1990). </year> <title> Knowledge-Based Design Systems, </title> <publisher> Addison-Wesley, </publisher> <address> Reading. </address>
Reference-contexts: CASE-BASED DESIGN Case-based reasoning has been introduced in design to allow the reuse of knowledge from design cases, rather than having to start from first principles or compiled knowledge with every new design (Maher et al. 1995). Contrary to knowledge-based design systems <ref> (Coyne et al. 1990) </ref>, the expert knowledge is not stored as an explicit rule set, but is implicit in a database of previous design cases.
Reference: <author> Dave, B., Schmitt, G., Faltings, B. & Smith, I. </author> <year> (1994). </year> <title> Case based design in architecture, </title> <editor> in J. </editor> <publisher> S. </publisher>
Reference: <editor> Gero & F. Sudweeks (eds), </editor> <booktitle> Artificial Intelligence in Design '94, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <pages> pp. 145162. </pages>
Reference: <author> Flemming, U., Coyne, R., Glavin, T. & Rychener, M. </author> <year> (1988). </year> <title> A generative expert system for the design of building layouts, </title> <type> Technical Report EDRC-48-08-88, </type> <institution> Engineering Design Centre, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference: <author> Fogel, D. B. </author> <year> (1994). </year> <title> An introduction to simulated evolutionary optimization, </title> <booktitle> IEEE transaction on neural networks 5(1): </booktitle> <pages> 414. </pages>
Reference: <author> Gero, J. S. </author> <year> (1990). </year> <title> Design prototypes: A knowledge representation schema for design, </title> <journal> AI Magazine 11(4): </journal> <volume> 2736. </volume>
Reference: <author> Gero, J. S. </author> <year> (1994). </year> <title> Towards a model of exploration in computer-aided design, </title> <editor> in J. S. Gero & E.Tyugu (eds), </editor> <title> Formal Design Methods for CAD (preprints), </title> <publisher> North-Holland, Amsterdam, </publisher> <pages> pp. 315336. </pages>
Reference-contexts: Submitted to Third International Conference on Computational Models of Creative Design 2 JOHN S. GERO AND THORSTEN SCHNIER 1.1. MODELS OF CREATIVITY Creative design has been characterized in computational terms as that design activity which occurs when a new variable is introduced into the design <ref> (Gero 1994) </ref>. This is opposed to 'routine design', where knowledge about variables, objectives expressed in terms of those variables, constraints expressed in terms of those variables and the processes needed to find values for those variables, are all known a priori. <p> For creative design, where the search proceeds outside the boundaries of a predefined search space, the term 'exploration' can be used <ref> (see Gero 1994) </ref>. EVOLVING REPRESENTATIONS OF DESIGN CASES 3 (c) moved state space due to variable substitution, (d) expanded state space due to variable addition. 1.2.
Reference: <author> Gero, J. S. & Kazakov, V. A. </author> <year> (1995). </year> <title> Evolving building blocks for design using genetic engineering: a formal approach, </title> <editor> in J. S. Gero & F. Sudweeks (eds), </editor> <booktitle> Preprints Advances in Formal Design Methods for CAD, </booktitle> <institution> IFIP University of Sydney, </institution> <address> Sydney, </address> <pages> pp. 2948. </pages>
Reference: <author> Koza, J. R. </author> <year> (1994). </year> <title> Architecture-altering operations for evolving the architecture of a mutil-part program in genetic programming, </title> <type> Technical report, </type> <institution> Computer Science Department, Stanford University, Stanford, </institution> <address> California 94305-2140 USA. </address>
Reference-contexts: RELATED WORK In Gero & Kazakov's (1995), a formal description of a very similar approach can be found but it has not been applied to case-based design. Automatic organization into hierarchical structures has also been used in the context of genetic programming <ref> (Koza 1994, Angeline & Pollack 1994) </ref>. As opposed to the application presented here, the basic function set in the genetic programming case is already relatively complex, and the abstraction by function generation usually does not exceed one or two levels of abstraction. 3.
Reference: <author> Langton, C. G. </author> <year> (1988). </year> <title> Artificial life, </title> <editor> in C. G. Langton (ed.), </editor> <booktitle> Artificial Life, Vol. VI of SFI Studies in the Sciences of Complexity, </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <pages> pp. 147. </pages>
Reference: <author> Maher, M. L., Balachandran, M. B. & Zhang, D. </author> <year> (1995). </year> <title> Case-Based Reasoning in Design, </title> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ. </address>
Reference-contexts: CASE-BASED DESIGN Case-based reasoning has been introduced in design to allow the reuse of knowledge from design cases, rather than having to start from first principles or compiled knowledge with every new design <ref> (Maher et al. 1995) </ref>. Contrary to knowledge-based design systems (Coyne et al. 1990), the expert knowledge is not stored as an explicit rule set, but is implicit in a database of previous design cases. <p> Recognizing what needs to change and how these changes are made are the major considerations. Adapting de EVOLVING REPRESENTATIONS OF DESIGN CASES 9 sign cases is more than the surface considerations of making changes to the previous design, it is a design process itself <ref> (Maher et al. 1995) </ref>. Automatic adaptation of design cases has been studied e.g. by Dave et al. (1994) in building design. They use two different adaptation operations: dimensional modification and topological modification. Dimensional modification changes the dimensions of the design elements without changing their number.
Reference: <author> Maher, M. L., Zhao, F. & Gero, J. S. </author> <year> (1989). </year> <title> Creativity in humans and computers, </title> <editor> in J. S. Gero & T. Oksala (eds), </editor> <title> Knowledge-Based Systems in Architecture, </title> <journal> Acta Scandinavica, Helsinki, </journal> <volume> chapter 13, </volume> <pages> pp. 129141. </pages>
Reference: <author> Schmitt, G. N. </author> <year> (1993). </year> <title> Case-based reasoning in an integrated design and construction system, Management of Information Technology for Construction, </title> <publisher> World Scientific Publishing Co. </publisher> <address> Pte. Ltd, </address> <booktitle> EVOLVING REPRESENTATIONS OF DESIGN CASES 27 Singapore, </booktitle> <pages> pp. 453465. </pages>
Reference: <author> Spears, W. M., Jong, K. A. D., Baeck, T., Fogel, D. B. & de Garis, H. </author> <year> (1993). </year> <title> An overview of evolutionary computation, </title> <booktitle> Machine Learning: </booktitle> <address> ECML-93, Vienna, Austria, April 5-7, </address> <publisher> Springer Verlag, </publisher> <pages> pp. 442459. </pages>
Reference-contexts: This corresponds to the notion of 'replication with errors', some typical operators used are mutation and cross over; and some poorly fitted individuals are deleted, corresponding to the notion of 'survival of the fittest'. of evolutionary systems, see for example <ref> (Spears et al. 1993, Fogel 1994, Back et al. 1991) </ref>. 2.3. EVOLVING REPRESENTATION In evolutionary systems, the search space is defined by the coding of the genotype.
Reference: <author> Yaeger, L. </author> <year> (1994). </year> <title> Computational genetics, physiology, metabolism, neural systems, learning, vision and behaviour or PolyWorld: Life in a new context, </title> <editor> in C. G. Langton (ed.), </editor> <booktitle> Artificial Life III, Vol. XVII of SFI Studies in the Sciences of Complexity, </booktitle> <address> Santa Fe Institute, </address> <publisher> Addison-Wesley Publishing Company, </publisher> <pages> pp. 263298. </pages>
Reference-contexts: For example, individuals in an artificial life application can develop 'vision' only if a) the individuals have access to some kind of optical sensory organs, and b) in every time-step of the evolution, the appropriate input signal for every instance of those organs is calculated <ref> (see for example Yaeger 1994) </ref>. However even this would not allow for individuals developing for example flight. Together, these implications mean that computational design processes can work only inside a so-called 'closed world'.
References-found: 17

