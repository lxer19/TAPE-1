URL: http://dimacs.rutgers.edu/~rraj/Pubs/alb.ps
Refering-URL: http://dimacs.rutgers.edu/~rraj/Pubs/alb.html
Root-URL: http://www.cs.rutgers.edu
Email: muthu@research.bell-labs.com.  
Title: An Adversarial Model for Distributed Dynamic Load Balancing  
Author: S. Muthukrishnan Rajmohan Rajaraman 
Address: Email:  
Affiliation: Information Sciences Center, Bell Labs.  
Abstract: We study the problem of balancing the load on processors of an arbitrary network. If jobs arrive or depart during the process of load balancing, we have the dynamic load balancing problem; otherwise, we have the static load balancing problem. While static load balancing on arbitrary and special networks has been well studied, very little is known about dynamic load balancing. The difficulty lies in modeling the arrivals and departures of jobs in a clean manner. In this paper, we initiate the study of dynamic load balancing by modeling job traffic using an adversary. Our main result is that a simple, local control distributed load balancing algorithm maintains the load of the network within a stable level against this powerful adversary. Our results hold for different models of traffic patterns and processor communication. y DIMACS Center, Rutgers University, Piscataway, NJ 08854-8818. Email: rraj@dimacs.rutgers.edu. DI-MACS is an NSF Science and Technology Center, funded under contract STC-91-19999 and partially supported by the New Jersey Commission on Science and Technology. Part of this work was done when the author was at the University of Texas at Austin, with support from the National Science Foundation under Grant No. CCR-9504145. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The collection of computer science bibliographies: </institution> <note> Bibliography on load balancing. At URL http://liinwww.ira.uka.de/bibliography/Parallel/ Load.Balance.1.html. </note>
Reference-contexts: Several practical systems employ the local balancing algorithm to balance load. See [22] for an excellent survey and <ref> [1, 2] </ref> for a bibliography of such systems. 2 Our Model We represent the network by a graph G = (V; E), where V is the set of nodes and E is the set of bidirectional links. <p> Proof: We only prove the first claim of the lemma. The proof of the second claim is symmetric. It is useful to extend the notion of height to tokens as well. For this purpose, we assign, for every node v, a unique rank from <ref> [1; w t (v)] </ref> to each token at v. Let the height of a token be its rank minus a t .
Reference: [2] <editor> References to online documents about process migration, </editor> <title> checkpointing and load balancing. </title> <note> At URL http://wwwbode.informatik.tu-muenchen.de/~petri/pbeamrefs.html. </note>
Reference-contexts: Several practical systems employ the local balancing algorithm to balance load. See [22] for an excellent survey and <ref> [1, 2] </ref> for a bibliography of such systems. 2 Our Model We represent the network by a graph G = (V; E), where V is the set of nodes and E is the set of bidirectional links.
Reference: [3] <author> W. Aiello, B. Awerbuch, B. Maggs, and S. Rao. </author> <title> Approximate load balancing on dynamic and asynchronous networks. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 632-641, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links. We assume that the load consists of independent tokens that may be processed anywhere. We adopt the standard multi-port, unit capacity model of communication <ref> [3, 13, 21, 24] </ref>, whereby each node can send or receive at most one token along each of its inci 1 While we have used the terms "static" and "dynamic" as a property of the load, some papers in the load balancing literature use the term as a property of the <p> Our results also extend to other models that take into consideration bursty traffic or a single-port mode of communication. Related Work. Static load balancing has been studied extensively for the arbitrary network model <ref> [3, 13, 21, 24] </ref>. Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context [3], and it is known to take asymptotically optimal number of steps to balance the load [13]. <p> Related Work. Static load balancing has been studied extensively for the arbitrary network model [3, 13, 21, 24]. Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context <ref> [3] </ref>, and it is known to take asymptotically optimal number of steps to balance the load [13]. Our model and our results on stability for arbitrary networks are in the same spirit as previous work on adversarial models for a different problem, namely packet routing [5, 9]. <p> On the other hand, while our work involves one commodity only, the significance of [7, 8] lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including <ref> [3, 13, 14] </ref> is that a number of basic network problems admit efficient solutions in the form of local control algorithms. Several practical systems employ the local balancing algorithm to balance load. <p> The network load is modeled by tokens, each of which may be processed at any node of the network. In order to balance the load distribution, tokens may be communicated among different nodes. We adopt the standard synchronous multi-port model for this communication <ref> [3, 13, 21, 24] </ref>: in each step, each node can send or receive at most one token along each of its incident links. In order to study the dynamic aspect of load balancing, we introduce an adversarial model. <p> We remark that in previous analyses of the local balancing algorithm <ref> [3, 13, 14] </ref>, the expansion of the network was the only characteristic of the topology that was used. Therefore, the lower bounds that these analyses derive for the potential drop during a single step of the local balancing algorithm are limited by the least-expanding subset of the network.
Reference: [4] <author> N. Alon, G. Kalai, M. Ricklin, and L. Stockmeyer. </author> <title> Lower bounds on the competitive ratio for mobile user tracking and distributed job scheduling. </title> <journal> Theoretical Computer Science, </journal> <volume> 130 </volume> <pages> 175-201, </pages> <year> 1994. </year>
Reference-contexts: Their results are not applicable in our model, however, because their model places no bound on the amount of information or load that can be sent along any edge at any time. In addition, their work involves certain nonlocal operations that are inefficient in our model. (See <ref> [4, 12, 25] </ref> for more work on this problem.) The unbounded versus unit capacity assumption on the model of communication makes for a big difference in the flavor of the problems.
Reference: [5] <author> M. Andrews, B. Awerbuch, A. Fernandez, J. Klein-berg, T. Leighton, and Z. Liu. </author> <title> Universal stability results for greedy contention-resolution protocols. </title> <booktitle> In Proceedings of the 37th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 380-389, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Our framework for the adversary is motivated by previous work on adversarial models for packet routing <ref> [5, 9] </ref>. In such an environment, a natural objective is to maintain a low imbalance in the load distribution at all times. We characterize this objective by the requirement that the maximum imbalance in load be bounded at all times. <p> Our model and our results on stability for arbitrary networks are in the same spirit as previous work on adversarial models for a different problem, namely packet routing <ref> [5, 9] </ref>. Also related is the work of Awerbuch, Kutten, and Peleg who introduce a novel extension of competitive analysis for dynamic job scheduling in arbitrary networks [6]. They develop a distributed algorithm whose competitive ratio is polylogarithmic in the size of the network. <p> Our definition for the bursty load pattern is based on the definitions of bursty packet traffic in <ref> [5, 26] </ref>. Our analysis in Section 4 can be modified to show that the local balancing algorithm is stable under bursty adversaries as well. Single-port Communication. <p> We conjecture that the algorithm is stable for rate 1 too. However, a different proof technique may be needed to establish such a result (if it holds). It is noteworthy that current stability proofs for packet routing <ref> [5, 9] </ref> in the adversarial model also apply for rates less than 1 only. We have been able to prove the stability of the edge balancing algorithm for the ring topology when r = 1.
Reference: [6] <author> B. Awerbuch, S. Kutten, and D. Peleg. </author> <title> Competitive distributed job scheduling. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Also related is the work of Awerbuch, Kutten, and Peleg who introduce a novel extension of competitive analysis for dynamic job scheduling in arbitrary networks <ref> [6] </ref>. They develop a distributed algorithm whose competitive ratio is polylogarithmic in the size of the network. Their results are not applicable in our model, however, because their model places no bound on the amount of information or load that can be sent along any edge at any time.
Reference: [7] <author> B. Awerbuch and F. T. Leighton. </author> <title> Improved approximation algorithms for the multi-commodity flow problem and local competitive routing in dynamic networks. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 487-496, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: For instance, cut capacity provides an upper bound on the number of tokens (amount of flow) that any algorithm may remove from a vertex set (in any given step) in the unit capacity case, while this does not apply in the unbounded edge capacity case. In <ref> [7, 8] </ref>, Awerbuch and Leighton study the multi-commodity flow problem and present an elegant local algorithm for continuously shipping a set of commodities from the sources to their respective sinks. <p> On the other hand, while our work involves one commodity only, the significance of <ref> [7, 8] </ref> lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including [3, 13, 14] is that a number of basic network problems admit efficient solutions in the form of local control algorithms. <p> On the other hand, while our work involves one commodity only, the significance of <ref> [7, 8] </ref> lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including [3, 13, 14] is that a number of basic network problems admit efficient solutions in the form of local control algorithms. Several practical systems employ the local balancing algorithm to balance load.
Reference: [8] <author> B. Awerbuch and T. Leighton. </author> <title> A simple local-control approximation algorithm for multi-commodity flow. </title> <booktitle> In Proceedings of the 34th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 459-468, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: For instance, cut capacity provides an upper bound on the number of tokens (amount of flow) that any algorithm may remove from a vertex set (in any given step) in the unit capacity case, while this does not apply in the unbounded edge capacity case. In <ref> [7, 8] </ref>, Awerbuch and Leighton study the multi-commodity flow problem and present an elegant local algorithm for continuously shipping a set of commodities from the sources to their respective sinks. <p> On the other hand, while our work involves one commodity only, the significance of <ref> [7, 8] </ref> lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including [3, 13, 14] is that a number of basic network problems admit efficient solutions in the form of local control algorithms. <p> On the other hand, while our work involves one commodity only, the significance of <ref> [7, 8] </ref> lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including [3, 13, 14] is that a number of basic network problems admit efficient solutions in the form of local control algorithms. Several practical systems employ the local balancing algorithm to balance load.
Reference: [9] <author> A. Borodin, J. Kleinberg, P. Raghavan, M. Sudan, and D. P. Williamson. </author> <title> Adversarial queueing theory. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 376-385, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Our framework for the adversary is motivated by previous work on adversarial models for packet routing <ref> [5, 9] </ref>. In such an environment, a natural objective is to maintain a low imbalance in the load distribution at all times. We characterize this objective by the requirement that the maximum imbalance in load be bounded at all times. <p> Our model and our results on stability for arbitrary networks are in the same spirit as previous work on adversarial models for a different problem, namely packet routing <ref> [5, 9] </ref>. Also related is the work of Awerbuch, Kutten, and Peleg who introduce a novel extension of competitive analysis for dynamic job scheduling in arbitrary networks [6]. They develop a distributed algorithm whose competitive ratio is polylogarithmic in the size of the network. <p> We conjecture that the algorithm is stable for rate 1 too. However, a different proof technique may be needed to establish such a result (if it holds). It is noteworthy that current stability proofs for packet routing <ref> [5, 9] </ref> in the adversarial model also apply for rates less than 1 only. We have been able to prove the stability of the edge balancing algorithm for the ring topology when r = 1.
Reference: [10] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 2 </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: Such load balancing problems arise in a number of parallel and distributed applications including job scheduling in operating systems (e.g., see [29]), packet routing (e.g., see [23]), parallel finite element methods (e.g., see <ref> [10] </ref>); other applications can be found in [27]. Load balancing problems can be classified into two categories: static and dynamic. In static load balancing, the total workload is available at the start of the computation, and no new load is added to the system. <p> Parallel computations such as large-scale partial diferential equations and finite element methods rely on static load balancing. In these applications, the given computation can be divided into a large number of small computational tasks that are distributed among the processors (for example, see <ref> [10, 29] </ref>). Another important application of static load balancing arises in certain packet routing problems, where the initial distribution of packets may be irregular. <p> Since communication is typically assumed to be in handshaking mode, this implies that at any step, tokens may only move along a set of edges that form a graph matching. The single-port model has been studied in <ref> [10, 14, 13, 16, 17] </ref>.
Reference: [11] <author> D. Eager, D. Lazowska, and J. Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12 </volume> <pages> 662-675, </pages> <year> 1986. </year>
Reference-contexts: Much of the extensive literature on distributed load balancing in fact study static load balancing. In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 . Dynamic load balancing is required in a wide variety of applications, including operating systems <ref> [11, 19] </ref>, combinatorial optimization problems [18], and adaptive mesh partitioning [15, 29]. The results and techniques of static load balancing are applicable for certain problems in which the computation can be divided into alternating phases of balancing and processing.
Reference: [12] <author> P. Fizzano, D. Karger, C. Stein, and J. Wein. </author> <title> Job scheduling in rings. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 210-219, </pages> <month> June </month> <year> 1994. </year> <note> Journal version to appear in Journal of Parallel and Distributed Computing. </note>
Reference-contexts: Their results are not applicable in our model, however, because their model places no bound on the amount of information or load that can be sent along any edge at any time. In addition, their work involves certain nonlocal operations that are inefficient in our model. (See <ref> [4, 12, 25] </ref> for more work on this problem.) The unbounded versus unit capacity assumption on the model of communication makes for a big difference in the flavor of the problems.
Reference: [13] <author> B. Ghosh, F. T. Leighton, B. M. Maggs, S. Muthukrishnan, C. G. Plaxton, R. Rajaraman, A. W. Richa, R. E. Tarjan, and D. Zuckerman. </author> <title> Tight analyses of two local load balancing algorithms. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 548-558, </pages> <month> May </month> <year> 1995. </year> <note> Journal version to appear in SIAM Journal on Computing. </note>
Reference-contexts: We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links. We assume that the load consists of independent tokens that may be processed anywhere. We adopt the standard multi-port, unit capacity model of communication <ref> [3, 13, 21, 24] </ref>, whereby each node can send or receive at most one token along each of its inci 1 While we have used the terms "static" and "dynamic" as a property of the load, some papers in the load balancing literature use the term as a property of the <p> Our results also extend to other models that take into consideration bursty traffic or a single-port mode of communication. Related Work. Static load balancing has been studied extensively for the arbitrary network model <ref> [3, 13, 21, 24] </ref>. Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context [3], and it is known to take asymptotically optimal number of steps to balance the load [13]. <p> Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context [3], and it is known to take asymptotically optimal number of steps to balance the load <ref> [13] </ref>. Our model and our results on stability for arbitrary networks are in the same spirit as previous work on adversarial models for a different problem, namely packet routing [5, 9]. <p> On the other hand, while our work involves one commodity only, the significance of [7, 8] lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including <ref> [3, 13, 14] </ref> is that a number of basic network problems admit efficient solutions in the form of local control algorithms. Several practical systems employ the local balancing algorithm to balance load. <p> The network load is modeled by tokens, each of which may be processed at any node of the network. In order to balance the load distribution, tokens may be communicated among different nodes. We adopt the standard synchronous multi-port model for this communication <ref> [3, 13, 21, 24] </ref>: in each step, each node can send or receive at most one token along each of its incident links. In order to study the dynamic aspect of load balancing, we introduce an adversarial model. <p> We remark that in previous analyses of the local balancing algorithm <ref> [3, 13, 14] </ref>, the expansion of the network was the only characteristic of the topology that was used. Therefore, the lower bounds that these analyses derive for the potential drop during a single step of the local balancing algorithm are limited by the least-expanding subset of the network. <p> Since communication is typically assumed to be in handshaking mode, this implies that at any step, tokens may only move along a set of edges that form a graph matching. The single-port model has been studied in <ref> [10, 14, 13, 16, 17] </ref>.
Reference: [14] <author> B. Ghosh and S. Muthukrishnan. </author> <title> Dynamic load balancing in parallel and distributed networks by random matchings. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 226-235, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: On the other hand, while our work involves one commodity only, the significance of [7, 8] lies in the fact that they consider multiple commodities. A common theme that our work shares with [7, 8] and a growing body of work including <ref> [3, 13, 14] </ref> is that a number of basic network problems admit efficient solutions in the form of local control algorithms. Several practical systems employ the local balancing algorithm to balance load. <p> We remark that in previous analyses of the local balancing algorithm <ref> [3, 13, 14] </ref>, the expansion of the network was the only characteristic of the topology that was used. Therefore, the lower bounds that these analyses derive for the potential drop during a single step of the local balancing algorithm are limited by the least-expanding subset of the network. <p> Since communication is typically assumed to be in handshaking mode, this implies that at any step, tokens may only move along a set of edges that form a graph matching. The single-port model has been studied in <ref> [10, 14, 13, 16, 17] </ref>. <p> A variant of the local balancing algorithm for the single-port model was studied in <ref> [14] </ref>. Each step of this algorithm consists of two phases. In the first phase the nodes compute a random matching. <p> In the first phase the nodes compute a random matching. In the second phase, for each node u, if edge (u; v) is chosen in the matching and w (u) &gt; w (v) + 1, then u sends a token to v. In <ref> [14] </ref>, it is shown that the probability that an edge appears in the random matching of any step is at least 1=(8d).
Reference: [15] <author> A. Heirich and S. Taylor. </author> <title> A parabolic theory of load balance. </title> <type> Technical Report Caltech-CS-TR-93-22, </type> <institution> Caltech Scalable Concurrent Computation Lab, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 . Dynamic load balancing is required in a wide variety of applications, including operating systems [11, 19], combinatorial optimization problems [18], and adaptive mesh partitioning <ref> [15, 29] </ref>. The results and techniques of static load balancing are applicable for certain problems in which the computation can be divided into alternating phases of balancing and processing. For most applications, however, it is desired to have a continuous process that manages the distribution of load among nodes.
Reference: [16] <author> J. Hong, M. Chen, and X. Tan. </author> <title> Dynamic cyclic load balancing on hypercubes. </title> <booktitle> In Proceedings of the 4th Conference on Hypercubes, Concurrent Computers and Applications, </booktitle> <pages> pages 595-598, </pages> <year> 1989. </year>
Reference-contexts: Since communication is typically assumed to be in handshaking mode, this implies that at any step, tokens may only move along a set of edges that form a graph matching. The single-port model has been studied in <ref> [10, 14, 13, 16, 17] </ref>.
Reference: [17] <author> S. H. Hosseini, B. Litow, M. Malkawi, J. McPher-son, and K. Vairavan. </author> <title> Analysis of a graph coloring based distributed load balancing algorithm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 160-166, </pages> <year> 1990. </year>
Reference-contexts: Since communication is typically assumed to be in handshaking mode, this implies that at any step, tokens may only move along a set of edges that form a graph matching. The single-port model has been studied in <ref> [10, 14, 13, 16, 17] </ref>.
Reference: [18] <author> E. L. Lawler and D. E. Wood. </author> <title> Branch and bound methods: a survey. </title> <journal> Operations Research, </journal> <volume> 14 </volume> <pages> 699-719, </pages> <year> 1966. </year>
Reference-contexts: In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 . Dynamic load balancing is required in a wide variety of applications, including operating systems [11, 19], combinatorial optimization problems <ref> [18] </ref>, and adaptive mesh partitioning [15, 29]. The results and techniques of static load balancing are applicable for certain problems in which the computation can be divided into alternating phases of balancing and processing.
Reference: [19] <author> F. C. H. Lin and R. M. Keller. </author> <title> The gradient model load balancing method. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13 </volume> <pages> 32-38, </pages> <year> 1986. </year>
Reference-contexts: Much of the extensive literature on distributed load balancing in fact study static load balancing. In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 . Dynamic load balancing is required in a wide variety of applications, including operating systems <ref> [11, 19] </ref>, combinatorial optimization problems [18], and adaptive mesh partitioning [15, 29]. The results and techniques of static load balancing are applicable for certain problems in which the computation can be divided into alternating phases of balancing and processing.
Reference: [20] <author> M. Livny and M. Melman. </author> <title> Load balancing in homogeneous broadcast distributed systems. </title> <journal> ACM Performance Evaluation Review, </journal> <volume> 11(1) </volume> <pages> 47-55, </pages> <year> 1982. </year>
Reference-contexts: In order to make the study of dynamic load balancing somewhat tractable, most of the previous work has assumed either a particular statistical model of load variation or a specific network topology (for example, see <ref> [20, 28] </ref>). In this paper, we initiate an adversarial study of dynamic load balancing for arbitrary network topologies. Our Results. We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links.
Reference: [21] <editor> F. Meyer auf der Heide, B. Oesterdiekhoff, and R. </editor> <title> Wanka. Strongly adaptive token distribution. </title> <journal> Algorithmica, </journal> <volume> 15 </volume> <pages> 413-427, </pages> <year> 1996. </year>
Reference-contexts: We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links. We assume that the load consists of independent tokens that may be processed anywhere. We adopt the standard multi-port, unit capacity model of communication <ref> [3, 13, 21, 24] </ref>, whereby each node can send or receive at most one token along each of its inci 1 While we have used the terms "static" and "dynamic" as a property of the load, some papers in the load balancing literature use the term as a property of the <p> Our results also extend to other models that take into consideration bursty traffic or a single-port mode of communication. Related Work. Static load balancing has been studied extensively for the arbitrary network model <ref> [3, 13, 21, 24] </ref>. Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context [3], and it is known to take asymptotically optimal number of steps to balance the load [13]. <p> The network load is modeled by tokens, each of which may be processed at any node of the network. In order to balance the load distribution, tokens may be communicated among different nodes. We adopt the standard synchronous multi-port model for this communication <ref> [3, 13, 21, 24] </ref>: in each step, each node can send or receive at most one token along each of its incident links. In order to study the dynamic aspect of load balancing, we introduce an adversarial model.
Reference: [22] <author> M. Nuttall. </author> <title> Survey of systems providing process or object migration. </title> <type> Technical Report DoC94/10, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1994. </year>
Reference-contexts: Several practical systems employ the local balancing algorithm to balance load. See <ref> [22] </ref> for an excellent survey and [1, 2] for a bibliography of such systems. 2 Our Model We represent the network by a graph G = (V; E), where V is the set of nodes and E is the set of bidirectional links.
Reference: [23] <author> D. Peleg and E. Upfal. </author> <title> The generalized packet routing problem. </title> <journal> Theoretical Computer Science, </journal> <volume> 53 </volume> <pages> 281-293, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction An important problem in a distributed system is to balance the total workload among the various processors of the underlying system. Such load balancing problems arise in a number of parallel and distributed applications including job scheduling in operating systems (e.g., see [29]), packet routing (e.g., see <ref> [23] </ref>), parallel finite element methods (e.g., see [10]); other applications can be found in [27]. Load balancing problems can be classified into two categories: static and dynamic. <p> Another important application of static load balancing arises in certain packet routing problems, where the initial distribution of packets may be irregular. Routing is performed by first redistributing the packets among the processors in a balanced manner, and then invoking standard routing techniques such as permutation routing or k-k-routing <ref> [23] </ref>. Much of the extensive literature on distributed load balancing in fact study static load balancing. In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 .
Reference: [24] <author> D. Peleg and E. Upfal. </author> <title> The token distribution problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 229-243, </pages> <year> 1989. </year>
Reference-contexts: We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links. We assume that the load consists of independent tokens that may be processed anywhere. We adopt the standard multi-port, unit capacity model of communication <ref> [3, 13, 21, 24] </ref>, whereby each node can send or receive at most one token along each of its inci 1 While we have used the terms "static" and "dynamic" as a property of the load, some papers in the load balancing literature use the term as a property of the <p> Our results also extend to other models that take into consideration bursty traffic or a single-port mode of communication. Related Work. Static load balancing has been studied extensively for the arbitrary network model <ref> [3, 13, 21, 24] </ref>. Here the question is how quickly can the imbalance be reduced to a small quantity. The local algorithm we described above was proposed in this context [3], and it is known to take asymptotically optimal number of steps to balance the load [13]. <p> The network load is modeled by tokens, each of which may be processed at any node of the network. In order to balance the load distribution, tokens may be communicated among different nodes. We adopt the standard synchronous multi-port model for this communication <ref> [3, 13, 21, 24] </ref>: in each step, each node can send or receive at most one token along each of its incident links. In order to study the dynamic aspect of load balancing, we introduce an adversarial model.
Reference: [25] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Task scheduling in networks. </title> <booktitle> In Proceedings of the 5th Scandina-vian Workshop on Algorithm Theory, </booktitle> <year> 1994. </year> <note> Journal version to appear in SIAM Journal on Discrete Mathematics. </note>
Reference-contexts: Their results are not applicable in our model, however, because their model places no bound on the amount of information or load that can be sent along any edge at any time. In addition, their work involves certain nonlocal operations that are inefficient in our model. (See <ref> [4, 12, 25] </ref> for more work on this problem.) The unbounded versus unit capacity assumption on the model of communication makes for a big difference in the flavor of the problems.
Reference: [26] <author> Y. Rabani and E. Tardos. </author> <title> Distributed packet switching in arbitrary networks. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 366-375, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Our definition for the bursty load pattern is based on the definitions of bursty packet traffic in <ref> [5, 26] </ref>. Our analysis in Section 4 can be modified to show that the local balancing algorithm is stable under bursty adversaries as well. Single-port Communication.
Reference: [27] <author> B. Shirazi, A. Hurzon, and K. Kavi. </author> <title> Scheduling and Load Balancing in Parallel and Distributed Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Such load balancing problems arise in a number of parallel and distributed applications including job scheduling in operating systems (e.g., see [29]), packet routing (e.g., see [23]), parallel finite element methods (e.g., see [10]); other applications can be found in <ref> [27] </ref>. Load balancing problems can be classified into two categories: static and dynamic. In static load balancing, the total workload is available at the start of the computation, and no new load is added to the system.
Reference: [28] <author> A. N. Tantawi and D. Towsley. </author> <title> Optimal static load balancing in distributed computer systems. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 445-465, </pages> <year> 1985. </year>
Reference-contexts: In order to make the study of dynamic load balancing somewhat tractable, most of the previous work has assumed either a particular statistical model of load variation or a specific network topology (for example, see <ref> [20, 28] </ref>). In this paper, we initiate an adversarial study of dynamic load balancing for arbitrary network topologies. Our Results. We model a distributed system by an arbitrary network (graph) in which the nodes represent the processors and the edges represent the communication links. <p> These papers, (e.g., <ref> [28] </ref>) define a static load balancing algorithm (resp., dynamic load balancing algorithm) to be an algorithm in which the decisions of transferring load does not depend (resp., may depend) on the current system state. dent links.
Reference: [29] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3 </volume> <pages> 457-481, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction An important problem in a distributed system is to balance the total workload among the various processors of the underlying system. Such load balancing problems arise in a number of parallel and distributed applications including job scheduling in operating systems (e.g., see <ref> [29] </ref>), packet routing (e.g., see [23]), parallel finite element methods (e.g., see [10]); other applications can be found in [27]. Load balancing problems can be classified into two categories: static and dynamic. <p> Parallel computations such as large-scale partial diferential equations and finite element methods rely on static load balancing. In these applications, the given computation can be divided into a large number of small computational tasks that are distributed among the processors (for example, see <ref> [10, 29] </ref>). Another important application of static load balancing arises in certain packet routing problems, where the initial distribution of packets may be irregular. <p> In dynamic load balancing, the load is dynamic, that is, the total workload may vary with time 1 . Dynamic load balancing is required in a wide variety of applications, including operating systems [11, 19], combinatorial optimization problems [18], and adaptive mesh partitioning <ref> [15, 29] </ref>. The results and techniques of static load balancing are applicable for certain problems in which the computation can be divided into alternating phases of balancing and processing. For most applications, however, it is desired to have a continuous process that manages the distribution of load among nodes. <p> Similarly, in many parallel mesh computations, the mesh regions are continuously refined, or coarsened, thereby modifying the number of mesh points (and hence the load) in different mesh regions (for a more elaborate description, see <ref> [29] </ref>). Due to the potentially arbitrary nature of the on-line load arrival and departure process, dynamic load balancing is substantially more challenging than the static version.
References-found: 29

