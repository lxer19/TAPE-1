URL: http://www.robotics.stanford.edu/~murali/papers/triangles-bsp.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~murali/papers/papers.html
Root-URL: http://www.robotics.stanford.edu
Email: Email: guibas@cs.stanford.edu  
Title: Cylindrical Static and Kinetic Binary Space Partitions  
Author: Pankaj K. Agarwal Leonidas J. Guibas T. M. Murali Jeffrey Scott Vitter 
Address: Gates 374, Stanford University, Stanford, CA 94305.  
Affiliation: Computer Science Department,  
Note: Support was provided in part by National Science Foundation grant CCR-9623851 and by US Army MURI grant DAAH04-96-1-007. Address:  
Date: February 12, 1999  
Abstract: We describe the first known algorithm for efficiently maintaining a Binary Space Partition (BSP) for n continuously moving segments in the plane, whose interiors remain disjoint throughout the motion. Under reasonable assumptions on the motion, we show that the total number of times this BSP changes is O(n 2 ), and that we can update the BSP in O(log n) expected time per change. We also consider the problem of constructing a BSP for n static triangles with pairwise-disjoint interiors in R 3 . We present a randomized algorithm that constructs a BSP of size O(n 2 ) in O(n 2 log 2 n) expected time. We also describe a deterministic algorithm that constructs a BSP of size O((n + k) log 2 n) and height O(log n) in O((n + k) log 3 n) time, where k is the number of intersection points between the edges of the projections of the triangles onto the xy-plane. This is the first known algorithm that constructs a BSP of O(log n) height for disjoint triangles in R 3 . fl Support was provided by National Science Foundation research grant CCR-93-01259, by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by a National Science Foundation NYI award and matching funds from Xerox Corp, and by a grant from the U.S.-Israeli Binational Science Foundation. Address: Center for Geometric Computing, Department of Computer Science, Duke University, Box 90129, Durham, NC 27708-0129. Email: pankaj@cs.duke.edu z This research was done when this author was affiliated with Brown University and was a visiting scholar at Duke University. Support was provided in part by National Science Foundation research grant CCR-9522047 and by Army Research Office MURI grant DAAH04-96-1-0013. Address: Computer Science Department, Gates 133, Stanford University, Stanford, CA 94305. Email: murali@cs.stanford.edu x Support was provided in part by National Science Foundation research grant CCR-9522047, by Army Research Office grant DAAH04-93-G-0076, and by Army Research Office MURI grant DAAH04-96-1-0013. Address: Center for Geometric Computing, Department of Computer Science, Duke University, Box 90129, Durham, NC 27708-0129. Email: jsv@cs.duke.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J. Erickson, and L. J. Guibas, </author> <title> Kinetic binary space partitions for intersecting segments and disjoint triangles, </title> <booktitle> Proc. 9th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1998, </year> <pages> pp. 107-116. </pages>
Reference-contexts: Currently, we do not know any non-trivial lower bounds for this problem. Agarwal et al. <ref> [1] </ref> have extended our result and developed an algorithm to maintain BSPs for moving triangles in R 3 . We have also presented algorithms for constructing BSPs for triangles in R 3 .
Reference: [2] <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vitter, </author> <title> Binary space partitions for fat rectangles, </title> <booktitle> Proc. 37th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <month> October </month> <year> 1996, </year> <pages> pp. 482-491. </pages>
Reference-contexts: Sub-quadratic bounds are known for special cases: Paterson and Yao's algorithm for orthogonal rectangles [29], de Berg's result for fat polyhedra [16], and the technique of Agarwal et al. <ref> [2] </ref> for fat orthogonal rectangles. However, none of these approaches lead to a 2 near-quadratic-time algorithm for triangles in R 3 .
Reference: [3] <author> P. K. Agarwal and S. Suri, </author> <title> Surface approximation and geometric partitions, </title> <booktitle> Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 24-33. </pages>
Reference-contexts: Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification <ref> [3] </ref>. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [4] <author> J. M. Airey, </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-space Subdivision and Potentially Visible Set Calculations, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination <ref> [4, 33] </ref>, and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [5] <author> C. Ballieux, </author> <title> Motion planning using binary space partitions, </title> <type> Tech. Rep. </type> <institution> inf/src/93-25, Utrecht University, </institution> <year> 1993. </year>
Reference-contexts: et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics <ref> [5] </ref>, network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [6] <author> J. Basch, L. J. Guibas, and J. Hershberger, </author> <title> Data structures for mobile data, </title> <booktitle> Proc. 8th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1997, </year> <pages> pp. 747-756. 26 </pages>
Reference-contexts: Our algorithm, instead, treats the BSP as a kinetic data structure, a paradigm introduced by Basch et al. <ref> [6] </ref>; see also the survey by Guibas [19]. We view the equations of the cuts made at the nodes of the BSP and the edges and faces of the subdivision induced by the BSP as functions of time. <p> Following Basch et al. <ref> [6] </ref>, we assume that each moving segment has a posted flight plan that gives full or partial information about the segment's current motion. Whenever a flight plan changes (possibly due to an external agent), our algorithm is notified and it updates a global event queue to reflect the change. <p> Note that this theorem makes our BSP a kinetic data structure that is responsive, efficient, local, and compact, in the sense defined by Basch et al. <ref> [6] </ref>. We say that the trajectories followed by a set of segments are pseudo-algebraic if the segments move so that each pair of endpoints exchanges y-order only O (1) times. A special case of pseudo-algebraic trajectories is when the trajectories of all the endpoints are constant-degree polynomials.
Reference: [7] <author> J. L. Bentley and T. A. Ottmann, </author> <title> Algorithms for reporting and counting geometric intersections, </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28 (1979), </volume> <pages> 643-647. </pages>
Reference-contexts: Since v is a cylindrical cell, the triangles in F v can be sorted by their z-coordinates. 5.1 The deterministic algorithm In a pre-processing step, we compute all k intersection points of E fl in O ((n + k) log n) time using the Bentley-Ottman sweep-line algorithm <ref> [7, 30] </ref>. Our algorithm then constructs B in a top-down fashion by maintaining a top subtree of B. We say that a leaf v of the subtree is active if S v 6= ;.
Reference: [8] <author> M. Bern, D. Eppstein, P. Plassman, and F. Yao, </author> <title> Horizon theorems for lines and polygons, </title> <note> in: Discrete and Computational Geometry: Papers from the DIMACS Special Year (J. </note> <editor> Goodman, R. Pollack, and W. Steiger, eds.), </editor> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Vol. 6, </volume> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1991, </year> <pages> pp. 45-66. </pages>
Reference-contexts: Observe that the sum P 1ki (fl; k) equals the total number of edges bounding the boundary faces of A (fl). By a result of Bern et al. <ref> [8] </ref>, the total number of edges of the boundary faces of A (fl) is O (i). <p> The total time spent in the ith stage is X f2Z We now bound this sum. If we denote the number of vertices on the boundary of a face f by jf j, then by the result of Bern et al. <ref> [8] </ref>, we have P f2Z jf j = O (i): Consider the vertical decomposition A k (L i1 ) of A (L i1 ). Each face f 2 A (L i1 ) is decomposed into O (jf j) trapezoids in A k (L i1 ).
Reference: [9] <author> A. T. Campbell, </author> <title> Modeling Global Diffuse Illumination for Image Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Sciences, University of Texas, Austin, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination <ref> [9] </ref>, shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3].
Reference: [10] <author> T. Cassen, K. R. Subramanian, and Z. Michalewicz, </author> <title> Near-optimal construction of partitioning trees by evolutionary techniques, </title> <booktitle> Proc. of Graphics Interface '95, </booktitle> <year> 1995, </year> <pages> pp. 263-271. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [11] <author> B. Chazelle, L. J. Guibas, and D. T. Lee, </author> <title> The power of geometric duality, </title> <journal> BIT, </journal> <volume> 25 (1985), </volume> <pages> 76-90. </pages>
Reference-contexts: We count the time spent during the ith stage in inserting the line ` i and then add this time over all stages of the algorithm. The zone theorem <ref> [11, 17] </ref> implies that in Step 1 of the algorithm, we spend O (i) time in tracing ` i through A (L i1 ).
Reference: [12] <author> N. Chin and S. Feiner, </author> <title> Near real-time shadow generation using BSP trees, </title> <booktitle> Proc. SIG-GRAPH 89, Comput. Graph., </booktitle> <volume> Vol. 23, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1989, </year> <pages> pp. 99-106. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation <ref> [12, 13] </ref>, visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3].
Reference: [13] <author> N. Chin and S. Feiner, </author> <title> Fast object-precision shadow generation for areal light sources using BSP trees, </title> <booktitle> Proc. 1992 Sympos. Interactive 3D Graphics, </booktitle> <year> 1992, </year> <pages> pp. 21-30. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation <ref> [12, 13] </ref>, visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3].
Reference: [14] <author> Y. Chrysanthou, </author> <title> Shadow Computation for 3D Interaction and Animation, </title> <type> Ph.D. Thesis, </type> <institution> Queen Mary and Westfield College, University of London, </institution> <year> 1996. </year>
Reference-contexts: This approach tries to exploit the spatial coherence of the dynamic changes in the tree by introducing additional cutting planes. Chrysanthou suggests a more general approach, which does not make any distinction between static and moving objects <ref> [14] </ref>. By keeping additional information about topological adjacencies in the tree, the algorithm performs insertions and deletions of a node in a more 1 localized way.
Reference: [15] <author> K. L. Clarkson and P. W. Shor, </author> <title> Applications of random sampling in computational geometry, II, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 387-421. </pages>
Reference-contexts: Known techniques for analyzing randomized algorithms, such as the Clarkson-Shor framework <ref> [15] </ref> or backwards analysis [32], cannot be used to obtain a near-quadratic bound on this quantity, since the BSP constructed by the algorithm is not canonical; it strongly depends on the order in which triangles are processed.
Reference: [16] <author> M. de Berg, </author> <title> Linear size binary space partitions for fat objects, </title> <booktitle> Proc. 3rd Annu. Euro-pean Sympos. Algorithms, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 979, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 252-263. </pages>
Reference-contexts: It has been an open problem whether a BSP for n triangles in R 3 can be constructed in near-quadratic time. Sub-quadratic bounds are known for special cases: Paterson and Yao's algorithm for orthogonal rectangles [29], de Berg's result for fat polyhedra <ref> [16] </ref>, and the technique of Agarwal et al. [2] for fat orthogonal rectangles. However, none of these approaches lead to a 2 near-quadratic-time algorithm for triangles in R 3 .
Reference: [17] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: We construct the BSP for S in such a way that there is a close relationship between the BSP and the planar arrangement of lines supporting the edges of the xy-projections of the triangles in S. We use results on "-nets [20] and on arrangements of lines <ref> [17] </ref> to bound the expected number of vertices in the convex subdivision of R 3 induced by the BSP and the expected running time of the algorithm. <p> In order to execute each stage efficiently, we maintain the following additional information: (i) For each active cell 2 B i , we store the subset S S of triangles that intersect the interior of . (ii) We maintain the arrangement A (L i ) as a planar graph <ref> [17] </ref>. For each active face f 2 A (L i ), we maintain the set (f ) of those active cells in B i that lie inside the cylinder f (p; z) j p 2 f; z 2 Rg. <p> We count the time spent during the ith stage in inserting the line ` i and then add this time over all stages of the algorithm. The zone theorem <ref> [11, 17] </ref> implies that in Step 1 of the algorithm, we spend O (i) time in tracing ` i through A (L i1 ).
Reference: [18] <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, </title> <booktitle> Proc. SIGGRAPH 80, Comput. Graph., </booktitle> <volume> Vol. 14, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1980, </year> <pages> pp. 124-133. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. <ref> [18] </ref>, is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [19] <author> L. J. Guibas, </author> <title> Kinetic data structures: A state of the art report, in: Robotics: An Algorithmic Perspective (P. </title> <editor> K. Agarwal, L. E. Kavraki, and M. T. Mason, eds.), </editor> <year> 1998, </year> <pages> pp. 191-209. </pages>
Reference-contexts: Our algorithm, instead, treats the BSP as a kinetic data structure, a paradigm introduced by Basch et al. [6]; see also the survey by Guibas <ref> [19] </ref>. We view the equations of the cuts made at the nodes of the BSP and the edges and faces of the subdivision induced by the BSP as functions of time. The cuts and the edges and faces of the subdivision change continuously with time.
Reference: [20] <author> D. Haussler and E. Welzl, </author> <title> Epsilon-nets and simplex range queries, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 127-151. 27 </pages>
Reference-contexts: We construct the BSP for S in such a way that there is a close relationship between the BSP and the planar arrangement of lines supporting the edges of the xy-projections of the triangles in S. We use results on "-nets <ref> [20] </ref> and on arrangements of lines [17] to bound the expected number of vertices in the convex subdivision of R 3 induced by the BSP and the expected running time of the algorithm.
Reference: [21] <author> C. Mata and J. S. B. Mitchell, </author> <title> Approximation algorithms for geometric tour and net-work design problems, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 360-369. </pages>
Reference-contexts: and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design <ref> [21] </ref>, and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [22] <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: We can actually prove that this bound on X holds with high probability. Since X is the sum of independent 0-1 random variables, using Chernoff's bound <ref> [22, p. 68] </ref>, we have that for any constant ff 1, Pr [X &gt; ffH n ] e ff1 H n In particular for any constant c 3, we can choose ff so that Pr [X &gt; ffH n ] &lt; 1=n c .
Reference: [23] <author> T. M. Murali and T. A. Funkhouser, </author> <title> Consistent solid and boundary representations from arbitrary polygonal data, </title> <booktitle> Proc. 1997 Sympos. Interactive 3D Graphics, </booktitle> <year> 1997. </year>
Reference-contexts: by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair <ref> [23] </ref>, robotics [5], network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [24] <author> B. Naylor and W. Thibault, </author> <title> Application of BSP trees to ray-tracing and CSG evaluation, </title> <type> Technical Report GIT-ICS 86/03, </type> <institution> Georgia Institute of Tech., School of Information and Computer Science, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing <ref> [24] </ref>), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [25] <author> B. F. Naylor, SCULPT: </author> <title> an interactive solid modeling tool, </title> <booktitle> Proc. Graphics Interface '90, </booktitle> <year> 1990, </year> <pages> pp. 138-148. </pages>
Reference-contexts: known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling <ref> [27, 25, 34] </ref>, geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [26] <author> B. F. Naylor, </author> <title> Interactive solid geometry via partitioning trees, </title> <booktitle> Proc. Graphics Interface '92, </booktitle> <year> 1992, </year> <pages> pp. 11-18. </pages>
Reference-contexts: Naylor describes a method to implement dynamic changes in a BSP, where the static objects are represented by a balanced BSP (computed in a preprocessing stage), and then the moving objects are inserted at each time step into the static tree <ref> [26] </ref>. Using the same assumption that moving objects are known a priori , Torres proposes the augmentation of BSPs with additional separating planes, which may localize the updates needed for deletion and re-insertion of moving objects in a BSP [35].
Reference: [27] <author> B. F. Naylor, J. Amanatides, and W. C. Thibault, </author> <title> Merging BSP trees yields polyhedral set operations, </title> <booktitle> Proc. SIGGRAPH 90, Comput. Graph., </booktitle> <volume> Vol. 24, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1990, </year> <pages> pp. 115-124. </pages>
Reference-contexts: known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling <ref> [27, 25, 34] </ref>, geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object.
Reference: [28] <author> M. S. Paterson and F. F. Yao, </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 485-503. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems. <p> Paterson and Yao propose a randomized algorithm that constructs a BSP of O (n log n) size in fi (n log n) for a set of n segments in the plane <ref> [28] </ref>. They also propose a deterministic algorithm, based on a divide-and-conquer approach, that constructs a BSP of size O (n log n) in fi (n log n) time [28]. <p> a BSP of O (n log n) size in fi (n log n) for a set of n segments in the plane <ref> [28] </ref>. They also propose a deterministic algorithm, based on a divide-and-conquer approach, that constructs a BSP of size O (n log n) in fi (n log n) time [28]. Both of these algorithms are not "robust," in the sense that a small motion of one of the segments may cause many changes in the tree, or may cause non-local changes. Therefore, they are ill-suited for maintaining a BSP for a set of moving segments. <p> As far as we know, this is the first nontrivial algorithm for maintaining a BSP for moving segments in the plane. Next, we study the problem of computing a BSP for a set S of n interior-disjoint triangles in R 3 . Paterson and Yao <ref> [28] </ref> describe a randomized incremental algorithm that constructs a BSP of size O (n 2 ) in expected time O (n 3 ). They also show that their algorithm can be made deterministic without affecting its asymptotic running time. <p> A similar proof is used by Paterson and Yao <ref> [28] </ref> to analyze their randomized algorithm for constructing BSPs for triangles in R 3 .
Reference: [29] <author> M. S. Paterson and F. F. Yao, </author> <title> Optimal binary space partitions for orthogonal objects, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 99-113. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems. <p> It has been an open problem whether a BSP for n triangles in R 3 can be constructed in near-quadratic time. Sub-quadratic bounds are known for special cases: Paterson and Yao's algorithm for orthogonal rectangles <ref> [29] </ref>, de Berg's result for fat polyhedra [16], and the technique of Agarwal et al. [2] for fat orthogonal rectangles. However, none of these approaches lead to a 2 near-quadratic-time algorithm for triangles in R 3 .
Reference: [30] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Since v is a cylindrical cell, the triangles in F v can be sorted by their z-coordinates. 5.1 The deterministic algorithm In a pre-processing step, we compute all k intersection points of E fl in O ((n + k) log n) time using the Bentley-Ottman sweep-line algorithm <ref> [7, 30] </ref>. Our algorithm then constructs B in a top-down fashion by maintaining a top subtree of B. We say that a leaf v of the subtree is active if S v 6= ;.
Reference: [31] <author> R. A. Schumacker, R. Brand, M. Gilliland, and W. Sharp, </author> <title> Study for applying computer-generated images to visual simulation, </title> <type> Tech. Rep. </type> <institution> AFHRL-TR-69-14, U.S. Air Force Human Resources Laboratory, </institution> <year> 1969. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. <ref> [31] </ref> and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design
Reference: [32] <author> R. Seidel, </author> <title> Backwards analysis of randomized geometric algorithms, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1993, </year> <pages> pp. 37-68. </pages>
Reference-contexts: Known techniques for analyzing randomized algorithms, such as the Clarkson-Shor framework [15] or backwards analysis <ref> [32] </ref>, cannot be used to obtain a near-quadratic bound on this quantity, since the BSP constructed by the algorithm is not canonical; it strongly depends on the order in which triangles are processed.
Reference: [33] <author> S. J. Teller, </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination <ref> [4, 33] </ref>, and ray tracing [24]), solid modeling [27, 25, 34], geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [34] <author> W. C. Thibault and B. F. Naylor, </author> <title> Set operations on polyhedra using binary space partitioning trees, </title> <booktitle> Proc. SIGGRAPH 87, Comput. Graph., </booktitle> <volume> Vol. 21, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1987, </year> <pages> pp. 153-162. </pages>
Reference-contexts: known as BSP tree), originally proposed by Schu-macker et al. [31] and further refined by Fuchs et al. [18], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [9], shadow generation [12, 13], visibility determination [4, 33], and ray tracing [24]), solid modeling <ref> [27, 25, 34] </ref>, geometric data repair [23], robotics [5], network design [21], and surface simplification [3]. Key to the BSP's success is that it serves both as a model for an object (or a set of objects) and as a data structure for querying the object. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed <ref> [4, 10, 18, 28, 29, 33, 34] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input object are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [35] <author> E. Torres, </author> <title> Optimization of the binary space partition algorithm (BSP) for the visual-ization of dynamic scenes, Eurographics '90, </title> <publisher> North-Holland, </publisher> <year> 1990, </year> <pages> pp. 507-518. 29 </pages>
Reference-contexts: Using the same assumption that moving objects are known a priori , Torres proposes the augmentation of BSPs with additional separating planes, which may localize the updates needed for deletion and re-insertion of moving objects in a BSP <ref> [35] </ref>. This approach tries to exploit the spatial coherence of the dynamic changes in the tree by introducing additional cutting planes. Chrysanthou suggests a more general approach, which does not make any distinction between static and moving objects [14].
References-found: 35

