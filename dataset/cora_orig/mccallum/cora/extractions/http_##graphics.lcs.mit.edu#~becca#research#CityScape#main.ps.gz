URL: http://graphics.lcs.mit.edu/~becca/research/CityScape/main.ps.gz
Refering-URL: http://graphics.lcs.mit.edu/~becca/research/CityScape/proj.html
Root-URL: 
Title: A Stratified Rendering Algorithm for Virtual Walkthroughs of Large Environments  
Author: by Rebecca Wen Fei Xiong Seth J. Teller 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science in Computer Science and Engineering at the  All rights reserved. Author  Certified by  Assistant Professor of Computer Science and Engineering Thesis Supervisor Accepted by F. R. Morgenthaler Chairman, Departmental Committee on Graduate Students  
Date: (1993)  June 1996  May 23, 1996  
Address: Berkeley  
Affiliation: B.S., University of California at  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1996.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J.L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Communications of the ACM, </journal> <volume> 18 </volume> <pages> 509-517, </pages> <year> 1975. </year>
Reference-contexts: The texture map storage and the running time and memory usage of both stages will be analyzed below. 31 which partitions all objects in the environment into near and far objects. 3.1.1 Space partitioning A k-d tree structure with k = 3 <ref> [1] </ref> is used to spatially partition the model into view-cells. The k-d tree is a simple hierarchical tree structure that allows flexible spatial divisions at each step of the iteration.
Reference: [2] <author> Bradford Chamberlain, Tony DeRose, Dani Lischinski, Dani Lischinski, David Salesin, and John Snyder. </author> <title> Fast rendering of complex environments using a spatial hierachy. </title> <type> manuscript, </type> <month> July </month> <year> 1995. </year>
Reference-contexts: During interactive walkthrough, a scene is then rendered by traversing the hierarchy: a cell's approximation is drawn if it is sufficiently accurate <ref> [2] </ref>. A variation on the scheme does not pre-compute the simplified representations, but generates them during the walkthrough, and caches them at each cell for reuse in subsequent frames [12].
Reference: [3] <author> Thomas A. Funkhouser and Carlo H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environment. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <volume> volume 26. </volume> <pages> SIGGRAPH, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: There has been a great deal of research on getting the most cost-effective levels-of 14 detail for different objects. One walkthrough system developed at UC Berkeley uses cost-benefit heuristics to select the polygons to be rendered in each frame <ref> [3] </ref>. The Iris Performer system from Silicon Graphics stores the object model hierarchically. The user can provide several representations of an object with varying levels of detail. Performer then automatically selects a representation based on the location and the speed of the simulated viewpoint [9]. <p> At present, the benefit value can only be modeled through comparison with the ideal image, or using size of object on screen, distance from center of screen, or direction of viewpoint, etc. <ref> [3, 8] </ref>. Once the cost and benefit estimates for each level-of-detail have been calculated, selecting the optimal set translates into an NP-complete knapsack problem, which can be solved only approximately in reasonable time.
Reference: [4] <author> Thomas A. Funkhouser, Carlo H. Sequin, and Seth J. Teller. </author> <title> Management of large amounts of data in interactive building walkthroughs. </title> <booktitle> In Special Issue on Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 11-20. </pages> <note> SIGGRAPH, </note> <year> 1992. </year>
Reference-contexts: For example, if the environment is a building in which floors and walls make natural visibility boundaries, categorizing objects according to these boundaries can significantly reduce the number of polygons that need to be considered in each frame of the walkthrough, resulting in three orders of magnitude speedup during rendering <ref> [4] </ref>. Using this algorithm, a detailed multi-floor building model can be virtually navigated at interactive rates [15].
Reference: [5] <institution> Silicon Graphics. Onyx graphics specifications. </institution> <note> SGI Web Page, </note> <year> 1996. </year>
Reference-contexts: However, if the number of textured pixel in a frame is less than T , the hardware filling capacity, then the equation simplifies to the following: p = 1 26 As an example, data for a Silicon Graphics RealityEngine 2 system shown in Table 2.1 <ref> [5] </ref> are used to calculate an upper bound on the number of polygons that can be rendered per frame. The analysis below assumes a 60Hz frame rate and a 512 pixel by 512 pixel viewport with on average three quarters of the pixels textured.
Reference: [6] <author> IRIS Performer Group. </author> <type> Iris performer 2.0 technical report. Technical report, </type> <institution> Silicon Graphics, </institution> <year> 1995. </year>
Reference-contexts: CityScape is implemented using the IRIS Performer from Silicon Graphics. This toolkit is ideal for real-time 3D graphics application because it encompasses the functionality of the graphics library, provides high-level abstraction for easy manipulation, and is tuned for high performance on a multi-processor workstation <ref> [10, 6] </ref>. 5.1 Interface The user interface of the walkthrough system allows the usual navigational movement: moving forward and backward, turning left and right, ascending, descending, and looking up and down.
Reference: [7] <author> W. Jepson, R. Liggett, and S. Friedman. </author> <title> An environment of real-time urban simulation. </title> <booktitle> In Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 165-166, </pages> <year> 1995. </year> <month> 73 </month>
Reference-contexts: It uses approximations, or levels-of-detail, for objects. The UCLA School of Architecture has built and visualized a model of South Central Los Angeles using this technique. The model consists of collections of texture-mapped boxes, without detailed geometric information <ref> [7] </ref>. When an object is far from the viewer, its projection consists of a small number of pixels on the resulting image. In this case, one need not render all the detailed polygons comprising the object. Instead, one should render the larger polygon shapes that approximate the object.
Reference: [8] <author> Paulo W.C. Maciel and Peter Shirley. </author> <title> Visual navigation of large environments using textured clusters. </title> <booktitle> In Computer Graphics Proceedings. SIGGRAPH, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: Then, each node (object or cluster) is assigned a view-dependent benefit value. Traversing the hierarchy top-down, the representation with the highest accuracy/cost ratio is chosen first, until some representation for each object is chosen and the total rendering time reaches the allowable time for a frame <ref> [8] </ref>. A major drawback of such object approximation algorithms is that when there are many differently-shaped objects in the environment, automatically calculating and storing accurate but low-cost levels-of-detail for each of the objects can be difficult. <p> At present, the benefit value can only be modeled through comparison with the ideal image, or using size of object on screen, distance from center of screen, or direction of viewpoint, etc. <ref> [3, 8] </ref>. Once the cost and benefit estimates for each level-of-detail have been calculated, selecting the optimal set translates into an NP-complete knapsack problem, which can be solved only approximately in reasonable time.
Reference: [9] <author> Patricia McLendon. </author> <title> IRIS Performer Programming Guide. Silicon Graphics, </title> <year> 1992. </year>
Reference-contexts: The Iris Performer system from Silicon Graphics stores the object model hierarchically. The user can provide several representations of an object with varying levels of detail. Performer then automatically selects a representation based on the location and the speed of the simulated viewpoint <ref> [9] </ref>. A recent algorithm uses texture maps pasted onto bounding boxes of objects. This can also apply to a group of objects, in which case the texture maps are called textured clusters.
Reference: [10] <author> John Rohlf and James Helman. Iris performer: </author> <title> A high performance multiprocessing toolkit for real-time 3D graphics. </title> <booktitle> In Computer Graphics Proceedings. SIGGRAPH, </booktitle> <year> 1994. </year>
Reference-contexts: CityScape is implemented using the IRIS Performer from Silicon Graphics. This toolkit is ideal for real-time 3D graphics application because it encompasses the functionality of the graphics library, provides high-level abstraction for easy manipulation, and is tuned for high performance on a multi-processor workstation <ref> [10, 6] </ref>. 5.1 Interface The user interface of the walkthrough system allows the usual navigational movement: moving forward and backward, turning left and right, ascending, descending, and looking up and down.
Reference: [11] <author> Jarek R. Rossignac and Paul Borrel. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. </title> <type> Technical report, </type> <institution> IBM T.J. Watson Research Center, </institution> <year> 1992. </year>
Reference-contexts: In this case, one need not render all the detailed polygons comprising the object. Instead, one should render the larger polygon shapes that approximate the object. For example, vertices in the original CAD models can be clustered to produce a simplified version of the model <ref> [11] </ref>. There has been a great deal of research on getting the most cost-effective levels-of 14 detail for different objects. One walkthrough system developed at UC Berkeley uses cost-benefit heuristics to select the polygons to be rendered in each frame [3].
Reference: [12] <author> Jonathan Shade, Dani Lischinski, David Salesin, Tony DeRose, and John Sny-der. </author> <title> Hierarchical image caching for accelerated walkthroughs of complex environments. </title> <booktitle> In Computer Graphics Proceedings. SIGGRAPH, </booktitle> <year> 1996. </year> <type> manuscript. </type>
Reference-contexts: A variation on the scheme does not pre-compute the simplified representations, but generates them during the walkthrough, and caches them at each cell for reuse in subsequent frames <ref> [12] </ref>. While this algorithm avoids many problems common to object approximation, a large number of simplified images still need to be retrieved and rendered during the tree traversal.
Reference: [13] <author> Seth Teller, Tomas Lozano-Perez, and Alan Edelman. </author> <title> Digitizing Cambridge: Hierarchical acquisition, and real-time visual simulation, of textured 3D geometric models of urban environments at sub-meter resolution, </title> <type> manuscript. </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Yet representing even a medium-sized city can take many polygons. For example, it would take tens of billions of 3D polygons and tens of Gigabytes of texture data to represent Cambridge, Massachusetts (roughly 100km 2 ) using an efficient organization such as an adaptive spatial data structure <ref> [13] </ref>. Rendering such a complex scene at a constant 13 frame rate poses a serious challenge for even the most advanced hardware currently available. Various solutions have been proposed for satisfying the frame rate criterion without sacrificing scene quality, through applying knowledge about object structure and placement.
Reference: [14] <author> Seth J. Teller. </author> <title> Visibility preprocessing for interactive walkthroughs. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <volume> volume 25. </volume> <pages> SIGGRAPH, </pages> <year> 1991. </year>
Reference-contexts: One common approach uses visibility determination. By pre-processing the model, one can often determine a tightly bound superset of visible polygons that need to be processed during each frame of the walkthrough <ref> [14] </ref>, thus eliminating the rest.
Reference: [15] <author> Seth J. Teller. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1992. </year> <month> 74 </month>
Reference-contexts: Using this algorithm, a detailed multi-floor building model can be virtually navigated at interactive rates <ref> [15] </ref>.
References-found: 15

