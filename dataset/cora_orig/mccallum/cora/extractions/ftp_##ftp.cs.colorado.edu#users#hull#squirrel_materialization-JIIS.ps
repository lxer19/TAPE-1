URL: ftp://ftp.cs.colorado.edu/users/hull/squirrel:materialization-JIIS.ps
Refering-URL: http://www.cs.toronto.edu/~mendel/dwbib.html
Root-URL: 
Email: kingg@cs.colorado.edu  
Title: Generating Data Integration Mediators that Use Materialization  
Author: GANG ZHOU RICHARD HULL, AND ROGER KING fgzhou, hull, 
Keyword: materialized integrated view, integration mediator, activeness, view decomposition  
Address: Boulder, CO 80309-0430  
Affiliation: Computer Science Department, University of Colorado,  
Note: 1-24 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  plan  
Abstract: This paper presents a framework for data integration that is based on using "Squirrel integration mediators" that use materialization to support integrated views over multiple databases. These mediators generalize techniques from active databases to provide incremental propagation of updates to the materialized views. A framework based on "View Decomposition Plans" for optimizing the support of materialized integrated views is introduced. The paper describes the Squirrel mediator generator currently under development, which can generate the mediators based on high-level specifications. The integration of information by Squirrel mediators is expressed primarily through an extended version of a standard query language, that can refer to data from multiple information sources. In addition to materializing an integrated view of data, these mediators can monitor conditions that span multiple sources. The Squirrel framework also provides efficient support for the problem of "object matching", that is, determining when object representations (e.g., OIDs) in different databases correspond to the same object-in-the-world, even if a universal key is not available. To establish a context for the research, the paper presents a taxonomy that surveys a broad variety of approaches to supporting and maintaining integrated views. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Abiteboul, R. Hull, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: VDPs provide a broad framework for optimizing support for integrated views, in a manner reminiscent of query execution plans used in traditional query optimization (as described in, e.g., <ref> [1] </ref>). In the Squirrel project at the University of Colorado we are currently developing a prototype generator that can be used to generate Squirrel mediators as described above. <p> As a result, a DBMS is free to change the specific values of OIDs, as long as its internal state remains "OID-isomorphic" <ref> [1] </ref> to the original state. This may create a problem if OIDs from a source database are used to represent information in the local store of a Squirrel mediator. To overcome this problem, we generally assume that the relevant physical OIDs in a source database are immutable. <p> Then, all eligible rules in [fedge rule (v j ; v i ) j i 2 <ref> [1; k] </ref>; (v j ; v i ) 2 Eg are fired, in any order, and all entries in the queue that contributed to the subdeltas are deleted. <p> In terms of the relational data model, some possibilities here include the relatively simple conjunctive queries (in other words, algebra expressions built up from selection, projection and join); these extended using negation (i.e., the relational algebra), or with aggregation, or with both; and the inclusion of recursion <ref> [1] </ref>. A somewhat orthogonal aspect concerns whether intricate object matching criteria are supported. Another orthogonal aspect is whether explicit constructs are provided in the language for temporal, geographical, and other specialized kinds of information.
Reference: 2. <author> R. Ahmed, P. DeSmedt, W. Du, W. Kent, M. Ketabchi, W. Litwin, A. Rafii, and M. C. Shan. </author> <title> Pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views <ref> [2] </ref>, [26], [23], [29]. <p> In this regard, Squirrel mediators build on previous systems that support full [26] or partial <ref> [2] </ref>, [21] materialization for supporting integrated views. In particular, Squirrel mediators can accommodate a variety of complex criteria for matching objects, including "lookup tables", user-defined functions, boolean conditions, historical conditions, and intricate heuristics. <p> The current Squirrel prototype focuses exclusively on the fully materialized approach. Reference <ref> [2] </ref> describes a system in which integrated views are primarily virtual, but some match information is materialized. Reference [29] describes a different kind of hybrid, in which the integrated view is materialized, but the source databases must be polled when incorporating new updates.
Reference: 3. <author> Y. Arens, C.Y. Chee, C.N. Hsu, </author> <title> and C.A. Knoblock. Retrieving and integrating data from multiple information sources. </title> <journal> Intl. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year>
Reference-contexts: The traditional approach is to support a virtual integrated view, and to support queries against the view by query decomposition, query shipping, and integration of query results <ref> [3] </ref>, [22], [25]. More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], [26], [23], [29]. <p> We mention some key points from the spectrum, combinations and variations of these can also arise: Key-based matching is the most straightforward one; it relies on the equality of keys of two objects to match them. WorldBase [26] and SIMS <ref> [3] </ref> are two examples using this approach. A generalization of this is to permit keys that involve derived attributes. Lookup-table-based matching uses a lookup-table that holds pairs of immutable OIDs or keys of corresponding objects. References [26] and [21] support look up tables. <p> The choices include fully materialized approach, as presented in the current paper, which materializes in the persistent store of the mediator all information relevant to the integrated view and maintenance of it; hybrid approach that materializes only part of the relevant information; and fully virtual approach, as presented in <ref> [3] </ref>, [15], which uses query pre-processing and query shipping to answer queries that are made against the integrated view. The current Squirrel prototype focuses exclusively on the fully materialized approach. Reference [2] describes a system in which integrated views are primarily virtual, but some match information is materialized.
Reference: 4. <author> C. Beeri. </author> <title> Formal models for object oriented databases. </title> <booktitle> In Proc. of First Intl. Conf. on Deductive and Object-Oriented Databases, </booktitle> <year> 1989. </year>
Reference-contexts: Immutable OIDs for export: One subtlety concerning object identifiers (OIDs) is that from a formal perspective, only the relationship of the OID to values and other OIDs in a database state is important <ref> [4] </ref>; the particular value of an OID is irrelevant. As a result, a DBMS is free to change the specific values of OIDs, as long as its internal state remains "OID-isomorphic" [1] to the original state.
Reference: 5. <author> J.A. Blakeley, P.-A. Larson, and F.W. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: The primary components of a Squirrel mediator are a local store for the materialized integrated view and auxiliary information, rules for incremental maintenance of the view, and an execution model for applying these rules. Squirrel mediators extend existing techniques <ref> [5] </ref>, [8], [9], [18], [19] for the incremental maintenance of materialized views defined over a single database in two fundamental ways. First, Squirrel mediators can support materialized integrated views over multiple databases. <p> The approach to maintaining integrated views presented here (based on the execution model, VDPs, and rulebases) provides a systematic and comprehensive implementation of an algorithm that follows the spirit of and generalizes the algorithms of <ref> [5] </ref>, [19], [18] for maintaining materialized views over a single database, using the active paradigm as in [8], [9]. As with all active databases, the BV execution model permits a separation of the logic of a Squirrel mediator from the control.
Reference: 6. <author> O. Boucelma, J. Dalrymple, M. Doherty, J. C. Franchitti, R. Hull, R. King, and G. Zhou. </author> <title> Incorporating Active and Multi-database-state Services into an OSA-Compliant Interoperability Framework. </title> <note> In The Collected Arcadia Papers, Second Edition. </note> <institution> University of California, Irvine, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: A central component of our framework is the notion of "Squirrel integration mediator" (or Squirrel mediator). As detailed below, these provide a variety of mechanisms for supporting and incrementally maintaining materialized integrated views. Squirrel mediators are implemented as special purpose "active modules" <ref> [6] </ref>, [11]; these are software components whose behavior is specified largely by rules, in the spirit of active databases. The rules permit a relatively declarative style of programming, thus increasing reusability and maintainability. <p> ZHOU, R. HULL, R. KING We use the Heraclitus paradigm [20] which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations [17], [16], for bags [13], and for the object-oriented database model <ref> [6] </ref>, [12]. We illustrate key elements of the paradigm here in the context of the relational model.
Reference: 7. <author> R.G.G. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1993. </year> <note> 24 G. </note> <author> ZHOU, R. HULL, R. </author> <title> KING </title>
Reference-contexts: A Squirrel mediator, called here S E Mediator, will maintain an integrated view about persons who are both students and employees, providing GENERATING INTEGRATION MEDIATORS 5 Source-DB: StudentDB interface Student - extent students; string studName; integer <ref> [7] </ref> studID; string major; string local_address; string perm_address; -; key: studID Source-DB: EmployeeDB interface Employee - extent employees; string empName; integer [9] SSN; string divName; string address; -; Correspondence S_E_match: Match classes: s IN StudentDB:Student, e IN EmployeeDB:Employee Match predicates: close_names (s.studName, e.empName) AND (e.address = s.local_address OR e.address = s.perm_address) <p> Squirrel Integration Specification Language (ISL) The Integration Specification Language (ISL) allows users to specify their data integration applications in a largely declarative fashion. The language currently supported by Squirrel for specifying integrated views includes rich object matching criteria and a subset of ODMG's OQL <ref> [7] </ref> that corresponds to the relational algebraic operators selection, projection, join, union, and set difference, where both imported and exported classes may be sets or bags. In the discussion here we focus on the case where the imported and exported classes are sets; the extension to bags is straightforward. <p> Each of the source classes will contribute three kinds of attributes to the match class (these sets may overlap): GENERATING INTEGRATION MEDIATORS 15 interface match_Stud_Emp - string studName; string empName; integer <ref> [7] </ref> studID; integer [9] SSN; string major; string divName; string local_address; string address; string perm_address; -; identification attributes: These are used to identify objects from source databases. They might be printable attributes known to be keys, or might be immutable OIDs from the source databases (see Section 2).
Reference: 8. <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <year> 1991. </year>
Reference-contexts: The primary components of a Squirrel mediator are a local store for the materialized integrated view and auxiliary information, rules for incremental maintenance of the view, and an execution model for applying these rules. Squirrel mediators extend existing techniques [5], <ref> [8] </ref>, [9], [18], [19] for the incremental maintenance of materialized views defined over a single database in two fundamental ways. First, Squirrel mediators can support materialized integrated views over multiple databases. <p> to maintaining integrated views presented here (based on the execution model, VDPs, and rulebases) provides a systematic and comprehensive implementation of an algorithm that follows the spirit of and generalizes the algorithms of [5], [19], [18] for maintaining materialized views over a single database, using the active paradigm as in <ref> [8] </ref>, [9]. As with all active databases, the BV execution model permits a separation of the logic of a Squirrel mediator from the control. As with other active databases, the control aspect of the Squirrel mediator is performed by the execution model.
Reference: 9. <author> T.-P. Chang. </author> <title> On Incremental Update Propagation Between Object-Based Databases. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <address> Los Angeles, CA, </address> <year> 1994. </year>
Reference-contexts: The primary components of a Squirrel mediator are a local store for the materialized integrated view and auxiliary information, rules for incremental maintenance of the view, and an execution model for applying these rules. Squirrel mediators extend existing techniques [5], [8], <ref> [9] </ref>, [18], [19] for the incremental maintenance of materialized views defined over a single database in two fundamental ways. First, Squirrel mediators can support materialized integrated views over multiple databases. <p> Mediator, will maintain an integrated view about persons who are both students and employees, providing GENERATING INTEGRATION MEDIATORS 5 Source-DB: StudentDB interface Student - extent students; string studName; integer [7] studID; string major; string local_address; string perm_address; -; key: studID Source-DB: EmployeeDB interface Employee - extent employees; string empName; integer <ref> [9] </ref> SSN; string divName; string address; -; Correspondence S_E_match: Match classes: s IN StudentDB:Student, e IN EmployeeDB:Employee Match predicates: close_names (s.studName, e.empName) AND (e.address = s.local_address OR e.address = s.perm_address) Match object files: $home/demo/close_names.o Export classes: DEFINE VIEW Student_Employee SELECT s.studName,s.major,e.divName FROM s IN StudentDB:Student, e IN EmployeeDB:Employee WHERE S_E_match (s,e); <p> maintaining integrated views presented here (based on the execution model, VDPs, and rulebases) provides a systematic and comprehensive implementation of an algorithm that follows the spirit of and generalizes the algorithms of [5], [19], [18] for maintaining materialized views over a single database, using the active paradigm as in [8], <ref> [9] </ref>. As with all active databases, the BV execution model permits a separation of the logic of a Squirrel mediator from the control. As with other active databases, the control aspect of the Squirrel mediator is performed by the execution model. <p> Each of the source classes will contribute three kinds of attributes to the match class (these sets may overlap): GENERATING INTEGRATION MEDIATORS 15 interface match_Stud_Emp - string studName; string empName; integer [7] studID; integer <ref> [9] </ref> SSN; string major; string divName; string local_address; string address; string perm_address; -; identification attributes: These are used to identify objects from source databases. They might be printable attributes known to be keys, or might be immutable OIDs from the source databases (see Section 2). <p> The current Squirrel prototype supports all of the kinds of matching criteria mentioned above. As an aside, we note that in the Student/Employee example, the Student class and the Employee class refer to the same kinds of objects in the world, namely, people. In the terminology of <ref> [9] </ref>, [10], two entity classes from different databases that refer to the same or overlapping domains of underlying objects are called congruent classes. In some cases objects from non-congruent classes may be closely related.
Reference: 10. <author> T.-P. Chang and R. Hull. </author> <title> Using witness generators to support bi-directional update between object-based databases. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 196-207, </pages> <year> 1995. </year>
Reference-contexts: The current Squirrel prototype supports all of the kinds of matching criteria mentioned above. As an aside, we note that in the Student/Employee example, the Student class and the Employee class refer to the same kinds of objects in the world, namely, people. In the terminology of [9], <ref> [10] </ref>, two entity classes from different databases that refer to the same or overlapping domains of underlying objects are called congruent classes. In some cases objects from non-congruent classes may be closely related.
Reference: 11. <author> J. Dalrymple. </author> <title> Extending Rule Mechanisms for the Construction of Interoperable Systems. </title> <type> PhD thesis, </type> <institution> University of Colorado, Boulder, </institution> <year> 1995. </year>
Reference-contexts: A central component of our framework is the notion of "Squirrel integration mediator" (or Squirrel mediator). As detailed below, these provide a variety of mechanisms for supporting and incrementally maintaining materialized integrated views. Squirrel mediators are implemented as special purpose "active modules" [6], <ref> [11] </ref>; these are software components whose behavior is specified largely by rules, in the spirit of active databases. The rules permit a relatively declarative style of programming, thus increasing reusability and maintainability.
Reference: 12. <author> M. Doherty, R. Hull, M. Derr, and J. Durand. </author> <title> On detecting conflict between proposed updates. </title> <booktitle> In Proc. of Intl. Workshop on Database Programming Languages, </booktitle> <month> September </month> <year> 1995. </year> <note> to appear. </note>
Reference-contexts: ZHOU, R. HULL, R. KING We use the Heraclitus paradigm [20] which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations [17], [16], for bags [13], and for the object-oriented database model [6], <ref> [12] </ref>. We illustrate key elements of the paradigm here in the context of the relational model.
Reference: 13. <author> M. Doherty, R. Hull, and M. Rupawalla. </author> <title> Structures for manipulating proposed updates in object-oriented databases, </title> <note> 1995. Technical report in preparation. </note>
Reference-contexts: ZHOU, R. HULL, R. KING We use the Heraclitus paradigm [20] which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations [17], [16], for bags <ref> [13] </ref>, and for the object-oriented database model [6], [12]. We illustrate key elements of the paradigm here in the context of the relational model.
Reference: 14. <author> F. Eliassen and R. Karlsen. </author> <title> Interoperability and object identity. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4) </volume> <pages> 25-29, </pages> <year> 1991. </year>
Reference-contexts: To overcome this problem, we generally assume that the relevant physical OIDs in a source database are immutable. If a source database does not use immutable OIDs, then we follow the technique of <ref> [14] </ref>, and assume that these source databases have been wrapped to support immutable OIDs for export. 3. A Motivating Example and Intuitive Remarks This section gives an informal overview, based on a very simple example, of several key aspects of the Squirrel framework for data integration using Squirrel mediators.
Reference: 15. <author> D. Florescu, L. Raschid, and P. Valduriez. </author> <title> Using heterogeneous equivalences for query rewriting in multidatabase systems. </title> <booktitle> In Proc. of Third Intl. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The choices include fully materialized approach, as presented in the current paper, which materializes in the persistent store of the mediator all information relevant to the integrated view and maintenance of it; hybrid approach that materializes only part of the relevant information; and fully virtual approach, as presented in [3], <ref> [15] </ref>, which uses query pre-processing and query shipping to answer queries that are made against the integrated view. The current Squirrel prototype focuses exclusively on the fully materialized approach. Reference [2] describes a system in which integrated views are primarily virtual, but some match information is materialized.
Reference: 16. <author> S. Ghandeharizadeh, R. Hull, and D. Jacobs. Heraclitus[Alg,C]: </author> <title> Elevating deltas to be first-class citizens in a database programming language. </title> <type> Technical Report USC-CS-94-581, </type> <institution> Computer Science Department, Univ. of Southern California, </institution> <year> 1994. </year>
Reference-contexts: ZHOU, R. HULL, R. KING We use the Heraclitus paradigm [20] which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations [17], <ref> [16] </ref>, for bags [13], and for the object-oriented database model [6], [12]. We illustrate key elements of the paradigm here in the context of the relational model. <p> In particular, the expression `q when ' yields the value of query q on the state that would arise if were applied to the current state. Squirrel mediators are implemented in the language Heraclitus [Alg,C] <ref> [16] </ref>, which extends C to include persistent relations and deltas.
Reference: 17. <author> S. Ghandeharizadeh, R. Hull, D. Jacobs, et al. </author> <title> On implementing a language for specifying active database execution models. </title> <booktitle> In Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> pages 441-454, </pages> <year> 1993. </year>
Reference-contexts: ZHOU, R. HULL, R. KING We use the Heraclitus paradigm [20] which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations <ref> [17] </ref>, [16], for bags [13], and for the object-oriented database model [6], [12]. We illustrate key elements of the paradigm here in the context of the relational model.
Reference: 18. <author> T. Griffin and L. Libkin. </author> <title> Incremental maintenance of views with duplicates. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 328-339, </pages> <year> 1995. </year>
Reference-contexts: The primary components of a Squirrel mediator are a local store for the materialized integrated view and auxiliary information, rules for incremental maintenance of the view, and an execution model for applying these rules. Squirrel mediators extend existing techniques [5], [8], [9], <ref> [18] </ref>, [19] for the incremental maintenance of materialized views defined over a single database in two fundamental ways. First, Squirrel mediators can support materialized integrated views over multiple databases. <p> The approach to maintaining integrated views presented here (based on the execution model, VDPs, and rulebases) provides a systematic and comprehensive implementation of an algorithm that follows the spirit of and generalizes the algorithms of [5], [19], <ref> [18] </ref> for maintaining materialized views over a single database, using the active paradigm as in [8], [9]. As with all active databases, the BV execution model permits a separation of the logic of a Squirrel mediator from the control.
Reference: 19. <author> A. Gupta, </author> <title> I.S. Mumick, and V.S. Subrahmanian. Maintaining views incrementally. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 157-166, </pages> <year> 1993. </year>
Reference-contexts: The primary components of a Squirrel mediator are a local store for the materialized integrated view and auxiliary information, rules for incremental maintenance of the view, and an execution model for applying these rules. Squirrel mediators extend existing techniques [5], [8], [9], [18], <ref> [19] </ref> for the incremental maintenance of materialized views defined over a single database in two fundamental ways. First, Squirrel mediators can support materialized integrated views over multiple databases. <p> The approach to maintaining integrated views presented here (based on the execution model, VDPs, and rulebases) provides a systematic and comprehensive implementation of an algorithm that follows the spirit of and generalizes the algorithms of [5], <ref> [19] </ref>, [18] for maintaining materialized views over a single database, using the active paradigm as in [8], [9]. As with all active databases, the BV execution model permits a separation of the logic of a Squirrel mediator from the control.
Reference: 20. <author> R. Hull and D. Jacobs. </author> <title> Language constructs for programming active databases. </title> <booktitle> In Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> pages 455-468, </pages> <year> 1991. </year>
Reference-contexts: The Heraclitus Paradigm: Squirrel mediators use incremental updates to maintain materialized integrated views. The notation and tools used to manipulate such incremental updates are introduced now. 4 G. ZHOU, R. HULL, R. KING We use the Heraclitus paradigm <ref> [20] </ref> which elevates "deltas", or the differences between database states, to be first-class citizens in database programming languages. This paradigm has been developed for relations [17], [16], for bags [13], and for the object-oriented database model [6], [12]. <p> For the relational case, the smash 1 ! 2 can be computed by forming the union of 1 and 2 , and then deleting any element of 1 that conflicts with an element of 2 <ref> [20] </ref>. Smash is also relatively easy to compute for bag and object-oriented deltas. Finally, the operator when permits efficient access to hypothetical states of a database, without modifying the current database state.
Reference: 21. <author> W. Kent, R. Ahmed, J. Albert, and M. Ketabchi. </author> <title> Object identification in multidatabase systems. </title> <editor> In D. Hsiao, E. Neuhold, and R. Sacks-Davis, editors, </editor> <booktitle> Interoperable Database Systems (DS-5) (A-25). </booktitle> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <year> 1993. </year>
Reference-contexts: In this regard, Squirrel mediators build on previous systems that support full [26] or partial [2], <ref> [21] </ref> materialization for supporting integrated views. In particular, Squirrel mediators can accommodate a variety of complex criteria for matching objects, including "lookup tables", user-defined functions, boolean conditions, historical conditions, and intricate heuristics. <p> WorldBase [26] and SIMS [3] are two examples using this approach. A generalization of this is to permit keys that involve derived attributes. Lookup-table-based matching uses a lookup-table that holds pairs of immutable OIDs or keys of corresponding objects. References [26] and <ref> [21] </ref> support look up tables.
Reference: 22. <author> W. Litwin, L. Mark, and N. Roussopolos. </author> <title> Interoperability of multiple autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 267-293, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The traditional approach is to support a virtual integrated view, and to support queries against the view by query decomposition, query shipping, and integration of query results [3], <ref> [22] </ref>, [25]. More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], [26], [23], [29].
Reference: 23. <author> J.J. Lu, G. Moerkotte, J. Schue, </author> <title> and V.S. Subrahmanian. Efficient maintenance of materialized mediated views. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 340-351, </pages> <year> 1995. </year>
Reference-contexts: More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], [26], <ref> [23] </ref>, [29].
Reference: 24. <author> D. Stacey. </author> <title> Replication: DB2, Oracle, or Sybase? Database Programming and Design, </title> <month> December </month> <year> 1994. </year>
Reference-contexts: One useful case of restricted activeness is provided by "asynchronous replication servers". These systems, that are becoming commercially available for relational DBMSs <ref> [24] </ref>, permit one database to hold an exact copy (no selections or projections) of a relation in another database. Another 22 G. ZHOU, R. HULL, R.
Reference: 25. <author> G. Thomas et al. </author> <title> Heterogeneous distributed database systems for production use. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 237-266, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The traditional approach is to support a virtual integrated view, and to support queries against the view by query decomposition, query shipping, and integration of query results [3], [22], <ref> [25] </ref>. More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], [26], [23], [29].
Reference: 26. <author> S. Widjojo, R. Hull, and D. Wile. </author> <title> Distributed Information Sharing using WorldBase. </title> <journal> IEEE Office Knowledge Engineering, </journal> <volume> 3(2) </volume> <pages> 17-26, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], <ref> [26] </ref>, [23], [29]. <p> In this regard, Squirrel mediators build on previous systems that support full <ref> [26] </ref> or partial [2], [21] materialization for supporting integrated views. In particular, Squirrel mediators can accommodate a variety of complex criteria for matching objects, including "lookup tables", user-defined functions, boolean conditions, historical conditions, and intricate heuristics. <p> We mention some key points from the spectrum, combinations and variations of these can also arise: Key-based matching is the most straightforward one; it relies on the equality of keys of two objects to match them. WorldBase <ref> [26] </ref> and SIMS [3] are two examples using this approach. A generalization of this is to permit keys that involve derived attributes. Lookup-table-based matching uses a lookup-table that holds pairs of immutable OIDs or keys of corresponding objects. References [26] and [21] support look up tables. <p> WorldBase <ref> [26] </ref> and SIMS [3] are two examples using this approach. A generalization of this is to permit keys that involve derived attributes. Lookup-table-based matching uses a lookup-table that holds pairs of immutable OIDs or keys of corresponding objects. References [26] and [21] support look up tables.
Reference: 27. <author> G. Zhou, R. Hull, and R. King. </author> <title> Generating data integration mediators that use materialization. </title> <type> Technical report, </type> <institution> Computer Science Department, University of Colorado, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Section 5 presents the taxonomy of the space of approaches to data integration. Brief conclusions are given in Section 6. Due to space limitations, the presentation here is rather terse; further details may be found in <ref> [27] </ref>. 2. Preliminaries This section briefly surveys two of the technologies that are used by Squirrel. The Heraclitus Paradigm: Squirrel mediators use incremental updates to maintain materialized integrated views. The notation and tools used to manipulate such incremental updates are introduced now. 4 G. ZHOU, R. HULL, R. <p> The primary focus of ISL is on the specification of matching predicates, of integrated views, and of conditions to be monitored. An ISL specification for the Student/Employee example is shown in Figure 1 in Section 3. We now briefly describe the four parts of the ISL (see <ref> [27] </ref> for more details). 10 G. ZHOU, R. HULL, R. KING (1) Source DB subschemas describe relevant subschemas of the source databases. A key may optionally be specified for each class. (2) Correspondence specifications describe match criteria between objects of families of corresponding classes. <p> There may be complex interaction between the match predicates in a specification fl (see <ref> [27] </ref>). 16 G. ZHOU, R. HULL, R. KING The BV execution model presented in Subsection 4.4 above must be modified to accommodate match classes. Speaking intuitively, there are two reasons for this. <p> Speaking intuitively, rules corresponding to these binary match predicates must be fired repeatedly until a fixpoint is obtained. A more formal presentation of the extended BV execution model is in <ref> [27] </ref>. 4.6. Default VDP and rule templates VDPs provide very flexible representations of the skeletons of update processing strategies in the mediator, which can be tailored to optimize the support of integrated views. The current Squirrel prototype constructs a reasonably efficient default VDP for a given integrated view. <p> More details about default simple VDPs for all kinds of distinguished classes, and about merging several simple VDPs into a single VDP can be found in <ref> [27] </ref>.
Reference: 28. <author> G. Zhou, R. Hull, R. King, and J-C. Franchitti. </author> <title> Using object matching and materialization to integrate heterogeneous databases. </title> <booktitle> In Proc. of Third Intl. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The primary contribution of the research presented in this paper is the description * This research was supported in part by NSF grant IRI-931832, and ARPA grants BAA-92-1092 and 33825-RT-AAS. A preliminary version of some of the material presented here appears in <ref> [28] </ref>. ** A student at the University of Southern California, in residence at the University of Colorado. 2 G. ZHOU, R. HULL, R. KING of a prototype tool that can generate systems that support data integration using materialized integrated views.
Reference: 29. <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> pages 316-327, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: More recently, the use of materialization has been gaining increasing attention in connection with supporting both single-source and integrated views [2], [26], [23], <ref> [29] </ref>. <p> First, Squirrel mediators can support materialized integrated views over multiple databases. These mediators materialize both the classes for export and also auxiliary classes, so that maintenance can be performed using exclusively incremental updates from the source databases. (This contrasts with the approach of <ref> [29] </ref>, where only export classes would be materialized. <p> The current Squirrel prototype focuses exclusively on the fully materialized approach. Reference [2] describes a system in which integrated views are primarily virtual, but some match information is materialized. Reference <ref> [29] </ref> describes a different kind of hybrid, in which the integrated view is materialized, but the source databases must be polled when incorporating new updates. Activeness of Source Databases: This spectrum concerns the active capabilities of source databases, and is relevant only if some materialization occurs. <p> maintenance strategies: local incremental update approach, as presented in the Student/Employee example in Section 3, that stores relevant portions of source data in the mediator so that the incremental maintenance can be performed locally after the source notifies the mediator of relevant updates, polling-based incremental update approach, as presented in <ref> [29] </ref>, that does not store extra data for the purpose of incremental maintenance, but polls for data as needed from the sources, and refresh of the out-of-date classes in the mediator by re-generating all their objects. The current Squirrel prototype is focused on local incremental update.
References-found: 29

