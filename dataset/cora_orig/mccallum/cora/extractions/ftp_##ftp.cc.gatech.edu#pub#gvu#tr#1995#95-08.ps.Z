URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1995/95-08.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1995/
Root-URL: 
Email: E-mail: sougata@cc.gatech.edu, foley@cc.gatech.edu, hudson@cc.gatech.edu  
Title: Visualizing Complex Hypermedia Networks through Multiple Hierarchical Views  
Author: Sougata Mukherjea, James D. Foley, Scott Hudson 
Keyword: Hypermedia, Overview Diagrams, Information Visualization, Hierarchization.  
Affiliation: Graphics, Visualization Usability Center College of Computing Georgia Institute of Technology  
Abstract: Our work concerns visualizing the information space of hy-permedia systems using multiple hierarchical views. Although overview diagrams are useful for helping the user to navigate in a hypermedia system, for any real-world system they become too complicated and large to be really useful. This is because these diagrams represent complex network structures which are very difficult to visualize and comprehend. On the other hand, effective visualizations of hierarchies have been developed. Our strategy is to provide the user with different hierarchies, each giving a different perspective to the underlying information space, to help the user better comprehend the information. We propose an algorithm based on content and structural analysis to form hierarchies from hypermedia networks. The algorithm is automatic but can be guided by the user. The multiple hierarchies can be visualized in various ways. We give examples of the implementation of the algorithm on two hypermedia systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G. Battista, P. Eades, R. Tamassia, and I. Tollis. </author> <title> Algorithms for Drawing Graphs: an Annotated Bibliography. </title> <type> Technical report, </type> <institution> Brown University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: However, for any real-world hypermedia system with many nodes and links, the overview diagrams represent large complex network structures. They are generally shown as 2D or 3D graphs and comprehending such large complex graphs is extremely difficult. The layout of graphs is also a very difficult problem <ref> [1] </ref>. Other attempts to visualize networks such as Semnet [3], have not been very successful.
Reference: 2. <author> R. Botafogo, E. Rivlin, and B. Shneiderman. </author> <title> Structural Analysis of Hypertexts: Identifying Hierarchies and Useful Metrics. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 10(2) </volume> <pages> 142-180, </pages> <year> 1992. </year>
Reference-contexts: RELATED WORK Our structural analysis is similar to that described in <ref> [2] </ref> for identifying hierarchies from hypermedia structures. Although using just structural analysis to identify hierarchies works for hypertext systems with simpler underlying structures, identifying meaningful hierarchies by structural analysis alone is difficult for real-world systems. <p> Future work is planned along the following directions: * Visualizing Larger Databases: Although a detailed complexity analysis is beyond the scope of this paper, it can be shown that the major bottleneck of the algorithm is the structural analysis to identify roots. <ref> [2] </ref> uses an O (n 3 ) algorithm to identify roots. On the other hand we use O (n 2 + nl) algorithm to identify roots (by calling the breadth-first search for each node).
Reference: 3. <author> K. Fairchild, S. Poltrok, and G. Furnas. Semnet: </author> <title> Three-dimensional Graphic Representations of Large Knowledge Bases. </title> <editor> In R. Guindon, editor, </editor> <title> Cognitive Science and its Applications for Human-Computer Interaction. </title> <publisher> Lawrence Erlbaum, </publisher> <year> 1988. </year>
Reference-contexts: They are generally shown as 2D or 3D graphs and comprehending such large complex graphs is extremely difficult. The layout of graphs is also a very difficult problem [1]. Other attempts to visualize networks such as Semnet <ref> [3] </ref>, have not been very successful.
Reference: 4. <author> G. Furnas and J. Zacks. Multitrees: </author> <title> Enriching and Reusing Hierarchical Structures. </title> <booktitle> In Proceedings of the ACM SIGCHI '94 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 330-336, </pages> <address> Boston, Ma, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: These descendants thus form a list of graphs and are called branches. However, there is one restriction nodes from different branches cannot have links between them. An example pre-tree is shown in Figure 1. Note that pre-tree is another data structure like multi-trees <ref> [4] </ref> it is not as complex as a graph but not as simple as a tree. Also note that although the term pre-tree has not been used before, this data structure has a long history in top-down graphs. However, none of these graphs have any links between them.
Reference: 5. <author> J. Hartigan. </author> <title> Clustering Algorithms. </title> <publisher> John Wiley and Sons, </publisher> <year> 1975. </year>
Reference-contexts: However, none of these graphs have any links between them. Our hierarchization algorithm tries to identify the best pre-tree to represent the given graph. The final tree is formed by calling the algorithm recursively for the branches. clustering techniques <ref> [5] </ref>. Top-down clustering would often be halted when new divisions were not auspicious, leaving a final structure which is essentially a pre-tree. Hierarchization Algorithm The algorithm tries to identify a suitable pre-tree from a given graph. Thus a root node is identified and the other nodes are partitioned into branches.
Reference: 6. <author> S. Ichimura and Y. </author> <title> Matsushita. Another Dimension to Hypermedia Access. </title> <booktitle> In Proceedings of Hypertext '93 Conference, </booktitle> <pages> pages 63-72, </pages> <address> Seattle, Wa, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Although using just structural analysis to identify hierarchies works for hypertext systems with simpler underlying structures, identifying meaningful hierarchies by structural analysis alone is difficult for real-world systems. Content analysis is also essential as is evident from the paper. <ref> [6] </ref> describes a method to linearize complex hyper-networked nodes to facilitate browsing using a book metaphor. However, this work also uses structural analysis only. This paper is also related to systems that deal with graphical presentation of information automatically or semi-automatically. Examples include APT [8] and SAGE [16].
Reference: 7. <author> B. Johnson and B. Shneiderman. Treemaps: </author> <title> A Space-filling Approach to the Visualization of Hierarchical Information. </title> <booktitle> In Proceedings of IEEE Visualization '91 Conference, </booktitle> <pages> pages 284-291, </pages> <address> San Diego, Ca, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Thus, if different hierarchies, each of which gives a different perspective to the underlying information can be formed, the user would be able to comprehend the information better. It should be also noted that unlike networks some very effective ways of visualizing hierarchies have been proposed. Examples are Treemaps <ref> [7] </ref> and Cone Trees [15]. This paper proposes an algorithm for forming hierarchies from hypermedia graphs. It uses both structural and content analysis to identify the hierarchies.
Reference: 8. <author> J. MacKinlay. </author> <title> Automating the Design of Graphical Presentation of Relational Information. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 110-141, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: However, this work also uses structural analysis only. This paper is also related to systems that deal with graphical presentation of information automatically or semi-automatically. Examples include APT <ref> [8] </ref> and SAGE [16]. However, our information domain is different from these systems these systems deal with highly structured information. The views that we want to develop are also different. The previous systems generally produced bar diagrams, scatter plots and such graph views.
Reference: 9. <author> J. D. Mackinlay, S. Card, and G. Robertson. </author> <title> Perspective Wall: Detail and Context Smoothly Integrated. </title> <booktitle> In Proceedings of the ACM SIGCHI '91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 173-179, </pages> <address> New Orleans, La, </address> <month> April </month> <year> 1991. </year>
Reference: 10. <author> S. Mukherjea and J. Foley. </author> <title> Navigational View Builder: </title>
Reference-contexts: These hierarchies can be visualized in different ways. Section 2 presents our hierarchization process. Section 3 shows the implementation of the algorithm in the Navigational View Builder, a system we are building for visualizing the information space of Hypermedia systems <ref> [10] </ref>, [11]. This section discusses the application of the algorithm on a demo automobile database and a section of the World-Wide Web. Section 4 discusses how the hierarchies can be transformed to other forms of data organizations. Section 5 talks about the related work while section 6 is the conclusion. <p> Different visual attributes can be bound to information attributes in the views. This is an extension of the work reported in <ref> [10] </ref>. IMPLEMENTATION The algorithm has been implemented in the Navigational View Builder, a system for forming overview diagrams of hypermedia systems. Figure 2 represents an overview diagram of an automobile database.
References-found: 10

