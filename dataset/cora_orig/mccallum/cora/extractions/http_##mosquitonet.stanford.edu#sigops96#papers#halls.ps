URL: http://mosquitonet.stanford.edu/sigops96/papers/halls.ps
Refering-URL: http://swarm.cs.wustl.edu/~picco/papers/biblio/misc.bib.html
Root-URL: 
Email: fDavid.Halls,John.Bates,Jean.Bacong@cl.cam.ac.uk  
Title: Flexible Distributed Programming using Mobile Code  
Author: David Halls, John Bates and Jean Bacon 
Address: Pembroke Street, Cambridge CB2 3QG, United Kingdom  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: We have designed and implemented a mobile code system. It has been integrated with an existing distributed programming environment that includes a Remote Procedure Call (RPC) system, object interface definition language, a trader, an event system and continuous media streams. This bespoke platform for distributed programming has allowed us to experiment with mobile code and propose new facilities. Section 1.1 discusses our implemented system. Section 1.2 describes a novel remote procedure call system built on top of our mobile code system. Related work is reviewed in section 2. Current and possible future uses of our system are given in section 3. 
Abstract-found: 1
Intro-found: 1
Reference: [AG96] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Some of the latest efforts are discussed here. Java The Java Virtual Machine (VM) [Gos95] has been ported to a number of architectures. Programs compiled down into VM bytecodes can be executed anywhere. The only language that currently compiles to this bytecode at present is Java <ref> [AG96] </ref>. Java VMs are typically found inside WWW browsers, where Java bytecode is downloaded as applets for execution there.
Reference: [Bat96] <author> John Bates. </author> <title> A Framework to Support Large-Scale Active Applications. </title> <booktitle> In Proc. ACM SIGOPS European Workshop, </booktitle> <address> Connemarra, Republic of Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: When interfaced with an Active Badge event system, the objects are able to follow a user from room to room. In combination with visible components inside an integrated user interface, experiments with mobility-aware CSCW are possible and we have implemented such a system <ref> [BHB96, Bat96] </ref>. We hope to investigate this further in the near future alongside other novel uses of mobile code in a distributed setting. Acknowledgements We acknowledge the UK EPSRC for supporting this work through a studentship and under grant GR/J42007.
Reference: [BC95] <author> Krishna Bharat and Luca Cardelli. </author> <title> Migratory Applications. </title> <booktitle> In Proc. ACM Sym--posium on User Interfaces Software and Technology, </booktitle> <address> Pittsburgh, USA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: One development of Obliq, Visual Obliq, supports movement of user interfaces too. However, Migratory multi-user applications (IV) are significantly more complicated to im plement, since connectivity needs to be maintained as the migration happens. We have yet to tackle this class of applications. <ref> [BC95] </ref> We have used the Tube to do exactly this (see section 3). Another development of Obliq also has begun to addresses this point. The Distributed Active Objects project aims to provide high-level support to make it "easy to write collaborative and distributed applications" [NB96].
Reference: [BHB96] <author> John Bates, David Halls, and Jean Bacon. </author> <title> A Framework to Support Mobile Users of Multimedia Applications. </title> <booktitle> Submitted to ACM Mobile Networks and Nomadic Applications (NOMAD), </booktitle> <year> 1996. </year>
Reference-contexts: When interfaced with an Active Badge event system, the objects are able to follow a user from room to room. In combination with visible components inside an integrated user interface, experiments with mobility-aware CSCW are possible and we have implemented such a system <ref> [BHB96, Bat96] </ref>. We hope to investigate this further in the near future alongside other novel uses of mobile code in a distributed setting. Acknowledgements We acknowledge the UK EPSRC for supporting this work through a studentship and under grant GR/J42007.
Reference: [BHLM95] <author> J. Bacon, R. Hayton, S. L. Lo, and K. Moody. </author> <title> Using Events to build Distributed Applications. </title> <booktitle> In Proc IEEE SDNE Services in Distributed and Networked Environments, </booktitle> <pages> pages 148-155, </pages> <address> Whistler, British Columbia, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The Tube has also been integrated with our existing distributed programming environment. REPs are able to make RPCs using our IDL-based RPC system, lookup object instances in our trader, register for and receive events from our event system <ref> [BHLM95] </ref> and control the configuration of named streams of multimedia data between active objects. We are thus able to use the Tube as a command language for instantiating and invoking methods on objects. This gives a scripted layer of control which can be used to build higher-level specifications of systems.
Reference: [Car94] <author> Luca Cardelli. Obliq: </author> <title> A Language with Distributed Scope. </title> <note> URL http://gatekeeper.dec.com/pub/DEC/SRC/research-reports/abstracts/srcrr-122.html, June 1994. </note>
Reference-contexts: The disadvantages with Java are that programs cannot themselves create other programs, embedding arbitrary data structures, and send them to other VMs for execution; and that a Java program cannot be stopped mid-flight and shipped elsewhere. (Visual) Obliq, Distributed Active Objects Obliq <ref> [Car94] </ref> is a higher-order distributed lan guage that allows immutable data including functions to be transmitted over a network. Mutable data is transmitted as references to the originating site.
Reference: [CJK95] <author> Henry Cejtin, Suresh Jagannathan, and Richard Kelsey. </author> <title> Higher-Order Distributed Objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(5) </volume> <pages> 704-739, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: They use active objects in Obliq to support transparent distribution. We use the Tube to support user mobility to move objects and reconfigure them when they reach their new destination. Kali Scheme Kali Scheme <ref> [CJK95] </ref> is very similar to the Tube. It allows functions and continuations to be transmitted over a network. It adds distributed garbage collection but does not interface with a user interface toolkit at present nor a conventional distributed programming environment with RPC.
Reference: [Fuc93] <author> Matthew Fuchs. Dreme, </author> <title> for Life in the Net, </title> <month> September </month> <year> 1993. </year> <title> Author's email address: </title> <publisher> fuchs@cs.nyu.edu. </publisher>
Reference-contexts: This is doubtful due to the lack of anonymous and interpretive closure generation in the Java language and the requirement to compile into bytecode from a file. The ability to capture and send continuations is also likely to be missing. Dreme Dreme <ref> [Fuc93] </ref> is a distributed version of Scheme. All language constructs, including closures and continuations, can be moved around a network. Dreme is interfaced with a user interface toolkit and has distributed garbage collection. As such, it provides the same functionality as the Tube.
Reference: [Gos95] <author> James Gosling. </author> <title> Java Intermediate Bytecodes. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 30(3) </volume> <pages> 111-118, </pages> <month> 22 January </month> <year> 1995. </year> <booktitle> Proceedings, ACM SIGPLAN Workshop on Intermediate Representations (IR '95). </booktitle>
Reference-contexts: Some of the latest efforts are discussed here. Java The Java Virtual Machine (VM) <ref> [Gos95] </ref> has been ported to a number of architectures. Programs compiled down into VM bytecodes can be executed anywhere. The only language that currently compiles to this bytecode at present is Java [AG96].
Reference: [JvRS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Supporting Agents in a Heterogeneous, Faulty and Insecure Network. In Abstract, </title> <booktitle> Work in Progress Session, 15th ACM SOSP, </booktitle> <address> Copper Mountain, Colarado, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Telescript has been designed from the start to support the mobile agent programming paradigm. It does have user interface support but appears not to support first-class, trans missible (anonymous) functions and continuations that can be constructed dynamically. TACOMA The TACOMA project <ref> [JvRS95] </ref> is concentrating on operating system support for mobile agents. It supports agents written in a number of programming languages. This is a quite a large project and we have not looked at the code in detail.
Reference: [Kna95] <author> Frederick Colville Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Agents also provide a means for the set of software available to a user to change dynamically according to the user's needs and interests. <ref> [Kna95] </ref> It uses a modified form of Facile [TLP + 93], which provides a model of concurrent processes based on CCS and allows both functions and continuations to be moved around. User interface facilities are provided and some useful applications have been developed.
Reference: [NB96] <author> Mark A. Najork and Marc H. Brown. </author> <title> Distributed Active Objects. </title> <booktitle> In Proceedings of the Fifth World-Wide Web Conference, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Another development of Obliq also has begun to addresses this point. The Distributed Active Objects project aims to provide high-level support to make it "easy to write collaborative and distributed applications" <ref> [NB96] </ref>. They use active objects in Obliq to support transparent distribution. We use the Tube to support user mobility to move objects and reconfigure them when they reach their new destination. Kali Scheme Kali Scheme [CJK95] is very similar to the Tube.
Reference: [Sof96] <institution> FTP Software. CyberAgent Home Page. </institution> <note> URL http://www.ftp.com/cyberagents/, 1996. </note>
Reference-contexts: However, it does appear to concentrate on facilities that are useful in supporting mobile agents that move around and as such should be applicable in enhancing any mobile code system, including the Tube. CyberAgent CyberAgent <ref> [Sof96] </ref> is a commercial mobile agent system built on top of Java. Instead of downloading Java applets, CyberAgent allows Java programs to be sent out into the network. It is not clear from the publicly available documentation whether their Java programs can create arbitrary functions on-the-fly for transmission.
Reference: [TLP + 93] <author> Bent Thomsen, Lone Leth, Sanjiva Prasad, Tsung-Min Kuo, Andre Kramer, Fritz Knabe, and Alessandro Giacalone. </author> <title> Facile Antigua Release Programming Guide. </title> <type> Technical Report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, </institution> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: Agents also provide a means for the set of software available to a user to change dynamically according to the user's needs and interests. [Kna95] It uses a modified form of Facile <ref> [TLP + 93] </ref>, which provides a model of concurrent processes based on CCS and allows both functions and continuations to be moved around. User interface facilities are provided and some useful applications have been developed. This project shows what a high-level approach to distributed programming incorporating mobile code can achieve.
Reference: [TW96] <author> David L. Tennenhouse and David J. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <note> To appear in ACM Computer Communication Review, </note> <year> 1996. </year>
Reference-contexts: Active Networks The Active Networks project aims to allow network users "to inject customized programs into the nodes of the network. An extreme case, in which we are most interested, replaces packets with `capsules' program fragments that are executed at each network router/switch they traverse" <ref> [TW96] </ref>. The use of sending small program fragments around is: Active architectures permit a massive increase in the sophistication of the computation that is performed within the network. They will enable new applications, especially those based on application-specific multicast, information fusion, and other services that leverage network-based computation and storage. <p> Furthermore, they will accelerate the pace of innovation by decoupling network services from the underlying hardware and allowing new services to be loaded into the infrastructure on demand. <ref> [TW96] </ref> This project is currently concentrating on the design of such a system.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace. </title> <type> Technical report, </type> <institution> General Magic, Inc., </institution> <year> 1994. </year> <title> (General Magic White Paper). </title>
Reference-contexts: It allows functions and continuations to be transmitted over a network. It adds distributed garbage collection but does not interface with a user interface toolkit at present nor a conventional distributed programming environment with RPC. We hope to gain direct development experience with Kali Scheme very soon. Telescript Telescript <ref> [Whi94] </ref> is a commercial mobile agent system. It is has been in existence longer than most and allows a program to move or duplicate itself to another computer. Telescript has been designed from the start to support the mobile agent programming paradigm.
References-found: 16

