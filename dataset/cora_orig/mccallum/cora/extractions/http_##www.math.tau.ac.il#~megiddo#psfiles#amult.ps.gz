URL: http://www.math.tau.ac.il/~megiddo/psfiles/amult.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Minimum Reservation Rate Problem in Digital Audio/Video Systems (Extended Abstract)  
Author: David P. Anderson Nimrod Megiddo Moni Naor 
Keyword: O(n log n log log n) deterministic one.  
Date: April 1993  
Abstract: The "Minimum Reservation Rate Problem" arises in distributed systems for handling digital audio and video data. The problem is to find the minimum rate at which data must be reserved on a shared storage system in order to provide continuous buffered playback of a variable-rate output schedule. The problem is equivalent to the minimum output rate: given input rates during various time periods, find the minimum output rate under which the buffer never overflows. We present for these problems an O(n log n) randomized algorithm and an 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, </author> <title> "Meta-scheduling for continuous media," </title> <journal> ACM Transactions on Computing Systems, </journal> <note> to appear. </note>
Reference: [2] <author> R. L. Cruz, </author> <title> "A calculus for network delay," </title> <journal> IEEE Transactions on Information Theory 37 (1991). </journal>
Reference: [3] <author> M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan, </author> <title> "Time bounds for selection," </title> <journal> J. </journal> <note> Computer and System Sciences 7 (1972) 451-455. </note>
Reference-contexts: For every k and ` as above, we allocate 2 k processors to the problem of computing M k` and m k` using the constant time maximum finding algorithm <ref> [3] </ref>. The total number of processors is k=1 After running the maximum finding algorithm in parallel on all these problems, some of the M k` 's and m k` 's may still not be known. <p> This task can be accomplished in O (n log n) time as follows. We first find the median 0 of the set of these breakpoints using the linear-time median-finding algorithm <ref> [3] </ref>. Next, we check (using the algorithm of Proposition 4.2) whether 0 &lt; fl (i.e., whether F ( 0 ) &gt; B). Now we know for half the breakpoints their positions relative to fl .
Reference: [4] <author> N. Megiddo, </author> <title> "Combinatorial optimization with rational objective functions," </title> <note> Mathematics of Operations Research 4 (1979) 414-424. </note>
Reference-contexts: Thus, there exists a unique fl such that F ( fl ) = B. It is easy to see that fl = R fl (see Megiddo <ref> [4] </ref>). In order to compute fl , we will follow the parametric search method with the use of parallel algorithms as proposed in Megiddo [6].
Reference: [5] <author> N. Megiddo, </author> <title> "Parallel algorithms for finding the maximum and the median almost surely in constant-time," </title> <type> Technical Report, </type> <institution> Graduate School of Industrial Administration, Carnegie-Mellon University, </institution> <month> October </month> <year> 1982. </year> <month> 8 </month>
Reference-contexts: . ; log 2 (n+1)1; ` = 1; . . . ; (n+1)2 k 1g : It is now well known that the maximum of m elements can be found by m processors in expected constant time, namely, by taking random samples of p m elements (Reischuck [8] and Megiddo <ref> [5] </ref>). Furthermore, there is a constant time parallel algorithm such that the probability of failure, i.e., that the maximum is not found, is at most 1 m .
Reference: [6] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algo-rithms," </title> <journal> J. </journal> <note> ACM 30 (1983) 852-865. </note>
Reference-contexts: In Sections 4 and 5 we develop an O (n log n) randomized algorithm and an O (n log n log log n) deterministic one. These algorithms are based on the parametric search method of Megiddo <ref> [6] </ref>. Using this method, we apply a parallel algorithm for one problem (in this case, the "evaluation" problem) to obtain a fast sequential algorithm for another "parametric" problem. In Section 4 we describe an expected constant-time randomized parallel algorithm for the feasibility problem. <p> In the rest of the paper we describe an efficient algorithm for the minimum rate problem. In particular, we present a randomized O (n log n) algorithm. The algorithm 3 is developed using the framework of Megiddo <ref> [6] </ref> of applying parallel algorithms in the design of efficient sequential ones. We find it convenient to present a version of the problem where the "complement" of the buffer should never overflow. This is the way the problem is phrased below. 3. <p> It is easy to see that fl = R fl (see Megiddo [4]). In order to compute fl , we will follow the parametric search method with the use of parallel algorithms as proposed in Megiddo <ref> [6] </ref>. To that end, we will develop two algorithms for computing the value of F () at any given : (i) A sequential linear-time algorithm. (ii) A parallel constant-time randomized algorithm employing n log n processors (under the comparisons model of Valiant [9]). <p> Finding the minimum rate The algorithm for finding fl proceeds by simulating the parallel algorithm for evaluating F () at = fl (without knowing fl in advance). For more detail about the method see <ref> [6] </ref>. Proposition 5.1. The minimum rate problem can be solved by a randomized algorithm in expected O (n log n) time and bby a deterministic algorithm in O (n log log log n) time.
Reference: [7] <author> J. A. Moorer, </author> <title> "Hard-disk recording and editing of digital audio," </title> <booktitle> in: Proceedings of the 89th Convention of the Audio Engineering Society, </booktitle> <address> Los Angeles, </address> <year> 1990. </year>
Reference-contexts: In Section 6 we describe an extension to the minimum rate problem where the input is cyclic. 2. Background A "digital audio editing system" allows users to record sound (music, dialog, special effects, etc.) on magnetic disks (see <ref> [7] </ref>). The audio encoding has a constant data rate, typically 88,200 bytes per second for each audio channel. Users can then assemble segments of these sound files into an "Edit Decision List" (EDL). An EDL has one or more "output channels," each consisting of sound segments arranged according to time.
Reference: [8] <author> R. Reischuk, </author> <title> "A fast probabilistic parallel sorting algorithm," </title> <booktitle> in: Proceedings of the 22nd Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Los Angeles, </address> <year> 1981, </year> <pages> pp. 212-219. </pages>
Reference-contexts: 1; . . . ; log 2 (n+1)1; ` = 1; . . . ; (n+1)2 k 1g : It is now well known that the maximum of m elements can be found by m processors in expected constant time, namely, by taking random samples of p m elements (Reischuck <ref> [8] </ref> and Megiddo [5]). Furthermore, there is a constant time parallel algorithm such that the probability of failure, i.e., that the maximum is not found, is at most 1 m .
Reference: [9] <author> L. G. Valiant, </author> <title> "Parallelism in comparison problems," </title> <journal> SIAM J. Comput. </journal> <month> 4 </month> <year> (1975) </year> <month> 348-355. </month>
Reference-contexts: To that end, we will develop two algorithms for computing the value of F () at any given : (i) A sequential linear-time algorithm. (ii) A parallel constant-time randomized algorithm employing n log n processors (under the comparisons model of Valiant <ref> [9] </ref>). The problem of evaluating F () can rephrased as follows. Given , let us first denote W i = k=1 and W 0 = 0. Problem 4.1. <p> It follows that fl = k=i+1 a k B k=i+1 T k Deterministically, we run in O (log log n) phases corresponding to the steps in the deterministic maximum finding algorithm of Valiant <ref> [9] </ref>, and the rest is essentially the same. We note that by Valiant's lower bound, there is no constant time deterministic algo rithm for evaluating F () which employees substantially fewer than n 2 processors. 7 6. Extensions We now describe two extensions of the problem discussed above.
References-found: 9

