URL: http://www.cse.ogi.edu/DISC/projects/immunix/isw98.ps.gz
Refering-URL: http://www.cse.ogi.edu/DISC/projects/immunix/publications.html
Root-URL: http://www.cse.ogi.edu
Email: (crispin@cse.ogi.edu)  
Title: 1 Survivability From a Sows Ear: The Retrofit Security Requirement  
Author: Crispin Cowan and Calton Pu 
Web: http://www.cse.ogi.edu/DISC/projects/immunix  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract: This paper considers the survivability requirement for production operating systems that underlie typical information systems. Since economic incentives give competitive advantages to imperfect and therefore insecure software, it seems inevitable to consider retrofitting some form of security to existing systems. This approach has long been anathema in the security community. We outline the pragmatic alternative of retrofitting security to achieve information survivability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AUSCERT. </author> <title> overflow_wrapper.c Wrap Programs to Prevent Command Line Argument Buffer Overrun Vulnerabilities. </title> <month> ftp://ftp.auscert.org.au/pub/ auscert/tools/overflow_wrapper , May </month> <year> 1997. </year>
Reference-contexts: An attacker may exploit a vulnerability resulting from a bug in the implementation, but because of additional security checks, the attacker does not gain very much additional privileges, and likely trips an intrusion alert, preventing additional exploitation of vulnerabilities. Wrappers <ref> [1, 12, 13] </ref> are a prominent form of security bug tolerance that adapts existing programs by making their vulnerabilities more difficult to exploit, enhancing their survivability. A wrapper is a program wrapped around a program suspected of having bugs.
Reference: [2] <author> Klaus Brunnstein. </author> <title> Mr. </title> <type> Bill Gates: </type> <institution> MS Software Essentially Bug-free. comp.risks 17.43, </institution> <month> October </month> <year> 1995. </year> <note> http://catless.ncl.ac.uk/Risks/17.43.html#subj5 </note> . 
Reference: [3] <author> Fred Cohen. </author> <title> The Deception Toolkit. </title> <address> comp.risks 19.62, </address> <month> March </month> <year> 1998. </year> <note> http:// all.net/dtk.html </note> . 
Reference: [4] <author> Crispin Cowan, Steve Beattie, Ryan Day, Calton Pu, and Perry Wagle. </author> <title> Protecting Systems from Stack Smashing Attacks with StackGuard. </title> <note> Submitted for review, </note> <month> June </month> <year> 1998. </year>
Reference-contexts: What is either the programs interface or its implementation, and how is either a permutation or a restriction of the adapted piece of software. The classification scheme is further developed elsewhere [5]. Our research has focused on interface and implementation restrictions. For instance, the Stack-Guard compiler <ref> [6, 4] </ref> is a tool for automatically installing implementation restrictions within the executable code of a program.
Reference: [5] <author> Crispin Cowan, Calton Pu, and Heather Hinton. </author> <title> Death, Taxes, and Imperfect Software: Surviving the Inevitable. In Proceedings of the New Security Paradigms Workshop , September 1998. </title> <note> To appear. </note>
Reference-contexts: We exclude surviving attacks to which the system is not vulnerable, because that is precisely the security problem. Rather, we consider techniques to allow a system to survive an attack that exploits a vulnerability in the current system implementation. We call this security bug tolerance <ref> [5] </ref>. Security bug tolerance does not seek to identify and eliminate vulnerabilities. Rather, it seeks to minimize the degree of vulnerability implied by a security bug. Akin to classical fault tolerance, security bug tolerance minimizes exposure by replicating security checks within the system. <p> What is either the programs interface or its implementation, and how is either a permutation or a restriction of the adapted piece of software. The classification scheme is further developed elsewhere <ref> [5] </ref>. Our research has focused on interface and implementation restrictions. For instance, the Stack-Guard compiler [6, 4] is a tool for automatically installing implementation restrictions within the executable code of a program.
Reference: [6] <author> Crispin Cowan, Calton Pu, Dave Maier, Heather Hinton, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. StackGuard: </author> <title> Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. </title> <booktitle> In 7th USENIX Security Conference , San Antonio, </booktitle> <address> TX, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: What is either the programs interface or its implementation, and how is either a permutation or a restriction of the adapted piece of software. The classification scheme is further developed elsewhere [5]. Our research has focused on interface and implementation restrictions. For instance, the Stack-Guard compiler <ref> [6, 4] </ref> is a tool for automatically installing implementation restrictions within the executable code of a program.
Reference: [7] <author> Stephanie Forrest, Anil Somayaji, and David. H. Ackley. </author> <note> Building Diverse Computer Systems . In HotOS-VI , May 1997. </note>
Reference: [8] <author> Reed Hastings and Bob Joyce. Purify: </author> <title> Fast Detection of Memory Leaks and Access Errors. In Proceedings of the Winter USENIX Conference , 1992. http:// Table 1: Interface Implementation Restrictions Wrappers [1, 12, 13] Firewalls Array bounds checking [8, 9] Stackguard [6] Permutation Deception Tool Kit [3] Random code or data layout [7] 5 www.rational.com/support/techpapers/fast_detection/ </title> . 
Reference: [9] <author> Richard Jones and Paul Kelly. </author> <title> Bounds Checking for C. </title> <note> http://www-ala.doc.ic.ac.uk/ phjk/BoundsChecking.html , July 1995. </note>
Reference: [10] <author> Nathan Myers. </author> <title> FOCUS Magazine Interview with Bill Gates: Microsoft Code Has No Bugs. </title> <address> http://www.cantrip.org/nobugs.html </address> . 
Reference: [11] <author> Unknown. </author> <title> Interview with Bill Gates. FOCUS , (43):206212, </title> <month> October 23 </month> <year> 1995. </year>
Reference-contexts: This is a rational decision, borne not out of recklessness, but rather from a clear understanding of most customers desires. Software customers appear to be insensitive to a tolerable degree of imperfection in their software, preferring new features over correctness. Consider the calls to Microsofts support line <ref> [2,10, 11 ] </ref>: most calls request help on how to do some particular task, 5% of calls request some new feature, and less than 1% of calls are to report bugs. Advertisements, where software vendors promote their products, compare features, and occasionally speed, but rarely correctness.
Reference: [12] <author> Wietse Venema. </author> <title> TCP WRAPPER: Network Monitoring, Access Control, and Booby Traps. </title> <booktitle> In Proceedings of the Third Usenix UNIX Security Symposium , pages 8592, </booktitle> <address> Baltimore, MD, </address> <month> September </month> <year> 1992. </year> <note> ftp://ftp.win.tue.nl/pub/security/ tcp_wrapper.ps.Z </note> . 
Reference-contexts: An attacker may exploit a vulnerability resulting from a bug in the implementation, but because of additional security checks, the attacker does not gain very much additional privileges, and likely trips an intrusion alert, preventing additional exploitation of vulnerabilities. Wrappers <ref> [1, 12, 13] </ref> are a prominent form of security bug tolerance that adapts existing programs by making their vulnerabilities more difficult to exploit, enhancing their survivability. A wrapper is a program wrapped around a program suspected of having bugs.
Reference: [13] <author> Joe Zbiciak. </author> <title> wrapper.c Generic Wrapper to Prevent Exploitation of suid/sgid Programs. Bugtraq mailing list, </title> <note> http://geek-girl.com/bugtraq/ , May 19 1997. http://cegt201.bradley.edu/ im14u2c/wrapper/ </note> . 
Reference-contexts: An attacker may exploit a vulnerability resulting from a bug in the implementation, but because of additional security checks, the attacker does not gain very much additional privileges, and likely trips an intrusion alert, preventing additional exploitation of vulnerabilities. Wrappers <ref> [1, 12, 13] </ref> are a prominent form of security bug tolerance that adapts existing programs by making their vulnerabilities more difficult to exploit, enhancing their survivability. A wrapper is a program wrapped around a program suspected of having bugs.
References-found: 13

