URL: ftp://ftp-ai.informatik.uni-dortmund.de/pub/Reports/report16.ps.Z
Refering-URL: http://www.cs.indiana.edu/cstr/search/?Knowledge+discovery+MINK%3D2
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: bell@ls8.informatik.uni-dortmund.de  
Title: K unstliche Intelligenz The Expanded Implication Problem of Data Dependencies 1  
Author: Siegfried Bell 
Date: Dortmund, 12. June 1995  
Address: 44221 Dortmund Germany  
Note: VIII  
Affiliation: UNIVERSIT AT DORTMUND Fachbereich Informatik Lehrstuhl  Informatik VIII University Dortmund  Universitat Dortmund Fachbereich Informatik University of Dortmund  
Pubnum: LS-8 Report 16  
Abstract: Computer Science Department 1 Parts of this report had also been presented on the First International Conference on Knowledge Discovery in Databases (KDD 95), Montreal, Eds. U.M. Fayyad 
Abstract-found: 1
Intro-found: 1
Reference: [Beeri et al., 1984] <author> Beeri, C., Dowd, M., Fagin, R., and Statman, R. </author> <year> (1984). </year> <title> On the structure of armstrong relations for functional dependencies. </title> <journal> Journal of the ACM, </journal> <volume> 31(1) </volume> <pages> 30-46. REFERENCES 25 </pages>
Reference-contexts: Therefore, this algorithm is in EXPTIME. 3.4 Complexity of the System Our system is in EXPTIME because there exist relations with the number of FDs in a minimal cover growing exponentially w.r.t. the number of attributes. This has been shown by Beeri et al. <ref> [Beeri et al., 1984] </ref> and also by Mannila and Raiha [Mannila and Raiha, 1991]. As there are relations with the number of FIs growing exponentially the performance cannot be improved by using FIs instead of FDs.
Reference: [Bell and Brockhausen, 1995] <author> Bell, S. and Brockhausen, P. </author> <year> (1995). </year> <title> Discovery of constraints and data dependencies in databases (extended abstract). </title> <editor> In Lavrac, N. and Wrobel, S., editors, </editor> <booktitle> Machine Learning: ECML-95 (Proc. European Conf. on Machine Learning, 1995), Lecture Notes in Artificial Intelligence 914, </booktitle> <pages> pages 267 - 270, </pages> <address> Berlin, Heidelberg, New York. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: In our implementation we use the nvl statement in SQL to handle the NULL values. We refer the reader to our previous work in <ref> [Bell and Brockhausen, 1995] </ref> for details on the verification of dependencies. 3.2 Entailment Entailment of FDs is often discussed by studying if ` A X ! Y holds where is a set of FDs and n = jj.
Reference: [Bell and Weber, 1993] <author> Bell, S. and Weber, S. </author> <year> (1993). </year> <title> A three-valued logic for inductive logic programming. </title> <type> Technical Report 4, </type> <institution> Dortmund University, Computer Science VIII, </institution> <address> 44221 Dortmund Germany. </address>
Reference: [Chakravarthy et al., 1990] <author> Chakravarthy, U. S., Grant, J., and Minker, J. </author> <year> (1990). </year> <title> Logic-based approach to semantic query optimization. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 15(2). </volume>
Reference-contexts: F I3 : if Y " Z = fg then Z!Y 1 ;X6!Y "Y 1 X6!! Y 10 Related Work Query optimization can be regarded as the process of transforming a query Q into another query Q 0 that can be evaluated more efficiently, as mentioned by Chakravarthy et al. <ref> [Chakravarthy et al., 1990] </ref>. Semantic query optimization (SQO) is mainly based on the use of semantic knowledge during the optimization process. Thus, the user is motivated to concentrate on the application rather than forming queries with explicit semantic knowledge of the application. <p> So far, the main problem is to provide the optimizers with semantic knowledge about the database during SQO. Obviously, the only kind of semantic knowledge which is always available in relational databases management systems (DBMS) are integrity constraints like primary or foreign keys. Thus, Chakravarthy et al. <ref> [Chakravarthy et al., 1990] </ref> have defined SQO in respect of integrity constraints as to transform a query into one which is semantically equivalent to the original query, but which can be executed more efficiently.
Reference: [Dehaspe et al., 1994] <author> Dehaspe, L., Laer, W. V., and Raedt, L. D. </author> <year> (1994). </year> <title> Applications of a logical discovery engine. </title> <editor> In Wrobel, S., editor, </editor> <booktitle> Proc. of the Fourth International Workshop on Inductive Logic Programming, </booktitle> <pages> pages 291-304, </pages> <address> St. Augustin, Germany. </address> <institution> GMD. </institution>
Reference-contexts: This makes their approaches to ours absolutely incomparable. Comparable to our approach in order to discover functional dependencies, there are similar's by Mannila and Raiha [Mannila and Raiha, 1991], Schlimmer [Schlimmer, 1993], Savnik and Flach [Savnik and Flach, 1993], and Dehaspe et al. <ref> [Dehaspe et al., 1994] </ref>. Mannila and Raiha have investigated the problem of inferring FDs from example relations in order to determine database schemes. But they do not use a complete inference relation regarding independencies. Savnik and Flach have investigated a special data structure for the FDs.
Reference: [Gardenfors, 1988] <author> Gardenfors, P. </author> <year> (1988). </year> <title> Knowledge in Flux | Modeling the Dynamics of Epistemic States. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: Therefore, the discovered FDs have to be maintained if new tuples are added, old tuples are deleted, or existing tuples are updated. If maintenance of FDs is seen as revision, it is more suitable to do theory revision than base revision as introduced by Gardenfors <ref> [Gardenfors, 1988] </ref>.
Reference: [Gottlob and Libkin, 1990] <author> Gottlob, G. and Libkin, L. </author> <year> (1990). </year> <title> Investigations on arm-strong relations, dependency inference, and excluded functional dependencies. </title> <journal> Acta Cybernetica, </journal> <volume> 9(4). </volume>
Reference-contexts: But FIs can also be used directly for semantic query optimization in order to refute or to simplify queries. For example, the already mentioned approach of Zhang and Oz-soyoglu [Zhang and Ozsoyoglu, 1994] use implication and referential constraints which are generalizations of functional and inclusion dependencies. Gottlob and Libkin <ref> [Gottlob and Libkin, 1990] </ref> have shown that the MAX-set, introduced by Mannila and Raiha [Mannila and Raiha, 1986], can be written and interpreted as functional independencies.
Reference: [Hsu and Knoblock, 1993] <author> Hsu, C.-N. and Knoblock, C. A. </author> <year> (1993). </year> <title> Learning database abstractions for query reformulation. In Knowledge Discovery in Database, </title> <booktitle> Workshop, AAAI-93. </booktitle>
Reference-contexts: Siegel has reported this by the first time [Siegel, 1988] and [Siegel et al., 1991]. Such constraints have been termed, for example, Database Abstractions in <ref> [Hsu and Knoblock, 1993] </ref>, Metadata in [Siegel and Madnick, 1991], and Meta Knowledge in [Schlimmer, 1991]. Also, Hsu and Knoblock [Hsu and Knoblock, 1993] have shown the benefits of optimization techniques based on automatically discovered constraints. <p> Siegel has reported this by the first time [Siegel, 1988] and [Siegel et al., 1991]. Such constraints have been termed, for example, Database Abstractions in <ref> [Hsu and Knoblock, 1993] </ref>, Metadata in [Siegel and Madnick, 1991], and Meta Knowledge in [Schlimmer, 1991]. Also, Hsu and Knoblock [Hsu and Knoblock, 1993] have shown the benefits of optimization techniques based on automatically discovered constraints. But we have to keep in mind that these constraints are only valid in the present state of the database and therefore describe the content of the database precisely.
Reference: [Janas, 1988] <author> Janas, J. M. </author> <year> (1988). </year> <title> Covers for functional independencies. </title> <booktitle> In Conference of Database Theory. Springer, Lecture Notes in Computer Science 338. </booktitle>
Reference-contexts: The closure of attributes X regarding a set of FDs is defined as: closure (X; ) = fY jX ! Y 2 CON S ()g and is denoted by X. 3 Functional independencies have been introduced by Janas <ref> [Janas, 1988] </ref> to mirror functional dependencies. But they are meant for a totally different purpose: FIs are not se-mantical constraints on the data, but a support for the database designer in the task of identifying functional dependencies. In addition, they also help to improve the inference of functional dependencies. <p> If X 6! Y 2 Cn ( [ 0 ) then there exists a R 6! S 2 0 such that X 6! Y 2 Cn ( [ fR 6! Sg). An axiomatization of FIs has already been given by Janas <ref> [Janas, 1988] </ref>, which establishes an inference relation ` Janas . Definition 3 (FIs) The Axiomatization by Janas is given by: 1. X6!Y 2. XZ6!Y Z 3.
Reference: [Jarke et al., 1984] <author> Jarke, M., Clifford, J., and Vassiliou, Y. </author> <year> (1984). </year> <title> An optimizing prolog front-end to a relational query system. </title> <booktitle> ACM SIGMOD. </booktitle>
Reference-contexts: Semantic 23 equivalence means that the transformed query has the same answer as the original query on all database states satisfying the integrity constraints. Jarke et al. <ref> [Jarke et al., 1984] </ref> have shown several ways to use functional dependencies for SQO. But the constraints provided by a DBMS are few and often too general in the sense that they are valid in all possible database states.
Reference: [Kanellakis, 1990] <author> Kanellakis, P. </author> <year> (1990). </year> <title> Formal Models and Semantics, </title> <booktitle> Handbook of Theoretical Computer Science, chapter Elements of Relational Database Theory, </booktitle> <volume> 12, </volume> <pages> pages 1074 - 1156. </pages> <publisher> Elsevier. </publisher>
Reference-contexts: Finally, we related our approach to others and discuss the work. 2 Functional Independencies In this section we discuss functional independencies and their axiomatization. We assume familiarity with the definitions of relational database theory (for an overview see for example <ref> [Kanellakis, 1990] </ref>) and the basic properties of the classical consequence relation Cn. The capital letters A; B; C; : : : denote attributes, and X; Y; Z denote attribute sets. We do not distinguish between an attribute A and an attribute set fAg. <p> This can be decided in linear time with appropriate data structures <ref> [Kanellakis, 1990] </ref>. <p> R [A] S [B] is an UIND: if a 2 S [B], then a 2 R [A]. The interaction of UINDs can be formally described by an axiomatization. According to <ref> [Kanellakis, 1990] </ref> a sound and complete axiomatization for unary inclusion dependen cies (UIND) is given by the following definition: Definition 10 (Inference of Unary Inclusion Dependencies) Let A be an attribute of the relation scheme R, and B of S, and C of T . <p> There is no interaction between standard FDs and UINDs in the unrestricted case. There are interactions in the finite case, but in general there are infinitely many axioms. They can be described by a set of inference rules, <ref> [Kanellakis, 1990] </ref>. CD : A 1 ! A 0 ; A 2 A 1 ; : : : ; A k ! A k1 ; A 0 A k for each odd positive integer k. <p> The test of FDs and UINDs alone takes O (n) (cf. <ref> [Kanellakis, 1990] </ref>) regarding n as the number of attributes. In the finite case, the test regarding combination of FDs and UINDs takes O (n 3 ) and O (n) if we only regard unary FDs. We assume that the cardinalities of the attributes are all known. <p> In <ref> [Kanellakis, 1990] </ref> a formal system is given by: Definition 20 (Interaction of FDs and MVDs) Inference rules for the interaction between FDs and MVDs are given by: M F Dt : X!Y M F Di : if Y " Z = fg then X!! Y;Z!Y 1 X!Y "Y 1 The following
Reference: [Kanellakis et al., 1983] <author> Kanellakis, P., Cosmadakis, S., and Vardi, M. </author> <year> (1983). </year> <title> Unary inclusion dependencies have polynomial time inference problems. </title> <booktitle> Proc. 15th Annual ACM Symposium on Theory of Computation. </booktitle>
Reference-contexts: Cardinality Dependencies (CDs) was introduced by Kanellakis et al. <ref> [Kanellakis et al., 1983] </ref> for an axiomatization of unary inclusion dependencies and FDs in the finite case of databases. CDs simply compare the numbers of different values of an attribute in a certain relation. <p> It is shown by Kleene that each axiomatization can be transformed into an finite axiomatization by the introduction of new predicates, i.e. in order to avoid infinite many inference rules. Here the language is expanded with a new kind of dependencies, the cardinality dependencies like in <ref> [Kanellakis et al., 1983] </ref>. Definition 13 (Cardinality Dependencies) The cardinality dependency jAj jBj is true iff the cardinality of the attribute A is greater or equal the cardinality of the attribute B. Strictly greater is abbreviated with jAj &gt; jBj. In [Kanellakis et al., 1983] a sound and complete axiomatization of <p> new kind of dependencies, the cardinality dependencies like in <ref> [Kanellakis et al., 1983] </ref>. Definition 13 (Cardinality Dependencies) The cardinality dependency jAj jBj is true iff the cardinality of the attribute A is greater or equal the cardinality of the attribute B. Strictly greater is abbreviated with jAj &gt; jBj. In [Kanellakis et al., 1983] a sound and complete axiomatization of functional and inclusion dependencies regarding cardinality dependencies is given by the following axiom and rules: Definition 14 (Finite Axiomatization of FDs and UINDs) An axiomatization is given by: * The rules FD1, FD2, FD3 and U1 , U2. * N1: reflexivity
Reference: [King, 1981] <author> King, J. J. </author> <year> (1981). </year> <title> Query optimization by semantic reasoning. </title> <type> Technical Report STAN-CS-81-857, </type> <institution> Stanford University. </institution>
Reference-contexts: Thus, Chakravarthy et al. [Chakravarthy et al., 1990] have defined SQO in respect of integrity constraints as to transform a query into one which is semantically equivalent to the original query, but which can be executed more efficiently. King <ref> [King, 1981] </ref> argued that the costs of evaluating the transformed query plus the transformation costs should be lower than the costs of evaluating the original query. Semantic 23 equivalence means that the transformed query has the same answer as the original query on all database states satisfying the integrity constraints. <p> But the constraints provided by a DBMS are few and often too general in the sense that they are valid in all possible database states. Another way is to provide SQO with semantic knowledge by hand which also seems no adequate technique. For example, King <ref> [King, 1981] </ref> uses constraints on attribute values to optimize queries by his system QUIST. Zhang and Ozsoyoglu [Zhang and Ozsoyoglu, 1994] have presented also techniques for semantic query optimization which are based on implication constraints and referential constraints.
Reference: [Maier, 1980] <author> Maier, D. </author> <year> (1980). </year> <title> Minimum covers in the relational database model. </title> <journal> Journal of the ACM, </journal> <volume> 27(4):664 - 674. </volume> <pages> 26 REFERENCES </pages>
Reference-contexts: As these equivalence classes will typically contain a large number of elements, it is reasonable to define a suitable representation with a minimal number of elements. This representation is usually called a minimal cover, see <ref> [Maier, 1980] </ref>. We can simply extend the definitions in [Maier, 1980] by using our inference relation ` fi : Definition 6 (Minimal Cover) Let be a minimal set of FDs. 0 is a set of FIs and is called minimal if for all V 6! W 2 Cn ( [ 0 <p> As these equivalence classes will typically contain a large number of elements, it is reasonable to define a suitable representation with a minimal number of elements. This representation is usually called a minimal cover, see <ref> [Maier, 1980] </ref>. We can simply extend the definitions in [Maier, 1980] by using our inference relation ` fi : Definition 6 (Minimal Cover) Let be a minimal set of FDs. 0 is a set of FIs and is called minimal if for all V 6! W 2 Cn ( [ 0 ) there exists no X 6! Y 2 0
Reference: [Mannila and Raiha, 1986] <author> Mannila, H. and Raiha, K.-J. </author> <year> (1986). </year> <title> Design by example: An application of armstrong relations. </title> <journal> Journal of Computer and System Science, </journal> <volume> 33. </volume>
Reference-contexts: For example, the already mentioned approach of Zhang and Oz-soyoglu [Zhang and Ozsoyoglu, 1994] use implication and referential constraints which are generalizations of functional and inclusion dependencies. Gottlob and Libkin [Gottlob and Libkin, 1990] have shown that the MAX-set, introduced by Mannila and Raiha <ref> [Mannila and Raiha, 1986] </ref>, can be written and interpreted as functional independencies. But in both works a closed world is assumed, which makes the concept of FIs superfluous, because FIs are here an alternative way of representing FDs.
Reference: [Mannila and Raiha, 1991] <author> Mannila, H. and Raiha, K.-J. </author> <year> (1991). </year> <title> The design of relational databases. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Terminating is ensured, because if no already entailed hypotheses can be generated, then the algorithm stops. 3.1 Verification Functional dependencies can be verified by sorting the tuples of the relation which takes O (n log n) time w.r.t. the number of tuples, cf. <ref> [Mannila and Raiha, 1991] </ref>. In our implementation we use the nvl statement in SQL to handle the NULL values. <p> This has been shown by Beeri et al. [Beeri et al., 1984] and also by Mannila and Raiha <ref> [Mannila and Raiha, 1991] </ref>. As there are relations with the number of FIs growing exponentially the performance cannot be improved by using FIs instead of FDs. <p> This makes their approaches to ours absolutely incomparable. Comparable to our approach in order to discover functional dependencies, there are similar's by Mannila and Raiha <ref> [Mannila and Raiha, 1991] </ref>, Schlimmer [Schlimmer, 1993], Savnik and Flach [Savnik and Flach, 1993], and Dehaspe et al. [Dehaspe et al., 1994]. Mannila and Raiha have investigated the problem of inferring FDs from example relations in order to determine database schemes.
Reference: [Paredaens et al., 1989] <author> Paredaens, J., de Bra, P., Gyssens, M., and van Gucht, D. </author> <year> (1989). </year> <title> The Structure of the Relational Database Model. </title> <publisher> Springer Verlag Berlin Heidelberg. </publisher>
Reference-contexts: This is the equivalent operator to the logical operator of classical logic. According to <ref> [Paredaens et al., 1989] </ref> a sound and complete axiomatization of FDs is given by one axiom schema and two inference rules: Definition 1 [Axiomatization of FDs] X; Y and Z are sets of attributes. <p> But they are meant for a totally different purpose: FIs are not se-mantical constraints on the data, but a support for the database designer in the task of identifying functional dependencies. In addition, they also help to improve the inference of functional dependencies. In <ref> [Paredaens et al., 1989] </ref> afunctional dependencies 1 are introduced, but they are a sort of semantic constraints and much stronger than our functional independencies. Definition 2 (Functional Independency (FI)) X 6! Y denotes a functional independency.
Reference: [Savnik and Flach, 1993] <author> Savnik, I. and Flach, P. </author> <year> (1993). </year> <title> Bottum-up indution of functional dependencies from relations. </title> <editor> In Piatetsky-Shapiro, G., editor, KDD-93: </editor> <booktitle> Workshop on Knowledge Discovery in Databases. </booktitle> <publisher> AAAI. </publisher>
Reference-contexts: This makes their approaches to ours absolutely incomparable. Comparable to our approach in order to discover functional dependencies, there are similar's by Mannila and Raiha [Mannila and Raiha, 1991], Schlimmer [Schlimmer, 1993], Savnik and Flach <ref> [Savnik and Flach, 1993] </ref>, and Dehaspe et al. [Dehaspe et al., 1994]. Mannila and Raiha have investigated the problem of inferring FDs from example relations in order to determine database schemes. But they do not use a complete inference relation regarding independencies.
Reference: [Schlimmer, 1993] <author> Schlimmer, J. </author> <year> (1993). </year> <title> Using learned dependencies to automatically construct sufficient and sensible editing views. </title> <editor> In Piatetsky-Shapiro, G., editor, KDD-93: </editor> <booktitle> Workshop on Knowledge Discovery in Databases. </booktitle> <publisher> AAAI. </publisher>
Reference-contexts: This makes their approaches to ours absolutely incomparable. Comparable to our approach in order to discover functional dependencies, there are similar's by Mannila and Raiha [Mannila and Raiha, 1991], Schlimmer <ref> [Schlimmer, 1993] </ref>, Savnik and Flach [Savnik and Flach, 1993], and Dehaspe et al. [Dehaspe et al., 1994]. Mannila and Raiha have investigated the problem of inferring FDs from example relations in order to determine database schemes. But they do not use a complete inference relation regarding independencies.
Reference: [Schlimmer, 1991] <author> Schlimmer, J. C. </author> <year> (1991). </year> <title> Database consistency via inductive learning. </title> <booktitle> In Eight International Conference on Machine Learning. </booktitle>
Reference-contexts: Siegel has reported this by the first time [Siegel, 1988] and [Siegel et al., 1991]. Such constraints have been termed, for example, Database Abstractions in [Hsu and Knoblock, 1993], Metadata in [Siegel and Madnick, 1991], and Meta Knowledge in <ref> [Schlimmer, 1991] </ref>. Also, Hsu and Knoblock [Hsu and Knoblock, 1993] have shown the benefits of optimization techniques based on automatically discovered constraints.
Reference: [Siegel and Madnick, 1991] <author> Siegel, M. and Madnick, S. M. </author> <year> (1991). </year> <title> A metadata approach to resolving semantic conflicts. </title> <booktitle> In Conference on Very Large Databases. </booktitle>
Reference-contexts: Siegel has reported this by the first time [Siegel, 1988] and [Siegel et al., 1991]. Such constraints have been termed, for example, Database Abstractions in [Hsu and Knoblock, 1993], Metadata in <ref> [Siegel and Madnick, 1991] </ref>, and Meta Knowledge in [Schlimmer, 1991]. Also, Hsu and Knoblock [Hsu and Knoblock, 1993] have shown the benefits of optimization techniques based on automatically discovered constraints.
Reference: [Siegel et al., 1991] <author> Siegel, M., Sciore, E., and Salveter, S. </author> <year> (1991). </year> <title> Rule discovery for query optimization. In Knowledge Discovery in Databases, chapter 24. </title> <publisher> AAAI Press, </publisher> <address> Menlo Park. </address>
Reference-contexts: The arise of knowledge discovery in databases (KDD) offers a new approach to solve both problems: provides SQO automatically with constraints and extends them to constraints which precisely reflects the present content of the database. Siegel has reported this by the first time [Siegel, 1988] and <ref> [Siegel et al., 1991] </ref>. Such constraints have been termed, for example, Database Abstractions in [Hsu and Knoblock, 1993], Metadata in [Siegel and Madnick, 1991], and Meta Knowledge in [Schlimmer, 1991]. Also, Hsu and Knoblock [Hsu and Knoblock, 1993] have shown the benefits of optimization techniques based on automatically discovered constraints.
Reference: [Siegel, 1988] <author> Siegel, M. D. </author> <year> (1988). </year> <title> Automatic rule derivation for semantic query optimization. </title> <booktitle> In Second International Conference on Expert Database Systems. </booktitle>
Reference-contexts: The arise of knowledge discovery in databases (KDD) offers a new approach to solve both problems: provides SQO automatically with constraints and extends them to constraints which precisely reflects the present content of the database. Siegel has reported this by the first time <ref> [Siegel, 1988] </ref> and [Siegel et al., 1991]. Such constraints have been termed, for example, Database Abstractions in [Hsu and Knoblock, 1993], Metadata in [Siegel and Madnick, 1991], and Meta Knowledge in [Schlimmer, 1991].
Reference: [Zhang and Ozsoyoglu, 1994] <author> Zhang, X. and Ozsoyoglu, Z. M. </author> <year> (1994). </year> <title> Reasoning with implicational and referential constraints in semantic query optimization. In Workshop on Constraints and Databases, </title> <publisher> Post-ILPS. </publisher>
Reference-contexts: Another way is to provide SQO with semantic knowledge by hand which also seems no adequate technique. For example, King [King, 1981] uses constraints on attribute values to optimize queries by his system QUIST. Zhang and Ozsoyoglu <ref> [Zhang and Ozsoyoglu, 1994] </ref> have presented also techniques for semantic query optimization which are based on implication constraints and referential constraints. Implication constraints are a generalization of functional dependencies and referential constraints of inclusion dependencies. <p> But FIs can also be used directly for semantic query optimization in order to refute or to simplify queries. For example, the already mentioned approach of Zhang and Oz-soyoglu <ref> [Zhang and Ozsoyoglu, 1994] </ref> use implication and referential constraints which are generalizations of functional and inclusion dependencies. Gottlob and Libkin [Gottlob and Libkin, 1990] have shown that the MAX-set, introduced by Mannila and Raiha [Mannila and Raiha, 1986], can be written and interpreted as functional independencies.
References-found: 24

