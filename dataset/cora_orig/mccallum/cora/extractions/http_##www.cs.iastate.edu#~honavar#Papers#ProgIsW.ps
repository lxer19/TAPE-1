URL: http://www.cs.iastate.edu/~honavar/Papers/ProgIsW.ps
Refering-URL: http://www.cs.iastate.edu/~honavar/publist.html
Root-URL: 
Title: Programming is Writing: Why Student Programs Need to be Carefully Read Keywords: software, programming, writing,
Author: Gary T. Leavens, Albert L. Baker, Vasant Honavar, Steven M. LaValle, Gurpur Prabhu tant. Gary T. Leavens, Albert L. Baker, Vasant Honavar, Steven LaValle, and 
Degree: Gurpur Prabhu, 1997. All rights reserved.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: 1994 CR Categories: K.3.2 [Computers and Education] Computer and Information Science Education Computer science education. Submitted for publication. c  
Date: December 1997  
Pubnum: TR #97-23  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. W. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> En-glewood Cliffs, N.J., </address> <year> 1981. </year> <note> Programming is Writing 15 </note>
Reference-contexts: The maintenance programmer has to understand a program to fix or enhance its functionality. Often the author of the program is not available to answer questions. Because about half of the cost of a program is spent in its maintenance phase <ref> [1, page 18] </ref>, maintenance costs have an enormous economic impact. "Studies have shown that 30-90% of software expenditure is spent on maintaining existing Programming is Writing 4 software [12, 14]" [11, page 66]. "Software engineers generally agree that the total cost of maintenance is more than the cost of development of <p> However, more research is needed to determine if 4 minutes per page is accurate. It is unlikely that the number of pages of code an average student generates per week is a constant, regardless of the level of the class. Studies by Boehm and others <ref> [1, Section 26.5] </ref> show that, for example, language experience makes a great deal of difference in the time needed to do coding and testing. This would indicate that the practice of increasing the size of programs as the semester goes on (or for later courses) is reasonable. <p> He also reports that the time needed to code the same problem varies by a factor of 18 <ref> [1, page 447] </ref>. It may be, however, that this can be somewhat alleviated by teaching students the value of conciseness and basing part of their grade on conciseness.
Reference: [2] <author> F. P. Brooks, Jr. </author> <title> The Mythical Man-Month. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mass., </address> <year> 1975. </year>
Reference-contexts: Here the reader is often the program's author; the difficulty of finding bugs in a program <ref> [2, Chapter 13] </ref> shows the difficulty in reading programs carefully. <p> Even the program's own author will have difficulty in reading a program that is unclear, poorly organized, or poorly documented. * Programs are often read during "code walkthroughs." Here the readers are programmers other than the program's author, who read the program carefully to validate its correctness <ref> [2, 9] </ref>. * Programs are read by "reusers," people who wish to use or adapt the code for another purpose. * Perhaps the most important reader of a program is the maintenance programmer. This is, very often, a different person than the program's author.
Reference: [3] <author> R. Dawson and R. Newsham. </author> <title> Introducing software engineers to the real world. </title> <journal> IEEE Software, </journal> <volume> 14(6) </volume> <pages> 37-43, </pages> <month> Nov/Dec </month> <year> 1997. </year>
Reference-contexts: All of this leads to student frustration, and eventually to students leaving computing. (Or, perhaps worse, to poorly trained students who get jobs and make a bad impression on employers.) As teachers, we believe strongly in student learning and in maintaining the quality of our instruction. Like others <ref> [3, pages 41-42] </ref> [7], we have noted the high correlation between quality instruction in programming and sufficient human resources. Both our experience and the analysis described show that quality instruction suffers when the ratio of students to TAs begins to exceed 25.
Reference: [4] <author> N. E. Gibbs. </author> <title> The SEI education program: The challenge of teaching future software engineers. </title> <journal> Communications of the ACM, </journal> <volume> 32(5) </volume> <pages> 594-605, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: When the ratio reaches the point where automatic grading must be used the student learning suffers greatly. These problems are compounded if they are found in the introductory courses, which should lay a foundation for skills in writing programs <ref> [4] </ref>. We therefore recommend that a limit of 25 students per TA be enforced, at least in introductory programming courses.
Reference: [5] <author> D. R. Hofstadter. </author> <title> Godel, Escher, Bach : an Eternal Golden Braid. </title> <publisher> Basic Books, </publisher> <address> New York, N.Y., </address> <year> 1979. </year>
Reference-contexts: This wide variation in reading times is in accord with theory, which says that algorithmically deciding any non-trivial property of a program from its text (even whether the program halts) is impossible <ref> [13, 5] </ref>. Recall that for the undergraduate courses, the class size was about 50 students per TA. At that class size, TAs have a maximum of about 14 minutes per student per week to spend grading.
Reference: [6] <author> P. Jalote. </author> <title> An Integrated Approach to Software Engineering. </title> <publisher> Springer-Verlag, </publisher> <address> New York, N.Y., </address> <year> 1991. </year>
Reference-contexts: 18], maintenance costs have an enormous economic impact. "Studies have shown that 30-90% of software expenditure is spent on maintaining existing Programming is Writing 4 software [12, 14]" [11, page 66]. "Software engineers generally agree that the total cost of maintenance is more than the cost of development of software" <ref> [6, page 14] </ref>. "Studies have also shown that maintenance programmers spend about half of their time studying the code and related documentation.
Reference: [7] <author> D. G. Kay, J. Carrasquel, M. J. Clancy, E. Roberts, and J. Zachary. </author> <title> Managing large introductory courses. SIGSE Bulletin: </title> <booktitle> The Proceedings of the 28th SIGCSE Technical Symposium on Computer Science Education, </booktitle> <volume> 29(1) </volume> <pages> 386-387, </pages> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: Similarly, the professors need not be primarily involved in research; dedicated instructional staff is used in many highly-rated computing research departments <ref> [7] </ref>.) In our particular case, as at most research universities, it is the number of TAs (and the ratio of students to TAs) that varies most rapidly when resource problems occur. Hence, we take the ratio of students per TA as a prime indicator of the course staffing. <p> Like others [3, pages 41-42] <ref> [7] </ref>, we have noted the high correlation between quality instruction in programming and sufficient human resources. Both our experience and the analysis described show that quality instruction suffers when the ratio of students to TAs begins to exceed 25.
Reference: [8] <author> D. G. Kay, P. Isaacson, T. Scott, and K. A. Reek. </author> <title> Automated grading assistance for student programs. SIGSE Bulletin: </title> <booktitle> The Papers of the Twenty-Fifth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <volume> 26(1) </volume> <pages> 381-382, </pages> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Because employers are reluctant to hire people who have no training, students seek formal training in programming. This creates a high demand for computer programming courses, as evidenced by the sustained high enrollment since the late 1970s <ref> [8] </ref>. fl Leavens's work was supported in part by NSF grant CCR-9503168 1 Programming is Writing 2 In a typical research university, however, high demand for courses and limited resources leads to problems. <p> Automatic grading does not seem to suffer the disadvantages of the other responses to the grading crisis. It promises to relieve the tedium of checking programs for correctness, and to do a more thorough job of checking for correctness than most TAs <ref> [8] </ref>. If (some of) the test cases used in automatic grading are made available to students, then students can also get immediate feedback on their programs, by running the test cases themselves, which is good. Automatic grading also seems to promise reduced costs for teaching students. <p> not necessarily compute scores or grades, nor does it reduce the human judgement involved in evaluating students' work (which includes not only the program's correctness, but also its adherence to the principles of good design, its documentation, and perhaps its user interface or the student's own choice of test data)" <ref> [8, page 382] </ref>. Automatic grading, as opposed to automatic testing as a supplement to careful reading, would ignore the intangible factors in programs. As we explain in the next section, it is our experience that this causes very severe problems for student learning. <p> Since totally automated grading of student work causes such problems, we agree with Kay, et al., that automatic testing should be used only as a supplement to human judgement <ref> [8] </ref>. Such human judgement, of course, comes from carefully reading programs. 5 Conclusions As a department, we first looked for problems with our teaching of programming when we began to see evidence that our students were not learning how to program well.
Reference: [9] <author> H. D. Mills, M. Dyer, and R. </author> <title> Linger. </title> <journal> Cleanroom software engineering. IEEE Software, </journal> <volume> 4(5) </volume> <pages> 19-25, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Even the program's own author will have difficulty in reading a program that is unclear, poorly organized, or poorly documented. * Programs are often read during "code walkthroughs." Here the readers are programmers other than the program's author, who read the program carefully to validate its correctness <ref> [2, 9] </ref>. * Programs are read by "reusers," people who wish to use or adapt the code for another purpose. * Perhaps the most important reader of a program is the maintenance programmer. This is, very often, a different person than the program's author.
Reference: [10] <author> E. Roberts, J. Lilly, and B. Rollins. </author> <title> Using undergraduates as teaching assistants in introductory courses: An update on the Stanford experience. SIGSE Bulletin: </title> <booktitle> Papers of the 26th SIGCSE Technical Symposium on Computer Science Education, </booktitle> <volume> 27(1) </volume> <pages> 48-52, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: We focus on a vital resource: the course staff, including professors, teaching assistants (TAs), and other humans (such as lab monitors) who assist students in ways that machines cannot. (These TAs are not necessarily graduate students; undergraduate students have been successful TAs in some introductory courses <ref> [10] </ref>.
Reference: [11] <author> S. Shum and C. Cook. </author> <title> Using literate programming to teach good programming practices. SIGSE Bulletin: </title> <booktitle> The Papers of the Twenty-Fifth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <volume> 26(1) </volume> <pages> 66-70, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: Because about half of the cost of a program is spent in its maintenance phase [1, page 18], maintenance costs have an enormous economic impact. "Studies have shown that 30-90% of software expenditure is spent on maintaining existing Programming is Writing 4 software [12, 14]" <ref> [11, page 66] </ref>. "Software engineers generally agree that the total cost of maintenance is more than the cost of development of software" [6, page 14]. "Studies have also shown that maintenance programmers spend about half of their time studying the code and related documentation. <p> This has led Standish [12] to conclude that the cost of comprehending a program is the dominant cost of a program over its entire life cycle" <ref> [11, page 66] </ref>. Thus, training students to write a program so that it is clear, concise, well organized, well documented, etc., is vital for the economic health of the software industry. Hence, it is necessary to emphasize these aspects of writing programs when training students.
Reference: [12] <author> T. Standish. </author> <title> An essay on software reuse. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(5):494-497, </volume> <month> Sept. </month> <year> 1984. </year>
Reference-contexts: Because about half of the cost of a program is spent in its maintenance phase [1, page 18], maintenance costs have an enormous economic impact. "Studies have shown that 30-90% of software expenditure is spent on maintaining existing Programming is Writing 4 software <ref> [12, 14] </ref>" [11, page 66]. "Software engineers generally agree that the total cost of maintenance is more than the cost of development of software" [6, page 14]. "Studies have also shown that maintenance programmers spend about half of their time studying the code and related documentation. <p> This has led Standish <ref> [12] </ref> to conclude that the cost of comprehending a program is the dominant cost of a program over its entire life cycle" [11, page 66].
Reference: [13] <author> A. </author> <title> Turing. Computability and -definability. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 2 </volume> <pages> 153-163, </pages> <year> 1937. </year>
Reference-contexts: This wide variation in reading times is in accord with theory, which says that algorithmically deciding any non-trivial property of a program from its text (even whether the program halts) is impossible <ref> [13, 5] </ref>. Recall that for the undergraduate courses, the class size was about 50 students per TA. At that class size, TAs have a maximum of about 14 minutes per student per week to spend grading.
Reference: [14] <author> Y. Wu and T. Baker. </author> <title> A source code documentation system for Ada. </title> <journal> ACM Ada Letters, </journal> <volume> 9(5) </volume> <pages> 84-88, </pages> <month> Jul/Aug </month> <year> 1989. </year>
Reference-contexts: Because about half of the cost of a program is spent in its maintenance phase [1, page 18], maintenance costs have an enormous economic impact. "Studies have shown that 30-90% of software expenditure is spent on maintaining existing Programming is Writing 4 software <ref> [12, 14] </ref>" [11, page 66]. "Software engineers generally agree that the total cost of maintenance is more than the cost of development of software" [6, page 14]. "Studies have also shown that maintenance programmers spend about half of their time studying the code and related documentation.
References-found: 14

