URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/WBL.antspace_gp98.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fW.B.Langdon,R.Polig@cs.bham.ac.uk  
Phone: Tel: +44 (0) 121 414 4791, Fax: +44 (0) 121 414 4281  
Title: Why Ants are Hard of a small fraction of the total search space and random
Author: W. B. Langdon and R. Poli 
Web: http://www.cs.bham.ac.uk/~wbl, ~rmp  
Address: B15 2TT, UK  
Affiliation: School of Computer Science, The University of Birmingham, Birmingham  
Note: Genetic Programming 1998, J. R. Koza et al. (editors)  Enumeration  Random  This is part of the cause of bloat.  
Abstract: The problem of programming an artificial ant to follow the Santa Fe trail is used as an example program search space. Previously reported genetic programming, simulated annealing and hill climbing performance is shown not to be much better than random search on the Ant problem. Analysis of the program search space in terms of fixed length schema suggests it is highly deceptive and that for the simplest solutions large building blocks must be assembled before they have above average fitness. In some cases we show solutions cannot be assembled using a fixed representation from small building blocks of above average fitness. This suggest the Ant problem is difficult for Genetic Algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [ Alonso and Schott, 1995 ] <author> Laurent Alonso and Rene Schott. </author> <title> Random Generation of Trees. </title> <publisher> Kluwer, </publisher> <year> 1995. </year>
Reference-contexts: Each corresponds to a different number of programs. One combination was chosen at random in proportion to this number and then a tree with this combination of branching factors was created using the bijective random tree creation algorithm described in <ref> [ Alonso and Schott, 1995, Chapter 4 ] </ref> . Each tree was converted to a program by labelling its nodes with a function or terminal of the correct arity chosen uniformly at random.
Reference: [ Chellapilla, 1997 ] <editor> Kumar Chellapilla. </editor> <title> Evolutionary programming with tree mutations: Evolving computer programs without crossover. </title> <editor> In John R. Koza et al. editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 Size limited, EP <ref> [ Chellapilla, 1997 ] </ref> 136 GP [ Langdon and Poli, 1997 ] 450 Subtree Mutation [ Langdon and Poli, 1998 ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [ Langdon, 1998c
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction There have often been claims that automatic programming is hampered by the nature of program spaces. These are undoubtedly large <ref> [ Koza, 1992, page 2 ] </ref> and, it often claimed, badly behaved with little performance relationship between similar programs [ O'Reilly, 1995, page 8 ] . In this paper we present a systematic exploration of the program space of a commonly used benchmark problem (Sections 2 and 3). <p> Finally in Section 8 we consider why the problem is important and how we can exploit what we have learnt and in Section 9 we give our conclusions. 2 The Artificial Ant Problem The artificial ant problem <ref> [ Koza, 1992, pages 147-155 ] </ref> is a well studied problem often used as a GP benchmark. Briefly the problem is to devise a program which can successfully navigate an artificial ant along a twisting trail on a 32 fi 32 toroidal grid. <p> This is known as "Effort" required <ref> [ Koza, 1992, page 194 ] </ref> : E = log (1 P ) log * Taking * as 1% we can calculate the number of fitness evaluations E required to find at least one solution (with probability 99%). 4.1 Uniform Random Search Using uniform random search and taking the maximum value <p> This is the simplest neighbour relationship which means we can avoid the complications inherent in crossover operator such as GP crossover. Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP <ref> [ Koza, 1992, page 202 ] </ref> 450 Size limited, EP [ Chellapilla, 1997 ] 136 GP [ Langdon and Poli, 1997 ] 450 Subtree Mutation [ Langdon and Poli, 1998 ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738
Reference: [ Langdon and Poli, 1997 ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat. </title> <editor> In P. K. Chawdhry, R. Roy, and R. K. Pan, editors, </editor> <booktitle> Second On-line World Conference on Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer-Verlag London, </publisher> <month> 23-27 June </month> <year> 1997. </year>
Reference-contexts: Each time the ant enters a square containing food the ant eats it. The amount of food eaten is used as the fitness measure of the control program. The fitness function, function and terminal sets etc. we use are identical to <ref> [ Langdon and Poli, 1997 ] </ref> see Table 1. 1 3 Size of Program and Solution Space The number of different programs in the ant problem is plotted against their lengths in Figure 1 (and is tabulated in the "Total" row at the bottom of Table 2). <p> Since the total number of programs rises rapidly, this means the number of programs with a given score also rises rapidly with length. This confirms assumptions in <ref> [ Langdon and Poli, 1997 ] </ref> . With any Monte Carlo technique there will be some stochastic error in the estimates. In the case of rare events (such as finding a solution to the ant problem) this could be large. <p> Table 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 Size limited, EP [ Chellapilla, 1997 ] 136 GP <ref> [ Langdon and Poli, 1997 ] </ref> 450 Subtree Mutation [ Langdon and Poli, 1998 ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [ Langdon, 1998c ] 390 PDGP 336 In the
Reference: [ Langdon and Poli, 1998 ] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat: Mutation. </title> <editor> In W. Banzhaf et al. editors, </editor> <booktitle> Proceedings of the First European Workshop on Genetic Programming. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 3: Effort to Solve Santa Fe Trail Method E=1000 Random (len=18) 450 Random (len=25) 1,200 Random (len=50) 2,700 Random (len=500) 4,900 Ramped-half-and-half 15,000 Koza GP [ Koza, 1992, page 202 ] 450 Size limited, EP [ Chellapilla, 1997 ] 136 GP [ Langdon and Poli, 1997 ] 450 Subtree Mutation <ref> [ Langdon and Poli, 1998 ] </ref> 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized [ Langdon, 1998c ] 390 PDGP 336 In the case of small programs (i.e. length 11, 12 and
Reference: [ Langdon, 1998a ] <author> W. B. Langdon. </author> <title> Better trained ants. </title> <editor> In R. Poli et al. editors, </editor> <booktitle> Late Breaking Papers at Eu-roGP'98: the First European Workshop on GP. </booktitle>
Reference-contexts: These are created by the combination of the representation, the neighbour operator and the fitness function. While there may be improvements to the representation or better search techniques we should also consider the fitness function, particularly how we reward partial solutions <ref> [ Langdon, 1998a ] </ref> . 9 Conclusions We have started an examination of the program space of a GP benchmark problem. We have shown that there are many distinct solutions to the problem and the density of solutions in the program space is unexpectedly high.
Reference: [ Langdon, 1998b ] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <publisher> Kluwer, </publisher> <year> 1998. </year> <month> Forthcoming. </month>
Reference-contexts: However the fitness of low order schema may be estimated more reliably (as GA populations can contain many instances of them). Where they are deceptive, this may lead a GA to discard them. (Extinction of complete primitives was seen in the list and stack problems <ref> [ Langdon, 1998b, Chapter 6 and 8 ] </ref> ). We have not been able to find any building blocks (i.e. small components of a solution with above average fitness). We have only considered the simplest solutions using a fixed representation but they cannot be assembled from building blocks.
Reference: [ Langdon, 1998c ] <author> W. B. Langdon. </author> <title> The evolution of size in variable length representations. </title> <booktitle> In 1998 IEEE International Conference on Evolutionary Computation. </booktitle>
Reference-contexts: limited, EP [ Chellapilla, 1997 ] 136 GP [ Langdon and Poli, 1997 ] 450 Subtree Mutation [ Langdon and Poli, 1998 ] 426 Simulated Annealing 50%-150% 748 Subtree-sized 435 Hill Climbing 50%-150% 955 Subtree-sized 1,671 Strict Hill Climbing 50%-150% 186 Subtree-sized 738 Population (data for best) 50%-150% 266 Subtree-sized <ref> [ Langdon, 1998c ] </ref> 390 PDGP 336 In the case of small programs (i.e. length 11, 12 and 13) we investigated the neighbourhoods of all the fitter programs, i.e. those with scores above 24 (in [ Lang-don, 1998c ] in almost all runs the best individual found had a score better <p> I.e. if a hill climber searching programs of length 11 or 12 finds a program scoring more than 36 we know it will never find a solution, without restarting. (Figure 6 shows 50 runs of a variable length representation hill climber <ref> [ Langdon, 1998c ] </ref> most of which became trapped at suboptimal peaks. Similar behaviour is also seen with other search techniques such as GP). There are many more solutions of length 13 and they are structurally and operationally more diverse.
Reference: [ Maxwell, 1996 ] <author> S. R. Maxwell. </author> <title> Why might some problems be difficult for genetic programming to find solutions? In John R. </title> <editor> Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference, 1996. </booktitle> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: A possibly useful approach is to break this symmetry (e.g. by putting more of one primitive in the initial population) to bias the technique so that it chooses one option quickly. Alternatively new genetic operators <ref> [ Maxwell, 1996 ] </ref> might better exploit the semantics of the programs. We might address the tangled network of programs with the same fitness, which consumes much machine resources by promoting bloat, by introducing a small bias.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carleton University, Ottawa-Carleton Institute for Computer Science. </institution>
Reference-contexts: 1 Introduction There have often been claims that automatic programming is hampered by the nature of program spaces. These are undoubtedly large [ Koza, 1992, page 2 ] and, it often claimed, badly behaved with little performance relationship between similar programs <ref> [ O'Reilly, 1995, page 8 ] </ref> . In this paper we present a systematic exploration of the program space of a commonly used benchmark problem (Sections 2 and 3).
Reference: [ Poli and Langdon, 1997 ] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <editor> In John R. Koza et al. editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <address> 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These same fitness neighbours displace those that are worse, and for the longest sizes almost all programs of intermediate fitness have a large number of neighbours with the same score. 6 Fixed Length Schema Analysis In this section we consider the fitness of fixed length schema <ref> [ Poli and Langdon, 1997 ] </ref> within the program space. Unlike conventional schema analysis we define a schema's fitness as the mean score for all programs matching the schema.
Reference: [ Wolpert and Macready, 1997 ] <author> David H. Wolpert and William G. Macready. </author> <title> No free lunch theorems for optimization. </title> <journal> IEEE Transactions on Evolutionary Computation, </journal> <volume> 1(1) </volume> <pages> 67-82, </pages> <month> April </month> <year> 1997. </year> <month> 9 </month>
Reference-contexts: Each of these rearrangements yields solutions of different shapes. Most of the other solutions of length 13 also perform two consecutive Move operations. These and the remaining solution of length 13 have less symmetry and are fewer in number. 8 Discussion The No Free Lunch theorems <ref> [ Wolpert and Macready, 1997 ] </ref> prove that averaged over all problems all search algorithms have the same performance. In particular this means, averaged across all possible problems, the performance of genetic programming is the same as random search.
References-found: 12

