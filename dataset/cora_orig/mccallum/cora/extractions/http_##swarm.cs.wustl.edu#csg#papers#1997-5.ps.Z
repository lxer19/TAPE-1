URL: http://swarm.cs.wustl.edu/csg/papers/1997-5.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: http://www.cs.wustl.edu
Email: email: falm, roman, vargheseg@cs.wustl.edu  
Title: An Algorithm for Message Delivery to Mobile Units once the algorithm has terminated, neither the
Author: Amy L. Murphy, Gruia-Catalin Roman, and George Varghese [] Chandy, K. M., and Lamport, L. 
Date: 3, 1 (1985), 63-75.  
Note: delivery and eventual cleanup. Eventual cleanup means that  which has been delivered.  ACM Trans. Comput. Syst.  
Address: St Louis  
Affiliation: Washington University,  
Abstract: Introduction The problem we investigated is the delivery of messages to mobile units in an environment similar to the cellular telephone system, i.e., consisting of fixed mobile support centers (MSCs) broadcasting messages to mobile units. Mobile IP solves the problem of message delivery to slow moving mobile units, requiring these units remain at a location long enough for registration messages to be processed. Our approach solves the problem with rapidly moving mobile units, using a broadcasting scheme. The first approach one might consider is to construct a spanning tree over the MSCs and broadcast each message along this tree. In this setting, however, delivery is not guaranteed if the mobile unit for which the message is destined moves rapidly from an area within the cluster which has not yet broadcast the message into a region which has. This rapid movement is realistic because the time to execute a handover between MSCs is small, but transmission of the message along the tree is significantly larger. Therefore, although the mobile unit is present in the system for the entire duration of the broadcast, the message is not delivered. Snapshot Delivery To achieve stronger delivery guarantees, we propose an alternative broadcast scheme. Our solution is based on the classical notion of a snapshot as presented by Chandy and Lamport [1]. To apply the results from the snapshot to mobility, we provide a mapping from the mobile environment model to a distributed system, with the MSCs representing the processing nodes, the mobile units taking the place of traditional communication messages, and the message to be delivered as the tokens involved in the snapshot algorithm. Both the movement of the mobile units and the physical connections between MSCs are modeled as channels connecting processors. The use of snapshots is based on the intuitive notion that the recording of a message in a local snapshot is equivalent to message delivery in the mobile setting. Therefore, just as a message must be recorded in the snapshot, a mobile unit cannot avoid delivery: the mobile unit must show up in the snapshot at some MSC or on a channel in some local snapshot. By adopting the snapshot algorithm directly, we achieve two main results related to message delivery: exactly once Reality Check The Chandy-Lamport snapshot assumes FIFO channels. In mobility this implies that a mobile unit cannot overtake a previously sent message (highly unlikely in practice) and a message cannot overtake a mobile unit (quite likely in practice). While it is possible to use a snapshot algorithm which allows for non-FIFO channels (increasing the memory requirements of the mobile units to include history markers), a preferred solution is to modify the handover protocol to ensure FIFO behavior of mobile unit movement and message transmissions [2]. Another advantage of this approach is its easy extensibility to multicast. By the nature of the snapshot algorithm, every mobile unit in the system is attempted delivery exactly once during the execution. Therefore, by changing the destination address of the message to a multicast address, we now have a multicast algorithm with worst case overhead of one message per link in each direction. Conclusions Our algorithm provides for multicast and unicast delivery of messages to mobile units in a micromo-bility environment. It also illustrates a new approach to the study of mobility, one based on a model whose mechanics are borrowed directly from the established literature on distributed computing. Treating mobile units as messages provides an effective means for transferring results from classical distributed algorithms literature to the emerging field of mobile computing. Future work includes evaluating the viability of this general strategy to other algorithms such as the Dijkstra-Scholten algorithm for termination detection in diffusing computations. [2] Murphy, A. L., Roman, G.-C., and Vargh-ese, G. An algorithm for message delivery in a micromobility environment. Tech. Rep. WUCS-97-22, Washington University, 1997. Also available at www.cs.wustl.edu/cs/techreports/1997/wucs-97-22.ps.Z. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chandy, K. M., and Lamport, L. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 3, 1 (1985), </volume> <pages> 63-75. </pages>
Reference-contexts: Snapshot Delivery To achieve stronger delivery guarantees, we propose an alternative broadcast scheme. Our solution is based on the classical notion of a snapshot as presented by Chandy and Lamport <ref> [1] </ref>.
Reference: [2] <author> Murphy, A. L., Roman, G.-C., and Vargh-ese, G. </author> <title> An algorithm for message delivery in a micromobility environment. </title> <type> Tech. Rep. </type> <institution> WUCS-97-22, Washington University, </institution> <year> 1997. </year> <note> Also available at www.cs.wustl.edu/cs/techreports/1997/wucs-97-22.ps.Z. </note>
Reference-contexts: While it is possible to use a snapshot algorithm which allows for non-FIFO channels (increasing the memory requirements of the mobile units to include history markers), a preferred solution is to modify the handover protocol to ensure FIFO behavior of mobile unit movement and message transmissions <ref> [2] </ref>. Another advantage of this approach is its easy extensibility to multicast. By the nature of the snapshot algorithm, every mobile unit in the system is attempted delivery exactly once during the execution.
References-found: 2

