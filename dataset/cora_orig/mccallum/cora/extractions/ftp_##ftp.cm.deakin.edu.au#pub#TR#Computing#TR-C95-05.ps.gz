URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/TR-C95-05.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: -mick@deakin.edu.au  
Title: A Simple Open File Facility for RHODOS  
Author: Michael Hobbs 
Note: *This work was partly supported by Australian Research Council under Grant A49232429 and the Deakin University Research Grant 0504054151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: October 23, 1995  
Pubnum: RHODOS  
Abstract: Access to permanent secondary storage is a fundamental component of any operating system. File access is required not only by user processes but also by the operating system itself. The operating system requires file system support such that it is able to provide services and functions expected by the user, including: paging and virtual memory support; and also process creation. This report introduces a exible and uncomplicated file facility for the RHODOS distributed operating system. RUFS (RHODOS-UNIX File Service) provides the RHODOS environment with all the traditional file operations such as open(), creat(), close(), lseek(), read() and write(). The design, architecture and design options taken will be discussed as well as simple extensions to the RUFS facilities to provide a variety of other services, in an open and modular fashion. 
Abstract-found: 1
Intro-found: 1
Reference: [Bach 86] <author> M. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, Inc </publisher> . 
Reference-contexts: In the current implementation of RUFS this location is hard coded within the library but this could easily be modified to dynamically locate the location of the file server. 4 Description of RUFS 4.1 Primitives RUFS supports the set of file primitives provided by any traditional UNIX systems <ref> [Bach 86] </ref>. These primitives are based on the file descriptor system rather than the newer STREAM oriented versions. The six primitives currently implemented in the RUFS system include: ropen (), rclose (), rread (), rwrite (), rlseek () and rcreat ().
Reference: [De Paoli, et al. 94] <author> D. De Paoli, M. Hobbs, G. Wickham, A. Goscinski. </author> <title> RHODOS A Microkernel based Distributed Operating System: An Overview of the 1993 Version. </title> <type> Technical Report TR C94/04, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <address> Geelong April. </address>
Reference-contexts: The structure of the RHODOS communications system used in this project is shown in Figure 5. Based on the well known network and data link protocols of IP and ethernet, our custom transport protocol RRDP and also the communication manager layer have all been implemented on both RHODOS <ref> [De Paoli, et al. 94] </ref> and the UNIX workstations [Toomey 90]. Under RHODOS, all local interprocess communication is handled through the set of send (), recv () and call () primitives [Goscinski et al. 94] which provide message passing and remote procedure call facilities to user and kernel processes.
Reference: [Gerrity et al. 91] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey and Z. Zhu. </author> <title> RHODOS A test bed for the studying Design Issues in Distributed Operating Systems. </title> <booktitle> Proceedings of the 2nd Singapore International Conference on Networks (SINCON91). </booktitle> <month> September. </month>
Reference-contexts: RHODOS (Research Oriented Distributed Operating System) is a distributed operating system developed based on the microkernel architecture. It was designed to provide a exible testbed for the study and comparison of the issues which are important in the development of distributed and open operating systems <ref> [Gerrity et al. 91] </ref>. Work on the RHODOS platform is well underway, with the majority of the base system already completed. The RHODOS microkernel (following the microkernel paradigm) does not provide the file service itself, as is the case in most kernel based operating systems.
Reference: [Goscinski et al. 94] <author> A. Goscinski, M. Hobbs, P. Joyce, G. Wickham. </author> <title> Message Passing and RPC-based Interprocess Communication Mechanisms in the RHODOS Microkernel. </title> <type> Technical Report TR C94/09, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <address> Geelong May. </address>
Reference-contexts: Under RHODOS, all local interprocess communication is handled through the set of send (), recv () and call () primitives <ref> [Goscinski et al. 94] </ref> which provide message passing and remote procedure call facilities to user and kernel processes. Under UNIX the interprocess communication primitives available are not completely compatible with the corresponding RHODOS primitives.
Reference: [Goscinski and Toomey 92] <author> A. Goscinski and W. Toomey. </author> <title> A Fast Reliable Transport Protocol for Real-Time Distributed Systems. </title> <booktitle> Proceedings of the IEEE International Workshop on Emerging Technologies and Factory Automation EFTAs92, </booktitle> <pages> August 11-14, </pages> <address> Melbourne. </address>
Reference-contexts: To access this remote file service from RHODOS a communications link connecting the RHODOS machine to the UNIX machine was required. Over this link (ethernet running IP was used) the RHODOS transport protocol RRDP was run. An RRDP based communication <ref> [Goscinski and Toomey 92] </ref> subsystem has already been developed to run under UNIX; this was used to complete the communication link. <p> As suggested earlier, instead of implementing a traditional transport protocol such as UDP or TCP, the existing (and only supported) transport protocol, RRDP <ref> [Goscinski and Toomey 92] </ref>, would be used. The structure of the RHODOS communications system used in this project is shown in Figure 5.
Reference: [Sun 90] <author> Sun Microsystems Inc. </author> <title> Network File System: Version 2 Protocol Specfication, Sun Network Programming Guide, </title> <month> March. </month>
Reference-contexts: The approaches investigated ranged greatly both in the complexity of their design and the functionality that they provided: Access the Sun NFS <ref> [Sun 90] </ref> system directly from a client process running under RHODOS; A custom file server process running on the UNIX workstation with a standard commu nication protocol (UDP, TCP, etc.); A custom file server process running on the UNIX workstation using the RHODOS communication sub system.
Reference: [Toomey 90] <author> W. Toomey. </author> <title> Emulating a RHODOS Process Environment Under UNIX. </title> <type> Technical Report CS90/49, </type> <institution> Department of Computer Science, University College, University of New South Wales. </institution> <month> December. </month>
Reference-contexts: Based on the well known network and data link protocols of IP and ethernet, our custom transport protocol RRDP and also the communication manager layer have all been implemented on both RHODOS [De Paoli, et al. 94] and the UNIX workstations <ref> [Toomey 90] </ref>. Under RHODOS, all local interprocess communication is handled through the set of send (), recv () and call () primitives [Goscinski et al. 94] which provide message passing and remote procedure call facilities to user and kernel processes. <p> This environment enables UNIX executable processes to use the system calls and services normally only available under RHODOS <ref> [Toomey 90] </ref>. This is achieved through the use of library routines using corresponding UNIX system calls to mimic RHODOS environment. Therefore most code can be recompiled to run under RHODOS or UNIX depending on the library that they use.
Reference: [Panadiwal and Goscinski 94] <author> R. Panadiwal and A. Goscinski. </author> <title> A High Performance and RHODOS October 23, 1995 References Page 12 Reliable Distributed File Facility. </title> <booktitle> Proceedings of the 14th International Conference on Distributed Computing Systems. </booktitle> <address> Poznan, Poland, </address> <month> June 21-24. </month>
Reference-contexts: Erro Number */ uint32_t size; /* Amount of data returned */ - RUFS_REPLY; RHODOS October 23, 1995 Conclusion Page 10 testing and debugging procedures of ensuring each of the primitives act in the correct and expected fashion, RUFS has also been used to support development of a Distributed File system <ref> [Panadiwal and Goscinski 94] </ref>. As unusual as it may seem, the RHODOS distributed file system was implemented using the RUFS facility provided on a UNIX host, this architecture has worked extremely well since the interface between the distributed file service and the underlying disk service was handled transparently by RUFS.
Reference: [Wickham et al. 94] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> Research into the Development of the RHODOS Multi Threaded Microkernel. </title> <type> Technical Report TR C94/05, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong, </institution> <month> April. </month>
Reference-contexts: This is a project that is currently under study and development. The second important area that the RUFS has been utilised is within the RHODOS multi-threaded microkernel <ref> [Wickham et al. 94] </ref>. The RUFS primitives have enabled research and testing to be performed with both dynamic process creation and also a variety of paging strategies.
References-found: 9

