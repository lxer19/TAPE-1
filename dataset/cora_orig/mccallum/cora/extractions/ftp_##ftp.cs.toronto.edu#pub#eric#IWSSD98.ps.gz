URL: ftp://ftp.cs.toronto.edu/pub/eric/IWSSD98.ps.gz
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Email: fedu,mpeg@info.fundp.ac.be  eric@cs.toronto.edu  
Phone: 2  
Title: From Early to Late Formal Requirements: a Process-Control Case Study  
Author: Eric Dubois Eric Yu and Michael Petit 
Address: Namur, Belgium,  Toronto, Ontario, Canada,  
Affiliation: 1 University of  University of  
Abstract: In this paper, we consider three distinct and connected modelling activities at the Requirements Engineering (RE) level. Within the context of reactive systems, we suggest how these three activities can be supported by the use of appropriate formal languages, namely Kaos, and Timed Automata. The i* framework is used for linking the various formal models and for providing a high level model in terms of which organizational issues are captured. A small process control example is used to illustrate the proposed approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Archer and C. Heitmeyer. </author> <title> Mechanical verification of timed automata: A case study. </title> <booktitle> In Real-Time Applications Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: A number of specification languages have been proposed for modelling the behaviour of software components. Most of them are based on automata extended with structuring mechanisms (e.g., Statecharts [8] and SCR [10]) and/or equipped with facilities for dealing with real-time properties <ref> [1] </ref> [14]. The style of specification used at that level is usually a much more constructive (operational) style which reflects the work of the analyst who has elaborated a solution for the problem.
Reference: [2] <author> R. Balzer. </author> <title> Tranformational implementation: An example. </title> <journal> In IEEE Trans. on Software Engineering, </journal> <month> January </month> <year> 1981. </year>
Reference: [3] <author> Janis A. Bubenko. </author> <title> On concepts and strategies for requirements and information analysis. </title> <booktitle> In Information modeling, </booktitle> <pages> pages 125169. </pages> <address> Chartwell-Bratt, </address> <year> 1983. </year>
Reference-contexts: As we can see, the purpose of this activity is to transform the system requirements into a system solution. There is a strong mirroring relationship between the information handled in the problem domain and symbols used for describing the system internals. As it has been indicated by Bubenko <ref> [3] </ref>, information systems manage symbols which are mirroring real information belonging to the problem domain. For control intensive systems, Jack-son [11] showed that sensors and actuators are used for connecting system's internal states to the behaviour of real-world entities.
Reference: [4] <author> K. L. Chung, B. Nixon, J. Mylopoulos, and E. Yu. </author> <title> NonFunctional Requirements in Software Engineering. </title> <publisher> Kluwer Academic Publishers, to appear. </publisher>
Reference: [5] <author> A. Dardenne, A. van Lamsweerde, and S. Fickas. </author> <title> Goal-directed requirements acquisition. </title> <booktitle> Science of Computer Programming, </booktitle> <address> 20:350, </address> <year> 1993. </year>
Reference: [6] <author> P. du Bois, E. Dubois, and J-M. Zeippen. </author> <title> On the use of a formal requirements engineering language: The generalized railroad crossing problem. </title> <booktitle> In Third IEEE International Symposium on Requirements Engineering. </booktitle> <publisher> IEEE CS Press, </publisher> <month> January </month> <year> 1997. </year>
Reference-contexts: The interested reader can find more information about this real-time distributed RE language and its applications in <ref> [6] </ref>. A specification in is made up of (i) a graphical part where the vocabulary is declared and (ii) a textual part where the logical formulae constraining the admissible behaviours are stated. Figures 5 and 6 illustrate the use of within the context of our case study.
Reference: [7] <author> Martin S. Feather. </author> <title> Language support for the specification and development of composite systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(2):198234, </volume> <month> April </month> <year> 1987. </year>
Reference: [8] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtull-Trauring, and M. Trakhtenbrot. STATEMATE: </author> <title> a working environment for the development of complex reactive systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 16:403414, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: A number of specification languages have been proposed for modelling the behaviour of software components. Most of them are based on automata extended with structuring mechanisms (e.g., Statecharts <ref> [8] </ref> and SCR [10]) and/or equipped with facilities for dealing with real-time properties [1] [14]. The style of specification used at that level is usually a much more constructive (operational) style which reflects the work of the analyst who has elaborated a solution for the problem.
Reference: [9] <author> D. Hatley and I. Pirbhai. </author> <title> Strategies for Real-Time Specification. </title> <publisher> Dorset House, </publisher> <year> 1987. </year>
Reference: [10] <author> C. Heitmeyer, B. Labaw, and D. Kiskis. </author> <title> Consistency checking of scr-style requirements specifications. </title> <booktitle> In Second IEEE International Symposium on Requirements Engineering. </booktitle> <publisher> IEEE CS Press, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: A number of specification languages have been proposed for modelling the behaviour of software components. Most of them are based on automata extended with structuring mechanisms (e.g., Statecharts [8] and SCR <ref> [10] </ref>) and/or equipped with facilities for dealing with real-time properties [1] [14]. The style of specification used at that level is usually a much more constructive (operational) style which reflects the work of the analyst who has elaborated a solution for the problem.
Reference: [11] <author> M. Jackson. </author> <title> System Development. </title> <publisher> Prentice-Hall, </publisher> <year> 1983. </year>
Reference-contexts: There is a strong mirroring relationship between the information handled in the problem domain and symbols used for describing the system internals. As it has been indicated by Bubenko [3], information systems manage symbols which are mirroring real information belonging to the problem domain. For control intensive systems, Jack-son <ref> [11] </ref> showed that sensors and actuators are used for connecting system's internal states to the behaviour of real-world entities. A number of specification languages have been proposed for modelling the behaviour of software components.
Reference: [12] <author> M. Jackson. </author> <title> Software Requirements and Specifications: A lexicon of practice, </title> <booktitle> principles and prejudices. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [13] <author> P. Loucopoulos and V. Karakostas. </author> <title> System Requirements Engineering. </title> <booktitle> McGraw-Hill Intl Series in Software Engineering, </booktitle> <year> 1995. </year>
Reference: [14] <author> M. Merritt, F. Modugno, and M. Tuttle. </author> <title> Time constrained automata. </title> <booktitle> In Concur'91: 2nd Intl Conf on Concurrency Theory. </booktitle> <publisher> LNCS 527, Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A number of specification languages have been proposed for modelling the behaviour of software components. Most of them are based on automata extended with structuring mechanisms (e.g., Statecharts [8] and SCR [10]) and/or equipped with facilities for dealing with real-time properties [1] <ref> [14] </ref>. The style of specification used at that level is usually a much more constructive (operational) style which reflects the work of the analyst who has elaborated a solution for the problem.
Reference: [15] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: Representing knowledge about information systems. </title> <journal> In ACM Trans. on Information Systems. </journal> <volume> vol. 8(4), </volume> <year> 1990. </year>
Reference-contexts: As a first step in this direction, we can report on the on-going work performed by the authors around the coupling of the i* and languages [21]. Separate tools exist for the two languages but both rely on the use of a Te-los based repository <ref> [15] </ref> in which descriptions are stored and organized according to the meta-model associated with each language. Traceability links can be established at the level of these meta-models and impact analysis can be performed on the basis of these links.
Reference: [16] <author> K. Pohl. </author> <title> Process Centered Requirements Engineering. </title> <publisher> John Wiley, </publisher> <year> 1996. </year>
Reference: [17] <author> Rational. </author> <title> Unified Modeling Language: Notation Guide, Version 1.1. Rational Software Corporation, </title> <address> 2800 San Tomas Expressway, Santa Clara, CA 95051-0951, </address> <month> 1 September </month> <year> 1997. </year> <note> URL http://www.rational.com/uml/1.1/. </note>
Reference: [18] <author> B. Selic, G. Gullekson, and P.T. Ward. </author> <title> Real-Time Object-Oriented Modelling. </title> <publisher> John Wiley, </publisher> <year> 1994. </year>
Reference: [19] <author> A. van Lamsweerde, R. Darimont, and P. Massonet. </author> <title> Goal-directed elaboration of requirements for a meeting sched-uler: Problems and lessons learnt. </title> <booktitle> In Second IEEE International Symposium on Requirements Engineering. </booktitle> <publisher> IEEE CS Press, </publisher> <month> March </month> <year> 1995. </year>
Reference: [20] <author> E. Yu. </author> <title> Modelling Strategic Relationships for Process Reengineering. </title> <type> Ph.D. Thesis, </type> <institution> Univ. of Toronto, </institution> <year> 1994. </year>
Reference: [21] <author> E. Yu, P. Du Bois, E. Dubois, and J. Mylopoulos. </author> <title> From organization models to system requirements: a 'cooperating agents' approach. </title> <editor> In M. Papazoglou and G. Schlageter, editors, </editor> <booktitle> Cooperative Information Systems, </booktitle> <pages> pages 293312. </pages> <publisher> Academic Press, </publisher> <year> 1998. </year>
Reference-contexts: As a first step in this direction, we can report on the on-going work performed by the authors around the coupling of the i* and languages <ref> [21] </ref>. Separate tools exist for the two languages but both rely on the use of a Te-los based repository [15] in which descriptions are stored and organized according to the meta-model associated with each language.
Reference: [22] <author> E. Yu and J. Mylopoulos. </author> <title> Understanding 'why' in software process modelling, analysis, </title> <booktitle> and design. In IEEE International Conference on Software Engineering, </booktitle> <address> ICSE'94, </address> <year> 1994. </year>
References-found: 22

