URL: http://www.cs.wustl.edu/~suri/psdir/wads2.ps
Refering-URL: http://www.cs.wustl.edu/~suri/research.html
Root-URL: http://www.cs.wustl.edu
Title: Efficient Breakout Routing in Printed Circuit Boards (Extended Abstract)  
Author: John Hershberger and Subhash Suri 
Abstract: Breakout routing is a single-layer wire-routing problem in which each of a set of pins must be connected to one of a set of vias, but no matching is prespecified. We propose a network-flow approach to breakout routing in which the wiring grid is modeled by a more compact graph. Our graph is a factor of fi( 2 ) smaller than the wiring grid, where is the ratio of via spacing to pin spacing, which improves both the space and run time efficiency of the flow computation. A flow in the compact graph can be transformed into a wire layout, and vice versa. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W.-T. Chan and F. Y. L. Chin. </author> <title> Efficient algorithms for finding disjoint paths in grids. </title> <booktitle> In Proceedings of ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 454-463, </pages> <year> 1997. </year>
Reference: 2. <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: This method clearly finds a feasible routing if one exists, but it appears to be more popular in theory <ref> [2, p. 625] </ref> than in practice, perhaps because of the asymptotic complexity of network flow algorithms. One big disadvantage of the "vanilla" network flow method is that the size of the grid graph can be quadratic in the number of pins. <p> The capacity of a cut [V 1 ; V 2 ] equals the total capacity of all forward edges. The following celebrated theorem of network flow will be used throughout <ref> [2, p. 593] </ref> Theorem 2 (Max-Flow Min-Cut). Let V s and V d , respectively, denote the set of supply and demand nodes in a network G = (V; E). <p> Assign capacities to nodes and edges as described in Section 3.2. 2. Run a flow algorithm to compute a maximum flow OE between the source and sink nodes <ref> [2] </ref>. 3. Modify the flow, if necessary, to make it tail-ordered. 4. Use the tail-ordered flow OE to compute a wire layout consistent with OE in each cell. 5. Post-process to remove unnecessary bends in the wire layout [4, 3]. Step 5 requires a bit of explanation. <p> Each node in N has constant degree, so the number of edges is asymptotically the same as the number of nodes. The maximum flow is m, the number of pins, and so even the Ford-Fulkerson algorithm runs in O (mjN j) time <ref> [2, p. 587] </ref>. The network size is likely to be closely related to n, the number of vias, and so Ford-Fulkerson runs in O (mn) time. In practice, if pins are not located on all sides of the rectangle of via sites, they are located preferentially on the long sides.
Reference: 3. <author> W. W.-M. Dai, R. Kong, and M. Sato. </author> <title> Routability of a rubber-band sketch. </title> <booktitle> In Proceedings of 28th IEEE/ACM Design Automation Conf., </booktitle> <pages> pages 45-48, </pages> <year> 1991. </year>
Reference-contexts: Modify the flow, if necessary, to make it tail-ordered. 4. Use the tail-ordered flow OE to compute a wire layout consistent with OE in each cell. 5. Post-process to remove unnecessary bends in the wire layout <ref> [4, 3] </ref>. Step 5 requires a bit of explanation. The wire layout our algorithm produces may have more bends than necessary. <p> Reducing the number of bends is desirable for manufacturing reasons; to do this we treat our wire layout as a rubber-band sketch|a specification of the routing homotopy|and apply the algorithms of Maley [4] or Dai, Kong, and Sato <ref> [3] </ref> to the sketch to finish the routing with fewer bends. The time complexity of our method is dominated by the network flow algorithm in Step 2. Our network structure means that even simple, classical network flow algorithms are likely to perform well in practice.
Reference: 4. <author> F. M. Maley. </author> <title> Single-Layer Wire Routing and Compaction. </title> <publisher> The MIT Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Modify the flow, if necessary, to make it tail-ordered. 4. Use the tail-ordered flow OE to compute a wire layout consistent with OE in each cell. 5. Post-process to remove unnecessary bends in the wire layout <ref> [4, 3] </ref>. Step 5 requires a bit of explanation. The wire layout our algorithm produces may have more bends than necessary. <p> The wire layout our algorithm produces may have more bends than necessary. Reducing the number of bends is desirable for manufacturing reasons; to do this we treat our wire layout as a rubber-band sketch|a specification of the routing homotopy|and apply the algorithms of Maley <ref> [4] </ref> or Dai, Kong, and Sato [3] to the sketch to finish the routing with fewer bends. The time complexity of our method is dominated by the network flow algorithm in Step 2.
Reference: 5. <author> V. P. Roychowdhury, J. Bruck, and T. Kailath. </author> <title> Efficient algorithms for reconfiguration in VLSI/WSI arrays. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 480-489, </pages> <year> 1990. </year>
Reference-contexts: A related problem also arises in VLSI processor arrays, in the context of fault-tolerant reconfiguration <ref> [5] </ref>. The reconfiguration problem in processor arrays is to match a set of N nodes (faulty processors) in an m fi n rectangular grid with nodes on the grid boundary using disjoint paths.
Reference: 6. <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year>
Reference-contexts: In practice, if pins are not located on all sides of the rectangle of via sites, they are located preferentially on the long sides. This means that the average wire length in the solution tends to be short, on the order of the via rectangle width. Dinic's algorithm <ref> [6, p. 102] </ref>, which operates in phases and finds many paths in parallel in each phase, is a good candidate for use on N . A simple implementation runs in time proportional to the total length of all paths, or roughly O (m p n) in our network.
Reference: 7. <author> M.-F. Yu and W. W.-M. Dai. </author> <title> Single-layer fanout routing and routability analysis for ball grid arrays. </title> <booktitle> In Proceedings of IEEE/ACM International Conf. on CAD, </booktitle> <pages> pages 581-586, </pages> <year> 1995. </year>
Reference-contexts: This method is guaranteed to find at least 1= 2 of the maximum possible number of connections <ref> [7] </ref>, but it is limited to the case of a fully populated via grid. 5. [Network flow.] The network flow approach is to solve the routing problem by computing a "flow" on the grid graph, where pins and vias are taken as sources and sinks, and where the grid spacing is
Reference: 8. <author> M.-F. Yu, J. Darnauer, and W. W.-M. Dai. </author> <title> Interchangeable pin routing with application to package layout. </title> <booktitle> In Proceedings of IEEE/ACM International Conf. on CAD, </booktitle> <pages> pages 668-673, </pages> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: One big disadvantage of the "vanilla" network flow method is that the size of the grid graph can be quadratic in the number of pins. Recent work by Yu, Darnauer, and Dai <ref> [8] </ref> uses network flow on a graph derived from a constrained Delaunay triangulation to solve the breakout problem approximately.
References-found: 8

