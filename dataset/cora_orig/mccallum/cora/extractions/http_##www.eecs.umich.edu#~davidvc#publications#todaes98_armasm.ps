URL: http://www.eecs.umich.edu/~davidvc/publications/todaes98_armasm.ps
Refering-URL: http://www.eecs.umich.edu/~davidvc/publications.html
Root-URL: http://www.eecs.umich.edu
Title: Specification and Verification of Pipelining in the ARM2 RISC Microprocessor  
Author: James K. Huggins David Van Campenhout 
Keyword: Categories and Subject Descriptors: B.5.2 [Hardware]: Register transfer level implementation| Design Aids; C.1.1 [Computer Systems Organization]: Processor Architectures|Single Data Stream Architectures; C.0 [Computer Systems Organization]: General|Systems specification methodology General Terms: Verification, Design Additional Key Words and Phrases: formal verification, design verification, pipelined processors, pipelining, abstract state machines, ARM processor  
Address: Ann Arbor, Michigan  
Affiliation: Kettering University, Flint, Michigan and  University of Michigan,  
Abstract: Gurevich Abstract State Machines (ASMs) provide a sound mathematical basis for the specification and verification of systems. An application of the ASM methodology to the verification of a pipelined microprocessor (an ARM2 implementation) is described. Both the sequential execution model and final pipelined model are formalized using ASMs. A series of intermediate models are introduced that gradually expose the complications of pipelining. The first intermediate model is proven equivalent to the sequential model in the absence of structural, control, and data hazards. In the following steps, these simplifying assumptions are lifted one by one, and the original proof is refined to establish the equivalence of each intermediate model with the sequential model, leading ultimately to a full proof of equivalence of the sequential and pipelined models. 
Abstract-found: 1
Intro-found: 1
Reference: <author> B orger, E. and Huggins, J. K. </author> <year> 1998. </year> <title> Abstract State Machines 1988-1998: Commented ASM Bibliography. </title> <journal> Bulletin of EATCS 64, </journal> <month> (Feb.), </month> <pages> 105-127. </pages>
Reference: <author> B orger, E. and Mazzanti, S. </author> <year> 1997. </year> <title> A practical method for rigorously controllable hardware design. In ZUM'97: The Z Formal Specification Notation: </title> <booktitle> 10th International Conference of Z Users, </booktitle> <editor> J. Bowen, M. Hinchey, and D. Till, Eds. </editor> <booktitle> (1997). Springer Lecture Notes in Computer Science 1212, </booktitle> <pages> 151-187. </pages>
Reference: <author> Furber, S. B. </author> <year> 1989. </year> <title> VLSI RISC architecture and organization. </title> <editor> M. </editor> <publisher> Dekker, </publisher> <address> New York. </address>
Reference: <author> Gurevich, Y. </author> <year> 1988. </year> <title> Logic and the challenge of computer science. </title> <booktitle> In Current Trends in Theoretical Computer Science, </booktitle> <editor> E. Borger, Ed., </editor> <address> 1-57. </address> <publisher> Computer Science Press. </publisher>
Reference: <author> Gurevich, Y. </author> <year> 1993. </year> <title> Evolving algebras: An attempt to discover semantics. </title> <booktitle> In Current Trends in Theoretical Computer Science, </booktitle> <editor> G. Rozenberg and A. Salomaa, Eds., </editor> <month> 266-292. </month> <title> World Scientific. </title> <note> (First published in Bulletin of EATCS 43 (Feb.), 264-284.). </note>
Reference: <author> Gurevich, Y. </author> <year> 1995a. </year> <title> Evolving algebras 1993: Lipari guide. In Specification and Validation Methods, </title> <editor> E. Borger, Ed., </editor> <address> 9-36. </address> <publisher> Oxford University Press. </publisher>
Reference: <author> Gurevich, Y. </author> <year> 1995b. </year> <title> Platonism, constructivism, and computer proofs vs. proofs by hand. </title> <journal> Bulletin of EATCS 47, </journal> <month> (Oct.), </month> <pages> 145-166. </pages>
Reference: <author> Hennessy, J. and Patterson, D. </author> <year> 1990. </year> <title> Computer Architecture: A quantitative Approach. </title> <publisher> Morgan Kaufman Publishers, </publisher> <address> San Mateo, Calif. </address> <note> Revised second edition, </note> <year> 1996. </year>
Reference: <author> Hooman, J. </author> <year> 1996. </year> <title> Using PVS for an assertional verification of the RPC-memory specification problem. In Formal Systems Specification; The RPC-Memory Specification Case Study, </title> <type> 275-304. </type> <note> Springer Lecture Notes in Computer Science 1169. 14 J. </note> <author> K. Huggins and D. Van Campenhout Huggins, J. K., Ed. </author> <year> 1998. </year> <title> Abstract State Machine Home Page. </title> <institution> EECS Department, University of Michigan, </institution> <note> http://www.eecs.umich.edu/gasm/. </note>
Reference: <author> Huggins, J. K. and Van Campenhout, D. </author> <year> 1997. </year> <title> Specification and verification of pipelining in the ARM2 RISC microprocessor. </title> <booktitle> In Digest IEEE Int. High Level Design Validation and Test Workshop (1997). </booktitle> <pages> 186-193. </pages>
Reference: <author> Huggins, J. K. and Van Campenhout, D. </author> <year> 1998. </year> <title> Specification and verification of pipelin-ing in the ARM2 RISC microprocessor. </title> <type> Technical Report CSE-TR-371-98, </type> <institution> University of Michigan EECS Department. </institution>
Reference: <author> Jones, R., Dill, D., and Burch, J. </author> <year> 1995. </year> <title> Efficient validity checking for processor verification. </title> <booktitle> In Proc. IEEE International Conference on Computer Aided Design (Nov. </booktitle> <year> 1995). </year> <pages> 2-6. </pages>
Reference: <author> Levitt, J. and Olukotun, K. </author> <year> 1996. </year> <title> Scalable formal verification methodology for pipelined microprocessors. </title> <booktitle> In Proc. 33rd ACM/IEEE Design Automation Conference (1996). </booktitle> <pages> 558-563. </pages>
Reference: <author> McFarland, M. C. </author> <year> 1993. </year> <title> Formal verification of sequential hardware. a tutorial. </title> <journal> IEEE Transactions on Computer-Aided Design 12, </journal> <month> (May), </month> <pages> 633-654. </pages>
Reference: <author> Schellhorn, G. and Ahrendt, W. </author> <year> 1997. </year> <title> Reasoning about abstract state machines: The WAM case study. </title> <journal> Journal of Universal Computer Science 3, </journal> <volume> 4, </volume> <pages> 377-413. </pages>
Reference: <author> VLSI Technology, I. </author> <year> 1990. </year> <title> Acorn RISC machine (ARM) family data manual. </title> <address> Englewood Clifs, N.J.: </address> <publisher> Prentice Hall. </publisher>
Reference: <author> Winter, K. </author> <year> 1997. </year> <title> Model checking for abstract state machines. </title> <journal> Journal of Universal Computer Science 3, </journal> <volume> 5, </volume> <pages> 689-701. </pages>
Reference: <author> Zimmerman, W. and Gaul, T. </author> <year> 1997. </year> <title> On the construction of correct compiler back-ends: An ASM approach. </title> <journal> Journal of Universal Computer Science 3, </journal> <volume> 5, </volume> <month> 504-567. </month> <title> APPENDIX A: SEQUENTIAL MODEL E 1 Rule: </title> <editor> Fetch if FetchOK then Instr := FetchInstr Stage := decode endif where FetchOK abbreviates Stage=Fetch FetchInstr abbreviates MemoryWord(Contents(PC)) MemoryWord(x) abbreviates Word(Memory(x),Memory(x+1),Memory(x+2),Memory(x+3)) Rule: </editor> <title> ExecutePC if ExecuteOK then if not Satisfies(Status,CondCode(Instr)) or not WritesPC(Instr) then </title>
References-found: 18

