URL: http://cobar.cs.umass.edu/pubfiles/callancroftdexa92.ps.gz
Refering-URL: http://cobar.cs.umass.edu/pubfiles/
Root-URL: 
Email: croft@cs.umass.edu  
Title: The INQUERY Retrieval System  
Author: James P. Callan, W. Bruce Croft, and Stephen M. Harding 
Keyword: taining nearly 400,000 documents.  
Address: Amherst, Massachusetts 01003, USA  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: As larger and more heterogeneous text databases become available, information retrieval research will depend on the development of powerful, efficient and flexible retrieval engines. In this paper, we describe a retrieval system (IN- QUERY) that is based on a probabilistic retrieval model and provides support for sophisticated indexing and complex query formulation. INQUERY has been used successfully with databases con 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Eugene Charniak. </author> <title> Baysian networks without tears. </title> <journal> AI Magazine, </journal> <volume> 12(4), </volume> <month> Winter </month> <year> 1991. </year>
Reference-contexts: We conclude by discussing the current research and development issues. 2 The Inference Network Model Bayesian inference networks are probabilistic models of evidential reasoning that have become widely used in recent years <ref> [1; 6] </ref>. A Bayesian inference network, or Bayes net, is a directed acyclic graph (DAG) in which nodes represent propositional variables and arcs represent dependencies. A node's value is a function of the values of the nodes it depends upon.
Reference: [2] <author> Kenneth Church. </author> <title> A stochastic parts program and noun phrase parser for unrestricted text. </title> <booktitle> In Proceedings of the 2nd Conference on Applied Natural Language Processing, </booktitle> <pages> pages 136-143, </pages> <year> 1988. </year>
Reference-contexts: In principle, there is no limit to the number and complexity of concept recognizers that can be added to INQUERY. For example, we are investigating the use of stochastic tagging <ref> [2] </ref> to automatically identify phrases. The main consequence of additional concept recognizers is the overhead that they add to the parsing process.
Reference: [3] <author> Stephen C. Johnson. </author> <title> Yacc: Yet another com-piler compiler. In UNIX Programmer's Manual. Bell Telephone Laboratories, </title> <publisher> Inc, </publisher> <address> Murray Hill, NJ, </address> <year> 1979. </year>
Reference-contexts: The principal use of syntactic analysis in IN- QUERY is to ensure that a document is in the expected format, and to provide error recovery if it is not. All of INQUERY's syntactic analyzers are created by YACC <ref> [3] </ref>. 4.2 Concept Recognizers INQUERY is currently capable of recognizing and transforming into canonical format four types of concepts: numbers, dates, person names and company names. INQUERY also contains a concept recognizer to recognize and record the locations of sentence and paragraph boundaries.
Reference: [4] <author> M. E. Lesk and E. Schmidt. </author> <title> Lex a lexical ana-lyzer generator. In UNIX Programmer's Manual. Bell Telephone Laboratories, </title> <publisher> Inc, </publisher> <address> Murray Hill, NJ, </address> <year> 1979. </year>
Reference-contexts: Concept rec- ognizers tend to be complex [5; 7], so it is desirable to implement them as efficiently as possible. All of INQUERY's concept recognizers are currently finite state automata created by LEX <ref> [4] </ref>. In principal, it is possible to combine the recognizers into a single finite state automaton, however LEX cannot create automata of the required size. The number and date recognizers use gram <p>- mars similar to Mauldin's [5].
Reference: [5] <author> Michael Loren Mauldin. </author> <title> Information retrieval by text skimming. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburg, </institution> <address> PA, </address> <year> 1989. </year>
Reference-contexts: INQUERY also contains a concept recognizer to recognize and record the locations of sentence and paragraph boundaries. Concept rec- ognizers tend to be complex <ref> [5; 7] </ref>, so it is desirable to implement them as efficiently as possible. All of INQUERY's concept recognizers are currently finite state automata created by LEX [4]. <p> In principal, it is possible to combine the recognizers into a single finite state automaton, however LEX cannot create automata of the required size. The number and date recognizers use gram <p>- mars similar to Mauldin's <ref> [5] </ref>. The major difference is INQUERY's use of string arithmetic to avoid roundoff errors in the number recognizer. The recognizers map different expressions of a concept (e.g. 1 million, or 1000000, or 1,000,000) into a canonical format. The company name recognizer is similar to, but less sophisticated than, Rau's [7].
Reference: [6] <author> Judea Pearl. </author> <title> Probabilistic reasoning in intelli-gent systems: Networks of plausible inference. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: We conclude by discussing the current research and development issues. 2 The Inference Network Model Bayesian inference networks are probabilistic models of evidential reasoning that have become widely used in recent years <ref> [1; 6] </ref>. A Bayesian inference network, or Bayes net, is a directed acyclic graph (DAG) in which nodes represent propositional variables and arcs represent dependencies. A node's value is a function of the values of the nodes it depends upon.
Reference: [7] <author> Lisa F. Rau. </author> <title> Extracting company names from text. </title> <booktitle> In Proceedings of the Sixth IEEE Conference on Artificial Intelligence Applications, </booktitle> <year> 1991. </year>
Reference-contexts: INQUERY also contains a concept recognizer to recognize and record the locations of sentence and paragraph boundaries. Concept rec- ognizers tend to be complex <ref> [5; 7] </ref>, so it is desirable to implement them as efficiently as possible. All of INQUERY's concept recognizers are currently finite state automata created by LEX [4]. <p> The major difference is INQUERY's use of string arithmetic to avoid roundoff errors in the number recognizer. The recognizers map different expressions of a concept (e.g. 1 million, or 1000000, or 1,000,000) into a canonical format. The company name recognizer is similar to, but less sophisticated than, Rau's <ref> [7] </ref>. It looks for strings of capitalized words that end with one the legal identifiers that often accompany company names (e.g. "Co", "Inc", "Ltd", or "SpA"). If the company name occurs once with a legal identifier, the recognizer can usually recognize all other occurrences of the name in the document.
Reference: [8] <author> Howard Turtle and W. Bruce Croft. </author> <title> Evaluation of an inference network-based retrieval model. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 9(3), </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: The INQUERY system is based on a form of probabilistic retrieval model called the inference net. This model is powerful in the sense that it can represent many approaches to IR and combine them in a single framework <ref> [8] </ref>. It also provides the ability to specify complex representations of information needs and compare them to document representations. In this paper, we focus on the architecture and implementation of the INQUERY system, which has been designed for experiments with large databases. <p> The notable feature of Bayes nets is that dependencies are not necessarily absolute. Cer- tainty or probability can be represented by weights on arcs. INQUERY is based upon a type of Bayes net called a document retrieval inference network <ref> [9; 8] </ref>. A document retrieval inference network, or inference net, consists of two component networks: one for documents, and one for queries (see Figure 1). Nodes in an inference net are either true or false. <p> The user may browse through the retrieved documents to determine their relevance to the query. A file containing the session results may also be produced. 8 Current Status The INQUERY system has been tested on both standard information retrieval collections <ref> [9; 8] </ref> and a heterogeneous 1 GByte collection. We continue to conduct research on intelligent information retrieval with the INQUERY system, and encourage others to do so.
Reference: [9] <author> Howard R. Turtle and W. Bruce Croft. </author> <title> Efficient probabilistic inference for text retrieval. </title> <booktitle> In RIAO `91 Conference Proceedings, </booktitle> <pages> pages 644-661, </pages> <address> Barcelona, Spain, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The notable feature of Bayes nets is that dependencies are not necessarily absolute. Cer- tainty or probability can be represented by weights on arcs. INQUERY is based upon a type of Bayes net called a document retrieval inference network <ref> [9; 8] </ref>. A document retrieval inference network, or inference net, consists of two component networks: one for documents, and one for queries (see Figure 1). Nodes in an inference net are either true or false. <p> The retrieval engine does its work by instantiating proximity lists at term nodes, and converting such lists to belief lists as required by the structure of the query net, using methods defined in <ref> [9] </ref>. This list may be sorted to produce a ranked list of documents for the user to see. The inference net is evaluated by recursive calls of the main evaluation routine which in turn calls one of many possible node specific evaluation routines. <p> Terms with high collection frequencies are likely to add to processing time due to the length of associated proximity lists. Retrieval performance is much improved over boolean and conventional probabilistic retrieval. The reader is referred to <ref> [9] </ref> for details. 7 Interfaces INQUERY offers batch and interactive methods of query processing, and an application programmers interface (API) to support development of customized front-ends to the retrieval engine. <p> The user may browse through the retrieved documents to determine their relevance to the query. A file containing the session results may also be produced. 8 Current Status The INQUERY system has been tested on both standard information retrieval collections <ref> [9; 8] </ref> and a heterogeneous 1 GByte collection. We continue to conduct research on intelligent information retrieval with the INQUERY system, and encourage others to do so.
References-found: 9

