URL: http://www.cs.nmsu.edu/lldap/download/jicslp/benjumea.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/jicslp/benj.html
Root-URL: http://www.cs.nmsu.edu
Email: fvicente,troyag@lcc.uma.es  
Title: A Static Implementation of the Basic Andorra Model for Distributed Memory Systems  
Author: V. Benjumea J.M. Troya 
Keyword: Distributed Systems, Parallelism, Logic Programming, Andorra Model.  
Address: Spain  
Affiliation: Dpt. Lenguajes Ciencias Computacion Universidad de Malaga  
Abstract: The paper shows an implementation model to support the execution of the Basic Andorra Model on distributed memory systems. A model for exploiting dependent AND parallelism in Prolog programs on distributed systems is also proposed, as well as the way in which it has to be combined with an OR parallel model. A mechanism for dealing with unbound variables in a distributed environment is proposed. In the current implementation, the arrangement of workers in the system in order to mix both models is done in a static way at the beginning of computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. A. M. Ali and R. Karlsson. </author> <title> The Muse Or-parallel Prolog model and its performance. </title> <booktitle> In NACLP'90, </booktitle> <pages> pages 757-776, </pages> <year> 1990. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems <ref> [1, 2, 4, 13] </ref>. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. <p> It is based on the dependent AND parallelism model explained above and in the OR parallel model explained at [4] which is based on the incremental copy mechanism <ref> [1] </ref> for distributed environments. 4.1. Teams The structure that governs the whole system in order to exploit both kinds of parallelism is arranged as follows: systems workers are divided into fixed size teams, each one made up of the same number of workers.
Reference: [2] <author> L. Araujo and J. J. Ruz. </author> <title> PDP: Prolog Distributed Processor for Independent-AND/OR parallel execution of Prolog. </title> <booktitle> In ICLP'94, </booktitle> <pages> pages 142-156. </pages> <year> 1994. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems <ref> [1, 2, 4, 13] </ref>. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism.
Reference: [3] <author> R. Bahgat. Pandora: </author> <title> Non-Deterministic Parallel Logic Programming. </title> <type> PhD thesis, </type> <institution> Imperial College. </institution> <address> London, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism [5, 18, 20], and combinations among them <ref> [3, 10, 12] </ref>. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems.
Reference: [4] <author> V. Benjumea and J. M. Troya. </author> <title> An OR parallel Prolog model for distributed memory systems. </title> <booktitle> In PLILP'93, </booktitle> <volume> 714 LNCS, </volume> <pages> pages 291-301. </pages> <year> 1993. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems <ref> [1, 2, 4, 13] </ref>. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. <p> We also propose a model for the exploitation of dependent AND parallelism in Prolog programs on distributed memory systems, on which our implementation of the Basic Andorra Model is based. The OR parallel model for distributed systems is based on the model proposed in <ref> [4] </ref>, therefore, and due to space limitations, it will not be explained here. At this stage of development, the combination of both models is achieved in a static way in order to exploit both kinds of parallelism. <p> Mixing OR Parallelism with Dependent AND Parallelism This section shows the way in which the system is arranged in order to exploit both kind of parallelism in distributed systems. It is based on the dependent AND parallelism model explained above and in the OR parallel model explained at <ref> [4] </ref> which is based on the incremental copy mechanism [1] for distributed environments. 4.1. <p> Therefore, it is the sharing of OR work, and the corresponding coordination of workers within a team and inter-teams on which the attention must be focused. The way in which the sharing of work was synchronized in the pure OR parallel model can roughly be seen as follows <ref> [4] </ref>: * When a worker ran out of work, it sent to its neighbors a request for work, and moved to the "idle state". * When a worker had got enough work to share, it selected the most suitable idle worker with which to share part of its work. * When
Reference: [5] <author> K. Clark and S. Gregory. </author> <title> Parlog: Parallel programming in logic. </title> <journal> ACM Transactions on Programming Languajes and Systems, </journal> <volume> 8(1) </volume> <pages> 1-49, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism <ref> [5, 18, 20] </ref>, and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. <p> Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. The latter has been the basis on which committed-choice languages <ref> [5, 18, 20] </ref> have been developed, thus providing a natural way o f combining Prolog with this kind of languages. In this paper we present an implementation of the Basic Andorra Model on distributed memory systems.
Reference: [6] <author> J. Crammond. </author> <title> The abstract machine and implementation of parallel Parlog. </title> <type> Technical report, </type> <institution> Imperial College. </institution> <address> London, </address> <month> June </month> <year> 1990. </year> <booktitle> 1996 Compulog Net Meeting on Parallelism and Implementation Technology 15 </booktitle>
Reference-contexts: However, our system is focused to exploit parallelism in distributed memory systems, where remote task creation is expensive, therefore remote task lifetime have to be big enough to make its sharing worthy, so we can not make a correspondence between a goal and a task as JAM <ref> [6] </ref> does, but a task will be rooted in a goal, and it will comprise all computation deriving from that goal, unless that such a work is divided. Thus, a task is a partial resolution, following the s! equential WAM execution model, of a goal. <p> In distributed systems, remote task creation is an expensive operation. For this reason, it is only worthwhile if the task execution time is high enough with respect to its remote creation cost. Most of systems that exploit dependent AND parallelism follow an execution model similar to JAM <ref> [6] </ref>, where in general each goal corresponds to a process, in this way having a big amount of little processes, exploiting so small grain parallelism.
Reference: [7] <author> D. </author> <title> DeGroot. Restricted AND parallelism. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 471-478. </pages> <publisher> ICOT, </publisher> <year> 1984. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism <ref> [7, 11] </ref>, dependent AND parallelism [5, 18, 20], and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13].
Reference: [8] <author> E. W. Dijkstra and C. Scholten. </author> <title> Termination detection for diffusing computations. </title> <journal> Information Processing Letters, </journal> <volume> 11(1) </volume> <pages> 1-4, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: Detection of the End of the Deterministic Phase The algorithm for the detection of the end of the deterministic phase is based on the diffusing computation termination detection method proposed by Dijkstra and Scholten <ref> [8] </ref>, but it has been oriented to workers instead of tasks. In it, each worker is controlled by the worker which has given it work, and each worker controls the workers to which it gave work.
Reference: [9] <author> I. Foster. </author> <title> Parallel implementation of Parlog. </title> <booktitle> In International Conference on Parallel Processing. </booktitle> <address> University Park, </address> <year> 1988. </year>
Reference-contexts: A mechanism for dealing with unbound variables in parallel computations, and more precisely in distributed environments is also proposed. This mechanism is defined as an extension to the Basic Andorra execution model, besides an extension to the Foster's distributed unification scheme <ref> [9] </ref> in order to deal with unbound variables in distributed systems, making it more suitable for our extension of the Basic Andorra execution model. The paper is organized as follows. Section 2. shows the model on which the combination of both kinds of parallelism is made possible. <p> Sharing Data between Parallel Tasks. Distributed Unification This section is based on Foster's distributed unification model for committed choice languages <ref> [9] </ref>, which has been extended to support the mechanism for dealing with unbound variables in a distributed environment. Communication between tasks is achieved by mean of shared logical objects, which are stored in WAM memory areas. <p> Thus, operations explained above and remote object creation must be achieved according to this rule. There are, however, several built-in predicates 9 which achieve non-strict tests, that is, they can sometimes proceed even though their input arguments are unbound <ref> [9] </ref>. However Foster's non-strict read algorithms are oriented to committed choice languages, which have a very poor treatment of unbound variables. Therefore, the non-strict read algorithm is modified in order to support the Basic Andorra Model extended with the unbound variable treatment on distributed systems.
Reference: [10] <author> G. Gupta and M. Hermenegildo. </author> <title> ACE: And/Or-parallel copying-based execution of logic programs. </title> <booktitle> In ICLP'91 Pre-Conference Workshop on Parallel Execution of Logic Programs, </booktitle> <volume> 569 LNCS, </volume> <pages> pages 146-158. </pages> <year> 1991. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism [5, 18, 20], and combinations among them <ref> [3, 10, 12] </ref>. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems.
Reference: [11] <author> M. V. Hermenegildo. </author> <title> An Abstract Machine Based Execution Model for Computer Architecture Design and Efficient Implementation of Logic Programs in Parallel. </title> <type> PhD thesis, </type> <institution> University of Texas, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism <ref> [7, 11] </ref>, dependent AND parallelism [5, 18, 20], and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13].
Reference: [12] <author> S. Janson and S. Haridi. </author> <title> Programming paradigms of the Andorra Kernel Language. </title> <booktitle> In ILPS'91, </booktitle> <pages> pages 167-186. </pages> <year> 1991. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism [5, 18, 20], and combinations among them <ref> [3, 10, 12] </ref>. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems.
Reference: [13] <author> H. F. Leung. </author> <title> Distributed Constraint Logic Programming. </title> <type> PhD thesis, </type> <institution> Imperial College. </institution> <address> London, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems <ref> [1, 2, 4, 13] </ref>. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism.
Reference: [14] <author> P. Lopez, M. Hermenegildo, and S. Debray. </author> <title> Towards granularity based control of parallelism in logic programs. </title> <booktitle> In Proceedings of PASCO'94, </booktitle> <year> 1994. </year>
Reference-contexts: We say partial because this sequential execution can created more tasks by suspending some goals. Although our system tries to follow the sequential WAM execution model as close as possible to support the Basic Andorra Model. This creation of tasks can be leaded by program analysis <ref> [14] </ref> or by user annotations. 3.1.3. The Execution Model The WAM sequential execution model has been modified, in order to support the Basic Andorra Model, to have two main phases, which alternate until the end of computation. <p> These instructions will be generated by program analysis <ref> [14] </ref>, user annotations, etc. and it can be used in conjunction with extended instructions for a higher control of parallel tasks.
Reference: [15] <editor> E. Lusk, D. Warren, S. Haridi, and et al. </editor> <title> The Aurora Or-parallel Prolog system. </title> <type> Technical Report 07, </type> <institution> University of Bristol, </institution> <year> 1990. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism <ref> [15, 21] </ref>, independent AND parallelism [7, 11], dependent AND parallelism [5, 18, 20], and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13].
Reference: [16] <author> V. Santos Costa, D. Warren, and R. Yang. </author> <title> The Andorra-I engine: A parallel implementation of the Basic Andorra model. </title> <booktitle> In ICLP'91. </booktitle> <year> 1991. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model <ref> [16, 17] </ref> modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. The latter has been the basis on which committed-choice languages [5, 18, 20] have been developed, thus providing a natural way o f combining Prolog with this kind of languages. <p> Section 4. presents how the AND parallel model and the OR parallel model can be combined. Section 5. analyses the proposed model. 2. The Basic Andorra Model The Basic Andorra model <ref> [16, 17] </ref> arises as an alternative to the Prolog execution model in order to be able to exploit dependent AND parallelism in addition to the intrinsic OR parallelism in Prolog programs.
Reference: [17] <author> V. Santos Costa, D. Warren, and R. Yang. </author> <title> The Andorra-I preprocessor: Supporting full Prolog on the Basic Andorra model. </title> <booktitle> In ICLP'91. </booktitle> <year> 1991. </year>
Reference-contexts: However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model <ref> [16, 17] </ref> modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. The latter has been the basis on which committed-choice languages [5, 18, 20] have been developed, thus providing a natural way o f combining Prolog with this kind of languages. <p> Section 4. presents how the AND parallel model and the OR parallel model can be combined. Section 5. analyses the proposed model. 2. The Basic Andorra Model The Basic Andorra model <ref> [16, 17] </ref> arises as an alternative to the Prolog execution model in order to be able to exploit dependent AND parallelism in addition to the intrinsic OR parallelism in Prolog programs.
Reference: [18] <author> E. Shapiro. </author> <title> Concurrent Prolog: a progress report. </title> <journal> IEEE Computer, </journal> <volume> 19 </volume> <pages> 44-58, </pages> <year> 1986. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism <ref> [5, 18, 20] </ref>, and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. <p> Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. The latter has been the basis on which committed-choice languages <ref> [5, 18, 20] </ref> have been developed, thus providing a natural way o f combining Prolog with this kind of languages. In this paper we present an implementation of the Basic Andorra Model on distributed memory systems.
Reference: [19] <author> E. Tick. </author> <title> Parallel Logic Programming. </title> <publisher> MIT Press, </publisher> <pages> pages 55-56, </pages> <year> 1991. </year>
Reference-contexts: Moreover, in parallel executions, results can be worse. This problem of dealing with unbound variables in non-static execution order models has already been pointed out in committed choice languages <ref> [19] </ref>. This problem seems reasonable since if a clause has to be selected depending on the value of a variable, or even if the variable is unbound, and there is no a strict execution order, the time when the variable gets bound will affect to the computation.
Reference: [20] <author> K. Ueda. </author> <title> Guarded horn clauses. </title> <type> Technical Report 102, </type> <institution> ICOT, </institution> <address> Tokyo, </address> <year> 1986. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism [15, 21], independent AND parallelism [7, 11], dependent AND parallelism <ref> [5, 18, 20] </ref>, and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13]. <p> Nevertheless, distributed memory systems are becoming more and more important in modern parallel systems. The Basic Andorra model [16, 17] modifies the Prolog execution model in order to transparently exploit OR parallelism combined with dependent AND parallelism. The latter has been the basis on which committed-choice languages <ref> [5, 18, 20] </ref> have been developed, thus providing a natural way o f combining Prolog with this kind of languages. In this paper we present an implementation of the Basic Andorra Model on distributed memory systems.
Reference: [21] <author> D. Warren. </author> <title> Or-parallel execution models of Prolog. </title> <booktitle> In TAPSOFT, 250 LNCS. </booktitle> <year> 1987. </year>
Reference-contexts: 1. Introduction The exploitation of parallelism in Prolog programs has been studied for the last years. Many models have been proposed in order to exploit OR parallelism <ref> [15, 21] </ref>, independent AND parallelism [7, 11], dependent AND parallelism [5, 18, 20], and combinations among them [3, 10, 12]. However, most of them are focused on shared memory systems, but only a few of them have been oriented towards distributed memory systems [1, 2, 4, 13].
Reference: [22] <author> R. Yang. </author> <title> Solving simple substitution ciphers in Andorra-I. </title> <booktitle> In ICLP'89, </booktitle> <pages> pages 113-128. </pages> <year> 1989. </year>
Reference-contexts: The same behavior can be applied to built-in predicates. However, sometimes, determinacy of a goal depends on the fact that a variable is unbound, so let us take a look at the following code inspired by <ref> [22] </ref>: 1.1) send msg (M, Msg) :- var (M), !, M = [Msg| ]. 1.2) send msg ([ |M], Msg) :- send msg (M, Msg). 2.1) get word (W, [], []) :- !, W = []. 2.2) get word (W, [X|Rest], Rest) :- X == ' ', !, W = [].
References-found: 22

