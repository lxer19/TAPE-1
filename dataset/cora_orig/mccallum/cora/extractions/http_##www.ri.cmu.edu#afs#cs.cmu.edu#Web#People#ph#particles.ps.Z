URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/Web/People/ph/particles.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/Web/People/ph/index.html
Root-URL: 
Title: Using Particles to Sample and Control Implicit Surfaces  
Author: Andrew P. Witkin Paul S. Heckbert 
Keyword: CR Categories: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling: Curve, surface, solid, and object representations, Physically based modeling; I.3.6 [Computer Graphics]: Methodologies and Techniques: Interaction techniques; G.1.6 [Numerical Analysis]: Optimization: Constrained Optimization. General Terms: algorithms, design. Additional Key Words and Phrases: physically based modeling, constrained optimization, adaptive sampling, interaction.  
Affiliation: Department of Computer Science Carnegie Mellon University  
Abstract: We present a new particle-based approach to sampling and controlling implicit surfaces. A simple constraint locks a set of particles onto a surface while the particles and the surface move. We use the constraint to make surfaces follow particles, and to make particles follow surfaces. We implement control points for direct manipulation by specifying particle motions, then solving for surface motion that maintains the constraint. For sampling and rendering, we run the constraint in the other direction, creating oater particles that roam freely over the surface. Local repulsion is used to make oaters spread evenly across the surface. By varying the radius of repulsion adaptively, and fissioning or killing particles based on the local density, we can achieve good sampling distributions very rapidly, and maintain them even in the face of rapid and extreme deformations and changes in surface topology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chandrajit Bajaj, Insung Ihm, and Joe Warren. </author> <title> Higher-order interpolation and least-squares approximation using implicit c 1994 ACM 8 Computer Graphics, Proc. SIGGRPAH 94. algebraic surfaces. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 12(4):327347, </volume> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: Piecewise algebraic surfaces are typically defined by a weighted sum of Bernstein polynomials over a lattice of tetrahedra. Least squares methods for fitting surfaces to a set of points are available both for standard algebraic surfaces [22] and for piecewise algebraic surfaces <ref> [1] </ref>. Pratts algorithm can fit a surface with m parameters to n points (n &gt; m) in time O..n C m/m 2 /. These methods are limited to algebraic surfaces, however. Blobby models employ local basis functions, so they are often more intuitive to work with than algebraic surfaces [8].
Reference: [2] <author> David Baraff. </author> <title> Analytical methods for dynamic simulation of non-penetrating rigid bodies. </title> <journal> Computer Graphics, </journal> <volume> 23(3):223 232, </volume> <month> July </month> <year> 1989. </year>
Reference: [3] <author> David Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> Computer Graphics, </journal> <volume> 24(4):1928, </volume> <month> August </month> <year> 1990. </year>
Reference: [4] <author> David Baraff and Andrew Witkin. </author> <title> Dynamic simulation of non-penetrating exible bodies. </title> <journal> Computer Graphics, </journal> <volume> 26(2):303 308, </volume> <year> 1992. </year> <note> Proc. Siggraph 92. </note>
Reference: [5] <author> Ronen Barzel and Alan H. Barr. </author> <title> A modeling system based on dynamic constaints. </title> <journal> Computer Graphics, </journal> <volume> 22:179188, </volume> <year> 1988. </year>
Reference: [6] <author> J. Baumgarte. </author> <title> Stabilization of constraints and integrals of motion in dynamical systems. </title> <booktitle> Computer Methods in Applied Mechanics, </booktitle> <year> 1972. </year>
Reference-contexts: In practice, we might not have valid initial conditions, and numerical integration errors would cause drift over time. We cure these problems using a feedback term <ref> [6] </ref>, setting P F i D F i , where is a feedback constant.
Reference: [7] <author> Thaddeus Beier. </author> <title> Practical uses for implicit surfaces in animation. In Modeling, Visualizing, and Animating Implicit Surfaces (SIGGRAPH 93 Course Notes), </title> <booktitle> pages 20.120.10. </booktitle> <year> 1993. </year>
Reference-contexts: Blobby models employ local basis functions, so they are often more intuitive to work with than algebraic surfaces [8]. In an interactive blobby modeling system, a user might use dials or sliders to adjust the position and radius of each blobby center <ref> [7] </ref>, but arriving at a desired surface is a matter of guesswork, and the real time display is typically just a wireframe, with a higher quality rendering requiring off-line ray tracing or polygonization.
Reference: [8] <author> James F. </author> <title> Blinn. A generalization of algebraic surface drawing. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 1(3):235256, </volume> <month> July </month> <year> 1982. </year>
Reference-contexts: When the building blocks are polynomials in x , y, and z, the resulting surfaces are called algebraic surfaces, and when the building blocks are spherical Gaussian functions, the surfaces are called blobbies <ref> [8] </ref>, soft objects, or metaballs. The use of sums of implicit functions allows blend surfaces to be created [24], and the use of min and max yields the union and intersection of solid objects. Rendering an implicit surface is often difficult. <p> Rendering an implicit surface is often difficult. If a ray tracer is used, intersecting a ray with an implicit surface reduces to one-dimensional root-finding, but this can be very slow for a complex implicit function <ref> [8] </ref>. To exploit the speed of graphics hardware, we would prefer to render using a z-buffer algorithm. This requires converting the implicit surface into polygons or other parametric surfaces. <p> Pratts algorithm can fit a surface with m parameters to n points (n &gt; m) in time O..n C m/m 2 /. These methods are limited to algebraic surfaces, however. Blobby models employ local basis functions, so they are often more intuitive to work with than algebraic surfaces <ref> [8] </ref>. <p> Each of these except F q is standard in any system employing implicit functions. For example, we define the blobby sphere implicit function to be the sum of Gaussians of the distance to each of k center points <ref> [8] </ref>. The parameter vector q consists of 4k C 1 parameters: a bias b plus four parameters for each sphere (a center 3-vector c i and standard deviation s i ).
Reference: [9] <author> Jules Bloomenthal. </author> <title> Polygonization of implicit surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <address> 5:341355, </address> <year> 1988. </year>
Reference-contexts: This approach is often called the marching cubes algorithm. Improvements on this algorithm use adaptive subdivision based on curvature <ref> [9] </ref>. Unfortunately, all of these algorithms will miss small surface features if the initial sampling grid is too coarse, except Snyders, which uses interval arithmetic to guarantee that the topology of the polygonization matches the topology of the real surface [26].
Reference: [10] <author> Jules Bloomenthal. </author> <title> An implicit surface polygonizer. </title> <editor> In Paul Heckbert, editor, </editor> <booktitle> Graphics Gems IV, </booktitle> <pages> pages 324350. </pages> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1994. </year>
Reference: [11] <author> Jules Bloomenthal and Brian Wyvill. </author> <title> Interactive techniques for implicit modeling. </title> <booktitle> Computer Graphics (1990 Symp. on Interactive 3D Graphics), </booktitle> <address> 24(2):109116, </address> <year> 1990. </year>
Reference-contexts: Physically-based approaches to the polygonization of implicit surfaces were pioneered by Figueiredo et al. [12]. One of the two methods they describe starts with particles randomly scattered in 3-D space, subjects them to forces that pull them to the surface (an idea proposed in <ref> [11] </ref>), and uses repulsion between particles to distribute them uniformly over the surface. Their technique uses penalty methods, however, which lead to stiff differential equations whose solution is generally either slow to repel into a nice pattern, or inaccurate at staying on the surface. <p> our simulation method differs from theirs, and our technique supports interactive control of surfaces and incremental sampling of changing surfaces, while theirs does not. 2.2 Control Methods One of the principal disadvantages of implicit modeling relative to parametric modeling is the difficulty of controlling the shape of an implicit surface <ref> [11] </ref>. The effect of the parameters of an implicit surface is often non-intuitive. With algebraic surfaces, for instance, it is hard to predict the surface shape given its coefficients. Modeling is further complicated by the global nature of an algebraic surfaces polynomial basis functions, which prevent local shape control.
Reference: [12] <author> Luiz Henrique de Figueiredo, Jonas de Miranda Gomes, Demetri Terzopoulos, and Luiz Velho. </author> <title> Physically-based methods for polygonization of implicit surfaces. </title> <booktitle> In Graphics Interface 92, </booktitle> <pages> pages 250257, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: We call these particles oaters. Our starting point is the idea that uniform sampling density can be achieved by making the particles repel each other. This approach was used by Turk [29] to resample polygon meshes, and by Figueiredo et al. <ref> [12] </ref> to sample implicit surfaces. Simple repulsion can work quite well for stationary surfaces, but only if a reasonably good initial sampling is available. If large-scale non-uniformities exist, convergence can be extremely slow for even moderate sampling densities. <p> The algorithm of Jevans et al. is an exception. It re-polygonizes only those voxels that change [17]. Physically-based approaches to the polygonization of implicit surfaces were pioneered by Figueiredo et al. <ref> [12] </ref>. One of the two methods they describe starts with particles randomly scattered in 3-D space, subjects them to forces that pull them to the surface (an idea proposed in [11]), and uses repulsion between particles to distribute them uniformly over the surface. <p> It should not be necessary to supply a surface parameterization. The starting point for our approach is the idea, introduced by Turk [28] and by Figueiredo et al. <ref> [12] </ref>, that particles can be made to spread out to uniform density by local repulsion, relying on the finiteness of the surface to limit growth.
Reference: [13] <author> Phillip Gill, Walter Murray, and Margret Wright. </author> <title> Practical Optimization. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1981. </year>
Reference-contexts: Setting Q to zero minimizes the surfaces parametric time derivative. In unconstrained optimization we require that the gradient of the objective function vanish. At a constrained minimum, we require instead that the gradient of the objective function be a linear combination of the gradients of the constraint functions <ref> [13] </ref>. This condition ensures that no further local improvement can be made without violating the constraints. <p> P q Q/ T M. P q Q/. In particular, it is possible to automatically compute a sensitivity matrix, analogous to the mass matrix in mechanics, that compensates for scale differences among the components of F q (see [31].) The classical method of Lagrange multipliers <ref> [13] </ref> solves constrained optimization problems by adding to the gradient of the objective a linear combination of constraint gradients, with unknown coefficients. One then solves simultaneously for the original unknowns, and for the coefficients. In the case of linear constraints and a quadratic objective, this is a linear problem.
Reference: [14] <author> Michael Gleicher and Andrew Witkin. </author> <title> Through-the-lens camera control. </title> <journal> Computer Graphics, </journal> <note> 26(2):331340, 1992. Proc. Siggraph 92. </note>
Reference: [15] <author> Herbert Goldstein. </author> <title> Classical Mechanics. </title> <publisher> Addision Wesley, </publisher> <address> Reading, MA, </address> <year> 1950. </year>
Reference-contexts: Direct manipulation of a blobby surface at interactive speeds has remained an open problem. The differential methods we use to constrain the motion of particles and surfaces are rooted in classical mechanics (see, e.g. <ref> [15] </ref> for a discussion of mechanical constraints and constraint forces) and are closely related to constraint methods used in physically based modeling for computer graphics [5,2,3,32,31,4].
Reference: [16] <author> Huges Hoppe, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> In SIGGRAPH 93 Proceedings, pages 1926, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: Turk used repelling particles on surfaces to uniformly resample a static surface [28] and to simplify a polygonization by reducing the number of polygons [29]. Hoppe et al. also explored mesh simplification, framing it as an optimization problem with penalties for geometric error, number of samples, and edge length <ref> [16] </ref>. Their method did not restrict the points to a surface, however, as Turks and ours do. Szeliski and Tonnesen used oriented particles to model surfaces [27].
Reference: [17] <author> David J. Jevans, Brian Wyvill, and Geoff Wyvill. </author> <title> Speeding up 3-D animation for simulation. </title> <booktitle> In Proc. MAPCON IV (Multi and Array Processors), </booktitle> <pages> pages 94100, </pages> <month> Jan. </month> <year> 1988. </year>
Reference-contexts: These polygonization algorithms were designed for static surfaces; to polygonize a changing surface with them would require beginning from scratch each time. The algorithm of Jevans et al. is an exception. It re-polygonizes only those voxels that change <ref> [17] </ref>. Physically-based approaches to the polygonization of implicit surfaces were pioneered by Figueiredo et al. [12].
Reference: [18] <author> William E. Lorensen and Harvey E. Cline. </author> <title> Marching cubes: A high resolution 3D surface reconstruction algorithm. </title> <booktitle> Computer Graphics (SIGGRAPH 87 Proceedings), </booktitle> <volume> 21(4):163 170, </volume> <month> July </month> <year> 1987. </year>
Reference: [19] <author> Henry Moreton and Carlo Sequin. </author> <title> Functional minimization for fair surface design. </title> <journal> Computer Graphics, </journal> <note> 26(2):167176, 1992. Proc. Siggraph 92. </note>
Reference: [20] <author> Shigeru Muraki. </author> <title> Volumetric shape description of range data using blobby model. </title> <booktitle> Computer Graphics (SIGGRAPH 91 Proceedings), </booktitle> <address> 25(4):227235, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Some recent work has fit blobby models to a set of surface points, but the method is quite slow, one example requiring days of computer time to fit 2900 control points using 1200 parameters <ref> [20] </ref>. Direct manipulation of a blobby surface at interactive speeds has remained an open problem.
Reference: [21] <author> Paul Ning and Jules Bloomenthal. </author> <title> An evaluation of implicit surface tilers. </title> <journal> Computer Graphics and Applications, </journal> <pages> pages 3341, </pages> <month> Nov. </month> <year> 1993. </year>
Reference: [22] <author> Vaughan Pratt. </author> <title> Direct least-squares fitting of algebraic surfaces. </title> <booktitle> Computer Graphics (SIGGRAPH 87 Proceedings), </booktitle> <address> 21(4):145152, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: For these reasons and others, piecewise algebraic surfaces have recently become popular [25]. Piecewise algebraic surfaces are typically defined by a weighted sum of Bernstein polynomials over a lattice of tetrahedra. Least squares methods for fitting surfaces to a set of points are available both for standard algebraic surfaces <ref> [22] </ref> and for piecewise algebraic surfaces [1]. Pratts algorithm can fit a surface with m parameters to n points (n &gt; m) in time O..n C m/m 2 /. These methods are limited to algebraic surfaces, however.
Reference: [23] <author> W.H. Press, B.P. Flannery, S. A. Teukolsky, and W. T. Vetter-ling. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1988. </year>
Reference-contexts: Similar dragging schemes are described in [14,31]. The user can also create and delete control points and adjust the desired repulsion radius O through a slider. The matrix in equation 7 is symmetric and in general positive definite. It thus lends itself to solution by Cholesky decomposition <ref> [23] </ref>, which is easy to implement, robust and efficient. However, the matrix can become singular if inconsistent or redundant constraints are applied, that is if the number of constraints exceeds m, or if some of the F i q s are linear combinations of others. <p> While the former condition is easy to detect by counting, the latter is not. The problem of singularities can be circumvented by using a least-squares technique, or singular value decomposition <ref> [23] </ref>. The system is fast enough to run at interactive rates. Let m be the number of degrees of freedom of the implicit surface, let n be the number of control points, and let r be the number of oaters.
Reference: [24] <author> A. Ricci. </author> <title> A constructive geometry for computer graphics. </title> <journal> Computer Journal, </journal> <volume> 16(2):157160, </volume> <month> May </month> <year> 1973. </year>
Reference-contexts: The use of sums of implicit functions allows blend surfaces to be created <ref> [24] </ref>, and the use of min and max yields the union and intersection of solid objects. Rendering an implicit surface is often difficult.
Reference: [25] <author> T. </author> <title> Sederberg. Piecewise algebraic surface patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <address> 2(1-3):5360, </address> <year> 1985. </year>
Reference-contexts: With algebraic surfaces, for instance, it is hard to predict the surface shape given its coefficients. Modeling is further complicated by the global nature of an algebraic surfaces polynomial basis functions, which prevent local shape control. For these reasons and others, piecewise algebraic surfaces have recently become popular <ref> [25] </ref>. Piecewise algebraic surfaces are typically defined by a weighted sum of Bernstein polynomials over a lattice of tetrahedra. Least squares methods for fitting surfaces to a set of points are available both for standard algebraic surfaces [22] and for piecewise algebraic surfaces [1].
Reference: [26] <author> John M. Snyder. </author> <title> Generative Modeling for Computer Graphics and CAD. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: Unfortunately, all of these algorithms will miss small surface features if the initial sampling grid is too coarse, except Snyders, which uses interval arithmetic to guarantee that the topology of the polygonization matches the topology of the real surface <ref> [26] </ref>. These polygonization algorithms were designed for static surfaces; to polygonize a changing surface with them would require beginning from scratch each time. The algorithm of Jevans et al. is an exception. It re-polygonizes only those voxels that change [17]. <p> Delaunay triangulation in 2-D or 3-D is one possible way to extract topology [12,27]. A more robust alternative would employ Lipschitz conditions and interval arithmetic <ref> [26] </ref>. To preserve the basic advantages of our method, we would require a polygonization algorithm that allows efficient dynamic updates as the surface changes.
Reference: [27] <author> Richard Szeliski and David Tonnesen. </author> <title> Surface modeling with oriented particle systems. </title> <booktitle> Computer Graphics (SIGGRAPH 92 Proceedings), </booktitle> <address> 26(2):185194, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Their method did not restrict the points to a surface, however, as Turks and ours do. Szeliski and Tonnesen used oriented particles to model surfaces <ref> [27] </ref>. Their technique allowed the user to move the particles interactively, employing short-range repulsion and long-range attraction to keep the particles from clumping or ying apart.
Reference: [28] <author> Greg Turk. </author> <title> Generating textures on arbitrary surfaces using reaction-diffusion. </title> <booktitle> Computer Graphics (SIGGRAPH 91 Proceedings), </booktitle> <address> 25(4):289298, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Turk used repelling particles on surfaces to uniformly resample a static surface <ref> [28] </ref> and to simplify a polygonization by reducing the number of polygons [29]. Hoppe et al. also explored mesh simplification, framing it as an optimization problem with penalties for geometric error, number of samples, and edge length [16]. <p> It should not be necessary to supply a surface parameterization. The starting point for our approach is the idea, introduced by Turk <ref> [28] </ref> and by Figueiredo et al. [12], that particles can be made to spread out to uniform density by local repulsion, relying on the finiteness of the surface to limit growth.
Reference: [29] <author> Greg Turk. </author> <title> Re-tiling polygonal surfaces. </title> <booktitle> Computer Graphics (SIGGRAPH 92 Proceedings), </booktitle> <address> 26(2):5564, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: We call these particles oaters. Our starting point is the idea that uniform sampling density can be achieved by making the particles repel each other. This approach was used by Turk <ref> [29] </ref> to resample polygon meshes, and by Figueiredo et al. [12] to sample implicit surfaces. Simple repulsion can work quite well for stationary surfaces, but only if a reasonably good initial sampling is available. If large-scale non-uniformities exist, convergence can be extremely slow for even moderate sampling densities. <p> Turk used repelling particles on surfaces to uniformly resample a static surface [28] and to simplify a polygonization by reducing the number of polygons <ref> [29] </ref>. Hoppe et al. also explored mesh simplification, framing it as an optimization problem with penalties for geometric error, number of samples, and edge length [16]. Their method did not restrict the points to a surface, however, as Turks and ours do.
Reference: [30] <author> William Welch and Andrew Witkin. </author> <title> Variational surface modeling. </title> <booktitle> Computer Graphics, 26(2):157166, 1992. Proc. </booktitle> <address> Sig-graph 92. </address>
Reference: [31] <author> Andrew Witkin, Michael Gleicher, and William Welch. </author> <title> Interactive dynamics. </title> <journal> Computer Graphics, </journal> <volume> 24(2):1121, </volume> <month> March </month> <year> 1990. </year> <booktitle> Proc. 1990 Symposium on 3-D Interactive Graphics. </booktitle>
Reference-contexts: P q Q/ T M. P q Q/. In particular, it is possible to automatically compute a sensitivity matrix, analogous to the mass matrix in mechanics, that compensates for scale differences among the components of F q (see <ref> [31] </ref>.) The classical method of Lagrange multipliers [13] solves constrained optimization problems by adding to the gradient of the objective a linear combination of constraint gradients, with unknown coefficients. One then solves simultaneously for the original unknowns, and for the coefficients.
Reference: [32] <author> Andrew Witkin and William Welch. </author> <title> Fast animation and control of non-rigid structures. </title> <journal> Computer Graphics, </journal> <volume> 24(4):243252, </volume> <month> July </month> <year> 1990. </year> <note> Proc. Siggraph 90. </note>
Reference: [33] <author> Brian Wyvill, Craig McPheeters, and Geoff Wyvill. </author> <title> Data structure for soft objects. </title> <booktitle> The Visual Computer, 2(4):227234, 1986. c 1994 ACM 9 Computer Graphics, Proc. </booktitle> <address> SIGGRPAH 94. </address>
References-found: 33

