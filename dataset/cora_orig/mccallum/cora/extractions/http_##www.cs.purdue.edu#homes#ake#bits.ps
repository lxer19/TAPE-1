URL: http://www.cs.purdue.edu/homes/ake/bits.ps
Refering-URL: http://www.cs.purdue.edu/homes/ake/
Root-URL: http://www.cs.purdue.edu
Email: fjing,bukhres,akeg@cs.purdue.edu  alonso@research.panasonic.com  
Title: Bit-Sequences: A New Cache Invalidation Method in Mobile Environments  
Author: Jin Jing, Omran Bukhres, Ahmed Elmagarmid Rafael Alonso 
Address: West Lafayette, IN 47907 USA  Way Princeton, NJ 08540 USA  
Affiliation: Department of Computer Sciences Purdue University  Matsushita Information Technology Laboratory, 2 Research  
Abstract: In this paper, we address the problem of cache invalidation in mobile environments. We present Bit-Sequences, a new cache invalidation algorithm in which a periodically-broadcast invalidation report is organized as a set of binary bit sequences with an associated set of timestamps. A scalable version of the Bit-Sequences algorithm for large databases, called Multi-Level Bit-Sequences, is also discussed. As demonstrated through simulation experiments, the Bit-Sequences algorithm performs consistently well under conditions of variable update rates/patterns and client disconnection times. Furthermore, the size of the invalidation report in this algorithm is relatively small and is independent of the number of data items to be invalidated.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Sas user's guide. SAS Insititute Inc., Cary, NC, </institution> <year> 1989. </year>
Reference: [2] <author> S. Acharya, R. Alonso, M. Franklin, and S. Zdonik. </author> <title> Broadcast disks: Data management for asymmetric communications environments. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> San Jose, California, </address> <year> 1995. </year>
Reference-contexts: In both cases, only obsolete caches will be invalidated. Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated. The property of data broadcast program which provides improved performance for non-uniformly accessed data was investigated in <ref> [2] </ref>. The authors in [2] also addressed the impact of data broadcast on the client cache fetch and replacement policies. The mobile computing group at Rutgers has investigated techniques for indexing broadcast data [14, 15]. <p> In both cases, only obsolete caches will be invalidated. Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated. The property of data broadcast program which provides improved performance for non-uniformly accessed data was investigated in <ref> [2] </ref>. The authors in [2] also addressed the impact of data broadcast on the client cache fetch and replacement policies. The mobile computing group at Rutgers has investigated techniques for indexing broadcast data [14, 15].
Reference: [3] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In this situation, the "quasi-copy" scheme proposed in <ref> [3] </ref> can be applied. The server can send invalidation information only for the data whose changes have exceeded the threshold specified by the "quasi-copy" 10 data server produces (or updates) data that would be consumed by other clients.
Reference: [4] <author> R. Alonso and H. Korth. </author> <booktitle> Database issues in nomadic computing. In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 388-392, </pages> <year> 1993. </year>
Reference: [5] <author> B. R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> Structuring distributed algorithms for mobile hosts. </title> <booktitle> In Proc. of the 14th International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: servers in our algorithm (as well as the TS, AT, and SIG algorithms) are stateless since they do not have the state information about clients' caches. 3 The Bit-Sequences Algorithm 3.1 Caching Management Model A mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts <ref> [12, 7, 5] </ref>. Some of the fixed hosts, called Mobile Support Stations (MSSs), are augmented with a wireless interface to communicate with mobile hosts, which are located within a radio coverage area called a cell.
Reference: [6] <author> D. Barbara and T. Imielinksi. </author> <title> Adaptive stateless caching in mobile environments: An example. </title> <type> Technical Report MITL-TR-60-93, </type> <institution> Matsushita Information Technology Laboratory, </institution> <year> 1993. </year> <month> 22 </month>
Reference-contexts: To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [6, 8] </ref>. The approach in [6, 8] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [6, 8] </ref>. The approach in [6, 8] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> In the adaptive TS approach, a client must know the exact window size for each item before using an invalidation report. These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches. 2 However, no detailed algorithm was presented in <ref> [6, 8] </ref> to show how the window size information is included in the invalidation report. For this reason, we will not compare this approach with our approach in this paper. The work in [11] discusses the data allocation issues in mobile environments. <p> In general, however, the server may use the feedback information from clients to adaptively decide the data (k + 1)-block (the adaptive algorithms similar to those in <ref> [6, 13] </ref> can be used for the purpose). The absolute address of the "hot" data (k + 1)-block will be included in the next invalidation report. 2.
Reference: [7] <author> D. Barbara and T. Imielinksi. Sleepers and workaholics: </author> <title> Caching strategies for mobile environ-ments. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 1-12, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction In a mobile computing environment, caching of frequently-accessed data items will be an important technique that will reduce contention on the narrow bandwidth wireless channels. However, cache invalidation strategies will be severely hampered by the disconnection and mobility of clients <ref> [7] </ref>. It is difficult for a server to send invalidation messages directly to mobile clients that have cached the data items to be updated, since these clients often disconnect to conserve battery power and are frequently on the move. <p> Therefore, the existing caching algorithms employed in the traditional client-server architecture where the locations and connections of clients do not change may not be readily applicable to mobile environments. In <ref> [7] </ref>, Barbara and Imielinski provided an alternate approach to the problem of invalidating caches in mobile environments. In this approach, a server periodically broadcasts an invalidation report in which the data items that have been changed are indicated. <p> In this case, the client may invalidate a cache which is actually valid. Once a cache is invalidated, the client must seek verification or updating of the cache from the data server. Consider the Broadcasting Timestamps (TS), Amnesic Terminals (AT), and Signatures (SIG) algorithms presented in <ref> [7] </ref>. In the TS algorithm, the invalidation report includes only the information regarding the data items that have been updated within the preceding w seconds. The report includes the names of these items and the timestamps at which they were updated. <p> To minimize latency the first segment is broadcasted more frequently 3 than the rest. An adaptive scheme of broadcasting data was described in [13]. The adaptability is achieved by varying the frequency of broadcast of individual data items according to the frequency of requests. In <ref> [7] </ref>, issues of cache invalidation using a broadcast medium in a wireless mobile environment were first introduced. The SIG, TS, and AT algorithms that use periodically broadcast invalidation reports were proposed for client caching invalidation in the environment. It has been shown in [7] that, when the update rate is low, <p> In <ref> [7] </ref>, issues of cache invalidation using a broadcast medium in a wireless mobile environment were first introduced. The SIG, TS, and AT algorithms that use periodically broadcast invalidation reports were proposed for client caching invalidation in the environment. It has been shown in [7] that, when the update rate is low, the SIG algorithm is best suited for clients that are often disconnected, while the TS algorithm is advantageous for clients that are connected most of time. <p> servers in our algorithm (as well as the TS, AT, and SIG algorithms) are stateless since they do not have the state information about clients' caches. 3 The Bit-Sequences Algorithm 3.1 Caching Management Model A mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts <ref> [12, 7, 5] </ref>. Some of the fixed hosts, called Mobile Support Stations (MSSs), are augmented with a wireless interface to communicate with mobile hosts, which are located within a radio coverage area called a cell. <p> The total bits for the set of sequences will be no more than 2N. Because each sequence is associated with a timestamp, the total bits for these timestamps will be b T log (N). In comparison, the report size in the SIG algorithm can be expressed, as in <ref> [7] </ref>, as 6g (f + 1)(ln (1=ffi)+ln (N )), where g is a parameter used to specify the bound 2 g of the probability of failing to diagnose an invalid cache, ffi is a parameter used to specify the bound of the probability of diagnosing valid cache as invalid, and f <p> The report sizes for the TS and AT algorithms can be expressed, as in <ref> [7] </ref>, as n w (log (N ) + b T ) and n L log (N ), respectively, where n w is the number of data items updated within w seconds and n L is the number of data items updated within L seconds. <p> close to S (N ) p+1 for N &gt;> 1. 5 Simulation Study The performance analysis presented here is designed to compare the effects of different workload parameters, such as disconnection time and query/update pattern, on the relative performance of the basic BS algorithm and the SIG algorithm proposed in <ref> [7] </ref>. The performance metrics in the study include the false invalidation ratio and the buffer hit ratio in clients. <p> To simulate the SIG algorithm, additional algorithm-specified parameters are needed. The setting for the invalidation report size (SigReportSize) in SIG is 24000 (bits) which is computed by the formula 6g (f + 1)(ln (1=ffi) + ln (N )) which is given in <ref> [7] </ref>, with N = 1000, g = 16, ffi = 10 7 , and f = 10 (i.e., the number of differing items that can be diagnosed by SIG). <p> The simulated signatures have been idealized to forestall any possibility of incorrectly diagnosing an outdated cache as valid. In real signatures, the probability of incorrectly diagnosing a cache as valid is bounded by the parameter 2 g <ref> [7] </ref>. The false invalidation ratio is computed by dividing the sum of the false invalidated items by the sum of the total invalidated items in the simulation. The total invalidated data items in a caching algorithm include those data items which are both falsely and legitimately invalidated.
Reference: [8] <author> D. Barbara and T. Imielinksi. Sleepers and workaholics: </author> <title> Caching strategies for mobile environments (extended version). MOBIDATA: An Interactive journal of mobile computing, </title> <type> 1(1), </type> <month> Nov. </month> <year> 1994. </year> <note> Available through the WWW, http://rags.rutgers.edu/journal/cover.html. </note>
Reference-contexts: To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [6, 8] </ref>. The approach in [6, 8] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> To support long client disconnections, an idea of adapting the window size of the TS algorithm was discussed in <ref> [6, 8] </ref>. The approach in [6, 8] adjusts the window size for each data item according to changes in update rates and reference frequencies for the item. This is different from our proposed approach which does not need the feedback information about the access patterns from clients. <p> In the adaptive TS approach, a client must know the exact window size for each item before using an invalidation report. These sizes must therefore be contained in each report for the client to be able to correctly invalidate its caches. 2 However, no detailed algorithm was presented in <ref> [6, 8] </ref> to show how the window size information is included in the invalidation report. For this reason, we will not compare this approach with our approach in this paper. The work in [11] discusses the data allocation issues in mobile environments.
Reference: [9] <author> M. J. Carey, M. J. Franklin, M. Livny, and E. Shekita. </author> <title> Data caching tradeoffs in client-server dbms architectures. </title> <booktitle> In Proceedings of ACM-SIGMOD International Conference on Management of Data, </booktitle> <year> 1991. </year>
Reference-contexts: Also, the study does not include the AT and TS algorithms because they are not applicable to long disconnections of clients. Our model is similar to that employed in <ref> [9, 10] </ref> but has been extended to support message broadcasting over wireless channels. Our model also simplifies aspects of resource management in both client and server so that no CPU and I/O times are modeled in each.
Reference: [10] <author> M. J. Franklin. </author> <title> Caching and memory management in client-server database systems. </title> <type> Ph.D. Thesis, </type> <institution> 1993. University of Wisconsin-Madison. </institution>
Reference-contexts: A comprehensive discussion and comparison of caching algorithms in the conventional client-server architecture can be found in <ref> [10] </ref>. The issue of false invalidation does not exist in this architecture because, as shown in the algorithms discussed in [10], either the server can directly invalidate client caches or clients can query the server for the validation of their caches. In both cases, only obsolete caches will be invalidated. <p> A comprehensive discussion and comparison of caching algorithms in the conventional client-server architecture can be found in <ref> [10] </ref>. The issue of false invalidation does not exist in this architecture because, as shown in the algorithms discussed in [10], either the server can directly invalidate client caches or clients can query the server for the validation of their caches. In both cases, only obsolete caches will be invalidated. Recently, the notion of using a repetitive broadcast medium in wireless environments has been investigated. <p> Also, the study does not include the AT and TS algorithms because they are not applicable to long disconnections of clients. Our model is similar to that employed in <ref> [9, 10] </ref> but has been extended to support message broadcasting over wireless channels. Our model also simplifies aspects of resource management in both client and server so that no CPU and I/O times are modeled in each. <p> Tables 1 presents the database simulation parameters and settings employed in our simulation experiments. Table 2 describes the range of workloads associated with access patterns considered in this study. These workloads are very similar to those described under the same names in <ref> [10] </ref>. The UNIFORM workload is a low-locality workload in which caching is not expected to reap significant benefits. The HOTCOLD workload has a high degree of locality of client queries.
Reference: [11] <author> Y. Huang, P. Sistla, and O. Wolfson. </author> <title> Data replication for mobile computers. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, Minessota, </address> <year> 1994. </year>
Reference-contexts: For this reason, we will not compare this approach with our approach in this paper. The work in <ref> [11] </ref> discusses the data allocation issues in mobile environments. The algorithms proposed in [11] assume that servers are stateful since they know about the state of the clients' caches. <p> For this reason, we will not compare this approach with our approach in this paper. The work in <ref> [11] </ref> discusses the data allocation issues in mobile environments. The algorithms proposed in [11] assume that servers are stateful since they know about the state of the clients' caches. The algorithms use this information to decide whether a client can hold a cache copy or not to minimize the communication cost in wireless channels.
Reference: [12] <author> T. Imielinski and B. R. Badrinath. </author> <title> Wireless mobile computing : Challenges in data management. </title> <journal> Communication of ACM, </journal> <volume> 37(10), </volume> <year> 1994. </year>
Reference-contexts: servers in our algorithm (as well as the TS, AT, and SIG algorithms) are stateless since they do not have the state information about clients' caches. 3 The Bit-Sequences Algorithm 3.1 Caching Management Model A mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts <ref> [12, 7, 5] </ref>. Some of the fixed hosts, called Mobile Support Stations (MSSs), are augmented with a wireless interface to communicate with mobile hosts, which are located within a radio coverage area called a cell. <p> client 1 to 200 ColdQueryBounds all DB remainder of DB remainder of DB HotQueryProb - 0.8 0.8 HotUpdateBounds - 1 to 200 ColdUpdateBounds all DB all DB remainder of DB HotUpdateProb - 0.8 Table 2: Workload Parameter Settings likely to be one of the typical applications in mobile computing environments <ref> [12] </ref>. To simulate the SIG algorithm, additional algorithm-specified parameters are needed.
Reference: [13] <author> T. Imielinski and S. Vishwanath. </author> <title> Adaptive wireless information systems. </title> <booktitle> In Proceedings of SIGDBS (Special Interest Group in DataBase Systems) Conference, </booktitle> <address> Tokyo, Japan, </address> <year> 1994. </year>
Reference-contexts: The approach, called pyramid broadcast, splits an object into a number of segments of increasing sizes. To minimize latency the first segment is broadcasted more frequently 3 than the rest. An adaptive scheme of broadcasting data was described in <ref> [13] </ref>. The adaptability is achieved by varying the frequency of broadcast of individual data items according to the frequency of requests. In [7], issues of cache invalidation using a broadcast medium in a wireless mobile environment were first introduced. <p> In general, however, the server may use the feedback information from clients to adaptively decide the data (k + 1)-block (the adaptive algorithms similar to those in <ref> [6, 13] </ref> can be used for the purpose). The absolute address of the "hot" data (k + 1)-block will be included in the next invalidation report. 2.
Reference: [14] <author> T. Imielinski, S. Vishwanath, and B. R. Badrinath. </author> <title> Energy efficient indexing on air. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <address> Minneapolis, Minessota, </address> <year> 1994. </year>
Reference-contexts: The authors in [2] also addressed the impact of data broadcast on the client cache fetch and replacement policies. The mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [14, 15] </ref>. The main motivation of this work has been to investigate ways to reduce battery power consumption at the clients for the access of broadcast data. In our approach, the invalidation report is organized in a bit indexing structure in order to save the space of broadcast channels.
Reference: [15] <author> T. Imielinski, S. Vishwanath, and B. R. Badrinath. </author> <title> Power efficient filtering of data on the air. </title> <booktitle> In Proceedings of the International Conference of EDBT (Extending DataBase Technology), </booktitle> <year> 1994. </year>
Reference-contexts: The authors in [2] also addressed the impact of data broadcast on the client cache fetch and replacement policies. The mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [14, 15] </ref>. The main motivation of this work has been to investigate ways to reduce battery power consumption at the clients for the access of broadcast data. In our approach, the invalidation report is organized in a bit indexing structure in order to save the space of broadcast channels.
Reference: [16] <author> H. Schwetman. </author> <note> Csim user's guide (version 16). </note> <institution> MCC Corporation, </institution> <year> 1992. </year>
Reference-contexts: Such a simplification is appropriate to an assessment of the false invalidation ratio and the buffer hit ratio. All simulations 15 were performed on Sun Sparc Workstations running SunOS and using a CSIM simulation package <ref> [16] </ref>. 5.1 System Configuration For simplicity, we model a single server system that services multiple mobile clients. At the server, a single stream of updates is generated. These updates are separated by an exponentially distributed update interarrival time. The server will broadcast an invalidation report periodically.
Reference: [17] <author> S. Vishwanath and T. Imielinski. </author> <title> Pyramid broadcasting for video on demand service. </title> <booktitle> In Proceedings of the IEEE Multimedia Computing and Networks Conference, </booktitle> <address> San Jose, California, </address> <year> 1995. </year>
Reference-contexts: In our approach, the invalidation report is organized in a bit indexing structure in order to save the space of broadcast channels. An approach of broadcasting data for video on demand has been addressed in <ref> [17] </ref>. The approach, called pyramid broadcast, splits an object into a number of segments of increasing sizes. To minimize latency the first segment is broadcasted more frequently 3 than the rest. An adaptive scheme of broadcasting data was described in [13].
References-found: 17

