URL: ftp://ftp.cag.lcs.mit.edu/pub/virtual_wires/tcad.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/vwires/papers/index.html
Root-URL: 
Title: Logic Emulation with Virtual Wires  
Author: Jonathan Babb, Russell Tessier, Matthew Dahl, Silvina Hanono, David Hoki, and Anant Agarwal 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: Logic emulation enables designers to functionally verify complex integrated circuits prior to chip fabrication. However, traditional FPGA-based logic emulators have poor inter-chip communication bandwidth, commonly limiting gate utilization to less than 20 percent. Global routing contention mandates the use of expensive crossbar and PC-board technology in a system of otherwise low-cost, commodity parts. Even with crossbar technology, current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). Virtual Wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires and pipelining these connections at the maximum clocking frequency of the FPGA. The resulting increase in bandwidth allows effective use of low dimension, direct interconnect. The size of the FPGA array can be decreased as well, resulting in low cost logic emulation. This paper covers major contributions of the MIT Virtual Wires project. In the context of a complete emulation system, we analyze phase-based static scheduling and routing algorithms, present Virtual Wires synthesis methodologies, and overview an operational prototype with 20K-gate boards. Results, including in-circuit emulation of a SPARC microprocessor, indicate that Virtual Wires eliminate the need for expensive crossbar technology while increasing FPGA utilization beyond 45 percent. Theoretical analysis predicts that Virtual Wires emulation scales with FPGA size and average routing distance, while traditional emulation does not. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal. VirtualWires: </author> <title> A technology for massive multi-FPGA systems. Technical report, Virtual Machine Works, </title> <publisher> Inc., </publisher> <month> December </month> <year> 1994. </year> <note> http://www.ikos.com/products/virtualwires.ps. </note>
Reference-contexts: Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] <ref> [1] </ref>, where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs.
Reference: [2] <author> A. Agarwal, J. Kubiatowicz, D. Kranz, B.-H. Lim, D. Yeung, G. D'Souza, and M. Parkin. Sparcle: </author> <title> An evolutionary processor design for multiprocessors. </title> <journal> IEEE Micro, </journal> <volume> 13(3) </volume> <pages> 48-61, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The first design, Palindrome, is a simple 15K gate systolic array used for debugging the system and calibrating the various Virtual Wires architectures. The remaining two designs are actual chips from the MIT Alewife Multiprocessor. Sparcle <ref> [2] </ref>, is an 18K gate SPARC processor with some modifications to enhance its usefulness in a multiprocessor. The Cache Controller and Memory Management Unit (CMMU) [22] is a complex 86K gate controller.
Reference: [3] <institution> Altera Corporation, </institution> <address> 2610 Orchard Parkway, San Jose, CA 95124. </address> <note> Flex 8000 Handbook, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: Partition gate count is scaled by a factor of two to get FPGA equivalent gates with an assumed mapping efficiency of 50%. On the same curve we plot the pin and gate capacity of target FPGAs: the Xilinx 3000 and 4000 series [40], the Altera Flex 8000 series <ref> [3] </ref>, and the Atmel 6000 series [5]. For equal average gate counts in the benchmark partitions and FPGA devices, the required average pin counts for partitions are much greater than the available pin capacity of the FPGAs.
Reference: [4] <author> J. M. Arnold, D. A. Buell, and E. G. Davis. </author> <title> Splash 2. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 316-324, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA [35], and Dharma [11]. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 <ref> [4] </ref>, and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [5] <author> Atmel Corporation. </author> <title> Atmel Configurable Logic Design and Application Book, </title> <year> 1994. </year>
Reference-contexts: On the same curve we plot the pin and gate capacity of target FPGAs: the Xilinx 3000 and 4000 series [40], the Altera Flex 8000 series [3], and the Atmel 6000 series <ref> [5] </ref>. For equal average gate counts in the benchmark partitions and FPGA devices, the required average pin counts for partitions are much greater than the available pin capacity of the FPGAs. Pin limits set a hard upper bound on the maximum usable gate count any FPGA gate count can provide.
Reference: [6] <author> J. Babb. </author> <title> Virtual Wires: Overcoming pin limitations in FPGA-based logic emulation. </title> <type> Master's thesis, </type> <institution> EECS Deptartment, MIT, Department of Electrical Engineering and Computer Science, </institution> <month> February </month> <year> 1994. </year> <note> Also as MIT/LCS TR-586, Novem-ber 1993. </note>
Reference-contexts: Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] <ref> [6] </ref> in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced.
Reference: [7] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming pin limitations in FPGA-based logic emulators. </title> <booktitle> In Page 19 Proceedings IEEE Workshop on FPGA-based Custom Com--puting Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, </note> <month> January </month> <year> 1993. </year>
Reference-contexts: These files are input to the FPGA-specific place-and-route stage which creates the emulator bitstream. 3.2 Shift Register Architectures We now compare three shift register architectures synthesiz-able to Xilinx 4000 FPGAs. Full Shift Register The full shift register architecture was originally proposed as a proof-of-concept Virtual Wires implementation <ref> [7] </ref>. This architecture consists of identical input and output shift loops (Figure 17). In output mode, shift loops load emulated signal states at the beginning of each phase and shift these states out serially onto a routed physical connection at the microcycle rate. <p> Note that to achieve these speeds, FPGAs with the required pin counts must be used to maintain the same critical path and route lengths. It is beyond our partitioning capability to map Sparcle onto 32-pin mesh connected FPGAs without Virtual Wires. However, in our earlier work <ref> [7] </ref> we did partition a version of Sparcle without memory or external I/Os onto 100-pin, 5000-gate FPGAs. We needed at least 31 FPGAs if they were fully connected, and greater than 100 FPGAs if they were connected in a torus. <p> Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb <ref> [7] </ref> [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced.
Reference: [8] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Virtual Wires cost: G v = V 0 + V 1 dK c G c Furthermore, d = 1 for a crossbar, and a derived upper limit to the average wire length for a mesh as a function of the total number of FPGAs, N , as reported by Bakoglu <ref> [8] </ref>, is: d = 9 7 4 B c 0:5 1 1 N B c 1:5 1 N B c 1 ; (12) Thus given Rent's parameters for a given design, the average Virtual Wires overhead can be expressed strictly in terms of circuit and FPGA gate counts.
Reference: [9] <author> T. Bauer. </author> <title> The Design of an Efficient Hardware Subroutine Protocol for FPGAs. </title> <type> Master's thesis, </type> <institution> EECS Deptartment, MIT, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: array replaces a piece of a simulation model and connects to the software simulation environment by remote calls through the host interface. * Hardware subroutines: FPGA array implements a Verilog version of a subroutine in a C program and connects to the software by remote calls through the host interface <ref> [9] </ref>. Page 4 Section 5 describes our results for both in-circuit emulation and simulation acceleration of the Sparcle benchmark on our system, including booting a multiprocessor operating system.
Reference: [10] <author> D. Bertsekas and R. Gallagher, </author> <title> editors. Data Networks. </title> <publisher> Pren-tice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: Finally, Virtual Wires are similar to virtual channels [15], which decouple resource allocation in dynamically-routed networks, and to virtual circuits <ref> [10] </ref> found in a connection-oriented network. 8 Conclusions We have illustrated the benefits of logic emulation with Virtual Wires as a verification alternative. Previous pin limitations encountered when mapping designs onto multi-FPGA systems are now overcome.
Reference: [11] <author> N. Bhat. </author> <title> Novel Techniques for High Performance Field Programmable Logic Devices. </title> <type> PhD thesis, </type> <institution> University of Cali-fornia, Berkeley, Electronic Research Laboratory, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA [35], and Dharma <ref> [11] </ref>. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [12] <author> J. Cocke and R. E. Miller. </author> <title> Configurable computer system. </title> <type> Technical Report 9, IBM Technical Disclosure Bulletin, </type> <month> Feb. </month> <year> 1973. </year>
Reference-contexts: For example, the G f = 100K curve has a utilization of 33 percent when d = 16. Thus Virtual Wires enable emulation to scale to a gigantic number of FPGAs using simple direct-connected topologies. 7 Related Work IBM's Yorktown Simulation Engine [31] and the earlier Logic Simulation Engine <ref> [12] </ref>, based on concepts of John Cocke, used reconfiguring digital hardware to accelerate logic simulation. Actual logic emulation was first explored in cellular array research, such as Frank Manning's 1975 thesis [29], even before FPGAs existed.
Reference: [13] <author> M. Dahl. </author> <title> An implementation of the Virtual Wires interconnect scheme. </title> <type> Master's thesis, </type> <institution> EECS Deptartment, MIT, Department of Electrical Engineering and Computer Science, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] <ref> [13] </ref> and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches.
Reference: [14] <author> M. Dahl, J. Babb, R. Tessier, S. Hanono, D. Hoki, and A. Agarwal. </author> <title> Emulation of a SPARC microprocessor with the MIT Virtual Wires Emulation System. </title> <booktitle> In Proceedings IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 14-22, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl <ref> [14] </ref> [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches.
Reference: [15] <author> W. J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(2), </volume> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation. Finally, Virtual Wires are similar to virtual channels <ref> [15] </ref>, which decouple resource allocation in dynamically-routed networks, and to virtual circuits [10] found in a connection-oriented network. 8 Conclusions We have illustrated the benefits of logic emulation with Virtual Wires as a verification alternative. Previous pin limitations encountered when mapping designs onto multi-FPGA systems are now overcome.
Reference: [16] <author> A. Dehon and S. Perentz. </author> <title> Transit Note No. 67: Transit Sbus Interface. </title> <type> Technical report, </type> <institution> Artificial Intelligence Laboratory, MIT, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: To provide a higher bandwidth interface to the host, a seventeenth Xilinx XC4005 chip serves as an intermediary between an Sbus interface card located in the host SparcSta-tion and the Xilinx array. This chip is capable of transferring words of data between the Sbus card <ref> [16] </ref> and the eight bit North port of the Xilinx chip in the upper right position of the array. 4.4 Application The prototype system allows the logical behavior of one circuit component to be emulated while the rest of the system is simulated.
Reference: [17] <author> S. Hanono. </author> <title> Innerview hardware debugger: A logic analysis tool for the Virtual Wires Emulation System. </title> <type> Master's thesis, </type> <institution> EECS Deptartment, MIT, Department of Electrical Engineering and Computer Science, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: After FPGA configuration, the emulation system exchanges data with the target system at each emulation clock while performing internal evaluation at FPGA device speeds. In both modes of operation, simulation and emulation, the usability of the system is enhanced by our InnerView Hardware Debugger <ref> [17] </ref>. This tool consists of host software, embedded controller software, and FPGA circuitry which extracts the emulation state from all FPGAs and coordinates this state with the internal register names of the design under emulation. <p> Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono <ref> [17] </ref>. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches.
Reference: [18] <author> S. Hauck. </author> <title> Multi-FPGA Systems. </title> <type> PhD thesis, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: With this permutation a signal passing through the chip need only be routed the length of several pins rather than across the body of the entire chip. Two Page 12 pin groups are located along each side of the package. This connection scheme is analyzed in detail in <ref> [18] </ref>. 4.2 Scaling to Multiple-Board Systems Each Virtual Wires prototype board can function as either a stand-alone system or as part of a larger group of boards. Multiple-board systems are constructed by connecting individual boards together to form a two-dimensional mesh (Figure 24). <p> Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck <ref> [18] </ref> and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17].
Reference: [19] <author> InCA Inc. </author> <title> Concept Silicon Reference Manual, </title> <month> Nov. </month> <year> 1992. </year> <note> Version 1.1. </note>
Reference-contexts: With Virtual Wires, the total gate count, including the overhead of Virtual Wires multiplexing logic, must be no greater than the target FPGA gate count. In the MIT implementation, we used the InCA Concept Silicon partitioner <ref> [19] </ref>. This partitioner performs K-way partitioning with min-cut and clustering techniques. Page 3 Global Placer: Individual circuit partitions must be placed into specific FPGAs. An ideal placement minimizes system communication, thus requiring less routing resources. <p> In conjunction with the scheduling and synthesis algorithms described in this paper, we used the Synopsys Design Compiler [33] for translation and mapping, the InCA Concept Silicon partitioner <ref> [19] </ref> for partitioning, our simulated-annealing-based placer, and the standard Xilinx-provided tools for FPGA-specific place and route. Compile time is roughly 3 to 4 hours on a Sparc-Station 10, with 90 percent of this time consumed by the vendor specific FPGA compile.
Reference: [20] <author> D. Jones and D. Lewis. </author> <title> A time-multiplexed FPGA architecture for logic emulation. </title> <booktitle> In Proceedings of the Third Cana-dian Workshop on Field-Programmable Devices, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA <ref> [20] </ref>, Pegasus [28], DPGA [35], and Dharma [11]. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [21] <author> S. Kirkpatrick, C. D. Gellatt, and M. P. Vecchi. </author> <title> Simulated annealing. </title> <journal> Science, </journal> <volume> 220, </volume> <year> 1983. </year>
Reference-contexts: This partitioner performs K-way partitioning with min-cut and clustering techniques. Page 3 Global Placer: Individual circuit partitions must be placed into specific FPGAs. An ideal placement minimizes system communication, thus requiring less routing resources. We wrote a simple placer based on simulated annealing <ref> [21] </ref> to minimize total Manhattan wire length. Global Router: In traditional emulation, inter-FPGA communication is established with a global routing phase. If crossbars are employed, this phase must also determine the routing configuration for each crossbar as well as pin-assignments of partition I/Os to FPGA pins.
Reference: [22] <author> J. Kubiatowicz. </author> <title> User's manual for the A-1000 communications and memory management unit. ALEWIFE Memo No. </title> <type> 19, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: The remaining two designs are actual chips from the MIT Alewife Multiprocessor. Sparcle [2], is an 18K gate SPARC processor with some modifications to enhance its usefulness in a multiprocessor. The Cache Controller and Memory Management Unit (CMMU) <ref> [22] </ref> is a complex 86K gate controller. For each design, our statistics include the LSI Logic LCA100K [26] gate count, the number of logic elements, the element complexity (gate count / element count), the number of on-chip memory bits, and the total number of nets connecting elements.
Reference: [23] <author> B. Landman and R. Russo. </author> <title> On a pin versus block relationship for partitions of logic graphs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(12), </volume> <month> Dec. </month> <year> 1971. </year>
Reference-contexts: Rent of IBM. Rent prepared two internal memoranda containing the log plots of pins versus gates for portions of the IBM series 1400 computers <ref> [23] </ref>. The basic result is the following equation: Rent 0 s Rule : P = KG B (6) where P is the number of pins, G is the number of gates, K is a Rent's constant, and B is Rent's exponent. As with most rules, it has limitations.
Reference: [24] <author> J. Li and C.-K. Cheng. </author> <title> Routability improvement using dynamic interconnect architecture. </title> <booktitle> In Proceedings, IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <address> Napa, CA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In <ref> [24] </ref>, multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA [35], and Dharma [11].
Reference: [25] <author> C.-C. Lin, D. Chang, Y.-L. Wu, and M. Marek-Sadowska. </author> <title> Time-multiplexed routing resources for FPGA design. </title> <booktitle> In Proceedings, 1996 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Monterey, CA, </address> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In <ref> [25] </ref>, the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA [35], and Dharma [11].
Reference: [26] <institution> LSI Logic Corporation. 0.7-Micron Array-Based Products Databook, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Commercial and public domain tools are available for generic source-to-source translation. At MIT we used both Verilog and LSI logic formats. Tech Mapper: The translated netlist is still specified in terms of the source technology library forexample LSI Logic's LCA100K technology <ref> [26] </ref>. Before emulation, the netlist must be mapped to a target library of FPGA primitives. Although commercial and public domain tools are also available for mapping, our simple and fast technique is to create a mapping library which describes each source primitive in terms of primitives in the target library. <p> Sparcle [2], is an 18K gate SPARC processor with some modifications to enhance its usefulness in a multiprocessor. The Cache Controller and Memory Management Unit (CMMU) [22] is a complex 86K gate controller. For each design, our statistics include the LSI Logic LCA100K <ref> [26] </ref> gate count, the number of logic elements, the element complexity (gate count / element count), the number of on-chip memory bits, and the total number of nets connecting elements.
Reference: [27] <author> V. MaheshWari, J. Darnauer, J. Ramireza, and W. W.-M. Dai. </author> <title> Design of FPGAs with area I/O for field programmable MCM. </title> <booktitle> In FPGA '95, </booktitle> <address> Monterey, California, </address> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: This discrepancy will only get worse as technology scales; current trends indicate that available gate counts are increasing faster than available pin counts. Future breakthroughs in area I/O <ref> [27] </ref> may partially address this problem for FPGA packaging, but will leave open the more difficult issues of inter-board and system-level communication. Additionally, any new technology will be challenged to keep up as minimum feature size decreases faster than required bonding area.
Reference: [28] <author> L. Maliniak. </author> <title> Hardware Emulation Draws Speed from Innovative 3D Parallel Processing Based on Custom ICs. </title> <booktitle> Electronic Design, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus <ref> [28] </ref>, DPGA [35], and Dharma [11]. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [29] <author> F. P. Manning. </author> <title> Automatic Test, Configuration, and Repair of Cellular Arrays. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> June </month> <year> 1975. </year>
Reference-contexts: Actual logic emulation was first explored in cellular array research, such as Frank Manning's 1975 thesis <ref> [29] </ref>, even before FPGAs existed. His work explicitly shows how an embedded machine in programmable logic cells could be used in place of an actual machine. Since this work, FPGA-based logic emulation systems have been developed for design complexity ranging from several thousand to several million gates.
Reference: [30] <author> H. Owen, U. Khan, and J. Hughes. </author> <title> FPGA-based ASIC hardware emulator architectures. </title> <booktitle> In Proc. International Workshop on Field Programmable Logic and Applications, </booktitle> <address> Oxford, UK, </address> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen <ref> [30] </ref>. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17].
Reference: [31] <author> G. F. Pfister. </author> <title> The Yorktown Simulation Engine: Introduction. </title> <booktitle> In Proc. 19th Design Automation Conference, </booktitle> <pages> pages 51-54. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1982. </year>
Reference-contexts: For example, the G f = 100K curve has a utilization of 33 percent when d = 16. Thus Virtual Wires enable emulation to scale to a gigantic number of FPGAs using simple direct-connected topologies. 7 Related Work IBM's Yorktown Simulation Engine <ref> [31] </ref> and the earlier Logic Simulation Engine [12], based on concepts of John Cocke, used reconfiguring digital hardware to accelerate logic simulation. Actual logic emulation was first explored in cellular array research, such as Frank Manning's 1975 thesis [29], even before FPGAs existed.
Reference: [32] <author> C. Selvidge, A. Agarwal, M. Dahl, and J. Babb. TIERS: </author> <title> Topology independent pipelined routing and scheduling for VirtualWire compilation. </title> <booktitle> In 1995 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: The first phase of this approach is a scheduling and routing algorithm. Our phase-based methodology suffices to prove the concept of Virtual Wires scheduling and is within a factor of two of more optimal algorithms presented in recent literature <ref> [32] </ref>. Before describing the scheduling algorithms, let us first introduce the basic operating principles of Virtual Wires. 2.1 Phase-Based Operating Principles The emulation clock period is the clock period of the logic design being emulated. <p> For simplicity, we limited our approach to synchronous logic with a single global emulation clock. Any asynchronous signals cannot be statically-routed and therefore must be hard-wired to dedicated FPGA pins. Virtual Wires can be extended to multiple clocks <ref> [32] </ref> and gated clocks, as well as certain types of asynchronous logic, such as multiple asynchronous clock domains. Page 5 2.2 Definition of Dependence and Depth Two timing analysis computations, dependence and depth, aid in Virtual Wires scheduling. Both dependence and depth apply to inter-partition wires. <p> These algorithms can be improved by scheduling at the granularity of a single microcycle and eliminating the phase barriers altogether. The advantages of such improvements <ref> [32] </ref> include: * possible initiation of computation and subsequent routing as early as one microcycle after a signal arrives at a destination rather than waiting for the following phase, * potential overlapping of computation with communication in different parts of the system rather than execution in exclusive time spans, * support <p> This overhead is reduced somewhat by placing many of the additional signals on global clock nets. Also, strategic use of the I/O pad registers for pipelining recovers speed. Finally, this architecture can support the more flexible Virtual Wires scheduling methods described in <ref> [32] </ref>. Page 11 Comparisons Table 1 compares each architecture in implementing the smallest benchmark circuit, Palindrome (see Section 5.1), on the 16-FPGA demonstration hardware presented in Section 5. Speed is measured in terms of the CLK speed. <p> The results in the remainder of this paper are based on the basic full shift register scheme, although we believe the addressable scheme to be the best of the three schemes because it can support more sophisticated scheduling algorithms as described in <ref> [32] </ref>. 4 Demonstration Hardware System Our demonstration hardware building block is a scalable emulation board [36] which is inexpensive to manufacture and Resource Design Total Logic Logic (Virtual Overhead) Fig 17 Fig 19 Fig 20 Packed CLBs 54 79 80 65 (Total) (32%) (33%) (17%) Lookup Tables 115 165 167 131 <p> The FPGA explosion is correspondingly worse for the high communication A-1000 benchmark. As a final comparison, note that reported results for application of the TIERS Virtual Wires routing algorithm <ref> [32] </ref> to Sparcle claim microcycle counts as low as 40 for a mesh, and 16 for other direct-connected topologies. <p> Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. <ref> [32] </ref> [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches. In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs.
Reference: [33] <author> Synopsys, Inc. </author> <title> Command Reference Manual, </title> <note> Version 3.0, </note> <month> Dec </month> <year> 1992. </year>
Reference-contexts: In conjunction with the scheduling and synthesis algorithms described in this paper, we used the Synopsys Design Compiler <ref> [33] </ref> for translation and mapping, the InCA Concept Silicon partitioner [19] for partitioning, our simulated-annealing-based placer, and the standard Xilinx-provided tools for FPGA-specific place and route.
Reference: [34] <author> R. R. T. Cormen, C. Leiserson. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Before the beginning of each phase, a reservation matrix, Reserve [i; j], is initialized to the number of physical connections between FPGAs i and j in the emulator topology. Route applies Dijkstra's shortest path algorithm <ref> [34] </ref> to channel availability, Avail [i; j] = (Reserve [i; j] 6= 0), to determine the shortest path between the source and destination FPGAs.
Reference: [35] <author> E. Tau, I. Eslick, D. Chen, J. Brown, and A. DeHon. </author> <title> A first generation DPGA implementation. </title> <booktitle> In Proceedings of the Third Canadian Workshop on Field-Programmable Devices, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: In [24], multiplexing is extended to field-programmable interconnect devices called dynamic FPIDs. In [25], the resources inside the FPGA are multiplexed to reduce internal routing requirements. Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA <ref> [35] </ref>, and Dharma [11]. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) [39], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [36] <author> R. Tessier, J. Babb, M. Dahl, S. Hanono, and A. Agarwal. </author> <title> The Virtual Wires Emulation System: A gate-efficient ASIC prototyping environment. </title> <booktitle> In 1994 ACM International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: paper are based on the basic full shift register scheme, although we believe the addressable scheme to be the best of the three schemes because it can support more sophisticated scheduling algorithms as described in [32]. 4 Demonstration Hardware System Our demonstration hardware building block is a scalable emulation board <ref> [36] </ref> which is inexpensive to manufacture and Resource Design Total Logic Logic (Virtual Overhead) Fig 17 Fig 19 Fig 20 Packed CLBs 54 79 80 65 (Total) (32%) (33%) (17%) Lookup Tables 115 165 167 131 (Combinational) (30%) (31%) (12%) Registers 74 141 102 115 (Sequential) (48%) (27%) (36%) Xilinx PIPs <p> Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier <ref> [36] </ref>, Dahl [14] [13] and Hanono [17]. Virtual Wires technology has continued to evolve at Virtual Machine Works, Inc. [32] [1], where commercial emulators based on proprietary VirtualWires (TM) technology are now being produced. Since the original application of multiplexing to FPGA systems, others have proposed several similar approaches.
Reference: [37] <author> J. Varghese, M. Butts, and J. Batcheller. </author> <title> An efficient logic emulation system. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(2), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Quickturn Design Systems, the pioneer Page 18 of large FPGA-based emulators, first developed emulation systems that interconnect FPGAs in a two-dimensional mesh and later in a partial crossbar topology [38] . Their largest systems use a hierarchical approach to interconnection <ref> [37] </ref>. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30]. Multiplexing to overcome pin limitations was first proposed by Babb [7] [6] in 1993 and the first successful applications discussed by Tessier [36], Dahl [14] [13] and Hanono [17].
Reference: [38] <author> S. Walters. </author> <title> Computer-aided prototyping for ASIC-based systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Quickturn Design Systems, the pioneer Page 18 of large FPGA-based emulators, first developed emulation systems that interconnect FPGAs in a two-dimensional mesh and later in a partial crossbar topology <ref> [38] </ref> . Their largest systems use a hierarchical approach to interconnection [37]. Thorough reviews of contemporary emulation systems are provided by Hauck [18] and Owen [30].
Reference: [39] <author> Y.-C. Wei, C.-K. Cheng, and Z. Wurman. </author> <title> Multiple-level partitioning: An application for the very large-scale hardware simulator. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(5), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: Recent time-multiplexed FPGA-like architectures include VEGA [20], Pegasus [28], DPGA [35], and Dharma [11]. Other related uses of static routing techniques include FPGA-based systolic arrays, such as Splash2 [4], and the very large simulation subsystem (VLSS) <ref> [39] </ref>, a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [40] <author> XILINX, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, California, </address> <month> 95214. </month> <title> The Programmable Gate Array Data Book, The XC4000 Data Book, </title> <month> Aug. </month> <year> 1992. </year> <pages> Page 20 </pages>
Reference-contexts: Partition gate count is scaled by a factor of two to get FPGA equivalent gates with an assumed mapping efficiency of 50%. On the same curve we plot the pin and gate capacity of target FPGAs: the Xilinx 3000 and 4000 series <ref> [40] </ref>, the Altera Flex 8000 series [3], and the Atmel 6000 series [5]. For equal average gate counts in the benchmark partitions and FPGA devices, the required average pin counts for partitions are much greater than the available pin capacity of the FPGAs. <p> FPGA APR: Once routing is complete, there is one netlist for each FPGA. Each netlist must be processed with FPGA specific automated place-and-route (APR) software to produce configuration bitstreams. We used the XACT <ref> [40] </ref> software for Xilinx FPGAs. With Virtual Wires, we replace the global router of traditional software with modules created to specifically support automatic pin multiplexing: the Virtual Wires Scheduler and the Virtual Wires Synthesizer (Figure 6). Together we refer to the transformation performed by these two components as virtualization. <p> One or more boards are interfaced to a host workstation. Each board contains sixteen Xilinx XC4005 FPGAs <ref> [40] </ref> interconnected in a two-dimensional nearest-neighbor mesh. The board is six layers, uses only through-hole devices, and is ten inches square in size.
References-found: 40

