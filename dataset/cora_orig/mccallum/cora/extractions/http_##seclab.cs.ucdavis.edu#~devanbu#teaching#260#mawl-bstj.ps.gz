URL: http://seclab.cs.ucdavis.edu/~devanbu/teaching/260/mawl-bstj.ps.gz
Refering-URL: http://www.cs.ucdavis.edu/~devanbu/teaching/160/
Root-URL: http://www.cs.ucdavis.edu
Email: mawlers@research.bell-labs.com  
Title: Mawl: Integrated Web and Telephone Service Creation  
Author: David Atkins, Thomas Ball Thomas Baran, Michael Benedikt, Kenneth Cox, David Ladd Peter Mataga, Carlos Puchol, J. Christopher Ramming Kenneth Rehor, Curtis Tuckey 
Date: March 4, 1997  
Web: http://www-spr.research.bell-labs.com/~mawl/  
Affiliation: Bell Laboratories  
Abstract: The Mawl language separates the specification of service logic from the specification of the user interface to be presented on a device. As a result, one can easily code a service that is accessible via a web browser and with minor modifications to only the user interface specification, make the service accessible via an IVR platform. Mawl draws on the principles of application language engineering to facilitate not just service creation but the entire software development life cycle, improving a service provider's ability to develop, monitor, analyze, administer, and modify form-based services. The Phone Markup Language (PML) is a language and an architecture that enables telephone access to web services and the easy creation of IVR services using the web paradigm. The PML language is a dialect of HTML specialized to describe content for interpretation over a telephone. HTML or PML documents are served over a telephone by standard IVR platforms (or audio processing nodes); as in the hypertext model, the documents themselves may reside on any web server in the network, or may be dynamically generated. The PML middleware takes care of the tasks of fetching documents from the Internet and instructing audio processing nodes to "play" them. As a result, to program an IVR service, a programmer need only deal with a simple markup language and is insulated from the details of the network and particular audio processing nodes. 
Abstract-found: 1
Intro-found: 1
Reference: [BL95] <author> T. Berners-Lee. </author> <title> Hypertext transfer protocol (HTTP/1.0). Working Group of the Internet Engineering Task Force, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: services in a single environment appears to be unique. 1.1 Web Services and Mawl The stateless protocol underlying the web (the HyperText Transmission Protocol or HTTP) was designed to support a single interaction in which a web server responds to a request sent across the network by a client application <ref> [BL95] </ref>. When requests are processed independently of one other, this model works well, as the proliferation of hypertext archives and simple information-collection applications shows. On the other hand, complex services require the maintenance of state and control-flow information across multiple user interactions, and this violates the assumption of independence.
Reference: [BLC95] <author> T. Berners-Lee and D. Connolly. </author> <title> Hypertext markup language (HTML 2.0). </title> <institution> Working Group of the Internet Engineering Task Force, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The presentation details of the user interactions are encapsulated in templates written in an extension of the HyperText Markup Language (HTML) <ref> [BLC95] </ref> that allows dynamic customization of their content. Mawl also provides new functionality to web services by allowing the integration of alternative user interfaces, such as the telephone. The Phone Markup Language (PML) is a dialect of HTML specialized to describe content for interpretation over a telephone.
Reference: [CBR96] <author> Kenneth C. Cox, Thomas J. Ball, and J. Christopher Ramming. Lunchbot: </author> <title> A tale of two ways to program web services. </title> <type> Technical Report BL0112650-960216-06TM, </type> <institution> Lucent Technologies Bell Laboratories, </institution> <month> 28 February </month> <year> 1996. </year>
Reference: [GM95] <author> James Gosling and Henry McGilton. </author> <title> The java language environment: A white paper. </title> <type> Technical report, </type> <institution> Sun Microsystems Laboratories, </institution> <year> 1995. </year> <note> available at URL:http://java.sun.com/whitePaper/javawhitepaper 1.html. </note>
Reference-contexts: Such capabilities is difficult, if not impossible, to achieve in the services constructed with these other tools. * Client-side enhancements. The advent of sophisticated client-side interfaces (in particular Java-capable web browsers <ref> [GM95] </ref>) allows web services to run on the client. However, for many interesting services, the client must still interact with a server. For complex services, the programmer is left with the task of managing this client/server interaction. This suggests that client-side capabilities are in some sense complementary to mawl.
Reference: [LR95] <author> D. A. Ladd and J. C. Ramming. </author> <title> Programming the web: An application-oriented language for hypermedia service programming. </title> <booktitle> In 4th International World Wide Web Conference, </booktitle> <year> 1995. </year>
Reference-contexts: as project management; internet applications that provide services to external customers, such as personal communications management or customer care; and software bundled with products, such as equipment management interfaces. (For an example of a web service, see Sidebar A.) Mawl is an application-oriented language for producing complex interactive web services <ref> [LR95] </ref>. Mawl is supported by a number of tools, including a compiler. The design of mawl draws on the principles of application language engineering to facilitate not just service creation but the entire software development life cycle.
Reference: [MA91] <author> D. B. McQueen and A. Appel. </author> <title> Standard ML of New Jersey. </title> <booktitle> In Proceedings of the 3rd International Symposium on Programming Language Implementation and Logic Programming, </booktitle> <pages> pages 1-2. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The mawl compiler back end generates code in the host language. Then, this code is compiled by the host language compiler along with the input support code. Currently supported host languages are C++ and Standard ML of New Jersey <ref> [MA91] </ref>. A compiled mawl service is linked with a run-time library to form a complete executable. The service can be compiled either as a CGI-executable or as a stand-alone server.
Reference: [Mal94] <author> John C. Mallery. </author> <title> A common lisp hypermedia server. </title> <booktitle> In First International WWW Conference, </booktitle> <year> 1994. </year>
Reference-contexts: In addition, once a particular architecture is defined, there are many benefits to having application-level support for enforcing and supporting this architecture, as we have discussed. * CGI libraries. Libraries for the languages commonly used to write CGI "scripts" (e.g., C, ksh, tcl, perl) <ref> [Mal94] </ref> provide basic facilities for form parsing and dynamic generation of HTML. Solutions to the problems of state maintenance and concurrency usually must be constructed by hand. * Extending HTML with general-purpose programming constructs.
Reference: [Net] <author> Netscape. </author> <note> http://home.netscape.com/eng/mozilla/3.0/handbook/javascript/index.html. </note>
Reference-contexts: A common approach to the generation of HTML documents with dynamic content is the embedding of fragments of code executable on the server. Recent examples are WebThreads [Thr] and Netscape's JavaScript <ref> [Net] </ref>. Mawl's use of MHTML is superficially similar to these examples, but dynamic content is provided by separate service logic rather than embedded code. * Elaborations of CGI. Netscape's LiveWire programming environment combines scripting and HTML code embedding, and adds support for persistent state with predefined dynamic session data objects.
Reference: [Thr] <author> Web Threads. </author> <note> http://www.webthreads.com/. </note>
Reference-contexts: Solutions to the problems of state maintenance and concurrency usually must be constructed by hand. * Extending HTML with general-purpose programming constructs. A common approach to the generation of HTML documents with dynamic content is the embedding of fragments of code executable on the server. Recent examples are WebThreads <ref> [Thr] </ref> and Netscape's JavaScript [Net]. Mawl's use of MHTML is superficially similar to these examples, but dynamic content is provided by separate service logic rather than embedded code. * Elaborations of CGI.
References-found: 9

