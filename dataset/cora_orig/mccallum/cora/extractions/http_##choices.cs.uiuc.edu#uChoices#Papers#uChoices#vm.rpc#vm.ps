URL: http://choices.cs.uiuc.edu/uChoices/Papers/uChoices/vm.rpc/vm.ps
Refering-URL: http://choices.cs.uiuc.edu/choices/uChoices.html
Root-URL: http://www.cs.uiuc.edu
Email: froy,raila,stang@cs.uiuc.edu  
Title: EXTENDED ABSTRACT Remote Procedure Call Implementations Of Micro-kernel Virtual Memory Services Degrade System Performance  
Author: David K. Raila See-Mong Tan Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: Virtual memory subsystem design is critical to the performance of micro-kernel operating systems which partition services into multiple protection domains. Micro-kernel virtual memory implementations that use synchronous remote procedure call as a communication and control mechanism suffer performance degradation due to the mismatch between the call-return model of remote procedure calls and the asynchronous, often unidirectional, behavior of virtual memory systems. Analysis of common virtual memory actions shows that remote procedure calls are an inefficient mechanism for micro-kernel virtual memory implementations and that the performance of the system can be improved by a design tailored to the communication and synchronization patterns of the system. In this paper we describe the problems associated with the use of remote procedure calls to implement micro-kernel virtual memory implementations. Then we present a design for the Choices virtual memory system that minimizes context switching and eliminates unnecessary control flows transfers through the system by using a novel approach to kernel-pager communication and synchronization. We are able to reduce the number of protection boundary crossings in the system by one half and obtain greater parallelism and independence of operation between parts of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vadim Abrossimov, Marc Rozier, and Michel Gien. </author> <title> Virtual Memory Management in CHORUS. </title> <type> Technical report, Chorus syste`mes Technical Report CS/TR-89-30, </type> <year> 1989. </year>
Reference-contexts: As we redesigned the Choices [16, 11] operating system as a micro-kernel based system [7, 17] we analyzed the virtual memory designs in Choices, Spring [13, 12], and Chorus <ref> [1] </ref>, studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1.
Reference: [2] <author> T. Anderson, Brian Bershad, Edward Lazowska, and Henry Levy. </author> <title> Scheduler Activations: Effective Kernel Support for the User Level Managment of Parallelism. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 10(2) </volume> <pages> 53-79, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Choices does not use remote procedure calls in the virtual memory implementation. Instead, Choices uses customized communication and control transfer facilities with features similar to those found in LRPC [5], Continuations [8], Split Level Scheduling [10], and Scheduler Activations <ref> [2] </ref>. 3 The Choices virtual memory model consists of a core of virtual memory mechanisms inside the micro-kernel with the pager, filesystem, device drivers, and applications running on top of the micro-kernel in separate address space 2 . Pagers in Choices are normal applications with no special privileges.
Reference: [3] <author> Thomas E. Anderson, Henry M. Levy, Brian N. Bershad, and Edward D. Lazowska. </author> <title> The interaction of architecture and operating system design. </title> <booktitle> In ASPLOS, International Conf. on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 108-120, </pages> <address> Santa Clara, CA (USA), </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Separation breaks module dependencies and aids module replacement, but it adds complexity and overhead from communications, context switching, and synchronization <ref> [3] </ref>. Although the performance of individual modules may be improved, the performance of the entire system can be degraded by context switching, synchronization, and communication overhead if a monolithic implementation is simply split up in a micro-kernel.
Reference: [4] <author> Thomas E. Anderson, Henry M. Levy, Brian N. Bershad, and Edward D. Lazowska. </author> <title> The Interaction of Achitecture and Operating System Design. </title> <booktitle> In Proceedings of ASPLOS-IV. </booktitle> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: When a virtual memory activity crosses several modules this results in several calls and returns along the path, each resulting in a context switch and blocking of the caller until the server returns. In addition to the costs associated with the switch itself <ref> [4] </ref>, there are secondary issues such as the cache effects of context switching [14] that reduce performance.
Reference: [5] <author> Brian N. Bershad, Thomas E. Anderson, Ed-ward D. Lazowska, and Henry M. Levy. </author> <title> Lightweight remote procedure call. </title> <type> Technical Report 89-04-02, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, WA (USA), </address> <month> April </month> <year> 1989. </year>
Reference-contexts: The design attempts to increase performance by minimizing protection boundary crossings and context switching during virtual memory operations. Choices does not use remote procedure calls in the virtual memory implementation. Instead, Choices uses customized communication and control transfer facilities with features similar to those found in LRPC <ref> [5] </ref>, Continuations [8], Split Level Scheduling [10], and Scheduler Activations [2]. 3 The Choices virtual memory model consists of a core of virtual memory mechanisms inside the micro-kernel with the pager, filesystem, device drivers, and applications running on top of the micro-kernel in separate address space 2 .
Reference: [6] <author> Andrew D. Birell and Bruce J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> In ACM Transactions on computer systems, </journal> <month> February </month> <year> 1984. </year>
Reference-contexts: Procedure Call Based Implementation 2 Problems With Remote Procedure Calls Remote procedure calls are a good mechanism for a wide variety of applications because they provide a call-return model, and isolate the synchronization and communication issues from the programmer <ref> [6] </ref>. However, when used to implement a complex asynchronous system that does not follow a call-return model, the remote procedure call model forces unnecessary flow control returns to the caller. Additionally, the remote procedure call model does not provide good support for parallelism and high performance data transfer.
Reference: [7] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: As we redesigned the Choices [16, 11] operating system as a micro-kernel based system <ref> [7, 17] </ref> we analyzed the virtual memory designs in Choices, Spring [13, 12], and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1. <p> Pagers for applications exhibiting bursty data throughput, such as a multimedia data stream filter, might vary the transfer size dynamically without kernel intervention. 4 The Choices Virtual Memory De sign The virtual memory system for Choices <ref> [7] </ref> is a full featured memory system designed to support external paging, distributed virtual memory, copy on write, replacement policy customization, etc. The design attempts to increase performance by minimizing protection boundary crossings and context switching during virtual memory operations.
Reference: [8] <author> Richrd P. Daraves, Biran N. Bershad, Richard F. Rashid, and Randall W. Dean. </author> <title> Continuations: Unifying Thread Management and Communication in Operting Systems. </title> <type> Technical report, </type> <institution> School of Computer Science, Carnegie-Mellon University, </institution> <year> 1991. </year>
Reference-contexts: The design attempts to increase performance by minimizing protection boundary crossings and context switching during virtual memory operations. Choices does not use remote procedure calls in the virtual memory implementation. Instead, Choices uses customized communication and control transfer facilities with features similar to those found in LRPC [5], Continuations <ref> [8] </ref>, Split Level Scheduling [10], and Scheduler Activations [2]. 3 The Choices virtual memory model consists of a core of virtual memory mechanisms inside the micro-kernel with the pager, filesystem, device drivers, and applications running on top of the micro-kernel in separate address space 2 . <p> In Choices the kernel directly resumes the paging process once I/O is complete, as shown in figure 2. This is similar to Continuations <ref> [8] </ref>. It avoids the unnecessary maintenance of implicit information on the remote procedure call stack, and is only possible in the absence of remote procedure calls in the implementation.
Reference: [9] <institution> Advanced Micro Devices. The Am7990 LANCE Family IEEE-802.3/Ethernet Node. Advanced Micro Devices. </institution>
Reference-contexts: When a request is inserted into the slot the ownership bit is toggled to notify the kernel or pager that a request is pending. The protocol is similar to the one used by the LANCE Am7990 ethernet chip <ref> [9] </ref> to transfer packets between the kernel and the network interface hardware efficiently. To avoid data copying of pages between address spaces, the Choices kernel passes capabilities from the paging processes' address space with requests to the pager.
Reference: [10] <author> Ramesh Govindan and David P. Anderson. </author> <title> iScheduling and IPC Mechanisms for Continous Media. </title> <type> Technical report, </type> <institution> University of California at Berkeley, </institution> <month> March </month> <year> 1991. </year> <month> 5 </month>
Reference-contexts: Choices does not use remote procedure calls in the virtual memory implementation. Instead, Choices uses customized communication and control transfer facilities with features similar to those found in LRPC [5], Continuations [8], Split Level Scheduling <ref> [10] </ref>, and Scheduler Activations [2]. 3 The Choices virtual memory model consists of a core of virtual memory mechanisms inside the micro-kernel with the pager, filesystem, device drivers, and applications running on top of the micro-kernel in separate address space 2 . <p> Virtual memory state information in the kernel is mapped into the pager address space with read-only protection, the kernel and the pager communicate requests for service from each other through a shared memory region similar to split level scheduling <ref> [10] </ref>. Capabilities to the address space of the paging process are passed to the pager to avoid copying between address spaces. 2 It is possible to locate modules, such as the filesystem and device driver, in the same address space.
Reference: [11] <author> G. M. Johnston and R. H. Campbell. </author> <title> "An Object--Oriented Implementation of Distributed Virtual Memory". </title> <booktitle> In Workshop on Experiences with Building Distributed and Multiprocessor Systems, </booktitle> <pages> pages 39-57. </pages> <publisher> Usenix, </publisher> <year> 1989. </year>
Reference-contexts: Although the performance of individual modules may be improved, the performance of the entire system can be degraded by context switching, synchronization, and communication overhead if a monolithic implementation is simply split up in a micro-kernel. As we redesigned the Choices <ref> [16, 11] </ref> operating system as a micro-kernel based system [7, 17] we analyzed the virtual memory designs in Choices, Spring [13, 12], and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1.
Reference: [12] <author> Y. Khalidi and M. Nelson. </author> <title> A Flexible External Paging Interface. In A Spring Collection. </title> <address> Sun-Soft, </address> <year> 1993. </year>
Reference-contexts: As we redesigned the Choices [16, 11] operating system as a micro-kernel based system [7, 17] we analyzed the virtual memory designs in Choices, Spring <ref> [13, 12] </ref>, and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1.
Reference: [13] <author> Y. Khalidi and M. Nelson. </author> <title> The Spring Virtual Memory System. In A Spring Collection. SunSoft, </title> <year> 1993. </year>
Reference-contexts: As we redesigned the Choices [16, 11] operating system as a micro-kernel based system [7, 17] we analyzed the virtual memory designs in Choices, Spring <ref> [13, 12] </ref>, and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1. <p> A kernel driven system implemented with remote procedure calls can suffer from ping pong effect, in which control transfers back and forth visiting modules in the system multiple times. For example, the Choices [15] and Spring <ref> [13] </ref> virtual memory systems are driven by cache objects located in the kernel, resulting in control flows that thread in and out of the kernel during processing.
Reference: [14] <author> Jeffrey C. Mogul and Anita Borg. </author> <title> The Effect of Context Switches on Cache Performance. </title> <booktitle> In Proceedings of ASPLOS-IV. </booktitle> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: In addition to the costs associated with the switch itself [4], there are secondary issues such as the cache effects of context switching <ref> [14] </ref> that reduce performance. In our study of common paging activities we found that many of the return values were simply passed through to the caller and often no useful work was taking place in the intermediate modules along the call path.
Reference: [15] <author> V. F. Russo and R. H. Campbell. </author> <title> "Virtual Memory and Backing Storage Management in Multiprocessor Operating Systems Using Object-Oriented Design Techniques". </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 267-278, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: A kernel driven system implemented with remote procedure calls can suffer from ping pong effect, in which control transfers back and forth visiting modules in the system multiple times. For example, the Choices <ref> [15] </ref> and Spring [13] virtual memory systems are driven by cache objects located in the kernel, resulting in control flows that thread in and out of the kernel during processing.
Reference: [16] <author> Vincent Russo and Roy H. Campbell. </author> <title> Virtual Memory and Backing Storage Management in Multiprocessor Operating Systems using Class Hierarchical Design. </title> <booktitle> In Proceedings of OOP-SLA '89, </booktitle> <pages> pages 267-278, </pages> <address> New Orleans, Louisiana, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Although the performance of individual modules may be improved, the performance of the entire system can be degraded by context switching, synchronization, and communication overhead if a monolithic implementation is simply split up in a micro-kernel. As we redesigned the Choices <ref> [16, 11] </ref> operating system as a micro-kernel based system [7, 17] we analyzed the virtual memory designs in Choices, Spring [13, 12], and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1.
Reference: [17] <author> See-Mong Tan, David Raila, and Roy H. Camp-bell. </author> <title> An Object-Oriented Nano-Kernel for Operating System Hard ware Support. </title> <booktitle> In Fourth International Workshop on Object-Orientation in Opera ting Systems, Lund, </booktitle> <address> Sweden, </address> <month> August </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: As we redesigned the Choices [16, 11] operating system as a micro-kernel based system <ref> [7, 17] </ref> we analyzed the virtual memory designs in Choices, Spring [13, 12], and Chorus [1], studying the control, communication, and synchronization patterns of the common virtual memory requests shown in table 1.
Reference: [18] <author> A. S. Tanenbaum and R. van Renesse. </author> <title> A critique of the remote procedure call paradigm. </title> <booktitle> In EUTECO '88 Proceedings, Particpants Edition, </booktitle> <pages> pages 775-783, </pages> <address> Amsterdam, Netherlands, 1988. </address> <publisher> North-Holland. </publisher> <pages> 6 </pages>
Reference-contexts: Additionally, the remote procedure call model does not provide good support for parallelism and high performance data transfer. These issues require additional programming in order to resolve the mismatch between the remote procedure call model and the requirements of the system <ref> [18] </ref>. 2.1 Context Switching A remote procedure call invocation results in a call to the server, a return to the caller, and two way communication of arguments and results along the call path. <p> To design the system to take advantage of parallelism additional code must be written to accommodate the mismatch between the remote procedure call model and the parallel implementation of the system <ref> [18] </ref>. Servers that can process parallel requests are written using multiple threads to service incoming calls in parallel. This also maintains availability of the server when threads within the server make calls to other servers during processing that might block.
References-found: 18

