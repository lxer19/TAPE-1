URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR372.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: Boolean Verification with Formal Derivation  
Author: Bhaskar Bose, Steven D. Johnson, and Shyamsundar Pullela 
Date: february 1993  
Note: Integrating  To appear in the proceedings of the 1993 IFIP Conference on Hardware Description Languages and their Applications (CHDL '93 Ottawa, Canada, April, 1993.  
Abstract: indiana university computer science department technical report no. 372 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dominique D. Borrione, Laurence V. Pierre, and Ashraf M. Salem. </author> <title> Formal verification of VHDL descriptions in the Prevail environment. </title> <booktitle> IEEE Design & Test of Computers, </booktitle> <pages> pages 42-56, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Experience shows that derivation systems impose restrictions on the design, and verification systems result in design descriptions which are impractical for implementation [7], or proofs too difficult to construct for an arbitrary specification <ref> [1, 4] </ref>. y Research reported herein was supported, in part, by NSF: The National Science Foundation, under grants numbered DCR 85-21497, MIP 87-07067 and MIP 89-21842, and by NASA: The National Aeronautics and Space Administration under grant number NGT-50861. 1 From the perspective of derivation, a derivation system based on a
Reference: [2] <author> Robert S. Boyer and J. Struther Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: The other aspect of the design represents the interesting engineering in the design and is better addressed by verification. The DDD-FM9001 project was an experiment to construct an implementation of the FM9001 [3] using this approach. We applied the DDD system to the Nqthm <ref> [2] </ref> specification of the FM9001. A set of transformations were applied to decompose and reorganize the design. Complex components, such as the memory, register file, ALU, incrementor, and decrementor, were isolated using DDD's abstraction mechanisms.
Reference: [3] <author> Bishop Brock and Warren A. Hunt. </author> <title> The FM9001 proof script. </title> <type> Technical report, </type> <institution> Com putational Logic Incorporated, </institution> <year> 1993. </year>
Reference-contexts: This portion, though critical, represents the uninteresting part of the design. The other aspect of the design represents the interesting engineering in the design and is better addressed by verification. The DDD-FM9001 project was an experiment to construct an implementation of the FM9001 <ref> [3] </ref> using this approach. We applied the DDD system to the Nqthm [2] specification of the FM9001. A set of transformations were applied to decompose and reorganize the design. Complex components, such as the memory, register file, ALU, incrementor, and decrementor, were isolated using DDD's abstraction mechanisms. <p> This work is a continuation of the work done in [12] in which the DDD system was applied to the FM8501 [7], and FM8502 Nqthm specifications. The FM9001 is a 32-bit microprocessor representing the third generation processor description defined by Hunt and mechanically verified using the Nqthm theorem prover <ref> [3] </ref>. The proof establishes an equivalence relationship between four levels of specifications ranging from an abstract programmers model interpreter to a netlist. The highest level of specification is a collection of six recursive functions (including auxiliary functions) defining an instruction level interpreter.
Reference: [4] <author> Avra Cohn. </author> <title> A proof of correctness of the VIPER microprocessor: The first level. </title> <type> Technical Report 104, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: Experience shows that derivation systems impose restrictions on the design, and verification systems result in design descriptions which are impractical for implementation [7], or proofs too difficult to construct for an arbitrary specification <ref> [1, 4] </ref>. y Research reported herein was supported, in part, by NSF: The National Science Foundation, under grants numbered DCR 85-21497, MIP 87-07067 and MIP 89-21842, and by NASA: The National Aeronautics and Space Administration under grant number NGT-50861. 1 From the perspective of derivation, a derivation system based on a
Reference: [5] <author> John A. Darringer. </author> <title> The application of program verification techniques to hardware verification. </title> <booktitle> In Proceedings of the 16 th Design Automation Conference, </booktitle> <month> June </month> <year> 1979. </year>
Reference-contexts: (car a) c) (cdr a) 6 mux = (in 0 in 1 in 2 in 3 c 1 c 0 ): or (and (not (c 1 ) and (c 0 in 1 )) and (c 1 and (c 0 in 3 ))))) Next, symbolic evaluation, as discussed by Darringer in <ref> [5] </ref>, in which the base operators are extended to return symbolic values and symbols are introduced as input values in place of real data objects, was applied to both the Nqthm specification and the multiplexor implementation of the ALU.
Reference: [6] <author> R. Kent Dybvig. </author> <title> The SCHEME Programming Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: DDD is much like a proof checker in the sense that it automates the transformations 2 needed for circuit synthesis, but requires substantial guidance to perform a derivation. The system is implemented in the Lisp dialect Scheme <ref> [6, 13] </ref> as a collection of transformations that operate on s-expressions. DDD was developed to help explore and demonstrate a formalization of digital design based on a functional algebra.
Reference: [7] <author> Jr. Hunt, Warren A. FM8501: </author> <title> A Verified Microprocessor. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, </institution> <year> 1985. </year> <note> Also published as Technical Report 47 (December, </note> <year> 1985). </year>
Reference-contexts: However, as researchers and engineers gain design experience in a formal framework, both approaches are emerging as interdependent facets of design [12]. Experience shows that derivation systems impose restrictions on the design, and verification systems result in design descriptions which are impractical for implementation <ref> [7] </ref>, or proofs too difficult to construct for an arbitrary specification [1, 4]. y Research reported herein was supported, in part, by NSF: The National Science Foundation, under grants numbered DCR 85-21497, MIP 87-07067 and MIP 89-21842, and by NASA: The National Aeronautics and Space Administration under grant number NGT-50861. 1 <p> The derived FM9001 is referred to as the DDD-FM9001. This work is a continuation of the work done in [12] in which the DDD system was applied to the FM8501 <ref> [7] </ref>, and FM8502 Nqthm specifications. The FM9001 is a 32-bit microprocessor representing the third generation processor description defined by Hunt and mechanically verified using the Nqthm theorem prover [3]. The proof establishes an equivalence relationship between four levels of specifications ranging from an abstract programmers model interpreter to a netlist.
Reference: [8] <author> S. D. Johnson and Bhaskar Bose. </author> <title> A system for mechanized digital design derivation. </title> <editor> In Subramanyam, editor, </editor> <booktitle> Proceedings of ACM International Workshop on Formal Methods in VLSI Design. To be published, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: Our research sets out to address deficiences in both derivation and verification by integrating them in a unified framework. In our framework, we define a formalism for hardware derivation based on the algebraic manipulation of purely functional forms [9]. The derivation system, DDD, <ref> [11, 8] </ref> is used to decompose and restructure a design in such a manner as to derive a significant portion of the design and isolate the verification problems to small building blocks. Verification is then applied to the isolated building blocks. <p> Operations were encapsulated in modules and complex components such as the memory, register file, ALU, incrementor, and decrementor, were factored from the description [10]. In the next phase of the derivation, concrete representations were introduced for the constants and operations of the ground type <ref> [8] </ref>. A collection of boolean subsystems were then generated. Technology dependent, highly optimized implementations of the ALU, incrementor, and decrementor were engineered and verified against the specifications of the respective factored components.
Reference: [9] <author> Steven D. Johnson. </author> <title> Synthesis of Digital Designs from Recursion Equations. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, </address> <year> 1984. </year>
Reference-contexts: Our research sets out to address deficiences in both derivation and verification by integrating them in a unified framework. In our framework, we define a formalism for hardware derivation based on the algebraic manipulation of purely functional forms <ref> [9] </ref>. The derivation system, DDD, [11, 8] is used to decompose and restructure a design in such a manner as to derive a significant portion of the design and isolate the verification problems to small building blocks. Verification is then applied to the isolated building blocks.
Reference: [10] <author> Steven D. Johnson. </author> <title> Manipulating logical organization with system factorizations. </title> <editor> In M. Leeser and G. Brown, editors, </editor> <title> Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pages 260-281. </pages> <booktitle> Proceedings of Mathematical Sciences Institute Workshop, </booktitle> <publisher> Cornell University, Springer-Verlag, </publisher> <month> July </month> <year> 1989. </year>
Reference-contexts: Here a logical organization was imposed on the design. Operations were encapsulated in modules and complex components such as the memory, register file, ALU, incrementor, and decrementor, were factored from the description <ref> [10] </ref>. In the next phase of the derivation, concrete representations were introduced for the constants and operations of the ground type [8]. A collection of boolean subsystems were then generated.
Reference: [11] <author> Steven D. Johnson, Bhaskar Bose, and C. David Boyer. </author> <title> A tactical framework for digital design. </title> <editor> In G. Birtwistle and P.A. Subrahmanyam, editors, </editor> <booktitle> VLSI Specification, Verification and Synthesis, </booktitle> <pages> pages 349-383. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1988. </year> <month> 8 </month>
Reference-contexts: Our research sets out to address deficiences in both derivation and verification by integrating them in a unified framework. In our framework, we define a formalism for hardware derivation based on the algebraic manipulation of purely functional forms [9]. The derivation system, DDD, <ref> [11, 8] </ref> is used to decompose and restructure a design in such a manner as to derive a significant portion of the design and isolate the verification problems to small building blocks. Verification is then applied to the isolated building blocks.
Reference: [12] <author> Steven D. Johnson, Robert M. Wehrmeister, and Bhaskar Bose. </author> <title> On the interplay of synthesis and verification: Experiments with the FM8501 processor description. </title> <editor> In Luc Claesen, editor, </editor> <booktitle> Applied Formal Methods For Correct VLSI Design, </booktitle> <pages> pages 385-404, </pages> <address> Amsterdam, Netherlands, 1989. IMEC, </address> <publisher> Elsevier. </publisher>
Reference-contexts: Derivation aims at deriving a "correct by construction" design. Verification aims at constructing a "proof of correctness" for a post factum design. However, as researchers and engineers gain design experience in a formal framework, both approaches are emerging as interdependent facets of design <ref> [12] </ref>. <p> One of the benchmarks in the study is the construction of an implementation of the FM9001 Microprocessor description using derivation and verification. The derived FM9001 is referred to as the DDD-FM9001. This work is a continuation of the work done in <ref> [12] </ref> in which the DDD system was applied to the FM8501 [7], and FM8502 Nqthm specifications. The FM9001 is a 32-bit microprocessor representing the third generation processor description defined by Hunt and mechanically verified using the Nqthm theorem prover [3].
Reference: [13] <author> Jonathan Rees and William Clinger. </author> <title> The revised 3 report on the algorithmic language scheme. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 21(12) </volume> <pages> 37-79, </pages> <year> 1986. </year>
Reference-contexts: DDD is much like a proof checker in the sense that it automates the transformations 2 needed for circuit synthesis, but requires substantial guidance to perform a derivation. The system is implemented in the Lisp dialect Scheme <ref> [6, 13] </ref> as a collection of transformations that operate on s-expressions. DDD was developed to help explore and demonstrate a formalization of digital design based on a functional algebra.
Reference: [14] <author> Zheng Zhu and Steven D. Johnson. </author> <title> An algebraic framework for data abstraction in hard ware description. </title> <editor> In Jones and Sheeran, editors, </editor> <booktitle> Proceedings of The Oxford Workshop on Designing Correct Circuits. </booktitle> <publisher> Springer, </publisher> <year> 1990. </year> <month> 9 </month>
Reference-contexts: A brief sketch of the derivation follows. First, a set of foldings and unfoldings were applied to the initial behavioral specification in order to achieve a proper scheduling of operations <ref> [14] </ref>. Abstract operations on memory and the register file were serialized to restrict memory access to at most one per state. The operations were also serialized to insure that accesses to memory and the register file could be multiplexed.
References-found: 14

