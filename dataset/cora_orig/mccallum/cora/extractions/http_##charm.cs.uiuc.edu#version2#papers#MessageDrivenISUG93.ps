URL: http://charm.cs.uiuc.edu/version2/papers/MessageDrivenISUG93.ps
Refering-URL: http://charm.cs.uiuc.edu/version2/papers/MessageDrivenISUG93.html
Root-URL: http://www.cs.uiuc.edu
Title: Performance Benefits of Message Driven Executions  
Author: L.V. Kale and A. Gursoy 
Address: Urbana Champaign 1304 W. Springfield Ave., Urbana, IL-61801  
Affiliation: Department of Computer Science University of Illinois at  
Abstract: This paper argues that message driven execution is an effective and efficient way of dealing with communication latencies and irregularities in parallel computations. It describes how message driven execution is supported in Charm portable parallel programming system. It goes on to discuss a performance study on Intel's Paragon machine, that demonstrates the performance advantages conferred by message driven execution, in the context of global reduction operations. To simplify specifications of message driven programs, Charm supports a notation called Dagger and a visual editor that accompanies it which is also briefly discussed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. V. Kale. </author> <title> The Chare kernel parallel programming language and system. </title> <booktitle> volume II, </booktitle> <pages> pages 17-25. </pages>
Reference-contexts: It also presents and analyzes the performance data obtained with Charm and with the native reduction library provided by the system. Section 4 describes Dagger, a notation that simplifies the expression of message driven programs, and a visual editor for it. 2 CHARM Charm <ref> [1, 2, 3] </ref> is a machine independent parallel programming system. Programs written using this system will run unchanged on MIMD machines with or without a shared memory. The programs are written in C with a few syntactic extensions.
Reference: [2] <author> W. W. Shu and L. V. Kale. </author> <title> Chare Kernel a runtime support system for parallel computations. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 11 </volume> <pages> 198-211, </pages> <year> 1990. </year>
Reference-contexts: It also presents and analyzes the performance data obtained with Charm and with the native reduction library provided by the system. Section 4 describes Dagger, a notation that simplifies the expression of message driven programs, and a visual editor for it. 2 CHARM Charm <ref> [1, 2, 3] </ref> is a machine independent parallel programming system. Programs written using this system will run unchanged on MIMD machines with or without a shared memory. The programs are written in C with a few syntactic extensions.
Reference: [3] <author> L. V. Kale and W. Shu. </author> <title> The Chare Kernel base language: </title> <booktitle> Preliminary performance resul ts. </booktitle> <pages> pages 118-121. </pages>
Reference-contexts: It also presents and analyzes the performance data obtained with Charm and with the native reduction library provided by the system. Section 4 describes Dagger, a notation that simplifies the expression of message driven programs, and a visual editor for it. 2 CHARM Charm <ref> [1, 2, 3] </ref> is a machine independent parallel programming system. Programs written using this system will run unchanged on MIMD machines with or without a shared memory. The programs are written in C with a few syntactic extensions.
Reference: [4] <author> W. Fenton, B. Ramkumar, V. Saletore, A. Sinha, and L. V. Kale. </author> <title> The Chare Kernel Programming Language Manual. </title>
Reference-contexts: Entry-point definitions start with an entry name, a message name, followed by a block of C statements and Charm system calls. Details about these systems calls (such as CreateChare, SendMsg), and other features of the system (information sharing abstract data types) can be found in <ref> [4] </ref>. The Charm runtime system is message driven.
Reference: [5] <author> A. Gursoy and L. V. Kale. Dagger: </author> <title> Combining the benefits of synchronous and asynchronous communication styles. </title> <type> Technical Report 93-3, </type> <institution> Parallel Programming Laboratory, Department of Computer Science, University of Illinois, </institution> <month> March </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: This sometimes leads to bugs due to a message processing sequence that is different than those anticipated by the user program. We have developed a notation called Dagger <ref> [5] </ref>, and an associated graphical program editor that helps programmers deal with this complexity. The Dagger language augments the Charm language with a special form of chare called a dag chare. A dag chare (dag: directed acyclic graph) specifies pieces of computations (when-blocks) and dependences among computations and messages. <p> Client processes may send multiple requests concurrently to a server dag. The server dag performs the same computation for different requests concurrently. This type of computations are supported by a reference number mechanism. Further details about this feature and Dagger can be found in <ref> [5] </ref>. 5 CONCLUSION The advantages of message driven execution for multiple independent global operations can be seen to arise from two separate factors. 1. the pipelining effect, which eliminates the critical path proportional to at least log p during which processors would have remained idle in a blocking SPMD style program.
Reference: [6] <author> G. Agha and C. Hewitt. </author> <title> Concurrent Programming Using Actors: Exploiting Large-Scale Parallelism, </title> <booktitle> volume Lecture Notes in Computer Science, </booktitle> <volume> 206, </volume> <pages> pages 19-40. </pages> <publisher> Springer-Verlag (Berlin-Heidelberg-New York), </publisher> <month> October </month> <year> 1985. </year> <editor> Editors: S. N. </editor> <publisher> Maheshwari. </publisher>
Reference-contexts: A system such as Charm can play an important part in this transition to message driven execution. Message driven execution was proposed and studied in the Actor model by Hewitt <ref> [6] </ref>, and later by Agha [7]. Charm is one of the first systems to embody message driven execution in a portable parallel programming system running on stock multicomputers (in 1986-87 [8]), along with the reactive kernel of Seitz et. al. [9].
Reference: [7] <author> G. A. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT press, </publisher> <year> 1986. </year>
Reference-contexts: A system such as Charm can play an important part in this transition to message driven execution. Message driven execution was proposed and studied in the Actor model by Hewitt [6], and later by Agha <ref> [7] </ref>. Charm is one of the first systems to embody message driven execution in a portable parallel programming system running on stock multicomputers (in 1986-87 [8]), along with the reactive kernel of Seitz et. al. [9].
Reference: [8] <author> L. V. Kale. </author> <title> The Design Philosophy of the Chare Kernel Parallel Programming System. </title> <type> Technical Report UIUCDCS-R-89-1555, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1989. </year>
Reference-contexts: Message driven execution was proposed and studied in the Actor model by Hewitt [6], and later by Agha [7]. Charm is one of the first systems to embody message driven execution in a portable parallel programming system running on stock multicomputers (in 1986-87 <ref> [8] </ref>), along with the reactive kernel of Seitz et. al. [9]. The recent work on Active Messages [10] provides an efficient substrate for message driven execution, while the Split-C language [11] developed at Berkeley is a recent message driven language that uses Active Messages.
Reference: [9] <author> W. C. Athas and C. L. Seitz. </author> <title> Multicomputers: Message-passing concurrent computers. </title> <booktitle> In Computer, </booktitle> <volume> volume Volume 21, No. 8, </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: Charm is one of the first systems to embody message driven execution in a portable parallel programming system running on stock multicomputers (in 1986-87 [8]), along with the reactive kernel of Seitz et. al. <ref> [9] </ref>. The recent work on Active Messages [10] provides an efficient substrate for message driven execution, while the Split-C language [11] developed at Berkeley is a recent message driven language that uses Active Messages. The data flow approaches clearly embody message driven execution although they were based on specialized hardware.
Reference: [10] <author> T. vonEicken, D. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active messages: a mechanism for integrated communication and computation. </title> <booktitle> ACM, </booktitle> <pages> pages 256-266, </pages> <year> 1992. </year>
Reference-contexts: Charm is one of the first systems to embody message driven execution in a portable parallel programming system running on stock multicomputers (in 1986-87 [8]), along with the reactive kernel of Seitz et. al. [9]. The recent work on Active Messages <ref> [10] </ref> provides an efficient substrate for message driven execution, while the Split-C language [11] developed at Berkeley is a recent message driven language that uses Active Messages. The data flow approaches clearly embody message driven execution although they were based on specialized hardware.
Reference: [11] <author> D. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumetta, T. vonEicken, and K. Yelick. </author> <title> Parallel programming in split-c. </title> <type> Technical report, </type> <institution> University of Califor-nia, Berkeley. </institution> <month> 11 </month>
Reference-contexts: The recent work on Active Messages [10] provides an efficient substrate for message driven execution, while the Split-C language <ref> [11] </ref> developed at Berkeley is a recent message driven language that uses Active Messages. The data flow approaches clearly embody message driven execution although they were based on specialized hardware. Message driven execution is similar in spirit to macro data flow approaches designed for general purpose parallel purpose machines.
References-found: 11

