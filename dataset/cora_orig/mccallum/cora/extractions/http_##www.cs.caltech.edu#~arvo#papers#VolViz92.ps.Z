URL: http://www.cs.caltech.edu/~arvo/papers/VolViz92.ps.Z
Refering-URL: http://www.cs.caltech.edu/~arvo/papers.html
Root-URL: http://www.cs.caltech.edu
Title: Controlled Precision Volume Integration  
Author: Kevin Novins James Arvo 
Keyword: CR Categories and Subject Descriptors: I.3.0 [Computer Graphics]: General; I.3.3 [Computer Graphics]: Picture/Image Generation Additional Keywords and Phrases: volume rendering, numerical quadrature, scientific visualization  
Address: Ithaca, New York 14853  
Affiliation: Program of Computer Graphics Cornell University  
Abstract: Traditional methods for evaluating the low-albedo volume rendering integral do not include bounds on the magnitude of approximation error. In this paper, we examine three techniques for solving this integral with error bounds: trapezoid rule, Simpson's rule, and a power series method. In each case, the expression for the error bound provides a mechanism for computing the integral to any specified precision. The formulations presented are appropriate for polynomial reconstruction from point samples; however, the approach is considerably more general. The three techniques we present differ in relative efficiency for computing results to a given precision. The trapezoid rule and Simpson's rule are most efficient for low- to medium-precision solutions. The power series method converges rapidly to a machine precision solution, providing both an efficient means for high-accuracy volume rendering, and a reference standard by which other approximations may be measured.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ACTON, F. S. </author> <title> Numerical Methods That Work. </title> <publisher> Harper & Row, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: This is a coarse bound but has the advantage of requiring no root finding. 4 Trapezoid and Simpson's Rule The trapezoid rule and Simpson's rule are two instances of Newton-Cotes quadrature formulae <ref> [13, 1] </ref>. These methods approximate the integrand via a polynomial spline which is integrated to yield an approximation to the integral. <p> In order to evaluate the relative performance of the algorithms, each of the approaches was tested using a random distribution of rays passing through a single voxel whose color and density values at each corner were randomly distributed over the interval <ref> [0; 1] </ref>. The time to compute 10,000 such integrals to a specified precision was measured. The results are summarized in a Figure 7, where computation time is plotted against precision.
Reference: [2] <author> BLINN, J. F. </author> <title> Light reflection functions for simulation of clouds and dusty surfaces. </title> <booktitle> Computer Graphics 16, </booktitle> <month> 3 (July </month> <year> 1982), </year> <pages> 21-29. </pages>
Reference-contexts: For convenience, we define f (x) to be the integrand of Equation (1), a *(x): Equation (1) can be derived directly from the low-albedo approximation to light scattering inside a 3D volume <ref> [6, 2, 3, 12] </ref>. In a typical volume rendering application, ff is mapped to material density, and * is mapped to the product of material density, color, and a shading function.
Reference: [3] <author> CHANDRASEKAR, S. </author> <title> Radiative Transfer. </title> <publisher> Dover Publications, </publisher> <address> New York, </address> <year> 1960. </year>
Reference-contexts: For convenience, we define f (x) to be the integrand of Equation (1), a *(x): Equation (1) can be derived directly from the low-albedo approximation to light scattering inside a 3D volume <ref> [6, 2, 3, 12] </ref>. In a typical volume rendering application, ff is mapped to material density, and * is mapped to the product of material density, color, and a shading function.
Reference: [4] <author> DREBIN, R. A., CARPENTER, L., AND HANRAHAN, P. </author> <title> Volume rendering. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (August </month> <year> 1988), </year> <pages> 65-74. </pages>
Reference-contexts: Thus, we must rely upon some form of numerical quadrature. Many volume rendering algorithms evaluate the integral using a piecewise constant approximation the domain of integration is broken into small segments where * is assumed to be related to ff by a constant <ref> [9, 4, 11, 10, 16] </ref>. Under this restriction the integral of each of the segments reduces to a simple arithmetic expression.
Reference: [5] <author> KAJIYA, J. T., AND KAY, T. L. </author> <title> Rendering fur with three dimensional textures. </title> <booktitle> Computer Graphics 23, </booktitle> <month> 3 (July </month> <year> 1989), </year> <pages> 271-280. </pages>
Reference-contexts: Another common technique, applicable if ff is symbolically integrable, is to solve the inner integral of Equation (1) directly, and approximate the outer integral using a deterministic quadrature formula [6, 15, 7], or via Monte Carlo <ref> [5] </ref>. While all these strategies are known to increase in accuracy as the number of segments or samples increases, no precise error bounds have been given in the literature.
Reference: [6] <author> KAJIYA, J. T., AND VON HERZEN, B. P. </author> <title> Ray tracing volume densities. </title> <booktitle> Computer Graphics 18, </booktitle> <month> 3 (July </month> <year> 1984), </year> <pages> 165-173. </pages>
Reference-contexts: For convenience, we define f (x) to be the integrand of Equation (1), a *(x): Equation (1) can be derived directly from the low-albedo approximation to light scattering inside a 3D volume <ref> [6, 2, 3, 12] </ref>. In a typical volume rendering application, ff is mapped to material density, and * is mapped to the product of material density, color, and a shading function. <p> Under this restriction the integral of each of the segments reduces to a simple arithmetic expression. Another common technique, applicable if ff is symbolically integrable, is to solve the inner integral of Equation (1) directly, and approximate the outer integral using a deterministic quadrature formula <ref> [6, 15, 7] </ref>, or via Monte Carlo [5]. While all these strategies are known to increase in accuracy as the number of segments or samples increases, no precise error bounds have been given in the literature.
Reference: [7] <author> KRUEGER, W. </author> <title> Volume rendering and data feature enhancement. </title> <booktitle> Computer Graphics 24, </booktitle> <month> 5 (November </month> <year> 1990), </year> <pages> 21-26. </pages>
Reference-contexts: Under this restriction the integral of each of the segments reduces to a simple arithmetic expression. Another common technique, applicable if ff is symbolically integrable, is to solve the inner integral of Equation (1) directly, and approximate the outer integral using a deterministic quadrature formula <ref> [6, 15, 7] </ref>, or via Monte Carlo [5]. While all these strategies are known to increase in accuracy as the number of segments or samples increases, no precise error bounds have been given in the literature.
Reference: [8] <author> LAUR, D., AND HANRAHAN, P. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics 25, </booktitle> <month> 4 (July </month> <year> 1991), </year> <pages> 285-288. </pages>
Reference-contexts: These include non-ideal reconstruction and errors due to the finite precision of floating-point arithmetic. In addition, ray traced algorithms introduce artifacts due to point sampling of screen space, and splatting algorithms introduce artifacts because reconstruction and projection are reordered <ref> [8] </ref>. The methods described in this paper compute a guaranteed bound on the error, but not necessarily the tightest bound possible.
Reference: [9] <author> LEVOY, M. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications 8, </journal> <month> 3 (May </month> <year> 1988), </year> <pages> 29-37. </pages>
Reference-contexts: Thus, we must rely upon some form of numerical quadrature. Many volume rendering algorithms evaluate the integral using a piecewise constant approximation the domain of integration is broken into small segments where * is assumed to be related to ff by a constant <ref> [9, 4, 11, 10, 16] </ref>. Under this restriction the integral of each of the segments reduces to a simple arithmetic expression.
Reference: [10] <author> MAX, N., HANRAHAN, P., AND CRAWFIS, R. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics 24, </booktitle> <month> 5 (November </month> <year> 1990), </year> <pages> 27-33. </pages>
Reference-contexts: Thus, we must rely upon some form of numerical quadrature. Many volume rendering algorithms evaluate the integral using a piecewise constant approximation the domain of integration is broken into small segments where * is assumed to be related to ff by a constant <ref> [9, 4, 11, 10, 16] </ref>. Under this restriction the integral of each of the segments reduces to a simple arithmetic expression.
Reference: [11] <author> SABELLA, P. </author> <title> A rendering algorithm for visualizing 3D scalar fields. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (August </month> <year> 1988), </year> <pages> 51-57. </pages>
Reference-contexts: Thus, we must rely upon some form of numerical quadrature. Many volume rendering algorithms evaluate the integral using a piecewise constant approximation the domain of integration is broken into small segments where * is assumed to be related to ff by a constant <ref> [9, 4, 11, 10, 16] </ref>. Under this restriction the integral of each of the segments reduces to a simple arithmetic expression.
Reference: [12] <author> SOBOLEV, V. V. </author> <title> A Treatise on Radiative Transfer. </title> <address> D. </address> <publisher> Van Nostrand Company, </publisher> <address> Princeton, New Jersey, </address> <year> 1963. </year> <title> Translated by S.I. </title> <publisher> Gaposchkin. </publisher>
Reference-contexts: For convenience, we define f (x) to be the integrand of Equation (1), a *(x): Equation (1) can be derived directly from the low-albedo approximation to light scattering inside a 3D volume <ref> [6, 2, 3, 12] </ref>. In a typical volume rendering application, ff is mapped to material density, and * is mapped to the product of material density, color, and a shading function.
Reference: [13] <author> STOER, J., AND BULIRSCH, R. </author> <title> Introduction to Numerical Analysis. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1980. </year> <note> Translated by R. </note> <author> Bartels, W. Gautschi, and C. </author> <note> Witzgall. </note>
Reference-contexts: This is a coarse bound but has the advantage of requiring no root finding. 4 Trapezoid and Simpson's Rule The trapezoid rule and Simpson's rule are two instances of Newton-Cotes quadrature formulae <ref> [13, 1] </ref>. These methods approximate the integrand via a polynomial spline which is integrated to yield an approximation to the integral.
Reference: [14] <author> THOMAS, JR., G. B., AND FINNEY, R. L. </author> <title> Calculus and Analytic Geometry, fifth ed. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: n (x), f (x) = P n (x) + R n (x) (13) where P n (x) = k=0 k! k R n (x) = f (c) (n + 1)! for some c 2 [0; x] : 2 Proofs of this theorem may be found in most introductory calculus texts <ref> [14] </ref>.
Reference: [15] <author> UPSON, C., AND KEELER, M. V-buffer: </author> <title> Visible volume rendering. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (August </month> <year> 1988), </year> <pages> 59-64. </pages>
Reference-contexts: Under this restriction the integral of each of the segments reduces to a simple arithmetic expression. Another common technique, applicable if ff is symbolically integrable, is to solve the inner integral of Equation (1) directly, and approximate the outer integral using a deterministic quadrature formula <ref> [6, 15, 7] </ref>, or via Monte Carlo [5]. While all these strategies are known to increase in accuracy as the number of segments or samples increases, no precise error bounds have been given in the literature. <p> We have implemented the ray casting technique of Upson and Keeler <ref> [15] </ref>, augmented with the controlled precision quadrature methods described here. The ray integral is partitioned by its intersections with the voxel grid, and quadrature methods are applied to compute the brightness of each segment. To simplify computation, the integrand is reparameterized in each segment so that a = 0.
Reference: [16] <author> WILHELMS, J., AND GELDER, A. V. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics 25, </booktitle> <month> 4 (July </month> <year> 1991), </year> <pages> 275-284. </pages>
Reference-contexts: Thus, we must rely upon some form of numerical quadrature. Many volume rendering algorithms evaluate the integral using a piecewise constant approximation the domain of integration is broken into small segments where * is assumed to be related to ff by a constant <ref> [9, 4, 11, 10, 16] </ref>. Under this restriction the integral of each of the segments reduces to a simple arithmetic expression.
References-found: 16

