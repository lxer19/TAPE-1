URL: http://www.cs.tamu.edu/people/jennyw/mutex.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/jennyw/
Root-URL: http://www.cs.tamu.edu
Email: E-mail: fjennyw, skinig@cs.tamu.edu  
Title: Mutual Exclusion on Multihop, Mobile Wireless Networks  
Author: Jennifer Walter Savita Kini 
Date: December 9, 1997  
Address: College Station, TX 77843-3112  
Affiliation: Texas A&M University  
Pubnum: TR97-014  
Abstract: The system considered in this paper is a mobile wireless network, commonly known as an ad hoc network. Mobile nodes in this dynamic topology function both as processors and routers to provide communication between nodes which are not within wireless transmission range. We present a token based mutual exclusion algorithm designed for an ad hoc distributed system. This mutual exclusion algorithm modifies a logical tree structure when link failures occur or when the token moves, thereby adapting to node mobility.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> Structuring distributed algorithms for mobile hosts. </title> <booktitle> In 14th IEEE Intl. Conf. on Distributed Computing, </booktitle> <pages> pages 21-28, </pages> <year> 1994. </year>
Reference: [2] <author> S. Bulgannawar. </author> <title> A distributed k-mutual exclusion algorithm. </title> <type> Master's thesis, </type> <institution> Texas A&M University, </institution> <year> 1994. </year>
Reference-contexts: Distributed mutual exclusion algorithms discussed in the literature are generally separated into two categories: permission based and token based <ref> [2] </ref>. Permission based mutual exclusion algorithms require all nodes to reach agreement on the location of the node with access rights to the critical section, resulting in a large overhead due to message passing.
Reference: [3] <author> Y. Chang, M. Singhal, and M. Liu. </author> <title> A fault tolerant algorithm for distributed mutual exclusion. </title> <booktitle> In Proc. of 9th IEEE Symp. on Reliable Dist. Systems, </booktitle> <pages> pages 146-154, </pages> <year> 1990. </year>
Reference-contexts: Many solutions have been presented for this problem in static distributed systems (e.g., [11, 12, 13]), some of which provide fault tolerance to both site and communication link failures (e.g., <ref> [3] </ref>). Distributed mutual exclusion algorithms discussed in the literature are generally separated into two categories: permission based and token based [2]. <p> Cyclic paths mean increased cost in terms of number of messages sent and node energy expended, indicating this algorithm will probably not be very efficient if it runs directly on top of an ad hoc routing protocol. The algorithm of <ref> [3] </ref> is similar to the algorithm described above, but uses a directed acyclic graph (DAG) of token-oriented pointers, maintaining multiple paths leading to the token. This algorithm is fault tolerant and is designed for arbitrary topologies. <p> communication links can experience a high degree of interference, resulting in frequent transmission errors. 4 The Reverse Link Mutual Exclusion Algorithm Layering Approach 2 The event-driven algorithm combines a tree based routing protocol presented in [7] and a fault tolerant, token based, distributed mutual exclusion algorithm like that presented in <ref> [3] </ref>. We adapt the algorithm of [3] to a wireless multihop network, where logical links correspond to actual physical connectivity. The algorithm is well suited to the distributed mobile setting because it requires nodes to keep information only about their immediate (one-hop) neighbors. <p> degree of interference, resulting in frequent transmission errors. 4 The Reverse Link Mutual Exclusion Algorithm Layering Approach 2 The event-driven algorithm combines a tree based routing protocol presented in [7] and a fault tolerant, token based, distributed mutual exclusion algorithm like that presented in <ref> [3] </ref>. We adapt the algorithm of [3] to a wireless multihop network, where logical links correspond to actual physical connectivity. The algorithm is well suited to the distributed mobile setting because it requires nodes to keep information only about their immediate (one-hop) neighbors. <p> We also briefly discuss several ways to relax the assumptions made in section 3 and how these relaxations will affect the correctness and performance of the algorithm. 7.1 Optimizations 7.1.1 Node Enqueues Itself First An optimization such as the one used in the algorithm of <ref> [3] </ref> could be utilized in the reverse link algorithm to improve the performance when the rate of requests is high.
Reference: [4] <author> C. Chiang and M. Gerla. </author> <title> Routing and multicast in multihop, mobile wireless networks. </title> <note> In Proc. of ICUPC '97-to appear, </note> <year> 1997. </year>
Reference-contexts: In addition, we require that no processor stays in the CS forever. Most of the algorithms that have been developed to date for ad hoc networks are routing protocols, such as <ref> [10, 4, 5, 8] </ref>. Since these protocols ensure message delivery to any reachable node, it should be possible to implement many distributed algorithms directly on top of the routing protocol (as shown in figure 1 (a)).
Reference: [5] <author> R. Dube, C. D. Rais, K. Wang, and S. K. Tripathi. </author> <title> Signal stability based adaptive routing (SSA) for ad-hoc mobile networks. </title> <journal> IEEE Personal Communications, </journal> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: In addition, we require that no processor stays in the CS forever. Most of the algorithms that have been developed to date for ad hoc networks are routing protocols, such as <ref> [10, 4, 5, 8] </ref>. Since these protocols ensure message delivery to any reachable node, it should be possible to implement many distributed algorithms directly on top of the routing protocol (as shown in figure 1 (a)).
Reference: [6] <author> G. Forman and J. Zahorjan. </author> <title> The challenges of mobile computing. </title> <journal> IEEE Computer, </journal> <volume> 27(4) </volume> <pages> 38-47, </pages> <year> 1994. </year>
Reference-contexts: In an ad hoc network, the network connectivity and number of participants in the distributed algorithm are dynamic. Also, MHs are inherently resource poor <ref> [6] </ref>, implying that distributed algorithms designed to function in such an environment should be as efficient, in terms of energy expenditures at each node, as possible.
Reference: [7] <author> E. Gafni and D. Bertsekas. </author> <title> Distributed algorithms for generating loop-free routes in networks with frequently changing topology. </title> <journal> IEEE Transactions on Communications, </journal> <volume> C-29(1):11-18, </volume> <year> 1981. </year>
Reference-contexts: In this paper, we present a token based distributed mutual exclusion algorithm for the ad hoc environment. Our algorithm provides mutual exclusion using methods developed in <ref> [7] </ref> for loop-free routing protocols on ad hoc networks. In sections 2 and 3 we describe the mutual exclusion problem in more detail and state the assumptions we make about the ad hoc network and MHs. The mutual exclusion algorithm is presented in section 4. <p> be unrealistic for the mobile environment, where MHs are extremely vulnerable to failure and wireless communication links can experience a high degree of interference, resulting in frequent transmission errors. 4 The Reverse Link Mutual Exclusion Algorithm Layering Approach 2 The event-driven algorithm combines a tree based routing protocol presented in <ref> [7] </ref> and a fault tolerant, token based, distributed mutual exclusion algorithm like that presented in [3]. We adapt the algorithm of [3] to a wireless multihop network, where logical links correspond to actual physical connectivity. <p> When the next node on the return path is found, the token is passed again. 5. Links may fail and be created during the algorithm. When this happens, the DAG is restructured by adjusting the relative elevations of adjacent nodes using techniques described in <ref> [7] </ref>. failures. Part (a) depicts a simple ad hoc network with nodes connected by wireless links. Part (b) shows the state of the network with logical links after initialization by the mutual exclusion algorithm. <p> If not, no action is taken other than removing j from the sets outgoing i or incoming i and neighbors i . If j was the last remaining element in outgoing i , M H i invokes the procedure Rearrange (i) (see figure 13), in which the partial reversal <ref> [7] </ref> method is executed. In the partial reversal method, M H i is associated with a triple E i (ff i ; fi i ; i), which represents the relative "elevation" of M H i in comparison to all its neighbors.
Reference: [8] <author> D. B. Johnson and D. A. Maltz. </author> <title> Dynamic source routing in ad hoc wireless networks. </title> <editor> In T. Imielinski and H. Korth, editors, </editor> <booktitle> Mobile Computing to appear. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference-contexts: In addition, we require that no processor stays in the CS forever. Most of the algorithms that have been developed to date for ad hoc networks are routing protocols, such as <ref> [10, 4, 5, 8] </ref>. Since these protocols ensure message delivery to any reachable node, it should be possible to implement many distributed algorithms directly on top of the routing protocol (as shown in figure 1 (a)). <p> This message is propagated throughout the network on incoming links until the destination (path i ) is found (see figure 14 and section 4.3.6 for details of the search process). This search process is similar to the dynamic source routing (DSR) strategy used in <ref> [8] </ref> in the following respects: it is initiated by the source, the search process floods the network, and the destination responds with a reply to the source.
Reference: [9] <author> L. Lamport. </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <year> 1978. </year>
Reference-contexts: We focus on mutual exclusion in an ad hoc network of mobile nodes 1 . Several distributed algorithms have been adapted to the single hop 2 or cellular mobile setting. Badrinath et al.[1] modify Lamport's mutual exclusion algorithm <ref> [9] </ref> using a two-tier transformation, to function on single-hop networks in which a core of fixed base stations (BSs) can be used as proxies to perform the majority of the computation and communication required during the execution of the algorithm. <p> Maintaining synchronization in this way requires machinery which adds weight to the mobile nodes and causes increased energy consumption. Modifying the reverse link algorithm to use some type of logical timestamp (as in <ref> [9] </ref>) would not be difficult. 8 Discussion and Future Work As computation becomes increasingly untethered, users of ad hoc networks may expect to utilize distributed services which are currently available only on static, wired systems.
Reference: [10] <author> V. Park and M. S. Corson. </author> <title> A highly adaptive distributed routing algorithm for mobile wireless networks. </title> <booktitle> In Proc. of INFOCOM `97, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: In addition, we require that no processor stays in the CS forever. Most of the algorithms that have been developed to date for ad hoc networks are routing protocols, such as <ref> [10, 4, 5, 8] </ref>. Since these protocols ensure message delivery to any reachable node, it should be possible to implement many distributed algorithms directly on top of the routing protocol (as shown in figure 1 (a)). <p> Direct measurement of energy consumption is possible through implementation and otherwise can only be estimated. Accurate estimation of the impact of node mobility also requires direct measurement through implementation or simulation. The complexity parameters we use are the same as the worst-case analysis from <ref> [10] </ref> and are listed in table 6.1 n the number of network nodes and maximum network diameter l the number of nodes in a network segment affected by a topology change p the longest directed path in an affected network segment the maximum nodal degree ffi the time for a message <p> We then compare the performance of this algorithm to the performance of the mutual exclusion algorithm of [11], described in section 2, using layering approach 1 on top of the TORA <ref> [10] </ref> ad hoc routing protocol (referred to from this point on as TORA-L1). We choose to compare our algorithm to this routing protocol since it uses a similar strategy to the RL algorithm. <p> Likewise, the storage space used in the TORA-L1 scheme would be O (n) <ref> [10] </ref>. Under the assumptions we make on our system, each request requires O (p) messages to arrive at the privileged node in the RL algorithm and therefore also takes O (p) time units.
Reference: [11] <author> K. Raymond. </author> <title> A tree-based algorithm for distributed mutual exclusion. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(1) </volume> <pages> 61-77, </pages> <year> 1989. </year>
Reference-contexts: The mutual exclusion problem involves a group of processors intermittently requiring access to a resource or a piece of code called the critical section (CS), which cannot be used simultaneously by more than one processor. Many solutions have been presented for this problem in static distributed systems (e.g., <ref> [11, 12, 13] </ref>), some of which provide fault tolerance to both site and communication link failures (e.g., [3]). Distributed mutual exclusion algorithms discussed in the literature are generally separated into two categories: permission based and token based [2]. <p> We will refer to this as layering approach 2. 2.1 A Mutual Exclusion Algorithm for Static Networks - Layering Approach 1 In the following, we illustrate a token based algorithm for mutual exclusion similar to the algorithm developed by <ref> [11] </ref>. This algorithm is designed for arbitrary but static topologies. <p> For instance, figure 2 (a) illustrates a rooted tree for a system consisting of 9 nodes. If node D requests the token, the request for the token would travel the path D-A-C-F. Mobility may have an adverse impact on the performance of the mutual exclusion algorithm presented in <ref> [11] </ref> using layering approach 1. Consider the scenario in figure 2 (b), where nodes A and D have moved so that the physical link between nodes A and C has been broken and a new physical link has been formed between nodes A and F. <p> message delay, then starvation will probably not occur, even if nodes are mobile. 2 6 Performance In this section we analyze the complexity of the reverse link mutual exclusion algorithm and compare that complexity to the un-modified static distributed mutual exclusion algorithm with layering approach 1, described in section 2 <ref> [11] </ref>. Prior to this analysis, we shall briefly discuss the complexity measures utilized and provide justifications for these measures. 20 6.1 Complexity Measures for Ad Hoc Networks The distinguishing characteristics of ad hoc systems were discussed in section 1. <p> We then compare the performance of this algorithm to the performance of the mutual exclusion algorithm of <ref> [11] </ref>, described in section 2, using layering approach 1 on top of the TORA [10] ad hoc routing protocol (referred to from this point on as TORA-L1). We choose to compare our algorithm to this routing protocol since it uses a similar strategy to the RL algorithm.
Reference: [12] <author> G. Ricart and A. Agrawala. </author> <title> An optimal algorithm for mutual exclusion in computer networks. </title> <journal> Communications of the ACM, </journal> <volume> 24(1) </volume> <pages> 9-17, </pages> <year> 1981. </year>
Reference-contexts: The mutual exclusion problem involves a group of processors intermittently requiring access to a resource or a piece of code called the critical section (CS), which cannot be used simultaneously by more than one processor. Many solutions have been presented for this problem in static distributed systems (e.g., <ref> [11, 12, 13] </ref>), some of which provide fault tolerance to both site and communication link failures (e.g., [3]). Distributed mutual exclusion algorithms discussed in the literature are generally separated into two categories: permission based and token based [2].
Reference: [13] <author> M. Singhal. </author> <title> A heuristically-aided algorithm for mutual exclusion in distributed systems. </title> <journal> IEEE Transactions on Computer Systems, </journal> <volume> 38(5) </volume> <pages> 651-662, </pages> <year> 1989. </year> <month> 26 </month>
Reference-contexts: The mutual exclusion problem involves a group of processors intermittently requiring access to a resource or a piece of code called the critical section (CS), which cannot be used simultaneously by more than one processor. Many solutions have been presented for this problem in static distributed systems (e.g., <ref> [11, 12, 13] </ref>), some of which provide fault tolerance to both site and communication link failures (e.g., [3]). Distributed mutual exclusion algorithms discussed in the literature are generally separated into two categories: permission based and token based [2].
References-found: 13

