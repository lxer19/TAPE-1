URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-028.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Title: Computability of String Functions Over Algebraic Structures Preliminary Version  
Author: Armin Hemmerling 
Note: Parts of this work were done while the author was visiting the ICSI.  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  F.-L.-Jahn Str. 15a, D-17487 Greifswald, Germany;  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Ernst Moritz Arndt University Greifswald, Department of Mathematics and Computer Science  
Pubnum: TR-96-028  
Email: e-mail: hemmerli@rz.uni-greifswald.de  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: August 1996  
Abstract: We present a model of computation for string functions over single-sorted, total algebraic structures and study some features of a general theory of computability within this framework. Our concept generalizes the Blum-Shub-Smale setting of computability over the reals and other rings. By dealing with strings of arbitrary length instead of tuples of fixed length, some suppositions of deeper results within former approaches to generalized recursion theory become superfluous. Moreover, this gives the basis for introducing computational complexity in a BSS-like manner. Relationships both to classical computability and to Friedman's concept of eds computability are established. Two kinds of nondeterminism as well as several variants of recognizability are investigated with respect to interdependencies on each other and on properties of the underlying structures. For structures of finite signatures, there are universal programs with the usual characteristics. In the general case (of not necessarily finite signature), the existence of universal functions is equivalent to the effective encodability of the structures, whereas the existence of m-complete sets turns out to be independent on those properties. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Asser, Rekusive Wortfunktionen. Zeitschr. f. </author> <title> math. </title> <journal> Logik und Grundlagen d. Math. </journal> <volume> 6, </volume> <year> 1960, </year> <pages> 258-278 </pages>
Reference-contexts: The treatment of string functions is necessary from practical demands in order to get a uniform computation device, and it just gives the opportunity to define time complexity in a BSS-like style. So, like Asser's paper <ref> [1] </ref> did for classical recursion theory some decades 1 ago, the present paper tries to stress the importance and usefulness of string processing, now for computability over general structures. <p> The analogue does not hold, however, over the ordered field R of real numbers. Indeed, the function ' p (w) = abs (w <ref> [1] </ref>) is computed by the N 2 -program 9 L 0 : if not ( r-end (p 2 ) ) then goto (L 0 ) ; fp 2 to the right endg r-app (p 2 ) ; guess (p 2 ") ; if p 1 " 0 then p 1 ":= <p> In the deterministic case, this means that ' is a partial-recursive word function, cf. <ref> [1] </ref>. For further relationships to classical computability, see the next section. Over the ordered field of reals, R, our notion of deterministic computability by quasipro-grams coincides with the computability by a deterministic BSS machine. The concept of nondeterminism used by BSS corresponds to our nondeterminism of the second kind.
Reference: [2] <author> B. Balzer, </author> <title> Erkennbarkeitsbegriffe uber allgemeinen Strukturen. </title> <type> Diploma Thesis, </type> <institution> E.-M.-A.-Universitat Greifswald, </institution> <year> 1996 </year>
Reference-contexts: For structures of finite signatures, a first attempt has been done under the author's guidance in <ref> [2] </ref>. Proposition 6.2 Every enumerable set is recognizable; every recognizable set is an output set. The first assertion holds trivially for the empty set and each singleton fw 0 g consisting of a constructible element w 0 .
Reference: [3] <author> E. Bishop, </author> <title> Foundations of constuctive analysis. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1967 </year>
Reference-contexts: Finally, the several theories of effective analysis and type 2 computability should be mentioned in this context, even if their paradigm of computation by approximation differs considerably from our point of view. Related surveys and discussions can be found in <ref> [3, 72, 73, 36] </ref>. In some sense, our model is a modification of Friedman's generalized Turing algorithms. Moreover, for structures of finite signatures, it is equivalent to a uniform version of Fried-man's effective definitional schemes.
Reference: [4] <author> M. Ben-Or, D. Kozen, J. Reif, </author> <title> The complexity of elementary algebra and geometry. </title> <type> JCSS 32, </type> <year> 1986, </year> <pages> 251-264 </pages>
Reference: [5] <author> L. Blum, </author> <title> Lectures on a theory of computation and complexity over the reals (or an arbitrary ring). ICSI, </title> <address> Berkeley, CA, TR-89-065 </address>
Reference-contexts: Blum, M. Shub and S. Smale (BSS) in their seminal paper [8]. For further presentations and surveys of BSS theory, see <ref> [5, 6, 44, 45, 7] </ref>. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure.
Reference: [6] <author> L. Blum, </author> <title> A theory of computation and complexity over the real numbers. ICSI, </title> <address> Berkeley, CA, TR-90-058 </address>
Reference-contexts: Blum, M. Shub and S. Smale (BSS) in their seminal paper [8]. For further presentations and surveys of BSS theory, see <ref> [5, 6, 44, 45, 7] </ref>. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure.
Reference: [7] <author> L. Blum, F. Cucker, M. Shub, S. Smale, </author> <title> Complexity and real computation: a manifesto. ICSI, </title> <address> Berkeley, CA, TR-95-042 </address>
Reference-contexts: Blum, M. Shub and S. Smale (BSS) in their seminal paper [8]. For further presentations and surveys of BSS theory, see <ref> [5, 6, 44, 45, 7] </ref>. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure.
Reference: [8] <author> L. Blum, M. Shub, S. Smale, </author> <title> On a theory of computation and complexity over the real numbers: NP-completeness, recursive functions and universal machines. </title> <journal> Bulletin of the AMS 21, </journal> <year> 1989, </year> <pages> 1-46 </pages>
Reference-contexts: Our notion generalizes the concept of computability over the field of real numbers and other rings, as it has been introduced and, in particular with respect to time complexity, successfully applied by L. Blum, M. Shub and S. Smale (BSS) in their seminal paper <ref> [8] </ref>. For further presentations and surveys of BSS theory, see [5, 6, 44, 45, 7]. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure.
Reference: [9] <author> L. Blum, S. Smale, </author> <title> The Godel incompleteness theorem and decidability over a ring. ICSI, Berkeley, CA, TR-90-036. also in: From Topology to Computation: </title> <booktitle> Proc. of the Smalefest. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, Berlin, </address> <year> 1993, </year> <pages> 321-339 </pages>
Reference: [10] <author> E. Borger, Berechenbarkeit, Komplexitat, </author> <title> Logik. </title> <address> Vieweg-Verlag, Braunschweig, Wiesbaden 1992 </address>
Reference: [11] <author> R. E. Byerly, </author> <title> Ordered subrings of the reals in which output sets are recusively enumerable. </title> <booktitle> Proc. of the AMS 118, </booktitle> <year> 1993 </year>
Reference-contexts: Now we are going to deal with the relationships between halting sets and output sets which seem to be more complicated, at least over non-enumerable structures. For example, it is known that over the ordered field of real numbers, R, all output sets are halting sets <ref> [48, 11] </ref>. Over general structures, this coincidence is equivalent to the closure property of the class of all halting sets under projection.
Reference: [12] <author> F. Cucker, M. Matamala, </author> <title> On digital nondeterminism. </title> <note> Preprint 1993 </note>
Reference-contexts: The concept of nondeterminism used by BSS corresponds to our nondeterminism of the second kind. Binary nondeterminism over the reals (also called digital or weak nondeterminism) has been considered in <ref> [12, 13, 27] </ref> in connection with polynomially bounded complexity classes.
Reference: [13] <author> F. Cucker, M. Shub, S. Smale, </author> <title> Separation of complexity classes in Koiran's weak model. </title> <type> TCS 133, </type> <year> 1994, </year> <pages> 3-14 </pages>
Reference-contexts: The concept of nondeterminism used by BSS corresponds to our nondeterminism of the second kind. Binary nondeterminism over the reals (also called digital or weak nondeterminism) has been considered in <ref> [12, 13, 27] </ref> in connection with polynomially bounded complexity classes.
Reference: [14] <author> L. van den Dries, </author> <title> Alfred Tarski's elimination theorie for real closed fields. </title> <journal> J. Symb. Logic 53, </journal> <year> 1988, </year> <pages> 7-19 </pages>
Reference-contexts: Thus, the function ' p cannot be computed by such a program. Therefore, N 2 -programs over R are strictly more powerful than N 1 -programs, with respect to the computation of functions. Using Tarski's <ref> [70, 14] </ref> method of effective quantifier elimination, one can show, however, that every set of strings over R, which is recognizable by an N 2 -program, can even be recognized by a deterministic program, cf. Propositions 7.1 and 7.5 below. <p> The structure of elementary arithmetic, A, is constructive but does not admit effective quantifier elimination, since its first-order theory is undecidable [26]. On the other hand, the ordered field of real numbers, R, admits effective quantifier elimination <ref> [70, 14] </ref>, but the square root represents an N 2 -computable function that is not N 1 -computable.
Reference: [15] <author> E. </author> <title> Engeler, Algorithmic properties of structures. </title> <journal> Math. System Theory 1, </journal> <year> 1967, </year> <pages> 183-195 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to [55, 40, 38, 17]. Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler <ref> [15] </ref> introduced a programming approach to algorithmic properties of structures. Finally, H. Friedman [20, 61, 21] contributed a further, rather natural and general framework by means of his generalized Turing algorithms and effective definitional schemes. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [16] <editor> E. Engeler, P. Lauchli, Berechnungstheorie fur Informatiker. B. G. </editor> <publisher> Teubner, Stuttgart, </publisher> <year> 1988 </year>
Reference-contexts: For w 1 ; ; w m 2 S + , P (w 0 ;w 1 ;;w m ) is only a quasiprogram in general. Now one obtains the recursion theorem, the fixed-point theorem and Rice's theorem in the same way as in the classical theory, cf. <ref> [16, 56] </ref>. 39 Proposition 8.2 (Recursion Theorem) Let n 2 IN + , and ' : (S + ) n+1 ! S + be a deterministically S-computable function.
Reference: [17] <author> Ju. L. Ershov, </author> <title> Theorie der Numerierungen I, II, III. </title> <editor> Zeitschr. f. Mathem. Logik u. Grundl. d. Math., v. </editor> <volume> 19, </volume> <year> 1973, </year> <pages> 289-388; v. 21, </pages> <year> 1975, </year> <pages> 473-584; v. 23, </pages> <year> 1977, </year> <pages> 289-371 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to <ref> [55, 40, 38, 17] </ref>. Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H.
Reference: [18] <author> J. E. Fenstad, </author> <title> General recursion theory. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin et al., </address> <year> 1980 </year>
Reference-contexts: Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs <ref> [18, 19] </ref>. We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered.
Reference: [19] <author> M. C. </author> <title> Fitting, Fundamentals of generalized recursion theory. </title> <booktitle> Studies in Logic and the Foundations of Mathematics. v. </booktitle> <volume> 105, </volume> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1981 </year>
Reference-contexts: Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs <ref> [18, 19] </ref>. We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered.
Reference: [20] <author> H. Friedman, </author> <title> Algorithmic procedures, generalized Turing algorithms, and elementary recursion theory. </title> <booktitle> Logic Colloquium 1969, </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam 1971, </address> <pages> 361-390 </pages>
Reference-contexts: Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H. Friedman <ref> [20, 61, 21] </ref> contributed a further, rather natural and general framework by means of his generalized Turing algorithms and effective definitional schemes. For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures. <p> Combining this observation with the representation of the sets W v " S n given obove, we obtain a characterization of computable string functions by means of an adaptation of Friedman's <ref> [20] </ref> effective definitional schemes. <p> H. Friedman <ref> [20] </ref> considered some of them as well as related properties of structures and computability. Now we are going to deal with this complex of problems within our framework. In particular, it will turn out in the next two sections that several of the related results by R.
Reference: [21] <author> H. Friedman, R. Mansfield, </author> <title> Algorithmic procedures. </title> <journal> Trans. of the AMS 332, </journal> <year> 1992, </year> <pages> 297-312 </pages>
Reference-contexts: Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H. Friedman <ref> [20, 61, 21] </ref> contributed a further, rather natural and general framework by means of his generalized Turing algorithms and effective definitional schemes. For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [22] <author> R. O. </author> <title> Gandy, </title> <booktitle> Curch's thesis and principles for mechanisms. The Kleene Symposium, </booktitle> <editor> ed. by J. Barwise, H. J. Keisler, K. Kunen, </editor> <publisher> North-Holland PC, </publisher> <address> Amsterdam, </address> <year> 1980, </year> <pages> 123-148 53 </pages>
Reference-contexts: To formulate the analogue for quasicomputability, one has to suppose additionally the ability of generating arbitrary elements of the universe. We don't want to discuss this thesis in detail. It should be justified by the whole of this paper. For a detailed generalization of Gandi's principles <ref> [22] </ref> to computability over arbitrary structures, the reader is referred to [62]. We restrict ourselves to the following two remarks. By allowing term equations as atomic data expressions, i.e., as tests within conditional instructions, we actually study the computability over the structure with identity.
Reference: [23] <editor> R. O. Gandy, C. M. E. Yates (editors), </editor> <booktitle> Logic Colloquium'69. </booktitle> <publisher> North-Holland PC, </publisher> <address> Amsterdam, London, </address> <year> 1971 </year>
Reference-contexts: Finally, H. Friedman [20, 61, 21] contributed a further, rather natural and general framework by means of his generalized Turing algorithms and effective definitional schemes. For a representative view to these endeavours up to the end of the sixties, we refer to <ref> [23] </ref>, in particular to the critical view by G. Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19].
Reference: [24] <author> S. J. Garland, D. C. Luckham, </author> <title> Program schemes, recursion schemes, </title> <journal> and formal Languages. </journal> <volume> JCSS 7, </volume> <year> 1973, </year> <pages> 119-160 </pages>
Reference-contexts: Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. <ref> [32, 39, 24] </ref>, where abstract programs over classes of structures of related signatures are considered. Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see [71, 34, 35]. <p> It also plays a fundamental role in the theory of program schemes, see <ref> [39, 24, 71] </ref>. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [25] <author> C. Ganer, </author> <title> On NP -completeness for linear machines. </title> <note> submitted for publication </note>
Reference-contexts: Smale's question if there are N P -complete sets over the structures R lin or R lin; , see [43, 44, 47]. K. Meer [43] conjectured that this is not the case, since these structures don't even own universal functions. Recently, C. Ganer <ref> [25] </ref> has shown that both structures have N P -complete sets. So it seems to be appropriate to consider the concept of universal function a little more detailed. Moreover, in the next section, we shall deal with m-completeness which is the recursive analogue of N P -completeness. <p> Here we follow the idea used by C. Ganer to construct N 1 P -complete sets for the linear structures over the reals. We sketch the main steps of our construction. For more details, the reader is referred to <ref> [25] </ref>. Let P be an f N -program using only the functions g n 1 ; ; g n l (n 1 ; ; n l 2 IN + ). The string precode (P) is defined similar to the code of the program, cf. the beginning of Section 8.
Reference: [26] <author> K. </author> <title> Godel, Uber formal unentscheidbare Satze der Principia Mathematica und verwandter Systeme, I. </title> <journal> Monatshefte fur Math. u. Phys. </journal> <volume> 38, </volume> <year> 1931, </year> <pages> 173-198 </pages>
Reference-contexts: The structure of elementary arithmetic, A, is constructive but does not admit effective quantifier elimination, since its first-order theory is undecidable <ref> [26] </ref>. On the other hand, the ordered field of real numbers, R, admits effective quantifier elimination [70, 14], but the square root represents an N 2 -computable function that is not N 1 -computable.
Reference: [27] <author> J. B. Goode, </author> <title> Accessible telephone directories. </title> <journal> J. Symb. Logic 59, </journal> <year> 1994, </year> <pages> 92-105 </pages>
Reference-contexts: We notice that crucial ideas of our model of computation with respect to structures of finite signatures, in particular the treatment of P-NP questions, have already been outlined and used by J. Goode <ref> [27] </ref> and B. Poizat [53]. This confirms the naturalness of the approach we are going to present. This paper is organized as follows. <p> The concept of nondeterminism used by BSS corresponds to our nondeterminism of the second kind. Binary nondeterminism over the reals (also called digital or weak nondeterminism) has been considered in <ref> [12, 13, 27] </ref> in connection with polynomially bounded complexity classes.
Reference: [28] <author> C. E. Gordon, </author> <title> Finitistically computable functions and relations on an abstract structure (abstract). </title> <journal> J. Symb. Logic 36, </journal> <year> 1971, </year> <month> 704 </month>
Reference-contexts: Soskov and A. Soskova [64, 65, 69, 68], with respect to computability in enumerated structures. Soskov [64, 66, 67] established close relationships between computability via enumerations and the approaches by Friedman and Moschovakis, respectively. Connections of the latter kind have already been announced 25 years ago by C. Gordon <ref> [28] </ref>.
Reference: [29] <author> A. Hemmerling, </author> <title> On genuine complexity and kinds of nondeterminism. </title> <journal> J. Inform. Process. Cybernet. </journal> <volume> EIK 30, </volume> <year> 1994, </year> <pages> 77-96 </pages>
Reference-contexts: More precisely, it considers the digital encodings of those functions or problems. This means, it deals with strings over finite alphabets which possibly represent numbers. The "genuine" complexity of number problems (considered with respect to strings of numbers) has been scarcely investigated so far, cf. <ref> [46, 29] </ref>. In order to deal explicitly with strings, the computation device has necessarily to be equipped with facilities for string handling. It must be able to prolongate a current string by a given element of the structure, or to delete elements of the current string.
Reference: [30] <author> A. Hemmerling, </author> <title> Computability and complexity over structures of finite type. </title> <type> Preprint Nr. 2-1995, </type> <institution> Preprint-Reihe Mathematik, Ernst-Moritz-Arndt-Universitat, Greifswald, </institution> <year> 1995 </year>
Reference-contexts: The model enables us to deal with two fundamental types of nondeterminism. Moreover, it gives an appropriate basis for dealing with computational complexity in a BSS-like setting. This, however, will not be a subject of the present paper; for a previous information, the reader is referred to <ref> [30] </ref>. Since the thirties, when the basic concepts of standard theory of computation had been developed and their fundamental importance had been stressed by Church's Thesis, a lot of work has been done in generalizing the classical approaches to non-classical object domains.
Reference: [31] <author> G. T. Herman, S. D. Isard, </author> <title> Computability over arbitrary fields. </title> <journal> J. London Math. Soc. </journal> <volume> 2, </volume> <year> 1970, </year> <pages> 73-79 </pages>
Reference-contexts: signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [32] <author> Iu. I. Janov, </author> <title> The logical schemes of algorithms. </title> <booktitle> Problems of Cybernetics 1, </booktitle> <year> 1960, </year> <pages> 82-140 </pages>
Reference-contexts: Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. <ref> [32, 39, 24] </ref>, where abstract programs over classes of structures of related signatures are considered. Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see [71, 34, 35].
Reference: [33] <author> A. J. Kfoury, R. N. Moll, M. A. Arbib, </author> <title> A programming approach to computability. </title> <publisher> Springer-Verlag, </publisher> <address> New York et al., </address> <year> 1982 </year>
Reference-contexts: They always stand for [parts of] S-programs in the strong sense of definition. So they play the role of macros well-known from machine-oriented programming. Their use within recursion theory has been demonstrated in <ref> [33, 63] </ref>. Sometimes it is convenient to allow the empty instruction " ". We shall use symbolic labels L 0 ; L 1 ; L 2 ; instead of indices of instructions as goal labels within jumps.
Reference: [34] <author> A. J. Kfoury, </author> <title> Definability by programs in first-order structures. </title> <type> TCS 25, </type> <year> 1983, </year> <pages> 1-66 </pages>
Reference-contexts: We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered. Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see <ref> [71, 34, 35] </ref>. Ideas of generalized computability were used to develop a logical basis for dealing with geometrical constructions, [59]. Computational geometry [54] is also based on generalized models of computation. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [35] <author> A. J. Kfoury, </author> <title> Definability by deterministic and non-deterministic programs (with applications to first-order dynamic logic). </title> <booktitle> Information and Control 65, </booktitle> <year> 1985, </year> <pages> 98-121 </pages>
Reference-contexts: We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered. Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see <ref> [71, 34, 35] </ref>. Ideas of generalized computability were used to develop a logical basis for dealing with geometrical constructions, [59]. Computational geometry [54] is also based on generalized models of computation. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [36] <author> K.-I. Ko, </author> <title> Complexity theory of real functions. </title> <type> Birkhauser, </type> <institution> Boston et al., </institution> <year> 1991 </year>
Reference-contexts: Finally, the several theories of effective analysis and type 2 computability should be mentioned in this context, even if their paradigm of computation by approximation differs considerably from our point of view. Related surveys and discussions can be found in <ref> [3, 72, 73, 36] </ref>. In some sense, our model is a modification of Friedman's generalized Turing algorithms. Moreover, for structures of finite signatures, it is equivalent to a uniform version of Fried-man's effective definitional schemes.
Reference: [37] <author> G. Kreisel, </author> <title> Some reasons for generalising recursion theory. </title> <booktitle> in [23], </booktitle> <pages> 139-198 </pages>
Reference-contexts: For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel <ref> [37] </ref>. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19].
Reference: [38] <author> D. Lacombe, </author> <title> Recursion theoretic structure for relational systems. </title> <booktitle> in [23], </booktitle> <pages> 3-18 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to <ref> [55, 40, 38, 17] </ref>. Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H.
Reference: [39] <author> D. C. Luckham, D. M. R. Park, M. S. Paterson, </author> <title> On formalised computer programs. </title> <type> JCSS 4, </type> <year> 1970, </year> <pages> 220-249 </pages>
Reference-contexts: Kreisel [37]. J. Shepherdson's papers [60, 61, 62] follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. <ref> [32, 39, 24] </ref>, where abstract programs over classes of structures of related signatures are considered. Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see [71, 34, 35]. <p> It also plays a fundamental role in the theory of program schemes, see <ref> [39, 24, 71] </ref>. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [40] <author> A. I. Malcev, </author> <title> Constructive algebras I. </title> <journal> Russian Math. Surveys 16, </journal> <year> 1961, </year> <pages> 77-129 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to <ref> [55, 40, 38, 17] </ref>. Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H.
Reference: [41] <author> A. I. Malzev, </author> <title> Algorithmen und rekursive Funktionen. </title> <publisher> Akademie-Verlag, </publisher> <address> Berlin, </address> <year> 1974 </year>
Reference: [42] <author> K. Meer, </author> <title> Computations over ZZ and IR: a comparision. </title> <editor> J. </editor> <booktitle> of Complexity 6, </booktitle> <year> 1990, </year> <pages> 256-263 </pages>
Reference: [43] <author> K. Meer, </author> <title> A note on a P 6= NP result for a restricted class of real machines. </title> <editor> J. </editor> <booktitle> of Complexity 8, </booktitle> <year> 1992, </year> <pages> 451-453 </pages>
Reference-contexts: Now we are going to deal with universality and related concepts over arbitrary signatures. These investigations are especially encouraged by S. Smale's question if there are N P -complete sets over the structures R lin or R lin; , see <ref> [43, 44, 47] </ref>. K. Meer [43] conjectured that this is not the case, since these structures don't even own universal functions. Recently, C. Ganer [25] has shown that both structures have N P -complete sets. <p> Now we are going to deal with universality and related concepts over arbitrary signatures. These investigations are especially encouraged by S. Smale's question if there are N P -complete sets over the structures R lin or R lin; , see [43, 44, 47]. K. Meer <ref> [43] </ref> conjectured that this is not the case, since these structures don't even own universal functions. Recently, C. Ganer [25] has shown that both structures have N P -complete sets. So it seems to be appropriate to consider the concept of universal function a little more detailed.
Reference: [44] <editor> K. Meer, Komplexitatsbetrachtungen fur reelle Maschinenmodelle. </editor> <publisher> Verlag Shaker, </publisher> <address> Aachen 1993 </address>
Reference-contexts: Blum, M. Shub and S. Smale (BSS) in their seminal paper [8]. For further presentations and surveys of BSS theory, see <ref> [5, 6, 44, 45, 7] </ref>. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure. <p> Now we are going to deal with universality and related concepts over arbitrary signatures. These investigations are especially encouraged by S. Smale's question if there are N P -complete sets over the structures R lin or R lin; , see <ref> [43, 44, 47] </ref>. K. Meer [43] conjectured that this is not the case, since these structures don't even own universal functions. Recently, C. Ganer [25] has shown that both structures have N P -complete sets.
Reference: [45] <author> K. Meer, C. Michaux, </author> <title> A survey on real structural complexity theory. </title> <note> to appear in Bulletin of the Belgian Mathematical Society </note>
Reference-contexts: Blum, M. Shub and S. Smale (BSS) in their seminal paper [8]. For further presentations and surveys of BSS theory, see <ref> [5, 6, 44, 45, 7] </ref>. More precisely, we consider sequential computability of (partial) string functions and recognizability of sets of strings over the universe of a given structure.
Reference: [46] <author> N. Megiddo, </author> <title> Towards a genuinely polynomial algorithm for linear programming. </title> <journal> SIAM J. Comp. </journal> <volume> 12, </volume> <year> 1983, </year> <pages> 347-353 </pages>
Reference-contexts: More precisely, it considers the digital encodings of those functions or problems. This means, it deals with strings over finite alphabets which possibly represent numbers. The "genuine" complexity of number problems (considered with respect to strings of numbers) has been scarcely investigated so far, cf. <ref> [46, 29] </ref>. In order to deal explicitly with strings, the computation device has necessarily to be equipped with facilities for string handling. It must be able to prolongate a current string by a given element of the structure, or to delete elements of the current string.
Reference: [47] <author> N. Megiddo, </author> <title> A general NP-completeness theorem. From Topology to Computation: </title> <booktitle> Proc. of the Smale--fest. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, Berlin, </address> <year> 1993, </year> <pages> 432-442 </pages>
Reference-contexts: Now we are going to deal with universality and related concepts over arbitrary signatures. These investigations are especially encouraged by S. Smale's question if there are N P -complete sets over the structures R lin or R lin; , see <ref> [43, 44, 47] </ref>. K. Meer [43] conjectured that this is not the case, since these structures don't even own universal functions. Recently, C. Ganer [25] has shown that both structures have N P -complete sets. <p> Indeed, the additional operations F (i;s 0 ) can be encoded by the strings pair (w i ; s 0 ), where w i is a code of the base function F i (i 2 I F ). 2 N. Megiddo <ref> [47] </ref> considered such extensions (of structures S of finite signatures) in order to show that his basic construction of N P -complete sets also applies to certain structures of infinite signatures.
Reference: [48] <author> C. Michaux, </author> <title> Ordered rings over which output sets are recursively enumerable. </title> <journal> Proc. Amer. Math. Soc. </journal> <volume> 112, </volume> <year> 1991, </year> <pages> 569-575 </pages>
Reference-contexts: Now we are going to deal with the relationships between halting sets and output sets which seem to be more complicated, at least over non-enumerable structures. For example, it is known that over the ordered field of real numbers, R, all output sets are halting sets <ref> [48, 11] </ref>. Over general structures, this coincidence is equivalent to the closure property of the class of all halting sets under projection.
Reference: [49] <author> C. Michaux, </author> <title> P 6= NP over the nonstandard reals implies P 6= NP over IR. </title> <type> TCS 133, </type> <year> 1994, </year> <pages> 95-104 </pages>
Reference: [50] <author> M. L. Minsky, </author> <title> Computation: finite and infinite machines. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1967 </year>
Reference-contexts: To prove the first part of the proposition, we remember Minsky's <ref> [50] </ref> result that every partial recursive arithmetic function f can be computed by a 3-counter machine M which, starting with the counter contents (n; 0; 0) (i.e. the first counter contains n, the second and third one are empty), finally halts iff f (n) is defined, and then its counter contents
Reference: [51] <author> Y. N. Moschovakis, </author> <title> Abstract computability and invariant definability. </title> <journal> J. Symb. Logic 34, </journal> <year> 1969, </year> <pages> 605-633 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to [55, 40, 38, 17]. Y. Moschovakis <ref> [51, 52] </ref> introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H. <p> But in this case, any constant i can be considered as an abbreviation of the term "1 + + 1" (i times 1) if i &gt; 0, and of a term "(1) + + (1)" if i &lt; 0. Following the differentiation made by Moschovakis <ref> [51, 52] </ref>, in this paper we shall strictly distinguish between S-programs, where only the base constants of the structure are allowed to occur as direct operands, and the so-called S-quasiprograms which are analogously defined but allowing arbitrary elements of the universe as direct operands.
Reference: [52] <author> Y. N. Moschovakis, </author> <title> Abstract first-order computability. I,II. </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 138, </volume> <year> 1969, </year> <pages> 427-504 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to [55, 40, 38, 17]. Y. Moschovakis <ref> [51, 52] </ref> introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H. <p> But in this case, any constant i can be considered as an abbreviation of the term "1 + + 1" (i times 1) if i &gt; 0, and of a term "(1) + + (1)" if i &lt; 0. Following the differentiation made by Moschovakis <ref> [51, 52] </ref>, in this paper we shall strictly distinguish between S-programs, where only the base constants of the structure are allowed to occur as direct operands, and the so-called S-quasiprograms which are analogously defined but allowing arbitrary elements of the universe as direct operands.
Reference: [53] <editor> B. Poizat, Les Petits Cailloux, Une approche modele-theorique de l'Algorithmie. NUR AL-MANTIQ WAL-MA'RIFAH, </editor> <year> 1995 </year>
Reference-contexts: We notice that crucial ideas of our model of computation with respect to structures of finite signatures, in particular the treatment of P-NP questions, have already been outlined and used by J. Goode [27] and B. Poizat <ref> [53] </ref>. This confirms the naturalness of the approach we are going to present. This paper is organized as follows.
Reference: [54] <author> F. P. Preparata, M. I. Shamos, </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin and New York, </address> <year> 1985 </year>
Reference-contexts: Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see [71, 34, 35]. Ideas of generalized computability were used to develop a logical basis for dealing with geometrical constructions, [59]. Computational geometry <ref> [54] </ref> is also based on generalized models of computation. Finally, the several theories of effective analysis and type 2 computability should be mentioned in this context, even if their paradigm of computation by approximation differs considerably from our point of view. <p> To give some examples, we refer to the solution of systems of equations, say over the reals, to vector and matrix operations over fields, to sorting problems, or to the many problems of computational geometry <ref> [54] </ref>, like the computation of the convex hull of a set of points and others. Thus, we have to consider the computability over S, that means the computability of string functions ' : S fl ! S fl .
Reference: [55] <author> M. O. Rabin, </author> <title> Computable algebra, general theory and theory of computable fields. </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 95, </volume> <year> 1960, </year> <pages> 341-360 </pages>
Reference-contexts: First attempts were based on enumerations and numberings of algebraic structures, we refer to <ref> [55, 40, 38, 17] </ref>. Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H.
Reference: [56] <author> H. </author> <title> Rogers Jr.,Theory of recursive functions and effective computability. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1967 </year>
Reference-contexts: For w 1 ; ; w m 2 S + , P (w 0 ;w 1 ;;w m ) is only a quasiprogram in general. Now one obtains the recursion theorem, the fixed-point theorem and Rice's theorem in the same way as in the classical theory, cf. <ref> [16, 56] </ref>. 39 Proposition 8.2 (Recursion Theorem) Let n 2 IN + , and ' : (S + ) n+1 ! S + be a deterministically S-computable function.
Reference: [57] <author> R. Saint John, </author> <title> Output sets, halting sets and an arithmetical hierarchy for ordered substrings of the real numbers under Blum/Shub/Smale Computation. ICSI, </title> <address> Berkeley, CA, TR-94-035 </address>
Reference-contexts: Now we are going to deal with this complex of problems within our framework. In particular, it will turn out in the next two sections that several of the related results by R. Saint John <ref> [57, 58] </ref> for ordered subrings of the reals can be generalized to arbitrary structures. Throughout this section, we only treat deterministic programs and computations.
Reference: [58] <author> R. Saint John, </author> <title> Theory of computation for the real numbers and subrings of the real numbers following Blum/Shub/Smale. </title> <type> Dissertation. </type> <institution> University of California at Berkeley, </institution> <year> 1995 </year>
Reference-contexts: Now we are going to deal with this complex of problems within our framework. In particular, it will turn out in the next two sections that several of the related results by R. Saint John <ref> [57, 58] </ref> for ordered subrings of the reals can be generalized to arbitrary structures. Throughout this section, we only treat deterministic programs and computations.
Reference: [59] <editor> P. Schreiber, Theorie der geometrischen Konstruktionen. </editor> <publisher> Deutscher Verlag der Wissenschaften, </publisher> <address> Berlin, </address> <year> 1975 </year>
Reference-contexts: Several relationships between definability of functions by programs, algebraic properties of the underlying structures and dynamic logic were pointed out, see [71, 34, 35]. Ideas of generalized computability were used to develop a logical basis for dealing with geometrical constructions, <ref> [59] </ref>. Computational geometry [54] is also based on generalized models of computation. Finally, the several theories of effective analysis and type 2 computability should be mentioned in this context, even if their paradigm of computation by approximation differs considerably from our point of view. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures.
Reference: [60] <author> J. C. Shepherdson, </author> <title> Computation over abstract structures: serial and parallel procedures and Friedman's effective definitional schemes. Logic Colloquium '73. </title> <editor> ed. by H. E. Rose and J. C. Shepherdson, </editor> <publisher> North-Holland P.C., </publisher> <address> Amsterdam, </address> <year> 1975, </year> <pages> 445-513 </pages>
Reference-contexts: For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. J. Shepherdson's papers <ref> [60, 61, 62] </ref> follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered.
Reference: [61] <author> J. C. Shepherdson, </author> <title> Algorithmic procedures, generalized Turing algorithms, and elementary recursion theory. </title> <note> Harvey Friedman's research on the foundations of mathematics. </note> <editor> ed by L. H. Harrington et al., </editor> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1985, </year> <note> 285 -308 </note>
Reference-contexts: Y. Moschovakis [51, 52] introduced notions of computability by generalizing the principles of generating primitive-recursive and partial-recursive arithmetic functions. E. Engeler [15] introduced a programming approach to algorithmic properties of structures. Finally, H. Friedman <ref> [20, 61, 21] </ref> contributed a further, rather natural and general framework by means of his generalized Turing algorithms and effective definitional schemes. For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. <p> For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. J. Shepherdson's papers <ref> [60, 61, 62] </ref> follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered. <p> signatures. ? (s 1 ; ; s k ) '(s 1 ; ; s k ) (iff it exists) S-machine ( program ) (= Fig. 1: Computability in S, that means of functions ' : S k ! S with some arity k, has been considered by many authors, cf. <ref> [15, 31, 20, 61, 59, 34, 35, 21] </ref>. It also plays a fundamental role in the theory of program schemes, see [39, 24, 71]. Figure 1 illustrates the underlying basic idea of so-called finite algorithmic procedures. <p> Moreover, if the structure S is of finite signature, there is an (in the classical sense) effective procedure which, for any given pair (n; v), generates an expression representing W v " S n . 19 The basic idea of the proof is simple. Shepherdson <ref> [61] </ref> describes it as following the action of P symbolically.
Reference: [62] <author> J. C. Shepherdson, </author> <title> Mechanisms for computing over arbitrary structures. The Universal Turing Machine, </title>
Reference-contexts: For a representative view to these endeavours up to the end of the sixties, we refer to [23], in particular to the critical view by G. Kreisel [37]. J. Shepherdson's papers <ref> [60, 61, 62] </ref> follow the development up to the present. Detailed presentations of axiomatic approaches were given in the monographs [18, 19]. We also refer to the theory of program schemes, cf. [32, 39, 24], where abstract programs over classes of structures of related signatures are considered. <p> We don't want to discuss this thesis in detail. It should be justified by the whole of this paper. For a detailed generalization of Gandi's principles [22] to computability over arbitrary structures, the reader is referred to <ref> [62] </ref>. We restrict ourselves to the following two remarks. By allowing term equations as atomic data expressions, i.e., as tests within conditional instructions, we actually study the computability over the structure with identity. This 12 is justified by the majority of the examples we are thinking of.
References-found: 62

