URL: http://www-cad.eecs.berkeley.edu/~dealfaro/stacs97-prob.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~dealfaro/pabs.html
Root-URL: 
Title: Temporal Logics for the Specification of Performance and Reliability  
Author: Luca de Alfaro 
Affiliation: Department of Computer Science Stanford University  
Note: In proceedings of STACS'97, LNCS, Springer-Verlag, February-March 1997.  
Abstract: In this paper we present a methodology for the verification of performance and reliability properties of discrete real-time systems. The methodology relies on a temporal logic that can express bounds on the probability of events and on the average time between them. The semantics of the logics is defined with respect to timed systems that exhibit both probabilistic and nondeterministic behavior. We present model-checking algorithms for the algorithmic verification of the specifi cations, and we discuss their complexity. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Alur and D. Dill. </author> <title> The theory of timed automata. </title> <booktitle> In Real-Time: Theory in Practice, volume 600 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 45-73. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The operator P, already present in the probabilistic logics pCTL and pCTL* [13, 23, 2, 5, 17], is used to express bounds on the probability of system behaviors. The instrumentation clocks, related to the clocks used in timed automata <ref> [1] </ref>, are reset depending on the transitions taken by the system, and their values can be used in the logic to reason about the timing behavior of the system. <p> In previous approaches, the specification of timing properties of probabilistic systems relied on temporal operators augmented by time bounds [13, 12, 3]. The instrumentation clocks, derived from the clocks used in timed automata <ref> [1] </ref>, and clocked transition systems [15], lead to a simpler definition of the logic and to a more compact presentation of the model-checking algorithms. 3.2 Syntax of pTL and pTL* We distinguish two classes of pTL and pTL* formulas: the class Stat of state formulas (whose truth value is evaluated on <p> 2 Stat =) 2 Seq ; 2 Seq =) ^ ; : 2 Seq (4) 2 Seq =) 2 ; 3 2 Seq ; 2 Seq =) U 2 Seq : (5) In the above definition, ./ stands for one of f&lt;; ; ; &gt;g, k 2 IN, b 2 <ref> [0; 1] </ref> and d 0. The temporal operators 2 , 3 , U , and the path quantifiers A, E are taken from CTL* [10], the probabilistic operator P is taken from pCTL* [2, 5], and the operator D originates here.
Reference: 2. <author> A. Aziz, V. Singhal, F. Balarin, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> It usually works: The temporal logic of stochastic systems. </title> <booktitle> In Computer Aided Verification, volume 939 of Lect. Notes in Comp. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1995. </year> <title> 2 The use of past temporal operators in non-probabilistic branching-time logics has been discussed in depth in [16]. </title> <type> 11 </type>
Reference-contexts: The operator D, introduced in this paper, is used to express bounds on the average time between events. The operator P, already present in the probabilistic logics pCTL and pCTL* <ref> [13, 23, 2, 5, 17] </ref>, is used to express bounds on the probability of system behaviors. <p> performance and reliability properties of TPNS is based on the use of instrumentation clocks to measure the length of intervals of time, and on the probabilistic temporal logics pTL and pTL*, that extend pCTL and pCTL* by introducing an operator D to express bounds on the average time between events <ref> [13, 2, 5] </ref>. 3.1 Instrumentation Clocks An instrumentation clock ~ is defined by a propositional formula ~ t over P [ P 0 , where P 0 = fx 0 j x 2 Pg. <p> The temporal operators 2 , 3 , U , and the path quantifiers A, E are taken from CTL* [10], the probabilistic operator P is taken from pCTL* <ref> [2, 5] </ref>, and the operator D originates here. As usual, the other propositional connectives are defined in terms of :, ^.
Reference: 3. <author> D. Beauquier and A. Slissenko. </author> <title> Polytime model checking for timed probabilistic computation tree logic. </title> <type> Technical Report TR-96-08, </type> <institution> Dept. of Informatics, Univ. Paris-12, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: In our model, the cost of an action must be either 0 (immediate actions) or 1 (unitary time steps). This system model is closely related to the models proposed in <ref> [12, 22, 3] </ref>. The specification of system properties is based on the logics pTL and pTL*, and on the use of instrumentation clocks to measure the length of intervals of time. <p> Thus, clock ~ measures the time elapsed since the last state transition that satisfies ~ t . In previous approaches, the specification of timing properties of probabilistic systems relied on temporal operators augmented by time bounds <ref> [13, 12, 3] </ref>.
Reference: 4. <author> D.P. Bertsekas. </author> <title> Dynamic Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: The algorithm for the operator P combines the ideas presented in [5] with automata-theoretic constructions, achieving the optimal complexity bound of the earlier algorithm of [6] while exhibiting a relatively simple structure. As discussed in <ref> [9, 8, 4] </ref>, the optimization problems can then be solved by reducing them to linear programming problems. <p> From (9), to decide whether s j= D ./b we need to compute inf C T s; , sup C T s; . This corresponds to the computation of the minimum and maximum first-passage costs of a Markov decision process. As discussed in <ref> [9, 8, 4] </ref>, these costs can be computed by solving linear-programming problems, which require time polynomial in j 10 Complexity of Model Checking Combining the results of the previous sections with the results of [6, 5], we get the following theorem. Theorem 13.
Reference: 5. <author> A. Bianco and L. de Alfaro. </author> <title> Model checking of probabilistic and nondeterministic systems. </title> <booktitle> In Found. of Software Tech. and Theor. Comp. Sci., volume 1026 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 499-513. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The operator D, introduced in this paper, is used to express bounds on the average time between events. The operator P, already present in the probabilistic logics pCTL and pCTL* <ref> [13, 23, 2, 5, 17] </ref>, is used to express bounds on the probability of system behaviors. <p> The algorithm for the operator P combines the ideas presented in <ref> [5] </ref> with automata-theoretic constructions, achieving the optimal complexity bound of the earlier algorithm of [6] while exhibiting a relatively simple structure. As discussed in [9, 8, 4], the optimization problems can then be solved by reducing them to linear programming problems. <p> performance and reliability properties of TPNS is based on the use of instrumentation clocks to measure the length of intervals of time, and on the probabilistic temporal logics pTL and pTL*, that extend pCTL and pCTL* by introducing an operator D to express bounds on the average time between events <ref> [13, 2, 5] </ref>. 3.1 Instrumentation Clocks An instrumentation clock ~ is defined by a propositional formula ~ t over P [ P 0 , where P 0 = fx 0 j x 2 Pg. <p> The temporal operators 2 , 3 , U , and the path quantifiers A, E are taken from CTL* [10], the probabilistic operator P is taken from pCTL* <ref> [2, 5] </ref>, and the operator D originates here. As usual, the other propositional connectives are defined in terms of :, ^. <p> Temporal operators. The truth value of ! j= for a behavior ! and 2 Seq is defined in the usual way (see for example [18]). Path and probabilistic quantifiers. The semantics of the path and probabilistic quantifiers is defined as in pCTL and pCTL* <ref> [5] </ref>: for 2 Seq, 0 b 1 and s 2 S fl , s j= P ./b iff 8 : Pr The intuitive meaning of (8) is that P ./b holds at s 2 S if a behavior has probability ./ b of satisfying , regardless of the policy. <p> we introduce are based on the properties of certain subsets of states of a TPNS, called stable sets. 4.1 Stable Sets Intuitively, a subset of the state space of a TPNS is stable if there is a policy such that all behaviors that enter the subset will never leave it <ref> [5] </ref>. Let Supp (s; a) = ft 2 S j p (t j s; a) &gt; 0g. Stable sets are defined as follows. Definition 4 (stable sets). Consider a TPNS = (P; S; Acts; ; p; c; s in ) and a subset B S. <p> For brevity, we will present algorithms only the logic pTL*, since pTL model checking can be done by combining the results of <ref> [5] </ref> with the methods presented for the D operator. <p> Even though these probabilities can be computed using the algorithm presented in [6], we will follow here a different approach. The algorithm we present relies on the properties of stable sets, and shares the insights of the one presented in <ref> [5] </ref>. However, by relying on the deter minization of !-automata instead of on canonical forms for temporal formulas, the algorithm achieves the optimal complexity bound of the one presented in [6] while exhibiting a relatively simple structure. <p> This algorithm has been recently extended by [17] to logics with fairness assumptions on the policies. The algorithm. By the results of <ref> [6, 5] </ref> there are optimal policies and + that minimize and maximize, respectively, the probability Pr s (! j= ). <p> As discussed in [9, 8, 4], these costs can be computed by solving linear-programming problems, which require time polynomial in j 10 Complexity of Model Checking Combining the results of the previous sections with the results of <ref> [6, 5] </ref>, we get the following theorem. Theorem 13. Given a TPNS , the following assertions hold: 1. Checking whether is non-Zeno can be done in polynomial time in jj. 2. <p> The truth value of D ./b can be defined as in (9). This extended version of the D operator can be model checked by combin ing the techniques of <ref> [5] </ref> with the algorithms presented in the previous section. Specifically, given a TPNS C and a subformula D ./b of , it is possible to construct a TPNS ; C in which the states keep track of the truth values of the past subformulas of ( itself included).
Reference: 6. <author> C. Courcoubetis and M. Yannakakis. </author> <title> Markov decision processes and regular events. </title> <booktitle> In ICALP'90, volume 443 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 336-349. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The algorithm for the operator P combines the ideas presented in [5] with automata-theoretic constructions, achieving the optimal complexity bound of the earlier algorithm of <ref> [6] </ref> while exhibiting a relatively simple structure. As discussed in [9, 8, 4], the optimization problems can then be solved by reducing them to linear programming problems. <p> Even though these probabilities can be computed using the algorithm presented in <ref> [6] </ref>, we will follow here a different approach. The algorithm we present relies on the properties of stable sets, and shares the insights of the one presented in [5]. <p> However, by relying on the deter minization of !-automata instead of on canonical forms for temporal formulas, the algorithm achieves the optimal complexity bound of the one presented in <ref> [6] </ref> while exhibiting a relatively simple structure. This algorithm has been recently extended by [17] to logics with fairness assumptions on the policies. The algorithm. By the results of [6, 5] there are optimal policies and + that minimize and maximize, respectively, the probability Pr s (! j= ). <p> This algorithm has been recently extended by [17] to logics with fairness assumptions on the policies. The algorithm. By the results of <ref> [6, 5] </ref> there are optimal policies and + that minimize and maximize, respectively, the probability Pr s (! j= ). <p> The following theorem states that to compute Pr + s (! j= ) it suffices to compute the maximum probability of reaching T from s 0 in in 0 . As discussed in <ref> [9, 6] </ref>, maximum reachability probabilities can be computed by solving a linear programming problem in time polynomial in j 0 j. Theorem 12. Pr + s (! j= ) = sup Pr s 0 (9k : ! k 2 T ). Proof. <p> As discussed in [9, 8, 4], these costs can be computed by solving linear-programming problems, which require time polynomial in j 10 Complexity of Model Checking Combining the results of the previous sections with the results of <ref> [6, 5] </ref>, we get the following theorem. Theorem 13. Given a TPNS , the following assertions hold: 1. Checking whether is non-Zeno can be done in polynomial time in jj. 2.
Reference: 7. <author> L. de Alfaro. </author> <title> Formal verification of performance and reliability of real-time sys tems. </title> <type> Technical Report STAN-CS-TR-96-1571, </type> <institution> Stanford University, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: We will present algorithms to check whether a TPNS is non-Zeno. Modeling a real-time system with TPNS. While TPNS provide a gen eral model for real-time probabilistic systems, they model systems at a fairly low level. The report <ref> [7] </ref> introduces stochastic real-time systems (SRTS), which provide a more usable modeling language, and it describes how to translate SRTS into TPNS. Translation of stochastic process calculi into models related to TPNS have also been presented in [12].
Reference: 8. <author> E.V. Denardo. </author> <title> Computing a bias-optimal policy in a discrete-time markov decision problem. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 279-289, </pages> <year> 1970. </year>
Reference-contexts: The algorithm for the operator P combines the ideas presented in [5] with automata-theoretic constructions, achieving the optimal complexity bound of the earlier algorithm of [6] while exhibiting a relatively simple structure. As discussed in <ref> [9, 8, 4] </ref>, the optimization problems can then be solved by reducing them to linear programming problems. <p> From (9), to decide whether s j= D ./b we need to compute inf C T s; , sup C T s; . This corresponds to the computation of the minimum and maximum first-passage costs of a Markov decision process. As discussed in <ref> [9, 8, 4] </ref>, these costs can be computed by solving linear-programming problems, which require time polynomial in j 10 Complexity of Model Checking Combining the results of the previous sections with the results of [6, 5], we get the following theorem. Theorem 13.
Reference: 9. <author> C. Derman. </author> <title> Finite State Markovian Decision Processes. </title> <publisher> Acedemic Press, </publisher> <year> 1970. </year>
Reference-contexts: The methodology is based on a probabilistic model for the systems, on a specification language derived from temporal logic, and on model-checking algorithms for the verification of system specifications. We model probabilistic real-time systems as Markov decision processes with finite state space <ref> [9, 19] </ref>. To each state of the Markov decision process is associ ated a set of actions that can be chosen nondeterministically; the successor of the state is then determined according to the probability distribution arising from the action chosen. <p> The algorithm for the operator P combines the ideas presented in [5] with automata-theoretic constructions, achieving the optimal complexity bound of the earlier algorithm of [6] while exhibiting a relatively simple structure. As discussed in <ref> [9, 8, 4] </ref>, the optimization problems can then be solved by reducing them to linear programming problems. <p> and pTL* that increases the expressive power of the logics by allowing the operator D to refer to arbitrary past formulas. 2 Timed Probabilistic Nondeterministic Systems A timed probabilistic nondeterministic system (TPNS) is a Markov decision pro cess in which the cost of the actions is either 0 or 1 <ref> [9] </ref>. Definition 1 (TPNS). A TPNS = (P; S; Acts; ; p; c; s in ) consists of the following components. 1. A set P of propositional symbols. 2. A finite state space S. <p> However, this measure is not well-defined, since the probability that a behavior ! 2 B s belongs to may depend on the criterion by which the actions are chosen. To represent these choice criteria, we use the concept of policy <ref> [9, 19] </ref>. A policy is a set of conditional probabilities Q (a j s 0 a 0 s 1 s n ), where a 2 (s n ). <p> The following theorem states that to compute Pr + s (! j= ) it suffices to compute the maximum probability of reaching T from s 0 in in 0 . As discussed in <ref> [9, 6] </ref>, maximum reachability probabilities can be computed by solving a linear programming problem in time polynomial in j 0 j. Theorem 12. Pr + s (! j= ) = sup Pr s 0 (9k : ! k 2 T ). Proof. <p> From (9), to decide whether s j= D ./b we need to compute inf C T s; , sup C T s; . This corresponds to the computation of the minimum and maximum first-passage costs of a Markov decision process. As discussed in <ref> [9, 8, 4] </ref>, these costs can be computed by solving linear-programming problems, which require time polynomial in j 10 Complexity of Model Checking Combining the results of the previous sections with the results of [6, 5], we get the following theorem. Theorem 13.
Reference: 10. <author> E.A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B, chapter 16, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The temporal operators 2 , 3 , U , and the path quantifiers A, E are taken from CTL* <ref> [10] </ref>, the probabilistic operator P is taken from pCTL* [2, 5], and the operator D originates here. As usual, the other propositional connectives are defined in terms of :, ^.
Reference: 11. <author> E.A. Emerson and C.L. Lei. </author> <title> Modalities for model checking: Branching time strikes back. </title> <booktitle> In Proc. 12th ACM Symp. Princ. of Prog. Lang., </booktitle> <pages> pages 84-96, </pages> <year> 1985. </year>
Reference-contexts: it can be shown that ev ery path must take with probability 1 infinitely many actions with cost bounded away from 0, leading to the desired conclusion. ut 8 4.3 Model Checking of pTL* Formulas The model checking algorithms we present share the same basic structure of those proposed in <ref> [11] </ref> for CTL and CTL*.
Reference: 12. <author> H. Hansson. </author> <title> Time and Probability in Formal Design of Distributed Systems. Else vier, </title> <year> 1994. </year>
Reference-contexts: In our model, the cost of an action must be either 0 (immediate actions) or 1 (unitary time steps). This system model is closely related to the models proposed in <ref> [12, 22, 3] </ref>. The specification of system properties is based on the logics pTL and pTL*, and on the use of instrumentation clocks to measure the length of intervals of time. <p> The report [7] introduces stochastic real-time systems (SRTS), which provide a more usable modeling language, and it describes how to translate SRTS into TPNS. Translation of stochastic process calculi into models related to TPNS have also been presented in <ref> [12] </ref>. <p> Thus, clock ~ measures the time elapsed since the last state transition that satisfies ~ t . In previous approaches, the specification of timing properties of probabilistic systems relied on temporal operators augmented by time bounds <ref> [13, 12, 3] </ref>.
Reference: 13. <author> H. Hansson and B. Jonsson. </author> <title> A framework for reasoning about time and reliability. </title> <booktitle> In Proc. of Real Time Systems Symposium, </booktitle> <pages> pages 102-111. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: The operator D, introduced in this paper, is used to express bounds on the average time between events. The operator P, already present in the probabilistic logics pCTL and pCTL* <ref> [13, 23, 2, 5, 17] </ref>, is used to express bounds on the probability of system behaviors. <p> performance and reliability properties of TPNS is based on the use of instrumentation clocks to measure the length of intervals of time, and on the probabilistic temporal logics pTL and pTL*, that extend pCTL and pCTL* by introducing an operator D to express bounds on the average time between events <ref> [13, 2, 5] </ref>. 3.1 Instrumentation Clocks An instrumentation clock ~ is defined by a propositional formula ~ t over P [ P 0 , where P 0 = fx 0 j x 2 Pg. <p> Thus, clock ~ measures the time elapsed since the last state transition that satisfies ~ t . In previous approaches, the specification of timing properties of probabilistic systems relied on temporal operators augmented by time bounds <ref> [13, 12, 3] </ref>.
Reference: 14. <author> J.G. Kemeny, J.L. Snell, and A.W. Knapp. </author> <title> Denumerable Markov Chains. </title> <address> D. </address> <publisher> Van Nostrand Company, </publisher> <year> 1966. </year>
Reference-contexts: For every state s 2 S, we denote by s the set of behaviors starting from s, and we let B s 2 s be the -algebra of measurable subsets of s , following the classical definition of <ref> [14] </ref>. To be able to talk about the probability of system behaviors, we would like to associate to each 2 B s its probability measure ().
Reference: 15. <author> Y. Kesten, Z. Manna, and A. Pnueli. </author> <title> Verifying clocked transition systems. </title> <booktitle> In Hy brid Systems III, volume 1066 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 13-40. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In previous approaches, the specification of timing properties of probabilistic systems relied on temporal operators augmented by time bounds [13, 12, 3]. The instrumentation clocks, derived from the clocks used in timed automata [1], and clocked transition systems <ref> [15] </ref>, lead to a simpler definition of the logic and to a more compact presentation of the model-checking algorithms. 3.2 Syntax of pTL and pTL* We distinguish two classes of pTL and pTL* formulas: the class Stat of state formulas (whose truth value is evaluated on the states), and the class
Reference: 16. <author> O. Kupferman and A. Pnueli. </author> <title> Once and for all. </title> <booktitle> In Proc. 10th IEEE Symp. Logic in Comp. Sci., </booktitle> <pages> pages 25-35, </pages> <year> 1995. </year>
Reference: 17. <author> M. Kwiatkowska and C. Baier. </author> <title> Model checking for a probabilistic branching time logic with fairness. </title> <type> Technical Report CSR-96-12, </type> <institution> University of Birmingham, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: The operator D, introduced in this paper, is used to express bounds on the average time between events. The operator P, already present in the probabilistic logics pCTL and pCTL* <ref> [13, 23, 2, 5, 17] </ref>, is used to express bounds on the probability of system behaviors. <p> However, by relying on the deter minization of !-automata instead of on canonical forms for temporal formulas, the algorithm achieves the optimal complexity bound of the one presented in [6] while exhibiting a relatively simple structure. This algorithm has been recently extended by <ref> [17] </ref> to logics with fairness assumptions on the policies. The algorithm. By the results of [6, 5] there are optimal policies and + that minimize and maximize, respectively, the probability Pr s (! j= ).
Reference: 18. <author> Z. Manna and A. Pnueli. </author> <title> Models for reactivity. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 609-678, </pages> <year> 1993. </year>
Reference-contexts: The base cases (1) and the cases for logical connectives are immediate. Temporal operators. The truth value of ! j= for a behavior ! and 2 Seq is defined in the usual way (see for example <ref> [18] </ref>). Path and probabilistic quantifiers. <p> A past temporal formula is a formula constructed from state formulas in Stat using the temporal operators 2 - , 3 and S <ref> [18] </ref>. 2 The semantics of this extension can be defined as follows.
Reference: 19. <author> M.L. Puterman. </author> <title> Markov Decision Processes. </title> <publisher> John Wiley and Sons, </publisher> <year> 1994. </year>
Reference-contexts: The methodology is based on a probabilistic model for the systems, on a specification language derived from temporal logic, and on model-checking algorithms for the verification of system specifications. We model probabilistic real-time systems as Markov decision processes with finite state space <ref> [9, 19] </ref>. To each state of the Markov decision process is associ ated a set of actions that can be chosen nondeterministically; the successor of the state is then determined according to the probability distribution arising from the action chosen. <p> However, this measure is not well-defined, since the probability that a behavior ! 2 B s belongs to may depend on the criterion by which the actions are chosen. To represent these choice criteria, we use the concept of policy <ref> [9, 19] </ref>. A policy is a set of conditional probabilities Q (a j s 0 a 0 s 1 s n ), where a 2 (s n ).
Reference: 20. <author> S. Safra. </author> <title> On the complexity of !-automata. </title> <booktitle> In Proc. 29th IEEE Symp. </booktitle> <institution> Found. of Comp. Sci., </institution> <year> 1988. </year>
Reference-contexts: be translated into a deter ministic Rabin automaton DR 0 = (Q; q in ; ; fl; U ) with state space Q, initial state q in 2 Q, alphabet = 2 fr 1 ;:::;r n g , transition relation fl : Q fi 7! Q, and acceptance condition U <ref> [24, 20, 21] </ref>. The acceptance condition is a list U = f (H 1 ; L 1 ); : : : ; (H m ; L m )g of pairs of subsets of Q.
Reference: 21. <author> S. Safra. </author> <title> Exponential determinization for !-automata with strong-fairness accep tance condition. </title> <booktitle> In Proc. ACM Symp. Theory of Comp., </booktitle> <pages> pages 275-282, </pages> <year> 1992. </year>
Reference-contexts: be translated into a deter ministic Rabin automaton DR 0 = (Q; q in ; ; fl; U ) with state space Q, initial state q in 2 Q, alphabet = 2 fr 1 ;:::;r n g , transition relation fl : Q fi 7! Q, and acceptance condition U <ref> [24, 20, 21] </ref>. The acceptance condition is a list U = f (H 1 ; L 1 ); : : : ; (H m ; L m )g of pairs of subsets of Q.
Reference: 22. <author> R. Segala. </author> <title> Modeling and Verification of Randomized Distributed Real-Time Sys tems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1995. </year> <note> Technical Report MIT/LCS/TR-676. </note>
Reference-contexts: In our model, the cost of an action must be either 0 (immediate actions) or 1 (unitary time steps). This system model is closely related to the models proposed in <ref> [12, 22, 3] </ref>. The specification of system properties is based on the logics pTL and pTL*, and on the use of instrumentation clocks to measure the length of intervals of time.
Reference: 23. <author> R. Segala and N.A. Lynch. </author> <title> Probabilistic simulations for probabilistic processes. </title> <booktitle> In CONCUR'94, </booktitle> <volume> volume 836, </volume> <pages> pages 481-496. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The operator D, introduced in this paper, is used to express bounds on the average time between events. The operator P, already present in the probabilistic logics pCTL and pCTL* <ref> [13, 23, 2, 5, 17] </ref>, is used to express bounds on the probability of system behaviors.
Reference: 24. <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proc. First IEEE Symp. Logic in Comp. Sci., </booktitle> <pages> pages 332-344, </pages> <year> 1986. </year> <month> 12 </month>
Reference-contexts: be translated into a deter ministic Rabin automaton DR 0 = (Q; q in ; ; fl; U ) with state space Q, initial state q in 2 Q, alphabet = 2 fr 1 ;:::;r n g , transition relation fl : Q fi 7! Q, and acceptance condition U <ref> [24, 20, 21] </ref>. The acceptance condition is a list U = f (H 1 ; L 1 ); : : : ; (H m ; L m )g of pairs of subsets of Q.
References-found: 24

