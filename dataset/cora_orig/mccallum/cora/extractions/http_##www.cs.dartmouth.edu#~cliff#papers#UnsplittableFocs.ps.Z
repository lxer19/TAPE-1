URL: http://www.cs.dartmouth.edu/~cliff/papers/UnsplittableFocs.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Improved approximation algorithms for unsplittable flow problems (Extended Abstract)  
Author: Stavros G. Kolliopoulos Clifford Stein 
Abstract: In the single-source unsplittable flow problem we are given a graph G; a source vertex s and a set of sinks t 1 ; : : : ; t k with associated demands. We seek a single s-t i flow path for each commodity i so that the demands are satisfied and the total flow routed across any edge e is bounded by its capacity c e : The problem is an NP-hard variant of max flow and a generalization of single-source edge-disjoint paths with applications to scheduling, load balancing and virtual-circuit routing problems. In a significant development, Klein-berg gave recently constant-factor approximation algorithms for several natural optimization versions of the problem [18]. In this paper we give a generic framework that yields simpler algorithms and significant improvements upon the constant factors. Our framework, with appropriate subroutines, applies to all optimization versions previously considered and treats in a unified manner directed and undirected graphs. To give a flavor of our results, consider minimizing relative congestion, i.e. the maximum ratio over all edges e of the flow through e divided by the capacity c e : This metric was a primary testbed for randomized rounding techniques and has been studied extensively. We give a simple (3:23 + o(1))-approximation algorithm for both directed and undirected graphs. The previously known bounds were 16 for the directed and 8:25 for the undirected case. Our approach also gives the first constant-factor approximation for minimum-cost unsplittable flow on directed graphs and improves considerably upon the approximation ratio for the minimum cost version on undirected graphs. The algorithmic techniques we introduce are quite general and apply to related problems as well. For example we use them to give a constructive proof of the following fact. If there exists an algorithm A for (multisource) edge-disjoint paths such that A outputs an approximation for relative congestion that is times the fractional optimum, then a corresponding O()-approximation algorithm exists for multisource unsplittable flow with arbitrary demands and capacities. On the negative side we show that for the problem with two sources, no -approximation with &lt; 2 can be achieved, unless P=NP. We also examine connections with parallel machine 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, A. V. Goldberg, J. B. Orlin, and R. E. Tarjan. </author> <title> Finding Minimum-Cost Flows by Double Scaling. </title> <journal> Mathematical Programming, </journal> <volume> 53 </volume> <pages> 243-266, </pages> <year> 1992. </year>
Reference-contexts: Alternatively, the new max-flow algorithm of Goldberg and Rao [10] may be used with T 1 (n; m) = O (min (n 2=3 ; m 1=2 )m log ( n 2 m ) log U ); when edge capacities can be expressed as integers in the range <ref> [1; : : : ; U ] </ref>: Finally for problem instances with a particular distribution of demands in (0; 1]; a custom implementation of Lemma 3.3 can yield improved approximations. An example is when demands are bounded away from 0 or 1: We omit the details. <p> Currently the best time bound for min-cost flow is T 2 (n; m) = O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) <ref> [9, 1, 23] </ref>. Finally, employing the congestion algorithm of Theorem 3.2 we can obtain a (1:68; 3:23) simultaneous approximation for cost and congestion.
Reference: [2] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network flows: Theory, Algorithms and Applications. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Our algorithms will make use of the well-known flow decomposition theorem <ref> [2] </ref>. Given problem (G; s; T ) let a flow solution f be represented as an edge flow, i.e. an assignment of flow values to edges. <p> Flow decomposition can be done in O (nm) time <ref> [2] </ref>, thus the running time of step 2 is O (nm + m~): Implementing Interval Routing with the augmenting path algorithm gives total running time O (nm) for all the ~ 1 invocations at Step 3.
Reference: [3] <author> R. G. Busaker and P. J. Gowen. </author> <title> A procedure for determining minima-cost flow network patterns. </title> <type> Technical Report ORO-15, </type> <institution> Operational Research Office, Johns Hopkins University, Baltimore, MD, </institution> <year> 1961. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for min-cost flow (developed independently by [13], [12], <ref> [3] </ref>). The lemmata for the analysis follow. They are extensions of the lemmata from the previous section; we omit the proofs in this extended abstract.
Reference: [4] <author> P. Elias, A. Feinstein, and C. E. Shannon. </author> <title> Note on maximum flow through a network. </title> <journal> IRE Transactions on Information Theory IT-2, </journal> <pages> pages 117-199, </pages> <year> 1956. </year>
Reference-contexts: Unless otherwise stated, we use n; m to denote jV j; jEj respectively. The following theorem is an easy consequence of the well-known augmenting path algorithm ([5], <ref> [4] </ref>) and will be of use. It was also used as part of the approximation techniques in [18]. Theorem 2.1 Let G be an arbitrary capacitated network with a source vertex s and a set T of sinks with demands.
Reference: [5] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Maximal flow through a network. </title> <journal> Canad. J. Math., </journal> <volume> 8 </volume> <pages> 399-404, </pages> <year> 1956. </year>
Reference: [6] <author> A. Frank. </author> <title> Packing paths, cuts and circuits a survey. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schrijver, editors, </editor> <booktitle> Paths, Flows and VLSI-Layout, </booktitle> <pages> pages 49-100. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. <ref> [6] </ref>, [27], [26]) or approximating with limited success various objective functions (e.g. [25],[7], [19], [20]). Shedding light on single-source unsplittable flow may lead to a better understanding of this more general problem. Three main optimization versions of unsplittable flow can be defined. minimum congestion.
Reference: [7] <author> N. Garg, V. Vazirani, and M. Yannakakis. </author> <title> Primal-dual approximation algorithms for integral flow and multicut in trees. </title> <journal> Algorithmica, </journal> <volume> 18 </volume> <pages> 3-20, </pages> <year> 1997. </year>
Reference: [8] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> A new approach to the maximum flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: A fractional maximum flow can be found by the push-relabel method of Goldberg and Tarjan <ref> [8] </ref> whose currently fastest implementation has running time T 1 (n; m) = O (nm log m n) [15]. In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single max-flow computation.
Reference: [9] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <journal> Mathematics of Operations Research, </journal> <volume> 15(3) </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: Currently the best time bound for min-cost flow is T 2 (n; m) = O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) <ref> [9, 1, 23] </ref>. Finally, employing the congestion algorithm of Theorem 3.2 we can obtain a (1:68; 3:23) simultaneous approximation for cost and congestion.
Reference: [10] <author> A.V. Golderg and S. Rao. </author> <title> Beyond flow decomposition barrier, </title> <booktitle> 1997. These proceedings. </booktitle>
Reference-contexts: In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single max-flow computation. Alternatively, the new max-flow algorithm of Goldberg and Rao <ref> [10] </ref> may be used with T 1 (n; m) = O (min (n 2=3 ; m 1=2 )m log ( n 2 m ) log U ); when edge capacities can be expressed as integers in the range [1; : : : ; U ]: Finally for problem instances with a
Reference: [11] <author> D.S. Hochbaum and D.B. Shmoys. </author> <title> Using dual approximation algorithms for scheduling problems: theoretical and practical results. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 144-162, </pages> <year> 1987. </year>
Reference-contexts: In case the relative congestion of the unsplittable routing is not 1 one can use the algorithm we propose as a 3=2-relaxed decision procedure in conjunction with a binary search for the optimum congestion to obtain the claimed approximation. See <ref> [11] </ref> for de tails on relaxed decision procedures. Corollary 10.1 For problem S with processing times from fp; 2p; 1g there is a polynomial time algorithm that comes within an additive p of the optimum makespan. The approximation ratio is at most 3=2 and this is best possible, unless P=NP.
Reference: [12] <author> M. Iri. </author> <title> A new method of solving transportation-network problems. </title> <journal> Journal of the Operations Research Society of Japan, </journal> <volume> 3 </volume> <pages> 27-87, </pages> <year> 1960. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for min-cost flow (developed independently by [13], <ref> [12] </ref>, [3]). The lemmata for the analysis follow. They are extensions of the lemmata from the previous section; we omit the proofs in this extended abstract.
Reference: [13] <author> W. S. Jewell. </author> <title> Optimal flow through networks. </title> <type> Technical Report 8, </type> <institution> Operations Research Center, MIT, </institution> <address> Cambridge, MA, </address> <year> 1958. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for min-cost flow (developed independently by <ref> [13] </ref>, [12], [3]). The lemmata for the analysis follow. They are extensions of the lemmata from the previous section; we omit the proofs in this extended abstract.
Reference: [14] <author> L. R. Ford Jr. and D. R. Fulkerson. </author> <title> Flows in networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: Proof. In order to determine in Step 2 the capacity c i e of edge e in the i-th copy G i , 1 i ~; of G we use the flow decomposition theorem <ref> [14] </ref>. Any flow along cycles given by the decomposition theorem is discarded since it does not contribute to the routing of demands.
Reference: [15] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A faster deterministic maximum flow algorithm. </title> <booktitle> In Proceedings of the 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 157-164, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: A fractional maximum flow can be found by the push-relabel method of Goldberg and Tarjan [8] whose currently fastest implementation has running time T 1 (n; m) = O (nm log m n) <ref> [15] </ref>. In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single max-flow computation.
Reference: [16] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicommodity flow. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 726-737, </pages> <year> 1990. </year>
Reference-contexts: congestion, i.e. the maximum ratio over all edges e of flow through e divided by the capacity c e : Minimizing congestion was a primary testbed for the randomized rounding technique of Raghavan and Thompson [25] and has been studied extensively for its connections to multi-commodity flow and cuts (e.g. <ref> [17, 21, 16] </ref>). In fact randomized rounding gives a logarithmic approximation for the multiple-source unsplittable flow problem. maximum routable demand. Find a subset of the sinks of maximum total demand that can be routed while respecting capacity constraints. minimum number of rounds.
Reference: [17] <author> P. Klein, S. A. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 466-487, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: congestion, i.e. the maximum ratio over all edges e of flow through e divided by the capacity c e : Minimizing congestion was a primary testbed for the randomized rounding technique of Raghavan and Thompson [25] and has been studied extensively for its connections to multi-commodity flow and cuts (e.g. <ref> [17, 21, 16] </ref>). In fact randomized rounding gives a logarithmic approximation for the multiple-source unsplittable flow problem. maximum routable demand. Find a subset of the sinks of maximum total demand that can be routed while respecting capacity constraints. minimum number of rounds. <p> The result assumes that the performance guarantee for k-Ufp () is measured against the fractional optimum. This has been the standard practice in the literature for approximating multicom-modity flow and more general packing problems (e.g. <ref> [25, 17, 24, 29] </ref>). Theorem 8.1 Let A be a polynomial-time algorithm that outputs a solution for k-Ufp () that is within of the optimal relative congestion. Then there is a polynomial-time (4 + o (1))-approximation algorithm for relative congestion on an arbitrary k-Ufp (G; S; T ): Proof sketch.
Reference: [18] <author> J. M. Kleinberg. </author> <title> Single-source unsplittable flow. </title> <booktitle> In Proceedings of the 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 68-77, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Single-source unsplittable flow is also important as a unifying framework for a variety of scheduling and load balancing problems <ref> [18] </ref>. It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. <p> Single-source unsplittable flow is also important as a unifying framework for a variety of scheduling and load balancing problems <ref> [18] </ref>. It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], [27], [26]) or approximating with limited success various objective functions (e.g. [25],[7], [19], [20]). <p> Find a subset of the sinks of maximum total demand that can be routed while respecting capacity constraints. minimum number of rounds. Route all the sinks in the minimum number of communication rounds so that during each round capacities are respected. In a major development, Kleinberg <ref> [18] </ref> recently gave constant-factor approximation algorithms for all three optimization versions presented above on both directed and undirected graphs. In the same paper additional motivation for unsplittable flow is presented. Our results. <p> In the same paper additional motivation for unsplittable flow is presented. Our results. We give a new approach for single-source unsplittable flow that has three main advantages. * The algorithms are simple and do not need the machinery developed in <ref> [18] </ref>. * Our approach treats in a unified manner directed and undirected graphs. * We obtain significant improvements upon the approximation ratios for all three optimization ver sions. All our algorithms follow the same generic framework. We first find a maximum (splittable) flow. <p> We note that a grouping scheme is also used in <ref> [18] </ref>, though in a more complicated way; ours is based solely on demand values and does not require any information from the graph. We now elaborate on our results. Minimum congestion. We give a (3:23 + o (1))- approximation algorithm for both directed and undi-rected graphs. <p> Our approach gives the first constant factor approximation for minimum-cost unsplittable flow on directed graphs; it also improves considerably upon the constants known for the minimum cost version on undi-rected graphs. In particular, existing results for undi-rected graphs <ref> [18] </ref> give a simultaneous (7:473; 10:473) approximation for cost and congestion. We give a (1:68; 3:23+o (1)) simultaneous approximation on both directed and undirected graphs. <p> Moreover we show how to obtain a 1 + ffi approximation for cost, for any ffi &gt; 0; at the expense of a larger constant factor for congestion. Maximum routable demand. We show how to route at least :075 of the optimum. In <ref> [18] </ref> the constant is not given explicitly but it can be as low as :031 for undirected graphs and of the order of 10 9 for directed graphs. Minimum number of rounds. <p> Minimum number of rounds. We show how to route all the demands in at most 13 times the optimum number of rounds, an improvement upon the 32 upper bound given in <ref> [18] </ref>. We emphasize that the algorithms for all three different versions are simple and make use of the same generic framework. Although they are presented separately for ease of exposition, they could all be stated in terms of one algorithm, with different subroutines invoked for subproblems. <p> Although they are presented separately for ease of exposition, they could all be stated in terms of one algorithm, with different subroutines invoked for subproblems. The dominant computational steps are maximum flow and flow decomposition; these are tools that work well on both directed and undi-rected graphs. In <ref> [18] </ref> it is noted that "the disjoint paths problem is much less well understood for directed than it is for undirected graphs : : : in keeping with the general principle we will find that the algorithms we obtain for directed graphs will be more complicated". Generalizations. <p> Unless otherwise stated, we use n; m to denote jV j; jEj respectively. The following theorem is an easy consequence of the well-known augmenting path algorithm ([5], [4]) and will be of use. It was also used as part of the approximation techniques in <ref> [18] </ref>. Theorem 2.1 Let G be an arbitrary capacitated network with a source vertex s and a set T of sinks with demands. <p> For each sink t i route, on the corresponding path, flow equal to the demand i ff: Given a real number interval with endpoints a and b; a &lt; b; a &gt; 0; the ratio r (a; b) of the interval is b=a: The following fact is also used in <ref> [18] </ref>; we include a proof for the sake of completeness. <p> Since at least one of the two subinter-vals contains at least half of the total demand in T ; we obtain a constant factor approximation for the entire problem. This was also the high-level approach used in <ref> [18] </ref>. In fact, in order to route the demands in the subinterval (ff; 1] we will use a simple and intuitive algorithm developed by Kleinberg [18]. <p> This was also the high-level approach used in <ref> [18] </ref>. In fact, in order to route the demands in the subinterval (ff; 1] we will use a simple and intuitive algorithm developed by Kleinberg [18]. For the demands in (0; ff]; we show how a partitioning scheme similar to the one used for minimizing congestion can give a simple algorithm with a constant performance guarantee. Again G can be either directed or undi-rected. <p> Let ff f (G; s; T ) denote the maximum total demand routed by a fractional solution f: We will use ff f (G; s; T ); with f a maximum fractional solution, as an upper bound to measure the quality of our approximation. The following lemma, shown in <ref> [18] </ref>, provides us with a routine for our algorithm. The philosophy of the proof is similar to the one of Lemma 3.2. Lemma 6.1 [18] Given an Ufp = (G; s; T ); with demands in the interval (a; b]; there is an algorithm K Routing that finds a partial unsplittable <p> The following lemma, shown in <ref> [18] </ref>, provides us with a routine for our algorithm. The philosophy of the proof is similar to the one of Lemma 3.2. Lemma 6.1 [18] Given an Ufp = (G; s; T ); with demands in the interval (a; b]; there is an algorithm K Routing that finds a partial unsplittable flow g of value at least 1 2 [r (a; b)] 1 ff f (G; s; T ): The algorithm runs in polynomial time. <p> We employ a subroutine that we call KR Routing (see Lemma 5.3 in <ref> [18] </ref>) and a variant R Routing to deal with subprob-lems that have bounded demands. The subroutines are similar in spirit to the subroutines K Routing and M Routing used for the maximum demand metric however their basic ingredient is not Theorem 2.1. <p> The subroutines are similar in spirit to the subroutines K Routing and M Routing used for the maximum demand metric however their basic ingredient is not Theorem 2.1. Max-flow integrality is not useful in the rounds setting and instead Lemma 5.2 from <ref> [18] </ref> is used. We omit the details of the subroutines. Our algorithm R Partition and its analysis are very similar to M Partition. Steps 1 through 3 are exactly the same for both algorithms. <p> It is known that unless P=NP, no approximation better than 3=2 exists for S even with processing times from the set f1; 2; 1g [22]. An approximation-preserving reduction exists from S to minimum congestion unsplittable flow on a three-level directed graph G <ref> [18] </ref>.
Reference: [19] <author> J. M. Kleinberg and E. Tardos. </author> <title> Approximations for the disjoint paths problem in high-diameter planar networks. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 26-35, </pages> <year> 1995. </year>
Reference-contexts: It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], [27], [26]) or approximating with limited success various objective functions (e.g. [25],[7], <ref> [19] </ref>, [20]). Shedding light on single-source unsplittable flow may lead to a better understanding of this more general problem. Three main optimization versions of unsplittable flow can be defined. minimum congestion.
Reference: [20] <author> J. M. Kleinberg and E. Tardos. </author> <title> Disjoint paths in densely-embedded graphs. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 52-61, </pages> <year> 1995. </year>
Reference-contexts: For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], [27], [26]) or approximating with limited success various objective functions (e.g. [25],[7], [19], <ref> [20] </ref>). Shedding light on single-source unsplittable flow may lead to a better understanding of this more general problem. Three main optimization versions of unsplittable flow can be defined. minimum congestion.
Reference: [21] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommod-ity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: congestion, i.e. the maximum ratio over all edges e of flow through e divided by the capacity c e : Minimizing congestion was a primary testbed for the randomized rounding technique of Raghavan and Thompson [25] and has been studied extensively for its connections to multi-commodity flow and cuts (e.g. <ref> [17, 21, 16] </ref>). In fact randomized rounding gives a logarithmic approximation for the multiple-source unsplittable flow problem. maximum routable demand. Find a subset of the sinks of maximum total demand that can be routed while respecting capacity constraints. minimum number of rounds.
Reference: [22] <author> J.K. Lenstra, D.B. Shmoys, and E. Tardos. </author> <title> Approximation algorithms for scheduling unrelated parallel machines. </title> <journal> Mathematical Programming, </journal> <volume> 46 </volume> <pages> 259-271, </pages> <year> 1990. </year>
Reference-contexts: Single-source unsplittable flow is also important as a unifying framework for a variety of scheduling and load balancing problems [18]. It can model bin-packing [18], certain scheduling problems on parallel machines <ref> [22] </ref> and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], [27], [26]) or approximating with limited success various objective functions (e.g. [25],[7], [19], [20]). <p> Applications to scheduling. We also examine applications of unsplittable flow to scheduling problems. A lower bound of 3=2 exists for the approximability of minimum makespan on parallel machines when a job j can be processed only on a subset M (j) of the available machines <ref> [22] </ref>. Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [22] or Shmoys and Tardos [28] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation preserving reduction is known to exist from S <p> A lower bound of 3=2 exists for the approximability of minimum makespan on parallel machines when a job j can be processed only on a subset M (j) of the available machines <ref> [22] </ref>. Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [22] or Shmoys and Tardos [28] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation preserving reduction is known to exist from S to single-source unsplittable flow, so the 3=2 lower bound for unrelated machine scheduling applies to <p> We give a gap-preserving reduction from 3-D Matching to 2-Ufp and show that it is N P -hard to achieve an approximation ratio better than 2: The reduction follows. We use ideas from a reduction in Theorem 5 in <ref> [22] </ref>. Lemma 9.1 and the ensuing theorem hold for both directed and undirected graphs. The proof for the undirected case is more complicated and we omit it. <p> S is a special case of minimizing makespan on unrelated machines. However, the best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling <ref> [22, 28] </ref>. It is known that unless P=NP, no approximation better than 3=2 exists for S even with processing times from the set f1; 2; 1g [22]. An approximation-preserving reduction exists from S to minimum congestion unsplittable flow on a three-level directed graph G [18]. <p> However, the best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling [22, 28]. It is known that unless P=NP, no approximation better than 3=2 exists for S even with processing times from the set f1; 2; 1g <ref> [22] </ref>. An approximation-preserving reduction exists from S to minimum congestion unsplittable flow on a three-level directed graph G [18]. <p> for where the flow through an edge is at most c e + p: Recall that c e is the capacity of edge e in G and is at least 2p: Thus the approximation ratio achieved for relative congestion in G is at most 3=2: The lower bound follows from <ref> [22] </ref>. In case the relative congestion of the unsplittable routing is not 1 one can use the algorithm we propose as a 3=2-relaxed decision procedure in conjunction with a binary search for the optimum congestion to obtain the claimed approximation. See [11] for de tails on relaxed decision procedures.
Reference: [23] <author> J.B. Orlin. </author> <title> A faster strongly polynomial minimum cost flow algorithm. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 377-387, </pages> <year> 1988. </year>
Reference-contexts: Currently the best time bound for min-cost flow is T 2 (n; m) = O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) <ref> [9, 1, 23] </ref>. Finally, employing the congestion algorithm of Theorem 3.2 we can obtain a (1:68; 3:23) simultaneous approximation for cost and congestion.
Reference: [24] <author> S. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Mathematics of Operations Research, </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: The result assumes that the performance guarantee for k-Ufp () is measured against the fractional optimum. This has been the standard practice in the literature for approximating multicom-modity flow and more general packing problems (e.g. <ref> [25, 17, 24, 29] </ref>). Theorem 8.1 Let A be a polynomial-time algorithm that outputs a solution for k-Ufp () that is within of the optimal relative congestion. Then there is a polynomial-time (4 + o (1))-approximation algorithm for relative congestion on an arbitrary k-Ufp (G; S; T ): Proof sketch.
Reference: [25] <author> P. Raghavan and C. D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 365-374, </pages> <year> 1987. </year>
Reference-contexts: Find a flow which minimizes relative congestion, i.e. the maximum ratio over all edges e of flow through e divided by the capacity c e : Minimizing congestion was a primary testbed for the randomized rounding technique of Raghavan and Thompson <ref> [25] </ref> and has been studied extensively for its connections to multi-commodity flow and cuts (e.g. [17, 21, 16]). In fact randomized rounding gives a logarithmic approximation for the multiple-source unsplittable flow problem. maximum routable demand. <p> The result assumes that the performance guarantee for k-Ufp () is measured against the fractional optimum. This has been the standard practice in the literature for approximating multicom-modity flow and more general packing problems (e.g. <ref> [25, 17, 24, 29] </ref>). Theorem 8.1 Let A be a polynomial-time algorithm that outputs a solution for k-Ufp () that is within of the optimal relative congestion. Then there is a polynomial-time (4 + o (1))-approximation algorithm for relative congestion on an arbitrary k-Ufp (G; S; T ): Proof sketch.
Reference: [26] <author> N. Robertson and P. D. Seymour. </author> <title> Outline of a disjoint paths algorithm. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schrijver, editors, </editor> <title> Paths, Flows and VLSI-Layout. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], [27], <ref> [26] </ref>) or approximating with limited success various objective functions (e.g. [25],[7], [19], [20]). Shedding light on single-source unsplittable flow may lead to a better understanding of this more general problem. Three main optimization versions of unsplittable flow can be defined. minimum congestion.
Reference: [27] <author> A. Schrijver. </author> <title> Homotopic routing methods. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schri-jver, editors, </editor> <title> Paths, Flows and VLSI-Layout. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: It can model bin-packing [18], certain scheduling problems on parallel machines [22] and virtual-circuit routing. For the more general multiple-source disjoint paths problem a large amount of work exists for solving exactly interesting special cases (e.g. [6], <ref> [27] </ref>, [26]) or approximating with limited success various objective functions (e.g. [25],[7], [19], [20]). Shedding light on single-source unsplittable flow may lead to a better understanding of this more general problem. Three main optimization versions of unsplittable flow can be defined. minimum congestion.
Reference: [28] <author> D. B. Shmoys and E. Tardos. </author> <title> An approximation algorithm for the generalized assignment problem. </title> <journal> Mathematical Programming A, </journal> <volume> 62 </volume> <pages> 461-474, </pages> <year> 1993. </year>
Reference-contexts: Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [22] or Shmoys and Tardos <ref> [28] </ref> for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation preserving reduction is known to exist from S to single-source unsplittable flow, so the 3=2 lower bound for unrelated machine scheduling applies to single-source unsplittable flow as well. <p> S is a special case of minimizing makespan on unrelated machines. However, the best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling <ref> [22, 28] </ref>. It is known that unless P=NP, no approximation better than 3=2 exists for S even with processing times from the set f1; 2; 1g [22]. An approximation-preserving reduction exists from S to minimum congestion unsplittable flow on a three-level directed graph G [18].
Reference: [29] <author> A. Srinivasan. </author> <title> An extension of the Lovasz Local Lemma and its applications to integer programming. </title> <booktitle> In Proceedings of the 7th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 6-15, </pages> <year> 1996. </year>
Reference-contexts: The result assumes that the performance guarantee for k-Ufp () is measured against the fractional optimum. This has been the standard practice in the literature for approximating multicom-modity flow and more general packing problems (e.g. <ref> [25, 17, 24, 29] </ref>). Theorem 8.1 Let A be a polynomial-time algorithm that outputs a solution for k-Ufp () that is within of the optimal relative congestion. Then there is a polynomial-time (4 + o (1))-approximation algorithm for relative congestion on an arbitrary k-Ufp (G; S; T ): Proof sketch.
Reference: [30] <author> A. Srinivasan. </author> <title> Improved approximations for edge-disjoint paths, unsplittable flow and related routing problems, </title> <booktitle> 1997. These proceedings. </booktitle>
Reference-contexts: This is the first result of this type that we are aware of. Consider next the multiple-source unsplittable flow problem also called single-path multicommodity flow (see <ref> [30] </ref> for recent results).
References-found: 30

