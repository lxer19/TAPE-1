URL: http://www.it.kth.se/docs/Reports/se/design-objects.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/se/
Root-URL: http://www.it.kth.se
Title: ATTRIBUTE MODELS OF DESIGN OBJECTS  
Author: Enn Tyugu 
Abstract: We discuss the usage of deductive systems for representing general design knowledge, and attribute models, which are a kind of constraint networks, for representing implementation knowledge of design objects. This combination of two precisely described (formalized) knowledge systems enables us to represent both kinds of design knowledge and is sufficiently constructive to be used in developing CAD systems. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> Artificial Intelligence: </institution> <year> 1992, </year> <pages> 58(1-3). </pages>
Reference: <author> Bowen, J., Baher, D.: </author> <year> 1991, </year> <title> Full first-order logic in knowledge representation|a constraint-based approach, </title> <institution> Comp. Sci. Tech. Report TR-91-29, North- Carolina State University. </institution>
Reference-contexts: This combination of two precisely described (formalized) knowledge systems enables one to represent both kinds of knowledge and is sufficiently constructive to be used in developing CAD systems. It has been shown in <ref> (Bowen, 1991) </ref> how to add a theory about constraints to a constraint network and to increase the expressive power of the language in this way. Our suggestion differs from this approach in the way of binding the two knowledge systems.
Reference: <author> Brown, K. N., Sims Williams, J. H.: </author> <year> 1992, </year> <title> Grammars of features in design, </title> <editor> in Gero, J. (ed.) </editor> <booktitle> Artificial Intelligence in Design '92, </booktitle> <publisher> Kluwer Acad. Publ. </publisher> <pages> pp. 287-306. </pages>
Reference-contexts: This deductive system for shafts will contain the following symbols for features of shafts: ls, rs | left and right step (called step up and step down in <ref> (Brown, 1992) </ref>) lbs, rbs | left and right bearing support lct, rct | left and right console tips c | central part, i.e. the step of a shaft with the largest diameter. These symbols constitute the alphabet of the language for representing structure of shafts. <p> Obviously, these deductive systems are not the only ways to formalize structure of shafts. We could use a particular case of deductive systems|a context-free grammar, which is a simpler formalism, for the same purpose. Such an example has been discussed in <ref> (Brown, 1992) </ref> where the author concludes that the formalism of grammars is still too restrictive for practical use. We have chosen a very general calculus here|Post's systems in order to illustrate a universal way of combining attribute models with deductive systems. <p> We don't advocate for the usage of general forms of calculi where context-free grammars are sufficient. In this case, attribute models are direct generalisations of attributes and attribute dependencies of attribute grammars which can be also applied in design <ref> (Brown, 1992) </ref>. Also some analogy with data models for design databases (Eastman, 1991) can be observed. From the other side, we can see an analogy between the approach developed in the present paper and defininition of realizability of formulas in constructive logic.
Reference: <author> Dixon, J., Cunningham, J.: </author> <year> 1989, </year> <title> Research in design with features, </title> <editor> in Yoshokawa, H., Gossard, D. eds. </editor> <title> Intelligent CAD, I, </title> <publisher> North-Holland, </publisher> <pages> pp. 137-148. </pages>
Reference-contexts: We hope that the formalization which we have presented here for design objects is sufficiently general to be compatible with more domain-oriented representations. In particular, it supports representations for design with features (Onosato, 1989), <ref> (Dixon, 1989) </ref> as well as hierarchical representations. Acknowledgements This work was started at the Institute of Cybernetics of the Estonian Academy of Sciences where I have got good assistance from my former colleagues Ahto Kalja, Jaak Pahapill and Tiit Tiidemann.
Reference: <author> Eastman, C. M., Bond, A. H., Chase, S. C.:1991, </author> <title> A data model for design databases, </title> <editor> in Gero, J. (ed.) </editor> <booktitle> Artificial Intelligence in Design '91, Butterworth/Heinemann, </booktitle> <pages> pp. 339-365. </pages> <note> Journal of Logic Programming: 1990, bf 9(2,3). </note>
Reference-contexts: In this case, attribute models are direct generalisations of attributes and attribute dependencies of attribute grammars which can be also applied in design (Brown, 1992). Also some analogy with data models for design databases <ref> (Eastman, 1991) </ref> can be observed. From the other side, we can see an analogy between the approach developed in the present paper and defininition of realizability of formulas in constructive logic.
Reference: <author> Knuth, D.: </author> <year> 1968, </year> <title> Semantics of context-free languages, </title> <journal> Math. Systems Theory 2, </journal> <pages> 127-145. </pages>
Reference-contexts: They are associated with symbols of the general design language in the same way as attributes are associated with symbols of the syntactic part of an attribute grammar. These grammars were proposed by D. Knuth long ago for representing semantics of context-free languages <ref> (Knuth, 1968) </ref>. They appeared useful for representing semantics of programming languages, and extensive literature on this subject exists now. Our formalism is a generalisation of attribute grammars in the following ways.
Reference: <author> Maslov, S.: </author> <year> 1987, </year> <title> Theory of deductive systems and its applications, </title> <publisher> The MIT Press. </publisher>
Reference-contexts: As a consequence, we are unable to get general results about the attribute evaluation. Instead of this, we must check the computability of attributes for each particular deductive system used. 2. Deductive Systems A deductive system, also called a formal calculus, <ref> (Maslov, 1987) </ref> is defined by the following three parts: 1. a language for representing objects of the calculus 2. some initially given objects (axioms) 3. rules for deriving new objects from given ones. Logical theories, grammars, automata and algorithms fit under this definition, and are special cases of deductive systems. <p> In this paper, we shall use Post's systems as a form of representation of deductive systems, because this form is very general one and it doesn't impose any particularities on the representation of knowledge. A rather general technique for developing formal calculi for knowledge representation has been developed in <ref> (Maslov, 1987) </ref>. Several formal calculi as knowledge representation means have been developed in (Tyugu, 1991a).
Reference: <author> Onosato, M., Yoshikawa, H.: </author> <year> 1989, </year> <title> A framework on formalization of design object for intelligent CAD, </title> <editor> in Yoshokawa, H., Gossard, D. eds. </editor> <title> Intelligent CAD, I. </title> <publisher> North-Holland, </publisher> <pages> pp. 117-136. </pages>
Reference-contexts: We hope that the formalization which we have presented here for design objects is sufficiently general to be compatible with more domain-oriented representations. In particular, it supports representations for design with features <ref> (Onosato, 1989) </ref>, (Dixon, 1989) as well as hierarchical representations. Acknowledgements This work was started at the Institute of Cybernetics of the Estonian Academy of Sciences where I have got good assistance from my former colleagues Ahto Kalja, Jaak Pahapill and Tiit Tiidemann.
Reference: <author> Tyugu, E.: </author> <year> 1991a, </year> <title> Modularity of Knowledge, </title> <editor> in Hayes, J. E., Michie, D. and Tyugu, E. (eds.) </editor> , <booktitle> Machine Intelligence 12, </booktitle> <publisher> Clarendon Press, </publisher> <pages> pp. 3-15. </pages>
Reference-contexts: We are interested not only in a language of knowledge representation, but in an inference mechanism for using the knowledge as well, i.e. we consider knowledge systems as defined in <ref> (Tyugu, 1991a) </ref>. Design is an activity which requires representation of knowledge on several different levels. <p> A rather general technique for developing formal calculi for knowledge representation has been developed in (Maslov, 1987). Several formal calculi as knowledge representation means have been developed in <ref> (Tyugu, 1991a) </ref>. Research in the theory of design gives us more and more confidence in the possibility of formalization of essential parts of the design process, and it is natural to use the technique of formal calculi in design automation. <p> Attribute Models Languages of formal calculi (of deductive systems) which can be applied in design are powerful enough for representing any kind of kowledge. This thesis has been thoroughly discussed in <ref> (Tyugu, 1991a) </ref>. However, to use a formal calculus in a general form for representing detailed parametric and implementation knowledge would be computationally too expensive. It would be impossible in practice.
Reference: <author> Tyugu, E.: </author> <year> 1991b, </year> <title> Three new generation software environments, </title> <booktitle> Communication of the ACM 34(6), </booktitle> <pages> 46-59. </pages>
Reference-contexts: Continuing our example with shafts, we define now attribute models of constructions of the deductive system of shafts. For this purporse we shall use a syntactically simple language which constitutes a kernel of several constraint languages implemented in a number of programming environments <ref> (Tyugu, 1991b) </ref>. This language allows us to define variables directly as follows: hname of variablei: htypei; Example: ATTRIBUTE MODELS OF DESIGN OBJECTS 7 D: num; where num is a predefined type of numerical values.
References-found: 10

