URL: http://www.physics.utah.edu/~basko/home_dir/BOOKS/MultilevelAdaptiveMethods.ps.gz
Refering-URL: http://www.physics.utah.edu/~basko/home_dir/BOOKS/
Root-URL: 
Email: e-mail: ruede@informatik.tu-muenchen.de  
Title: Data Structures for Multilevel Adaptive Methods and Iterative Solvers  
Author: U. R UDE 
Keyword: Finite elements, data structures, adaptivity, multilevel methods, ob ject oriented programming, C++.  
Date: September 15, 1992  
Address: Arcisstr. 21, D-8000 Munchen 2 Germany  
Affiliation: Institut fur Informatik Technische Universitat Munchen  
Abstract: The adaptive solution of partial differential equations by finite elements must be supported by suitable data structures. Besides an overview of existing adaptive mesh techniques, our analysis provides an abstract treatment discussing the necessary functionality independent of concrete representations. The different aspects can be organized in topological, geometric and the algebraic components. Further considerations are necessary to support self-adaptivity in a multilevel context. We distinguish between element based and node based data structures and will discuss their implementation in an object oriented language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Adler, </author> <title> Zur Spezifikation und Implementierung von finiten Element Net-zgeneratoren, </title> <institution> Diplomarbeit, Institut fur Informatik, TU Munchen, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Bauer and Wossner [8] and the CIP report [25]). In this paper we will not attempt a rigorous definition of the abstract data type, but refer to the thesis by Loew [32], Adler <ref> [1] </ref>, and Stark [52] that attempt a rigorous approach. <p> This technique has originally been developed in the fields of geometric modeling and computer aided design. The suitability of Euler operators for the finite element mesh construction is being studied in Loew [32], Adler <ref> [1] </ref>, and Stark [52]. The Euler operators are also suitable for a rigorous specification of the topological structure and its definition as an abstract data type.
Reference: [2] <author> I. Babu ska and A. Aziz, </author> <title> On the angle condition in the finite element method, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 13 (1976), </volume> <pages> pp. 214-226. </pages>
Reference-contexts: Condition T6 is satisfied if the minimal angle of all triangles is bounded from below independently of h. For a discussion of this minimal angle condition and its replacement by the weaker maximal angle condition see Babuska and Aziz <ref> [2] </ref>. With angles larger than 90 degrees, however, we loose the M-matrix feature of the stiffness matrix. 2.5 Algebraic structure When the topology and geometry of a mesh is determined, the physical and mathematical problem description is used to derive the algebraic structure of the finite element problem.
Reference: [3] <author> I. Babu ska, A. Miller, and M. Vogelius, </author> <title> Adaptive methods and error estimation for elliptic problems in structural mechanics, in Adaptive Computational Methods for Partial Differential Equations, </title> <editor> I. Babuska, J. Chan-dra, and J. Flaherty, eds., </editor> <publisher> SIAM, </publisher> <year> 1983. </year>
Reference-contexts: J J J] ' $ Nested Hierarchy of Meshes Error IndicatorMultilevel Solver Mesh Refinement fi fi fi fi fi fifl C C C C C C - 7 @ @R @ @I 28 indicator, telling, where in the domain refinement would be computationally most profitable, see Babuska, Miller and Vogelius <ref> [3] </ref>, Bank and Weiser [5], Deuflhard, Leinen and Yserentant [20]. With the error estimate a new mesh T h 1 is constructed, the corresponding equations are solved, and, if necessary, the whole process is repeated, as shown in the last diagram of Figure 11.
Reference: [4] <author> D. Bai and A. Brandt, </author> <title> Local mesh refinement multilevel techniques, </title> <note> SIAM J. </note> <institution> Sci. Stat. Comput., </institution> <month> 8 </month> <year> (1987). </year>
Reference-contexts: Overlapping patches lead to another class of domain decomposition algorithms, and in particular to iterative refinement techniques (see Widlund [54]). This is also related to the multilevel adaptive technique (MLAT) of Brandt [15] and Bai and Brandt <ref> [4] </ref>, and to the fast adaptive composite grid technique (FAC) see McCormick and Thomas [36] and McCormick [35]. For example, 24 the FAC technique is usually applied with fully overlapping, uniform patches and nonconforming nodes, see Figure 9.
Reference: [5] <author> R. Bank and A. Weiser, </author> <title> Some a-posteriori estimators for elliptic partial differential equations, </title> <journal> Math. Comp, </journal> <volume> 44 (1985), </volume> <pages> pp. 283-301. </pages>
Reference-contexts: $ Nested Hierarchy of Meshes Error IndicatorMultilevel Solver Mesh Refinement fi fi fi fi fi fifl C C C C C C - 7 @ @R @ @I 28 indicator, telling, where in the domain refinement would be computationally most profitable, see Babuska, Miller and Vogelius [3], Bank and Weiser <ref> [5] </ref>, Deuflhard, Leinen and Yserentant [20]. With the error estimate a new mesh T h 1 is constructed, the corresponding equations are solved, and, if necessary, the whole process is repeated, as shown in the last diagram of Figure 11.
Reference: [6] <author> R. E. Bank, PLTMG: </author> <title> A Software Package for Solving Elliptic Partial Differential Equations, </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1990. </year>
Reference-contexts: Also note that each interior nodes generated on the midpoint of an edge has exactly 6 neighbors, and those, which are coinciding with the nodes of the old triangulation inherit the neighbor structure from the coarse mesh. Augmented regular refinement is the basis of the adaptive codes of Bank <ref> [6] </ref> (PLTMG) and Leinen [30] (KASKADE). Clearly, however, regular refinement alone cannot support adaptivity, if conforming triangulations are required. Triangles excluded from regular refinement will have nonconforming nodes, if an adjacent triangle has been refined. This situation is illustrated in Figure 15. There are two options. <p> Triangles, where a green edge has been removed to perform a regular refinement will not have nested triangulations, and therefore the spaces associated with these triangulations will not be nested either. The experimental results of Bank <ref> [6] </ref> and Leinen [30] indicate that this does not severely affect convergence, however, it opens a gap in the associated theory. An alternative way to generate regular families of triangulations is by using bisection in the first place.
Reference: [7] <author> E. B ansch, </author> <title> Local mesh refinement in 2 and 3 dimensions, </title> <booktitle> Impact of Computing in Science and Engineering, 3 (1991), </booktitle> <pages> pp. 181-191. 55 </pages>
Reference-contexts: These strategies are used by Rivara [46] or Sewell [51]. Different bisection strategies are being compared to regular refinement by Mitchell [38]. For related results and the extension to the three-dimensional case see Bansch <ref> [7] </ref>. The longest edge bisection algorithm of Rivara [45] first bisects all triangles selected by the error indicator. Now triangles having a nonconforming node are bisected. This may create new incompatibilities, so that the process must be repeated, until all nodes are conforming.
Reference: [8] <author> F. Bauer and H. W ossner, </author> <title> Algorithmische Sprache und Programmen--twicklung, </title> <publisher> Springer, </publisher> <year> 1984. </year> <note> 2. Auflage. </note>
Reference-contexts: Our discussion may also be interpreted as the informal use of abstract data types. The informal description could be extended to the definition of a rigorous abstract data type that includes a consistent system of laws that specifies the data structure axiomatically (see e.g. Bauer and Wossner <ref> [8] </ref> and the CIP report [25]). In this paper we will not attempt a rigorous definition of the abstract data type, but refer to the thesis by Loew [32], Adler [1], and Stark [52] that attempt a rigorous approach.
Reference: [9] <author> F. Bause and W. T olle, C++ fur Programmierer, Vieweg, Braun-schweig, </author> <year> 1990. </year>
Reference-contexts: In this Section we will discuss the practical implementation using C++ and its advanced features. C++ is an extension of the C programming language that provides an efficient implementation of object oriented programming techniques, see Stroustrup [53] and Bause and Tolle <ref> [9] </ref>. 6.1 Node classes C++ offers classes to implement abstract data types. A code fragment for the definition of the base node class is shown in Figure 25. This class corresponds to the top class in the hierarchy of Figure 23.
Reference: [10] <author> H. Blum, </author> <title> Asymptotic error expansion and defect correction in the finite element method. </title> <address> Habilitationsschrift, Universitat Heidelberg, </address> <year> 1991. </year>
Reference-contexts: Uniform meshes are characterized by the feature that the edges can have only three different directions and lengths. Correspondingly, such a mesh is also called three-directional (see Blum <ref> [10] </ref>). On uniform meshes symmetry arguments show that certain error terms in the error expansion cancel, leading to superconvergence effects. Furthermore the uniformity can be exploited to show the existence of global asymptotic error expansions, see Blum, Lin and Rannacher [11, 12, 10]. <p> On uniform meshes symmetry arguments show that certain error terms in the error expansion cancel, leading to superconvergence effects. Furthermore the uniformity can be exploited to show the existence of global asymptotic error expansions, see Blum, Lin and Rannacher <ref> [11, 12, 10] </ref>. Typically, the accuracy in the nodal values is one h-order better than expected from the usual finite element error analysis. 20 On the other hand, for many practical applications uniform meshes are not sufficient. <p> An example is shown in however, the construction of a suitable mapping M may be as difficult as the solution of the original problem. The asymptotic error analysis of Blum, Lin and Rannacher <ref> [11, 12, 10] </ref> remains valid only, if the mapping M is sufficiently smooth. Usually, the minimal requirement on M is that it is a homeomorphism (that is a bijective, continuous mapping with continuous inverse), so that the quasi-uniform mesh is topologically equivalent to a subset of the square mesh triangulation.
Reference: [11] <author> H. Blum, Q. Lin, and R. Rannacher, </author> <title> Asymptotic error expansions and Richardson extrapolation for linear finite elements, </title> <journal> Numerische Math-ematik, </journal> <volume> 49 (1986), </volume> <pages> pp. 11-37. </pages>
Reference-contexts: On uniform meshes symmetry arguments show that certain error terms in the error expansion cancel, leading to superconvergence effects. Furthermore the uniformity can be exploited to show the existence of global asymptotic error expansions, see Blum, Lin and Rannacher <ref> [11, 12, 10] </ref>. Typically, the accuracy in the nodal values is one h-order better than expected from the usual finite element error analysis. 20 On the other hand, for many practical applications uniform meshes are not sufficient. <p> An example is shown in however, the construction of a suitable mapping M may be as difficult as the solution of the original problem. The asymptotic error analysis of Blum, Lin and Rannacher <ref> [11, 12, 10] </ref> remains valid only, if the mapping M is sufficiently smooth. Usually, the minimal requirement on M is that it is a homeomorphism (that is a bijective, continuous mapping with continuous inverse), so that the quasi-uniform mesh is topologically equivalent to a subset of the square mesh triangulation.
Reference: [12] <author> H. Blum and R. Rannacher, </author> <title> Extrapolation techniques for reducing the pollution effect of reentrant corners in the finite element method, </title> <institution> Nu-merische Mathematik, </institution> <month> 52 </month> <year> (1988). </year>
Reference-contexts: On uniform meshes symmetry arguments show that certain error terms in the error expansion cancel, leading to superconvergence effects. Furthermore the uniformity can be exploited to show the existence of global asymptotic error expansions, see Blum, Lin and Rannacher <ref> [11, 12, 10] </ref>. Typically, the accuracy in the nodal values is one h-order better than expected from the usual finite element error analysis. 20 On the other hand, for many practical applications uniform meshes are not sufficient. <p> An example is shown in however, the construction of a suitable mapping M may be as difficult as the solution of the original problem. The asymptotic error analysis of Blum, Lin and Rannacher <ref> [11, 12, 10] </ref> remains valid only, if the mapping M is sufficiently smooth. Usually, the minimal requirement on M is that it is a homeomorphism (that is a bijective, continuous mapping with continuous inverse), so that the quasi-uniform mesh is topologically equivalent to a subset of the square mesh triangulation.
Reference: [13] <author> T. Bonk and U. R ude, </author> <title> Performance analysis and optimization of numerically intensive programs, </title> <type> SFB Bericht, </type> <institution> Institut fur Informatik, TU Munchen, </institution> <year> 1992. </year> <note> in preparation. </note>
Reference-contexts: Additionally, they produce different memory layouts that may severely effect the performance of the corresponding program. This is particularly true for vector architectures with highly interleaved memory and superscalar systems with hierarchical memory structure (cache). These aspects are discussed in Bonk and Rude <ref> [13] </ref>. Using elementary arrays often leads to more uniform access of the data so that vectorization becomes simpler, whereas the representation with structures 23 (records) usually leads to better locality of the data, because the data accessed together are stored in consecutive memory cells.
Reference: [14] <author> J. Bramble, J. Pasciak, and J. Xu, </author> <title> Parallel multilevel preconditioners, </title> <journal> Math. Comp., </journal> <volume> 31 (1990), </volume> <pages> pp. 333-390. </pages>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu <ref> [14] </ref>, Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant [55, 56, 57], Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33]. <p> For algorithms that need several instances of the solution, like the BPX-algorithm (see Bramble, Pasciak and Xu <ref> [14] </ref> the concept must be extended by providing a stack of values for each node. The typical access routine for the element based data structure is a recursion in the triangle tree, from where nodes and edges are referenced by pointers. For a detailed discussion see Leinen [30].
Reference: [15] <author> A. Brandt, </author> <title> Multi-level adaptive solutions to boundary value problems, </title> <journal> Math. Comp., </journal> <volume> 31 (1977), </volume> <pages> pp. </pages> <month> 333-390. </month> <title> [16] , Algebraic multigrid theory: The symmetric case, </title> <booktitle> Preliminary Proceedings of the International Multigrid Conference, </booktitle> <address> Copper Mountain, Col-orado, </address> <year> (1983). </year> <title> [17] , Multigrid techniques: 1984 guide with applications to fluid dynamics, </title> <institution> GMD Studien, </institution> <month> 85 </month> <year> (1984). </year>
Reference-contexts: Overlapping patches lead to another class of domain decomposition algorithms, and in particular to iterative refinement techniques (see Widlund [54]). This is also related to the multilevel adaptive technique (MLAT) of Brandt <ref> [15] </ref> and Bai and Brandt [4], and to the fast adaptive composite grid technique (FAC) see McCormick and Thomas [36] and McCormick [35]. For example, 24 the FAC technique is usually applied with fully overlapping, uniform patches and nonconforming nodes, see Figure 9.
Reference: [18] <author> P. Ciarlet, </author> <title> The Finite Element Method for Elliptic Problems, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, New York, London, </address> <year> 1978. </year>
Reference-contexts: N 2 ; N 2 N 3 ; N 1 N 3 g [ Q (N 1 N 2 N 3 N 4 )2T The Ciarlet Conditions To be suitable for the finite element process, a triangulation (T ; N ; E ) must satisfy the following requirements (see Ciarlet <ref> [18] </ref>): T1 The closure of the region is the union of the elements in T = T 2T T2 Each element T 2 T is closed and its interior is non-empty: ffi 9 10 Z Z Z Z u u T3 For each distinct pair of elements T 1 ; T <p> A sequence of triangulations (T h ; N h ; E h ) is called regular, if the following two conditions are satisfied (see Ciarlet <ref> [18] </ref>) T5 h (T h ) ! 0; T6 (T h ) ; for all h with independent of h. Condition T6 is satisfied if the minimal angle of all triangles is bounded from below independently of h.
Reference: [19] <author> E. Denert, </author> <title> Software Engineering, </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: Relations play an important role in the specification and construction of software, e.g. in relational databases, or the entity-relationship approach for the specification and development of software, see Denert <ref> [19] </ref>.
Reference: [20] <author> P. Deuflhard, P. Leinen, and H. Yserentant, </author> <title> Concepts of an adaptive hierarchical finite element code, </title> <type> Preprint SC88-5, </type> <institution> Konrad-Zuse-Zentrum fur Informationstechnik, </institution> <year> 1988. </year>
Reference-contexts: A h with a vector in this distributive representation is more expensive than using an assembled version of A h , but it may be still the most effective data structure, if the basic structure is element-oriented, as for example Leinen's KASKADE code [30], see also Deuflhard, Leinen and Yserentant <ref> [20] </ref>. Exploiting Symmetry For self-adjoint systems, the stiffness matrix will be symmetric, a i;j = a j;i . Clearly, this can be exploited in the matrix-oriented and element-oriented representation by storing only those a i;j with i j. <p> Error IndicatorMultilevel Solver Mesh Refinement fi fi fi fi fi fifl C C C C C C - 7 @ @R @ @I 28 indicator, telling, where in the domain refinement would be computationally most profitable, see Babuska, Miller and Vogelius [3], Bank and Weiser [5], Deuflhard, Leinen and Yserentant <ref> [20] </ref>. With the error estimate a new mesh T h 1 is constructed, the corresponding equations are solved, and, if necessary, the whole process is repeated, as shown in the last diagram of Figure 11.
Reference: [21] <author> S. Dewhurst and K. Stark, </author> <title> Programming in C++, </title> <publisher> Prentice Hall, </publisher> <address> En-glewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: With the C++ language a better abstraction is possible using the technique of iterator classes see Stroustrup [53] and Dewhurst and Stark <ref> [21] </ref>. Abstract iterators are also used to access the edges (connections) from a node, see the friend declaration in the BaseNode class of Figure 25.
Reference: [22] <author> M. Dryja and O. Widlund, </author> <title> An additive variant of the Schwarz alternating method for the case of many subregions, </title> <type> Tech. Report 339, </type> <institution> Courant Institute, Department of Computer Science, </institution> <year> 1991. </year> <title> also Ultrcomputer Note 131. [23] , Multilevel additive methods for elliptic finite element problems, in Parallel Algorithms for Partial Differential Equations, </title> <booktitle> Proceedings of the Sixth GAMM-Seminar, </booktitle> <address> Kiel, </address> <month> January 19-21, </month> <year> 1990, </year> <editor> W. Hackbusch, ed., </editor> <address> Braunschweig, </address> <year> 1991, </year> <month> Vieweg-Verlag. </month>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund <ref> [22, 23] </ref>, Hackbusch [26], Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant [55, 56, 57], Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [24] <author> A. George and W. Liu, </author> <title> Computer Solution of Large Sparse Positive Definite Systems, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1981. </year>
Reference-contexts: An appropriate storage scheme in a sparse matrix data structure is introduced in George and Liu <ref> [24] </ref> and Schwarz [50]. Whether this compact representation of matrices is suitable, depends on the algorithms used in the solution process. If only matrix-vector products are necessary, the compact representation is efficient.
Reference: [25] <editor> G. Goos and J. Hartmanis, eds., </editor> <booktitle> The CIP Language Group: The Mu-nich Project CIP, no. 183 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: The informal description could be extended to the definition of a rigorous abstract data type that includes a consistent system of laws that specifies the data structure axiomatically (see e.g. Bauer and Wossner [8] and the CIP report <ref> [25] </ref>). In this paper we will not attempt a rigorous definition of the abstract data type, but refer to the thesis by Loew [32], Adler [1], and Stark [52] that attempt a rigorous approach.
Reference: [26] <author> W. Hackbusch, </author> <title> Multigrid Methods and Applications, </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch <ref> [26] </ref>, Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant [55, 56, 57], Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [27] <author> P. Hemker, H. van der Maarel, and C. Everaars, </author> <title> BASIS: A data structure for adaptive multigrid computations, </title> <type> Report NM-R9014, </type> <institution> Department of Numerical Mathematics, Centrum for Wiskunde en Informatica, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: A quad-tree based data structure for piecewise quasi-uniform, adaptively refined meshes in a multilevel context is being discussed in Hemker, Maarel and Everaars <ref> [27] </ref>. Piecewise uniform or quasi-uniform meshes can be implemented with the data structures already discussed. Additionally, the interface consistency must be maintained. This has a topological as well as an algebraic aspect. <p> The typical access routine for the element based data structure is a recursion in the triangle tree, from where nodes and edges are referenced by pointers. For a detailed discussion see Leinen [30]. Another element based data structure is described in Hemker, Maarel and Everaars <ref> [27] </ref>. Their data structure is based on quadrilateral cells so that the inclusion relation generates a so-called quad-tree. The BASIS data structure uses this tree of cells as the frame data structure that is augmented with geometric and algebraic information. <p> This abstraction is very important, because the access structures occur throughout the program making a subsequent change very difficult. An alternative technique is used by Hemker, Maarel and Everaars <ref> [27] </ref> for the BASIS data structure. Here the access is handled by a routine scan that loops through all elements and applies a function doit that is a parameter to the scan routine. Unfortunately this technique has several disadvantages.
Reference: [28] <author> R. Hempel and H. Ritzdorf, </author> <title> The GMD communications library for grid-oriented problems, </title> <institution> Arbeitspapiere der GMD 589, GMD, St. Augustin, </institution> <year> 1991. </year>
Reference-contexts: Thus the data structure for each patch can be comparatively simple. If the patches are non-overlapping, they can be considered as macro-elements. Interface conditions describe their interaction with neighboring patches. Techniques related to this idea are block structured grids (see Hempel and Ritzdorf <ref> [28] </ref>), domain decomposition (see Quateroni [43] and the references therein), or the substructuring technique. These techniques describe solution algorithms suitable for piecewise uniform grids. For the overall triangulation to be conforming, the nodes along the patch boundaries must be conforming across the interfaces.
Reference: [29] <author> C. R. J ansch, U. R ude, and K. Schnepper, </author> <title> Macro expansion, a tool for the systematic development of scientific software, </title> <institution> Bericht I-8814, Institut fur Informatik, TU Munchen, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Many of the techniques can be used with classical languages, especially when preprocessors are used. For examples what can be done even with plain FORTRAN, but also what the limitations of such an approach are, see Jansch, Rude and Schnepper <ref> [29] </ref>. As demonstrated in the above examples, the C++ extension of C is well suited to implement such an abstract software architecture directly.
Reference: [30] <author> P. </author> <month> Leinen, </month> <institution> Ein schneller adaptiver Loser fur elliptische Randwertprob-leme auf Seriell- und Parallelrechnern, Dissertation, Universitat Dortmund, </institution> <year> 1990. </year>
Reference-contexts: All other geometric information needed, like distances, lengths, areas can be simply computed from there by basic analytic geometry. This can be implemented in the data structures by extending the node data type by suitable components. 14 Leinen argues in <ref> [30] </ref> that for reasons of numerical stability the length of edges should be stored explicitly to avoid roundoff errors when calculating the distance between nodes. Similarly it may be useful to also store the direction of an edge explicitly, if necessary in the algorithms. <p> A multiplication of A h with a vector in this distributive representation is more expensive than using an assembled version of A h , but it may be still the most effective data structure, if the basic structure is element-oriented, as for example Leinen's KASKADE code <ref> [30] </ref>, see also Deuflhard, Leinen and Yserentant [20]. Exploiting Symmetry For self-adjoint systems, the stiffness matrix will be symmetric, a i;j = a j;i . Clearly, this can be exploited in the matrix-oriented and element-oriented representation by storing only those a i;j with i j. <p> Augmented regular refinement is the basis of the adaptive codes of Bank [6] (PLTMG) and Leinen <ref> [30] </ref> (KASKADE). Clearly, however, regular refinement alone cannot support adaptivity, if conforming triangulations are required. Triangles excluded from regular refinement will have nonconforming nodes, if an adjacent triangle has been refined. This situation is illustrated in Figure 15. There are two options. <p> Triangles, where a green edge has been removed to perform a regular refinement will not have nested triangulations, and therefore the spaces associated with these triangulations will not be nested either. The experimental results of Bank [6] and Leinen <ref> [30] </ref> indicate that this does not severely affect convergence, however, it opens a gap in the associated theory. An alternative way to generate regular families of triangulations is by using bisection in the first place. This avoids the trouble with green refinement and will produce triangulations that are strictly nested. <p> A multilevel solution process is naturally defined by the tree structure and will be inefficient when the refinement proceeds that slowly. In any case, the tree is suitable as the frame data structure for the multilevel finite element structure, if it is augmented by additional information. Following Leinen <ref> [30] </ref> the element matrices can be stored with the triangles. These matrices implicitly contain the algebraic connections C between nodes (see equation (12)). Then the stiffness matrix is never assembled explicitly but only implicitly, when matrix-vector products are formed, see equation (13). <p> The typical access routine for the element based data structure is a recursion in the triangle tree, from where nodes and edges are referenced by pointers. For a detailed discussion see Leinen <ref> [30] </ref>. Another element based data structure is described in Hemker, Maarel and Everaars [27]. Their data structure is based on quadrilateral cells so that the inclusion relation generates a so-called quad-tree.
Reference: [31] <author> M. Lemke and D. Quinlan, </author> <title> P++, a C++ virtual shared grids based programming environment for architecture-independent development of structured grid applications, </title> <institution> Arbeitspapiere der GMD 611, Gesellschaft fur Mathematik und Datenverarbeitung, </institution> <month> Februeary </month> <year> 1992. </year>
Reference-contexts: The correct treatment of the interface conditions is nontrivial and is discussed in McCormick [35]. For piecewise uniform meshes with refinement we mention the recent introduction of data structures with a high level interface that hides possible machine dependencies in parallel and distributed environments, see Lemke and Quinlan <ref> [31] </ref>. A quad-tree based data structure for piecewise quasi-uniform, adaptively refined meshes in a multilevel context is being discussed in Hemker, Maarel and Everaars [27]. Piecewise uniform or quasi-uniform meshes can be implemented with the data structures already discussed. Additionally, the interface consistency must be maintained.
Reference: [32] <author> A. Loew, </author> <title> Spezification and Implementation of Euler Operators, </title> <institution> Fortge-schrittenenpraktikum, Institut fur Informatik, TU Munchen, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Bauer and Wossner [8] and the CIP report [25]). In this paper we will not attempt a rigorous definition of the abstract data type, but refer to the thesis by Loew <ref> [32] </ref>, Adler [1], and Stark [52] that attempt a rigorous approach. <p> This technique has originally been developed in the fields of geometric modeling and computer aided design. The suitability of Euler operators for the finite element mesh construction is being studied in Loew <ref> [32] </ref>, Adler [1], and Stark [52]. The Euler operators are also suitable for a rigorous specification of the topological structure and its definition as an abstract data type.
Reference: [33] <author> R. L ohner and K. Morgan, </author> <title> Unstructured multigrid methods, in Multi-grid Methods: </title> <booktitle> Special Topics and Applications, Papers presented at the 2nd European Conference on Multigrid Methods, </booktitle> <month> October 1-4, </month> <year> 1985, </year> <editor> Trot-tenberg and Hackbusch, eds., </editor> <volume> vol. </volume> <pages> 110, </pages> <address> Cologne, </address> <month> May. </month>
Reference-contexts: For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan <ref> [33] </ref>. Besides supporting a theoretical justification of the multilevel process, nested systems also simplify the computational process, so that we will attempt to base our solution technique on a nested system of spaces.
Reference: [34] <author> J. Mandel, S. McCormick, and J. Ruge, </author> <title> An algebraic theory for multi-grid methods for variational problems, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 25 (1988), </volume> <pages> pp. 91-110. </pages>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick <ref> [34] </ref>, Oswald [39, 42, 40, 41], Yserentant [55, 56, 57], Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [35] <author> S. McCormick, </author> <title> Multilevel Adaptive Methods for Partial Differential Equa--tions, </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1989. </year>
Reference-contexts: This is also related to the multilevel adaptive technique (MLAT) of Brandt [15] and Bai and Brandt [4], and to the fast adaptive composite grid technique (FAC) see McCormick and Thomas [36] and McCormick <ref> [35] </ref>. For example, 24 the FAC technique is usually applied with fully overlapping, uniform patches and nonconforming nodes, see Figure 9. The correct treatment of the interface conditions is nontrivial and is discussed in McCormick [35]. <p> to the fast adaptive composite grid technique (FAC) see McCormick and Thomas [36] and McCormick <ref> [35] </ref>. For example, 24 the FAC technique is usually applied with fully overlapping, uniform patches and nonconforming nodes, see Figure 9. The correct treatment of the interface conditions is nontrivial and is discussed in McCormick [35]. For piecewise uniform meshes with refinement we mention the recent introduction of data structures with a high level interface that hides possible machine dependencies in parallel and distributed environments, see Lemke and Quinlan [31]. <p> The guards are then real data structures in memory that can be accessed to perform relaxation and other processing on neighboring nodes. Guards therefore fence 35 in the live nodes and perform a function similar to the interface nodes on patch boundaries in the FAC method (see McCormick <ref> [35] </ref>). Virtual global grids can be interpreted as a FAC-like technique, however, where the form of a patch is not predetermined, but where patches can be generated dynamically on a node by node basis. The guards are nonconforming nodes in the finite element mesh. <p> In contrast to these points, an interface point will interact with coarser grids, obtaining its value from there, and projecting residuals to its coarse grid parent. These mechanisms are equivalent to the boardered patch interfaces of the FAC method, see McCormick <ref> [35] </ref>. The functionality required at the patch interfaces leads to 46 an additional node type, the guard nodes (see Section 4) whose purpose is to fence in refinement patches. Basically the same mechanisms can be used also for patch interfaces with nonconforming nodes. <p> Basically the same mechanisms can be used also for patch interfaces with nonconforming nodes. In this case the processing required is described in McCormick <ref> [35] </ref> as boardered patches. The incompletely refined meshes can be used as the basis to implement the virtual global meshes introduced in Section 4. J is the subdomain containing the live nodes and where computations need to be performed.
Reference: [36] <author> S. McCormick and J. Thomas, </author> <title> The fast adaptive composite grid (FAC) method for elliptic equations, </title> <journal> Math. Comp., </journal> <month> 46 </month> <year> (1986). </year>
Reference-contexts: This is also related to the multilevel adaptive technique (MLAT) of Brandt [15] and Bai and Brandt [4], and to the fast adaptive composite grid technique (FAC) see McCormick and Thomas <ref> [36] </ref> and McCormick [35]. For example, 24 the FAC technique is usually applied with fully overlapping, uniform patches and nonconforming nodes, see Figure 9. The correct treatment of the interface conditions is nontrivial and is discussed in McCormick [35].
Reference: [37] <author> M. McKay, S. McCormick, and J. Thomas, </author> <title> Computational complexity of the fast adaptive composite grid (FAC) method, </title> <note> Applied Numerical Mathematics, (1990). Special Issue on Domain Decomposition. </note>
Reference-contexts: The goal of these algorithms is to maintain the computationally simpler structure of piecewise uniform patches, usually at the price of refining in somewhat too large regions (see McKay, McCormick and Thomas <ref> [37] </ref>). 4.8 Virtual global refinement The idea of virtual global refinement is linked to the concept of fully adaptive multilevel methods (FAMe), as introduced in Rude [47, 49].
Reference: [38] <author> W. Mitchell, </author> <title> A comparison of adaptive refinement techniques for elliptic problems, </title> <type> Tech. Report UIUCDCS-R-87-1375, </type> <institution> Dept. of Computer Science, Univ. of Illinois, Urbana, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: These strategies are used by Rivara [46] or Sewell [51]. Different bisection strategies are being compared to regular refinement by Mitchell <ref> [38] </ref>. For related results and the extension to the three-dimensional case see Bansch [7]. The longest edge bisection algorithm of Rivara [45] first bisects all triangles selected by the error indicator. Now triangles having a nonconforming node are bisected.
Reference: [39] <author> P. Oswald, </author> <title> Approximationsraume und Anwendungen in der Theorie der Multilevel-Verfahren. </title> <type> unpublished manuscript, </type> <year> 1991. </year> <title> [40] , On discrete norm estimates related to multilevel preconditioners in the finite element method, </title> <booktitle> in Proceedings International Conference Constructive Theory of Functions, Varna 1991, </booktitle> <year> 1991. </year> <title> To be published. [41] , Preconditioners for discretizations of the biharmonic equation by rectangular finite elements, </title> <institution> Forschungsergebnisse Math/91/03, Friedrich Schiller Universitat, Jena, </institution> <month> November </month> <year> 1991. </year> <title> [42] , Two remarks on multilevel preconditioners, </title> <institution> Forschungsergebnisse Math.91/1, Friedrich Schiller Universitat, Jena, </institution> <year> 1991. </year>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick [34], Oswald <ref> [39, 42, 40, 41] </ref>, Yserentant [55, 56, 57], Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [43] <author> A. Quateroni, </author> <title> Domain decomposition and parallel processing for the numerical solution of partial differential equations, </title> <institution> Surv. Math. Ind., </institution> <month> 1 </month> <year> (1991), </year> <pages> pp. 75-118. </pages>
Reference-contexts: Thus the data structure for each patch can be comparatively simple. If the patches are non-overlapping, they can be considered as macro-elements. Interface conditions describe their interaction with neighboring patches. Techniques related to this idea are block structured grids (see Hempel and Ritzdorf [28]), domain decomposition (see Quateroni <ref> [43] </ref> and the references therein), or the substructuring technique. These techniques describe solution algorithms suitable for piecewise uniform grids. For the overall triangulation to be conforming, the nodes along the patch boundaries must be conforming across the interfaces. Thus single patches may not be defined or modified (refined) independently.
Reference: [44] <editor> U. Rembold, ed., </editor> <booktitle> Einfuhrung in die Informatik fur Ingenieure und Natur-wissenschaftler, </booktitle> <publisher> Carl Hanser Verlag, </publisher> <address> Munchen Wien, </address> <year> 1987. </year>
Reference-contexts: implement adaptive algorithms with advanced software techniques. 1.2 Relations A relation R of k sets M 1 ; ; M k is a subset of the cartesian product R M 1 fi fi M k : Relations and their application to describe the data structures are e.g. discussed by Rembold <ref> [44] </ref>. As basis we will use binary relations R M 1 fi M 2 . The fact that (m 1 ; m 2 ) 2 "is-related-to" can then be read as "m 1 is-related-to m 2 ". Generally, relations have a fixed number k of arguments.
Reference: [45] <author> M. Rivara, </author> <title> Algorithms for refining triangular grids suitable for adaptive and multigrid techniques, International Journal for Numerical Methods in Engineering, </title> <booktitle> 20 (1984), </booktitle> <pages> pp. </pages> <month> 745-756. </month> <title> [46] , Design and data structure of fully adaptive, multigrid, finite-element software, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 10 (1984), </volume> <pages> pp. 242-264. </pages>
Reference-contexts: These strategies are used by Rivara [46] or Sewell [51]. Different bisection strategies are being compared to regular refinement by Mitchell [38]. For related results and the extension to the three-dimensional case see Bansch [7]. The longest edge bisection algorithm of Rivara <ref> [45] </ref> first bisects all triangles selected by the error indicator. Now triangles having a nonconforming node are bisected. This may create new incompatibilities, so that the process must be repeated, until all nodes are conforming.
Reference: [47] <author> U. R ude, </author> <title> Fully adaptive multigrid methods. </title> <note> accepted for publication in SIAM J. Numer. Analysis, </note> <year> 1992. </year> <title> [48] , The hierarchical basis extrapolation method, </title> <journal> SIAM J. Scientific and Statistical Computing, </journal> <volume> 13 (1992). </volume> <booktitle> Proceedings of the First Copper Mountain Conference on Iterative Methods, </booktitle> <month> April 1-5, </month> <year> 1990, </year> <editor> T. Manteuffel ed. </editor> <title> 58 [49] , On the multilevel adaptive iterative method, </title> <booktitle> in Preliminary pro-ceedings of the 2nd Copper Mountain Conference on Iterative Methods, </booktitle> <institution> T. Manteuffel, ed., University of Colorado at Denver, </institution> <year> 1992. </year> <note> Also available as TU-Bericht I-9216. </note>
Reference-contexts: the computationally simpler structure of piecewise uniform patches, usually at the price of refining in somewhat too large regions (see McKay, McCormick and Thomas [37]). 4.8 Virtual global refinement The idea of virtual global refinement is linked to the concept of fully adaptive multilevel methods (FAMe), as introduced in Rude <ref> [47, 49] </ref>. This refinement technique is directly related to multilevel solvers and hierarchical basis and leads to an overall algorithm where iterative solver, error estimate and refinement are integrated into a single unit. The idea is to use global regular refinement, so that the grids cover the full domain. <p> A mechanism must be devised however, to convert a ghost node to a live node, if necessary to maintain the accuracy of the computation. This is accomplished by the adaptive relaxation algorithm described in Rude <ref> [47] </ref>. It can be shown that a suitable error estimate is given by the changes to a node during relaxation, which has to be performed in a multilevel algorithm anyway. Therefore error estimation and solution go hand in hand. <p> Algorithms that perform finite element calculations on virtual global grids are discussed in Rude <ref> [47] </ref>. 5 Data structures for hierarchical finite element meshes 5.1 Relations in the multilevel hierarchy We now discuss data structures for representing a hierarchy of finite element meshes. <p> Triangles must not be bisected, and the refinement region must be extended by the boarder consisting of nonconforming guard nodes. 5.7 Characteristic sets For the implementation of the Fully Adaptive Multigrid Method (FAMe) and the Multilevel Adaptive Iteration we use the data structure set of nodes, see Rude <ref> [47, 49] </ref>. These sets are used to localize the multilevel processing. They are the basis to implement error estimation, mesh refinement and efficient solution. Thus the efficient implementation of sets is the key to make these methods practical. We must distinguish between different types of sets. <p> We assume that searching a list to determine whether a node is a member of a small set is an O (1) operation. Additionally, the FAMe uses sets to determine where the basic multigrid operations must be executed. As described in Rude <ref> [47] </ref> each of the processes relaxation, hierarchical transformation, determination of the t -term, restriction, interpolation, and correction are triggered by characteristic sets that determine, where a recalculation of the corresponding values is necessary. <p> Summing up, the techniques discussed in this Section suffice for an implementation of the adaptive algorithms satisfying our efficiency goal. The organizational work is at most proportional to the numerical work performed. The techniques have been applied successfully to implement the prototype solver of Rude <ref> [47] </ref>. 6 Implementation using C++ The data structures have so far been discussed in an abstract setting. In this Section we will discuss the practical implementation using C++ and its advanced features. <p> For nodes in unstructured meshes accessed by linked lists the corresponding structure is a while loop or a recursion. To keep the package modular and flexible, the access function must be exchangeable. In a precursor version of the FAMe package (see Rude <ref> [47] </ref>) that was still implemented in C this had been accomplished by a quite involved macro package that implemented generic access routines, like a ForAllNodes construct.
Reference: [50] <author> H. Schwarz, </author> <title> Methode der Finiten Elemente, </title> <publisher> Teubner Studienbucher Mathematik, Teubner, Stuttgart, </publisher> <year> 1991. </year> <note> 3. Auflage. </note>
Reference-contexts: For general quadrilaterals we must even introduce isoparametric elements (see Schwarz <ref> [50] </ref>). <p> An appropriate storage scheme in a sparse matrix data structure is introduced in George and Liu [24] and Schwarz <ref> [50] </ref>. Whether this compact representation of matrices is suitable, depends on the algorithms used in the solution process. If only matrix-vector products are necessary, the compact representation is efficient.
Reference: [51] <author> E. Sewell, </author> <title> A finite element program wit automatic user-controlled mesh grading, in Advances in Computer methods for Partial Differential Equations III, </title> <editor> R. Vichnevetsky and R. Stapleman, eds., </editor> <booktitle> IMACS, </booktitle> <year> 1979, </year> <pages> pp. 8-10. </pages>
Reference-contexts: The minimum angle 33 condition is enforced in algorithms based on the usual bisection by either requiring that no angle is bisected more than once or by bisecting only the angle opposite the longest edge of a triangle. These strategies are used by Rivara [46] or Sewell <ref> [51] </ref>. Different bisection strategies are being compared to regular refinement by Mitchell [38]. For related results and the extension to the three-dimensional case see Bansch [7]. The longest edge bisection algorithm of Rivara [45] first bisects all triangles selected by the error indicator. <p> The newest node is called the peak of a triangle and the opposite side the base of the triangle. After dividing a triangle by connecting the peak to the midpoint of the base, the new node becomes the peak of each of the two new triangles. Sewell <ref> [51] </ref> has shown that all the triangles created in this form belong to four similarity classes, so that the minimal angle condition is guaranteed.
Reference: [52] <author> M. Stark, </author> <title> Spezifikation und Implementierung einer Datenstruktur fur dreidimensionale finite Elemente, </title> <institution> Diplomarbeit, Institut fur Informatik, TU Munchen, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: Bauer and Wossner [8] and the CIP report [25]). In this paper we will not attempt a rigorous definition of the abstract data type, but refer to the thesis by Loew [32], Adler [1], and Stark <ref> [52] </ref> that attempt a rigorous approach. <p> The formula can be generalized to include more complicated situations, see e.g. Stark <ref> [52] </ref>. The basic importance of the Euler formula motivates the construction of finite element meshes by the so-called Euler operators. The Euler operators manipulate a mesh in a way that consistency with respect to equation (4) remains satisfied. <p> This technique has originally been developed in the fields of geometric modeling and computer aided design. The suitability of Euler operators for the finite element mesh construction is being studied in Loew [32], Adler [1], and Stark <ref> [52] </ref>. The Euler operators are also suitable for a rigorous specification of the topological structure and its definition as an abstract data type. In addition to the topological structure discussed so far, a finite element mesh must satisfy certain geometric conditions and must be augmented with numerical information.
Reference: [53] <author> B. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <note> second edition ed., </note> <year> 1991. </year>
Reference-contexts: In this Section we will discuss the practical implementation using C++ and its advanced features. C++ is an extension of the C programming language that provides an efficient implementation of object oriented programming techniques, see Stroustrup <ref> [53] </ref> and Bause and Tolle [9]. 6.1 Node classes C++ offers classes to implement abstract data types. A code fragment for the definition of the base node class is shown in Figure 25. This class corresponds to the top class in the hierarchy of Figure 23. <p> Furthermore, each operation costs the overhead of a function call, and finally the technique has severe limitations, because operations like double loops over the mesh cannot be programmed with the functions provided. With the C++ language a better abstraction is possible using the technique of iterator classes see Stroustrup <ref> [53] </ref> and Dewhurst and Stark [21]. Abstract iterators are also used to access the edges (connections) from a node, see the friend declaration in the BaseNode class of Figure 25.
Reference: [54] <author> O. B. Widlund, </author> <title> Optimal iterative refinement methods, in Domain Decomposition Methods, </title> <editor> T. F. Chan, R. Glowinsky, J. Periaux, and O. B. Widlund, eds., </editor> <address> Philadelphia, </address> <year> 1989, </year> <note> SIAM. </note>
Reference-contexts: The technique becomes more flexible, if the patches are allowed to overlap, however, the definition of consistent interface conditions may become more complicated. Overlapping patches lead to another class of domain decomposition algorithms, and in particular to iterative refinement techniques (see Widlund <ref> [54] </ref>). This is also related to the multilevel adaptive technique (MLAT) of Brandt [15] and Bai and Brandt [4], and to the fast adaptive composite grid technique (FAC) see McCormick and Thomas [36] and McCormick [35].
Reference: [55] <author> H. Yserentant, </author> <title> On the multi-level splitting of finite element spaces, </title> <journal> Nu-mer. Math., </journal> <volume> 49 (1986), </volume> <pages> pp. 379-412. </pages>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant <ref> [55, 56, 57] </ref>, Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [56] <author> H. Yserentant, </author> <title> Two preconditioners based on the multi-level splitting of finite element spaces, </title> <type> Tech. Report SC89-9, </type> <institution> Konrad-Zuse-Zentrum fur Informationstechnik, </institution> <address> Berlin, </address> <year> 1990. </year> <institution> [57] , Xu's vereinheitlichte Theorie additiver und multiplikativer Itera-tionsverfahren. </institution> <type> unpublished manuscript, </type> <year> 1991. </year>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant <ref> [55, 56, 57] </ref>, Zhang [58]. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
Reference: [58] <author> X. Zhang, </author> <title> Multilevel additive Schwarz methods, </title> <type> Tech. Report 582, </type> <institution> New York University, Courant Institute, Department of Computer Science, </institution> <year> 1991. </year> <month> 59 </month>
Reference-contexts: For the convergence theory of multilevel methods and the relevance of condition (14) see Bramble, Pasciak, and Xu [14], Dryja and Widlund [22, 23], Hackbusch [26], Mandel and McCormick [34], Oswald [39, 42, 40, 41], Yserentant [55, 56, 57], Zhang <ref> [58] </ref>. For an example that shows that nested spaces are not necessary for multilevel finite element solvers see Lohner and Morgan [33].
References-found: 48

