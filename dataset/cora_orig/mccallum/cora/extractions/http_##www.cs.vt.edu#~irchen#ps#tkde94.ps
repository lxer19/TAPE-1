URL: http://www.cs.vt.edu/~irchen/ps/tkde94.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: Performance Evaluation of Rule Grouping On A Real-Time Expert System Architecture  
Author: Ing-Ray Chen and Bryant L. Poole 
Keyword: Index Terms expert systems, real-time architectures, Markov models, performance, rule based systems, rule grouping, graph-partitioning algorithms.  
Abstract: This paper uses a Markov process to model a real-time expert system architecture characterized by message-passing and event-driven scheduling. The model is applied to the performance evaluation of rule grouping for real-time expert systems running on this architecture. An optimizing algorithm based on Kernighan-Lin (KL) heuristic graph-partitioning for the real-time architecture is developed and a demonstration system based on the model and algorithm has been developed and tested on a portion of Advanced GPS Receiver (AGR) and Manned Maneuvering Unit (MMU) knowledge bases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> 6th International Conference on Applications of AI in Engineering, </institution> <month> July </month> <year> 1991, </year> <title> Oxford, </title> <booktitle> UK. [2] 3rd IFAC International Workshop on AI in Real Time Control, </booktitle> <month> Sep. </month> <year> 1991, </year> <institution> Sonoma Valley, Calif., USA. </institution>
Reference-contexts: 1 Introduction The incorporation of rule-based systems in real-time control systems has emerged as a state-of-the-art demand in recent years <ref> [1, 2, 11] </ref>. One central issue is how to make expert systems real-time, that is, how to ensure that the timing and functional requirements of expert systems are satisfied.
Reference: [3] <author> E.R. Barnes, </author> <title> "An algorithm for partitioning the nodes of a graph" SIAM Journal on Algebraic and Discrete Methods, </title> <journal> Vol. </journal> <volume> 3, No. 4, </volume> <month> Dec. </month> <year> 1982. </year> <pages> pp. 541-550. </pages>
Reference-contexts: These rule grouping algorithms are not applicable to expert systems running on real-time architectures because there is no provision for balancing the process-level and rule-level overheads. Another class of algorithms <ref> [3, 13, 15] </ref> deals with a more general graph-partitioning problem as follows: given a graph G with costs on its nodes and edges, partition the nodes of G into k subsets of specified sizes, s 1 ; s 2 ; ; s k , so as to minimize the total cost
Reference: [4] <author> C.L. Forgy, </author> <title> "Rete: a fast algorithm for the many pattern/many object pattern match problem," </title> <journal> Artificial Intelligence, </journal> <year> 1982, </year> <month> pp.17-37. </month>
Reference-contexts: Furthermore, since a message is only sent to relevant rule groups instead of all rule groups when a new fact is generated, this real-time architecture also possesses an intelligent matching capability similar to that of the Rete algorithm <ref> [4] </ref>, except that a distributed strategy, rather than a centralized one, is adopted for managing the pattern matching process. In the extreme case when only one rule is allocated to a group, the communication network connecting all the groups is itself like a Rete network [9].
Reference: [5] <author> J.L. Giarratano, </author> <title> CLIPS User's Guide, </title> <booktitle> Artificial Intelligence Section, </booktitle> <editor> Lyndon B. Johnson Space Center, </editor> <month> June </month> <year> 1988. </year> <month> 22 </month>
Reference-contexts: This work was supported in part by the AFOSR under the 1991 Summer Research Program and the National Science Foundation under grant CCR-9110816. 1 shells supported by SKRAM, such as the C Language Integrated Production System (CLIPS) <ref> [5] </ref> and the Automated Reasoning Tool (ART) [17]. These user-specified rule groups are automatically translated by SKRAM's translator into efficient Ada run-time processes (with each process corresponding to a rule group) which communicate with each other via message-passing.
Reference: [6] <author> P.E. Green, </author> <title> "AF: A framework for real-time distributed cooperative problem solving," </title> <booktitle> Distributed Arti--ficial Intelligence, </booktitle> <editor> edited by Michael N. Huhns, </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1987, </year> <pages> pp. 153-176. </pages>
Reference-contexts: One strategy for using expert systems in real-time involves the Maintenance System for AI Knowledge Bases (SKRAM) [7]. SKRAM uses a real-time expert system architecture, called the Activation Framework (AF) <ref> [6] </ref>, to support a dynamically prioritized, message based, distributed, real-time Ada run-time environment.
Reference: [7] <author> P.E. Green, J. Duckworth, L. Becker, and S. Cotterill, </author> <title> "Maintenance system for AI knowledge bases, Phase I final report, </title> <booktitle> Design of the SKRAM system", contract number F33615-90-C-1470, </booktitle> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: This issue is interesting mainly because the exponential search time behavior exhibited by rule-based expert systems makes them difficult to apply to real-time applications. One strategy for using expert systems in real-time involves the Maintenance System for AI Knowledge Bases (SKRAM) <ref> [7] </ref>. SKRAM uses a real-time expert system architecture, called the Activation Framework (AF) [6], to support a dynamically prioritized, message based, distributed, real-time Ada run-time environment. <p> Section 3 discusses techniques for obtaining the model parameters. In Section 4 an optimizing rule grouping algorithm is developed using the Kernighan-Lin (KL) algorithm as its core. Section 5 demonstrates the feasibility of the model and algorithm by applying them to the Advanced GPS (Global Positioning Systems) Receiver (AGR) <ref> [7] </ref> and the Manned Maneuvering Unit (MMU) [14] knowledge bases.
Reference: [8] <author> P.E. Green, </author> <title> "A data-driven mechanism for the execution of production rules in real-time computer based systems", </title> <booktitle> The Real-Time Intelligent Systems Cooperation, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: for a balanced k-way partition, since j = N=k, = N for non data-driven mechanism where N is the number of rules in the rule system. - Data-Driven Mechanism: In this scheme, each group maintains a pattern matching network (e.g., consisting of RTGO, BFO and RO data structure objects in <ref> [8] </ref>) with a size proportional to the number of rules in each group. When a new fact is processed, instead of inspecting all j rules, only a portion of the rules in the pattern matching network is inspected before the most important rule is selected to run. <p> rule grouping algorithm and having the AFL translator [9] automatically translate them into groups of C program modules incorporating the data-driven 17 - 1 2 3 4 5 6 7 2 4 ffi ffi * k X s;1 group X s;k groups ffi Model * Experiment mechanism as described in <ref> [8] </ref>. Figures 6 and 7 show an instance of an AGR rule group consisting of 4 rules encoded in CLIPS and AFL formats, respectively.
Reference: [9] <author> P.E. Green, </author> <title> AFL users manual, Version 1.5, </title> <booktitle> The Real-Time Intelligent Systems Cooperation, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: In the extreme case when only one rule is allocated to a group, the communication network connecting all the groups is itself like a Rete network <ref> [9] </ref>. This real-time expert system architecture, however, has a discernible process-level overhead for carrying out the event-driven scheduling. <p> This experimental result is obtained by encoding the AGR rules in the form of Activation Framework Language (AFL) rule groups based on the output generated by the optimizing rule grouping algorithm and having the AFL translator <ref> [9] </ref> automatically translate them into groups of C program modules incorporating the data-driven 17 - 1 2 3 4 5 6 7 2 4 ffi ffi * k X s;1 group X s;k groups ffi Model * Experiment mechanism as described in [8].
Reference: [10] <author> A. Gupta, </author> <title> Parallelism in Production Systems, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Therefore, the optimizing rule grouping should balance these two overheads, thereby minimizing the total system overhead. It should be noted that while the AF architecture also allows rule groups to run on separate processors to increase production parallelism (similar to that in <ref> [10] </ref>), the paper will only focus on the process-level and rule-level overheads which exist in a uniprocessor real-time system. Current research investigations of rule grouping for expert systems [12, 16] are not tied in with real-time architectures and thus do not consider this design trade-off.
Reference: [11] <institution> IFIP Working Conference on Dependability of AI Systems, </institution> <month> May </month> <year> 1991, </year> <institution> Vienna, Austria. </institution>
Reference-contexts: 1 Introduction The incorporation of rule-based systems in real-time control systems has emerged as a state-of-the-art demand in recent years <ref> [1, 2, 11] </ref>. One central issue is how to make expert systems real-time, that is, how to ensure that the timing and functional requirements of expert systems are satisfied.
Reference: [12] <author> R.J.K. Jacob, and J.N. Froscher, </author> <title> "A software engineering methodology for rule-based systems," </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> Vol. 2, No. 2, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: Current research investigations of rule grouping for expert systems <ref> [12, 16] </ref> are not tied in with real-time architectures and thus do not consider this design trade-off. <p> These algorithms stop either after a pre-determined number of groups is obtained [16] or the inter-group distance between the next two groups to be combined is no longer positive <ref> [12] </ref>. These rule grouping algorithms are not applicable to expert systems running on real-time architectures because there is no provision for balancing the process-level and rule-level overheads.
Reference: [13] <author> B.W. Kernighan, and S. Lin, </author> <title> "An efficient heuristic procedure for partitioning graphs," </title> <journal> Bell Sys. Tech. J., </journal> <volume> Vol. 49, </volume> <year> 1970, </year> <pages> pp. 291-307. </pages>
Reference-contexts: These rule grouping algorithms are not applicable to expert systems running on real-time architectures because there is no provision for balancing the process-level and rule-level overheads. Another class of algorithms <ref> [3, 13, 15] </ref> deals with a more general graph-partitioning problem as follows: given a graph G with costs on its nodes and edges, partition the nodes of G into k subsets of specified sizes, s 1 ; s 2 ; ; s k , so as to minimize the total cost <p> This optimizing rule grouping algorithm utilizes the KL algorithm <ref> [13] </ref> as a subroutine for k-way partitioning rules so as to minimize the total external cost on edge cuts, thereby minimizing r, p and m and, consequently, optimizing the system performance.
Reference: [14] <author> D.G. Lawler, and L.J.F. Williams, </author> <title> "MMU FDIR automation task," </title> <type> Technical Report NAS9-17650, </type> <institution> McDonell Douglas Astronautics Engineering Services, Houston, Texas, </institution> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: In Section 4 an optimizing rule grouping algorithm is developed using the Kernighan-Lin (KL) algorithm as its core. Section 5 demonstrates the feasibility of the model and algorithm by applying them to the Advanced GPS (Global Positioning Systems) Receiver (AGR) [7] and the Manned Maneuvering Unit (MMU) <ref> [14] </ref> knowledge bases.
Reference: [15] <author> C. H. Lee, C.I. Park, and M. Kim, </author> <title> "Efficient algorithm for graph-partitioning problem using a problem transformation method," </title> <booktitle> Computer-Aided Design, </booktitle> <volume> Vol. 21, No. 10, </volume> <month> Dec. </month> <year> 1989, </year> <pages> pp. 611-618. </pages>
Reference-contexts: These rule grouping algorithms are not applicable to expert systems running on real-time architectures because there is no provision for balancing the process-level and rule-level overheads. Another class of algorithms <ref> [3, 13, 15] </ref> deals with a more general graph-partitioning problem as follows: given a graph G with costs on its nodes and edges, partition the nodes of G into k subsets of specified sizes, s 1 ; s 2 ; ; s k , so as to minimize the total cost
Reference: [16] <author> M. Mehrotra, </author> <title> "Rule groupings: a software engineering approach towards verification of expert systems," NASA Contract NAS1-18585, </title> <type> Final Report, </type> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Current research investigations of rule grouping for expert systems <ref> [12, 16] </ref> are not tied in with real-time architectures and thus do not consider this design trade-off. <p> These algorithms stop either after a pre-determined number of groups is obtained <ref> [16] </ref> or the inter-group distance between the next two groups to be combined is no longer positive [12]. These rule grouping algorithms are not applicable to expert systems running on real-time architectures because there is no provision for balancing the process-level and rule-level overheads.
Reference: [17] <author> W. Mettrey, </author> <title> "A comparative evaluation of expert system tools", </title> <booktitle> IEEE Computer, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: This work was supported in part by the AFOSR under the 1991 Summer Research Program and the National Science Foundation under grant CCR-9110816. 1 shells supported by SKRAM, such as the C Language Integrated Production System (CLIPS) [5] and the Automated Reasoning Tool (ART) <ref> [17] </ref>. These user-specified rule groups are automatically translated by SKRAM's translator into efficient Ada run-time processes (with each process corresponding to a rule group) which communicate with each other via message-passing.
Reference: [18] <author> S.M. Ross, </author> <title> Introduction to Probability Models, </title> <address> New York, </address> <publisher> Academic Press, </publisher> <address> 4th Edition, </address> <year> 1989. </year>
Reference-contexts: t 0g taking on values in the set of nonnegative integers such that the conditional distribution of the future state X (t + s) given the present X (s) and the past X (u); 0 u &lt; s, depends only on the present and is independent of the past states <ref> [18] </ref>. 5 T ACO SW q 6 ff (r q) / m S p selecting one to fire among the set of ready rules, if any. <p> This performance metric can be computed by first solving for P ACO (1) from the following set of linear equations describing the Markov model in Figure 2 <ref> [18] </ref>: P ACO (1) + P SCO (1) + P SW (1) + P OS (1) = 1; m P SW (1) = m ffP SCO (1) = P ACO (1): This yields P ACO (1) = 1 + + rp and therefore the equation for the effective production rate is
Reference: [19] <institution> The Real-Time Intelligent Systems, Activation Framework Operating System Environment, </institution> <note> Users Manual, AFC Version 2.6, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: For an 80386 machine loaded with AF, for example, the average time required for the AF operating system to perform a context switch is about 2 milliseconds <ref> [19] </ref>. Therefore, 500 sec 1 . 9 * denotes the average number of times per second the CPU is capable of (a) delivering a message from an ACO to another ACO and (b) re-computing the priorities of these two ACOs to determine which one has the higher priority. <p> For an 80386 machine loaded with AF, the average time required for the AF to perform this service is about 1.5 milliseconds <ref> [19] </ref>. Therefore, 700 sec 1 . * denotes the average number of times per second the execution of the rule system is interrupted by I/O events.
Reference: [20] <author> Worcester Polytechnic Institute, </author> <title> Knowledge Representation into Ada Methodology, Project Review Meeting, </title> <month> May, </month> <year> 1991. </year> <month> 23 </month>
References-found: 19

