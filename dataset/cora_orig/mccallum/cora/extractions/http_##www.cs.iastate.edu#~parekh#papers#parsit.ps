URL: http://www.cs.iastate.edu/~parekh/papers/parsit.ps
Refering-URL: http://www.cs.iastate.edu/~parekh/resume.html
Root-URL: 
Title: PARSIT A Parallel Algorithm Reconfiguration SImulation Tool  
Author: Gopal Racherlay Steven E. Killiany, Leslie D. Fifey, Michael A. Lehmanny, and Rajesh Parekhz 
Address: 200 Felgar St. Rm. 114 104 Atanasoff Hall Norman OK, 73019 USA Ames IA, 50011 USA  
Affiliation: ySchool of Computer Science zDepartment of Computer Science University of Oklahoma Iowa State University  
Abstract: We present a tool - PARSIT toperform simulation and performance evaluation on dynamically reconfigurable architectures. PARSIT assumes a reconfigurable system with standalone processors connected using a multistage interconnection network. Each processor executes program code written using a set of parallel processing language primitives implemented as C-language libraries. PARSIT dynamically performs reconfiguration of the architecture based on the application program. Useful performance statistics provided by PARSIT can be used by the user to analyze, interpret the system and make necessary decisions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arunkumar, R. Lal, and R. Venkatagopal, "SIMPAC-T: </author> <title> A Simulator For Multitransputer Systems ", Microprocessing and Microprogramming 35, </title> <booktitle> 1992, </booktitle> <pages> pp. 253-260. </pages>
Reference-contexts: 1 Introduction Performance evaluation of an application program on different parallel and distributed architectures can be used for the selection of the appropriate architecture for an application. Many attempts have been made to simulate and analyze parallel and distributed systems <ref> [1, 3, 6, 8] </ref>. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. <p> Many attempts have been made to simulate and analyze parallel and distributed systems [1, 3, 6, 8]. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine <ref> [1, 8] </ref>. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. We believe that PARSIT is the first tool to address this issue. <p> This process is done automatically by the supervisor. The supervisor can also perform load-balancing using process migration. 2.1 Parallel Processing Primitive Li braries The parallel processing primitives are implemented as C functions. The primitives are based on the PVM C libraries [5] and SIMLANG <ref> [1] </ref>. The application program is written in C and/or FORTRAN and has embedded function calls to these primitives. The libraries are categorized as Process Control, Group Functions, Static Reconfiguration, Interprocess Communication, and Miscellaneous.
Reference: [2] <author> E.A. Brewer, et. al., </author> <title> "Proteus : A High - Performance Parallel Architecture", </title> <type> Technical Report, </type> <institution> MIT, </institution> <month> June </month> <year> 1991. </year>
Reference: [3] <author> B.B. Bhaumik, P.K. Das, and K.K. Bagchi, </author> <title> "A Simulator For Multi-multiprocessor Systems Design", Modelling and Simulation, </title> <booktitle> 1983, </booktitle> <pages> pp. 539-544. </pages>
Reference-contexts: 1 Introduction Performance evaluation of an application program on different parallel and distributed architectures can be used for the selection of the appropriate architecture for an application. Many attempts have been made to simulate and analyze parallel and distributed systems <ref> [1, 3, 6, 8] </ref>. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. <p> Many attempts have been made to simulate and analyze parallel and distributed systems [1, 3, 6, 8]. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines <ref> [3, 6] </ref>. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. We believe that PARSIT is the first tool to address this issue. This work discusses the development of PAR-SIT Parallel Algorithm Reconfiguration SImulation Tool.
Reference: [4] <author> L.D. Fife, G. Racherla, and S.E. Killian, </author> <title> "DYRECT ADynamic REConfiguration Tool for Multicomputer Systems.", </title> <booktitle> Proc. of Workshop on Computer Architecture Education, in conjunction with HPCA, </booktitle> <address> Raleigh, NC, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: We believe that PARSIT is the first tool to address this issue. This work discusses the development of PAR-SIT Parallel Algorithm Reconfiguration SImulation Tool. PARSIT is an extension of our earlier work on simulation languages, performance evaluation, and reconfiguration simulation. Fife, Racherla, and Killian <ref> [4] </ref> developed DYRECT a tool for dynamic reconfiguration of multi-computer systems. <p> This simulator is capable of providing architectural mapping of the application program onto the major categories of architectures, such as trees, rings, stars, meshes, and cubes, as well as allowing the user to specify a new or experimental reconfiguration strategy and architecture type <ref> [4, 10] </ref>. The parallel processing simulation libraries provide the mechanism for the user to run an application program on the system. Performance metrics can then be generated for the application program being simulated. <p> Section 3 explains the details of running an example application using PARSIT. Section 4 provides conclusions of work carried out and discusses future development. 2 Architecture and Design of PARSIT Dynamic reconfiguration of multicomputer systems is an important topic in the area of computer architecture. DYRECT <ref> [4] </ref> is an interactive tool for the simulation of dynamic reconfiguration networks. The use of DYRECT aids in the simulation of reconfiguration algorithms and strategies by providing an interactive graphical tool.
Reference: [5] <author> A. Geist, et al., </author> <title> PVM:Parallel Virtual Machine A User's Guide and Tutorial for Net-worked Parallel Computing, </title> <publisher> MIT Press 1994. </publisher>
Reference-contexts: This process is done automatically by the supervisor. The supervisor can also perform load-balancing using process migration. 2.1 Parallel Processing Primitive Li braries The parallel processing primitives are implemented as C functions. The primitives are based on the PVM C libraries <ref> [5] </ref> and SIMLANG [1]. The application program is written in C and/or FORTRAN and has embedded function calls to these primitives. The libraries are categorized as Process Control, Group Functions, Static Reconfiguration, Interprocess Communication, and Miscellaneous.
Reference: [6] <author> I. Glenndinning, et al., </author> <title> "Generic Visualization and Performance Monitoring Tools for Message Passing Parallel Systems", </title> <booktitle> Proc. of IFIP WG 10.3 Workshop on Programming Environments for Parallel Computing, </booktitle> <address> Edinburgh, Scotland. </address>
Reference-contexts: 1 Introduction Performance evaluation of an application program on different parallel and distributed architectures can be used for the selection of the appropriate architecture for an application. Many attempts have been made to simulate and analyze parallel and distributed systems <ref> [1, 3, 6, 8] </ref>. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. <p> Many attempts have been made to simulate and analyze parallel and distributed systems [1, 3, 6, 8]. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines <ref> [3, 6] </ref>. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. We believe that PARSIT is the first tool to address this issue. This work discusses the development of PAR-SIT Parallel Algorithm Reconfiguration SImulation Tool.
Reference: [7] <author> S.P. Kartashev, and S.I. Kartashev, </author> <title> "Analysis and Synthesis of Dynamic Multicomputer Networks that Reconfigure into Rings, Trees, and Stars", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-36, No. 7, </volume> <month> July </month> <year> 1987. </year>
Reference-contexts: The simulator has several common strategies available directly through a set of library files. Furthermore, new scenarios may be constructed and analyzed by the simulator. Dynamic architectures were introduced by Kartashev <ref> [7] </ref> in the early 1970's. A dynamic architecture can be viewed as a black box consisting of processor and memory units with differing computing structures such as multicomputers, arrays, and pipelines. Reconfiguration can be either architectural or fault-tolerant. <p> Rings, for example, are quite useful for pipelined computations and control algorithms while stars and trees are suited for divide-and-conquer algorithms like sorting. PARSIT's supervisor invokes DYRECT to perform dynamic reconfiguration of the architecture. DYRECT uses the Shift Register with Variable Bias (SRVB) scheme proposed by Kartashev <ref> [7] </ref>. Each processor has a unique node number that is decided apriori by the system monitor. The monitor also broadcasts a bias number to all the nodes. The user can choose the resultant architecture and its parameters. <p> The user can choose the resultant architecture and its parameters. Based on this information, each node performs a local computation to get the node numbers of its neighbors that it would connect to at the time of reconfiguration. Kartashev devised strategies for reconfiguring trees and rings <ref> [7] </ref>. Biswas designed reconfigurable m-ary trees [12] and Ruskey used transpositions to generate binary trees [11]. Racherla and Radhakrishnan [10] developed parameterizable algorithms for rings and trees. These include reconfiguration algorithms for m-ary trees of variable height and a forest of trees with variable height and branching factor [10].
Reference: [8] <author> A.E. Knowles, </author> <title> "PARSIFAL A Parallel Simulation Facility based on the Transputers", </title> <booktitle> Workshop on School on High Performance Architectures and Algorithms, </booktitle> <address> Primisko, Bulgaria, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Performance evaluation of an application program on different parallel and distributed architectures can be used for the selection of the appropriate architecture for an application. Many attempts have been made to simulate and analyze parallel and distributed systems <ref> [1, 3, 6, 8] </ref>. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine [1, 8]. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. <p> Many attempts have been made to simulate and analyze parallel and distributed systems [1, 3, 6, 8]. These simulators have a specific, or a small architectural domain. Some are limited to a specific machine <ref> [1, 8] </ref>. Other simulators are restricted to a class of parallel machines [3, 6]. However, none of these tools address the issue of performance analysis of dynamic reconfigurable architectures. We believe that PARSIT is the first tool to address this issue.
Reference: [9] <author> G. Racherla, R. Parekh, et al., </author> <title> "Simulator for Parallel Architectures and Computing", </title> <institution> Bachelor of Engineering Thesis, Victoria Jubilee Technical Institute, Bombay, </institution> <month> August </month> <year> 1991. </year>
Reference: [10] <author> G. Racherla, and R. Sridhar, </author> <title> "Parametrized Reconfiguration of a General Architecture into Tree Structures and Binary Hypercube", </title> <note> manuscript in preparation. </note>
Reference-contexts: This simulator is capable of providing architectural mapping of the application program onto the major categories of architectures, such as trees, rings, stars, meshes, and cubes, as well as allowing the user to specify a new or experimental reconfiguration strategy and architecture type <ref> [4, 10] </ref>. The parallel processing simulation libraries provide the mechanism for the user to run an application program on the system. Performance metrics can then be generated for the application program being simulated. <p> Kartashev devised strategies for reconfiguring trees and rings [7]. Biswas designed reconfigurable m-ary trees [12] and Ruskey used transpositions to generate binary trees [11]. Racherla and Radhakrishnan <ref> [10] </ref> developed parameterizable algorithms for rings and trees. These include reconfiguration algorithms for m-ary trees of variable height and a forest of trees with variable height and branching factor [10]. <p> Biswas designed reconfigurable m-ary trees [12] and Ruskey used transpositions to generate binary trees [11]. Racherla and Radhakrishnan <ref> [10] </ref> developed parameterizable algorithms for rings and trees. These include reconfiguration algorithms for m-ary trees of variable height and a forest of trees with variable height and branching factor [10]. <p> The Split-Merge-Sort is best suited for a tree architecture as it exhibits a tree-like process control structure. PARSIT examines the program structure and dynamically reconfigures the architecture as a tree using a reconfiguration algorithm from its library <ref> [10] </ref>. The matrix multiplication can be done quite efficiently using a hypercube structure. PARSIT intelligently performs the reconfiguration of the architecture to a hypercube using DYRECT. It is noteworthy that the reconfiguration is intelligent and is not explicitly specified by the user.
Reference: [11] <editor> F. Ruskey, et al, </editor> <title> "Generating Binary Trees by Transpositions", </title> <journal> Journal of Algorithms, </journal> <volume> Vol. 11, </volume> <year> 1990. </year>
Reference-contexts: Kartashev devised strategies for reconfiguring trees and rings [7]. Biswas designed reconfigurable m-ary trees [12] and Ruskey used transpositions to generate binary trees <ref> [11] </ref>. Racherla and Radhakrishnan [10] developed parameterizable algorithms for rings and trees. These include reconfiguration algorithms for m-ary trees of variable height and a forest of trees with variable height and branching factor [10].
Reference: [12] <author> S. Srinivas, and N.N. Biswas, </author> <title> "Design and Analysis of a Generalized Architecture for Reconfigurable m-ary Tree Structures", </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 41, No. 11, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: Based on this information, each node performs a local computation to get the node numbers of its neighbors that it would connect to at the time of reconfiguration. Kartashev devised strategies for reconfiguring trees and rings [7]. Biswas designed reconfigurable m-ary trees <ref> [12] </ref> and Ruskey used transpositions to generate binary trees [11]. Racherla and Radhakrishnan [10] developed parameterizable algorithms for rings and trees. These include reconfiguration algorithms for m-ary trees of variable height and a forest of trees with variable height and branching factor [10]. <p> DYRECT is composed of three major systems (see libraries that are called by the simulator. The system architecture is assumed to be implemented with a multistage augmented shu*e exchange interconnection network proposed by Srinivas and Biswas <ref> [12] </ref>. This minimizes the overheads introduced by reconfiguration, both in terms of time and hardware. The supervisor (for dynamic reconfiguration) or the user ( for static reconfiguration) choose the initial architecture and its parameters to perform reconfiguration.
References-found: 12

