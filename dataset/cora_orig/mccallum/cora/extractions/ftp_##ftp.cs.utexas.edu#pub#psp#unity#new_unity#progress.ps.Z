URL: ftp://ftp.cs.utexas.edu/pub/psp/unity/new_unity/progress.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/psp/newunity.html
Root-URL: http://www.cs.utexas.edu
Email: misra@cs.utexas.edu  
Phone: (512) 471-9547  
Title: Chapter 4 Progress  
Author: Jayadev Misra 
Note: 1 This material is based in part upon work supported by the Texas Advanced Research Program under Grant No. 003658-219 and by the National Science Foundation Award CCR-9111912.  
Date: April 5, 1994  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> K. Mani Chandy and Jayadev Misra. </author> <title> The drinking philosophers problem. </title> <journal> ACM, </journal> <volume> 6(4) </volume> <pages> 632-646, </pages> <year> 1984. </year>
Reference-contexts: Lamport [15] prescribes deducing the progress properties from the conjunction of the fairness assumption|expressed as a formula in temporal logic|and the safety properties. The graph problem (Section 4.5.5) is from [19]; the original inspiration for this problem is from Chandy and Misra <ref> [1] </ref>. Recently, Chandy has proposed combining progress with stability; he writes p ,! q to denote that once p holds in the program, q will eventually hold and will continue to hold thereafter. The operator ,! has many pleasing properties including lhs strengthening, rhs weakening, infinite disjunction and transitivity.
Reference: [2] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: It is possible, though cumbersome, to define transient predicates for programs that include these programming language features. For simplicity, we will restrict ourselves to transition systems; such systems can be represented by a UNITY program <ref> [2] </ref>. We make two assumptions about such systems. * There is at least one transition. Recall that skip is included as an 8 CHAPTER 4. <p> ENSURES, LEADS-TO 13 4.4 ensures, leads-to Our primary progress operator is leads-to. It is the transitive, disjunctive closure of an operator, ensures. It is possible to eliminate ensures from our theory, replacing it by co-properties and transient predicates. However, to maintain continuity with <ref> [2] </ref>, we introduce ensures though its role is now considerably diminished. 4.4.1 ensures The informal meaning of p ensures q (abbreviated p en q) is: If p holds at any point in the computation it will continue to hold as long as q does not hold; eventually q holds; further, there <p> SYNOPSIS 41 induction rules (in addition to transitivity and disjunction rules that appear in the definition of leads-to). The examples illustrate how these rules can be effectively applied in practice. Bibliographic Notes The treatment of progress properties in this chapter closely follows the original development described in <ref> [2] </ref>. The only new element is the introduction of transient predicates and the replacement of "unless" by "co" in the derived rules, such as the PSP and the completion rules. The minimal progress condition is due to Dijkstra [5].
Reference: [3] <author> Ernie Cohen. </author> <title> Modular Progress Proofs of Concurrent Programs. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: The minimal progress condition is due to Dijkstra [5]. For a comprehensive treatment of fairness see Francez [7] or Manna and Pnueli [17]. Transient predicates have been used informally before (they are called nonquiescent in ([18], [20]); the present definition is inspired by Cohen <ref> [3] </ref>. The definition of ensures for minimal progress appears in Jutla and Rao [10]. <p> Jutla and Rao [10] contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen <ref> [3] </ref>, Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and [24]). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4.
Reference: [4] <author> Stephen Cook. </author> <title> Soundness and completeness of an axiom system for program verification. </title> <journal> SIAM Journal of Computing, </journal> <volume> 7(1) </volume> <pages> 70-90, </pages> <year> 1978. </year>
Reference-contexts: The property (W5) in Section 4.6.1 is due to Singh [25]. Several varieties of completeness (and incompleteness) results have been established for leads-to. Jutla and Rao [10] contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook <ref> [4] </ref> is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and [24]).
Reference: [5] <author> E. W. Dijkstra. </author> <title> Solution of a problem in concurrent programming control. </title> <journal> C.ACM, </journal> <volume> 8(9):569, </volume> <year> 1965. </year>
Reference-contexts: The only new element is the introduction of transient predicates and the replacement of "unless" by "co" in the derived rules, such as the PSP and the completion rules. The minimal progress condition is due to Dijkstra <ref> [5] </ref>. For a comprehensive treatment of fairness see Francez [7] or Manna and Pnueli [17]. Transient predicates have been used informally before (they are called nonquiescent in ([18], [20]); the present definition is inspired by Cohen [3]. The definition of ensures for minimal progress appears in Jutla and Rao [10].
Reference: [6] <author> E. W. Dijkstra and C. S. Scholten. </author> <title> Predicate Calculus and Program Semantics. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For a terminating transition s, we have the Law of Excluded Miracle <ref> [6] </ref> fpg s ffalseg :p i.e., the postcondition of a transition is false only if the precondition is false.
Reference: [7] <author> Nissim Francez. </author> <title> Fairness. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: The only new element is the introduction of transient predicates and the replacement of "unless" by "co" in the derived rules, such as the PSP and the completion rules. The minimal progress condition is due to Dijkstra [5]. For a comprehensive treatment of fairness see Francez <ref> [7] </ref> or Manna and Pnueli [17]. Transient predicates have been used informally before (they are called nonquiescent in ([18], [20]); the present definition is inspired by Cohen [3]. The definition of ensures for minimal progress appears in Jutla and Rao [10].
Reference: [8] <author> Nissim Francez. </author> <title> Program Verification. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: The operator ,! has many pleasing properties including lhs strengthening, rhs weakening, infinite disjunction and transitivity. It is particularly interesting that ,! is finitely conjunctive. For other approaches to verifications of concurrent programs, see <ref> [8] </ref>. The notion of wlt appears in Knapp [12] and in Jutla, Knapp and Rao [9]. The latter paper includes the fixpoint characterization of wlt given in Section 4.6.2. The property (W5) in Section 4.6.1 is due to Singh [25].
Reference: [9] <author> C. S. Jutla, E. Knapp, and J. R. Rao. </author> <title> A predicate transformer approach to semantics of parallel programs. </title> <booktitle> In Proc. 8th ACM SIGACT/SIGOPS Symposium on Principles of Distributed Systems (PODC '89), </booktitle> <pages> pages 249-263, </pages> <address> Edmonton, Alberta, Canada, </address> <year> 1989. </year>
Reference-contexts: transitions. we:p h9 t :: (we:p) t i (2) Finally, we define wlt:q as the strongest solution in p of (3). p q _ we:p (3) The existence of the weakest solution for (1) and the strongest solution for (3) can be established by appealing to the Knaster-Tarski Theorem; see <ref> [9] </ref> for details. The definition of wlt given by equation (3) can be shown to be the same as the definition (W1) of Section 4.6.1. <p> The operator ,! has many pleasing properties including lhs strengthening, rhs weakening, infinite disjunction and transitivity. It is particularly interesting that ,! is finitely conjunctive. For other approaches to verifications of concurrent programs, see [8]. The notion of wlt appears in Knapp [12] and in Jutla, Knapp and Rao <ref> [9] </ref>. The latter paper includes the fixpoint characterization of wlt given in Section 4.6.2. The property (W5) in Section 4.6.1 is due to Singh [25]. Several varieties of completeness (and incompleteness) results have been established for leads-to.
Reference: [10] <author> Charanjit S. Jutla and J. R. Rao. </author> <title> A methodology for designing proof rules for fair parallel programs. </title> <type> Technical report, </type> <institution> IBM T.J. Watson Research Center, </institution> <year> 1994. </year>
Reference-contexts: not satisfy fz = kg z := z + 1 if x = y fz 6= kg The reader may also show that x k cannot be proven to be transient. 2 4.3.3 Strong Fairness Transient predicates for strong fairness can be defined using a recursive definition employing leads-to; see <ref> [10] </ref> for details (in this reference the progress operator ensures is defined for strong fairness; transient predicates and ensures are related|see Section 4.4.1). We do not plan to employ this definition nor consider strong fairness in any detail in this book. <p> For a comprehensive treatment of fairness see Francez [7] or Manna and Pnueli [17]. Transient predicates have been used informally before (they are called nonquiescent in ([18], [20]); the present definition is inspired by Cohen [3]. The definition of ensures for minimal progress appears in Jutla and Rao <ref> [10] </ref>. The definition of transient predicate under weak fairness is inspired by Lehmann, Pnueli and Stavi's notion [16] of "helpful transitions." The leads-to operator was introduced in Lamport [14]; its interpretation in linear temporal logic is in Owicki and Lamport [21]. <p> The latter paper includes the fixpoint characterization of wlt given in Section 4.6.2. The property (W5) in Section 4.6.1 is due to Singh [25]. Several varieties of completeness (and incompleteness) results have been established for leads-to. Jutla and Rao <ref> [10] </ref> contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and [24]). <p> Jutla and Rao <ref> [10] </ref> contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and [24]). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4.
Reference: [11] <author> M. Kaltenbach. </author> <title> Model checking for unity. </title> <type> Technical report, </type> <institution> Univ. of Texas at Austin, </institution> <year> 1994. </year> <note> 61 62 BIBLIOGRAPHY </note>
Reference-contexts: The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4. PROGRESS has been exploited by Kaltenbach <ref> [11] </ref> in implementing an automatic verifier for finite state programs. The leads-to operator has been extended to probabilistic programs in [24]. 4.8 Exercises 1. Show that the following property holds for the program Fairness of Section 4.2, under both minimal progress and weak fairness assump tions.
Reference: [12] <author> E. Knapp. </author> <title> A predicate transformer for progress. </title> <journal> Information Processing Letters, </journal> <volume> 33 </volume> <pages> 323-330, </pages> <year> 1989/90. </year>
Reference-contexts: The operator ,! has many pleasing properties including lhs strengthening, rhs weakening, infinite disjunction and transitivity. It is particularly interesting that ,! is finitely conjunctive. For other approaches to verifications of concurrent programs, see [8]. The notion of wlt appears in Knapp <ref> [12] </ref> and in Jutla, Knapp and Rao [9]. The latter paper includes the fixpoint characterization of wlt given in Section 4.6.2. The property (W5) in Section 4.6.1 is due to Singh [25]. Several varieties of completeness (and incompleteness) results have been established for leads-to.
Reference: [13] <author> E. Knapp. </author> <title> Refinement as a Basis for Concurrent Program Design. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Jutla and Rao [10] contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp <ref> [13] </ref>, Pachl [22], and Rao ([23] and [24]). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4.
Reference: [14] <author> L. Lamport. </author> <title> Proving the correctness of multiprocess programs. </title> <journal> IEEE, Trans. on Software Engineering, </journal> <volume> SE-3(2):125-143, </volume> <month> March </month> <year> 1977. </year>
Reference-contexts: The definition of ensures for minimal progress appears in Jutla and Rao [10]. The definition of transient predicate under weak fairness is inspired by Lehmann, Pnueli and Stavi's notion [16] of "helpful transitions." The leads-to operator was introduced in Lamport <ref> [14] </ref>; its interpretation in linear temporal logic is in Owicki and Lamport [21]. Our definition, using inference rules, has facilitated proofs of the derived rules using structural induction.
Reference: [15] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report SRC Research Report Number TR 79, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <address> 130 Lytton Ave., Palo Alto, CA 94301, </address> <month> Decem-ber </month> <year> 1991. </year>
Reference-contexts: Our definition, using inference rules, has facilitated proofs of the derived rules using structural induction. Lamport <ref> [15] </ref> prescribes deducing the progress properties from the conjunction of the fairness assumption|expressed as a formula in temporal logic|and the safety properties. The graph problem (Section 4.5.5) is from [19]; the original inspiration for this problem is from Chandy and Misra [1].
Reference: [16] <author> D. Lehman, A. Pnueli, and J. Stavi. Impartiality, </author> <title> justice and fairness: The ethics of concurrent termination. </title> <editor> In O. Kariv and S. Even, editors, </editor> <booktitle> Proc. 8th ICALP, volume 115 of Lecture Notes in Computer Science, </booktitle> <address> Acre, Israel, July 1981. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The definition of ensures for minimal progress appears in Jutla and Rao [10]. The definition of transient predicate under weak fairness is inspired by Lehmann, Pnueli and Stavi's notion <ref> [16] </ref> of "helpful transitions." The leads-to operator was introduced in Lamport [14]; its interpretation in linear temporal logic is in Owicki and Lamport [21]. Our definition, using inference rules, has facilitated proofs of the derived rules using structural induction.
Reference: [17] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The minimal progress condition is due to Dijkstra [5]. For a comprehensive treatment of fairness see Francez [7] or Manna and Pnueli <ref> [17] </ref>. Transient predicates have been used informally before (they are called nonquiescent in ([18], [20]); the present definition is inspired by Cohen [3]. The definition of ensures for minimal progress appears in Jutla and Rao [10].
Reference: [18] <author> J. Misra. </author> <title> Reasoning about networks of communicating processes. Presented at the Advanced Nato Study Institute on Logics and Models for Verification and Specification of Concurrent Systems, </title> <address> La Colle-Sur-Loup, France, </address> <month> October </month> <year> 1984. </year>
Reference: [19] <author> J. Misra. </author> <title> A theorem about dynamic acyclic graphs. </title> <booktitle> Notes on UNITY: </booktitle> <pages> 02-88, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Our definition, using inference rules, has facilitated proofs of the derived rules using structural induction. Lamport [15] prescribes deducing the progress properties from the conjunction of the fairness assumption|expressed as a formula in temporal logic|and the safety properties. The graph problem (Section 4.5.5) is from <ref> [19] </ref>; the original inspiration for this problem is from Chandy and Misra [1]. Recently, Chandy has proposed combining progress with stability; he writes p ,! q to denote that once p holds in the program, q will eventually hold and will continue to hold thereafter.
Reference: [20] <author> J. Misra. </author> <title> Equational reasoning about nondeterministic processes. </title> <journal> Formal Aspects of Computing, </journal> <volume> 2(2) </volume> <pages> 167-195, </pages> <year> 1990. </year>
Reference-contexts: The minimal progress condition is due to Dijkstra [5]. For a comprehensive treatment of fairness see Francez [7] or Manna and Pnueli [17]. Transient predicates have been used informally before (they are called nonquiescent in ([18], <ref> [20] </ref>); the present definition is inspired by Cohen [3]. The definition of ensures for minimal progress appears in Jutla and Rao [10].
Reference: [21] <author> S. Owicki and L. Lamport. </author> <title> Proving liveness properties of concurrent programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 455-495, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The definition of transient predicate under weak fairness is inspired by Lehmann, Pnueli and Stavi's notion [16] of "helpful transitions." The leads-to operator was introduced in Lamport [14]; its interpretation in linear temporal logic is in Owicki and Lamport <ref> [21] </ref>. Our definition, using inference rules, has facilitated proofs of the derived rules using structural induction. Lamport [15] prescribes deducing the progress properties from the conjunction of the fairness assumption|expressed as a formula in temporal logic|and the safety properties.
Reference: [22] <author> Jan Pachl. </author> <title> A simple proof of a completeness result for leads-to in the unity logic. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 35-38, </pages> <year> 1992. </year>
Reference-contexts: Jutla and Rao [10] contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl <ref> [22] </ref>, and Rao ([23] and [24]). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4. PROGRESS has been exploited by Kaltenbach [11] in implementing an automatic verifier for finite state programs.
Reference: [23] <author> J. R. Rao. </author> <title> On a notion of completeness for the leads-to. </title> <booktitle> Notes on UNITY: </booktitle> <pages> 24-90, </pages> <month> July </month> <year> 1991. </year>
Reference: [24] <author> J. R. Rao. </author> <title> Building on the Unity Experience: Compositionality, Fairness and Probability in Parallelism. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, </institution> <month> August </month> <year> 1992. </year> <note> BIBLIOGRAPHY 63 </note>
Reference-contexts: They argue that relative completeness in the sense of Cook [4] is all that we can hope for. Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and <ref> [24] </ref>). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut [26]. It 42 CHAPTER 4. PROGRESS has been exploited by Kaltenbach [11] in implementing an automatic verifier for finite state programs. <p> It 42 CHAPTER 4. PROGRESS has been exploited by Kaltenbach [11] in implementing an automatic verifier for finite state programs. The leads-to operator has been extended to probabilistic programs in <ref> [24] </ref>. 4.8 Exercises 1. Show that the following property holds for the program Fairness of Section 4.2, under both minimal progress and weak fairness assump tions.
Reference: [25] <author> Ambuj K. Singh. </author> <title> A theorem relating leads-to and unless. </title> <booktitle> Notes on UNITY: </booktitle> <pages> 04-88, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: For other approaches to verifications of concurrent programs, see [8]. The notion of wlt appears in Knapp [12] and in Jutla, Knapp and Rao [9]. The latter paper includes the fixpoint characterization of wlt given in Section 4.6.2. The property (W5) in Section 4.6.1 is due to Singh <ref> [25] </ref>. Several varieties of completeness (and incompleteness) results have been established for leads-to. Jutla and Rao [10] contains an excellent exposition of what completeness means in this context. They argue that relative completeness in the sense of Cook [4] is all that we can hope for.
Reference: [26] <author> Jan van de Snepscheut. </author> <type> Personal communication. </type>
Reference-contexts: Such completeness results appear in Cohen [3], Jutla and Rao [10], Knapp [13], Pachl [22], and Rao ([23] and [24]). The fact that the disjunction rule, in the definition of leads-to, is unnecessary for finite-state programs is due to van de Snepscheut <ref> [26] </ref>. It 42 CHAPTER 4. PROGRESS has been exploited by Kaltenbach [11] in implementing an automatic verifier for finite state programs. The leads-to operator has been extended to probabilistic programs in [24]. 4.8 Exercises 1.
References-found: 26

