URL: http://www.apl.jhu.edu/~hall/text/Papers/Lisp-Benchmarking-and-Fannkuch.ps
Refering-URL: http://www.apl.jhu.edu/~hall/lisp.html
Root-URL: 
Email: KAnderson@bbn.com  Duane@franz.com  
Title: Performing Lisp Analysis of the FANNKUCH Benchmark  
Author: Kenneth R. Anderson Duane Rettig Franz 
Keyword: HISTORY  
Address: STD,10 Moulton St. Cambridge, MA 02174,  1995 University Ave., Berkeley CA, 94704,  
Affiliation: BBN  Inc.,  
Abstract: This is the first in a series of articles on Lisp performance, called "Performing Lisp". This paper analyzes the FANNKUCH benchmark, that was discussed on the comp.lang.lisp internet newsgroup during September 1994, and reviews the performance issues underlying it. This benchmark involves operations on integers and vectors of integers so one might expect that Lisp and C versions could have comparable performance. However, the original benchmark suggested that the Lisp version was at least 10 times slower than the C version. While this version appeared to be optimized, several important improvements are possible. The improved version is between 24 and 116 percent slower than C when run on several Lisp implementations. This can be accounted for by differences in the quality of the compiled code of the inner loops of the benchmark, not by an essential difference between the two languages. The GNU C compiler, gcc, produces a loop with a larger overall size (footprint) but with a smaller loop body than the current Lisp compilers. In principle, a Lisp compiler can produce these loops with the same or fewer number of instructions. It is easy to write benchmarks that make Lisp appear slower than C. However, as with any highly tuned benchmark, a small change can have a profound effect on performance. even in C. For example, replacing /2 by &gt;&gt;1 makes a 40% improvement. Also changing the representation of integers and arrays of integers among C's built in types varies the performance by 80%. This benchmark came out of a thread on comp.lang.lisp in September 1994 originated by Bruno Haible (haible@ma2s2.mathematik.uni-karlsruhe.de). The original post introduced the language Beta to the news group and in passing mentioned an "integer hacking" benchmark that indicated that some Lisp implementations were much slower (50 to 100 times) on the benchmark than C. Haible describes the benchmark as follows: Take a permutation of -1,...,n-, for example: -4,2,1,5,3-. Take the first element, here 4, and reverse the order of the first 4 elements: -5,1,2,4,3-. Repeat this until the first element is a 1, so flipping won't change anything more: -3,4,2,1,5-, -2,4,3,1,5-, -4,2,3,1,5-, -1,3,2,4,5-, Count the number of flips, here 5. Do this for all n! permutations, and record the maximum number of flips needed for any permutation. The conjecture is that this maximum count is approximated by n*log(n) when n goes to infinity. FANNKUCH" is an abbreviation for the German word "Pfannkuchen", or pancakes, in analogy to flipping pancakes. The first few fannkuch numbers and their corresponding permutation are shown in Exhibit 0. This is a good benchmark because it can easily be programmed in different languages and only uses common language features like manipulation of small integers and vectors of them. The original Lisp version of this benchmark is shown in Exhibit 1. 
Abstract-found: 1
Intro-found: 0
Reference: <author> Anderson, Kenneth R. </author> <title> "Courage in Profiles", </title> <booktitle> Lisp Users and Vendors Conference, </booktitle> <year> (1994). </year>
Reference: <author> Baker, H.G. </author> <title> "Critique of DIN Kernel Lisp Definition Version 1.2", </title> <booktitle> Lisp and Symbolic Computation,, </booktitle> <month> 4,4 (march </month> <year> 1992), </year> <note> 371-398. </note> <author> Bentley, Kernighan and VanWyk, </author> <title> "An elementary C cost model", Unix Review, </title> <booktitle> 9,2, p. </booktitle> <pages> 38-48. </pages>
Reference: <editor> Gabriel R.P.,Performance and Evaluation of Lisp Systems.. </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference: <author> Gabriel R.P., </author> <title> "Lisp: Good News, Bad News, How to Win Big", </title> <journal> AI Expert, </journal> <month> June, </month> <year> 1991, </year> <pages> p. 31-39. </pages>
Reference: <author> Gudeman, David. </author> <title> "Representing Type Information in Dynamically Typed Languages", </title> <type> TR 93 - 27, </type> <institution> Dept. Computer Science, University of Arizona, Tucson, </institution> <year> 1993. </year> <note> FTP from ftp.cs.arizona.edu reports/1993/TR93-27.ps.Z. </note>
References-found: 5

