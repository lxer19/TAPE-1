URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/AHV-PROJECT/ess96-paper.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node20.html
Root-URL: http://www.cs.man.ac.uk
Email: email: howard@cs.man.ac.uk  
Title: DESIGN AND SIMULATION OF ASYNCHRONOUS MICROPIPELINE CIRCUITS IN RAINBOW  
Author: Howard Barringer, Donal Fellows, Graham Gough, Pete Jinks, Brian Marsden, Alan Williams 
Keyword: VLSI simulation, CAD, simulation interfaces, animation software, hierarchical models.  
Address: Manchester, Manchester, M13 9PL, UK  
Affiliation: Department of Computer Science, University of  
Abstract: We describe the development of the Rainbow hardware design environment for supporting the design and simulation of asynchronous systems. Rainbow contains a suite of asynchronous hardware description languages for modelling systems based on Sutherland's micropipeline asynchronous design philosophy. Full interworking is supported between Rainbow sub-languages so that the various components of a design can be described in the most suitable way. The framework offers rapid design description and simulation at a high level, so that the functionality and performance of the design can be assessed and experimented with at an early stage in the design cycle. We illustrate one of the Rainbow sub-languages (Green) through a simple micropipeline register design and examine its operation with the simulator. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barringer, H., Fellows, D., Gough, G., Jinks, P., and Williams, A. </author> <year> (1996a). </year> <title> A formally based framework for supporting design and analysis of asynchronous hardware systems. </title> <booktitle> In Proceedings of the Northern Formal Methods Workshop, </booktitle> <address> Ilkley, UK. </address>
Reference-contexts: This example includes most of the basic mi cropipeline elements which have been defined so far. There is also a textual version of the (pictorial) Green described here, allowing a more conventional textual programming language style of design entry. For example, Further details are contained in <ref> (Barringer et al., 1996a) </ref>.
Reference: <author> Barringer, H., Gough, G., Monahan, B., and Williams, A. </author> <year> (1996b). </year> <title> A Process Algebra Foundation for Reasoning about Core ELLA. </title> <journal> The Computer Journal, </journal> <volume> 39(4) </volume> <pages> 303-324. </pages>
Reference-contexts: Fig. 7. Textual Green Example: Basic Register algebras, such as SCCS (Milner, 1989), but which has the micropipeline handshake as its communication primitive, and richly structured actions, similar to those used in EPA <ref> (Barringer et al., 1996b) </ref>. In turn, APA has an operational semantics for generating derivation trees corresponding to each APA term. The Rainbow design framework, containing a suite of formally-based sub-languages, offers an environment for describing asynchronous micropipeline designs in various styles.
Reference: <author> Birtwistle, G. and Davis, A., </author> <title> editors (1995). Asynchronous Digital Circuit Design. </title> <publisher> Springer. </publisher>
Reference-contexts: INTRODUCTION Digital hardware systems have, for the past 30 years, been designed principally using a synchronous approach, and involving global clocking strategies. Recently, there has been a resurgence of interest in asynchronous hardware design techniques <ref> (Birtwistle and Davis, 1995) </ref>, with the aim of achieving low power combined with high speed operation, which is becoming increasingly difficult with synchronous systems. Various asynchronous design methodologies have emerged, in particular Sutherland's micropipeline philosophy (Sutherland, 1989).
Reference: <author> Broy, M., Dederich, F., Dendorfer, C., and Fuchs, M. </author> <year> (1992). </year> <title> The Design of Distributed Systems: An Introduction to FOCUS. </title> <type> Technical Report TUM-19202, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference-contexts: Rainbow will provide the basis for formal reasoning tools that we are developing for analysis of micropipeline designs. It is intended that further sub-languages will be added to Rainbow: Red : supports behavioural/specification descriptions at a level above Yellow, using, for example, temporal logic or stream transformers <ref> (Broy et al., 1992) </ref>. Blue: operates at a level below Green, and exposes hand shaking control, similar to the CCS models of AMULET described in (Liu, 1995).
Reference: <author> Burns, A. </author> <year> (1988). </year> <title> Programming in Occam 2. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: At present, Rainbow includes a dataflow-style language, called Green, based on micropipeline communication primitives and a control-flow sequential language, called Yellow, that is similar to OCCAM <ref> (Burns, 1988) </ref>, but uses an Ada-like rendezvous communication (Li, 1982; Som-merville and Morrison, 1987). A formal semantics is defined for each sub-language, enabling Rainbow to form the basis of specialised formal verification and analysis tools for supporting a design. The sub-languages are interfaced at the semantics level.
Reference: <author> Furber, S. </author> <year> (1995). </year> <title> Computing Without Clocks: Micropipelin-ing the ARM Processor. </title> <editor> In Birtwistle, G. and Davis, A., editors, </editor> <booktitle> Asynchronous Digital Circuit Design, </booktitle> <pages> pages 211-262. </pages> <publisher> Springer. </publisher>
Reference-contexts: Various asynchronous design methodologies have emerged, in particular Sutherland's micropipeline philosophy (Sutherland, 1989). Extensive designs have been built using this; for example at the University of Manch-ester, the AMULET Group have been investigating the design of, and implementing, asynchronous micropipeline versions of the ARM microprocessor <ref> (Furber, 1995) </ref>. Currently, confidence in design correctness is increased by running validation programs through a (commercially fl The authors acknowledge support from the Engineering and Physical Sciences Research Council via research grant GR/K42073. available) hierarchical simulation/modelling tool.
Reference: <author> Herath, J., Yamaguchi, Y., Toda, K., Mattingley, R., Saito, N., and Yuba, T. </author> <year> (1992). </year> <title> Comparison of Dataflow Computing Models. In Sharp, </title> <editor> J. A., editor, </editor> <booktitle> Data Flow Computing: Theory and Practice, </booktitle> <pages> pages 16-34. </pages> <publisher> Ablex. </publisher>
Reference-contexts: Data flows along channels according to a rendezvous style of synchronised communication. Being a static dataflow language, whose processing elements are data-driven and need all of the required input values to be present before they can fire, Green has similarities to other dataflow languages <ref> (Herath et al., 1992) </ref>. However, there is no implicit buffering between elements, and so each output of a (stateless) element must be ready to accept a value before that element can fire.
Reference: <author> Li, W. </author> <year> (1982). </year> <title> An Operational Semantics of Tasking and Exception Handling in Ada. </title> <type> Technical Report CSR-99-82, </type> <institution> University of Edinburgh. </institution>
Reference: <author> Liu, Y. </author> <year> (1995). </year> <title> AMULET1: Specification and Verification in CCS. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Calgary. </institution>
Reference-contexts: Blue: operates at a level below Green, and exposes hand shaking control, similar to the CCS models of AMULET described in <ref> (Liu, 1995) </ref>. The current simulation and editing tools will be extended to cover the other sub-languages in the Rainbow framework, so that different parts of a design can be described in the most suitable way.
Reference: <author> Milner, R. </author> <year> (1989). </year> <title> Communication and Concurrency. </title> <publisher> Pren-tice Hall, </publisher> <address> Hemel Hempstead, Herts, England. </address>
Reference-contexts: Fig. 7. Textual Green Example: Basic Register algebras, such as SCCS <ref> (Milner, 1989) </ref>, but which has the micropipeline handshake as its communication primitive, and richly structured actions, similar to those used in EPA (Barringer et al., 1996b). In turn, APA has an operational semantics for generating derivation trees corresponding to each APA term.
Reference: <author> Paver, N. </author> <year> (1994). </year> <title> The Design and Implementation of an Asynchronous Microprocessor. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Manchester. Rainbow (1996). The Rainbow Project Web Pages, Department of Computer Science, University of Manchester. </institution> <note> URL: http://www.cs.man.ac.uk/fmethods/projects/ AHV-PROJECT/ahv-project.html. </note>
Reference-contexts: It has been observed that although the use of micropipelining techniques leads to systems which may be easily composed, it is remarkably easy to construct complicated feedback loops of asynchronous pipeline stages that may deadlock <ref> (Paver, 1994) </ref>. So far, simulation has revealed several instances of this problem (but it is of course not known how many others remain undetected).
Reference: <author> Sommerville, I. and Morrison, R. </author> <year> (1987). </year> <title> Software Development with Ada. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Sutherland, I. </author> <year> (1989). </year> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6). </volume>
Reference-contexts: Recently, there has been a resurgence of interest in asynchronous hardware design techniques (Birtwistle and Davis, 1995), with the aim of achieving low power combined with high speed operation, which is becoming increasingly difficult with synchronous systems. Various asynchronous design methodologies have emerged, in particular Sutherland's micropipeline philosophy <ref> (Sutherland, 1989) </ref>. Extensive designs have been built using this; for example at the University of Manch-ester, the AMULET Group have been investigating the design of, and implementing, asynchronous micropipeline versions of the ARM microprocessor (Furber, 1995).
References-found: 13

