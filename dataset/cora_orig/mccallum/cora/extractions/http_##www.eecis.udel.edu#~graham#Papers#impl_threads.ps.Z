URL: http://www.eecis.udel.edu/~graham/Papers/impl_threads.ps.Z
Refering-URL: http://www.eecis.udel.edu/~graham/Papers/
Root-URL: http://www.cis.udel.edu
Title: Implementing Lightweight Threads  
Author: D. Stein, D. Shah SunSoft, Inc. 
Abstract: We describe an implementation of a threads library that provides extremely lightweight threads within a single UNIX process while allowing fully concurrent access to system resources. The threads are lightweight enough so that they can be created quickly, there can be thousands present, and synchronization can be accomplished rapidly. These goals are achieved by providing user threads which multiplex on a pool of kernel-supported threads of control. This pool is managed by the library and will automatically grow or shrink as required to ensure that the process will make progress while not using an excessive amount of kernel resources. The programmer can also tune the relationship between threads and kernel supported threads of control. This paper focuses on scheduling and synchronizing user threads, and their interaction with UNIX signals in a multiplexing threads library. 
Abstract-found: 1
Intro-found: 1
Reference: [Cooper 1990] <author> E.C. Cooper, </author> <title> R.P. Draves, ``C Threads'', </title> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: Similarly, threads may also be created, destroyed, blocked, activated, etc., without operating system involvement. LWPs are relatively much more expensive than threads since each one uses dedicated kernel resources. If the threads library dedicated an LWP to each thread as in <ref> [Cooper 1990] </ref> then many applications such as data bases or window systems could not use threads freely (e.g. one or more per client) or they would be inefficient.
Reference: [Eykholt 1992] <author> J.R. Eykholt, S.R. Kleiman, S. Bar-ton, R. Faulkner, A. Shivalingiah, M. Smith, D. Stein, J. Voll, M. Weeks, D. Williams, </author> <title> ``Beyond Multiprocessing ... Multithreading the System V Release 4 Kernel'', </title> <booktitle> Proc. 1992 USENIX Summer Conference. </booktitle>
Reference-contexts: These goals are achieved by providing user threads which multiplex on a pool of kernel-supported threads of control. The implementation consists of a threads library and a kernel that has been modified to support multiple threads of control within a single UNIX process <ref> [Eykholt 1992] </ref>. The paper contains 7 sections: The first section is an overview of the threads model exported by the library. The second section is an overview of the threads library architecture. Readers familiar with the SunOS Multi-thread Architecture [Powell 1991] can skip the first two sections. <p> They share most of the process resources. Each LWP has a private set of registers and a signal mask. LWPs also have 3 Actually, the SunOS 5.0 kernel schedules kernel threads on top of processors. Kernel threads are used for the execution context underlying LWPs. See <ref> [Eykholt 1992] </ref>. 2 Summer '92 USENIX - June 8-June 12, 1992 - San Antonio, TX D. Stein, D. Shah Implementing Lightweight Threads attributes that are unavailable to threads. For example they have a kernel-supported scheduling class, virtual time timers, an alternate signal stack and a profiling buffer.
Reference: [Faulkner 1991] <author> R. Faulkner, R. Gomes, </author> <title> ``The Process File System and Process Model in UNIX System V'', </title> <booktitle> Proc. 1991 USENIX Winter Conference. </booktitle>
Reference: [Golub 1990] <author> D. Golub, R. Dean, A. Florin, R. Rashid, </author> <title> ``UNIX as an Application Program'', </title> <booktitle> Proc. 1990 USENIX Summer Conference, </booktitle> <pages> pp 87-95. </pages>
Reference: [Khanna 1992] <author> Sandeep Khanna, Michael Sebr ee, John Zolnowsky, </author> <title> ``Realtime Scheduling in SunOS 5.0'', </title> <booktitle> Proc. 1992 USENIX Winter Conference. </booktitle>
Reference: [POSIX 1992] <author> POSIX P1003.4a, </author> <title> ``Threads Extension for Portable Operating Systems'', </title> <publisher> IEEE. </publisher>
Reference-contexts: After program startup, the size of TLS is fixed and can no longer grow. This restricts programmatic dynamic linking (i.e., dlopen ()) to libraries that do not contain TLS. Because of these restrictions, thread-local storage is not an exported interface. Instead a programmatic interface called thread-specific data <ref> [POSIX 1992] </ref> is available. On SPARC, global register %g7 is assumed by the compiler to point to the base address of TLS. This is the same register used by the LWP private storage interfaces. The compiler generates code for TLS references relative to %g7.
Reference: [Powell 1991] <author> M.L. Powell, S.R. Kleiman, S. Bar-ton, D. Shah, D. Stein, M. Weeks, </author> <title> ``SunOS Multi-thread Architecture'', </title> <booktitle> Proc. 1991 USENIX Winter Conference. </booktitle>
Reference-contexts: The paper contains 7 sections: The first section is an overview of the threads model exported by the library. The second section is an overview of the threads library architecture. Readers familiar with the SunOS Multi-thread Architecture <ref> [Powell 1991] </ref> can skip the first two sections. The third section details the interfaces supplied by the kernel to support multiple threads of control within a single process. The fourth section details how the threads library schedules threads on kernel-supported threads of control. <p> The final section briefly describes a way to implement a debugger that understands threads. Threads Model A traditional UNIX process has a single thread of control. In the SunOS Multi-thread Architecture <ref> [Powell 1991] </ref>, there can be more than one thread of control, or simply more threads, that execute independently within a process. In general, the number or identities of threads that an application process applies to a problem are invisible from outside the process.
Reference: [Sha 1990] <author> Lui Sha, Ragunathan Rajkumar, John P. Lehoczky, </author> <title> ``Priority Inheritance Protocols: An Approach to Realtime Synchronization'', </title> <booktitle> Vol 39, </booktitle> <volume> No 9, </volume> <month> September </month> <year> 1990, </year> <booktitle> IEEE Transactions on Computers. 8 Summer '92 USENIX - June 8-June 12, </booktitle> <address> 1992 - San Antonio, TX D. </address> <note> Stein, </note> <author> D. </author> <title> Shah Implementing Lightweight Threads </title>

References-found: 8

