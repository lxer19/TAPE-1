URL: http://www.cs.pitt.edu/~tsamard/kr98.ps
Refering-URL: http://www.cs.pitt.edu/~tsamard/
Root-URL: 
Email: mus@ptolemy.arc.nasa.gov  pmorris@ptolemy.arc.nasa.gov  tsamard@cs.pitt.edu  
Title: Reformulating Temporal Plans For Efficient Execution  
Author: Nicola Muscettola Paul Morris Ioannis Tsamardinos 
Keyword: Space 1 Remote Agent experiment.  
Address: Moffett Field, CA 94035  Moffett Field, CA 94035  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Recom Technologies. NASA Ames Research Center  Caelum Research. NASA Ames Research Center  Intelligent Systems Program University of  
Abstract: The Simple Temporal Network formalism permits significant flexibility in specifying the occurrence time of events in temporal plans. However, to retain this flexibility during execution, there is a need to propagate the actual execution times of past events so that the occurrence windows of future events are adjusted appropriately. Unfortunately, this may run afoul of tight real-time control requirements that dictate extreme efficiency. The performance may be improved by restricting the propagation. However, a fast, locally propagating, execution controller may incorrectly execute a consistent plan. To resolve this dilemma, we identify a class of dis-patchable networks that are guaranteed to execute correctly under local propagation. We show that every consistent temporal plan can be reformulated as an equivalent dispatch-able network, and we present an algorithm that constructs such a network. Moreover, the constructed network is shown to have a minimum number of edges among all such networks. This algorithm will be flown on an autonomous spacecraft as part of the Deep 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. P. Bonasso, D. Kortenkamp, D. Miller, and M. Slack. </author> <title> Experiences with an architecture for intelligent, reactive agents. </title> <journal> JETAI, </journal> <volume> 9(1), </volume> <year> 1997. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
Reference: [2] <author> J. Bresina, M. Drummond, , and S. Kedar. </author> <title> Reactive, Integrated Systems Pose New Problems for Machine Learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Ma-teo, California, </address> <year> 1993. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
Reference: [3] <author> T. Carpenter, K. Driscoll, and K. Carciofini J. Hoyme. </author> <title> Arinc 659 scheduling: Problem definition. </title> <booktitle> In Proceedings of 1994 IEEE Real Time System Symposium. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: The speed of an execution algorithm is central to ensuring that a plan can be robustly executed in real-time, a condition of crucial importance in mission critical applications such as autonomous spacecraft operations [10] and avionics control systems <ref> [3] </ref>. Unlike fixed time schedules, temporally flexible plans allow an executive to seamlessly adjust to delays and fluctuations of task durations. However, the cost of this flexibility is that the executive must constantly adjust the plan during execution by performing some amount of constraint propagation.
Reference: [4] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT press, </publisher> <address> Cam-bridge, MA, </address> <year> 1990. </year>
Reference-contexts: It has been established [5] that finding the ranges of execution times for each event, the event's time bounds, is equivalent to solving two single-source shortest-path problems <ref> [4] </ref> on a simple transformation of the STN graph.
Reference: [5] <author> R. Dechter, I Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 61-95, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: We assume that the plan contains no disjunctive bound-constraints between two events, i.e., the graph of events and bound-constraints is a Simple Temporal Network (STN) in the sense of Dechter, Meiri and Pearl <ref> [5] </ref>. Without loss of generality, we also assume that the STN graph is connected. We concentrate on the process through which the executive selects individual events and executes them, i.e., assigns to them a specific time of occurrence that is consistent with the overall plan. It has been established [5] that <p> Pearl <ref> [5] </ref>. Without loss of generality, we also assume that the STN graph is connected. We concentrate on the process through which the executive selects individual events and executes them, i.e., assigns to them a specific time of occurrence that is consistent with the overall plan. It has been established [5] that finding the ranges of execution times for each event, the event's time bounds, is equivalent to solving two single-source shortest-path problems [4] on a simple transformation of the STN graph. <p> If we assume that event A always occurs at time 0, events B and C will initially obtain time bounds h1; 10i and h0; 9i respectively. (Recall from <ref> [5] </ref> that the lower bound for a node is computed as the negation of the shortest-path distance from the node to the time origin, while the upper bound is simply the shortest-path distance from the origin to the node.) Suppose now that the current time is 5, but tasks BD and <p> The first result is useful for simplifying the local propagation required in a dispatching execution. Recall <ref> [5] </ref> that in an STN distance graph, the upper bounds of timepoints are propagated in the forward direction of edges, whereas lower bounds are transmitted in the reverse direction. <p> In the remainder of the paper, unless stated to the contrary, it is convenient to use the term execution to mean dispatching execution. We next investigate what is needed to obtain dispatch-able networks. Recall that any STN can be rewritten as an All-Pairs shortest-path network (called the d-graph in <ref> [5] </ref>). We have the following. Theorem 2 Every All-Pairs shortest-path network is dispatchable. Although the All-Pairs network is dispatchable, it has some obvious disadvantages. In particular, the prop agation at each node requires time proportional to n, the number of nodes, in every case. Fortunately, we can do better. <p> the properties of the dominates relations (Definition 1) we see that an all-pair shortest path network can give rise to a number of "minimal" dispatchable networks, where minimality means that the filtered network has a minimal number of edges. (Not to be confused with the "tightness" minimality property defined in <ref> [5] </ref>.) We now wish to show that all of these have the same number of edges. An example of a partial order structure induced by dominates is shown in Figure 4. Each set DOMi corresponds to an equivalence class for the dominates relation. <p> Theorem 2 Every All-Pairs shortest-path network is dispatchable. Proof: First we show that a full-propagating execution controller that respects the enablement conditions cannot generate an inconsistency. The theory of Sim ple Temporal Networks <ref> [5] </ref> guarantees that any locally consistent assignment can be extended to a global one. This means that (full) propagation during execution will not reduce any timepoint's bounds to the empty set.
Reference: [6] <author> Brian Drabble, Austin Tate, and Jeff Dalton. </author> <title> O-plan project evaluation experiments and results. </title> <note> Oplan Technical Report ARPA-RL/O-Plan/TR/23 Version 1, AIAI, </note> <month> July </month> <year> 1996. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
Reference: [7] <author> N. Muscettola, P. Morris, B. Pell, and B. Smith. </author> <title> Issues in temporal reasoning for autonomous control systems. </title> <editor> In F. Anger, editor, </editor> <booktitle> Working Notes from the 1997 AAAI workshop on Spatial and Temporal Reasoning, </booktitle> <year> 1997. </year> <note> available at http://ic-www.arc.nasa.gov/ic/projects/Executive/papers/aaai97-temporal.ps. </note>
Reference-contexts: The time spent doing this propagation adds to the total time needed to start or end any task in the plan. The latter time is equivalent to the intrinsic time uncertainty on the exact time of occurrence of any event in the plan <ref> [7, 8] </ref>. The more precise we want the execution of a plan to be, the less propagation an execution algorithm should perform.
Reference: [8] <author> N. Muscettola and B. Pell. </author> <title> Real-time execution of temporal plans. </title> <note> Technical Report in preparation, </note> <institution> Computational Sciences Division, NASA Ames Research, </institution> <year> 1997. </year>
Reference-contexts: The time spent doing this propagation adds to the total time needed to start or end any task in the plan. The latter time is equivalent to the intrinsic time uncertainty on the exact time of occurrence of any event in the plan <ref> [7, 8] </ref>. The more precise we want the execution of a plan to be, the less propagation an execution algorithm should perform.
Reference: [9] <author> David Musliner, Ed Durfee, and Kang Shin. </author> <title> Circa: A cooperative, intelligent, real-time control architecture. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
Reference: [10] <author> B. Pell, D. E. Bernard, S.A. Chien, E. Gat, N. Muscettola, P. P. Nayak, M.D. Wagner, and B.C. Williams. </author> <title> An autonomous spacecraft agent prototype. </title> <booktitle> Autonomous Robotics, </booktitle> <publisher> forthcoming, </publisher> <year> 1997. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm. <p> The speed of an execution algorithm is central to ensuring that a plan can be robustly executed in real-time, a condition of crucial importance in mission critical applications such as autonomous spacecraft operations <ref> [10] </ref> and avionics control systems [3]. Unlike fixed time schedules, temporally flexible plans allow an executive to seamlessly adjust to delays and fluctuations of task durations. However, the cost of this flexibility is that the executive must constantly adjust the plan during execution by performing some amount of constraint propagation. <p> Notice that the final STN contains one less time-bound edge than the starting network in figure 1. The algorithm described in Section 5 already has a practical application. It is being used in the New Millennium Remote Agent <ref> [10] </ref>, a control architecture that will operate autonomously the Deep Space 1 (DS1) spacecraft in a 6 day experiment scheduled for October 1998. Table 1 summarizes the experimental results on the three plans that will be nominally generated and executed during the experiment.
Reference: [11] <author> Reid Simmons. </author> <title> An architecture for coordinating planning, sensing, and action. In Procs. DARPA Workshop on Innovative Approaches to Planning, </title> <journal> Scheduling and Control, </journal> <pages> pages 292-297, </pages> <address> San Ma-teo, CA, </address> <year> 1990. </year> <title> DARPA, </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
Reference: [12] <author> T. Vidal and M. Ghallab. </author> <title> Dealing with uncertain durations in temporal constraint networks dedicated to planning. </title> <booktitle> In Proc. of 12th European Conference on Artificial Intelligence (ECAI-96), </booktitle> <pages> pages 48-52, </pages> <year> 1996. </year>
Reference-contexts: Note that the flexible wait in step 6 provides some room for responding to unmodeled external contingencies. This can include unexpected events (in contrast to work that deals with anticipated uncontrollable events <ref> [12] </ref>). Step 5 is a precise formulation of the enablement requirement that prevents execution of a node until all its enabling nodes have first been executed. Note that with this formulation a deadlock situation cannot occur, since in a consistent distance graph there are no negative cycles.
Reference: [13] <author> D. E. Wilkins, K. L. Myers, J. D. Lowrance, and L. P. Wesley. </author> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> JETAI, </journal> <volume> 7(1) </volume> <pages> 197-227, </pages> <year> 1995. </year>
Reference-contexts: The control system can guarantee a correct execution only if specified time constraints are satisfied for any possible execution. We are interested in the class of high-level control architectures that distinguish between a deliberative layer, or planner, and a reactive layer, or executive <ref> [10, 1, 13, 6, 11, 9, 2] </ref>. This paper is concerned with the properties that must be satisfied by temporally flexible plans in order to be correctly executed by a simplified, fast execution algorithm.
References-found: 13

