URL: ftp://ftp.cs.washington.edu/tr/1995/11/UW-CSE-95-11-06.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: An Overview of Compiler Techniques for Interprocedural Array Section Analysis  
Author: Sung-Eun Choi 
Address: Box 352350 Seattle, WA 98195-2350 USA  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 95-11-06 November 1995 Abstract Dependence analysis of arrays is crucial in the compilation of parallel applications, as an inaccurate summary of array usage may reduce the potential for optimizations. Standard scalar techniques are inadequate for they do not accommodate specific accesses to arrays. Array section analysis describes accesses to arrays at a finer granularity than the scalar techniques. More precisely, array section analysis techniques summarize a collection of accesses to a specific array in a procedure. In this paper, we present a summary of existing array section analysis techniques for interprocedural dependence analysis. We identify and compare two classes of such techniques and give suggestions for improving the techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Balasundaram. </author> <title> A mechanism for keeping useful internal information in parallel program ming tools: The data access descriptor. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9 </volume> <pages> 154-170, </pages> <year> 1990. </year>
Reference-contexts: H 1 = fi 1 0; i 1 ub; i 2 0; i 2 i 1 g H 1 [2 = fi 1 0; i 1 ub; i 2 0; i 2 ub; i 1 ( ub f 1 12 Simple Sections. Balasundaram and Kennedy <ref> [1, 2] </ref> exploit the observation that accesses to arrays usually occur in simple, mathematically describable entities. A simple section is any section of the space that can be described by a set of simple boundaries.
Reference: [2] <author> V. Balasundaram and K. Kennedy. </author> <title> A technique for summarizing data access and its use in parallelism enhancing transformations. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 41-53, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: H 1 = fi 1 0; i 1 ub; i 2 0; i 2 i 1 g H 1 [2 = fi 1 0; i 1 ub; i 2 0; i 2 ub; i 1 ( ub f 1 12 Simple Sections. Balasundaram and Kennedy <ref> [1, 2] </ref> exploit the observation that accesses to arrays usually occur in simple, mathematically describable entities. A simple section is any section of the space that can be described by a set of simple boundaries.
Reference: [3] <author> M. Burke and R. Cytron. </author> <title> Interprocedural dependence analysis and parallelization. </title> <booktitle> In Pro ceedings of the ACM SIGPLAN Symposium on Compiler Construction, </booktitle> <pages> pages 162-175, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Dependence is often called intersection because we are checking if the solution set of f intersects with that of g. 1 We refer the reader to other sources for discussion of several standard dependence tests <ref> [3, 8, 14, 19] </ref>. 4 Array section analysis is complicated by procedure calls. Any implementation of interprocedural dependence analysis requires some knowledge of the array accesses made by a call to a particular procedure. <p> The exact tests determine the existence of exact integer solutions to the equations involved in the dependence test. Exact tests are complicated, and as a result, implementations of these tests generally handle very specific and well structured loops and indexing expressions <ref> [3] </ref>. The inexact tests are less precise and are thus sufficient but not neccessary in determining dependence. Shape-based schemes use the geometric properties of array sections for union and intersection. <p> Intersection Operation. For the standard schemes, the amount of information available, in terms of , affects the types of standard dependence tests employable. The implementations of exact tests can be unrealistic, while inexact tests are less precise. Linearization <ref> [3] </ref> has been proposed to increase the precision of standard dependence tests by ensuring simultaneity of the index expression. For certain standard dependence tests, an dimension-by-dimension comparison may show dependence between two references, when in fact the accesses are independent due to another dimension's index function.
Reference: [4] <author> D. Callahan. </author> <title> A Global Approach to Detection of Parallelism. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> March </month> <year> 1987. </year> <month> 22 </month>
Reference-contexts: Regular sections are motivated by observing the common case. Most array accesses do not require the expressibility offered by Li and Yew's atoms. Originally proposed by Callahan <ref> [4] </ref>, regular sections have undergone a few evolutionary changes. Restricted regular sections [5] can represent accesses to rows, columns and diagonals, and their higher dimension equivalents. Bounded regular sections [9], while disallowing the diagonal, consider bounds and stride information. Both are completely condensed multi-site summaries.
Reference: [5] <author> D. Callahan and K. Kennedy. </author> <title> Analysis of interprocedural side effects in a parallel programming environment. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 5(5) </volume> <pages> 517-550, </pages> <year> 1988. </year>
Reference-contexts: This scalar approximation may be insufficient due to the nature of procedures in scientific array codes. Procedures are often used to perform specific computation on regular slices of arrays such as rows, columns, diagonals and triangles. Approximating all accesses to an array by the entire array can limit optimization <ref> [5] </ref>. Solutions that lie between scalar approximation and the exact method may better fit the needs of scientific applications for which array optimizations are necessary. <p> Regular sections are motivated by observing the common case. Most array accesses do not require the expressibility offered by Li and Yew's atoms. Originally proposed by Callahan [4], regular sections have undergone a few evolutionary changes. Restricted regular sections <ref> [5] </ref> can represent accesses to rows, columns and diagonals, and their higher dimension equivalents. Bounded regular sections [9], while disallowing the diagonal, consider bounds and stride information. Both are completely condensed multi-site summaries. Restricted regular sections are represented by the index expressions, .
Reference: [6] <author> K. D. Cooper, M. W. Hall, and L. Torczon. </author> <title> Unexpected side effects of inline substitution: A case study. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 1(1) </volume> <pages> 22-32, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: After expansion, array accesses can be analyzed as in the intraprocedural case. Unfortunately, inline expansion is expensive for all but very small or infrequently called procedures. In fact, even in such cases, inline expansions can give unexpected results <ref> [6] </ref>. In particular, inlined procedures increase code size and compile time. The procedure body is inserted at each call site and that same code must be optimized at these call sites. The code explosion caused by inlining is particularly expensive when the program's call graph is very deep.
Reference: [7] <author> J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. Stewart. </author> <title> LINPACK: user's guide. </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, Pennsylvania, </address> <year> 1979. </year>
Reference-contexts: Consequently, techniques whose behavior varies with d are preferred over those whose behavior varies with m. Experimental Results. The atoms, bounded regular sections and convex hull techniques were each used to detect parallelizable loops in the presence of procedure calls in Linpack, a library of linear algebra routines <ref> [7] </ref>. Of 99 loops containing procedure calls, 27 are parallelizable. The scalar approximation technique is only able to recognize 9 of the loops as parallelizable while each of the three techniques 3 are able to detect all 27. The Linpack benchmark consists primarily of basic linear algebra subroutines, or BLAS.
Reference: [8] <author> G. Goff, K. Kennedy, and C.-W. Tseng. </author> <title> Practical dependence testing. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <volume> volume 26, </volume> <pages> pages 15-29, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Dependence is often called intersection because we are checking if the solution set of f intersects with that of g. 1 We refer the reader to other sources for discussion of several standard dependence tests <ref> [3, 8, 14, 19] </ref>. 4 Array section analysis is complicated by procedure calls. Any implementation of interprocedural dependence analysis requires some knowledge of the array accesses made by a call to a particular procedure.
Reference: [9] <author> P. Havlak and K. Kennedy. </author> <title> An implementation of interprocedural bounded regular section analysis. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(3), </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: Most array accesses do not require the expressibility offered by Li and Yew's atoms. Originally proposed by Callahan [4], regular sections have undergone a few evolutionary changes. Restricted regular sections [5] can represent accesses to rows, columns and diagonals, and their higher dimension equivalents. Bounded regular sections <ref> [9] </ref>, while disallowing the diagonal, consider bounds and stride information. Both are completely condensed multi-site summaries. Restricted regular sections are represented by the index expressions, . Each expression, i , is either a constant or procedure invariant, ff, or an index expression of the form i j + ff.
Reference: [10] <author> C. A. Huson. </author> <title> An in-line subroutine expander for parafrase. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> January </month> <year> 1983. </year>
Reference-contexts: Arrays are actually collections of scalar variables. Summarizing accesses to arrays implies comprehending the collection of accesses for each procedure called. One solution to the problem of summarizing accesses in procedure calls is to use inline expansion <ref> [10, 15] </ref>. Inline expansion simply replaces the call to a procedure with the procedure body itself. After expansion, array accesses can be analyzed as in the intraprocedural case. Unfortunately, inline expansion is expensive for all but very small or infrequently called procedures.
Reference: [11] <author> Z. Li and P.-C. Yew. </author> <title> Efficient interprocedural analysis for program parallelization and restruc turing. </title> <booktitle> In Proceedings of ACM SIGPLAN Symposium on Parallel Programming: Experience with Applications, Languages, and Systems, </booktitle> <pages> pages 85-99, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Standard dependence tests can be interchanged for different levels of accuracy and cost, and thus are treated as invariants in our comparison. Atoms. Li and Yew <ref> [11, 12, 13] </ref> use a data structure called an atom for single-site summaries. The multi-site summary is simply a list of atoms; in other words, it is a simple multi-site summary.
Reference: [12] <author> Z. Li and P.-C. Yew. </author> <title> Interprocedural analysis and program restructuring for parallel progams. </title> <type> Technical Report CSRD Report No. 720, </type> <institution> University of Illinois at Urbana-Champaign, Urbana, Illinois, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: Standard dependence tests can be interchanged for different levels of accuracy and cost, and thus are treated as invariants in our comparison. Atoms. Li and Yew <ref> [11, 12, 13] </ref> use a data structure called an atom for single-site summaries. The multi-site summary is simply a list of atoms; in other words, it is a simple multi-site summary.
Reference: [13] <author> Z. Li and P.-C. Yew. </author> <title> Interprocedural analysis for parallel computing. </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <volume> volume 2, </volume> <pages> pages 221-228, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Standard dependence tests can be interchanged for different levels of accuracy and cost, and thus are treated as invariants in our comparison. Atoms. Li and Yew <ref> [11, 12, 13] </ref> use a data structure called an atom for single-site summaries. The multi-site summary is simply a list of atoms; in other words, it is a simple multi-site summary.
Reference: [14] <author> D. A. Padua and M. J. Wolfe. </author> <title> Advanced compiler optimizations for supercomputers. </title> <journal> Com munications of the ACM, </journal> <volume> 29(12) </volume> <pages> 1184-1201, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: The loop induction variables are expected to index into the array and help describe the section. Hence, additional information about the access may be secured from loop bounds and stride information. Intraprocedural dependence analysis of array sections is a well studied problem <ref> [14, 18] </ref>. Consider the following: A f () = : : : Determining whether a dependence exists from the assignment of A f () to the use of A g () requires knowledge about the array indexing functions f and g. <p> Dependence is often called intersection because we are checking if the solution set of f intersects with that of g. 1 We refer the reader to other sources for discussion of several standard dependence tests <ref> [3, 8, 14, 19] </ref>. 4 Array section analysis is complicated by procedure calls. Any implementation of interprocedural dependence analysis requires some knowledge of the array accesses made by a call to a particular procedure.
Reference: [15] <author> R. W. Scheifler. </author> <title> An analysis of inline substitution for a structured programming language. </title> <journal> Communications of the ACM, </journal> <volume> 20(9) </volume> <pages> 647-654, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: Arrays are actually collections of scalar variables. Summarizing accesses to arrays implies comprehending the collection of accesses for each procedure called. One solution to the problem of summarizing accesses in procedure calls is to use inline expansion <ref> [10, 15] </ref>. Inline expansion simply replaces the call to a procedure with the procedure body itself. After expansion, array accesses can be analyzed as in the intraprocedural case. Unfortunately, inline expansion is expensive for all but very small or infrequently called procedures.
Reference: [16] <author> Z. Shen, Z. Li, and P.-C. Yew. </author> <title> An empirical study on array subscripts and data dependencies. </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages 145-152, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Table 3 says nothing about the variables used within it. The first observation is that d, the rank of the array, is generally small. Expressing problems in three dimensions or less is very natural to us because we live in a three dimension world. More concretely, Shen et al. <ref> [16] </ref> studied array access patterns over a suite of a dozen numerical packages. They found that, of the 18,549 array accesses in this suite, over 99% of them are to arrays of three or less dimensions. In fact, no arrays of rank greater than five are ever accessed.
Reference: [17] <author> R. Triolet, F. Irigoin, and P. Feautrier. </author> <title> Direct parallelization of call statements. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Compiler Construction, </booktitle> <pages> pages 176-185, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Array accesses often define geometric shapes in this space. While the intersection operation is exact for both techniques, the union operations may introduce areas which are not in either section involved in the union. Both techniques presented below are completely condensed summaries. Convex Hulls. Triolet et al. <ref> [17] </ref> suggests using the smallest convex regions covering the array accesses to describe the shape of the accesses. The convex hulls are described by regions and execution contexts. A region is simply the ordered set of index expressions, , and the execution context is the loop boundary conditions, B.
Reference: [18] <author> M. J. Wolfe. </author> <title> Optimizing Supercompilers for Supercomputers. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: The loop induction variables are expected to index into the array and help describe the section. Hence, additional information about the access may be secured from loop bounds and stride information. Intraprocedural dependence analysis of array sections is a well studied problem <ref> [14, 18] </ref>. Consider the following: A f () = : : : Determining whether a dependence exists from the assignment of A f () to the use of A g () requires knowledge about the array indexing functions f and g.
Reference: [19] <author> A. Yazici and T. Terziogul. </author> <title> A comparison of data dependence analysis tests. </title> <booktitle> Parallel Computing and Transputer Applications, </booktitle> <volume> 1 </volume> <pages> 575-583, </pages> <month> September </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: Dependence is often called intersection because we are checking if the solution set of f intersects with that of g. 1 We refer the reader to other sources for discussion of several standard dependence tests <ref> [3, 8, 14, 19] </ref>. 4 Array section analysis is complicated by procedure calls. Any implementation of interprocedural dependence analysis requires some knowledge of the array accesses made by a call to a particular procedure.
References-found: 19

