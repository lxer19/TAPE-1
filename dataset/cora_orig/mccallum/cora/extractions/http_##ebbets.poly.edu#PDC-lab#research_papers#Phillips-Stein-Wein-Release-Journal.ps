URL: http://ebbets.poly.edu/PDC-lab/research_papers/Phillips-Stein-Wein-Release-Journal.ps
Refering-URL: http://ebbets.poly.edu/PDC-lab/wein.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Minimizing Average Completion Time in the Presence of Release Dates  
Author: Cynthia Phillips Clifford Stein Joel Wein 
Date: September 4, 1996  
Abstract: A natural and basic problem in scheduling theory is to provide good average quality of service to a stream of jobs that arrive over time. In this paper we consider the problem of scheduling n jobs that are released over time in order to minimize the average completion time of the set of jobs. In contrast to the problem of minimizing average completion time when all jobs are available at time 0, all the problems that we consider are N P-hard, and essentially nothing was known about constructing good approximations in polynomial time. We give the first constant-factor approximation algorithms for several variants of the single and parallel machine model. Many of the algorithms are based on interesting algorithmic and structural relationships between preemptive and nonpreemptive schedules and linear programming relaxations of both. Many of the algorithms generalize to the minimization of average weighted completion time as well.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Baker. </author> <title> Introduction to Sequencing and Scheduling. </title> <publisher> Wiley, </publisher> <year> 1974. </year>
Reference-contexts: We apply this conversion algorithm to the problem 1jr j j P C j . This problem is N P-hard [17]; we give a simple 2-approximation algorithm for it, which works by transforming the optimal preemptive schedule for the problem, which can be found in polynomial time <ref> [1] </ref>. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm [20]. <p> P C j Nonpreempt. P w j C j Preempt. P C j Preempt. P One machine 2 16 + * 1 <ref> [1] </ref> 8 + * Identical 6 24 + * 2 8 + * unrelated O (log 2 n)[20] O (log 2 n)[20] 8 + * 8 + * an arbitrarily small constant. rithm for Rjpmtnj P C j . <p> It is well known how to solve, in polynomial time, 1jr j ; pmtnj P C j using the shortest processing time rule: always be processing the job with the shortest remaining processing time <ref> [1] </ref>.
Reference: [2] <author> J.L. Bruno, E.G. Coffman, and R. Sethi. </author> <title> Scheduling independent tasks to reduce mean finishing time. </title> <journal> Communications of the ACM, </journal> <volume> 17 </volume> <pages> 382-387, </pages> <year> 1974. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We then turn to parallel identical machines. McNaughton [18] showed that for P jpmtnj P preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem <ref> [2, 11] </ref> solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [5]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [14].
Reference: [3] <author> S. Chakrabarti, C. Phillips, A. Schulz, D.B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved scheduling algorithms for minsum criteria. </title> <booktitle> In Proceedings of the 1996 ICALP Conference, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The particular generalization of matching, the rounding techniques, and the quality of approximation achieved, however, are quite different. Subsequent to our work, Hall, Schulz, Shmoys and Wein [8], and Chakrabarti, Phillips, Schulz, Shmoys, Stein and Wein <ref> [3] </ref> have given new approximation algorithms with performance guarantees that improve upon several of those proved in this paper. Many of their results can be viewed as building upon the basic ideas in this paper. <p> Thus for job J j 0 , C N j 0 , which, for large m approaches a ratio of 3. Corollary 2.5 is not tight, and in fact has recently been improved by Chakrabarti, Phillips, Schulz, Shmoys, Stein and Wein to 7 3 <ref> [3] </ref>. 2.4 Fractional Schedules Define a fractional preemptive schedule as one in which a job J j can be scheduled simultaneously with several other jobs on one machine, where each job receives some fraction of the machine's resources and the sum of all the fractions assigned to a machine at any
Reference: [4] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: We will make use of a data structure called a min-max heap. A min-max heap is a data structure that supports insert, find-min, delete-min, find-max and delete-max. It is a simple exercise <ref> [4] </ref> to create a min-max heap using two traditional heaps, so that all operations run, in the worst case, in O (log n) time. 11 We will use two min-max heaps H 1 and H 2 and maintain, at all times, a current time.
Reference: [5] <author> J. Du, J.Y.T. Leung, and G.H Young. </author> <title> Minimizing mean flow time with release time constraint. </title> <journal> Theoretical Computer Science, </journal> <volume> 75, </volume> <year> 1990. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> McNaughton [18] showed that for P jpmtnj P preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem [2, 11] solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard <ref> [5] </ref>. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [14]. To the best of our knowledge, nothing was known about approximation algorithms for any version of these problems. <p> The nonpreemptive versions of these problems are N P-hard due to the N P-hardness of the one-machine problem. When preemption is allowed, as noted, the one machine problem is solvable in polynomial-time, using the shortest processing time rule, but the scheduling of even two identical machines is N P-hard <ref> [5] </ref>. In this section we first give a 2-approximation algorithm for P jr j ; pmtnj P C j . The algorithm is the multiple-machine generalization of the one-machine algorithm: always be running the m jobs with the shortest remaining amount of work.
Reference: [6] <author> T. Gonzalez and S. Sahni. </author> <title> Open shop scheduling to minimize finish time. </title> <journal> Journal of the ACM, </journal> <volume> 23 </volume> <pages> 665-679, </pages> <year> 1976. </year>
Reference-contexts: We can accomplish this by an application of open shop theory <ref> [6, 16] </ref>. In the open-shop scheduling environment each job is made up of a number of operations, and each operation must be scheduled on a specific one of m machines; no two operations of one job may be scheduled simultaneously. <p> The O ijt define an open-shop problem for each unit of time; O ijt is J j 's operation on machine M i . Using a result of Gonzales and Sahni <ref> [6] </ref>, we can create a preemptive schedule with at most m 4 preemptions per processor , with length maxfmax j 0 P P which by constraints (5) and (6) is at most 1. Thus the jobs can be scheduled in the time unit to which they are assigned.
Reference: [7] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approx-imation in deterministic sequencing and scheduling: a survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: Since there are a number of scheduling models considered in this paper, it will be convenient to refer to them in the notation of Graham, Lawler, Lenstra, & Rinnooy Kan (1979) <ref> [7] </ref>.
Reference: [8] <author> L. A. Hall, A.S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line algorithm. </title> <note> Joint journal version of [11] and [17]; in preparation. </note>
Reference-contexts: The particular generalization of matching, the rounding techniques, and the quality of approximation achieved, however, are quite different. Subsequent to our work, Hall, Schulz, Shmoys and Wein <ref> [8] </ref>, and Chakrabarti, Phillips, Schulz, Shmoys, Stein and Wein [3] have given new approximation algorithms with performance guarantees that improve upon several of those proved in this paper. Many of their results can be viewed as building upon the basic ideas in this paper.
Reference: [9] <author> D.S. Hochbaum and D.B. Shmoys. </author> <title> A polynomial approximation scheme for machine scheduling on uniform processors: using the dual approximation approach. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 539-551, </pages> <year> 1988. </year>
Reference-contexts: One technique for dealing with jobs of greatly varying processing times is to partition the jobs into classes, in which each class contains jobs of similar size. In both the current best approximation algorithms for minimizing makespan on parallel machines <ref> [9] </ref>, and minimizing makespan in a job shop [21], jobs are partitioned into two classes, "big" and "small." These algorithms first schedule the large jobs, which are scaled to be in a polynomially-bounded range, and then schedule the small jobs in a different manner and show that their net contribution is
Reference: [10] <author> J.A. Hoogeveen and A.P.A. Vestjens. </author> <title> Optimal on-line algorithms for single-machine scheduling. </title> <booktitle> In Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 404-414, </pages> <year> 1996. </year>
Reference-contexts: Many of their results can be viewed as building upon the basic ideas in this paper. Also subsequent to our work, Stougie [23] and Hoogeveen and Vestjens <ref> [10] </ref> gave different on-line 2-approximation algorithms for 1jr j j P C j ; in addition they improved the lower bound on on-line scheduling from 3 2 to 2. <p> Hoogeveen and Vestjens <ref> [10] </ref> and Stougie [23] have recently improved this lower bound for on-line algorithms to 2, which implies our algorithm is, in the worst case, an optimal on-line algorithm. 4 Minimizing P C j on Identical Parallel Machines We now turn to the problem of scheduling jobs with release dates on parallel
Reference: [11] <author> W. Horn. </author> <title> Minimizing average flow time with parallel machines. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 846-847, </pages> <year> 1973. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We then turn to parallel identical machines. McNaughton [18] showed that for P jpmtnj P preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem <ref> [2, 11] </ref> solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [5]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [14].
Reference: [12] <author> T. Kawaguchi and S. Kyan. </author> <title> Worst case bound of an LRF schedule for the mean weighted flow-time problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 </volume> <pages> 1119-1129, </pages> <year> 1986. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [13] <author> H. Kellerer, T. Tautenhahn, and G. J. Woeginger. </author> <title> Approximability and nonapproximability results for minimizing total flow time on a single machine. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Although average flow time is equivalent to average completion time at optimality, Kellerer, Tautenhahn and Woeginger have shown that the approximability of these two criteria can be quite different <ref> [13] </ref>. 2 Converting Preemptive Schedules to Nonpreemptive Sched ules In this section we give an algorithm that converts preemptive schedules into nonpreemptive schedules while increasing the total (weighted) completion time by at most a constant factor.
Reference: [14] <author> J. Labetoulle, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Preemptive scheduling of uniform machines subject to release dates. </title> <editor> In W.R. Pulleyblank, editor, </editor> <booktitle> Progress in Combinatorial Optimization, </booktitle> <pages> pages 245-261. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> When release dates are introduced, however, even the two machine problem becomes N P-hard [5]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard <ref> [14] </ref>. To the best of our knowledge, nothing was known about approximation algorithms for any version of these problems. We give a combinatorial 2-approximation algorithm for P jr j ; pmtnj P C j . This algorithm is the natural m-machine generalization of the shortest processing time rule.
Reference: [15] <author> T. C. Lai, </author> <type> Personal communication. </type> <month> May, </month> <year> 1995. </year>
Reference-contexts: Recently, T.C. Lai has given a slightly stronger lower bound of 18 13 <ref> [15] </ref>. 2.3 Parallel Identical Machines In this section we analyze the application of algorithm Convert to parallel identical machines.
Reference: [16] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: We will focus both on the one machine (m = 1) environment and two fundamental variants of parallel machine scheduling. In the identical parallel machine environment, job J j runs in time p j on every machine <ref> [16] </ref>. <p> characterize how fast job J j runs on machine M i , and p ij , the processing time of job J j on machine M i , is defined to be p ij = p j =s ij , and thus depends on both the machine and the job <ref> [16] </ref>. We will give algorithms for both preemptive and nonpreemptive scheduling models. In non-preemptive scheduling, once a job begins running on a machine, it must run uninterruptedly to completion, while in preemptive scheduling a job that is running can be preempted and continued later on any machine. <p> It is not known if this problem is N P-hard; Lawler, Lenstra, Rinnooy-Kan and Shmoys <ref> [16] </ref> state, "Very little is known about this problem ... it remains one of the more vexing questions in the area of preemptive scheduling." Previous Work: The only prior work we know of that gives approximation algorithms for these problems is [20] which gives O (log 2 n)-approximation algorithms for the <p> We can accomplish this by an application of open shop theory <ref> [6, 16] </ref>. In the open-shop scheduling environment each job is made up of a number of operations, and each operation must be scheduled on a specific one of m machines; no two operations of one job may be scheduled simultaneously.
Reference: [17] <author> J.K. Lenstra, A.H.G. Rinnooy Kan, and P. Brucker. </author> <title> Complexity of machine scheduling problems. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We apply this conversion algorithm to the problem 1jr j j P C j . This problem is N P-hard <ref> [17] </ref>; we give a simple 2-approximation algorithm for it, which works by transforming the optimal preemptive schedule for the problem, which can be found in polynomial time [1]. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm [20].
Reference: [18] <author> R. McNaughton. </author> <title> Scheduling with deadlines and loss functions. </title> <journal> Management Science, </journal> <volume> 6 </volume> <pages> 1-12, </pages> <year> 1959. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> Our algorithm can be modified slightly to be on-line; we show as well that it is close to an optimal on-line scheduler, by showing that any on-line scheduling algorithm for the problem must be at least a 3 2 -approximation algorithm. We then turn to parallel identical machines. McNaughton <ref> [18] </ref> showed that for P jpmtnj P preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem [2, 11] solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [5].
Reference: [19] <author> R. Motwani, S. Phillips, and E. Torng. </author> <title> Non-clairvoyant scheduling. </title> <booktitle> In Proceedings of the 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 422-431, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [20] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Task scheduling in networks. </title> <booktitle> In Proceedings of Fourth Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 290-301, </pages> <year> 1994. </year>
Reference-contexts: This problem is N P-hard [17]; we give a simple 2-approximation algorithm for it, which works by transforming the optimal preemptive schedule for the problem, which can be found in polynomial time [1]. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm <ref> [20] </ref>. Our algorithm can be modified slightly to be on-line; we show as well that it is close to an optimal on-line scheduler, by showing that any on-line scheduling algorithm for the problem must be at least a 3 2 -approximation algorithm. We then turn to parallel identical machines. <p> problem is N P-hard; Lawler, Lenstra, Rinnooy-Kan and Shmoys [16] state, "Very little is known about this problem ... it remains one of the more vexing questions in the area of preemptive scheduling." Previous Work: The only prior work we know of that gives approximation algorithms for these problems is <ref> [20] </ref> which gives O (log 2 n)-approximation algorithms for the nonpreemptive versions of the problems, as a special case of a very general theorem.
Reference: [21] <author> D. B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for shop scheduling problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 617-632, </pages> <month> June </month> <year> 1994. </year> <month> 21 </month>
Reference-contexts: One technique for dealing with jobs of greatly varying processing times is to partition the jobs into classes, in which each class contains jobs of similar size. In both the current best approximation algorithms for minimizing makespan on parallel machines [9], and minimizing makespan in a job shop <ref> [21] </ref>, jobs are partitioned into two classes, "big" and "small." These algorithms first schedule the large jobs, which are scaled to be in a polynomially-bounded range, and then schedule the small jobs in a different manner and show that their net contribution is not significant.
Reference: [22] <author> W.E. Smith. </author> <title> Various optimizers for single-stage production. </title> <journal> Naval Research Logistics Quar--terly, </journal> <volume> 3 </volume> <pages> 59-66, </pages> <year> 1956. </year>
Reference-contexts: At times we will associate with J j a nonnegative weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 5, 11, 12, 14, 17, 18, 19, 22] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [23] <author> L. Stougie, </author> <year> 1995. </year> <type> Personal communication cited in [10]. 22 </type>
Reference-contexts: Many of their results can be viewed as building upon the basic ideas in this paper. Also subsequent to our work, Stougie <ref> [23] </ref> and Hoogeveen and Vestjens [10] gave different on-line 2-approximation algorithms for 1jr j j P C j ; in addition they improved the lower bound on on-line scheduling from 3 2 to 2. <p> Hoogeveen and Vestjens [10] and Stougie <ref> [23] </ref> have recently improved this lower bound for on-line algorithms to 2, which implies our algorithm is, in the worst case, an optimal on-line algorithm. 4 Minimizing P C j on Identical Parallel Machines We now turn to the problem of scheduling jobs with release dates on parallel machines, so as
References-found: 23

