URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/igpl96.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/papers.html
Root-URL: http://www.cs.ucl.ac.uk
Email: E-Mail: M.Fisher@doc.mmu.ac.uk  E-mail: fabh,rpog@doc.ic.ac.uk  E-mail: howard@cs.man.ac.uk  E-mail: dg@doc.ic.ac.uk  E-mail: graham@cs.man.ac.uk  E-mail: imh@doc.ic.ac.uk  E-mail: fmarkr,pjmg@dcs.kcl.ac.uk  E-mail: drb@doc.ic.ac.uk  
Title: Languages, Meta-languages and MetateM, A Discussion Paper  
Author: MICHAEL FISHER, ANTHONY HUNTER, RICHARD OWENS, DOV GABBAY, GRAHAM GOUGH, IAN HODKINSON, PETER MCBRIEN, MARK REYNOLDS, DEREK BROUGH, 
Address: Chester Street, Manchester M1 5GD, United Kingdom,  Gate, London SW7 2BZ, UK.  Manchester, Oxford Road, Manchester M13 9PL, UK.  College,  Manchester,  College,  Strand, London WC2R 2LS,  College,  
Affiliation: Department of Computing, Manchester Metropolitan University,  Department of Computing, Imperial College of Science, Technology and Medicine, 180 Queen's  HOWARD BARRINGER, Department of Computer Science, University of  Imperial  University of  Imperial  King's College, Dept of Computer Science, The  Imperial  
Abstract: Meta-languages are vital to the development and usage of formal systems, and yet the nature of meta-languages and associated notions require clarification. Here we attempt to provide a clear definition of the requirements for a language to be a meta-language, together with consideration of issues of proof theory, model theory and interpreters for such a language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Barringer, M. Fisher, D. Gabbay, G. Gough, and R. Owens. </author> <title> MetateM: A Framework for Programming in Temporal Logic. </title> <booktitle> In Proceedings of REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, Mook, </booktitle> <address> Netherlands, </address> <month> June </month> <year> 1989. </year> <booktitle> (Published in Lecture Notes in Computer Science, </booktitle> <volume> volume 430, </volume> <publisher> Springer Verlag). </publisher>
Reference-contexts: Here the system can be seen either as monolingual or amalgamated. This approach follows Perlis' work, but differs slightly by using implicit, rather than explicit, quoting. For details and examples of its use see <ref> [1] </ref>. The system can be seen either as monolingual or amalgamated. This approach follows Perlis' work, but differs slightly by using implicit, rather than explicit, quoting.
Reference: [2] <author> H. Barringer, M. Fisher, D. Gabbay and A. Hunter. </author> <title> Meta-reasoning in executable temporal logic. In Principles of Knowledge Representation and Reasoning (KR'91), </title> <editor> J. Allen, R. Fikes and E. </editor> <booktitle> Sandewall, </booktitle> <pages> pp. 40-49, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference: [3] <author> Nuel D. Belnap and Dorothy L. Grover. </author> <title> Quantifying In and Out of Quotes. </title> <booktitle> In Leblanc [13], </booktitle> <pages> pages 17-47. </pages>
Reference-contexts: Such quantification might be acceptable if the quoting mechanism was to be represented as a function, but Tarski has fundamental objections to such a scheme. Quine introduced such a quotation function and called the mechanism `quasi-quotation', as the quantification allowed inside such quotes is restricted. Belnap and Grover <ref> [3] </ref> develop such quoting further and give a comprehensive treatment of the meaning of quantifying within quotes.
Reference: [4] <author> K. A. Bowen and R. A. Kowalski. </author> <title> Amalgamating Language and Metalanguage in Logic Programming. </title> <editor> In K. L. Clark and S.-A. Tarnlund, editors, </editor> <booktitle> Logic Programming, volume 16 of A.P.I.C. Studies in Data Processing, </booktitle> <pages> pages 153-172. </pages> <publisher> Academic Press, Inc., </publisher> <year> 1982. </year>
Reference-contexts: If they are both logics, then we can say that the truth of a statement at the object-level can be directly affected by the truth of a different statement at the meta-level. Such statements are often termed reflection principles [8], [24], <ref> [4] </ref>, [20]. <p> As an example of the use of comprehension (or reflection) axioms, consider the amalgamated system described in <ref> [4] </ref>. Here, the naming of terms in the object-language L is carried out by quoting. Thus, if t is a term in L, then t is a term in M , the meta-language. <p> In particular, it provides an opportunity to extend the object language with the portion of the meta-language that deals with object-level provability relation. For logic programming, this was first explored by Bowen and Kowalski <ref> [4] </ref>. From a practical view-point, the utilisation of a meta-level in a programing language, including MetateM, allows the separation of the programming specification represented at the object-level from the control specification represented at the meta-level.
Reference: [5] <editor> K. L. Clark and S.-A. Tarnlund, editors. </editor> <booktitle> Logic Programming, volume 16 of A.P.I.C. Studies in Data Processing. </booktitle> <publisher> Academic Press, Inc., </publisher> <year> 1982. </year>
Reference: [6] <editor> Haskell B. </editor> <booktitle> Curry. Foundations of Mathematical Logic. </booktitle> <publisher> Dover, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: We also let M 2 have a modicum of set theory." They then give examples of object-languages and meta-languages and state the following. "How to handle additional grammatical and semantic features should be clear even to the meanest intellect." Curry <ref> [6] </ref> gives a further description of meta-languages in logical systems and also motivates the use of Quine's quasi-quotes [18] in that he says that we require statements such as "a ^ b" is the name of "a" and "b" yet, without being able to quantify into quotes, this statement might just
Reference: [7] <author> Donald Davidson. </author> <title> In Defense of Convention T. </title> <booktitle> In Leblanc [13], </booktitle> <pages> pages 76-86. </pages>
Reference: [8] <author> S. J. Feferman. </author> <title> Transfinite Recursive Progressions of Axiomatic Theories. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 27(3) </volume> <pages> 259-316, </pages> <year> 1962. </year>
Reference-contexts: If they are both logics, then we can say that the truth of a statement at the object-level can be directly affected by the truth of a different statement at the meta-level. Such statements are often termed reflection principles <ref> [8] </ref>, [24], [4], [20].
Reference: [9] <author> Michael Fisher. </author> <title> Meta-Programming in metatem (Draft). </title> <institution> Department of Computer Science, University of Manchester, </institution> <year> 1990. </year>
Reference-contexts: Finally, the language used in MetateM needs to be of a type appropriate to its usage in the application of MetateM systems. One possibility developed is a logic called FML fl based on quotes <ref> [9] </ref>. This approach corresponds to the ground representation described in [12]. An alternative approach based on a typed representation [12] for the meta language with the variables partitioned into two sorts, representing object level and meta level terms respectively. Here the system can be seen either as monolingual or amalgamated.
Reference: [10] <author> Michael R. Genesereth and Nils J. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Palo Alto, California, </address> <year> 1987. </year>
Reference-contexts: Thus, the name of the object a is the symbol "a". So, if we wish to say something about the symbol representing a, rather than about a itself, we would use "a". For example, Q (a) but single char ("a") The example used by Genesereth and Nilsson <ref> [10] </ref> is Large (John) but Small ("J ohn") meaning that John is large, but John's name is small. <p> By appropriate nesting of quotes and by the insertion of unquoted variables within quoted expressions, we develop a meta-language suitable for describing most practical aspects of meta-reasoning. (Again, see <ref> [10] </ref> for more examples and theoretical limitations of such an approach. Note that the quoting of expressions is used in many functional programming languages, for example Scheme [19].) 4.2.2 Typed Representation In a typed representation, object-level variables are represented directly as variables in the meta-level. However, all variables are typed.
Reference: [11] <author> Susan Haack. </author> <title> Philosophy of Logics. </title> <publisher> Cambridge University Press, </publisher> <year> 1978. </year>
Reference-contexts: Note also that the concatenation operator, `^', is used for constructing expressions. Quantification and Quoting The obvious replacement for the T schema is the axiom (D) 8p: "p" is true O iff p 260 Languages, Meta-languages and MetateM, A Discussion Paper where true O is the predicate true-in-O <ref> [11] </ref>. Tarksi rejects such a form as he believes that quantifying into quotation marks is meaningless. For example, he (and later, Quine [18]) believes that Snow is white is no more a part of "Snow is white" than "rat" is a part of "Socrates".
Reference: [12] <author> P. M. Hill and J. W. Lloyd. </author> <title> Analysis of Meta-Programs. </title> <booktitle> In Proceedings of the Workshop on Meta-Programming in Logic Programming, </booktitle> <pages> pages 27-42, </pages> <institution> University of Bristol, U.K., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: The simplest (conceptually) method for achieving this is to represent all object language terms as ground terms in the meta-language. This is called the Ground Representation <ref> [12] </ref>. 2 We will often use the term meta-interpreter rather than meta-circular interpreter, even though any interpreter is a meta-interpreter [15]. 268 Languages, Meta-languages and MetateM, A Discussion Paper 4.1 Ground Representation In this approach, all terms (whether ground or not) in the object-language are represented as ground terms in the <p> Thus, the meta-level unification procedures can safely be used on object-level variables as the unification will be restricted by the type of the variable being unified. This typing of levels of variables can (though not always | see <ref> [12] </ref>) lead to the use of higher-order logics. <p> In bilingual systems, the meta-language is different from the object language (in fact it is often a different type of language from the object language). The languages are related via a naming convention which translates objects of L into terms (possibly variable-free | see <ref> [12] </ref>) of M . In amalgamated systems, L and M are the same language, but a naming convention is used to separate the subsets of the language. Associated with each object-level term 6. <p> Finally, the language used in MetateM needs to be of a type appropriate to its usage in the application of MetateM systems. One possibility developed is a logic called FML fl based on quotes [9]. This approach corresponds to the ground representation described in <ref> [12] </ref>. An alternative approach based on a typed representation [12] for the meta language with the variables partitioned into two sorts, representing object level and meta level terms respectively. Here the system can be seen either as monolingual or amalgamated. <p> One possibility developed is a logic called FML fl based on quotes [9]. This approach corresponds to the ground representation described in <ref> [12] </ref>. An alternative approach based on a typed representation [12] for the meta language with the variables partitioned into two sorts, representing object level and meta level terms respectively. Here the system can be seen either as monolingual or amalgamated. This approach follows Perlis' work, but differs slightly by using implicit, rather than explicit, quoting.
Reference: [13] <editor> Hughes Leblanc, editor. Rees Truth, </editor> <title> Syntax and Modality, </title> <booktitle> volume 68 of Studies in Logic and The Foundations of Mathematics. </booktitle> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1973. </year>
Reference: [14] <author> John Malpas. </author> <title> PROLOG A Relational Language and its Applications. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, New Jersey, </address> <year> 1987. </year>
Reference: [15] <author> Ulf Nilsson and Ma luszynski. </author> <title> Logic, Programming and Prolog. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, U.K.,, </address> <year> 1990. </year>
Reference-contexts: The simplest (conceptually) method for achieving this is to represent all object language terms as ground terms in the meta-language. This is called the Ground Representation [12]. 2 We will often use the term meta-interpreter rather than meta-circular interpreter, even though any interpreter is a meta-interpreter <ref> [15] </ref>. 268 Languages, Meta-languages and MetateM, A Discussion Paper 4.1 Ground Representation In this approach, all terms (whether ground or not) in the object-language are represented as ground terms in the meta-language, i.e., * each constant or variable of the object-language is represented by a unique constant of the meta-language, *
Reference: [16] <author> Donald Perlis. </author> <title> Languages with Self Reference I: Foundations. </title> <journal> Artificial Intelligence, </journal> <volume> 25 </volume> <pages> 301-322, </pages> <year> 1985. </year>
Reference-contexts: From the work of Frege, and more recently Perlis <ref> [16] </ref>, a method for achieving this is to quote object-level expressions to generate a name for the sequence of symbols representing the expression. Thus, the name of the object a is the symbol "a". <p> THE REPRESENTATION OF TERMS 269 4.2.1 Quoted Representation A quoted representation of object-level terms uses the quoting mechanism described earlier. This produces a meta-level constant from an object level term and would seem, at first sight, to only be capable of producing a ground representation. However, Perlis <ref> [16] </ref> shows how terms can be partially quoted, thus preserving certain variables within the term. For example, p ("q (x)"; "r"(y)) is a partially quoted term. <p> Since that time, many researchers have used higher-order logics to enable object-level and meta-level statements to be used together (this is the method used when a typed representation is used). Perlis <ref> [16] </ref> showed that Frege's comprehension axioms could be used and Russell's paradox avoided without recourse to higher-order logic. He described a meta-level reasoning system where the object and meta-level languages were the same (i.e., predicate calculus).
Reference: [17] <author> G. Priest. </author> <title> Reasoning About Truth. </title> <journal> Artificial Intelligence, </journal> <volume> 39 </volume> <pages> 231-244, </pages> <year> 1989. </year>
Reference-contexts: Though he is forced to use an intuitionistic interpretation, his system shows how meta-languages and object languages can be described using the same language. Note that, as an alternative to Perlis' approach, Priest <ref> [17] </ref> showed how such results could be achieved by the use of paraconsistent logics. 5 Categorization of Meta-level Architectures Van Harmelen [23] categorizes various forms of meta-level architecture. One of his axes of categorization is the level at which the majority of the activity of the system takes place.
Reference: [18] <author> W. V. O. Quine. </author> <title> Mathematical Logic. </title> , <address> Cambridge, Mass., 2nd edition edition, </address> <year> 1951. </year>
Reference-contexts: Tarksi rejects such a form as he believes that quantifying into quotation marks is meaningless. For example, he (and later, Quine <ref> [18] </ref>) believes that Snow is white is no more a part of "Snow is white" than "rat" is a part of "Socrates". Such quantification might be acceptable if the quoting mechanism was to be represented as a function, but Tarski has fundamental objections to such a scheme. <p> of set theory." They then give examples of object-languages and meta-languages and state the following. "How to handle additional grammatical and semantic features should be clear even to the meanest intellect." Curry [6] gives a further description of meta-languages in logical systems and also motivates the use of Quine's quasi-quotes <ref> [18] </ref> in that he says that we require statements such as "a ^ b" is the name of "a" and "b" yet, without being able to quantify into quotes, this statement might just as well be taken as "a ^ b" is the name of "p" and "q" 2.
Reference: [19] <author> Jonathan A. and William Clinger. </author> <title> Revised 3 Report on the Algorithmic Language Scheme. </title> <journal> ACM Sigplan Notices, </journal> <volume> 21(12), </volume> <month> December </month> <year> 1986. </year>
Reference-contexts: Note that the quoting of expressions is used in many functional programming languages, for example Scheme <ref> [19] </ref>.) 4.2.2 Typed Representation In a typed representation, object-level variables are represented directly as variables in the meta-level. However, all variables are typed. Consequently, variables of type O (object-level) can range over object-level terms, whereas variables of type M (meta-level) can range over meta-level terms.
Reference: [20] <author> J. Tanaka. </author> <title> An Experimental Reflective Programming System Written in GHC. </title> <type> Technical Report TR-506, </type> <institution> ICOT, Minato-ku, </institution> <address> Tokyo, Japan, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: If they are both logics, then we can say that the truth of a statement at the object-level can be directly affected by the truth of a different statement at the meta-level. Such statements are often termed reflection principles [8], [24], [4], <ref> [20] </ref>.
Reference: [21] <author> Alfred Tarski. </author> <title> The Semantic Conception of Truth. </title> <journal> Philosophy and Phenomenological Research, </journal> <volume> 4 </volume> <pages> 341-375, </pages> <year> 1943. </year>
Reference: [22] <author> Alfred Tarski. </author> <title> Logic, Semantics, Metamathematics: papers from 1923 to 1938. </title> <publisher> Oxford University Press, Oxford, </publisher> <address> England, </address> <year> 1956. </year>
Reference-contexts: Axioms in the Meta-Language In the collection of papers published as <ref> [22] </ref>, Tarski again gives descriptions of the constraints that he argues must be satisfied in a language for it to be considered as a meta-language.
Reference: [23] <author> Frank van Harmelen. </author> <title> A Classification of Meta-Level Architectures. </title> <booktitle> In Proceedings of the Workshop on Meta-Programming in Logic Programming, </booktitle> <pages> pages 81-94, </pages> <institution> University of Bristol, U.K., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Note that, as an alternative to Perlis' approach, Priest [17] showed how such results could be achieved by the use of paraconsistent logics. 5 Categorization of Meta-level Architectures Van Harmelen <ref> [23] </ref> categorizes various forms of meta-level architecture. One of his axes of categorization is the level at which the majority of the activity of the system takes place.
Reference: [24] <author> R. Weyhrauch. </author> <title> Prologemena to a Theory of Mechanized Formal Reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 133-170, </pages> <year> 1980. </year>
Reference-contexts: If they are both logics, then we can say that the truth of a statement at the object-level can be directly affected by the truth of a different statement at the meta-level. Such statements are often termed reflection principles [8], <ref> [24] </ref>, [4], [20].
References-found: 24

