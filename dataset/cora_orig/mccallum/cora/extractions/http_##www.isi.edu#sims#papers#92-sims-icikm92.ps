URL: http://www.isi.edu/sims/papers/92-sims-icikm92.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: arens@isi.edu, knoblock@isi.edu  
Phone: (310) 822-1511  
Title: Planning and Reformulating Queries for Semantically-Modeled Multidatabase Systems  
Author: Yigal Arens and Craig A. Knoblock 
Date: 1992  
Note: Published in the Proceedings of the First International Conference on  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  ment, Baltimore, MD,  
Affiliation: USC Information Sciences Institute  Information and Knowledge Manage  
Abstract: With vast amounts of information available from various sources, integrating data from multiple databases is an important problem. The SIMS project attacks this problem using a variety of Artificial Intelligence techniques, including planning, knowledge representation, problem reformulation, and learning. To integrate multiple databases, the user provides a semantic model of the application domain and then uses this model to describe the contents of the available databases. Given a query, the system uses a planner to decide which databases must be queried and in what order the queries should be executed. This paper focuses on the query planning problem | the selection of appropriate data sources and ordering the accesses to them, and on the reformulation of queries | the use of knowledge both about the domain and the databases to modify queries to make the retrieval plans for them more efficient. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yigal Arens. </author> <title> Services and information management for decision support. </title> <booktitle> In AISIG-90: Proceedings of the Annual AI Systems in Government Conference, </booktitle> <address> George Washington University, Washington, DC, </address> <year> 1990. </year>
Reference-contexts: An earlier prototype was applied to information needed for daily Naval briefings given in Hawaii about the status of the Pacific Fleet <ref> [1] </ref>. Several databases with information about ships, ports, locations, activities, etc., are accessible to the system. The ideas and techniques for planning the access to databases (Section 4) have already been implemented and the reformulation of queries (Section 5) is currently under development.
Reference: [2] <author> R.J. Brachman and J.G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216, </pages> <year> 1985. </year>
Reference-contexts: It provides both a language and an environment for constructing intelligent applications. Loom combines features of both frame-based and semantic network languages, and provides some reasoning facilities. As a knowledge representation language it may be considered a development of the KL-ONE <ref> [2] </ref> family. The heart of Loom is a powerful knowledge representation system, which is used to provide deductive support for the declarative portion of the Loom language. Declarative knowledge in Loom consists of definitions, rules, facts, and default rules.
Reference: [3] <author> Yandong Cai, Nick Cercone, and Jiawei Han. </author> <title> Learning in relational databases: An attribute-oriented approach. </title> <journal> Computational Intelligence, </journal> <volume> 7(3) </volume> <pages> 119-132, </pages> <year> 1991. </year>
Reference-contexts: Loom could then be done in the afsc database as well. 5.2.2 Knowledge Compiled from Databases Instead of limiting the system to knowledge that must hold for the entire domain, we can use a compilation process that extracts knowledge from the individual databases and stores it in the knowledge base <ref> [3, 14, 15] </ref>. The compilation of knowledge about a database is driven by the need for particular types of information.
Reference: [4] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> PRODIGY: An integrated architecture for planning and learning. </title> <editor> In Kurt VanLehn, editor, </editor> <booktitle> Architectures for Intelligence, </booktitle> <pages> pages 241-278. </pages> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1991. </year>
Reference-contexts: However, LIM focuses primarily on the issues involved in mapping a semantic query to a single database. After SIMS has planned a query and formed subqueries, each grounded in a single database, it hands the subqueries to LIM for the actual data retrieval. 2.3 Prodigy Prodigy <ref> [4, 13] </ref> is a means-ends analysis planner complete with six modules for learning search-control rules, abstractions, operator models, and more. SIMS uses Prodigy for planning the accesses to the individual databases in order to satisfy a query.
Reference: [5] <author> Upen S. Chakravarthy, John Grant, and Jack Minker. </author> <title> Logic-based approach to semantic query optimization. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 162-207, </pages> <year> 1990. </year>
Reference-contexts: One approach to reducing this cost is to search for reformulations of the query access plan that reduce the total cost. Database management systems often perform syntactic query reformulation [8]. We leave that task to the respective DBMS then, and focus instead on more global semantic query reformulation <ref> [5, 9] </ref>. The idea is to transform the query resulting from the planning process into a semantically equivalent one that can be executed more efficiently. Consider the planned query illustrated in Figure 8.
Reference: [6] <author> Umeshwar Dayal. </author> <title> Query processing in a multidatabase system. </title> <booktitle> In Query Processing in Database Systems, </booktitle> <pages> pages 81-108. </pages> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: With a large number of databases, it is difficult to find individuals who possess the required knowledge, and automation becomes a necessity. There has been some work on this problem in the database community <ref> [6, 7] </ref>. Our work differs in that a complete semantic model of the application domain is created and used in order to provide a collection of terms with which to describe the contents of (i.e., to create a semantic model of) available databases. <p> There are a variety of issues that this paper does not address. One important issue is how to integrate information when there are multiple sources for the same knowledge. To address this problem, we plan to build on the work of Dayal <ref> [6] </ref>. Dayal defines a language with which to express the integration of various sources of data. We believe this language can be incorporated into the existing system by defining additional operators for reasoning about the language.
Reference: [7] <author> R. Hull and R. King. </author> <title> Semantic database modeling: Survey, applications, and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <year> 1987. </year>
Reference-contexts: With a large number of databases, it is difficult to find individuals who possess the required knowledge, and automation becomes a necessity. There has been some work on this problem in the database community <ref> [6, 7] </ref>. Our work differs in that a complete semantic model of the application domain is created and used in order to provide a collection of terms with which to describe the contents of (i.e., to create a semantic model of) available databases.
Reference: [8] <author> M. Jarke and J. Koch. </author> <title> Query optimization in database systems. </title> <journal> ACM Computer Surveys, </journal> <volume> 16 </volume> <pages> 111-152, </pages> <year> 1984. </year>
Reference-contexts: One approach to reducing this cost is to search for reformulations of the query access plan that reduce the total cost. Database management systems often perform syntactic query reformulation <ref> [8] </ref>. We leave that task to the respective DBMS then, and focus instead on more global semantic query reformulation [5, 9]. The idea is to transform the query resulting from the planning process into a semantically equivalent one that can be executed more efficiently.
Reference: [9] <author> Jonathan Jay King. </author> <title> Query Optimization by Semantic Reasoning. </title> <type> PhD thesis, </type> <institution> Stanford University, Department of Computer Science, </institution> <year> 1981. </year>
Reference-contexts: One approach to reducing this cost is to search for reformulations of the query access plan that reduce the total cost. Database management systems often perform syntactic query reformulation [8]. We leave that task to the respective DBMS then, and focus instead on more global semantic query reformulation <ref> [5, 9] </ref>. The idea is to transform the query resulting from the planning process into a semantically equivalent one that can be executed more efficiently. Consider the planned query illustrated in Figure 8.
Reference: [10] <author> R. MacGregor. </author> <title> A deductive pattern matcher. </title> <booktitle> In Proceedings of AAAI-88, The National Conference on Artificial Intelligence, </booktitle> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: This model-driven programming system supports frame-based structured inheritance with formal semantics. Its formal semantics allow automatic classification of new descriptions, increasing its utility in the construction of large declarative knowledge bases. Loom emphasizes usability through its functionality, efficiency, and its associated tools. For a detailed description of Loom see <ref> [10, 11] </ref>. To illustrate both Loom and the form of SIMS' queries, consider Figure 1, which contains a simple semantic query to SIMS. This query requests the value of the depth of the San Diego port.
Reference: [11] <author> R. MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In John Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Mor-gan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: This model-driven programming system supports frame-based structured inheritance with formal semantics. Its formal semantics allow automatic classification of new descriptions, increasing its utility in the construction of large declarative knowledge bases. Loom emphasizes usability through its functionality, efficiency, and its associated tools. For a detailed description of Loom see <ref> [10, 11] </ref>. To illustrate both Loom and the form of SIMS' queries, consider Figure 1, which contains a simple semantic query to SIMS. This query requests the value of the depth of the San Diego port.
Reference: [12] <author> Donald P. McKay, Timothy W. Finin, and Anthony O'Hare. </author> <title> The intelligent database interface: Integrating AI and database systems. </title> <booktitle> In AAAI-90: Proceedings of The Eighth National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Instead, databases provide more efficient structures for organizing large numbers of such objects, and DBMSs are more efficient than AI languages for manipulating them. The Loom Interface Module (LIM) <ref> [12] </ref> is being developed by researchers at Paramax Systems Corp. to mediate between Loom and databases. LIM reads an external database's schema and uses it to build a Loom representation of the database.
Reference: [13] <author> Steven Minton, Jaime G. Carbonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40(1-3):63-118, </volume> <year> 1989. </year>
Reference-contexts: However, LIM focuses primarily on the issues involved in mapping a semantic query to a single database. After SIMS has planned a query and formed subqueries, each grounded in a single database, it hands the subqueries to LIM for the actual data retrieval. 2.3 Prodigy Prodigy <ref> [4, 13] </ref> is a means-ends analysis planner complete with six modules for learning search-control rules, abstractions, operator models, and more. SIMS uses Prodigy for planning the accesses to the individual databases in order to satisfy a query.
Reference: [14] <author> G. Piatetsky-Shapiro. </author> <title> Knowledge Discovery in Databases. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Loom could then be done in the afsc database as well. 5.2.2 Knowledge Compiled from Databases Instead of limiting the system to knowledge that must hold for the entire domain, we can use a compilation process that extracts knowledge from the individual databases and stores it in the knowledge base <ref> [3, 14, 15] </ref>. The compilation of knowledge about a database is driven by the need for particular types of information.
Reference: [15] <author> Michael D. Siegel. </author> <title> Automatic rule derivation for semantic query optimization. </title> <editor> In Larry Kerschberg, editor, </editor> <booktitle> Proceedings of the Second International Conference on Expert Database Systems, </booktitle> <pages> pages 371-385. </pages> <institution> George Mason Foundation, Fairfax, VA, </institution> <year> 1988. </year>
Reference-contexts: Loom could then be done in the afsc database as well. 5.2.2 Knowledge Compiled from Databases Instead of limiting the system to knowledge that must hold for the entire domain, we can use a compilation process that extracts knowledge from the individual databases and stores it in the knowledge base <ref> [3, 14, 15] </ref>. The compilation of knowledge about a database is driven by the need for particular types of information. <p> We explain below how such information may be used. The one existing system that does provide a more general approach to learning for reformulation was developed by Siegel <ref> [15] </ref>. However, the particular learning mechanisms are quite limited and what the system learns is guided by a set of heuristics instead of being driven by the need to reformulate specific queries. 5.3 Reformulation Processes Using available knowledge sources, reformulation involves modifications to the parallelized subqueries shown in Figure 8.
Reference: [16] <author> Manuela M. Veloso. </author> <title> Nonlinear problem solving using intelligent casual-commitment. </title> <type> Technical Report CMU-CS-89-210, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1989. </year>
Reference-contexts: This plan is then converted into a partially ordered set of plan steps free of unnecessary ordering constraints. Each of the operator's preconditions in the database access plan explicitly state the conditions on which that operator depends. We use the algorithm of Veloso <ref> [16] </ref> to convert the totally ordered plan into a partially ordered plan from the definition of the operators. This algorithm is polynomial in the length of the plan. The resulting partially ordered plan is shown in Figure 7.
References-found: 16

