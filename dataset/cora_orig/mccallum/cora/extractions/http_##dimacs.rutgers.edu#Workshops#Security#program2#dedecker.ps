URL: http://dimacs.rutgers.edu/Workshops/Security/program2/dedecker.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: Bart.DeDecker@cs.kuleuven.ac.be Frank.Piessens@cs.kuleuven.ac.be  
Title: CryptoLog: A Theorem Prover for Cryptographic Protocols  
Author: Bart De Decker and Frank Piessens 
Address: Celestijnenlaan 200A, B-3001 Heverlee, Belgium  
Affiliation: K.U.Leuven, Department of Computer Science,  
Abstract: Logics for cryptographic protocols have proved very useful in validating the correctness of these protocols. However, neither the specification, nor the logic proof help the implementor of the protocol. Although the proof states the assumptions explicitly, it does not |in general| contain guidelines for the implementation. In this paper, we present a theorem prover whose input is very close to a program written in a procedural language. Moreover, explicit guidelines for implementors may be given. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Burrows, M. Abadi, R. Needham, </author> <title> A logic of Authentication, Digital System Research Center Report 39, </title> <address> Palo Alto, California, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Section 6 shows typical input and output for the analyser. In section 7, we discuss some future work. Finally, section 8 summarizes the conclusions. 2 Notations The notations used in this paper are similar to those of the BAN- and GNY-papers <ref> [1, 3] </ref>. Table 1 summarizes briefly the most important formulae. However, Table 1. Symbols used in this paper. <p> Q! P : fN q ; Qg K 3.2 Modified Wide-Mouthed-Frog Protocol The second example illustrates the `gap' that exists between an `idealized' version of a protocol and its actual implementation. Table 4-b shows a modified version of the `wide-mouthed-frog protocol' (table 4-a; see also <ref> [1] </ref>). The role of the two timestamps in the original protocol is now played by a nonce, thus removing the need for synchronized clocks. However, an extra (first) message has to be sent. <p> For instance, the analyser should be able to alert for the flaw in the original Needham-Schroeder protocol with public keys <ref> [1, 5] </ref>. See also table 10-a. An intruder C waits until A starts the protocol with C; C can start another run of the protocol with B, pretending to be A (see also table 10-b).
Reference: 2. <author> V.D. Gligor, R. Kailar, S. Stubblebine and L. Gong, </author> <title> Logics for Cryptographic Protocols Virtues and Limittions, </title> <booktitle> In Proceedings of the IEEE Computer Security Foundations Workshop IV, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1991, </year> <pages> pp. 219-226. </pages>
Reference-contexts: 1 Introduction Logics for cryptographic protocols have proved to be of invaluable help in vali dating and correcting these protocols (see also <ref> [2] </ref>): these logics help to formalize the reasoning about useful abstract properties of these protocols; the logics require to write down the initial security assumptions of the pro tocol that might otherwise be buried in the implementation details; the logics achieve reasonably well-defined goals; the analysis process ties the evolution of
Reference: 3. <author> Li Gong, Roger Needham, and Raphael Yahalom, </author> <title> Reasoning about Belief in Cryptographic Procols, </title> <booktitle> in Proceedings of the IEEE 1990 Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> oo. 234-248. </pages>
Reference-contexts: Section 6 shows typical input and output for the analyser. In section 7, we discuss some future work. Finally, section 8 summarizes the conclusions. 2 Notations The notations used in this paper are similar to those of the BAN- and GNY-papers <ref> [1, 3] </ref>. Table 1 summarizes briefly the most important formulae. However, Table 1. Symbols used in this paper. <p> In this section, we will show two examples where the `use' of the logics is not optimal: in the enhanced Needham-Schroeder protocol (as described in <ref> [3] </ref>), a handmade proof is given which contains, unfortunately, a small error, due to a misinterpretation of the concept of `a good key'. Although the proof itself is neither difficult, nor very long, it is for humans very difficult to construct such a proof one deduction step at a time. <p> The order of these fields, however, is important in a real implementation. 3.1 Enhanced Needham-Schroeder Protocol Table 2 shows the enhanced Needham-Schroeder Protocol as it has been pub lished in <ref> [3] </ref>. The purpose of the modifications (which are underlined) is to make Q believe that K is a suitable key for P and Q, and to make P believe that Q believes that K is a suitable key. <p> name, . . . it modifies the holds- and believes-relations; see tables 8 and 9. when the action is `send a message', the analyser will additionally: * expand the included function calls: i.e. expand pre-defined short-cuts; * canonicalize the message; * append annotations: these are beliefs of the sender (see <ref> [3] </ref>); * check the sender-rules: the analyser verifies the possession and belief consistency rules (sender may only send messages it was able to assemble; and only current beliefs may be included as annotations in a message); * apply receiver-rules: in this step, the holds- and beliefs-relations of the receiver are expanded <p> belief consistency rules (sender may only send messages it was able to assemble; and only current beliefs may be included as annotations in a message); * apply receiver-rules: in this step, the holds- and beliefs-relations of the receiver are expanded (if possible); currently, the deduction rules, described in the GNY-paper <ref> [3] </ref>, have been implemented; * apply the eavesdropper-rules: in this step, the analyser checks whether secret information is leaked. at the end, the analyser will print an overview of the holds- and beliefs relations. finally, for every password used as a cryptographic key, the analyser checks the severeness of a successful
Reference: 4. <author> L.C. Paulson, </author> <title> Isabelle, A Generic Theorem Prover, </title> <publisher> Springer, </publisher> <year> 1994, </year> <note> LNCS 828. </note>
Reference: 5. <author> G. Lowe, </author> <title> Breaking and fixing the Needham-Schroeder public-key protocol using CSP and FDR, </title> <editor> in T. Margaria and B. Steffen, editors, </editor> <booktitle> Tools and Algorithms for the Construction and Analysis of Systems, Second International Workshop, TACAS'96, </booktitle> <volume> LNCS 1055, </volume> <pages> pp. 147-166, </pages> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: For instance, the analyser should be able to alert for the flaw in the original Needham-Schroeder protocol with public keys <ref> [1, 5] </ref>. See also table 10-a. An intruder C waits until A starts the protocol with C; C can start another run of the protocol with B, pretending to be A (see also table 10-b).
References-found: 5

