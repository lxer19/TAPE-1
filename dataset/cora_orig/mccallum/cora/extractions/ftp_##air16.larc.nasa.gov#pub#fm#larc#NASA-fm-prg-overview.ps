URL: ftp://air16.larc.nasa.gov/pub/fm/larc/NASA-fm-prg-overview.ps
Refering-URL: http://www.comlab.ox.ac.uk/archive/safety.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Program in Formal Methods  
Author: Ricky W. Butler James L. Caldwell Victor A. Carre~no Kelly J. Hayhurst C. Michael Holloway Paul S. Miner Ben L. Di Vito 
Date: October 25, 1996  
Web: http://atb-www.larc.nasa.gov/fm.html  
Address: Hampton, Virginia  Hampton, Virginia  
Affiliation: Assessment Technology Branch NASA Langley Research Center  VGYAN Inc.  
Note: NASA Langley's Research and Technology-Transfer  
Abstract: This paper presents an overview of NASA Langley's research program in formal methods. The major goals of this work are to make formal methods practical for use on life critical systems, and to orchestrate the transfer of this technology to U.S. industry through use of carefully designed demonstration projects. Several direct technology transfer efforts have been initiated that apply formal methods to critical subsystems of real aerospace computer systems. The research team consists of six NASA civil servants and contractors from Odyssey Research Associates, SRI International, and VGYAN Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Saab Blames Gripen Crash on Software. Aviation Week & Space Technology, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [2] <institution> Key Technologies For the Year 2000. National Center for Advanced Technologies, </institution> <address> 1250 Eye Street N.W., Washington, D.C. 20005, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems <ref> [2] </ref>.
Reference: [3] <author> Barrett, Geoff: </author> <title> Formal Methods Applied to a Floating-Point Number System. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15, no. 5, </volume> <month> May </month> <year> 1989, </year> <pages> pp. 611-621. </pages> <note> 7 This project was not initiated by Langley, but Langley has been a major participant in it. 22 </note>
Reference-contexts: The tremendous scientific potential of formal methods has been recognized by theoreticians for a long time, but the formal techniques have remained the province of a few academicians, with only a few exceptions such as the Transputer <ref> [3] </ref> and the IBM CICS project [50]. The first five years of NASA Langley's program have advanced the capabilities of formal methods to the point where commercial exploitation is near. There are many different types of formal methods with various degrees of rigor.
Reference: [4] <author> Best, David W.; Charles E. Kress, Nick M. Mykris; Russell, Jeffrey D.; and Smith, William J.: </author> <title> An advanced-architecture CMOS/SOS microprocessor. </title> <journal> IEEE Micro, </journal> <volume> vol. 2, no. 4, </volume> <month> Aug. </month> <year> 1982, </year> <pages> pp. 11-26. </pages>
Reference-contexts: The goal was to investigate the application of formal techniques to a commercial microprocessor design, the Collins AAMP5 microprocessor. The AAMP5 is the latest member of the CAPS/AAMP family of microprocessors and is object code compatible with the AAMP2 processor <ref> [4] </ref>. The CAPS/AAMP family of microprocessors has been widely used by the commercial and military aerospace industries. Some examples of use of earlier members of the family include: 1. Boeing 747-400 Integrated Display System (IDS) 2. Boeing 737-300 Electronic Flight Instrumentation System (EFIS) 3. Boeing 777 Flight Control Backdrive 4.
Reference: [5] <author> Bevier, William R.; and Young, William D.: </author> <title> Machine Checked Proofs of the Design and Implementation of a Fault-Tolerant Circuit. </title> <type> NASA Contractor Report 182099, </type> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This is the classic Byzantine Generals problem [64]; algorithms to solve the problem are called Byzantine agreement algorithms. CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover <ref> [5] </ref>. They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm [6], and then subsequently verified the design down to a hardware description language HDL developed at CLI [80].
Reference: [6] <author> Bevier, William R.; and Young, William D.: </author> <title> The Proof of Correctness of a Fault-Tolerant Circuit Design. </title> <booktitle> In Second IFIP Conference on Dependable Computing For Critical Applications, </booktitle> <address> Tucson, Arizona, </address> <month> Feb. </month> <year> 1991, </year> <pages> pp. 107-114. </pages>
Reference-contexts: CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover [5]. They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm <ref> [6] </ref>, and then subsequently verified the design down to a hardware description language HDL developed at CLI [80]. A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [95]. ORA also investigated the formal verification of Byzantine Generals algorithms.
Reference: [7] <author> Bickford, Mark; and Srivas, Mandayam: </author> <title> Verification of the FtCayuga Fault-Tolerant Microprocessor System (Volume 2: Formal Specification and Correctness Theorems). </title> <type> NASA Contractor Report 187574, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [95]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga micro-processors <ref> [113, 7] </ref>. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated. The communications circuitry would serve as a foundation for a fault-tolerant architecture.
Reference: [8] <author> Bose, Bhaskar: </author> <title> DDD A Transformation System for Digital Design Derivation. </title> <institution> Indiana University, </institution> <type> Technical Report 331, </type> <institution> Computer Science Department, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [78]. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University <ref> [8] </ref>. Some design optimizations that were not possible within DDD were verified using PVS. 5.1.3 Byzantine Agreement Algorithms Fault-tolerant systems, although internally redundant, must deal with single-source information from the external world. <p> DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation <ref> [8] </ref>. Bose formally derived the DDD-FM9001 [9] microprocessor from Hunt's top-level specification of the FM9001 microprocessor [51]. 5.4 Civil Air Transport Requirements Specification Work with Boeing to develop a prototype interface for formal requirements analysis of a civil air transport was completed in 1992 [38, 39].
Reference: [9] <author> Bose, Bhaskar; and Johnson, Steven D.: DDD-FM9001: </author> <title> Derivation of a Verified Microprocessor. An Exercise in Integrating Verification with Formal Derivation. </title> <editor> In Milne, G.; and Pierre, L., editors 1993:, </editor> <booktitle> Proceedings of IFIP Conference on Correct Hardware Design and Verification Methods. </booktitle> <publisher> Springer, LNCS 683, </publisher> <year> 1993, </year> <pages> pp. 191-202. </pages> <note> also published as Tech Report # 380, </note> <institution> Computer Science Department, Indiana University. </institution>
Reference-contexts: DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation [8]. Bose formally derived the DDD-FM9001 <ref> [9] </ref> microprocessor from Hunt's top-level specification of the FM9001 microprocessor [51]. 5.4 Civil Air Transport Requirements Specification Work with Boeing to develop a prototype interface for formal requirements analysis of a civil air transport was completed in 1992 [38, 39].
Reference: [10] <author> Brock, Bishop; and Hunt, Jr., Warren A.: </author> <title> Report on the Formal Specification and Partial Verification of the VIPER Microprocessor. </title> <type> NASA Contractor Report 187540, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: Boeing and U.C. Davis also performed an assessment of the U.K. Royal Signals and Radar Establishment's (RSRE) VIPER chip [66]. This was part of a now-completed 3 year Memorandum of Understanding (MOU) with RSRE. CLI and Langley researchers also performed assessments of the VIPER project <ref> [10, 20, 17] </ref>.
Reference: [11] <author> Butler, Ricky W.: </author> <title> An Elementary Tutorial on Formal Specification and Verification Using PVS. </title> <type> NASA Technical Memorandum 108991, </type> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [12] <author> Butler, Ricky W.; and Di Vito, Ben L.: </author> <title> Formal Design and Verification of a Reliable Computing Platform For Real-Time Control (Phase 2 Results). </title> <type> NASA Technical Memorandum 104196, </type> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover <ref> [12, 32] </ref>. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system [13]. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access.
Reference: [13] <author> Butler, Ricky W.; Di Vito, Ben L.; and Holloway, C. Michael: </author> <title> Formal Design and Verification of a Reliable Computing Platform For Real-Time Control (Phase 3 Results). </title> <type> NASA Technical Memorandum 109140, </type> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover [12, 32]. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system <ref> [13] </ref>. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access. Anonymous FTP access is available through the host deduction.larc.nasa.gov using the path pub/fm/larc/RCP-specs.
Reference: [14] <author> Butler, Ricky W.; and Finelli, George B.: </author> <title> The Infeasibility of Experimental Quantification of Life-Critical Software Reliability. </title> <booktitle> In Proceedings of the ACM SIGSOFT '91 Conference on Software for Critical Systems, </booktitle> <address> New Orleans, Louisiana, </address> <month> Dec. </month> <year> 1991, </year> <pages> pp. 66-76. </pages>
Reference-contexts: Therefore, it is not possible, within feasible amounts of testing time, to establish that design diversity achieves ultrareliability. Consequently, design diversity can create an "illusion" of ultrareliability without actually providing it. For a more detailed discussion, see <ref> [15, 14] </ref>. We believe that formal methods offer the only intellectually defensible method for handling design faults.
Reference: [15] <author> Butler, Ricky W.; and Finelli, George B.: </author> <title> The Infeasibility of Quantifying the Reliability of Life-Critical Real-Time Software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 1, </volume> <month> Jan. </month> <year> 1993, </year> <pages> pp. 3-12. </pages>
Reference-contexts: Therefore, it is not possible, within feasible amounts of testing time, to establish that design diversity achieves ultrareliability. Consequently, design diversity can create an "illusion" of ultrareliability without actually providing it. For a more detailed discussion, see <ref> [15, 14] </ref>. We believe that formal methods offer the only intellectually defensible method for handling design faults.
Reference: [16] <author> Butler, Ricky W.; and Johnson, Sally C.: </author> <title> Formal Methods For Life-Critical Software. </title> <booktitle> In Computing in Aerospace 9 Conference, </booktitle> <address> San Diego, CA, </address> <month> Oct. </month> <year> 1993, </year> <pages> pp. 319-329. </pages>
Reference-contexts: Although a complete formal verification of a large complex system is impractical at this time, a great increase in confidence in the system can be obtained by the use of formal methods at key locations in the system. For more information on the basic principles of formal methods, see <ref> [16] </ref>. 2 Goals of Our Program, Strategy, and Research Team The major goals of the NASA Langley research program are to make formal methods practical for use on life critical systems developed in the United States, and to orchestrate the transfer of this technology to industry through use of carefully designed <p> Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [17] <author> Butler, Ricky W.; and Sjogren, Jon A.: </author> <title> Hardware Proofs Using EHDM and the RSRE Verification Methodology. </title> <type> NASA Technical Memorandum 100669, </type> <month> Dec. </month> <year> 1988. </year> <month> 23 </month>
Reference-contexts: Boeing and U.C. Davis also performed an assessment of the U.K. Royal Signals and Radar Establishment's (RSRE) VIPER chip [66]. This was part of a now-completed 3 year Memorandum of Understanding (MOU) with RSRE. CLI and Langley researchers also performed assessments of the VIPER project <ref> [10, 20, 17] </ref>.
Reference: [18] <author> Butler, Ricky W., (ed.): </author> <booktitle> NASA Formal Methods Workshop 1990. NASA Conference Publi--cation 10052, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Langley has also been sponsoring a series of workshops on formal methods. The first workshop, held in August 1990, focused on building cooperation and communication between U.S. formal methods researchers <ref> [18] </ref>. The second, held in August 1992, focused on education of the U.S. aerospace industry about formal methods [56]. A third workshop will be held in May 1995.
Reference: [19] <author> Carre~no, Victor A.: </author> <title> Interpretation of IEEE-854 Floating-Point Standard and Definition in the HOL system. </title> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Current In-House Research In addition to supporting the technology transfer projects discussed in the previous section, the NASA Langley local staff are performing research in a number of areas. 4.1 Specification of Floating-point Arithmetic Significant portions of the ANSI/IEEE-854 [52] standard have been defined using the PVS [76] and HOL <ref> [19] </ref> systems. IEEE-854 is a standard for radix-independent floating-point arithmetic.
Reference: [20] <author> Carre~no, Victor A.; and Angellatta, Rob K.: </author> <title> A Case Study for the Real-Time Experimental Evaluation of the VIPER Microprocessor. </title> <type> NASA Technical Memorandum 104098, </type> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Boeing and U.C. Davis also performed an assessment of the U.K. Royal Signals and Radar Establishment's (RSRE) VIPER chip [66]. This was part of a now-completed 3 year Memorandum of Understanding (MOU) with RSRE. CLI and Langley researchers also performed assessments of the VIPER project <ref> [10, 20, 17] </ref>.
Reference: [21] <author> Carre~no, Victor A.; and Miner, Paul S.: </author> <title> Specification of the IEEE-854 Floating-Point Standard in HOL and PVS. To be presented at the 1995 International Workshop on Higher Order Logic Theorem Proving and its Applications, </title> <address> September 11-14, Aspen Grove, Utah, USA, </address> <note> as a track B paper and included in supplemental proceedings, </note> <year> 1995. </year>
Reference-contexts: In addition, the formalization of the standard in two different systems has given the opportunity to compare the verification systems and specification styles <ref> [21] </ref>. 4.2 PVS Libraries There is a sizable effort associated with the development of the background mathematical theories needed for any particular problem domain. These libraries provide fundamental definitions that are usually taken for granted by a domain expert.
Reference: [22] <institution> Computer Resource Management Inc.: </institution> <note> In Digital Systems Validation Handbook volume III, no. DOT/FAA/CT-88/10. FAA. </note>
Reference-contexts: John Rushby has written a chapter for the FAA Digital Systems Validation Handbook Volume III on formal methods <ref> [22] </ref>, which is also available as a NASA contractor report [98]. The handbook provides detailed information about digital system design and validation and is used by the FAA certifiers. In preparation for this chapter, Rushby produced a comprehensive analysis of formal methods [96].
Reference: [23] <author> Courcoubetis, </author> <title> Costas, </title> <booktitle> editor 1993: Computer Aided Verification, CAV '93, vol. 697 of Lecture Notes in Computer Science, </booktitle> <address> Elounda, Greece, June/July 1993. </address> <publisher> Springer Verlag. </publisher>
Reference: [24] <author> Crow, Judith; and Di Vito, Ben L.: </author> <title> Formalizing Space Shuttle Software Requirements. </title> <booktitle> In Workshop on Formal Methods in Software Practice (FMSP '96), </booktitle> <address> San Diego, California, </address> <month> Jan. </month> <year> 1996, </year> <pages> pp. 40-48. </pages>
Reference-contexts: A second specifi-cation was produced for an abstract (i.e., high level) representation of the Jet Select requirements. This abstraction, along with the 24 proofs of key properties, was accomplished in under 2 work months, and although it only uncovered 6 issues, several of these issues were significant <ref> [24] </ref>. NASA Langley's primary role in 1994-95 included support for three Space Shuttle software change requests (CRs).
Reference: [25] <author> Crow, Judy: </author> <title> Finite-State Analysis of Space Shuttle Contingency Guidance Requirements. </title> <type> NASA Contractor Report 4741, </type> <month> May </month> <year> 1996. </year>
Reference-contexts: These findings were cited as potential issues and were reviewed by the 3E/O requirements analyst. The formal specifications were analyzed using the Mur system [36], which performs analysis of finite state systems using model checking. The results of this study are reported in <ref> [25] </ref>. Our role in support of the HAC CR was much smaller than for GPS or 3E/O. Key portions of the the control logic for managing the HAC crew displays are expressed in the CR in a tabular form.
Reference: [26] <author> Crow, Judy; Owre, Sam; Rushby, John; Shankar, Natarajan; and Srivas, Mandayam: </author> <title> A Tutorial Introduction to PVS. </title> <booktitle> In WIFT'95 Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida USA, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [27] <author> Cyrluk, David; Rajan, S.; Shankar, N.; and Srivas, M. K.: </author> <title> Effective Theorem Proving for Hardware Verification. </title> <booktitle> In Second International Conference on Theorem Proving in Circuit Design, Theory, Practice, and Experience, </booktitle> <address> Bad Herrenalb, Germany, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Tradeoffs between different algorithms were explored via symbolic fault-injection with the Mur Tool. There is currently much interest in combining model checking and general purpose theorem proving. Some effort in this direction has been sponsored by the NASA program <ref> [91, 27] </ref>. Recent work by SRI has applied these ideas to reconfigurable, fault-tolerant systems [99]. 3.6 Requirements Analysis Better methods for writing and analyzing requirements is one of the greatest needs that commercial industry faces today. Requirements are usually incomplete, poorly defined, and change rapidly as a system is developed.
Reference: [28] <author> Cyrluk, David A.; and Srivas, Mandayam K.: </author> <title> Theorem Proving: Not an Esoteric Diversion: but the Unifying Framework for Industrial Verification. </title> <booktitle> In IEEE International Conference on Computer Design (ICCD) '95, </booktitle> <address> Austin, Texas, </address> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Based on the success of the AAMP5 project, a new effort has been initiated with Rockwell-Collins to apply formal methods in the design level verification of a microprocessor, currently designated as AAMP-FV. This work has has significant impact on the development of a hardware verification capability within PVS <ref> [28] </ref>. 3.2 Tablewise Project Under NASA funding, Odyssey Research Associates has been working with Honeywell Air Transport Systems Division (Phoenix) since 1993 to study the incorporation of formal methods into the company's software development processes.
Reference: [29] <author> D. N. Hoover, David Guaspari; and Humenn, </author> <title> Polar: Applications of Formal Methods to Specification and Safety of Avionics Software. </title> <type> NASA Contractor Report 4723, </type> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: The tool is also capable of automatically generating documentation and Ada code from a table [49]. ORA has also investigated methods for generating software test cases directly from tables <ref> [29] </ref>, and for reverse engineering tabular specifications from existing avionics code. 3.3 Union Switch and Signal As part of a joint research agreement, NASA Langley formal methods researchers are collaborating with engineers at Union Switch and Signal (US&S) to use formal methods in the design of railway switching and control applications.
Reference: [30] <author> Di Vito, Ben L.: </author> <title> Formalizing New Navigation Requirements for NASA's Space Shuttle. </title> <booktitle> In Formal Methods Europe (FME '96), </booktitle> <address> Oxford, England, </address> <month> Mar. </month> <year> 1996, </year> <pages> pp. 160-178. </pages> <booktitle> Lecture Notes in Computer Science 1051, </booktitle> <publisher> Springer. </publisher>
Reference-contexts: As a result of the three formalization efforts, a total of 86 issues or minor discrepancies were discovered in the CR. These items were submitted as official issues during three requirements inspections, leading to a favorable reaction from the Shuttle requirements community <ref> [35, 30] </ref>. The Three Engine Out (3E/O) Task is executed each cycle during powered flight until either a contingency abort maneuver is required or progress along the powered flight trajectory is sufficient to preclude a contingency abort even if three main engines fail.
Reference: [31] <author> Di Vito, Ben L.; and Butler, Ricky W.: </author> <title> Provable Transient Recovery for Frame-Based, Fault-Tolerant Computing Systems. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <address> Phoenix, Az, </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Interprocessor Communication Link Interprocessor Communication Link Processor Replicate R Processor Replicate 1 Actuators Sensors notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [34, 33, 31] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [32] <author> Di Vito, Ben L.; and Butler, Ricky W.: </author> <title> Formal Techniques for Synchronized Fault-Tolerant Systems. In Dependable Computing for Critical Applications 3, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pp. 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1993. </year> <note> Also presented at 3rd IFIP Working Conference on Dependable Computing for Critical Applications, </note> <institution> Mondello, Sicily, Italy, </institution> <month> Sept. </month> <pages> 14-16, </pages> <year> 1992. </year>
Reference-contexts: Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover <ref> [12, 32] </ref>. Both the DA minv model and the LE model were specified formally and have been verified using the Ehdm verification system [13]. All RCP specifications and proofs are available electronically via the Internet using anonymous FTP or World Wide Web (WWW) access.
Reference: [33] <author> Di Vito, Ben L.; Butler, Ricky W.; and Caldwell, James L.: </author> <title> High Level Design Proof of a Reliable Computing Platform. In Dependable Computing for Critical Applications 2, </title> <booktitle> Dependable Computing and Fault-Tolerant Systems, </booktitle> <pages> pp. 279-306. </pages> <publisher> Springer Verlag, </publisher> <address> Wien New York, </address> <year> 1992. </year> <booktitle> Also presented at 2nd IFIP Working Conference on Dependable Computing for Critical Applications, </booktitle> <address> Tucson, AZ, </address> <month> Feb. </month> <pages> 18-20, </pages> <year> 1991, </year> <pages> pp. 124-136. </pages>
Reference-contexts: Interprocessor Communication Link Interprocessor Communication Link Processor Replicate R Processor Replicate 1 Actuators Sensors notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [34, 33, 31] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [34] <author> Di Vito, Ben L.; Butler, Ricky W.; and Caldwell, James L., </author> <title> II: Formal Design and Verification of a Reliable Computing Platform For Real-Time Control (Phase 1 Results). </title> <type> NASA Technical Memorandum 102716, </type> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Interprocessor Communication Link Interprocessor Communication Link Processor Replicate R Processor Replicate 1 Actuators Sensors notation and connected via mathematical (i.e. level 2 formal methods) proof <ref> [34, 33, 31] </ref>. Under the assumption that a majority of processors is working in each frame, the proof establishes that the replicated system computes the same results as a single processor system not subject to failures.
Reference: [35] <author> Di Vito, Ben L.; and Roberts, Larry W.: </author> <title> Using Formal Methods to Assist in the Requirements Analysis of the Space Shuttle GPS Change Request. </title> <institution> NASA Langley Research Center, </institution> <type> Contractor Report 4752, </type> <address> Hampton, VA, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: As a result of the three formalization efforts, a total of 86 issues or minor discrepancies were discovered in the CR. These items were submitted as official issues during three requirements inspections, leading to a favorable reaction from the Shuttle requirements community <ref> [35, 30] </ref>. The Three Engine Out (3E/O) Task is executed each cycle during powered flight until either a contingency abort maneuver is required or progress along the powered flight trajectory is sufficient to preclude a contingency abort even if three main engines fail.
Reference: [36] <author> Dill, David L.; Drexler, Andreas J.; Hu, Alan J.; and Yang, C. Han: </author> <title> Protocol Verification as a Hardware Design Aid. </title> <booktitle> In 1992 IEEE International Conference on Computer Design: VLSI in COmputers and Processors, </booktitle> <address> Cambridge, MA, </address> <month> Oct. </month> <year> 1992, </year> <pages> pp. 522-525. </pages>
Reference-contexts: A total of 19 potential issues were found, including undocumented assumptions, logical errors, and inconsistent and imprecise terminology. These findings were cited as potential issues and were reviewed by the 3E/O requirements analyst. The formal specifications were analyzed using the Mur system <ref> [36] </ref>, which performs analysis of finite state systems using model checking. The results of this study are reported in [25]. Our role in support of the HAC CR was much smaller than for GPS or 3E/O.
Reference: [37] <author> Eichenlaub, Carl T.; Harper, C. Douglas; and Hird, Geoffrey: </author> <title> Using Penelope to Assess the Correctness of NASA Ada Software: A Demonstration of Formal Methods as a Counterpart to Testing. </title> <type> NASA Contractor Report 4509, </type> <month> May </month> <year> 1993. </year>
Reference-contexts: This task was accomplished in two steps: (1) formal specification of the routines and (2) formal verification of the routines. Both steps uncovered errors <ref> [37] </ref>.
Reference: [38] <author> Fisher, Gene; Frincke, Deborah; Wolber, Dave; and Cohen, Gerald C.: </author> <title> Structured Representation for Requirements and Specifications. </title> <type> NASA Contractor Report 187522, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: Bose formally derived the DDD-FM9001 [9] microprocessor from Hunt's top-level specification of the FM9001 microprocessor [51]. 5.4 Civil Air Transport Requirements Specification Work with Boeing to develop a prototype interface for formal requirements analysis of a civil air transport was completed in 1992 <ref> [38, 39] </ref>. This work, performed under a subcontract to California Polytechnic State University, included development of a Wide-Spectrum Requirements Specification Language (WSRSL) and prototype tools to support the language.
Reference: [39] <author> Frincke, Deborah; Wolber, Dave; Fisher, Gene; and Cohen, Gerald: </author> <title> Requirements Specification Language (RSL) and Supporting Tools. </title> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Bose formally derived the DDD-FM9001 [9] microprocessor from Hunt's top-level specification of the FM9001 microprocessor [51]. 5.4 Civil Air Transport Requirements Specification Work with Boeing to develop a prototype interface for formal requirements analysis of a civil air transport was completed in 1992 <ref> [38, 39] </ref>. This work, performed under a subcontract to California Polytechnic State University, included development of a Wide-Spectrum Requirements Specification Language (WSRSL) and prototype tools to support the language.
Reference: [40] <author> Fura, David A.; Windley, Phillip J.; and Cohen, Gerald C.: </author> <title> Formal Design Specification of a Processor Interface Unit. </title> <type> NASA Contractor Report 189698, </type> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: After demonstrating the feasibility of verifying standard hardware devices, Boeing applied the methodology to a proprietary hardware 20 device called the Processor Interface Unit (PIU) that is being developed for aeronautics and space applications <ref> [40] </ref>. Boeing and U.C. Davis also performed an assessment of the U.K. Royal Signals and Radar Establishment's (RSRE) VIPER chip [66]. This was part of a now-completed 3 year Memorandum of Understanding (MOU) with RSRE. CLI and Langley researchers also performed assessments of the VIPER project [10, 20, 17].
Reference: [41] <author> Garmen, John R.: </author> <title> The Bug Heard 'Round The World. </title> <journal> ACM Software Engineering Notes, </journal> <volume> vol. 6, no. 5, </volume> <month> Oct. </month> <year> 1981, </year> <pages> pp. 3-10. </pages>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [42] <author> Gibbs, W. Wayt: </author> <title> Software's Chronic Crisis. </title> <publisher> Scientific American, </publisher> <month> Sept. </month> <year> 1994, </year> <pages> pp. 86-95. </pages>
Reference-contexts: And three quarters of all large systems are "operating failures" that either do not function as intended or are not used at all. Despite 50 years of progress, the software industry remains years-perhaps decades-short of the mature engineering discipline needed to meet the demands of an information-age society <ref> [42] </ref>. Lauren Ruth Wiener describes the software problem in her book, Digital Woes: Why We Should Not Depend Upon Software: Software products|even programs of modest size|are among the most complex artifacts that humans produce, and software development projects are among our most complex undertakings.
Reference: [43] <editor> Goldberg, Jack; et al.: </editor> <title> Development and Analysis of the Software Implemented Fault-Tolerance (SIFT) Computer. </title> <type> NASA Contractor Report 172146, </type> <year> 1984. </year>
Reference-contexts: Although in many systems the clock synchronization function has not been decoupled from the applications (e.g. the redundant versions of the applications synchronize by messages), research and experience have led us to believe that solving the synchronization problem independently from the applications design can provide significant simplification of the system <ref> [62, 43] </ref>. The operating system is built on top of this clock-synchronization foundation. Of course, the correctness of this foundation is essential. Thus, the clock synchronization algorithm and its implementation are prime candidates for formal methods.
Reference: [44] <author> Gong, Li; Lincoln, Patrick; and Rushby, John: </author> <title> Byzantine Agreement with Authentication: Observations and Applications in Tolerating Hybrid and Link Faults. In Dependable Computing for Critical Applications (DCCA-5), </title> <address> Champaign, IL, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Also, SRI generalized their clock synchronization work to encompass the hybrid fault model [97]. Next, SRI investigated authenticated Byzantine Agreement while extending fault model to include link failures as well as hybrid faults in the processors <ref> [44] </ref>. The analysis was performed using both the PVS theorem proving system and model checking (Stanford Mur). Tradeoffs between different algorithms were explored via symbolic fault-injection with the Mur Tool. There is currently much interest in combining model checking and general purpose theorem proving.
Reference: [45] <author> Guaspari, David: Penelope, </author> <title> an Ada Verification System. </title> <booktitle> In Proceedings of Tri-Ada '89, </booktitle> <address> Pittsburgh, PA, </address> <month> Oct. </month> <year> 1989, </year> <pages> pp. 216-224. 25 </pages>
Reference-contexts: The first task was to verify some utility routines obtained from the NASA Goddard Space Flight Center and the NASA Lewis Research Center using their Ada Verification Tool named Penelope <ref> [45] </ref>. This task was accomplished in two steps: (1) formal specification of the routines and (2) formal verification of the routines. Both steps uncovered errors [37].
Reference: [46] <author> Guaspari, David: </author> <title> Formally Specifying the Logic of an Automatic Guidance Controller. </title> <booktitle> In Ada-Europe Conference, </booktitle> <address> Athens, Greece, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Both steps uncovered errors [37]. The second task was to formally specify the mode-control panel logic of a Boeing 737 experimental aircraft system using Larch (the specification language used by Penelope) <ref> [46] </ref>. 5.3 Verification of Hardware Devices Our past research and technology transfer efforts in the area of formal verification of hardware devices are described below. 5.3.1 Boeing Hardware Devices The Boeing Company was contracted by NASA Langley to develop advanced validation and verification techniques for fly-by-wire systems.
Reference: [47] <author> Hamilton, Margaret: </author> <title> Zero-defect software: the elusive goal. </title> <journal> IEEE Spectrum, </journal> <month> Mar. </month> <year> 1986. </year>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [48] <author> Harper, Richard E.; Lala, Jay H.; and Deyst, John J.: </author> <title> Fault Tolerant Parallel Processor Architecture Overview. </title> <booktitle> In Proceedings of the 18th Symposium on Fault Tolerant Computing, </booktitle> <year> 1988, </year> <pages> pp. 252-257. </pages>
Reference-contexts: During this project, CSDL became interested in the use of formal methods to increase confidence in their designs. ORA was given the task of formally specifying and verifying a key circuit (called the scoreboard) of the Fault-Tolerant Parallel Processor (FTPP) <ref> [48] </ref> in Clio [114]. The formal verification uncovered previously unknown design errors. When the scoreboard chip was fabricated, it worked without any error manifestation. It was the first time that CSDL produced a chip that worked "perfectly" on a first fabrication.
Reference: [49] <author> Hoover, Doug; and Chen, Zewei: TBell: </author> <title> A Mathematical Tool for Analyzing Decision Tables. </title> <type> NASA Contractor Report 195027, </type> <month> Nov. </month> <year> 1994. </year> <note> Note: Tbell is now known as TableWise. </note>
Reference-contexts: The tool is also capable of automatically generating documentation and Ada code from a table <ref> [49] </ref>.
Reference: [50] <author> Houston, Iain; and King, Steve: </author> <title> CICS Project Report: Experiences and Results from the Use of Z in IBM. </title> <editor> In Prehn, S.; and Toetenel, W.J., editors 1991:, </editor> <booktitle> VDM '91: Formal Software Development Methods, </booktitle> <address> Noordwijkerhout, The Netherlands, Oct. 1991, </address> <publisher> Springer Verlag, </publisher> <pages> pp. 588-596. </pages> <booktitle> Volume 1: Conference Contributions. </booktitle>
Reference-contexts: The tremendous scientific potential of formal methods has been recognized by theoreticians for a long time, but the formal techniques have remained the province of a few academicians, with only a few exceptions such as the Transputer [3] and the IBM CICS project <ref> [50] </ref>. The first five years of NASA Langley's program have advanced the capabilities of formal methods to the point where commercial exploitation is near. There are many different types of formal methods with various degrees of rigor.
Reference: [51] <author> Hunt, Warren A.: </author> <title> A Formal HDL and its use in the FM9001 Verification. In Hoare, C.A.R.; </title> <editor> and Gordon, M.J., editors 1992:, </editor> <title> Mechanized Reasoning in Hardware Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: DDD implements a formal design algebra that allows a designer to transform a formal specification into a correct implementation [8]. Bose formally derived the DDD-FM9001 [9] microprocessor from Hunt's top-level specification of the FM9001 microprocessor <ref> [51] </ref>. 5.4 Civil Air Transport Requirements Specification Work with Boeing to develop a prototype interface for formal requirements analysis of a civil air transport was completed in 1992 [38, 39].
Reference: [52] <author> IEEE. </author> <title> IEEE Standard for Radix-Independent Floating-Point Arithmetic, </title> <booktitle> 1987. </booktitle> <address> ANSI/IEEE Std 854-1987. </address>
Reference-contexts: Research Associates; and Derivation Reasoning System, by Derivation Systems, Inc. 4 Current In-House Research In addition to supporting the technology transfer projects discussed in the previous section, the NASA Langley local staff are performing research in a number of areas. 4.1 Specification of Floating-point Arithmetic Significant portions of the ANSI/IEEE-854 <ref> [52] </ref> standard have been defined using the PVS [76] and HOL [19] systems. IEEE-854 is a standard for radix-independent floating-point arithmetic.
Reference: [53] <author> John Kelly, et. al.: </author> <title> Formal Methods Demonstration Project for Space Applications Phase I Case Study: Space Shuttle Orbit DAP Jet. </title> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The NASA Formal Methods Demonstration Project for Space Applications focuses on the use of formal methods for requirements analysis because the team believes that formal methods are more practically applied to requirements analysis than to late-lifecycle development phases <ref> [53] </ref>. A series of trial projects was conducted and cost effectiveness data were collected. The team's efforts in 1993 were concentrated on a single pilot project, while later efforts in 1994-95 were more diffuse.
Reference: [54] <author> Johnson, Sally C.; and Butler, Ricky W.: </author> <title> Design For Validation. </title> <booktitle> In AIAA/IEEE 10th Digital Avionics Systems Conference, </booktitle> <address> Los Angeles, California, </address> <month> Oct. </month> <year> 1991, </year> <pages> pp. 487-492. </pages>
Reference-contexts: It is one of the largest formal verifications ever performed. The RCP architecture was designed in accordance with a system-design philosophy called "Design For Validation" <ref> [55, 54] </ref>. The basic tenets of this design philosophy are as follows: 1. A system is designed in such a manner that complete and accurate models can be constructed to estimate critical properties such as reliability and performance.
Reference: [55] <author> Johnson, Sally C.; and Butler, Ricky W.: </author> <title> Design For Validation. </title> <journal> IEEE Aerospace and Electronics Systems, </journal> <month> Jan. </month> <year> 1992, </year> <pages> pp. 38-43. </pages>
Reference-contexts: It is one of the largest formal verifications ever performed. The RCP architecture was designed in accordance with a system-design philosophy called "Design For Validation" <ref> [55, 54] </ref>. The basic tenets of this design philosophy are as follows: 1. A system is designed in such a manner that complete and accurate models can be constructed to estimate critical properties such as reliability and performance.
Reference: [56] <author> Johnson, Sally C.; Holloway, C. Michael; and Butler, Ricky W.: </author> <booktitle> Second NASA Formal Methods Workshop 1992. NASA Conference Publication 10110, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Langley has also been sponsoring a series of workshops on formal methods. The first workshop, held in August 1990, focused on building cooperation and communication between U.S. formal methods researchers [18]. The second, held in August 1992, focused on education of the U.S. aerospace industry about formal methods <ref> [56] </ref>. A third workshop will be held in May 1995. Another component of our technology transfer strategy, is to use the NASA's Small Business Innovative Research (SBIR) program to assist small businesses in the development of commercially viable formal methods tools and techniques.
Reference: [57] <author> Joyce, Ed: </author> <title> Software Bugs: A Matter of Life and Liability. </title> <journal> Datamation, </journal> <month> May </month> <year> 1987. </year>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [58] <author> Kalvala, Sara; Archer, Myla; and Levitt, Karl: </author> <title> A Methodology for Integrating Hardware Design and Verification. </title> <booktitle> In ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, FL, </address> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system <ref> [106, 105, 90, 58] </ref>. After demonstrating the feasibility of verifying standard hardware devices, Boeing applied the methodology to a proprietary hardware 20 device called the Processor Interface Unit (PIU) that is being developed for aeronautics and space applications [40]. Boeing and U.C. Davis also performed an assessment of the U.K.
Reference: [59] <author> Kalvala, Sara; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Design and Verification of a DMA Processor. </title> <type> NASA contractor report, </type> <year> 1992. </year> <note> Unpublished. </note>
Reference-contexts: With the assistance of a subcontract with U. C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor [120], a floating-point coprocessor similar to the Intel 8087 but smaller [89, 88], a direct memory access (DMA) controller similar to the Intel 8237A but smaller <ref> [59] </ref>, and a set of memory-management units [107, 104]. U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [60] <author> Knight, John C.; and Leveson, Nancy G.: </author> <title> An experimental evaluation of the assumptions of independence in multiversion programming. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-12, no. 1, </volume> <month> Jan. </month> <year> 1986, </year> <pages> pp. 96-109. </pages>
Reference-contexts: By assuming independence, one can obtain ultrareliable-level estimates of reliability, even with failure rates for the individual versions on the order of 10 4 =hour. Unfortunately, the independence assumption has been rejected at the 99% confidence level in several experiments for low reliability software <ref> [60, 61] </ref>. Furthermore, the independence assumption cannot be validated for high reliability software because of the exorbitant test times required. If one cannot assume independence then one must measure correlations.
Reference: [61] <author> Knight, John. C.; and Leveson, Nancy. G.: </author> <title> A Reply To the Criticisms Of The Knight & Leveson Experiment. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <month> Jan. </month> <year> 1990. </year> <month> 26 </month>
Reference-contexts: By assuming independence, one can obtain ultrareliable-level estimates of reliability, even with failure rates for the individual versions on the order of 10 4 =hour. Unfortunately, the independence assumption has been rejected at the 99% confidence level in several experiments for low reliability software <ref> [60, 61] </ref>. Furthermore, the independence assumption cannot be validated for high reliability software because of the exorbitant test times required. If one cannot assume independence then one must measure correlations.
Reference: [62] <author> Lamport, Leslie: </author> <title> Using Time Instead of Timeout for Fault-Tolerant Distributed Systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 6, no. 2, </volume> <month> Apr. </month> <year> 1984, </year> <pages> pp. 254-280. </pages>
Reference-contexts: Although in many systems the clock synchronization function has not been decoupled from the applications (e.g. the redundant versions of the applications synchronize by messages), research and experience have led us to believe that solving the synchronization problem independently from the applications design can provide significant simplification of the system <ref> [62, 43] </ref>. The operating system is built on top of this clock-synchronization foundation. Of course, the correctness of this foundation is essential. Thus, the clock synchronization algorithm and its implementation are prime candidates for formal methods.
Reference: [63] <author> Lamport, Leslie; and Melliar-Smith, P. M.: </author> <title> Synchronizing Clocks in the Presence of Faults. </title> <journal> Journal Of The ACM, </journal> <volume> vol. 32, no. 1, </volume> <month> Jan. </month> <year> 1985, </year> <pages> pp. 52-78. </pages>
Reference-contexts: This allows a more explicit modeling of interprocessor communication and the time phasing of computation, communication, and voting. At the fourth level (DA), the assumptions of the synchronous model must be discharged. Rushby and von Henke [100] report on the formal verification of Lamport and Melliar-Smith's <ref> [63] </ref> interactive-convergence clock synchronization algorithm. This algorithm can serve as a foundation for the implementation of the replicated system by bounding the amount of asynchrony in the system so that it can duplicate the functionality of the DS model. <p> The verification process involves two important steps: (1) verification that the algorithm satisfies the maximum skew property and (2) verification that the digital circuitry correctly implements the algorithm. The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT <ref> [63] </ref>. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [100, 101]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm [109, 110].
Reference: [64] <author> Lamport, Leslie; Shostak, Robert; and Pease, Marshall: </author> <title> The Byzantine Generals Problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 4, no. 3, </volume> <month> July </month> <year> 1982, </year> <pages> pp. 382-401. </pages>
Reference-contexts: Thus, the sensor values (the complete redundant suite) must be distributed to each processor in a manner which guarantees that all working processors receive exactly the same value even in the presence of some faulty processors. This is the classic Byzantine Generals problem <ref> [64] </ref>; algorithms to solve the problem are called Byzantine agreement algorithms. CLI investigated the formal verification and implementation of such algorithms. They formally verified the original Marshall, Shostak, and Lamport version of this algorithm using the Boyer Moore theorem prover [5].
Reference: [65] <author> Leveson, Nancy G.: </author> <title> Software Safety: What, Why, and How. </title> <journal> Computing Surveys, </journal> <volume> vol. 18, no. 2, </volume> <month> June </month> <year> 1986. </year>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [66] <author> Levitt, Karl; and et. al.: </author> <title> Formal Verification of a Microcoded VIPER Microprocessor using HOL. </title> <type> NASA Contractor Report 4489, </type> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Boeing and U.C. Davis also performed an assessment of the U.K. Royal Signals and Radar Establishment's (RSRE) VIPER chip <ref> [66] </ref>. This was part of a now-completed 3 year Memorandum of Understanding (MOU) with RSRE. CLI and Langley researchers also performed assessments of the VIPER project [10, 20, 17].
Reference: [67] <author> Lincoln, Patrick; and Rushby, John: </author> <title> Formal Verification of an Algorithm for Interactive Consistency under a Hybrid Fault Model. </title> <booktitle> In Courcoubetis [23], </booktitle> <pages> pp. 292-304. </pages>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way 3 . A formal analysis by SRI discovered flaws in Allied-Signal's algorithm Z and together with Allied Signal, they developed an improved algorithm <ref> [68, 67, 69] </ref>. The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [68] <author> Lincoln, Patrick; and Rushby, John: </author> <title> A Formally Verified Algorithm For Interactice Consistency Under a Hybrid Fault Model. </title> <type> NASA Contractor Report 4527, </type> <month> July </month> <year> 1993. </year>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way 3 . A formal analysis by SRI discovered flaws in Allied-Signal's algorithm Z and together with Allied Signal, they developed an improved algorithm <ref> [68, 67, 69] </ref>. The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [69] <author> Lincoln, Patrick; and Rushby, John: </author> <title> A Formally Verified Algorithm for Interactive Consistency under a Hybrid Fault Model. </title> <booktitle> In Fault Tolerant Computing Symposium 23, </booktitle> <address> Toulouse, France, </address> <month> June </month> <year> 1993, </year> <journal> IEEE Computer Society, </journal> <pages> pp. 402-411. </pages>
Reference-contexts: In particular, their algorithm can mask the effects of a less severe class of faults, in a more effective way 3 . A formal analysis by SRI discovered flaws in Allied-Signal's algorithm Z and together with Allied Signal, they developed an improved algorithm <ref> [68, 67, 69] </ref>. The newly developed hybrid-fault theory was then applied to the analysis of the Charles Stark Draper Labs "Fault-Tolerant Processor" (FTP). A unique feature of this architecture is its use of "interstages" to relay messages between processors.
Reference: [70] <author> Lincoln, Patrick; and Rushby, John: </author> <title> Formal Verification of an Interactive Consistency Algorithm for the Draper FTP Architecture under a Hybrid Fault Model. </title> <booktitle> In 1994 Computer Assurance (COMPASS) Conference, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: These are significantly smaller than a processor and lead to an asymmetric architecture that is far more efficient than the traditional Byzantine agreement architectures 4 . The SRI work not only formalized the existing informal analysis but extended it to cover a wider range of faulty behavior <ref> [70] </ref>. Also, SRI generalized their clock synchronization work to encompass the hybrid fault model [97]. Next, SRI investigated authenticated Byzantine Agreement while extending fault model to include link failures as well as hybrid faults in the processors [44].
Reference: [71] <author> Meissner, Charles W., Jr.; Dunham, Janet R.; and (eds.), C. </author> <title> Crim: </title> <booktitle> Proceedings of the NASA-LaRC Flight-Critical Digital Systems Technology Workshop. NASA Conference Publication 10028, </booktitle> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: Aerospace engineers who attended the NASA-LaRC Flight Critical Digital Systems Technology Workshop listed techniques for the validation of concurrent and fault-tolerant computer systems high on the list of research priorities for NASA <ref> [71] </ref>. 1.1 Why Formal Methods Is Necessary Digital systems (both hardware and software) are notorious for their unpredictable and unreliable behavior: Studies have shown that for every six new large-scale software systems that are put into operation, two others are cancelled.
Reference: [72] <author> Miller, Steve; and Srivas, Mandayam: </author> <title> Formal Verification of the AAMP5 Microprocessor: A Case Study in the Industrial Use of Formal Methods. </title> <booktitle> In WIFT'95 Workshop on Industrial-strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida USA, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 30-43. </pages>
Reference-contexts: While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor <ref> [72, 115] </ref>. The Collins formal methods team believes that this effort has prevented two significant errors from going into the first fabrication of the microprocessor. The second phase of the project consisted of formally verifying the microcode of a representative subset of the AAMP5 instructions. <p> Collins seeded two errors in the microcode provided to SRI in an attempt to assess the effectiveness of formal verification. Both of these errors (and suggested corrections) were discovered while proving the microcode correct <ref> [72] </ref>. It is noteworthy that both the level 2 and level 3 applications of formal methods were successful in finding bugs. <p> IEEE-854 is a standard for radix-independent floating-point arithmetic. The main motivating factors for the formalization of the standard are 1) The creation of a formal specification against which an implementation (such as the AAMP5 <ref> [72] </ref>) could be verified; 2) The highly publicized floating-point divide flaw in the Intel Pentium (R) processor [103]. The formalization of the standard has brought to light the interesting and challenging issues of translating a natural language document into a logic based language in a precise, unambiguous, and accurate manner.
Reference: [73] <author> Miner, Paul S.: </author> <title> An Extension to Schneider's General Paradigm for Fault-Tolerant Clock Synchronization. </title> <type> NASA Technical Memorandum 107634, </type> <institution> Langley Research Center, Hampton, VA, </institution> <year> 1992. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [100, 101]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm [109, 110]. A further generalization was found at NASA Langley <ref> [73] </ref> 5 . The design of a digital circuit to distribute clock values in support of fault-tolerant synchronization was completed by SRI and was partially verified. 6 CLI reproduced the SRI verification of the interactive convergence algorithm using the Boyer-Moore theorem prover [122]. <p> NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [75, 74, 73] </ref>. The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [78].
Reference: [74] <author> Miner, Paul S.: </author> <title> A Verified Design of a Fault-Tolerant Clock Synchronization Circuit: Preliminary Investigations. </title> <type> NASA Technical Memorandum 107568, </type> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [75, 74, 73] </ref>. The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [78].
Reference: [75] <author> Miner, Paul S.: </author> <title> Verification of Fault-Tolerant Clock Synchronization Systems. </title> <type> NASA Technical Paper 3349, </type> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults <ref> [75, 74, 73] </ref>. The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [78].
Reference: [76] <author> Miner, Paul S.: </author> <title> Defining the IEEE-854 Floating-Point Standard in PVS. NASA, </title> <type> NASA Technical Memorandum 110167, </type> <institution> Langley Research Center, Hampton, VA, </institution> <month> June </month> <year> 1995. </year> <month> 27 </month>
Reference-contexts: Systems, Inc. 4 Current In-House Research In addition to supporting the technology transfer projects discussed in the previous section, the NASA Langley local staff are performing research in a number of areas. 4.1 Specification of Floating-point Arithmetic Significant portions of the ANSI/IEEE-854 [52] standard have been defined using the PVS <ref> [76] </ref> and HOL [19] systems. IEEE-854 is a standard for radix-independent floating-point arithmetic.
Reference: [77] <author> Miner, Paul S.; Padilla, Peter A.; and Torres, Wilfredo: </author> <title> A Provably Correct Design of a Fault-Tolerant Clock Synchronization Circuit. </title> <booktitle> In 11th Digital Avionics Systems Conference, </booktitle> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1992, </year> <pages> pp. 341-346. </pages>
Reference-contexts: NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults [75, 74, 73]. The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips <ref> [77] </ref>. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed [78]. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University [8].
Reference: [78] <author> Miner, Paul S.; Pullela, Shyamsundar; and Johnson, Steven D.: </author> <title> Interaction of Formal Design Systems in the Development of a Fault-Tolerant Clock Synchronization Circuit. </title> <booktitle> In 13th Symposium on Reliable Distributed Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994, </year> <pages> pp. 128-137. </pages> <booktitle> Proceedings of SRDS 94 held at Dana Point, </booktitle> <address> California, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77]. Using a combination of formal techniques, a verified clock synchronization circuit design has also been developed <ref> [78] </ref>. The principal design tool was the Digital Design Derivation system (DDD) developed by Indiana University [8]. Some design optimizations that were not possible within DDD were verified using PVS. 5.1.3 Byzantine Agreement Algorithms Fault-tolerant systems, although internally redundant, must deal with single-source information from the external world.
Reference: [79] <author> Moore, J Strother: </author> <title> A Formal Model of Asynchronous Communication and Its Use in Mechanically Verifying a Biphase Mark Protocol. </title> <type> NASA Contractor Report 4433, </type> <month> June </month> <year> 1992. </year>
Reference-contexts: CSDL credits VHDL-development tools and formal methods for the success. 5.3.3 Asynchronous Communication CLI developed a formal model of asynchronous communication and demonstrated its utility by formally verifying a widely used protocol for asynchronous communication called the bi-phase mark protocol, also known as "Bi--M," "FM" or "single density" <ref> [79] </ref>.
Reference: [80] <author> Moore, J Strother: </author> <title> Mechanically Verified Hardware Implementing an 8-bit Parallel IO Byzan-tine Agreement Processor. </title> <type> NASA Contractor Report 189588, </type> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: They also implemented this algorithm down to the register-transfer level and demonstrated that it implements the mathematical algorithm [6], and then subsequently verified the design down to a hardware description language HDL developed at CLI <ref> [80] </ref>. A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [95]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga micro-processors [113, 7].
Reference: [81] <author> National Aeronautics and Space Administration, </author> <title> Office of Safety and Mission Assurance, Washington, DC. Formal Methods Specification and Verification Guidebook for Software and Computer Systems, Volume II: A Practitioner's Companion. </title> <note> To appear. </note>
Reference-contexts: A second volume that is aimed at practitioners is in preparation and publication is expected by the end of CY 1996 <ref> [81] </ref>. LaRC's efforts in 1996 were directed primarily at this second guidebook volume, with members of the LaRC team having been the lead contributors. 3.5 Allied Signal's Hybrid Fault Algorithms Thambidurai and Park (Allied-Signal) introduced a hybrid fault model (1988) that classified faults into three categories: asymmetric, symmetric and crash.
Reference: [82] <author> National Aeronautics and Space Administration, </author> <title> Office of Safety and Mission Assurance, Washington, DC. Formal Methods Specification and Verification Guidebook for Software and Computer Systems, Volume I: Planning and Technology Insertion, </title> <month> July </month> <year> 1995. </year>
Reference-contexts: In addition to the Shuttle activities, LaRC has been contributing to a NASA guidebook under development by the inter-center team. The first volume of the guidebook, which was published in 1995, is intended for managers of NASA projects who will be using formal methods in requirements 11 analysis activities <ref> [82] </ref>. A second volume that is aimed at practitioners is in preparation and publication is expected by the end of CY 1996 [81].
Reference: [83] <author> Neumann, Peter G.: </author> <title> Some Computer-Related Disasters and Other Egregious Horrors. </title> <journal> ACM Software Engineering Notes, </journal> <volume> vol. 10, no. 1, </volume> <month> Jan. </month> <year> 1985, </year> <pages> pp. 6-12. </pages>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [84] <author> Owre, S.; Shankar, N.; and Rushby, J. M.: </author> <title> The PVS Specification Language (Beta Release). </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Boeing 777 Flight Control Backdrive 4. Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS <ref> [85, 84, 108] </ref>. Several tutorial introductions to PVS are available [26, 11, 112, 16, 87, 111]. While formally specifying the microprocessor, two design errors were discovered in the microcode.
Reference: [85] <author> Owre, S.; Shankar, N.; and Rushby, J. M.: </author> <title> User Guide for the PVS Specification and Verification System (Beta Release). </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Boeing 777 Flight Control Backdrive 4. Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS <ref> [85, 84, 108] </ref>. Several tutorial introductions to PVS are available [26, 11, 112, 16, 87, 111]. While formally specifying the microprocessor, two design errors were discovered in the microcode.
Reference: [86] <author> Owre, Sam; Rushby, John; ; Shankar, Natarajan; and von Henke, Friedrich: </author> <title> Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 21, no. 2, </volume> <month> Feb. </month> <year> 1995, </year> <pages> pp. 107-125. </pages>
Reference-contexts: John Rushby writes: Organization of redundancy and fault-tolerance for ultra-high reliability is a challenging problem: redundancy management can account for half the software in a flight control system and, if less than perfect can itself become the primary source of system failure <ref> [86] </ref>. In a comprehensive assessment of formal methods [96], John Rushby discusses several notorious examples of such failures. These include the following: * The asynchronous operation of the AFTI-F16 and sensor noise led each channel to declare the other channels failed in flight test 44. <p> NASA Langley has not sponsored the development of any general-purpose theorem provers. However, the technology transfer projects have lead to significant improvements in the Prototype Verification System (PVS) theorem prover <ref> [86] </ref> that SRI International (SRI) is developing. Several domain-specific tools are being sponsored: (1) Tablewise, (2) VHDL-analysis tool, and (3) DRS. These tools are discussed in later sections. It is also important to realize that formal methods include a large class of mathematical techniques and tools. <p> Our program has driven the development of PVS, the most advanced general-purpose theorem prover in the world <ref> [86] </ref>, and the Odyssey Research Associates VHDL-verification tool. Commercial industry has been anxious to work with our team, although we have not had sufficient resources to work with as many as we would have liked.
Reference: [87] <author> Owre, Sam; Rushby, John; Shankar, Natarajan; and Srivas, Mandayam: </author> <title> A Tutorial Using PVS For Hardware Verification. </title> <booktitle> In Second International Conference on Theorem Proving in Circuit Design, Theory, Practice, and Experience, </booktitle> <address> Bad Herrenalb, Germany, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [88] <author> Pan, Jing; and Levitt, Karl: </author> <title> Towards a Formal Specification of the IEEE Floating-Point Standard with Application to the Verification of Floating-Point Coprocessors. </title> <booktitle> In 24th Asilo-mar Conference on Signals, Systems & Computers, Monterrey, </booktitle> <address> CA., </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: With the assistance of a subcontract with U. C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor [120], a floating-point coprocessor similar to the Intel 8087 but smaller <ref> [89, 88] </ref>, a direct memory access (DMA) controller similar to the Intel 8237A but smaller [59], and a set of memory-management units [107, 104]. U. C.
Reference: [89] <author> Pan, Jing; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Toward a Formal Verification of a Floating-Point Coprocessor and its Composition with a Central Processing Unit. </title> <type> NASA Contractor Report 187547, </type> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: With the assistance of a subcontract with U. C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor [120], a floating-point coprocessor similar to the Intel 8087 but smaller <ref> [89, 88] </ref>, a direct memory access (DMA) controller similar to the Intel 8237A but smaller [59], and a set of memory-management units [107, 104]. U. C.
Reference: [90] <author> Pan, Jing; Levitt, Karl; and Schubert, E. Thomas: </author> <title> Toward a Formal Verification of a Floating-Point Coprocessor and its Composition with a Central Processing Unit. </title> <booktitle> In ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, FL, </address> <month> Jan. </month> <year> 1991. </year> <month> 28 </month>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system <ref> [106, 105, 90, 58] </ref>. After demonstrating the feasibility of verifying standard hardware devices, Boeing applied the methodology to a proprietary hardware 20 device called the Processor Interface Unit (PIU) that is being developed for aeronautics and space applications [40]. Boeing and U.C. Davis also performed an assessment of the U.K.
Reference: [91] <author> Rajan, S.; Shankar, N.; and Srivas, M. K.: </author> <title> An Integration of Model Checking with Automated Proof Checking. </title> <booktitle> In Computer Aided Verification (CAV 95), Liege, </booktitle> <address> Belgium, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Tradeoffs between different algorithms were explored via symbolic fault-injection with the Mur Tool. There is currently much interest in combining model checking and general purpose theorem proving. Some effort in this direction has been sponsored by the NASA program <ref> [91, 27] </ref>. Recent work by SRI has applied these ideas to reconfigurable, fault-tolerant systems [99]. 3.6 Requirements Analysis Better methods for writing and analyzing requirements is one of the greatest needs that commercial industry faces today. Requirements are usually incomplete, poorly defined, and change rapidly as a system is developed.
Reference: [92] <author> Roberts, Larry W.; and Beims, Mike: </author> <title> Using Formal Methods to Assist in the Requirements Analysis of the Space Shuttle HAC Change Request (CR 90960E). NASA Johnson Space Center, </title> <type> Technical report, </type> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: One table was found to have overlapping conditions, meaning that several rows were not disjoint. A corrected version was produced and both tables were then proved to satisfy the well-formedness criteria using PVS <ref> [92] </ref>. The GPS, 3E/O, and HAC tasks were completed in 1995. As a result of our efforts, we have some hope of seeing formal methods incorporated as a requirements analysis technique for Space Shuttle software.
Reference: [93] <author> Rogers, Michael; and Gonzalez, David L.: </author> <title> Can We Trust Our Software? Newsweek, </title> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: Although much progress has been made in developing methods to accommodate physical failures, design flaws remain a serious problem <ref> [65, 83, 47, 1, 57, 41, 93] </ref>. A 1991 report by the National Center For Advanced Technologies 1 identified "Provably Correct System Specification" and "Verification Formalism For Error-Free Specification" as key areas of research for future avionics software and ultrareliable electronics systems [2].
Reference: [94] <author> Rushby, John: </author> <title> Formal Specification and Verification of a Fault-Masking and Transient-Recovery Model for Digital Flight-Control Systems. </title> <type> NASA Contractor Report 4384, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: Sufficient conditions were developed that guarantee that the replicated system recovers from transient faults within a bounded amount of time. SRI subsequently generalized the models and constructed a mechanical proof in Ehdm <ref> [94] </ref>. Next, the local team developed the third and fourth level models. The top two levels and the two new models (i.e. DS and DA) were then specified in Ehdm and all of the proofs were done mechanically using the Ehdm 5.2 prover [12, 32].
Reference: [95] <author> Rushby, John: </author> <title> Formal verification of an Oral Messages algorithm for interactive consistency. </title> <type> NASA Contractor Report 189704, </type> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI <ref> [95] </ref>. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga micro-processors [113, 7]. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated.
Reference: [96] <author> Rushby, John: </author> <title> Formal Methods and Digital Systems Validation for Airborne Systems. </title> <type> NASA Contractor Report 4551, </type> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: In a comprehensive assessment of formal methods <ref> [96] </ref>, John Rushby discusses several notorious examples of such failures. These include the following: * The asynchronous operation of the AFTI-F16 and sensor noise led each channel to declare the other channels failed in flight test 44. The plane was flown home on a single channel. <p> The handbook provides detailed information about digital system design and validation and is used by the FAA certifiers. In preparation for this chapter, Rushby produced a comprehensive analysis of formal methods <ref> [96] </ref>.
Reference: [97] <author> Rushby, John: </author> <title> A Formally Verified Algorithm Clock Sychronization Under a Hybrid Fault Model. </title> <booktitle> In ACM Principles of Distributed Computing '94, </booktitle> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The SRI work not only formalized the existing informal analysis but extended it to cover a wider range of faulty behavior [70]. Also, SRI generalized their clock synchronization work to encompass the hybrid fault model <ref> [97] </ref>. Next, SRI investigated authenticated Byzantine Agreement while extending fault model to include link failures as well as hybrid faults in the processors [44]. The analysis was performed using both the PVS theorem proving system and model checking (Stanford Mur).
Reference: [98] <author> Rushby, John: </author> <title> Formal Methods and Their Role in Digital Systems Validation for Airborne Systems. </title> <type> NASA Contractor Report 4673, </type> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: John Rushby has written a chapter for the FAA Digital Systems Validation Handbook Volume III on formal methods [22], which is also available as a NASA contractor report <ref> [98] </ref>. The handbook provides detailed information about digital system design and validation and is used by the FAA certifiers. In preparation for this chapter, Rushby produced a comprehensive analysis of formal methods [96].
Reference: [99] <author> Rushby, John: </author> <title> Reconfiguration and Transient Recovery in State-Machine Architectures. </title> <booktitle> In 26th Annual International Symposium on Fault-tolerant Computing (FTCS-26), Sendai, </booktitle> <address> Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: There is currently much interest in combining model checking and general purpose theorem proving. Some effort in this direction has been sponsored by the NASA program [91, 27]. Recent work by SRI has applied these ideas to reconfigurable, fault-tolerant systems <ref> [99] </ref>. 3.6 Requirements Analysis Better methods for writing and analyzing requirements is one of the greatest needs that commercial industry faces today. Requirements are usually incomplete, poorly defined, and change rapidly as a system is developed.
Reference: [100] <author> Rushby, John; and von Henke, Friedrich: </author> <title> Formal Verification of a Fault-Tolerant Clock Synchronization Algorithm. </title> <type> NASA Contractor Report 4239, </type> <month> June </month> <year> 1989. </year>
Reference-contexts: Level 3 of the hierarchy (DS) breaks a frame into four sequential phases. This allows a more explicit modeling of interprocessor communication and the time phasing of computation, communication, and voting. At the fourth level (DA), the assumptions of the synchronous model must be discharged. Rushby and von Henke <ref> [100] </ref> report on the formal verification of Lamport and Melliar-Smith's [63] interactive-convergence clock synchronization algorithm. This algorithm can serve as a foundation for the implementation of the replicated system by bounding the amount of asynchrony in the system so that it can duplicate the functionality of the DS model. <p> The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT [63]. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover <ref> [100, 101] </ref>. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm [109, 110]. A further generalization was found at NASA Langley [73] 5 .
Reference: [101] <author> Rushby, John; and von Henke, Friedrich: </author> <title> Formal Verification of Algorithms for Critical Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 1, </volume> <month> Jan. </month> <year> 1993, </year> <pages> pp. 13-23. </pages>
Reference-contexts: The first step was completed by SRI International. The first such proof was accomplished during the design and verification of SIFT [63]. The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover <ref> [100, 101] </ref>. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm [109, 110]. A further generalization was found at NASA Langley [73] 5 .
Reference: [102] <author> Schneider, Fred B.: </author> <title> Understanding Protocols for Byzantine Clock Synchronization. </title> <institution> Cornell University, Ithaca, NY, </institution> <type> Technical Report 87-859, </type> <month> Aug. </month> <year> 1987. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [100, 101]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm <ref> [102] </ref> using Ehdm [109, 110]. A further generalization was found at NASA Langley [73] 5 .
Reference: [103] <author> Schrage, Michael: </author> <title> `When the Chips Are Down' Will Likely Be Heard More Often in Computing. </title> <booktitle> The Washington Post, </booktitle> <pages> pp. </pages> <address> B3. </address> <month> December 16, </month> <year> 1994. </year>
Reference-contexts: More insidious errors and harmful bugs are inevitable. That is the new reality <ref> [103] </ref>. For life critical systems, errors may mean disaster. <p> The main motivating factors for the formalization of the standard are 1) The creation of a formal specification against which an implementation (such as the AAMP5 [72]) could be verified; 2) The highly publicized floating-point divide flaw in the Intel Pentium (R) processor <ref> [103] </ref>. The formalization of the standard has brought to light the interesting and challenging issues of translating a natural language document into a logic based language in a precise, unambiguous, and accurate manner.
Reference: [104] <author> Schubert, Thomas; and Levitt, Karl: </author> <title> Verification of Memory Management Units. </title> <booktitle> In Second IFIP Conference on Dependable Computing For Critical Applications, </booktitle> <address> Tucson, Arizona, </address> <month> Feb. </month> <year> 1991, </year> <pages> pp. 115-123. </pages>
Reference-contexts: C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor [120], a floating-point coprocessor similar to the Intel 8087 but smaller [89, 88], a direct memory access (DMA) controller similar to the Intel 8237A but smaller [59], and a set of memory-management units <ref> [107, 104] </ref>. U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [105] <author> Schubert, Thomas; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Towards Composition of Verified Hardware Devices. </title> <type> NASA Contractor Report 187504, </type> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system <ref> [106, 105, 90, 58] </ref>. After demonstrating the feasibility of verifying standard hardware devices, Boeing applied the methodology to a proprietary hardware 20 device called the Processor Interface Unit (PIU) that is being developed for aeronautics and space applications [40]. Boeing and U.C. Davis also performed an assessment of the U.K.
Reference: [106] <author> Schubert, Thomas; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Formal Mechanization of Device Interactions With a Process Algebra. </title> <type> NASA Contractor Report 189644, </type> <month> Nov. </month> <year> 1992. </year> <month> 29 </month>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system <ref> [106, 105, 90, 58] </ref>. After demonstrating the feasibility of verifying standard hardware devices, Boeing applied the methodology to a proprietary hardware 20 device called the Processor Interface Unit (PIU) that is being developed for aeronautics and space applications [40]. Boeing and U.C. Davis also performed an assessment of the U.K.
Reference: [107] <author> Schubert, Thomas; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Formal Verification of a Set of Memory Management Units. </title> <type> NASA Contractor Report 189566, </type> <year> 1992. </year>
Reference-contexts: C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor [120], a floating-point coprocessor similar to the Intel 8087 but smaller [89, 88], a direct memory access (DMA) controller similar to the Intel 8237A but smaller [59], and a set of memory-management units <ref> [107, 104] </ref>. U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices [121, 119, 118], and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [108] <author> Shankar, N.; Owre, S.; and Rushby, J. M.: </author> <title> The PVS Proof Checker: A Reference Manual (Beta Release). </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Boeing 777 Flight Control Backdrive 4. Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS <ref> [85, 84, 108] </ref>. Several tutorial introductions to PVS are available [26, 11, 112, 16, 87, 111]. While formally specifying the microprocessor, two design errors were discovered in the microcode.
Reference: [109] <author> Shankar, Natarajan: </author> <title> Mechanical Verification of a Schematic Byzantine Clock Synchronization Algorithm. </title> <type> NASA Contractor Report 4386, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [100, 101]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm <ref> [109, 110] </ref>. A further generalization was found at NASA Langley [73] 5 .
Reference: [110] <author> Shankar, Natarajan: </author> <title> Mechanical Verification of a Generalized Protocol for Byzantine Fault-Tolerant Clock Synchronization. In Second International Symposium on Formal Techniques in Real Time and Fault Tolerant Systems, </title> <booktitle> vol. 571 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 217-236. </pages> <publisher> Springer Verlag, </publisher> <address> Nijmegen, The Netherlands, </address> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The proof was done by hand in the style of journal proofs. More recently this proof step was mechanically verified using the Ehdm theorem prover [100, 101]. In addition, SRI mechanically verified Schneider's clock synchronization paradigm [102] using Ehdm <ref> [109, 110] </ref>. A further generalization was found at NASA Langley [73] 5 .
Reference: [111] <author> Shankar, Natarajan: </author> <title> Verification of Real-Time Systems Using PVS. </title> <booktitle> In Courcoubetis [23], </booktitle> <pages> pp. 280-291. </pages>
Reference-contexts: Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [112] <author> Shankar, Natarajan; Owre, Sam; and Rushby, John: </author> <title> PVS Tutorial. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1993. </year> <title> Also appears in Tutorial Notes, </title> <booktitle> Formal Methods Europe '93: Industrial-Strength Formal Methods, </booktitle> <pages> pages 357-406, </pages> <address> Odense, Denmark, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Boeing 757,767 Autopilot Flight Director System (AFDS) 5. military and commercial Global Positioning (GPS) Systems. The first phase of the project consisted of the formal specification of the AAMP5 instruction set and microarchitecture using SRI's PVS [85, 84, 108]. Several tutorial introductions to PVS are available <ref> [26, 11, 112, 16, 87, 111] </ref>. While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor [72, 115].
Reference: [113] <author> Srivas, Mandayam; and Bickford, Mark: </author> <title> Verification of the FtCayuga Fault-Tolerant Microprocessor System (Volume 1: A Case Study in Theorem Prover-Based Verification). </title> <type> NASA Contractor Report 4381, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: A more efficient mechanical proof of the oral messages algorithm was also developed by SRI [95]. ORA also investigated the formal verification of Byzantine Generals algorithms. They focused on the practical implementation of a Byzantine-resilient communications mechanism between Mini-Cayuga micro-processors <ref> [113, 7] </ref>. The Mini-Cayuga is a small but formally verified microprocessor developed by ORA. It is a research prototype and has not been fabricated. The communications circuitry would serve as a foundation for a fault-tolerant architecture.
Reference: [114] <author> Srivas, Mandayam; and Bickford, Mark: </author> <title> Moving Formal Methods Into Practice: Verifying the FTPP Scoreboard: Phase 1 Results. </title> <type> NASA Contractor Report 189607, </type> <month> May </month> <year> 1992. </year>
Reference-contexts: During this project, CSDL became interested in the use of formal methods to increase confidence in their designs. ORA was given the task of formally specifying and verifying a key circuit (called the scoreboard) of the Fault-Tolerant Parallel Processor (FTPP) [48] in Clio <ref> [114] </ref>. The formal verification uncovered previously unknown design errors. When the scoreboard chip was fabricated, it worked without any error manifestation. It was the first time that CSDL produced a chip that worked "perfectly" on a first fabrication.
Reference: [115] <author> Srivas, Mandayam; and Miller, Steve: </author> <title> Formal Verification of an Avionics Microprocessor. </title> <type> NASA Contractor Report 4682, </type> <month> July </month> <year> 1995. </year>
Reference-contexts: While formally specifying the microprocessor, two design errors were discovered in the microcode. These errors were uncovered as a result of questions raised by the formal methods researchers at Collins and SRI while seeking to formally specify the behavior of the microprocessor <ref> [72, 115] </ref>. The Collins formal methods team believes that this effort has prevented two significant errors from going into the first fabrication of the microprocessor. The second phase of the project consisted of formally verifying the microcode of a representative subset of the AAMP5 instructions.
Reference: [116] <author> Walter, C. J.; Kieckhafer, R. M.; and Finn, A. M.: MAFT: </author> <title> A Multicomputer Architecture for Fault-Tolerance in Real-Time Control Systems. </title> <booktitle> In Real Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: We are currently funding two Phase II projects: VHDL Lightweight Tools, 3 This was done during the development of the [Multicomputer Architecture for Fault Tolerance (MAFT) system <ref> [116] </ref>. 4 This combination of algorithm, architecture, and fault model represents the best known compromise between economy and fault tolerance.
Reference: [117] <author> Wiener, Lauren Ruth: </author> <title> Digital Woes. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year> <note> ISBN 0-201-62609-8. </note>
Reference-contexts: They soak up however much time or money, however many people we throw at them. The results are only modestly reliable. Even after the most thorough and rigorous testing some bugs remain. We can never test all threads through the system with all possible inputs <ref> [117] </ref>. The hardware industry also faces serious difficulties, as evidenced by the recent design error in the Pentium floating-point unit.
Reference: [118] <author> Windley, Phillip J.: </author> <title> Abstract Hardware. </title> <booktitle> In ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <address> Miami, FL, </address> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices <ref> [121, 119, 118] </ref>, and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [119] <author> Windley, Phillip J.: </author> <title> The Formal Verification of Generic Interpreters. </title> <booktitle> In 28th Design Automation Conference, </booktitle> <address> San Franciso, CA, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices <ref> [121, 119, 118] </ref>, and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [120] <author> Windley, Phillip J.; Levitt, Karl; and Cohen, Gerald C.: </author> <title> Formal Proof of the AVM-1 Microprocessor Using the Concept of Generic Interpreters. </title> <type> NASA Contractor Report 187491, </type> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: The first phase of this project focused on the formal verification of "real" hardware devices using the HOL hardware verification methodology. With the assistance of a subcontract with U. C. Davis, Boeing partially verified a set of hardware devices, including a microprocessor <ref> [120] </ref>, a floating-point coprocessor similar to the Intel 8087 but smaller [89, 88], a direct memory access (DMA) controller similar to the Intel 8237A but smaller [59], and a set of memory-management units [107, 104]. U. C.
Reference: [121] <author> Windley, Phillip J.; Levitt, Karl; and Cohen, Gerald C.: </author> <title> The Formal Verification of Generic Interpreters. </title> <type> NASA Contractor Report 4403, </type> <month> Oct. </month> <year> 1991. </year> <month> 30 </month>
Reference-contexts: U. C. Davis also developed the generic-interpreter theory to aid in the formal specification and verification of hardware devices <ref> [121, 119, 118] </ref>, and a horizontal-integration theory for composing verified devices into a system [106, 105, 90, 58].
Reference: [122] <author> Young, William D.: </author> <title> Verifying the Interactive Convergence Clock Synchronization Algorithm Using the Boyer-Moore Theorem Prover. </title> <type> NASA Contractor Report 189649, </type> <month> Apr. </month> <year> 1992. </year> <month> 31 </month>
Reference-contexts: The design of a digital circuit to distribute clock values in support of fault-tolerant synchronization was completed by SRI and was partially verified. 6 CLI reproduced the SRI verification of the interactive convergence algorithm using the Boyer-Moore theorem prover <ref> [122] </ref>. NASA Langley researchers designed and implemented a fault-tolerant clock synchronization circuit capable of recovery from transient faults [75, 74, 73]. The top-level specification for the design is the Ehdm verification of Schneider's paradigm. The circuit was implemented with programmable logic devices (PLDs) and FOXI fiber optic communications chips [77].
References-found: 122

