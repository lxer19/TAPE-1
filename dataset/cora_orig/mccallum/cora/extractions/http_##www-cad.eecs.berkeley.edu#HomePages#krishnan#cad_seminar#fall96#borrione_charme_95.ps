URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall96/borrione_charme_95.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall96/fall96.html
Root-URL: http://www.cs.berkeley.edu
Email: email: Ayman.Wahba@imag.fr, Dominique.Borrione@imag.fr  
Title: Design Error Diagnosis in Sequential Circuits  
Author: Ayman Wahba and Dominique Borrione 
Address: BP. 53, 38041 Grenoble Cedex 9, France  
Affiliation: ARTEMIS Laboratory, Joseph Fourier University  
Abstract: We present a new diagnostic algorithm for localising design errors in sequential circuits. The specification and the implementation may have different number of state variables, and different state encoding. The algorithm is based on the new concept of possible next states describing the possible states of the circuit due to the existence of the error. Results obtained on benchmark circuits show that the error is always found, with an execution time proportional to the product of the circuit size, and the length of the test sequences used.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. C. Madre, O. Coudert, J. P. Billon, </author> <title> "Automating the Diagnosis and the Rectification of Design Errors with PRIAM," </title> <booktitle> Proceedings of ICCAD'89, </booktitle> <pages> pp. 30-33, </pages> <year> 1989. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 2. <author> K. A. Tamura, </author> <title> "Locating Functional Errors in Logic Circuits," </title> <booktitle> Proceedings of 26th Design Automation Conference (DAC'89), </booktitle> <pages> pp. 185-191, </pages> <year> 1989. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 3. <author> S. Y. Kuo, </author> <title> "Locating Logic Design Errors via Test Generation and Don't Care Propagation," </title> <booktitle> Proceedings of EURO-DAC'92, </booktitle> <pages> pp. 466-471, </pages> <year> 1992. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 4. <author> P. Y. Chung, Y. M. Wang, I. N. Hajj, </author> <title> "Diagnosis and Correction of Logic Design Errors in Digital Circuits," </title> <booktitle> Proceedings of 30th Design Automation Conference (DAC'93), </booktitle> <year> 1993. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 5. <author> A. M. Wahba, E. J. Aas, </author> <title> "Verification and Diagnosis of Digital Systems by Ternary Reasoning," </title> <booktitle> Lecture Notes on Computer Science No. </booktitle> <volume> 683, </volume> <publisher> Springer Verlag, </publisher> <pages> pp. 55-67, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 6. <author> Q. H. Zhang, C. Trullemans, </author> <title> "Logic Verification of Incomplete Functions and Design Error Location," </title> <booktitle> Lecture Notes on Computer Science No. </booktitle> <volume> 683, </volume> <publisher> Springer Verlag, </publisher> <pages> pp. 68-79, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 7. <author> M. Tomita, T. Yamamoto, F. Sumikawa, and K. Hirano, </author> <title> "Rectification of Multiple Logic Design Errors in Multiple Output Circuits," </title> <booktitle> Proceedings of the 31st Design Automation Conference(DAC'94), </booktitle> <year> 1994. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 8. <author> A. Wahba, and D. Borrione, </author> <title> "Design Error Diagnosis in Logic Circuits using Diagnosis-Oriented Test Patterns," </title> <institution> Research Report RR-940-I, ARTEMIS-IMAG, Grenoble, France, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits. <p> This operation is repeated until the error is found. Our method is the extension of previous works on combinational circuits <ref> [8] </ref>. Our basic assumption, which covers 72% of fully hand made design errors at logic level [13] is that the error is due to a single gate. <p> Difficulties in diagnosing sequential circuits: When we perform diagnosis on a combinational logic circuit, the circuit is simulated under the application of special purpose test patterns <ref> [8] </ref>. Under the assumption of a single error, there is only one source for the erroneous signal, and the majority of combinational diagnostic routines are based on this fact. When we deal with sequential circuits, instead of applying simple test vectors, we apply a sequence of vectors. <p> This method is very time consuming: if the circuit has NG gates, and g of them are in the search space, the processing time is proportional to N G fi g. A more efficient method exploits the diagnostic algorithms for combinational circuits presented in <ref> [8] </ref>. The circuit is treated as a combinational one as shown in Figure 2. <p> In the first time frame, the first test vector of the test sequence is applied to the primary inputs, and the initial state is applied to the present-state lines. The primary output values obtained from the implementation are then compared with those of the specification, and combinational diagnosis rules <ref> [8] </ref> are applied to get sets of suspected or correct gates depending on whether the values of primary outputs are correct or wrong.
Reference: 9. <author> Q. Zhang, </author> <title> "Logic Verification and Design Error Diagnosis for Combinational Circuits," </title> <type> Ph.D. Thesis, </type> <institution> Universite Catholique de Louvain, Belgium, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Exhibiting the existence of an error is assumed to be performed by verification tools. Research in this area is very limited, and little has been published in this domain. Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only <ref> [1, 2, 3, 4, 5, 6, 7, 8, 9] </ref>, but none of them could process sequential circuits.
Reference: 10. <author> M. Fujita, </author> <title> "Methods for Automatic Design Error Correction in Sequential Circuits," </title> <booktitle> Proceedings of European Conference on Design Automation with The Eu-ropean Event in ASIC Design, </booktitle> <year> 1993, </year> <pages> pp. 76-80, </pages> <year> 1993. </year>
Reference-contexts: Few automatic diagnosis systems are found in the literature, which are capable of diagnosing faults in combinational circuits only [1, 2, 3, 4, 5, 6, 7, 8, 9], but none of them could process sequential circuits. In <ref> [10] </ref> an algorithm is presented to diagnose errors in restricted classes of sequential circuits, namely, sequential circuits without feedback loops, or sequential circuits with feedback loops which repeat their behaviour after a fixed number of clock cycles (like counters, shift registers, serial/parallel converters, etc).
Reference: 11. <author> M. S. Abadir, J. Ferbuson, and T. E. Kirkland, </author> <title> "Logic Design Verification via Test Generation," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 138-148, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: The algorithm uses a greedy technique which does not always find a solution even if one exists. In this paper, we present a method for automatically locating and correcting single simple design errors <ref> [11] </ref> in synchronous sequential circuits. For clarity, we assume that the circuits are completely specified finite state machines.
Reference: 12. <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory, </title> <publisher> McGraw-Hill Book Edition, </publisher> <year> 1978. </year>
Reference-contexts: For clarity, we assume that the circuits are completely specified finite state machines. In principle, this does not affect the generality of our method since any uncompletely specified machine can be converted into a completely specified one by adding a dummy state to represent all unspecified states <ref> [12] </ref>. The implementation and the specification may have different number of states and state encoding.
Reference: 13. <author> E. J. Aas, K. A. Klingshheim, and T. Steen, </author> <title> "Quantifying Design Quality: A Model and Design Experiments," </title> <booktitle> Proc. EURO-ASIC'92, IEEE Computer Society, </booktitle> <pages> pp. 172-177, </pages> <year> 1992. </year>
Reference-contexts: This operation is repeated until the error is found. Our method is the extension of previous works on combinational circuits [8]. Our basic assumption, which covers 72% of fully hand made design errors at logic level <ref> [13] </ref> is that the error is due to a single gate. Single gate errors are classified into: * HYP-0: An extra/missing inverter. * HYP-1: A gate replacement of type 1. (OR $ AND, NOR $ NAND). * HYP-2: A gate replacement of type 2. (OR $ NAND, NOR $ AND).
Reference: 14. <author> M. A. Breuer and A. D. Friedman, </author> <title> Diagnosis and Reliable Design of Digital Systems, </title> <address> New York: </address> <publisher> Computer Science Press, </publisher> <year> 1976. </year>
Reference-contexts: The iterative logic array model of sequential circuits has been defined for sequential test generation to detect fabrication errors <ref> [14] </ref>, and is shown in Figure 2. Fig. 2. The iterative logic array model The combinational logic block of the original machine is repeated in each time frame. The inputs P I 1 , P I 2 , ...
Reference: 15. <author> F. Brglez, D. Bryan, and K. Kozminski, </author> <title> "Combinational Profiles of Sequential Benchmark Circuits," </title> <booktitle> Proceedings of International Symposium of Circuits and Systems (ISCAS'89), </booktitle> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: The other possible next states are obtained by complementing in ffi (S; P I) the values of the next state lines which are elements of the SNSL sets computed in step 2. Example 1. Possible Next States computation: The circuit shown in Figure 3, taken from the ISCAS'89 benchmarks <ref> [15] </ref>, has four inputs (G0; G1; G2; G3), one primary output G17, three next-state lines (G10; G11; G13), and three present-state lines (G5; G6; G7). <p> The package consists of three basic modules: a sequential test pattern generator, a sequential simulator, and a diagnoser. Experiments were made on the ISCAS'89 benchmark circuits <ref> [15] </ref>. In every experiment an error of random type was inserted at random location in the circuit, and then the diagnosis algorithm was applied.
Reference: 16. <author> A. Lioy, P. L. Montessoro, and S. Gai, </author> <title> "A Complexity Analysis of Sequential ATPG," </title> <booktitle> Proceedings of IEEE International Symposium of Circuits and Systems (ISCAS'89), </booktitle> <pages> pp. 1946-1949, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Table 1 shows the characteristics of each one of the tested circuits. The column headed loops per flip/flop indicates the average number of loops in which each flip/flop takes part. This value gives an idea about how strongly different loops are tied together. It was shown in <ref> [16] </ref> that when this value increases, the test pattern generation for detecting a given fault becomes more difficult. Column six gives the number of primary inputs which affect the state variables. The smaller this number, the longer the generated test sequences. Table 2 shows the obtained diagnosis results.
Reference: 17. <author> G. Cabodi, P. Camurati, S. Quer, </author> <title> "Symbolic Exploration of Large Circuits with Enhanced Forward/Backward Traversal," </title> <booktitle> Proceedings of EURO-DAC'94, </booktitle> <pages> pp. 22-27, </pages> <address> Grenoble, France, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: An efficient tool that can generate short error detecting sequences will significantly improve the performance. For instance, a BDD-based finite state machine verifier, that performs the symbolic state space traversal to check the equivalence between the specification and the implementation, would produce the shortest possible error detecting sequence (s) <ref> [17] </ref>. We do not possess such a tool that can process all the circuits of our benchmark set. This is the reason why, in our experimental software, we developed a prototype test pattern generator, which does not always guarantee shortest sequences.
Reference: 18. <author> D. Borrione, H. Eveking, </author> <title> "Formal Verification of Hardware Designs," </title> <journal> To appear in Journal of the Brazilian Computer Society, Special Issue on Electronic Design Automation, </journal> <month> Nov. </month> <year> 1995. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Thus, both the good and the erroneous circuits have the same state encoding. To show that our method also applies when the specification and the implementation have different state encodings, an additional benchmark is now discussed: the controller of an elevator, initially proposed by Hans Eveking <ref> [18] </ref>. The specification is given by a behavioral VHDL description, and the implementation, synthesized manually, is given by a netlist. The specification has 9 state variables. The implementation has 125 gates and 6 flip/flops. Both have the same 7 inputs and 3 outputs.
References-found: 18

