URL: ftp://ftp.isi.edu/pub/govindan/thesis.ps
Refering-URL: http://www.isi.edu/~govindan/papers.html
Root-URL: http://www.isi.edu
Note: Chapter 1  
Abstract-found: 0
Intro-found: 1
Reference: [Abb84] <author> C. Abbott, </author> <title> ``Efficient Editing of Digital Sound on Disk'', </title> <journal> J. Audio Eng. Soc. </journal> <volume> 32, </volume> <month> 6 (June </month> <year> 1984), </year> <month> 394. </month>
Reference-contexts: This slack time is used to service non-real-time disk requests. In the absence of such requests, CMFS uses the available slack time to compute a feasible schedule that adds to session work ahead. Other work has investigated more restricted versions of the problem. Abbott et al. <ref> [Abb84] </ref> and Park and English [PaE91] address performance issues without guaranteeing minimum data rates. Yu et al. [YS89] discuss the layout of interleaved data streams with different data rates on a compact disk for guaranteed-performance playback.
Reference: [ABB86] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian and M. Young, </author> <title> ``Mach: A New Kernel Foundation for UNIX Development'', </title> <booktitle> Proceedings of the 1986 Summer USENIX Conference, </booktitle> <address> Atlanta, Georgia, </address> <month> June 9-13, </month> <year> 1986, </year> <pages> 81-92. </pages>
Reference-contexts: The inter-network may also contain other hosts; file servers for storage, gateways for internetwork communication, compute servers for special-purpose processing and so on. Each host runs a general-purpose operating system (OS) such as UNIX [RiT74] or Mach <ref> [ABB86] </ref>. In such systems, the OS kernel runs in privileged mode and provides multiple, protected virtual address spaces (VASs) for user program execution. A thread of control in a VAS is called a process. Each VAS may contain one or more processes.
Reference: [AHH88] <author> A. Agarwal, J. Hennessy and M. Horowitz, </author> <title> ``Cache Performance of Operating System and Multiprogramming Workloads'', </title> <journal> Trans. Computer Systems 6,4 (Nov. </journal> <year> 1988), </year> <pages> 393-431. </pages>
Reference-contexts: Moreover, inter-procedural optimizations (e.g., avoiding register saves/restores) are difficult for system calls [Kar89]. Finally, kernel execution during a system call may incur more cache and TLB misses than user-level execution. Agarwal et al. <ref> [AHH88] </ref> show that caches perform poorly for OS memory references for two reasons: 1) OS code and data structures are larger than user code and data structures; they occupy more cache space and bringing the working sets into the cache needs more cache misses and 2) OS code loops have fewer
Reference: [AlL86] <author> L. S. Alger and J. H. Lala, </author> <title> ``A Real Time Operating System For a Nuclear Power Plant Computer'', </title> <booktitle> Proceedings of the 1986 IEEE Real-time Systems Symposium, </booktitle> <year> 1986, </year> <pages> 244-248. </pages>
Reference-contexts: In fact, the description in Section 4.3.6.2 can be adapted to design a split-level scheduler for preemptive priority scheduling with time-slicing at a given priority level. SLS is applicable for purposes other than CM. Process-control applications (e.g., <ref> [AlL86] </ref>) have scheduling requirements similar to those of CM. 4.3.7. UNIX Implementation of SLS We implemented split-level scheduling in SunOS 4.1 (a UNIX-like operating system) for the SPARCstation 1+. One constraint in modifying the kernel was to allow existing non-realtime user programs to execute without recompilation. <p> CM playback and record applications have only high-delay processes; hence compute servers and file servers may run multiple applications of this type and still benefit from these mechanisms. These mechanisms are applicable for purposes other than CM. Process control applications (e.g., <ref> [AlL86] </ref>) have scheduling requirements similar to those of CM. Split-level scheduling could be used with a time-slicing policy for a situation where a VAS contains both interactive and background processes. Memory-mapped streams could be used for access to a sequential disk file or a network stream connection.
Reference: [ALB89] <author> T. E. Anderson, H. M. Levy, B. N. Bershad and E. D. Lazowska, </author> <title> ``The Interaction of Architecture and Operating System Design'', </title> <booktitle> Proc. Third International Conf. on Architectural Support for Programming Languages and Operating Systems , Boston, </booktitle> <address> Massachusetts, </address> <month> Apr. </month> <pages> 3-6, </pages> <year> 1989, </year> <pages> 108-120. </pages>
Reference-contexts: Clark and Emer [ClE85] argue that TLBs perform poorly for similar reasons. With architectural trends towards RISC processors, system call costs have not decreased in proportion to increasing processor speeds <ref> [ALB89] </ref>. RISC processors such as the Sun SPARC [CCC90] and the MIPS R2000 [Kan87] have more than 64 registers, so call preparation costs are greater. Moreover, RISC processors have added new features, such as the register windows in SPARC, that reduce kernel trap performance.
Reference: [AHS90] <author> D. P. Anderson, R. G. Herrtwich and C. Schaefer, ``SRP: </author> <title> A Resource Reservation Protocol for Guaranteed-Performance Communication in the Internet'', </title> <type> Technical Report 90-006, </type> <institution> International Computer Science Institute, </institution> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Property (4) of an integrated CM framework implies that it is desirable to modify the Internet suite of protocols for CM data communication across networks. This section briefly reviews some work in this area. SRP <ref> [AHS90] </ref> is a resource reservation protocol for guaranteed-performance communication on the Internet. Using the CM-resource model as the basis for reserving network resources (network interfaces, gateways etc.), SRP sets up a compound session associated with the connection of a particular IP-based protocol (e.g., a TCP connection).
Reference: [ADH91] <author> D. P. Anderson, L. Delgrossi and R. G. Herrtwich, </author> <title> ``Process Structure and Scheduling in Real-Time Protocol Implementations'', </title> <booktitle> Proc. Kommunikation in Verteilten Systemen, </booktitle> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Again, a process in A hh may lock a resource which a process in A may need. Finally, a software interrupt may be handling a CM message when a message with a higher priority arrives. Solutions to these problems exist ([Fur91], [SRL90], <ref> [ADH91] </ref>). Further work is needed to implement these solutions on general-purpose OSs. Future research could also examine shared memory multiprocessor operating system support for integrated CM. Such research would first design a multiprocessor CPU scheduling policy which incorporates timeliness and allows workahead.
Reference: [AnK91] <author> D. P. Anderson and R. J. Kuivila, </author> <title> ``FORMULA: a Programming Language for Expressive Computer Music'', </title> <booktitle> IEEE Computer, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Processes use virtual preemption masking while holding short-duration busy-waiting locks and virtual signal masking while updating shared memory. Unlike virtual user-interrupt masking, virtual signal masking requires a new system call to handle pending signals after unmasking interrupts. FORMULA <ref> [AnK91] </ref> uses virtual signal masking to implement short critical sections. Heuser [Heu90] describes a mechanism similar to virtual preemption masking for avoiding thread 63 preemption during short critical sections. The Synthesis system [PM88] adopts a different approach to reduce the overhead of user/kernel interactions for thread scheduling.
Reference: [ABL91] <author> T. E. Anderson, B. N. Bershad, E. D. Lazowska and H. M. Levy, </author> <title> ``Scheduler Activations: Effective Kernel Support for the User-level Management of Parallelism'', </title> <booktitle> Proc. of the 13th ACM Symp. on Operating System Prin., </booktitle> <address> Pacific Grove, California, </address> <month> Oct. </month> <pages> 14-16, </pages> <year> 1991, </year> <pages> 95-109. </pages>
Reference-contexts: If an LWP is spin-waiting on a lock held by a suspended thread, it detects this condition from shared memory (which contains the execution state of threads) and then suspends itself. In scheduler activations <ref> [ABL91] </ref>, the kernel vectors to the ULS every event (e.g., thread preemption, thread blocking) that affects LWP scheduling. A scheduler activation is an execution context for an event vectored from kernel to user VAS.
Reference: [AGH91] <author> D. P. Anderson, R. Govindan and G. Homsy, </author> <title> ``Abstractions for Continuous Media in a Network Window System'', </title> <booktitle> International Conference on Multimedia Information Systems, </booktitle> <address> Singapore, </address> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Property (4) of the integrated CM framework (Section 2.1.2) implies that it is desirable to access CM I/O devices as well in a network-transparent, concurrent manner. Examples of work in this area include ACME <ref> [AGH91] </ref>, the DEC Audio Server [AHL91], and MuX [RBK92]. The ACME client-server protocol is based on the following abstractions: g Ropes, Strands, and CM Connections: A strand is a stream of audio or video data encoded in a byte stream. Each strand has a type representing the encoding scheme.
Reference: [AOGar] <author> D. P. Anderson, Y. Osawa and R. Govindan, </author> <title> ``Real-Time Disk Storage and Retrieval of Digital Audio and Video'', </title> <journal> Trans. Computer Systems, </journal> <note> to appear. </note>
Reference-contexts: A rope can be implemented without duplicating the constituent strands. A browsing application may annotate a collection of strands; in the Sun Multimedia File System, annotations can be stored as part of a rope. 2.3.2.2. Real-time Storage and Retrieval of CM files In the Continuous Media File System (CMFS) <ref> [AOGar] </ref>, applications may store or retrieve CM files in ``sessions''. Each session has a guaranteed minimum data rate. Multiple sessions, perhaps with different data rates, may coexist. CMFS also handles non-real-time traffic concurrently with real-time sessions.
Reference: [And] <author> D. P. Anderson, </author> <title> ``Meta-Scheduling for Continuous Media'', </title> <journal> ACM Trans. </journal> <note> Computer Systems (to appear), </note> . 
Reference-contexts: An application specifies its workload and the component reserves part of its capacity to provide the application with a performance guarantee. To formalize the reservation of component capacity, a model for expressing workload and processing is needed. In this section, we briefly describe the CM-Resource model <ref> [And] </ref>. In this model, the set of system components that handle CM data is decomposed into a set of resources. In general, a resource corresponds to a schedulable hardware device and its accompanying software driver. For example, a CPU and its scheduler might comprise a resource. <p> In the second phase, the application calls relax () at each resource from S n to S 1 , giving each resource its share of the delay. Anderson <ref> [And] </ref> discusses this algorithm in greater detail. 2.3.1.2. The Producer/Consumer Paradigm Another approach to the end-to-end scheduling problem uses the real-time producer/consumer paradigm [JeS90]. A CM application may be modeled as a directed graph in which the vertices represent processes and the edges represent message communication channels. <p> Some CM applications can tolerate unreliable delivery of CM data. These principles impact the design of policies and mechanisms in these general-purpose OSs. These policies and mechanisms may need to be reexamined in light of the real-time requirements of integrated CM applications. 3.2. Operating Systems Policies Anderson's solution <ref> [And] </ref> to the end-to-end scheduling problem (Section 2.3.1.1) divides an application's end-to-end delay among the different system components that handle CM data. One such component is a CM task (e.g., the client task in Figure 2.1). <p> Deadline/Workahead Scheduling The deadline/workahead CPU scheduling (DWS) policy is designed for CM tasks <ref> [And] </ref>. Each CM task has one or more processes. In DWS, processes are classified as either real-time or non-real-time. There are two classes of non-real-time processes: interactive (those requiring fast response) and background (those requiring high throughput). CM tasks reserve sessions (Section 2.3.1.1) with the CPU scheduler's resource manager.
Reference: [AHL91] <author> S. Angebranndt, R. L. Hyde, D. H. Luong, N. Siravara and C. Schmandt, </author> <title> ``Integrating Audio and Telephony in a Distributed Workstation Environment'', </title> <booktitle> Proceedings of the 1991 Summer USENIX Conference, </booktitle> <address> Dallas, TX, </address> <month> Jan. 21-25 </month> <year> 1991, </year> <pages> 419-434. </pages>
Reference-contexts: Property (4) of the integrated CM framework (Section 2.1.2) implies that it is desirable to access CM I/O devices as well in a network-transparent, concurrent manner. Examples of work in this area include ACME [AGH91], the DEC Audio Server <ref> [AHL91] </ref>, and MuX [RBK92]. The ACME client-server protocol is based on the following abstractions: g Ropes, Strands, and CM Connections: A strand is a stream of audio or video data encoded in a byte stream. Each strand has a type representing the encoding scheme.
Reference: [ABL89] <author> B. Arons, C. Binding, K. Lantz and C. Schmandt, </author> <title> ``The VOX Audio Server'', Multimedia '89: </title> <booktitle> 2nd IEEE COMSOC International Multimedia Communications Workshop, </booktitle> <address> Ottawa, Ontario, </address> <month> April 20-23, </month> <year> 1989. </year>
Reference-contexts: Other approaches to incorporating audio and video in computer systems are possible. In one approach, audio and video data is in analog form. However, audio and video storage and communication are under computer control. Examples include VOX <ref> [ABL89] </ref> and IMAL [LuD87]. In another approach, CM data is in digital form and may be communicated over a digital communication network, but does not pass through the main memory of the computer. Examples include Pandora [Hop90] and the Xerox Etherphone [ZTS89].
Reference: [Att79] <author> C. R. Attanasio, </author> <title> ``Virtual Control Storage Security Measures in VM/370'', </title> <journal> IBM Systems Journal 18,1 (1979), </journal> <pages> 93-110. </pages>
Reference-contexts: Efficient Stream Communication Shared memory is used in DEMOS [BHM77] and in VM/370 <ref> [Att79] </ref> to avoid copying overhead during data transfer. However, this approach does not reduce control overhead; synchronization is necessary for each transfer. MMSs differ from memory-mapped files [RDH80] in a number of ways. An MMS provides sequential access to possibly non-persistent data. Memory-mapped files provide random access to persistent objects.
Reference: [BaM91] <author> A. Banerjea and B. A. Mah, </author> <title> ``The Real-time Channel Administration Protocol'', </title> <booktitle> Proc. of the Second International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year> <month> 70 </month>
Reference-contexts: Data sent on this connection is then transmitted according to the throughput and delay requirements of the compound session. The Tenet real-time protocol suite <ref> [BaM91] </ref> is a connection-oriented suite of network and transport protocols for real-time wide area communication. The Tenet approach provides for the establishment of real-time channels that guarantee minimum throughput and bounded network delay. The basis for resource reservation is similar to the CM-Resource Model; the traffic parametrization is different.
Reference: [BHM77] <author> F. Baskett, J. H. Howard and J. T. Montague, </author> <title> ``Task Communication in DEMOS'', </title> <booktitle> Proc. of the 6th ACM Symp. on Operating System Prin., </booktitle> <address> West Lafayette, Indiana, </address> <month> Nov. </month> <pages> 16-18, </pages> <year> 1977, </year> <pages> 23-31. </pages>
Reference-contexts: Efficient Stream Communication Shared memory is used in DEMOS <ref> [BHM77] </ref> and in VM/370 [Att79] to avoid copying overhead during data transfer. However, this approach does not reduce control overhead; synchronization is necessary for each transfer. MMSs differ from memory-mapped files [RDH80] in a number of ways. An MMS provides sequential access to possibly non-persistent data.
Reference: [BAL91] <author> B. N. Bershad, T. E. Anderson, E. D. Lazowska and H. M. Levy, </author> <title> ``User-level Interprocess Communication for Shared Memory Multiprocessors'', </title> <journal> Trans. Computer Systems 9, </journal> <month> 2 (May </month> <year> 1991), </year> <pages> 175-198. </pages>
Reference-contexts: Wolf [Wol91] uses a double-buffering technique for KU and UK stream transfers. After each buffer is processed, a user/kernel interaction is necessary. This approach may be inefficient for low end-to-end delay CM streams. Bershad et al. <ref> [BAL91] </ref> describe a user-level communication mechanism for RPCs. When a client LWP makes an RPC, the ULS switches to another LWP in the same task. The RPC is added to a message queue shared pairwise between the application VAS and the server VAS.
Reference: [ClE85] <author> D. W. Clark and J. S. Emer, </author> <title> ``Performance of the VAX-11/780 Translation Buffer: Simulation and Measurement'', </title> <journal> Trans. Computer Systems 3, </journal> <month> 1 (Feb. </month> <year> 1985), </year> <pages> 31-62. </pages>
Reference-contexts: Clark and Emer <ref> [ClE85] </ref> argue that TLBs perform poorly for similar reasons. With architectural trends towards RISC processors, system call costs have not decreased in proportion to increasing processor speeds [ALB89].
Reference: [Coh78] <author> D. Cohen, </author> <title> ``A Protocol for Packet-Switching Voice Communication'', </title> <booktitle> Computer Networks 2 (1978), </booktitle> <pages> 320-331. </pages>
Reference-contexts: Delay requirements depend on the nature of the application. File playback may be able to tolerate delays in the range of 1-2 seconds. However, audio teleconferencing (Section 2.2.2) requires an end-to-end delay in the range of 100-200 milliseconds <ref> [Coh78] </ref>. For applications such as distributed music rehearsal (a special case of audio teleconferencing), the required delay may be 20 milliseconds or less [Loy85]. 2.3.
Reference: [CCC90] <institution> SPARC RISC User's Guide, Cypress Semiconductor, </institution> <address> San Jose, CA, </address> <year> 1990. </year>
Reference-contexts: Clark and Emer [ClE85] argue that TLBs perform poorly for similar reasons. With architectural trends towards RISC processors, system call costs have not decreased in proportion to increasing processor speeds [ALB89]. RISC processors such as the Sun SPARC <ref> [CCC90] </ref> and the MIPS R2000 [Kan87] have more than 64 registers, so call preparation costs are greater. Moreover, RISC processors have added new features, such as the register windows in SPARC, that reduce kernel trap performance.
Reference: [ELS88] <author> J. Edler, J. Lipkis and E. Schonberg, </author> <title> ``Process Management For Highly Parallel UNIX Systems'', </title> <booktitle> Proc. of USENIX Workshop on Unix and Supercomputers, </booktitle> <month> September </month> <year> 1988, </year> <pages> 1-17. </pages>
Reference-contexts: As a result, the approaches cannot correctly prioritize LWPs across threads that may be running in different address spaces but contending for the same processor. They also cannot exploit policy-specific information (e.g., LWP priorities) to reduce user-kernel interactions. Symunix II <ref> [ELS88] </ref> also uses user/kernel shared memory for masking interrupts and preemption. In Symunix II, parallel applications are implemented as a collection of UNIX processes communicating through shared memory. Processes use virtual preemption masking while holding short-duration busy-waiting locks and virtual signal masking while updating shared memory.
Reference: [Fox91] <author> E. A. Fox, </author> <title> ``Advances in Interactive Digital Multimedia Systems'', </title> <booktitle> IEEE Computer, </booktitle> <month> Oct. </month> <year> 1991, </year> <pages> 9-21. </pages>
Reference-contexts: Uncompressed full-motion NTSC video requires a data rate of 40 Mbps. DVI edit-level video [Gre92] compresses this to about 1.2 Mbps. The MPEG standard <ref> [Fox91] </ref> for motion video compression achieves a maximum data rate of 1.5 Mbps for NTSC quality video and associated audio. However, analogous future technology for HDTV video may produce data rates in the tens of Mbps.
Reference: [Fur91] <author> B. Furht, </author> <title> Real-time UNIX Systems: A Design and Application Guide, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference: [GeC92] <author> J. Gemmell and S. Christodoulakis, </author> <booktitle> ``Principles of Delay-Sensitive Multimedia Data Storage and Retrieval'', ACM TOIS 10, </booktitle> <month> 1 (Jan. </month> <year> 1992), </year> <pages> 51-90. </pages>
Reference-contexts: Abbott et al. [Abb84] and Park and English [PaE91] address performance issues without guaranteeing minimum data rates. Yu et al. [YS89] discuss the layout of interleaved data streams with different data rates on a compact disk for guaranteed-performance playback. Gemmell and Christodoulakis <ref> [GeC92] </ref> describe a file system supporting multiple audio channel playback with concurrent non-real-time traffic. The channels must have the same (constant) data rate and must start at the same time. Finally, Rangan and Vin [RaV91] describe a system that combines disk input and display-device output for multiple data streams.
Reference: [Get86] <author> J. Gettys, </author> <title> ``Problems Implementing Window Systems in UNIX'', </title> <booktitle> Proceedings of the 1986 Winter USENIX Conference, </booktitle> <address> Denver, Colorado, </address> <month> January 15-17, </month> <year> 1986, </year> <pages> 89-97. </pages>
Reference: [GiG88] <author> D. K. Gifford and N. Glasser, </author> <title> ``Remote Pipes and Procedures for Efficient Distributed Computation'', </title> <journal> Trans. Computer Systems 6, </journal> <month> 3 (Aug. </month> <year> 1988), </year> <pages> 258-283. </pages>
Reference-contexts: This paradigm is not well-suited to continuous media (more generally, it may not be well-suited to future distributed systems in which speed-of-light delays dominate throughput limits). MMSs provide efficient local asynchronous communication. Example of related work include the asynchronous RPC proposed by Gifford <ref> [GiG88] </ref> and the dataflow model of Synthesis [PM88]. In UNIX-type systems, I/O and IPC performance is limited by the overhead of data copying. Systems such as Mach, DASH and Topaz have attacked this problem using techniques such as VM remapping and shared memory [RTY88, ScB90, TzA91].
Reference: [Gre92] <author> J. L. Green, </author> <title> ``The Evolution of DVI System Software'', </title> <journal> Comm. of the ACM 35, </journal> <month> 1 (Jan. </month> <year> 1992), </year> <pages> 53-67. </pages>
Reference-contexts: DVI <ref> [Gre92] </ref> is an example of a system that provides this functionality. (2) Users can run multiple applications concurrently, with no adverse effects from contention for hardware resources. (3) Application tasks can communicate CM data across the network. 5 (4) The essential elements (e.g., network-transparent window systems, network file access) of the <p> The data rates for digital audio can vary from 64 Kbps (for telephone quality audio) to 1.4 Mbps (for 44 KHz stereo CD-quality audio) and 1.536 Mbps (for 48 KHz stereo DAT quality audio) [Wat88]. Uncompressed full-motion NTSC video requires a data rate of 40 Mbps. DVI edit-level video <ref> [Gre92] </ref> compresses this to about 1.2 Mbps. The MPEG standard [Fox91] for motion video compression achieves a maximum data rate of 1.5 Mbps for NTSC quality video and associated audio. However, analogous future technology for HDTV video may produce data rates in the tens of Mbps.
Reference: [HBJ91] <author> J. Hanko, D. Berry, T. Jacobs and D. Steinberg, </author> <title> ``Integrated Multimedia at Sun Microsystems'', </title> <booktitle> Proc. of the Second International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The kernel then guarantees, using the real-time producer/consumer paradigm, that the delay requirements of all tasks are met and that no shared resource is accessed simultaneously by more than one task. 2.3.1.3. The Sun Approach Sun Microsystems' HRV project <ref> [HBJ91] </ref> takes a different approach to the end-to-end scheduling problem. In their approach, an application specifies its delay and throughput requirements, but no attempt is made to reserve resources for the application's lifetime. Instead, their approach attempts to satisfy each application's requirements until device capacity overload is encountered.
Reference: [Heu90] <author> M. Heuser, </author> <title> ``An Implementation of Real-time Thread Synchronization'', </title> <booktitle> Proceedings of the 1990 Summer USENIX Conference, </booktitle> <address> Anaheim, </address> <month> June 11-15, </month> <year> 1990, </year> <pages> 97-105. </pages>
Reference-contexts: Processes use virtual preemption masking while holding short-duration busy-waiting locks and virtual signal masking while updating shared memory. Unlike virtual user-interrupt masking, virtual signal masking requires a new system call to handle pending signals after unmasking interrupts. FORMULA [AnK91] uses virtual signal masking to implement short critical sections. Heuser <ref> [Heu90] </ref> describes a mechanism similar to virtual preemption masking for avoiding thread 63 preemption during short critical sections. The Synthesis system [PM88] adopts a different approach to reduce the overhead of user/kernel interactions for thread scheduling.
Reference: [Hop90] <author> A. Hopper, </author> <title> ``Pandora An Experimental System for Multimedia Applications'', Operating System Review 24, </title> <month> 2 (Apr. </month> <year> 1990), </year> <pages> 19-34, </pages> <publisher> ACM SIGOPS. </publisher>
Reference-contexts: Examples include VOX [ABL89] and IMAL [LuD87]. In another approach, CM data is in digital form and may be communicated over a digital communication network, but does not pass through the main memory of the computer. Examples include Pandora <ref> [Hop90] </ref> and the Xerox Etherphone [ZTS89]. In the integrated CM framework, CM data can be manipulated algorithmically in the same way as other data. Relative to these other approaches, an integrated CM system is therefore more flexible and general.
Reference: [IKN91] <author> S. Inohara, K. Kato, A. Narita and T. Matsuda, </author> <title> ``A Thread Facility based on User/kernel Cooperation in the XERO Operating System'', </title> <booktitle> Proceedings of the 1991 Compsac, </booktitle> <address> Tokyo, Japan, </address> <year> 1991. </year>
Reference-contexts: User/kernel shared memory is used to efficiently request timer user-interrupts, to specify a stack on which user-interrupts are to be delivered, and for user-interrupt masking. User-level LWPs in XERO <ref> [IKN91] </ref> are managed in a similar manner. User/kernel shared memory is used by the ULS to regulate kernel action when a thread blocks or is preempted. The kernel delivers user-interrupts when a thread returns from preemption.
Reference: [JeS90] <author> K. Jeffay and F. D. Smith, </author> <title> ``Designing a Workstation-Based Conferencing System Using the Real-time Producer/Consumer Paradigm'', </title> <booktitle> Proc. of the First International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Berkeley, California, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Anderson [And] discusses this algorithm in greater detail. 2.3.1.2. The Producer/Consumer Paradigm Another approach to the end-to-end scheduling problem uses the real-time producer/consumer paradigm <ref> [JeS90] </ref>. A CM application may be modeled as a directed graph in which the vertices represent processes and the edges represent message communication channels. Each channel defines a producer/consumer relation between two processes. The application specifies the minimum rate of messages on the channel.
Reference: [JSS91] <author> K. Jeffay, D. L. Stone and F. D. Smith, </author> <title> ``Kernel Support for Live Digital Audio and Video'', </title> <booktitle> Proc. of the Second International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The input to the decision procedure includes the worst case message processing time on each channel (the actual delay in Section 2.3.1.1). This approach has been used in the construction of a desktop audio and video conferencing system on top of a real-time operating system called YARTOS <ref> [JSS91] </ref>. The kernel provides two basic abstractions: tasks and resources. A task represents a thread of control; a task may need to access one or more resources during its execution. An application workload is specified as a set of tasks and resources.
Reference: [Jef] <author> K. Jeffay, </author> <title> ``The Real-Time Producer/Consumer Paradigm: Towards Verifiable Real-time Computations'', </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Washington. </institution> <note> Technical Report #89-09-15. </note>
Reference-contexts: In other words, the emission of messages by the producer defines ticks of a discrete time clock; if the paradigm is obeyed, the consumer appears as fast as the producer. Jeffay <ref> [Jef] </ref> describes a decision procedure for determining whether, for a given set of processes and processing resources, all pairs of interconnecting processes are guaranteed to adhere to the paradigm.
Reference: [Kan87] <author> G. Kane, </author> <title> MIPS R2000 RISC Architecture, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: Clark and Emer [ClE85] argue that TLBs perform poorly for similar reasons. With architectural trends towards RISC processors, system call costs have not decreased in proportion to increasing processor speeds [ALB89]. RISC processors such as the Sun SPARC [CCC90] and the MIPS R2000 <ref> [Kan87] </ref> have more than 64 registers, so call preparation costs are greater. Moreover, RISC processors have added new features, such as the register windows in SPARC, that reduce kernel trap performance. In SPARC, the hardware ensures that one register window is available for the trap handler on exceptions.
Reference: [Kar89] <author> P. Karger, </author> <title> ``Using Registers To Optimize Cross-Domain Call Performance'', </title> <booktitle> Proc. Third International Conf. on Architectural Support for Programming Languages and Operating 71 Systems , Boston, </booktitle> <address> Massachusetts, </address> <month> Apr. </month> <pages> 3-6, </pages> <year> 1989, </year> <pages> 194-204. </pages>
Reference-contexts: A system call has indirect costs as well. Because a system call involves a cross-domain interaction, the system call handler must copy and check parameters to guard against application errors. Moreover, inter-procedural optimizations (e.g., avoiding register saves/restores) are difficult for system calls <ref> [Kar89] </ref>. Finally, kernel execution during a system call may incur more cache and TLB misses than user-level execution.
Reference: [Lan84] <author> K. Lantz, </author> <title> ``Structured Graphics for Distributed Systems'', </title> <journal> ACM Trans. on Graphics 3, </journal> <month> 1 (Jan. </month> <year> 1984). </year>
Reference: [LMK89] <author> S. J. Leffler, M. K. McKusick, M. J. Karels and J. S. Quarterman, </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Most such policies use the following criteria: 1) fast response for interactive processes, 2) high throughput for background processes and 3) fairness. For instance, the round-robin policy is often used to satisfy fairness. Thus, the UNIX time-slicing policy <ref> [LMK89] </ref> assigns processes to one of many different priority levels; at a given level, processes are scheduled round robin. One or more of the above criteria may be contrary to CM process delay requirements. Suppose we are given a set of CM processes, each with its delay and throughput requirements. <p> The QIO facility in the VMS operating system provides such an interface [LeE89]. With such an interface, a message transfer typically involves a system call to initiate the transfer followed by an asynchronous event (e.g., a UNIX signal <ref> [LMK89] </ref>) to signal transfer completion. When implemented using these approaches, CM tasks may incur the overhead of user/kernel interactions (by which user programs access system functions for process scheduling and message transfer). <p> Kernel timer management also detects sleeping/critical or workahead/critical LWP state changes. Finally, we modified the UNIX signal mechanism to implement user-interrupts. In SunOS, the signal trampoline code <ref> [LMK89] </ref> calls sigcleanup () after returning from the user-interrupt handler. Sigcleanup () modifies the signal mask and restores SPARC register windows [SSS87]. To simplify our implementation of user-interrupts, we assumed that real-time processes do not use register windows. <p> We do not specify how the CM program obtains this identifier. For UU MMSs, in particular, we do not specify the handshaking steps needed to obtain the identifier for a user-user IPC connection. The socket create-bind-connect paradigm in 4.3BSD UNIX <ref> [LMK89] </ref> is one possible approach.
Reference: [LeE89] <author> H. M. Levy and R. H. Eckhouse, </author> <title> Computer Programming and Architecture: The VAX, </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1989. </year>
Reference-contexts: A blocking system call (e.g., on an I/O operation) by a LWP suspends all activity in the VAS. To avoid that, LWPs use a kernel interface that provides asynchronous, non-blocking message transfers. The QIO facility in the VMS operating system provides such an interface <ref> [LeE89] </ref>. With such an interface, a message transfer typically involves a system call to initiate the transfer followed by an asynchronous event (e.g., a UNIX signal [LMK89]) to signal transfer completion.
Reference: [LiL73] <author> C. L. Liu and J. W. Layland, </author> <title> ``Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment'', </title> <journal> J. ACM 20, </journal> <volume> 1 (1973), </volume> <pages> 47-61. </pages>
Reference-contexts: Results in real-time systems show that policies which use preemption on quantum expiration (i.e., use round-robin scheduling) may reduce the schedulability of such a set of processes (i.e., may not be able to satisfy its real-time requirements) <ref> [LiL73, TNR90] </ref>. 3.2.1. Deadline/Workahead Scheduling The deadline/workahead CPU scheduling (DWS) policy is designed for CM tasks [And]. Each CM task has one or more processes. In DWS, processes are classified as either real-time or non-real-time.
Reference: [Loy85] <author> G. Loy, </author> <title> ``Designing an Operating Environment for a Realtime Performance Processing System'', </title> <booktitle> Proceedings of the 1985 International Computer Music Conference, Burnaby, </booktitle> <address> B.C., Canada, </address> <year> 1985, </year> <pages> 9-13. </pages>
Reference-contexts: However, audio teleconferencing (Section 2.2.2) requires an end-to-end delay in the range of 100-200 milliseconds [Coh78]. For applications such as distributed music rehearsal (a special case of audio teleconferencing), the required delay may be 20 milliseconds or less <ref> [Loy85] </ref>. 2.3. Survey of Integrated CM Systems To realize an integrated CM framework, we need to satisfy the four properties described in Section 2.1.2 in the existing discrete media framework. Equivalently, we need to satisfy properties (1) and (4), and satisfy the delay and throughput requirements listed in Section 2.2.3.
Reference: [LuD87] <author> L. F. Ludwig and D. F. Dunn, </author> <title> ``Laboratory for Emulation and Study of Integrated and Coordinated Media Communication'', </title> <booktitle> Proc. of ACM SIGCOMM 87, </booktitle> <address> Stowe, Vermont, </address> <month> Aug. </month> <year> 1987, </year> <pages> 283-291. </pages>
Reference-contexts: Other approaches to incorporating audio and video in computer systems are possible. In one approach, audio and video data is in analog form. However, audio and video storage and communication are under computer control. Examples include VOX [ABL89] and IMAL <ref> [LuD87] </ref>. In another approach, CM data is in digital form and may be communicated over a digital communication network, but does not pass through the main memory of the computer. Examples include Pandora [Hop90] and the Xerox Etherphone [ZTS89].
Reference: [MSL91] <author> B. D. Marsh, M. L. Scott, T. J. LeBlanc and E. P. Markatos, </author> <title> ``First-Class User Level Threads'', </title> <booktitle> Proc. of the 13th ACM Symp. on Operating System Prin., </booktitle> <address> Pacific Grove, California, </address> <month> Oct. </month> <pages> 14-16, </pages> <year> 1991, </year> <pages> 110-121. </pages>
Reference-contexts: In Psyche, ULSs schedule LWPs on kernelsupported threads. The kernel delivers user-interrupts to notify the ULS of events that affect LWPs in the user VAS, such as blocking cross-domain invocations <ref> [MSL91] </ref>. Unlike SLS, kernel threads are time-sliced on physical processors. To avoid undesirable interactions between thread scheduling and LWP scheduling, the kernel warns the ULS of impending thread preemption; a ULS can use this warning to avoid acquiring spin locks, for instance.
Reference: [MaP89] <author> H. Massalin and C. Pu, </author> <title> ``Threads and Input/Output in the Synthesis Kernel'', </title> <booktitle> Proc. of the 12th ACM Symp. on Operating System Prin., </booktitle> <address> Litchfield Park, Arizona, </address> <month> Dec. </month> <pages> 3-6, </pages> <year> 1989, </year> <pages> 191-201. </pages>
Reference-contexts: The shared queue is similar to a UU-type MMS (Chapter 5); in the latter, processor donation is determined completely by the deadlines associated with messages in the MMS. The stream I/O model in Synthesis <ref> [MaP89] </ref> provides an alternate approach to efficient stream communication. Kernel code synthesis reduces the cost of system calls to transfer data. Producer/consumer synchronization overhead is reduced by using optimistic synchronization techniques. 8.3. OS Support for CM The CPU scheduling approach in Synthesis [MaP90] represents an alternative to deadline/workahead scheduling.
Reference: [MaP90] <author> H. Massalin and C. Pu, </author> <title> ``Fine-Grain Adaptive Scheduling using Feedback'', </title> <booktitle> Computing Systems 3, </booktitle> <month> 1 (Winter </month> <year> 1990). </year>
Reference-contexts: The stream I/O model in Synthesis [MaP89] provides an alternate approach to efficient stream communication. Kernel code synthesis reduces the cost of system calls to transfer data. Producer/consumer synchronization overhead is reduced by using optimistic synchronization techniques. 8.3. OS Support for CM The CPU scheduling approach in Synthesis <ref> [MaP90] </ref> represents an alternative to deadline/workahead scheduling. The Synthesis model is based on rate-control feedback. Processes make no calls to indicate their temporal progress; instead, the kernel adjusts time-slice quanta based on queue lengths. This approach is well-suited to some situations (e.g., audio DSP with little slack CPU time).
Reference: [McA88] <author> J. McCormack and P. Asente, </author> <title> ``Using the X Toolkit or How to Write a Widget'', </title> <booktitle> Proceedings of the 1988 Summer USENIX Conference, </booktitle> <address> San Franscisco, </address> <month> June 20-24, </month> <year> 1988, </year> <pages> 1-14. </pages>
Reference: [MoB89] <author> J. C. Mogul and A. Borg, </author> <title> ``The Effect of Context Switches on Cache Performance'', </title> <booktitle> Proc. Third International Conf. on Architectural Support for Programming Languages and Operating Systems , Boston, </booktitle> <address> Massachusetts, </address> <month> Apr. </month> <pages> 3-6, </pages> <year> 1989, </year> <pages> 75-84. </pages>
Reference-contexts: A mapping switch results in a change in program locality; the indirect cost is the cost of repopulating cache and TLB contents in this new locality. Depending on the cache parameters, this cost may be in the tens or hundreds of microseconds <ref> [MoB89] </ref>. The indirect costs of mapping switches are not decreasing in proportion to increasing processor speeds [MoB89]. Processor speeds are improving, but memory access times have not been increasing proportionately. Thus, cache-miss penalties are becoming relatively greater. 3.4. <p> Depending on the cache parameters, this cost may be in the tens or hundreds of microseconds <ref> [MoB89] </ref>. The indirect costs of mapping switches are not decreasing in proportion to increasing processor speeds [MoB89]. Processor speeds are improving, but memory access times have not been increasing proportionately. Thus, cache-miss penalties are becoming relatively greater. 3.4.
Reference: [MRT90] <author> S. J. Mullender, G. Rossum, A. S. Tanenbaum, R. Renesse and H. Staveren, </author> <title> ``Amoeba: A Distributed Operating System for the 1990s'', </title> <booktitle> Computer 23, </booktitle> <month> 5 (May </month> <year> 1990), </year> <pages> 44-53, </pages> <publisher> IEEE. </publisher>
Reference-contexts: Related Trends in Operating Systems Our work is related to several directions (such as migration of OS kernel functionality to the user-level, asynchronous communication, and efficient local data transfer) of current OS research. Modern operating systems such as Amoeba <ref> [MRT90] </ref>, Chorus [RAA], and Mach shift functionality from kernel to user level to improve software structure. In contrast, this work shifts functionality to user level to increase performance. Most existing operating systems use request/reply communication; examples include UNIX-type system calls, RPC, and object invocation.
Reference: [NYM91] <author> J. Nakajima, M. Yazaki and H. Matsumoto, </author> <title> ``Multimedia/Realtime Extensions for the Mach Operating System'', </title> <booktitle> Proceedings of the 1991 Summer USENIX Conference, </booktitle> <address> Dallas, TX, </address> <month> Jan. 21-25 </month> <year> 1991, </year> <pages> 183-197. </pages>
Reference-contexts: This approach is well-suited to some situations (e.g., audio DSP with little slack CPU time). In general, end-to-end rate-control feedback (Section 2.3.1.3) may be more appropriate for integrated CM. Nakajima et al. <ref> [NYM91] </ref> describe extensions to Mach for integrated CM. Asynchronous event notifications are preemptively scheduled earliest-deadline first. This mechanism supports development of user-level device drivers for CM devices. The performance implications of these mechanisms for CM applications is not discussed.
Reference: [NoK91] <author> J. D. Northcutt and E. M. Kuerner, </author> <title> ``System Support for Time-Critical Applications'', </title> <booktitle> Proc. of the Second International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Instead, their approach attempts to satisfy each application's requirements until device capacity overload is encountered. At that point, their resource schedulers negotiate with applications to arrange for graceful degradation from overload. An application constructs an end-to-end schedulable entity using two abstractions: transducers and conduits <ref> [NoK91] </ref>. A transducer is similar to a source or sink resource in Section 2.3.1.1, while a conduit represents a handler resource. An application may compose conduits in serial and in parallel to obtain compound conduits (similar to compound sessions).
Reference: [PaE91] <author> A. Park and P. </author> <title> English, ``A Variable Rate Strategy for Retrieving Audio Data From Secondary Storage'', </title> <booktitle> Proceedings of the International Conference on Multimedia Information Systems, </booktitle> <address> Singapore, </address> <month> Jan. </month> <year> 1991, </year> <pages> 135-146. </pages>
Reference-contexts: In the absence of such requests, CMFS uses the available slack time to compute a feasible schedule that adds to session work ahead. Other work has investigated more restricted versions of the problem. Abbott et al. [Abb84] and Park and English <ref> [PaE91] </ref> address performance issues without guaranteeing minimum data rates. Yu et al. [YS89] discuss the layout of interleaved data streams with different data rates on a compact disk for guaranteed-performance playback. Gemmell and Christodoulakis [GeC92] describe a file system supporting multiple audio channel playback with concurrent non-real-time traffic.
Reference: [PM88] <author> C. Pu, H. Massalin and J. Ioannidis, </author> <title> ``The Synthesis Kernel'', </title> <booktitle> Computing Systems 1, 1 (1988), </booktitle> <pages> 11-32. </pages>
Reference-contexts: FORMULA [AnK91] uses virtual signal masking to implement short critical sections. Heuser [Heu90] describes a mechanism similar to virtual preemption masking for avoiding thread 63 preemption during short critical sections. The Synthesis system <ref> [PM88] </ref> adopts a different approach to reduce the overhead of user/kernel interactions for thread scheduling. This approach uses kernel code synthesis to generate specialized kernel routines for thread context switches. <p> MMSs provide efficient local asynchronous communication. Example of related work include the asynchronous RPC proposed by Gifford [GiG88] and the dataflow model of Synthesis <ref> [PM88] </ref>. In UNIX-type systems, I/O and IPC performance is limited by the overhead of data copying. Systems such as Mach, DASH and Topaz have attacked this problem using techniques such as VM remapping and shared memory [RTY88, ScB90, TzA91].
Reference: [RaV91] <author> P. V. Rangan and H. M. Vin, </author> <title> ``Designing File Systems For Digital Audio and Video'', </title> <booktitle> Proc. of the 13th ACM Symp. on Operating System Prin., </booktitle> <address> Pacific Grove, California, </address> <month> Oct. </month> <year> 1991, </year> <pages> 81-94. </pages>
Reference-contexts: Gemmell and Christodoulakis [GeC92] describe a file system supporting multiple audio channel playback with concurrent non-real-time traffic. The channels must have the same (constant) data rate and must start at the same time. Finally, Rangan and Vin <ref> [RaV91] </ref> describe a system that combines disk input and display-device output for multiple data streams. They study admission control under the assumption that sessions have equal data rates. 2.3.3.
Reference: [RTY88] <author> R. Rashid, A. Tevanian, M. Young, D. Golub, R. Baron, D. Black, W. Bolosky and J. Chew, </author> <title> ``Machine-Independent Virtual Memory Management for Paged Uniprocessor and Multiprocessor Architectures'', </title> <journal> IEEE Trans. on Computers, </journal> <month> Aug. </month> <year> 1988, </year> <pages> 896-908. 72 </pages>
Reference-contexts: In UNIX-type systems, I/O and IPC performance is limited by the overhead of data copying. Systems such as Mach, DASH and Topaz have attacked this problem using techniques such as VM remapping and shared memory <ref> [RTY88, ScB90, TzA91] </ref>. The MMS mechanism is complementary to this work; it attacks the overhead of control rather than data movement. 65 Chapter 9 CONCLUDING REMARKS This chapter concludes the dissertation. Section 9.1 lists its major contributions and Section 9.2 summarizes the major results.
Reference: [RDH80] <author> D. D. Redell, Y. K. Dalal, T. R. Horsley, H. C. Lauer, W. C. Lynch, P. R. McJones, H. G. Murray and S. C. Purcell, </author> <title> ``Pilot: An Operating System for a Personal Computer'', </title> <journal> Comm. of the ACM 23, </journal> <month> 2 (Feb. </month> <year> 1980), </year> <pages> 81-92. </pages>
Reference-contexts: Efficient Stream Communication Shared memory is used in DEMOS [BHM77] and in VM/370 [Att79] to avoid copying overhead during data transfer. However, this approach does not reduce control overhead; synchronization is necessary for each transfer. MMSs differ from memory-mapped files <ref> [RDH80] </ref> in a number of ways. An MMS provides sequential access to possibly non-persistent data. Memory-mapped files provide random access to persistent objects.
Reference: [RBK92] <author> E. Rennison, R. Baker, D. D. Kim and Y. Lim, ``MuX: </author> <title> An X-coexistent Time-Based Multimedia I/O Server'', The X Resource 1 (Jan. </title> <booktitle> 1992), </booktitle> <pages> 213-231, </pages> <publisher> O'Reilly and Associates, Inc.. </publisher>
Reference-contexts: Property (4) of the integrated CM framework (Section 2.1.2) implies that it is desirable to access CM I/O devices as well in a network-transparent, concurrent manner. Examples of work in this area include ACME [AGH91], the DEC Audio Server [AHL91], and MuX <ref> [RBK92] </ref>. The ACME client-server protocol is based on the following abstractions: g Ropes, Strands, and CM Connections: A strand is a stream of audio or video data encoded in a byte stream. Each strand has a type representing the encoding scheme.
Reference: [RiT74] <author> D. M. Ritchie and K. Thompson, </author> <title> ``The UNIX Time-Sharing System'', </title> <journal> Comm. of the ACM 17, </journal> <month> 7 (July </month> <year> 1974), </year> <pages> 365-375. </pages>
Reference-contexts: The inter-network may also contain other hosts; file servers for storage, gateways for internetwork communication, compute servers for special-purpose processing and so on. Each host runs a general-purpose operating system (OS) such as UNIX <ref> [RiT74] </ref> or Mach [ABB86]. In such systems, the OS kernel runs in privileged mode and provides multiple, protected virtual address spaces (VASs) for user program execution. A thread of control in a VAS is called a process. Each VAS may contain one or more processes.
Reference: [RKD85] <author> J. M. Roth, G. S. Kendall and S. L. Decker, </author> <title> ``A Network Sound System for UNIX'', </title> <booktitle> Proceedings of the 1985 International Computer Music Conference, Burnaby, </booktitle> <address> B.C., Canada, </address> <month> Aug. </month> <pages> 19-22, </pages> <year> 1985, </year> <pages> 61-67. </pages>
Reference-contexts: Structural Issues in CM File Storage Structural issues for CM files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system [TeS88], the Sun Multimedia File System [StL89], and the Northwestern Network Sound System <ref> [RKD85] </ref>. In the Etherphone system, a sequence of continuously recorded video frames or audio samples is called a strand. Editing applications may create ropes: a rope describes a collection of related strands and how they are synchronized relative to each other. Ropes permit serial or parallel temporal composition of strands.
Reference: [RAA] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois, P. Leonard and W. Neuhauser, </author> <title> ``CHORUS Distributed Operating Systems'', </title> <booktitle> Computing Systems 1, </booktitle> <pages> 4 , 305-370. </pages>
Reference-contexts: Related Trends in Operating Systems Our work is related to several directions (such as migration of OS kernel functionality to the user-level, asynchronous communication, and efficient local data transfer) of current OS research. Modern operating systems such as Amoeba [MRT90], Chorus <ref> [RAA] </ref>, and Mach shift functionality from kernel to user level to improve software structure. In contrast, this work shifts functionality to user level to increase performance. Most existing operating systems use request/reply communication; examples include UNIX-type system calls, RPC, and object invocation.
Reference: [SGK85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh and B. Lyon, </author> <title> ``Design and Implementation of the Sun Network File System'', </title> <booktitle> Proceedings of the 1985 Summer USENIX Conference, </booktitle> <address> Portland, Oregon, </address> <month> June 11-14, </month> <year> 1985, </year> <pages> 119-130. </pages>
Reference-contexts: In our model of the existing software framework, application tasks may reside on different nodes and communicate over the internetwork. A standard protocol suite is used for network communication (e.g, the Internet protocol suite [Tan81]). Network file servers (e.g., NFS <ref> [SGK85] </ref>) provide distributed data storage and retrieval. Network-transparent window systems (e.g. X11 [ScG86] or NeWS [SSS87]) manage the human/computer interface elements such as the display, the keyboard and the mouse. 2.1.2.
Reference: [SaB75] <author> A. R. Saxena and T. H. Bredt, </author> <title> ``A Structured Specification of a Hierarchical Operating System'', </title> <journal> SIGPLAN Notices Notices, </journal> <month> June </month> <year> 1975, </year> <pages> 310-318. </pages>
Reference-contexts: It then places this work in the context of recent trends in OS research. 8.1. Efficient Process Scheduling Two-level process scheduling is not a new idea <ref> [SaB75] </ref>. However, its performance implications have only been recently investigated. Such investigation has focused on efficient multiprocessor operating system support for user-level management of parallelism. SLS is related to three approaches in this area; Psyche's [SLM90] first-class user LWPs, the XERO OS's threads package, and scheduler activations.
Reference: [ScG86] <author> R. W. Scheifler and J. Gettys, </author> <title> ``The X Window System'', </title> <journal> ACM Transactions on Graphics 5, </journal> <month> 2 (Apr. </month> <year> 1986), </year> <pages> 79-109. </pages>
Reference-contexts: A standard protocol suite is used for network communication (e.g, the Internet protocol suite [Tan81]). Network file servers (e.g., NFS [SGK85]) provide distributed data storage and retrieval. Network-transparent window systems (e.g. X11 <ref> [ScG86] </ref> or NeWS [SSS87]) manage the human/computer interface elements such as the display, the keyboard and the mouse. 2.1.2.
Reference: [ScB90] <author> M. Schroeder and M. Burrows, </author> <title> ``Performance of Firefly RPC'', </title> <journal> Trans. Computer Systems 8, </journal> <volume> 1 (Dec. </volume> <pages> 3-6, </pages> <year> 1989), </year> <pages> 1-17. </pages> <booktitle> also Proc. of the 12th ACM Symp. on Operating System Prin.. </booktitle>
Reference-contexts: In UNIX-type systems, I/O and IPC performance is limited by the overhead of data copying. Systems such as Mach, DASH and Topaz have attacked this problem using techniques such as VM remapping and shared memory <ref> [RTY88, ScB90, TzA91] </ref>. The MMS mechanism is complementary to this work; it attacks the overhead of control rather than data movement. 65 Chapter 9 CONCLUDING REMARKS This chapter concludes the dissertation. Section 9.1 lists its major contributions and Section 9.2 summarizes the major results.
Reference: [SLM90] <author> M. L. Scott, T. J. LeBlanc, B. D. Marsh, T. G. Becker, C. Dubnicki, E. P. Markatos and N. G. Smithline, </author> <title> ``Implementation Issues For the Psyche Multiprocessor Operating System'', </title> <booktitle> Computing Systems 3, 1 (Winter 1990), </booktitle> <pages> 101-137. </pages>
Reference-contexts: Efficient Process Scheduling Two-level process scheduling is not a new idea [SaB75]. However, its performance implications have only been recently investigated. Such investigation has focused on efficient multiprocessor operating system support for user-level management of parallelism. SLS is related to three approaches in this area; Psyche's <ref> [SLM90] </ref> first-class user LWPs, the XERO OS's threads package, and scheduler activations. In Psyche, ULSs schedule LWPs on kernelsupported threads. The kernel delivers user-interrupts to notify the ULS of events that affect LWPs in the user VAS, such as blocking cross-domain invocations [MSL91].
Reference: [SRL90] <author> L. Sha, R. Rajkumar and J. P. Lehoczky, </author> <title> ``Priority Inheritance Protocols: An Approach to Real-Time Synchronization'', </title> <journal> IEEE Trans. on Computers 39, </journal> <month> 9 (Sep. </month> <year> 1990), </year> <pages> 1175-1185. </pages>
Reference-contexts: Again, a process in A hh may lock a resource which a process in A may need. Finally, a software interrupt may be handling a CM message when a message with a higher priority arrives. Solutions to these problems exist ([Fur91], <ref> [SRL90] </ref>, [ADH91]). Further work is needed to implement these solutions on general-purpose OSs. Future research could also examine shared memory multiprocessor operating system support for integrated CM. Such research would first design a multiprocessor CPU scheduling policy which incorporates timeliness and allows workahead.
Reference: [StL89] <author> D. Steinberg and T. Learmont, </author> <title> ``The Multimedia File System'', </title> <booktitle> Proc. 1989 International Computer Music Conference, </booktitle> <address> Columbus, Ohio, </address> <month> Nov. </month> <pages> 2-3, </pages> <year> 1989, </year> <pages> 307-311. </pages>
Reference-contexts: Section 2.3.2.2 surveys work in real-time storage and retrieval of CM data from disk. 2.3.2.1. Structural Issues in CM File Storage Structural issues for CM files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system [TeS88], the Sun Multimedia File System <ref> [StL89] </ref>, and the Northwestern Network Sound System [RKD85]. In the Etherphone system, a sequence of continuously recorded video frames or audio samples is called a strand. Editing applications may create ropes: a rope describes a collection of related strands and how they are synchronized relative to each other.
Reference: [SSS87a] <institution> NeWS Manual, Sun Microsystems, Inc., </institution> <month> March </month> <year> 1987. </year>
Reference: [SSS87b] <institution> The SPARC Architecture Manual, Sun Microsystems, Inc., Mountain View, </institution> <address> CA, </address> <month> Aug. </month> <year> 1987. </year>
Reference: [SSS90] <editor> SPEC newsletter benchmark results, </editor> <booktitle> Systems Performance Evaluation Cooperative, </booktitle> <year> 1990. </year>
Reference-contexts: The path costs obtained were unreasonably high, since the Mach 2.5 threads implementation was not optimized. To obtain more realistic estimates for these costs, we conducted the same experiments on a DECstation 3100 running Mach 3.0 (the SPARCstation 1+ and the DECstation 3100 have approximately the same SPEC marks <ref> [SSS90] </ref>). The results were used as upper bounds for the actual costs of the paths on a SPARCstation. The cost of the corresponding path for SLS LWPs plus the cost of a null system call determined a lower bound for these path costs.
Reference: [Tan81] <author> A. S. Tanenbaum, </author> <title> ``Network Protocols'', </title> <journal> Computing Surveys 13, </journal> <month> 4 (Dec. </month> <year> 1981), </year> <pages> 453-489. </pages>
Reference-contexts: In our model of the existing software framework, application tasks may reside on different nodes and communicate over the internetwork. A standard protocol suite is used for network communication (e.g, the Internet protocol suite <ref> [Tan81] </ref>). Network file servers (e.g., NFS [SGK85]) provide distributed data storage and retrieval. Network-transparent window systems (e.g. X11 [ScG86] or NeWS [SSS87]) manage the human/computer interface elements such as the display, the keyboard and the mouse. 2.1.2.
Reference: [TeS88] <author> D. B. Terry and D. C. Swinehart, </author> <title> ``Managing Stored Voice in the Etherphone System'', </title> <journal> Trans. Computer Systems 6, </journal> <month> 1 (Feb. </month> <year> 1988), </year> <pages> 3-27. </pages>
Reference-contexts: Moreover, applications may concurrently retrieve multiple files from disk. Section 2.3.2.2 surveys work in real-time storage and retrieval of CM data from disk. 2.3.2.1. Structural Issues in CM File Storage Structural issues for CM files (sharing, parallel composition, annotations, etc.) have been addressed in the Xerox Etherphone system <ref> [TeS88] </ref>, the Sun Multimedia File System [StL89], and the Northwestern Network Sound System [RKD85]. In the Etherphone system, a sequence of continuously recorded video frames or audio samples is called a strand.
Reference: [TNR90] <author> H. Tokuda, T. Nakajima and P. Rao, </author> <title> ``Real-Time Mach: Towards a Predictable Real-Time System'', </title> <booktitle> Proc. of the USENIX Mach Workshop, </booktitle> <month> Oct. </month> <year> 1990, </year> <pages> 73-82. </pages>
Reference-contexts: Results in real-time systems show that policies which use preemption on quantum expiration (i.e., use round-robin scheduling) may reduce the schedulability of such a set of processes (i.e., may not be able to satisfy its real-time requirements) <ref> [LiL73, TNR90] </ref>. 3.2.1. Deadline/Workahead Scheduling The deadline/workahead CPU scheduling (DWS) policy is designed for CM tasks [And]. Each CM task has one or more processes. In DWS, processes are classified as either real-time or non-real-time.
Reference: [Top90] <editor> C. Topolcic, ``ST-II'', </editor> <booktitle> Proc. of the First International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> Berkeley, California, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: The basis for resource reservation is similar to the CM-Resource Model; the traffic parametrization is different. The Stream Protocol (ST) is an internet layer connection-oriented protocol for real-time conferencing applications. ST allows higher level protocols to set up streams <ref> [Top90] </ref>. A stream is a multi-way connection spanning all participants of a conference. Applications specify stream characteristics such as average and burst throughput, round-trip delay, delay variance and error rate. Gateways and networks select multicast routes and perform network resource allocation.
Reference: [TzA91] <author> S. Tzou and D. P. Anderson, </author> <title> ``The Performance of Message-Passing Using Restricted Virtual Memory Remapping'', </title> <journal> Software Practice& Experience 21, </journal> <month> 3 (March </month> <year> 1991). </year>
Reference-contexts: In UNIX-type systems, I/O and IPC performance is limited by the overhead of data copying. Systems such as Mach, DASH and Topaz have attacked this problem using techniques such as VM remapping and shared memory <ref> [RTY88, ScB90, TzA91] </ref>. The MMS mechanism is complementary to this work; it attacks the overhead of control rather than data movement. 65 Chapter 9 CONCLUDING REMARKS This chapter concludes the dissertation. Section 9.1 lists its major contributions and Section 9.2 summarizes the major results.
Reference: [Wat88] <author> J. Watkinson, </author> <title> The Art of Digital Audio, </title> <publisher> Focal Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: This rate is determined by the data representation. The data rates for digital audio can vary from 64 Kbps (for telephone quality audio) to 1.4 Mbps (for 44 KHz stereo CD-quality audio) and 1.536 Mbps (for 48 KHz stereo DAT quality audio) <ref> [Wat88] </ref>. Uncompressed full-motion NTSC video requires a data rate of 40 Mbps. DVI edit-level video [Gre92] compresses this to about 1.2 Mbps. The MPEG standard [Fox91] for motion video compression achieves a maximum data rate of 1.5 Mbps for NTSC quality video and associated audio.
Reference: [Wol91] <author> L. C. Wolf, </author> <title> ``A Runtime Environment for Multimedia Communication'', </title> <booktitle> Proc. of the Second International Workshop on Network and Operating Systems Support for Digital Audio 73 and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Since data may be non-persistent, MMS avoid page faults for accessing data, instead relying on explicit producer/consumer synchronization. Also, since access is sequential, data is ``released'' explicitly and page replacement algorithms are not needed. Wolf <ref> [Wol91] </ref> uses a double-buffering technique for KU and UK stream transfers. After each buffer is processed, a user/kernel interaction is necessary. This approach may be inefficient for low end-to-end delay CM streams. Bershad et al. [BAL91] describe a user-level communication mechanism for RPCs. <p> Nakajima et al. [NYM91] describe extensions to Mach for integrated CM. Asynchronous event notifications are preemptively scheduled earliest-deadline first. This mechanism supports development of user-level device drivers for CM devices. The performance implications of these mechanisms for CM applications is not discussed. Wolf <ref> [Wol91] </ref> describes a runtime environment for CM communication on the AIX operating system. Threads running in kernel space perform protocol processing of CM data received over the network. The CM stream is subsequently transferred to user space using the mechanism described in Section 8.2.
Reference: [YS89] <author> C. Yu, W. Sun, D. Bitton, R. Bruno and J. Tullis, </author> <title> ``Efficient Placement of Audio Data on Optical Disks for Real-Time Applications'', </title> <journal> Comm. of the ACM 32, </journal> <volume> 7 (1989), </volume> <pages> 862-871. </pages>
Reference-contexts: Other work has investigated more restricted versions of the problem. Abbott et al. [Abb84] and Park and English [PaE91] address performance issues without guaranteeing minimum data rates. Yu et al. <ref> [YS89] </ref> discuss the layout of interleaved data streams with different data rates on a compact disk for guaranteed-performance playback. Gemmell and Christodoulakis [GeC92] describe a file system supporting multiple audio channel playback with concurrent non-real-time traffic.

References-found: 78

