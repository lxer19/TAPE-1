URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-011.ps
Refering-URL: http://www.cs.umass.edu/~potter/LC/spring96.doc.html
Root-URL: 
Title: A Multimedia Server on the Spring Real-Time System 1  
Author: Hiroyuki Kaneko, John A. Stankovic 
Address: LGRC, Box 34610 Amherst MA 01003-4610  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: UMass Computer Science Technical Report 96-11 January 1996 Abstract An integrated platform which is capable of meeting requirements of both traditional real-time control processing and multimedia processing has enormous potential for accommodating various kinds of new applications. However, few, if any, research or commercial systems successfully provide architectural and OS mechanisms which can efficiently support both deterministic hard real-time computation and less deterministic multimedia soft real-time computation. In this paper, we propose a multimedia server executing on the Spring real-time system to provide different classes of guarantee to support both types of processing. Using a planning based scheduler, the Spring system is a multiprocessor real-time system which was developed to satisfy the requirements of deterministic guarantees for hard real-time tasks. Adding a multimedia server enables Spring to also support multiple periodic multimedia streams with a capability for QOS graceful degradation of the multimedia streams during system overload. In this paper we address realistic system implementation issues and develop multimedia server scheduling algorithms. Our performance evaluation demonstrates both that a multimedia server algorithm based on a flexible, proportional allocation scheme provides the best performance and that simple iterative scheduling is adequate to handle graceful degradation of the multimedia streams. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aloke Guha, Allalaghatta Pavan, Jonathan Liu, Ajay Rastogi, Todd Steeves, </author> <title> Supporting Real-Time and Multimedia Applications on the Mercuri Testbed, </title> <journal> IEEE Journal on Selected Areas In Communications, </journal> <volume> Vol. 13, No. 4, </volume> <month> May </month> <year> 1995, </year> <pages> pp. 749-763. </pages>
Reference-contexts: EDF also exhibits non-deterministic behavior in an overloaded situation. Accommodating both multimedia and traditional real-time applications is therefore a challenging research issue. However, little attention has been paid to the coexistence of these applications. For example, the Mercuri system <ref> [1] </ref> is one of the few research projects targeting this objective, where data from remote video cameras are transferred through an ATM network and displayed in X windows, but they fail to present any provision in terms of real-time scheduling and end up with providing best effort services.
Reference: [2] <author> D. P. Anderson, </author> <title> Metascheduling for Continuous Media, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 11, No. 3, </volume> <month> Aug. </month> <year> 1993, </year> <pages> pp. 226-252. </pages>
Reference: [3] <author> Kevin Jeffay and David Bennett, </author> <title> A Rate-Based Execution Abstraction For Multimedia Computing, </title> <booktitle> Proc. 5th Intl. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, New Hampshire, </address> <month> April 18-21, </month> <year> 1995, </year> <pages> pp. 67-78. </pages>
Reference: [4] <author> Daniel I. Katcher, Kevin A. Kettler, and Jay K. Stronsnider, </author> <title> Real-Time Operating Systems for Multimedia Processing, </title> <booktitle> Proceedings of Fifth Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <month> May 4-5, </month> <year> 1995. </year>
Reference-contexts: In some of the ongoing research which uses multiprocessor approaches, some of the processors are dedicated to multimedia processing and others to traditional real-time processing e.g., <ref> [4] </ref>. Although this approach can provide good isolation of one type of processing from another, it can not achieve high utilization of system resources in a dynamic environment.
Reference: [5] <author> Douglas Niehaus, John A. Stankovic, Krithi Ramamritham, </author> <title> The Spring System Description Language, </title> <type> UMASS CS TR 93-01, </type> <month> January </month> <year> 1991. </year>
Reference-contexts: The output of this task set generator is a file written in the Spring System Description Language (SDL) <ref> [5] </ref>. The file describes all the task information such as timing and resource usage specifications needed by the Spring scheduler. It is compiled by the Spring compiler and fed into the simulator. The task generator also places multimedia stream information into this file.
Reference: [6] <author> Douglas Niehaus, John A. Stankovic, Krithi Ramamritham, </author> <title> A Real-Time Systems Description Language, </title> <booktitle> IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> May </month> <year> 1995. </year>
Reference: [7] <author> Krithi Ramamritham, John A. Stankovic, Perng-Fei Shiah. </author> <title> Efficient Scheduling Algorithms for Real-time Multiprocessor Systems, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 1, No. 2, </volume> <month> April </month> <year> 1990, </year> <pages> pp. 184-194. </pages>
Reference-contexts: As a result, we generate tasks according to a very tight schedule without leaving any usable time units on the n processors between 0 and SC. However, there may be some empty time units in the m resources. In the original simulation introduced in <ref> [7] </ref>, the deadline of each task in the task set was chosen randomly between the task set's SC and (1 + R) fl SC, where R is a simulation parameter indicating the tightness of the deadlines.
Reference: [8] <author> John A. Stankovic, Krithi Ramamritham, </author> <title> The Spring Kernel: A New Paradigm For Real-Time Systems, </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1991, </year> <pages> pp. 62-72. </pages>
Reference-contexts: This paper presents a mechanism to provide the coexistence of multimedia applications and traditional hard real-time applications using the Spring system <ref> [8] </ref>. The Spring system is a distributed real-time system in which tasks are scheduled in a heuristic manner with their resource and precedence constraints being taken into account.
Reference: [9] <author> Ralf Steinmetz, </author> <title> Analyzing the Multimedia Operating System, </title> <booktitle> IEEE Multimedia, Spring 1995, </booktitle> <pages> pp. 68-84. </pages>
Reference-contexts: For example, the rate monotonic (RM) and the earliest deadline first (EDF) scheduling algorithms are most widely used in the on-going multimedia research systems and testbeds <ref> [9] </ref>. However, the RM algorithm can handle only periodic tasks and does not work well in a dynamic environment. EDF is optimal only for a single processor and does not scale to multiprocessor systems. EDF also exhibits non-deterministic behavior in an overloaded situation.
Reference: [10] <author> Yukinobu Taniguchi, Akihito Akutsu, Yoshinobu Tonomura and Hiroshi Hamada, </author> <title> An Intuitive and Efficient Access Interface to Real-Time Incoming 19 Video Based on Automatic Indexing, </title> <booktitle> Proceedings of ACM Multimedia, </booktitle> <year> 1995, </year> <pages> pp. 25-33. </pages>
Reference-contexts: In this type of application, input data have to be manipulated or filtered by software rather than hardware because large extent of flexibility in design is required. Similar applications can be seen in [14] and <ref> [10] </ref>. It is possible to make use of these techniques for traditional real-time systems. For example, we may want to know if there is any intruder in an isolated area by filtering the data from the remote monitoring camera with a motion detection filter.
Reference: [11] <author> David L. Tennenhouse, Joel Adam, David Carver, Henry Houh, Michael Ismert, Chiristopher Lindblad, Bill Stasior, David Weatherall, David Bacher and Theresa Chang, </author> <title> A Software-Oriented Approach to the Design of Media Processing Environments, </title> <booktitle> Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pp. 435-444, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: It is also possible to capture one of the scenes out of the video stream and store it on the disk for later use. Many companies are pursuing this 2 application including Honeywell and Mitsubishi. Second, computer-participative multimedia applications are another emerging trend in multimedia research <ref> [11] </ref>. <p> For example, a system in which a program watches television news shows and maintains an online database of stories organized by subject is introduced in <ref> [11] </ref>. In this type of application, input data have to be manipulated or filtered by software rather than hardware because large extent of flexibility in design is required. Similar applications can be seen in [14] and [10]. It is possible to make use of these techniques for traditional real-time systems. <p> We can create and choose any types of filters depending on the application if we have filtering libraries as presented in <ref> [11] </ref>. It will not take long until available processing power will become powerful enough to do the filtering as a software process.
Reference: [12] <author> Carl A. Waldspurger and William E. Weihl, </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Mangement, </title> <booktitle> Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <month> November </month> <year> 1994. </year>
Reference: [13] <author> Raj Yavatkar and K. Lakshman, </author> <title> A CPU Scheduling Algorithm for Continuous Media Applications, </title> <booktitle> Proc. 5th Intl. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, New Hampshire, </address> <month> April 18-21, </month> <year> 1995. </year> <pages> pp. 223-226. </pages>
Reference-contexts: The amount of execution time needed to play back a single frame varies a lot and even the average execution time needed over a group of pictures shows considerable variations as a result of changes in scene or video contents <ref> [13] </ref>. The adaptable scheduling introduced by the proportional allocation scheme is well suited for these various application requirements. Another multimedia task assignment approach is to assign each multimedia task instance individually to a server instance. We call this approach an individual allocation.
Reference: [14] <author> H. J. Zhang, C. Y. Low, S. W. Smoliar and J. H. Wu, </author> <title> Video Parcing, Retrieval and Browsing: An Integrated and Content-Based Solution, </title> <booktitle> Proceedings of ACM Multimedia, </booktitle> <year> 1995, </year> <pages> pp. 15-24. 20 </pages>
Reference-contexts: In this type of application, input data have to be manipulated or filtered by software rather than hardware because large extent of flexibility in design is required. Similar applications can be seen in <ref> [14] </ref> and [10]. It is possible to make use of these techniques for traditional real-time systems. For example, we may want to know if there is any intruder in an isolated area by filtering the data from the remote monitoring camera with a motion detection filter.
References-found: 14

