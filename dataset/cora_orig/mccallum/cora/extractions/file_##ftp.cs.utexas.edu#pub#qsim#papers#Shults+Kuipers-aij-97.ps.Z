URL: file://ftp.cs.utexas.edu/pub/qsim/papers/Shults+Kuipers-aij-97.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/qr/abstracts-tl.html
Root-URL: 
Email: (bshults@math.utexas.edu)  (kuipers@cs.utexas.edu)  
Title: Proving properties of continuous systems: qualitative simulation and temporal logic  
Author: Benjamin Shults Benjamin J. Kuipers 
Date: 1997.  
Note: To appear, Artificial Intelligence Journal,  
Address: Mathematics  Austin, Austin, TX 78712 USA  Department  Austin, Austin, TX 78712 USA  
Affiliation: Department of  University of Texas at  Computer Science  University of Texas at  
Abstract: We demonstrate an automated method for proving temporal logic statements about solutions to ordinary differential equations (ODEs), even in the face of an incomplete specification of the ODE. The method combines an implemented, on-the-fly, model-checking algorithm for statements in the temporal logic CTL* [3, 7, 8] with the output of the qualitative simulation algorithm QSIM [13, 16]. Based on the QSIM Guaranteed Coverage Theorem, we prove that for certain CTL* statements, , if is true for the temporal structure produced by QSIM, then a corresponding temporal statement, 0 , holds for the solution of any ODE consistent with the qualitative differential equation (QDE) that QSIM used to generate the temporal structure.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur and T. Henzinger. </author> <title> Real-time logics: conplexity and expressiveness. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 35-77, </pages> <year> 1993. </year>
Reference-contexts: Their specific application was to chemical process control. TL makes it possible to apply a more complex temporal logic (CTL*) to continuous-time control systems, and indeed to dynamical systems in general. Alur and Henzinger <ref> [1] </ref> use a logic called Metric Temporal Logic (MTL) to check properties of discrete event systems. Metric Temporal Logic is, strictly speaking, not as expressive as CTL*. <p> According to this definition, sine is reasonable on any interval <ref> [a; 1) for a 2 R, but not over [a; 1] </ref>. Tangent is reasonable over [=2; +=2], but sin (1=x) and x sin (1=x) are not reasonable over (0; a) for 0 &lt; a &lt; 1. C Proofs Proof of Lemma 1. <p> According to this definition, sine is reasonable on any interval [a; 1) for a 2 R, but not over <ref> [a; 1] </ref>. Tangent is reasonable over [=2; +=2], but sin (1=x) and x sin (1=x) are not reasonable over (0; a) for 0 &lt; a &lt; 1. C Proofs Proof of Lemma 1.
Reference: [2] <author> Daniel Berleant and Benjamin Kuipers. </author> <title> Combined qualitative and numerical simulation with Q3. </title> <editor> In Boi Faltings and Peter Struss, editors, </editor> <booktitle> Recent Advances in Qualitative Physics. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The propositional part of the temporal language includes propositions which allow the construction of formulas containing numerical information. This can be used in conjunction with the numerical extensions to QSIM|Q2 [14], Q3 <ref> [2] </ref> and NSIM [12]|in order to prove numerical properties of physical systems. In Section 2 we describe and define the temporal-logic language CTL* and present some basic definitions and facts which will be needed in our main theorem. <p> Kuipers' Qualitative Reasoning [16].) Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 12, 14, 16] </ref>. In this case, QSIM propagates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> The proposition in-range is sensible only in the states of behavior trees generated from a QDE containing some quantitative information. Simulation with quantitative information is handled by extensions to QSIM such as Q2 [14], Q3 <ref> [2] </ref> and NSIM [12]. The numbers referred to in these expressions are 21 extended real numbers: they may be -inf or +inf as well as real values. <p> Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [10, 9]. There are three programs|Q2 [14], Q3 <ref> [2] </ref> and NSIM [12]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points. <p> In fact, Theorem 2 is false without such a definition. Since the set U of functions is fixed, we cannot prove that the 36 0 1 2 minf 0 b [0; 0] <ref> [2; 8] </ref> " " subrange [n 1 ; n 2 ] specified in the proposition contains the value of the specific function u i . <p> Consider the following as a counterexample. Suppose that the variable V in the QDE has real-valued function solutions u (x) = rx 2 for r 2 <ref> [1=2; 2] </ref> due to the constraints and numeric information provided by the user. Further, suppose that V has the quantity space (minf 0 a b inf) where the real value named by the landmark a is known to fall within the interval [1=2; 2] and the real value named by the <p> u (x) = rx 2 for r 2 <ref> [1=2; 2] </ref> due to the constraints and numeric information provided by the user. Further, suppose that V has the quantity space (minf 0 a b inf) where the real value named by the landmark a is known to fall within the interval [1=2; 2] and the real value named by the landmark b is known to fall in the interval [2; 8] on the behavior in Figure 5. <p> Further, suppose that V has the quantity space (minf 0 a b inf) where the real value named by the landmark a is known to fall within the interval [1=2; 2] and the real value named by the landmark b is known to fall in the interval <ref> [2; 8] </ref> on the behavior in Figure 5.
Reference: [3] <author> Girish Bhat, Rance Cleaveland, and Orna Grumberg. </author> <title> Efficient on-the-fly model checking for CTL fl . In Proc. </title> <booktitle> Conf. on Logic in Computer Science (LICS-95), </booktitle> <year> 1995. </year>
Reference-contexts: Our implementation (TL) of a model-checking algorithm for CTL* is an "on-the-fly" model-checker based on the algorithm of Bhat, Cleaveland and Grumberg <ref> [3] </ref>. On-the-fly algorithms have the advantage over the more common "global" algorithms of being able to terminate with the correct result before constructing the entire exponentially-large structure. <p> Here we require that implies first be rewritten in terms of not and and or or. Every CTL* formula is equivalent to a formula in positive normal form because all temporal operators can be written in terms of those mentioned above and nots can be propagated inward to propositions <ref> [3] </ref>. 7 Definition 4 (Universal Formula) A CTL* expression is said to be uni-versal if, when the formula is written in positive normal form, there are no occurrences of the path quantifier possibly. We call a path formula a perfect path formula if it contains no path quantifiers. <p> The current implementation replaces the experimental versions described and used in previous publications [15, 17]. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg <ref> [3] </ref>. Bhat, Cleaveland and Grumberg 28 prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL. <p> We would like to thank Bhat, Grumberg and Cleaveland for their excellent article <ref> [3] </ref> and Rance Cleaveland for answering our questions about their algorithm. A difficult task in writing a paper which is intended for audiences in two somewhat disjoint disciplines, such as Qualitative Reasoning and Temporal Logic, is to use language which is comfortable to readers in both fields.
Reference: [4] <author> Giorgio Brajnik and Daniel J. Clancy. </author> <title> Guiding and refining simulation using temporal logic. </title> <booktitle> In Third International Workshop on Temporal Representation and Reasoning (TIME'96), </booktitle> <address> Florida, </address> <year> 1996. </year> <month> 42 </month>
Reference-contexts: These propositions allow TL to prove time-critical properties of models of a system, even in the face of incomplete knowledge. 6.4 TeQSIM: Temporal Constraints on Simulation In this paper, we use temporal logic formulas to check the output of QSIM. Brajnik and Clancy <ref> [5, 6, 4] </ref> extend the interaction between qualitative simulation and model-checking to treat temporal logic statements as an input. TeQSIM (pronounced tek'sim) interleaves model-checking with QSIM's simulation agenda, allowing simulation only of branches that can satisfy the given temporal logic formula.
Reference: [5] <author> Giorgio Brajnik and Daniel J. Clancy. </author> <title> Temporal constraints on trajectories in qualitative simulation. </title> <booktitle> In Proc. 10th Int. Workshop on Qualitative Reasoning About Physical Systems, </booktitle> <address> Fallen Leaf Lake, California, USA, </address> <year> 1996. </year>
Reference-contexts: These propositions allow TL to prove time-critical properties of models of a system, even in the face of incomplete knowledge. 6.4 TeQSIM: Temporal Constraints on Simulation In this paper, we use temporal logic formulas to check the output of QSIM. Brajnik and Clancy <ref> [5, 6, 4] </ref> extend the interaction between qualitative simulation and model-checking to treat temporal logic statements as an input. TeQSIM (pronounced tek'sim) interleaves model-checking with QSIM's simulation agenda, allowing simulation only of branches that can satisfy the given temporal logic formula. <p> One can use temporally guided simulation to explore critical portions of a large state space to discover, for example, constraints on an exogenous variable required for a plan to succeed, followed by unguided simulation of a model incorporating the new constraints to derive a performance guarantee. Brajnik and Clancy <ref> [5, 6] </ref> demonstrate TeQSIM on a realistic control and planning problem from the domain of water supply management. 34 7 Relation to other Work The results described in this paper are related to other work done in the fields of temporal-logic model-checking and simulation and control.
Reference: [6] <author> Giorgio Brajnik and Daniel J. Clancy. </author> <title> Temporal constraints on trajectories in qualitative simulation. </title> <booktitle> In Proc. 13th National Conf. on Artificial Intelligence (AAAI-96), </booktitle> <address> Cambridge, MA, 1996. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: These propositions allow TL to prove time-critical properties of models of a system, even in the face of incomplete knowledge. 6.4 TeQSIM: Temporal Constraints on Simulation In this paper, we use temporal logic formulas to check the output of QSIM. Brajnik and Clancy <ref> [5, 6, 4] </ref> extend the interaction between qualitative simulation and model-checking to treat temporal logic statements as an input. TeQSIM (pronounced tek'sim) interleaves model-checking with QSIM's simulation agenda, allowing simulation only of branches that can satisfy the given temporal logic formula. <p> One can use temporally guided simulation to explore critical portions of a large state space to discover, for example, constraints on an exogenous variable required for a plan to succeed, followed by unguided simulation of a model incorporating the new constraints to derive a performance guarantee. Brajnik and Clancy <ref> [5, 6] </ref> demonstrate TeQSIM on a realistic control and planning problem from the domain of water supply management. 34 7 Relation to other Work The results described in this paper are related to other work done in the fields of temporal-logic model-checking and simulation and control.
Reference: [7] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Modal logic adds operators for truth-values in alternate possible worlds (i.e., alternate behaviors or paths), such as necessarily and possibly. We have chosen to use the branching-time temporal logic CTL* which is described by Emerson and Clarke <ref> [7, 8] </ref>.
Reference: [8] <author> E. Allen Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Pub. B. V./MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Modal logic adds operators for truth-values in alternate possible worlds (i.e., alternate behaviors or paths), such as necessarily and possibly. We have chosen to use the branching-time temporal logic CTL* which is described by Emerson and Clarke <ref> [7, 8] </ref>. <p> We will be stating the main theorem in increasing degrees of formality as we develop the terminology. 2 CTL* Computational Tree Logic (CTL and its extension CTL*) is a branching-time temporal logic. The theory of branching-time temporal logics is summarized by Emerson in The Handbook of Theoretical Computer Science <ref> [8] </ref>. We will 3 customize CTL* slightly in order to allow states with no successors because in continuous systems a state may have no successor (e.g. if time reaches infinity or if the value of some variable crosses a boundary of its range). <p> In this section, we define the syntax and semantics of the CTL* language and, in Section 2.4, give some basic results and definitions which will be used by our main theorems. The presentation of CTL* here does not differ significantly from the presentation of the language in <ref> [8] </ref> except in the notation we use. We use this notation as a convenience for our implementation. A model-checking algorithm examines a temporal structure and a temporal-logic formula and determines whether the structure is a model (in the logical sense of the word) for the formula. <p> A set X is R-generable if it is naturally generated by some relation <ref> [8] </ref>. 12 In cases where QSIM returns a tree which is not closed, the hypotheses of the Guaranteed Coverage Theorem do not hold. <p> Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing <ref> [8, 18] </ref>. More closely related work has been done by Moon, et al [19] who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control. <p> Jahanian [11] modeled real time systems in the Modechart language. Statements in Real Time Logic were checked against a Modechart model. Real Time Logic is undecidable in general but certain classes of statements are shown to be decidable. Model-checking CTL* is decidable <ref> [8] </ref>. However, Real Time Logic is especially suited for expressing statements which are useful in time-critical systems, whereas some such statements are more difficult to make in CTL*. Other systems exist which allow temporal-logic sentences to be checked against a structure representing discrete event systems. <p> In fact, Theorem 2 is false without such a definition. Since the set U of functions is fixed, we cannot prove that the 36 0 1 2 minf 0 b [0; 0] <ref> [2; 8] </ref> " " subrange [n 1 ; n 2 ] specified in the proposition contains the value of the specific function u i . <p> Further, suppose that V has the quantity space (minf 0 a b inf) where the real value named by the landmark a is known to fall within the interval [1=2; 2] and the real value named by the landmark b is known to fall in the interval <ref> [2; 8] </ref> on the behavior in Figure 5.
Reference: [9] <author> E. Gazi, L. H. Ungar, and B. J. Kuipers. </author> <title> Temporal logic for summarizing monte-carlo simulation: an application to controller verification. </title> <editor> In R. Shoureshi, editor, </editor> <booktitle> Intelligent Control. IEEE, </booktitle> <year> 1996. </year> <note> (submitted). </note>
Reference-contexts: Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers <ref> [10, 9] </ref>. There are three programs|Q2 [14], Q3 [2] and NSIM [12]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [10] <author> E. Gazi, L. H. Ungar, W. D. Seider, and B.J. Kuipers. </author> <title> Automatic analysis of monte-carlo simulations of dynamic chemical plants. </title> <booktitle> In Proceedings of the European Symposium on Computer Aided Process Engineering (ESCAPE 6). </booktitle> <publisher> Pergamon Press, </publisher> <year> 1996. </year> <note> (in press). </note>
Reference-contexts: Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers <ref> [10, 9] </ref>. There are three programs|Q2 [14], Q3 [2] and NSIM [12]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [11] <author> Farnam Jahanian and Douglas A. Stewart. </author> <title> A method for verifying properties of Modechart specifications. </title> <booktitle> In Proceedings of the Real-time Systems Symposium, </booktitle> <address> Huntsville, AL, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Metric Temporal Logic is, strictly speaking, not as expressive as CTL*. However, it integrates time information at a higher level of the language, therefore it is easy to express some statements in MTL which are difficult to express in CTL*. Jahanian <ref> [11] </ref> modeled real time systems in the Modechart language. Statements in Real Time Logic were checked against a Modechart model. Real Time Logic is undecidable in general but certain classes of statements are shown to be decidable. Model-checking CTL* is decidable [8].
Reference: [12] <author> Herbert Kay and Benjamin Kuipers. </author> <title> Numerical behavior envelopes for qualitative models. </title> <booktitle> In Proc. 11th National Conf. on Artificial Intelligence, </booktitle> <pages> pages 606-613, </pages> <address> Cambridge, MA, 1993. </address> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: Kuipers' Qualitative Reasoning [16].) Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 12, 14, 16] </ref>. In this case, QSIM propagates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> The proposition in-range is sensible only in the states of behavior trees generated from a QDE containing some quantitative information. Simulation with quantitative information is handled by extensions to QSIM such as Q2 [14], Q3 [2] and NSIM <ref> [12] </ref>. The numbers referred to in these expressions are 21 extended real numbers: they may be -inf or +inf as well as real values.
Reference: [13] <author> B. Kuipers. </author> <title> Qualitative simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 29 </volume> <pages> 289-338, </pages> <year> 1986. </year>
Reference-contexts: Our program, TL, makes a formal connection between solutions to real differential equations and temporal-logic model checking. A qualitative simulator, such as QSIM, constructs a tree-like structure whose branches represent the possible behaviors consistent with the qualitative differential equation and initial state input to the QSIM algorithm <ref> [13, 16] </ref>. This set of behaviors is expressed as a finite structure of qualitative state descriptions. <p> The proof is given by Kuipers <ref> [13, 16] </ref>.
Reference: [14] <author> B. Kuipers and D. Berleant. </author> <title> Using incomplete quantitative knowledge in qualitative reasoning. </title> <booktitle> Proc. 7th National Conf. on Artificial Intelligence (AAAI-88), </booktitle> <year> 1988. </year>
Reference-contexts: The propositional part of the temporal language includes propositions which allow the construction of formulas containing numerical information. This can be used in conjunction with the numerical extensions to QSIM|Q2 <ref> [14] </ref>, Q3 [2] and NSIM [12]|in order to prove numerical properties of physical systems. In Section 2 we describe and define the temporal-logic language CTL* and present some basic definitions and facts which will be needed in our main theorem. <p> Kuipers' Qualitative Reasoning [16].) Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 12, 14, 16] </ref>. In this case, QSIM propagates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> The proposition in-range is sensible only in the states of behavior trees generated from a QDE containing some quantitative information. Simulation with quantitative information is handled by extensions to QSIM such as Q2 <ref> [14] </ref>, Q3 [2] and NSIM [12]. The numbers referred to in these expressions are 21 extended real numbers: they may be -inf or +inf as well as real values. <p> Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [10, 9]. There are three programs|Q2 <ref> [14] </ref>, Q3 [2] and NSIM [12]|which extend QSIM to take advantage of numeric information, to prune spurious behaviors and to derive numeric bounds on landmark values and time-points.
Reference: [15] <author> B. J. Kuipers and K. -Astrom. </author> <title> The composition and validation of heterogeneous control laws. </title> <journal> Automatica, </journal> <volume> 30(2) </volume> <pages> 233-249, </pages> <year> 1994. </year>
Reference-contexts: Therefore, h; ci temporally describes this fixed splitting of U via U;M by Theorem 2. 6 Applications of CTL* and QSIM TL is the name of a CTL* model-checker customized for use with QSIM. The current implementation replaces the experimental versions described and used in previous publications <ref> [15, 17] </ref>. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg [3]. Bhat, Cleaveland and Grumberg 28 prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL. <p> In these circumstances, the user can learn everything he or she may need to know about a QSIM behavior tree by evaluating a few carefully chosen CTL* statements. 6.3 Proving Properties of Controllers Kuipers & -Astrom <ref> [15] </ref> have used TL and QSIM to prove properties of heterogeneous control laws. A heterogeneous controller is a nonlinear controller created 33 by the composition of local control laws appropriate to different, possibly over-lapping, operating regions. <p> By expressing the desired guarantee as a statement in CTL*, the validity of the guarantee can be automatically checked against the set of possible behaviors. Kuipers & -Astrom <ref> [15] </ref> demonstrate the design of heterogeneous controllers, and prove certain useful properties, first for a simple level controller for a water tank, and second for a highly nonlinear chemical reactor. Evi Gazi and Lyle Ungar also use TL to prove properties of models of chemical reaction controllers [10, 9].
Reference: [16] <author> Benjamin Kuipers. </author> <title> Qualitative Reasoning: Modeling and Simulation with Incomplete Knowledge. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year> <month> 43 </month>
Reference-contexts: Our program, TL, makes a formal connection between solutions to real differential equations and temporal-logic model checking. A qualitative simulator, such as QSIM, constructs a tree-like structure whose branches represent the possible behaviors consistent with the qualitative differential equation and initial state input to the QSIM algorithm <ref> [13, 16] </ref>. This set of behaviors is expressed as a finite structure of qualitative state descriptions. <p> We refer the reader to Kuipers' full description of the QSIM framework <ref> [16] </ref> and to Appendix B for details on the new definition of a reasonable function. Other reformalizations of concepts related to the Guaranteed Coverage Theorem are described in the present section. The QSIM algorithm takes as input the user's qualitative or semi-quantitative description of a physical system. <p> The proof is given by Kuipers <ref> [13, 16] </ref>. <p> This set of three equations is called the structural abstraction of the original equation for harmonic motion and is denoted F 0 . From the structural abstraction, it is easy to create a QDE. See Section 3.3.1 of Kuipers' book Qualitative Reasoning <ref> [16] </ref> for more details on the structural abstraction of an ODE. 10 The structural abstraction, F 0 , is useful because it can easily be abstracted into a QDE. <p> However, by applying the envi-sionment simulation style (no new landmarks, weak cycle-match criterion, and cycle matches anywhere in the behavior tree), every qualitative model has a finite closed behavior tree. (See Chapter 5 of Kuipers' Qualitative Reasoning <ref> [16] </ref>.) Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction [2, 12, 14, 16]. <p> Kuipers' Qualitative Reasoning [16].) Quantitative Information When strong-cycle matching is used and cross-edge cycles are not allowed, then the QDE and the initial state may be augmented with quantitative information such as numerical interval bounds on the real values denoted by landmarks and other symbolic terms in the behavior prediction <ref> [2, 12, 14, 16] </ref>. In this case, QSIM propagates this quantitative information and uses it to prune branches of the tree which are inconsistent with the information. The most important quantitative information for the purposes of this paper is the information which QSIM derives about the landmarks. <p> Temporal reasoning may be useful any time QSIM is used. QSIM has been used to simulate controllers, human organs and disease, abstract and real physical systems, electrical circuits, population dynamics, chemical reactions, etc. <ref> [16] </ref> TL can be used to prove that a QSIM tree is closed with the following query (TL R (necessarily (eventually (or (status quiescent) (status cycle) (status transition))))) where R is the root of the tree. (See Appendix A for an explanation of arguments to the status proposition other than quiescent.) <p> Therefore, once again, it is used mainly to draw information about QSIM's output. B Refined Definition of a Reasonable Function In this appendix, we use R to denote the reals and R fl to denote the extended reals. The traditional definition of a reasonable function <ref> [16] </ref> is too restrictive for our current purposes. Giving a satisfactory definition of reasonable is not simple. 38 We would like to let functions such as sine on [a; 1) and tangent on [=2; =2] to be reasonable. <p> This definition is more inclusive than the traditional one <ref> [16] </ref>, but more inclusive definitions are possible.
Reference: [17] <author> Benjamin Kuipers and Benjamin Shults. </author> <title> Reasoning in logic about continu-ous systems. </title> <editor> In J. Doyle, E. Sandewall, and P. Torasso, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fourth International Conference (KR-94), </booktitle> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: A preliminary report on this work appeared as <ref> [17] </ref>. 1 The main theorem of this paper, stated informally, says the following: Sup--pose M is a QSIM behavior tree generated from the qualitative differential equation C. If M is a model for a temporal logic formula, then the formula describes every solution to every ODE which abstracts to C. <p> Therefore, h; ci temporally describes this fixed splitting of U via U;M by Theorem 2. 6 Applications of CTL* and QSIM TL is the name of a CTL* model-checker customized for use with QSIM. The current implementation replaces the experimental versions described and used in previous publications <ref> [15, 17] </ref>. The underlying model-checking algorithm is that of Bhat, Cleaveland and Grumberg [3]. Bhat, Cleaveland and Grumberg 28 prove that this algorithm has the same complexity as the best known global algorithms for both CTL* and CTL.
Reference: [18] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent programs satisfy thir linear specifications. </title> <booktitle> In Twelfth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107, </pages> <year> 1984. </year>
Reference-contexts: Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing <ref> [8, 18] </ref>. More closely related work has been done by Moon, et al [19] who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control.
Reference: [19] <author> I. Moon, G. J. Powers, J. R. Burch, and E. M. Clarke. </author> <title> Automatic verification of sequential control systems using temporal logic. </title> <journal> AIChE Journal, </journal> <volume> 38(1) </volume> <pages> 67-75, </pages> <year> 1992. </year>
Reference-contexts: Probably the most work in temporal-logic model-checking has been done in applications of CTL and CTL* to computer processes such as parallel computing [8, 18]. More closely related work has been done by Moon, et al <ref> [19] </ref> who checked statements in CTL against state transition graphs in discrete-time systems generated from programmable logic controller ladder diagrams. Their specific application was to chemical process control.
Reference: [20] <author> Manny Rayner. </author> <title> On the applicability of nonmonotonic logic to formal reasoning in continuous time. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 345-360, </pages> <year> 1991. </year> <month> 44 </month>
Reference-contexts: If weak-cycle matching is used or cross-edge cycles are detected, then the numeric information loses its sense. Example 2 In order to illustrate the fact that quantitative information is stored on QSIM behaviors rather than on states, we will construct a simple example with numeric information. Three billiard balls <ref> [20] </ref> start to move with constant velocities and initial positions shown in Figure 1 (a). The QSIM QDE model for this scenario provides quantity spaces for position, velocity, and acceleration in the x and y directions, and constraints for constant-velocity motion.
References-found: 20

