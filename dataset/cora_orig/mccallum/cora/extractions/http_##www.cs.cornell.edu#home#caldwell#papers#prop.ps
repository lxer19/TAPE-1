URL: http://www.cs.cornell.edu/home/caldwell/papers/prop.ps
Refering-URL: http://www.cs.cornell.edu/home/caldwell/papers.html
Root-URL: http://www.cs.cornell.edu
Title: Extracting Propositional Decidability: A proof of propositional decidability in constructive type theory and its extracted program.  
Author: James L. Caldwell 
Note: Contents  
Date: March 21, 1997  
Abstract: This paper describes a formal constructive proof of the decidability of a sequent calculus presentation of classical propositional logic. The Nuprl theories and proofs reported on here are part of a larger program to safely incorporate formally justified decision procedures into theorem provers. The proof is implemented in the Nuprl system and the resulting proof object yields a "correct-by-construction" program for deciding propositional sequents. In the case the sequent is valid, the program reports that fact; in the case the sequent is falsifiable, the program returns a falsifying assignment. Also, the semantics of the propositional sequents is formulated here in Kleene's strong three-valued logic which both: agrees with the standard two valued seman tics; and gives finer information in case the proposition is falsifiable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> William Aitken, Robert Constable, and Judith Underwood. </author> <title> Metalog-ical frameworks II: Using reflected decision procedures. </title> <type> unpublished manuscript. </type>
Reference-contexts: Nuprl is an implementation of a constructive type theory; as a result of the constructivity, and the design of the system, proofs yield programs in the form of terms of the untyped lambda calculus. Here, Nuprl is used as meta-theory <ref> [1, 4, 24] </ref> to formalize the syntax and semantics of a sequent presentation of classical propositional 2 logic.
Reference: [2] <author> Henk P. Barendregt. </author> <title> The lambda calculus: its syntax and symantics. </title> <booktitle> In Studies in Logic, </booktitle> <volume> volume 103. Amsterdam:North-Holland, </volume> <year> 1981. </year>
Reference-contexts: evaluator is an interpreter for the untyped lambda calculus (extended with the computation rules just defined.) The Nuprl term evaluator implements a left-most outermost (lazy) evaluation strategy, although for terms which can be assigned a type in the system, evaluation order is immaterial since the typeable terms are strongly normalizing <ref> [7, 2] </ref>. 2.2 Propositions-as-types and Proofs-as-programs The principle of constructive proof can be summed up by saying a proof provides direct evidence for the proposition being proved [10]. Basing the semantics for a logic on this principle is sometimes known as the Heyting interpretation [12].
Reference: [3] <author> Henk P. Barendregt. </author> <title> Lambda calculi with types. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pages 117-309. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: It supports an untyped lambda-calculus as 4 its programming language. Following Barendregt <ref> [3] </ref> we can distinguish the Nuprl type theory from the perhaps more familiar Church style typed lambda-calculi by calling it a lambda calculus in the style of Curry or a lambda calculi with type assignment. <p> This results in the following sequent. 1. F:Formula 2. a: Assignment <ref> [3] </ref>. a |= F _ a |6= F Hidden hypotheses are labeled hidden by the square brackets surrounding their hypothesis numbers. The proof is trivial if hypothesis 3 can be unhidden.
Reference: [4] <author> D. Basin and R. Constable. </author> <title> Metalogical frameworks. </title> <editor> In G. Huet and G. Plotkin, editors, </editor> <booktitle> Logical Environments, chapter 1, </booktitle> <pages> pages 1-29. </pages> <publisher> Cam-bridge University Press, </publisher> <address> Great Britain, </address> <year> 1993. </year> <month> 57 </month>
Reference-contexts: Nuprl is an implementation of a constructive type theory; as a result of the constructivity, and the design of the system, proofs yield programs in the form of terms of the untyped lambda calculus. Here, Nuprl is used as meta-theory <ref> [1, 4, 24] </ref> to formalize the syntax and semantics of a sequent presentation of classical propositional 2 logic.
Reference: [5] <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic. </title> <publisher> NY:Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure <ref> [5, 16, 11, 22, 21] </ref>. The paper by Paulin-Mohring and Werner [21] is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system.
Reference: [6] <author> R. Constable and D. Howe. </author> <title> Implementing metamathematics as an approach to automatic theorem proving. </title> <editor> In R.B. Banerji, editor, </editor> <title> Formal Techniques in Artificial Intelligence: A Source Book. </title> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: The proof presented here is for a sequent formulation of propositional logic which includes the classical propositional operators for negation, conjunction, disjunction, and implication. 1.2 Overview of the Approach The development follows the natural proof informally presented by Constable and Howe in their paper <ref> [6] </ref>. In the formalization presented here the syntax of propositional formulas is formalized as a recursive type in the Nuprl system. Sequents are formalized as pairs of lists of formulas. The presentation here differs from [6] in that the semantics for the logic are provided via a Kleene valuation defined over <p> The development follows the natural proof informally presented by Constable and Howe in their paper <ref> [6] </ref>. In the formalization presented here the syntax of propositional formulas is formalized as a recursive type in the Nuprl system. Sequents are formalized as pairs of lists of formulas. The presentation here differs from [6] in that the semantics for the logic are provided via a Kleene valuation defined over formulas which is then lifted to sequents.
Reference: [7] <author> Robert L. Constable, et al. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: A complete presentation of the type theory can be found in the Nuprl book <ref> [7] </ref> (which will be referred to subsequently as "the book."). The Nuprl system, as distinguished from the type theory, implements a rich environment to support reasoning about and computing with the Nuprl type theory. <p> evaluator is an interpreter for the untyped lambda calculus (extended with the computation rules just defined.) The Nuprl term evaluator implements a left-most outermost (lazy) evaluation strategy, although for terms which can be assigned a type in the system, evaluation order is immaterial since the typeable terms are strongly normalizing <ref> [7, 2] </ref>. 2.2 Propositions-as-types and Proofs-as-programs The principle of constructive proof can be summed up by saying a proof provides direct evidence for the proposition being proved [10]. Basing the semantics for a logic on this principle is sometimes known as the Heyting interpretation [12]. <p> For example, although T and fx:T | Trueg have the same 7 members and equality relations, they are not equal types in Nuprl. Interpreting the type membership equality relation and type membership as types is made sensible via the propositions-as-types interpretation <ref> [7, pg.29-31] </ref>. x=y2T is an equality term. It denotes a type when T2U and x2T and y2T, otherwise it denotes nothing, it is nonsense . If x and y are not equal elements in T then the type is empty. <p> The conditions under which a Nuprl sequent is deemed true are rather technical because of the so-called functionality constraints insuring equal elements of hypotheses can be freely substituted into the consequent and extract terms; the reader is referred to the Nuprl book <ref> [7, pg.141] </ref> for a full account. Informally, the implicit judgement asserts that, assuming the hypotheses are well-formed types, and the conclusion and extract terms are functional in those types, then the term S is an inhabited type and the extract s is an inhabitant. <p> The correspondence between the propositions encoded as above and the type theory is elaborated on in <ref> [7, Section 3.6,] </ref>. The Nuprl tactics have been built to deal with either the propositions or types formulation uniformly. 12 2.7 Set Types, Decidability, Stability, and Squash Stability The principle of constructive evidence can sometimes result in overly complex types.
Reference: [8] <author> Thierry Coquand and Gerard Huet. </author> <title> The calculus of constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference-contexts: The prover is implemented as a tactic based prover in the style of LCF [13] and built on a base of ML. In Nuprl and related constructive systems <ref> [18, 20, 8] </ref>, the so-called proposition-as-types interpretation allows for presentations to be cloaked in either logical or more purely type-theoretic terms.
Reference: [9] <author> M. Davis and J. Schwartz. </author> <title> Metamathematical extensibility for theorm verifies and proof checkers. </title> <type> Technical Report 12, </type> <institution> Courant Institute of Mathematical Sciences, </institution> <address> New York, </address> <year> 1977. </year>
Reference-contexts: system is proved within the Nuprl system and the program extracted from the proof is a decision procedure for the logic. 1.1 Related Work The idea of extending theorem prover capabilities by the addition of formally verified decision procedures is not new, proposals we made as as early as 1977 <ref> [9] </ref> and there have been many more since. Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure [5, 16, 11, 22, 21].
Reference: [10] <author> Michael Dummett. </author> <title> Elements of Intuitionism. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1977. </year>
Reference-contexts: although for terms which can be assigned a type in the system, evaluation order is immaterial since the typeable terms are strongly normalizing [7, 2]. 2.2 Propositions-as-types and Proofs-as-programs The principle of constructive proof can be summed up by saying a proof provides direct evidence for the proposition being proved <ref> [10] </ref>. Basing the semantics for a logic on this principle is sometimes known as the Heyting interpretation [12]. In the Heyting interpretation, truth corresponds to provability and falsity corresponds to the absence of any proof.
Reference: [11] <author> Peter. Dybjer. </author> <title> Comparing integrated and external logics of functional programs. </title> <booktitle> Science of Computer Programming, </booktitle> <pages> pages 14 207-14., </pages> <year> 1990. </year>
Reference-contexts: Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure <ref> [5, 16, 11, 22, 21] </ref>. The paper by Paulin-Mohring and Werner [21] is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system.
Reference: [12] <author> Jean-Yevs Girard, Yves Lafont, and Paul Taylor. </author> <title> Proofs and Types. </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: Basing the semantics for a logic on this principle is sometimes known as the Heyting interpretation <ref> [12] </ref>. In the Heyting interpretation, truth corresponds to provability and falsity corresponds to the absence of any proof. A proof of the conjunction P ^ Q is a pair of proofs ha; bi where a is a proof of P and b is a proof of Q.
Reference: [13] <author> M. Gordon, R. Milner, and C. Wadsworth. </author> <title> Edinburgh LCF: a mechanized logic of computation. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 78, </volume> <year> 1979. </year>
Reference-contexts: The prover is implemented as a tactic based prover in the style of LCF <ref> [13] </ref> and built on a base of ML. In Nuprl and related constructive systems [18, 20, 8], the so-called proposition-as-types interpretation allows for presentations to be cloaked in either logical or more purely type-theoretic terms.
Reference: [14] <author> Paul B. Jackson. </author> <title> Enhancing the Nuprl Proof Development System and Applying it to Computational Abstract Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1995. </year> <month> TR95-1509. </month>
Reference-contexts: Z is the type integer whose members are denoted by the numerals ,1,0,1,2, . 2 Level expressions are not documented in the book. The Nuprl V4 level expressions provide a means of polymorphically referring to universe levels without specifying explic itly which level is intended <ref> [14, pg.23] </ref>. 8 Atom is the type whose elements are strings of the form `` '' where is any character string. Atoms are equal when they are the same character string. T list is the type of lists of elements of type T.
Reference: [15] <author> Stephen C. Kleene. </author> <title> Introduction to Metamathematics. </title> <publisher> van Nostrand, Princeton, </publisher> <year> 1952. </year>
Reference-contexts: The second approach is developed here. We define the semantics of propositional logic in terms of Kleene's strong three-valued logic <ref> [15] </ref>. <p> More technically, following Kleene <ref> [15] </ref>, we may say, these operators are uniquely determined as the strongest possible regular extensions of the classical 2-valued operators. *A K not ~ K p == case p: 0 3 ! 2 3 ; 1 3 ! 1 3 ; Thus for negation the undefined value 1 3 is a
Reference: [16] <author> J. Leszczylowski. </author> <title> An experiment with Edinburgh LCF. </title> <editor> In W. Bibel and R. Kowalski, editors, </editor> <booktitle> 5th International Conference on Automated Deduction, volume 87 of Lecture Notes in Computer Science, </booktitle> <pages> pages 170-181, </pages> <address> New York, 1981. </address> <publisher> Springer-Verlag. </publisher> <pages> 58 </pages>
Reference-contexts: Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure <ref> [5, 16, 11, 22, 21] </ref>. The paper by Paulin-Mohring and Werner [21] is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system.
Reference: [17] <author> Per. Martin-Lof. </author> <title> An intuitionistic theory of types: predicative part. </title> <booktitle> In Logic Colloquium '73., </booktitle> <pages> pages 73-118. </pages> <address> Amsterdam:North-Holland, </address> <year> 1973. </year>
Reference-contexts: It is an encoding for the equality term x=x2T. It denotes nothing if T is not a type or if x is not in T and is inhabited by the single term Axiom otherwise. Like the related type theory of Marin Lof <ref> [17] </ref> or the type theory of Whitehead and Russell's Principia Mathematica, the Nuprl's type theory is a predicative type theory supporting an unbounded cumulative hierarchy of type universes. Every universe is itself a type and every type is an element of some universe.
Reference: [18] <author> Per. Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-75. </pages> <address> Amsterdam:North Holland, </address> <year> 1982. </year>
Reference-contexts: The prover is implemented as a tactic based prover in the style of LCF [13] and built on a base of ML. In Nuprl and related constructive systems <ref> [18, 20, 8] </ref>, the so-called proposition-as-types interpretation allows for presentations to be cloaked in either logical or more purely type-theoretic terms.
Reference: [19] <author> Elliott Mendelson. </author> <title> Introduction to Mathematical Lgic. </title> <editor> D. Van Nos-trand, </editor> <booktitle> second edition, </booktitle> <year> 1979. </year>
Reference-contexts: The well-formedness theorem for the formula rank function certifies it is a function from formulas to natural numbers. *T formula rank wf 2 Formula ! N 3.2 Three valued Semantics of propositional logic In standard treatments of decidability (and completeness) for classical propositional logic, for example as found in Mendelson <ref> [19] </ref>, truth assignments are total functions mapping the (countably infinite) propositional variables onto the Booleans. More constructively, Smullyan [23] considers finite functions mapping the set of variables occurring in a formula (or set of formulas) onto the Booleans. In both presentations it is shown how assignments uniquely determine Boolean valuations.
Reference: [20] <author> Bengt Nordstrom. </author> <title> Programming in constructive set theory: Some examples. </title> <booktitle> In Proceedings 1981 Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 290-341. </pages> <address> Portsmouth, England, </address> <year> 1981. </year>
Reference-contexts: The prover is implemented as a tactic based prover in the style of LCF [13] and built on a base of ML. In Nuprl and related constructive systems <ref> [18, 20, 8] </ref>, the so-called proposition-as-types interpretation allows for presentations to be cloaked in either logical or more purely type-theoretic terms.
Reference: [21] <author> C. Paulin-Mohring and B. Werner. </author> <title> Synthesis of ML programs in the system coq. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(5-6):607-640, </volume> <year> 1993. </year>
Reference-contexts: Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure <ref> [5, 16, 11, 22, 21] </ref>. The paper by Paulin-Mohring and Werner [21] is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system. <p> Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure [5, 16, 11, 22, 21]. The paper by Paulin-Mohring and Werner <ref> [21] </ref> is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system. They address issues related to the efficiency of the extracted program.
Reference: [22] <author> Lawrence Paulson. </author> <title> Proving termination of normalization functions for conditional expressions. </title> <journal> Journal of Automated Reasoning, </journal> <pages> pages 2 63-74, </pages> <year> 1986. </year>
Reference-contexts: Actual formal verifications of decision procedures are less common. One example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form of an IF-THEN-ELSE normalization procedure <ref> [5, 16, 11, 22, 21] </ref>. The paper by Paulin-Mohring and Werner [21] is the closest in spirit to the work presented here in that they extract the program for the tautology checker from a constructive proof in the Coq system.
Reference: [23] <author> Raymond M. Smullyan. </author> <title> First-Order Logic. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1968. </year>
Reference-contexts: More constructively, Smullyan <ref> [23] </ref> considers finite functions mapping the set of variables occurring in a formula (or set of formulas) onto the Booleans. In both presentations it is shown how assignments uniquely determine Boolean valuations.
Reference: [24] <author> Judith Underwood. </author> <title> Tableau for intuitionistic predicate logic as metatheory. </title> <editor> In Peter Baumgartner, Reiner Hahnle, and Joachim Posegga, editors, </editor> <title> Theorem Proving with Analytic Tableaux and Related Methods, </title> <booktitle> number 918 in Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year> <month> 59 </month>
Reference-contexts: Nuprl is an implementation of a constructive type theory; as a result of the constructivity, and the design of the system, proofs yield programs in the form of terms of the untyped lambda calculus. Here, Nuprl is used as meta-theory <ref> [1, 4, 24] </ref> to formalize the syntax and semantics of a sequent presentation of classical propositional 2 logic.
References-found: 24

