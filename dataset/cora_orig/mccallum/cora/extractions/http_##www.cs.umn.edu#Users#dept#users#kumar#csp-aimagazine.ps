URL: http://www.cs.umn.edu/Users/dept/users/kumar/csp-aimagazine.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kumar/
Root-URL: http://www.cs.umn.edu
Email: kumar@cs.umn.edu  
Title: Algorithms for Constraint Satisfaction Problems: A Survey  
Author: Vipin Kumar 
Date: 13(1):32-44, 1992  
Note: Appeared in AI Magazine  
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Sciences University of Minnesota  
Abstract: A large variety of problems in Artificial Intelligence and other areas of computer science can be viewed as a special case of the constraint satisfaction problem. Some examples are machine vision, belief maintenance, scheduling, temporal reasoning, graph problems, floor plan design, planning genetic experiments, and the satisfiability problem. A number of different approaches have been developed for solving these problems. Some of them use constraint propagation to simplify the original problem. Others use backtracking to directly search for possible solutions. Some are a combination of these two techniques. This paper presents a brief overview of many of these approaches in a tutorial fashion. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. </author> <year> 1984. </year> <title> Towards a General Theory of Action and Time. </title> <booktitle> Artificial Intelligence 23(2) </booktitle> <pages> 123-154. </pages>
Reference: <author> Allen, J. </author> <year> 1983. </year> <title> Maintaining Knowledge About Temporal Intervals. </title> <journal> Communications of the ACM 26 </journal> <pages> 832-843. </pages>
Reference: <author> Bitner, J. and Reingold, E. M. </author> <year> 1975. </year> <title> Backtrack Programming Techniques. </title> <journal> Communications of the ACM 18 </journal> <pages> 651-655. </pages>
Reference-contexts: Several heuristics have been developed and analyzed for selecting variable ordering. One very powerful heuristic, originally developed by Bitner and Reingold <ref> (Bitner 1975) </ref>, is often used along with the FC algorithm discussed in Section 4. In this method, the variable with the fewest possible remaining alternatives is selected for instantiation. Thus the order of variable instantiation is, in general, different in different branches of the tree, and is determined dynamically.
Reference: <author> Bruynooghe, M. </author> <year> 1985. </year> <title> Graph Coloring and Constraint Satisfaction. </title> <type> Technical Report CW 44, </type> <institution> Department Computerwetenschappen, Katholieke Uni-versiteit Leuven. </institution>
Reference: <author> Bruynooghe, M. </author> <year> 1981. </year> <title> Solving Combinatorial Search Problems by Intelligent Backtracking. </title> <journal> Information Processing Letters 12(1) </journal> <pages> 36-39. </pages>
Reference: <author> Bruynooghe, M. and Pereira, L. M. </author> <year> 1984. </year> <title> Deduction Revision by Intelligent Backtracking. In Implementations of Prolog, </title> <editor> ed. J. A. Campbell, </editor> <address> 194-215. Chicester, England: </address> <publisher> Ellis Horwood. </publisher>
Reference: <author> Chakravarty, I. </author> <year> 1979. </year> <title> A Generalized Line and Junction Labelling Scheme with Applications to Scene Analysis. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence 1(2) </journal> <pages> 202-205. </pages>
Reference: <author> Chen, Y. </author> <year> 1991. </year> <title> Improving Han and Lee's Path Consistency Algorithm. </title> <booktitle> In Proceedings of the 3rd International Conference on Tools for AI, </booktitle> <pages> 346-350. </pages> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Cooper, M.C. </author> <year> 1989. </year> <title> An Optimal k-Consistency Algorithm. </title> <booktitle> Artificial Intelligence 41 </booktitle> <pages> 89-95. </pages>
Reference: <author> Davis, A.L. and Rosenfeld, A. </author> <year> 1981. </year> <title> Cooperating Processes for Low Level Vision: A Survey. </title> <booktitle> Artificial Intelligence 17 </booktitle> <pages> 245-263. </pages> <editor> de Kleer, J. </editor> <year> 1989. </year> <title> A Comparison of atms and csp Techniques. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> 290-296. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle> <editor> de Kleer, J. </editor> <year> 1986a. </year> <title> An Assumption-Based tms. </title> <booktitle> Artificial Intelligence 28:127-162. de Kleer, J. 1986b. Problems with atms. Artificial Intelligence 28:197-224. 19 </booktitle> de Kleer, J. and Sussman, G. J. 1980. Propagation of Constraints Applied to Circuit Synthesis. Circuit Theory and Applications 8:127-144. 
Reference: <author> Dechter, R. </author> <year> 1990. </year> <title> Enhancement Schemes for Constraint Processing: Back-jumping, Learning and Cutset Decomposition. </title> <booktitle> Artificial Intelligence 41(3) </booktitle> <pages> 273-312. </pages>
Reference: <author> Dechter, R. </author> <year> 1987. </year> <title> A Constraint-Network Approach to Truth Maintenance. </title> <type> Technical Report R-870009, </type> <institution> Cognitive Systems Lab, Computer Science Dept, UCLA. </institution>
Reference: <author> Dechter, R. </author> <year> 1986. </year> <booktitle> Learning While Searching in Constraint-Satisfaction-Problems . In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> 178-183. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: This set of vertices is called the cycle-cutset. If a small cycle-cutset can be found, then a good heuristic is to first instantiate all the variables in the cycle-cutset, and then solve the resulting tree-structured CSPs without backtracking <ref> (Dechter 1986) </ref>. If the size of a cycle-cutset of an n-variable CSP is m, then the original CSP can be solved in d m + (n m) fl d 2 steps. Once the decision is made to instantiate a variable, it may have several values available.
Reference: <author> Dechter, R. and Dechter, A. </author> <year> 1988. </year> <title> Belief Maintenance in Dynamic Constraint Networks. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 37-42. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Dechter, R. and Meiri, I. </author> <year> 1989. </year> <title> Experimental Evaluation of Preprocessing Techniques in Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> 290-296. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference: <author> Dechter, R. and Pearl, J. </author> <year> 1988a. </year> <title> Network-Based Heuristics for Constraint Satisfaction Problems. </title> <booktitle> In Search in Artificial Intelligence, </booktitle> <editor> ed. L. Kanal and V. Kumar, </editor> <address> 370-425. New York: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Sosic and Gu had earlier developed a similar algorithm independently of Minton (Gu 1989). Another heuristic is to prefer the value (from those available) that leads to an easiest to solve CSP. Dechter and Pearl <ref> (Dechter 1988a) </ref> discuss one way of estimating the difficulty of solving a CSP. In this method, the CSP is converted into a tree-structured CSP by deleting a minimum number of arcs, and the resulting CSP is solved for all solutions.
Reference: <author> Dechter, R. and Pearl, J. 1988b.. </author> <title> Network-Based Heuristics for Constraint Satisfaction Problems. </title> <booktitle> Artificial Intelligence 34 </booktitle> <pages> 1-38. </pages>
Reference: <author> Dechter, R. and Pearl, J. </author> <title> 1988c Tree-Clustering Schemes for Constraint Processing. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 150-154. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Dechter, R. and Pearl, J. </author> <year> 1986. </year> <title> The Cycle-Curset Method for Improving Search Performance in AI Applications. </title> <type> Technical Report R-16, </type> <institution> Cognitive Systems Lab, Computer Science Dept., UCLA. </institution>
Reference-contexts: This set of vertices is called the cycle-cutset. If a small cycle-cutset can be found, then a good heuristic is to first instantiate all the variables in the cycle-cutset, and then solve the resulting tree-structured CSPs without backtracking <ref> (Dechter 1986) </ref>. If the size of a cycle-cutset of an n-variable CSP is m, then the original CSP can be solved in d m + (n m) fl d 2 steps. Once the decision is made to instantiate a variable, it may have several values available.
Reference: <author> Dechter, R.; Meiri, I.; and Pearl, J. </author> <year> 1990. </year> <title> Tree Decomposition with Applications to Constraint Processing. </title> <booktitle> In Proceedings of the Eighth National 20 Conference on Artificial Intelligence, </booktitle> <pages> 10-16. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Dechter, R.; Meiri, I.; and Pearl, J. </author> <year> 1989. </year> <title> Temporal Constraint Networks. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 83-93. </pages>
Reference: <author> Dhar, V. and Croker, A. </author> <year> 1990a. </year> <title> A Knowledge Representation for Constraint Satisfaction Problems. </title> <type> Technical Report 90-9, </type> <institution> Department of Information Systems, New York University. </institution>
Reference: <author> Dhar, V. and Ranganathan, N. </author> <year> 1990b. </year> <title> Integer Programming vs. Expert Systems: An Experimental Comparison. </title> <journal> Communications of the ACM 33 </journal> <pages> 323-336. </pages>
Reference: <author> Doyle, J. </author> <year> 1979. </year> <title> A Truth Maintenance System. </title> <booktitle> Artificial Intelligence 12 </booktitle> <pages> 231-272. </pages>
Reference: <author> Eastman, C. </author> <year> 1972. </year> <title> Preliminary Report on a System for General Space Planning. </title> <journal> Communications of the ACM 15 </journal> <pages> 76-87. </pages>
Reference-contexts: 1981; Mackworth 1977b; Montanari 1974; Rosenfeld 1976), belief maintenance (Dechter 1987; Dechter 1988a; Dhar 1990a), scheduling (Dhar 1990b; Fox 1987; Fox 1989; Petrie 1989; Prosser 1989; Rit 1986), temporal reasoning (Allen 1983; Allen 1984; Dechter 1989b; Vilain 1986; Tsang 1987), graph problems (McGregor 1979; Bruynooghe 1 1985), floor plan design <ref> (Eastman 1972) </ref>, planning genetic experiments (Ste-fik 1981), the satisfiability problem (Zabih 1988), circuit design (de Kleer 1980; Birmingham 1988), machine design and manufacturing (Frayman 1987; Nadel 1990b; Navinchandra 1990), diagnostic reasoning (Geffner 1987).
Reference: <author> Feldman, R. and Golumbic, M. C. </author> <year> 1989. </year> <title> Constraint Satisfiability Algorithms for Interactive Student Scheduling. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1010-1016. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference-contexts: Nadel (Nadel 1983) presented an analytical framework that can be used to analyze the expected complexities of various search orders, and 15 select the best one from them. Feldman and Golumbic <ref> (Feldman 1989) </ref> ap-ply these ideas to the student scheduling problem and suggest some further extensions. Another possible heuristic is to instantiate those variables first that participate in the highest number of constraints. This tries to make sure that the unsuccessful branches of the tree are pruned early.
Reference: <author> Fikes, R. E. </author> <year> 1970. </year> <title> Ref-Arf: A System for Solving Problems Stated as Procedures. </title> <journal> Artificial Intelligence 1:1:27-120. </journal>
Reference: <author> Fox, M. S. </author> <year> 1987. </year> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <address> San Mateo, Calif.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Fox, M. S.; Sadeh, N.; and Baykan, C. </author> <year> 1989. </year> <title> Constrained Heuristic Search. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> 309-315. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference-contexts: Unfortunately, the problem of finding a maximal stable set is NP-Hard. Thus one has to settle for a heuristic algorithm that finds a suboptimal stable set. Fox, Sadeh and Baykan <ref> (Fox 1989) </ref> use many different structural characteristics of CSP to select variable order and show its utility in the domains of spatial planning and factory scheduling. Recall from Section 3 that the tree-structured constraint graphs can be solved without backtracking simply at the cost of achieving arc-consistency.
Reference: <author> Frayman, F. and Mittal, S. </author> <year> 1987. </year> <title> Cossack: A Constraints-Based Expert System for Configuration Tasks. In Knowledge-Based Expert Systems in Engineering: Planning and Design, </title> <editor> ed. D. Sriram and R. A. Adey, </editor> <publisher> Computational Mechanics Publications, </publisher> <pages> 143-166. </pages>
Reference: <author> Freeman-Benson, B. N.; Maloney, J.; and Borning, A. </author> <year> 1990. </year> <title> An Incremental Constraint Solver. </title> <journal> Communications of the ACM 33 </journal> <pages> 54-63. </pages> <note> 21 Freuder, </note> <author> E. </author> <year> 1990. </year> <title> Complexity of K-Tree Structured Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <address> 4-9.. Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Freuder, E. </author> <year> 1989. </year> <title> Partial Constraint Satisfaction. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> 278-283 Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference: <author> Freuder, E. </author> <year> 1988. </year> <title> Backtrack-Free and Backtrack-Bounded Search. </title> <booktitle> In Search in Artificial Intelligence, </booktitle> <editor> ed. L. Kanal and V. Kumar, </editor> <address> 343-369. New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Freuder, E. </author> <year> 1982. </year> <title> A Sufficient Condition for Backtrack Free Search. </title> <journal> Journal of the ACM 29(1) </journal> <pages> 24-32. </pages>
Reference: <author> Freuder, E. </author> <year> 1978. </year> <title> Synthesizing Constrain Expression. </title> <journal> Communications of the ACM 21(11) </journal> <pages> 958-966. </pages>
Reference-contexts: It is relatively easy to determine the ordering of a given constraint graph that has minimum width w (Freuder 1988; Freuder 1982). It might appear that all we need to do is to make this constraint graph strongly (w + 1)- consistent using the algorithms in <ref> (Freuder 1978) </ref>. Unfortunately, for K &gt; 2, the algorithm for obtaining K-consistency adds extra arcs in the constraint graph, which can increase the width of the graph. This means that a higher degree of consistency has to be achieved before a solution can be found without any backtracking.
Reference: <author> Freuder, E. and Quinn, M. </author> <year> 1985. </year> <title> Taking Advantage of Stable Sets of Variables in Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1076-1078. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference-contexts: Recall that these schemes make no effort to avoid redundant work. A simple intelligent backtracking scheme may turn out to have less overall complexity than a more complicated intelligent backtracking. The scheme presented in 14 <ref> (Freuder 1985) </ref> can be viewed as a simple intelligent backtracking scheme that takes advantage of the structure of the constraint graph to determine possible culprits of failure. Intelligent backtracking schemes developed for Prolog (e.g., Kumar 1988; Bruynooghe 1984; Pereira 1982). are also applicable to the CSPs. <p> Another possible heuristic is to instantiate those variables first that participate in the highest number of constraints. This tries to make sure that the unsuccessful branches of the tree are pruned early. Freuder and Quinn discussed an ordering in <ref> (Freuder 1985) </ref> which is somewhat related to the above heuristic. A set of variables with no direct constraints between any pair of them is called a stable set of variables. In their heuristic, the backtracking algorithm instantiates all the members of a stable set at the very end.
Reference: <author> Gaschnig, J. </author> <year> 1979. </year> <title> Performance Measurement and Analysis of Certain Search Algorithms. </title> <type> Ph.D. </type> <institution> Diss., Dept. of Computer Science, Carnegie Mel-lon Univ </institution> . 
Reference-contexts: Although, backtracking is strictly better than generate-and-test, its run-time complexity for most nontrivial problems is still exponential. One of the reasons for this poor performance is that the backtracking paradigm suffers from thrashing <ref> (Gaschnig 1979) </ref>; i.e., search in different parts of the space keeps failing for the same reasons. The simplest cause of thrashing concerns the unary predicates, and is referred to as node inconsistency (Mackworth 1977a).
Reference: <author> Gaschnig, J. </author> <year> 1978. </year> <title> Experimental Case Studies of Backtrack vs. Waltz-type vs. New Algorithms for Satisfying Assignment Problems. </title> <booktitle> In Proceedings of the Second Biennial Conf. Canadian Society for Computational Studies of Intelligence. </booktitle>
Reference: <author> Gaschnig, J. </author> <year> 1977. </year> <title> A General Backtrack Algorithm That Eliminates Most Redundant Tests. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 457-457. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference: <author> Gaschnig, J. </author> <year> 1974. </year> <title> A Constraint Satisfaction Method for Inference Making. </title> <booktitle> In Proceedings of the Twelfth Annual Allerton Conference on Circuit Systems Theory, </booktitle> <pages> 866-874. </pages> <institution> Urbana, Illinois: University of Illinois at Urbana-Champaign. </institution>
Reference: <author> Geffner, H. and Pearl, J. </author> <year> 1987. </year> <title> An Improved Constraint-Propagation Algorithm for Diagnosis. </title> <booktitle> In Proceedings of the Tenth International Joint Confer 22 ence on Artificial Intelligence, </booktitle> <pages> 1105-1111. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference-contexts: 1983; Allen 1984; Dechter 1989b; Vilain 1986; Tsang 1987), graph problems (McGregor 1979; Bruynooghe 1 1985), floor plan design (Eastman 1972), planning genetic experiments (Ste-fik 1981), the satisfiability problem (Zabih 1988), circuit design (de Kleer 1980; Birmingham 1988), machine design and manufacturing (Frayman 1987; Nadel 1990b; Navinchandra 1990), diagnostic reasoning <ref> (Geffner 1987) </ref>. The scope of this paper is restricted to those constraint satisfaction problems that can be stated as follows. We are given a set of variables, a finite and discrete domain for each variable, and a set of constraints.
Reference: <author> Gu, J. </author> <year> 1989. </year> <title> Parallel Algorithms and Architectures for Very Fast AI Search. </title> <type> PhD Thesis, </type> <institution> Computer Science Department, The University of Utah. </institution>
Reference-contexts: This method starts with a reasonable assignment of values to variables, and then continue to repair the values of variables until a correct solution is obtained. Sosic and Gu had earlier developed a similar algorithm independently of Minton <ref> (Gu 1989) </ref>. Another heuristic is to prefer the value (from those available) that leads to an easiest to solve CSP. Dechter and Pearl (Dechter 1988a) discuss one way of estimating the difficulty of solving a CSP.
Reference: <author> Han, C. C. and Lee, C. H. </author> <year> 1988. </year> <title> Comments on Mohr and Henderson's Path Consistency Algorithm. </title> <booktitle> Artificial Intelligence 36 </booktitle> <pages> 125-130. </pages>
Reference: <author> Haralick, R.; Davis, L. S.; and Rosenfeld, A. </author> <year> 1978. </year> <title> Reduction Operations for Constraint Satisfaction. </title> <booktitle> Information Science 14 </booktitle> <pages> 199-219. </pages>
Reference: <author> Haralick, R. and Elliot, G. </author> <year> 1980. </year> <title> Increasing Tree Search Efficiency for Constrain Satisfaction Problems. </title> <booktitle> Artificial Intelligence 14(3) </booktitle> <pages> 263-313. </pages>
Reference-contexts: For example, if the CSP has a solution, and if a correct value is chosen for each variable, then a solution can be found without any backtracking. One possible heuristic is to prefer those values that maximize the number of options available for future assignments <ref> (Haralick 1980) </ref>. By incorporating such a value-ordering heuristic in Stone and Stone's algorithm for solving the n-queens problem, Kale (Kale 1990) developed a backtrack based algorithm that can be used 16 to solve the problem with very little backtracking even for very large values of n (= 1000).
Reference: <author> Hummel, R. A.; Rosenfeld, A.; and Zucker, S.W. </author> <year> 1976. </year> <title> Scene Labelling by Relaxation Operations. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 6(6) </volume> <pages> 420-433. </pages>
Reference: <author> Kale, L. V. </author> <year> 1990. </year> <title> A Perfect Heuristic for the N Non-Attacking Queens Problem. </title> <note> Information Processing Letters 173-178. </note>
Reference-contexts: One possible heuristic is to prefer those values that maximize the number of options available for future assignments (Haralick 1980). By incorporating such a value-ordering heuristic in Stone and Stone's algorithm for solving the n-queens problem, Kale <ref> (Kale 1990) </ref> developed a backtrack based algorithm that can be used 16 to solve the problem with very little backtracking even for very large values of n (= 1000).
Reference: <author> Kumar, V. </author> <year> 1987. </year> <title> Depth-First Search. </title> <journal> In Encyclopaedia of Artificial Intelligence: </journal> <volume> Vol 2, </volume> <editor> ed. S. C. Shapiro, </editor> <address> 1004-1005. New York: </address> <publisher> John Wiley and Sons, Inc. </publisher>
Reference-contexts: Clearly, whenever a partial instantiation violates a constraint, backtracking is able to eliminate a subspace from the Cartesian product of all variable domains. The backtrack method essentially performs a depth-first search <ref> (Kumar 1987) </ref> of the space of potential solutions of the CSP. Although, backtracking is strictly better than generate-and-test, its run-time complexity for most nontrivial problems is still exponential.
Reference: <author> Kumar, V. and Lin, Y. </author> <year> 1988. </year> <title> A Data-Dependency Based Intelligent Backtracking Scheme for Prolog. </title> <journal> The Journal of Logic Programming 5(2): </journal> <pages> 165-181. </pages>
Reference: <author> Mackworth, A. K. </author> <year> 1977. </year> <title> Consistency in Networks of Relations. </title> <booktitle> Artificial Intelligence 8(1): </booktitle> <pages> 99-118. </pages>
Reference: <author> Mackworth, A. K. </author> <year> 1977. </year> <title> On Reading Sketch Maps. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 598-606. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference: <author> Mackworth, A. K. and Freuder, E. </author> <year> 1985. </year> <title> The Complexity of Some Polynomial Network Consistency Algorithms for Constraint Satisfaction Problems. </title> <booktitle> Artificial Intelligence 25 </booktitle> <pages> 65-74. </pages>
Reference: <author> Mackworth, A. K.; Mulder, J. A.; and Havens, W. S. </author> <year> 1985. </year> <title> Hierarchical Arc Consistency: Exploiting Structured Domains in Constraint Satisfaction. </title> <booktitle> Computational Intelligence 1(3) </booktitle> <pages> 118-126. </pages>
Reference: <author> McDermott, D. </author> <year> 1991. </year> <title> A General Framework for Reason Maintenance. </title> <booktitle> Artificial Intelligence 50 </booktitle> <pages> 289-329. </pages> <note> 23 McGregor, J. </note> <year> 1979. </year> <title> Relational Consistency Algorithms and Their Applica--tions in Finding Subgraph and Graph Isophormism. </title> <booktitle> Information Science </booktitle> 19:229-250. 
Reference: <author> Minton, S.; Johnston, M.; Phillips, A.; and Laird, P. </author> <year> 1990. </year> <title> Solving Large-Scale Constraint Satisfaction and Scheduling Problems Using a Heuristic Repair Method. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> 17-24. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Without incorporating Kale's heuristic, Stone and Stone's algorithm is not able to solve the n-queens problem for n much larger than 100. Minton, Philips and Laird <ref> (Minton 1990) </ref> have used similar value and variable ordering heuristics in a somewhat different framework to obtain solutions to the n-queen problem for n = 1; 000; 000.
Reference: <author> Mittal, S. and Falkenhainer, B. </author> <year> 1990. </year> <title> Dynamic Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> 25-32. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Mittal, S. and Frayman, F. </author> <year> 1987. </year> <title> Making Partial Choices in Constraint Reasoning Problems. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> 631-636. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Mohr, R. and Henderson, T. C. </author> <year> 1986. </year> <title> Arc and Path Consistency Revisited. </title> <booktitle> Artificial Intelligence 28 </booktitle> <pages> 225-233. </pages>
Reference-contexts: Assume that the domain size for each variable is d, and the total number of binary constraints (i.e., the arcs in the constraint graph) is e. The complexity of an arc-consistency algorithm given in (Mack-worth 1977a) is O (ed 3 ) (Mackworth 1985a). Mohr and Handerson <ref> (Mohr 1986) </ref> presented another arc-consistency algorithms which has a complexity of O (ed 2 ). To verify the arc-consistency, each arc must be inspected at least once which takes O (d 2 ) steps.
Reference: <author> Montanari, U. and Rossi, F. </author> <year> 1991. </year> <title> Constraint Relaxation May Be Perfect. </title> <journal> The Journal of Artificial Intelligence 48 </journal> <pages> 143-170. </pages> <editor> Montanari, U. </editor> <year> 1974. </year> <title> Networks of Constraints: Fundamental Properties and Applications to Picture Processing. </title> <booktitle> Information Science </booktitle> 7:95-132. 
Reference: <author> Nadel, B. </author> <year> 1990. </year> <title> Some Applications of the Constraint Satisfaction Problem. </title> <type> Technical Report CSC-90-008, </type> <institution> Computer Science Department, Wayne State University. </institution>
Reference: <author> Nadel, B. </author> <year> 1988. </year> <title> Tree Search and Arc Consistency in Constraint Satisfaction Algorithms. </title> <booktitle> In Search in Artificial Intelligence, </booktitle> <editor> ed. L. Kanal and V. Kumar, </editor> <address> 287-342. New York:Springer-Verlag. </address>
Reference-contexts: A number of algorithms for solving CSPs have been investigated by various researcher that essentially fit the above format (Haralick 1980; Nadel 1988; Fikes 1970; Gaschnig 1974; Ullman 1976; Haralick 1978; McGre-gor 1979; Dechter 1989a). In particular, Nadel <ref> (Nadel 1988) </ref> empirically compared the performance of the following algorithms: Generate and Test (GT), Simple Backtracking (BT), Forward Checking (FC), Partial Looka-head (PL), Full Lookahead (FL), Really Full Lookahead (RFL). All these algorithms primarily differ in the degrees of arc consistency performed at the nodes of the search tree. <p> All these algorithms primarily differ in the degrees of arc consistency performed at the nodes of the search tree. Figure 6 (adapted from <ref> (Nadel 1988) </ref>) depicts each of these algorithms as a combination of pure tree search and some fraction of arc consistency. On one extreme, GT is simple Generate-and-Test, and 12 at the other extreme, RFL is a complete 2-consistency algorithm embedded in backtracking. <p> If the domains of any of these uninstan-tiated variables becomes null, then failure is recognized and backtracking occurs. PL, FL and RFL are essentially augmented versions of FC that perform arc-consistency even between uninstantiated variables. Nadel <ref> (Nadel 1988) </ref> presented a comprehensive evaluation of these algorithms in the context of n-queens and confused n-queens problems. The n-queens problem is to place n queens on a nxn chess board in such a way that no pair of queens attack each other.
Reference: <author> Nadel, B. </author> <year> 1983. </year> <title> Consistent-Labeling Problems and their Algorithms: Expected Complexities and Theory Based Heuristics. </title> <booktitle> Artificial Intelligence 21 </booktitle> <pages> 135-178. </pages>
Reference-contexts: In particular, with this heuristic, they were able to solve the problem for n 96 using only a personal computer. The standard backtracking method could not solve the problem even for n = 30 in a reasonable amount of time. Nadel <ref> (Nadel 1983) </ref> presented an analytical framework that can be used to analyze the expected complexities of various search orders, and 15 select the best one from them. Feldman and Golumbic (Feldman 1989) ap-ply these ideas to the student scheduling problem and suggest some further extensions.
Reference: <author> Nadel, B. and Lin, J. </author> <year> 1991. </year> <title> Automobile Transmission Design as a Constraint Satisfaction Problem: Modeling the Kinematic Level. </title> <journal> Artificial Intelligence for Engineering Design, Analysis and Manufacturing (AI EDAM), </journal> <note> 5(2), (to appear). 24 Navinchandra, </note> <author> D. </author> <year> 1990. </year> <title> Exploration and Innovation in Design. </title> <address> New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Navinchandra, D. and Marks, D. H. </author> <year> 1987. </year> <title> Layout Planning as a Consistent Labelling Optimization Problem. </title> <booktitle> In Proceedings of the Fourth International Symposium on Robotics and AI in Construction. </booktitle> <address> Haifa, Israel. </address>
Reference: <author> Pereira, L. M. and Porto, A. </author> <year> 1982. </year> <title> Selective Backtracking. In Logic Programming, </title> <editor> ed. K. Clark and Sten-Ake Tarnlund, </editor> <address> 107-114. Boston: </address> <publisher> Academic. </publisher>
Reference: <author> Perlin, M. </author> <year> 1991. </year> <title> Arc Consistency for Factorable Relations. </title> <booktitle> In Proceeed-ings of the Third International Conference on Tools for AI, </booktitle> <pages> 340-345. </pages> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Petrie, C. </author> <year> 1987. </year> <title> Revised Dependency-Directed Backtracking for Default Reasoning. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> 167-172. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Although the amount of search performed by such a system is minimal, the procedures for determining the culprit of constraint violation and for choosing a new value of the variables are quite complex <ref> (Petrie 1987) </ref>. Hence, overall the scheme may take more time than even simple backtracking for a variety of problems. Hence a number of simplifications to this scheme have been developed by various researchers (e.g., Bruynooghe 1981; Rosiers 1986; Dechter 1986; Dechter 1990; Haralick 1980; Gaschnig 1977).
Reference: <author> Petrie, C.; Causey, R.; Steiner, D; and Dhar, V. </author> <year> 1989. </year> <title> A Planning Problem: Revisable Academic Course Scheduling. </title> <type> Technical Report AI-020-89, </type> <institution> MCC, Austin,TX. </institution>
Reference: <author> Prosser, P. </author> <year> 1991. </year> <title> Hybrid Algorithms for the Constraint Satisfaction Problem. </title> <institution> Research Report AISL-46-91, Computer Science Department, University of Strathclyde. </institution>
Reference: <author> Prosser, P. </author> <year> 1989. </year> <title> A Reactive Scheduling Agent. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1004-1009. </pages> <address> Menlo Park, Calif.: </address> <booktitle> International Joint Conferences on Artificial Intelligence. </booktitle>
Reference: <author> Purdom, P. </author> <year> 1983. </year> <title> Search Rearrangement Backtracking and Polynomial Average Time. </title> <booktitle> Artificial Intelligence 21 </booktitle> <pages> 117-133. </pages>
Reference: <author> Purdom, P. and Brown, C. </author> <year> 1982. </year> <title> An Empirical Comparison of Backtracking Algorithms. </title> <journal> IEEE. Trans. Pattern. Anal. and Machine Intell., PAMI-4:309-316. </journal>
Reference: <author> Purdom, P. and Brown, C. </author> <title> 1981 An Average Time Analysis of Backtracking. </title> <journal> SIAM Journal of Comp. </journal> <volume> 10(3) </volume> <pages> 583-593. </pages>
Reference: <author> Purdom, P.; Brown, C.; and Robertson, E. L. </author> <year> 1981. </year> <title> Backtracking with Multi-Level Dynamic Search Rearrangement. </title> <journal> Acta Informatica 15 </journal> <volume> 99-113. 25 Rit, </volume> <editor> J. F. </editor> <year> 1986. </year> <title> Propagating Temporal Constraints for Scheduling. </title> <booktitle> In Pro--ceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> 383-386. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Rosiers, W. and Bruynooghe, M. </author> <year> 1986. </year> <title> Empirical Study of Some Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of AIMSA 86, </booktitle> <address> Bulgaria, </address> <publisher> North Hol-land. </publisher>
Reference: <author> Rossi, F.; Petrie, C.; and Dhar, V. </author> <year> 1989. </year> <title> On the Equivalence of Constraint Satisfaction Problems. </title> <type> Technical Report ACT-AI-222-89, </type> <institution> MCC, Austin, TX. </institution>
Reference-contexts: In this paper, we further restrict the discussion to the CSPs in which each constraint is either unary or binary. We will refer to such a CSP as a binary CSP. It is possible to convert a CSP with n-ary constraints to another equivalent binary CSP <ref> (Rossi 1989) </ref>. A binary CSP can be depicted by a constraint graph, in which each node represents a variable, and each arc represents a constraint between variables represented by the end points of the arc. A unary constraint is represented by an arc originating and terminating at the same node.
Reference: <author> Sadeh, N. </author> <year> 1991. </year> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling. </title> <institution> Dissertation CMU-CS-91-102, Computer Science Department, Carnegie Mellon. </institution>
Reference-contexts: They also present experimental evaluation of this heuristic as well as its variations on randomly generated CSPs, and show that a variation of this heuristic helps in reducing the overall search effort. Good value ordering heuristics are expected to be highly problem-specific. For example, in <ref> (Sadeh 1991) </ref>, it is shown that Dechter and Pearl's value ordering heuristic performs quite poorly for the Job-shop scheduling problem.
Reference: <author> Shapiro, L. and Haralick, R. </author> <year> 1981. </year> <title> Structural Descriptions and Inexact Matching. </title> <journal> IEEE Transactions Pattern Analysis and Machine Intelligence 3(5) </journal> <pages> 504-518. </pages>
Reference: <author> Stallman, R. and Sussman, G. J. </author> <year> 1977. </year> <title> Forward Reasoning and Dependency Directed Backtracking. </title> <booktitle> Artificial Intelligence 9(2) </booktitle> <pages> 135-196. </pages>
Reference-contexts: There is a backtracking based method that eliminates both of these drawbacks of backtracking. This method is traditionally called dependency-directed backtracking <ref> (Stallman 1977) </ref> and is used in truth maintenance systems (Doyle 1979; McDermott 1991). A CSP can be solved by Doyle's RMS (Doyle 1979; Stallman 1977) as follows.
Reference: <author> Stefik, M. </author> <year> 1981. </year> <title> Planning With Constraints (Molgen: Part I). </title> <booktitle> Artificial Intelligence 16 </booktitle> <pages> 111-140. </pages>
Reference: <author> Stone, H. S. and Stone, J. </author> <year> 1986. </year> <title> Efficient Search Techniques: An Empirical Study of the N-Queens Problem. </title> <type> Technical Report RC 12057, </type> <institution> IBM T. J. Watson Research Center, </institution> <address> New York. </address>
Reference-contexts: Purdom and Brown's results show that for significant classes of problems, search rearrangement backtracking provides a substantial improvement over the standard backtracking method. For the n-queens problem, Stone and Stone <ref> (Stone 1986) </ref> experimentally showed that the search rearrangement heuristic led to dozens of orders of magnitude improvement for large values of n. In particular, with this heuristic, they were able to solve the problem for n 96 using only a personal computer.
Reference: <author> Tsang, E. P. K. </author> <year> 1987. </year> <title> The Consistent Labeling Problem in Temporal Reasoning. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> 251-255. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Ullman, J. R. </author> <year> 1976. </year> <title> An Algorithm for Subgraph Isomorphism. </title> <journal> Journal of the ACM 23 </journal> <pages> 31-42. </pages>
Reference: <author> Vilain, M. and Kautz, H. </author> <year> 1986. </year> <title> Constraint Propagation Algorithms for Temporal Reasoning. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> 377-382. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: <author> Waltz, D. </author> <year> 1975. </year> <title> Understanding Line Drawings of Scenes with Shadows. In The Psychology of Computer Vision, </title> <editor> ed. P. H. </editor> <publisher> Winston, </publisher> <pages> 19-91. </pages> <address> Cambridge, Mass.: McGraw Hill. </address> <note> 26 Zabih, </note> <author> R. </author> <year> 1990. </year> <title> Some Applications of Graph Bandwidth to Constraint Sat--isfaction Problems. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 46-51. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference-contexts: while Q not empty select and delete any arc (V k ,V m ) from Q; if (REVISE (V k ,V m ) then Q [ f (V i ,V k ) such that (V i ,V k )2arcs (G),i6=k,i6=mg endif; endwhile; end AC The well known algorithm of Waltz <ref> (Waltz 1975) </ref> is a special case of this algorithm, and is equivalent to another algorithm AC-2 discussed in (Mackworth 1977a). Assume that the domain size for each variable is d, and the total number of binary constraints (i.e., the arcs in the constraint graph) is e. <p> Nevertheless, by making the constraint graph to be arc-consistent, it is often possible to reduce the search done by the backtracking procedure. Waltz showed that for the problem of labeling polyhedral scenes, arc-consistency substantially reduced the search space <ref> (Waltz 1975) </ref>. In some of the instances of this problem, the solution was found after no further search.
Reference: <author> Zabih, R. and McAllester, D. </author> <year> 1988. </year> <title> A Rearrangement Search Strategy for Determining Propositional Satisfiability. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 155-160. </pages> <address> Menlo Park, Calif.: </address> <booktitle> American Association for Artificial Intelligence. </booktitle> <pages> 27 </pages>
Reference-contexts: 1987; Dechter 1988a; Dhar 1990a), scheduling (Dhar 1990b; Fox 1987; Fox 1989; Petrie 1989; Prosser 1989; Rit 1986), temporal reasoning (Allen 1983; Allen 1984; Dechter 1989b; Vilain 1986; Tsang 1987), graph problems (McGregor 1979; Bruynooghe 1 1985), floor plan design (Eastman 1972), planning genetic experiments (Ste-fik 1981), the satisfiability problem <ref> (Zabih 1988) </ref>, circuit design (de Kleer 1980; Birmingham 1988), machine design and manufacturing (Frayman 1987; Nadel 1990b; Navinchandra 1990), diagnostic reasoning (Geffner 1987). The scope of this paper is restricted to those constraint satisfaction problems that can be stated as follows.
References-found: 86

