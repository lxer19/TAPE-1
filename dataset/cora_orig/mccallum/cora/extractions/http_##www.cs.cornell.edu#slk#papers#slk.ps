URL: http://www.cs.cornell.edu/slk/papers/slk.ps
Refering-URL: http://www.cs.cornell.edu/slk/papers.html
Root-URL: 
Title: SLK: A Capability System Based on Safe Language Technology  
Author: Chris Hawblitzel, ChiChao Chang, Grzegorz Czajkowski, Deyu Hu, and Thorsten von Eicken 
Address: DRAFT  
Affiliation: Department of Computer Science Cornell University  
Note: DRAFT 04/15/97 DO NOT DISTRIBUTE 1  
Abstract: Safe language technology allows multiple protection domains to coexist within a single address space. The protection is enforced by the language system, in particular the type system, which provides unforgeable object references. This paper develops a new capability model (called the type-capability model) which relates the protection offered by safe languages to that of traditional capability systems. This model is used to show that the power of capabilities can be obtained in a safe language at low cost through a combination of link-time and runtime protection checks. The Safe Language Kernel (SLK) leverages the type-capability model to implement multiple protection domains with low-overhead fine-grain sharing in a single address space. A Java-based prototype implementation of SLK is used to describe the mechanisms available for sharing data and code. A set of microbenchmarks demonstrates the low overhead of crossing protection domain boundaries and three server-based application studies (an extensible web server, a shared annotation system, and Active Networks) illustrate the use of SLK. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. SuperWeb: </author> <title> Towards a Global Web-Based Parallel Computing Infrastructure. </title> <booktitle> In Proceedings of the 11 th IEEE International Parallel Processing Symposium (IPPS), </booktitle> <address> Geneva, </address> <month> April </month> <year> 1997. </year>
Reference: 2. <author> B. N. Bershad, S. Savage, P. Pardyak, D. Becker, M. Fiuczynski, and E. G. Sirer. </author> <title> Protection is a Software Issue. </title> <booktitle> In Proceedings of the 5th Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <pages> pages 62-65, </pages> <address> Orcas Island, WA. </address>
Reference: 3. <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15 th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The current state of affairs is that browsers provide ill-defined backdoor communication channels. DRAFT 04/15/97 DO NOT DISTRIBUTE 2 relates capabilities with object references (pointers) in safe languages. Unlike previously claimed <ref> [3] </ref>, object references are not in themselves capabilities. Rather, within a linkage module (the unit of code manipulated by the linker), all uses of object references of a given type share the same access rights, and these access rights are determined at link time. <p> in the extensions operate on protected data structures provided by the core. 7 Related Work This section first discusses similarities and differences between SLK and closely related work, and then provides a broader perspective on related operating systems techniques for extensibility. 7.1 Safe language based systems The SPIN operating system <ref> [3] </ref> uses a safe subset of Modula-3 [26] to provide an infrastructure for running user-level code in the kernel.
Reference: 4. <author> B. N. Bershad, T. E. Anderson, E. D. Lazowska, and H. M. Levy. </author> <title> Lightweight Remote Procedure Call. </title> <booktitle> In Proceedings of the 12 th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 102-113, </pages> <address> Arizona, </address> <month> December, </month> <year> 1989. </year>
Reference-contexts: RPC is used in most other systems; it requires a thread switch and provides protection by separating the callers and callees threads. A large body of work has improved the performance of RPC, in particular local RPC <ref> [4] </ref>. [6,14,11] further explored a model of migrating threads where a single thread of control is used in an RPC. However, the emphasis of this work is on improving performance at the expense of fault isolation.
Reference: 5. <author> J. S. Chase, H. M. Levy, E. D. Lazowska, and M. Baker-Harvey. </author> <title> Lightweight Shared Objects in a 64-Bit Operating System. </title> <booktitle> In Proceedings of the ACM ObjectOriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: The one common concept, however, is that objects can specify their own protection policies using runtime checks on a permethod invocation basis. Opal <ref> [5] </ref> supports object-based sharing of data and services; however, it emphasizes support for persistent objects. Sharing and access control are at the granularity of a VM page.
Reference: 6. <author> R. K. Clark, E. D. Jensen, and F. D. Reynolds. </author> <title> An Architectural Overview of the Alpha Real-time Distributed Kernel. </title> <booktitle> USENIX Workshop on Micro-kernels and Other Kernel Architectures, </booktitle> <address> Seattle, WA, </address> <month> April </month> <year> 1992. </year> <type> DRAFT 04/15/97 DO NOT DISTRIBUTE 19 </type>
Reference: 7. <author> E. Cooper, R. Harper and P. Lee. </author> <title> The Fox project: Advanced Development of Systems Software. </title> <type> Technical Report CMU-CS-91-178, </type> <institution> Carnegie Mellon University, </institution> <month> August </month> <year> 1991. </year>
Reference: 8. <author> J. Davis and D. Hutttenlocher. </author> <title> Shared Annotation for Cooperative Learning. </title> <booktitle> In Proceedings of Computer Support for Cooperative Learning Conference, </booktitle> <year> 1995. </year>
Reference-contexts: The resources installed by servlets automatically inherit this mechanism. If the servlets were external to Jigsaw, they would have to re-implement this feature and thereby create a distributed resource management problem. 6.2 The CoNote Annotation System CoNote <ref> [8] </ref> is a cooperative work system providing shared annotations on a set of web documents. It is used in undergraduate courses at Cornell where it replaces newsgroups and mailing lists. The instructor places course documents on the web and inserts annotation points (using a special HTML tag) in appropriate places.
Reference: 9. <author> J. Dennis and E. Van Horn. </author> <title> Programming Semantics for Multiprogramming Systems. </title> <journal> Communications of the ACM 9(3), </journal> <month> December </month> <year> 1966. </year>
Reference-contexts: The fundamental notion is that object references cannot be forged, so that a computation can access an object only if it is explicitly given a reference to it. Basing the protection model on unforgeable references can be traced back to the beginnings of capability systems <ref> [9] </ref> (see [17] for a summary). A capability consists of an object reference and a set of access rights. Every operation performed on the object checks the access rights to determine whether the operation is permitted. The machine also ensures that capabilities cannot be forged.
Reference: 10. <author> D. R. Engler, M. F. Kaashoek, and J. James OToole. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the 15 th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Communication among extensions and the OS is limited to the traditional system call and RPC interfaces and shared virtual memory pages, which incur high overhead and force coarse granularity of sharing. The microkernel approach to extensibility leaves most of the OS functionality to user-level servers and libraries. Exokernel <ref> [10] </ref> takes this approach to an extreme by pushing almost all OS abstractions out of the kernel and only efficiently and securely multiplexes hardware resources among applications. This enables most OS functionality and policies to be easily extended or replaced [16] by writing applicationspecific user-level OS libraries.
Reference: 11. <author> B. Ford and J. Lepreau. </author> <title> Evolving Mach 3.0 to a Migrating Thread Model. </title> <booktitle> In 1994 Winter USENIX Conference, </booktitle> <month> January </month> <year> 1994. </year>
Reference: 12. <author> I. Goldberg, D. Wagner, R. Thomas, E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium. </booktitle>
Reference-contexts: With system call interception <ref> [12] </ref>, an extension module can be loaded into a process in a standard OS and a set of security wrappers intercepts all system calls to prevent compromising the servers integrity. The advantage of this approach is that no modifications to either the OS or the application are required.
Reference: 13. <author> J. Gosling, B. Joy, G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference: 14. <author> G. Hamilton and P. Kougiouris. </author> <title> The Spring Nucleus: A Microkernel for Objects. </title> <booktitle> In Proceedings of the Summer 1993 USENIX, </booktitle> <month> June </month> <year> 1993. </year>
Reference: 15. <author> A. K. Jones and W. A. Wulf. </author> <title> Towards the Design of Secure Systems. </title> <journal> Software Practice and Experience, </journal> <volume> Vol. 5, No. </volume> <pages> 4. </pages>
Reference-contexts: Despite these differences, SLK provides equally flexible and powerful protection as capability-based systems do. To briefly illustrate this, the following paragraph describes how two interesting examples presented in the Hydra paper <ref> [15] </ref> can be mapped into SLK. The first example from Hydra revolves around an untrusted courier that stores and delivers a classified document from one protection domain to another without being able to examine its contents. Objects in SLK can be handed to an untrusted courier using several mechanisms.
Reference: 16. <author> M. F. Kaashoek, D. R. Engler, G. R. Ganger, and D. A. Wallach. </author> <title> Server Operating Systems. </title> <booktitle> SIGOPS European Workshop, </booktitle> <month> September , </month> <year> 1996. </year>
Reference-contexts: Exokernel [10] takes this approach to an extreme by pushing almost all OS abstractions out of the kernel and only efficiently and securely multiplexes hardware resources among applications. This enables most OS functionality and policies to be easily extended or replaced <ref> [16] </ref> by writing applicationspecific user-level OS libraries. In addition, small pieces of untrusted code (ASH application specific handler [38]) can be downloaded into the kernel to improve application performance.
Reference: 17. <author> H. M. Levy. </author> <title> Capability-Based Computer Systems. </title> <publisher> Digital Press, </publisher> <address> Bedford, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: The fundamental notion is that object references cannot be forged, so that a computation can access an object only if it is explicitly given a reference to it. Basing the protection model on unforgeable references can be traced back to the beginnings of capability systems [9] (see <ref> [17] </ref> for a summary). A capability consists of an object reference and a set of access rights. Every operation performed on the object checks the access rights to determine whether the operation is permitted. The machine also ensures that capabilities cannot be forged. <p> As described in Section 6, SLK implements Jeeves servlet API but provides more flexible protection and sharing across servlets. 7.2 Object-based systems Traditionally, protection mechanisms in object-based systems <ref> [17] </ref> have centered on the capability concept. Capability-based systems, especially Hydra, provided much inspiration for SLK. Capability implementations have Jigsaw and installs the authentication and annotation filters on the root of the sub-tree. Client servlets interface with the maintainer servlet to install additional filters. <p> If these issues are solved, PCC could be incorporated into SLK to enable multiple language interoperability. 7.4 Cross domain communication Capability-based object systems and monolithic kernels have used different models for cross protection domain control transfer and communication. Capability-based systems use protected procedure calls <ref> [17] </ref>, which use a single thread of control across domains. This implies that the thread of control itself is not protected during the call. RPC is used in most other systems; it requires a thread switch and provides protection by separating the callers and callees threads.
Reference: 18. <editor> J. Liedtke. </editor> <booktitle> 2Qfl NHUQHOfl &RQVWUXFWLRQfl In Proceedings of the 15 th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference: 19. <author> P. Madany, et. al. </author> <title> JavaOS : A Standalone Java Environment. </title> <type> White Paper, </type> <institution> Sun Microsystems. </institution>
Reference-contexts: Section 7 discusses related work and relevant operating system techniques. Finally, Section 8 summarizes the paper. 2 The security models described could also be used to build a multiuser Java based operating system running directly on bare hardware in the style of JavaOS <ref> [19] </ref>. However, although interesting, this setting is not further discussed in this paper. 2 Capabilities in a Safe Language Environment In traditional operating systems, protection is based on address spaces and privileged execution modes. <p> Systems that use Java as the primary language for writing operating systems and extensible environments are just emerging. Suns JavaOS <ref> [19] </ref> focuses on small-footprint embedded single-user systems, where protection is a secondary concern. The concepts advocated by SLK could probably be adapted to JavaOS easily. Suns Jeeves [34] shares many goals with SLK in providing a framework for building extensible network servers. Jeeves defines an API for uploading servlets dynamically.
Reference: 20. <institution> Microsoft Corp. Internet Service Support. </institution> <note> http://www.microsoft.com/infoserversup. </note>
Reference-contexts: The trend towards dynamic web hosting is clear in recent web servers. Most include an API that allows extensions to be loaded into the server process. The best known are probably Jeeves servlet API [34] and IIS ISAPI <ref> [20] </ref>. However, all these APIs offer only the most rudimentary form of protection, largely because their primary goal is to provide an efficient alternative to CGI scripts.
Reference: 21. <author> J. G. Mitchell, et. al. </author> <title> An Overview of the Spring System. </title> <booktitle> COMPCON, </booktitle> <month> Spring </month> <year> 1994, </year> <month> February </month> <year> 1994. </year>
Reference: 22. <author> P. Mosberger and L. Peterson. </author> <title> Making Paths Explicit in the Scout Operating System. </title> <booktitle> In Proceedings of the 2 nd Operating Systems Design and Implementation (OSDI), </booktitle> <address> Seattle, WA, </address> <month> October, </month> <year> 1996. </year>
Reference: 23. <author> H. Mossenbock. </author> <title> Extensibility in the Oberon System. </title> <journal> Nordic Journal of Computing 1(1), </journal> <month> February </month> <year> 1994. </year>
Reference: 24. <author> J. H. Morris Jr. </author> <title> Protection in Programming Languages. </title> <journal> Communications of the ACM 16(1), </journal> <month> January </month> <year> 1973. </year>
Reference-contexts: The wrappers shown here are similar in spirit to proxy objects, stubs, and surrogate objects used in distributed systems. The idea of using safeboxes and signatures in the form shown here can be traced back to early work on type safe languages <ref> [24] </ref>. However, the functional framework used at the time did not allow the implementation of these concepts in the language itself. Compared to traditional capability systems with hardware support for dynamic access rights checking, the type-capability model in conjunction with the wrappers provides a different tradeoff.
Reference: 25. <author> G. Necula and P. Lee. </author> <title> Safe Kernel Extensions Without RunTime Checking. </title> <booktitle> In Proceedings of the 2 nd Operating Systems Design and Implementation (OSDI), </booktitle> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Sharing of data is achieved by mapping the shared region into multiple fault domains. In general, SFI focuses on protecting large segments of the address space and is not well suited for sharing small objects. The main idea of proof carrying code <ref> [25] </ref> is that an extension carries with it a proof that the code obeys safety policies defined by the kernel. The kernel can then check the validity of the proof and load the extension. Once loaded, the extension code module requires no runtime checks.
Reference: 26. <author> G. Nelson, ed. </author> <title> System Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: structures provided by the core. 7 Related Work This section first discusses similarities and differences between SLK and closely related work, and then provides a broader perspective on related operating systems techniques for extensibility. 7.1 Safe language based systems The SPIN operating system [3] uses a safe subset of Modula-3 <ref> [26] </ref> to provide an infrastructure for running user-level code in the kernel.
Reference: 27. <author> T. Proebsting, G. Townsend, P. Bridges, J. Hartman, T. Newsham, S. Watterson. Toba: </author> <title> Java for Applications: </title>
Reference-contexts: In addition, Toba <ref> [27] </ref>, a Java to C compiler and runtime environment developed at the University of Arizona, is used on both platforms. Each mechanism is measured in a tight loop and thus the results are optimistic with respect to cache behavior.
References-found: 27

