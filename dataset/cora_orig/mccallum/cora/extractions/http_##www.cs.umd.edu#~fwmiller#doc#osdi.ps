URL: http://www.cs.umd.edu/~fwmiller/doc/osdi.ps
Refering-URL: http://www.cs.umd.edu/~fwmiller/doc/pub.html
Root-URL: 
Email: ffwmiller, tripathig@cs.umd.edu  
Title: Kernel Support for Simple Input/Output Streaming with Quality of Service  
Author: Frank W. Miller and Satish K. Tripathi 
Date: December 10, 1996  
Address: College Park, MD 20742  
Affiliation: Mobile Computing and Multimedia Laboratory Department of Computer Science University of Maryland  
Abstract: In traditional operating systems, input/output (I/O) subsystems implement a push-pull environment that provides system calls to allow user applications to pull data from or push data to a device. An important set of applications make combined use of push-pull to implement simple streaming, i. e. data is moved from one device to another with no transformations. Using push-pull I/O to implement these applications does not provide maximum performance. There are too many system calls and data copies. This work proposes a kernel design optimized for simple streaming applications. The work targets the entire kernel design, from system calls to the hardware interface. Target systems include Internet file and video on-demand servers. Such systems are currently implemented predominantly using application-level server software running on UNIX variants. The RoadRunner operating system is being developed specifically to implement multiple, concurrent, high-speed speed data streams with Quality-of-Service (QOS) parameters.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> University of California, Berkeley, BSD 4.4-Lite man pages. </institution>
Reference-contexts: The second and third column map the typical sequence of calls required for both the server and client to perform equivalent semantic functions. Of more concern are the parameters provided to the various calls. Figure 6 lists semantically equivalent parameter specifications for the system calls in Table 1 <ref> [1] </ref>. The parameters for these calls have semantic analogies in the same way that the function call interfaces are analogous. Table 2 presents a comparison of parameters. The first column lists a parameter present in a file system/device driver system call.
Reference: [2] <author> Bershad, B., Savage, S., Pardyak, p., Sirer, E., Fiuczynski, M., Becker, D., Chambers, C., and Eggers, S., </author> <title> "Extensibility, Safety, and Performance in the SPIN Operating System", </title> <booktitle> Proc. of the 15th SOSP, </booktitle> <year> 1995. </year>
Reference-contexts: Specifically, RoadRunner seeks to generalize the handling of stream endpoints and to take into account QOS parameters. 4.2 SPIN and LKMs The SPIN project <ref> [2] </ref> and Loadable Kernel Modules (LKMs) present in the BSD variants represent the ability to generalize of the stream () system call. These approaches allow applications to download executable code from a user address space into the kernel. SPIN terms its kernel modules spindles.
Reference: [3] <author> Draves, R., Bershad, B., Rashid, R., and Dean, R., </author> <title> "Using Continuations to Implement Thread Management and Communication in Operating Systems", </title> <booktitle> Proc. of the 13th SOSP, </booktitle> <year> 1991. </year>
Reference-contexts: Several requirements have been developed for the kernel design. Multi-threaded The kernel should be multi-threaded in order to support multiple streams while other activity occurs in the system. Experience has shown that lackadaisical use of kernel threads can cause resource utilization problems <ref> [3] </ref>. Although continuations could be used to avoid overutilization, another approach is to make judicious use of a few, tightly integrated threads. Each stream () system call is allocated a thread, however, a small set of threads is used to process other system calls for user processes.
Reference: [4] <author> Druschel, P. and Peterson, L., "Fbufs: </author> <title> A High-Bandwidth Cross-Domain Transfer Facility", </title> <booktitle> Proc. of the 14th SOSP, </booktitle> <year> 1993. </year>
Reference-contexts: The SPIN project appears to currently be concerned with basic kernel level issues, i. e. no disussion of I/O subsystem issues has been presented. While unifying the interfaces and buffer pools for various I/O elements may be implemented, it does not now exist. 4.3 Fbufs Druschel's work with Fbufs <ref> [4] </ref> could be used to improve the performance of streaming applications. Fbufs are virtual memory pages that get remapped between different virtual address spaces in order to avoid copying the data in the page from one address space to another.
Reference: [5] <author> Fall, K. and Pasquale, J., </author> <title> "Improving Continuous-Media Playback Performance With In-Kernel Data Paths", </title> <booktitle> Proceedings of the IEEE International Conference on Multimedia Computing and Systems (ICMCS), </booktitle> <pages> pp. 100-109, </pages> <year> 1994. </year>
Reference-contexts: The splice () <ref> [5, 6] </ref> system call was proposed for addition to the UNIX I/O subsystem. The idea was to supplement what was termed a memory-oriented I/O (MIO) model with a kernel based peer-to-peer I/O (PPIO) model. These terms are equivalent to the push-pull and stream models, respectively, described in this work.
Reference: [6] <author> Fall, K., </author> <title> A Peer-to-Peer I/O System in Support of I/O Intensive Workloads, </title> <type> Ph. D. Thesis, </type> <institution> University of California/San Diego, </institution> <year> 1994. </year>
Reference-contexts: The splice () <ref> [5, 6] </ref> system call was proposed for addition to the UNIX I/O subsystem. The idea was to supplement what was termed a memory-oriented I/O (MIO) model with a kernel based peer-to-peer I/O (PPIO) model. These terms are equivalent to the push-pull and stream models, respectively, described in this work.
Reference: [7] <author> Kanakia, H., Saha, D., and Tripathi, S., </author> <title> "RoadRunner : An Operating System for Multimedia Applications", </title> <type> manuscript, </type> <year> 1995. </year>
Reference-contexts: The work targets the entire kernel design, from system calls to the hardware interface. Target systems include Internet file and video on-demand servers. Such systems are currently implemented predominantly using application-level server software running on UNIX variants. The RoadRunner operating system <ref> [7] </ref> is being developed specifically to implement multiple, concurrent, high-speed speed data streams with Quality-of-Service (QOS) parameters. In Section 2, performance measurements of experiment servers implemented using traditional push-pull are presented. The results of these experiments demonstrate the weaknesses associated with using the push-pull model on UNIX systems.
Reference: [8] <author> Kleinman, S., "Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX", </title> <booktitle> Proc. of the Summer 1986 USENIX Conference, </booktitle> <pages> pp. 238-247, </pages> <year> 1986. </year>
Reference: [9] <author> Liedtke, J., </author> <title> "Fast Thread Management and Communication Without Continuations", </title> <booktitle> USENIX Workshop Proceedings, </booktitle> <address> Seattle, WA, </address> <year> 1992. </year>
Reference-contexts: However, programming interface and buffering differences in the implementations of these elements must be addressed. 2 The end-systems are only half the picture, determinism must increase in the network itself as well. 3 Still considered expensive in commercial systems despite claims in <ref> [9, 10] </ref> that it can be improved upon. 5 Device Device Buffer Code Code ? ? User Kernel 1 1. User executes a 2. In-kernel service repeatedly pulles data from device to kernel buffer. 3.
Reference: [10] <author> Liedtke, J., </author> <title> "On Micro-kernel Construction", </title> <booktitle> Proc. of the 15th SOSP, </booktitle> <year> 1995. </year>
Reference-contexts: However, programming interface and buffering differences in the implementations of these elements must be addressed. 2 The end-systems are only half the picture, determinism must increase in the network itself as well. 3 Still considered expensive in commercial systems despite claims in <ref> [9, 10] </ref> that it can be improved upon. 5 Device Device Buffer Code Code ? ? User Kernel 1 1. User executes a 2. In-kernel service repeatedly pulles data from device to kernel buffer. 3.
Reference: [11] <author> Liu, C. and Layland, J., </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment", </title> <journal> JACM, </journal> <volume> 20, </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference-contexts: These priorities are partitioned temporally. The kernel operates on a configurable cycle, set to 20 Hz by default. A configurable quantum of the cycle period is allocated to threads having the lowest priority. The remainder of the period executes processes using a traditional fixed priority algorithm <ref> [11] </ref>. These priorities can be allocated in accordance with the Rate Monotonic Analysis to obtain optimal real-time performance.
Reference: [12] <institution> AT&T Bell Laboratories, </institution> <note> Plan 9: The Documents Volume 2, </note> <year> 1995. </year>
Reference-contexts: A common name space is used to address the different I/O elements. This approach is similar to the global name space used by Plan 9 <ref> [12] </ref>. The name space uses conventions to identify different I/O elements. For example, a floppy device driver might be addressed using the path /dev/floppy or a UDP connection to another host might be addressed with the path /net/udp/yangtze.cs.umd.edu:4000. The schedule is a file that describes the transmission parameters.
Reference: [13] <author> Ramakrishnan, K., Vaitzblit, L., Gray, C., Vahalia, U., Ting, D., Tzelnic, P., Glazer, S., and Duso, W., </author> <title> "Operating System Support for Video-on-Demand File Service", </title> <journal> Multimedia Systems, </journal> <volume> 3, </volume> <pages> pp. 53-65, </pages> <year> 1995. </year>
Reference-contexts: Other kernel elements are designed to minimize the use of kernel threads. Real-time To support threads that have timing constraints, a real-time implementation is necessary. Threads are scheduled using a fixed priority design based on that used in <ref> [13] </ref>. The kernel defines 256 priority levels. These priorities are partitioned temporally. The kernel operates on a configurable cycle, set to 20 Hz by default. A configurable quantum of the cycle period is allocated to threads having the lowest priority.
Reference: [14] <author> Salehi, J., Zhang, Z., and Towsley, D., </author> <title> "Supporting Stored Video: Reducing Rate Variability and End-to-End Resource Requirements through Optimal Smoothing", </title> <booktitle> Proc. of SIGMETRICS '96 (to appear), </booktitle> <year> 1996. </year>
Reference-contexts: The specific intent of the schedule is to support QOS timing parameters for periodic streaming applications. This file format has been developed as a result of implementing Salehi's algorithm <ref> [14] </ref> for smoothing video to be transmitted across a network. 6 Current Status and Conclusions This work focusses on simple data streaming with QOS. Evidence has been presented to support the claim that current push-pull I/O designs do not provide optimal performance for these applications.
Reference: [15] <author> Stevens, W. R., </author> <title> TCP/IP Illustrated, </title> <booktitle> Volume 2 The Implementation, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1994. </year> <month> 14 </month>
Reference-contexts: Network protocols are required to transfer packets that can have variable length to and from network devices. As a result, their buffer pool uses mbufs <ref> [15] </ref> that are designed to to deal with varying buffer sizes while avoiding data copies. 7 Table 3: Buffering Required for Source Sink Combinations Sink File Device Network File Fixed Fixed Fixed Source Device Fixed Fixed Fixed Network Variable Variable Variable The need to buffer fixed and variable sized data segments
References-found: 15

