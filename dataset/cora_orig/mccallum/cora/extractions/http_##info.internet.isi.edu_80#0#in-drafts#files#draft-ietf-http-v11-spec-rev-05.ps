URL: http://info.internet.isi.edu:80/0/in-drafts/files/draft-ietf-http-v11-spec-rev-05.ps
Refering-URL: http://info.internet.isi.edu:80/in-drafts/id-abstracts.html
Root-URL: http://www.isi.edu
Title: Hypertext Transfer Protocol HTTP/1.1 Status of Internet-Drafts are draft documents valid for a maximum of
Author: INTERNET-DRAFT J. Gettys, Compaq/WC &lt;draft-ietf-http-v-spec-rev-&gt; J. C. Mogul, Compaq H. Frystyk, WC/MIT L. Masinter, Xerox P. Leach, Microsoft T. Berners-Lee, WC/MIT 
Address: West Coast).  
Web: ftp.is.co.za (Africa), nic.nordu.net (Europe), munnari.oz.au  
Date: Expires March 11, 1999 September 11, 1998  
Affiliation: UC Irvine  
Note: Fielding, et al [Page 1] HTTP Working Group R. Fielding,  this Memo This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working documents as Internet-Drafts.  and may be updated, replaced, or made obsolete by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as work in progress. To learn the current status of any Internet-Draft, please check the 1id-abstracts.txt listing contained in the Internet-Drafts Shadow Directories on  (Pacific Rim), ftp.ietf.org (US East Coast), or ftp.isi.edu (US  HTTP has been in use by the WorldWide Web global information initiative since 1990. This specification defines the protocol referred to as HTTP/1.1, and is an update to RFC 2068 [33]. Copyright Notice Copyright (C) The Internet Society (1998). All Rights Reserved. See section 20 for the full copyright notice.  
Abstract: Distribution of this document is unlimited. Please send comments to the HTTP working group at &lt; http-wg@hplb.hpl.hp.com &gt;. Discussions of the working group are archived at http://www.ics.uci.edu/pub/ietf/http/ . General discussions about HTTP and the applications which use HTTP should take place on the &lt; www-talk@w3.org &gt; mailing list. The IETF takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on the IETF's procedures with respect to rights in standards-track and standards-related documentation can be found in BCP-9 [46]. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification can be obtained from the IETF Secretariat. Abstract The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems. It is a generic, stateless, protocol which can be used for many tasks beyond its use for hypertext, such as name servers and distributed object management systems, through extension of its request methods, error codes and headers [47]. A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alvestrand, H., </author> <title> Tags for the Identification of Languages RFC 1766, </title> <address> UNINETT, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Computer languages are explicitly excluded. HTTP uses language tags within the Accept-Language and Content-Language fields. The syntax and registry of HTTP language tags is the same as that defined by RFC 1766 <ref> [1] </ref>. In summary, a language tag is composed of 1 or more parts: A primary language tag and a possibly empty series of subtags: language-tag = primary-tag *( "-" subtag ) primary-tag = 1*8ALPHA subtag = 1*8ALPHA White space is not allowed within the tag and all tags are caseinsensitive.
Reference: [2] <author> Anklesaria, F., McCahill, M., Lindner, P., Johnson, D., Torrey, D., and B. Alberti. </author> <title> The Internet Gopher Protocol (a distributed document search and retrieval protocol), </title> <type> RFC 1436, </type> <institution> University of Minnesota, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP [13], FTP [18], Gopher <ref> [2] </ref>, and WAIS [10] protocols.
Reference: [3] <author> Berners-Lee, T., </author> <title> Universal Resource Identifiers in WWW, RFC 1630, </title> <publisher> CERN, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: Practical information systems require more functionality than simple retrieval, including search, front-end update, and annotation. HTTP allows an open-ended set of methods and headers that indicate the purpose of a request [47]. It builds on the discipline of reference provided by the Uniform Resource Identifier (URI) <ref> [3] </ref>, as a location (URL) [4] or name (URN) [20], for indicating the resource to which a method is to be applied. Messages are passed in a format similar to that used by Internet mail [9] as defined by the Multipurpose Internet Mail Extensions (MIME) [7]. <p> Note: Converting between versions of HTTP may involve modification of header fields required or forbidden by the versions involved. 3.2 Uniform Resource Identifiers URIs have been known by many names: WWW addresses, Universal Document Identifiers, Universal Resource Identifiers <ref> [3] </ref>, and finally the combination of Uniform Resource Locators (URL) [4] and Names (URN) [20].
Reference: [4] <author> Berners-Lee, T., Masinter, L., and M. McCahill. </author> <title> Uniform Resource Locators (URL), </title> <type> RFC 1738, </type> <institution> CERN, Xerox PARC, University of Minnesota, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: HTTP allows an open-ended set of methods and headers that indicate the purpose of a request [47]. It builds on the discipline of reference provided by the Uniform Resource Identifier (URI) [3], as a location (URL) <ref> [4] </ref> or name (URN) [20], for indicating the resource to which a method is to be applied. Messages are passed in a format similar to that used by Internet mail [9] as defined by the Multipurpose Internet Mail Extensions (MIME) [7]. <p> Note: Converting between versions of HTTP may involve modification of header fields required or forbidden by the versions involved. 3.2 Uniform Resource Identifiers URIs have been known by many names: WWW addresses, Universal Document Identifiers, Universal Resource Identifiers [3], and finally the combination of Uniform Resource Locators (URL) <ref> [4] </ref> and Names (URN) [20]. <p> The two forms are differentiated by the fact that absolute URIs always begin with a scheme name followed by a colon. For definitive information on URL syntax and semantics, see Uniform Resource Identifiers (URI): Generic Syntax and Semantics, RFC 2396 [42] (which replaces RFCs 1738 <ref> [4] </ref> and RFC 1808 [11]). This specification adopts the definitions of URI-reference , absoluteURI , relativeURI , port , host , abs_path , rel_path , and authority from that specification. The HTTP protocol does not place any a priori limit on the length of a URI.
Reference: [5] <author> Berners-Lee, T. and D. Connolly. </author> <title> Hypertext Markup Language - 2.0, </title> <type> RFC 1866, </type> <institution> MIT/LCS, </institution> <month> November </month> <year> 1995. </year>
Reference: [6] <author> Berners-Lee, T., Fielding, R. and H. Frystyk. </author> <title> Hypertext Transfer Protocol - HTTP/1.0, RFC 1945, </title> <institution> MIT/LCS, UC Irvine, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: HTTP has been in use by the WorldWide Web global information initiative since 1990. The first version of HTTP, referred to as HTTP/0.9, was a simple protocol for raw data transfer across the Internet. HTTP/1.0, as defined by RFC 1945 <ref> [6] </ref>, improved the protocol by allowing messages to be in the format of MIME-like messages, containing metainformation about the data transferred and modifiers on the request/response semantics. However, HTTP/1.0 does not sufficiently take into consideration the effects of hierarchical proxies, caching, the need for persistent connections, or virtual hosts.
Reference: [7] <author> Freed, N., and N. Borenstein. </author> <title> Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies. RFC 2045, </title> <booktitle> Innosoft, First Virtual, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Messages are passed in a format similar to that used by Internet mail [9] as defined by the Multipurpose Internet Mail Extensions (MIME) <ref> [7] </ref>. HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP [13], FTP [18], Gopher [2], and WAIS [10] protocols. <p> The chunked transfer-coding MUST NOT be applied INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 19] more than once to a message-body. These rules allow the recipient to determine the transfer-length of the message (section 4.4). Transfer-codings are analogous to the Content-Transfer-Encoding values of MIME <ref> [7] </ref>, which were designed to enable safe transport of binary data over a 7-bit transport service. However, safe transport has a different focus for an 8bit-clean transfer protocol. <p> They are hard to defend against. Research continues. Beware. 16 Acknowledgments This specification makes heavy use of the augmented BNF and generic constructs defined by David H. Crocker for RFC 822 [9]. Similarly, it reuses many of the definitions provided by Nathaniel Borenstein and Ned Freed for MIME <ref> [7] </ref>. We hope that their inclusion in this specification will help reduce past confusion over the relationship between HTTP and Internet mail message formats. The HTTP protocol has evolved considerably over the years.
Reference: [8] <author> Braden, R., </author> <title> Requirements for Internet Hosts - Communication Layers, </title> <type> STD 3, RFC 1123, </type> <institution> IETF, </institution> <month> October </month> <year> 1989. </year> <note> INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 99] </note>
Reference-contexts: GMT ; RFC 822, updated by RFC 1123 Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036 Sun Nov 6 08:49:37 1994 ; ANSI C's asctime () format The first format is preferred as an Internet standard and represents a fixed-length subset of that defined by RFC 1123 <ref> [8] </ref> (an update to RFC 822 [9]). The second format is in common use, but is based on the obsolete RFC 850 [12] date format and lacks a four-digit year. <p> The address SHOULD be machine-usable, as defined by mailbox in RFC 822 [9] (as updated by RFC 1123 <ref> [8] </ref>): From = "From" ":" mailbox An example is: From: webmaster@w3.org This header field MAY be used for logging purposes and as a means for identifying the source of invalid or unwanted requests. It SHOULD NOT be used as an insecure form of access protection.
Reference: [9] <author> D. H. Crocker, </author> <title> Standard for The Format of ARPA Internet Text Messages, </title> <type> STD 11, RFC 822, </type> <institution> UDEL, </institution> <month> August </month> <year> 1982. </year>
Reference-contexts: It builds on the discipline of reference provided by the Uniform Resource Identifier (URI) [3], as a location (URL) [4] or name (URN) [20], for indicating the resource to which a method is to be applied. Messages are passed in a format similar to that used by Internet mail <ref> [9] </ref> as defined by the Multipurpose Internet Mail Extensions (MIME) [7]. HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP [13], FTP [18], Gopher [2], and WAIS [10] protocols. <p> request/response exchanges, although connections may be closed for a variety of reasons (see section 8.1). 2 Notational Conventions and Generic Grammar 2.1 Augmented BNF All of the mechanisms specified in this document are described in both prose and an augmented Backus-Naur Form (BNF) similar to that used by RFC 822 <ref> [9] </ref>. Implementors will need to be familiar with the notation in order to understand this specification. <p> RFC 1123 Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036 Sun Nov 6 08:49:37 1994 ; ANSI C's asctime () format The first format is preferred as an Internet standard and represents a fixed-length subset of that defined by RFC 1123 [8] (an update to RFC 822 <ref> [9] </ref>). The second format is in common use, but is based on the obsolete RFC 850 [12] date format and lacks a four-digit year. <p> HTTP-message = Request | Response ; HTTP/1.1 messages Request (section 5) and Response (section 6) messages use the generic message format of RFC 822 <ref> [9] </ref> for transferring entities (the payload of the message). <p> an HTTP/1.1 client MUST NOT preface or follow a request with an extra CRLF. 4.2 Message Headers HTTP header fields, which include general-header (section 4.5), request-header (section 5.3), response-header (section 6.2), and entity-header (section 7.1) fields, follow the same generic format as that given in Section 3.1 of RFC 822 <ref> [9] </ref>. Each header field consists of a name followed by a colon ( : ) and the field value. Field names are caseinsensitive. The field value MAY be preceded by any amount of LWS , though a single SP is preferred. <p> The address SHOULD be machine-usable, as defined by mailbox in RFC 822 <ref> [9] </ref> (as updated by RFC 1123 [8]): From = "From" ":" mailbox An example is: From: webmaster@w3.org This header field MAY be used for logging purposes and as a means for identifying the source of invalid or unwanted requests. <p> It is analogous to the Received field of RFC 822 <ref> [9] </ref> and is intended to be used for tracking message forwards, avoiding request loops, and identifying the protocol capabilities of all senders along the request/response chain. <p> They are hard to defend against. Research continues. Beware. 16 Acknowledgments This specification makes heavy use of the augmented BNF and generic constructs defined by David H. Crocker for RFC 822 <ref> [9] </ref>. Similarly, it reuses many of the definitions provided by Nathaniel Borenstein and Ned Freed for MIME [7]. We hope that their inclusion in this specification will help reduce past confusion over the relationship between HTTP and Internet mail message formats. The HTTP protocol has evolved considerably over the years.
Reference: [10] <author> Davis, F., Kahle, B., Morris, H., Salem, J., Shen, T., Wang, R., Sui, J., and M. Grinbaum, </author> <title> WAIS Interface Protocol Prototype Functional Specification. </title> <institution> (v1.5), Thinking Machines Corporation, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP [13], FTP [18], Gopher [2], and WAIS <ref> [10] </ref> protocols. In this way, HTTP allows basic hypermedia access to resources available from diverse applications. 1.2 Requirements The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in RFC 2119 [34].
Reference: [11] <author> Fielding, R., </author> <title> Relative Uniform Resource Locators, </title> <type> RFC 1808, </type> <institution> UC Irvine, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: As far as HTTP is concerned, Uniform Resource Identifiers are simply formatted strings which identify-via name, location, or any other characteristic-a resource. 3.2.1 General Syntax URIs in HTTP can be represented in absolute form or relative to some known base URI <ref> [11] </ref>, depending upon the context of their use. The two forms are differentiated by the fact that absolute URIs always begin with a scheme name followed by a colon. <p> The two forms are differentiated by the fact that absolute URIs always begin with a scheme name followed by a colon. For definitive information on URL syntax and semantics, see Uniform Resource Identifiers (URI): Generic Syntax and Semantics, RFC 2396 [42] (which replaces RFCs 1738 [4] and RFC 1808 <ref> [11] </ref>). This specification adopts the definitions of URI-reference , absoluteURI , relativeURI , port , host , abs_path , rel_path , and authority from that specification. The HTTP protocol does not place any a priori limit on the length of a URI.
Reference: [12] <author> Horton, M., and R. Adams. </author> <title> Standard for Interchange of USENET Messages, </title> <type> RFC 1036 (Obsoletes RFC 850), </type> <institution> AT&T Bell Laboratories, Center for Seismic Studies, </institution> <month> December </month> <year> 1987. </year>
Reference-contexts: The second format is in common use, but is based on the obsolete RFC 850 <ref> [12] </ref> date format and lacks a four-digit year. HTTP/1.1 clients and servers that parse the date value MUST accept all three formats (for compatibility with HTTP/1.0), though they MUST only generate the RFC 1123 format for representing HTTP-date values in header fields. See section 19.3 for further information.
Reference: [13] <author> Kantor, B. and P. Lapsley. </author> <title> Network News Transfer Protocol, </title> <type> RFC 977, </type> <institution> UC San Diego, UC Berkeley, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP <ref> [13] </ref>, FTP [18], Gopher [2], and WAIS [10] protocols.
Reference: [14] <author> Moore, K., </author> <title> "MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non ASCII Text", RFC 2047, </title> <institution> University of Tennessee, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: Words of *TEXT MAY contain characters from character sets other than ISO-8859-1 [22] only when encoded according to the rules of RFC 2047 <ref> [14] </ref>. TEXT = &lt;any OCTET except CTLs, but including LWS&gt; A CRLF is allowed in the definition of TEXT only as part of a header field continuation. It is expected that the folding LWS will be replaced with a single SP before interpretation of the TEXT value. <p> The default language is English and the default character set is ISO-8859-1. If a character set other than ISO-8859-1 is used, it MUST be encoded in the warn-text using the method described in RFC 2047 <ref> [14] </ref>. Warning headers can in general be applied to any message, however some specific warn-codes are specific to caches and can only be applied to response messages. New Warning headers SHOULD be added after any existing Warning headers.
Reference: [15] <author> Nebel, E., and L. Masinter. </author> <title> Form-based File Upload in HTML, </title> <type> RFC 1867, </type> <institution> Xerox Corporation, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: If an application receives an unrecognized multipart subtype, the application MUST treat it as being equivalent to multipart/mixed. Note: The multipart/form-data type has been specifically defined for carrying form data suitable for processing via the POST request method, as described in RFC 1867 <ref> [15] </ref>. 3.8 Product Tokens Product tokens are used to allow communicating applications to identify themselves by software name and version. Most fields using product tokens also allow subproducts which form a significant part of the application to be listed, separated by white space.
Reference: [16] <author> Postel, J., </author> <title> Simple Mail Transfer Protocol, </title> <type> STD 10, RFC 821, </type> <institution> USC/ISI, </institution> <month> August </month> <year> 1982. </year>
Reference-contexts: Messages are passed in a format similar to that used by Internet mail [9] as defined by the Multipurpose Internet Mail Extensions (MIME) [7]. HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP <ref> [16] </ref>, NNTP [13], FTP [18], Gopher [2], and WAIS [10] protocols.
Reference: [17] <author> Postel, J., </author> <title> Media Type Registration Procedure, </title> <type> RFC 1590, </type> <institution> USC/ISI, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 20] All HTTP/1.1 applications MUST be able to receive and decode the chunked transfer-coding, and MUST ignore chunk-extension extensions they do not understand. 3.7 Media Types HTTP uses Internet Media Types <ref> [17] </ref> in the Content-Type (section 14.17) and Accept (section 14.1) header fields in order to provide open and extensible data typing and type negotiation. media-type = type "/" subtype *( ";" parameter ) type = token subtype = token Parameters MAY follow the type/subtype in the form of attribute/value pairs (as <p> When sending data to older HTTP applications, implementations SHOULD only use media type parameters when they are required by that type/subtype definition. Media-type values are registered with the Internet Assigned Number Authority (IANA [19]). The media type registration process is outlined in RFC 1590 <ref> [17] </ref>. Use of non-registered media types is discouraged. 3.7.1 Canonicalization and Text Defaults Internet media types are registered with a canonical form. An entity-body transferred via HTTP messages MUST be represented in the appropriate canonical form prior to its transmission except for text types, as defined in the next paragraph.
Reference: [18] <author> Postel, J. and J. Reynolds. </author> <title> File Transfer Protocol, </title> <type> STD 9, RFC 959, </type> <institution> USC/ISI, </institution> <month> October </month> <year> 1985. </year>
Reference-contexts: HTTP is also used as a generic protocol for communication between user agents and proxies/gateways to other Internet systems, including those supported by the SMTP [16], NNTP [13], FTP <ref> [18] </ref>, Gopher [2], and WAIS [10] protocols.
Reference: [19] <author> Reynolds, J. and J. Postel. </author> <title> Assigned Numbers, </title> <type> STD 2, RFC 1700, </type> <institution> USC/ISI, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: HTTP communication usually takes place over TCP/IP connections. The default port is TCP 80 <ref> [19] </ref>, but other ports can be used. This does not preclude HTTP from being implemented on top of any other protocol on the Internet, or on other networks. <p> However, since HTTP and MIME share the same registry, it is important that the terminology also be shared. HTTP character sets are identified by caseinsensitive tokens. The complete set of tokens is defined by the IANA Character Set registry <ref> [19] </ref>. charset = token Although HTTP allows an arbitrary token to be used as a charset value, any token that has a predefined value within the IANA Character Set registry [19] MUST represent the character set defined by that registry. <p> The complete set of tokens is defined by the IANA Character Set registry <ref> [19] </ref>. charset = token Although HTTP allows an arbitrary token to be used as a charset value, any token that has a predefined value within the IANA Character Set registry [19] MUST represent the character set defined by that registry. Applications SHOULD limit their use of character sets to those defined by the IANA registry. <p> Note that some older HTTP applications do not recognize media type parameters. When sending data to older HTTP applications, implementations SHOULD only use media type parameters when they are required by that type/subtype definition. Media-type values are registered with the Internet Assigned Number Authority (IANA <ref> [19] </ref>). The media type registration process is outlined in RFC 1590 [17]. Use of non-registered media types is discouraged. 3.7.1 Canonicalization and Text Defaults Internet media types are registered with a canonical form.
Reference: [20] <author> Sollins, K. and L. Masinter. </author> <title> Functional Requirements for Uniform Resource Names, </title> <type> RFC 1737, </type> <institution> MIT/LCS, Xerox Corporation, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: HTTP allows an open-ended set of methods and headers that indicate the purpose of a request [47]. It builds on the discipline of reference provided by the Uniform Resource Identifier (URI) [3], as a location (URL) [4] or name (URN) <ref> [20] </ref>, for indicating the resource to which a method is to be applied. Messages are passed in a format similar to that used by Internet mail [9] as defined by the Multipurpose Internet Mail Extensions (MIME) [7]. <p> between versions of HTTP may involve modification of header fields required or forbidden by the versions involved. 3.2 Uniform Resource Identifiers URIs have been known by many names: WWW addresses, Universal Document Identifiers, Universal Resource Identifiers [3], and finally the combination of Uniform Resource Locators (URL) [4] and Names (URN) <ref> [20] </ref>. As far as HTTP is concerned, Uniform Resource Identifiers are simply formatted strings which identify-via name, location, or any other characteristic-a resource. 3.2.1 General Syntax URIs in HTTP can be represented in absolute form or relative to some known base URI [11], depending upon the context of their use.
Reference: [21] <author> US-ASCII. </author> <title> Coded Character Set - 7-Bit American Standard Code for Information Interchange. Standard ANSI X3.4-1986, ANSI, </title> <year> 1986. </year>
Reference-contexts: The US-ASCII coded character set is defined by ANSI X3.4-1986 <ref> [21] </ref>.
Reference: [22] <author> ISO-8859. </author> <title> International Standard - Information Processing - 8-bit Single-Byte Coded Graphic Character Sets - Part 1: Latin alphabet No. 1, </title> <journal> ISO-8859-1:1987. </journal> <volume> Part 2: Latin alphabet No. 2, ISO-8859-2, </volume> <year> 1987. </year> <title> Part 3: Latin alphabet No. </title> <booktitle> 3, ISO-8859-3, 1988. Part 4: Latin alphabet No. 4, ISO-8859-4, 1988. Part 5: Latin/Cyrillic alphabet, ISO-8859-5, 1988. Part 6: Latin/Arabic alphabet, ISO-8859-6, 1987. Part 7: Latin/Greek alphabet, ISO-8859-7, 1987. Part 8: </booktitle> <address> Latin/Hebrew alphabet, ISO-8859-8, </address> <year> 1988. </year> <title> Part 9: Latin alphabet No. </title> <type> 5, </type> <institution> ISO-8859-9, </institution> <year> 1990. </year>
Reference-contexts: LWS = [CRLF] 1*( SP | HT ) The TEXT rule is only used for descriptive field contents and values that are not intended to be interpreted by the message parser. Words of *TEXT MAY contain characters from character sets other than ISO-8859-1 <ref> [22] </ref> only when encoded according to the rules of RFC 2047 [14]. TEXT = &lt;any OCTET except CTLs, but including LWS&gt; A CRLF is allowed in the definition of TEXT only as part of a header field continuation.
Reference: [23] <author> Meyers, J., and M. Rose. </author> <title> The Content-MD5 Header Field, </title> <type> RFC 1864, </type> <institution> Carnegie Mellon, Dover Beach Consulting, </institution> <month> October, </month> <year> 1995. </year>
Reference-contexts: INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 76] The meaning of the Content-Location header in PUT or POST requests is undefined; servers are free to ignore it in those cases. 14.15 Content-MD5 The Content-MD5 entity-header field, as defined in RFC 1864 <ref> [23] </ref>, is an MD5 digest of the entity-body for the purpose of providing an end-to-end message integrity check (MIC) of the entity-body. (Note: a MIC is good for detecting accidental modification of the entity-body in transit, but is not proof against malicious attacks.) Content-MD5 = "Content-MD5" ":" md5-digest md5-digest = &lt;base64
Reference: [24] <author> Carpenter, B. and Y. Rekhter. </author> <title> Renumbering Needs Work, RFC 1900, </title> <address> IAB, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: The use of IP addresses in URLs SHOULD be avoided whenever possible (see RFC INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 16] 1900 <ref> [24] </ref>). If the abs_path is not present in the URL, it MUST be given as / when used as a Request-URI for a resource (section 5.1.2). <p> If HTTP clients do not observe this rule, they could be spoofed when a previously-accessed servers IP address changes. As network renumbering is expected to become increasingly common <ref> [24] </ref>, the possibility of this form of attack will grow. Observing this requirement thus reduces this potential security vulnerability.
Reference: [25] <author> Deutsch, P., </author> <title> GZIP file format specification version 4.3,. RFC 1952, </title> <publisher> Aladdin Enterprises, </publisher> <month> May, </month> <year> 1996. </year>
Reference-contexts: The Internet Assigned Numbers Authority (IANA) acts as a registry for content-coding value tokens. Initially, the registry contains the following tokens: gzip An encoding format produced by the file compression program gzip (GNU zip) as described in RFC 1952 <ref> [25] </ref>. This format is a Lempel-Ziv coding (LZ77) with a 32 bit CRC. compress The encoding format produced by the common UNIX file compression program compress. This format is an adaptive Lempel-Ziv-Welch coding (LZW).
Reference: [26] <author> Venkata N. Padmanabhan, and Jeffrey C. Mogul. </author> <title> Improving HTTP Latency, Computer Networks and ISDN Systems, </title> <editor> v. </editor> <volume> 28, </volume> <pages> pp. 25-35, </pages> <month> Dec. </month> <year> 1995. </year> <note> Slightly revised version of paper in Proc. 2nd International WWW INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 100] Conference '94: Mosaic and the Web, </note> <month> Oct. </month> <year> 1994, </year> <note> which is available at http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLatency.html. </note>
Reference-contexts: The use of inline images and other associated data often require a client to make multiple requests of the same server in a short amount of time. Analysis of these performance problems and results from a prototype implementation are available <ref> [26] </ref> [30]. Implementation experience and measurements of actual HTTP/1.1 (RFC 2068) implementations show good results [39]. Alternatives have also been explored, for example, T/TCP [27].
Reference: [27] <author> Joe Touch, John Heidemann, and Katia Obraczka. </author> <title> Analysis of HTTP Performance, </title> <journal> &lt;URL: </journal> <note> http://www.isi.edu/touch/pubs/http-perf96/&gt;, ISI Research Report ISI/RR-98-463, (original report dated Aug. 1996), </note> <institution> USC/Information Sciences Institute, </institution> <month> August </month> <year> 1998. </year>
Reference-contexts: Analysis of these performance problems and results from a prototype implementation are available [26] [30]. Implementation experience and measurements of actual HTTP/1.1 (RFC 2068) implementations show good results [39]. Alternatives have also been explored, for example, T/TCP <ref> [27] </ref>. Persistent HTTP connections have a number of advantages: By opening and closing fewer TCP connections, CPU time is saved in routers and hosts (clients, servers, proxies, gateways, tunnels, or caches), and memory used for TCP protocol control blocks can be saved in hosts.
Reference: [28] <author> Mills, D., </author> <title> Network Time Protocol (Version 3) Specification, Implementation and Analysis. </title> <type> RFC 1305, </type> <institution> University of Delaware, </institution> <month> March, </month> <year> 1992. </year>
Reference-contexts: In this discussion, we use the term now to mean the current value of the clock at the host performing the calculation. Hosts that use HTTP, but especially hosts running origin servers and caches, SHOULD use NTP <ref> [28] </ref> or some similar protocol to synchronize their clocks to a globally accurate time standard. HTTP/1.1 requires origin servers to send a Date header, if possible, with every response, giving the time at which the response was generated (see section 14.18). <p> An HTTP implementation without a clock MUST NOT cache responses without revalidating them on every use. An HTTP cache, especially a shared cache, SHOULD use a mechanism, such as NTP <ref> [28] </ref>, to synchronize its clock with a reliable external standard. Clients SHOULD only send a Date header field in messages that include an entity-body, as in the case of the PUT and POST requests, and even then it is optional.
Reference: [29] <author> Deutsch, P., </author> <title> DEFLATE Compressed Data Format Specification version 1.3. RFC 1951, </title> <publisher> Aladdin Enterprises, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: For compatibility with previous implementations of HTTP, applications SHOULD consider x-gzip and x-compress to be equivalent to gzip and compress respectively. deflate The zlib format defined in RFC 1950 [31] in combination with the deflate compression mechanism described in RFC 1951 <ref> [29] </ref>. identity The default (identity) encoding; the use of no transformation whatsoever. This content-coding is used only in the Accept-Encoding header, and SHOULD NOT be used in the Content-Encoding header.
Reference: [30] <author> S. Spero, </author> <title> Analysis of HTTP Performance Problems, </title> <address> http://sunsite.unc.edu/mdma-release/http-prob.html. </address>
Reference-contexts: The use of inline images and other associated data often require a client to make multiple requests of the same server in a short amount of time. Analysis of these performance problems and results from a prototype implementation are available [26] <ref> [30] </ref>. Implementation experience and measurements of actual HTTP/1.1 (RFC 2068) implementations show good results [39]. Alternatives have also been explored, for example, T/TCP [27].
Reference: [31] <author> Deutsch, P. and J-L. Gailly. </author> <title> ZLIB Compressed Data Format Specification version 3.3, RFC 1950, </title> <publisher> Aladdin Enterprises, </publisher> <address> Info-ZIP, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Their use here is representative of historical practice, not good design. For compatibility with previous implementations of HTTP, applications SHOULD consider x-gzip and x-compress to be equivalent to gzip and compress respectively. deflate The zlib format defined in RFC 1950 <ref> [31] </ref> in combination with the deflate compression mechanism described in RFC 1951 [29]. identity The default (identity) encoding; the use of no transformation whatsoever. This content-coding is used only in the Accept-Encoding header, and SHOULD NOT be used in the Content-Encoding header.
Reference: [32] <author> Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P., Luotonen, A., Sink, E., and L. Stewart. </author> <title> An Extension to HTTP: Digest Access Authentication, </title> <booktitle> RFC 2069, </booktitle> <month> January </month> <year> 1997. </year>
Reference: [33] <author> Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Berners-Lee, T., </author> <title> Hypertext Transfer Protocol - HTTP/1.1, RFC 2068, </title> <institution> UC Irvine, Digital Equipment Corporation, M.I.T., </institution> <month> January, </month> <year> 1997. </year>
Reference-contexts: If a higher version request is received, the proxy/gateway MUST either downgrade the request version, or respond with an error, or switch to tunnel behavior. Due to interoperability problems with HTTP/1.0 proxies discovered since the publication of RFC 2068 <ref> [33] </ref>, caching proxies MUST, gateways MAY, and tunnels MUST NOT upgrade the request to the highest version they support. The proxy/gateways response to that request MUST be in the same major version as the request. <p> Each persistent connection applies to only one transport link. A proxy server MUST NOT establish a HTTP/1.1 persistent connection with an HTTP/1.0 client (but see RFC 2068 <ref> [33] </ref> for information and discussion of the problems with the Keep-Alive header implemented by many HTTP/1.0 clients). 8.1.4 Practical Considerations Servers will usually have some timeout value beyond which they will no longer maintain an inactive connection.
Reference: [34] <author> Bradner, S., </author> <title> Key words for use in RFCs to Indicate Requirement Levels, </title> <type> RFC 2119, </type> <institution> Harvard University, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: In this way, HTTP allows basic hypermedia access to resources available from diverse applications. 1.2 Requirements The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in RFC 2119 <ref> [34] </ref>. An implementation is not compliant if it fails to satisfy one or more of the MUST level requirements for the protocols it implements.
Reference: [35] <author> Troost, R., and Dorner, S., </author> <title> Communicating Presentation Information in Internet Messages: The Content Disposition Header, RFC 1806, New Century Systems, QUALCOMM, </title> <publisher> Inc., </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: Content-Disposition is not part of the HTTP standard, but since it is widely implemented, we are documenting its use and risks for implementors. See RFC 1806 <ref> [35] </ref> for details. 15.6 Authentication Credentials and Idle Clients Existing HTTP clients and user agents typically retain authentication information indefinitely. HTTP/1.1. does not provide a method for a server to direct clients to discard these cached credentials. This is a significant defect that requires further extensions to HTTP.
Reference: [36] <author> Mogul, J.C., Fielding, R., Gettys, J, Frystyk, H., </author> <title> Use and Interpretation of HTTP Version Numbers, </title> <type> RFC 2145, </type> <institution> Digital Equipment Corporation, U.C. </institution> <address> Irvine, </address> <publisher> M.I.T., </publisher> <month> May </month> <year> 1997.[jg606] </year>
Reference-contexts: The &lt;major&gt; number is incremented when the format of a message within the protocol is changed. See RFC 2145 <ref> [36] </ref> for a fuller explanation. The version of an HTTP message is indicated by an HTTP-Version field in the first line of the message. <p> Applications that are at least conditionally compliant with this specification SHOULD use an HTTP-Version of HTTP/1.1 in their messages, and MUST do so for any message that is not compatible with HTTP/1.0. For more details on when to send specific HTTP-Version values, see RFC 2145 <ref> [36] </ref>. The HTTP version of an application is the highest HTTP version for which the application is at least conditionally compliant. Proxy and gateway applications need to be careful when forwarding messages in protocol versions different from that of the application.
Reference: [37] <author> Palme, J, </author> <title> Common Internet Message Headers, RFC 2076, </title> <institution> Stockholm University, KTH, </institution> <month> February, </month> <year> 1997[jg607]. </year>
Reference: [38] <author> Yergeau, F., UTF-8, </author> <title> a transformation format of Unicode and ISO-10646, RFC 2279 (obsoleted RFC 2044), </title> <booktitle> Alis Technologies, </booktitle> <month> January </month> <year> 1998. </year> <month> [jg608] </month>
Reference-contexts: Applications SHOULD limit their use of character sets to those defined by the IANA registry. Implementors should be aware of IETF character set requirements <ref> [38] </ref> [41]. 3.4.1 Missing Charset Some HTTP/1.0 software has interpreted a Content-Type header without charset parameter incorrectly to mean recipient should guess.
Reference: [39] <author> Nielsen, H.F., Gettys, J., Baird-Smith, A., Prudhommeaux, E., Lie, H., and C. Lilley. </author> <title> Network Performance Effects of HTTP/1.1, CSS1, </title> <booktitle> and PNG, Proceedings of ACM SIGCOMM '97, </booktitle> <address> Cannes France, </address> <month> September </month> <year> 1997.[jg609] </year>
Reference-contexts: Analysis of these performance problems and results from a prototype implementation are available [26] [30]. Implementation experience and measurements of actual HTTP/1.1 (RFC 2068) implementations show good results <ref> [39] </ref>. Alternatives have also been explored, for example, T/TCP [27].
Reference: [40] <author> Freed, N., and N. Borenstein. </author> <title> Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types. RFC 2046, </title> <booktitle> Innosoft, First Virtual, </booktitle> <month> November </month> <year> 1996. </year> <month> [jg610] </month>
Reference-contexts: See section 3.4.1 for compatibility problems. 3.7.2 Multipart Types MIME provides for a number of multipart types - encapsulations of one or more entities within a single message-body. All multipart types share a common syntax, as defined in section 5.1.1 of RFC 2046 <ref> [40] </ref>, and MUST include a boundary parameter as part of the media type value. The message body is itself a protocol element and MUST therefore use only CRLF to represent line breaks between body-parts.
Reference: [41] <author> Alvestrand, H. T., </author> <title> IETF Policy on Character Sets and Languages, </title> <type> RFC 2277, </type> <address> BCP 18, UNINETT, </address> <month> January, </month> <year> 1998. </year> <month> [jg611] </month>
Reference-contexts: Applications SHOULD limit their use of character sets to those defined by the IANA registry. Implementors should be aware of IETF character set requirements [38] <ref> [41] </ref>. 3.4.1 Missing Charset Some HTTP/1.0 software has interpreted a Content-Type header without charset parameter incorrectly to mean recipient should guess.
Reference: [42] <author> Berners-Lee, T., Fielding, R., Masinter, L., </author> <title> Uniform Resource Identifiers (URI): Generic Syntax and Semantics, </title> <type> RFC 2396, </type> <month> August, </month> <year> 1998.[jg612] </year>
Reference-contexts: The two forms are differentiated by the fact that absolute URIs always begin with a scheme name followed by a colon. For definitive information on URL syntax and semantics, see Uniform Resource Identifiers (URI): Generic Syntax and Semantics, RFC 2396 <ref> [42] </ref> (which replaces RFCs 1738 [4] and RFC 1808 [11]). This specification adopts the definitions of URI-reference , absoluteURI , relativeURI , port , host , abs_path , rel_path , and authority from that specification. <p> Note that the absolute path cannot be empty; if none is present in the original URI, it MUST be given as / (the server root). The Request-URI is transmitted in the format specified in section 3.2.1. If the Request-URI is encoded using the % HEX HEX encoding <ref> [42] </ref>, the origin server MUST decode the Request-URI in order to properly interpret the request. Servers SHOULD respond to invalid Request-URI s with an appropriate status code.
Reference: [43] <author> Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., Sink, E., Stewart, L., </author> <title> HTTP Authentication: Basic and Digest Access Authentication, </title> <booktitle> Work in Progress, </booktitle> <month> September, </month> <year> 1998.[jg613] </year>
Reference-contexts: HTTP access authentication is explained in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. 10.4.3 402 Payment Required This code is reserved for future use. 10.4.4 403 Forbidden The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. <p> The proxy MUST return a Proxy-Authenticate header field (section 14.33) containing a challenge applicable to the proxy for the requested resource. The client MAY repeat the request with a suitable Proxy-Authorization header field (section 14.34). HTTP access authentication is explained in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 45] 10.4.9 408 Request Timeout The client did not produce a request within the time that the server was prepared to wait. <p> The general framework for access authentication, and the specification of basic and digest authentication, are specified in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. This specification adopts the definitions of challenge and credentials from that specification. 12 Content Negotiation Most HTTP responses include an entity which contains information for interpretation by a human user . Naturally, it is desirable to supply the user with the best available entity corresponding to the request. <p> INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 68] Authorization = "Authorization" ":" credentials HTTP access authentication is described in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. If a request is authenticated and a realm specified, the same credentials SHOULD be valid for all other requests within this realm (assuming that the authentication scheme itself does not require otherwise, such as credentials that vary according to a challenge value or using synchronized clocks). <p> Proxy-Authenticate = "Proxy-Authenticate" ":" challenge INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 86] The HTTP access authentication process is described in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. Unlike WWW-Authenticate , the Proxy-Authenticate header field applies only to the current connection and SHOULD NOT be passed on to downstream clients. <p> The Proxy-Authorization field value consists of credentials containing the authentication information of the user agent for the proxy and/or realm of the resource being requested. Proxy-Authorization = "Proxy-Authorization" ":" credentials The HTTP access authentication process is described in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref> . Unlike Authorization , the Proxy-Authorization header field applies only to the next outbound proxy that demanded authentication using the Proxy-Authenticate field. When multiple proxies are used in a chain, the Proxy-Authorization header field is consumed by the first outbound proxy that was expecting to receive credentials. <p> The field value consists of at least one challenge that indicates the authentication scheme (s) and parameters applicable to the Request-URI . WWW-Authenticate = "WWW-Authenticate" ":" 1#challenge The HTTP access authentication process is described in HTTP Authentication: Basic and Digest Access Authentication <ref> [43] </ref>. User agents are advised to take special care in parsing the WWW-Authenticate field value as it might contain more than one challenge, or if more than one WWW-Authenticate header field is provided, the contents of a challenge itself can contain a commaseparated list of authentication parameters.
Reference: [44] <author> Luotonen, A., </author> <title> Tunneling TCP based protocols through Web proxy servers, Work in Progress, </title> <note> February, 1998.[jg614] INTERNET-DRAFT HTTP/1.1 September 11, 1998 Fielding, et al [Page 101] </note>
Reference-contexts: Responses to this method MUST NOT be cached. 9.9 CONNECT This specification reserves the method name CONNECT for use for use with a proxy that can dynamically switch to being a tunnel (e.g. SSL tunneling <ref> [44] </ref>). 10 Status Code Definitions Each Status-Code is described below, including a description of which method (s) it can follow and any metainformation required in the response. 10.1 Informational 1xx This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by
Reference: [45] <author> Palme, J., Hopmann, A., </author> <title> MIME Email Encapsulation of Aggregate Documents, such as HTML (MHTML), </title> <type> RFC 2110, </type> <month> March </month> <year> 1997 </year>
Reference: [46] <author> Bradner, S., </author> <title> The Internet Standards Process - Revision 3, BCP 9, RFC 2026, </title> <publisher> Harvard University, </publisher> <month> October, </month> <year> 1996. </year>
Reference: [47] <author> Masinter, L., </author> <title> Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0), </title> <type> RFC 2324, </type> <month> April, </month> <year> 1998. </year>
Reference-contexts: This protocol includes more stringent requirements than HTTP/1.0 in order to ensure reliable implementation of its features. Practical information systems require more functionality than simple retrieval, including search, front-end update, and annotation. HTTP allows an open-ended set of methods and headers that indicate the purpose of a request <ref> [47] </ref>. It builds on the discipline of reference provided by the Uniform Resource Identifier (URI) [3], as a location (URL) [4] or name (URN) [20], for indicating the resource to which a method is to be applied.

References-found: 47

