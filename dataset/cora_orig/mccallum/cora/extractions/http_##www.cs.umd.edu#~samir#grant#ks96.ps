URL: http://www.cs.umd.edu/~samir/grant/ks96.ps
Refering-URL: http://www.cs.umd.edu/~samir/grant/career.html
Root-URL: 
Title: The Capacitated K-Center Problem  
Author: Samir Khuller Yoram J. Sussmann 
Address: College Park, MD 20742  College Park, MD 20742  
Affiliation: Dept. of Computer Science and UMIACS University of Maryland  Dept. of Computer Science University of Maryland  
Abstract: 1 A preliminary version of this paper will appear in the Proceedings of the Fourth Annual European Symposium on Algorithms (ESA 1996). 2 Research supported by NSF Research Initiation Award CCR-9307462, and NSF CAREER Award CCR-9501355. Email addr: samir@cs.umd.edu 3 Research supported by NSF CAREER Award CCR-9501355. Email addr: yoram@cs.umd.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bar-Ilan, G. Kortsarz and D. Peleg, </author> <title> "How to allocate network centers", </title> <journal> J. Algorithms, </journal> <volume> 15 </volume> <pages> 385-415, </pages> <year> (1993). </year>
Reference-contexts: Other generalizations include cases where the vertices have weights and we consider the weighted distance from a node to its closest center [3, 16]. Recently, a very interesting generalization that we call the capacitated K-center problem was studied by Bar-Ilan, Kortsarz and Peleg <ref> [1] </ref>. The input specifies an upper bound on the number of centers K, as well as a maximum load L. We have to output a set of at most K centers, as well as an assignment of vertices to centers. <p> Under these constraints we wish to minimize the maximum distance between a vertex u and its assigned center (u). min max d (u; (u)) such that jfu j (u) = vgj L 8v 2 S where : V ! S: Bar-Ilan, Kortsarz and Peleg <ref> [1] </ref> gave the first polynomial time approximation algorithm for this problem with an approximation factor of 10. Various applications for capacitated centers were first mentioned in [14, 15]. <p> We will refer to this problem as 1 the capacitated multi-K-center problem. By introducing some new ideas and using the basic approach proposed in <ref> [1] </ref>, we are able to give a polynomial time algorithm that achieves an approximation factor of 5. In Section 3 we show how to solve the problem when we are allowed only one center at a vertex. <p> The algorithm can be easily extended to the more general case when each vertex has a demand d i , and multiple centers may be used to satisfy its demand. The total demand assigned to any center should not exceed L. Using the method in <ref> [1] </ref>, we can obtain an approximation factor of 13 for the version with costs. (Each vertex has a cost for placing a center on it, and we are working with a fixed budget.) In Section 4 we study some other variants of this problem. <p> We refer to a node in the maximal independent set as a monarch. The algorithm also constructs a "tree" of monarchs which will be used to assign vertices to centers. There are two key differences between our algorithm and the one presented in <ref> [1] </ref>: 1. We use a specific procedure to find a maximal independent set, as opposed to selecting an arbitrary maximal independent set. 2. We deal with all monarchs uniformly rather than dealing with the light and heavy 1 monar chs separately as in [1]. <p> our algorithm and the one presented in <ref> [1] </ref>: 1. We use a specific procedure to find a maximal independent set, as opposed to selecting an arbitrary maximal independent set. 2. We deal with all monarchs uniformly rather than dealing with the light and heavy 1 monar chs separately as in [1]. Each monarch has an empire that consists of a subset of vertices within the immediate neighborhood of the monarch in G 2 i . <p> Theorem 2.2: The number of centers required is at least K L + d (n n L )=Le. The proof is simpler than the proof given in <ref> [1] </ref>. The following lemmas were established in [1]. We repeat them for completeness. Let E be the set of monarchs as defined in [1]. We repeat the definition here. 6 Let E 0 be the set of light monarchs. <p> Theorem 2.2: The number of centers required is at least K L + d (n n L )=Le. The proof is simpler than the proof given in <ref> [1] </ref>. The following lemmas were established in [1]. We repeat them for completeness. Let E be the set of monarchs as defined in [1]. We repeat the definition here. 6 Let E 0 be the set of light monarchs. <p> The proof is simpler than the proof given in <ref> [1] </ref>. The following lemmas were established in [1]. We repeat them for completeness. Let E be the set of monarchs as defined in [1]. We repeat the definition here. 6 Let E 0 be the set of light monarchs. Iteratively, add to E 0 any monarch that contains a vertex in its domain that could have been assigned to a monarch in E 0 . <p> generalization of the capacitated K-center problem where a cost function is defined on the vertices and the objective is to pick a set of centers whose total cost is at most K, such that the radius is minimized. (Note that this is equivalent to the weighted capacitated K-center problem in <ref> [1] </ref>. We use cost here to distinguish from weights as defined in, for example, [3, 16].) More formally, we are given a cost function c : V ! R + , and we add the constraint P v2S c (v) K to the statement of the capacitated K-center problem.
Reference: [2] <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference: [3] <author> M. Dyer and A. M. Frieze, </author> <title> "A simple heuristic for the p-center problem", </title> <journal> Operations Research Letters, </journal> <volume> Vol 3 </volume> <pages> 285-288, </pages> <year> (1985). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal [7, 9, 10, 11]. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 10, 16] </ref>. The generalizations include cases when each node has an associated "cost" for placing a center on it, and rather than limiting the number of centers, we have a limited budget [10, 16]. <p> Other generalizations include cases where the vertices have weights and we consider the weighted distance from a node to its closest center <ref> [3, 16] </ref>. Recently, a very interesting generalization that we call the capacitated K-center problem was studied by Bar-Ilan, Kortsarz and Peleg [1]. The input specifies an upper bound on the number of centers K, as well as a maximum load L. <p> We use cost here to distinguish from weights as defined in, for example, <ref> [3, 16] </ref>.) More formally, we are given a cost function c : V ! R + , and we add the constraint P v2S c (v) K to the statement of the capacitated K-center problem.
Reference: [4] <author> J. Edmonds and D. R. Fulkerson, </author> <title> "Bottleneck extrema", </title> <journal> Journal of Combinatorial Theory, </journal> <volume> Vol 8 </volume> <pages> 299-306, </pages> <year> (1970). </year>
Reference-contexts: We may assume for simplicity that G is a complete graph, where the edge weights satisfy the triangle inequality. (We can always replace any edge by the shortest path between the corresponding pair of vertices.) High-Level Description The algorithm uses the threshold method introduced by Edmonds and Fulkerson in <ref> [4] </ref> and used for the K-center problem by Hochbaum and Shmoys [9, 10]. Sort all edge weights in nondecreasing order. Let the (sorted) list of edges be e 1 ; e 2 ; : : : e m .
Reference: [5] <author> T. Feder and D. Greene, </author> <title> "Optimal algorithms for approximate clustering", </title> <booktitle> Proc. of the 20 th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 434-444, </pages> <year> (1988). </year>
Reference: [6] <author> U. Feige, </author> <title> "A threshold of ln n for approximating set cover", </title> <booktitle> Proc. of the 28 th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 314-318, </pages> <year> (1996). </year>
Reference-contexts: Results of Lund and Yannakakis [12] and Feige <ref> [6] </ref> imply that no polynomial time (c 1 K; c 2 L; (2 *)R) approximation algorithm is possible unless N P DT IM E (n O (loglog n) ), since this would imply a constant-factor approximation algorithm for set cover.
Reference: [7] <author> T. Gonzalez, </author> <title> "Clustering to minimize the maximum inter-cluster distance", </title> <journal> Theoretical Computer Science, </journal> <volume> Vol 38 </volume> <pages> 293-306, </pages> <year> (1985). </year>
Reference-contexts: An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal <ref> [7, 9, 10, 11] </ref>. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16].
Reference: [8] <author> M. R. Garey and D. S. Johnson, </author> <title> "Computers and Intractability: A guide to the theory of NP-completeness", </title> <publisher> Freeman, </publisher> <address> San Francisco (1978). </address>
Reference-contexts: For example, one may wish to install K fire stations and minimize the maximum distance (response time) from a location to its closest fire station. The problem is known to be NP-hard <ref> [8] </ref>. An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution.
Reference: [9] <author> D. Hochbaum and D. B. Shmoys, </author> <title> "A best possible heuristic for the k-center problem", </title> <journal> Mathematics of Operations Research, </journal> <volume> Vol 10 </volume> <pages> 180-184, </pages> <year> (1985). </year>
Reference-contexts: An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal <ref> [7, 9, 10, 11] </ref>. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16]. <p> graph, where the edge weights satisfy the triangle inequality. (We can always replace any edge by the shortest path between the corresponding pair of vertices.) High-Level Description The algorithm uses the threshold method introduced by Edmonds and Fulkerson in [4] and used for the K-center problem by Hochbaum and Shmoys <ref> [9, 10] </ref>. Sort all edge weights in nondecreasing order. Let the (sorted) list of edges be e 1 ; e 2 ; : : : e m . <p> This gives an approximation factor of 5. First find a maximal independent set I in G 2 i . (G 2 i is the graph obtained by adding edges to G i between nodes that have a common neighbor.) This technique was introduced by Hochbaum and Shmoys <ref> [9, 10] </ref> and has been used extensively to solve K-center problems. We refer to a node in the maximal independent set as a monarch. The algorithm also constructs a "tree" of monarchs which will be used to assign vertices to centers.
Reference: [10] <author> D. Hochbaum and D. B. Shmoys, </author> <title> "A unified approach to approximation algorithms for bottleneck problems", </title> <journal> Journal of the ACM, </journal> <volume> Vol 33(3) </volume> <pages> 533-550, </pages> <year> (1986). </year>
Reference-contexts: An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal <ref> [7, 9, 10, 11] </ref>. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16]. <p> Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal [7, 9, 10, 11]. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 10, 16] </ref>. The generalizations include cases when each node has an associated "cost" for placing a center on it, and rather than limiting the number of centers, we have a limited budget [10, 16]. <p> Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16]. The generalizations include cases when each node has an associated "cost" for placing a center on it, and rather than limiting the number of centers, we have a limited budget <ref> [10, 16] </ref>. Other generalizations include cases where the vertices have weights and we consider the weighted distance from a node to its closest center [3, 16]. Recently, a very interesting generalization that we call the capacitated K-center problem was studied by Bar-Ilan, Kortsarz and Peleg [1]. <p> graph, where the edge weights satisfy the triangle inequality. (We can always replace any edge by the shortest path between the corresponding pair of vertices.) High-Level Description The algorithm uses the threshold method introduced by Edmonds and Fulkerson in [4] and used for the K-center problem by Hochbaum and Shmoys <ref> [9, 10] </ref>. Sort all edge weights in nondecreasing order. Let the (sorted) list of edges be e 1 ; e 2 ; : : : e m . <p> For each i, let the threshold graph G i be the subgraph obtained from G by including edges of weight at most w (e i ). Run the algorithm below for each i from 1 to m, until a solution is obtained. (Hochbaum and Shmoys <ref> [10] </ref> suggest using binary search to speed up the computation. <p> This gives an approximation factor of 5. First find a maximal independent set I in G 2 i . (G 2 i is the graph obtained by adding edges to G i between nodes that have a common neighbor.) This technique was introduced by Hochbaum and Shmoys <ref> [9, 10] </ref> and has been used extensively to solve K-center problems. We refer to a node in the maximal independent set as a monarch. The algorithm also constructs a "tree" of monarchs which will be used to assign vertices to centers.
Reference: [11] <author> W. L. Hsu and G. L. Nemhauser, </author> <title> "Easy and hard bottleneck location problems", </title> <journal> Discrete Applied Mathematics, </journal> <volume> Vol 1 </volume> <pages> 209-216, </pages> <year> (1979). </year>
Reference-contexts: An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal <ref> [7, 9, 10, 11] </ref>. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16].
Reference: [12] <author> C. Lund and M. Yannakakis, </author> <title> "On the hardness of approximating minimization problems", </title> <journal> Journal of the ACM, </journal> <volume> Vol 41(5) </volume> <pages> 960-981, </pages> <year> (1994). </year>
Reference-contexts: Results of Lund and Yannakakis <ref> [12] </ref> and Feige [6] imply that no polynomial time (c 1 K; c 2 L; (2 *)R) approximation algorithm is possible unless N P DT IM E (n O (loglog n) ), since this would imply a constant-factor approximation algorithm for set cover.
Reference: [13] <author> R. Lupton, F. M. Maley, and N. E. Young, </author> <title> "Data collection for the Sloan digital sky survey a network-flow heuristic", </title> <booktitle> Proc. of the 7 th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 296-303, </pages> <year> (1996). </year> <month> 17 </month>
Reference-contexts: Various applications for capacitated centers were first mentioned in [14, 15]. A slightly different problem, where the radius is fixed, and one has to minimize the number of centers, shows up in the Sloan digital sky survey project <ref> [13] </ref>. 1.1. Our Results In Section 2 we discuss a simplification of the problem where a node may appear multiple times in S (i.e. more than one center can be put at a node). We will refer to this problem as 1 the capacitated multi-K-center problem.
Reference: [14] <author> H. L. Morgan and K. D. Levin, </author> <title> "Optimal program and data locations in computer net-works", </title> <journal> Communications of the ACM, </journal> <volume> Vol 20 </volume> <pages> 315-322, </pages> <year> (1977). </year>
Reference-contexts: Various applications for capacitated centers were first mentioned in <ref> [14, 15] </ref>. A slightly different problem, where the radius is fixed, and one has to minimize the number of centers, shows up in the Sloan digital sky survey project [13]. 1.1.
Reference: [15] <author> K. Murthy and J. Kam, </author> <title> "An approximation algorithm to the file allocation problem in computer networks", </title> <booktitle> Proc. of 2 nd ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 258-266, </pages> <year> (1983). </year>
Reference-contexts: Various applications for capacitated centers were first mentioned in <ref> [14, 15] </ref>. A slightly different problem, where the radius is fixed, and one has to minimize the number of centers, shows up in the Sloan digital sky survey project [13]. 1.1.
Reference: [16] <author> J. Plesnik, </author> <title> "A heuristic for the p-center problem in graphs", </title> <journal> Discrete Applied Mathematics, </journal> <volume> Vol 17 </volume> <pages> 263-268, </pages> <year> (1987) </year>
Reference-contexts: Approximation algorithms for the basic K-center problem have been very well studied and are known to be optimal [7, 9, 10, 11]. These schemes present natural methods for obtaining an approximation factor of 2. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 10, 16] </ref>. The generalizations include cases when each node has an associated "cost" for placing a center on it, and rather than limiting the number of centers, we have a limited budget [10, 16]. <p> Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 10, 16]. The generalizations include cases when each node has an associated "cost" for placing a center on it, and rather than limiting the number of centers, we have a limited budget <ref> [10, 16] </ref>. Other generalizations include cases where the vertices have weights and we consider the weighted distance from a node to its closest center [3, 16]. Recently, a very interesting generalization that we call the capacitated K-center problem was studied by Bar-Ilan, Kortsarz and Peleg [1]. <p> Other generalizations include cases where the vertices have weights and we consider the weighted distance from a node to its closest center <ref> [3, 16] </ref>. Recently, a very interesting generalization that we call the capacitated K-center problem was studied by Bar-Ilan, Kortsarz and Peleg [1]. The input specifies an upper bound on the number of centers K, as well as a maximum load L. <p> We use cost here to distinguish from weights as defined in, for example, <ref> [3, 16] </ref>.) More formally, we are given a cost function c : V ! R + , and we add the constraint P v2S c (v) K to the statement of the capacitated K-center problem.
Reference: [17] <author> C. Toregas, R. Swain, C. Revelle and L. Bergman, </author> <title> "The location of emergency service facilities", </title> <journal> Operations Research, </journal> <volume> Vol 19 </volume> <pages> 1363-1373, </pages> <year> (1971). </year> <month> 18 </month>
Reference-contexts: 1. Introduction The basic K-center problem is a fundamental facility location problem <ref> [17] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S.
References-found: 17

