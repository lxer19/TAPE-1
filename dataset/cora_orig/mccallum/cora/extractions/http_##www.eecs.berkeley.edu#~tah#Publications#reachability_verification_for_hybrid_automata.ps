URL: http://www.eecs.berkeley.edu/~tah/Publications/reachability_verification_for_hybrid_automata.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/reachability_verification_for_hybrid_automata.html
Root-URL: 
Email: tah@eecs.berkeley.edu  rusu@csl.sri.com  
Phone: 2  
Title: Reachability Verification for Hybrid Automata  
Author: Thomas A. Henzinger ?? Vlad Rusu ? 
Keyword: hybrid automata, reachability verification, theorem proving.  
Address: Berkeley, CA  Menlo Park, CA  
Affiliation: 1 EECS Department, University of California,  SRI International, Computer Science Laboratory,  
Abstract: We study the reachability problem for hybrid automata. Automatic approaches, which attempt to construct the reachable region by symbolic execution, often do not terminate. In these cases, we require the user to guess the reachable region, and we use a theorem prover (Pvs) to verify the guess. We classify hybrid automata according to the theory in which their reachable region can be defined finitely. This is the theory in which the prover needs to operate in order to verify the guess. The approach is interesting, because an appropriate guess can often be deduced by extrapolating from the first few steps of symbolic execution. 
Abstract-found: 1
Intro-found: 1
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Hybrid automata are a specification and verification model for hybrid systems <ref> [ACH + 95] </ref>, systems that involve mixed continuous and discrete evolutions of variables. <p> Finally, in Section 4 we describe an embedding of hybrid automata into the theorem prover Pvs [ORR + 96], and apply the reach-ability verification method to some well-known examples for which reachability construction fails. 2 Linear Hybrid Automata and Reachability Analysis Hybrid automata <ref> [ACH + 95] </ref> are finite automata enriched with a finite set of real-valued variables. <p> The reachability problem for linear hybrid automata is: given a linear hybrid automaton A and a set R of linear regions, is there a reachable state of A that is contained in some region in R. We discuss below two kinds of approaches to this problem. Reachability construction <ref> [ACH + 95] </ref>. This method performs a symbolic execution of the hybrid automaton. It consists in successively approximating the reachable region, starting from the initial region, and iterating successor operations until the computation converges. There are two kinds of successors.
Reference: [AD94] <author> R. Alur and D. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The class of finitely constructible hybrid automata includes the timed automata <ref> [AD94] </ref> and the initialized rectangular hybrid automata [HKPV95] (with some minor modifications to force the reachability construction to terminate) as well as some other restricted classes [KPSY93,RR96]. Definition 2 (additive-inductive hybrid automata).
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: In Section 2, we present the hybrid automaton model, the reachability construction method, and the reach-ability verification method. We restrict our attention to linear hybrid automata, for which reachability construction can be automated and has been implemented in verification tools such as HyTech <ref> [AHH96] </ref>. In Section 3, we classify linear hybrid automata according to the theory in which the set of reachable states is definable. For example, all linear hybrid automata for which reachability construction converges are polyhedral, as their reachable region can be defined in (IR; +; ). <p> Some subclasses for which reachability construction terminates have been identified, such as timed automata, initialized rectangular hybrid automata, 1 and others [KPSY93,AD94,ACH + 95,HKPV95,RR96]. For these classes, the reachability problem is decidable. Reachability construction is the procedure implemented in symbolic model-checking tools such as HyTech <ref> [AHH96] </ref>. 1 For these classes, termination is achieved by slightly modifying the automaton. 5 Reachability verification. We define a new approach to the reachability prob-lem, called the reachability verification method. This method can succeed in cases when reachability construction fails.
Reference: [BBR97] <author> B. Boigelot, L. Bronne, and S. Rassart. </author> <title> An improved reachability analysis method for strongly linear hybrid systems. </title> <booktitle> In Proc. of the 9th Conference on Computer-Aided Verification, CAV'97, </booktitle> <volume> LNCS 1254, </volume> <pages> pages 167-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Related work. [BW94] exploit the regularity of cycles on a discrete model (automata with counters). Their approach is fully automatic but it is limited to linear operations on the variables that are idempotent. <ref> [BBR97] </ref> present a similar approach for a restricted class of hybrid automata (there is a fixed interval of time between transitions), but their method is fully automatic.
Reference: [BR97] <author> A. Burgue~no and V. Rusu. </author> <title> Task-system analysis using slope-parametric hybrid automata. </title> <booktitle> In Proc. of the 3rd Conference on Parallel Processing, Euro-Par'97, </booktitle> <volume> LNCS 1300, </volume> <pages> pages 1262-1273. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Indeed, the extension and projection operations (equations (1), (2) of Section 2) can be computed automatically for predicates in (IR; IN; +; INfiIN ; INfiIR ): these operations require eliminating the existential quantifiers on the real variables, which can be done using a generalization of the Fourier-Motzkin algorithm <ref> [BR97] </ref>. But after the quantifier elimination, we are left to decide a first-order formula of the (undecidable) theory (IN; +; ; ). This last formula has to be dealt with by theorem proving.
Reference: [BW94] <author> B. Boigelot and P. Wolper. </author> <title> Symbolic verification with periodic sets. </title> <booktitle> In Proc. of the 6th Conference on Computer-Aided Verification, CAV'94, </booktitle> <volume> LNCS 818, </volume> <pages> pages 55-67. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: We have presented some applications using the prover Pvs. In the future, we plan to automate the method as much as possible (including automated guess heuristics and adapted strategies for the Pvs proofs) for being able to cope with larger examples. Related work. <ref> [BW94] </ref> exploit the regularity of cycles on a discrete model (automata with counters).
Reference: [CHR91] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40 </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: We now describe the application of reachability verification to examples of hybrid systems modeled by additive-inductive hybrid automata. The leaking gas burner. The hybrid automaton in Figure 4 models a leaking gas burner <ref> [CHR91] </ref>: location s 1 (resp. s 2 ) stands for the leaking (resp. the non-leaking) state of the system; variable x is used to control the time spent in each state, variable y is a global clock, and variable z measures the total time spent by the gas burner in the
Reference: [HHWT98] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <journal> IEEE Transactions on Automatic Control, </journal> <note> 1998. To appear. </note>
Reference-contexts: We restrict our attention to a simple class of hybrid automata, allowing only straight-line activities and resets of variables to zero. More general feature can be approximated in the simpler framework, with additional locations, transitions, and variables <ref> [HHWT98] </ref>. Below (Figure 1) is an example of a linear hybrid automaton. It has the three locations s 1 , s 2 , s 3 and the three variables x, y, z. <p> The reactor temperature controller. This example is taken from [JLHM91]. It is a variant of the nuclear reactor temperature control problem, in which nonlinear evolutions are approximated by piecewise-linear functions <ref> [HHWT98] </ref>. The no rodrod 1 rod 2 _y 1 = _y 2 = 1 _y 1 = _y 2 = 1 x 510 x 550 x 510 _x 2 [1; 5] y 1 := 0 y 2 := 0 y 1 20 y 2 20 Fig. 5.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <title> What's decidable about hybrid automata? In Proc. </title> <booktitle> of the 27th Annual ACM Symposium on Theory of Computing, STOC'95, </booktitle> <pages> pages 373-382, </pages> <year> 1995. </year>
Reference-contexts: If, for some integer k 2 IN , it is the case that P ost k+1 (I) P ost k (I), then reachability construction terminates in finitely many steps, and P ost fl (I) = P ost k (I). This does not happen in general for linear hybrid automata <ref> [HKPV95] </ref>. Some subclasses for which reachability construction terminates have been identified, such as timed automata, initialized rectangular hybrid automata, 1 and others [KPSY93,AD94,ACH + 95,HKPV95,RR96]. For these classes, the reachability problem is decidable. <p> The class of finitely constructible hybrid automata includes the timed automata [AD94] and the initialized rectangular hybrid automata <ref> [HKPV95] </ref> (with some minor modifications to force the reachability construction to terminate) as well as some other restricted classes [KPSY93,RR96]. Definition 2 (additive-inductive hybrid automata).
Reference: [HPR94] <author> N. Halbwachs, Y.-E. Proy, and P. Raymond. </author> <title> Verification of linear hybrid systems by means of convex approximations. </title> <booktitle> In Proc. of the 1st Static Analysis Symposium, SAS'94, </booktitle> <volume> LNCS 864, </volume> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Abstract interpretation of hybrid automata <ref> [HPR94] </ref> would automatically recognize the regularities of polyhedra and detect an invariant which, in general, is only an over-approximation of the actually reachable states.
Reference: [JLHM91] <author> M. Jaffe, N. Levenson, M. Heimdahl, and B. Melhart. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-258, </pages> <year> 1991. </year>
Reference-contexts: Except for some details (like the expansions of the definitions for continuous, discrete, post etc), Pvs can do all the proofs automatically, using its built-in decision procedures. The reactor temperature controller. This example is taken from <ref> [JLHM91] </ref>. It is a variant of the nuclear reactor temperature control problem, in which nonlinear evolutions are approximated by piecewise-linear functions [HHWT98].
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. </title> <booktitle> In Proc. of the 1st Workshop on Theory of Hybrid Systems, </booktitle> <volume> LNCS 736, </volume> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [ORR + 96] <author> S. Owre, S. Rajan, J.M. Rushby, N. Shankar, and M.K. Srivas. Pvs: </author> <title> Combining specification, proof checking, and model checking. </title> <booktitle> In Proc. of the 8th Conference on Computer-Aided Verification, CAV '96, </booktitle> <volume> LNCS 1102, </volume> <pages> pages 411-414. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We also present a restricted subclass of additive-inductive automata for which the reachable region can be computed algorithmically, even though reachability construction does not necessarily terminate. Finally, in Section 4 we describe an embedding of hybrid automata into the theorem prover Pvs <ref> [ORR + 96] </ref>, and apply the reach-ability verification method to some well-known examples for which reachability construction fails. 2 Linear Hybrid Automata and Reachability Analysis Hybrid automata [ACH + 95] are finite automata enriched with a finite set of real-valued variables. <p> This shows that there exist hybrid automata for which the reachability problem is decidable, even though reachability construction does not terminate. 4 Hybrid Automata in PVS We outline the modeling of hybrid automata and reachability verification in Pvs <ref> [ORR + 96] </ref>. First we specify a theory polyhedra [n] of n-dimensional polyhedra (parametric in the dimension n 2 IN ). It contains essentially the definitions of extension, projection (formulas (1), (2) of Section 2), and intersection operations on polyhedra.
Reference: [RR96] <author> O. Roux and V. Rusu. </author> <title> Uniformity for the decidability of hybrid automata. </title> <booktitle> In Proc. of the 3rd Static Analysis Symposium, SAS'96, </booktitle> <volume> LNCS 1145, </volume> <pages> pages 301-316. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [VH96] <author> Jan Vitt and Josef Hooman. </author> <title> Assertional specification and verification using Pvs of the steam boiler control system. In Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <publisher> LNCS 1165, </publisher> <pages> pages 453-472. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Abstract interpretation of hybrid automata [HPR94] would automatically recognize the regularities of polyhedra and detect an invariant which, in general, is only an over-approximation of the actually reachable states. Finally, <ref> [VH96] </ref> describe an approach based on stepwise refinement for the verification of hybrid systems, where Pvs is used to prove the correctness of each refinement step. Acknowledgments. Thanks to Natarajan Shankar, Luca de Alfaro, Peter Haber-mehl, and the anonymous reviewers of the Hybrid Systems workshop for useful comments and suggestions. 14
Reference: [Zie95] <author> G. M. Ziegler. </author> <title> Lectures on Polytopes, volume 152 of Graduate Texts in Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 15 </month>
Reference-contexts: This amounts to proving finitely many implications of the form 8x 2 IR n :8i 2 IN m :9y 2 IR:'(x; i; y) ) (x; i; y). Proving such an implication can be done automatically, by eliminating the existential quantifiers on the real variables using the Fourier-Motzkin algorithm <ref> [Zie95] </ref> (transforming the universal quantifiers into existential ones by taking the negation of the formula whenever necessary). At the end we are left with a formula of Presburger arithmetic, which is decidable.
References-found: 16

