URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-96-04.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.cs.virginia.edu
Title: HYPERTEXT STRUCTURES AND SOFTWARE DOCUMENTATION  
Author: James C. French, John C. Knight, Allison L. Powell 
Abstract: Technical Report CS-96-04 Department of Computer Science University of Virginia February 1996 ABSTRACT Software documentation represents a critical resource to the successful functioning of many enterprises. However, because it is static, documentation often fails to meet the needs of the many diverse users who are required to consult it on a regular basis in the course of their daily work. Software documentation is a rich resource that has not been fully exploited. Treatment of software documentation presents a number of interesting problems that require a blend of information retrieval and hypertext techniques for their successful solution. The evolving nature of a software project and the diverse demands on its documentation present an especially challenging environment. This is made even more challenging by the variety of information resources, ranging from formal specification languages to source code, that must be integrated into a coherent whole for the purpose of querying. In this paper we discuss the issues involved with automating the management of software documentation to better increase its utility. We describe the mechanics of a prototype system, SLEUTH, currently under investigation at the University of Virginia as a vehicle for software documentation management. The prototype maintains software documentation as a hypertext with typed links for the purpose of browsing by users with varying needs. These links are synthesized by the system and kept accurate under update. Appropriate authoring tools provide the system with the information it needs for this maintenance function. Ad hoc querying is provided over the documentation and hypertext documents are synthesized in response to these queries. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Allan, James, </author> <title> Automatic Hypertext Construction. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> dissertation, Cornell University, </institution> <note> Jan-uary 1995. Also technical report TR95-1484. </note>
Reference-contexts: Available link and cross-reference types are those to appendices, source code, figures, tables, and other related documents. Hypertext links to glossary entries are also available. Link types are specified by the author. At present, it is unclear if automatic determination of link type, such as that explored by Allan <ref> [1] </ref> is feasible for this application area. Once the configuration files have been set up, the information contained therein must be formatted for input to Lex (see Fig. 3). One Lex input file (i.e. specification) is created for each configuration file.
Reference: 2. <author> Cybulski, Jacob L. and Reed, Karl, </author> <title> A Hypertext Based Software Engineering Environment, </title> <journal> IEEE Software, </journal> <pages> pp. 62-68, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: A number of experimental systems have been developed in an effort to deal with the situation and to experiment with other approaches to managing software documentation. Four such systems are DIF [8], SODOS [9,10], HyperCASE <ref> [2] </ref> and LaSSIE [3]: DIF. The Document Integration Facility is an environment to develop, maintain and browse the Hypertext Structures and Software Documentation -- 3 -- documentation associated with a large-scale software system. It was introduced by Garg and Scacchi [8]. <p> The database consists of all documents associated with a project. SODOS provides a document interface which allows users to modify and query documents. Possible query terms are defined by the author. HyperCASE. HyperCASE was proposed by Cybulski and Reed <ref> [2] </ref>. It integrates the two concepts of hypertext and CASE tools. HyperCASE uses hypertext to link related information in documents associated with the software life cycle. HyperCASE provides an application for creating, editing and presenting documents, a repository and a data dictionary. HyperCASE provides a number of browsing capabilities. LaSSIE.
Reference: 3. <author> Devanbu, Premkumar, Selfridge, Peter G., Branchman, Ronald J. and Ballard, Bruce W., </author> <title> LaSSIE: a Knowledge-based Software Information System, </title> <booktitle> IEEE Proceedings of the 12th International Conference on Software Engineering, </booktitle> <pages> pp. 249-261, </pages> <year> 1990. </year>
Reference-contexts: A number of experimental systems have been developed in an effort to deal with the situation and to experiment with other approaches to managing software documentation. Four such systems are DIF [8], SODOS [9,10], HyperCASE [2] and LaSSIE <ref> [3] </ref>: DIF. The Document Integration Facility is an environment to develop, maintain and browse the Hypertext Structures and Software Documentation -- 3 -- documentation associated with a large-scale software system. It was introduced by Garg and Scacchi [8]. <p> HyperCASE uses hypertext to link related information in documents associated with the software life cycle. HyperCASE provides an application for creating, editing and presenting documents, a repository and a data dictionary. HyperCASE provides a number of browsing capabilities. LaSSIE. LaSSIE <ref> [3] </ref> focuses on the structure of a large software system and provides architectural, operational, feature and code views of the system. LaSSIE maintains a knowledge base to attempt to answer programmer questions.
Reference: 4. <author> Edmundson, H. P. and Wyllys, R. E., </author> <title> Automatic Abstracting and IndexingSurvey and Recommendations, </title> <journal> Communications of the ACM vol. </journal> <volume> 4, no. 5, </volume> <pages> pp. 226-234, </pages> <month> May </month> <year> 1961. </year>
Reference-contexts: This implies the need to synthesize new documents on-the-y, documents that meet the specific needs of the user issuing a query. Automatic abstracting will be crucial. Techniques for automatically abstracting documents have been around for over 35 Hypertext Structures and Software Documentation -- 13 -- years. Edmundson and Wyllys <ref> [4] </ref> survey their own work and that of three other researchers: Bax-endale, Luhn, and Oswald. More recently Salton et al. [15,16] have discussed passage retrieval and theme generation to aid in the summarization and navigation of large complex texts.
Reference: 5. <author> Frakes, William B. and Pole, Thomas B., </author> <title> An Empirical Study of Representation Methods for Reusable Software Components, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 20, no. 8, </volume> <pages> pp. 617-630, </pages> <year> 1994. </year>
Reference-contexts: We have expanded the notion of full-text to include source code text, requirement and specification language texts, as well as any other component of a soft ware documentation library. There have been some successful applications of IR technology to software engineering such as Frakes and Poles work <ref> [5] </ref> with IR techniques to search for and retrieve components from a software reuse library. Wood and Somerville [18] have also explored this area. But for the most part, software documents have been relegated to hardcopy to languish largely unread.
Reference: 6. <institution> Frame Developers Kit for Specific Platforms - UNIX, Frame Technology Corporation, </institution> <month> Octo-ber </month> <year> 1993. </year>
Reference-contexts: User Interface The on-line interface presented to users is the standard FrameMaker viewing environment that has been enhanced using the FrameMaker Developers Toolkit <ref> [6, 7] </ref>. This version can be navigated using the typed hypertext links in the traditional point and click fashion. An example viewing session is shown in Fig. 5.
Reference: 7. <institution> Frame Developers Kit Programmers Guide, Frame Technology Corporation, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: User Interface The on-line interface presented to users is the standard FrameMaker viewing environment that has been enhanced using the FrameMaker Developers Toolkit <ref> [6, 7] </ref>. This version can be navigated using the typed hypertext links in the traditional point and click fashion. An example viewing session is shown in Fig. 5.
Reference: 8. <author> Garg, Pankaj K. and Scacchi, Walt, </author> <title> A Hypertext System to Manage Software Life-Cycle Documents, </title> <journal> IEEE Software, </journal> <pages> pp. 90-98, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This means that users are basically left to their own devices when searching for information. A number of experimental systems have been developed in an effort to deal with the situation and to experiment with other approaches to managing software documentation. Four such systems are DIF <ref> [8] </ref>, SODOS [9,10], HyperCASE [2] and LaSSIE [3]: DIF. The Document Integration Facility is an environment to develop, maintain and browse the Hypertext Structures and Software Documentation -- 3 -- documentation associated with a large-scale software system. It was introduced by Garg and Scacchi [8]. <p> Four such systems are DIF <ref> [8] </ref>, SODOS [9,10], HyperCASE [2] and LaSSIE [3]: DIF. The Document Integration Facility is an environment to develop, maintain and browse the Hypertext Structures and Software Documentation -- 3 -- documentation associated with a large-scale software system. It was introduced by Garg and Scacchi [8]. The documents produced in DIF are the documents associated with each phase in the software life cycle, from requirements analysis and specification to testing. Each segment of a document is viewed as an object and hypertext links between documents are relationships between objects.
Reference: 9. <author> Horowitz, Ellis and Williamson, Ronald C., SODOS: </author> <title> A Software Document Support Environment--Its Definition, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-12, no. 8, </volume> <pages> pp. 849-859, </pages> <month> August </month> <year> 1986. </year>
Reference: 10. <author> Horowitz, Ellis and Williamson, Ronald C., SODOS: </author> <title> A Software Document Support Environment--Its Use, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-12, no. 11, </volume> <pages> pp. 1076-1087, </pages> <month> November </month> <year> 1986. </year>
Reference: 11. <author> Kahle, Brewster and Medlar, A., </author> <title> An Information System for Corporate Users: Wide Area Information Servers, </title> <journal> Online Magazine, </journal> <pages> pp. 56-60, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Configuration File Rule file Generator Lex filter.l C Compiler filter.c filter Fig. 3 Filter creation. Hypertext Structures and Software Documentation -- 10 -- The Search Engine The SLEUTH system currently utilizes a WAIS (Wide Area Information Server) <ref> [11] </ref> search engine. WAIS is intended for distributed information retrieval and based on a client-server model of computation. We are using a variant of WAIS that allows simple Boolean keyword searching in which the boolean operators and, not and or are applied to the terms delimited by the operators.
Reference: 12. <author> Lesk, M. E., and Schmidt, E., </author> <title> Lex - A Lexical Analyzer Generator, </title> <type> Computing Science Technical Report 39, </type> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, N. J, </address> <year> 1975. </year>
Reference-contexts: The filters ignore the header information and most of the markup tagsinserting a hypertext link in those areas would be an error. Filter Creation The filters are implemented as a series of generated Lex <ref> [12] </ref> programs. These programs are generated using the configuration files created by the author. The author records the phrase to match, the link type, the destination document and the anchor name (if desired) within the document for each term that is to become a hypertext link or cross-reference.
Reference: 13. <author> Marchionini, Gary and Shneiderman, Ben, </author> <title> Finding Facts vs. Browsing Knowledge in Hypertext Systems, </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 1, </volume> <pages> pp. 70-80, </pages> <year> 1988. </year>
Reference-contexts: This is a very wide spectrum of needs. To address these needs, SLEUTH depends in large part on the hypertext structure of the documentation. This structure allows users to tailor both the degree of detail and the specific content to their needs. However, as discussed by Marchionini and Shneiderman <ref> [13] </ref>, while hypertext is an excellent environment for browsing and providing varying levels of detail, it is not always best for providing quick answers to specific questions. Therefore, SLEUTH provides a search engine, in addition to hypertext, to address those needs.
Reference: 14. <author> Parnas, David L., van Schouwen, A. John and Kwan, Shu Po, </author> <title> Evaluation of Safety-Critical Software, </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, no. 6, </volume> <pages> pp. 636-648, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: However, all of the information needed by software engineers cannot be embodied in the source code. The importance of documentation in the software development process is discussed by Parnas et al. <ref> [14] </ref>. Inaccuracies or inconsistencies in documentation hinder that process. Software documentation is difficult to use because it is static and hence takes on a single form. This means that a single form has to meet the needs of the various interested parties.
Reference: 15. <author> Salton, G., Allan, J., and Buckley, C., </author> <title> Approaches to Passage Retrieval in Full Text Information Systems, </title> <booktitle> Proc. of 16th Annual Inter. ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1993, </year> <pages> pp. 49-58. </pages>
Reference: 16. <author> Salton, G., Allan, J., Buckley, C. and Singhal, A., </author> <title> Automatic Analysis, Theme Generation, and Summarization of Machine-Readable Texts, </title> <journal> Science, </journal> <volume> vol. 264, </volume> <pages> pp. 1421-1426, </pages> <month> 3 June </month> <year> 1994. </year>
Reference: 17. <author> Soloway, E., Pinto, J., Letovsky, S., Littman, D., Lampert, R., </author> <title> Designing Documentation to Compensate for Delocalized Plans, </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 11, </volume> <pages> pp. 1259-1267, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: A maintenance programmer charged with making an enhancement or change. This user needs detailed information on a specific system area, along with interactions with other components. As detailed by Soloway et al. <ref> [17] </ref>, documentation should help the maintenance programmer to have a full understanding of the system before making a change so that the system design can be consistently maintained. A regulator who must determine if a legal requirement has been implemented.
Reference: 18. <author> Wood, Murray and Somerville, Ian, </author> <title> An Information Retrieval System for Software Components, </title> <booktitle> SIGIR Forum, </booktitle> <pages> pp. 11-25, </pages> <month> Spring/Summer </month> <year> 1988. </year>
Reference-contexts: There have been some successful applications of IR technology to software engineering such as Frakes and Poles work [5] with IR techniques to search for and retrieve components from a software reuse library. Wood and Somerville <ref> [18] </ref> have also explored this area. But for the most part, software documents have been relegated to hardcopy to languish largely unread.
References-found: 18

