URL: http://HTTP.CS.Berkeley.EDU/~christos/fw.ps
Refering-URL: http://HTTP.CS.Berkeley.EDU/~christos/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On the Floyd-Warshall Algorithm for Logic Programs  
Author: Christos Papadimitriou Martha Sideri 
Address: Berkeley, Berkeley, CA 94720  Greece  
Affiliation: Division of Computer Science, U. C.  Athens University of Economics and Business,  
Abstract: We explore the possibility of evaluating single-rule Datalog programs efficiently and with logarithmic work space by a natural extension of the Floyd-Warshall algorithm for transitive closure. We characterize exactly the single rule chain programs that can be so evaluated: they are rather modest generalizations of the transitive closure. The proof relies on an interesting language-theoretic concept, total ambiguity. Extensions to more general classes of programs, and more general algorithms, are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, R. Hull, V. </author> <title> Vianu Foundations of Databases, </title> <publisher> Addison-Wesley 1995. </publisher>
Reference-contexts: k ) time (in the example above, in O (n 3 ) time, where n is the number of constants in the given relation T 0 ) by the so-called semi-naive algorithm, a Horn-clause decision procedure applied to the Horn formula implicit in the rule-goal graph of the ground atoms, <ref> [5, 1] </ref>. During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example [3, 4, 2, 1]. <p> During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example <ref> [3, 4, 2, 1] </ref>. If a Datalog program is first-order or non-recursive, in that it does not mention in the right-hand side any relation that occurs on the left-hand side, then it can be computed more simply, and in logarithmic space [1]. <p> If a Datalog program is first-order or non-recursive, in that it does not mention in the right-hand side any relation that occurs on the left-hand side, then it can be computed more simply, and in logarithmic space <ref> [1] </ref>. Here we consider an intriguing extension of first-order programs, which can also be so evaluated.
Reference: [2] <author> F. Afrati, C. H. </author> <title> Papadimitriou "The parallel complexity of simple logic programs," </title> <journal> J.ACM, </journal> <volume> 40, 4, </volume> <pages> pp. 891-916, </pages> <year> 1993. </year>
Reference-contexts: During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example <ref> [3, 4, 2, 1] </ref>. If a Datalog program is first-order or non-recursive, in that it does not mention in the right-hand side any relation that occurs on the left-hand side, then it can be computed more simply, and in logarithmic space [1]. <p> In this paper we prove results strongly suggesting that this is not the case. That is, our main results are essentially negative. We give a characterization of all chain sirups (an interesting special class of sirups first studied in <ref> [2] </ref>) that can be solved by the Floyd-Warshall algorithm (Theorem 1). They are precisely those whose underlying context-free grammar (see [2] and Section 2 for the relationship between chain-rule programs and context-free grammars) is of the form T ! T (AT ) + , where A contains only database relations |that <p> That is, our main results are essentially negative. We give a characterization of all chain sirups (an interesting special class of sirups first studied in <ref> [2] </ref>) that can be solved by the Floyd-Warshall algorithm (Theorem 1). They are precisely those whose underlying context-free grammar (see [2] and Section 2 for the relationship between chain-rule programs and context-free grammars) is of the form T ! T (AT ) + , where A contains only database relations |that is to say, they are rather modest generalizations of the transitive closure program above. <p> For example, the semantics of the program displayed in the introduction is precisely the transitive closure of the directed graph T 0 . We next define an important syntactic subclass of Datalog programs, first studied in <ref> [2] </ref>. <p> The context-free connection is very important in such investigations. For example in <ref> [2] </ref> the parallel complexity of chain sirups was explored and characterized exactly, by using a novel language-theoretic concept called the polynomial stack property. In this section we shall characterize exactly the class of chain sirups that have the Floyd-Warshall property by relying on another language-theoretic concept called total ambiguity.
Reference: [3] <author> F. Bancilhon, D. Maier, Y. Shagiv, J. D. </author> <title> Ullman "The parallel complexity of simple logic programs," </title> <booktitle> Proc. 1986 PODS, </booktitle> <pages> pp. </pages> <note> 1-15; also, </note> <editor> J.ACM, </editor> <volume> 40, 4, </volume> <pages> pp. 891-916, </pages> <year> 1993. </year>
Reference-contexts: During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example <ref> [3, 4, 2, 1] </ref>. If a Datalog program is first-order or non-recursive, in that it does not mention in the right-hand side any relation that occurs on the left-hand side, then it can be computed more simply, and in logarithmic space [1].
Reference: [4] <author> F. Bancilhon, R. </author> <title> Ramakrishnan "An amateur's introduction to query processing strategies," </title> <booktitle> Proc. 1986 PODS. </booktitle>
Reference-contexts: During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example <ref> [3, 4, 2, 1] </ref>. If a Datalog program is first-order or non-recursive, in that it does not mention in the right-hand side any relation that occurs on the left-hand side, then it can be computed more simply, and in logarithmic space [1].
Reference: [5] <author> A. Chang, </author> <title> "On the evaluation of queries containing derived relations in relational databases," in Advances in Database Theory, </title> <editor> H. Gallaire, J. Minker, J.-M. Nicolas (eds.), </editor> <booktitle> pp. </booktitle> <pages> 235-260, </pages> <publisher> Plenum Press, </publisher> <year> 1981. </year> <month> 7 </month>
Reference-contexts: k ) time (in the example above, in O (n 3 ) time, where n is the number of constants in the given relation T 0 ) by the so-called semi-naive algorithm, a Horn-clause decision procedure applied to the Horn formula implicit in the rule-goal graph of the ground atoms, <ref> [5, 1] </ref>. During the past fifteen years, a central problem in Database Theory has been to find more efficient specialized algorithms for large classes of Datalog programs |see for example [3, 4, 2, 1].
Reference: [6] <author> T. H. Cormen, C. E. Leiserson, R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [7] <author> R. W. Floyd, </author> <title> "Algorithm 97: Shortest path," </title> <journal> C.ACM, </journal> <volume> 5, 6, </volume> <pages> pp. 345, </pages> <year> 1963. </year>
Reference-contexts: Here we consider an intriguing extension of first-order programs, which can also be so evaluated. For example, the transitive closure program (1) 1 can be evaluated by the (rather unDatalog-like) Floyd Warshall algorithm <ref> [7, 8] </ref> as follows: We order the triples of nodes (i; j; k) of T 0 in a particular order (independent of the relation T 0 , and depending only on the program and the number of constants n), and then run the following algorithm: The Floyd-Warshall Algorithm T := T <p> For example, all non-recursive programs have the Floyd-Warshall property, with any ; and it is a classical observation due to Floyd and Warshall independently <ref> [7, 8] </ref>, that the transitive closure program (1) has the Floyd-Warshall property, with being any enumeration of the triples of nodes in non-decreasing second index. Thus, the 3 Floyd-Warshall property is an intriguing extension of first order.
Reference: [8] <author> S. </author> <title> Warshall "A theorem on Boolean matrices," </title> <journal> J.ACM, </journal> <volume> 9, 1, </volume> <pages> pp. 11-12, </pages> <year> 1963. </year> <month> 8 </month>
Reference-contexts: Here we consider an intriguing extension of first-order programs, which can also be so evaluated. For example, the transitive closure program (1) 1 can be evaluated by the (rather unDatalog-like) Floyd Warshall algorithm <ref> [7, 8] </ref> as follows: We order the triples of nodes (i; j; k) of T 0 in a particular order (independent of the relation T 0 , and depending only on the program and the number of constants n), and then run the following algorithm: The Floyd-Warshall Algorithm T := T <p> For example, all non-recursive programs have the Floyd-Warshall property, with any ; and it is a classical observation due to Floyd and Warshall independently <ref> [7, 8] </ref>, that the transitive closure program (1) has the Floyd-Warshall property, with being any enumeration of the triples of nodes in non-decreasing second index. Thus, the 3 Floyd-Warshall property is an intriguing extension of first order.
References-found: 8

