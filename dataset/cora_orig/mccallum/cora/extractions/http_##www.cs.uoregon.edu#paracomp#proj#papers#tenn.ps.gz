URL: http://www.cs.uoregon.edu/paracomp/proj/papers/tenn.ps.gz
Refering-URL: http://www.cs.uoregon.edu/paracomp/proj/tau/papers.html
Root-URL: http://www.cs.uoregon.edu
Title: Program Analysis Environments for Parallel Language Systems: The t Environment  
Author: Darryl Brown, Steven Hackstadt, Allen Malony, Bernd Mohr 
Abstract: In this paper, we discuss t (TAU, Tuning and Analysis Utilities), the first prototype of an integrated and portable program analysis environment for pC ++ , a parallel object-oriented language system. t is unique in that it was developed specifically for pC ++ and relies heavily on pC ++ 's compiler and transformation tools (specifically, the Sage ++ toolkit) for its implementation. This tight integration allows t to achieve a combination of portability, functionality, and usability not commonly found in high-level language environments. The paper describes the design and functionality of t , using a new tool for breakpoint-based program analysis as an example of t 's capabilities.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bodin, P. Beckman, D. Gannon, J. Gotwals, S. Narayana, S. Srinivas, B. Winnicka, Sage++: </author> <title> An Object Oriented Toolkit and Class Library for Building Fortran and C++ Restructuring Tools, </title> <booktitle> Proc. </booktitle> <address> Oonski '94, Oregon, </address> <year> 1994. </year>
Reference-contexts: The most difficult challenge to the development of t is in determining what low-level performance (or debugging) instrumentation must be specified for capturing high-level execution abstractions, then translating performance data back to the application/language level. Integration with compilers and runtime systems. t uses the Sage ++ toolkit <ref> [1] </ref> as an interface to the pC ++ compiler for instrumentation and accessing properties of program objects. t is also integrated with the pC ++ runtime system for profiling and tracing support. Portability, extensibility, and retargetability.
Reference: [2] <author> V. Herrarte, E. Lusk, </author> <title> Studying Parallel Program Behavior with Upshot, </title> <type> Technical Report ANL-91/15, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 1. They include the integrated TAU tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [11, 2, 5, 13] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [3] <author> A. Chien and W. Dally. </author> <title> Concurrent Aggregates (CA), </title> <booktitle> Proc. 2nd ACM Sigplan Symposium on Principles & Practice of Parallel Programming, </booktitle> <address> Seattle, Washington, </address> <month> March, </month> <year> 1990. </year>
Reference-contexts: The basic concept behind pC ++ is the notion of a distributed collection, which is a type of concurrent aggregate "container class" <ref> [3] </ref>. More specifically, a collection is a structured set of objects which are distributed across the processing elements of the computer in a manner designed to be completely consistent with HPF [4].
Reference: [4] <author> High Performance Fortran Forum, </author> <title> High Performance Fortran Language Specification, </title> <note> 1993. Available from titan.cs.rice.edu by anonymous ftp. </note>
Reference-contexts: More specifically, a collection is a structured set of objects which are distributed across the processing elements of the computer in a manner designed to be completely consistent with HPF <ref> [4] </ref>. To accomplish this, pC ++ provides a very simple mechanism to build "collections of objects" from a base element class. Member functions from this element class can be applied to the entire collection (or a subset) in parallel.
Reference: [5] <author> B. Mohr, </author> <title> Standardization of Event Traces Considered Harmful or Is an Implementation of Object-Independent Event Trace Monitoring and Analysis Systems Possible?, </title> <booktitle> Proc. CNRS-NSF Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> St. Hilaire du Touvet, France, Elsevier, </address> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 103-124, </pages> <year> 1993. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 1. They include the integrated TAU tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [11, 2, 5, 13] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
Reference: [6] <author> J. Ousterhout, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proc. 1990 Winter USENIX Conf. </booktitle>
Reference-contexts: Portability, extensibility, and retargetability. Because pC ++ is intended to be portable, the tools have to be portable as well. We are using C ++ and C to ensure an efficient and portable implementation. The same reason led us to choose Tcl/Tk <ref> [6, 7] </ref> for the graphical interface. 1 pC ++ and its runtime system have been ported to several shared memory and distributed memory parallel systems, validating the system's goal of portability.
Reference: [7] <author> J. Ousterhout, </author> <title> An X11 Toolkit Based on the Tcl Language, </title> <booktitle> Proc. 1991 Winter USENIX Conf. </booktitle>
Reference-contexts: Portability, extensibility, and retargetability. Because pC ++ is intended to be portable, the tools have to be portable as well. We are using C ++ and C to ensure an efficient and portable implementation. The same reason led us to choose Tcl/Tk <ref> [6, 7] </ref> for the graphical interface. 1 pC ++ and its runtime system have been ported to several shared memory and distributed memory parallel systems, validating the system's goal of portability.
Reference: [8] <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, S. Kesavan, A. Malony, B. Mohr, </author> <title> Implementing a Parallel C++ Runtime System for Scalable Parallel Systems, </title> <booktitle> Proc. 1993 Supercomputing Conference, Portland, Oregon, </booktitle> <pages> pp. 588-597, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: More details about the pC ++ language and runtime system can be found in <ref> [8, 9] </ref>. The t Environment 3 The t tools are implemented as graphical hypertools. While they are distinct tools, they act in concert as if they were a single application. Each tool implements some well-defined tasks.
Reference: [9] <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, F. Bodin, </author> <title> Performance Analysis of pC++: A Portable Data-Parallel Programming System for Scalable Parallel Computers, </title> <booktitle> Proc. 8th Int. Parallel Processing Symb. (IPPS), </booktitle> <address> Cancun, Mexico, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 75-85, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: AF 30602-92-C-0135, by a grant from OACIS, and by IBM R&D contract MHVU3704. y Department of Computer and Information Science, University of Oregon, Eugene, Oregon 97403, fdarrylb, hacks, malony, mohrg@cs.uoregon.edu. 1 2 Malony et al. of the t static and dynamic analysis tools have been covered in detail elsewhere (see <ref> [9, 10] </ref>). Instead of reiterating that discussion (a brief description is given in x2.1 and x2.2), we focus on the latest t tool for breakpoint-based program analysis in x3. <p> More details about the pC ++ language and runtime system can be found in <ref> [8, 9] </ref>. The t Environment 3 The t tools are implemented as graphical hypertools. While they are distinct tools, they act in concert as if they were a single application. Each tool implements some well-defined tasks. <p> The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. The static and dynamic tools of the t environment are briefly described below; a more detailed discussion of these tools can be found in <ref> [9, 10] </ref>. 2.1 Static Analysis Tools One of the basic motivations behind using C ++ as the base for a new parallel language is its proven support for developing and maintaining complex and large applications. <p> With this support, we have been able to validate performance scalability claims and characterize important performance factors of the runtime system ports during pC ++ system development <ref> [9] </ref>. As a consequence, the first version of the compiler is being introduced with an extensive set of performance experiments already documented. More importantly, the t environment demonstrates the advantages of language-specific program analysis tools.
Reference: [10] <author> B. Mohr, D. Brown, A. Malony, </author> <title> TAU: A Portable Parallel Program Analysis Environment for pC ++ , Proc. </title> <booktitle> of CONPAR 94 - VAPP VI, </booktitle> <address> Linz, Austria, </address> <publisher> Springer Verlag, LNCS, </publisher> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: AF 30602-92-C-0135, by a grant from OACIS, and by IBM R&D contract MHVU3704. y Department of Computer and Information Science, University of Oregon, Eugene, Oregon 97403, fdarrylb, hacks, malony, mohrg@cs.uoregon.edu. 1 2 Malony et al. of the t static and dynamic analysis tools have been covered in detail elsewhere (see <ref> [9, 10] </ref>). Instead of reiterating that discussion (a brief description is given in x2.1 and x2.2), we focus on the latest t tool for breakpoint-based program analysis in x3. <p> The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. The static and dynamic tools of the t environment are briefly described below; a more detailed discussion of these tools can be found in <ref> [9, 10] </ref>. 2.1 Static Analysis Tools One of the basic motivations behind using C ++ as the base for a new parallel language is its proven support for developing and maintaining complex and large applications.
Reference: [11] <author> S. Hackstadt, A. Malony, </author> <title> Next-Generation Parallel Performance Visualization: A Prototyping Environment for Visualization Development, </title> <booktitle> Proc. Parallel Architectures and Languages Europe, (PARLE), </booktitle> <address> Athens, Greece, </address> <year> 1994. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 1. They include the integrated TAU tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [11, 2, 5, 13] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution. <p> Breezy Visualizations visualizations. Some example views are shown in Figure 7. We are working on reusing the POPEYE tools as visualization backends for breezy. More details about POPEYE can be found in <ref> [11, 12] </ref>. Fig. 7. POPEYE pC ++ performance visualizations: Local/Remote Accesses to Matrix collection (left) and remote access ratios as Kiviat tube (right) Another enhancement we plan on soon implementing is allowing users to provide custom access functions in their parallel data structures, accessible through the breakpoint executive.
Reference: [12] <author> S. Hackstadt, A. Malony, B. Mohr, </author> <title> Scalable Performance Visualization for Data-Parallel Programs, </title> <booktitle> Proc. Scalable High Performance Computing Conf. </booktitle> <address> (SHPCC), Tennessee, </address> <year> 1994. </year>
Reference-contexts: Breezy Visualizations visualizations. Some example views are shown in Figure 7. We are working on reusing the POPEYE tools as visualization backends for breezy. More details about POPEYE can be found in <ref> [11, 12] </ref>. Fig. 7. POPEYE pC ++ performance visualizations: Local/Remote Accesses to Matrix collection (left) and remote access ratios as Kiviat tube (right) Another enhancement we plan on soon implementing is allowing users to provide custom access functions in their parallel data structures, accessible through the breakpoint executive.
Reference: [13] <author> D. A. Reed, R. D. Olson, R. A. Aydt, T. M. Madhyasta, T. Birkett, D. W. Jensen, B. A. A. Nazief, B. K. Totty, </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> Proc. 6th Distributed Memory Computing Conference, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 562-569, </pages> <year> 1991. </year>
Reference-contexts: The program and performance analysis environment is shown on the right side of Figure 1. They include the integrated TAU tools, profiling and tracing support, and interfaces to stand-alone performance analysis tools developed partly by other groups <ref> [11, 2, 5, 13] </ref>. The t toolset provides support for accessing static information about the program and for querying and analyzing dynamic data obtained from program execution.
References-found: 13

