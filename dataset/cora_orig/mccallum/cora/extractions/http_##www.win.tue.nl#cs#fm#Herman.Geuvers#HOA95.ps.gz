URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/HOA95.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Email: gillesb@cs.kun.nl herman@win.tue.nl  
Phone: 1  2  3  
Title: Modular properties of algebraic pure type systems  
Author: Gilles Barthe ;? Herman Geuvers ; 
Address: Netherlands  Manchester, United Kingdom  Eindhoven, The Netherlands  
Affiliation: Faculty of Mathematics and Informatics, University of Nijmegen, The  Department of Computer Science, University of  Faculty of Math. and Informatics, Technological Univ. of  
Abstract: We introduce the framework of algebraic pure type systems, a generalisation of pure type systems with higher order rewriting a la Jouannaud-Okada, and initiate a generic study of the modular properties of these systems. We give a general criterion for a system of this framework to be strongly normalising. As an application of our criterion, we recover all previous strong normalisation results for algebraic pure type systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> F. Barbanera and M. Fernandez. </author> <title> Combining first and higher order rewrite systems with type assignment systems. </title> <booktitle> In M.Bezem and Groote [6], </booktitle> <pages> pages 60-74. </pages>
Reference-contexts: As a corollary, we obtain a new proof of strong normalisation for the algebraic calculus of constructions ([2] and <ref> [1, 7, 8, 18] </ref> for subsystems) and to our knowledge the first proof of strong normalisation for algebraic higher-order logic (the algebraic extension of HOL [13]) and the algebraic calculus of constructions with universes (with left-linear rewriting systems). <p> all pseudo-terms t 1 ; : : : ; t n , t i 2 SN (oe i ) for i = 1; : : : ; n ) f (t 1 ; : : : ; t n ) 2 SN (o ) The proof is an adaptation of <ref> [18, 1] </ref>. This key fact ensures that the model construction for algebraic pure type systems can be carried out in exactly the same way as for pure type systems.
Reference: 2. <author> F. Barbanera, M. Fernandez, and H. </author> <title> Geuvers. Modularity of strong normalisation and confluence in the algebraic -cube. </title> <booktitle> In Proceedings of LICS'94, </booktitle> <pages> pages 406-415. </pages> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: The combination is based on pure type systems ([3]); the result is a very general framework of algebraic pure type systems which covers in particular the systems of the algebraic -cube, a generalisation of Barendregt's cube studied in <ref> [2, 18] </ref>. A particular interest of the framework is that it offers the possibility to initiate a generic study of the meta-theory of these systems. First, basic meta-theoretic results, such as the substitution lemma or the generation lemma ([3, 13]) can be proved for arbitrary algebraic pure type systems. <p> In <ref> [2] </ref>, function symbols are treated as constants whereas we chose to treat them as constructors. Our choice was dicted by matters of convenience but there is no real difference between the two systems. In particular, our result applies to algebraic pure type systems with either definition of pseudo-terms. <p> As for the known results, we feel our proof improves on previous work by being direct and of the same complexity as the strong normalisation proof for the (pure) -cube. In contrast, the authors of <ref> [2] </ref> have to consider a reduction-preserving mapping of the algebraic calculus of constructions into an algebraic type assignment system and to show that the target system is strongly normalising. Corollary 13 Systems of the algebraic -cube are strongly normalising pro vided R-reduction is strongly normalising on algebraic terms ([2, 18]). <p> Note that we are implicitely assuming that algebraic data live in fl as in <ref> [2] </ref>; it is easy to adapt the proof to the other case.
Reference: 3. <author> H.P. Barendregt. </author> <title> Lambda calculi with types. </title> <editor> In S. Abramsky, D. M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pages 117-309. </pages> <publisher> Oxford Science Publications, </publisher> <year> 1992. </year>
Reference-contexts: The last section contains some final remarks about the work as well as directions for future research. We assume the reader to be reasonably familiar with pure type systems and their basic meta-theory, as presented for example in <ref> [3] </ref> or [13]. 2 Combining higher-order rewriting systems and pure type systems 2.1 Higher-order rewriting systems In this section, we introduce higher-order rewriting systems. The presentation is deliberately non-conventional in some respects but has been chosen to give a clear presentation of the general schema of [18]. <p> Note that the definition implicitely requires the algebraic pure type system to be functional in the sense of [13] (such systems are called singly-sorted in <ref> [3] </ref>). This is not a real restriction as one can hardly imagine a non-functional pure type system of interest. Definition 6 Let V be an arbitrary infinite set. <p> A Abstraction ; x : A; ` t : B ` x : A:B : s if x 62 FV () ` u : A ` B : s if A ! fiR B Note that the abstraction and product rules have a slightly more general presentation than usual (see <ref> [3] </ref> for example). For pure type systems, the two presentations can be shown to be equivalent; in fact, this is a simple consequence of the permutation lemma and strengthening ([17]).
Reference: 4. <author> G. Barthe. </author> <title> Combining algebraic rewriting and induction in the calculus of constructions. </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: Strong normalisation is derived easily from the model construction. 4.1 Strong normalisation of algebraic reduction Strong normalisation of algebraic reduction on legal terms can be established in a straightforward fashion by advocating modularity results from [11] for example. The technique is inspired from <ref> [4] </ref> and consists of viewing -calculus as an algebraic signature. In this way, we define for every R-algebraic pure type system S = (R; S; sortax; rules; datax) an algebraic signature S extending the signatures of the rewrite systems and upon which algebraic reduction is terminating.
Reference: 5. <author> G. Barthe and H. </author> <title> Geuvers. Congruence types. </title> <note> To be presented at CSL'95, </note> <year> 1995. </year>
Reference-contexts: interesting to extend the present work to more powerful type systems: possible extensions to be considered are first-order inductive types (i.e. inductive types generated by first-order signatures, see for example [22]), congruence types (an extension of algebraic pure type systems in which data come equipped with an elimination principle, see <ref> [5] </ref>). . . However, we feel more enclined to focus on two important problems which remain unsolved: there is no direct proof of subject reduction in algebraic pure type systems. This is a serious drawback of the framework which we hope could be remedied.
Reference: 6. <editor> M. Bezem and J.F. Groote, editors. </editor> <booktitle> Proceedings of TLCA, volume 664 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: 7. <author> V. Breazu-Tannen. </author> <title> Combining algebra and higher-order types. </title> <booktitle> In Proceedings of LICS'88, </booktitle> <pages> pages 82-90. </pages> <publisher> IEEE Press, </publisher> <year> 1988. </year>
Reference-contexts: As a corollary, we obtain a new proof of strong normalisation for the algebraic calculus of constructions ([2] and <ref> [1, 7, 8, 18] </ref> for subsystems) and to our knowledge the first proof of strong normalisation for algebraic higher-order logic (the algebraic extension of HOL [13]) and the algebraic calculus of constructions with universes (with left-linear rewriting systems).
Reference: 8. <author> V. Breazu-Tannen and J. Gallier. </author> <title> Polymorphic rewriting conserves algebraic strong normalisation. </title> <journal> Theoretical Computer Science, </journal> <volume> 83 </volume> <pages> 3-28, </pages> <year> 1990. </year>
Reference-contexts: As a corollary, we obtain a new proof of strong normalisation for the algebraic calculus of constructions ([2] and <ref> [1, 7, 8, 18] </ref> for subsystems) and to our knowledge the first proof of strong normalisation for algebraic higher-order logic (the algebraic extension of HOL [13]) and the algebraic calculus of constructions with universes (with left-linear rewriting systems).
Reference: 9. <author> D. Dougherty. </author> <title> Adding algebraic rewriting to the untyped lambda calculus. </title> <journal> Information and Computation, </journal> <volume> 101 </volume> <pages> 251-267, </pages> <year> 1992. </year>
Reference: 10. <author> M. Fernandez. </author> <title> Modeles de calcul multiparadigmes fondes sur la reecriture. </title> <type> PhD thesis, </type> <institution> Universite Paris-Sud Orsay, </institution> <year> 1993. </year>
Reference-contexts: The presentation is deliberately non-conventional in some respects but has been chosen to give a clear presentation of the general schema of [18]. For examples and applications of the general schema, the reader is refered to <ref> [10, 18] </ref>. Let fl be a set. Elements of fl are called base data 2 . <p> Condition 2 is not essential but ensures that F (X 1 ; : : : ; X m ; t 1 ; : : : ; t n ) is rewritable in the sense of <ref> [10] </ref>. Note that as a consequence of the definition, F does not occur in any subterm of v of the form F (X 0 1 ; : : : ; X 0 m ; r 1 ; : : : ; r n ) except in head position.
Reference: 11. <author> M. Fernandez and J-P.Jouannaud. </author> <title> Modularity of termination of term-rewriting systems revisited. In Recent Trends in Data Type Specification, </title> <booktitle> volume 906 of Lecture Notes in Computer Science, </booktitle> <pages> pages 255-272, </pages> <year> 1994. </year>
Reference-contexts: In the second part, we give a model-construction for stratified algebraic pure type systems. Strong normalisation is derived easily from the model construction. 4.1 Strong normalisation of algebraic reduction Strong normalisation of algebraic reduction on legal terms can be established in a straightforward fashion by advocating modularity results from <ref> [11] </ref> for example. The technique is inspired from [4] and consists of viewing -calculus as an algebraic signature.
Reference: 12. <author> J. Gallier. </author> <title> On Girard's "candidats de reducibilite. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 123-203. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference: 13. <author> H. </author> <title> Geuvers. Logics and type systems. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, </institution> <year> 1993. </year>
Reference-contexts: As a corollary, we obtain a new proof of strong normalisation for the algebraic calculus of constructions ([2] and [1, 7, 8, 18] for subsystems) and to our knowledge the first proof of strong normalisation for algebraic higher-order logic (the algebraic extension of HOL <ref> [13] </ref>) and the algebraic calculus of constructions with universes (with left-linear rewriting systems). <p> The last section contains some final remarks about the work as well as directions for future research. We assume the reader to be reasonably familiar with pure type systems and their basic meta-theory, as presented for example in [3] or <ref> [13] </ref>. 2 Combining higher-order rewriting systems and pure type systems 2.1 Higher-order rewriting systems In this section, we introduce higher-order rewriting systems. The presentation is deliberately non-conventional in some respects but has been chosen to give a clear presentation of the general schema of [18]. <p> Note that the definition implicitely requires the algebraic pure type system to be functional in the sense of <ref> [13] </ref> (such systems are called singly-sorted in [3]). This is not a real restriction as one can hardly imagine a non-functional pure type system of interest. Definition 6 Let V be an arbitrary infinite set.
Reference: 14. <author> H. </author> <title> Geuvers. A short and flexible proof of strong normalisation for the calculus of constructions. </title> <booktitle> In Proceedings of TYPES'94, Lecture Notes in Computer Science, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference: 15. <author> H. Geuvers and B. Werner. </author> <title> On the Church-Rosser property for expressive type systems and its consequence for their metatheoretic study. </title> <booktitle> In Proceedings of LICS'94, </booktitle> <pages> pages 320-329. </pages> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Finally, note that we know that conversion paths in derivations go through legal terms even if we do not know subject reduction: this is enforced by the expansion/reduction rule. This restrictive rule ensures that the very basic property of soundness, as defined in <ref> [15] </ref>, holds. In order to have a standard presentation of the results in this paper, we introduce the following terminology. Definition 8 An algebraic pure type system S = (R; S; sortax; rules; datax) is R-confluent (resp. R-terminating, resp.
Reference: 16. <author> J-Y. Girard. </author> <title> Interpretation fonctionelle et elimination des coupures dans l'arithmetique d'ordre superieur. </title> <type> PhD thesis, </type> <institution> Universite Paris 7, </institution> <year> 1972. </year>
Reference: 17. <author> H.Geuvers and M-J. Nederhof. </author> <title> A modular proof of strong normalisation for the calculus of constructions. </title> <journal> Journal of Functional Programming, </journal> <volume> 1 </volume> <pages> 155-189, </pages> <year> 1991. </year>
Reference: 18. <author> J-P. Jouannaud and M. Okada. </author> <title> Executable higher-order algebraic specification languages. </title> <booktitle> In Proceedings of LICS'91, </booktitle> <pages> pages 350-361. </pages> <publisher> IEEE Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Algebraico-functional languages, introduced by Jouannaud and Okada in <ref> [18] </ref>, are based on a very powerful paradigm combining type theory and higher-order rewriting systems. These languages embed in typed -calculi higher-order rewriting and hence allow the definition of abstract data types as it is done in equational languages such as OBJ. <p> The combination is based on pure type systems ([3]); the result is a very general framework of algebraic pure type systems which covers in particular the systems of the algebraic -cube, a generalisation of Barendregt's cube studied in <ref> [2, 18] </ref>. A particular interest of the framework is that it offers the possibility to initiate a generic study of the meta-theory of these systems. First, basic meta-theoretic results, such as the substitution lemma or the generation lemma ([3, 13]) can be proved for arbitrary algebraic pure type systems. <p> As a corollary, we obtain a new proof of strong normalisation for the algebraic calculus of constructions ([2] and <ref> [1, 7, 8, 18] </ref> for subsystems) and to our knowledge the first proof of strong normalisation for algebraic higher-order logic (the algebraic extension of HOL [13]) and the algebraic calculus of constructions with universes (with left-linear rewriting systems). <p> The presentation is deliberately non-conventional in some respects but has been chosen to give a clear presentation of the general schema of <ref> [18] </ref>. For examples and applications of the general schema, the reader is refered to [10, 18]. Let fl be a set. Elements of fl are called base data 2 . <p> The presentation is deliberately non-conventional in some respects but has been chosen to give a clear presentation of the general schema of [18]. For examples and applications of the general schema, the reader is refered to <ref> [10, 18] </ref>. Let fl be a set. Elements of fl are called base data 2 . <p> all pseudo-terms t 1 ; : : : ; t n , t i 2 SN (oe i ) for i = 1; : : : ; n ) f (t 1 ; : : : ; t n ) 2 SN (o ) The proof is an adaptation of <ref> [18, 1] </ref>. This key fact ensures that the model construction for algebraic pure type systems can be carried out in exactly the same way as for pure type systems.
Reference: 19. <author> Z. Luo. </author> <title> Computation and Reasoning: A Type Theory for Computer Science. </title> <booktitle> Number 11 in International Series of Monographs on Computer Science. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Here we consider a slightly different notion of saturated sets, more adapted to our framework: we define saturated sets as sets of pseudo-terms rather than sets of -terms. This is not really important but makes the proof slightly more elegant. Moreover, we consider typed saturated sets as in <ref> [19, 24] </ref> rather than untyped saturated sets. This means that the notion of saturated sets is defined relative to a set of pseudo-terms. <p> A similar technique applies to algebraic higher-order logic. For the algebraic calculus of constructions with universes, the proof is more involved and requires a quasi-normalisation argument, as developed in <ref> [19] </ref>. The quasi-normalisation theorem shows that every type has a weak head normal form. This enables us to give a measure on types.
Reference: 20. <author> A. Middeldorp. </author> <title> Modular properties of term rewriting systems. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1990. </year>
Reference-contexts: Second, one can address modularity results in a very abstract way, as it has been successfully done in term-rewriting (some striking examples can be found in <ref> [20, 25] </ref>). The main contribution of this paper is to give a general criterion for an algebraic pure type system to be strongly normalising.
Reference: 21. <author> F. Muller. </author> <title> Confluence of the lambda calculus with left-linear algebraic rewriting. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 293-299, </pages> <year> 1992. </year>
Reference-contexts: For such systems, the combined reduction is confluent on the set of pseudo-terms of the algebraic pure type system (this follows from <ref> [21] </ref>). We want to close this section by making a few remarks about the generality of the criterion. The criterion is not as general as it could seem.
Reference: 22. <author> C. Paulin-Mohring. </author> <title> Inductive definitions in the system Coq. Rules and properties. </title> <booktitle> In Bezem and Groote [6], </booktitle> <pages> pages 328-345. </pages>
Reference-contexts: It would be interesting to extend the present work to more powerful type systems: possible extensions to be considered are first-order inductive types (i.e. inductive types generated by first-order signatures, see for example <ref> [22] </ref>), congruence types (an extension of algebraic pure type systems in which data come equipped with an elimination principle, see [5]). . . However, we feel more enclined to focus on two important problems which remain unsolved: there is no direct proof of subject reduction in algebraic pure type systems.
Reference: 23. <author> W. Tait. </author> <title> A realisability interpretation of the theory of species. </title> <editor> In R. Parikh, editor, </editor> <booktitle> Logic Colloquium 73, volume 453 of Lectures Notes in Mathematics, </booktitle> <pages> pages 240-251, </pages> <year> 1975. </year>
Reference: 24. <author> J. Terlouw. </author> <title> Strong normalisation in type systems: a model-theoretical approach. </title> <booktitle> In Dirk van Dalen Festschrift, </booktitle> <pages> pages 161-190. </pages> <institution> University of Utrecht, </institution> <year> 1993. </year> <note> To appear in Annals of Pure and Applied Logic. </note>
Reference-contexts: Definition 8 An algebraic pure type system S = (R; S; sortax; rules; datax) is R-confluent (resp. R-terminating, resp. R-canonical) if all its rewriting systems are confluent (resp. terminating, resp. canonical). 3 A criterion for strong normalisation In <ref> [24] </ref>, Terlouw gives a general criterion for a type system to be strongly nor-malising. We adapt his criterion to pure type systems and give an equivalent criterion in terms of algebraic pure type systems with labelled variables. <p> The construction is based on saturated sets and is a generalisation of strong normalisation proofs for pure type systems, such as the polymorphic -calculus ([16, 23, 12]) or the calculus of constructions ([14, 24]). The model is heavily inspired by <ref> [24] </ref>. Before giving a proof of Theorem 18, we need some preliminaries on saturated sets. Saturated sets Traditionally, saturated sets are defined as sets of fi-strongly normalisable untyped -terms. <p> Here we consider a slightly different notion of saturated sets, more adapted to our framework: we define saturated sets as sets of pseudo-terms rather than sets of -terms. This is not really important but makes the proof slightly more elegant. Moreover, we consider typed saturated sets as in <ref> [19, 24] </ref> rather than untyped saturated sets. This means that the notion of saturated sets is defined relative to a set of pseudo-terms.
Reference: 25. <author> Y. Toyama. </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 128-143, </pages> <year> 1987. </year>
Reference-contexts: Second, one can address modularity results in a very abstract way, as it has been successfully done in term-rewriting (some striking examples can be found in <ref> [20, 25] </ref>). The main contribution of this paper is to give a general criterion for an algebraic pure type system to be strongly normalising.
Reference: 26. <author> L. van Benthem Jutting, J. McKinna, and R. Pollack. </author> <title> Checking algorithms for pure type systems. </title> <editor> In H. Barendregt and T. Nipkow, editors, </editor> <booktitle> Proceedings of TYPES'93, volume 806 of Lecture Notes in Computer Science, </booktitle> <pages> pages 19-61. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 26

