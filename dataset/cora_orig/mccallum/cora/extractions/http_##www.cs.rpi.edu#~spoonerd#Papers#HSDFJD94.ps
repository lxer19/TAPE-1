URL: http://www.cs.rpi.edu/~spoonerd/Papers/HSDFJD94.ps
Refering-URL: http://www.cs.rpi.edu/~spoonerd/
Root-URL: http://www.cs.rpi.edu
Title: A STEP Entity Control System for Concurrent Engineering  
Author: Martin Hardwick David L. Spooner Blair Downie Michael Ferris Zhiwei Jiang Thomas DeWeese 
Address: Troy, New York 12180  
Affiliation: Computer Science Department and Design and Manufacturing Institute Rensselaer Polytechnic Institute  
Abstract: This paper discusses the architecture of the SECS/CE system, the basic and advanced version control functionality it provides, and the graphical tools and libraries that are under development to aid the process of identifying and resolving conflicts between versions. 
Abstract-found: 1
Intro-found: 1
Reference: [Bat85] <author> D. Batory and W. Kim, </author> <title> "Modeling Concepts for VLSI CAD Objects", </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 10, No. 3, </volume> <month> September </month> <year> 1985, </year> <pages> pp. 322-346. </pages>
Reference-contexts: They are not well suited for enterprise-wide networks in which multiple engineers must work on a design concurrently. SECS/CE also builds on prior work in management of design versions, such as Katz [Kat85], Batory and Kim <ref> [Bat85] </ref>, and Dittrich and Lorie [Dit88], and on cooperative work technology, such as the MONET system at the Concurrent Engineering Research Center [Kan92]. Finally, the SECS/CE system is relevant to standards initiatives for design and manufacturing systems.
Reference: [Dit88] <author> K. Dittrich and R. Lorie, </author> <title> "Version Support for Engineering Database Systems", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 4, </volume> <month> April </month> <year> 1988. </year>
Reference-contexts: They are not well suited for enterprise-wide networks in which multiple engineers must work on a design concurrently. SECS/CE also builds on prior work in management of design versions, such as Katz [Kat85], Batory and Kim [Bat85], and Dittrich and Lorie <ref> [Dit88] </ref>, and on cooperative work technology, such as the MONET system at the Concurrent Engineering Research Center [Kan92]. Finally, the SECS/CE system is relevant to standards initiatives for design and manufacturing systems.
Reference: [Fis87] <author> D. Fishman, et. al., </author> <title> "Iris: An ObjectOriented Database Management System", </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol. 5, No. 1, </volume> <month> January </month> <year> 1987, </year> <pages> pp. 48-69. </pages>
Reference-contexts: Related Work The SECS/CE system builds on objectoriented database technology and extends it with appropriate functionality for concurrent engineering. Many commercial and experimental objectoriented database systems support fine-grained transaction control (e.g., ORION [Kim89], IRIS <ref> [Fis87] </ref>, and ZEITGEIST [For88]). These systems assume that all parts of a database can be reached from a central node that manages the locks needed to implement transaction control.
Reference: [For88] <author> S. Ford, J. Joseph, D. Langworthy, D. Lively, G. Pathak, E. Perez, R. Peterson, D. Sparacin, S. Thatte, D. Wells, and S. Agarwala, "ZEITGEIST: </author> <title> Database Support for ObjectOriented Programming", Advances in ObjectOriented Database Systems, </title> <editor> editor K. Dittrich, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 23-42. </pages>
Reference-contexts: Related Work The SECS/CE system builds on objectoriented database technology and extends it with appropriate functionality for concurrent engineering. Many commercial and experimental objectoriented database systems support fine-grained transaction control (e.g., ORION [Kim89], IRIS [Fis87], and ZEITGEIST <ref> [For88] </ref>). These systems assume that all parts of a database can be reached from a central node that manages the locks needed to implement transaction control. Such systems are well suited for local area networks and for projects in which only one engineer works on a design at a time.
Reference: [Har94] <author> M. Hardwick, B. Downie, M. Kutcher and D. Spooner, </author> <title> "Using Delta Files to Implement Concurrent Engineering: The Results of an Experiment," accepted for publication in Computer Graphics and Applications, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year> <title> [ISO92a] "Industrial Automation Systems - Product Data Representation and Exchange - Part 1: Overview and Fundamental Principles," ISO DIS 10303-1, Draft International Standard, 1992. [ISO92b] "Industrial Automation Systems and Integration - Product Data Representation and Exchange - Part 11: Description Methods: The EXPRESS Language Reference Manual," ISO DIS 10303-11 Draft International Standard, </title> <year> 1992. </year>
Reference-contexts: Developing the graphics libraries and tools to do this is the second goal of the SECS/CE system. Initial experience in using basic change processing functionality for concurrent engineering is described in <ref> [Har94] </ref>. 4. Related Work The SECS/CE system builds on objectoriented database technology and extends it with appropriate functionality for concurrent engineering. Many commercial and experimental objectoriented database systems support fine-grained transaction control (e.g., ORION [Kim89], IRIS [Fis87], and ZEITGEIST [For88]). <p> Two techniques are being investigated to facilitate the process of finding and resolving conflicts between versions for a design. The first of these techniques involves special-purpose tools to display conflicts between versions to an engineer. For an example of such a tool, see <ref> [Har94] </ref>. This technique works well for designs that are described by common information models such as those in the STEP standard. The disadvantage of this technique is that it is a labor intensive approach and is only appropriate for the most common EXPRESS models. <p> Status and Plans Currently, the basic version control functionality as described above is operational and preliminary versions of the diff, sed and repair tools exist for the advanced version control functionality. Special-purpose tools for highlighting conflicts between versions have been developed for a few demonstrations <ref> [Har94] </ref>; however, no work has yet been done to develop libraries of general-purpose functions to facilitate the development of such tools. Future work will be focused in three general areas as follows: Development and evaluation of the advanced version control functionality to produce a robust system for merging versions.
Reference: [Kan92] <author> S. Kankanahalli, "MONET: </author> <title> A Multimedia System for Conferencing and Application Sharing in Distributed Systems," </title> <booktitle> First Workshop on Enabling Technologies for Concurrent Engineering, </booktitle> <institution> CERC, West Virginia University, </institution> <year> 1992. </year>
Reference-contexts: SECS/CE also builds on prior work in management of design versions, such as Katz [Kat85], Batory and Kim [Bat85], and Dittrich and Lorie [Dit88], and on cooperative work technology, such as the MONET system at the Concurrent Engineering Research Center <ref> [Kan92] </ref>. Finally, the SECS/CE system is relevant to standards initiatives for design and manufacturing systems. These initiatives can be divided into standards for objectoriented database systems and standards for next generation design and manufacturing systems.
Reference: [Kat85] <author> R. Katz, </author> <title> "Information Management for Engineering Design", Springer-Verlag, </title> <booktitle> Surveys in Computer Science, </booktitle> <address> Heidelberg, </address> <year> 1985. </year>
Reference-contexts: They are not well suited for enterprise-wide networks in which multiple engineers must work on a design concurrently. SECS/CE also builds on prior work in management of design versions, such as Katz <ref> [Kat85] </ref>, Batory and Kim [Bat85], and Dittrich and Lorie [Dit88], and on cooperative work technology, such as the MONET system at the Concurrent Engineering Research Center [Kan92]. Finally, the SECS/CE system is relevant to standards initiatives for design and manufacturing systems.
Reference: [Kim89] <author> W. Kim, et. al., </author> <title> "Features of the ORION Object-Oriented Database System", ObjectOriented Concepts, Databases, and Applications, edited by W. </title> <editor> Kim and F. Lochovsky, </editor> <publisher> ACM Press, Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Initial experience in using basic change processing functionality for concurrent engineering is described in [Har94]. 4. Related Work The SECS/CE system builds on objectoriented database technology and extends it with appropriate functionality for concurrent engineering. Many commercial and experimental objectoriented database systems support fine-grained transaction control (e.g., ORION <ref> [Kim89] </ref>, IRIS [Fis87], and ZEITGEIST [For88]). These systems assume that all parts of a database can be reached from a central node that manages the locks needed to implement transaction control.
Reference: [Roc75] <author> M. Rochkink, </author> <title> "The Source Code Control System," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 1, No. 4, </volume> <month> December </month> <year> 1975, </year> <pages> pp. 364-370. </pages>
Reference-contexts: The SECS/CE system is best viewed as consisting of three major pieces: basic version control, advanced version control supporting merging of versions, and graphical tools and libraries for conflict detection and resolution. The base line for the SECS/CE system is SCCS <ref> [Roc75] </ref> and other similar archive and version control systems for ASCII files. The SECS/CE system extends these systems by using the EXPRESS language of the STEP standard to model the contents of a design for the purposes of merging versions and detecting conflicts between versions.
Reference: [Sch94] <author> D. A. Schenck and P. R. Wilson, </author> <title> "Information Modeling the EXPRESS Way," </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Using SECS/CE, engineers communicate their changes to other engineers electronically, identify conflicts, resolve those conflicts and collaboratively work to produce new design versions more quickly. SECS/CE is able to provide these facilities because it uses the EXPRESS <ref> [ISO92b, Sch94] </ref> language of the STEP [ISO92a] standard to model the contents of a data set for a design version. The use of this language allows SECS/CE to interpret the contents of design data sets, unlike traditional archive and version control systems that treat these data sets as "black boxes".
Reference: [Smi88] <author> B. Smith, G. Rinaudot, T. Wright and K. Reed, </author> <title> Initial Graphics Exchange Specification (IGES) Version 4.0, NTIS order number PB 88-235452, </title> <year> 1988. </year>
Reference-contexts: The current version of the tool kit allows an application programmer to load STEP-compliant data into C++ application programs, ORACLE relational databases and several commercial objectoriented database systems. The tool kit reads and writes IGES <ref> [Smi88] </ref> and AUTOCAD DXF data and loads it into any of these other applications and databases.
Reference: [Spo93] <author> D. Spooner and M. Hardwick, </author> <title> "Using Persistent Object Technology to Support Concurrent Engine ering Syste ms," in Concurre nt Engineering, </title> <editor> editors P. Gu and A. Kusiak, </editor> <publisher> Elsevier Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: However, the ROSE system and the STEP Programmer's Tool Kit are based on the philosophy that to successfully support concurrent engineering, it is necessary to allow engineers to edit their own versions of designs concurrently, and then to provide tools to assist in the process of merging the versions <ref> [Spo93] </ref>. As a result, these two systems include a delta file mechanism for capturing the changes made to a version of a design and a tool for applying the changes from a delta file to another version of the design.
References-found: 12

