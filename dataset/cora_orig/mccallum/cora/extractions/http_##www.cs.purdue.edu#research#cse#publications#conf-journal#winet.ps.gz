URL: http://www.cs.purdue.edu/research/cse/publications/conf-journal/winet.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Email: E-mail: fttd,saw,joshi,raw,enhg@cs.purdue.edu  
Title: Software Architecture of Ubiquitous Scientific Computing Environments for Mobile Platforms  
Author: Tzvetan T. Drashansky, Sanjiva Weerawarana, Anupam Joshi, Ranjeewa A. Weerasinghe and Elias N. Houstis 
Keyword: Ubiquitous Computing, Scientific Computing, Problem Solving Environments.  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Recent and anticipated technological advances in wireless computing will permit users to compute ubiquitously, "anywhere" and "any time." However, mobile platforms are unlikely to have the computational resources to solve even moderately complex problems that users routinely solve on static workstations today. In the SciencePad project our aim is to develop "ubiquitous" problem solving environments (UPSEs) to support mobile aware applications. The objective of this paper is to address the architectural design of UPSEs on wireless notebook platforms supported by stationary compute servers over low bandwidth connections. There is extensive literature dealing with networking and data management issues in mobile computing. However, we address design issues at several layers of the mobile system. The resulting architecture uses a proxy-based methodology to partition the application components across the dual (wireless and stationary) network of computational units and build a distributed PSE architecture. Our architecture uses parameterized objects and templates, lazy evaluation, and also deals with fuzzy and unstructured I/O. We articulate the general principal of the architecture in the context of scientific computing, which provides us with a complex, real world application scenario. It also allows us to build on our previous work on various aspects of PSEs for scientific computing. Our architecture is currently being validated by building a ubiquitous version of PDELab (a scientific computing package) on a two mega-bit wireless Ethernet network of notebook platforms and heterogeneous parallel machines. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Athan and D. Duchamp, </author> <title> Agent-Mediated Message Passing for Constrained Environments, </title> <booktitle> Proc. Mobile and Location-Independent Computing (Cambridge, </booktitle> <address> MA), </address> <publisher> USENIX, </publisher> <month> August </month> <year> 1993, </year> <pages> pp. 103-107. </pages>
Reference-contexts: There has not been any work that directly addresses the problems involved in making a complex, heterogeneous computational system accessible from mobile platforms. However, there are several interesting projects, some ongoing, which are related to this task. Duchamp et. al. <ref> [45, 1] </ref> have proposed the notion of introducing a proxy between the mobile client and the servers on the wired network, which delays writing 2 out all but the most important data. In [38] they show its use in creating a lazy replicated file service.
Reference: [2] <author> J. L. Bentley, M. F. Fernandez, B. W. Kernighan, and N. L. Schryer, </author> <title> Template-Driven Interfaces for Numerical Subroutines, </title> <journal> ACM Trans. Math. Soft. </journal> <volume> 19 (1993), no. 3, </volume> <pages> 265-287. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [7, 32, 44, 2, 10] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [3] <institution> UC Berkeley, The InfoPad Project, </institution> <note> http://infopad.eecs.berkeley.edu/. </note>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols <ref> [3, 30, 29, 5] </ref>, networking (including mobile IP) [16, 18, 39, 36, 35] or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. <p> An important feature of our work is that it deals with computing in the mobile context. Most extant application level work has only dealt with applications that relate to information access <ref> [3, 34, 21] </ref>. In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain. <p> However, their system is based on Mach. Similar ideas, without the constraint of a particular OS choice, have been presented in our work on the theme of disconnected browsing [28, 24] however, they are specific to information access. Information access is also the theme of the Infopad <ref> [3] </ref> project. In the aspects of this project which relate to our present work, the idea is basically to create a "type server" for every possible type of application that runs on the network and needs to communicate with the pad.
Reference: [4] <author> T. Berners-Lee, R. Cailliau, J.-F. Groff, and B. Pollermann, </author> <title> World Wide Web: The Information Universe, </title> <journal> Electronic Networking: Research, Applications, and Policy 2 (1992), </journal> <volume> no. 1, </volume> <pages> 52-58. </pages>
Reference-contexts: Besides being concentrated in traditional repositories such as libraries, such information is also increasingly distributed, residing in workstations and computers belonging to individual researchers or research groups, and linked together to form a docuverse <ref> [4, 6] </ref>. The World Wide Web (WWW, Web) is an example of such a scenario. The fact that some of the citations that you will see in this paper are to Web documents is eloquent testimony to the fact.
Reference: [5] <author> P. P. Bhattacharya, L. Georgiadis, and A. Krishna, </author> <title> Distributed Channel Allocation for PCN with Bursty Traffic, </title> <booktitle> Proc. of the 14th Annual Joint Conf. of the IEEE Computer and Communication Societies, </booktitle> <volume> vol. 1, </volume> <publisher> IEEE, </publisher> <year> 1995, </year> <pages> pp. 113-120. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols <ref> [3, 30, 29, 5] </ref>, networking (including mobile IP) [16, 18, 39, 36, 35] or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms.
Reference: [6] <author> CERN, </author> <title> How to Put Your Data on the Web, </title> <address> (http://info.cern.ch/hypertext/WWW/Provider/ Overview.html), </address> <year> 1994. </year>
Reference-contexts: Besides being concentrated in traditional repositories such as libraries, such information is also increasingly distributed, residing in workstations and computers belonging to individual researchers or research groups, and linked together to form a docuverse <ref> [4, 6] </ref>. The World Wide Web (WWW, Web) is an example of such a scenario. The fact that some of the citations that you will see in this paper are to Web documents is eloquent testimony to the fact.
Reference: [7] <author> H. R. Cho and S. Moon, CADTM. </author> <title> A Database Transaction Manager for Coordinating Design Activities in CAD Environments, </title> <journal> Microprocessing and Microprogramming 37 (1993), </journal> <volume> no. </volume> <pages> 1-5, 115-118. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [7, 32, 44, 2, 10] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [8] <author> T. Drashansky, A. Joshi, and J.R. Rice, </author> <title> SciAgents AnAgent Based Environment for Distributed, </title> <booktitle> Cooperative Scientific Computing, Proc. 7th Intl. Conf. Tools with Artificial Intelligence (Los Alamitos, </booktitle> <address> CA), </address> <publisher> IEEE Computer Soc., </publisher> <year> 1995, </year> <pages> pp. 452-459. </pages>
Reference-contexts: In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain. From a mobile computing perspective, the computationally intense nature and size of scientific computing tasks requires that distributed problem solving <ref> [31, 8] </ref> be the operating paradigm, which also leads to a complex system. Distributed problem solving refers to a computing technique which relies on different parts of the problem being solved on separate (perhaps heterogeneous) platforms, with much interaction between these parts during the solution process. <p> In the rest of this paper, we will be describing our work in the context of a scientific computing system, specifically one that solves partial differential equations (PDEs). In our previous work in the domain of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 8, 13, 41] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system. <p> They will create and use different objects, storing them in separate databases controlled by different OMs. SciencePad allows the applications to use objects from different database while communicating with one OM. To do this, we employ the approach of cooperative interacting agents described in <ref> [8, 20] </ref>. When an OM is asked for a representation of an object it does not posses, it interacts with the other OMs that it knows of and, if the representation (the object) is found, transfers it in its database and delivers it to the application. <p> We describe next the second type of templates which we use to transfer a large PSO representation in a relatively short message. 4.3.2 Communicating and Evaluating S-KIF Programs The second approach defines the templates as S-KIF <ref> [8] </ref> programs or program specifications. These templates are to be used in communications between the proxy of an agent (a tool, for example) and its static end, as well as when different OM agents exchange representations of objects among themselves.
Reference: [9] <author> A. Elmagarmid, J. Jing, and O. Bukhres, </author> <title> An Efficient and Reliable Reservation Algorithm for Mobile Transactions, </title> <type> Tech. Report TR-95-018, </type> <institution> Dept. of Computer Sciences, Purdue University, </institution> <year> 1995. </year> <month> 20 </month>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) [16, 18, 39, 36, 35] or data management <ref> [17, 9] </ref>. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [10] <author> A. K. Elmagarmid, J. Chen, W. Du, O. Bukhres, and R. Pezzoli, </author> <title> Interbase: an Execution Environment for Global Applications Over Distributed, Autonomous and Heterogeneous Software Systems, </title> <type> Tech. Report TR-92-016, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1992. </year>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [7, 32, 44, 2, 10] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [11] <author> E. Gallopoulos, E. N. Houstis, and J. R. Rice, </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science, </title> <journal> IEEE Computational Science and Engineering 1 (1994), </journal> <volume> no. 2, </volume> <pages> 11-23. </pages>
Reference-contexts: In the rest of this paper, we will be describing our work in the context of a scientific computing system, specifically one that solves partial differential equations (PDEs). In our previous work in the domain of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 8, 13, 41] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system.
Reference: [12] <author> D. E. Hall, W. H. Creiman, W. F. Johnston, A. X. Merola, S. C. Loken, and D. W. Robertson, </author> <title> The software bus: A vision for scientific software development, </title> <journal> Computer Physics Communications 57 (1989), </journal> <pages> 211-216. </pages>
Reference-contexts: The underlying communication fabric in PPK that supports this is based on the software bus <ref> [12, 37] </ref> model. The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine.
Reference: [13] <author> C. M. Hoffmann, E. N. Houstis, J. R. Rice, A. C. Catlin, M. Gaitatzes, S. Weerawarana, N.-H. Wang, C. Takoudis, and D. Taylor, </author> <title> Softlab a virtual laboratory for computational science, Math. </title> <booktitle> Comp. in Simulation 36 (1994). </booktitle>
Reference-contexts: In the rest of this paper, we will be describing our work in the context of a scientific computing system, specifically one that solves partial differential equations (PDEs). In our previous work in the domain of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 8, 13, 41] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system.
Reference: [14] <author> E. Houstis, S. Weerawarana, A. Joshi, and J. R. Rice, </author> <title> The PYTHIA project, Neural, Parallel, </title> <editor> and Scientific Computations (S. K. Aityan et al., ed.), </editor> <publisher> Dynamic Pub., </publisher> <year> 1995, </year> <pages> pp. 215-218. </pages>
Reference-contexts: In order to intelligently manage the distribution of computations between the mobile platform and the stationary machine, we use a knowledge based environment we have developed for this purpose <ref> [14, 25] </ref>. The PYTHIA system uses the knowledge it has about previously seen computations as a basis for predicting the execution profile of a computation about to be scheduled. <p> The PYTHIA system described earlier <ref> [14, 25] </ref> is capable of deriving these parameters automatically by consulting its database of known problems and obtaining conclusions based on previous cases. More details about PYTHIA can be found in [23]. Consider a few examples with PSOs and their instances from PDELab.
Reference: [15] <author> E. N. Houstis, A. Joshi, M. Atallah, S. Weerawarana, and A. Elmagarmid, </author> <title> Internet, Education, and the Web, </title> <booktitle> Proc. Distant Learning Workshop, IEEE WET ICE'96, IEEE, </booktitle> <year> 1996. </year>
Reference-contexts: This work is currently being validated by building a UPDELab, an ubiquitous version of our PDELab [41] PSE. We are also using it in developing an electronic classroom <ref> [15] </ref>, where students have wirelessly connected laptops. This document is organized as follows: Section 2 presents an overview of our previous work on software architectures for PSEs on high performance platforms.
Reference: [16] <author> IETF, </author> <title> Mobility Support for IP v.4 Protocol Draft, </title> <publisher> v.12, ftp://ds.internic.net/internet-drafts/draft-ietf-mobileip-protocol-12.txt. </publisher>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) <ref> [16, 18, 39, 36, 35] </ref> or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [17] <author> T. Imielinski and B. R. Bandrinath, </author> <title> Mobile Wireless Computing: Challenges in Data Management, </title> <journal> Comm. ACM 37 (1994), </journal> <volume> no. 10, </volume> <pages> 18-28. </pages>
Reference-contexts: It will, in the near future, engender a continuous interaction between people and interconnected computers using wireless devices. This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [42, 17, 27, 43] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power. <p> In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) [16, 18, 39, 36, 35] or data management <ref> [17, 9] </ref>. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [18] <author> J. Ioanidis, D. Duchamp, and G. Q. Maquire Jr., </author> <title> IP Based Protocols for Mobile Internetworking, </title> <booktitle> Proc. of SIGCOM'91, ACM, </booktitle> <month> Sep </month> <year> 1991, </year> <pages> pp. 235-245. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) <ref> [16, 18, 39, 36, 35] </ref> or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [19] <author> A. D. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and M. F. Kaashoek, </author> <title> Rover: A Toolkit for Mobile Information Access, </title> <booktitle> Proc. 15th Symposium on Operating Systems Principles, ACM, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: These servers, however, deal with I/O modalities and not with ways to manage the data communication between the mobile and static systems. The Rover <ref> [19] </ref> system from MIT tries to address the mobility problems by providing replicated dynamic objects and a queued RPC requests model. However, their model involves objects being transmitted over the wireless network.
Reference: [20] <author> A. Joshi, </author> <title> To Learn or Not to Learn ..., Adaptation and Learning in Multiagent Systems (G. </title> <editor> Weiss and S. Sin, eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> vol. 1042, </volume> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: They will create and use different objects, storing them in separate databases controlled by different OMs. SciencePad allows the applications to use objects from different database while communicating with one OM. To do this, we employ the approach of cooperative interacting agents described in <ref> [8, 20] </ref>. When an OM is asked for a representation of an object it does not posses, it interacts with the other OMs that it knows of and, if the representation (the object) is found, transfers it in its database and delivers it to the application.
Reference: [21] <author> A. Joshi, R. A. Weerasinghe, S. McDermott, B. Tan, G. Bernhardt, and S. Weerawarana, Mowser: </author> <title> Mobile Platforms and Web Browsers, </title> <booktitle> Bulletine of the IEEE TCOS 8 (1996), </booktitle> <volume> no. 1. </volume> <pages> 21 </pages>
Reference-contexts: An important feature of our work is that it deals with computing in the mobile context. Most extant application level work has only dealt with applications that relate to information access <ref> [3, 34, 21] </ref>. In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain.
Reference: [22] <author> A. Joshi, S. Weerawarana, T. T. Drashansky, and E. N. Houstis, SciencePad: </author> <title> An Intelligent Electronic Notepad for Ubiquitous Scientific Computing, </title> <booktitle> Proc. of Intl. Conf. on Inteligent Information Management Systems, </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 107-110. </pages>
Reference-contexts: The World Wide Web (WWW, Web) is an example of such a scenario. The fact that some of the citations that you will see in this paper are to Web documents is eloquent testimony to the fact. The aim of our research in the SciencePad project <ref> [22] </ref> is the design and implementation of software environments that would allow users to not just fetch information but do useful computations from mobile platforms. Specifically, we envision a scientist or engineer will ubiquitously practice high performance scientific computing via mobile platforms.
Reference: [23] <author> A Joshi, S. Weerawarana, and E. N. Houstis, </author> <title> The Use of Neural Networks to Support Intelligent Scientific Computing, </title> <booktitle> Proc. IEEE Intl. Conf. Neural Networks, </booktitle> <publisher> IEEE, IEEE Press, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: The PYTHIA system described earlier [14, 25] is capable of deriving these parameters automatically by consulting its database of known problems and obtaining conclusions based on previous cases. More details about PYTHIA can be found in <ref> [23] </ref>. Consider a few examples with PSOs and their instances from PDELab. An input "Solve the modified Laplace equation on a square" is unambiguous since the keywords "Laplace", "modified", "square", "solve" can be interpreted in the following way.
Reference: [24] <author> A. Joshi, S. Weerawarana, and E. N. Houstis, </author> <title> On Mobile Systems and Disconnected Browsing of Distributed Information, </title> <type> Tech. Report TR-96-040, </type> <institution> Dept. of Computer Sciences, Purdue University, </institution> <year> 1996. </year>
Reference-contexts: In [38] they show its use in creating a lazy replicated file service. However, their system is based on Mach. Similar ideas, without the constraint of a particular OS choice, have been presented in our work on the theme of disconnected browsing <ref> [28, 24] </ref> however, they are specific to information access. Information access is also the theme of the Infopad [3] project.
Reference: [25] <author> A. Joshi, S. Weerawarana, E. N. Houstis, J. R. Rice, and N. Ramakrishnan, </author> <title> Neuro-Fuzzy Support for Problem Solving Environments, </title> <booktitle> IEEE Computational Science and Engineering 3 (1996), </booktitle> <pages> 44-56. </pages>
Reference-contexts: In order to intelligently manage the distribution of computations between the mobile platform and the stationary machine, we use a knowledge based environment we have developed for this purpose <ref> [14, 25] </ref>. The PYTHIA system uses the knowledge it has about previously seen computations as a basis for predicting the execution profile of a computation about to be scheduled. <p> The PYTHIA system described earlier <ref> [14, 25] </ref> is capable of deriving these parameters automatically by consulting its database of known problems and obtaining conclusions based on previous cases. More details about PYTHIA can be found in [23]. Consider a few examples with PSOs and their instances from PDELab.
Reference: [26] <author> A. Joshi, S. Weerawarana, R. A. Weerasinghe, T. T. Drashansky, N. Ramakrishnan, and E. N. Houstis, </author> <title> A Survey of Mobile Computing Technologies and Applications, </title> <type> Tech. Report TR-95-050, </type> <institution> Dept. of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: This is perhaps a major contributing factor to the relatively slow increase in their use, despite predictions to the contrary. Hithertofore, most research in the area of mobile computing has had a limited focus, choosing to address issues at lower levels of the OSI hierarchy. In a recent survey <ref> [26] </ref>, the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) [16, 18, 39, 36, 35] or data management [17, 9].
Reference: [27] <author> R. Katz, </author> <title> Adaptation and Mobility in Wireless Information Systems, </title> <journal> IEEE Personal Communications 1 (1994), </journal> <volume> no. 1, </volume> <pages> 6-17. </pages>
Reference-contexts: It will, in the near future, engender a continuous interaction between people and interconnected computers using wireless devices. This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [42, 17, 27, 43] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power.
Reference: [28] <author> R. Kavasseri, T. Keating, M. Wittman, A. Joshi, and S. Weerawarana, </author> <title> Web Intelligent Query Disconnected Web Browsing using Cooperative Techniques, </title> <booktitle> Proc. 1st. IFCIS Intl. Conf. on Cooperative Information Systems, </booktitle> <publisher> IEEE, IEEE Press, </publisher> <year> 1996, </year> <pages> pp. 167-174. </pages>
Reference-contexts: In [38] they show its use in creating a lazy replicated file service. However, their system is based on Mach. Similar ideas, without the constraint of a particular OS choice, have been presented in our work on the theme of disconnected browsing <ref> [28, 24] </ref> however, they are specific to information access. Information access is also the theme of the Infopad [3] project.
Reference: [29] <author> A. Krishna and R. O. LaMaire, </author> <title> Comparison of Radio Capture Models and Their Effect on Wireless LAN Protocols, </title> <booktitle> Proc. of the 1994 3rd Annual Intl. Conf. on Universal Personal Communications, IEEE, </booktitle> <year> 1994, </year> <pages> pp. 666-672. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols <ref> [3, 30, 29, 5] </ref>, networking (including mobile IP) [16, 18, 39, 36, 35] or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms.
Reference: [30] <author> R. O. LaMaire, A. Krishna, and H. Ahmadi, </author> <title> Analysis of a Wireless MAC Protocol with Client-Server Traffic and Capture, </title> <journal> IEEE Journal on Selected Areas in Communications 12 (1994), </journal> <volume> no. 8, </volume> <pages> 1299-1313. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols <ref> [3, 30, 29, 5] </ref>, networking (including mobile IP) [16, 18, 39, 36, 35] or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms.
Reference: [31] <author> V. R. Lesser, </author> <title> A Retrospective View of FA/C Distributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21 (1991), </journal> <volume> no. 6, </volume> <pages> 1347-1363. </pages>
Reference-contexts: In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain. From a mobile computing perspective, the computationally intense nature and size of scientific computing tasks requires that distributed problem solving <ref> [31, 8] </ref> be the operating paradigm, which also leads to a complex system. Distributed problem solving refers to a computing technique which relies on different parts of the problem being solved on separate (perhaps heterogeneous) platforms, with much interaction between these parts during the solution process.
Reference: [32] <author> R. Marin, M. Taboada, G. Mourino, F. Soria, J. Mira, and A. Delgado, </author> <title> Asynchronous Dialogue Control in a Medical Graphic Interface, </title> <journal> Cybernetics and Systems 23 (1992), </journal> <volume> no. </volume> <pages> 3-4, 271-284. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [7, 32, 44, 2, 10] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [33] <author> A. Myles and D. Skellern, </author> <title> Comparison of Mobile Host Protocols for IP, Internetworking: </title> <booktitle> Reserch and Experience 4 (1993), </booktitle> <pages> 175-194. </pages>
Reference-contexts: For applications to truly thrive in this environment, they must be mobile aware at all levels. A similar position was articulated as early as 1993 by Myles and Skellern <ref> [33] </ref>. More recently, Sathyanarayan et. al. have argued for applications to cooperate with lower layers of the (operating) system to achieve mobility. Our architecture deals with issues that arise in upper layers, and assumes that appropriate networking and data management services are available from lower layers.
Reference: [34] <institution> Univesity of Washington, The Mobisaic Project, </institution> <note> http://www.cs.washington.edu/homes/voelker/mobisaic/mobisaic.html. 22 </note>
Reference-contexts: An important feature of our work is that it deals with computing in the mobile context. Most extant application level work has only dealt with applications that relate to information access <ref> [3, 34, 21] </ref>. In the context of scientific computing, the factors characterizing mobile computing (e.g. bandwidth, memory, power, interfaces) add a further layer of complexity to an already complex domain.
Reference: [35] <author> B. V. Patel, P. Bhattacharya, Y. Rekhter, and A. Krishna, </author> <title> Archtecture and Implementation Toward Multiprotocol Mobility, </title> <journal> IEEE Personal Communications 2 (1995), </journal> <volume> no. 3, </volume> <pages> 32-42. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) <ref> [16, 18, 39, 36, 35] </ref> or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [36] <author> C. Perkins and Y. Rekhter, </author> <title> Short-Cut Routing for Mobile Hosts, </title> <booktitle> Work in Progress, </booktitle> <year> 1992. </year>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) <ref> [16, 18, 39, 36, 35] </ref> or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [37] <author> J. M. Purtilo, </author> <title> The polylith software bus, </title> <journal> ACM Transactions on Programming Languages and Systems 16 (1994), </journal> <volume> no. 1, </volume> <pages> 151-174. </pages>
Reference-contexts: The underlying communication fabric in PPK that supports this is based on the software bus <ref> [12, 37] </ref> model. The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine.
Reference: [38] <author> C. Tait and D. Duchamp, </author> <title> An Interface to Support Lazy Replicated File Service, </title> <booktitle> Proc. Second Workshop on Management of Replicated Data (Monterey, </booktitle> <address> CA), </address> <publisher> IEEE, </publisher> <month> November </month> <year> 1992, </year> <pages> pp. 6-8. </pages>
Reference-contexts: Duchamp et. al. [45, 1] have proposed the notion of introducing a proxy between the mobile client and the servers on the wired network, which delays writing 2 out all but the most important data. In <ref> [38] </ref> they show its use in creating a lazy replicated file service. However, their system is based on Mach. Similar ideas, without the constraint of a particular OS choice, have been presented in our work on the theme of disconnected browsing [28, 24] however, they are specific to information access.
Reference: [39] <author> F. Teraoka, Y. Yokote, and M. Tokoro, </author> <title> Design, Implementation, and Evaluation of Virtual Internet Protocol, </title> <booktitle> Proc. of the 12th Intl. Conf. on Distributed Computing Systems, </booktitle> <month> Jun </month> <year> 1992, </year> <pages> pp. 170-177. </pages>
Reference-contexts: In a recent survey [26], the authors found that a overwhelming majority of research publications in the area of mobile computing dealt with either wireless MAC protocols [3, 30, 29, 5], networking (including mobile IP) <ref> [16, 18, 39, 36, 35] </ref> or data management [17, 9]. It is evident, though, that merely solving these problems does not, by itself, lead to applications that can run on mobile platforms. For applications to truly thrive in this environment, they must be mobile aware at all levels.
Reference: [40] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Applications, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: In <ref> [40] </ref>, we describe a software framework for building PSEs for partial differential equation based applications that we have developed. We have generalized this work and are developing the Purdue PSE Kernel (PPK), a software kernel that application PSE developers can use to build their own problem solving environments. <p> function as the overall system user interface, an object manager to store and manipulate the various objects produced by these tools, support (in terms of application programming interfaces (APIs) for the notebook and the object manager) for building the collection of tools, and a software bus based software interconnection mechanism <ref> [40] </ref>. <p> The software bus concept is an attempt to emulate the hardware bus mechanism that supports data and control interaction between various components of the machine and to incrementally attach new capabilities to a machine. In the PPK software bus (PDEBus <ref> [40] </ref>), software components have logical names (addresses) which uniquely identify them and register their exported services with the software bus. PDEBus arbitrates requests and services and invokes the appropriate functions at the appropriate service provider when some service is invoked by an interested client.
Reference: [41] <author> S. Weerawarana, E. N. Houstis, J. R. Rice, A. C. Catlin, C. L. Crabill, C. C. Chui, and S. Markus, PDELab: </author> <title> An Object-Oriented Framework for Building Problem Solving Environments for PDE Based Applications, </title> <booktitle> Proc. Second Annual Object-Oriented Numerics Conference (Rogue-Wave Software, </booktitle> <address> Cor-vallis, OR), </address> <year> 1994, </year> <pages> pp. 79-92. </pages>
Reference-contexts: In the rest of this paper, we will be describing our work in the context of a scientific computing system, specifically one that solves partial differential equations (PDEs). In our previous work in the domain of scientific computing, the notion of Problem Solving Environments (PSEs) <ref> [11, 8, 13, 41] </ref> has proved useful in hiding the complexity of the underlying systems from the user. A PSE is a software environment which allows the user to interact and work with a high level abstraction of some complex computational system. <p> We also present three compo-nents that are the cornerstones of this architecture, i.e. parameterized objects, object communication and lazy evaluation, and recognizing and completing fuzzy, unstructured, and incomplete user input. This work is currently being validated by building a UPDELab, an ubiquitous version of our PDELab <ref> [41] </ref> PSE. We are also using it in developing an electronic classroom [15], where students have wirelessly connected laptops. This document is organized as follows: Section 2 presents an overview of our previous work on software architectures for PSEs on high performance platforms. <p> The notebook then is one of these interested tools that requests some representation of an object (for example, a textual description or a picture of a PDELab <ref> [41] </ref> mesh) for embedding within it. <p> In this section we present a set of techniques we use to form an efficient and functional data communication and storage scheme, and the major parts of this scheme. We illustrate and explain these using examples from one scientific application in SciencePad - PDELab <ref> [41] </ref> which numerically solves mathematical models based on partial differential equations (PDEs). 4.1 Overview Our approach is built around the concept of managing, communicating, and storing data and action templates.
Reference: [42] <author> Mark Weiser, </author> <booktitle> The Computer for the Twenty-First Century, Sci. </booktitle> <address> Am. </address> <year> (1991), </year> <pages> 94-104. </pages>
Reference-contexts: It will, in the near future, engender a continuous interaction between people and interconnected computers using wireless devices. This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [42, 17, 27, 43] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power.
Reference: [43] <author> XIWT, XIWT, </author> <title> Nomadicity in the NII, </title> <type> White paper, Tech. report, </type> <institution> CNRI, </institution> <year> 1995, </year> <note> http://www.cnri.reston.va.us:3000/XIWT/documents/Nomads doc/NomadsTOC.html. </note>
Reference-contexts: It will, in the near future, engender a continuous interaction between people and interconnected computers using wireless devices. This new paradigm, variously referred to as mobile, nomadic or ubiquitous computing, raises a host of research issues in a variety of areas of computer science <ref> [42, 17, 27, 43] </ref>. The nature of the hardware involved in the mobile part of this scenario forces certain restrictions, like limited amounts of communication bandwidth, memory, and power.
Reference: [44] <author> M. K. Zang, </author> <title> Interconnection Language for Reuse at the Template/Module Level, </title> <journal> J. Systems and Software 23 (1993), </journal> <volume> no. 1, </volume> <pages> 9-26. </pages>
Reference-contexts: We use the term template here in a somewhat broader sense than it has been used in the literature dealing with the user interfaces and interprocess communication <ref> [7, 32, 44, 2, 10] </ref>. Our templates include not only data requested/supplied by the interacting computing agents and the user, but also actions and abilities to deduce or compute parts of the data in order to complete the requests.
Reference: [45] <author> B. Zenel and Duchamp. D., </author> <title> Intelligent Communication Filtering for Limited Bandwidth Environments, </title> <booktitle> Proc. Fifth Workshop on Hot Topics in Operating Systems (Rosario, </booktitle> <address> WA), </address> <publisher> IEEE, </publisher> <month> May </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: There has not been any work that directly addresses the problems involved in making a complex, heterogeneous computational system accessible from mobile platforms. However, there are several interesting projects, some ongoing, which are related to this task. Duchamp et. al. <ref> [45, 1] </ref> have proposed the notion of introducing a proxy between the mobile client and the servers on the wired network, which delays writing 2 out all but the most important data. In [38] they show its use in creating a lazy replicated file service.
References-found: 45

