URL: file://cse.ogi.edu/pub/tech-reports/1990/015.ps.gz
Refering-URL: http://www.cse.ogi.edu/Sparse/sparse.papers.html
Root-URL: http://www.cse.ogi.edu
Email: mwolfe@cse.ogi.edu  tseng@rice.edu  
Phone: (503)-690-1153  (713)-527-8101  
Title: The Power Test for Data Dependence  
Author: Michael Wolfe Chau-Wen Tseng 
Address: 19600 NW von Neumann Drive Beaverton, OR 97006  P.O. Box 1892 Houston, TX 77251  
Affiliation: Oregon Graduate Institute of Science and Technology Department of Computer Science and Engineering  Rice University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [AlK84] <author> J. R. Allen and K. Kennedy, </author> <title> Automatic Loop Interchange, </title> <booktitle> in Proc. of the SIGPLAN 84 Symposium on Compiler Construction, </booktitle> <address> New York, </address> <month> June </month> <year> 1984, </year> <pages> 233-246. </pages>
Reference-contexts: We have recently been constructing a program restructuring research tool, called TINY, which parses a tiny language, builds a data dependence graph, then applies (under interactive user control) a series of loop restructuring transformations. Among the transformations implemented are loop interchanging <ref> [AlK84] </ref>, loop skewing [Wol86a], loop reversal [Wed75] and loop distribution [BCK79].
Reference: [AlK87] <author> J. R. Allen and K. Kennedy, </author> <title> Automatic Translation of Fortran Programs to Vector Form, </title> <journal> ACM Transactions on Programming Languages and Systems 9, </journal> <month> 4 (October </month> <year> 1987), </year> <pages> 491-542. </pages>
Reference-contexts: For loop vectorization, this may be enough information <ref> [AlK87] </ref>. For other program transformations, more precise information is useful. We use the notation S 2P [2] to mean the instance of S 2P when the loop variable I=2. If instance S 2P [j] depends on instance S 1P [i], then the dependence distanceO is defined to be j-i. <p> The dependence direction vector can also be constructed from the signs of the distance vector. Of course, if the dependence distance for any loop exceeds the maximum trip count (number of iterations) of that loop, the references are independent <ref> [AlK87] </ref>. The Generalized GCD algorithm is more precise than linearizing the array references and using a single-equation GCD test [BCK79,OBuC86]. Example. <p> This is related to the technique of taking advantage of the equal direction for the standard GCD test, as 22 shown in <ref> [AlK87] </ref>. Handling Unknown Variables. Unknown variables occur in some subscript functions or in loop limits. The Power Test can handle many of these cases naturally by treating the unknown variables as additional index variables which have no limits.
Reference: [ABC87] <author> F. Allen, M. Burke, P. Charles, R. Cytron and J. Ferrante, </author> <title> An Overview of the PTRAN Analysis System for Multiprocessing, </title> <booktitle> in Supercomputing, 1st International Conference, </booktitle> <volume> vol. 297, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987, </year> <pages> 194-211. </pages>
Reference: [Ban76] <author> U. Banerjee, </author> <title> Data Dependence in Ordinary Programs, </title> <institution> UIUCDCS-R-76-837, Univ. Illinois, Dept. Computer Science, Urbana, IL, </institution> <month> November </month> <year> 1976. </year>
Reference-contexts: Work has also been done towards proving exactness conditions for Banerjee's Inequalities. Banerjee showed that his inequalities are exact if the coefficients of the index variables are all 1, 0, or -1 <ref> [Ban76] </ref>. Li et al recently showed that the Banerjee's Inequalities are exact if the coefficient of one index variable is +1 or -1, and the magnitudes of all other coefficients are less than the range (determined by the loop limits) for that index variable [LY90].
Reference: [Ban79] <author> U. Banerjee, </author> <title> Speedup of Ordinary Programs, </title> <type> PhD Thesis, </type> <institution> Univ. of Illinois, </institution> <month> October </month> <year> 1979. </year> <pages> (UMI 80-08967). </pages>
Reference-contexts: Also, Banerjee's Inequalities handle only a single subscript equation at a time, and only a single lower and upper loop limit. The method for extending Banerjee's multiple-index-variable dependence test <ref> [Ban79] </ref>, boldly (and improperly) called the "Exact Algorithm for Multiple Indices" in [Wol89], has been shown not only to be imprecise, but is incorrect; all attempts to correct it made it even more expensive (in time and space) and reduced its claims for precision to the point where we gave up.
Reference: [BCK79] <author> U. Banerjee, S. Chen, D. J. Kuck and R. A. Towle, </author> <title> Time and Parallel Processor Bounds for Fortran-Like Loops, </title> <journal> IEEE Trans. on Computers C-28, </journal> <month> 9 (September </month> <year> 1979), </year> <pages> 660-670. </pages>
Reference-contexts: Most decision algorithms require the subscript functions to be linear combinations of the loop index variables with known constant coefficients. A test in common use is Banerjee's Inequalities <ref> [BCK79] </ref>, which is efficient, but tests each subscript independently (reducing precision). The array references can be "linearized" to solve for simultaneous solutions, but this does not always improve precision [BCK79,OBuC86]. The Lambda test was developed as another method to add simultaneity to Banerjee's Inequalities [Gru90,OLY90]. <p> Among the transformations implemented are loop interchanging [AlK84], loop skewing [Wol86a], loop reversal [Wed75] and loop distribution <ref> [BCK79] </ref>.
Reference: [Ban88] <author> U. Banerjee, </author> <title> Dependence Analysis for Supercomputing, </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1988. </year>
Reference-contexts: Banerjee's Inequalities have also been extended to provide direction vector information [Wol82,OWol89]. Banerjee's Inequalities test for real (not integer) solutions of the dependence equation; they have recently been extended to handle triangular as well as rectangular loop limits when the coefficients are known constants <ref> [Ban88] </ref>. Another simple dependence test is the single subscript GCD test. Banerjee has also developed a Generalized GCD algorithm which tests multiple subscripts simultaneously. These decision algorithms test for integer solutions of the dependence equation, but ignore loop limits. <p> In these examples, existing data dependence decision algorithms fall short. As it turns out, Banerjee's Inequalities extended with triangular loop limits <ref> [Ban88] </ref> will correctly handle the first example, but they are harder (or impossible) to extend to the second case. Also, Banerjee's Inequalities handle only a single subscript equation at a time, and only a single lower and upper loop limit. <p> Review of the Generalized GCD Algorithm The Power Test begins with the Generalized GCD algorithm given in <ref> [Ban88] </ref>; we briefly review that algorithm here. It will be important that the subscript functions be linearly independent, but since the Generalized GCD algorithm naturally finds linearly-dependent subscript functions, we need not worry about that. <p> Applying the same elementary integer row operations to the U matrix produces a unimodular matrix with the property that UA=D. If we find an integer solution t such that tD=c, then h=tU is a solution to the dependence equations hA=c (as shown in <ref> [Ban88] </ref>). After finding U, we can solve for t 1P through t sP by solving tD=c using a simple back-substitution algorithm. Example.
Reference: [BuC86] <author> M. Burke and R. Cytron, </author> <title> Interprocedural Dependence Analysis and Parallelization, </title> <booktitle> in Proc. of the SIGPLAN 86 Symp. on Compiler Construction, </booktitle> <address> Palo Alto, CA, </address> <month> June 25-27, </month> <year> 1986, </year> <pages> 162-175. </pages>
Reference: [BDH87] <author> M. Byler, J. Davies, C. Huson, B. Leasure and M. Wolfe, </author> <title> Multiple Version Loops, </title> <booktitle> in Proc. of the 1987 International Conf. on Parallel Processing, </booktitle> <editor> S. K. Sahni (ed.), </editor> <publisher> Penn State Press, </publisher> <address> University Park, PA, </address> <year> 1987, </year> <pages> 312-318. </pages> <month> August 17-21, </month> <year> 1987. </year>
Reference-contexts: Some compilers use special case analysis to generate code that detects at run time whether there is or is not a dependence relation <ref> [BDH87] </ref>, and execute different code if there is not. Although the 30 dependence system may be imprecise, it is always conservative; that is, if there is an actual solution to the data dependence problem, that solution will also appear as a solution to the dependence system.
Reference: [Coo71] <author> S. Cook, </author> <title> The Complexity of Theorem-Proving Procedures, </title> <booktitle> in Proceedings of the Third Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1971, </year> <pages> 151-158. </pages>
Reference-contexts: There are even integer programming algorithms based on Fourier-Motzkin elimination [Wil76,OWil83]. Unfortunately, these tests are expensive since integer programming is NP-complete <ref> [Coo71] </ref>. In the realm of exact dependence tests, there is a Single Index Variable exact test for simple subscripts with the same index variable in each reference [Ban79,OWol82]. Work has also been done towards proving exactness conditions for Banerjee's Inequalities.
Reference: [DaE73] <author> G. B. Dantzig and B. C. Eaves, </author> <title> Fourier-Motzkin Elimination and Its Dual, </title> <journal> Journal of Combinatorial Theory (A) 14(1973), </journal> <pages> 288-297. </pages>
Reference: [Duf74] <author> R. J. Duffin, </author> <title> On Fourier's Analysis of Linear Inequality Systems, in Mathematical Programming Study 1, </title> <publisher> North-Holland, </publisher> <year> 1974, </year> <pages> 71-95. </pages>
Reference-contexts: If the original dependence system is exact, this solution will be exact. The first question is whether the Power is always conservative; that is, is there a case in which there is in fact an integer solution but the Power Test will (incorrectly) show independence. Duffin <ref> [Duf74] </ref> shows in his Lemma 1 that Fourier-Motzkin pairwise elimination works. We reproduce the statement of his Lemma 1 here: Lemma 1 (Duffin). Pairwise elimination of the variable x 1P from a system of linear inequalities gives an eliminant system of linear inequalities. <p> Then x P2 P P, . . . ,Ox Pm P P is a solution to the eliminant system if and only if there is an x P1 P P such that x P1 P P,Px P2 P P is a solution of the original system. Proof. See <ref> [Duf74] </ref>. Given that the set of linear inequalities of the form shown in (1-2), if there is an integer solution to the ine qualities then there must be a real solution; approximating the integer solution by a real solution is LP-relaxation.
Reference: [Fea88] <author> P. Feautrier, </author> <title> Parametric Integer Programming, </title> <type> RAIRO Recherche Operationnelle 22, </type> <month> 3 (September </month> <year> 1988), </year> <pages> 243-268. 37 </pages>
Reference: [GJG87] <author> D. Gannon, W. Jalby and K. Gallivan, </author> <title> Strategies for Cache and Local Memory Management by Global Program Transformation, </title> <booktitle> in Supercomputing, 1st International Conference, </booktitle> <volume> vol. 297, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987, </year> <pages> 229-254. </pages>
Reference: [Gru90] <author> D. Grunwald, </author> <title> The Lambda Test Revisited, </title> <booktitle> in Proc. of the 1990 International Conference on Parallel Processing, </booktitle> <year> 1990. </year>
Reference: [KKP90a] <author> D. Klappholz, X. Kong and K. Psarris, </author> <title> On the Perfect Accuracy of an Approximate Subscript Analysis Test, </title> <booktitle> in Proceedings of the 1990 International Conference on Supercomputing, ACM, </booktitle> <address> June 1990. Amsterdam, </address> <publisher> Holland. </publisher>
Reference-contexts: if the coefficient of one index variable is +1 or -1, and there exists a permutation of the remaining index variables such that (loosely stated) the coefficient of each index variable is less than the sum of the products of the coefficients and ranges for all the previous index variables <ref> [KKP90a] </ref>. The I Test is a new single subscript test for dependence testing based on refining a combination of the GCD and Banerjee tests [KKP90b].
Reference: [KKP90b] <author> X. Kong, D. Klappholz and K. Psarris, </author> <title> The I Test: A New Test for Subscript Data Dependence, </title> <booktitle> in Proceedings of the 1990 International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: The I Test is a new single subscript test for dependence testing based on refining a combination of the GCD and Banerjee tests <ref> [KKP90b] </ref>. It is better able to detect the lack of integer solutions in more cases than simply applying both the GCD and Banerjee tests, and can usually prove the existence of integer solutions.
Reference: [LY90] <author> Z. Li, P. C. Yew and C. Q. Zhu, </author> <title> An Efficient Data Dependence Analysis for Parallelizing Compilers, </title> <journal> IEEE Trans. on Parallel and Distributed Systems 1, </journal> <month> 1 (January </month> <year> 1990), </year> <pages> 26-34. </pages>
Reference-contexts: Li et al recently showed that the Banerjee's Inequalities are exact if the coefficient of one index variable is +1 or -1, and the magnitudes of all other coefficients are less than the range (determined by the loop limits) for that index variable <ref> [LY90] </ref>. <p> However, for the sake of efficiency it is desirable to employ simpler tests where they are known to be exact. 8.2. Lambda Test The Lambda test is introduced in <ref> [LY90] </ref>. Its precision is equivalent to a multi-dimensional version of Banerjee's Inequalities, since it checks for simultaneous real-valued solutions for all subscripts within the loop limits. Like Banerjee's Inequalities, it can also be used to test for direction vectors. <p> Even with these restrictions, they showed that the Lambda test is not always exact for three or more coupled subscripts <ref> [LY90] </ref>. Precision Comparison. When compared with the Power Test, we show that the Power Test will detect independence whenever the Lambda test does, even with our suggested enhancements.
Reference: [Sch86] <author> A. Schrijver, </author> <title> Theory of Linear and Integer Programming, </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, Great Britain, </address> <year> 1986. </year>
Reference-contexts: Since the Constraint Matrix is based on the simplex algorithm, it also has worst case exponential complexity. For most real linear programming problems, simplex algorithms tend to have near linear time complexity, and cycling is rare. However, <ref> [Sch86] </ref> states that for combinatorial problems, where coefficients tend to be 1, 0, or -1, the simplex algorithm is slow and tends to cycle for certain pivot rules. At this point, more studies are required to characterize the behavior of the the dependence tests we have examined.
Reference: [Sho81] <author> R. Shostak, </author> <title> Deciding Linear Inequalities by Computing Loop Residues, </title> <editor> J. </editor> <booktitle> of the ACM 28, </booktitle> <month> 4 (October </month> <year> 1981), </year> <pages> 769-779. </pages>
Reference-contexts: The Generalized GCD test can also be trivially extended to provide dependence distance information, as shown later in this paper. Other methods have been attempted for use as decision algorithms, but are generally more expensive, such as Shostak's loop residue method <ref> [Sho81] </ref>. For many purposes, a simple single-index-variable test will suffice, applied on one subscript at a time. For more advanced restructuring transformations, however, more precision is necessary. The Power Test is a combination of Banerjee's Generalized GCD test with the Fourier-Motzkin variable elimination method.
Reference: [Wal88] <author> D. R. Wallace, </author> <title> Dependence of Multi-Dimensional Array References, </title> <booktitle> in Proc. of the 1988 International Conf. on Supercomputing, ACM, </booktitle> <year> 1988, </year> <pages> 418-428. </pages> <address> St. Malo, France, </address> <month> July 4-8, </month> <year> 1988. </year>
Reference-contexts: If efficiency was the only factor to be considered, it seems that the Power Test would be preferable for references with large numbers of subscripts and few index variables. 8.3. Constraint Matrix Test The Constraint Matrix test is a modified simplex algorithm for solving integer programming problems, presented in <ref> [Wal88] </ref>. Instead of first parameterizing the system and then checking the consistency of the loop limits as in the Power Test, the algorithm introduces slack variables for each constraint and adds them to the system. <p> Limitations. Like the Lambda test, the Constraint Matrix algorithm requires that all subscripts be independent. Gaussian elimination must thus be performed as a preliminary step. Although not directly stated in <ref> [Wal88] </ref>, the Constraint Matrix test may compute full direction vectors by introducing new slack variables for each direction. This requires that the test be applied from scratch for each direction vector tested. The Constraint Matrix test does not compute distance vectors. [Wal88] also does not mention complex loop limits, but the <p> Although not directly stated in <ref> [Wal88] </ref>, the Constraint Matrix test may compute full direction vectors by introducing new slack variables for each direction. This requires that the test be applied from scratch for each direction vector tested. The Constraint Matrix test does not compute distance vectors. [Wal88] also does not mention complex loop limits, but the same techniques we present for the Power Test may be applied to the Constraint Matrix test as well. 29 Comparison.
Reference: [Wed75] <author> D. Wedel, </author> <title> Fortran for the Texas Instruments ASC System, </title> <journal> SIGPLAN Notices 10, </journal> <month> 3 (March </month> <year> 1975), </year> <pages> 119-132. </pages>
Reference-contexts: We have recently been constructing a program restructuring research tool, called TINY, which parses a tiny language, builds a data dependence graph, then applies (under interactive user control) a series of loop restructuring transformations. Among the transformations implemented are loop interchanging [AlK84], loop skewing [Wol86a], loop reversal <ref> [Wed75] </ref> and loop distribution [BCK79].
Reference: [Wil76] <author> H. P. Williams, </author> <title> Fourier-Motzkin Elimination Extension to Integer Programming Problems, </title> <journal> Journal of Combinatorial Theory (A) 21(1976), </journal> <pages> 118-123. </pages>
Reference: [Wil83] <author> H. P. Williams, </author> <title> A Characterisation of All Feasible Solutions to an Integer Program, </title> <booktitle> Discrete Applied Mathematics 5(1983), </booktitle> <pages> 147-155. </pages>
Reference: [Wol82] <author> M. Wolfe, </author> <title> Optimizing Supercompilers for Supercomputers, </title> <type> Ph.D. Thesis, </type> <institution> Univ. of Illinois UIUCDCS-82-1105, Urbana, IL, </institution> <month> October </month> <year> 1982. </year> <pages> (UMI 83-03027). </pages>
Reference: [Wol86a] <author> M. Wolfe, </author> <title> Loop Skewing: The Wavefront Method Revisited, </title> <booktitle> Intl J. Parallel Programming 15, </booktitle> <month> 4 (August </month> <year> 1986), </year> <pages> 279-294. </pages>
Reference-contexts: We have recently been constructing a program restructuring research tool, called TINY, which parses a tiny language, builds a data dependence graph, then applies (under interactive user control) a series of loop restructuring transformations. Among the transformations implemented are loop interchanging [AlK84], loop skewing <ref> [Wol86a] </ref>, loop reversal [Wed75] and loop distribution [BCK79].
Reference: [Wol86b] <author> M. Wolfe, </author> <title> Advanced Loop Interchanging, </title> <booktitle> in Proc. of the 1986 Intl Conf. on Parallel Processing, </booktitle> <editor> K. Hwang, S. M. Jacobs and E. E. Swartzlander (ed.), </editor> <address> St. Charles, IL, </address> <month> August 19-22, </month> <year> 1986, </year> <pages> 536-543. </pages>
Reference: [WoB87] <author> M. Wolfe and U. Banerjee, </author> <title> Data Dependence and Its Application to Parallel Processing, </title> <booktitle> Intl Journal of Parallel Programming 16, </booktitle> <month> 2 (April </month> <year> 1987), </year> <pages> 137-178. 38 </pages>
Reference: [Wol89] <author> M. Wolfe, </author> <title> Optimizing Supercompilers for Supercomputers, </title> <publisher> Pitman Publishing, </publisher> <address> London, </address> <year> 1989. </year> <month> 39 </month>
Reference-contexts: Note also that "normalizing" the inner loop would change the shape of the iteration space, and would affect the direction vector; we do not normalize loops. The second motivation also came during the construction of TINY. One of the restructuring transformations planned was interchanging of non-tightly-nested loops <ref> [Wol89] </ref>. <p> Also, Banerjee's Inequalities handle only a single subscript equation at a time, and only a single lower and upper loop limit. The method for extending Banerjee's multiple-index-variable dependence test [Ban79], boldly (and improperly) called the "Exact Algorithm for Multiple Indices" in <ref> [Wol89] </ref>, has been shown not only to be imprecise, but is incorrect; all attempts to correct it made it even more expensive (in time and space) and reduced its claims for precision to the point where we gave up. <p> Continuing in this way, we find that the only consistent direction vector is (&gt;,P&gt;), which means that i 1P &gt;j 1P and i 2P &gt;j 2P . This corresponds to a (&lt;,P&lt;) direction for the negative of the dependence equation, which corresponds to an anti-dependence <ref> [Wol89] </ref>. Thus, the Power Test correctly identifies the anti-dependence with the precise direction vector. 7. The Power of the Power Test The previous section showed how the Power Test handled the first example from the motivation section. Let us see how the other examples are handled. Multiple Loop Limits. <p> One condition that must be satisfied for legal interchanging is that there must be no dependence relation from iteration (j 1P ,Pj 3P ,Pj 4P ) of S 2P to iteration (i 1P ,Pi 2P ) of S 1P such that j 1P &lt;i 1P and j 3P &gt;i 1P <ref> [Wol89] </ref>. Let us inspect the dependence between S 2P : A (I 4P ,PI 3P ) and S 1P : A (I 2P ,PI 1P ).
References-found: 29

