URL: http://iamwww.unibe.ch/~rvswww/Publikationen/TechReports/iam-92-013.ps.gz
Refering-URL: http://iamwww.unibe.ch/~rvswww/Publikationen/index.html
Root-URL: 
Email: ladkin@iam.unibe.ch, leue@iam.unibe.ch  
Title: An Analysis of Message Sequence Charts  
Author: Peter B. Ladkin Stefan Leue 
Date: June 1992  
Address: Langgassstrasse 51 CH-3012 Bern, Switzerland  
Affiliation: University of Berne Institute for Informatics and Applied Mathematics  
Pubnum: IAM 92-013  
Abstract-found: 0
Intro-found: 1
Reference: [AG88] <author> Siemens AG. </author> <title> EWSD Softwareentwicklungshandbuch (Software Development Handbook), Kapitel B, </title> <type> Register 6, </type> <institution> SDL Diagramme. Siemens AG, Munchen (Munich), </institution> <year> 1988. </year>
Reference-contexts: We shall simply call everything a signal. MSCs focus entirely on the signals exchanged, and are regarded as a particularly simple, intuitive way of specifying telecommunications protocols. MSCs are the subject of an international standardisation effort by CCITT [X92]. For use of MSCs in industrial practice, see <ref> [AG88] </ref>, [CCHK91], [CCI88a], and [CCI88b]. We shall argue that this simplicity is obtained at the expense of precision, and suggest a remedy, namely that one can add temporal logic statements to an MCS specification via the connection given in this paper.
Reference: [AS87] <author> B. Alpern and F.B. Schneider. </author> <title> Recognizing safety and liveness. </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 117-126, </pages> <year> 1987. </year>
Reference-contexts: Details of the connections between system properties, temporal logic, and automata are in [MP90]. An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in <ref> [AS87] </ref>, [AS89]. Buchi automata express a more complex set of properties than pure temporal logic [Wol83], [VW86], [VW88]. 2 A Buchi automaton is an automaton that can accept infinite sequences. It is similar to a normal finite-state automaton, except for the acceptance condition. <p> final state is entered infinitely many times during a computation on this sequence. 3 In [LL92] there is an example which seems to show that MSCs can also make implicit requirements on the environment, that can not be handled by, for example, making the environment an additional process. 4 In <ref> [AS87] </ref> it was shown that any property is the intersection of a safety property and a liveness property, so we are safe in saying that this is all that is needed. 3 Chapter 2 Interpreting MSCs as Automata In [LL92], we interpreted an MSC specification, which may contain many MSCs linked
Reference: [AS89] <author> B. Alpern and F.B. Schneider. </author> <title> Verifying temporal properties without temporal logic. </title> <journal> ACM Transactions on Programming Languages, </journal> <volume> 11(1) </volume> <pages> 147-167, </pages> <month> jan </month> <year> 1989. </year>
Reference-contexts: Details of the connections between system properties, temporal logic, and automata are in [MP90]. An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in [AS87], <ref> [AS89] </ref>. Buchi automata express a more complex set of properties than pure temporal logic [Wol83], [VW86], [VW88]. 2 A Buchi automaton is an automaton that can accept infinite sequences. It is similar to a normal finite-state automaton, except for the acceptance condition.
Reference: [CCHK91] <author> A.A.R. Cockburn, W. Citrin, R.F. Hauser, and J. Kanel. </author> <title> An environment for interactive design of communication architectures. In Protocol Specification, Verification and Testing, </title> <booktitle> volume 11 of Proceedings of the IFIP WG 6.1 11th Symposium on Protocol Specification, Verification and Testing. </booktitle> <publisher> North Holland, </publisher> <year> 1991. </year>
Reference-contexts: We shall simply call everything a signal. MSCs focus entirely on the signals exchanged, and are regarded as a particularly simple, intuitive way of specifying telecommunications protocols. MSCs are the subject of an international standardisation effort by CCITT [X92]. For use of MSCs in industrial practice, see [AG88], <ref> [CCHK91] </ref>, [CCI88a], and [CCI88b]. We shall argue that this simplicity is obtained at the expense of precision, and suggest a remedy, namely that one can add temporal logic statements to an MCS specification via the connection given in this paper.
Reference: [CCI88a] <author> CCITT. </author> <title> Recommendation Q.65: Stage 2 of the method for the characterization of services supported by ISDN. </title> <type> Technical report, CCITT, </type> <year> 1988. </year>
Reference-contexts: We shall simply call everything a signal. MSCs focus entirely on the signals exchanged, and are regarded as a particularly simple, intuitive way of specifying telecommunications protocols. MSCs are the subject of an international standardisation effort by CCITT [X92]. For use of MSCs in industrial practice, see [AG88], [CCHK91], <ref> [CCI88a] </ref>, and [CCI88b]. We shall argue that this simplicity is obtained at the expense of precision, and suggest a remedy, namely that one can add temporal logic statements to an MCS specification via the connection given in this paper.
Reference: [CCI88b] <author> CCITT. </author> <title> Recommendation Q.699: Interworking between the digital subscriber system layer 3 protocol and the signaling system no. 7 ISDN user part. </title> <type> Technical report, CCITT, </type> <year> 1988. </year>
Reference-contexts: MSCs focus entirely on the signals exchanged, and are regarded as a particularly simple, intuitive way of specifying telecommunications protocols. MSCs are the subject of an international standardisation effort by CCITT [X92]. For use of MSCs in industrial practice, see [AG88], [CCHK91], [CCI88a], and <ref> [CCI88b] </ref>. We shall argue that this simplicity is obtained at the expense of precision, and suggest a remedy, namely that one can add temporal logic statements to an MCS specification via the connection given in this paper.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A visual formalisation for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: of A which correspond with a particular state of A 0 ; * h maps the alphabet of A 0 into words in the alphabet of A, i.e. transitions among states in A 0 are translated into sequences of transitions of A; 1 Abstraction is related to notions in Statecharts <ref> [Har87] </ref>, which can in some sense be regarded as a hierarchy of abstractions.
Reference: [LL92] <author> P. B. Ladkin and S. Leue. </author> <title> An automaton interpretation of message sequence charts. </title> <type> Technical Report IAM 92-012, </type> <institution> University of Berne, Institute for Infor-matics and Applied Mathematics, </institution> <year> 1992. </year> <note> Also submitted for publication. </note>
Reference-contexts: In contrast, we are taking a method already in industrial use, and enriching it by providing a more precise and flexible semantics. 1 An MSC Example. Figure 1.1 shows a simple MSC (without conditions), and its syntactic interpretation as a so-called ne/sig graph as in <ref> [LL92] </ref>. A system with three processes is specified. The processes are represented by vertical lines, and the signals sent between processes are represented by horizontal arrows. Communication is asynchronous. <p> Details are in <ref> [LL92] </ref>. 2 But we found further questions were not answered by this interpretation, or by the MSC specification style. <p> It is similar to a normal finite-state automaton, except for the acceptance condition. An infinite sequence is accepted if some final state is entered infinitely many times during a computation on this sequence. 3 In <ref> [LL92] </ref> there is an example which seems to show that MSCs can also make implicit requirements on the environment, that can not be handled by, for example, making the environment an additional process. 4 In [AS87] it was shown that any property is the intersection of a safety property and a <p> by, for example, making the environment an additional process. 4 In [AS87] it was shown that any property is the intersection of a safety property and a liveness property, so we are safe in saying that this is all that is needed. 3 Chapter 2 Interpreting MSCs as Automata In <ref> [LL92] </ref>, we interpreted an MSC specification, which may contain many MSCs linked by conditions, as a single syntactic structure called a next-event/signal (ne/sig) graph. We then derived a global state transition graph (GSTG) from the ne/sig graph. <p> We then derived a global state transition graph (GSTG) from the ne/sig graph. A GSTG is almost a Buchi automaton, missing only the definition of the set of final states. Examples in <ref> [LL92] </ref> show how the choice of a set of final states for the automaton depended on choices to be made concerning the properties of the communication in the MSCs, which are not explicit in the MSC specification style itself. <p> At the condition C2, the second process may send a CC signal to the first, or alternatively a DR signal, before looping back to the beginning (condition C1). This gives rise to the branching and looping ne/sig graph in Figure 2.4. The translation is handled in <ref> [LL92] </ref> first by translating the MSCs with conditions into ne/sig graphs with conditions (Figure 2.5), which are an extra kind of node on each process axis, then joining the ne/sig graphs at these nodes and finally eliminating the condition nodes. It's straightforward, but requires care in the details. <p> Formal details are in <ref> [LL92] </ref>, along with some discussion of end-state selection to achieve various safety and liveness properties. 8 9 10 11 Chapter 3 GTSGs, Transition Systems, and Temporal Logic Let N M = (S; C; X; ne; sig; ST; stype; T op; Bottom) denote the ne/sig graph of some MSC specification M and <p> Some liveness properties are not automatically fulfilled by an MSC specification M. In <ref> [LL92] </ref> it was noted that some of these properties were definable by making different selections of the set of final states of a Buchi automaton defined on GT SG M . <p> However, we don't need all the details of Statecharts for our purposes 2 This particular abstraction was called the composition graph in <ref> [LL92] </ref>, and is used in the formal definition of the `unfolding' of a set of ne/sig graphs with conditions into a single ne/sig graph. 17 * there is a transition from s to s 0 on p in A 0 iff h (p) is a path from some state in I <p> One could further argue that it would be preferable to have as much semantics as possible explicit in specifications. 20 Chapter 6 Concluding remarks We have concluded in other work <ref> [LL92] </ref> that MSCs as currently used are an incomplete specification method, requiring additional statements of safety and liveness assumptions.
Reference: [MP90] <author> Z. Manna and A. Pnueli. </author> <title> A hierarchy of temporal properties. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 377-408. </pages> <publisher> ACM Press, </publisher> <month> aug </month> <year> 1990. </year> <month> 22 </month>
Reference-contexts: Background Literature. A thorough exposition of the use of temporal logic in system specification may be found in [MP91]. Some knowledge of this reference would be helpful, since our presentation follows their terminology. Details of the connections between system properties, temporal logic, and automata are in <ref> [MP90] </ref>. An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in [AS87], [AS89]. <p> As noted, these definitions cohere with our former GSTG definitions. In Figures 2.2 and 2.6, we annotate each state with the instances of en and ta that are true in that state. Temporal Logic. We define a temporal logic in the usual way, following <ref> [MP90] </ref>. <p> We can now state some examples of properties in temporal logic which can characterise MSC specifications. The classification of properties as safety, recurrence, etc, refers to the classification in <ref> [MP90] </ref>. Properties Satisfied by all MSC Specifications. The following properties are satisfied by all computations derived from MSC specifications, as may be seen by inspection. We omit proofs. 1. Enabling of a send event (a safety property): If a send event is taken, it must have been enabled previously.
Reference: [MP91] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems, volume 1, Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Despite their apparent simplicity, MSCs are equally expressive with Buchi automata in a precise sense, and more expressive than temporal logic, when communication matters and computation is ignored. Background Literature. A thorough exposition of the use of temporal logic in system specification may be found in <ref> [MP91] </ref>. Some knowledge of this reference would be helpful, since our presentation follows their terminology. Details of the connections between system properties, temporal logic, and automata are in [MP90]. <p> First, we relate the GTSG to a basic transition system as defined in <ref> [MP91] </ref>. Then we consider state predicates, computations and finally the syntax and semantics of temporal logic. Basic transition system. <p> Computations and State Predicates en and ta. An infinite state sequence = s 0 ; s 1 ; : : : is a computation <ref> [MP91] </ref>, iff * s 0 j= fi, which means just s 0 = q 0 , and * for all consecutive pairs s i ; s i+1 2 there exists t 2 T such that s i+1 2 t (s). The indices i of are positions. <p> and S (since). 2 We will show that this notion is simplified for MSCs, so there will be no confusion with our notion of transition relation for GTSGs. 3 In order to avoid notational confusion with our definitions for MSCs we distinguish our notation slightly from the notation used in <ref> [MP91] </ref>. 13 The semantics are defined as usual.
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <booktitle> In Handbook of Theoretical Computer Science, chapter 4, </booktitle> <pages> pages 132-191. </pages> <publisher> Elsevier Science Publisher, </publisher> <year> 1990. </year>
Reference-contexts: Some knowledge of this reference would be helpful, since our presentation follows their terminology. Details of the connections between system properties, temporal logic, and automata are in [MP90]. An introduction to Buchi automata may be found in <ref> [Tho90] </ref>, and the use of Buchi automata to specify properties of systems may be found in [AS87], [AS89]. Buchi automata express a more complex set of properties than pure temporal logic [Wol83], [VW86], [VW88]. 2 A Buchi automaton is an automaton that can accept infinite sequences.
Reference: [VW86] <author> M. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 332-344, </pages> <year> 1986. </year>
Reference-contexts: An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in [AS87], [AS89]. Buchi automata express a more complex set of properties than pure temporal logic [Wol83], <ref> [VW86] </ref>, [VW88]. 2 A Buchi automaton is an automaton that can accept infinite sequences. It is similar to a normal finite-state automaton, except for the acceptance condition.
Reference: [VW88] <author> M. Y. Vardi and P. Wolper. </author> <title> Reasoning about infinite computation paths. </title> <type> Research Report RJ 6209, </type> <institution> IBM Almaden Research Center, </institution> <month> apr </month> <year> 1988. </year>
Reference-contexts: An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in [AS87], [AS89]. Buchi automata express a more complex set of properties than pure temporal logic [Wol83], [VW86], <ref> [VW88] </ref>. 2 A Buchi automaton is an automaton that can accept infinite sequences. It is similar to a normal finite-state automaton, except for the acceptance condition.
Reference: [Wol83] <author> P. Wolper. </author> <title> Temporal logic can be more expressive. </title> <journal> Information and Control, </journal> <volume> 56 </volume> <pages> 72-99, </pages> <year> 1983. </year>
Reference-contexts: An introduction to Buchi automata may be found in [Tho90], and the use of Buchi automata to specify properties of systems may be found in [AS87], [AS89]. Buchi automata express a more complex set of properties than pure temporal logic <ref> [Wol83] </ref>, [VW86], [VW88]. 2 A Buchi automaton is an automaton that can accept infinite sequences. It is similar to a normal finite-state automaton, except for the acceptance condition. <p> We show below that an arbitrary Buchi automaton is an abstraction of the automaton of some MSC specification, and therefore that MSC specifications are in this sense equally as complex as Buchi automata, and therefore much more expressive than temporal logic <ref> [Wol83] </ref>, under our semantics. Abstractions Formally. hA 0 ; I; hi is an abstraction of A iff * I is a mapping of the state set of A 0 into the set of state sets of A, i.e.
Reference: [X92] <author> CCITT SG X. </author> <title> Draft recommendation Z.120: Message sequence chart. </title> <note> Submitted to CCITT, </note> <month> mar </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: We shall simply call everything a signal. MSCs focus entirely on the signals exchanged, and are regarded as a particularly simple, intuitive way of specifying telecommunications protocols. MSCs are the subject of an international standardisation effort by CCITT <ref> [X92] </ref>. For use of MSCs in industrial practice, see [AG88], [CCHK91], [CCI88a], and [CCI88b]. We shall argue that this simplicity is obtained at the expense of precision, and suggest a remedy, namely that one can add temporal logic statements to an MCS specification via the connection given in this paper.
References-found: 15

