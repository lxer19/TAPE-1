URL: http://www.cs.ucsb.edu/research/ufo/97-usenix-ufo.ps
Refering-URL: http://www.cs.ucsb.edu/research/ufo/
Root-URL: http://www.cs.ucsb.edu
Email: fberto,ibel,schauser,chrissg@cs.ucsb.edu  
Title: Extending the Operating System at the User Level: the Ufo Global File System  
Author: Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman 
Keyword: operating systems, user-level extensions, /proc file system, global file system, global name space, file caching  
Note: This work was supported by the National Science Foundation under NSF CAREER Award CCR-9502661 and NSF Postdoctoral Award ASC-9504291. Computational resources were provided by the NSF Instrumentation Grant CDA-9529418 and Sun Microsystems. The software is available on-line under  
Web: http://www.cs.ucsb.edu/research/ufo  http://www.cs.ucsb.edu/research/ufo  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: In this paper we show how to extend the functionality of standard operating systems completely at the user level. Our approach works by intercepting selected system calls at the user level, using tracing facilities such as the /proc file system provided by many Unix operating systems. The behavior of some intercepted system calls is then modified to implement new functionality. This approach does not require any re-linking or recompilation of existing applications. In fact, the extensions can even be dynamically installed into already running processes. The extensions work completely at the user level and install without system administrator assistance. We used this approach to implement a global file system, called Ufo, which allows users to treat remote files exactly as if they were local. Currently, Ufo supports file access through the FTP and HTTP protocols and allows new protocols to be plugged in. While several other projects have implemented global file system abstractions, they all require either changes to the operating system or modifications to standard libraries. The paper gives a detailed performance analysis of our approach to extending the OS and establishes that Ufo introduces acceptable overhead for common applications even though intercepting system calls incurs a high cost. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 86] <author> M. Acetta, R. Baron, W. Bolowsky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for Unix development. </title> <booktitle> In Proceedings of the USENIX Summer '86 Conference, </booktitle> <month> July </month> <year> 1986. </year>
Reference-contexts: Like ours, the Janus implementation has been designed for Solaris. A lot of current research deals with designing operating systems such that they allow for easier and more efficient user-level extension. Engler et al. [EKO95] carry the Mach micro-kernel methodology <ref> [ABB + 86] </ref> further by removing as much kernel abstraction as possible from the OS. This pushes the kernel/user-level boundary as low as possible, placing most of the OS services outside of the kernel.
Reference: [BHK + 91] <author> M. G. Baker, J. H. Hartmann, M.D. Kupfer, K. W. Shirrif, and J. K. Ousterhout. </author> <title> Measurement of a distributed file system. </title> <booktitle> In Proceedings of the 13th Symposium on Operating System Principles, </booktitle> <address> Pacific Grove, CA, </address> <year> 1991. </year>
Reference-contexts: Second, the whole file has to fit on the local disk. In practice we don't expect these two problems to occur frequently. With the exception of databases, most applications tend to access files nearly in their entirety <ref> [BHK + 91] </ref>. Furthermore, Ufo allows any local file system to be used for file transfers, thus reducing the danger of insufficient local disk space. A third problem comes from our decision not to intercept the read and write system calls.
Reference: [BMR82] <author> D. R. Brownbridge, L. F. Marshall, and B. Ran-dell. </author> <title> The Newcastle Connection, </title> <journal> or UNIXes of the world unite! Software Practice and Experience, </journal> <volume> 12, </volume> <year> 1982. </year>
Reference-contexts: be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection <ref> [BMR82] </ref>, Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples.
Reference: [BSP + 94] <author> B. N. Bershad, S. Savage, P. Pardyak, E. F. Sirer, M. E. Fiuczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <year> 1994. </year>
Reference-contexts: debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN <ref> [BSP + 94] </ref>, Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> This pushes the kernel/user-level boundary as low as possible, placing most of the OS services outside of the kernel. Another approach, taken by VINO [SESS94] and SPIN <ref> [BSP + 94] </ref>, is to allow injection of user-written kernel extensions into the kernel domain. A discussion of the issues involved can be found in [SS96]. Another recent project, SLIC [GPA96], is an OS exten-sion to Solaris that allows for plug-ins at both the user and the kernel level.
Reference: [Cat92] <author> V. Cate. </author> <title> Alex a global filesystem. </title> <booktitle> In Proceedings of the 1992 USENIX File System Workshop, </booktitle> <address> Ann Arbor, MI, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex <ref> [Cat92] </ref> User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex <ref> [Cat92] </ref>, Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. Ufo is distinct in that it requires no such modifications to any existing code and runs entirely at the user-level. <p> Plan 9 [PPTT90] also includes an FTP based file system (also called ftpFS). At least two projects provide access to FTP servers by implementing an NFS server that functions as an FTP-to-NFS gateway. Alex <ref> [Cat92] </ref> supports read-only access to anonymous FTP servers, while [Gsc94] additionally allows read and write access to authenticated FTP servers. 3 Catcher Implementation In this section we discuss the details of our implementation of the Catcher inside Ufo. <p> The write timeout of a file is always a certain number of seconds. The read timeout can optionally be specified as a percentage of the file's age as in Alex <ref> [Cat92] </ref>. This method is based on the observation that older files are less likely to change than newer files. Therefore older files need to be validated less often. <p> In fact, we are already partially implementing (patching) the getdents system call in order to support Ufo mountpoints in user-unwritable areas such as the root directory. Transferring only whole files introduces three well known problems for extremely large files <ref> [Cat92] </ref>. First, when only a small fraction of a file is actually accessed, a lot of unnecessary data may be transferred. Second, the whole file has to fit on the local disk. In practice we don't expect these two problems to occur frequently. <p> It is possible to intercept and handle read and write system calls in Ufo. The benefit is that open would not always block: 4 reads that operate on the already present part of a file could be executed without waiting for the completion of the whole transfer (see Alex <ref> [Cat92] </ref>). The drawback is that intercepting read and write calls incur a high overhead and requires extra implementation effort. 5 Performance Measurements The main goal of our performance analysis is to measure the overhead introduced by the Catcher mechanism in Ufo.
Reference: [Con95] <author> The Condor Team. </author> <title> Checkpoint & migration of UNIX processes in the Condor distributed processing system. </title> <journal> Dr. Dobbs Journal, </journal> <month> February </month> <year> 1995. </year>
Reference-contexts: and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor <ref> [Con95] </ref> Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Other potential uses of the Catcher for personalized OS extensions include encrypting file systems, file systems which store files in compressed form, confined execution environments for runing untrusted binaries [GWTB96], virtual memory paging [DWAP94, FMP + 95], and process migration <ref> [Con95] </ref>. A potential concern with our approach is its performance overhead. Indeed, intercepting individual system calls is quite expensive and for some OS extensions this overhead would be unacceptable. Nevertheless, Ufo is an example that there are OS extensions for which the Catcher mechanism works well.
Reference: [DWAP94] <author> M. Dahlin, R. Wang, T. Anderson, and D. Patter-son. </author> <title> Cooperative caching: Using remote client memory to improve file system performance. </title> <booktitle> In Proceedings of the USENIX Conference on Operating System Design and Implementation, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: This allows for a wide range of OS functionality to be extended using the Catcher mechanism. Other potential uses of the Catcher for personalized OS extensions include encrypting file systems, file systems which store files in compressed form, confined execution environments for runing untrusted binaries [GWTB96], virtual memory paging <ref> [DWAP94, FMP + 95] </ref>, and process migration [Con95]. A potential concern with our approach is its performance overhead. Indeed, intercepting individual system calls is quite expensive and for some OS extensions this overhead would be unacceptable.
Reference: [EKO95] <author> D. Engler, F. Kaashoek, and J. O'Toole. Exokernel: </author> <title> An operating system architecture for application-level resource managment. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel <ref> [EKO95] </ref>, Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Like ours, the Janus implementation has been designed for Solaris. A lot of current research deals with designing operating systems such that they allow for easier and more efficient user-level extension. Engler et al. <ref> [EKO95] </ref> carry the Mach micro-kernel methodology [ABB + 86] further by removing as much kernel abstraction as possible from the OS. This pushes the kernel/user-level boundary as low as possible, placing most of the OS services outside of the kernel.
Reference: [EP93] <author> P. R. Eggert and D. S. Parker. </author> <title> File systems in user space. </title> <booktitle> In Proceedings of the Usenix Winter 1993 Technical Conference, </booktitle> <address> Berkeley, CA, 1993. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS <ref> [EP93] </ref> Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples.
Reference: [FG91] <author> R. Faulkner and R. Gomes. </author> <title> The process file system and process model in UNIX system V. </title> <booktitle> In Proceedings of the 1991 USENIX Winter Conference, </booktitle> <year> 1991. </year>
Reference-contexts: The Catcher operates as follows: Initially, it connects to the user process and tells the operating system which system calls to intercept. Our implementation which runs under Solaris 2.5.1 uses the System V /proc interface, 2 which was originally developed for debugging purposes <ref> [FG91] </ref>. Instead of just tracing the system calls, we actually change at the user-level the semantics of some of them to implement the global file system. Whenever a system call of interest begins (or completes), the operating system stops the subject process and notifies the Catcher. <p> The return from the system call may also be intercepted and patched by Ufo, though the figure does not show this. 3.2 Catcher Implementation Details In our Solaris implementation, the Catcher monitors user processes using the /proc virtual file system <ref> [FG91] </ref>. This is the same method used by monitoring programs, such as truss or strace, which are also available on a number of other UNIX platforms, including Digital Unix, IRIX, BSD or Linux.
Reference: [Fit96] <author> J. Fitzhardinge. Userfs: </author> <title> A user file system for Linux. </title> <address> ftp://sunsite.unc.edu:pub/Linux/ALPHA/userfs/userfs-0.9.tar.gz, </address> <year> 1996. </year>
Reference-contexts: for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS <ref> [Fit96] </ref> flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux <ref> [Fit96] </ref>, Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. <p> To run at the user level, WebFS relies on the OS extensions provided by SLIC [GPA96], which implements a call-back mechanism to a user process. (WebFS also requires the HTTP server be extended with a set of CGI scripts that service requests.) Similar to SLIC, UserFS <ref> [Fit96] </ref> is an OS extension that enables user-level file systems to be written for Linux. While installing UserFS itself requires kernel recompilation, installing new file modules, such as ftpFS, does not. Plan 9 [PPTT90] also includes an FTP based file system (also called ftpFS).
Reference: [FMP + 95] <author> M. J. Feeley, W. E. Morgan, F. H. Pighin, A. R. Karlin, and H. M. Levy. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: This allows for a wide range of OS functionality to be extended using the Catcher mechanism. Other potential uses of the Catcher for personalized OS extensions include encrypting file systems, file systems which store files in compressed form, confined execution environments for runing untrusted binaries [GWTB96], virtual memory paging <ref> [DWAP94, FMP + 95] </ref>, and process migration [Con95]. A potential concern with our approach is its performance overhead. Indeed, intercepting individual system calls is quite expensive and for some OS extensions this overhead would be unacceptable.
Reference: [GPA96] <author> D. P. Ghormley, D. Petrou, and T. E. Anderson. SLIC: </author> <title> Secure loadable interposition code. </title> <type> Technical Report CSD-96-920, </type> <institution> University of California, Berkeley, </institution> <year> 1996. </year>
Reference-contexts: While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC <ref> [GPA96] </ref> & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition <p> original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC <ref> [GPA96] </ref> & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and <p> Another approach, taken by VINO [SESS94] and SPIN [BSP + 94], is to allow injection of user-written kernel extensions into the kernel domain. A discussion of the issues involved can be found in [SS96]. Another recent project, SLIC <ref> [GPA96] </ref>, is an OS exten-sion to Solaris that allows for plug-ins at both the user and the kernel level. <p> One such example is WebFS [VDA96], a global user-level file system based on the HTTP protocol. To run at the user level, WebFS relies on the OS extensions provided by SLIC <ref> [GPA96] </ref>, which implements a call-back mechanism to a user process. (WebFS also requires the HTTP server be extended with a set of CGI scripts that service requests.) Similar to SLIC, UserFS [Fit96] is an OS extension that enables user-level file systems to be written for Linux.
Reference: [Gsc94] <author> M. Gschwind. </author> <title> FTP access as a user-defined file system. </title> <journal> ACM Operating Systems Review, </journal> <year> 1994. </year>
Reference-contexts: While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs <ref> [Gsc94] </ref>, Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: <p> Plan 9 [PPTT90] also includes an FTP based file system (also called ftpFS). At least two projects provide access to FTP servers by implementing an NFS server that functions as an FTP-to-NFS gateway. Alex [Cat92] supports read-only access to anonymous FTP servers, while <ref> [Gsc94] </ref> additionally allows read and write access to authenticated FTP servers. 3 Catcher Implementation In this section we discuss the details of our implementation of the Catcher inside Ufo.
Reference: [GWTB96] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement <ref> [GWTB96] </ref>, Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Another research project that uses the Unix trace mechanism for implementing an OS extension is Janus <ref> [GWTB96] </ref> which provides a secure, confined environment for running untrusted applications safely by intercepting and selectively denying system calls. Like ours, the Janus implementation has been designed for Solaris. A lot of current research deals with designing operating systems such that they allow for easier and more efficient user-level extension. <p> This allows for a wide range of OS functionality to be extended using the Catcher mechanism. Other potential uses of the Catcher for personalized OS extensions include encrypting file systems, file systems which store files in compressed form, confined execution environments for runing untrusted binaries <ref> [GWTB96] </ref>, virtual memory paging [DWAP94, FMP + 95], and process migration [Con95]. A potential concern with our approach is its performance overhead. Indeed, intercepting individual system calls is quite expensive and for some OS extensions this overhead would be unacceptable. <p> Another interesting research area is protected computing. The system calls define the capabilities a process has and resources it can obtain (memory, disk access, CPU time). We can use the Catcher to limit the resources a process can access or obtain. This approach, implemented in Janus <ref> [GWTB96] </ref>, is especially interesting in the current development of global computing, where one user may run an untrusted binary fetched from the Internet.
Reference: [HKM + 88] <author> J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols, M. Satyanarayanan, R. N. Sidebotham, and M. J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: The Iostone benchmark [IOS87] performs thousands of file accesses (opening, reading, and writing). Because of the large amount of file opens and closes, Ufo runs about 8 times slower on the local file system. The Andrew benchmark <ref> [HKM + 88] </ref> measures five stages in the generation of a software tree.
Reference: [IOS87] <author> IOStone. </author> <title> A synthetic file system performance benchmark. </title> <type> Technical Report TR-074-87, </type> <institution> Princeton University, </institution> <year> 1987. </year>
Reference-contexts: Times are in seconds, with the ratios normalized to the standard OS shown in parenthesis. ( y The Andrew benchmark reports its timing results with a resolution of 1 second. The 0 seconds in the table indicate a measurement between 0 and 1 second.) and handles. The Iostone benchmark <ref> [IOS87] </ref> performs thousands of file accesses (opening, reading, and writing). Because of the large amount of file opens and closes, Ufo runs about 8 times slower on the local file system. The Andrew benchmark [HKM + 88] measures five stages in the generation of a software tree.
Reference: [Jon93] <author> M. B. Jones. </author> <title> Interposition agents: Transparently interposing user code at the system interface. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Computer users have always had the desire to extend operating systems functionality to support new protocols or meet new usage patterns. In this paper we show how to extend a standard Unix operating system (So-laris) completely at the user level. Our approach which is similar to interposition agents <ref> [Jon93] </ref> uses tracing facilities to intercept selected system calls at the user level. The behavior of intercepted system calls is then modified to implement new functionality. <p> WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents <ref> [Jon93] </ref>, Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> This mechanism, which first was used in the context of Mach to implement interposition agents <ref> [Jon93] </ref>, forms the basis for our Ufo implementation. Table 1 lists examples of the above approaches, while Table 2 summarizes their limitations and identifies the context in which they can be applied. <p> Therefore we decided to use the mechanism of intercepting system calls. 2.2 Related OS Extensions The project that is the closest to our own is the work on interposition agents <ref> [Jon93] </ref> which also makes use of the mechanism of intercepting system calls. Interposition agents provide a general system call tracing toolbox, which allows different system calls to be intercepted and handled in alternate ways, as we do in Ufo.
Reference: [MSC + 86] <author> J. Morris, M. Satyanarayananan, M. H. Conner, J. H. Howard, D. S. Rosenthal, and F. D. Smith. Andrew: </author> <title> A distributed personal computing environment. </title> <journal> Communications of the ACM, </journal> <volume> 29(3), </volume> <year> 1986. </year>
Reference-contexts: Examples include NFS [SGK + 85], AFS <ref> [MSC + 86] </ref>, Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries.
Reference: [NAU93] <author> B. C. Neumann, S. S. Augart, and S. Upasani. </author> <title> Using Prospero to support integrated location-independent computing. </title> <booktitle> In Proceedings of the Symposium on Mobile and Location-Independent Computing, </booktitle> <address> Cam-bridge, MA, </address> <year> 1993. </year>
Reference-contexts: Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero <ref> [NAU93] </ref>, Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero <ref> [NAU93] </ref>, and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. Ufo is distinct in that it requires no such modifications to any existing code and runs entirely at the user-level. <p> There are a few systems for global file access that run entirely at the user-level and are user-installable. They are also similar to Ufo in that they extend a local file system to provide uniform and transparent access to heterogeneous remote file servers. Prospero <ref> [NAU93] </ref> and Jade [RP93] both provide access to NFS and AFS file systems, and to FTP servers. Prospero runs at user-level by replacing standard statically linked libraries. This avoids changes to the operating system, but requires re-linking of existing binaries.
Reference: [Nor] <author> A. Norman. </author> <title> Ange-Ftp Manual. Free Software Foundation, </title> <publisher> Inc. </publisher>
Reference-contexts: Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp <ref> [Nor] </ref> Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples.
Reference: [NWO88] <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite network file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: A process can be notified when another process enters or exits selected system calls. While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite <ref> [NWO88] </ref>, Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite <ref> [Wel91, NWO88] </ref>, WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. <p> The user can also specify mountpoints for access methods. In fact that is how the second naming scheme is implemented: if the user does not explicitly specify a mount point for the HTTP method, for example, Ufo uses the implicit mountpoint: local /http method HTTP Similarly to Sprite <ref> [NWO88] </ref>, we have implemented mount points using a prefix table which, given a filename, searches for the longest matching prefix in the list of mount points. Ufo also supports symbolic links. A user can create links to frequently accessed remote directories.
Reference: [PPTT90] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9 from Bell labs. </title> <booktitle> In Proceedings of the UKUUG Conference, </booktitle> <month> July </month> <year> 1990. </year>
Reference-contexts: A process can be notified when another process enters or exits selected system calls. While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 <ref> [PPTT90] </ref> Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 <ref> [PPTT90] </ref> and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. <p> While installing UserFS itself requires kernel recompilation, installing new file modules, such as ftpFS, does not. Plan 9 <ref> [PPTT90] </ref> also includes an FTP based file system (also called ftpFS). At least two projects provide access to FTP servers by implementing an NFS server that functions as an FTP-to-NFS gateway.
Reference: [RP93] <author> H. C. Rao and L. L. Peterson. </author> <title> Accessing files in an internet: The JADE file system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(6), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS [VDA96] Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade <ref> [RP93] </ref>, IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement [GWTB96], Ufo Table 1: Different methods of extending operating system functionality and examples. <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade <ref> [RP93] </ref>. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. Ufo is distinct in that it requires no such modifications to any existing code and runs entirely at the user-level. <p> There are a few systems for global file access that run entirely at the user-level and are user-installable. They are also similar to Ufo in that they extend a local file system to provide uniform and transparent access to heterogeneous remote file servers. Prospero [NAU93] and Jade <ref> [RP93] </ref> both provide access to NFS and AFS file systems, and to FTP servers. Prospero runs at user-level by replacing standard statically linked libraries. This avoids changes to the operating system, but requires re-linking of existing binaries. Jade [RP93] uses dynamic libraries instead and allows most dynamically linked binaries to run <p> Prospero [NAU93] and Jade <ref> [RP93] </ref> both provide access to NFS and AFS file systems, and to FTP servers. Prospero runs at user-level by replacing standard statically linked libraries. This avoids changes to the operating system, but requires re-linking of existing binaries. Jade [RP93] uses dynamic libraries instead and allows most dynamically linked binaries to run unmodified. Changing application libraries works well for most applications, especially when combined with dynamic linking.
Reference: [SESS94] <author> M. Seltzer, Y. Endo, C. Small, and K. Smith. </author> <title> An introduction to the VINO architecture. </title> <type> Technical Report TR34-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference-contexts: Engler et al. [EKO95] carry the Mach micro-kernel methodology [ABB + 86] further by removing as much kernel abstraction as possible from the OS. This pushes the kernel/user-level boundary as low as possible, placing most of the OS services outside of the kernel. Another approach, taken by VINO <ref> [SESS94] </ref> and SPIN [BSP + 94], is to allow injection of user-written kernel extensions into the kernel domain. A discussion of the issues involved can be found in [SS96].
Reference: [SGK + 85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun network file system. </title> <booktitle> In Proceedings of the Summer USENIX conference, </booktitle> <month> June </month> <year> 1985. </year>
Reference-contexts: We now discuss operating system extensions specific to our particular application: remote file transfer. 2.3 OS Extensions for Remote File Systems There are a number of systems that provide transparent access to remote resources on the Internet, many of which have been very successful. Examples include NFS <ref> [SGK + 85] </ref>, AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93].
Reference: [SKK + 90] <author> M. Satyanarayananan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4), </volume> <year> 1990. </year>
Reference-contexts: Examples include NFS [SGK + 85], AFS [MSC + 86], Coda <ref> [SKK + 90] </ref>, ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries.
Reference: [SS96] <author> M. Seltzer and C. </author> <title> Small. A comparison of OS extension technologies. </title> <booktitle> In Proceedings of the 1996 Usenix Technical Conference, </booktitle> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: Another approach, taken by VINO [SESS94] and SPIN [BSP + 94], is to allow injection of user-written kernel extensions into the kernel domain. A discussion of the issues involved can be found in <ref> [SS96] </ref>. Another recent project, SLIC [GPA96], is an OS exten-sion to Solaris that allows for plug-ins at both the user and the kernel level.
Reference: [TLC85] <author> M. Theimer, K. Landtz, and D. Cheriton. </author> <title> Preempt-able remote execution facilities for the V system. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating System Priciples, </booktitle> <month> December </month> <year> 1985. </year>
Reference: [VDA96] <author> A. Vahdat, M. Dahlin, and T. Anderson. </author> <title> Turning the web into a computer. </title> <type> Technical report, </type> <institution> University of California, Berkeley, </institution> <year> 1996. </year>
Reference-contexts: While the original motivation for this functionality was debugging and tracing of system calls, this mechanism can also be used Method Examples and References Change Operating System Sprite [NWO88], Plan 9 [PPTT90] Device Driver AFS, NFS, SLIC [GPA96] & WebFS <ref> [VDA96] </ref> Network Server ftp2nfs [Gsc94], Alex [Cat92] User-level Plug-Ins extended OS: SLIC [GPA96], UserFS [Fit96] flexible/extendible OS: SPIN [BSP + 94], Exokernel [EKO95], Statically Linked Library Newcastle Connection [BMR82], Prospero [NAU93], Condor [Con95] Dynamically Linked Library Jade [RP93], IFS [EP93] Application Specific Ange-ftp [Nor] Intercept System Calls Interposition Agents [Jon93], Confinement <p> Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite [Wel91, NWO88], WebFS <ref> [VDA96] </ref>, Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries. Ufo is distinct in that it requires no such modifications to any existing code and runs entirely at the user-level. <p> Other global file systems also run at the user level, but are not user-installable, since they require extensions to the operating system itself, which in turn requires root access. One such example is WebFS <ref> [VDA96] </ref>, a global user-level file system based on the HTTP protocol.
Reference: [vEBBV95] <author> T. von Eicken, A. Basu, V. Buch, and W. Vo-gels. U-net: </author> <title> A user-level network interface for parallel and distributed computing. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference: [VGA94] <author> A. M. Vahdat, D. P. Ghormley, and T. E. Anderson. </author> <title> Efficient, portable, and robust extension of operating system functionality. </title> <type> Technical Report CS-94-842, </type> <institution> University of California, Berkeley, </institution> <month> December </month> <year> 1994. </year>
Reference: [Wel91] <author> B. B. Welch. </author> <title> Measured performance of caching in the Sprite network file system. </title> <journal> Computer Systems, </journal> <volume> 3(4), </volume> <year> 1991. </year>
Reference-contexts: Examples include NFS [SGK + 85], AFS [MSC + 86], Coda [SKK + 90], ftpFS in Plan 9 [PPTT90] and Linux [Fit96], Sprite <ref> [Wel91, NWO88] </ref>, WebFS [VDA96], Alex [Cat92], Prospero [NAU93], and Jade [RP93]. They all have one significant drawback, however: they either require root access or modifications to the existing operating system, applications or libraries.
References-found: 33

