URL: http://www.cs.arizona.edu/people/gene/PAPERS/aprx.prob.ps
Refering-URL: http://www.cs.arizona.edu/people/gene/vita.html
Root-URL: http://www.cs.arizona.edu
Email: E-mail: kurtz@techfak.uni-bielefeld.de  E-mail: gene@cs.arizona.edu  
Phone: 2  
Title: Estimating the Probability of Approximate Matches  
Author: Stefan Kurtz ? and Gene Myers ?? 
Note: To appear in Proceedings of CPM97 Lecture Notes in Computer Science  
Address: Postfach 100 131, D-33501 Bielefeld, Germany,  85721, USA,  
Affiliation: 1 Technische Fakultat, Universitat Bielefeld,  Department of Computer Science, The University of Arizona, Tucson, Arizona  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> L. Allison and C.S. Wallace. </author> <title> The posterior probability distribution of alignments and its application to parameter estimation of evolutionary trees and to optimization of multiple alignments. </title> <journal> Journal of Molecular Evolution, </journal> <volume> 39 </volume> <pages> 418-430, </pages> <year> 1994. </year>
Reference-contexts: Section 5: Deciding if s 2 S k (P ) generates a string s (P ) 2 CN k (P ) in O (m min (m; k)) time. Section 6: Computing the cluster size g (v) in O ( m min (m; k)) time, where 2 <ref> [1; k + 1] </ref> is depending on ffi and P . Altogether, our Monte-Carlo algorithm achieves a running time of O (jjmk + t (jjm + jjk + m min (m; k))) and requires O (mk) space where t is the number of samples collected. <p> Indeed, carrying this train of thinking to its furthest degree, one arrives at the following lemma: Lemma 2. For any v 2 CN k (P ), ffi (P; v) &gt; k where = max ffi (p i ! ") ffi (p i ! b) j i 2 <ref> [1; m] </ref>; b 2 ; r=i+1 ffi (p i ! ") k ffi (p i ! b) Proof. Let v 2 CN k (P ). We have v = wb for some w 2 fl and some b 2 . <p> Let s be an optimal edit script for P generating v. Then s 6= [ ], ffi (s) = ffi (P; v) k, and the last edit operation in s is not an insertion. It is easy to show that there is an i 2 <ref> [1; m] </ref> and b 2 such that s = s 0 [p i ! b] s 00 where s 0 is an edit script for p 1 p 2 : : : p i1 generating w, and s 00 is a maximal suffix of s consisting of deletions only. <p> We applied our procedure to the same threshold value and the same random patterns, and compared the resulting estimation P r t e with P r after each trial t 2 <ref> [1; 2000] </ref>, by evaluating the deviation a (t) = 100 jP r P r t e j=P r. Figure 1 shows the probability that a (t) &gt; d for d = 10%; 20%; : : :; 50% and t 2 [1; 2000]. <p> t e with P r after each trial t 2 <ref> [1; 2000] </ref>, by evaluating the deviation a (t) = 100 jP r P r t e j=P r. Figure 1 shows the probability that a (t) &gt; d for d = 10%; 20%; : : :; 50% and t 2 [1; 2000]. It reveals that after 1,000 trials we can expect our procedure to compute a very good estimation of the real probability. The average of a (t) over all 10,000 random patterns was 6:99% after 1,000 trials, the median was 8:97%, and the standard deviation was 4:93%.
Reference: 2. <author> W.I. Chang and J. Lampe. </author> <title> Theoretical and Empirical Comparisons of Approximate String Matching Algorithms. </title> <booktitle> In Proc. CPM92, </booktitle> <volume> LNCS 644, </volume> <pages> pages 175-184, </pages> <year> 1992. </year>
Reference: 3. <author> M.O. Dayhoff, R.M. Schwartz, and B.C. Orcutt. </author> <title> A Model of Evolutionary Change in Proteins. Matrices for Detecting Distant Relationships. Atlas of Protein Sequence and Structure, </title> <booktitle> 5 </booktitle> <pages> 345-358, </pages> <year> 1978. </year>
Reference-contexts: The average running times (in seconds) on a DEC Alpha 200 4=233 are shown in the following table: m 10 20 30 40 50 20% 0:3 1:0 2:0 3:2 4:7 In the fourth and fifth experiment, we used the 20-character alphabet of amino-acids and the PAM120 <ref> [3] </ref> scoring function with score 8 for insertions and deletions.
Reference: 4. <author> W.M. Fitch. </author> <title> Random sequences. </title> <journal> Journal of Molecular Biology, </journal> <volume> 163 </volume> <pages> 171-176, </pages> <year> 1983. </year>
Reference: 5. <author> S. Kannan, Z. Sweedyk, and S. Mahaney. </author> <title> Counting and random generation of strings in regular languages. </title> <booktitle> In Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 551-557, </pages> <year> 1995. </year>
Reference-contexts: Therefore, we consider here the development of an unbiased estimation procedure for determining said probability given a specific string P 2 fl and a specific cost function ffi for weighting edit operations. Problems of this type are of general interest, see for example a recent paper <ref> [5] </ref> giving an unbiased estimator for counting the words of a fixed length in a regular language. We were further motivated by a particular application arising in the pattern matching system Anrep designed by us for use in ge-nomic sequence analysis [8,11].
Reference: 6. <author> S. Karlin and S.F. Altschul. </author> <title> Methods for assessing the statistical significance of molecular sequence features by using general scoring schemes. </title> <booktitle> Proc. </booktitle> <institution> Nat. Acad. Sci. U.S.A., </institution> <month> 87 </month> <pages> 2264-2268, </pages> <year> 1990. </year>
Reference: 7. <author> D.E. Knuth, J.H. Morris, and V.R. Pratt. </author> <title> Fast Pattern Matching in Strings. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(2) </volume> <pages> 323-350, </pages> <year> 1977. </year>
Reference-contexts: In the first three experiments we used an alphabet of size four and the unit cost function. For this cost function our implementation runs in O (tmk) time and O (mk) space. We achieved a considerable speedup in practice by using the failure function of the Knuth-Morris-Pratt algorithm <ref> [7] </ref>: whenever a column in table E is computed such that the minimum entry is k, the remaining columns need not be evaluated. Instead, using the precomputed failure function, one can decide v 2 CN k (P ) and compute g (v) in O (k) additional time.
Reference: 8. <author> G. Mehldau and E.W. Myers. </author> <title> A System for Pattern Matching Applications on Biosequences. </title> <journal> CABIOS, </journal> <volume> 9(3) </volume> <pages> 299-314, </pages> <year> 1993. </year>
Reference-contexts: The average of a (t) over all 10,000 random patterns was 6:99% after 1,000 trials, the median was 8:97%, and the standard deviation was 4:93%. In the second experiment, we chose a fixed random pattern of length m = 50 and k = 10. For r 2 <ref> [8; 16] </ref> we evaluated c (2 r ) = 100 j log 2 (P r 2 r e =P r 2 r1 where P r t e is the estimated probability after t trials. <p> Therefore, we can expect can estimation for P r [A k (P; T )] if we run our procedure with ffi and k = (x k 0 ) m = 11:2 m. In the fourth experiment, we again evaluated c (2 r ) for r 2 <ref> [8; 16] </ref>. This time we chose a random pattern of length m = 20 and k = 11:2 m = 224. The size of the sampled set CN k (P ) was estimated to be 2:03 10 22 .
Reference: 9. <author> E.W. Myers. </author> <title> An O(N D) Differences Algorithm. </title> <journal> Algorithmica, </journal> <volume> 2(1) </volume> <pages> 251-266, </pages> <year> 1986. </year>
Reference: 10. <author> E.W. Myers. </author> <title> A Sublinear Algorithm for Approximate Keyword Searching. </title> <journal> Algorithmica, </journal> 12(4/5):345-374, 1994. 
Reference-contexts: Instead, using the precomputed failure function, one can decide v 2 CN k (P ) and compute g (v) in O (k) additional time. For the details of this technique, see <ref> [10, page 352] </ref>. In the first experiment, we employed the neighborhood construction algorithm of [10], to compute the "real" probability P r = P r [A k (P; T )] for k = 2 and 10,000 random patterns of length m = 20. <p> Instead, using the precomputed failure function, one can decide v 2 CN k (P ) and compute g (v) in O (k) additional time. For the details of this technique, see [10, page 352]. In the first experiment, we employed the neighborhood construction algorithm of <ref> [10] </ref>, to compute the "real" probability P r = P r [A k (P; T )] for k = 2 and 10,000 random patterns of length m = 20.
Reference: 11. <author> E.W. Myers. </author> <title> Approximate Matching of Network Expressions with Spacers. </title> <journal> Journal of Computational Biology, </journal> <volume> 3(1) </volume> <pages> 33-51, </pages> <year> 1996. </year>
Reference-contexts: We close the introduction by noting that our treatment is extensible to patterns that are network expressions <ref> [11] </ref> (regular expression without Kleene closure), and to models of the text where characters are generated by a weighted Bernoulli process.
Reference: 12. <author> E. Ukkonen. </author> <title> Algorithms for Approximate String Matching. </title> <journal> Information and Control, </journal> <volume> 64 </volume> <pages> 100-118, </pages> <year> 1985. </year>
Reference: 13. <author> R.A. Wagner and M.J. Fischer. </author> <title> The String to String Correction Problem. </title> <journal> Journal of the ACM, </journal> <volume> 21(1) </volume> <pages> 168-173, </pages> <year> 1974. </year> <title> 12 Fig. 1. P r[a(t) &gt; d] for 10,000 patterns (jj = 4; m = 20; k = 2) Fig. 2. P r[c(2 r ) &gt; d] for a fixed pattern and 1,000 runs (jj = 4; m = 50; k = 10) Fig. 3. P r[c(2 r ) &gt; d] for a fixed pattern and 1,000 runs (jj = 20; m = 20; k = 224) 13 </title>
Reference-contexts: In our context we must turn to the equivalent operational view of an edit script that transforms P into the string it matches as originally introduced, for example, in the seminal work of Wagner and Fischer <ref> [13] </ref>. There are three kinds of edit operations: a ! " denotes the deletion of the character a, a ! b denotes the replacement of the character a by the character b, and " ! b denotes the insertion of the character b. <p> We next wish to know if v = s (P ) is in CN k (P ). To do so, consider performing a standard sequence comparison (cf. <ref> [13] </ref>) between P and v. That is, consider computing the (m+1)fi (n +1) table E (i; j) = ffi (p 1 p 2 : : : p i ; v 1 v 2 : : : v j ) where n = jvj.
References-found: 13

