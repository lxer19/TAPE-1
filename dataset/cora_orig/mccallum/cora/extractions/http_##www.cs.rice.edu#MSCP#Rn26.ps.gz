URL: http://www.cs.rice.edu/MSCP/Rn26.ps.gz
Refering-URL: http://www.cs.rice.edu/MSCP/iloc.html
Root-URL: 
Title: An Intermediate Language for an Optimizing Compiler  
Author: William N. LeFebvre 
Date: September, 1985  
Address: P.O. Box 1892  Houston, Texas 77251  
Affiliation: Department of Computer Science  Rice University  
Note: IR n Programming Environment Newsletter 26  
Abstract-found: 0
Intro-found: 1
Reference: [IR 16 ] <author> Cooper, K., </author> <title> The Code Generator: A Preliminary Design Discussion, IR n Environment Newsletter #16, </title> <institution> Rice University, </institution> <month> February </month> <year> 1985. </year>
Reference-contexts: This experimental compiler is designed, among other things, to investigate the different ways of implementing code optimizations. The method by which an optimizing compiler carries out its task can be thought of as a series of transformations performed on a data structure that represents the program being optimized <ref> [IR 16 ] </ref> [Loveman]. Two common data structures on which these transformations are performed are an abstract syntax tree (ast) and an intermediate language. One goal of the IR n compiler is to investigate the trade-offs involved in performing specific optimizations on each of these two types of data structures. <p> It would be easy to convert from iloc into such a structure. 6.3. Base for Further Generation A high-level intermediate language can sometimes impede optimization by hiding actual machine instructions, so the data manipulation instructions in iloc are essentially at a simple assembly language level <ref> [IR 16 ] </ref>. The control ow instructions, however, are much more involved than those provided by most machines. One might think that these complex instructions would greatly complicate machine code generation. This turns out not to be the case.
Reference: [Loveman] <author> Loveman, D., </author> <title> Program Improvement by Source to Source Transformation, </title> <journal> JACM, </journal> <volume> Vol. 24, No. 1, </volume> <month> January </month> <year> 1977, </year> <pages> pp. 121-145. </pages> <note> DRAFT 5 </note>
Reference-contexts: The method by which an optimizing compiler carries out its task can be thought of as a series of transformations performed on a data structure that represents the program being optimized [IR 16 ] <ref> [Loveman] </ref>. Two common data structures on which these transformations are performed are an abstract syntax tree (ast) and an intermediate language. One goal of the IR n compiler is to investigate the trade-offs involved in performing specific optimizations on each of these two types of data structures.
References-found: 2

