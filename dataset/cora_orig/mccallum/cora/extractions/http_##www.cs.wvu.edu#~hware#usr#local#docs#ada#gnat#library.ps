URL: http://www.cs.wvu.edu/~hware/usr/local/docs/ada/gnat/library.ps
Refering-URL: http://www.cs.wvu.edu/~hware/usr/local/docs/ada/gnat/
Root-URL: http://www.cs.wvu.edu
Title: than one compilation unit. are conceivable. Since the GNAT compiler is free of many restrictions
Author: Franco Gasperoni and Patrick Bazire, "Smart 
Keyword: [ADA94] Tucker Taft et al, Programming Language Ada, Language and Standard Libraries, Draft 5.0 (proposed ISO/ANSI standard), IR-MA-1363-4, Intermetrics  
Date: June 1994  
Note: Thus this kind of mode will be helpful for running the ACVC suite. Of course this is just one possible scenario. Many others  14. Summary 15. Acknowledgement Richard Stallman had great  16. References [ADA83] Reference Manual for the Ada Programming Language, ANSI/MIL-STD 1815A, AJPO, 1983  Inc.,  [GNAT94] Ed Schonberg and Bernard Banner, "The GNAT Project: A GNU-Ada 9X Compiler", Proceedings of Tri-Ada 94, Baltimore, Maryland, 1994 (this volume) [GCC94a] Richard Stallman,  Foundation, 1994 [GCC94b] Richard Kenner, Integrating GNAT into GCC", Proceedings of Tri-Ada 94, Baltimore, Maryland, 1994 (this volume) [SMART94]  Recompilation and the GNAT Compiler", Proceedings of Tri-Ada 94, Baltimore, Maryland, 1994 (this volume)  
Abstract: 13. What do we Lose? We do lose one feature that some may consider important. It is impossible with the GNAT approach to distribute a package for someone to use without at least giving them the source of the package specification. With this system there is no way to distribute black-box libraries that contain hidden information. Clearly one can imagine proprietary software situations in which this would seem like a restriction, but in the GCC world, where we are committed to the free distribution of sources, this seems like an advantage. Furthermore, it is still possible to distribute objects only (with .ali files) for package bodies, without having to distribute their sources, which leaves some room for proprietary implementations of components. Although somewhat radical by conventional Ada standards, we think that a good case can be made that the GNAT approach is superior. Certainly it meets the important goals of being consistent with the Ada standard, and being far less unfamiliar to non-Ada programmers. We also think it is much easier to understand than the conventional library-based model. This is not the first attempt to use a source-based approach for Ada compilation ( in particular the York compiler also uses a source based approach), but GNAT is the most radical, and the only one that we know of to completely abandon the notion of a centralized library file. We believe that this approach is superior in all respects to the conventional Ada library scheme, and that its advantages in easing interface between Ada and other languages and tools will be of critical importance in increasing acceptance for the use of Ada in the commercial world. Many people inside and outside the GNAT team have contributed to the design of the GNAT compilation system and its associated model. We particularly want to recognize the contribution of Richard Stallman. We started out on this project thinking entirely conventionally, that is Ada-conventionally, and assumed we would have a library in the usual manner, as indeed the previous NYU compilers for Ada have done. the purpose of the library, and when he did understand it, he disliked it. Not only did it seem overly complicated but also seemed to him to have actively undesirable characteristics. In particular he found it unacceptable that the meaning of a program could change depending on the order of compilation of the sources, and furthermore that programmers would find this desirable. The principle that a program is defined by its sources seemed inviolable to him (as it does to us now). We patiently explained that Ada required this approach, but Richard insisted that there had to be another way of looking at it. After some heated debate, we arrived at a compromise which included some, but not all the elements of the design we describe here. In particular, we were still planning on saving intermediate tree representations, and on being basically library based, although we had agreed on distributing the library into separate object modules. As we worked on the system, it gradually became apparent that we could go much further along the source-based path, and end up with the design described in this paper and implemented today in current versions of GNAT. It is clear that we would never have moved off in this direction in the first place without the inspiration and prodding from Stall-man to re-examine our assumptions afresh. 
Abstract-found: 1
Intro-found: 1
Reference: [ADA83] <institution> Reference Manual for the Ada Programming Language, ANSI/MIL-STD 1815A, AJPO, </institution> <year> 1983 </year>
Reference: [ADA94] <author> Tucker Taft et al, </author> <title> Programming Language Ada, Language and Standard Libraries, Draft 5.0 (proposed ISO/ANSI standard), </title> <publisher> IR-MA-1363-4, Intermetrics Inc., </publisher> <month> June </month> <year> 1994 </year>
Reference: [GNAT94] <author> Ed Schonberg and Bernard Banner, </author> <title> "The GNAT Project: A GNU-Ada 9X Compiler", </title> <booktitle> Proceedings of Tri-Ada 94, </booktitle> <address> Baltimore, Maryland, </address> <note> 1994 (this volume) </note>
Reference: [GCC94a] <author> Richard Stallman, </author> <title> "Using and Porting GNU CC", Free Software Foundation, </title> <year> 1994 </year>
Reference: [GCC94b] <author> Richard Kenner, </author> " <title> Integrating GNAT into GCC", </title> <booktitle> Proceedings of Tri-Ada 94, </booktitle> <address> Baltimore, Maryland, </address> <note> 1994 (this volume) </note>

References-found: 5

