URL: http://www.cs.toronto.edu/~gus/thesis.ps.gz
Refering-URL: http://www.cs.toronto.edu/~gus/
Root-URL: http://www.cs.toronto.edu
Title: WebOQL: Exploiting Document Structure in Web Queries  
Author: by Gustavo O. Arocena 
Degree: A thesis submitted in conformity with the requirements for the degree of Master of Science  
Note: Copyright by Gustavo O. Arocena 1997  
Address: Toronto  
Affiliation: Graduate Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: [ACM93] <author> S. Abiteboul, S. Cluet, T. Milo, </author> <title> Querying and updating the file, </title> <booktitle> in Proceedings of the 19th Int. Conf. on Very Large Databases, Dublin, </booktitle> <pages> pp. 73-84, </pages> <year> 1993. </year>
Reference-contexts: The problem of handling structured documents as databases has been addressed in the context of office information systems [GZC89], and in the context of the integration of SGML with databases <ref> [ACM93, AC+97] </ref>. However, both of these models are strongly typed, i.e., they assume full knowledge of the structure and meaning of the documents. In the context of the Web, this WebOQL: Exploiting Document Structure in Web Queries 3 assumption is not very realistic. <p> But once again, we want to stress that our data model is not biased to any particular representation of documents as trees, nor it is concerned about how the mapping from textual to internal representation is done. For example, techniques similar to those described in <ref> [ACM93] </ref> could be used. <p> Document Query Languages The idea of applying database techniques to manipulate or query structured documents 12 WebOQL: Exploiting Document Structure in Web Queries has been previously investigated in several projects, including [GZC89], in the context of office information systems, and <ref> [ACM93, AC+96] </ref>, in the context of the integration of SGML with databases. Although largely different from one another, both approaches are strongly typed. In [AC+96], documents are mapped to an instance of an object oriented database by means of semantic actions attached to a grammar.
Reference: [AC+97] <author> S. Abiteboul, S. Cluet, V . Christophides, T. Milo, G. Moerkotte, J. Simeon, </author> <title> Querying documents in object databases, </title> <booktitle> in Int. J. of Digital Libraries 1(1), </booktitle> <pages> pp. 5-19, </pages> <year> 1997. </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents <ref> [AC+97, CA+94, GZC89] </ref>, querying semistructured data [AQ+96, BD+96] and querying graphs [MW95, Yan90]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The problem of handling structured documents as databases has been addressed in the context of office information systems [GZC89], and in the context of the integration of SGML with databases <ref> [ACM93, AC+97] </ref>. However, both of these models are strongly typed, i.e., they assume full knowledge of the structure and meaning of the documents. In the context of the Web, this WebOQL: Exploiting Document Structure in Web Queries 3 assumption is not very realistic. <p> First, it introduces the idea of querying a document by manipulating its abstract syntax tree. The usual approach to querying structured documents is to use tailored wrapper programs that map them to instances of some data model <ref> [AC+97, AM+97, HG+97] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new type of document, usually using either a parser generator or a Perl-like filtering language. <p> Recall that the intersection of two regular languages is also a regular language [AHU79]. WebOQL: Exploiting Document Structure in Web Queries 51 Chapter 5 Many existing systems address the problem of querying databases represented as documents. In <ref> [AC+97, AM+97, GZC89] </ref>, the authors rely on two hypotheses: a) for each document to be queried, there exists a custom-tailored program that maps it to an instance of the corresponding data model; b) the actual document complies witha predefined, database-like schema or type.
Reference: [AHU79] <author> A. Aho, J. Hopcroft and J. Ullman, </author> <title> Introduction to automata theory, languages and computation, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1979. </year>
Reference-contexts: The symbol true denotes the predicate that always evaluates to true. Navigation Patterns 46 WebOQL: Exploiting Document Structure in Web Queries Definition 4.2. a navigation pattern (NP) is a regular expression over PREDICATE. The syntax of NPs is the usual syntax of regular expressions <ref> [AHU79] </ref>: # (the empty NP) is a NP; p PREDICATE is a NP; if n and m are NPs, then n + m, n m, n* and (n) are NPs. <p> The equivalence between navigation patterns and navigation graphs is the counterpart of the equivalence between regular expression and transition graphs, and it can be shown using the same reasoning <ref> [AHU79] </ref>. Navigation Graphs Definition 4.5. <p> But since from the point of view of the data complexity n and e are constants, then the cost is O (n e). 1. Recall that the intersection of two regular languages is also a regular language <ref> [AHU79] </ref>. WebOQL: Exploiting Document Structure in Web Queries 51 Chapter 5 Many existing systems address the problem of querying databases represented as documents.
Reference: [AHU83] <author> A. Aho, J. Hopcroft and J. Ullman, </author> <title> Data Structures and Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: The result is displayed besides the query. In Query 1, x iterates over the simple trees of csPapers (i.e., over the research groups) 1. We refer to the traditional notion of prefix of an ordered tree or list, i.e., a (possibly null) left-hand portion of it <ref> [AHU83] </ref>. [Label: 1] [Label: 2] [Label: 3] [A: 1] [B: 1] [Label: 1] [Label: 2] [Label: 3] [A: 1] [B: 1] [A: 1] [B: 1] [Label: 1] [Label: 2] [Label: 3] [A: 1] [B: 1] [Label: 2] [Label: 3] [B: 1] [Label: 3] (a)A Tree t (b) Simple Trees of t
Reference: [ASU86] <author> A. Aho, R. Sethi and J. Ullman, </author> <booktitle> Compilers: principles, techniques, and tools, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: Modeling and Querying HTML Documents 52 WebOQL: Exploiting Document Structure in Web Queries 5.1 Abstract Syntax Trees A common practice in the construction of language processors is to use abstract syntax trees as an internal representation of parsed text <ref> [ASU86] </ref>. An abstract syntax tree is a tree that reflects the hierarchical relationship among the components of a piece of structured text in a form that is independent of the grammar used to parse the text.
Reference: [AHV95] <author> S. Abiteboul, R. Hull, V. Vianu, </author> <title> Foundations of databases, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: The presence of order, repetitions and web creation makes it difficult to analyze the expressive power of WebOQL along the lines of analogous studies for other query languages <ref> [AHV95] </ref>. The most appropriate formalism for analyzing WebOQLs expressive power seems to be Structural Recursion [BN+95, BDS95], which is a framework for defining systematic traversals of structured objects.
Reference: [AK89] <author> S. Abiteboul, P. Kanellakis, </author> <title> Object identity as a query language primitive, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 159-173, </pages> <year> 1989. </year>
Reference-contexts: WebOQL subsumes such capabilities and provides a more uniform framework for extracting data from hypertexts and for generating derived hypertexts. In these systems, URLs are handled similarly to oids in OODBMSs: these systems provide facilities for creating URLs using skolem functions <ref> [AK89] </ref>, and for assigning URLs to documents. In WebOQL, URLs are just strings. As we will see, this approach is very flexible and simpler than the ones mentioned.
Reference: [AMM97] <author> G. Arocena, A. Mendelzon, G. Mihaila, </author> <title> Applications of a Web query language, </title> <booktitle> in Proc. of 6th. Int. WWW Conference, </booktitle> <address> Santa Clara, California, </address> <pages> pp. 589-596, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: We have used WebSQL for performing tasks related to website management and intelligent searches on the Web <ref> [AMM97] </ref>. <p> Web Query Languages Several research projects have recently investigated the idea of viewing the Web as a database that can be queried with a declarative language: WebSQL <ref> [MMM96, AMM97] </ref>, W3QL [KS95] and WebLog [LSS96]. WebSQLs most salient features are its simple formal semantics and the powerful notation of path regular expressions for expressing graph searches. However, its relational foundation is a limitation for representing structured documents.
Reference: [AM97] <author> P. Atzeni, G. Mecca, </author> <title> Cut and paste, </title> <booktitle> in Proc. of 16th. ACM Symp. on PODS, </booktitle> <address> Tucson, Arizona, </address> <month> May, </month> <pages> pp. 144-153, </pages> <year> 1997. </year>
Reference-contexts: In [GZC89], documents are modeled using nested ordered relations. This model is similar to WebOQLs, except that it is strongly typed. The query language is a generalization of nested relational algebra with aggregation. Document wrapping languages <ref> [AM97, HG+97] </ref> can also be regarded as document query languages. In [AM97] the authors present editor programs, a formalism for text manipulation based on familiar concepts of text editing, such as search, cut, paste, and clipboard. <p> In [GZC89], documents are modeled using nested ordered relations. This model is similar to WebOQLs, except that it is strongly typed. The query language is a generalization of nested relational algebra with aggregation. Document wrapping languages [AM97, HG+97] can also be regarded as document query languages. In <ref> [AM97] </ref> the authors present editor programs, a formalism for text manipulation based on familiar concepts of text editing, such as search, cut, paste, and clipboard. Tagged text can be WebOQL: Exploiting Document Structure in Web Queries 13 queried using this formalism, but without building an explicit hierarchical representation.
Reference: [AM+97] <author> P. Atzeni, G. Mecca, P. Merialdo, </author> <title> Semistructured and structured data in the Web: going back and forth, </title> <booktitle> in Proc. of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <pages> pp. 1-9, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: Such facility is present in website restructuring systems like Araneus <ref> [AM+97] </ref> and Strudel [FF+97]. However, neither of these systems has the flexibility we want for exploiting the internal structure of documents: Araneus is strongly typed, and Strudel ignores the internal structure. <p> First, it introduces the idea of querying a document by manipulating its abstract syntax tree. The usual approach to querying structured documents is to use tailored wrapper programs that map them to instances of some data model <ref> [AC+97, AM+97, HG+97] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new type of document, usually using either a parser generator or a Perl-like filtering language. <p> Using such facilities we can easily represent, for instance, relational tables and structured documents without the need to devise ad-hoc encodings to simulate them. WebOQL: Exploiting Document Structure in Web Queries 11 Website Restructuring Systems In some sense, WebOQL generalizes most facilities provided by website restructuring systems like Araneus <ref> [AM+97] </ref> and Strudel [FF+97]. These systems exploit the knowledge of a websites structure for defining alternative views over its content. <p> Recall that the intersection of two regular languages is also a regular language [AHU79]. WebOQL: Exploiting Document Structure in Web Queries 51 Chapter 5 Many existing systems address the problem of querying databases represented as documents. In <ref> [AC+97, AM+97, GZC89] </ref>, the authors rely on two hypotheses: a) for each document to be queried, there exists a custom-tailored program that maps it to an instance of the corresponding data model; b) the actual document complies witha predefined, database-like schema or type.
Reference: [AQ+96] <author> S. Abiteboul, D. Quass, J. McHugh, J. Widom, J.L. Wiener, </author> <title> The Lorel query language for semistructured data, </title> <booktitle> in Int. J. of Digital Libraries 1(1), </booktitle> <pages> pp. 68-88, </pages> <year> 1997 </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents [AC+97, CA+94, GZC89], querying semistructured data <ref> [AQ+96, BD+96] </ref> and querying graphs [MW95, Yan90]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> This difficulty may explain the lack of support provided by Web query languages for exploiting document structure. The problem of querying data whose structure is unknown or irregular has been addressed, although not in the context of the Web, by the so-called query languages for semi-structured data <ref> [AQ+96, BD+96] </ref>. The approach followed by these models is to provide a schema-less, graph-based data model and query primitives for expressing graph traversal and for dealing with type and structure mismatches. The language we propose inherits several of these ideas. <p> For example, techniques similar to those described in [ACM93] could be used. System Architecture WebOQL is based on the middleware 1 approach to data integration used in several other projects <ref> [AQ+96, FF+97] </ref>, that is, the use of a flexible common data model and wrappers that map data represented in terms of the sources models to the common model (see Figure 1.4). <p> The problem of querying data whose structure is unknown or irregular has been addressed, although not in the context of the Web, by the so-called query languages for semi-structured data Lorel <ref> [AQ+96] </ref> and UnQL [BDS96]. Lorel was designed as a query language for a repository where information is integrated from multiple, heterogeneous data sources, where there may be discrepancies on how equivalent entities are represented in each source. <p> Editor programs are used to build wrappers for the Araneus system. In [HG+97], the authors use hierarchical text patterns to build hierarchical objects from structured pieces of text. This tool is used for building wrappers for the Lore system <ref> [AQ+96] </ref>. In WebOQL, we can also use hierarchical patterns, but they apply to paths in the structure, rather than to pure text. <p> In [AC+97, AM+97, GZC89], the authors rely on two hypotheses: a) for each document to be queried, there exists a custom-tailored program that maps it to an instance of the corresponding data model; b) the actual document complies witha predefined, database-like schema or type. In semistructured models <ref> [AQ+96, BD+96] </ref>, the second hypothesis is relaxed, but they still assume the existence of ad-hoc translators. In this chapter we present our technique for querying structured documents in WebOQL. <p> The original motivation for this work was to overcome a common limitation observed in query languages for the Web [MMM96, KS95, LSS96], namely, the lack of support for exploiting the internal structure of documents. This led us to study query languages for semistructured data <ref> [AQ+96, BDS96] </ref>, which address the problem of querying data whose structure is unknown or irregular (a typical characteristic of Web data) in domains other than the Web. WebOQLs data model can be regarded as semistructured, in the sense that it is schema-less but, unlike the models presented in [AQ+96, BDS96], WebOQL <p> semistructured data <ref> [AQ+96, BDS96] </ref>, which address the problem of querying data whose structure is unknown or irregular (a typical characteristic of Web data) in domains other than the Web. WebOQLs data model can be regarded as semistructured, in the sense that it is schema-less but, unlike the models presented in [AQ+96, BDS96], WebOQL supports basic abstractions such as records and ordering, which are essential for naturally modeling documents and tables. <p> Nevertheless, the integration of integer and floating point numbers into the data model is not straightforward due to the lack of typing. This would make necessary to define a system of coercion rules like the one proposed in <ref> [AQ+96] </ref>. Other possible solution would be to introduce simple, statically checkable, typing rules. Second, in this work we have not addressed two fundamental issues for a query language: a precise characterization of its expressive power and possible optimization techniques.
Reference: [BD+96] <author> P. Buneman, S. Davidson, G. Hillebrand, D. Suciu, </author> <title> A query language and optimization techniques for unstructured data, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> Montreal, Canada, </address> <pages> pp. 505-516, </pages> <year> 1996. </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents [AC+97, CA+94, GZC89], querying semistructured data <ref> [AQ+96, BD+96] </ref> and querying graphs [MW95, Yan90]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> This difficulty may explain the lack of support provided by Web query languages for exploiting document structure. The problem of querying data whose structure is unknown or irregular has been addressed, although not in the context of the Web, by the so-called query languages for semi-structured data <ref> [AQ+96, BD+96] </ref>. The approach followed by these models is to provide a schema-less, graph-based data model and query primitives for expressing graph traversal and for dealing with type and structure mismatches. The language we propose inherits several of these ideas. <p> In [AC+97, AM+97, GZC89], the authors rely on two hypotheses: a) for each document to be queried, there exists a custom-tailored program that maps it to an instance of the corresponding data model; b) the actual document complies witha predefined, database-like schema or type. In semistructured models <ref> [AQ+96, BD+96] </ref>, the second hypothesis is relaxed, but they still assume the existence of ad-hoc translators. In this chapter we present our technique for querying structured documents in WebOQL.
Reference: [BDS95] <author> P. Buneman, S. Davidson, D. Suciu, </author> <title> Programming constructs for unstructured data, </title> <booktitle> in Proc. of 5th Int. Workshop on DBPL:12, </booktitle> <address> Gubbio, </address> <month> Sept. </month> <year> 1995. </year> <title> 70 WebOQL: Exploiting Document Structure in Web Queries </title>
Reference-contexts: The presence of order, repetitions and web creation makes it difficult to analyze the expressive power of WebOQL along the lines of analogous studies for other query languages [AHV95]. The most appropriate formalism for analyzing WebOQLs expressive power seems to be Structural Recursion <ref> [BN+95, BDS95] </ref>, which is a framework for defining systematic traversals of structured objects. The vext form of structural recursion, described in [BDS95], seems to capture the subset of WebOQL obtained by eliminating web creation, ordering and tail variables. <p> The most appropriate formalism for analyzing WebOQLs expressive power seems to be Structural Recursion [BN+95, BDS95], which is a framework for defining systematic traversals of structured objects. The vext form of structural recursion, described in <ref> [BDS95] </ref>, seems to capture the subset of WebOQL obtained by eliminating web creation, ordering and tail variables.
Reference: [BN+95] <author> P. Buneman, S. Naqvi, V. Tannen and L. Wong, </author> <title> Principles of programming with complex objects and collection types, </title> <booktitle> in Theoretical Computer Science 149, </booktitle> <pages> pp. 3-48, </pages> <year> 1995. </year>
Reference-contexts: The presence of order, repetitions and web creation makes it difficult to analyze the expressive power of WebOQL along the lines of analogous studies for other query languages [AHV95]. The most appropriate formalism for analyzing WebOQLs expressive power seems to be Structural Recursion <ref> [BN+95, BDS95] </ref>, which is a framework for defining systematic traversals of structured objects. The vext form of structural recursion, described in [BDS95], seems to capture the subset of WebOQL obtained by eliminating web creation, ordering and tail variables.
Reference: [Cat96] <author> R. Cattell (Ed.), </author> <title> The Object database standard, ODMG-93, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, California, </address> <year> 1996. </year>
Reference-contexts: As a particular case, a query can restructure just one page. The query language is purely functional; queries can be nested arbitrarily, like in OQL <ref> [Cat96] </ref>. WebOQL has a formal semantics, and the expressive power of the language is bounded to express feasible queries, i.e., queries of polynomial complexity. Regarding expressive power, WebOQL can simulate all operations in nested relational algebra and can compute transitive closure on an arbitrary binary relation.
Reference: [CA+94] <author> V. Christophides, S. Abiteboul, S. Cluet and M. Scholl, </author> <title> From structured documents to novel query facilities, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 313-324, </pages> <year> 1994. </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents <ref> [AC+97, CA+94, GZC89] </ref>, querying semistructured data [AQ+96, BD+96] and querying graphs [MW95, Yan90]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective.
Reference: [FF+97] <author> M. Fernandez, D. Florescu, A. Levy, D. Suciu, </author> <title> A query language and processor for a Web-Site management system, </title> <booktitle> in Proc. of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <pages> pp. 26-33, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: Such facility is present in website restructuring systems like Araneus [AM+97] and Strudel <ref> [FF+97] </ref>. However, neither of these systems has the flexibility we want for exploiting the internal structure of documents: Araneus is strongly typed, and Strudel ignores the internal structure. In addition to synthesizing ideas from Web query languages, semistructured query languages and website restructuring systems, WebOQL makes several contributions. <p> For example, techniques similar to those described in [ACM93] could be used. System Architecture WebOQL is based on the middleware 1 approach to data integration used in several other projects <ref> [AQ+96, FF+97] </ref>, that is, the use of a flexible common data model and wrappers that map data represented in terms of the sources models to the common model (see Figure 1.4). <p> WebOQL: Exploiting Document Structure in Web Queries 11 Website Restructuring Systems In some sense, WebOQL generalizes most facilities provided by website restructuring systems like Araneus [AM+97] and Strudel <ref> [FF+97] </ref>. These systems exploit the knowledge of a websites structure for defining alternative views over its content.
Reference: [Ghe87] <author> C. Ghezzi, M. Jazayeri, </author> <title> Programming language concepts, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: WebOQL can simulate all nested relational algebra operators and can compute transitive closure on an arbitrary binary relation. 1. Map is a second-order function that applies a function to each of the elements of a collection and builds a collection with the results <ref> [Ghe87] </ref>. For instance, if inc denotes the function that adds 1 to a number, then map (inc)(&lt;1 2 3&gt;) is <2 3 4>. 44 WebOQL: Exploiting Document Structure in Web Queries For relational projection, selection, union, and cartesian product, the simulation is trivial.
Reference: [GZC89] <author> R. Gting, R. Zicari, D. Choy, </author> <title> An algebra for structured office documents, </title> <booktitle> in ACM TOIS 7(2), </booktitle> <pages> pp. 123-157, </pages> <year> 1989. </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents <ref> [AC+97, CA+94, GZC89] </ref>, querying semistructured data [AQ+96, BD+96] and querying graphs [MW95, Yan90]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The problem of handling structured documents as databases has been addressed in the context of office information systems <ref> [GZC89] </ref>, and in the context of the integration of SGML with databases [ACM93, AC+97]. However, both of these models are strongly typed, i.e., they assume full knowledge of the structure and meaning of the documents. <p> As we will see, this approach is very flexible and simpler than the ones mentioned. Document Query Languages The idea of applying database techniques to manipulate or query structured documents 12 WebOQL: Exploiting Document Structure in Web Queries has been previously investigated in several projects, including <ref> [GZC89] </ref>, in the context of office information systems, and [ACM93, AC+96], in the context of the integration of SGML with databases. Although largely different from one another, both approaches are strongly typed. <p> This greatly simplifies the structure of the trees (for instance, the abstract syntax tree for a list of pairs clearly has only two levels of nesting, one for the list and the other for the pairs), and makes them easy to manipulate. In <ref> [GZC89] </ref>, documents are modeled using nested ordered relations. This model is similar to WebOQLs, except that it is strongly typed. The query language is a generalization of nested relational algebra with aggregation. Document wrapping languages [AM97, HG+97] can also be regarded as document query languages. <p> Recall that the intersection of two regular languages is also a regular language [AHU79]. WebOQL: Exploiting Document Structure in Web Queries 51 Chapter 5 Many existing systems address the problem of querying databases represented as documents. In <ref> [AC+97, AM+97, GZC89] </ref>, the authors rely on two hypotheses: a) for each document to be queried, there exists a custom-tailored program that maps it to an instance of the corresponding data model; b) the actual document complies witha predefined, database-like schema or type.
Reference: [HG+97] <author> J. Hammer, H. Garcia-Molina, J. Cho, R. Aranha, A. Crespo, </author> <title> Extracting semistructured information from the Web, </title> <booktitle> in Proceedings of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <pages> pp. 18-25, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: First, it introduces the idea of querying a document by manipulating its abstract syntax tree. The usual approach to querying structured documents is to use tailored wrapper programs that map them to instances of some data model <ref> [AC+97, AM+97, HG+97] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new type of document, usually using either a parser generator or a Perl-like filtering language. <p> In [GZC89], documents are modeled using nested ordered relations. This model is similar to WebOQLs, except that it is strongly typed. The query language is a generalization of nested relational algebra with aggregation. Document wrapping languages <ref> [AM97, HG+97] </ref> can also be regarded as document query languages. In [AM97] the authors present editor programs, a formalism for text manipulation based on familiar concepts of text editing, such as search, cut, paste, and clipboard. <p> Tagged text can be WebOQL: Exploiting Document Structure in Web Queries 13 queried using this formalism, but without building an explicit hierarchical representation. Editor programs are used to build wrappers for the Araneus system. In <ref> [HG+97] </ref>, the authors use hierarchical text patterns to build hierarchical objects from structured pieces of text. This tool is used for building wrappers for the Lore system [AQ+96]. In WebOQL, we can also use hierarchical patterns, but they apply to paths in the structure, rather than to pure text.
Reference: [Inf97] <institution> Informix Inc., </institution> <note> Web Datablade module, at http://www.informix.com/informix/products/techbrfs/ dblade/datasht/webdb.htm. </note>
Reference-contexts: Database Gateways Systems in this category can be broadly divided in two groups: systems that enable the use of databases as storage backends for all the information provided by a website <ref> [Inf97] </ref>, and systems that export data stored in databases to the Web [NS96]. WebOQL generalizes the facilities provided by systems in the second group (these systems are basically report generators, which typically allow one to create one document from the result of one or more queries to a database).
Reference: [KS95] <author> D. Konopnicki, O. Shmueli, W3QS: </author> <title> A query system for the World Wide Web, </title> <booktitle> in Proceedings of the 21th Int. Conf. on Very Large Databases, </booktitle> <address> Zurich, </address> <pages> pp. 54-65, </pages> <year> 1996. </year>
Reference-contexts: Web Query Languages Several research projects have recently investigated the idea of viewing the Web as a database that can be queried with a declarative language: WebSQL [MMM96, AMM97], W3QL <ref> [KS95] </ref> and WebLog [LSS96]. WebSQLs most salient features are its simple formal semantics and the powerful notation of path regular expressions for expressing graph searches. However, its relational foundation is a limitation for representing structured documents. <p> For some applications that perform costly queries on the Web, a breadth-first approach would be a better strategy. We are considering the possibility of making the type of traversal a parameter, as it is done in <ref> [KS95] </ref>. WebOQL: Exploiting Document Structure in Web Queries 31 links having the string Next as label. For building the full-text index we need to feed the indexer with the text and the URL of each document. <p> In this thesis we have presented the WebOQL system, which provides a general framework for performing several forms of data restructuring in the context of the Web. The original motivation for this work was to overcome a common limitation observed in query languages for the Web <ref> [MMM96, KS95, LSS96] </ref>, namely, the lack of support for exploiting the internal structure of documents.
Reference: [LSS96] <author> L. Lakshmanan, F. Sadri, I. Subramanian, </author> <title> A declarative language for querying and restructuring the Web, </title> <booktitle> in Proceedings of the 6th Int. Workshop on Research Issues in Data Engineering, </booktitle> <address> New Orleans, </address> <pages> pp. 12-21, </pages> <year> 1996. </year>
Reference-contexts: Web Query Languages Several research projects have recently investigated the idea of viewing the Web as a database that can be queried with a declarative language: WebSQL [MMM96, AMM97], W3QL [KS95] and WebLog <ref> [LSS96] </ref>. WebSQLs most salient features are its simple formal semantics and the powerful notation of path regular expressions for expressing graph searches. However, its relational foundation is a limitation for representing structured documents. <p> Closer in spirit to WebSQL, WebLog proposes a more abstract approach to querying the Web, based on a logic-programming perspective, although the formal semantics of the language is not specified in <ref> [LSS96] </ref>. Like W3QS, Weblog also emphasizes the integration with external functions, but unlike WebSQL and W3QS, it supports the generation of URLs. <p> In this thesis we have presented the WebOQL system, which provides a general framework for performing several forms of data restructuring in the context of the Web. The original motivation for this work was to overcome a common limitation observed in query languages for the Web <ref> [MMM96, KS95, LSS96] </ref>, namely, the lack of support for exploiting the internal structure of documents.
Reference: [Mih96] <author> G. Mihaila, WebSQL: </author> <title> an SQL-like query language for the World Wide Web, </title> <type> Masters Thesis, </type> <institution> University of Toronto, </institution> <year> 1996. </year>
Reference: [MMM96] <author> A. Mendelzon, G. Mihaila, T. Milo, </author> <title> Querying the World Wide Web, </title> <booktitle> in Proc. IEEE Int. Conf. on Parallel and Distributed Information Systems, Miami, </booktitle> <pages> pp. 80-91, </pages> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: Web Query Languages Several research projects have recently investigated the idea of viewing the Web as a database that can be queried with a declarative language: WebSQL <ref> [MMM96, AMM97] </ref>, W3QL [KS95] and WebLog [LSS96]. WebSQLs most salient features are its simple formal semantics and the powerful notation of path regular expressions for expressing graph searches. However, its relational foundation is a limitation for representing structured documents. <p> In this thesis we have presented the WebOQL system, which provides a general framework for performing several forms of data restructuring in the context of the Web. The original motivation for this work was to overcome a common limitation observed in query languages for the Web <ref> [MMM96, KS95, LSS96] </ref>, namely, the lack of support for exploiting the internal structure of documents.
Reference: [MW95] <author> A. Mendelzon, P. Wood, </author> <title> Finding regular simple paths in graph databases, </title> <journal> SIAM J. Comp. </journal> <volume> 24(6), </volume> <pages> pp. 1235-1258, </pages> <year> 1995. </year>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents [AC+97, CA+94, GZC89], querying semistructured data [AQ+96, BD+96] and querying graphs <ref> [MW95, Yan90] </ref>. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. In this thesis we present the WebOQL system, whose goal is to provide such a framework. <p> Our algorithm is related to Mendelzon and Woods algorithm <ref> [MW95] </ref> for finding pairs of nodes in a labeled graph such that the path between them matches a regular expression. However, there are several important differences between both. First, Mendelzon and Woods algorithm restricts the searches to simple paths.
Reference: [NS96] <author> T. Nguyen, V. Srinivasan, </author> <title> Accessing relational databases from the WWW, in Proceedings of ACM SIGMOD Int. </title> <booktitle> Conf. on Management of Data, </booktitle> <address> Montreal, Canada, </address> <pages> pp. 529-540, </pages> <year> 1996. </year> <title> WebOQL: Exploiting Document Structure in Web Queries 71 </title>
Reference-contexts: Database Gateways Systems in this category can be broadly divided in two groups: systems that enable the use of databases as storage backends for all the information provided by a website [Inf97], and systems that export data stored in databases to the Web <ref> [NS96] </ref>. WebOQL generalizes the facilities provided by systems in the second group (these systems are basically report generators, which typically allow one to create one document from the result of one or more queries to a database).
Reference: [PGMW95] <author> Y. Papakonstantinou, H. Garcia Molina, J. Widom, </author> <title> Object exchange across heterogeneous information sources, </title> <booktitle> in Proceedings of the 11th Int. Conf. on Data Engineering, Taipei, </booktitle> <pages> pp. 251-260, </pages> <year> 1995. </year>
Reference-contexts: Accordingly, Lorel focuses on solving the problem of type and structure mismatches between entities that, although semantically homogeneous, may have different representations. Lorel solves these problems by an extensive use of coercions. Lorel uses OEM graphs <ref> [PGMW95] </ref> as its data model. An OEM graph is a labeled graph whose nodes are divided into two disjoint sets, atomic and complex; atomic nodes have no outgoing edges.
Reference: [Sun97] <author> Sun Microsystems Inc., </author> <title> The JavaCC compiler compiler, </title> <address> http://suntest.sun.com/JavaCC/. </address>
Reference-contexts: Execution is performed directly on the expression trees: each node in the tree has an associated behavior, that specifies how to execute its subtrees and how to process the results in order to yield its own value. We built the WebOQL parser using the JavaCC compiler compiler <ref> [Sun97] </ref>. The grammar file contains 380 lines. The implementation of the whole interpreter comprises 55 classes and roughly 3500 lines of Java code (excluding the code generated by JavaCC).
Reference: [W3C] <author> W3 Consortium, </author> <title> HyperText Markup Language, </title> <note> available from http://www.w3.org/pub/ WWW/MarkUp. </note>
Reference-contexts: Query 8 illustrates how to get the first two simple trees of a tree. 1. We assume the reader is familiar with the basics of the HTML language. See <ref> [W3C] </ref> for a brief introduction. [Tag: LI, Text: First Child] [Tag: LI, Text: Third Child] [Tag: LI, Text: Second Child] [Tag: UL] [Url: http://a.b.c, Label: Click Here] &lt;UL&gt; &lt;LI&gt; First Child &lt;LI&gt; Second Child &lt;LI&gt; Third Child &lt;/UL&gt; &lt;A HREF=http://a.b.c&gt; Click Here &lt;/A> Query 5: q4 [Tag: LI, Text: First Child] <p> In Section 5.2 we sketch the rules to map HTML documents to ASTs represented as hypertrees. For the discussion in this section, we assume familiarity with the basics of the HTML language <ref> [W3C] </ref>. In Section 5.3 we give examples that illustrates how we can use WebOQL to extract data directly from HTML documents using this representation.
Reference: [Yan90] <author> M. Yannakakis, </author> <title> Graph-theoretic methods in database theory, </title> <booktitle> in Proc. of 9th. ACM Symp. on PODS, Nashville, </booktitle> <pages> pp. 230-242, </pages> <year> 1990. </year> <title> 72 WebOQL: Exploiting Document Structure in Web Queries </title>
Reference-contexts: Introduction 2 WebOQL: Exploiting Document Structure in Web Queries popularity of the Web include: querying structured documents [AC+97, CA+94, GZC89], querying semistructured data [AQ+96, BD+96] and querying graphs <ref> [MW95, Yan90] </ref>. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. In this thesis we present the WebOQL system, whose goal is to provide such a framework. <p> Alternatively, if we view both T and G h,w as finite automata accepting languages L 1 and L 2 respectively, procedure Search can be seen as performing a depth-first search of the automaton accepting L 1 L 2 1 . The states for this intersection automaton <ref> [Yan90] </ref> are pairs (x, s) consisting of a node x in G h,w and a state s in T, and there is a transition from a state (x, s) to another state (y, t) if G h,w has an edge labeled r from x to y, T has a transition labeled
References-found: 31

