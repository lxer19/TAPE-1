URL: http://www.cs.utah.edu/~willrich/async/async96.ps.gz
Refering-URL: http://www.cs.utah.edu/~willrich/async/mypapers.html
Root-URL: 
Note: Copyright 1996 IEEE Reproduction without permission is prohibited Abstract  
Abstract: Decoupled computer architectures provide an effective means of exploiting instruction level parallelism. Self-timed micropipeline systems are inherently decoupled due to the elastic nature of the basic FIFO structur e, and may be ideally suited for constructing decoupled computer architectures. Fred is a self-timed decoupled, pipelined computer architecture based on micr opipelines. We present the architecture of Fred, with specific details on a micropipelined implementation that includes support for multiple functional units and out-of-order instruction completion due to the self-timed decoupling. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Erik Brunvand. </author> <title> Using FPGAs to prototype a self-timed computer. </title> <booktitle> In International Workshop on Field Programmable Logic and Applications, </booktitle> <institution> Vienna University of Technology, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: The NSR was built using FPGAs. It is pipelined and decoupled, but doesn t handle exceptions. It is a simple 16-bit processor with only sixteen instructions, since it was built partially as an exercise in using FPGAs for rapid prototyping of self-timed circuits <ref> [1] </ref>. 2.3 The Amulet A group at Manchester has built a self-timed micro-pipelined VLSI implementation of the ARM processor [6] which is an extremely power-efficient commercial microprocessor.
Reference: [2] <author> Erik Brunvand. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the 26th Annual Hawaii International Confer ence on System Sciences, </booktitle> <pages> pages 428435, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1993. </year>
Reference: [3] <author> Wesley A. Clark and Charles A. Molnar. </author> <title> Macromodular system design. </title> <type> Technical Report 23, </type> <institution> Computer Systems Laboratory, Washington University, </institution> <month> April </month> <year> 1973. </year>
Reference-contexts: Asynchronous Processors In spite of the possible advantages, there have been very few asynchronous processors reported in the literature. Early work in asynchronous computer architecture includes the Macromodule project during the early 70 s at Washington University <ref> [3] </ref> and the self-timed dataflow machines built at the University of Utah in the late 70s [4]. Although these projects were successful in many ways, asynchronous processor design did not progress much, perhaps because the circuit concepts were a little too far ahead of the available technology .
Reference: [4] <author> A.L. Davis. </author> <title> The architecture and system method for DDM1: A recursively structured data-driven machine. </title> <booktitle> In 5th Annual Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1978. </year>
Reference-contexts: Early work in asynchronous computer architecture includes the Macromodule project during the early 70 s at Washington University [3] and the self-timed dataflow machines built at the University of Utah in the late 70s <ref> [4] </ref>. Although these projects were successful in many ways, asynchronous processor design did not progress much, perhaps because the circuit concepts were a little too far ahead of the available technology .
Reference: [5] <author> Matthew Farrens, Pius Ng, and Phil Nico. </author> <title> A comparison of superscalar and decoupled access/execute architectures. </title> <booktitle> In Proceedings of the 26th Annual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1993. </year> <pages> IEEE,ACM. </pages>
Reference: [6] <author> S. B. Furber, P. Day, J. D. Garside, N. C. Paver, and J. V. Woods. </author> <title> A micropipelined ARM. </title> <booktitle> In Proceedings of the VII Banff Workshop: Asynchronous Hardware Design, </booktitle> <address> Banff, Canada, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: It is a simple 16-bit processor with only sixteen instructions, since it was built partially as an exercise in using FPGAs for rapid prototyping of self-timed circuits [1]. 2.3 The Amulet A group at Manchester has built a self-timed micro-pipelined VLSI implementation of the ARM processor <ref> [6] </ref> which is an extremely power-efficient commercial microprocessor. The Amulet is a real processor in the sense that it mimics the behavior of an existing commercial processor and it handles simple exceptions.
Reference: [7] <author> J. R. Goodman, J. Hsieh, K. Liou, A. R. Pleszkun, P. B. Schechter, and H. C. Young. </author> <title> PIPE: A VLSI decoupled architecture. </title> <booktitle> In 12th Annual International Symposium on Computer Architecture, pages 2027. IEEE Computer Society, </booktitle> <month> June </month> <year> 1985. </year>
Reference: [8] <author> Thomas R. Gross, John L. Hennessy, Stephen A. Przybyl-ski, and Christopher Rowen. </author> <title> Measurement and evaluation of the MIPS architecture and processor. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(3):229257, </volume> <month> August </month> <year> 1988. </year>
Reference: [9] <author> John Hennessy, Norman Jouppi, </author> <title> Forest Baskett, </title> <editor> Thomas Benchmark Separation ackermann 1.52 cat 1.82 cbubble 0.81 cquick 1.59 ctowers 1.67 dhry 1.56 fact 0.84 grep 1.14 heapsort 1.54 mergesort 1.14 mod 2.03 muldiv 2.66 pi 1.89 queens 0.88 average 1.51 Gross, and John Gill. </editor> <title> Hardware/software tradeof fs for increased performance. </title> <booktitle> In Proceedings of the Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 211. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1982. </year>
Reference: [10] <author> Manolis G. H. Katevenis. </author> <title> Reduced Instruction Set Computer Architectures for VLSI. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference: [11] <author> Alain Martin, Steven Burns, T.K. Lee, Drazen Borkovic, and Pieter Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <booktitle> In Proc. CalTech Conference on VLSI , 1989. </booktitle>
Reference-contexts: With the advent of easily available custom ASIC technology , either as VLSI or FPGAs, asynchronous processor design is beginning to attract renewed attention. Some recent processor projects include the following: 2.1 The CalTech Asynchronous Microprocessor The first asynchronous VLSI processor was built by Alain Martins group at CalTech <ref> [11] </ref>. It is completely asynchronous, using (mostly) delay-insensitive circuits and dual-rail data encoding. The processor as implemented has a small 16-bit instruction set, uses a simple twostage fetch-execute pipeline, is not decoupled, and does not handle exceptions. It has been fabricated both in CMOS and GaAs [20]. 2.
Reference: [12] <author> Motorola. </author> <title> MC88100 RISC Microprocessor Users Manual. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: Rather than attempt to design a new instruction set from scratch, an instruction set from an existing commercial RISC processor was adapted. Much of the Fred instruction set is taken directly from the Motorola 88100 instruction set <ref> [12] </ref>. However, Fred does not implement all the 88100 instructions, and several of Freds instructions do not correspond to any instructions of the 88100. The instructions, and the functional units that execute them, are shown in Figure 2. 5.
Reference: [13] <author> Alexandru Nicolau and Joseph A. Fisher. </author> <title> Measuring the parallelism available for very long instruction word architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-33(11):110 118, </volume> <month> November </month> <year> 1984. </year>
Reference: [14] <author> Nigel Charles Paver. </author> <title> The Design and Implementation of an Asynchronous Microprocessor. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1994. </year> <title> http://www.cs.man.ac.uk/ a m u l e t / p u b l i c a t i o n s / t h e s i s / paver94_phd.html. </title>
Reference-contexts: The Amulet has been designed and fabricated. The performance of the first-generation design is within a factor of two of the commercial version <ref> [14] </ref>. Future versions of Amulet are expected to close this gap. 2.4 The Counterow Pipeline Processor This is an innovative architecture proposed by a group at Sun Microsystems Labs [18].
Reference: [15] <author> William F. Richardson and Erik Brunvand. </author> <title> The NSR processor prototype. </title> <type> Technical Report UUCS92029, </type> <institution> University of Utah, </institution> <month> August </month> <year> 1992. </year> <note> ftp://ftp.cs.utah.edu/ techreports/1992/UUCS-92-029.ps.Z. </note>
Reference: [16] <author> William F. Richardson and Erik Brunvand. </author> <title> Precise exception handling for a self-timed processor. </title> <booktitle> In 1995 International Conference on Computer Design: VLSI in Computers & Processors, </booktitle> <pages> pages 3237, </pages> <address> Los Alamitos, CA, October 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Copyright 1996 IEEE Reproduction without permission is prohibited might even take different amounts of time to compute a result based on the data, which will lead naturally to out of order instruction completion. The VHDL prototype is fully operational, and includes a functionally precise exception model <ref> [16] </ref>. The timing and conf iguration parameters can be adjusted for each component of the design. 4. Instruction Set Choosing an instruction set for a RISC processor can be a complex task [9,8,10]. <p> This is described in more detail elsewhere <ref> [16] </ref>. 6. R1 Queue There are 32 general registers in the Fred architecture. Registers r2 through r31 are normal general-purpose registers, but r0 and r1 have special meaning. Register r0 may be used as the destination of an instruction, but will always contain zero.
Reference: [17] <author> James E. Smith and Shlomo Weiss. </author> <title> Powerpc 601 and alpha 21064: A tale of two RISCs. </title> <journal> IEEE Computer, </journal> <volume> 27(6):4658, </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: Forwarding results between independent functional units requires either a common shared bus as in Tomasulos algorithm [21], or dedicated data paths as used in the DEC Alpha <ref> [17] </ref> and other high-performance processors. Fred does not forward results directly between functional units, because of the complexity involved. However, reusing the last result of a computation within a single functional unit is certainly possible.
Reference: [18] <author> Robert F. Sproull and Ivan E. Sutherland. </author> <title> Counterow pipeline processor architecture. </title> <type> Technical Report SMLI TR-94-25, </type> <institution> Sun Microsystems Laboratories, Inc., </institution> <address> M/S 29-01, 2550 Garcia Avenue, Mountain View, CA 94043, </address> <month> April </month> <year> 1994. </year> <title> h t t p : / / w w w . s u n . c o m / s m l i / t e c h n i c a l - reports/1994/smli_tr-94-25.ps. </title>
Reference-contexts: The performance of the first-generation design is within a factor of two of the commercial version [14]. Future versions of Amulet are expected to close this gap. 2.4 The Counterow Pipeline Processor This is an innovative architecture proposed by a group at Sun Microsystems Labs <ref> [18] </ref>. It derives its name from its fundamental feature, that instructions and results f low in opposite directions in a pipeline and interact as they pass.
Reference: [19] <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6):720738, </volume> <year> 1989. </year>
Reference-contexts: However, these circuits can be very dif ficult to design and debug without some additional structure to help the designer deal with the complexity. While there are many different asynchronous methodologies, one of the simplest to design, test, and debug is the self-timed micropipeline approach described by Sutherland <ref> [19] </ref>, which avoids clock-related timing problems by enforcing a simple communication protocol between circuit elements. This is quite different from traditional synchronous signaling conventions where signal events occur at specif ic times and must remain asserted for specific time intervals. <p> Each box in the figure is a self-timed process communicating via dedicated data paths rather than buses. Each of these data paths, shown as wires in Figure 1, may be pipelined to any desired depth without af fecting the results of the computation. Because Fred uses self-timed micropipelines <ref> [19] </ref> in which pipeline stages communicate locally only with neighboring stages in order to pass data, there is no extra control circuitry involved in adding additional pipeline stages. Because buses are not used, the cor responding resource contention is avoided.
Reference: [20] <author> Jos A. Tierno, Alain J. Martin, Drazen Borkovic, and Tak Kwan Lee. </author> <title> A 100-MIPS GaAs asynchronous microprocessor. </title> <booktitle> IEEE Design & Test of Computers, </booktitle> <address> 11(2):4349, </address> <month> Summer </month> <year> 1994. </year>
Reference-contexts: It is completely asynchronous, using (mostly) delay-insensitive circuits and dual-rail data encoding. The processor as implemented has a small 16-bit instruction set, uses a simple twostage fetch-execute pipeline, is not decoupled, and does not handle exceptions. It has been fabricated both in CMOS and GaAs <ref> [20] </ref>. 2. Fred is not an acronym, and it doesnt mean anything.
Reference: [21] <author> R. M. Tomasulo. </author> <title> An efficient algorithm for exploiting multiple arithmetic units. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 11:2533, </volume> <month> January </month> <year> 1967. </year>
Reference-contexts: Forwarding results between independent functional units requires either a common shared bus as in Tomasulos algorithm <ref> [21] </ref>, or dedicated data paths as used in the DEC Alpha [17] and other high-performance processors. Fred does not forward results directly between functional units, because of the complexity involved. However, reusing the last result of a computation within a single functional unit is certainly possible.
Reference: [22] <author> H. C. Torng and Martin Day. </author> <title> Interrupt handling for out-of-order execution processors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(1):122127, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: illegal instruction sequence before it takes effect. 5.1 The Instruction Window An Instruction Window (IW) is used to buffer incom-in g i ns tr u c tio n s a nd t o tr a c k th e s ta tu s o f i ss ue d instructions <ref> [22] </ref>. A register scoreboard is used to avoid all data hazards. The IW is a set of internal registers located in the Dispatch unit which tracks the state of all current instructions.
Reference: [23] <author> David W. Wall. </author> <title> Limits of instruction-level parallelism. </title> <note> WRL Technical Note TN-15, </note> <institution> Digital Western Research Laboratory, </institution> <address> 100 Hamilton Avenue, Palo Alto, CA 94301, </address> <month> December </month> <year> 1990. </year> <note> ftp://gatekeeper.dec.com/ pub/DEC/WRL/research-reports/WRL-TN-15.ps. </note>
Reference: [24] <author> Wm. A. Wulf. </author> <title> The WM computer architecture. </title> <journal> Computer Architecture News, </journal> <volume> 16(1), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Register r0 may be used as the destination of an instruction, but will always contain zero. Register r1 is not really a register at all but provides read access to a data memory pipeline similar to that used in the WM machine <ref> [24] </ref>. Specifying r1 as the destination of an instruction inserts the result into the pipeline. Each use of r1 as a source for an instruction retrieves one word from the R1 Queue.
References-found: 24

