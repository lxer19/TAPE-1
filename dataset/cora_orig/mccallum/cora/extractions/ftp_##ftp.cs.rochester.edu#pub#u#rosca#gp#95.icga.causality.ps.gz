URL: ftp://ftp.cs.rochester.edu/pub/u/rosca/gp/95.icga.causality.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/rosca/papers.html
Root-URL: 
Title: Causality in Genetic Programming  
Author: Justinian P. Rosca, Dana H. Ballard 
Note: Proceedings of the Fifth International Conference (ICGA95) Morgan Kaufmann,  
Address: Rochester NY 14627  San Francisco, CA.  
Affiliation: Computer Science Department University of Rochester  
Abstract: Causality relates changes in the structure of an object with the effects of such changes, that is changes in the properties or behavior of the object. This paper analyzes the concept of causality in Genetic Programming (GP) and suggests how it can be used in adapting control parameters for speeding up GP search. We first analyze the effects of crossover to show the weak causality of the GP representation and operators. Hierarchical GP approaches based on the discovery and evolution of functions amplify this phenomenon. However, selection gradually retains strongly causal changes. Causality is correlated to search space exploitation and is discussed in the context of the exploration-exploitation tradeoff. The results described argue for a bottom-up GP evolutionary thesis. Finally, new developments based on the idea of GP architecture evolution (Koza, 1994a) are discussed from the causality perspective. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Altenberg, L. </author> <year> (1994). </year> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kinnear, K., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Third, how much code of a parse tree representing an individual is effective? It is well known that GP evolves non-parsimonious trees if no size pressure is included in the fitness evaluation (Rosca and Ballard, 1994b), a phenomenon suggestively called "defense against crossover" <ref> (Altenberg, 1994) </ref>. The increase in the size of unuseful code within population individu als would decrease the probability of disrupting useful code by means of non-causal crossover changes. However, the useless regions of code may represent reservoirs of genetic material (Angeline, 1994).
Reference: <author> Angeline, P. J. </author> <year> (1994). </year> <title> Evolutionary Algorithms and Emergent Intelligence. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Ohio State University. </institution>
Reference-contexts: The increase in the size of unuseful code within population individu als would decrease the probability of disrupting useful code by means of non-causal crossover changes. However, the useless regions of code may represent reservoirs of genetic material <ref> (Angeline, 1994) </ref>. They either preserve or evolve good fragments of code to be activated later during evolution as a result of crossover. This makes it difficult to estimate the size of effectively useful code.
Reference: <author> Back, T. and Schwefel, H.-P. </author> <year> (1993). </year> <title> An overview of evolutionary algorithms for parameter optimization. </title> <journal> Evolutionary Computation, </journal> <volume> 1(1) </volume> <pages> 1-23. </pages>
Reference-contexts: This principle is used in this form in applications of evolution strategies (ES) (surveyed in <ref> (Back and Schwefel, 1993) </ref>) to problems of structure evolution (Lohmann, 1992a; Lohmann, 1992b). Structure evolution is performed by letting approximately similar encodings of structures compete for existence within a population. The parameters of each structure are adjusted by an ES algorithm at a lower level of detail.
Reference: <author> Cramer, N. L. </author> <year> (1985). </year> <title> A representation for the adaptive generation of simple sequential programs. </title> <booktitle> In Proceedings of the First International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Epstein, R. </author> <year> (1967). </year> <title> The Theory of Games and Statistical Logic. </title> <publisher> Academic Press, </publisher> <address> New York. </address>
Reference: <editor> Eshelman, L. J. and Schaffer, J. D. </editor> <year> (1993). </year> <title> Crossover's niche. </title> <editor> In Forrest, S., editor, </editor> <booktitle> Proceedings of the International Conference on Genetic Algorithms, </booktitle> <pages> pages 9-14. </pages> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Goldberg, D. E. </author> <year> (1989). </year> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Holland, J. H. </author> <title> (2nd edition, 1992). Adaptation in Natural and Artificial Systems, An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: In this application they suggest that the interaction between crossover and selection is easier to analyze if crossover is applied enough times for the system to converge to a near-stationary population. The traditional analysis of GAs by Holland <ref> (Holland, 1992) </ref> focuses on the propagation of schemata from one generation to the next. The building block hypothesis (Holland, 1992; Goldberg, 1989) outlines the importance of small schemata, called building blocks, in the proper functioning of a GA.
Reference: <author> Kaelbling, L. P. </author> <year> (1993). </year> <title> Learning in Embedded Systems. </title> <publisher> MIT Press. </publisher>
Reference-contexts: In the reinforcement learning (RL) literature, this tradeoff is made explicit by the control structure of the algorithms <ref> (Kaelbling, 1993) </ref>. If the search process chooses the action prescribed by its current knowledge, then the system exploits its current knowledge by acting in order to gain reward. It occasionally explores actions at random in order to experiment with more state-action pairs and eventually improve its policy.
Reference: <author> Kitano, H. </author> <year> (1993). </year> <title> Challanges of massive parallelism. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 813-834. </pages> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: One could use these insights to come up with a more refined AR-GP-like system, that involves automatic adaptation of the control parameters. This remains a goal for future research. Without adaptation mechanisms artificial intelligence systems are "inherently biased by the features and representation schemes defined by the system designer" <ref> (Kitano, 1993) </ref>. Acknowledgments We thank Peter Angeline for valuable suggestions made on earlier drafts of this paper. This research was sponsored by the National Science Foundation under grant numbered IRI-9406481 and by DARPA research grant numbered MDA972-92-J-1012.
Reference: <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press. </publisher>
Reference-contexts: A GP analogy along the lines of GA schemata theory and GA building block hypothesis has been attempted in (O'Reilly and Oppacher, 1994) by generalizing the definition of a GP schema from <ref> (Koza, 1992) </ref> to a collection of tree fragments, that is a collection of trees possibly having subtrees removed. An individual in stantiates a schema in case it "covers" (matches) all the fragments, overlapping between fragments not being allowed. <p> Later sections will suggest how fine controls, such as the probability of selection of crossover nodes, can be advantageously used in GP. 3 HIERARCHICAL GENETIC PROGRAMMING We overview two GP extensions relevant to our goal of analyzing GP causality. Automatic definition of functions (ADF) <ref> (Koza, 1992) </ref> is based on the idea of evolution of reusable subroutines. The adaptive representation (AR) approach (Rosca and Ballard, 1994c) is based on the discovery of useful building blocks of code.
Reference: <author> Koza, J. R. </author> <year> (1994a). </year> <title> Architecture-altering operations for evolving the architecture of a multipart program in genetic programming. </title> <institution> Computer Science Department STAN-CS-TR-94-1528, Stan-ford University. </institution>
Reference-contexts: Koza introduced six new genetic operations for varying the architecture of an individual program: branch duplication, argument duplication, branch deletion, argument deletion, branch creation and argument creation <ref> (Koza, 1994a) </ref>. All operations of duplication respect the principle of strong causality discussed before. They are performed such that they preserve the behavior of the resulting programs. They merely increase the potential of refinement of the programs and thus they resemble the process of gene duplication in natural evolution.
Reference: <author> Koza, J. R. </author> <year> (1994b). </year> <title> Genetic Programming II. </title> <publisher> MIT Press. </publisher>
Reference-contexts: Selection favors crossover changes that recombine parts of the structure of the parents so as to improve performance, but how? In several problem domains one can observe the superposition of the parent behaviors in the offspring. In an example for the problem of finding an impulse response function <ref> (Koza, 1994b) </ref>, Koza showed that crossover determines a better offspring performance by improving one parent's performance for one portion of the time domain, and inheriting the behavior of the other parent for the rest of the domain . <p> Work on the evolution of architecture has been motivated mainly by the problem of determining the appropriate architectural choices in ADF-GP. The architecture itself can be evolutionarily selected in case the initial population is architecturally diverse and care is taken when crossing over individuals having different architectures <ref> (Koza, 1994b) </ref>. Koza introduced six new genetic operations for varying the architecture of an individual program: branch duplication, argument duplication, branch deletion, argument deletion, branch creation and argument creation (Koza, 1994a). All operations of duplication respect the principle of strong causality discussed before.
Reference: <author> Lohmann, R. </author> <year> (1992a). </year> <title> Structure evolution and incomplete induction. </title> <booktitle> In Parallel Problem Solving from Nature 2, </booktitle> <pages> pages 175-185. </pages> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: Structure evolution is performed by letting approximately similar encodings of structures compete for existence within a population. The parameters of each structure are adjusted by an ES algorithm at a lower level of detail. Modification of structures is performed using ES genetic operators <ref> (Lohmann, 1992a) </ref>. Lohmann outlined the necessity that the algorithm observe the principle of strong causality. Without obeying this principle, all the parameters of an already evolved structure would have to be thrown away, and no continuity would be ensured in the evolutionary process.
Reference: <author> Lohmann, R. </author> <year> (1992b). </year> <title> Structure evolution and neural systems. In Dynamic, </title> <booktitle> Genetic and Chaotic Programming, </booktitle> <pages> pages 395-411. </pages> <publisher> John Wiley & Sons, Inc. </publisher>
Reference: <author> O'Reilly, U.-M. and Oppacher, F. </author> <year> (1994). </year> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <booktitle> In Proceedings of the Third Workshop on Foundations of Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Rabinovich, Y., Sinclasir, A., and Widgerson, A. </author> <year> (1992). </year> <title> Quadratic dynamical systems. </title> <booktitle> In Proceedings of FOCS, </booktitle> <volume> volume 33, </volume> <pages> pages 304-313. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: Crossover has been difficult to analyze. Various simplifying assumptions are often made, which limit the applicability of the results. However such results suggest heuristic sources of improvement of the algorithms. For example, <ref> (Rabinovich et al., 1992) </ref> prove that symmetric quadratic dynamical systems approach a fixed point and also prove various properties of such systems. They apply this theory to a GA for finding a large matching in a graph.
Reference: <author> Rechenberg, I. </author> <year> (1994). </year> <title> Evolution strategy. </title> <editor> In Zurada, J. M., Marks-II, R. J., and Robinson, C. J., editors, </editor> <booktitle> Computational Intelligence Imitating Life, </booktitle> <pages> pages 147-159. </pages> <publisher> IEEE Press. </publisher>
Reference: <author> Rosca, J. P. </author> <year> (1995). </year> <title> Genetic programming exploratory power and the discovery of functions. </title> <booktitle> In Proceedings of the Fourth National Conference on Evolutionary Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: In RL, the system must have an explicit policy of balancing exploration and exploitation. In contrast GP is a search technique that implicitly balances exploration and exploitation. Discovery and evolution of functions amplifies the exploratory ability of the GP search process <ref> (Rosca, 1995) </ref>. However, as the best-of-generation program fitness increases, the probability of falling upon good individuals by exploration decreases substantially. The GP search process should exploit the structures already discovered and avoid spending unnecessary effort with state space exploration. <p> The end result is that the collection of functions acquires the necessary structure for solving the problem, taking the form of a hierarchy of functions as in Figure 4. The population of functions evolves by using both exploitative and exploratory operators <ref> (Rosca, 1995) </ref>. 6 CONCLUSIONS The paper analyzes the causality of the crossover operator in GP and suggests how search control parameters can be adapted for speeding up GP search.
Reference: <author> Rosca, J. P. and Ballard, D. H. </author> <year> (1994a). </year> <title> Genetic programming with adaptive representations. </title> <type> Technical Report 489, </type> <institution> University of Rochester, Computer Science Department. </institution>
Reference-contexts: A complete answer to this question would involve an analysis of the properties of the function set. The effect of a small change can be severe in problems of symbolic regression, or less severe in problems of regression of Boolean 1 The notion of structure tree was introduced in <ref> (Rosca and Ballard, 1994a) </ref> with the goal of qualitatively analyzing program transformations during evolution. crossover operation. Zero labeled nodes remained unchanged from the initial generation.
Reference: <author> Rosca, J. P. and Ballard, D. H. </author> <year> (1994b). </year> <title> Hierarchical self-organization in genetic programming. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> pages 251-258. </pages> <publisher> Mor-gan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Third, how much code of a parse tree representing an individual is effective? It is well known that GP evolves non-parsimonious trees if no size pressure is included in the fitness evaluation <ref> (Rosca and Ballard, 1994b) </ref>, a phenomenon suggestively called "defense against crossover" (Altenberg, 1994). The increase in the size of unuseful code within population individu als would decrease the probability of disrupting useful code by means of non-causal crossover changes.
Reference: <author> Rosca, J. P. and Ballard, D. H. (Orlando, </author> <year> 1994c). </year> <title> Learning by adapting representations in genetic programming. </title> <booktitle> In Proceedings of the IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 407-412. </pages> <publisher> IEEE Press. </publisher>
Reference-contexts: Automatic definition of functions (ADF) (Koza, 1992) is based on the idea of evolution of reusable subroutines. The adaptive representation (AR) approach <ref> (Rosca and Ballard, 1994c) </ref> is based on the discovery of useful building blocks of code. These blocks are attained by analyzing the evolution trajectory, generalizing blocks of code to define new functions, and finally adapting the problem representation on-the-fly.
Reference: <author> Simon, H. A. </author> <year> (1973). </year> <title> The organization of complex systems. </title> <editor> In Howard H. Pattee, G. B., editor, </editor> <booktitle> Hierarchy Theory; The Challenge of Complex Systems, </booktitle> <pages> pages 3-27. </pages> <address> New York. </address>
Reference: <author> Wills, C. </author> <year> (1993). </year> <title> The Runaway Brain. </title> <publisher> BasicBooks. </publisher>
Reference-contexts: In particular, offspring of individuals that are already partially adapted to the "environment" and already have a complex structure are more likely to have a worse fitness. This is close to the conclusions on the role of mutation in natural evolution <ref> (Wills, 1993) </ref>. It is also in agreement with our intuition that a small change in a program may drastically change the program behavior. In addition there is the following simple argument.
References-found: 24

