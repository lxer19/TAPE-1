URL: http://www.cs.utexas.edu/users/plaxton/ps/1996/texas_03.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Email: E-mail: sanjoy@homer.njit.edu.  E-mail: johannes@cs.wisc.edu.  E-mail: plaxton@cs.utexas.edu.  
Title: Fair On-Line Scheduling of a Dynamic Set of Tasks on a Single Resource  
Author: Sanjoy K. Baruah Johannes E. Gehrke C. Greg Plaxton 
Address: Newark, NJ 07102.  1210 West Dayton Street, Madison, WI 53706-1685.  Austin, Austin, TX 78712-1188.  
Affiliation: Department of Computer Information Science, New Jersey Institute of Technology, University Heights,  Computer Sciences Department, University of Wisconsin-Madison,  Department of Computer Science, University of Texas at  
Note: Supported by the National Science Foundation under Research Initiation Award No. CCR-9596282.  Supported by the National Science Foundation under Grant No. CCR-9504145, and the Texas Advanced Research Program under Grant No. ARP-93-00365-461.  
Date: February 1996  
Abstract: In many real-time applications, a set of "tasks" compete for the use of a single "resource", where: (i) only one task is allowed to use the resource at a time, (ii) the resource is scheduled in unit-time intervals, (iii) each task requires a specific fraction of the resource capacity over an extended period, and (iv) tasks arrive and depart at any time. We refer to such a task system as an instance of the single-resource scheduling problem. The problem of designing a "fair" scheduling algorithm for such task systems has recently received a great deal of attention in the literature. This paper makes two main contributions. First, we point out that a 1980 paper of Tijdeman concerning the so-called "chairman assignment problem" provides a simple and efficient on-line algorithm for the static version of the single-resource scheduling problem (i.e., where the set of tasks competing to use the resource does not change over time). We then extend Tijdeman's algorithm to obtain a simple and efficient on-line algorithm for the dynamic single-resource scheduling problem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, N. K. Cohen, C. G. Plaxton, and D. A. Varvel. </author> <title> Proportionate progress: A notion of fairness in resource allocation. </title> <journal> Algorithmica, </journal> <volume> 15 </volume> <pages> 600-625, </pages> <year> 1996. </year>
Reference-contexts: The best we can hope to do is to assign the resource to X in either bw tc or dw te of the first t slots, for all t. A schedule that simultaneously provides such proportionate progress to all tasks is said to be P-fair <ref> [1] </ref>. <p> The weight of task x at slot t, denoted w (x; t), is r (x; t) f (t). Note that 0 w (x; t) 1, and that the sum of the task weights at any given slot also lies in the real interval <ref> [0; 1] </ref>. In applications, r (x; t) will typically be less than 1, and should be interpreted as the fraction of the resource that task x would ideally like to receive during slot t. <p> A schedule or scheduling algorithm that achieves a lag bound of &lt; 1 is said to be P-fair <ref> [1] </ref>. Note that P-fairness is a very strong fairness property: A schedule S is P-fair if and only if for all tasks x and slots t, either A (S; x; t) = bW (x; t)c or A (S; x; t) = dW (x; t)e. <p> We provided a formal criterion, P-fairness, to evaluate the fairness of such systems, and presented an efficient on-line P-fair scheduling algorithm. In previous work <ref> [1, 2] </ref>, we have developed efficient P-fair algorithms for the multiple-resource periodic scheduling problem, which may be viewed as the multiple-resource version of Problem A: (i) there is a static set of tasks, (ii) each task has constant weight less than or equal to 1, (iii) there are m 1 resources,
Reference: [2] <author> S. K. Baruah, J. E. Gehrke, and C. G. Plaxton. </author> <title> Fast scheduling of periodic tasks on multiple resources. </title> <booktitle> In Proceedings of the 9th International Parallel Processing Symposium, </booktitle> <pages> pages 280-288, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Using standard algorithmic techniques (see, for example, the implementation of Algorithm PD in <ref> [2] </ref>) these bounds can be improved to obtain the following result. (Although no implementation details are provided in [7], we attribute the result to Tijdeman since these details are straightforward.) Theorem 2 (Tijdeman) Problem A can be solved by an on-line algorithm with lag bound 1 1=(2n 2), preprocessing cost O <p> We provided a formal criterion, P-fairness, to evaluate the fairness of such systems, and presented an efficient on-line P-fair scheduling algorithm. In previous work <ref> [1, 2] </ref>, we have developed efficient P-fair algorithms for the multiple-resource periodic scheduling problem, which may be viewed as the multiple-resource version of Problem A: (i) there is a static set of tasks, (ii) each task has constant weight less than or equal to 1, (iii) there are m 1 resources,
Reference: [3] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: All three of these operations can easily be implemented to run in worst-case O (log jXj) time using an appropriately augmented red-black tree data structure <ref> [3] </ref>. Given the aforementioned data structure, we implement Algorithm BC as follows. At slot 0, we set v (0) = 0 and compute f (0) (at a cost that is linear in j 0 j).
Reference: [4] <author> U. Maheshwari. </author> <title> Charge-based proportional scheduling. </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-529, Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: is said to achieve a lag bound of . (Note that a P-fair schedule achieves a lag bound of less than 1.) The problem of designing an efficient on-line algorithm for single-resource scheduling that achieves a small lag bound has recently received a great deal of attention in the literature <ref> [4, 6, 8, 9, 10] </ref>. However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness.
Reference: [5] <author> I. Stoica and H. Abdel-Wahab. </author> <title> Earliest eligible virtual deadline first: A flexible and accurate mechanism for proportional share resource allocation. </title> <type> Technical Report TR-95-22, </type> <institution> Department of Computer Science, Old Dominion University, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: In this paper, we extend a result of Tijdeman [7] to obtain a simple P-fair algorithm for scheduling a dynamic set of tasks on a single resource. We remark that a variant of our algorithm has recently been independently discovered by Stoica and Abdel-Wahab <ref> [5] </ref>. Graceful degradation upon overload. When the cumulative request of all tasks of a resource exceeds the capacity of the resource, at least two different strategies are possible.
Reference: [6] <author> I. Stoica and H. Abdel-Wahab. </author> <title> A new approach to implement proportional share resource allocation. </title> <type> Technical Report TR-95-05, </type> <institution> Department of Computer Science, Old Dominion University, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: is said to achieve a lag bound of . (Note that a P-fair schedule achieves a lag bound of less than 1.) The problem of designing an efficient on-line algorithm for single-resource scheduling that achieves a small lag bound has recently received a great deal of attention in the literature <ref> [4, 6, 8, 9, 10] </ref>. However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness.
Reference: [7] <author> R. </author> <title> Tijdeman. The chairman assignment problem. </title> <journal> Discrete Mathematics, </journal> <volume> 32 </volume> <pages> 323-330, </pages> <year> 1980. </year>
Reference-contexts: However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness. In this paper, we extend a result of Tijdeman <ref> [7] </ref> to obtain a simple P-fair algorithm for scheduling a dynamic set of tasks on a single resource. We remark that a variant of our algorithm has recently been independently discovered by Stoica and Abdel-Wahab [5]. Graceful degradation upon overload. <p> The remainder of this paper is organized as follows. In Section 2, we define some basic terminology and formulate several variants of the single-resource scheduling problem. In Section 3, we discuss certain consequences of Tijdeman's work on the so-called "chairman assignment problem" <ref> [7] </ref>, including an efficient on-line scheduling algorithm for the static version of the single-resource scheduling problem. In Section 4, we state our main result, an efficient on-line scheduling algorithm for a dynamic version of the single-resource scheduling problem. <p> also applies to Problem A, (ii) any upper bound on the complexity of Problem C or D also applies to Problems A and B, and (iii) any upper bound on the complexity of Problem E also applies to Problems A, B, C, and D. 3 Previous Results Work of Tijdeman <ref> [7] </ref> on the so-called "chairman assignment problem" has direct implications for the problems considered in this paper. Lemma 1 (Tijdeman) There exists a schedule with lag bound 1 1=(2n 2) for any instance of Problem D (hence also for Problems A and B). <p> Furthermore, there exists a schedule with lag bound &lt; 1 for any instance of Problem E (hence also for Problem C). The following scheme is implicit in <ref> [7] </ref>, and underlies a number of scheduling algorithms for Problems A through E. Tijdeman's Scheme. We wish to generate a schedule for a given instance of Problem A, B, C, D, or E, subject to a given lag bound L that is known to be achievable by Lemma 1. <p> On the other hand, for instances of Problem A, it is easy to compute task deadlines on-line; because the task requests are constant and the set of tasks is static, w (x; t) does not depend on t. Tijdeman <ref> [7] </ref> gives the following on-line algorithm for Problem A with L = (; 1 1=(2n 2)), and where we write w (x) to denote w (x; t). Algorithm A. <p> Note that Algorithm A remains correct if we substitute Slack (S; x; t; L) = fl for the deadline t + fl. (In fact, the algorithm given in <ref> [7] </ref> makes use of fl instead of t + fl.) A naive implementation of Algorithm A leads to a preprocessing cost of O (n) and a per-slot cost of O (n). <p> Using standard algorithmic techniques (see, for example, the implementation of Algorithm PD in [2]) these bounds can be improved to obtain the following result. (Although no implementation details are provided in <ref> [7] </ref>, we attribute the result to Tijdeman since these details are straightforward.) Theorem 2 (Tijdeman) Problem A can be solved by an on-line algorithm with lag bound 1 1=(2n 2), preprocessing cost O (n), and per-slot cost O (log n). 4 Our Results In this paper we show that Tijdeman's Scheme
Reference: [8] <author> C. A. Waldspurger. </author> <title> Lottery and Stride Scheduling: Flexible Proportional-Share Resource Management. </title> <type> PhD thesis, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: is said to achieve a lag bound of . (Note that a P-fair schedule achieves a lag bound of less than 1.) The problem of designing an efficient on-line algorithm for single-resource scheduling that achieves a small lag bound has recently received a great deal of attention in the literature <ref> [4, 6, 8, 9, 10] </ref>. However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness.
Reference: [9] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Lottery scheduling: Flexible proportional-share resource management. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 1-12, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: is said to achieve a lag bound of . (Note that a P-fair schedule achieves a lag bound of less than 1.) The problem of designing an efficient on-line algorithm for single-resource scheduling that achieves a small lag bound has recently received a great deal of attention in the literature <ref> [4, 6, 8, 9, 10] </ref>. However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness.
Reference: [10] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Stride scheduling: Deterministic proportional-share resource management. </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-528, Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> July </month> <year> 1995. </year> <month> 11 </month>
Reference-contexts: is said to achieve a lag bound of . (Note that a P-fair schedule achieves a lag bound of less than 1.) The problem of designing an efficient on-line algorithm for single-resource scheduling that achieves a small lag bound has recently received a great deal of attention in the literature <ref> [4, 6, 8, 9, 10] </ref>. However, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness.
References-found: 10

