URL: http://www.cs.washington.edu/homes/denisep/research/IBToolkit/paper.ps
Refering-URL: http://www.cs.washington.edu/homes/denisep/research/IBToolkit/
Root-URL: 
Title: Visualizing Requirement Specifications: A Toolkit for Rapid Prototyping of Interfaces  
Author: L. Denise Pinnel 
Date: May 8, 1997  
Abstract: Visualizations present information pictorially to better convey meaning and explain concepts. Within the field of specification analysis, visualizations help explain the relationships and interactions of the processes within a system with respect to system requirements. Unfortunately, very little research has been done on the effectiveness of specification visualizations. In fact, most formal requirement specification languages do not include visualizations despite the evidence that visualizations can help humans better understand and comprehend explanations and concepts. We have built a visualization tool for the requirement specification languages RSML and SpecTRM-RL that will be used to create visualizations for requirements written in these languages and to continue research in effective visualization development for requirement analysis.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stephen M. Casner. </author> <title> A task analytic approach to the automated design of graphic presentations. </title> <journal> ACM Trans. on Graphics, </journal> <year> 1991. </year>
Reference-contexts: because often visualizations that are useful when checking executable models of system requirements are also useful when end system controllers are monitoring actual system behavior. 2.1 Specification Visualization Recently research has been done in the visualization of numerical data and what types of graphs best present what types of information <ref> [1, 6, 7] </ref>. Little attention has been paid to the types of data visualization prevalent in requirements specifications; the representation of non-numerical, non-graphical data. In addition, most requirements specification languages do not have a means of visual representation.
Reference: [2] <author> ERICA Group. </author> <title> Research in gui development tools. Study performed when choosing a graphical development software package for the ERICA system. </title>
Reference-contexts: While the amount and basic structure of the code that was required was comparable, user studies indicated that users still felt more like they were coding when using SUIT than when using a code dumping system like Visual Basic <ref> [2] </ref>. Visual Basic enhances the basic code dumping model described above by providing an interactive binding and procedural interface within the builder application. As a result, users in the tests preferred creating interfaces with Visual Basic. I structured the binding and code procedures after the Visual Basic model.
Reference: [3] <author> Randy Pausch, Matthew Conway, and Robert DeLine. </author> <title> Lessons learned from suit, the simple user interface toolkit. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 10:4:320-344, </volume> <year> 1992. </year>
Reference-contexts: Placement of the button on the interface does not occur until the application is run for the first time. At this point the button is randomly placed until the user interactively places it <ref> [3] </ref>. 5 The IB Toolkit The IB Toolkit is an interface and visualization builder designed so that SpecTRM-RL requirement specification writers can quickly and easily build graphical user interfaces (GUIs) and visualizations of the functioning of systems and system constraints.
Reference: [4] <author> David S. Ranson and David D. Woods. </author> <title> Making automation actively visible. </title> <booktitle> CSEL Report No. </booktitle> <pages> 1995-03, </pages> <year> 1995. </year>
Reference-contexts: When observing human interaction with silent automation the questions users ask suggest they do not know how or why a system arrived at its current state and/or cannot predict what the automation will do next <ref> [4] </ref>. Users of systems are having an increasingly hard time keeping track of the automated system's behavior and state. Possible solutions to these problems include changing the design of the automation or providing additional feedback to the users.
Reference: [5] <author> Michael Tempel. </author> <title> Event programming. </title> <type> Technical report, Logo Foundation, </type> <year> 1995. </year>
Reference: [6] <author> Edward R. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press, </publisher> <year> 1983. </year>
Reference-contexts: because often visualizations that are useful when checking executable models of system requirements are also useful when end system controllers are monitoring actual system behavior. 2.1 Specification Visualization Recently research has been done in the visualization of numerical data and what types of graphs best present what types of information <ref> [1, 6, 7] </ref>. Little attention has been paid to the types of data visualization prevalent in requirements specifications; the representation of non-numerical, non-graphical data. In addition, most requirements specification languages do not have a means of visual representation.
Reference: [7] <author> Edward R. Tufte. </author> <title> Visual Explanations: Images and Quantities, Evidence and Narrative, chapter 1. </title> <publisher> Graphics Press, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction Visualizations are pictorial representations of information that help convey meaning and explain concepts. The arrangement and portrayal of information can facilitate or distract from learning and understanding. "Our thinking is filled with assessments of quantity, and approximate or exact sense of number, amount, size, scale <ref> [7] </ref>." Effective visualizations aim at presenting information in a manner that replicates or compliments the intuitive thought processes of humans. The examination of requirement specifications involves the same assessments; however, very little attention has been focused on the best way to represent information in requirement specifications. <p> because often visualizations that are useful when checking executable models of system requirements are also useful when end system controllers are monitoring actual system behavior. 2.1 Specification Visualization Recently research has been done in the visualization of numerical data and what types of graphs best present what types of information <ref> [1, 6, 7] </ref>. Little attention has been paid to the types of data visualization prevalent in requirements specifications; the representation of non-numerical, non-graphical data. In addition, most requirements specification languages do not have a means of visual representation.
Reference: [8] <author> David D. Woods. </author> <title> Toward a theoretical base for representation design in the computer medium: Ecological perception and aiding human cognition. An Ecological Approach to Human Machine Systems I: </title> <booktitle> a Global Perspective, </booktitle> <pages> pages 157-188, </pages> <year> 1995. </year> <month> 18 </month>
Reference-contexts: The numbers for oxygen tank 2 were holding steady at 906 psi|high but within accepted limits|but one second later peaked at 1008 psi (above limits) and then plummeted to 19 psi <ref> [8] </ref>. the Apollo 13 incident The main problem with the Apollo 13 accident was that diagnosis took too long. The information that the controller needed to assess the situation was hidden among columns of numbers with little organization.
References-found: 8

