URL: ftp://ftp.cs.brown.edu/pub/techreports/92/cs92-22.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-92-22.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. P. Lopresti, </author> <title> "Rapid Implementation of a Genetic Sequence Comparator Using Field-Programmable Logic Arrays," Invited paper, </title> <booktitle> Advanced Research in VLSI Conference, </booktitle> <address> March 1991, Santa Cruz, CA. </address>
Reference-contexts: The goal was to develop sequence comparison algorithms for the SPLASH programmable logic array. A systolic sequence comparison algorithm that computes the edit distance between a pair of sequences had already been implemented on SPLASH <ref> [1] </ref>. Certain applications of interest to biologists at the laboratory, such as multiple alignment of genetic (DNA and RNA) sequences, however, require more than just the edit distance: a more informative analysis of the similarity, or homology, of the sequences in the form of an alignment is required. <p> The systolic arrays for both phases exist in SPLASH concurrently and their operations are controlled by a FSM controller. We discuss both arrays and the controller below in separate sections. 6.1 Phase One: Sequence Comparison The phase one array is basically the sequence comparison design described in <ref> [1] </ref> modified to store the computed DP distances in local RAM. Figure 17 shows a block diagram of the sequence comparison PE. The SPLASH implementation uses 13 CLB's per PE, eight for the character comparator and five for the finite state machine. <p> To improve the precision, we repeated timing for 10,000 alignments with the resulting time of 0.30 s. Scaled down, the time for 100 alignments is then 3.0 ms. The time required to initialize SPLASH is 0.47 seconds. We compare our results with the benchmarks from <ref> [1] </ref> for 100 comparisons of 100-long sequences shown in Figure 22. These benchmarks are for computing the edit distance only. Therefore, the speed-up for sequence alignment should be greater.
Reference: [2] <author> D. Sankoff and J. Kruskal, eds., </author> <title> Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison, </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: performance of the new algorithm on SPLASH is compared to standard implementations on conventional computers. 2 Sequence Comparison The need for a quantitative measure of similarity between two or more sequences of possibly different lengths arises in several disciplines, such as molecular biology, speech processing, handwriting analysis, and text processing <ref> [2] </ref>. We discuss sequence comparison as it is applied to genetic sequences, but the methods presented here are adaptable to other applications. 2.1 DNA Sequences Deoxyribonucleic acid (DNA) is a macromolecular chain of nucleotides that serves as a carrier of genetic information.
Reference: [3] <author> K. A. Frenkel, </author> <title> "The Human Genome Project and Informatics," </title> <journal> CACM, November 1991, </journal> <volume> vol. 34. no. 11, </volume> <pages> pp. 41-51. </pages>
Reference-contexts: Biologists have developed methods for determining the sequence of bases from a strand of DNA. DNA sequences are typically from thousands to millions of bases long, and new sequences are determined at an increasing rate. With the onset of the Human Genome Initiative <ref> [3] </ref> and constant improvement of sequencing technology, the size of GenBank and similar databases have grown and will undoubtedly continue to grow at a steady rate 1 . The analysis of a newly generated sequence typically involves searching the database for similar sequences.
Reference: [4] <author> E. S. Lander, R. Langridge, and D. M. Saccocio, </author> <title> "Computing in Molecular Biology: Mapping and Interpreting Biological Information," </title> <journal> Computer, November 1991, </journal> <volume> vol. 24, no. 11, </volume> <pages> pp. 6-13. </pages>
Reference-contexts: It is estimated that by 1999, 1.6 billion base pairs will be sequenced each year <ref> [4] </ref>. 2 cleotide for another 2 . Each operation has an associated cost, which is a function of the nucleotides involved in the operation. The cost of the transformation is then the sum of the costs of the individual operations.
Reference: [5] <author> R. A. Wagner and M. J. Fischer, </author> <title> "The string-to-string correction problem," </title> <journal> J. Assn. Comput. Mach., </journal> <volume> vol. 1, </volume> <pages> pp. 168-173, </pages> <year> 1974. </year>
Reference-contexts: We refer to the problem of computing the edit distance between two sequences as the Sequence Comparison Problem. 2.3 Dynamic Programming The calculation of the edit distance can be done with a well-known dynamic programming algorithm <ref> [5, 6] </ref>.
Reference: [6] <author> S. B. Needleman and C. D. Wunsch, </author> <title> "A General Method Applicable to the Search for Similarities in the Amino-Acid Sequence of Two Proteins," </title> <journal> Journal of Molecular Biology, </journal> <volume> vol. 48, </volume> <pages> pp. 443-453, </pages> <year> 1970. </year> <month> 22 </month>
Reference-contexts: We refer to the problem of computing the edit distance between two sequences as the Sequence Comparison Problem. 2.3 Dynamic Programming The calculation of the edit distance can be done with a well-known dynamic programming algorithm <ref> [5, 6] </ref>.
Reference: [7] <author> R. J. Lipton and D. P. Lopresti, </author> <title> "A Systolic Array for Rapid String Comparison," 1985 Chapel Hill Conference on VLSI, </title> <editor> H. Fuchs, ed., </editor> <address> Rockville, MD: </address> <publisher> Computer Science Press, </publisher> <year> 1985, </year> <pages> pp. 363-376. </pages>
Reference-contexts: The diagonal mapping, shown in Figure 6, was used in the design of the Princeton Nucleic Acid Comparator (P-NAC) <ref> [7] </ref>. In the figure, the antidiagonal lines denote the linear connection of processing elements (PE's), and the dots denote the active PE's at each step. At each step, all the entries along one antidiagonal of the DP table are computed. Figure 7 depicts the data flow through the systolic array. <p> 8 j 2 j 0 j 0 j 2 8 7 6 5 4 3 Character Traveling Distance ) Stored Distance + 1 A - j 1 j 0 Target Source 7 While working on P-NAC, Lopresti discovered that the distances can be represented in a fixed number of bits <ref> [7] </ref>. Using the cost functions (2), only two bits are required to encode the distances, regardless of the length of the array. This results in a systolic array that is easily scalable to any length without change to the basic processing element. <p> That is, a 2 fi 2 table fragment must look like: a b = a 1; d 1 : Using the results of the above lemma due to <ref> [7] </ref>, we are able to store each modulo-4-encoded distance using only one bit 5 . We take the most significant bit of the modulo-4 distance and store that in RAM.
Reference: [8] <author> M. Gokhale, et. al., </author> <title> "SPLASH: A Reconfigurable Linear Logic Array," </title> <booktitle> Proceedings of the 1990 International Conference on Parallel Processing, </booktitle> <month> August, </month> <year> 1990, </year> <pages> pp. 526-532. </pages>
Reference-contexts: The marker decoding process is more formally described by the FSM in " T G C T A A G C would be constructed from the marker sequence 101010101001010101010101101010101, read left to right. 5 SPLASH The systolic alignment array has been implemented on the SPLASH programmable logic array <ref> [8, 9] </ref>.
Reference: [9] <institution> Supercomputing Research Center, </institution> <note> SPLASH User's Manual, ver. 2, </note> <month> May </month> <year> 1990. </year>
Reference-contexts: The marker decoding process is more formally described by the FSM in " T G C T A A G C would be constructed from the marker sequence 101010101001010101010101101010101, read left to right. 5 SPLASH The systolic alignment array has been implemented on the SPLASH programmable logic array <ref> [8, 9] </ref>.
Reference: [10] <author> Xilinx, Inc., </author> <title> The Programmable Gate Array Data Book, </title> <year> 1991. </year>
Reference-contexts: The SPLASH board contains 32 Xilinx XC3090 field-programmable gate arrays (FPGA) <ref> [10] </ref> with local connections to 32 1M-bit (128K by 8) static RAM chips, as shown in Figure 13. The FPGA's are connected linearly in a ring with input coming from a 32-bit FIFO queue connected to chip 0 and output going to a 32-bit FIFO queue connected to chip 31.
Reference: [11] <author> M. Gokhale, et. al., </author> <title> "The Logic Description Generator," </title> <institution> Supercomputing Research Center Technical Report SRC TR89-011, Supercomputing Research Center, 17100 Science Driver, Bowie, MD 20715. </institution> <month> 23 </month>
Reference-contexts: The range clause acts like a for loop with ! as the loop variable. The shape, start-!row, and start-!col clauses specify a vertical positioning of the CLB's through the variables !row and !col. For a more complete discussion of LDG, see <ref> [11] </ref>. 15 ;;; two mux's in one clb (input B C D E A) (output X Y) (location row col) (config FG) (F ((~A * B) + (A * D))) (X F) ) ;;; 8-bit data multiplexer ;;; inputs: mux_sel mux_clk (array A 7 0) (array B 7 0) ;;; outputs:
References-found: 11

