URL: http://www.eecis.udel.edu:80/~shires/papers/parser.ps
Refering-URL: http://www.eecis.udel.edu:80/~shires/professional.html
Root-URL: http://www.cis.udel.edu
Title: An Efficient Method for Parsing Large Finite Element Data Files  
Author: D. R. Shires 
Keyword: Simulation and High Performance Computing Direc torate, Aberdeen Proving Ground, MD  
Note: Army Research Laboratory, Advanced  
Date: October 24, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Maier. </author> <title> A fast numerical method for isothermal resin transfer mold filling. </title> <type> Technical Report 94-028, </type> <institution> U. S. Army High Performance Computing Research Center, Minneapolis, </institution> <year> 1994. </year>
Reference-contexts: This team is particularly involved with manufacturing simulation dealing especially with composite materials. To this end, two algorithms have been developed. One is a new variant of the control volume finite element algorithm to simulate the isothermal flow of resin in the resin transfer molding (RTM) composite manufacturing process <ref> [1] </ref>. The other is an implicit time-dependent pure finite element methodology for RTM flow simulation [2]. The majority of the work in both algorithms is performed in a few small FORTRAN loops. These codes perform very well on the new pipelined architecture found in the Silicon Graphics Power Challenge computer.
Reference: [2] <author> R. Mohan, N. Ngo, K. Tamma, and K. Fickie. </author> <title> On a pure finite element based methodology for resin transfer mold filling simulations. </title> <editor> In R. Lewis and P. Durbe-taki, editors, </editor> <title> Numerical Methods for Thermal Problems, </title> <booktitle> volume IX, </booktitle> <pages> pages 1287-1310, </pages> <address> Swansea, UK, </address> <month> July </month> <year> 1995. </year> <note> Pineridge Press. </note>
Reference-contexts: One is a new variant of the control volume finite element algorithm to simulate the isothermal flow of resin in the resin transfer molding (RTM) composite manufacturing process [1]. The other is an implicit time-dependent pure finite element methodology for RTM flow simulation <ref> [2] </ref>. The majority of the work in both algorithms is performed in a few small FORTRAN loops. These codes perform very well on the new pipelined architecture found in the Silicon Graphics Power Challenge computer. However, parsing the input files is annoyingly slow and at times convoluted.
Reference: [3] <author> T. Mason and D. Brown. </author> <title> Lex & Yacc. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, California, </address> <year> 1990. </year>
Reference-contexts: Regular expressions provide a robust method for specifying patterns in data. Indeed, these regular expressions are mathematical objects, and as such, may consist of the empty set, a single character, unions and concatenations of regular expressions, or repetitions of regular expressions <ref> [3] </ref>. Some of the basic symbols used in defining regular expressions in Lex are listed in table 1. fl For example, the regular expression [+-]?[0-9]+ can match -241, +023, 51, etc. Finite element input files contain several entities that must be Table 1: Some regular expression operators of Lex. <p> They contain both integer and real numbers. They also contain delimiter characters, such as tabs or spaces, which segregate the items. They also often contain comments. All of these, with the exception of real fl A complete listing of regular expression operators may be found in <ref> [3] </ref>. 3 numbers, are fairly easy to define with regular expressions. FORTRAN real numbers are somewhat more involved and require several regular expressions to describe all the possible formats they may take.
Reference: [4] <institution> The MacNeal-Schwendler Corporation, Los Angeles. </institution> <note> MSC/NASTRAN Handbook for Linear Analysis, </note> <month> August </month> <year> 1985. </year>
Reference-contexts: These entries are often referred to as nodes and elements, respectively. Other entries, such as material descriptors, may also be required. General purpose structural analysis programs have more functionality and usually support many data descriptors. For example, NASTRAN fl supports over 100 data card descriptors <ref> [4] </ref>. Since we are more concerned with flow simulations, we focus on the two descriptors comprising the bulk of our data files.
Reference: [5] <author> A. Aho, R. Sethi, and J. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <month> March </month> <year> 1988. </year> <month> 12 </month>
Reference-contexts: LALR parsers can accept ambiguous grammars. Yacc provides mechanisms such as precedence operators to preclude ambiguity. During its final stage of processing, Yacc will actually report the number of ambiguities it encountered and could not fl For additional information regarding issues in parsing and syntax analysis, see <ref> [5] </ref>. 7 resolve. These errors are either shift-reduce errors or reduce-reduce errors. A shift--reduce error occurs when the parser has reached a state where it could either shift the next input symbol or reduce a right hand side.
References-found: 5

