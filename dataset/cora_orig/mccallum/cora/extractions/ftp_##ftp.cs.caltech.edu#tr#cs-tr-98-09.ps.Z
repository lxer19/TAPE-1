URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-98-09.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: A Preliminary Investigation into Dynamic Distributed Workflow  
Author: Daniel M. Zimmerman 
Degree: Thesis by  In Partial Fulfillment of the Requirements for the Degree of Master of Science  
Date: 1998 (Submitted 21 May 1998)  
Address: Pasadena, California  
Affiliation: California Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Andry. </author> <title> Exploiting Transaction and Object Semantics to Increase Concurrency. </title> <booktitle> Applications in Parallel and Distributed Computing, </booktitle> <year> 1994. </year>
Reference-contexts: Some work has already been done in the area of specifying workflows which involve concurrent actions, as in <ref> [1] </ref>, and in the area of workflow evolution (the component of dynamism which involves the changing of schemata while they are operational), as in [2].
Reference: [2] <author> F. Casati, S. Ceri, B. Pernici and G. Pozzi. </author> <title> Workflow Evolution. </title> <journal> Data and Knowledge Engineering Volume 24, </journal> <note> Issue 3, </note> <year> 1998. </year>
Reference-contexts: Some work has already been done in the area of specifying workflows which involve concurrent actions, as in [1], and in the area of workflow evolution (the component of dynamism which involves the changing of schemata while they are operational), as in <ref> [2] </ref>. Developing a specification method for workflow schemata in dynamic distributed workflow systems must build upon this work and upon the work already done in specification methods for traditional workflow schemata.
Reference: [3] <author> M. Erdos, B. Hartman, M. Mueller. </author> <title> Security Reference Model for the Java Developers Kit 1.0.2. </title> <type> Sun Microsystems Technical Report, </type> <year> 1996. </year>
Reference-contexts: More detailed information on Javas security architecture can be found in [6] and <ref> [3] </ref>. Object serialization. Java 1.1s object serialization mechanism allows any object implementing a special interface (called java.io.Serializable) to be converted to and from a standard data representation format, capable of being stored on disk or transmitted over a network.
Reference: [4] <author> The Infospheres Research Group. </author> <title> The Infospheres Infrastructure Users Guide. </title> <type> Technical Report, </type> <institution> California Institute of Technology, </institution> <year> 1997. </year>
Reference-contexts: Some, such as the Object Management Groups CORBA [8] and Suns Java Beans [9], use method call semantics to hide the underlying messaging protocols which are used to allow inter-object communication. Others, such as version 1.0 of the Infospheres Infrastructure <ref> [4] </ref>, use direct messaging with the concept of mailboxes and object addresses.
Reference: [5] <author> The Infospheres Research Group. </author> <title> The Infospheres Infrastructure 2.0 Users Guide. </title> <type> Technical Report, </type> <institution> California Institute of Technology. </institution> <year> 1998. </year>
Reference-contexts: This would allow writers of Infospheres objects to have all the advantages of UberNets dynamically reconfigurable messaging system if they chose to, as well as potentially improving communications efficiency for the Infospheres Infrastructures internal communications. More information on the synergy between UberNet and the II is available in <ref> [5] </ref>. 4.2 Implementation Language The choice of implementation language was perhaps the most important design decision, as it determined what language facilities would be available for use by the UberNet system. The system requirements which played the largest role in determining the implementation language were platform independence and dynamic extensibility.
Reference: [6] <author> JavaSoft, Inc. </author> <title> Java Cryptography Architecture: API Specification and Reference. </title> <year> 1997. </year>
Reference-contexts: More detailed information on Javas security architecture can be found in <ref> [6] </ref> and [3]. Object serialization. Java 1.1s object serialization mechanism allows any object implementing a special interface (called java.io.Serializable) to be converted to and from a standard data representation format, capable of being stored on disk or transmitted over a network.
Reference: [7] <author> M. Merz, B. Liberman and W. Lamersdorf. </author> <title> Using Mobile Agents to Support Interorganizational Workflow Management. </title> <journal> Applied Artificial Intelligence, </journal> <month> November </month> <year> 1997. </year>
Reference-contexts: A mobile agent, for the purposes of this discussion, is a piece of software which actively migrates among multiple machines and uses a standardized API to interact with software components running on those machines. The use of mobile agents in static distributed workflow systems has been previously discussed, in <ref> [7] </ref>. Assume that we have a set of workers with public interfaces which contain both semantic and syntactic information (as in the method call sequencing strategy).
Reference: [8] <institution> Object Management Group. CORBA/IIOP 2.2 Specification. </institution> <year> 1998. </year>
Reference-contexts: Some, such as the Object Management Groups CORBA <ref> [8] </ref> and Suns Java Beans [9], use method call semantics to hide the underlying messaging protocols which are used to allow inter-object communication. Others, such as version 1.0 of the Infospheres Infrastructure [4], use direct messaging with the concept of mailboxes and object addresses.
Reference: [9] <author> Sun Microsystems. </author> <title> The Java Beans Specification. </title> <note> Version 1.01, </note> <year> 1997. </year>
Reference-contexts: Some, such as the Object Management Groups CORBA [8] and Suns Java Beans <ref> [9] </ref>, use method call semantics to hide the underlying messaging protocols which are used to allow inter-object communication. Others, such as version 1.0 of the Infospheres Infrastructure [4], use direct messaging with the concept of mailboxes and object addresses. <p> In order to ensure that these components would be interoperable, it was decided to implement them according to the Java Beans component model as specified by Sun in <ref> [9] </ref>. This model specifies naming conventions for methods and attributes of components, in such a way that Java Bean manipulation tools can discover enough information about a particular Bean by introspection to be able to work with it in reasonable ways.
Reference: [10] <author> Sun Microsystems. </author> <title> Java Studio. </title> <note> http://www.sun.com/studio/, 1998. </note>
Reference-contexts: One important benefit of using the Java Beans component model is that visual application building tools, such as Suns Java Studio <ref> [10] </ref>, can be used to visually compose Beans to create complete applications. Thus, using UberNet with other Java Beans, it is possible to visually build not only an application, but also the communication channels to be used by that application.
Reference: [11] <editor> The Workflow Management Coalition. </editor> <title> The Workflow Reference Model. Document Number WFMC-TC-1003, </title> <year> 1994. </year>
Reference-contexts: that such a communications infrastructure will be extremely useful during exploration of other parts of the problem domain. 1.2 Workflow and its Applications The Workflow Management Coalition (WfMC), an international body based in Belgium, has issued a standard glossary of workflow terminology [12], as well as a workflow reference model <ref> [11] </ref>. Though these are well-defined standards, they apply mainly to workflow in the context of business processes, rather than in the more general sense of workflow among distributed objects which we are exploring here.
Reference: [12] <institution> The Workflow Management Coalition. Terminology and Glossary. Document Number WFMC-TC-1011, </institution> <year> 1996. </year>
Reference-contexts: problem at hand, but also by the fact that such a communications infrastructure will be extremely useful during exploration of other parts of the problem domain. 1.2 Workflow and its Applications The Workflow Management Coalition (WfMC), an international body based in Belgium, has issued a standard glossary of workflow terminology <ref> [12] </ref>, as well as a workflow reference model [11]. Though these are well-defined standards, they apply mainly to workflow in the context of business processes, rather than in the more general sense of workflow among distributed objects which we are exploring here.
Reference: [13] <author> D. Zimmerman. UberNet: </author> <title> The Infospheres Network Layer Users Guide. </title> <type> Technical Report, </type> <institution> California Institute of Technology, </institution> <year> 1998. </year>
Reference-contexts: This section does not contain any information on programming with UberNetsuch information can be found in the UberNet Users Guide <ref> [13] </ref>. Complete API documentation for UberNet is available online from the Caltech Infospheres Group web server, http://www.infospheres.caltech.edu/. 4.4.1 Wire Protocol Daemons UberNet includes four wire protocol daemons, which enable communication via TCP, UDP, IP Multicast, and Loopback.
References-found: 13

