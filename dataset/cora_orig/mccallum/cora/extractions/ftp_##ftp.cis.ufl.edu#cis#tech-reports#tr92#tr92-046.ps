URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-046.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anwar. </author> <title> Supporting complex events and rules in an oodbms: A seamless approach. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: So most of the interaction needs to be based on the action or the sequences of actions (essentially primitive or complex events, respectively) which entail that the underlying PSAs need to support various types of events (external, temporal, and database or method based). Techniques recently <ref> [8, 6, 21, 1] </ref> developed in the area of active databases can be adapted to provide this capability. Collaboration: In this paper, we assume that collaboration together with coordination results in cooperative behavior. <p> Application semantics can exploit these modes (termed 14 coupling modes) to increase concurrency and availability. More recently, the active paradigm has been incorporated into object-oriented databases <ref> [7, 1, 20, 21, 22] </ref> In the context of CPS, the proposed active database capability can be viewed as a persistent blackboard. Agents can write into a persistent shared space in each PSA and the monitoring of what is posted here is done using ECA rules. <p> Due to failures or time constraints the execution manager may 30 query the capability database to select additional PSA for the task or to replace a PSA. Currently, Sentinel an object-oriented active DBMS <ref> [1, 7] </ref> is being enhanced to support CPS. 4.3 Faculty-Search Example In this subsection, we describe a typical problem (of faculty-search) with which most of us are familiar and use it as a running example for the next two sections. This problem is representative of CPS (although not computationally intensive).
Reference: [2] <author> G. Ariav. </author> <title> A temporally oriented data model. </title> <journal> ACM Transactions on database Systems, </journal> <volume> 11(4), </volume> <year> 1986. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [3] <editor> A. Barr, P.R. Cohen, and E.A. Feigenbaum. </editor> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <address> vol.IV. </address> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The last two essentially differentiate a cooperative problems solving environment from other environments. It is interesting to note that there is a large, separate body of work on Distributed Cooperative Problem Solving <ref> [3] </ref> in Distributed Artificial Intelligence (DAI) which distinguishes distributed problem solving from multi-agent problem solving [4] where the latter need to reason about the process of coordination among the agents. <p> The coordination is cognitive oriented, knowledge intensive and would require lot more human interaction. Clearly, traditional Database systems does not even provide support for this level of coordination. Distributed cooperative problem solving (DCPS) <ref> [3] </ref> goes a step further in adding communication between PSAs during problem solving. Although the solution is arrived at as a group, each node possesses sufficient overall problem-solving knowledge that its particular expertise can be applied and communicated without assistance from other nodes in the network. <p> Finally, a note about the proposed Database-centered approach. Unlike the AI approach to modeling DCPS <ref> [3] </ref> in terms of negotiation, functionally accurate structuring, multi-agent planning etc., we take a more pragmatic (and a bottom-up) approach in terms of defining and solving the problem with known and viable DBMS and KBMS functionality.
Reference: [4] <editor> A.H. Bond and L. Gasser. </editor> <booktitle> Readings in Distributed Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: The last two essentially differentiate a cooperative problems solving environment from other environments. It is interesting to note that there is a large, separate body of work on Distributed Cooperative Problem Solving [3] in Distributed Artificial Intelligence (DAI) which distinguishes distributed problem solving from multi-agent problem solving <ref> [4] </ref> where the latter need to reason about the process of coordination among the agents. <p> This trend, we believe, underlies the approach proposed in this paper which analyzes the use of newly proposed techniques for yet another non-traditional application. Most of the applications of DAI <ref> [4] </ref> (Chapter 8) use long term memory or short term memory to refer to the Database, and active blackboard respectively. But they concentrate more on the collaboration and coordination aspects by means of goal processing and treat the long term and short term memory as second class objects.
Reference: [5] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Active databases can be viewed as an abstraction for elegantly supporting a variety of database functions that were being realized using special-purpose mechanisms in conventional DBMSs. Traditionally DBMSs have been passive; that is queries or transactions are executed only when explicitly requested. <ref> [5] </ref> discusses the usefulness of rule-based active capability for supporting a variety of DBMS functions, such as integrity and security enforcement, access control, maintenance of derived data, materialized views and snapshots, rule-based inferencing, and dynamic coordination. <p> If the condition evaluates to true then the action is executed. The situation evaluation subsystem of HiPAC <ref> [5, 9] </ref> is concerned with the optimization of rules and their efficient evaluation. <p> The system is responsible for monitoring the state of the database and detecting events specified to it. An active database has the capability of monitoring temporal events as well (in addition to database and external events <ref> [5] </ref>) and initiating a set of actions. The plan defines the set of situations that can arise while processing a set of activities and the set of actions that need to be taken as a result of those situations.
Reference: [6] <author> S. Chakravarthy and S. Garg. </author> <title> Extended relational algebra (era): for optimizing situations in active databases. </title> <type> Technical Report UF-CIS TR-91-24, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: So most of the interaction needs to be based on the action or the sequences of actions (essentially primitive or complex events, respectively) which entail that the underlying PSAs need to support various types of events (external, temporal, and database or method based). Techniques recently <ref> [8, 6, 21, 1] </ref> developed in the area of active databases can be adapted to provide this capability. Collaboration: In this paper, we assume that collaboration together with coordination results in cooperative behavior.
Reference: [7] <author> S. Chakravarthy, E. Hanson, and S.Y.W. Su. </author> <title> Active Database Research at the University of Florida. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: Application semantics can exploit these modes (termed 14 coupling modes) to increase concurrency and availability. More recently, the active paradigm has been incorporated into object-oriented databases <ref> [7, 1, 20, 21, 22] </ref> In the context of CPS, the proposed active database capability can be viewed as a persistent blackboard. Agents can write into a persistent shared space in each PSA and the monitoring of what is posted here is done using ECA rules. <p> Due to failures or time constraints the execution manager may 30 query the capability database to select additional PSA for the task or to replace a PSA. Currently, Sentinel an object-oriented active DBMS <ref> [1, 7] </ref> is being enhanced to support CPS. 4.3 Faculty-Search Example In this subsection, we describe a typical problem (of faculty-search) with which most of us are familiar and use it as a running example for the next two sections. This problem is representative of CPS (although not computationally intensive).
Reference: [8] <author> S. Chakravarthy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> Database Systems 49 R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: So most of the interaction needs to be based on the action or the sequences of actions (essentially primitive or complex events, respectively) which entail that the underlying PSAs need to support various types of events (external, temporal, and database or method based). Techniques recently <ref> [8, 6, 21, 1] </ref> developed in the area of active databases can be adapted to provide this capability. Collaboration: In this paper, we assume that collaboration together with coordination results in cooperative behavior. <p> Rules are generally of the form &lt;event, condition, action + context information&gt; (termed ECA rules), where event is the specification of an happening (e.g., function invocation, time, ) when the condition is evaluated. An event algebra <ref> [25, 8] </ref> has been developed as part of the knowledge model for supporting the specification of different types of events (database, temporal, and application-triggered) and for constructing complex events using the above. If the condition evaluates to true then the action is executed. <p> Although there is a large body of work in temporal databases [15, 11, 2, 27, 30, 34, 33, 19, 29, 23], modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events <ref> [8] </ref>) is adequate. However, if the problem itself is temporal in nature, then the full functionality of temporal databases is required. In this section we have identified key functional and basic support required for CPS. <p> A subactivity itself can be formulated as an action of an ECA rule in which case it will be scheduled when the appropriate event occurs and the condition evaluates to true. The condition may check for the completion of other subactivities. Complex events proposed in Snoop <ref> [8] </ref> can also be used for synchronization of subactivities. Refer to the faculty search example. We find that the subactivities 1 an d 2 are independent and can be processed concurrently, the subactivity 3 waits for the completion of subactivities 1 and 2. <p> Complex events that are constructed from the above primitive events and operators are also useful <ref> [8] </ref>. We do not illustrate the applicability of complex events in the examples presented in this paper. It is easy to see how they can be used to manage concurrent sub-activities.
Reference: [9] <author> U. S. Chakravarthy. </author> <title> Rule management and Evaluation: An Active DBMS Perspective. </title> <booktitle> Special issue of ACM Sigmod Record on rule processing in databases, </booktitle> <volume> 18(3) </volume> <pages> 20-28, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: If the condition evaluates to true then the action is executed. The situation evaluation subsystem of HiPAC <ref> [5, 9] </ref> is concerned with the optimization of rules and their efficient evaluation. <p> A condition is evaluated when the associated event happens and if the condition evaluates to true then appropriate action is taken. This simple mechanism has been shown to support a number of database functionality in an elegant way <ref> [9] </ref>. The system is responsible for monitoring the state of the database and detecting events specified to it. An active database has the capability of monitoring temporal events as well (in addition to database and external events [5]) and initiating a set of actions.
Reference: [10] <author> U. S. Chakravarthy and S. Nesson. </author> <title> Making an Object-Oriented DBMS Active: Design, Implementation and Evaluation of a Prototype. </title> <booktitle> In Proceedings International Conference on Extended Data Base Technology, </booktitle> <pages> pages 482-490, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Limited active database capability can be implemented in a straightforward manner without using rules (e.g., SYBASE [12], Symbolics-ADBMS <ref> [10] </ref>). However, the use of rules for incorporating active capability provides several additional benefits including: declarative specification of events, conditions, and actions, optimization of rules and actions, use of existing rule-based systems (e.g., OPS class systems) using the active capability, and specification of object and application semantics.
Reference: [11] <author> J. Clifford and D.S. Warren. </author> <title> Formal semantics for time in databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <year> 1983. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [12] <author> M. Darnovsky and J. Bowman. </author> <title> TRANSACT-SQL USER'S GUIDE. Document 3231-2.1, </title> <publisher> Sybase Inc., </publisher> <year> 1987. </year>
Reference-contexts: Limited active database capability can be implemented in a straightforward manner without using rules (e.g., SYBASE <ref> [12] </ref>, Symbolics-ADBMS [10]). However, the use of rules for incorporating active capability provides several additional benefits including: declarative specification of events, conditions, and actions, optimization of rules and actions, use of existing rule-based systems (e.g., OPS class systems) using the active capability, and specification of object and application semantics.
Reference: [13] <author> U. Dayal. </author> <title> Active Database Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases , Jerusalem, </booktitle> <address> Israel, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: The changes are caused by events, and effects of events are specified by condition-action pairs. An active database provides asynchronous (through the specification of events, conditions, and actions in the form of situation-action rules <ref> [13] </ref>) mechanism for supporting event-based interaction among the nodes participating in CPS. We also envision, in our formulation of an active database, both data and situation-action rules to be part of the shared database to which transaction oriented access and manipulation are applicable.
Reference: [14] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transaction model for long-running activities. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 103-112, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Also, the autonomy assumption (as in the case of the near-term approach) is no longer valid and as a consequence, a migration path from existing systems needs to be outlined. In order for this approach to succeed, new models for long-running activities that are extensions of traditional transaction models <ref> [14] </ref> or the ones being developed for heterogeneous systems need to be developed [16]. Also, techniques for capturing the information in the capability database and keeping the information current is equally important.
Reference: [15] <author> U. Dayal and J.M. Smith. </author> <title> Probe:a knowledge-oriented database management system. </title> <booktitle> In Proceedings of the Islamorada Workshop on Large Scale Knowledge Base and Reasoning Systems, </booktitle> <year> 1985. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [16] <editor> A.K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San mateo, CA, </address> <year> 1992. </year>
Reference-contexts: In order for this approach to succeed, new models for long-running activities that are extensions of traditional transaction models [14] or the ones being developed for heterogeneous systems need to be developed <ref> [16] </ref>. Also, techniques for capturing the information in the capability database and keeping the information current is equally important.
Reference: [17] <author> R. Elmasri and G. Wuu. </author> <title> A temporal model and query language for e-r databases. </title> <booktitle> In Proceedings 5th International Conference on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: Although there is a large body of work in temporal databases [15, 11, 2, 27, 30, 34, 33, 19, 29, 23], modeling of temporal aspects <ref> [17] </ref>, our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate. However, if the problem itself is temporal in nature, then the full functionality of temporal databases is required.
Reference: [18] <editor> R. Engelmore and T. Morgan, editors. </editor> <booktitle> Blackboard Systems. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: A centralized blackboard is used in the near-term approach whereas it is distributed in the long-term approach. Although blackboards that are used as scratch pads have been extensively studied in the AI literature <ref> [18] </ref>, monitoring what is posted to persistent blackboard in an asynchronous manner is novel to our approach. 4.2 Functionality of the CPS System The main functionality of the CPS system that need to be supported are: Activity specification, Agent modeling (i.e., populating the capability database) and Activity management (i.e., sequencing, synchronization,
Reference: [19] <author> S.K. Gadia. </author> <title> A homogeneous model and query languages for temporal databases. </title> <booktitle> In Proceedings 2nd International Conference on Data Engineering, </booktitle> <year> 1986. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [20] <author> S. Gatziu and K. r. Dittrich. SAMOS: </author> <title> an Active, Object-Oriented Database System. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year> <month> 50 </month>
Reference-contexts: Application semantics can exploit these modes (termed 14 coupling modes) to increase concurrency and availability. More recently, the active paradigm has been incorporated into object-oriented databases <ref> [7, 1, 20, 21, 22] </ref> In the context of CPS, the proposed active database capability can be viewed as a persistent blackboard. Agents can write into a persistent shared space in each PSA and the monitoring of what is posted here is done using ECA rules.
Reference: [21] <author> N. H. Gehani and H. V. Jagadish. </author> <title> Ode as an Active Database: Constraints and Triggers. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: So most of the interaction needs to be based on the action or the sequences of actions (essentially primitive or complex events, respectively) which entail that the underlying PSAs need to support various types of events (external, temporal, and database or method based). Techniques recently <ref> [8, 6, 21, 1] </ref> developed in the area of active databases can be adapted to provide this capability. Collaboration: In this paper, we assume that collaboration together with coordination results in cooperative behavior. <p> Application semantics can exploit these modes (termed 14 coupling modes) to increase concurrency and availability. More recently, the active paradigm has been incorporated into object-oriented databases <ref> [7, 1, 20, 21, 22] </ref> In the context of CPS, the proposed active database capability can be viewed as a persistent blackboard. Agents can write into a persistent shared space in each PSA and the monitoring of what is posted here is done using ECA rules.
Reference: [22] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object-Oriented Database. </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Application semantics can exploit these modes (termed 14 coupling modes) to increase concurrency and availability. More recently, the active paradigm has been incorporated into object-oriented databases <ref> [7, 1, 20, 21, 22] </ref> In the context of CPS, the proposed active database capability can be viewed as a persistent blackboard. Agents can write into a persistent shared space in each PSA and the monitoring of what is posted here is done using ECA rules.
Reference: [23] <author> Seung-Kyum Kim. </author> <title> A Formal Appproach to Two-Dimensional Temporal Databases. </title> <type> Master's thesis, </type> <institution> Department of Computer & Information Sciences, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [24] <author> V. R. Lesser and D. D. Corkill. </author> <title> Functinally accurate cooperative distributed systems. </title> <journal> IEEE Trans. Syst. Man Cybern.,, </journal> <year> 1981. </year>
Reference-contexts: In this scenario, it is uncertain whether the problem can be solved or even whether a coordination among agents can be achieved. In this paper, we delimit ourselves to problems for which the coordination and collaboration components can be specified. Lesser <ref> [24] </ref> defines two kinds of distributed problem solving systems namely: CA/NA completely accurate nearly autonomous systems and FA/C functionally accurate cooperative systems. Our approach falls in the domain of CA/C completely accurate and cooperative systems. The PSAs in our approach may be autonomous or cooperative.
Reference: [25] <author> D. Mishra. Snoop: </author> <title> An event specification language for active databases. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Rules are generally of the form &lt;event, condition, action + context information&gt; (termed ECA rules), where event is the specification of an happening (e.g., function invocation, time, ) when the condition is evaluated. An event algebra <ref> [25, 8] </ref> has been developed as part of the knowledge model for supporting the specification of different types of events (database, temporal, and application-triggered) and for constructing complex events using the above. If the condition evaluates to true then the action is executed.
Reference: [26] <author> S. B. Navathe, A. K. Tanaka, and S. Chakravarthy. </author> <title> Active Database Modeling and Design Tools: Issues, Approach, and Architecture. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: These situations and actions are modeled in terms of the available functionality of an active database. The capability database is used to store the knowledge regarding the extensional and intensional data of the PSAs and environment. Hence a methodology for implementing an active database using design tools seems important <ref> [26, 31] </ref>. The role of the active database is extremely critical to CPS. Without it, this functionality needs to be incorporated into the activity coordinator, thereby unnecessarily increasing the complexity of the 26 activity coordinator.
Reference: [27] <author> S.B. Navathe and R. Ahmed. </author> <title> A temporal relational model and a query language. </title> <journal> Information Sciences, </journal> <volume> 47(2), </volume> <year> 1989. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [28] <author> C. Roda, N. R. Jennings, and E. H. Mamdani. ARCHON: </author> <title> A Cooperative Framework for Industrial Process Control in Cooperating Knowledge Based Systems 1990. </title> <publisher> Spinger Verlag, </publisher> <year> 1991. </year>
Reference-contexts: We also summarize the promising results obtained so far for each problem. PSA Capability modeling: CPS requires PSAs to be able to reflect their role in problem solving as well as the roles of others involved in problem solving. However, one of the open problems <ref> [28] </ref> is the type of knowledge that need to be captured (about self 10 and others) and maintained, the process of capturing the knowledge, and the use of knowledge for interaction and problem solving. There is consensus about the types of knowledge that need to be captured [28]: i) Domain knowledge <p> the open problems <ref> [28] </ref> is the type of knowledge that need to be captured (about self 10 and others) and maintained, the process of capturing the knowledge, and the use of knowledge for interaction and problem solving. There is consensus about the types of knowledge that need to be captured [28]: i) Domain knowledge facts and relationships about the environment in which the problem solving is taking place, ii) State information about the problem being solved with respect to self and others, iii) Capability knowledge problem solving and interaction (communication/coordination) capability of self and others, iv) Intensional knowledge what an PSA
Reference: [29] <author> N.L. Sarda. </author> <title> Extensions to sql for historical databases. </title> <journal> IEEE Transactions on Knowledge & Data Engineering, </journal> <year> 1990. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [30] <author> R. Snodgrass. </author> <title> The temporal query language,tql. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2), </volume> <year> 1987. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [31] <author> A. Tanaka. </author> <title> On Conceptual Design of Active Databases. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, College of Computing, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: These situations and actions are modeled in terms of the available functionality of an active database. The capability database is used to store the knowledge regarding the extensional and intensional data of the PSAs and environment. Hence a methodology for implementing an active database using design tools seems important <ref> [26, 31] </ref>. The role of the active database is extremely critical to CPS. Without it, this functionality needs to be incorporated into the activity coordinator, thereby unnecessarily increasing the complexity of the 26 activity coordinator.
Reference: [32] <author> A. Tanaka, S. B. Navathe, S. Chakravarthy, and K. Karlapalem. Er-r: </author> <title> An enhanced er model with situation-action rules to capture application semantics. </title> <booktitle> In Proc. 10th Int. Conf. on Entity-Relationship Approach, </booktitle> <year> 1991. </year> <month> 51 </month>
Reference-contexts: For the sake of simplicity, we do not present any graphical representation of the schema constructs, although we have worked on extensions to the Entity-Relationship model with event-rule networks <ref> [32] </ref> to capture the behavioral aspects along with the data components of the system. Any modeling technique capable of representing situation/action behavior could be used as well.
Reference: [33] <author> A.U. Tansel. </author> <title> Adding time dimension to relational model and extending relational algebra. </title> <journal> Information Systems, </journal> <volume> 13(4), </volume> <year> 1986. </year>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
Reference: [34] <author> A.U. Tansel and J. Clifford. </author> <title> On a historical relational algebra:two views. </title> <booktitle> In Proceedings ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1985. </year> <month> 52 </month>
Reference-contexts: Although there is a large body of work in temporal databases <ref> [15, 11, 2, 27, 30, 34, 33, 19, 29, 23] </ref>, modeling of temporal aspects [17], our analysis requirements of CPS indicates that causal relationships for synchronization, event-based interaction (including temporal and complex events [8]) is adequate.
References-found: 34

