URL: http://www.cs.rpi.edu/~fryp/papers/wip/research_outline.ps
Refering-URL: http://www.cs.rpi.edu/~fryp/papers/wip/
Root-URL: http://www.cs.rpi.edu
Email: fryp@cs.rpi.edu  
Title: A Metacomputing Model for Distributed Applications in a Transient Client and Server Environment Research Outline  
Author: Patrick H. Fry 
Affiliation: Department of Computer Science Rensselaer Polytechnic Institute  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, C. Bischof, J. Dem-mel, J. Dongorra, J. Du Croz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <title> LAPACK Users' Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, 2 edition, </address> <year> 1995. </year>
Reference-contexts: D'Agent provides excellent support for mobile systems and users. However there is no distributed applications support. 6.5 NetSolve NetSolve is a "network server for solving computational science problems"[2]. It is designed to load balance net-worked computational resources. It supports the use of math libraries like BLAS [9] and LAPACK <ref> [1] </ref>. It is not a metasystem for distribution of parallel applications. 6.6 Virtual BSP Computer The Virtual BSP Computer supports BSP computations over a network of non-dedicated workstations [12]. This system migrates processes from workstations which became unavailable and supports scalability and tightly synchronized parallel computations.
Reference: [2] <author> Henri Casanova and Jack Dongarra. NetSolve: </author> <title> A network server for solving computational science problems. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 11(3) </volume> <pages> 213-223, </pages> <year> 1997. </year>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized.
Reference: [3] <author> Patrick H. Fry and Joshua W. Knight. </author> <title> A caching DHCP relay agent. </title> <booktitle> Submitted to IPPS/SPDP 1999 13th International Parallel Processing Symposium & 10th Symposium on Parallel and Distributed Processing. </booktitle>
Reference-contexts: Using CDRAs reduces overall DHCP network traffic by keeping most on the client's local subnet, lowers server workload, and increases the availability of DHCP services. The CDRA can also provide other services such as automated lease release and dynamic DNS update <ref> [3, 4] </ref>. This CDRA work relates to resource information storage and distribution in a metasystem. Using CDRAs, network information is stored an maintained at a central location, the DHCP server. The CDRA helps to increase availability, and efficiency of access to that information.
Reference: [4] <author> Patrick H. Fry and Joshua W. Knight. </author> <title> A caching DHCP relay agent. </title> <type> Technical Report TR97-10, </type> <institution> Dept. of Computer Science, Rensselaer Polytechnic Institute and IBM T. J. Watson Research Center, Troy, NY and Yorktown, </institution> <address> NY, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: Using CDRAs reduces overall DHCP network traffic by keeping most on the client's local subnet, lowers server workload, and increases the availability of DHCP services. The CDRA can also provide other services such as automated lease release and dynamic DNS update <ref> [3, 4] </ref>. This CDRA work relates to resource information storage and distribution in a metasystem. Using CDRAs, network information is stored an maintained at a central location, the DHCP server. The CDRA helps to increase availability, and efficiency of access to that information.
Reference: [5] <author> Patrick H. Fry, Jeffrey Nesheiwat, and Boleslaw K. Szymanski. </author> <title> Parallel distributed computation of twin primes distribution. </title> <note> Submitted to Parallel and Distributed Computing Practices. </note>
Reference-contexts: Our system will support checkpoint-ing, or saving of intermediate results for these types of jobs. If a system failure occurs, the job may be restarted at the latest checkpoint instead of starting all over from the beginning. Our twin primes system uses this feature <ref> [5, 6] </ref>. 5 Heterogeneity "Write once, run anywhere" is beneficial to any development system. We will investigate the efficiency of using Java with mobile agents for application distribution. Up until recently, Java has not been considered viable for any computation intensive system because of serious performance issues. <p> Our first application using this framework: a parallel computation which counts the distribution of twin primes, calculates Brun's constant and the maximal distance between pairs of twin primes. Two primes are twins if they differ by two <ref> [5, 6] </ref>. Prior to our contribution, twin primes data had been collected for all twins up to 10 14 [13]. Our goal is to reach 10 16 . We are currently at 4 10 15 . Over 325 workstations have participated.
Reference: [6] <author> Patrick H. Fry, Jeffrey Nesheiwat, and Boleslaw K. Szymanski. </author> <title> Computing twin primes and Brun's constant: A distributed approach. </title> <booktitle> In Proceedings of the Seventh IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 42-49, </pages> <address> Chicago, IL, </address> <month> July </month> <year> 1998. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Our system will support checkpoint-ing, or saving of intermediate results for these types of jobs. If a system failure occurs, the job may be restarted at the latest checkpoint instead of starting all over from the beginning. Our twin primes system uses this feature <ref> [5, 6] </ref>. 5 Heterogeneity "Write once, run anywhere" is beneficial to any development system. We will investigate the efficiency of using Java with mobile agents for application distribution. Up until recently, Java has not been considered viable for any computation intensive system because of serious performance issues. <p> Our first application using this framework: a parallel computation which counts the distribution of twin primes, calculates Brun's constant and the maximal distance between pairs of twin primes. Two primes are twins if they differ by two <ref> [5, 6] </ref>. Prior to our contribution, twin primes data had been collected for all twins up to 10 14 [13]. Our goal is to reach 10 16 . We are currently at 4 10 15 . Over 325 workstations have participated.
Reference: [7] <author> Andrew S. Grimshaw and Wm. A. Wulf. </author> <title> The Legion vision of a worldwide virtual computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1) </volume> <pages> 39-45, </pages> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized. <p> Legion is an ambitious project with many different complex issues to address: site autonomy, extensible core, scalable architecture, easy-to-use, seamless computational environment, high performance via parallelism, single, persistent name space, user and resource security, management and exploitation of resource heterogeneity, multiple language support and interoperability, and fault tolerance <ref> [7] </ref>. It may be some time before all these can be fully supported. There is currently no mention of mobile, disconnected resource support. 6.2 DOGMA DOGMA (Distributed Object Group Metacomputing Architecture) is a Java based system which enables parallel computing on heterogeneous computers [8].
Reference: [8] <author> Glenn Judd, Mark Clement, </author> <title> and Quinn Shell. The DOGMA approach to high-utilization supercomputing. </title> <booktitle> In Proceedings of the Seventh IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 64-70, </pages> <address> Chicago, IL, </address> <month> July </month> <year> 1998. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized. <p> However, recent improvements in Java compilers and Java virtual machines have allowed Java to enter this arena. DOGMA is a Java-based distributed metasystem. Their initial performance results are comparable to programs compiled using gcc <ref> [8] </ref>. Another interesting benefit to Java is mobile agent technology. Because Java compiled programs are architecture independent, they may be transported to the execution site at runtime [11, 16]. 6 Related Work There are currently many metasystem environments being developed. <p> It may be some time before all these can be fully supported. There is currently no mention of mobile, disconnected resource support. 6.2 DOGMA DOGMA (Distributed Object Group Metacomputing Architecture) is a Java based system which enables parallel computing on heterogeneous computers <ref> [8] </ref>. It provides support for dedicated clusters as well as idle workstations (through a screensaver application). Currently there is no support for mobile systems or users. DOGMA is still in its infancy.
Reference: [9] <author> D. Kincaid, C. Lawson, R. Hanson, and F. Krogh. </author> <title> Basic linear algebra subprograms for FORTRAN usage. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5 </volume> <pages> 308-325, </pages> <year> 1979. </year>
Reference-contexts: D'Agent provides excellent support for mobile systems and users. However there is no distributed applications support. 6.5 NetSolve NetSolve is a "network server for solving computational science problems"[2]. It is designed to load balance net-worked computational resources. It supports the use of math libraries like BLAS <ref> [9] </ref> and LAPACK [1]. It is not a metasystem for distribution of parallel applications. 6.6 Virtual BSP Computer The Virtual BSP Computer supports BSP computations over a network of non-dedicated workstations [12]. This system migrates processes from workstations which became unavailable and supports scalability and tightly synchronized parallel computations.
Reference: [10] <author> David Kotz, Robert Gray, Saurab Nog, Daniela Rus, Sumit Chawla, and George Cybenko. </author> <title> Agent Tcl: Targeting the needs of mobile computers. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4) </volume> <pages> 58-67, </pages> <month> July/August </month> <year> 1997. </year>
Reference-contexts: This docking station is responsible for temporarily storing results from the user's jobs when the user is not connected to the system. When the user reconnects, the docking station will ship the results to the user. This system is used in <ref> [10] </ref>. Mobile Agents The use of mobile agents provides automatic dissemination of the program to the processing nodes. This can be used for automatic version control and helps minimize the footprint of the metasystem on a participating computer. <p> There have been parallel systems created which use Condor for resource management [12, 14]. Condor has no support for mobile resources. 6.4 D'Agent D'Agent (formerly known as AgentJava and AgentTcl) is a "transportable" agent project at Dartmouth <ref> [10] </ref>. A transportable agent is defined an intelligent agent which has the capability to migrate from machine 3 to machine, interacting with services and other agents [16]. Users submit work to these mobile agents. D'Agent provides a static machine, or "dock," for each mobile system.
Reference: [11] <author> D.B. Lange, M. Oshima, G. Karjoth, and K. Kosaka. </author> <title> Aglets: programming mobile agents in Java. </title> <booktitle> In Proceedings of Worldwide Computing and Its Applications, </booktitle> <pages> pages 253-266. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: DOGMA is a Java-based distributed metasystem. Their initial performance results are comparable to programs compiled using gcc [8]. Another interesting benefit to Java is mobile agent technology. Because Java compiled programs are architecture independent, they may be transported to the execution site at runtime <ref> [11, 16] </ref>. 6 Related Work There are currently many metasystem environments being developed. However, we know of no system which supports both parallel applications and mobile resources. In this section we introduce some other systems for parallel applications over a distributed environment.
Reference: [12] <author> Mohan Nibhanupudi and Boleslaw K. Szymanski. </author> <title> Runtime support for virtual BSP computer. </title> <booktitle> In Proc. Workshops at 12th Intern. Parallel Processing Symposium. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1998. </year>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized. <p> We plan to formally describe methods for replicating work to other nodes in the system if a particular node appears to be taking too long to complete its portion of the work. A similar system for BSP on NOWs (Networks of Workstations) is described in <ref> [12] </ref>. Checkpointing We anticipate using our system to support jobs which may take weeks, months, or even years to complete. Our system will support checkpoint-ing, or saving of intermediate results for these types of jobs. <p> This makes message-passing extremely complex. The basic Condor system does not support any form of network communication in its applications. There have been parallel systems created which use Condor for resource management <ref> [12, 14] </ref>. Condor has no support for mobile resources. 6.4 D'Agent D'Agent (formerly known as AgentJava and AgentTcl) is a "transportable" agent project at Dartmouth [10]. <p> It is designed to load balance net-worked computational resources. It supports the use of math libraries like BLAS [9] and LAPACK [1]. It is not a metasystem for distribution of parallel applications. 6.6 Virtual BSP Computer The Virtual BSP Computer supports BSP computations over a network of non-dedicated workstations <ref> [12] </ref>. This system migrates processes from workstations which became unavailable and supports scalability and tightly synchronized parallel computations.
Reference: [13] <author> Thomas R. </author> <title> Nicely. Enumeration to 1e14 of the twin primes and Brun's constant. </title> <journal> Virginia Journal of Science, </journal> <volume> 46(3) </volume> <pages> 195-204, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Two primes are twins if they differ by two [5, 6]. Prior to our contribution, twin primes data had been collected for all twins up to 10 14 <ref> [13] </ref>. Our goal is to reach 10 16 . We are currently at 4 10 15 . Over 325 workstations have participated. More than 2 10 12 twins have been found over the course of 9 months with over 40 years of cumulative processing time.
Reference: [14] <author> J. Pruyne and M. Livny. </author> <title> Interfacing Condor and PVM to harness the cycles of workstation clusters. </title> <journal> Future Generation Computer Systems, </journal> <volume> 12(1) </volume> <pages> 67-85, </pages> <year> 1996. </year>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized. <p> DOGMA is still in its infancy. Issues of scalability and reliability need to be addressed. 6.3 Condor Condor is a job scheduling system for networks of workstations [15]. The system primarily supports serial jobs. There has been some work in porting PVM <ref> [14] </ref> and MPI to Condor. The user submits a job along with a profile of the system required to run that job. Condor is an excellent system for finding resources for work. <p> This makes message-passing extremely complex. The basic Condor system does not support any form of network communication in its applications. There have been parallel systems created which use Condor for resource management <ref> [12, 14] </ref>. Condor has no support for mobile resources. 6.4 D'Agent D'Agent (formerly known as AgentJava and AgentTcl) is a "transportable" agent project at Dartmouth [10].
Reference: [15] <author> Rajesh Raman, Miron Livny, and Marvin Solomon. </author> <title> Matchmaking: Distributed resource management for high throughput computing. </title> <booktitle> In Proceedings of the Seventh IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 140-146, </pages> <address> Chicago, IL, </address> <month> July </month> <year> 1998. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Currently there is no support for mobile systems or users. DOGMA is still in its infancy. Issues of scalability and reliability need to be addressed. 6.3 Condor Condor is a job scheduling system for networks of workstations <ref> [15] </ref>. The system primarily supports serial jobs. There has been some work in porting PVM [14] and MPI to Condor. The user submits a job along with a profile of the system required to run that job. Condor is an excellent system for finding resources for work.
Reference: [16] <author> Daniela Rus, Robert Gray, and David Kotz. </author> <title> Transportable information agents. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents, </booktitle> <pages> pages 228-236. </pages> <publisher> ACM Press, </publisher> <month> February </month> <year> 1997. </year>
Reference-contexts: DOGMA is a Java-based distributed metasystem. Their initial performance results are comparable to programs compiled using gcc [8]. Another interesting benefit to Java is mobile agent technology. Because Java compiled programs are architecture independent, they may be transported to the execution site at runtime <ref> [11, 16] </ref>. 6 Related Work There are currently many metasystem environments being developed. However, we know of no system which supports both parallel applications and mobile resources. In this section we introduce some other systems for parallel applications over a distributed environment. <p> Condor has no support for mobile resources. 6.4 D'Agent D'Agent (formerly known as AgentJava and AgentTcl) is a "transportable" agent project at Dartmouth [10]. A transportable agent is defined an intelligent agent which has the capability to migrate from machine 3 to machine, interacting with services and other agents <ref> [16] </ref>. Users submit work to these mobile agents. D'Agent provides a static machine, or "dock," for each mobile system. This dock holds the mobile agent for the mobile system while the mobile system is disconnected.
Reference: [17] <author> Rocke Verser. </author> <title> The $10,000 DES challenge. </title> <note> http://www.frii.com/~rcv/deschall.htm. 5 </note>
Reference-contexts: Several systems have been designed in an attempt to reach this goal <ref> [2, 7, 8, 12, 14, 17] </ref>. These systems are designed for the following reasons: * Resource Management With a large number of resources, some automated system for resource selection is extremely helpful. * Idle-Resource Usage Many powerful systems are currently under-utilized.
References-found: 17

