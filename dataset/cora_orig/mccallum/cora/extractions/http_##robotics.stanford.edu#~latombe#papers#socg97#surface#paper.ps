URL: http://robotics.stanford.edu/~latombe/papers/socg97/surface/paper.ps
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Title: A Perturbation Scheme for Spherical Arrangements with Application to Molecular Modeling  
Author: Dan Halperin Christian R. Shelton 
Date: December 14, 1996  
Affiliation: Tel Aviv University  Massachusetts Institute of Technology  
Abstract: We describe a software package for computing and manipulating the subdivision of a sphere by a collection of (not necessarily great) circles and for computing the boundary surface of the union of spheres. We present problems that arise in the implementation of the software and the solutions that we have found for them. At the core of the paper is a novel perturbation scheme to overcome degeneracies and precision problems in computing spherical arrangements while using floating point arithmetic. The scheme is relatively simple, it balances between the efficiency of computation and the magnitude of the perturbation, and it performs well in practice. We report and discuss experimental results. Our package is a major component in a larger package aimed to support geometric queries on molecular models; it is currently employed by chemists working in `rational drug design'. The spherical subdivisions are used to construct a geometric model of a molecule where each sphere represents an atom. We also give an overview of the molecular modeling package and detail additional features and implementation issues. fl This work has been supported in part by a grant from Pfizer Central Research. Dan Halperin has also been supported by an Alon Fellowship, and by ESPRIT IV LTR Project No. 21957 (CGAL). y Department of Computer Science, Tel Aviv University, Tel Aviv 69978, Israel. E-mail: danha@math.tau.ac.il. z Department of Computer Science, MIT, Cambridge, MA 02139. E-mail: cshelton@ai.mit.edu. Part of the work on this paper was carried out while Christian Shelton was at the Department of Computer Science, Stanford University 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Balbes, S. Mascarella, and D. Boyd. </author> <title> A perspective of modern methods for computer aided drug design. </title> <booktitle> In Reviews in Computational Chemistry, </booktitle> <volume> volume 5, </volume> <pages> pages 265-294. </pages> <publisher> VCH Publishers Inc., </publisher> <year> 1994. </year>
Reference-contexts: Our experimental results show that in most cases the time taken up by the perturbation scheme is negligible (Section 6). We point out that our software is part of a toolbox of data structures and algorithms aimed to support the chemist in the rational drug design process <ref> [1] </ref>, and it is currently being used by chemists 2 (a) (b) (c) decomposition (c). in a pharmaceutical company. Further details on the larger software (the toolbox) can be found in [6].
Reference: [2] <author> M. Connolly. </author> <title> Analytical molecular surface calculation. </title> <journal> Journal of Applied Crystallography, </journal> <volume> 16 </volume> <pages> 548-558, </pages> <year> 1983. </year>
Reference: [3] <author> M. Connolly. </author> <title> Molecular surfaces: A review. </title> <institution> Network Science, </institution> <year> 1996. </year> <note> http://www.awod.com/netsci/Issues/Apr96/feature1.html. </note>
Reference-contexts: Further details on the larger software (the toolbox) can be found in [6]. Ours is definitely not the first implementation of an algorithm for computing molecular surfaces (see, e.g., [2],[18],[22]) and the recent survey by Connolly <ref> [3] </ref>). We believe that our approach stands out in its treatment of robustness issues and in the ease and flexibility of computing substructures of the collection of the spheres, such as the union of a subset of the spheres of a molecule consumed by another molecule.
Reference: [4] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: We call such a partitioning a spherical arrangement; see Figure 2 (a). If all the circles are great circles, then one can easily transform the spherical arrangement into a planar arrangement of lines <ref> [4] </ref>, which is a simpler object to handle [9]. However, in our application the circles are not necessarily great circles. Each of the circles is the result of the intersection of S with another sphere. We refer to these more general circles as little circles.
Reference: [5] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference: [6] <author> P. Finn, D. Halperin, L. Kavraki, J.-C. Latombe, R. Motwani, C. Shelton, and S. Venkatsubramanian. </author> <title> Geometric manipulation of flexible ligands. </title> <editor> In M. C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry: Towards Geometric Engineering, volume 1148 of Lecture Notes in Computer Science, </booktitle> <pages> pages 67-78. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Some examples of previous and related work on robust floating point geometric algorithms can be found in [10],[16],[20], and [21]. Our motivating application is geometric modeling of molecules. Our software package is part of a toolbox aimed to support the chemist in the drug design process <ref> [6] </ref>. The basic geometric model of a molecule that we use is the so-called hard sphere model where every atom is represented by a sphere at some fixed position relative to the other atom spheres in the molecule. <p> Further details on the larger software (the toolbox) can be found in <ref> [6] </ref>. Ours is definitely not the first implementation of an algorithm for computing molecular surfaces (see, e.g., [2],[18],[22]) and the recent survey by Connolly [3]).
Reference: [7] <author> S. Fortune. </author> <title> Ronustness issues in geometric algorithms. </title> <editor> In M. C. Lin and D. Manocha, editors, </editor> <booktitle> Applied Computational Geometry: Towards Geometric Engineering, volume 1148 of Lecture Notes in Computer Science, </booktitle> <pages> pages 9-14. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Here again there is a gap between what could in theory be handled by exact arithmetic and what current technology offers <ref> [7] </ref>. The software package that we describe in this paper computes the boundary of a union of spheres, the surface area of the boundary, and the intersection pattern of any sphere with all the other spheres in a given set.
Reference: [8] <author> S. Fortune and C. J. Van Wyk. </author> <title> Static analysis yields efficient exact arithmetic for computational geometry. </title> <journal> ACM Trans. on Graphics, </journal> <volume> 25(3) </volume> <pages> 223-248, </pages> <year> 1996. </year>
Reference: [9] <author> M. Goldwasser. </author> <title> An implementation for maintaining arrangements of polygons. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C32-C33, </pages> <year> 1995. </year>
Reference-contexts: We call such a partitioning a spherical arrangement; see Figure 2 (a). If all the circles are great circles, then one can easily transform the spherical arrangement into a planar arrangement of lines [4], which is a simpler object to handle <ref> [9] </ref>. However, in our application the circles are not necessarily great circles. Each of the circles is the result of the intersection of S with another sphere. We refer to these more general circles as little circles.
Reference: [10] <author> D. H. Greene and F. F. Yao. </author> <title> Finite-resolution computational geometry. </title> <booktitle> In Proc. 27th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 143-152, </pages> <year> 1986. </year>
Reference: [11] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: For representing the atom map, we chose a variant of the quad-edge data structure <ref> [11] </ref>. This structure makes updating the subdivision simple. Each arc is stored as a plane and two points (thus the arc is the intersection of the plane and the sphere between the two points).
Reference: [12] <author> D. Halperin and M. H. Overmars. </author> <title> Spheres, molecules, and hidden surface removal. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 113-122, </pages> <year> 1994. </year> <month> 11 </month>
Reference-contexts: We denote the maximum number of spheres in M intersecting any single sphere in M by k (as was shown in <ref> [12] </ref>, k is a constant for the hard sphere model of molecules; see also the next section). For any given resolution value " &gt; 0, we determine a parameter ffi that depends on ", on k, and on the maximum radius R of a sphere in M . <p> It is evident that various properties of molecules are disregarded in this simple model. However, in spite of its approximate nature, it has proven useful in many practical applications. For more background material and references, see for example the survey paper by Mezey [15]. In <ref> [12] </ref> the hard sphere model is studied from a computational geometry point of view. Several observations are made in that paper showing that, because of certain special properties, the spheres in this model can be efficiently manipulated. We cite below the results that will be needed in later sections. <p> We cite below the results that will be needed in later sections. Theorem 2.1, states the conditions that make the sphere model of a molecule favorable. Theorem 2.2 summarizes a hash-table based data structure that is constructed exploiting these conditions. Theorem 2.1 <ref> [12] </ref> Let M = fB 1 ; : : : ; B n g be a collection of n balls in 3-space with radii r 1 ; : : : ; r n and centers at c 1 ; : : : ; c n . <p> Theorem 2.2 <ref> [12] </ref> Given a collection M of n balls as defined in Theorem 2.1, one can construct a data structure using O (n) space, to answer intersection queries for balls whose radii are not greater than r max , in O (1) time.
Reference: [13] <author> C. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: There are numerical analysis methods to compute 1 Throughout the paper we use the term little circle to mean any circle on a sphere S that is the intersection of S with another sphere. 1 arrangement is drawn in Figure 2 (a). useful bounds on " (see <ref> [13, Chapter 4] </ref> for examples concerning linear objects). We point out that in our algorithms the `depth of operations' (namely how many times in a row the result of one operation is the operand in another operation) is bounded by a small constant.
Reference: [14] <author> C. Hoffmann. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> IEEE Computer, </journal> <volume> 22(3) </volume> <pages> 31-41, </pages> <month> Mar. </month> <year> 1989. </year>
Reference: [15] <author> P. Mezey. </author> <title> Molecular surfaces. </title> <editor> In K. Lipkowitz and D. Boyd, editors, </editor> <booktitle> Reviews in Computational Chemistry, </booktitle> <volume> volume 1, </volume> <pages> pages 265-294. </pages> <publisher> VCH Publishers Inc., </publisher> <year> 1990. </year>
Reference-contexts: It is evident that various properties of molecules are disregarded in this simple model. However, in spite of its approximate nature, it has proven useful in many practical applications. For more background material and references, see for example the survey paper by Mezey <ref> [15] </ref>. In [12] the hard sphere model is studied from a computational geometry point of view. Several observations are made in that paper showing that, because of certain special properties, the spheres in this model can be efficiently manipulated.
Reference: [16] <author> V. Milenkovic. </author> <title> Verifiable implementations of geometric algorithms using finite precision arithmetic. </title> <journal> Artif. Intell., </journal> <volume> 37 </volume> <pages> 377-401, </pages> <year> 1988. </year>
Reference: [17] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: When implementing a geometric algorithm however, one must take degeneracies into consideration. The numerical precision problem was solved in the theory of geometric algorithm by assuming infinite precision real arithmetic <ref> [17] </ref>. For certain algorithms and geometric objects this assumption is realizable in practice by using exact arithmetic [5],[8],[19],[23]. Computing with exact arithmetic is in general more costly than using floating point arithmetic, and in certain cases not realizable because of the geometric primitives that need to manipulated.
Reference: [18] <author> M. F. Sanner, A. J. Olson, and J.-C. Spehner. </author> <title> Fast and robust computation of molecular surfaces. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C6-C7, </pages> <year> 1995. </year>
Reference: [19] <author> J. R. Shewchuk. </author> <title> Robust adaptive floating-point geometric predicates. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 141-150, </pages> <year> 1996. </year>
Reference: [20] <author> K. Sugihara. </author> <title> On finite-precision representations of geometric objects. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39 </volume> <pages> 236-247, </pages> <year> 1989. </year>
Reference: [21] <author> K. Sugihara and M. Iri. </author> <title> Two design principles of geometric algorithms in finite-precision arithmetic. </title> <journal> Appl. Math. Lett., </journal> <volume> 2(2) </volume> <pages> 203-206, </pages> <year> 1989. </year>
Reference-contexts: Our goal here is to devise robust algorithms that deal with intersecting spheres in IR 3 while using floating point arithmetic. Some examples of previous and related work on robust floating point geometric algorithms can be found in [10],[16],[20], and <ref> [21] </ref>. Our motivating application is geometric modeling of molecules. Our software package is part of a toolbox aimed to support the chemist in the drug design process [6].
Reference: [22] <author> A. Varshney, F. B. Jr., and W. Wright. </author> <title> Computing smooth molecular surfaces. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14 </volume> <pages> 19-25, </pages> <year> 1994. </year>
Reference: [23] <author> C. Yap and T. Dube. </author> <title> The exact computation paradigm. </title> <editor> In D. Du and F. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, </booktitle> <pages> pages 452-492. </pages> <publisher> World Scientific, </publisher> <year> 1995. </year> <note> coordinate is size-of-molecule fi average-k. </note>
References-found: 23

