URL: http://dimacs.rutgers.edu/Workshops/Security/program2/smolk.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: ftomek,sasg@cs.sunysb.edu  
Title: Digital Signatures with Encryption: Fact and Fiction Extended Abstract  
Author: Tomasz M. Kozlowski and Scott A. Smolka 
Address: NY 11794-4400 USA  
Affiliation: Department of Computer Science SUNY at Stony Brook Stony Brook,  
Abstract: We analyze a security protocol that combines digital signatures with data encryption. The analysis technique we utilize is temporal logic model checking as provided by the Concurrency Factory specification and verification toolset [CLSS96]. We show that the protocol is secure, providing privacy and proof of authorship. We demonstrate, however, that a version of the protocol in which confirmation messages are used is susceptible to an attack. This is the case even if the encryption and signature operations are different, contrary to what is claimed in [Sch94]. Finally, we show how the protocol with confirmation messages can be fixed by including the identity of the sender in messages transmitted by the protocol.
Abstract-found: 1
Intro-found: 1
Reference: [AG97] <author> M. Abadi and A. D. Gordon. </author> <title> Reasoning about cryptographic protocols in the spi calculus. </title> <booktitle> In Mazurkiewicz and Winkowski [MW97], </booktitle> <pages> pages 59-73. </pages>
Reference-contexts: As future work, we plan to extend the Concurrency Factory's VPL system specification language to directly support cryptographic primitives such as those found in the Spi calculus <ref> [AG97] </ref>. This should facilitate the encoding and analysis of more sophisticated security protocols.
Reference: [CE81] <author> E. M. Clarke and E. A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <editor> In D. Kozen, editor, </editor> <booktitle> Proceedings of the Workshop on Logic of Programs, </booktitle> <address> Yorktown Heights, </address> <booktitle> volume 131 of Lecture Notes in Computer Science, </booktitle> <pages> pages 52-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Privacy means that only the intended receiver of a message should be able to read its contents. This property can be stated as a conjunction of the two following properties: * AG (not I_read_As_msg_to_B) * AG (I_sent_As_msg_to_B ) (not B_reads_Is_msg_first)) where AG is the CTL operator <ref> [CE81] </ref> meaning "in every state." The first formula expresses the fact that agent I should never read the contents of a message agent A has sent to agent B. The second formula states that whenever I passes A's message to B, B will be able to read that message.
Reference: [CLSS96] <author> R. Cleaveland, P. M. Lewis, S. A. Smolka, and O. Sokolsky. </author> <title> The Concurrency Factory: A development environment for concurrent systems. </title> <editor> In R. Alur and T. A. Henzinger, editors, </editor> <booktitle> Computer Aided Verification (CAV '96), volume 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 398-401, </pages> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Using tem-poral logic model checking as provided by the Concurrency Factory specification and verification toolset <ref> [CLSS96] </ref>, we show that DSE is secure, providing privacy and proof of authorship. [Sch94] also considers a version of DSE with the additional feature of confirmation messages: whenever someone receives a message, he or she sends it back to the sender as a confirmation of receipt. <p> The results of our verification runs are the topic of Section 5. Finally, Section 6 concludes. 2 The Concurrency Factory The Concurrency Factory <ref> [CLSS96] </ref> is an integrated toolset for the specification, verification, and implementation of concurrent and distributed real-time systems such as communication protocols and process control systems.
Reference: [DH76] <author> W. Diffie and M. E. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: 1 Introduction Public-key cryptography <ref> [DH76, RSA78] </ref>, which uses a public key for message encryption and a private key for message decryption, is a well-established method for the private transmission of sensitive data. <p> C would thus receive a message that had been signed by A but had been sent to her by B and not A. The protocols utilize digital signatures and encryption algorithms, both of which are public-key algorithms <ref> [DH76] </ref>. The private key of an agent is used to sign a message, and the public key is used to verify the message; i.e. to verify that the message has indeed been signed by the agent who claims to have signed it.
Reference: [Low96] <author> G. Lowe. </author> <title> Breaking and fixing the Needham-Schroder public-key protocol using FDR. </title> <editor> In T. Margaria and B. Steffen, editors, </editor> <booktitle> Proceedings of the Second International Workshop on Tools and Algorithms for the Construction and Analysis of Systems (TACAS '96), Vol. 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-166, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: The agents taking part in the protocols are modeled as VPL processes. Moreover, the intruder is modeled as a process that can perform any attack that we would expect a real-world intruder to be able to perform. The intruder is able to <ref> [Low96] </ref>: * take part in the protocol as a regular "honest" agent; * overhear and/or intercept messages sent by other agents; 6 * decrypt messages encrypted with his own public key; * introduce new messages; * replay any messages he has seen, possibly changing any plaintext parts, even if he does
Reference: [MW97] <editor> A. Mazurkiewicz and J. Winkowski, editors. </editor> <booktitle> Proceedings of the Eighth International Conference on Concurrency Theory (CONCUR '97), volume 1243 of Lecture Notes in Computer Science, </booktitle> <address> Warsaw, Poland, July 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference: [RS97] <author> Y. S. Ramakrishna and S. A. Smolka. </author> <title> Partial-order reduction in the weak modal mu-calculus. </title> <note> In Mazurkiewicz and Winkowski [MW97]. </note>
Reference-contexts: The main features of the Factory are: a graphical user interface that allows the non-expert to design and simulate concurrent systems using GCCS, a graphical process algebra; a textual user interface for VPL; a suite of verification routines that currently includes a local model checker for the modal mu-calculus <ref> [RS97] </ref>, a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus [SS95]; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile [TLK96] code. <p> To determine if the protocols are secure, i.e. satisfy the privacy and proof of authorship properties, we encoded these properties in the modal mu-calculus, and used the Concurrency Factory's local model checker for the modal mu-calculus <ref> [RS97] </ref>. Privacy means that only the intended receiver of a message should be able to read its contents.
Reference: [RSA78] <author> R. L. Rivest, A. Shamir, and L. Aldeman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: 1 Introduction Public-key cryptography <ref> [DH76, RSA78] </ref>, which uses a public key for message encryption and a private key for message decryption, is a well-established method for the private transmission of sensitive data.
Reference: [Sch94] <author> B. Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms and Source Code in C. </title> <publisher> Wiley, </publisher> <year> 1994. </year>
Reference-contexts: Privacy in this case means that if two parties use public-key cryptography to exchange a message, an intermediary cannot intercept and read the message, intercept and modify the message, or fabricate a realistic-looking substitute message <ref> [Sch94] </ref>. In addition to privacy, users may also be interested in proof of authorship, such as that offered by handwritten signatures on paper documents. As pointed out in [Sch94], such proof must have the following characteristics: the signature must be unforgeable; the signature is authentic; the signature cannot be transferred from <p> exchange a message, an intermediary cannot intercept and read the message, intercept and modify the message, or fabricate a realistic-looking substitute message <ref> [Sch94] </ref>. In addition to privacy, users may also be interested in proof of authorship, such as that offered by handwritten signatures on paper documents. As pointed out in [Sch94], such proof must have the following characteristics: the signature must be unforgeable; the signature is authentic; the signature cannot be transferred from one document to another; the signature cannot be repudiated; and the signed document must be unalterable. <p> In this paper, we analyze a protocol that combines public-key cryptography with digital signatures, and therefore strives to offer both privacy and proof of authorship. The protocol appears 1 As is traditional, we will use Alice and Bob as the protocol participants, sometimes abbreviated A and B. 1 in <ref> [Sch94, page 37] </ref> and we refer to it as DSE, for Digital Signatures with Encryption. <p> Using tem-poral logic model checking as provided by the Concurrency Factory specification and verification toolset [CLSS96], we show that DSE is secure, providing privacy and proof of authorship. <ref> [Sch94] </ref> also considers a version of DSE with the additional feature of confirmation messages: whenever someone receives a message, he or she sends it back to the sender as a confirmation of receipt. <p> We refer to this extension of DSE as DSEC, and show that DSEC is susceptible to an attack that compromises privacy. This is the case even if the encryption and signature operations are different, contrary to what is claimed in <ref> [Sch94] </ref>. By "different" we mean here that the signing operation is not the inverse of the encryption operation even when the same key is used in both, and likewise for the signature verification and decryption operations. <p> Another unrelated pair of private and public keys is used for the decryption and encryption operations, respectively. 3.1 Digital Signatures with Encryption (DSE) The basic protocol we verify is as follows <ref> [Sch94, page 37] </ref>: 1. Agent A signs a message with her private key. S A (M ) 2. Agent A encrypts the message and signature with agent B's public key and sends it to B. E B (S A (M )) 3. <p> Whenever an agent receives a message, he or she sends it back to the sender as a confirmation of receipt. This protocol, which we refer to as DSE with Confirmation Messages (DSEC), is given as follows <ref> [Sch94, page 38] </ref>: 1. Agent A signs a message with her private key, encrypts it with agent B's public key, and sends it to B. E B (S A (M )) 2. <p> Below, we present a modification to the DSEC protocol that prevents such attacks by including the sender ID in the encrypted part of transmitted messages. Schneier <ref> [Sch94, page 39] </ref> contends that The . . . attack works because the encrypting operation is the same as the signature-verifying operation, and the decryption operation is the same as the signature operation. <p> The above attack, however, shows that this is not true and that privacy can be compromised even if all the operations used in the protocol are different. In fact, the attack we have exhibited is the same as the one presented in <ref> [Sch94, page 38] </ref> with the important exception that signature signing and verification operations have not been replaced by their decryption/encryption counterparts (e.g. the message A originally sent to B is E B (S A (M )), not E B (D A (M )) as in Schneier's attack). <p> Also, we only model a single initiator, single responder, and single intruder. Finally, we assume that the encryption and digital signatures algorithms are strong, in that an intruder cannot deduce the plaintext from the ciphertext without knowing the key <ref> [Sch94] </ref>. To determine if the protocols are secure, i.e. satisfy the privacy and proof of authorship properties, we encoded these properties in the modal mu-calculus, and used the Concurrency Factory's local model checker for the modal mu-calculus [RS97].
Reference: [SS95] <author> O. Sokolsky and S. A. Smolka. </author> <title> Local model checking for real-time systems. </title> <booktitle> In Pro--ceedings of the 7th International Conference on Computer-Aided Verification. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference-contexts: simulate concurrent systems using GCCS, a graphical process algebra; a textual user interface for VPL; a suite of verification routines that currently includes a local model checker for the modal mu-calculus [RS97], a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus <ref> [SS95] </ref>; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile [TLK96] code. We briefly describe here the components of the Factory that are most germane to our modeling and analysis of DSE and its variants: VPL and the local model checker for the modal mu-calculus.
Reference: [TLK96] <author> B. Thomsen, L. Leth, and T.-M. Kuo. </author> <title> A Facile tutorial. </title> <booktitle> In Proceedings of the Seventh International Conference on Concurrency Theory (CONCUR '96), Vol. 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 278-298. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 10 </month>
Reference-contexts: VPL; a suite of verification routines that currently includes a local model checker for the modal mu-calculus [RS97], a very expressive temporal logic, and a local model checker for a real-time extension of the modal mu-calculus [SS95]; and a graphical compiler that transforms GCCS and VPL specifications into executable Facile <ref> [TLK96] </ref> code. We briefly describe here the components of the Factory that are most germane to our modeling and analysis of DSE and its variants: VPL and the local model checker for the modal mu-calculus.
References-found: 11

