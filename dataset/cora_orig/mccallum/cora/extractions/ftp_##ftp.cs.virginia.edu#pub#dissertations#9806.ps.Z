URL: ftp://ftp.cs.virginia.edu/pub/dissertations/9806.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/dissertations/README.html
Root-URL: http://www.cs.virginia.edu
Title: Spanning Trees in Hypergraphs with Applications to Steiner Trees  
Author: David Michael Warme 
Degree: A Dissertation Presented to the Faculty of the  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy Computer Science by  
Date: May 1998  
Affiliation: School of Engineering and Applied Science University of Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. L. Balinski. </author> <title> On a selection problem. </title> <journal> Management Sci., </journal> <volume> 17 </volume> <pages> 230-231, </pages> <year> 1970. </year>
Reference-contexts: Although a major improvement over heuristics alone, this method was exceedingly slow on separation subproblems larger than about 80 terminals. Queyranne [45] noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys [47] and Balinski <ref> [1] </ref>. These are equivalent to finding a "maximal closure of a graph," as defined by Picard [42]. These problems reduce to finding a minimum cut on a simple bipartite directed graph.
Reference: [2] <author> J. E. Beasley. </author> <title> Or-library | a collection of data sets for a variety of or problems. </title>
Reference-contexts: All rectilinear FSTs were generated using the Salowe-Warme algorithm [49]. All Euclidean FSTs were generated using the Winter-Zachariasen algorithm [62]. We solved problem sets from the literature, including those of Soukup and Chow [52], and all of the problems from Beasley's OR-library <ref> [3, 2] </ref> having 1000 or fewer terminals. Because the OR-library problems jump directly from 100 points to 250 we included 15 random problem instances each of 110; 120; : : : ; 240 points to fill in the gaps in our plots.
Reference: [3] <author> J. E. Beasley. </author> <title> A heuristic for Euclidean and rectilinear Steiner problems. </title> <journal> European Journal of Operational Research, </journal> <volume> 58 </volume> <pages> 284-292, </pages> <year> 1992. </year>
Reference-contexts: All rectilinear FSTs were generated using the Salowe-Warme algorithm [49]. All Euclidean FSTs were generated using the Winter-Zachariasen algorithm [62]. We solved problem sets from the literature, including those of Soukup and Chow [52], and all of the problems from Beasley's OR-library <ref> [3, 2] </ref> having 1000 or fewer terminals. Because the OR-library problems jump directly from 100 points to 250 we included 15 random problem instances each of 110; 120; : : : ; 240 points to fill in the gaps in our plots.
Reference: [4] <author> C. Berge. </author> <title> Graphs and Hypergraphs. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1973. </year>
Reference-contexts: Finally, a simple formula that extends a classic result from graphs to hypergraphs is presented. 33 3.1. Definitions 34 3.1 Definitions The following definitions are adapted from Berge <ref> [4] </ref>. Let V be a finite set and E 2 V . Then H = (V; E) is a hypergraph if jej 2 for all e 2 E (3.1) Normally we require only e 6= ; for all e 2 E [4] but, since our present concern is spanning trees, we <p> 3.1 Definitions The following definitions are adapted from Berge <ref> [4] </ref>. Let V be a finite set and E 2 V . Then H = (V; E) is a hypergraph if jej 2 for all e 2 E (3.1) Normally we require only e 6= ; for all e 2 E [4] but, since our present concern is spanning trees, we assume the tighter restriction of (3:1). In keeping with graph theory we will use lower case letters to denote hyperedges | even though they are sets, which would normally be denoted with capital letters. <p> Then X (jej 1)x e = e2E 0 From <ref> [4] </ref> we know that a hypergraph (V; E 0 ) is acyclic if, and only if, X (jej 1) = jV j p; (3.8) where p is the number of connected components.
Reference: [5] <author> P. Berman and V. Ramaiyer. </author> <title> Improved approximations for the Steiner tree problem. </title> <booktitle> In Proceedings of the Third Symposium on Discrete Algorithms, </booktitle> <pages> pages 325-334, </pages> <year> 1992. </year>
Reference-contexts: The lune property of Section 2.2.1 implies that X cannot be an FST if any of the lunes (i.e., corner lunes or diamonds) defined by its segments are non-empty. Neither can X be an FST if the corner-flipped topology ^ X has non-empty diamonds. It is known (e.g., <ref> [5, 49, 64] </ref>) and easy to show that certain rectangular regions must also be empty. Let X be a Hwang topology containing segments ab and bc that form a 90 ffi 2.4. Rectilinear FST Generation 28 angle at point b.
Reference: [6] <author> C. W. </author> <title> Borchardt. </title> <journal> Journal f. d. reine und angewandte Math., </journal> <volume> 57 </volume> <pages> 111-121, 1860. </pages>
Reference-contexts: For the analogous problem in conventional graphs the classical result is n n2 , and is usually attributed to Cayley in 1889 [8]. Cayley's own paper, however, references an earlier proof of this formula by Borchardt <ref> [6] </ref> in 1860. We now present the analogous result for spanning trees in the complete hypergraph (i.e., hypertrees). For n 1, let h n be the number of rooted hypertrees spanning n labeled vertices.
Reference: [7] <author> W. M. Boyce and J. E. Seery. </author> <title> STEINER 72: An improved version of Cockayne and Schiller's program STEINER for the minimal network problem. </title> <type> Technical Report 35, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1973. </year>
Reference-contexts: It works by explicitly enumerating all possible tree topologies, computing a relatively minimal configuration for each. The shortest is retained and is the ESMT. Cockayne [9] improved the method, which was later coded by Cockayne and Schiller [12] and handled problems with up to 7 terminals. Boyce and Seery <ref> [7] </ref> improved the method so that 10 and later 12 terminal problems could be solved. Hwang provided an O (n) solution to the Melzak FST algorithm, a crucial subroutine in the method [28].
Reference: [8] <author> A. </author> <title> Cayley. Collected Mathematical Papers of A. </title> <journal> Cayley, </journal> <volume> volume 13. </volume> <pages> 1889. </pages>
Reference-contexts: For the analogous problem in conventional graphs the classical result is n n2 , and is usually attributed to Cayley in 1889 <ref> [8] </ref>. Cayley's own paper, however, references an earlier proof of this formula by Borchardt [6] in 1860. We now present the analogous result for spanning trees in the complete hypergraph (i.e., hypertrees). For n 1, let h n be the number of rooted hypertrees spanning n labeled vertices.
Reference: [9] <author> E. J. Cockayne. </author> <title> On the Steiner problem. </title> <journal> Canadian Mathematical Bulletin, </journal> <volume> 10 </volume> <pages> 431-450, </pages> <year> 1967. </year>
Reference-contexts: Previous Work 5 1.2 Previous Work The first finite algorithm for the Euclidean Steiner tree problem was given by Melzak [40]. It works by explicitly enumerating all possible tree topologies, computing a relatively minimal configuration for each. The shortest is retained and is the ESMT. Cockayne <ref> [9] </ref> improved the method, which was later coded by Cockayne and Schiller [12] and handled problems with up to 7 terminals. Boyce and Seery [7] improved the method so that 10 and later 12 terminal problems could be solved.
Reference: [10] <author> E. J. Cockayne and D. E. Hewgill. </author> <title> Exact computation of Steiner minimal trees in the plane. </title> <journal> Information Processing Letters, </journal> <volume> 22 </volume> <pages> 151-156, </pages> <year> 1986. </year> <note> 116 Bibliography117 </note>
Reference-contexts: Problems up to 15 terminals were solved quite rapidly. Further improvements were made by Cockayne and Hewgill <ref> [10, 11] </ref>, who reported solutions of problems up to 100 terminals. Recently Winter and Zachariasen [62] refined these methods even further, solving problems up to 150 terminals. Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang [56], and the luminary algorithm of Hwang and Weng [30]. <p> The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994. In 1993, Salowe and Warme [48] made a significant advance by adapting the Euclidean results of Winter [60] and Cockayne and Hewgill <ref> [10, 11] </ref> to the rectilinear problem | solving most 30 terminal instances in an average of 30 minutes. Further refinements [49] increased this to about 35 points. <p> Cockayne and Hewgill <ref> [10] </ref> propose to solve a problem equivalent to finding the bicon nected components of a hypergraph by constructing a conventional graph G containing edge (i; j) if there is some hyperedge containing both vertices i and j.
Reference: [11] <author> E. J. Cockayne and D. E. Hewgill. </author> <title> Improved computation of plane Steiner minimal trees. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 219-229, </pages> <year> 1992. </year>
Reference-contexts: Problems up to 15 terminals were solved quite rapidly. Further improvements were made by Cockayne and Hewgill <ref> [10, 11] </ref>, who reported solutions of problems up to 100 terminals. Recently Winter and Zachariasen [62] refined these methods even further, solving problems up to 150 terminals. Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang [56], and the luminary algorithm of Hwang and Weng [30]. <p> The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994. In 1993, Salowe and Warme [48] made a significant advance by adapting the Euclidean results of Winter [60] and Cockayne and Hewgill <ref> [10, 11] </ref> to the rectilinear problem | solving most 30 terminal instances in an average of 30 minutes. Further refinements [49] increased this to about 35 points. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete.
Reference: [12] <author> E. J. Cockayne and D. G. Schiller. </author> <title> Computation of a Steiner minimal tree. </title> <editor> In D. J. A. Welsh and D. R. Woodall, editors, </editor> <booktitle> Combinatorics, </booktitle> <pages> pages 53-71. </pages> <institution> Inst. Math. Appl., </institution> <year> 1972. </year>
Reference-contexts: It works by explicitly enumerating all possible tree topologies, computing a relatively minimal configuration for each. The shortest is retained and is the ESMT. Cockayne [9] improved the method, which was later coded by Cockayne and Schiller <ref> [12] </ref> and handled problems with up to 7 terminals. Boyce and Seery [7] improved the method so that 10 and later 12 terminal problems could be solved. Hwang provided an O (n) solution to the Melzak FST algorithm, a crucial subroutine in the method [28].
Reference: [13] <author> R. Courant and H. </author> <title> Robbins. </title> <publisher> What is Mathematics? Oxford University Press, </publisher> <address> New York, </address> <year> 1941. </year>
Reference-contexts: Torricelli provided a geometric construction for this by 1640 | 56 years before Johann Bernoulli posed his famous brachistochrone problem. In 1934 Jarnk and Kossler [31] posed the general Euclidean problem in the plane, which was popularized by Courant and Robbins in their famous 1941 book "What Is Mathematics?" <ref> [13] </ref> | although they incorrectly attributed the problem to Steiner! In 1966 Hanan [26] first considered the rectilinear variant, which is currently very important due to its connection with routing of circuit nodes in VLSI and printed circuit boards.
Reference: [14] <author> G. B. Dantzig and B. C. Eaves. </author> <title> Fourier-Motzkin elimination and its dual. </title> <journal> Journal of Combinatorial Theory (A), </journal> <volume> 14 </volume> <pages> 288-297, </pages> <year> 1973. </year>
Reference-contexts: Enumeration of ST n was done using a simple recursive C program. All facet enumeration computations were done using Christof and Loebel's porta code, which uses Fourier-Motzkin elimination <ref> [14] </ref> to obtain the convex hull as a set of linear equations and inequalities. We assume for the sake of concreteness that V = f0; 1; : : : ; n 1g. Suppose edge e = f1; 3; 5g.
Reference: [15] <author> S. E. Dreyfus and R. A. Wagner. </author> <title> The Steiner problem in graphs. </title> <journal> Networks, </journal> <volume> 1 </volume> <pages> 195-207, </pages> <year> 1972. </year>
Reference-contexts: This reduction has been by far the most popular approach to computing RSMTs. Various exact algorithms for the Steiner problem in graphs have been tried on grid graphs, including the dynamic programming method of Dreyfus and Wagner <ref> [15, 54] </ref>, Hakimi's method [25] as well as sophisticated branch-and-cut methods [38, 34]. However, even the most sophisticated branch-and-cut codes fail to solve instances much larger than 40 terminals due to the extreme degeneracy of the Hanan grid graph.
Reference: [16] <author> U. Fomeier and M. Kaufmann. </author> <title> On exact solutions for the rectilinear Steiner problem, part i: Theoretical results. </title> <type> Technical Report WSI-96-09, </type> <institution> Universitat Tubingen, Germany, </institution> <year> 1996. </year>
Reference-contexts: In the sequel we will neglect the distinction between true FSTs and candidate FSTs. We would like jF j to be as small as possible. Although there are point sets that give rise to an exponential number of FSTs <ref> [16] </ref>, empirical data shows the expected number to be linear for uniformly distributed V . This is often considered a weakness of the FST approach, since it yields a doubly-exponential algorithm in the worst case. In practice it is by far the fastest exact algorithm known. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete. <p> Empirical results show that on both rectilinear and Euclidean Steiner minimal tree problems the new FST concatenation algorithm vastly out-performs all other algorithms in existence. Its nearest rectlinear competitors seem to be Martin and Koch [34] (up to 40 terminals), and Fomeier and Kaufmann <ref> [16] </ref> (70 terminals, but at least one instance of 100 terminals).
Reference: [17] <author> J. L. Ganley. </author> <title> Geometric Interconnection and Placement Algorithms. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, Virginia, </institution> <year> 1995. </year>
Reference-contexts: An RSMT of the points represents only a lower bound since a real interconnect satisfies additional constraints requiring it to avoid other obstacles that are also present on the chip. Recent work by Ganley <ref> [17] </ref> treated such obstacle-avoiding RSMTs directly. In addition to global wire length estimation, RSMTs have also been used to evaluate the merit of functional block placements in floor-planners such as the MONDRIAN system [17]. Wagner [57] reduces certain cases of parallel expression evaluation to the RSMT problem. <p> Recent work by Ganley <ref> [17] </ref> treated such obstacle-avoiding RSMTs directly. In addition to global wire length estimation, RSMTs have also been used to evaluate the merit of functional block placements in floor-planners such as the MONDRIAN system [17]. Wagner [57] reduces certain cases of parallel expression evaluation to the RSMT problem.
Reference: [18] <author> J. L. Ganley and J. P. Cohoon. </author> <title> A faster dynamic programming algorithm for exact rectilinear Steiner minimal trees. </title> <booktitle> In Proceedings of the Fourth Great Lakes Symposium on VLSI, </booktitle> <pages> pages 238-241, </pages> <year> 1994. </year>
Reference-contexts: Similar results were reported by Lewis, Pong and Van Cleave [36] in 1992. Thomborson, Alpern and Carter [54] report solving problems with up to about 16 terminals in 1992. The algorithms of Ganley and Cohoon <ref> [18, 19] </ref> handle about 18 and 28 terminals, respectively in 1994.
Reference: [19] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Optimal rectilinear Steiner minimal trees in O(n 2 2:62 n ) time. </title> <booktitle> In Proceedings of the Sixth Canadian Conference on Computational Geometry, </booktitle> <pages> pages 308-313, </pages> <year> 1994. </year> <month> Bibliography118 </month>
Reference-contexts: Similar results were reported by Lewis, Pong and Van Cleave [36] in 1992. Thomborson, Alpern and Carter [54] report solving problems with up to about 16 terminals in 1992. The algorithms of Ganley and Cohoon <ref> [18, 19] </ref> handle about 18 and 28 terminals, respectively in 1994.
Reference: [20] <author> M. R. Garey, R. L. Graham, and D. S. Johnson. </author> <title> The complexity of computing Steiner minimal trees. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 32 </volume> <pages> 835-859, </pages> <year> 1977. </year>
Reference-contexts: This follows from the fact that the lengths of Steiner trees can be complicated algebraic numbers, and it is not yet clear whether trustworthy computation with such numbers can be done in polynomial time. A suitably discretized version of the ESMT problem has been shown to be NP-complete, however <ref> [20] </ref>. The rectilinear problem is equivalent to requiring that all interconnecting line segments be horizontal or vertical. See Figure 1.1 for an illustration of an RSMT for 70 terminals. The Euclidean problem is characterized by line segments forming angles that are always 120 degree or more.
Reference: [21] <author> M. R. Garey and D. S. Johnson. </author> <title> The rectilinear Steiner tree problem is NP-complete. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 32 </volume> <pages> 826-834, </pages> <year> 1977. </year>
Reference-contexts: The corresponding Steiner tree problem variants are known as the rectilinear Steiner minimal tree (RSMT) and Euclidean Steiner minimal tree (ESMT) problems. The decision form of RSMT is known to be NP-complete <ref> [21] </ref>. The decision form of ESMT would be NP-complete, except that the problem is not known to be in NP.
Reference: [22] <author> R. L. Graham, D. E. Knuth, and O. Patashnik. </author> <title> Concrete Mathematics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: n1 ] k0 4 i0 i! j=0 i ! k! 5 u k 1 X n i i X j (1) ij j n1 = n! i0 i! j=0 i ! It is known that i! n ) X j j n (1) ij (See, for example equation (6.19) from <ref> [22] </ref>). Performing this substitution yields h n = n! i0 n 1 ) Since n1 = 0 for all i &gt; n 1, we can stop summing at i = n 1 which yields: h n = i=0 n 1 ) 2 3.6.
Reference: [23] <author> M. Grotschel, L. Lovasz, and A. Schrijver. </author> <title> The ellipsoid method and its consequences in combinatorial optimization. </title> <journal> Combinatorica, </journal> <volume> 1(2) </volume> <pages> 169-197, </pages> <year> 1981. </year>
Reference-contexts: In a landmark result, Grotschel, Lovasz and Schrijver <ref> [23, 24] </ref> showed that this process always terminates, and that the number of iterations required is at most a polynomial function of the number of variables. In particular, the number of constraints is irrelevant | but must be finite. <p> Branch-and-Cut Procedure 70 4.1.2.1 Deterministic Flow Formulation The first polynomial time deterministic algorithm for separating inequalities (3.4) was to find a minimum of the submodular function (4.6) using the "ellipsoid" method of Grotschel, Lovasz, and Schrijver <ref> [23, 24] </ref>. Although a major improvement over heuristics alone, this method was exceedingly slow on separation subproblems larger than about 80 terminals. Queyranne [45] noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys [47] and Balinski [1].
Reference: [24] <author> M. Grotschel, L. Lovasz, and A. Schrijver. </author> <title> Corregendum to our paper "the ellipsoid method and its consequences in combinatorial optimization". </title> <journal> Combinatorica, </journal> <volume> 4(4) </volume> <pages> 291-295, </pages> <year> 1984. </year>
Reference-contexts: In a landmark result, Grotschel, Lovasz and Schrijver <ref> [23, 24] </ref> showed that this process always terminates, and that the number of iterations required is at most a polynomial function of the number of variables. In particular, the number of constraints is irrelevant | but must be finite. <p> Branch-and-Cut Procedure 70 4.1.2.1 Deterministic Flow Formulation The first polynomial time deterministic algorithm for separating inequalities (3.4) was to find a minimum of the submodular function (4.6) using the "ellipsoid" method of Grotschel, Lovasz, and Schrijver <ref> [23, 24] </ref>. Although a major improvement over heuristics alone, this method was exceedingly slow on separation subproblems larger than about 80 terminals. Queyranne [45] noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys [47] and Balinski [1].
Reference: [25] <author> S. L. Hakimi. </author> <title> Steiner's problem in graphs and its implications. </title> <journal> Networks, </journal> <volume> 1 </volume> <pages> 113-133, </pages> <year> 1971. </year>
Reference-contexts: This reduction has been by far the most popular approach to computing RSMTs. Various exact algorithms for the Steiner problem in graphs have been tried on grid graphs, including the dynamic programming method of Dreyfus and Wagner [15, 54], Hakimi's method <ref> [25] </ref> as well as sophisticated branch-and-cut methods [38, 34]. However, even the most sophisticated branch-and-cut codes fail to solve instances much larger than 40 terminals due to the extreme degeneracy of the Hanan grid graph.
Reference: [26] <author> M. Hanan. </author> <title> On Steiner's problem with rectilinear distance. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 14 </volume> <pages> 255-265, </pages> <year> 1966. </year>
Reference-contexts: In 1934 Jarnk and Kossler [31] posed the general Euclidean problem in the plane, which was popularized by Courant and Robbins in their famous 1941 book "What Is Mathematics?" [13] | although they incorrectly attributed the problem to Steiner! In 1966 Hanan <ref> [26] </ref> first considered the rectilinear variant, which is currently very important due to its connection with routing of circuit nodes in VLSI and printed circuit boards. <p> Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang [56], and the luminary algorithm of Hwang and Weng [30]. Neither of these algorithms have been implemented. The rectilinear problem was introduced in 1966 by Hanan <ref> [26] </ref>, who characterized optimal solutions for n 5 terminals. Hanan also showed that an RSMT always exists as a subgraph of a grid graph, obtained by constructing horizontal and vertical lines through each terminal.
Reference: [27] <author> F. K. Hwang. </author> <title> On Steiner minimal trees with rectilinear distance. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 30 </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: The first exact algorithm in the literature appeared in 1972 by Yang and Wing [63], who report solving problems with up to 9 terminals. No further computational advances appear in the literature until 1989. In 1976, Hwang completely characterized the rectilinear FSTs <ref> [27] </ref>. This important result forms the basis of all known rectilinear FST generators, including the rectilinear results reported in this dissertation. 1.2. Previous Work 6 Further computational progress resumed in 1989 when Sidorenko [50] reported an algorithm applicable up to 11 terminals. <p> These results were previously given in Salowe and Warme [49], and are presented here for completeness only. The more recent methods of Zachariasen [64] are superior, and represent the current state of the art. 2.4.1 Hwang Topologies Hwang <ref> [27] </ref> provided a complete description of the rectilinear FSTs, a result known as Hwang's theorem: Theorem 2.2 (Hwang's theorem) Every rectilinear full set has a rectilinear Steiner minimal tree having one of four topologies.
Reference: [28] <author> F. K. Hwang. </author> <title> A linear time algorithm for full Steiner trees. </title> <journal> Operations Research Letters, </journal> <volume> 4 </volume> <pages> 235-237, </pages> <year> 1986. </year>
Reference-contexts: Boyce and Seery [7] improved the method so that 10 and later 12 terminal problems could be solved. Hwang provided an O (n) solution to the Melzak FST algorithm, a crucial subroutine in the method <ref> [28] </ref>. Winter [60] devised a totally different approach that first generates all possible FSTs, and then constructs a Steiner minimal tree by choosing a subset of the FSTs that span the terminals with minimal length. Problems up to 15 terminals were solved quite rapidly.
Reference: [29] <author> F. K. Hwang, D. S. Richards, and P. Winter. </author> <title> The Steiner Tree Problem, </title> <booktitle> volume 53 of Annals of Discrete Mathematics. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1992. </year>
Reference-contexts: An overview of the key ideas behind Euclidean and rectilinear FST generation are presented | primarily so that the dissertation may be more self-contained. For the entire story, consult [60, 62] for Euclidean FST generation and [49, 64] for rectilinear FST generation. See <ref> [29] </ref> for a more comprehensive treatment of Steiner tree results and methods. 2.1 Overview of the FST Concatenation Method In this section we give a brief overview of the FST concatenation method for computing Steiner minimal trees.
Reference: [30] <author> F. K. Hwang and J. F. Weng. </author> <title> The shortest network under a given topology. </title> <journal> Journal of Algorithms, </journal> <volume> 13(3) </volume> <pages> 468-488, </pages> <year> 1992. </year> <month> Bibliography119 </month>
Reference-contexts: Recently Winter and Zachariasen [62] refined these methods even further, solving problems up to 150 terminals. Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang [56], and the luminary algorithm of Hwang and Weng <ref> [30] </ref>. Neither of these algorithms have been implemented. The rectilinear problem was introduced in 1966 by Hanan [26], who characterized optimal solutions for n 5 terminals.
Reference: [31] <author> V. Jarnk and O. Kossler. O minimalnch grafech obsahujcch n danych bodu. </author> ^ <title> Cas. </title> <journal> P^estovan Mat., </journal> <volume> 63 </volume> <pages> 223-235, </pages> <year> 1934. </year>
Reference-contexts: Torricelli provided a geometric construction for this by 1640 | 56 years before Johann Bernoulli posed his famous brachistochrone problem. In 1934 Jarnk and Kossler <ref> [31] </ref> posed the general Euclidean problem in the plane, which was popularized by Courant and Robbins in their famous 1941 book "What Is Mathematics?" [13] | although they incorrectly attributed the problem to Steiner! In 1966 Hanan [26] first considered the rectilinear variant, which is currently very important due to its
Reference: [32] <author> A. B. Kahng and G. Robins. </author> <title> A new class of iterative Steiner tree heuristics with good performance. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11 </volume> <pages> 893-902, </pages> <year> 1992. </year>
Reference-contexts: The BSD property must hold for each segment of X and ^ X. The MST of U computed with bottleneck Steiner distances must not be shorter than X. An SMT for U computed via a heuristic (such as the 1-Steiner heuristic of Kahng and Robins <ref> [32] </ref>) must not be shorter than X. If any of these conditions are violated, X may be discarded. Otherwise, X is retained as an FST. Note that some of these checks can be made while recursively enumerating combinations of long leg candidates.
Reference: [33] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <editor> In R. E. Miller and J. W. Thatcher, editors, </editor> <booktitle> Complexity of Computer Computations, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: Their proof uses a rather complicated reduction from 3SAT. Here is a very simple and elegant proof for the h = 4 case that was devised by Thomas McCormick [39]. It reduces from exact 3 cover which is well-known to be NP-complete <ref> [33] </ref>: Problem Exact 3 Cover: Given: A finite set S with jSj = 3k, a family F of 3-element subsets of S. Question: Is there a subfamily C F that partitions S? Theorem 3.1 The spanning tree in hypergraph problem is NP-complete.
Reference: [34] <author> T. Koch and A. Martin. </author> <title> Solving Steiner tree problems in graphs to optimality. </title> <type> Technical Report SC 96-42, </type> <institution> Konrad-Zuse-Zentrum fur Informationstechnik, </institution> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: This reduction has been by far the most popular approach to computing RSMTs. Various exact algorithms for the Steiner problem in graphs have been tried on grid graphs, including the dynamic programming method of Dreyfus and Wagner [15, 54], Hakimi's method [25] as well as sophisticated branch-and-cut methods <ref> [38, 34] </ref>. However, even the most sophisticated branch-and-cut codes fail to solve instances much larger than 40 terminals due to the extreme degeneracy of the Hanan grid graph. In 1996 the author in collaboration with Abilio Lucena solved several of the 100 terminal instances from the OR-library. <p> Empirical results show that on both rectilinear and Euclidean Steiner minimal tree problems the new FST concatenation algorithm vastly out-performs all other algorithms in existence. Its nearest rectlinear competitors seem to be Martin and Koch <ref> [34] </ref> (up to 40 terminals), and Fomeier and Kaufmann [16] (70 terminals, but at least one instance of 100 terminals).
Reference: [35] <author> J. B. Kruskal. </author> <title> On the shortest spanning subtree of a graph and the traveling salesman problem. </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> 7 </volume> <pages> 48-56, </pages> <year> 1956. </year>
Reference-contexts: Since spanning trees are both connected and acyclic, we have p = 1. 2 Remark: Equation (3.8) can be shown directly by simple induction on the hyperedges. The induction step is analogous to a single iterative step of Kruskal's algorithm for the minimum spanning tree <ref> [35] </ref>. Theorem 3.4 gives a linear equation satisfied by all x 2 ST n . We now show there are no other such linear equations. To do this, we will need two lemmas.
Reference: [36] <author> F. D. Lewis, W. C. Pong, and N. Van Cleave. </author> <title> Optimum Steiner tree generation. </title> <booktitle> In Proceedings of the Second Great Lakes Symposium on VLSI, </booktitle> <pages> pages 207-212, </pages> <year> 1992. </year>
Reference-contexts: Previous Work 6 Further computational progress resumed in 1989 when Sidorenko [50] reported an algorithm applicable up to 11 terminals. Similar results were reported by Lewis, Pong and Van Cleave <ref> [36] </ref> in 1992. Thomborson, Alpern and Carter [54] report solving problems with up to about 16 terminals in 1992. The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994.
Reference: [37] <author> L. Lovasz. </author> <title> Combinatorial Problems and Exercises. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1979. </year>
Reference-contexts: D. Smith. A forthcoming paper by Smith and Warme will present these and other enumeration results for hypertrees, including simple combinatorial proofs of Theorem 3.15 and Corollary 3.15.1 based on a generalization of the Prufer code <ref> [37, 44] </ref>. For the analogous problem in conventional graphs the classical result is n n2 , and is usually attributed to Cayley in 1889 [8]. Cayley's own paper, however, references an earlier proof of this formula by Borchardt [6] in 1860.
Reference: [38] <author> A. Lucena and J. E. Beasley. </author> <title> Branch and cut algorithms. </title> <editor> In J. E. Beasley, editor, </editor> <title> Advances in Linear Integer Programming. </title> <publisher> Oxford University Press, </publisher> <year> 1996. </year>
Reference-contexts: This reduction has been by far the most popular approach to computing RSMTs. Various exact algorithms for the Steiner problem in graphs have been tried on grid graphs, including the dynamic programming method of Dreyfus and Wagner [15, 54], Hakimi's method [25] as well as sophisticated branch-and-cut methods <ref> [38, 34] </ref>. However, even the most sophisticated branch-and-cut codes fail to solve instances much larger than 40 terminals due to the extreme degeneracy of the Hanan grid graph. In 1996 the author in collaboration with Abilio Lucena solved several of the 100 terminal instances from the OR-library.
Reference: [39] <author> T. McCormick. </author> <type> Personal communication, </type> <month> September </month> <year> 1997. </year>
Reference-contexts: Their proof uses a rather complicated reduction from 3SAT. Here is a very simple and elegant proof for the h = 4 case that was devised by Thomas McCormick <ref> [39] </ref>. It reduces from exact 3 cover which is well-known to be NP-complete [33]: Problem Exact 3 Cover: Given: A finite set S with jSj = 3k, a family F of 3-element subsets of S.
Reference: [40] <author> Z. A. Melzak. </author> <title> On the problem of Steiner. </title> <journal> Canadian Mathematics Bulletin, </journal> <volume> 4 </volume> <pages> 143-149, </pages> <year> 1961. </year>
Reference-contexts: Previous Work 5 1.2 Previous Work The first finite algorithm for the Euclidean Steiner tree problem was given by Melzak <ref> [40] </ref>. It works by explicitly enumerating all possible tree topologies, computing a relatively minimal configuration for each. The shortest is retained and is the ESMT. Cockayne [9] improved the method, which was later coded by Cockayne and Schiller [12] and handled problems with up to 7 terminals.
Reference: [41] <author> M. Padberg and L. Wolsey. </author> <title> Trees and cuts. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 17, </volume> <year> 1983. </year> <month> Bibliography120 </month>
Reference-contexts: Our implementation chooses a t that minimizes b t on each iteration. The deterministic flow formulation can be costly. To speed up the separation process, a suite of problem reductions and heuristics are used. 4.1.2.2 Reductions and Decompositions Following Padberg and Wolsey <ref> [41] </ref>, we can eliminate many terminals from consideration using the following idea, which is adapted from their proposition 2 (i). <p> Then f (S) = jSj e2E = j=1 4 jS j j e2E j 3 = j=1 a contradiction. 2 Thus we may further confine our search to within single connected components. This is just a generalization of proposition 1 of <ref> [41] </ref> to hypergraphs. Lemma 4.3 Let H = (V; E) be a hypergraph with weights x e for all e 2 E to separate. Let H = (V; E) be the support hypergraph of H. <p> If no violations have yet been discovered within H j = (V j ; E j ), we apply a method that heuristically reduces the hypergraph H j to an undirected graph H j and then apply Padberg and Wolsey's method <ref> [41] </ref> directly. The reduction is as follows: let e 2 E j . Let k e = jej 1. Let T e be any set of k e edges from f (s; t) 2 e fi eg that forms a spanning tree for e. <p> Assign each of these edges weight x e . Taking the union of the T e for all e 2 E j we obtain a weighted multigraph. By merging equivalent edges and summing their weights we obtain a weighted graph to which we can apply the method <ref> [41] </ref>. This method is heuristic in that violations will be detected or not based upon the particular choices of spanning tree for each full set. Lacking a better way to proceed, we arbitrarily choose minimum spanning trees.
Reference: [42] <author> J.-C. </author> <title> Picard. Maximal closure of a graph and application to combinatorial problems. </title> <journal> Management Sci., </journal> <volume> 22 </volume> <pages> 1268-1272, </pages> <year> 1976. </year>
Reference-contexts: Queyranne [45] noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys [47] and Balinski [1]. These are equivalent to finding a "maximal closure of a graph," as defined by Picard <ref> [42] </ref>. These problems reduce to finding a minimum cut on a simple bipartite directed graph.
Reference: [43] <author> J.-C. Picard and M. Queyranne. </author> <title> A network flow solution to some nonlinear 0 1 programming problems, with applications to graph theory. </title> <booktitle> Networks, </booktitle> <pages> pages 141-159, </pages> <year> 1982. </year>
Reference-contexts: When setting up the flow network for this problem, simply eliminate vertex g t , vertices f e such that t 2 e and the associated arcs when setting up the flow network. When the minimum 1 Picard and Queyranne <ref> [43] </ref> showed that such problems are equivalent to the selection problem. 4.1. Branch-and-Cut Procedure 74 of f t (S) is obtained, delete terminal t from the separation problem, choose another t and iterate. Our implementation chooses a t that minimizes b t on each iteration.
Reference: [44] <author> H. Prufer. </author> <title> Arch. </title> <journal> Math. u. Phys., </journal> <volume> 27 </volume> <pages> 142-144, </pages> <year> 1918. </year>
Reference-contexts: D. Smith. A forthcoming paper by Smith and Warme will present these and other enumeration results for hypertrees, including simple combinatorial proofs of Theorem 3.15 and Corollary 3.15.1 based on a generalization of the Prufer code <ref> [37, 44] </ref>. For the analogous problem in conventional graphs the classical result is n n2 , and is usually attributed to Cayley in 1889 [8]. Cayley's own paper, however, references an earlier proof of this formula by Borchardt [6] in 1860.
Reference: [45] <author> M. Queyranne. </author> <type> Personal communication, </type> <month> May </month> <year> 1997. </year>
Reference-contexts: Although a major improvement over heuristics alone, this method was exceedingly slow on separation subproblems larger than about 80 terminals. Queyranne <ref> [45] </ref> noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys [47] and Balinski [1]. These are equivalent to finding a "maximal closure of a graph," as defined by Picard [42].
Reference: [46] <author> G. Reinelt. </author> <title> TSPLIB a traveling salesman problem library. </title> <journal> ORSA Journal on Computing, </journal> <volume> 3(4) </volume> <pages> 376-384, </pages> <year> 1991. </year>
Reference-contexts: Warme, Winter and Zachariasen [58] present additional computational experience that combines the new FST concatenation algorithm presented here with state-of-the-art Eu-clidean [62] and rectilinear [64] FST generators. The computational study presented there includes instances from the TSPLIB problem set <ref> [46] </ref>, as well as some pathological Euclidean and rectilinear instances. In that study, optimal Euclidean and rectilinear solutions were obtained for instances as large as 2392 points (TSPLIB instance pr2392).
Reference: [47] <author> J. M. W. Rhys. </author> <title> A selection problem of shared fixed costs and network flows. </title> <journal> Management Sci., </journal> <volume> 17 </volume> <pages> 200-207, </pages> <year> 1970. </year>
Reference-contexts: Although a major improvement over heuristics alone, this method was exceedingly slow on separation subproblems larger than about 80 terminals. Queyranne [45] noticed that minimizing f (S) can be reduced to an instance of the "selection problem," as defined by Rhys <ref> [47] </ref> and Balinski [1]. These are equivalent to finding a "maximal closure of a graph," as defined by Picard [42]. These problems reduce to finding a minimum cut on a simple bipartite directed graph.
Reference: [48] <author> J. S. Salowe and D. M. Warme. </author> <title> An exact rectilinear Steiner tree algorithm. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 472-475, </pages> <year> 1993. </year>
Reference-contexts: Thomborson, Alpern and Carter [54] report solving problems with up to about 16 terminals in 1992. The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994. In 1993, Salowe and Warme <ref> [48] </ref> made a significant advance by adapting the Euclidean results of Winter [60] and Cockayne and Hewgill [10, 11] to the rectilinear problem | solving most 30 terminal instances in an average of 30 minutes. Further refinements [49] increased this to about 35 points. <p> Previous Work 7 problem in Figure 1.1. problem in Figure 1.1. The research described in this dissertation builds upon the author's previous breakthrough <ref> [48, 49] </ref> achieved during his M.S. studies. The new method results in provably optimal solutions to random problem instances having up to 1000 terminals. <p> In the second (FST concatenation) phase we find a subset F fl F with minimum total length that fully connects V . This scheme was first applied to the rectilinear problem by Salowe and Warme <ref> [48, 49] </ref>. To illustrate the method on a rectilinear problem, Figures 2.1 and 2.2 present all 216 members of F (rectilinear FSTs) obtained by the Salowe-Warme FST generation algorithm [48, 49] for the 70 point problem shown in Figure 1.1. <p> This scheme was first applied to the rectilinear problem by Salowe and Warme <ref> [48, 49] </ref>. To illustrate the method on a rectilinear problem, Figures 2.1 and 2.2 present all 216 members of F (rectilinear FSTs) obtained by the Salowe-Warme FST generation algorithm [48, 49] for the 70 point problem shown in Figure 1.1. The reader may verify that the RSMT shown in Figure 1.1 is the union of 35 FSTs, each of which can be found in Figures 2.1 and 2.2. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete.
Reference: [49] <author> J. S. Salowe and D. M. Warme. </author> <title> 35-point rectilinear Steiner minimal trees in a day. </title> <journal> Networks, </journal> <volume> 25 </volume> <pages> 69-87, </pages> <year> 1995. </year>
Reference-contexts: In 1993, Salowe and Warme [48] made a significant advance by adapting the Euclidean results of Winter [60] and Cockayne and Hewgill [10, 11] to the rectilinear problem | solving most 30 terminal instances in an average of 30 minutes. Further refinements <ref> [49] </ref> increased this to about 35 points. In 1997, Fomeier and Kaufmann further refined the approach so that most 70 terminal problems are solved, which are the best results currently appearing in the literature. <p> Previous Work 7 problem in Figure 1.1. problem in Figure 1.1. The research described in this dissertation builds upon the author's previous breakthrough <ref> [48, 49] </ref> achieved during his M.S. studies. The new method results in provably optimal solutions to random problem instances having up to 1000 terminals. <p> An overview of the key ideas behind Euclidean and rectilinear FST generation are presented | primarily so that the dissertation may be more self-contained. For the entire story, consult [60, 62] for Euclidean FST generation and <ref> [49, 64] </ref> for rectilinear FST generation. See [29] for a more comprehensive treatment of Steiner tree results and methods. 2.1 Overview of the FST Concatenation Method In this section we give a brief overview of the FST concatenation method for computing Steiner minimal trees. <p> In the second (FST concatenation) phase we find a subset F fl F with minimum total length that fully connects V . This scheme was first applied to the rectilinear problem by Salowe and Warme <ref> [48, 49] </ref>. To illustrate the method on a rectilinear problem, Figures 2.1 and 2.2 present all 216 members of F (rectilinear FSTs) obtained by the Salowe-Warme FST generation algorithm [48, 49] for the 70 point problem shown in Figure 1.1. <p> This scheme was first applied to the rectilinear problem by Salowe and Warme <ref> [48, 49] </ref>. To illustrate the method on a rectilinear problem, Figures 2.1 and 2.2 present all 216 members of F (rectilinear FSTs) obtained by the Salowe-Warme FST generation algorithm [48, 49] for the 70 point problem shown in Figure 1.1. The reader may verify that the RSMT shown in Figure 1.1 is the union of 35 FSTs, each of which can be found in Figures 2.1 and 2.2. <p> For complete details, refer to [62]. 2.4 Rectilinear FST Generation We now give a brief overview of the FST generation process for the rectilinear distance metric. These results were previously given in Salowe and Warme <ref> [49] </ref>, and are presented here for completeness only. <p> The lune property of Section 2.2.1 implies that X cannot be an FST if any of the lunes (i.e., corner lunes or diamonds) defined by its segments are non-empty. Neither can X be an FST if the corner-flipped topology ^ X has non-empty diamonds. It is known (e.g., <ref> [5, 49, 64] </ref>) and easy to show that certain rectangular regions must also be empty. Let X be a Hwang topology containing segments ab and bc that form a 90 ffi 2.4. Rectilinear FST Generation 28 angle at point b. <p> Perhaps even more importantly, this approach automatically gives us a full Steiner tree for each such candidate full set. The Salowe-Warme algorithm <ref> [49] </ref> generates FSTs by considering all pairs (a; b) of terminals as backbones for Hwang topologies. The backbone for (a; b) consists of a vertical line segment incident to a and a horizontal line segment incident to b. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete. <p> All computations reported here were performed on a 125 MHz Sparc 20 with 256 megabytes of memory. All CPU times are reported in seconds. All LPs were solved using CPLEX version 4.0. All rectilinear FSTs were generated using the Salowe-Warme algorithm <ref> [49] </ref>. All Euclidean FSTs were generated using the Winter-Zachariasen algorithm [62]. We solved problem sets from the literature, including those of Soukup and Chow [52], and all of the problems from Beasley's OR-library [3, 2] having 1000 or fewer terminals.
Reference: [50] <author> A. F. Sidorenko. </author> <title> On minimal rectilinear Steiner trees. </title> <journal> Diskretnaya Matematika, </journal> <volume> 1 </volume> <pages> 28-37, </pages> <year> 1989. </year> <note> (In Russian). </note>
Reference-contexts: In 1976, Hwang completely characterized the rectilinear FSTs [27]. This important result forms the basis of all known rectilinear FST generators, including the rectilinear results reported in this dissertation. 1.2. Previous Work 6 Further computational progress resumed in 1989 when Sidorenko <ref> [50] </ref> reported an algorithm applicable up to 11 terminals. Similar results were reported by Lewis, Pong and Van Cleave [36] in 1992. Thomborson, Alpern and Carter [54] report solving problems with up to about 16 terminals in 1992.
Reference: [51] <author> W. D. Smith. </author> <type> Personal communication, </type> <month> February </month> <year> 1998. </year>
Reference-contexts: The Bell numbers can be expressed in terms of the Stirling numbers: Bell (n) = n X ( k : Recently, W. D. Smith <ref> [51] </ref> obtained the following recurrence and generating function for h n : Theorem 3.13 (W. D. Smith [51]) Let h n be the number of rooted hypertrees spanning n labeled vertices. <p> The Bell numbers can be expressed in terms of the Stirling numbers: Bell (n) = n X ( k : Recently, W. D. Smith <ref> [51] </ref> obtained the following recurrence and generating function for h n : Theorem 3.13 (W. D. Smith [51]) Let h n be the number of rooted hypertrees spanning n labeled vertices. <p> If is any non-zero real number, then [z n =] f (z) denotes [z n ] f (z). Let H (z) = n1 z n (3.18) be the exponential generating function for h n . Theorem 3.14 (W. D. Smith <ref> [51] </ref>) H (z) = z e e H (z) 1 : (3.19) Proof : It just so happens that X P k a 1 ; a 2 ; : : : ; a k j=1 " (n 1)! H (z) k : (3.20) Therefore, if n &gt; 1 we have h
Reference: [52] <author> J. Soukup and W. F. Chow. </author> <title> Set of test problems for the minimum length connection networks. </title> <journal> ACM/SIGMAP Newsletter, </journal> <volume> 15 </volume> <pages> 45-81, </pages> <year> 1973. </year>
Reference-contexts: All CPU times are reported in seconds. All LPs were solved using CPLEX version 4.0. All rectilinear FSTs were generated using the Salowe-Warme algorithm [49]. All Euclidean FSTs were generated using the Winter-Zachariasen algorithm [62]. We solved problem sets from the literature, including those of Soukup and Chow <ref> [52] </ref>, and all of the problems from Beasley's OR-library [3, 2] having 1000 or fewer terminals.
Reference: [53] <author> R. P. Stanley. </author> <booktitle> Enumerative Combinatorics, </booktitle> <volume> volume 1. </volume> <publisher> Wadsworth Brooks Cole, </publisher> <year> 1986. </year> <month> Bibliography121 </month>
Reference-contexts: Counting the Spanning Trees of K n 57 Note that 1 + k1 Bell (k) z k = e e z 1 (3.22) is known (e.g., equation 24f, page 34 of <ref> [53] </ref>).
Reference: [54] <author> C. D. Thomborson, B. Alpern, and L. Carter. </author> <title> Rectilinear Steiner tree minimization on a workstation. </title> <editor> In N. Dean and G. E. Shannon, editors, </editor> <booktitle> Computational Support for Discrete Mathematics, volume 15 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 119-136. </pages> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1994. </year>
Reference-contexts: Previous Work 6 Further computational progress resumed in 1989 when Sidorenko [50] reported an algorithm applicable up to 11 terminals. Similar results were reported by Lewis, Pong and Van Cleave [36] in 1992. Thomborson, Alpern and Carter <ref> [54] </ref> report solving problems with up to about 16 terminals in 1992. The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994. <p> This reduction has been by far the most popular approach to computing RSMTs. Various exact algorithms for the Steiner problem in graphs have been tried on grid graphs, including the dynamic programming method of Dreyfus and Wagner <ref> [15, 54] </ref>, Hakimi's method [25] as well as sophisticated branch-and-cut methods [38, 34]. However, even the most sophisticated branch-and-cut codes fail to solve instances much larger than 40 terminals due to the extreme degeneracy of the Hanan grid graph.
Reference: [55] <author> I. Tomescu and M. Zimand. </author> <title> Minimum spanning hypertrees. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 54 </volume> <pages> 67-76, </pages> <year> 1994. </year>
Reference-contexts: Problem Spanning Tree in Hypergraph (STHG): Given: A hypergraph H = (V; E). Question: Is there an E 0 E such that H 0 = (V; E 0 ) is a tree? Tomescu and Zimand <ref> [55] </ref> have shown that for every h 3, the problem of deciding the existence of a spanning tree in an h-uniform hypergraph (where jej = h for all e 2 E) is NP-complete. Their proof uses a rather complicated reduction from 3SAT.
Reference: [56] <author> D. Trietsch and F. K. Hwang. </author> <title> An improved algorithm for Steiner trees. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 50 </volume> <pages> 244-263, </pages> <year> 1990. </year>
Reference-contexts: Further improvements were made by Cockayne and Hewgill [10, 11], who reported solutions of problems up to 100 terminals. Recently Winter and Zachariasen [62] refined these methods even further, solving problems up to 150 terminals. Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang <ref> [56] </ref>, and the luminary algorithm of Hwang and Weng [30]. Neither of these algorithms have been implemented. The rectilinear problem was introduced in 1966 by Hanan [26], who characterized optimal solutions for n 5 terminals.
Reference: [57] <author> R. A. Wagner. </author> <title> Evaluating uniform expressions within two steps of minimum parallel time. </title> <journal> Journal of the ACM, </journal> <volume> 44(2) </volume> <pages> 345-361, </pages> <year> 1997. </year>
Reference-contexts: Recent work by Ganley [17] treated such obstacle-avoiding RSMTs directly. In addition to global wire length estimation, RSMTs have also been used to evaluate the merit of functional block placements in floor-planners such as the MONDRIAN system [17]. Wagner <ref> [57] </ref> reduces certain cases of parallel expression evaluation to the RSMT problem.
Reference: [58] <author> D. M. Warme, P. Winter, and M. Zachariasen. </author> <title> Exact algorithms for plane Steiner tree problems: A computational study. </title> <editor> In D.-Z. Du, J. M. Smith, and J. H. Rubinstein, editors, </editor> <title> Advances in Steiner Trees. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> Massachusetts, </address> <year> 1998. </year>
Reference-contexts: In Section 5.2 we propose a method that should greatly speed solution when convergence becomes this slow. Warme, Winter and Zachariasen <ref> [58] </ref> present additional computational experience that combines the new FST concatenation algorithm presented here with state-of-the-art Eu-clidean [62] and rectilinear [64] FST generators. The computational study presented there includes instances from the TSPLIB problem set [46], as well as some pathological Euclidean and rectilinear instances.
Reference: [59] <editor> H. S. Wilf. Generatingfunctionology. </editor> <publisher> Academic Press, </publisher> <address> San Diego, California, </address> <note> second edition, </note> <year> 1994. </year>
Reference-contexts: Therefore H (z) = n&gt;0 z n = z e e H (z) 1 : (3.24) To obtain a closed form for h n , we employ the Lagrange inversion formula <ref> [59] </ref>, a weak form of which (sufficient for our purposes) is Lemma 3.7 (Lagrange inversion formula) Let (u) be a formal power series in u, such that (0) = 1. <p> Then there is a unique formal power series u (z) (about z = 0) satisfying u (z) = z (u (z)): (3.25) This formal power series satisfies [z n ] u (z) = n A proof can be found in <ref> [59] </ref>. Theorem 3.15 (Warme) Let h n be the number of rooted hypertrees spanning n labeled vertices. Then for every n 1 h n = i=0 n 1 ) 3.6.
Reference: [60] <author> P. Winter. </author> <title> An algorithm for the Steiner problem in the Euclidean plane. </title> <journal> Networks, </journal> <volume> 15 </volume> <pages> 323-345, </pages> <year> 1985. </year>
Reference-contexts: Provably optimal solutions to such instances were well beyond the capabilities of previous methods, but are becoming feasible with the algorithm presented here. The research described here focused initially on the rectilinear problem, adapting Winter's groundbreaking Euclidean work <ref> [60] </ref> to the rectilinear problem. Although the initial results of these efforts represented a significant advance for the rectilinear problem, they fell disappointingly short of the 100 terminal solutions obtained for the Euclidean problem. <p> Boyce and Seery [7] improved the method so that 10 and later 12 terminal problems could be solved. Hwang provided an O (n) solution to the Melzak FST algorithm, a crucial subroutine in the method [28]. Winter <ref> [60] </ref> devised a totally different approach that first generates all possible FSTs, and then constructs a Steiner minimal tree by choosing a subset of the FSTs that span the terminals with minimal length. Problems up to 15 terminals were solved quite rapidly. <p> The algorithms of Ganley and Cohoon [18, 19] handle about 18 and 28 terminals, respectively in 1994. In 1993, Salowe and Warme [48] made a significant advance by adapting the Euclidean results of Winter <ref> [60] </ref> and Cockayne and Hewgill [10, 11] to the rectilinear problem | solving most 30 terminal instances in an average of 30 minutes. Further refinements [49] increased this to about 35 points. <p> An overview of the key ideas behind Euclidean and rectilinear FST generation are presented | primarily so that the dissertation may be more self-contained. For the entire story, consult <ref> [60, 62] </ref> for Euclidean FST generation and [49, 64] for rectilinear FST generation. <p> Then V has a Steiner minimal tree that consists of one or more full topologies over full sets with respect to V . These full topologies intersect only at terminals of degree two or greater. This theorem validates a two-phase scheme originally suggested by Winter <ref> [60] </ref> for the Euclidean problem. The idea is as follows: In the first (FST generation) phase we generate 9 2.1. Overview of the FST Concatenation Method 10 a (usually small) set F of FSTs containing at least one SMT identified as a subset. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete.
Reference: [61] <author> P. Winter. </author> <title> Reductions for the rectilinear Steiner tree problem. </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: The resulting graphs are extremely sparse compared to Hanan grid graphs (see Figures 1.3 and 1.4), and are much easier to solve. Although further improvement in these graphs seem possible using the graph reductions devised by Winter <ref> [61] </ref>, this approach seems unlikely to meet or overtake the methods presented here. 1.2. Previous Work 7 problem in Figure 1.1. problem in Figure 1.1. The research described in this dissertation builds upon the author's previous breakthrough [48, 49] achieved during his M.S. studies.
Reference: [62] <author> P. Winter and M. Zachariasen. </author> <title> Euclidean Steiner minimum trees: an improved exact algorithm. </title> <journal> Networks, </journal> <volume> 30 </volume> <pages> 149-166, </pages> <year> 1997. </year> <month> Bibliography122 </month>
Reference-contexts: Problems up to 15 terminals were solved quite rapidly. Further improvements were made by Cockayne and Hewgill [10, 11], who reported solutions of problems up to 100 terminals. Recently Winter and Zachariasen <ref> [62] </ref> refined these methods even further, solving problems up to 150 terminals. Other exact ESMT algorithms include the negative edge algorithm of Trietsch and Hwang [56], and the luminary algorithm of Hwang and Weng [30]. Neither of these algorithms have been implemented. <p> The research described in this dissertation builds upon the author's previous breakthrough [48, 49] achieved during his M.S. studies. The new method results in provably optimal solutions to random problem instances having up to 1000 terminals. Winter and Zachariasen generously provided source code for their new Euclidean FST generator <ref> [62] </ref>, permitting these results to be re-applied to the Euclidean problem | resulting in optimal solutions to problems having up to 2000 terminals. See Figure 1.5 for a timeline showing progress on the Euclidean and rectilinear Steiner tree problems. 1.2. <p> An overview of the key ideas behind Euclidean and rectilinear FST generation are presented | primarily so that the dissertation may be more self-contained. For the entire story, consult <ref> [60, 62] </ref> for Euclidean FST generation and [49, 64] for rectilinear FST generation. <p> Then F cannot be part of a Steiner minimal tree. 2.3 Euclidean FST Generation We now give a brief overview of the FST generation process for the Euclidean distance metric. These results are not original, and are presented for completeness only. The full details are in Winter and Zachariasen <ref> [62] </ref>. All line segments within a Euclidean SMT must meet at angles of 120 ffi or more, otherwise the tree can be easily shortened. We refer to this property as the angle condition. Steiner points therefore always have degree three, forming angles of exactly 120 ffi . <p> We now very briefly present several of the pruning tests that equilateral points must pass in order to be retained in E. For the complete discussion including additional tests, see <ref> [62] </ref>. 2.3. Euclidean FST Generation 19 2.3.1 Projections Let p and q be two equilateral points and suppose that p is of nonzero order. Let a and c be the base points of p so that p = e ac . <p> Rectilinear FST Generation 24 There are other pruning and compatibility tests that can be used. For complete details, refer to <ref> [62] </ref>. 2.4 Rectilinear FST Generation We now give a brief overview of the FST generation process for the rectilinear distance metric. These results were previously given in Salowe and Warme [49], and are presented here for completeness only. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete. <p> All CPU times are reported in seconds. All LPs were solved using CPLEX version 4.0. All rectilinear FSTs were generated using the Salowe-Warme algorithm [49]. All Euclidean FSTs were generated using the Winter-Zachariasen algorithm <ref> [62] </ref>. We solved problem sets from the literature, including those of Soukup and Chow [52], and all of the problems from Beasley's OR-library [3, 2] having 1000 or fewer terminals. <p> In Section 5.2 we propose a method that should greatly speed solution when convergence becomes this slow. Warme, Winter and Zachariasen [58] present additional computational experience that combines the new FST concatenation algorithm presented here with state-of-the-art Eu-clidean <ref> [62] </ref> and rectilinear [64] FST generators. The computational study presented there includes instances from the TSPLIB problem set [46], as well as some pathological Euclidean and rectilinear instances. In that study, optimal Euclidean and rectilinear solutions were obtained for instances as large as 2392 points (TSPLIB instance pr2392). <p> Its nearest rectlinear competitors seem to be Martin and Koch [34] (up to 40 terminals), and Fomeier and Kaufmann [16] (70 terminals, but at least one instance of 100 terminals). For the Euclidean problem, Winter and Zachariasen <ref> [62] </ref> is the closest competitor at 150 terminals. 100 101 Provided a suitable FST generator is available, this method is applicable to other distance metrics and arbitrary dimensions | even the Steiner problem in graphs.
Reference: [63] <author> Y. Y. Yang and O. Wing. </author> <title> Optimal and suboptimal solution algorithms for the wiring problem. </title> <booktitle> In Proceedings of the International Symposium on Circuit Theory, </booktitle> <pages> pages 154-158, </pages> <year> 1972. </year>
Reference-contexts: Hanan also showed that an RSMT always exists as a subgraph of a grid graph, obtained by constructing horizontal and vertical lines through each terminal. The first exact algorithm in the literature appeared in 1972 by Yang and Wing <ref> [63] </ref>, who report solving problems with up to 9 terminals. No further computational advances appear in the literature until 1989. In 1976, Hwang completely characterized the rectilinear FSTs [27]. This important result forms the basis of all known rectilinear FST generators, including the rectilinear results reported in this dissertation. 1.2.
Reference: [64] <author> M. Zachariasen. </author> <title> Rectilinear full Steiner tree generation. </title> <type> Technical Report DIKU-TR-97/29, </type> <institution> University of Copenhagen, </institution> <address> Universitetsparken 1, DK-2100 KBH , Denmark, </address> <year> 1997. </year>
Reference-contexts: An overview of the key ideas behind Euclidean and rectilinear FST generation are presented | primarily so that the dissertation may be more self-contained. For the entire story, consult [60, 62] for Euclidean FST generation and <ref> [49, 64] </ref> for rectilinear FST generation. See [29] for a more comprehensive treatment of Steiner tree results and methods. 2.1 Overview of the FST Concatenation Method In this section we give a brief overview of the FST concatenation method for computing Steiner minimal trees. <p> For complete details, refer to [62]. 2.4 Rectilinear FST Generation We now give a brief overview of the FST generation process for the rectilinear distance metric. These results were previously given in Salowe and Warme [49], and are presented here for completeness only. The more recent methods of Zachariasen <ref> [64] </ref> are superior, and represent the current state of the art. 2.4.1 Hwang Topologies Hwang [27] provided a complete description of the rectilinear FSTs, a result known as Hwang's theorem: Theorem 2.2 (Hwang's theorem) Every rectilinear full set has a rectilinear Steiner minimal tree having one of four topologies. <p> The lune property of Section 2.2.1 implies that X cannot be an FST if any of the lunes (i.e., corner lunes or diamonds) defined by its segments are non-empty. Neither can X be an FST if the corner-flipped topology ^ X has non-empty diamonds. It is known (e.g., <ref> [5, 49, 64] </ref>) and easy to show that certain rectangular regions must also be empty. Let X be a Hwang topology containing segments ab and bc that form a 90 ffi 2.4. Rectilinear FST Generation 28 angle at point b. <p> If a heuristic finds an RSMT for S that is shorter than jF i j + jF j j, then F i and F j are incompatible. Refer to Zachariasen <ref> [64] </ref> for the state of the art in rectilinear FST generation. <p> The rest of the dissertation focuses on FST concatenation, which we solve in the next chapter by reducing it to finding a minimum-weight spanning tree in a hypergraph. For further details on FST generation, incompatibility testing and pruning, refer to <ref> [11, 16, 48, 49, 60, 62, 64] </ref>. 3 The Spanning Tree in Hypergraph Problem This chapter defines hypergraphs, their notation, and the spanning tree in hypergraph problem. It is shown that the problem of deciding even the existence of a spanning tree in an arbitrary hypergraph is NP-complete. <p> In Section 5.2 we propose a method that should greatly speed solution when convergence becomes this slow. Warme, Winter and Zachariasen [58] present additional computational experience that combines the new FST concatenation algorithm presented here with state-of-the-art Eu-clidean [62] and rectilinear <ref> [64] </ref> FST generators. The computational study presented there includes instances from the TSPLIB problem set [46], as well as some pathological Euclidean and rectilinear instances. In that study, optimal Euclidean and rectilinear solutions were obtained for instances as large as 2392 points (TSPLIB instance pr2392).
References-found: 64

