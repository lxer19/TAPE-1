URL: http://www2.cs.cornell.edu/cs71X-s97/papers/comcom91.ps
Refering-URL: 
Root-URL: 
Author: Andrew S. Tanenbaum M. Frans Kaashoek Robbert van Renesse Henri E. Bal 
Address: Amsterdam, The Netherlands  
Affiliation: Dept. of Mathematics and Computer Science Vrije Universiteit  
Abstract: THE AMOEBA DISTRIBUTED OPERATING SYSTEMA STATUS REPORT ABSTRACT As the price of CPU chips continues to fall rapidly, it will soon be economically feasible to build computer systems containing a large number of processors. The question of how this computing power should be organized, and what kind of operating system is appropriate then arises. Our research during the past decade has focused on these issues and led to the design of a distributed operating system, called Amoeba, that is intended for systems with large numbers of computers. In this paper we describe Amoeba, its philosophy, its design, its applications, and some experience with it. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Accetta, M., Baron, R., Bolosky W., Golub, D., Rashid, R., Tevanian, A., and Young, M. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> Proceedings of the Summer Usenix Conference , Atlanta, </booktitle> <address> GA, </address> <month> (July </month> <year> 1986) </year> <month> Baalbergen, </month> <note> E.H, </note> <author> Verstoep, K., and Tanenbaum, </author> <title> A.S. On the Design of the Amoeba Configuration Manager. </title> <booktitle> Proc. 2nd Int'l Workshop on Software Config. Mgmt., ACM, </booktitle> <year> (1989). </year>
Reference-contexts: For these reasons we thought it would be easy to get people to accept it. We were wrong. We have since switched to X windows. - 20 - 8. COMPARISON WITH OTHER SYSTEMS In some ways, Amoeba resembles other well-known distributed systems, such as Mach <ref> (Accetta et al, 1986) </ref>, Chorus (Rozier, 1988) V (Cheriton, 1988) and Sprite (Ousterhout et al., 1988). Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, space limitations prohibit us from doing that here.
Reference: <author> Bal, </author> <title> H.E.: Programming Distributed Systems Summit NJ: </title> <publisher> Silicon Press, </publisher> <year> (1990). </year>
Reference: <author> Bal, H.E., and Tanenbaum, </author> <title> A.S. Distributed Programming with Shared Data, </title> <journal> Computer Languages, </journal> <volume> vol. 16, </volume> <pages> pp. 129-146, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: This implementation is not present in the initial release of Amoeba (Version 4.0, Spring 1991), but will be present in Version 5.0. The basic idea is that each shared object is replicated in full on all processors that are running a process interested in the shared object <ref> (Bal and Tanenbaum, 1991) </ref>. Orca operations are divided into two categories: those involving only reading the object, and those that change the object. The read operations are easy. Since a copy of the object is located on each machine, the operation can be performed entirely locally, with no network traffic.
Reference: <author> Birrell, A.D., and Nelson, B.J. </author> <title> Implementing Remote Procedure Calls, </title> <journal> ACM Trans. Comput. Systems 2, </journal> <month> (Feb. </month> <pages> 1984) pp. 39-59. </pages>
Reference-contexts: The third job of the microkernel is to provide the ability for one thread to communicate transparently with another thread, regardless of the nature or location of the two threads. The model used here is a remote procedure call (RPC) between a client and a server <ref> (Birrell and Nelson, 1984) </ref>. Conceptually, the initiating thread, called the client , calls a library procedure that runs on the server. This mechanism is implemented as follows. <p> Comparative Performance of RPC on Amoeba and other systems. The RPC numbers for the other systems are taken from the following publications: Cedar <ref> (Birrell and Nelson, 1984) </ref>, x-Kernel (Peterson et al, 1990), Sprite (Ousterhout et al., 1988), V (Cheriton, 1988), Topaz (Schroeder and Burrows, 1989), and Mach - 7 - (Peterson et al, 1990).
Reference: <author> Cheriton, </author> <title> D.R. The V Distributed System. </title> <journal> Comm. ACM 31, </journal> <month> (March </month> <year> 1988), </year> <pages> pp. 314-333. </pages>
Reference-contexts: Comparative Performance of RPC on Amoeba and other systems. The RPC numbers for the other systems are taken from the following publications: Cedar (Birrell and Nelson, 1984), x-Kernel (Peterson et al, 1990), Sprite (Ousterhout et al., 1988), V <ref> (Cheriton, 1988) </ref>, Topaz (Schroeder and Burrows, 1989), and Mach - 7 - (Peterson et al, 1990). <p> We were wrong. We have since switched to X windows. - 20 - 8. COMPARISON WITH OTHER SYSTEMS In some ways, Amoeba resembles other well-known distributed systems, such as Mach (Accetta et al, 1986), Chorus (Rozier, 1988) V <ref> (Cheriton, 1988) </ref> and Sprite (Ousterhout et al., 1988). Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, space limitations prohibit us from doing that here. In (Douglis et al., 1990), we have provided a detailed comparison between Amoeba and Sprite, however.
Reference: <author> Douglis, F., Kaashoek, M.F., Tanenbaum, A.S., and Ousterhout, J.K.: </author> <title> A Comparison of Two Distributed Systems: Amoeba and Sprite. </title> <type> Report IR-230, </type> <institution> Dept. of Mathematics and Computer Science, Vrije Universiteit, </institution> <month> (Dec. </month> <year> 1990). </year>
Reference-contexts: Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, space limitations prohibit us from doing that here. In <ref> (Douglis et al., 1990) </ref>, we have provided a detailed comparison between Amoeba and Sprite, however. Nevertheless, we would like to make a few general remarks. The goals of the Amoeba project differ somewhat from the goals of the other systems.
Reference: <author> Evans, A., Kantrowitz, W., and Weiss, E. </author> <title> A User Authentication Scheme Not Requiring Secrecy in the Computer. </title> <journal> Commun. ACM 17, </journal> <month> (Aug. </month> <year> 1974), </year> <pages> pp. 437-442. </pages>
Reference-contexts: Such a function, y = f (x), has the property that given x it is easy to find y, but given only y, finding x requires an exhaustive search of all possible x values <ref> (Evans et al., 1974) </ref>. The server then creates a new capability, with the same value in the Object field, but the new rights bits in the Rights field and the output of the one-way function in the Check Field. The client may give this to another process, if it wishes.
Reference: <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., and Side-botham, R.N.: </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Trans. on Comp. Syst. </journal> <volume> 6, </volume> <month> (Feb. </month> <year> 1988), </year> <pages> pp. 55-81. </pages>
Reference-contexts: Finally, the new capability is installed in the proper directory, removing the old one. Then the old file can be deleted by the bullet server. Only if the file is too large for memory is a different procedure followed. This scheme is not unlike the Andrew file system <ref> (Howard et al, 1988) </ref>. Since the UNIX file system is being supported on top of the bullet server, the latter's file replication facility is automatically present, without any special effort. Amoeba and its servers are largely stateless, whereas various aspects of UNIX require maintaining state information.
Reference: <author> Kaashoek, M.F., and Tanenbaum, </author> <title> A.S.: </title> <booktitle> "Group Communication in the Amoeba Distributed Operating System" Proc. 11th Int'l Conf. on Distr. Comp. Syst. IEEE, </booktitle> <month> (May </month> <year> 1991). </year>
Reference-contexts: This means that they can be performed with no delay, highly efficiently. Operations that involve changing an object are more complicated. The algorithm used is based on one of the services offered by Amoeba 5.0, reliable broadcast <ref> (Kaashoek and Tanenbaum, 1991) </ref>. By this we mean, a message from one sender can be sent to a group of receivers with certainty that all of them will receive it (unless some of them crash).
Reference: <author> Kaashoek, M.F., Tanenbaum, A.S., Flynn Hummel, S., and Bal, </author> <title> H.E. An Efficient Reliable Broadcast Protocol. </title> <journal> Operating Systems Review , vol. </journal> <volume> 23, </volume> <month> (Oct </month> <year> 1989), </year> <pages> pp. 5-19. </pages>
Reference-contexts: If one or more messages have been missed, the processor asks the sequencer to send it the missing messages. In all cases, messages are only passed to the application in strict sequence, with no gaps. More details are given in <ref> (Kaashoek et al, 1989) </ref>. Now let us briefly consider a typical parallel application that runs on Amoeba: the traveling salesman problem (TSP).
Reference: <author> Lawler, E.L., and Wood, D.E. </author> <title> Branch and Bound Methods A Survey. </title> <note> Operations Research 14, </note> <month> (July </month> <year> 1966), </year> <pages> pp. 699-719. </pages>
Reference-contexts: Processor 3 could work on all paths starting Amsterdam-Sydney, and so on. Although letting each processor work independently on its portion of the search tree is feasible and will produce the correct answer, a far more efficient technique is to use the well-known branch and bound method <ref> (Lawler and Wood, 1966) </ref>. To use this method, first a complete path is found, for example by using the shortest-flight-next algorithm.
Reference: <author> Mullender, S.J., van Rossum, G., Tanenbaum, A.S., van Renesse, R., van Staveren, J.M. </author> <title> Amoeba A Distributed Operating System for the 1990s. </title> <booktitle> IEEE Computer 23, </booktitle> <month> (May </month> <year> 1990), </year> <pages> pp. 44-53. </pages>
Reference: <author> Ousterhout, J.K., Cherenson, A.R., Douglis, F., Nelson, M.N., and Welch, B.B. </author> <title> The Sprite Network Operating System. </title> <booktitle> IEEE Computer 21, </booktitle> <month> (Feb. </month> <year> 1988), </year> <pages> pp. 23-26. </pages> - <note> 22 - Peterson, </note> <author> L., Hutchinson, N., O'Malley, S., and Rao, H. </author> <title> The x-kernel: A Platform for Accessing Internet Resources. </title> <booktitle> IEEE Computer 23 (May 1990), </booktitle> <pages> pp. 23-33. </pages> <note> Rozier. </note> <author> M, Abrossimov. V, Armand. F, Boule. I, Gien. M, Guillemont. M, Hermann. F, Kaiser. C, Langlois. S, Leonard, P., and Neuhauser. W. </author> <title> CHORUS Distributed Operating System. </title> <booktitle> Computing Systems 1 (Fall 1988), </booktitle> <pages> pp. 299-328. </pages>
Reference-contexts: Comparative Performance of RPC on Amoeba and other systems. The RPC numbers for the other systems are taken from the following publications: Cedar (Birrell and Nelson, 1984), x-Kernel (Peterson et al, 1990), Sprite <ref> (Ousterhout et al., 1988) </ref>, V (Cheriton, 1988), Topaz (Schroeder and Burrows, 1989), and Mach - 7 - (Peterson et al, 1990). <p> Similarly, the published Sprite figures are also kernel-to-kernel. Sprite does not support RPC at the user level, but a close equivalent is the time to send a null message from one user process to another and get a reply, which is 4.3 msec. The user-to-user bandwidth is 170 kbytes/sec <ref> (Welch and Ousterhout, 1988) </ref>. V uses a clever technique to improve the performance for short RPCs: the entire message is put in the CPU registers by the user process and taken out by the kernel for transmission. <p> We were wrong. We have since switched to X windows. - 20 - 8. COMPARISON WITH OTHER SYSTEMS In some ways, Amoeba resembles other well-known distributed systems, such as Mach (Accetta et al, 1986), Chorus (Rozier, 1988) V (Cheriton, 1988) and Sprite <ref> (Ousterhout et al., 1988) </ref>. Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, space limitations prohibit us from doing that here. In (Douglis et al., 1990), we have provided a detailed comparison between Amoeba and Sprite, however.
Reference: <author> Schroeder, M.D., and, Burrows, M. </author> <title> Performance of the Firefly RPC. </title> <booktitle> Proc. Twelfth ACM Symp. on Oper. Syst. Prin., ACM, </booktitle> <month> (Dec. </month> <year> 1989), </year> <pages> pp. 83-90. </pages>
Reference-contexts: Comparative Performance of RPC on Amoeba and other systems. The RPC numbers for the other systems are taken from the following publications: Cedar (Birrell and Nelson, 1984), x-Kernel (Peterson et al, 1990), Sprite (Ousterhout et al., 1988), V (Cheriton, 1988), Topaz <ref> (Schroeder and Burrows, 1989) </ref>, and Mach - 7 - (Peterson et al, 1990). The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3.
Reference: <author> Tanenbaum, </author> <title> A.S. A UNIX Clone with Source Code for Operating Systems Courses. Operating Syst. </title> <journal> Rev. </journal> <volume> 21, </volume> <month> (Jan. </month> <year> 1987), </year> <pages> pp. 20-29. </pages>
Reference-contexts: This gap has been bridged by having a session server that keeps track of the state for the current UNIX login session. Many UNIX-like utilities are available with Amoeba (well over 100). Some of these have been taken from MINIX <ref> (Tanenbaum, 1987) </ref>. Others are public domain. Still others have been written from scratch. All of the compilers (C, Pascal, Modula 2, Orca) have been written by us using our own compiler writing system (Tanenbaum et al., 1983).
Reference: <author> Tanenbaum, A.S., and Renesse, R. van: </author> <title> A Critique of the Remote Procedure Call Paradigm. </title> <booktitle> Proc. Euteco '88 (1988), </booktitle> <pages> pp. 775-783. </pages>
Reference-contexts: For the most part, RPC communication has been satisfactory, as have the three primitives for accessing it. Occasionally, however, RPC gives problems in situations in which there is no clear master-slave relation, such as in UNIX pipelines <ref> (Tanenbaum and van Renesse, 1988) </ref>. Another difficulty is the fact that although RPC is fine for sending a message from one sender to one receiver, it is less suited for group communication. This limitation will be eliminated in Amoeba 5.0 with the introduction of reliable broadcasting as a fundamental primitive.
Reference: <author> Tanenbaum, A.S., Renesse, R. van, Staveren, H. van., Sharp, G.J., Mullender, S.J., Jan-sen, J., and Rossum, G. van: </author> <title> "Experiences with the Amoeba Distributed Operating System," </title> <journal> Commun. of the ACM vol. </journal> <volume> 33, </volume> <month> (Dec. </month> <year> 1990), </year> <pages> pp. 46-63. </pages>
Reference: <author> Tanenbaum, A.S., van Staveren, H., Keizer, E.G., and Stevenson, J.W.: </author> <title> "A Practical Toolkit for Making Portable Compilers," </title> <journal> Commun. ACM , vol. </journal> <volume> 26, </volume> <pages> pp. 654-660, </pages> <month> Sept. </month> <year> 1983. </year>
Reference-contexts: Some of these have been taken from MINIX (Tanenbaum, 1987). Others are public domain. Still others have been written from scratch. All of the compilers (C, Pascal, Modula 2, Orca) have been written by us using our own compiler writing system <ref> (Tanenbaum et al., 1983) </ref>. Thus none of the utilities, libraries, compilers, operating system or any other Amoeba programs contain any UNIX code whatsoever. As a result, an AT&T license is not required for Amoeba. Amoeba is distributed with full source code.
Reference: <author> Van Renesse, R., Van Staveren, H., and Tanenbaum, </author> <title> A.S. Performance of the Amoeba Distributed Operating System. </title> <journal> SoftwarePractice and Experience 19, (March 1989) pp. </journal> <pages> 223-234. </pages>
Reference: <author> Welch, B.B. and Ousterhout, J.K. </author> <title> Pseudo Devices: User-Level Extensions to the Sprite File System. </title> <booktitle> Proc. Summer USENIX Conf., </booktitle> <month> (June </month> <year> 1988), </year> <pages> pp. 37-49. </pages>
Reference-contexts: Similarly, the published Sprite figures are also kernel-to-kernel. Sprite does not support RPC at the user level, but a close equivalent is the time to send a null message from one user process to another and get a reply, which is 4.3 msec. The user-to-user bandwidth is 170 kbytes/sec <ref> (Welch and Ousterhout, 1988) </ref>. V uses a clever technique to improve the performance for short RPCs: the entire message is put in the CPU registers by the user process and taken out by the kernel for transmission.
References-found: 20

