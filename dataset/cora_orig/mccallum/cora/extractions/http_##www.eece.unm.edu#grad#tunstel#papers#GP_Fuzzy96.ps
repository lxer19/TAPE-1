URL: http://www.eece.unm.edu/grad/tunstel/papers/GP_Fuzzy96.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On Genetic Programming of Fuzzy Rule-Based Systems for Intelligent Control  
Author: Edward Tunstel and Mo Jamshidi 
Keyword: fuzzy control, genetic programming, syntactic contraints, mobile robots, rule-base dis covery.  
Date: 273-284, 1996  
Note: International Journal of Intelligent Automation Soft Computing, Vol. 2 No. 3, pp.  
Address: Albuquerque, NM 87131 USA  
Affiliation: NASA Center for Autonomous Control Engineering Department of Electrical and Computer Engineering University of New Mexico  
Abstract: Fuzzy logic and evolutionary computation have proven to be convenient tools for handling real-world uncertainty and designing control systems, respectively. An approach is presented that combines attributes of these paradigms for the purpose of developing intelligent control systems. The potential of the genetic programming paradigm (GP) for learning rules for use in fuzzy logic controllers (FLCs) is evaluated by focussing on the problem of discovering a controller for mobile robot path tracking. Performance results of incomplete rule-bases compare favorably to those of a complete FLC designed by the usual trial-and-error approach. A constrained syntactic representation supported by structure-preserving genetic operators is also introduced. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jamshidi, M., N. Vadiee and T. Ross (Eds.) </author> <title> Fuzzy Logic and Control: Software and hardware applications. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Recent research and applications employing non-analytical methods of soft computing such as fuzzy logic and evolutionary computation has demonstrated the utility and potential of these paradigms for developing intelligent control systems <ref> [1, 2] </ref>. Fuzzy logic control and evolutionary computation have proven to be convenient tools for handling real-world uncertainty and knowledge representation, and the design of intelligent control systems, respectively [3, 4]. <p> Over a given universe of discourse X , the membership function of a fuzzy set A, denoted by A (x), maps the elements x 2 X into a numerical value in the unit interval, i.e. A (x) : X ! <ref> [0; 1] </ref>: (1) Within this framework, a membership value of zero corresponds to an element which is definitely not a member of the fuzzy set, while a value of one corresponds to the case where an element is definitely a member of the set [1]. <p> A (x) : X ! [0; 1]: (1) Within this framework, a membership value of zero corresponds to an element which is definitely not a member of the fuzzy set, while a value of one corresponds to the case where an element is definitely a member of the set <ref> [1] </ref>. Implementation of a fuzzy controller requires assigning membership functions for both inputs and outputs, thus the membership values are actually measures of degree of causality in an input-output mapping. <p> For a more detailed introduction to fuzzy control, fuzzy set operations, and the concepts of fuzzification, inference, aggregation, and defuzzification see one of <ref> [1, 8] </ref>. 3 Motivation The establishment of a systematic approach to the design of fuzzy controllers in the absence of an expert, or sufficient knowledge of the problem domain, is currently an open problem. The approach often taken is an iterative one of trial-and-error. <p> For example, in the proposition, error is LARGE, error is a linguisitic variable and LARGE designates a membership function expressing the "meaning" of the current value of error. ANT returns a numerical value in the closed interval <ref> [0, 1] </ref> representing the membership value, or degree of truth, of the proposition. Note that if a rule contains only one proposition in its antecedent the membership value represents the rule strength. <p> It performs the conjunction of two or more fuzzy propositions yielding a numerical value for the rule strength. The f AND function can be defined using any t-norm; min and product are most commonly used in fuzzy control <ref> [1] </ref>. Here we limit it to the conjunction of two propositions with the idea that conjunctive forms of higher order can be constructed by recursive calls to the function (the level of recursion is bound by a specified maximum depth of the rule tree).
Reference: [2] <author> Koza, J.R. </author> <title> Genetic Programming: On the programming of computers by means of natural selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Recent research and applications employing non-analytical methods of soft computing such as fuzzy logic and evolutionary computation has demonstrated the utility and potential of these paradigms for developing intelligent control systems <ref> [1, 2] </ref>. Fuzzy logic control and evolutionary computation have proven to be convenient tools for handling real-world uncertainty and knowledge representation, and the design of intelligent control systems, respectively [3, 4]. <p> Here, we present an approach that exploits the combined attributes of these paradigms for the purpose of developing intelligent algorithms for controlling autonomous dynamic systems that interact with the real world. In particular, we apply the genetic programming paradigm (GP) <ref> [2] </ref> to the problem of learning rules for use in a fuzzy rule-based control system. In genetic programming, a population is comprised of computer programs (individuals) that are candidate solutions to a particular problem. <p> The main difference between the GP paradigm and that of the simple GA is the increase in complexity of the structures undergoing adaptation, i.e. parse trees of hierarchical computer programs rather than numeric strings <ref> [2] </ref>. In our application of GP to evolution of fuzzy rule-based systems, the same fuzzy linguistic terms and operators that comprise the genes and chromosome persist in the phenotype. Thus, the use of GP eliminates the need for encoding/decoding of the fuzzy linguistic rule set. <p> As a departure from the Darwinian approach Grefenstette [20] added Lamarckian mechanisms to the SAMUEL system that improve the quality and computational cost of rule learning for control. Koza <ref> [2] </ref> has applied genetic programming to a number of control problems related to our interests, namely, the truck backer-upper problem and the evolution of robot subsumption behaviors for wall-following and box-pushing. <p> no need to convert between numeric and symbolic representations when using genetic programming to evolve a fuzzy rule-base. 5.3 Syntactic Constraints and Structure-preserving Operators In many genetic programming applications, unrestricted S-expressions are sufficient to solve a problem given a function set and a terminal set that satisfies the closure property <ref> [2] </ref>. That is, each function in F should be well defined and closed for any combination of arguments that it may encounter. <p> One exception is that ANT and f AND make a valid pair of crossover points provided that one of the resulting offsprings do not violate the preset maximum depth for rule-base trees. The crossover is completed in the usual way <ref> [2] </ref> by swapping the subtrees at (and including) the crossover points of the two parents. This crossover operator not only preserves the syntactic structure of the rule-base but it also preserves the context of subtrees, particularly when function nodes are selected as crossover points. <p> In GP, genetic diversity remains high even for very small populations due to the tree structure of individuals <ref> [2] </ref>. Twelve GP runs were executed for the steering control problem described above. In this Section, results from several representative runs in which the best-of-run rule-base performed well with respect to the hand-derived rule-base are presented. <p> The raw fitness of a rule-base is defined as the sum, over the fitness cases, of the Euclidian norms of the error state vector at the end of each fitness case, i.e. Rawf itness = 8 X q d + " 2 Among the measures of fitness used in <ref> [2] </ref>, standardized fitness (i.e. lowest numerical values imply best fit) is predominant particularly in problems for which the objective is to minimize costs such as error. In this problem standardized fitness is equivalent to raw fitness.
Reference: [3] <author> Mamdani, E.H. and S. </author> <title> Assilian "An experiment in linguistic synthesis with a fuzzy logic controller", </title> <journal> International Journal of Man-Machine Studies Vol. </journal> <volume> 7, </volume> <pages> pp. 1-13, </pages> <year> 1975. </year>
Reference-contexts: Fuzzy logic control and evolutionary computation have proven to be convenient tools for handling real-world uncertainty and knowledge representation, and the design of intelligent control systems, respectively <ref> [3, 4] </ref>. Here, we present an approach that exploits the combined attributes of these paradigms for the purpose of developing intelligent algorithms for controlling autonomous dynamic systems that interact with the real world.
Reference: [4] <author> Karr, C.L. </author> <title> "Design of an adaptive fuzzy logic controller using a genetic algorithm", </title> <booktitle> 4th International Conference on Genetic Algorithms, </booktitle> <pages> pp. 450-457, </pages> <year> 1991. </year>
Reference-contexts: Fuzzy logic control and evolutionary computation have proven to be convenient tools for handling real-world uncertainty and knowledge representation, and the design of intelligent control systems, respectively <ref> [3, 4] </ref>. Here, we present an approach that exploits the combined attributes of these paradigms for the purpose of developing intelligent algorithms for controlling autonomous dynamic systems that interact with the real world. <p> Various attempts have been made to address this design issue. These include the determination of fuzzy membership functions and rules by optimization or search using genetic algorithms (GAs), and by learning using neural networks <ref> [4] </ref> [9]-[11]. When using these techniques to determine rule sets for fuzzy systems, it is often necessary to encode the rules in a numerical form suitable for processing by the GA or the NN, and subsequently decode them into the appropriate linguistic terminology.
Reference: [5] <author> Singleton, A. </author> <title> "Genetic programming with C++", </title> <journal> BYTE Magazine, </journal> <pages> pp. 171-176, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: In this work, each individual is coded as a LISP symbolic expression (S-expression) that implements condition-action statements which collectively serve as a rule-base to be embedded in a fuzzy-logic controller. The GP concept can be implemented in other programming languages as well, at both high and low levels <ref> [5, 6] </ref>. fl On leave from NASA/Jet Propulsion Laboratory, Pasadena, CA. 1 Our approach to this problem calls for the use of a constrained syntactic structure to construct each individual S-expression in the population.
Reference: [6] <author> Nordin, P. </author> <title> "A compiling genetic programming system that directly manipulates the machine code", </title> <editor> In Kinnear, K.E. Jr. (Ed.). </editor> <booktitle> Advances in Genetic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA., </address> <pages> pp. 311-331, </pages> <year> 1994. </year>
Reference-contexts: In this work, each individual is coded as a LISP symbolic expression (S-expression) that implements condition-action statements which collectively serve as a rule-base to be embedded in a fuzzy-logic controller. The GP concept can be implemented in other programming languages as well, at both high and low levels <ref> [5, 6] </ref>. fl On leave from NASA/Jet Propulsion Laboratory, Pasadena, CA. 1 Our approach to this problem calls for the use of a constrained syntactic structure to construct each individual S-expression in the population.
Reference: [7] <author> Koza, J.R. </author> <title> "Hierarchical automatic function definition in genetic programming", </title> <editor> In Whitley, L.D. (Ed.). </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <pages> pp. 297-318, </pages> <year> 1993. </year>
Reference-contexts: It has been observed that the artificial evolution of computer programs may produce deterministic control strategies that have slightly different features than those produced by humans. The existence of similar building blocks in the strategies of artificial evolution and those of humans has also been observed <ref> [7] </ref>. These things considered, the following questions come to mind.
Reference: [8] <author> Zadeh, L.A. </author> <title> "Fuzzy sets", </title> <journal> Information and Control Vol. </journal> <volume> 12, </volume> <pages> pp. 338-353, </pages> <year> 1965. </year>
Reference-contexts: of the article covers details of our GP implementation, results of the steering control application, conclusions, and improvements to the approach. 2 Overview of Fuzzy Logic Control Fuzzy control is one of the more active areas of application of fuzzy logic and the underlying fuzzy set theory introduced by Zadeh <ref> [8] </ref>. Fuzzy logic controllers are intelligent control systems that smoothly interpolate between rules, i.e. rules fire to continuous degrees and the multiple resultant actions are combined into an interpolated result. <p> For a more detailed introduction to fuzzy control, fuzzy set operations, and the concepts of fuzzification, inference, aggregation, and defuzzification see one of <ref> [1, 8] </ref>. 3 Motivation The establishment of a systematic approach to the design of fuzzy controllers in the absence of an expert, or sufficient knowledge of the problem domain, is currently an open problem. The approach often taken is an iterative one of trial-and-error.
Reference: [9] <author> Homaifar, A. and E. </author> <title> McCormick "Simultaneous design of membership functions and rule sets for fuzzy controllers using genetic algorithms", </title> <journal> IEEE Transactions on Fuzzy Systems, </journal> <volume> Vol. 3, No. 2, </volume> <pages> pp. 129-139, </pages> <month> May </month> <year> 1995. </year>
Reference: [10] <author> Huang, S. and R.M. </author> <title> Nelson "Artificial neural networks used as a rule selector for fuzzy logic controllers", </title> <booktitle> ASME Conference on Computers in Engineering, </booktitle> <pages> pp. 445-454, </pages> <year> 1993. </year>
Reference-contexts: The upper bound can be chosen such that R max R c , the number of rules required for a complete rule-base. In this study we use <ref> [10, 30] </ref>. This feature of the implementation is important for ensuring diversity in the population as it allows for rule-bases of different sizes. It also increases the potential for finding a rule-base of smaller size than necessary for completeness.
Reference: [11] <author> Feldman, </author> <title> D.S. "Fuzzy network synthesis with genetic algorithms", </title> <booktitle> 5th International Conference on Genetic Algorithms, </booktitle> <pages> pp. 312-317, </pages> <year> 1993. </year>
Reference-contexts: Harvey et al [21] have concentrated on evolving robot behavior using GAs in conjunction with neural networks. They suggest that building controllers by hand becomes prohibitively difficult for increasingly complex behavior. This view is shared by Feldman <ref> [11] </ref> who has developed a technique that encodes fuzzy control rules as a fuzzy network, a connectionist extension to fuzzy linguistic systems. The GA is used to synthesize or modify the rules of the fuzzy network controller.
Reference: [12] <author> Kinzel, J., F. Klawonn and R. </author> <title> Kruse "Modifications of genetic algorithms for designing and optimizing fuzzy controllers", </title> <booktitle> 1st IEEE Conference on Evolutionary Computation, </booktitle> <address> Orlando, FL, </address> <pages> pp. 28-33, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: An exception is the representation proposed in <ref> [12] </ref> where a chromosome is encoded as a matrix whose elements (alleles) are fuzzy sets. Furthermore, for approaches that use the simple GA [13], the fixed-length chromosome restricts each individual to have the same pre-specified number of rules. <p> This view is shared by Feldman [11] who has developed a technique that encodes fuzzy control rules as a fuzzy network, a connectionist extension to fuzzy linguistic systems. The GA is used to synthesize or modify the rules of the fuzzy network controller. Finally, Kinzel et al <ref> [12] </ref> deemed it necessary to modify the GA (using the matrix rule-base representation mentioned earlier) by taking the properties of fuzzy controllers into account to facilitate fast convergence.
Reference: [13] <author> Goldberg, D.E. </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: An exception is the representation proposed in [12] where a chromosome is encoded as a matrix whose elements (alleles) are fuzzy sets. Furthermore, for approaches that use the simple GA <ref> [13] </ref>, the fixed-length chromosome restricts each individual to have the same pre-specified number of rules. The contention here is that the genetic programming paradigm may offer a more direct approach to fuzzy controller design.
Reference: [14] <author> O`Reilly, U.-M. </author> <title> An Analysis of Genetic Programming, </title> <type> Ph.D. Thesis, </type> <institution> School of Computer Science, Carleton University, </institution> <address> Ottawa, Ontario, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: In this article, no claims are made about the relative performance of GAs versus GP as tools for search, optimization, or learning. After all, "GP is a GA where critical choices have been made to suit its goal of program discovery" <ref> [14] </ref>. The advocacy of GP for evolving fuzzy rule-bases is rooted in its convenience of representation as it pertains to fuzzy system design. <p> In many cases suboptimal solutions with respect to the objective fitness function were found, suggesting that GP performs well as a global adaptive search method. Possible improvements toward optimal solutions can be made by synthesizing a hybrid between GP and a localized search method such as hill-climbing <ref> [14] </ref>. From the vantage point of fuzzy rule-based systems design, initial results suggest that seeding initial rule-bases with prior knowledge (e.g. rules ensuring stability), and perhaps, additional tuning of fuzzy membership functions may be necessary to improve the robustness of the GP solutions.
Reference: [15] <author> Cordon, O., F. Herrera, and M. </author> <title> Lozano "A classified review on the combination fuzzy logic-genetic algorithms bibliography", </title> <type> Technical Report DECSAI 95129, </type> <institution> Dept. of Computer Science and AI, University of Granada, Spain, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: It is not the intention in this article to provide an inclusive overview, but rather to acknowledge prior and ongoing research that most closely relates to the approach described herein. Interested readers may consult a recently compiled bibliography <ref> [15] </ref> for a broader overview. In [16], Goldberg demonstrated the effectiveness of learning classifier systems at learning rules to control position of a simple inertial object and to control a simulated natural gas pipeline. Grefenstette and Schultz have developed the SAMUEL system for learning control rules [17]-[19].
Reference: [16] <author> Goldberg, D.E. </author> <title> "Dynamic system control using rule learning and genetic algorithms", </title> <booktitle> 9th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 588-592, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: It is not the intention in this article to provide an inclusive overview, but rather to acknowledge prior and ongoing research that most closely relates to the approach described herein. Interested readers may consult a recently compiled bibliography [15] for a broader overview. In <ref> [16] </ref>, Goldberg demonstrated the effectiveness of learning classifier systems at learning rules to control position of a simple inertial object and to control a simulated natural gas pipeline. Grefenstette and Schultz have developed the SAMUEL system for learning control rules [17]-[19].
Reference: [17] <author> Grefenstette, J.J. </author> <title> "A system for learning control strategy with genetic algorithms", </title> <booktitle> 3rd International Conference on Genetic Algorithms, </booktitle> <pages> pp. 183-190, </pages> <year> 1989. </year>
Reference: [18] <author> Schultz, A.C. and J.J. </author> <title> Grefenstette "Improving tactical plans with genetic algorithms", </title> <booktitle> 2nd International Conference on Tools for AI, </booktitle> <pages> pp. 328-334, </pages> <year> 1990. </year>
Reference: [19] <author> Schultz, </author> <title> A.C. "Learning robot behaviors using genetic algorithms", </title> <booktitle> 1st World Automation Congress, </booktitle> <volume> Vol. 1., </volume> <pages> pp. 607-612, </pages> <month> August </month> <year> 1994. </year>
Reference: [20] <editor> Grefenstette, J.J. </editor> <booktitle> "Lamarckian learning in multi-agent environments", 4th International Conference on Genetic Algorithms, </booktitle> <pages> pp. 303-310, </pages> <year> 1991. </year>
Reference-contexts: Finally, Kinzel et al [12] deemed it necessary to modify the GA (using the matrix rule-base representation mentioned earlier) by taking the properties of fuzzy controllers into account to facilitate fast convergence. As a departure from the Darwinian approach Grefenstette <ref> [20] </ref> added Lamarckian mechanisms to the SAMUEL system that improve the quality and computational cost of rule learning for control.
Reference: [21] <author> Harvey, I., P. Husbands and D. </author> <title> Cliff "Issues in evolutionary robotics", </title> <type> Technical Report CSRP 219, </type> <institution> University of Sussex, </institution> <address> England, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: The resulting approach has strong similarities to the work described here. The fundamental differences lie in our use of GP instead of GA, fuzzy sets instead of crisp sets, and linguistic variables rather than numeric variables. Harvey et al <ref> [21] </ref> have concentrated on evolving robot behavior using GAs in conjunction with neural networks. They suggest that building controllers by hand becomes prohibitively difficult for increasingly complex behavior.
Reference: [22] <author> Reynolds, C.W. </author> <title> "Evolution of corridor following behavior in a noisy world", </title> <booktitle> From Animals to Animats 3: Third International Conference on Simulation of Adaptive Behavior, </booktitle> <publisher> MIT Press, </publisher> <pages> pp. 402-410, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Shortly after the publication of Koza's text, applications of genetic programming to control problems of the type we focus on here have appeared in the literature. The most notable relation to this work is that of Reynolds <ref> [22] </ref>. He has used GP to evolve corridor following behaviors for a simulated robot in the presence of noise. Similar work has been done by Fraser [23] in evolving multi-agent emergent behaviors, and Handley [24] in mobile robot path planning.
Reference: [23] <author> Fraser, </author> <title> A.P. et al "Evolving multiple agent behaviors for biologically inspired robots", </title> <editor> In Brooks, R.A. and Maes, P. (Eds.). </editor> <booktitle> Artificial Life IV, </booktitle> <publisher> MIT Press, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: The most notable relation to this work is that of Reynolds [22]. He has used GP to evolve corridor following behaviors for a simulated robot in the presence of noise. Similar work has been done by Fraser <ref> [23] </ref> in evolving multi-agent emergent behaviors, and Handley [24] in mobile robot path planning. We have already mentioned the difference between our approach and that of SAMUEL.
Reference: [24] <author> Handley, S. </author> <title> "The Genetic Planner: the automatic generation of plans for a mobile robot via genetic programming", </title> <booktitle> International Symposium on Intelligent Control, </booktitle> <pages> pp. 190-195, </pages> <year> 1993. </year>
Reference-contexts: The most notable relation to this work is that of Reynolds [22]. He has used GP to evolve corridor following behaviors for a simulated robot in the presence of noise. Similar work has been done by Fraser [23] in evolving multi-agent emergent behaviors, and Handley <ref> [24] </ref> in mobile robot path planning. We have already mentioned the difference between our approach and that of SAMUEL.
Reference: [25] <author> Hemami, A. </author> <title> "Steering control problem formulation of low speed tricycle-model vehicles", </title> <journal> International Journal of Control, </journal> <volume> Vol. 61, No. 4, </volume> <pages> pp. 783-790, </pages> <year> 1995. </year>
Reference-contexts: This will allow us to discuss the implementation issues within the context of the problem. 5.1 Mobile robot steering control problem The problem is to find a fuzzy rule-base to properly steer a mobile robot for path following in the plane. The problem is taken from Hemami <ref> [25] </ref> where it is formulated for a class of low-speed (less than 2 m/s) tricycle-model vehicles. Hemami derived a state-space model, based on the robot kinematics, where the state vector consisted of measurable position (" d ) and orientation (" ) errors associated with path following (see Figure 1). <p> This is a fundamental motion capability that is often an integral part of more complex behavioral repertoires for autonomous mobile robots [26]. Based on the geometry of the problem as formulated in <ref> [25] </ref> the errors fall into eight different categories that are pair-wise symmetric. <p> All results shown are for error category (d) of (2) with " d = 0.8 m and " = -0.9 rad as initial conditions. Among the eight error categories, category (d) was shown <ref> [25] </ref> to be the most general for studying path tracking for tricycle-type vehicles.
Reference: [26] <author> Tunstel, E. </author> <title> "Coordination of distributed fuzzy behaviors in mobile robot control", </title> <booktitle> IEEE Inter--national Conference on Systems, Man and Cybernetics, Vancouver, BC, </booktitle> <pages> pp. 4009-4014, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: This is a fundamental motion capability that is often an integral part of more complex behavioral repertoires for autonomous mobile robots <ref> [26] </ref>. Based on the geometry of the problem as formulated in [25] the errors fall into eight different categories that are pair-wise symmetric.
Reference: [27] <author> D'haeseleer, P. </author> <title> "Context preserving crossover in genetic programming", </title> <booktitle> 1st IEEE Conference on Evolutionary Computation, </booktitle> <address> Orlando, FL, </address> <pages> pp. 256-261, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This crossover operator not only preserves the syntactic structure of the rule-base but it also preserves the context of subtrees, particularly when function nodes are selected as crossover points. This issue of context preservation in GP has been recently addressed by D'haeseleer <ref> [27] </ref>, where he introduces two new crossover operators that provide a more flexible mechanism to decouple the evolution of different branches of an individual tree. In our implementation, context preservation is a necessary by-product of the syntactic constraints imposed by the rule-base structure.
References-found: 27

