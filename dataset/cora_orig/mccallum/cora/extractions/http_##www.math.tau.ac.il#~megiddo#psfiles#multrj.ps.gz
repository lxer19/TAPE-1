URL: http://www.math.tau.ac.il/~megiddo/psfiles/multrj.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Minimum Reservation Rate Problem in Digital Audio/Video Systems (Extended Abstract)  
Author: Nimrod Megiddo Moni Naor David P. Anderson 
Date: April 1993  
Abstract: The "Minimum Reservation Rate Problem" arises in distributed systems for handling digital audio and video data. The problem is to find the minimum rate at which data must be reserved on a shared storage system in order to provide continuous buffered playback of a variable-rate output schedule. The problem is equivalent to the minimum output rate: given input rates during various time periods, find the minimum output rate under which the buffer never overflows. We present for these problems an O(n log n) randomized algorithm and an O(n log n log log n) deterministic one. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. P. Anderson, </author> <title> "Meta-scheduling for continuous media," </title> <journal> ACM Transactions on Computing Systems, </journal> <note> to appear. </note>
Reference: [2] <author> M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan, </author> <title> "Time bounds for selection," </title> <journal> J. </journal> <note> Computer and System Sciences 7 (1972) 451-455. </note>
Reference-contexts: This task can be accomplished in O (n log n) time as follows. We first find the median 0 of the set of these breakpoints using the linear-time median-finding algorithm <ref> [ 2 ] </ref> . Next, we check (using the algorithm of Proposition 3.2) whether 0 &lt; fl (i.e., whether F ( 0 ) &gt; B). Now we know for half the breakpoints their positions relative to fl .
Reference: [3] <author> R. L. Cruz, </author> <title> "A calculus for network delay," </title> <journal> IEEE Transactions on Information Theory 37 (1991). </journal>
Reference: [4] <author> N. Megiddo, </author> <title> "Combinatorial optimization with rational objective functions," </title> <note> Mathematics of Operations Research 4 (1979) 414-424. </note>
Reference-contexts: Thus, there exists a unique fl such that F ( fl ) = B. It is easy to see that fl = R fl (see Megiddo <ref> [ 4 ] </ref> ). In order to compute fl , we will follow the parametric search method with the use of parallel algorithms as proposed in Megiddo [ 6 ] .
Reference: [5] <author> N. Megiddo, </author> <title> "Parallel algorithms for finding the maximum and the median almost surely in constant-time," </title> <type> Technical Report, </type> <institution> Graduate School of Industrial Administration, Carnegie-Mellon University, </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: For every k and ` as above, we allocate 2 k processors to the problem of computing M k` and m k` using the constant time maximum finding algorithm <ref> [ 8; 5 ] </ref> . <p> With high probability the number of elements larger than the sample's maximum is not much greater than p m. Repeat this procedure until you have a set of p m candidates, from which a maximum can be found exhaustively. See Reischuck [ 8 ] and Megiddo <ref> [ 5 ] </ref> for more details. 5 Note that in both the randomized and the deterministic algorithms deciding which comparison to make is straightforward and can be done in linear (in the number of comparisons) time.
Reference: [6] <author> N. Megiddo, </author> <title> "Applying parallel computation algorithms in the design of serial algorithms," </title> <journal> J. </journal> <note> ACM 30 (1983) 852-865. </note>
Reference-contexts: In Sections 3 and 4 we develop an O (n log n) randomized algorithm and an O (n log n log log n) deterministic one. These algorithms are based on the parametric search method of Megiddo <ref> [ 6 ] </ref> . Using this method, we apply a parallel algorithm for one problem (in this case, the "evaluation" problem) to obtain a fast sequential algorithm for another "parametric" problem. In Section 3 we describe an expected constant-time randomized parallel algorithm for the feasibility problem. <p> It is easy to see that fl = R fl (see Megiddo [ 4 ] ). In order to compute fl , we will follow the parametric search method with the use of parallel algorithms as proposed in Megiddo <ref> [ 6 ] </ref> . <p> Finding the minimum rate The algorithm for finding fl proceeds by simulating the parallel algorithm for evaluating F () at = fl (without knowing fl in advance). For more detail about the method see <ref> [ 6 ] </ref> . Proposition 4.1. The minimum rate problem can be solved by a randomized algorithm in expected O (n log n) time and by a deterministic algorithm in O (n log n log log n) time.
Reference: [7] <author> J. A. Moorer, </author> <title> "Hard-disk recording and editing of digital audio," </title> <booktitle> in: Proceedings of the 89th Convention of the Audio Engineering Society, </booktitle> <address> Los Angeles, </address> <year> 1990. </year>
Reference-contexts: T n , and input rates I 1 ; . . . I n ; I 1 ; . . . I n . 6. Background A "digital audio editing system" allows users to record sound (music, dialog, special effects, etc.) on magnetic disks (see <ref> [ 7 ] </ref> ). The audio encoding has a constant data rate, typically 88,200 bytes per second for each audio channel. Users can then assemble segments of these sound files into an "Edit Decision List" (EDL).
Reference: [8] <author> R. Reischuk, </author> <title> "A fast probabilistic parallel sorting algorithm," </title> <booktitle> in: Proceedings of the 22nd Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Los Angeles, </address> <year> 1981, </year> <pages> pp. 212-219. </pages>
Reference-contexts: For every k and ` as above, we allocate 2 k processors to the problem of computing M k` and m k` using the constant time maximum finding algorithm <ref> [ 8; 5 ] </ref> . <p> With high probability the number of elements larger than the sample's maximum is not much greater than p m. Repeat this procedure until you have a set of p m candidates, from which a maximum can be found exhaustively. See Reischuck <ref> [ 8 ] </ref> and Megiddo [ 5 ] for more details. 5 Note that in both the randomized and the deterministic algorithms deciding which comparison to make is straightforward and can be done in linear (in the number of comparisons) time.
Reference: [9] <author> L. G. Valiant, </author> <title> "Parallelism in comparison problems," </title> <journal> SIAM J. Comput. </journal> <month> 4 </month> <year> (1975) </year> <month> 348-355. </month>
Reference-contexts: To that end, we will develop two algorithms for computing the value of F () at any given : (i) A sequential linear-time algorithm. (ii) A parallel constant-time randomized algorithm employing n log n processors under the comparisons model of Valiant <ref> [ 9 ] </ref> . 3 The algorithm in (ii) should be such that at each round, the decision of which compar-ison should be performed can be made in O (n log n) (sequential) time. A deterministic O (log log n) algorithm employing n log n processors will also be suggested. <p> This implies our claim. Finally, we compute the maximum of the differences M k` m k` in expected constant time. The deterministic algorithm is similar, except that the for computing M k` and m k` we use Valiant's <ref> [ 9 ] </ref> m processor log log m time algorithm for maximum finding in the comparison model. 1 The algorithm proceeds roughly as follows: a random samples of p m elements is chosen; the maximum of the sample is found exhaustively; this maximum is compared to the remaining elements and only <p> It follows that fl = k=i+1 a k B k=i+1 T k 6 In the deterministic case we need to simulate O (log log n) steps (corresponding to the steps in the deterministic maximum finding algorithm of Valiant <ref> [ 9 ] </ref> ), and the rest is essentially the same. This gives an O (n log n log log n) algorithm. 5. Extensions We now describe two extensions of the problem discussed above.
References-found: 9

