URL: http://www.cs.berkeley.edu/~jmh/miscpapers/magic96.ps
Refering-URL: http://www.cs.berkeley.edu/~jmh/papers.html
Root-URL: 
Email: praveen@cs.wisc.edu  jmh@cs.berkeley.edu  pirahesh@almaden.ibm.com  cleung@almaden.ibm.com  raghu@cs.wisc.edu  divesh@research.att.com  pjs@cs.mu.oz.au  sudarsha@cse.iitb.ernet.in  
Title: Cost-Based Optimization for Magic: Algebra and Implementation  
Author: Praveen Seshadri Joseph M. Hellerstein Hamid Pirahesh T. Y. Cliff Leung Raghu Ramakrishnan Divesh Srivastava Peter J. Stuckey S. Sudarshan 
Address: Wisconsin, Madison  Berkeley  Ctr.  Wisconsin, Madison  Melbourne  Bombay  
Affiliation: Univ. of  Univ. of California,  IBM Almaden Research  IBM Santa Teresa Lab.  Univ. of  AT&T Research  Univ. of  IIT,  
Abstract: Magic sets rewriting is a well-known optimization heuristic for complex decision-support queries. There can be many variants of this rewriting even for a single query, which differ greatly in execution performance. We propose cost-based techniques for selecting an efficient variant from the many choices. Our first contribution is a practical scheme that models magic sets rewriting as a special join method that can be added to any cost-based query optimizer. We derive cost formulas that allow an optimizer to choose the best variant of the rewriting and to decide whether it is beneficial. The order of complexity of the optimization process is preserved by limiting the search space in a reasonable manner. We have implemented this technique in IBM's DB2 C/S V2 database system. Our performance measurements demonstrate that the cost-based magic optimization technique performs well, and that without it, several poor decisions could be made. Our second contribution is a formal algebraic model of magic sets rewriting, based on an extension of the multiset relational algebra, which cleanly defines the search space and can be used in a rule-based optimizer. We introduce the multiset -semijoin operator, and derive equivalence rules involving this operator. We demonstrate that magic sets rewriting for non-recursive SQL queries can be modeled as a sequential composition of these equivalence rules. 
Abstract-found: 1
Intro-found: 1
Reference: [BGW+81] <author> P. A. Bernstein, N. Goodman, E. Wong, C. L. Reeve and J. B. Rothnie. </author> <title> Query processing in a system for distributed databases (SDD-1) ACM Transactions on Database Systems, </title> <booktitle> 6(4) </booktitle> <pages> 602-625, </pages> <year> 1981. </year>
Reference-contexts: Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation [SPL96]), and expensive functions [Hel95]. The research on semijoins in distributed databases (e.g., <ref> [BGW+81, LMH+85] </ref>) assumed that relations were simple stored relations, and therefore the costs of performing the semijoins could be easily computed. <p> Further, issues like the choice of SIPS were not considered, usually because communication costs were assumed to outweigh local processing costs (consequently, the chosen semijoin was always as restrictive as possible). Instead, optimization focused on the correct order in which to execute the semijoins <ref> [BGW+81] </ref>. System R* [LMH+85], on the other hand, assumed that local processing costs outweigh communication costs; consequently, semijoins were not considered during optimization. The literature on heterogeneous databases has not yet dealt with issues like remote views in a complex query.
Reference: [BMSU86] <author> F. Bancilhon, D. Maier, Y. Sagiv and J. D. Ullman. </author> <title> Magic sets and other strange ways to execute logic programs. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <pages> 1-15, </pages> <year> 1986. </year>
Reference-contexts: Our approach also avoids the costs of explicit duplicate elimination and of maintaining and dealing with unique tuple-ids. 8 Related Work Magic sets rewriting was originally used in the area of recursive query processing in deductive databases <ref> [BMSU86, RLK86] </ref>. The impact of different choices of SIPS has been discussed in [BR91], and the idea of using approximations of the magic set has been explored in [Sag90, SS88]. We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems.
Reference: [BR91] <author> C. Beeri and R. Ramakrishnan. </author> <title> On the power of Magic. </title> <journal> Journal of Logic Programming, </journal> 10(3&4):255-300, 1991. 
Reference-contexts: An equivalence rule for aggregation was presented earlier, while others are described in [SSS95]. 7.5 -Semijoin and Constraint Magic Rewriting Magic rewritings <ref> [BR91, MP94, SS94] </ref> optimize database queries by defining a set of auxiliary magic (or filter) relations, that are used as filters to restrict computation of the query. <p> The impact of different choices of SIPS has been discussed in <ref> [BR91] </ref>, and the idea of using approximations of the magic set has been explored in [Sag90, SS88]. We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems.
Reference: [Blo70] <author> B. H. Bloom. </author> <title> Space/time trade-offs in hash coding with allowable errors. </title> <journal> Communications of the ACM, </journal> <volume> 13(7) </volume> <pages> 422-426, </pages> <year> 1970. </year>
Reference: [CG85] <author> S. Ceri and G. Gottlob. </author> <title> Translating SQL into relational algebra: Optimization, semantics, and equivalence of SQL queries. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(4) </volume> <pages> 324-345, </pages> <year> 1985. </year>
Reference-contexts: This equivalence does not hold in the multiset version of relational algebra. 5 The translation from SQL to relational algebra presented in <ref> [CG85] </ref> uses -semijoins only to handle HAVING clauses. 442 of the tuples of E 2 that join with E 1 on , using the - semijoin operator, prior to performing the join with E 1 , would preserve equivalence.
Reference: [DGK82] <author> U. Dayal, N. Goodman, and R. H. Katz. </author> <title> An extended relational algebra with control over duplicate elimination. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1982. </year>
Reference: [EN94] <author> R. Elmasri and S. B. Navathe. </author> <title> Fundamentals of database systems. </title> <publisher> Benjamin/Cummings Publishers, </publisher> <address> 2nd edition, </address> <year> 1994. </year>
Reference: [GHK92] <author> S. Ganguly, W. Hasan and R. Krishnamurthy. </author> <title> Query optimization for parallel execution. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1992. </year>
Reference: [GM93] <author> G. Graefe and W. J. McKenna. </author> <title> The Volcano optimizer generator: Extensibility and efficient search. </title> <booktitle> In Proceedings of the IEEE International Conference on Data Engineering, </booktitle> <year> 1993. </year>
Reference: [HCL+90] <author> L. Haas, W. Chang, G. M. Lohman, J. McPherson, P. F. Wilms, G. Lapis, B. Lindsay, H. Pirahesh, M. Carey, and E. Shekita. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference: [Hel95] <author> J. M. Hellerstein. </author> <title> Optimization and execution techniques for queries with expensive methods Ph.D. </title> <type> Thesis, </type> <institution> University of Wisconsin, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation [SPL96]), and expensive functions <ref> [Hel95] </ref>. The research on semijoins in distributed databases (e.g., [BGW+81, LMH+85]) assumed that relations were simple stored relations, and therefore the costs of performing the semijoins could be easily computed.
Reference: [IK84] <author> T. Ibaraki and T. Kameda. </author> <title> Optimal nesting for computing N-relational joins. </title> <journal> In ACM Transactions on Database Systems, </journal> <volume> 9(3) </volume> <pages> 482-502, </pages> <year> 1984. </year>
Reference: [INSS92] <author> Y. Ioannidis, R. Ng, K. Shim and T. K. Sellis. </author> <title> Parametric query optimization. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases (VLDB), </booktitle> <pages> 103-114, </pages> <year> 1992. </year>
Reference: [KBZ86] <author> R. Krishnamurthy, H. Boral, and C. Zaniolo. </author> <title> Optimization of nonrecursive queries. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases (VLDB), </booktitle> <pages> 128-137, </pages> <year> 1986. </year>
Reference: [Klu82] <author> A. Klug. </author> <title> Equivalence of relational algebra and relational calculus query languages having aggregate functions. </title> <journal> Journal of the ACM, </journal> <volume> 29(3) </volume> <pages> 699-717, </pages> <year> 1982. </year>
Reference: [LMH+85] <author> G. M. Lohman, C. Mohan, L. M. Haas, D. Daniels, B. G. Lindsay, P. G. Selinger and P. F. Wilms. </author> <title> Query processing in R*. In Query Processing in Database Systems, </title> <editor> (W. Kim, D. S. Reiner, and D. S. Batory, eds.), </editor> <publisher> Springer-Verlag, </publisher> <pages> 30-47, </pages> <year> 1985. </year>
Reference-contexts: Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation [SPL96]), and expensive functions [Hel95]. The research on semijoins in distributed databases (e.g., <ref> [BGW+81, LMH+85] </ref>) assumed that relations were simple stored relations, and therefore the costs of performing the semijoins could be easily computed. <p> Further, issues like the choice of SIPS were not considered, usually because communication costs were assumed to outweigh local processing costs (consequently, the chosen semijoin was always as restrictive as possible). Instead, optimization focused on the correct order in which to execute the semijoins [BGW+81]. System R* <ref> [LMH+85] </ref>, on the other hand, assumed that local processing costs outweigh communication costs; consequently, semijoins were not considered during optimization. The literature on heterogeneous databases has not yet dealt with issues like remote views in a complex query.
Reference: [LNSS93] <author> R. J. Lipton, J. F. Naughton, D. A. Schneider and S. Seshadri. </author> <title> Efficient sampling strategies for relational database operations. </title> <journal> Theoretical Computer Science, </journal> <volume> 116 </volume> <pages> 195-226, </pages> <year> 1993. </year>
Reference: [MFPR90] <author> I. S. Mumick, S. Finkelstein, H. Pirahesh, and R. Ramakrishnan. </author> <title> Magic is relevant. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1990. </year>
Reference-contexts: We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems. Magic sets has been shown to be applicable to non-recursive SQL queries <ref> [MFPR90] </ref>, and has been implemented in the Starburst database system [MP94]. Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation [SPL96]), and expensive functions [Hel95].
Reference: [MP94] <author> I. S. Mumick and H. Pirahesh. </author> <title> Implementation of magic-sets in a relational database system. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: An equivalence rule for aggregation was presented earlier, while others are described in [SSS95]. 7.5 -Semijoin and Constraint Magic Rewriting Magic rewritings <ref> [BR91, MP94, SS94] </ref> optimize database queries by defining a set of auxiliary magic (or filter) relations, that are used as filters to restrict computation of the query. <p> We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems. Magic sets has been shown to be applicable to non-recursive SQL queries [MFPR90], and has been implemented in the Starburst database system <ref> [MP94] </ref>. Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation [SPL96]), and expensive functions [Hel95].
Reference: [RLK86] <author> J. Rohmer, R. Lescoeur, and J. M. Kerisit. </author> <title> The Alexander method: A technique for the processing of recursive axioms in deductive databases. </title> <journal> In New Generation Computing, </journal> <volume> 4(3) </volume> <pages> 273-285, </pages> <year> 1986. </year>
Reference-contexts: Our approach also avoids the costs of explicit duplicate elimination and of maintaining and dealing with unique tuple-ids. 8 Related Work Magic sets rewriting was originally used in the area of recursive query processing in deductive databases <ref> [BMSU86, RLK86] </ref>. The impact of different choices of SIPS has been discussed in [BR91], and the idea of using approximations of the magic set has been explored in [Sag90, SS88]. We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems.
Reference: [RSSS94] <author> R. Ramakrishnan, D. Srivastava, S. Sudarshan and P. Seshadri. </author> <title> The CORAL deductive system. </title> <journal> The VLDB Journal, Special Issue on Prototypes of Deductive Database Systems, </journal> <year> 1994. </year>
Reference: [SAC+79] <author> P. G. Selinger, M. Astrahan, D. Chamberlin, R. Lorie, and T. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> 23-34, </pages> <year> 1979. </year>
Reference: [Sag90] <author> Y. Sagiv. </author> <title> Is there anything better than magic? In Proceedings of the North American Conference on Logic Programming, </title> <type> 235-254, </type> <year> 1990. </year>
Reference-contexts: The impact of different choices of SIPS has been discussed in [BR91], and the idea of using approximations of the magic set has been explored in <ref> [Sag90, SS88] </ref>. We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems. Magic sets has been shown to be applicable to non-recursive SQL queries [MFPR90], and has been implemented in the Starburst database system [MP94].
Reference: [SPL96] <author> P. Seshadri, H. Pirahesh, and T. Y. C. Leung. </author> <title> Decorrelating complex queries. </title> <booktitle> In Proceedings of the Twelfth International Conference on Data Engineering, </booktitle> <year> 1996. </year>
Reference-contexts: Magic sets has been shown to be applicable to non-recursive SQL queries [MFPR90], and has been implemented in the Starburst database system [MP94]. Cost-based optimization techniques similar to those for magic sets may also be applied to complex SQL queries involving correlation (using the magic decorrelation transformation <ref> [SPL96] </ref>), and expensive functions [Hel95]. The research on semijoins in distributed databases (e.g., [BGW+81, LMH+85]) assumed that relations were simple stored relations, and therefore the costs of performing the semijoins could be easily computed.
Reference: [SS88] <author> S. Sippu and E. Soisalon-Soinen. </author> <title> An optimization strategy for recursive queries in logic databases. </title> <booktitle> In Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <year> 1988. </year>
Reference-contexts: The impact of different choices of SIPS has been discussed in [BR91], and the idea of using approximations of the magic set has been explored in <ref> [Sag90, SS88] </ref>. We should note that this paper deals with non-recursive SQL queries that are supported by all commercial relational database systems. Magic sets has been shown to be applicable to non-recursive SQL queries [MFPR90], and has been implemented in the Starburst database system [MP94].
Reference: [SS94] <author> P. J. Stuckey and S. Sudarshan. </author> <title> Compiling query constraints. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <year> 1994. </year>
Reference-contexts: An equivalence rule for aggregation was presented earlier, while others are described in [SSS95]. 7.5 -Semijoin and Constraint Magic Rewriting Magic rewritings <ref> [BR91, MP94, SS94] </ref> optimize database queries by defining a set of auxiliary magic (or filter) relations, that are used as filters to restrict computation of the query. <p> Constraint Magic rewriting <ref> [SS94] </ref> is the most general of these rewritings, and we present a derived transformation rule that captures the key intuition of Constraint Magic rewriting for a single join. <p> CM Transformation Step Using -Semijoin: The following transformation rule captures the basic step of Constraint Magic rewriting <ref> [SS94] </ref>: (E 1 1 1 E 2 ) &gt;&lt; 2 ^ 3 F (E 0 2 ) &gt;&lt; 2 ^ 3 F where 2 involves only the attributes in attrs (F ) [ attrs (E 1 ), 6 and E 0 1 and E 0 2 are defined below: E 0
Reference: [SSS95] <author> D. Srivastava, P. J. Stuckey and S. Sudarshan. </author> <title> The magic of theta-semijoins. </title> <institution> AT&T Bell Laboratories Technical Report, </institution> <year> 1995. </year>
Reference-contexts: When involves results of the aggregation, the -semijoin operator cannot be pushed through aggregation in general. In some cases involving min and max, it is possible to push the -semijoin operator through g F f ; see <ref> [SSS95] </ref>. Simplification: Some of the -semijoin transformations can generate expressions where some predicates are checked more than once; for example, in the right hand side of the transformation above that introduces the -semijoin, the predicate is checked twice. <p> We have presented a representative sample of the equivalence rules involving the -semijoin operator. A larger collection of equivalence rules is presented in <ref> [SSS95] </ref>. 7.3 Cost Model for -Semijoin The -semijoin operation R 1 &gt;&lt; R 2 can be efficiently implemented using minor changes to join techniques such as hash joins and index joins. One implementation treats the left operand R 1 of the -semijoin as the outer relation in the join technique. <p> Views used as arguments of outerjoins cannot be expanded out. Since outerjoins are not associative, they cannot be reordered. A distinct advantage of rule-based optimizers is that it is easy to specify the transformations for a variety of operations. In fact, the set of transformation rules we present in <ref> [SSS95] </ref> are able to push -semijoins into the views in all the above mentioned examples. If the entire set of -semijoin equivalence rules were added to an exhaustive optimizer, the search space could increase greatly. <p> An equivalence rule for aggregation was presented earlier, while others are described in <ref> [SSS95] </ref>. 7.5 -Semijoin and Constraint Magic Rewriting Magic rewritings [BR91, MP94, SS94] optimize database queries by defining a set of auxiliary magic (or filter) relations, that are used as filters to restrict computation of the query. <p> The CMT step can be derived from simpler equivalence rules; details are presented in <ref> [SSS95] </ref>. CMT Step and Constraint Magic Rewriting: The expressions defining E 0 1 and E 0 2 in the CMT step capture the essence of Constraint Magic rewriting. The intuition is as follows.
Reference: [TPCD94] <institution> TPC benchmark group. </institution> <type> TPC-D Draft, </type> <month> December </month> <year> 1994. </year> <title> Information Paradigm. </title> <address> Suite 7, 115 North Wahsatch Avenue, Colorado Springs, CO 80903. </address>
Reference: [Yao77] <author> S. B. Yao. </author> <title> Approximating the number of accesses in database organizations. </title> <journal> Communications of the ACM, </journal> <volume> 20(4) </volume> <pages> 260-261, </pages> <year> 1977. </year>
References-found: 29

