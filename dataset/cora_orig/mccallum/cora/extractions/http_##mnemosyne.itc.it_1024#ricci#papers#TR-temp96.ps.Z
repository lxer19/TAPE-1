URL: http://mnemosyne.itc.it:1024/ricci/papers/TR-temp96.ps.Z
Refering-URL: http://mnemosyne.itc.it:1024/ricci/tech-reports-list.html
Root-URL: 
Email: fperini,riccig@irst.itc.it gerevini@bsing.ing.unibs.it  
Phone: 2  
Title: Incremental Algorithms for Managing Temporal Constraints  
Author: Alfonso Gerevini Anna Perini Francesco Ricci 
Address: via Branze 38, 25123 Brescia, Italy  Tecnologica, 38050 Povo (TN), Italy  
Affiliation: 1 DEA University of Brescia,  IRST Istituto per la Ricerca Scientifica e  
Abstract: This paper addresses the problem of efficiently updating a network of temporal constraints when constraints are removed from an existing network, or when they are added to it. Such processing tasks are important in many AI-applications requiring a temporal reasoning module. First we analyze the relationship between shortest-paths algorithms for directed graphs and arc-consistency techniques. Then we focus on a subclass of STP called STP for which we propose new fast incremental algorithms for consistency checking and for maintaining the feasible times of the temporal variables. Our method is based on a metagraph data structure and on shortest-paths algorithms for directed acyclic graphs. An experimental comparison of the proposed algorithms with the (non-incremental) Bellman-Ford's algorithm shows that drastic CPU-time reductions can be obtained.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. F. Allen. </author> <title> Mantaining knowledge about temporal intervals. </title> <journal> Communication of ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: It has also been proven that checking the consistency 1 The continuous Point Algebra (PA) is formed by the set of relations f&lt;; ; =; ; &gt;; &lt;=&gt;g; the Convex Simple Interval Algebra is formed by the interval relations of Allen's Interval Algebra <ref> [1] </ref> that can be translated into collections of point-relations in the continuous PA. 2 Note that these assumptions are not an actual restriction.
Reference: [2] <author> C. E. Bell and A. Tate. </author> <title> Use and justification of algorithms for managing temporal knowledge in o-plan. Tec. </title> <type> Rep. </type> <institution> AIAI-TR-6, AIAI University of Edinburgh, Edinburgh, U.K., </institution> <year> 1985. </year>
Reference-contexts: In fact, Refine is usually implemented in such a way that if the domain of a variable becomes empty, then an error is returned. In this case the input network is surely inconsistent. 4 Tate and Bell further investigate this condition for improving efficiency if constraints are added <ref> [2] </ref>. 3 Constraint Networks and Metagraphs for STP We now introduce a subclass of the STNs called Simple Negative Temporal Networks (STN ) representing the constraints of STP , i.e., constraints either of the form x j x i a, where a 0, or x i x j a 0 , <p> The following classes of temporal constraints can be represented through a STN whose vertices represent X: 1. simple unary constraints of the form x i 2 <ref> [2; 9] </ref>; 4 In terms of shortest path distances this means that at some point during their computation of we have d T (x i ) &gt; d (x i ) for some x i 2 V . 4 2. constraints stating the minimal duration of an interval; 3. deadline constraints
Reference: [3] <author> R. Cervoni, A. Cesta, and A. Oddi. </author> <title> Managing dynamic temporal constraint networks. </title> <editor> In K. Hammond, editor, </editor> <booktitle> Proceedings of the second international conference on artificial intelligence planning systems, </booktitle> <pages> pages 196-201. </pages> <year> 1994. </year>
Reference-contexts: For instance, STP - constraints were chosen to model the temporal information managed by an interactive planning and scheduling system for supporting forest fire fighting [14]. Among the (few) related works, the study in <ref> [3] </ref> proposes an incremental method for maintaining STP-constraints which is based on an extension of arc-consistency techniques. Though our method can manage only STP -constraints, in general our algorithms are more efficient then those outlined in [3]. <p> Among the (few) related works, the study in <ref> [3] </ref> proposes an incremental method for maintaining STP-constraints which is based on an extension of arc-consistency techniques. Though our method can manage only STP -constraints, in general our algorithms are more efficient then those outlined in [3]. This is mainly because a set of STP -constraints can be managed through a special directed acyclic graph on which the search is controlled by using a dynamic topological order of the vertices.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: (x i ) + w (x i ; x j ) 3 (x j ) x i 4 return TRUE 5 else return FALSE of a simple temporal network network G and computing the feasible times of each temporal variable can be achieved by applying Floyd-Warshall's all-pairs shortest paths algorithm <ref> [6, 4] </ref> (or any other applicable all-pairs shortest paths algorithm). Actually, the tasks of consistency checking and of computing the feasible times can be achieved by using a more efficient single-source shortest paths algorithm such as Bellman-Ford's algorithm. <p> is the shortest path distance (s.p. distance) from the source s to x (i.e., the minimum weight among the weights of the paths from s to x in G), and (x) is the vertex preceding x in a shortest path from s to x (i.e., the predecessor vertex of x <ref> [4] </ref>). 3 It can be shown that the graph induced by is a tree rooted at s [4, page 523]. We shall also indicate with d T and T the shortest path distance of G T and the predecessor function respectively. <p> among the weights of the paths from s to x in G), and (x) is the vertex preceding x in a shortest path from s to x (i.e., the predecessor vertex of x [4]). 3 It can be shown that the graph induced by is a tree rooted at s <ref> [4, page 523] </ref>. We shall also indicate with d T and T the shortest path distance of G T and the predecessor function respectively. The proof of the following claim is based on well known properties of Bellman-Ford's algorithm [4, page 532]. <p> We shall also indicate with d T and T the shortest path distance of G T and the predecessor function respectively. The proof of the following claim is based on well known properties of Bellman-Ford's algorithm <ref> [4, page 532] </ref>. Lemma 1 Let G = (V; E) be the distance graph of a simple temporal network and s be the start time variable represented in G. G is consistent (has no negative cycles) iff Bellman-Ford's Single-Source-Shortest-Path (G; s) returns TRUE. <p> It should be observed that instead of using Bellman-Ford's algorithm, we can use other shortest-paths algorithms that can detect negative cycles in the graph. In particular, if the graph is acyclic we can use the more efficient DAG-Shortest-Paths algorithm given in <ref> [4] </ref>. <p> Call G fl the distance metagraph of G. (Note that the subgraph of G formed by the vertices collapsed into a metavertex of G fl is a "strongly connected component" (SCC) of G <ref> [4] </ref>.) The extension e (X; Y ) of an edge (X; Y ) is defined as e (X; Y ) = f (x; y) 2 E j x 2 X ^ y 2 Y g: The weight W (X; Y ) of an edge (X; Y ) is the minimum among <p> Remark. If G is the distance graph of a consistent STN , then Lemma 2 has a very useful consequence. In fact, since G fl is acyclic, its shortest paths can be computed by using a shortest-paths algorithm for DAGs such as DAG-Shortest-Paths given in <ref> [4, page 536] </ref>. DAG-Shortest-Paths takes O (jEj) time and space, and thus it is more efficient than the Bellman-Ford algorithm requiring O (jV jjEj) time. Moreover, in the next section we shall see how Dag-Shortest-Paths can be modified to efficiently support incremental assertions and retraction of temporal constraints. <p> This can be accomplished by two depth-first searches (DFS), the first on G X and the second on G T X <ref> [4, page 489] </ref>. We call this algorithm Recompute-Cycles (see Figure 5). Let us first suppose that there is no cycle in G X . In this case the vertices in G X can be topologically ordered according to the decreasing "finishing times" computed by the first DFS [4]. <p> We call this algorithm Recompute-Cycles (see Figure 5). Let us first suppose that there is no cycle in G X . In this case the vertices in G X can be topologically ordered according to the decreasing "finishing times" computed by the first DFS <ref> [4] </ref>. Let &lt; x 1 ; :::; x l &gt; be such an order, for each vertex x i in ^ X = fx 1 ; :::; x l g we build a metavertex X i such that ^ X i = fx i g. <p> Essentially, Add-Oriented ((x; y); w; G fl ) is an incremental shortest-paths algorithm for directed acyclic graphs <ref> [4] </ref>, where only the edges leaving from a metavertex X such that d (X) has been updated need to be relaxed, and where the topological order of the vertices is exploited to enhance efficiency. Let us now suppose that i &gt; j. <p> Each vertex is initially white, is grayed when it is "discovered" in the search, and is blackened when it is "finished", i.e., when all its descendant vertices have been examined. See <ref> [4, page 478] </ref> for more details. 9 Update-TO ((X i ; X j ); w; G fl ): 1 if Find-Cycles (X j ; X i ; w; G fl ) 2 return FALSE 3 Let X be a new metavertex and ^ X = ; 4 for k j to
Reference: [5] <author> E. Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 281-331, </pages> <year> 1987. </year>
Reference-contexts: Bellman-Ford's algorithm can be considered a particular arc-consistency algorithm that does not suffer from the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. This problem relates to the possibility of generating an arbitrary long succession of edge revisions <ref> [5, 11] </ref>. <p> Refine (u; v) 4 for each edge (u; v) 2 E [ E T 5 do if Refine (u; v) 6 then return FALSE 7 return TRUE produces the same effect as a call to the basic procedure "Refine (x i ; x j )" used by traditional arc-consistency algorithms <ref> [5, 11] </ref>.
Reference: [6] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49, </volume> <year> 1991. </year>
Reference-contexts: Unfortunately, most of the research on constraint-based temporal reasoning has addressed general methods, without focusing on the design of efficient incremental algorithms which can amortize the cost of reasoning. In <ref> [6] </ref> Dechter, Meiri and Pearl introduce TCSP, an important framework for metric temporal reasoning based on difference constraints between continuous variables representing time points. Ernest Davis proved that for such a class of constraints determining consistency is NP-hard [6]. <p> In <ref> [6] </ref> Dechter, Meiri and Pearl introduce TCSP, an important framework for metric temporal reasoning based on difference constraints between continuous variables representing time points. Ernest Davis proved that for such a class of constraints determining consistency is NP-hard [6]. <p> Section 5 gives preliminary experimental results. Finally, section 6 gives our conclusions. 2 Arc-consistency and Graph Algorithms for STP A simple temporal constraint problem (STP) is defined by a set of STP-constraints represented through a simple temporal constraint network (STN) <ref> [6] </ref>. The vertices of a STN represent point-variables whose domains are closed intervals of real values, and the edges represent STP-constraints. <p> Moreover, we assume that the domain of each variable except s is equal to R, while s has the domain [0; 0]. 2 Simple temporal networks are decomposable <ref> [6] </ref>, and both consistency and the "minimal network" can be computed in O (n 3 ) time [6, 13]. <p> Moreover, we assume that the domain of each variable except s is equal to R, while s has the domain [0; 0]. 2 Simple temporal networks are decomposable [6], and both consistency and the "minimal network" can be computed in O (n 3 ) time <ref> [6, 13] </ref>. <p> (x i ) + w (x i ; x j ) 3 (x j ) x i 4 return TRUE 5 else return FALSE of a simple temporal network network G and computing the feasible times of each temporal variable can be achieved by applying Floyd-Warshall's all-pairs shortest paths algorithm <ref> [6, 4] </ref> (or any other applicable all-pairs shortest paths algorithm). Actually, the tasks of consistency checking and of computing the feasible times can be achieved by using a more efficient single-source shortest paths algorithm such as Bellman-Ford's algorithm. <p> A given STN is consistent if and only if its distance graph does not contain negative cycles, i.e., cycles with negative weights <ref> [6] </ref>.
Reference: [7] <author> B. Faltings. </author> <title> Arc-consistency for continuous variables. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 363-376, </pages> <year> 1994. </year>
Reference-contexts: Moreover, Theorem 1 also extends the application of Faltings' arc-consistency algorithms for tree-structured constraint networks with continuous labels <ref> [7] </ref>. Finally, we observe that in practice AC-BF may need less time than O (jV jjEj). In fact, Refine is usually implemented in such a way that if the domain of a variable becomes empty, then an error is returned.
Reference: [8] <author> A. Gerevini, L. Schubert, and S. Schaeffer. </author> <title> The temporal reasoning tools TimeGraph-I-II. </title> <journal> Int. Journal of Artificial Intelligence Tools, </journal> <year> 1995. </year>
Reference-contexts: consistent it correctly updates the s.p. structure of G fl (G flT ) and the latest time (earliest time) of each variable in V . 5 Experimental results The algorithms described in the previous sections have been implemented in Common Lisp and integrated into the temporal reasoning system TimeGraph-II (TG-II) <ref> [8] </ref>. 9 In particular we have extended TG-II's data structures regarding the graph representation of qualitative relations and the implementation of the algorithms for detecting cycles in this representation. This section reports some preliminary experimental results obtained by running our algorithms on randomly generated distance graphs.
Reference: [9] <author> P. V. Hentenryck, Y. Deville, and C.-M. Teng. </author> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57, </volume> <year> 1992. </year>
Reference-contexts: Remark. Theorem 1 shows that enforcing arc-consistency is an efficient procedure for deciding consistency of an STN, extending to continuous domain variables a result by Van Hentenryck et al. for a similar set of constraints on discrete domain variables <ref> [9] </ref>. Moreover, Theorem 1 also extends the application of Faltings' arc-consistency algorithms for tree-structured constraint networks with continuous labels [7]. Finally, we observe that in practice AC-BF may need less time than O (jV jjEj). <p> The following classes of temporal constraints can be represented through a STN whose vertices represent X: 1. simple unary constraints of the form x i 2 <ref> [2; 9] </ref>; 4 In terms of shortest path distances this means that at some point during their computation of we have d T (x i ) &gt; d (x i ) for some x i 2 V . 4 2. constraints stating the minimal duration of an interval; 3. deadline constraints
Reference: [10] <author> H. Kautz and P. Ladkin. </author> <title> Integrating metric and qualitative temporal reasoning. </title> <booktitle> In Proceedings of the nineth National Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: For example, the relation "A during B" should be translated into: start (B) start (A) &lt; 0 ^ end (B) end (A) &lt; 0. The &lt; relations can be managed in STN following a method similar to the method used by Kautz and Ladkin in <ref> [10] </ref>.
Reference: [11] <author> A. K. Mackworth. </author> <title> Consistency in network of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Bellman-Ford's algorithm can be considered a particular arc-consistency algorithm that does not suffer from the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. This problem relates to the possibility of generating an arbitrary long succession of edge revisions <ref> [5, 11] </ref>. <p> Refine (u; v) 4 for each edge (u; v) 2 E [ E T 5 do if Refine (u; v) 6 then return FALSE 7 return TRUE produces the same effect as a call to the basic procedure "Refine (x i ; x j )" used by traditional arc-consistency algorithms <ref> [5, 11] </ref>.
Reference: [12] <author> A. Marchetti-Spaccamela, U. Nanni, and H. Rohert. </author> <title> On-line graph algorithms for incremental compilation. </title> <editor> In J. V. Leeuwen, editor, </editor> <booktitle> Proceeding of the 19th Workshop on Graph Theoretic Concepts in Computer Science. Lecture Notes in Computer Science vol 790, </booktitle> <pages> pages 113-151. </pages> <publisher> Spriger Verlag, </publisher> <year> 1993. </year>
Reference-contexts: If a path from X j to X i is found and the weight w of the new edge 7 Update-TO is similar to the procedure "Insert" <ref> [12] </ref> whose correctness has been formally proven.
Reference: [13] <author> U. Montanari. </author> <title> Networks of constraints: fundamental properties and applications to picture processing. </title> <journal> Inf. Sci., </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: Moreover, we assume that the domain of each variable except s is equal to R, while s has the domain [0; 0]. 2 Simple temporal networks are decomposable [6], and both consistency and the "minimal network" can be computed in O (n 3 ) time <ref> [6, 13] </ref>.
Reference: [14] <author> A. Perini and F. Ricci. </author> <title> An interactive planning architecture. </title> <editor> In M. Ghallab and A. Milani, editors, </editor> <booktitle> New directions in AI Planning, </booktitle> <pages> pages 273-283. </pages> <publisher> IOS Press, </publisher> <year> 1996. </year>
Reference-contexts: For instance, STP - constraints were chosen to model the temporal information managed by an interactive planning and scheduling system for supporting forest fire fighting <ref> [14] </ref>. Among the (few) related works, the study in [3] proposes an incremental method for maintaining STP-constraints which is based on an extension of arc-consistency techniques. Though our method can manage only STP -constraints, in general our algorithms are more efficient then those outlined in [3].
Reference: [15] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <year> 1993. </year>
Reference-contexts: This data structure, called "distance metagraph", allows to considerably speed up the process of updating the representation, both when existing constraints are removed and when new constraints are added. Tate and Bell [2](or <ref> [15, section 7.8.2] </ref>) also have proposed an arc-consistency algorithm adapted to STP that manages the on-line addition of constraints. Section 2 investigates the relationship between known shortest-paths algorithms and arc-consistency algorithms for processing STP-constraints.
Reference: [16] <author> M. Vilain, H. Kautz, and P. van Beek. </author> <title> Constraint propagation algorithms for temporal reasoning: a revised report. </title> <booktitle> In Readings in Qualitative Reasoning about Physical Systems, </booktitle> <pages> pages 373-381. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year> <month> 14 </month>
Reference-contexts: Ernest Davis proved that for such a class of constraints determining consistency is NP-hard [6]. However, the reasoning problems become polynomial for a restriction of TCSP called STP, subsuming the qualitative relations in the continuous Point Algebra <ref> [16] </ref> and in the Convex fl This work has been partially supported by the Esprit III project #6095 CHARADE (Combining Human Assessment and Reasoning Aids for Decision Making in environmental Emergencies). 1 Simple Interval Algebra. 1 STP is based on constraints of the form y x 2 I (STP-constraints), where x <p> the number of point variables (vertices); p 0 is the percentage of the edges in the distance graph with weight 0; W is the upper bound on the randomly generated weight of an edge. 9 TG-II can efficiently manage large data sets of qualitative temporal relations in the Point Algebra <ref> [16] </ref>, as well as disjunctive constraints such as interval disjointness and point-interval exclusion. 10 Find-Cycles (u; v; w; G = (V; E)): 1 for each vertex x 2 V between u and v in the topological order of G 2 color (x) white 3 return Visit (u; v; w; G) Visit
References-found: 16

