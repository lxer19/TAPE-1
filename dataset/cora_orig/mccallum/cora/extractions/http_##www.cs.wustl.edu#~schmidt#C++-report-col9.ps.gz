URL: http://www.cs.wustl.edu/~schmidt/C++-report-col9.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: http://www.cs.wustl.edu
Email: schmidt@cs.wustl.edu vinoski@iona.com  
Title: Object Interconnections The OMG Events Service (Column 9)  
Author: Douglas C. Schmidt Steve Vinoski 
Note: This column will appear in the February 1997 issue of the SIGS C++ Report magazine.  
Address: St. Louis, MO 63130 60 Aberdeen Ave., Cambridge, MA 02138  
Affiliation: Department of Computer Science IONA Technologies, Inc. Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. C. Schmidt, </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien and D. C. Schmidt, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: There are various ways to implement nested dispatching, such as spawning off a separate thread to handle each incoming request or using a non-blocking, reactive <ref> [1] </ref> event loop within the ORB. operation ()operation () response request CLIENTCLIENT SERVERSERVER to developing stand-alone OO applications. One drawback, however, is that the server must be available to process the client's request. There are many situations where the standard CORBA synchronous request/response model is too restrictive.
Reference: [2] <institution> Object Management Group, </institution> <month> CORBAServices: </month> <title> Common Object Services Specification, </title> <note> Revised Edition, </note> <editor> 95-3-31 ed., </editor> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: One way to relieve some of the burden we've placed on the stock quoter is to utilize an implementation of the OMG Events Service to deliver notifications. The Events Service is one component in the OMG Common Object Services Specification (COSS) Volume 1 <ref> [2] </ref>. Its purpose is to provide delivery of event data from suppliers to consumers without requiring these participants to know about each other explicitly. Therefore, implementations of the Events Service act as mediators that support decoupled communication between objects. <p> The derived class adds the administrative connect push supplier operation, which allows Sup plier objects to be connected to the Consumer via the Event Channel. 4 Using the OMG COS Events Service for the Stock Quoter System The OMG Events Service specification <ref> [2] </ref> has been available for several years. It concisely describes the IDL interfaces of Event Channels, Consumers, and Suppliers. However, it is beyond the scope of the standard to illustrate how to develop applications using the Events Service.
Reference: [3] <author> S. Maffeis and D. C. Schmidt, </author> <title> Constructing Reliable Distributed Communication Systems with CORBA, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: The push and pull methods of event propagation free Consumers and Suppliers from the synchronous semantics of the standard CORBA request/response communication model. In addition, an Event Channel serves as a surrogate to multiple Suppliers and multiple Consumers, which supports group communication <ref> [3] </ref>. 2.2 Events Service Communication Models There are four general models of component collaboration in the OMG COS Events Service architecture. Figure 4 shows the collaborations between Consumers and Suppliers in each of the models.
Reference: [4] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In this model, Suppliers are the active initiators and Consumers are the passive targets of the requests. Event Channels play the role of Notifier, as defined by the Observer pattern <ref> [4] </ref>. Thus, active Suppliers use Event Channels to push data to Passive Consumers that have registered with the Event Channels. * The Canonical Pull Model: The canonical Pull model shown in Figure 4 (B) allows Consumers to request events from Suppliers.
Reference: [5] <author> R. G. Lavender and D. C. Schmidt, </author> <title> Active Object: an Object Behavioral Pattern for Concurrent Programming, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien, J. Vlissides, and N. Kerth, eds.), </editor> <address> (Reading, MA), </address> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: In this model, both Suppliers and Consumers are the active initiators of the requests. Event Channels play the role of Queue, as defined in the Active Object pattern <ref> [5] </ref>. Thus, active Consumers can explicitly pull data deposited by active Suppliers via the Event Channels. * The Hybrid Pull/Push Model: The Pull/Push model shown in Figure 4 (D) is another hybrid that allows the Channel to pull events from Suppliers and push them to Consumers.
Reference: [6] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.0 ed., </editor> <month> July </month> <year> 1995. </year>
Reference-contexts: The insertion of the CallbackInfo struct into the CORBA::Any is accomplished using the overloaded operator&lt;<=, which is defined in the OMG IDL C++ Mapping Specification <ref> [6] </ref>.
Reference: [7] <author> R. Stewart, J. Storey, and D. Huang, </author> <title> Event Handling in a CORBA-based Telecommunications Management System Framework, </title> <journal> C++ Report, </journal> <volume> vol. 9, </volume> <month> February </month> <year> 1997. </year> <month> 11 </month>
Reference-contexts: In practice, some implementations of Event Channels <ref> [7] </ref> extend the COS Events Service to add event filtering and correlation.
References-found: 7

