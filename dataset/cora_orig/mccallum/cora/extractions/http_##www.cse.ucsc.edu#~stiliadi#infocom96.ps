URL: http://www.cse.ucsc.edu/~stiliadi/infocom96.ps
Refering-URL: http://www.cse.ucsc.edu/~stiliadi/projects.html
Root-URL: http://www.cse.ucsc.edu
Title: Latency-Rate Servers: A General Model for Analysis of Traffic Scheduling Algorithms  
Author: Dimitrios Stiliadis and Anujan Varma 
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Abstract: In this paper, we develop a general model, called Latency-Rate servers (LR-servers), for the analysis of traffic scheduling algorithms in broadband packet networks. The behavior of an LR scheduler is determined by two parameters | the latency and the allocated rate. We show that several well-known scheduling algorithms, such as Weighted Fair Queueing, VirtualClock, Self-Clocked Fair Queueing, Weighted Round Robin, and Deficit Round Robin, belong to the class of LR-servers. We derive tight upper bounds on the end-to-end delay, internal burstiness, and buffer requirements of individual sessions in an arbitrary network of LR-servers in terms of the latencies of the individual schedulers in the network, when the session traffic is shaped by a leaky bucket. Thus, the theory of LR-servers enables computation of tight upper-bounds on end-to-end delay and buffer requirements in a network of servers in which the servers on a path may not all use the same scheduling algorithm. We also define a self-contained approach to evaluate the fairness of LR-servers and use it to compare the fairness of many well-known scheduling algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Clark, S. Shenker, and L. Zhang, </author> <title> "Supporting real-time applications in an integrated services packet network: Architecture and mechanism," </title> <booktitle> in Proc. ACM SIGCOMM '92, </booktitle> <pages> pp. 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference: [2] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference: [3] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," Internetworking: </title> <journal> Research and Experience, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year>
Reference: [4] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control the single node case," </title> <booktitle> in Proc. INFOCOM '92, </booktitle> <volume> vol. 2, </volume> <pages> pp. 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Calculation of the timestamp: The PGPS scheduler has the highest complexity in this respect with a worst-case processing overhead of O (V ) per packet transmis sion <ref> [4] </ref>. 2. Insertion in a sorted priority list: The first cell of each session's queue must be stored in a sorted priority list. When a cell arrives into an empty queue, its insertion into the priority list requires O (log V ) steps. 3. <p> We use as a measure of fairness the difference in normalized service offered to the two connections for any time interval (t 1 ; t 2 ] after time t . A typical example of unfairness occurs in the VirtualClock algorithm, as presented in <ref> [4] </ref>. We evaluated the fairness of a number of servers. We use L i to denote the maximum packet-size for session i and L max the maximum packet-size over all sessions. A summary of our results is presented in Table I.
Reference: [5] <author> S. Golestani, </author> <title> "A self-clocked fair queueing scheme for broadband applications," </title> <booktitle> in Proc. INFOCOM '94, </booktitle> <pages> pp. 636-646, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: In addition, sessions should not be penalized for excess bandwidth they received while other sessions were idle. Following Golestani's work <ref> [5] </ref>, we define the fairness parameter of a scheduling algorithm as the maximum difference between the normalized service received by two backlogged connections over an interval in which both are continuously backlogged. C. Implementation Complexity Finally, schedulers differ greatly in their implementation complexity. <p> In this section we analyze the fairness characteristics of several well-known LR servers and compare them. The fairness parameter that we use is based on the definition presented by Golestani <ref> [5] </ref> for analysis of self-clocked fair queueing. Let us assume that W S i (t; t) is the service offered to connection i in the interval (t; t] by server S. <p> Therefore, in a packet by packet server, we can only require that the difference in normalized service received by the connections be bounded by a constant. Golestani suggested use of the difference in normalized service offered to any two connections as the measure of fairness for the algorithm <ref> [5] </ref>. More precisely, an algorithm is considered close to fair if, for any two connections i; j that are continuously backlogged in an interval of time (t 1 ; t 2 ], fi fi W S i W S j fi fi F ; where F S is a constant.
Reference: [6] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference: [7] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference: [8] <author> M. Shreedhar and G. Varghese, </author> <title> "Efficient Fair Queueing using Deficit Round Robin," </title> <booktitle> in Proc. </booktitle> <address> SIGCOMM'95, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: As we will show in Section VI, however, VirtualClock is not a fair algorithm. In self-clocked fair queueing, the latency is a linear function of the maximum number of connections sharing the outgoing link. In Deficit Round Robin <ref> [8] </ref>, the latency depends on the frame size F . By the definition of the algorithm, the frame size, in turn, is determined by the granularity of the bandwidth allocation and the maximum packet size of its session.
Reference: [9] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate controlled servers for very high-speed networks," </title> <booktitle> in IEEE Global Telecommunications Conference, </booktitle> <pages> pp. </pages> <address> 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference: [10] <author> R. Cruz, </author> <title> "A calculus for network delay. I. Network elements in isolation.," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> vol. 37, </volume> <pages> pp. 114-131, </pages> <month> January </month> <year> 1991. </year>
Reference: [11] <author> R. Cruz, </author> <title> "A calculus for network delay. II. Network elements in isolation.," </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> vol. 37, </volume> <pages> pp. 132-141, </pages> <month> January </month> <year> 1991. </year>
Reference: [12] <author> H. Zhang, </author> <title> Service Disciplines for Packet-Switching Integrated-Services Networks. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <year> 1992. </year>
Reference: [13] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control in integrated services networks: the multiple node case," </title> <booktitle> in Proc. INFOCOM '93, </booktitle> <volume> vol. 2, </volume> <pages> pp. 521-530, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Since we assumed only that each of the servers in the network belongs to the LR class, these results are more general than the delay bounds due to Parekh and Gal-lager <ref> [13] </ref>. In the next section, we will show that all well-known work-conserving schedulers are in fact LR servers. Thus, our delay bound applies to almost any network of schedulers. <p> Therefore, D i i k X fi i i If we substitute the latency obtained for PGPS from Ta ble I, that is, fi (S j ) D i i L i + k r which agrees with the bound obtained by Parekh and Gal-lager <ref> [13] </ref> for a network of PGPS servers. Since the latencies of PGPS and VirtualClock are identical, the bound of (5.2) applies to VirtualClock as well; this is also in agreement with the results of Lam and Xie [19].
Reference: [14] <author> P. Goyal, S. Lam, and H. Vin, </author> <title> "Determining end-to-end delay bounds in heterogeneous networks," </title> <booktitle> in Proc. 5th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pp. 287-298, </pages> <month> April </month> <year> 1995. </year>
Reference: [15] <author> S. Golestani, </author> <title> "Network delay analysis of a class of fair queueing algorithms," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1057-70, </pages> <month> August </month> <year> 1995. </year>
Reference: [16] <author> H. Zhang and S. Keshav, </author> <title> "Comparison of rate based service disciplines," </title> <booktitle> in Proc. ACM SIGCOMM '91, </booktitle> <pages> pp. 113-122, </pages> <year> 1991. </year>
Reference-contexts: If V is the maximum number of connections that may share an output link, the implementation of a scheduler based on the sorted-priority architecture involves three main steps for processing each cell <ref> [16] </ref>: 1. Calculation of the timestamp: The PGPS scheduler has the highest complexity in this respect with a worst-case processing overhead of O (V ) per packet transmis sion [4]. 2.
Reference: [17] <author> D. Stiliadis and A. Varma, </author> <title> "Latency-rate servers: A general model for analysis of traffic scheduling algorithms," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-95-38, U.C. Santa Cruz, </institution> <month> July </month> <year> 1995, </year> <note> http://www.cse.ucsc.edu/research/hsnlab/publications/. </note>
Reference-contexts: The output traffic conforms to the leaky bucket model with parameters ( i + fi S i i ; i ). A proof for the above theorem can be found in <ref> [17] </ref>. Notice that both the output burstiness of the traffic as well as the delay bound depend strongly on the latency of the server. As we show in the next section, this dependency becomes stronger in a network of LR-servers. B. <p> But this means that the input traffic in the next node conforms to the same model. The proof of the lemma is straightforward <ref> [17] </ref>. This is an important result that allows us to bound the burstiness of session-i traffic at each point in the network. Notice that the increase in burstiness that a session may see in the network is proportional to the sum of the latencies of the servers it has traversed. <p> Using Theorem 1 and Lemma 1 it is easy to prove the following lemma that will bound the backlog of session i in each node of the network <ref> [17] </ref>. <p> The interested reader is referred to <ref> [17] </ref> for more details. <p> Using the above corollary we can bound the end-to-end delays of session i if the input traffic is leaky-bucket shaped and the average arrival rate is less than i . In <ref> [17] </ref> we prove the following theorem: Theorem 2: The maximum delay D i of a session i in a network of LR servers, consisting of k servers in series, is bounded as D i i k X fi i ; (3.4) where fi (S j ) i is the latency of <p> The arrivals at the input of the server during the interval (t; t] now satisfy the inequality A i (t; t) min ( i + i (t t ); P i (t t )) : (3.5) In <ref> [17] </ref> we prove the following lemma: Lemma 4: The maximum delay D i of a session i in a network of LR servers, consisting of k servers in series, where the peak rate of the source is known, is bounded as D i P i g i P i i + <p> A formal proof of the Lemma is presented <ref> [17] </ref>. This lemma will allow us to estimate the latency of an LR-server. However, it does not necessarily provide us a tight bound for the parameter fi i . A main contribution of the theory of LR-servers is the notion of the busy period. <p> We evaluated the fairness of a number of servers. We use L i to denote the maximum packet-size for session i and L max the maximum packet-size over all sessions. A summary of our results is presented in Table I. Detailed proofs for these results are presented in <ref> [17] </ref>, [20]. We note that all the algorithms studied, except Virtual-Clock, can be considered as fair based on our definition of fairness.
Reference: [18] <author> R. Cruz, </author> <title> "Quality of service guarantees in virtual circuit switched networks," </title> <journal> IEEE Journal on Selected Areas In Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1048-1056, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The bound on the service offered by an LR-server is based on the busy period. This is a more general approach than bounding the service offered by the server based on the concept of the backlogged period. An approach based on the latter was proposed in <ref> [18] </ref> for providing QoS guarantees. The model bounds the service offered to a connection during one or more backlogged periods, thus providing a means to design a class of scheduling algorithms that can provide specific end-to-end delay guarantees.
Reference: [19] <author> S. Lam and G. Xie, </author> <title> "Burst scheduling: Architecture and algorithm for switching packet video," </title> <booktitle> in INFOCOM'95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Since the latencies of PGPS and VirtualClock are identical, the bound of (5.2) applies to VirtualClock as well; this is also in agreement with the results of Lam and Xie <ref> [19] </ref>. While we have verified that this improvement of L i = i in the delay bound is valid for all the LR servers analyzed in this paper, whether this is true for all LR servers remains an open question.
Reference: [20] <author> D. Stiliadis and A. Varma, </author> <title> "Frame-based fair queueing: A new traffic scheduling algorithm for packet-switched networks," </title> <type> Tech. Rep. </type> <institution> UCSC-CRL-95-39, U.C. Santa Cruz, </institution> <month> July </month> <year> 1995, </year> <note> http://www.cse.ucsc.edu/research/hsnlab/publications/. </note>
Reference-contexts: We evaluated the fairness of a number of servers. We use L i to denote the maximum packet-size for session i and L max the maximum packet-size over all sessions. A summary of our results is presented in Table I. Detailed proofs for these results are presented in [17], <ref> [20] </ref>. We note that all the algorithms studied, except Virtual-Clock, can be considered as fair based on our definition of fairness. However, it is interesting to note that self-clocked fair queueing (SCFQ) has the best fairness among all the packet-by-packet schedulers, even better than that of PGPS in some cases. <p> max ( n O (V ) SCFQ L i r (V 1) i + j O (log V ) VirtualClock L i i r 1 O (log V ) Deficit Round Robin (3F 2 i ) 3F Weighted Round Robin (F i +L c ) F Frame-Based Fair Queueing (FFQ) <ref> [20] </ref> L i r r + max ( L i L j TABLE I. Latency, fairness and implementation complexity of several work-conserving servers. L i is the maximum packet size of session i and L max the maximum packet size among all the sessions. <p> Our comparison of schedulers along the three dimensions leaves open the question whether a scheduling algorithm can be designed that has the same low latency as that of PGPS, bounded unfairness, and an efficient implementation. In <ref> [20] </ref>, we extend this work by presenting such a scheduling discipline that we call Frame-based Fair Queueing (FFQ). FFQ is a sorted-priority algorithm in which the calculation of timestamps can be performed in O (1) time.
References-found: 20

