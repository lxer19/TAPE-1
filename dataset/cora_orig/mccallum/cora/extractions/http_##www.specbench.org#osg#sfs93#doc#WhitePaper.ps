URL: http://www.specbench.org/osg/sfs93/doc/WhitePaper.ps
Refering-URL: http://www.specbench.org/contents.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: LADDIS: The Next Generation In NFS File Server Benchmarking Mark Wittle Data General Corporation  
Author: Bruce E. Keith 
Note: encouraged. Permission has been granted by the USENIX Association to reprint the above paper/article. This paper/article was originally published in the USENIX Association Conference Proceedings, 1993. Copyright USENIX Association, 1993  
Date: April 1993  
Affiliation: Digital Equipment Corporation  
Abstract: The ability to compare the performance of various NFS 1 file server configurations from several vendors is critically important to a computing facility when selecting an NFS file server. To date, nhfsstone 2 has been a popular means of characterizing NFS file server performance. However, several deficiencies have been found in nhfsstone. The LADDIS NFS file server benchmark has been developed to resolve nhfsstone's shortcomings and provide new functionality. The Standard Performance Evaluation Corporation (SPEC 3 ) released the System File Server (SFS) Release 1.0 benchmark suite, which contains 097.LADDIS, as an industry-standard file server benchmark in April 1993. This paper describes the major technical issues involved in developing the benchmark and the rationale used to establish default 097.LADDIS workload parameter values. Where appropriate, areas for further research are identified and 
Abstract-found: 1
Intro-found: 1
Reference: [Baker91] <author> Baker, Mary G., et al., </author> <title> "Measurement of a Distributed File System," </title> <booktitle> Proceedings of the 13th Symposium on Operatiing System Principles, </booktitle> <pages> pp. 198 - 212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This distribution is achieved by weighting the choice of file access length to produce many short accesses of 1 - 15 KB and fewer long accesses of 16 - 135 KB <ref> [Baker91] </ref>. Beyond packet sizes of 15 KB, the distribution is essentially logarithmic (e.g., half as many 128 KB accesses as 64 KB accesses, etc.), although some variations involving fragment packets are needed to meet the packet size distribution requirements.
Reference: [Dronamraju93] <author> Dronamraju, S. Krishna, et al., </author> <title> "Managing the SFS User Interface," </title> <journal> SPEC Newsletter, </journal> <volume> Volume 5, Issue 1, </volume> <pages> pp. 5 - 10, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The interface is similar to other SPEC benchmark suites <ref> [Dronamraju93] </ref>. 2.3 Protocol Requirements LADDIS implements the NFS protocol within the benchmark. This design enables the benchmark to maintain an accurate count of NFS requests sent to the file server. Correctness of the server's NFS implementation is verified during each benchmark run by a validation phase before beginning performance measurements.
Reference: [Hartman92] <author> Hartman, John, </author> <title> "File Append vs. Overwrite in a Sprite Cluster," Sprite Project, </title> <institution> University of California at Berkeley, </institution> <note> Presentation to the LADDIS Group, January 21, </note> <year> 1992. </year>
Reference-contexts: This approach produces a bi-modal distribution of response times for these operations; some SETATTR requests update a file's attributes, but others perform file storage space deallocation. Recent research into file write access patterns <ref> [Hartman92] </ref> indicates that append ratios as high as 90 - 95% may be common in some environments. Using the default LADDIS settings, a 15 stable data set size cannot be maintained with a 90% append ratiofithere are not enough SETATTR and CREATE requests to counter-balance the append operations.
Reference: [Keith90] <author> Keith, Bruce, </author> <title> "Perspectives on NFS File Server Performance Characterization," </title> <booktitle> Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pp. 267-277, </pages> <month> June </month> <year> 1990. </year> <institution> [Legato89] "nhfsstone" NFS load-generating program, Legato Systems Inc., </institution> <address> Palo Alto, CA 94306 </address>
Reference-contexts: Nhfsstone synthetically duplicates average NFS file server resource utilization levels attained with a real user-level workload running on a collection of NFS clients <ref> [Keith90] </ref>. Despite its popularity, nhfsstone has several shortcomings. Nhfsstone is sensitive to differences in NFS client kernel implementations across vendors' NFS clients. For a given logical file operation, nhfsstone can produce a different NFS protocol request sequence depending on the vendor's NFS client kernel and hardware configuration. <p> The distribution of "fragment" packets containing less than 8 KB of data is spread evenly across packets containing multiples of 1 KB. These values are derived from NFS packet transfers observed by one of the authors <ref> [Keith90] </ref>.
Reference: [Lyon92] <author> Lyon, Robert, </author> <title> private communication to the LADDIS group, </title> <address> June 26, </address> <year> 1992. </year>
Reference-contexts: The default LADDIS operation mix is the same as the operation mix used in the nhfsstone benchmark. The mix is based on unpublished NFS client workload studies performed at Sun Microsystems during 1987 <ref> [Lyon92] </ref>. Standard LADDIS parameters specify an operation mix consisting of about half file name and attribute operations (LOOKUP 34% and GETATTR 13%), roughly one third I/O operations (READ 22% and WRITE 15%), with the remaining one-sixth spread among six other operations.
Reference: [Sandberg85] <author> Sandberg, Russel, et al., </author> <title> "Design and Implementation of the Sun Network File System," </title> <booktitle> Proceedings of the Summer 1985 USENIX Conference, </booktitle> <pages> pp. 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: 21 5.7 Algorithm Trade-offs ............................................................................................................ 21 6 Benchmark Results ............................................................................................................... 22 7 Areas for Future Work .......................................................................................................... 24 8 Acknowledgments ................................................................................................................. 25 9 Author Information ................................................................................................................. 25 10 References .............................................................................................................................. 26 11 Trademarks ............................................................................................................................. 27 Figures 1 1 LADDIS Overview LADDIS is a synthetic benchmark used to measure the NFS <ref> [Sandberg85] </ref> request response time and throughput capacity of an NFS file server. The benchmark produces response time versus throughput measurements for various NFS load levels.
Reference: [Shein89] <author> Shein, Barry, et al., </author> <title> "NFSSTONE - A Network File Server Performance Benchmark," </title> <booktitle> Proceedings of the Summer 1989 USENIX Conference, </booktitle> <pages> pp. 269-274, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: issues involved in developing the benchmark and the rationale used to establish the default LADDIS workload parameter values, reflected in the 097.LADDIS benchmark released in the SPEC SFS Release 1.0 benchmark suite [SPEC93]. 1.1 Nhfsstone Deficiencies To date, nhfsstone has been a popular means of characterizing NFS file server performance <ref> [Legato89; Shein89] </ref>. Nhfsstone synthetically duplicates average NFS file server resource utilization levels attained with a real user-level workload running on a collection of NFS clients [Keith90]. Despite its popularity, nhfsstone has several shortcomings. Nhfsstone is sensitive to differences in NFS client kernel implementations across vendors' NFS clients.
Reference: [SPEC93] <institution> Standard Performance Evaluation Corporation, </institution> <note> "SPEC SFS Release 1.0 Run and Report Rules," SPEC SFS 1.0 Release, </note> <institution> SPEC c/o NCGA, </institution> <address> 2722 Merrilee Drive, Suite 200, Fairfax, VA 22031-4499 </address>
Reference-contexts: This paper describes the major technical issues involved in developing the benchmark and the rationale used to establish the default LADDIS workload parameter values, reflected in the 097.LADDIS benchmark released in the SPEC SFS Release 1.0 benchmark suite <ref> [SPEC93] </ref>. 1.1 Nhfsstone Deficiencies To date, nhfsstone has been a popular means of characterizing NFS file server performance [Legato89; Shein89]. Nhfsstone synthetically duplicates average NFS file server resource utilization levels attained with a real user-level workload running on a collection of NFS clients [Keith90]. <p> Results may be reported as "baseline" or "non-baseline" results. Baseline results are for server configurations that conform to all standard NFS service requirements defined by the NFS Version 2 Protocol and the SPEC SFS 1.0 Run and Report Rules <ref> [SPEC93] </ref>. 23 Aggregate Test Parameters: Number of processes = 36 Requested Load (NFS operations/second) = 240 Maximum number of outstanding biod writes = 2 Maximum number of outstanding biod reads = 2 Warm-up time (seconds) = 60 Run time (seconds) = 600 File Set = 9612 Files created for I/O operations
Reference: [Stern92] <author> Stern, Hal, et al., </author> <title> "NFS Performance and Network Loading," </title> <booktitle> Proceedings of the LISA VI Conference, </booktitle> <pages> pp. 33 - 38, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Nhfsstone's load-generating capacity is confined to a single NFS client system, which eliminates the performance impact of all network contention effects observed when servicing multiple NFS clients <ref> [Stern92] </ref>. Nhfsstone is limited in its ability to characterize NFS file servers that support multiple networks. An adequate solution to coordinating multiple nhfsstone 2 instantiations requires the creation of additional control and results-consolidation software.

References-found: 9

