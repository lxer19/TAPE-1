URL: http://euler.mcs.utulsa.edu/~corcoran/ps/pga.ps
Refering-URL: http://euler.mcs.utulsa.edu/~corcoran/pubs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A PARALLEL ISLAND MODEL GENETIC ALGORITHM FOR THE MULTIPROCESSOR SCHEDULING PROBLEM  
Author: Arthur L. Corcoran Roger L. Wainwright 
Keyword: Parallel Processing, Multiprocessor Scheduling, Genetic Algorithms, Parallel Island Model.  
Address: Tulsa  
Affiliation: The University of  
Abstract: In this paper we compare the performance of a serial and a parallel island model Genetic Algorithm for solving the Multiprocessor Scheduling Problem. We show results using fixed and scaled problems both using and not using migration. We have found that in addition to providing a speedup through the use of parallel processing, the parallel island model GA with migration finds better quality solutions than the serial GA. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. L. Corcoran and R. L. Wainwright. LibGA: </author> <title> A user-friendly workbench for order-based genetic algorithm research. </title> <editor> In E. Deaton, K. M. George, H. Berghel, and G. Hedrick, editors, </editor> <booktitle> Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 111-118, </pages> <address> New York, 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Li and Cheng [11] developed a job shop scheduling algorithm to partition a mesh connected system, where jobs require square meshes and the system itself is a square mesh with size a power of two. This problem is similar to a two-dimensional bin packing problem. Corcoran and Wainwright <ref> [1] </ref> present a GA for solving the two dimensional bin packing problem. 3 Genetic Algorithms A genetic algorithm is an iterative procedure which borrows the ideas of natural selection and `survival of the fittest' from natural evolution. <p> The cellular model also avoids the problems associated with the panmictic approach, such as global synchronization. However, cellular models require a large amount of communication. 5 Experimental Results We developed all of our genetic algorithms using LibGA <ref> [1] </ref>. We implemented a typical serial GA for the multiprocessor scheduling problem, as well as a parallel GA using the island model. <p> Processing times given are actual CPU time, which is independent of processor load. The parameters used by the GA include: generational reproduction with elitism, roulette selection, asexual crossover with probability 1.0, and swap mutation with probability 0.01. Asexual crossover and swap mutation are unique to LibGA <ref> [1] </ref>. Asexual crossover and swap mutation both swap two randomly selected genes. The crossover probability used was the default value used in LibGA. The remainder of the operators and parameters are those typically used in genetic algorithms [5].
Reference: [2] <author> Y. Davidor, T. Yamada, and R. Nakano. </author> <title> The ECOlogical framework II: Improving GA performance at virtually zero cost. </title> <note> In Forrest [3]. </note>
Reference-contexts: Consequently, researchers have concentrated on developing algorithms that search through the vast state-space of the problem in an efficient manner looking for near optimal solutions. Yamada and Nakano [15] developed a GA implementation for large-scale job shop problems. Also, Davidor et al. <ref> [2] </ref> investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [9] developed a GA to schedule distributed tasks on a bus-based system.
Reference: [3] <editor> S. Forrest, editor. </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <address> Urbana-Champaign, Illi-nois, July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [4] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Section 5 summarizes our experimental results comparing serial and parallel island model GAs on the Multiprocessor Scheduling Problem. Finally, Section 6 provides an analysis fl Research partially supported by OCAST Grant AR2-004 and Sun Microsystems, Inc. of our experimental results. 2 Multiprocessor Scheduling The multiprocessor scheduling problem <ref> [4] </ref> is defined as follows: a set of n jobs is to be scheduled on a set of m identical processors. A schedule is simply the sequence in which the jobs are executed. <p> The multiprocessor scheduling problem, job shop scheduling, flow shop scheduling problem, bin packing and vehicle routing problems and all of their variations are part of a broad class of problems called the partition problem. The partition problem is a well known problem which has been shown to be NP-complete <ref> [4] </ref>. Note, when the multiprocessor scheduling problem and its variants are restricted to a fixed m, it is possible to devise a pseudo-polynomial time algorithm. However, in this paper we consider only the general problem where m is not fixed.
Reference: [5] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [5, 7] </ref> or a `steady-state' [14] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population. <p> Asexual crossover and swap mutation are unique to LibGA [1]. Asexual crossover and swap mutation both swap two randomly selected genes. The crossover probability used was the default value used in LibGA. The remainder of the operators and parameters are those typically used in genetic algorithms <ref> [5] </ref>. We used four data sets in our tests: L25, R25, R50, and R75. The L25 data set is a contrived set composed of 25 tasks with a known optimal schedule time of 20.
Reference: [6] <author> V. S. Gordon and D. Whitley. </author> <title> Serial and parallel genetic algorithms as function optimizers. </title> <note> In Forrest [3]. </note>
Reference-contexts: At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. 4 Parallel GAs Parallel GAs (PGAs) can be classified according to three different models: global, island, and cellular. See Gordon and Whitley <ref> [6] </ref>, and Knight and Wainwright [10] for more detail. Global model PGAs use parallel techniques to speed up the operation of the GA without changing the basic operation of the sequential GA. In this model, the genetic algorithm employs a single global population without locality considerations.
Reference: [7] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, Michi-gan, </address> <year> 1975. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [5, 7] </ref> or a `steady-state' [14] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population.
Reference: [8] <author> E. Horowitz and S. Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1984. </year>
Reference-contexts: The tasks for any job J i are to be carried out in the order 1, 2, 3, ..., etc., where each task j cannot begin until task j 1 (j &gt; 1) has been completed <ref> [8] </ref>. In the job shop scheduling problem, the processor capacity is not considered. It is assumed every task in every job uses the entire memory capacity of a given processor.
Reference: [9] <author> M. D. Kidwell. </author> <title> Using genetic algorithms to schedule distributed tasks on a bus-based system. </title> <note> In Forrest [3]. </note>
Reference-contexts: Yamada and Nakano [15] developed a GA implementation for large-scale job shop problems. Also, Davidor et al. [2] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell <ref> [9] </ref> developed a GA to schedule distributed tasks on a bus-based system. Li and Cheng [11] developed a job shop scheduling algorithm to partition a mesh connected system, where jobs require square meshes and the system itself is a square mesh with size a power of two.
Reference: [10] <author> L. Knight and R. Wainwright. </author> <title> HYPERGEN a distributed genetic algorithm on a hypercube. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <address> Williams-burg, Virginia, </address> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: At that time the offspring replace the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. 4 Parallel GAs Parallel GAs (PGAs) can be classified according to three different models: global, island, and cellular. See Gordon and Whitley [6], and Knight and Wainwright <ref> [10] </ref> for more detail. Global model PGAs use parallel techniques to speed up the operation of the GA without changing the basic operation of the sequential GA. In this model, the genetic algorithm employs a single global population without locality considerations.
Reference: [11] <author> K. Li and K.-H. Cheng. </author> <title> Job scheduling in a partitionable mesh using a two-dimensional buddy system partitioning scheme. </title> <journal> IEEE Transaactions on Parallel and Distributed Systems, </journal> <volume> 2(4) </volume> <pages> 413-422, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Yamada and Nakano [15] developed a GA implementation for large-scale job shop problems. Also, Davidor et al. [2] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [9] developed a GA to schedule distributed tasks on a bus-based system. Li and Cheng <ref> [11] </ref> developed a job shop scheduling algorithm to partition a mesh connected system, where jobs require square meshes and the system itself is a square mesh with size a power of two. This problem is similar to a two-dimensional bin packing problem.
Reference: [12] <editor> R. Manner and B. Manderick, editors. </editor> <title> Parallel Problem Solving from Nature, 2. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference: [13] <author> D. Whitley. </author> <title> Cellular genetic algorithms. </title> <note> In Forrest [3]. </note>
Reference-contexts: Periodically, individuals are transmitted between the islands in a process called migration. The island model strategy eliminates the global synchronization that is required in the panmictic approach. However, some synchronization is usually required for migration. Cellular models (a term used by Whitley <ref> [13] </ref>) arose from the desire to exploit the fine grained, massively parallel architectures. These machines consist of a huge number of simple processors typically connected in a ring or torus topology.
Reference: [14] <author> D. Whitley and J. Kauth. </author> <title> GENITOR: A different genetic algorithm. </title> <booktitle> In Proceedings of the Rocky Mountain Conference on Artificial Intelligence, </booktitle> <pages> pages 118-130, </pages> <address> Denver, Colorado, </address> <year> 1988. </year>
Reference-contexts: Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' [5, 7] or a `steady-state' <ref> [14] </ref> genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replace the entire current population.
Reference: [15] <author> T. Yamada and R. Nakano. </author> <title> A genetic algorithm applicable to large-scale job-shop problems. </title> <note> In Manner and Manderick [12]. </note>
Reference-contexts: However there is no known solution to any of these problems that can be done in polynomial time. Consequently, researchers have concentrated on developing algorithms that search through the vast state-space of the problem in an efficient manner looking for near optimal solutions. Yamada and Nakano <ref> [15] </ref> developed a GA implementation for large-scale job shop problems. Also, Davidor et al. [2] investigated GAs as a technique for solving the job shop scheduling problem. Kidwell [9] developed a GA to schedule distributed tasks on a bus-based system.
References-found: 15

