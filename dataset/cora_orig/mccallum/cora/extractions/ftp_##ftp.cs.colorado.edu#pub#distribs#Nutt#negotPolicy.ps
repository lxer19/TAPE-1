URL: ftp://ftp.cs.colorado.edu/pub/distribs/Nutt/negotPolicy.ps
Refering-URL: http://www.cs.colorado.edu/~nutt/Home.html
Root-URL: http://www.cs.colorado.edu
Title: Dynamically Negotiated Resource Management for Virtual Environment Applications  
Author: Gary J. Nutt Scott Brandt, Adam Griff, and Sam Siewert Toby Berk Marty Humphrey 
Address: Boulder, CO 80309-0430  Miami, FL 33159  Denver, CO 80217  
Affiliation: Department of Computer Science, CB 430 University of Colorado  School of Computer Science Florida International University  Department of Computer Science and Engineering University of Colorado at Denver  
Abstract: Collaboration technology calls for new, innovative techniques for supporting informal communication and coordinated work. Distributed virtual environments provide one avenue for supporting this aspect of computer-supported work. We have built a multiperson distributed virtual environment using low-cost workstations interconnected with relatively high-speed networks. This domain makes use of interactive and on-demand continuous media in addition to a number of other tasks that fall on a spectrum between hard real-time and best-effort response. A brute force technique for implementing applications in this type of domain demands excessive system resources, even though the actual requirements by different parts of the application vary according to the way the virtual environment is being used at the moment. A more sophisticated approach is to provide applications with the ability to dynamically adjust resource requirements according to their current needs and the availability of system resources. This paper describes three ways we have approached resource management based on a principle of dynamic negotiation between the application and the system resource management. fl Authors Nutt, Brandt, and Griff were supported by NSF Grant No. IRI-9307619
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Denis Amselem. </author> <title> A window on shared virtual environments. Presence: Teleoperators and Virtual Environments, </title> <address> 4(2):130145, </address> <year> 1995. </year>
Reference-contexts: Our VPR [31] is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms [15, 37] and other virtual environments <ref> [1, 5, 12] </ref>, but is unique in its support for domain-specific tools. A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity.
Reference: [2] <institution> Special Issue of AT&T Technical Journal on Multimedia, </institution> <note> September/October 1995. Nikil Jayant, Technical Reviewing Editor. </note>
Reference-contexts: This allowed us to explore the VPR design, implementation, and functionality, using commonly-available implementations, even though the performance of the prototypes was severely limited by the system implementation. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 21, 22] </ref>) there is surprisingly little on the effect the operating system has on the 4 (D)VE's performance. Once we had developed the rudimentary VPR, we were able to explore system software design and organization that might be well-suited to this application domain.
Reference: [3] <author> Neil C. Audsley, Alan Burns, Mike F. Richardson, and Andy J. Wellings. </author> <title> Hard real-time scheduling: The deadline monotonic approach. </title> <booktitle> In 8th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: min , and optimal, R opt , time for output response * Release period (expected minimum interarrival time for aperiodics) and I/O periods 3.1 EPA-DM Approach to Thread Scheduling The approach for scheduling RT-PCIP thread execution is based on a branch of hard real-time scheduling theory called Deadline Monotonic (DM) <ref> [3] </ref>. Deadline Monotonic consists of fixed-priority scheduling in which threads are periodic in nature and are assigned priorities in inverse relation to their deadlines. For example, the thread with the smallest deadline is assigned the highest priority.
Reference: [4] <author> Cristina Aurrecoechea, Andrew Campbell, and Linda Hauw. </author> <title> A survey of QoS architectures. </title> <booktitle> In Proceedings of the 4th IFIP International Workshop on Quality of Service, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Applications are able to trade off individual performance for overall user satisfaction, cooperating to maximize user satisfaction by selectively reducing or increasing resource consumption as available resources and requirements change. A Quality of Service (QoS) <ref> [4] </ref> approach can be applied to scheduling to provide operating system support for soft real-time application execution.
Reference: [5] <author> David A. Berkley and J. Robert Ensor. </author> <title> Multimedia research platforms. </title> <journal> AT&T Technical Journal, </journal> <volume> 74(5):3445, </volume> <month> September/October </month> <year> 1995. </year>
Reference-contexts: Our VPR [31] is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms [15, 37] and other virtual environments <ref> [1, 5, 12] </ref>, but is unique in its support for domain-specific tools. A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity.
Reference: [6] <author> Brian N. Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, Marc E. Fiuczynski, David Becker, Craig Chambers, and Susan Eggers. </author> <title> Extensibility, safety and performance in the spin operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267284, </pages> <year> 1995. </year>
Reference-contexts: The RT-PCIP architecture uses existing techniques for creating modules to be embedded in kernel space as extensions of device drivers (e.g., see <ref> [6, 13] </ref>). Each device has an interface module that can be connected to an arbitrary pipe-stage filter; a pipeline is dynamically configured by inserting filters between a source and sink device interface (see Figure 3).
Reference: [7] <author> Scott Brandt, Gary Nutt, Toby Berk, and Marty Humphrey. </author> <title> Soft real-time application execution with dynamic quality of service assurance, </title> <month> November </month> <year> 1997. </year> <note> submitted for publication. </note>
Reference-contexts: Section 4 presents a generalized software architecture in which applications cooperate with resource managers through the use of execution levels and a dynamic quality of service manager (DQM) to allow 2 applications and resource managers to dynamically negotiate the level of resource usage by the appli-cation <ref> [7, 20] </ref>. The approach used in all three cases enables sets of applications to generate or consume the most appropriate amount of data given the precise dynamics of the situation. This paper presents our current results in each of these areas, though our work continues.
Reference: [8] <author> A. Burns. </author> <title> Scheduling hard real-time systems: A review. </title> <journal> Software Engineering Journal, </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, the concept of EPA-DM thread scheduling for pipeline stages is based on a definition of soft and termination deadlines in terms of utility and potential damage to the system controlled by 16 the application (see Figure 4 and <ref> [8] </ref>). Figure 4 shows response time utility and damage in relation to soft and termination deadlines as well as early responses. The EPA signals the controlling application when either deadline is missed, and specifically will abort any thread not completed by its termination deadline.
Reference: [9] <institution> Special Issue of Communications of the ACM, </institution> <month> September </month> <year> 1995. </year> <title> Lucy Suchman, Guest Editor. </title>
Reference-contexts: in which the system provides its support: In the situated work style, the computer is expected to be a logical lever for the work performed by an individual, with the work of partitioning a job into tasks then coordinating the execution of those tasks left to human ingenuity (e.g., see <ref> [9] </ref>). The workflow camp also advocates the use of computers for personal productivity, but believes that the system should also play a hand in coordinating the execution of the tasks (e.g., see [16, 26, 34, 38]).
Reference: [10] <author> Geoff Coulson, Andrew Campbell, Philippe Robin, Gordon Blair, Michae Papathomas, and David Hutchinson. </author> <title> The design of a QoS controlled ATM based communication system. IEEE JSAC Special Issue on ATM Local Area Networks, </title> <year> 1994. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented. <p> system is only a fraction of a percent of centralized and distributed CORBA systems for all 5 scenarios. 3 Real Time Parametrically Controlled In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [10, 13, 17] </ref>. However, these interfaces do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs. The second form of dynamic negotiation explicitly addresses the management of the deadline-sensitive aspects of continuous media movement.
Reference: [11] <author> Hans Eriksson. MBONE: </author> <title> The multicast backbone. </title> <journal> Communications of the ACM, </journal> <volume> 37(8):5460, </volume> <month> August </month> <year> 1994. </year> <month> 32 </month>
Reference-contexts: Web-based technology has provided a path for the most significant mechanism for supporting collaboration, though the granularity of the interaction is essentially at the file/document level. 1 Though there is clearly adequate technology for many forms of group interaction (e.g., MBone <ref> [11] </ref>, chat rooms, etc.) computers and networks have not provided the level of utility to users that has been done by other group-oriented technologies such as the telephone. Elsewhere we described barriers to the effective use of distributed systems for supporting collaborative work [30].
Reference: [12] <author> Lennart E. Fahlen, Charles Grant Brown, Olov Stahl, and Christer Carlsson. </author> <title> A space based model for user interaction in shared synthetic environments. </title> <booktitle> In Proceedings of Interchi '93, </booktitle> <pages> pages 4348, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Our VPR [31] is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms [15, 37] and other virtual environments <ref> [1, 5, 12] </ref>, but is unique in its support for domain-specific tools. A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity.
Reference: [13] <author> Kevin Fall and Joseph Pasquale. </author> <title> Exploiting in-kernel data paths to improve i/o throughput and cpu availability. </title> <booktitle> In Proceedings of the Winter 1993 USENIX Conference, </booktitle> <pages> pages 327333, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: system is only a fraction of a percent of centralized and distributed CORBA systems for all 5 scenarios. 3 Real Time Parametrically Controlled In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [10, 13, 17] </ref>. However, these interfaces do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs. The second form of dynamic negotiation explicitly addresses the management of the deadline-sensitive aspects of continuous media movement. <p> The RT-PCIP architecture uses existing techniques for creating modules to be embedded in kernel space as extensions of device drivers (e.g., see <ref> [6, 13] </ref>). Each device has an interface module that can be connected to an arbitrary pipe-stage filter; a pipeline is dynamically configured by inserting filters between a source and sink device interface (see Figure 3).
Reference: [14] <author> Changpeng Fan. </author> <title> Evalutions of soft real-time handling methods in a soft real-time framework. </title> <booktitle> In Proceedings of the 3rd International Conference on Multimedia Modeling, </booktitle> <address> Toulous, France, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach [25] and Rialto [24]; (2) specify a range of resource allocations as in MMOSS <ref> [14] </ref>; or (3) specify a measure of application 21 importance that can be used to compute a fair resource allocation as in SMART [27]. These systems all provide a mechanism that can be used to reduce the resource allotment granted to the running applications.
Reference: [15] <author> Jania Gajewska, Jay Kistler, Mark S. Manasse, and David D. Redell. Argo: </author> <title> A system for distributed collaboration. </title> <booktitle> In Proceedings of the Second ACM International Conference on Multimedia, </booktitle> <pages> pages 433 440, </pages> <year> 1994. </year>
Reference-contexts: Not only can group members conduct informal discussions in the DVE, the common (virtual) artifact frames the discussion and provides a set of domain-specific tools manipulating that artifact. Our VPR [31] is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms <ref> [15, 37] </ref> and other virtual environments [1, 5, 12], but is unique in its support for domain-specific tools. A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity.
Reference: [16] <author> Dimitrios Georgakopoulos, Mark Hornick, and Amith Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. Distributed and Parallel Databases, </title> <address> 3(2):117153, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The workflow camp also advocates the use of computers for personal productivity, but believes that the system should also play a hand in coordinating the execution of the tasks (e.g., see <ref> [16, 26, 34, 38] </ref>).
Reference: [17] <author> Ramesh Govindan and David P. Anderson. </author> <title> Scheduling and IPC mechanisms for continuous media. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 6880, </pages> <year> 1991. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented. <p> system is only a fraction of a percent of centralized and distributed CORBA systems for all 5 scenarios. 3 Real Time Parametrically Controlled In-Kernel Pipes Continuous media support at the operating system level has focused on ways to provide application code with access and control of kernel-level data, e.g, see <ref> [10, 13, 17] </ref>. However, these interfaces do not allow the application to influence the way resources are allocated to the components to address application-specific tradeoffs. The second form of dynamic negotiation explicitly addresses the management of the deadline-sensitive aspects of continuous media movement.
Reference: [18] <author> Pawan Goyal, Xingan Guo, and Harrick M. Vin. </author> <title> A hierarchical CPU scheduler for multimedia operating systems. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation (OSDI'96), </booktitle> <pages> pages 107121, </pages> <year> 1996. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented.
Reference: [19] <author> Adam Jonathan Griff and Gary J. Nutt. </author> <title> Tailorable location policies for distributed object systems, </title> <month> December </month> <year> 1997. </year> <note> submitted for publication. </note>
Reference-contexts: We found that the resource management policy for distributed objects is crucial to the overall performance, which led us to develop the Gryphon distributed object system <ref> [19] </ref>; this work is described in Section 2. <p> The requirements of object management have led to the development of the Gryphon system <ref> [19] </ref>, in which applications influence object management policy by dynamically providing hints and other directives regarding the location, caching, and consistency policy on a per object basis These hints are analyzed by the distributed Gryphon system (embedded in each object manager) which translates them into object manager policies for placing, caching, <p> A more complete description of the hint semantics and the Gryphon system are beyond the scope of this paper, but they can be found in <ref> [19] </ref>. To analyze the performance of a Gryphon system implementation, models based on the VPR environment are used to characterize traffic patterns resulting from different object managers.
Reference: [20] <author> Marty Humphrey, Toby Berk, Scott Brandt, and Gary Nutt. </author> <title> Dynamic quality of service resource management for multimedia applications on general purpose operating systems. </title> <booktitle> In 1997 IEEE Workshop on Middleware for Distributed Real-Time Systems and Services, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: Section 4 presents a generalized software architecture in which applications cooperate with resource managers through the use of execution levels and a dynamic quality of service manager (DQM) to allow 2 applications and resource managers to dynamically negotiate the level of resource usage by the appli-cation <ref> [7, 20] </ref>. The approach used in all three cases enables sets of applications to generate or consume the most appropriate amount of data given the precise dynamics of the situation. This paper presents our current results in each of these areas, though our work continues.
Reference: [21] <institution> Special Issue of IEEE Computer on Virtual Environments, </institution> <month> July </month> <year> 1995. </year> <editor> David R. Pratt, Michael Zyda, and Kristen Kelleher. </editor> <volume> 33 </volume>
Reference-contexts: This allowed us to explore the VPR design, implementation, and functionality, using commonly-available implementations, even though the performance of the prototypes was severely limited by the system implementation. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 21, 22] </ref>) there is surprisingly little on the effect the operating system has on the 4 (D)VE's performance. Once we had developed the rudimentary VPR, we were able to explore system software design and organization that might be well-suited to this application domain.
Reference: [22] <institution> Special Issue of IEEE Computer on Multimedia Systems and Applications, </institution> <month> May </month> <year> 1995. </year> <editor> Arturo A. Rodriguez and Lawrence A. </editor> <title> Rowe, Guest Editors. </title>
Reference-contexts: This allowed us to explore the VPR design, implementation, and functionality, using commonly-available implementations, even though the performance of the prototypes was severely limited by the system implementation. Despite the number of papers focusing on VE/VR functionality, design, and user interfaces, (e.g., see <ref> [2, 21, 22] </ref>) there is surprisingly little on the effect the operating system has on the 4 (D)VE's performance. Once we had developed the rudimentary VPR, we were able to explore system software design and organization that might be well-suited to this application domain.
Reference: [23] <author> E. Douglas Jensen, C. Douglass Locke, and Hideyuki Toduda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 112122. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: As a result, a second option was implemented that restricts the change in level to at most 1. This policy is similar to the value-based approach proposed for the Alpha kernel <ref> [23] </ref>. Hybrid. This policy uses Optimal to specify the initial QoS allocations, and then uses different algorithms to decide which levels to modify dynamically as resource availability changes.
Reference: [24] <author> Michael B. Jones, Daniela Rosu, and Marcel-Catalin Rosu. </author> <title> Cpu reservations and time constraints: Efficient, predictable scheduling of independent activities. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating System Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented. <p> The additional requirement on the application is to provide execution time estimates with a range and a confidence; this is only a slightly more complex approach than is described in the use of Rialto <ref> [24] </ref>. <p> Several operating systems designers have created designs and interfaces to support some form of soft real-time operation. These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach [25] and Rialto <ref> [24] </ref>; (2) specify a range of resource allocations as in MMOSS [14]; or (3) specify a measure of application 21 importance that can be used to compute a fair resource allocation as in SMART [27].
Reference: [25] <author> Cliff Mercer, Stephan Savage, and Hideyuki Tokuda. </author> <title> Processor capacity reserves: Operating system support for multimedia applications. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 9099, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented. <p> Several operating systems designers have created designs and interfaces to support some form of soft real-time operation. These new operating systems interfaces allow a process to either (1) negotiate with the operating system for a specific amount of resources as in RT Mach <ref> [25] </ref> and Rialto [24]; (2) specify a range of resource allocations as in MMOSS [14]; or (3) specify a measure of application 21 importance that can be used to compute a fair resource allocation as in SMART [27]. <p> In the extreme, the applications may be forced to dynamically adapt to a strategy in which the resource allocation is less than that required for average-case execution. Mercer, et al. suggest that a dynamic resource manager could be created to deal with situation of processor overload <ref> [25] </ref>. In Rialto, the researchers have used the mechanism to develop an application repertoire (though there was apparently no attempt to define a general model for its use). In the DQM framework applications are constructed to take advantage of such mechanisms without having to participate in a detailed negotiation protocol.
Reference: [26] <author> C. Mohan. </author> <title> Tutorial: State of the art in workflow management system research and products. </title> <booktitle> a tutorial at the ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: The workflow camp also advocates the use of computers for personal productivity, but believes that the system should also play a hand in coordinating the execution of the tasks (e.g., see <ref> [16, 26, 34, 38] </ref>).
Reference: [27] <author> Jason Nieh and Monica S. Lam. </author> <title> The design, implementation and evaluation of SMART: A sched-uler for multimedia applications. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: Supporting Continuous Media Audio and video streams flow among VPR objects. While protocols can make assurances regarding the isochronous network transfer rate, only a few operating systems attempt to make guarantees regarding the throughput rate through the operating system itself <ref> [10, 17, 18, 24, 25, 27] </ref>. We wanted VPR applications to be able to tradeoff loss, jitter, and latency in each stream with other activity in the VPR. Distributed Objects Our application software is all object-oriented. <p> the operating system for a specific amount of resources as in RT Mach [25] and Rialto [24]; (2) specify a range of resource allocations as in MMOSS [14]; or (3) specify a measure of application 21 importance that can be used to compute a fair resource allocation as in SMART <ref> [27] </ref>. These systems all provide a mechanism that can be used to reduce the resource allotment granted to the running applications. Even though the system is able to allocate resources more aggressively, the hypothesis is that soft real-time applications will still perform acceptably.
Reference: [28] <author> Gary Nutt, Toby Berk, Scott Brandt, Marty Humphrey, and Sam Siewert. </author> <title> Resource management for a virtual planning room. </title> <booktitle> In Proceedings of the Third International Workshop on Multimedia Information Systems, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: Therefore, we began to define and experiment with ways for the system to provide more effective support for the VPR (as originally reported in the conference paper from which this paper is derived <ref> [28] </ref>). We found that the resource management policy for distributed objects is crucial to the overall performance, which led us to develop the Gryphon distributed object system [19]; this work is described in Section 2.
Reference: [29] <author> Gary J. Nutt. </author> <title> Model-based virtual environments for collaboration. </title> <type> Technical Report CU-CS-799-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Activity takes place in the world when objects interact with one another. Domain-specific tools are added to the VPR by incorporating additional objects having complex behavior. For example, a formal workflow/process modeling system can be embedded in the VPR to focus on group coordination <ref> [29] </ref>. The fundamental role of the VPR is to to provide real-time audio and video support across the network, to render objects on each user's screen (according to the avatar's orientation), and to provide an environment in which to add domain-specific extensions.
Reference: [30] <author> Gary J. Nutt. </author> <title> The evolution toward flexible workflow systems. </title> <journal> Distributed Systems Engineering, </journal> <volume> 3:276294, </volume> <year> 1996. </year>
Reference-contexts: Elsewhere we described barriers to the effective use of distributed systems for supporting collaborative work <ref> [30] </ref>.
Reference: [31] <author> Gary J. Nutt, Joe Antell, Scott Brandt, Chris Gantz, Adam Griff, and Jim Mankovich. </author> <title> Software support for a virtual planning room. </title> <type> Technical Report CU-CS-800-95, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> December </month> <year> 1995. </year> <month> 34 </month>
Reference-contexts: One manifestation of such an environment is a DVE containing domain-specific tools. Not only can group members conduct informal discussions in the DVE, the common (virtual) artifact frames the discussion and provides a set of domain-specific tools manipulating that artifact. Our VPR <ref> [31] </ref> is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms [15, 37] and other virtual environments [1, 5, 12], but is unique in its support for domain-specific tools.
Reference: [32] <institution> Opengl performance benchmarks. </institution> <note> WWW page at http://www.specbench.org/gpc/opc.static, 1997. </note>
Reference-contexts: The table shows frames per second generated and time used as a percentage of the highest level. The OpenGL Performance Characterization Organization <ref> [32] </ref> has similar benchmark examples showing applications that exhibit 10 different execution levels with CPU requirements varying by as much as a factor of 10.
Reference: [33] <author> Krithi Ramamritham and John A. Stankovic. </author> <title> Scheduling algorithms and operating systems support for real-time systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 82(1):5568, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Hard real-time system technology has been developed in domains where the operating system must guarantee that each task admitted to the system can be completed prior to a prespecified deadline <ref> [33] </ref>. Such systems are, of necessity, conservative: Task processing estimates are expressed in terms of the worst case execution time (WCET), admission is based on the assumption that every task uses its maximum amount of resources, and the schedule ensures that all admitted tasks execute by their deadline.
Reference: [34] <author> Amit Sheth, </author> <title> editor. NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-art and Future Directions. </title> <institution> NSF and the University of Georgia, </institution> <year> 1996. </year>
Reference-contexts: The workflow camp also advocates the use of computers for personal productivity, but believes that the system should also play a hand in coordinating the execution of the tasks (e.g., see <ref> [16, 26, 34, 38] </ref>).
Reference: [35] <author> Sam Siewert, Gary J. Nutt, and Marty Humphrey. </author> <title> A real-time execution performance agent interface to parametrically controlled in-kernel pipelines. </title> <booktitle> In Proceedings of the Third IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 172177, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: Collaboration environments such as the VPR cause huge amounts of audio and video data to be frequently moved; Section 3 describes new, flexible support for device-to-device processing involving confidence-based execution of threads managing the real-time delivery and processing of this data across nodes <ref> [35] </ref>. Section 4 presents a generalized software architecture in which applications cooperate with resource managers through the use of execution levels and a dynamic quality of service manager (DQM) to allow 2 applications and resource managers to dynamically negotiate the level of resource usage by the appli-cation [7, 20]. <p> The second form of dynamic negotiation explicitly addresses the management of the deadline-sensitive aspects of continuous media movement. The real-time, parametrically-controlled in-kernel pipe (RT-PCIP) mechanism, used in conjunction with an execution performance agent (EPA) tool, manages threads that execute modules in a device-to-device pipeline architecture <ref> [35] </ref>. In this aspect of the work, the goal is to dynamically negotiate the policy for allocating resources used to move data from one node to another, or within one node, from one device such as a disk to another device such as the sound card.
Reference: [36] <author> Andrew S. Tanenbaum. </author> <title> Distributed Operating Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1995. </year>
Reference-contexts: Finally, objects such as x and y in the figure are placed at a client, yet can be referenced from other clients. In addition to influencing the location and caching policies of an object, the application can weaken the consistency requirement <ref> [36] </ref> for cached objects. For example, if an object is being edited by one avatar on one client, other client machines may only need to update their cached copy of the object 8 every few minutes (they may even use session semantics for this type of object consistency).
Reference: [37] <author> Harrick M. Vin, Polle T. Zellweger, Daniel C. Swinehart, and P. Venkat Rangan. </author> <title> Multimedia conferencing in the etherphone environment. </title> <journal> IEEE Computer, </journal> <volume> 24(10):237268, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: Not only can group members conduct informal discussions in the DVE, the common (virtual) artifact frames the discussion and provides a set of domain-specific tools manipulating that artifact. Our VPR [31] is a multiperson DVE supporting free-form communication in a manner similar to electronic meeting rooms <ref> [15, 37] </ref> and other virtual environments [1, 5, 12], but is unique in its support for domain-specific tools. A VPR world is defined by a collection of objects, with visual representations and behaviors of varying complexity.
Reference: [38] <author> WFMC Members. </author> <title> A workflow management coalition specification: Glossary and document of understanding. Technical Report Document Number TC00-0011, Workflow Management Coalition, </title> <address> Brussells, Belgium, </address> <month> August </month> <year> 1994. </year> <month> 35 </month>
Reference-contexts: The workflow camp also advocates the use of computers for personal productivity, but believes that the system should also play a hand in coordinating the execution of the tasks (e.g., see <ref> [16, 26, 34, 38] </ref>).
References-found: 38

