URL: http://www.cs.caltech.edu/~ps/papers/func.comp.ps.Z
Refering-URL: http://www.cs.caltech.edu/~ps/papers/
Root-URL: http://www.cs.caltech.edu
Title: Functional Composition Algorithms via Blossoming  
Author: Tony D. DeRose, Ronald N. Goldman, Hans Hagen, Stephen Mann 
Keyword: Categories and Subject Descriptors: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling curve, surface, and object representations; J.6 [Computer-Aided Engineering]: Computer-Aided Design. General Terms: Algorithms. Additional Key Words and Phrases: B-splines, Bezier curves, triangular Bezier surface patches, tensor-product surface patches, computer aided geometric design, free-form deformations.  
Note: 0 This work was supported in part by the Xerox Corporation, IBM, Hewlett-Packard, the Digital Equipment Corporation, and the National Science Foundation under grants CCR-8957323 and DMC-8802949.  
Address: Seattle, WA 98195  P.O. Box 1892, Houston, Texas 77251  Postfach 3049, 6750 Kaiserslautern, West Germany  
Affiliation: Department of Computer Science and Engineering, FR-35, University of Washington,  Department of Computer Science, Rice University,  Universitaet Kaiserslautern, FB Informatik,  
Abstract: In view of the fundamental role that functional composition plays in mathematics, it is not surprising that a variety of problems in geometric modeling can be viewed as instances of the following composition problem: given representations for two functions F and G, compute a representation of the function H = F ffi G: We examine this problem in detail for the case when F and G are given in either Bezier or B-spline form. Blossoming techniques are used to gain theoretical insight into the structure of the solution which is then used to develop efficient, tightly codable algorithms. From a practical point of view, if the composition algorithms are implemented as library routines, a number of geometric modeling problems can be solved with a small amount of additional software. This paper was published in TOG, April 1993, pg 113-135 Copyright 1993 by the Association for Computing Machinery, Inc. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or direct commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works, requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept, ACM Inc., 1515 Broadway, New York, NY 10036 USA, fax +1 (212) 869-0481, or &lt;permissions@acm.org&gt;. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip Barry and Ronald Goldman. </author> <title> Algorithms for progressive curves: Extending B-splines and b lossoming techniques to the monomial, power, and Newton dual forms of a curve_Submitted for publication. </title>
Reference-contexts: For example, applying this result to the polynomial Q (u) given in Equation (3) using as the domain simplex the interval <ref> [0; 1] </ref>, we find that V (2;0) = q (0; 0) = 1 3 V (0;2) = q (1; 1) = 1 A straightforward approach to evaluate an arbitrary value q (u 1 ; :::; u d ) of a blossom would be to explicitly compute an expression similar to Equation <p> Fortunately, arbitrary blossom values can be computed directly from the B-spline control points using an algorithm similar to the Cox-de Boor algorithm (c.f. <ref> [1, 19] </ref>). Thus, Equation (8) can be applied on a segment by segment basis to implement step 2 above without converting F to Bezier form.
Reference: [2] <author> Philip Barry and Ronald Goldman. </author> <title> Knot insertion algorithms. </title> <note> Submitted for publication. </note>
Reference-contexts: For G, knots of full multiplicity must be inserted at each of the breakpoints of H constructed above. 2. Compute the Bezier control polygon of each segment of H using the Bezier composition algorithm. 3. Meld the Bezier control polygons (and weights) into a single B-spline representation for H <ref> [2, 14, 17] </ref>. This is essentially our approach, except that F does not need to be converted to Bezier form.
Reference: [3] <author> I. Brueckner. </author> <title> Construction of Bezier points of quadrilaterals from those of triangles. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 12(1) </volume> <pages> 21-24, </pages> <year> 1980. </year>
Reference-contexts: Since G is in triangular form, so is H, and since G (t) = t, H (t) = F (t). Conversion from a triangular patch F to an equivalent tensor product H can be accomplished using the method of Brueckner <ref> [3] </ref>; alternatively, the problem can be recast as composition by constructing G to be a 3 bilinear representation of the identity map.
Reference: [4] <editor> C. de Boor. B-form basics. In G. Farin, editor, </editor> <booktitle> Geometric Modeling: Algorithms and New Trends, </booktitle> <pages> pages 131-148. </pages> <publisher> SIAM, </publisher> <year> 1987. </year>
Reference-contexts: Notice that each of the Bernstein polynomials is a homogeneous polynomial of degree d, a fact that will become important when considering rational functions. It is known <ref> [4] </ref> that for every polynomial Q : X ! Y of degree d, where X is an affine space of dimension k and Y is an affine space of dimension K, there exist unique points fV ~-g ~-2II d k in Y such that Q (u) = ~-2II d V ~-B
Reference: [5] <author> Tony D. DeRose. </author> <title> Composing Bezier simplexes. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 7(3) </volume> <pages> 198-221, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: 1 Introduction and Motivation Many problems in curve and surface modeling can be viewed as instances of functional composition. In <ref> [5] </ref> two procedures for composing multivariate polynomials given in Bezier simplex form were derived: one called the product algorithm, the other called the blossom algorithm. The product algorithm was found to be more efficient for machine implementation whereas the blossom algorithm was found to be geometrically more intuitive. <p> The purpose of this paper is to extend the work begun in <ref> [5] </ref> to tensor products, rational functions, and to B-splines. <p> For example, if G is given in tensor product form, then H will most naturally be represented in tensor product form. Instead of directly generalizing the proofs given in <ref> [5] </ref>, we have taken a new approach that considerably simplifies the derivation of the blossom algorithm. In fact, the new proof technique is powerful enough to allow the extensions to be addressed with very little additional effort. <p> In Section 2, we begin by presenting several problems that can be solved with composition. In Section 3, we present background material. The basic proof techniques used in this paper are developed in Section 4.1 by rederiving the formula given in <ref> [5] </ref> upon which the blossom algorithm is based. In Section 4.2, we generalize these ideas to the composition of tensor products. The results in Sections 4.1 and 4.2 are readily extended to rational functions, as shown in Section 4.3. <p> use of the following product relation satisfied by the Bernstein polynomials: B I (u) = C (I)B dm 6 where C (I) is a combinatorial constant given by C (I) = j~-1 j ! ~-m jjIjj jIj This relation is easily proved using simple manipulation of the Bernstein polynomials (c.f. <ref> [5] </ref>). Ramshaw [16] has recently discovered how to exploit a connection between Bezier simplexes and symmetric multi-affine maps. <p> This result is then generalized to tensor products, to rational functions, and to B-splines. 4.1 Composing Bezier Simplexes There are several ways to address the problem of polynomial composition. The approach in <ref> [5] </ref> is to express both polynomials in Bernstein form and manipulate the Bernstein polynomials. Another approach is to manipulate the blossoms of both polynomials using only the symmetry property of the blossom [15]. Both methods yield the same formula as the one given below in Equation (8). <p> The blossom is used as the representation for one of the polynomials, whereas the Bernstein representation is used for the other polynomial. To introduce our method, we first rederive the blossom algorithm of <ref> [5] </ref> using the hybrid proof technique.
Reference: [6] <author> Tony D. DeRose. </author> <title> A coordinate-free approach to geometric programming. </title> <note> In Math for Sig-graph. Siggraph Course Notes #23, 1989. Also available as Technical Report No. </note> <institution> 89-09-16, Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA (September, </address> <year> 1989). </year>
Reference-contexts: d where b 0 ; :::; b k are the barycentric coordinates of u 2 X relative to a simplex = (x 0 ; :::; x k ) of points in X : (For a description of affine spaces, simplexes, and barycentric coordinates see, for instance, Farin [8] or DeRose <ref> [6] </ref>.) A polynomial Q, when expressed as in Equation 1, is called a Bezier simplex; the points V ~- are called the control net of Q with respect to the domain simplex : We shall often write B d ~- (u) with the understanding that u should be replaced with its
Reference: [7] <author> Tony D. DeRose. </author> <title> Rational Bezier curves and surfaces on projective domains. </title> <editor> In G. Farin, editor, </editor> <booktitle> NURBS for Curve and Surface Design, </booktitle> <pages> pages 35-45. </pages> <publisher> SIAM, </publisher> <year> 1991. </year>
Reference-contexts: Thus, Q (au) = Proj ( ^ Q (au)) = Proj (a d ^ Q (u)) = Proj ( ^ Q (u)) = Q (u): A more complete investigation of Equation (7) and its connection to projective spaces is provided in <ref> [7] </ref>.
Reference: [8] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design. </title> <publisher> Academic Press, </publisher> <address> second edition, </address> <year> 1990. </year> <month> 22 </month>
Reference-contexts: 2 To express G in rational Bezier form, we must put u and v over a common denominator, G (b 0 ; b 1 ; b 2 ) = b 1 + b 2 from which the control points and weights can be obtained by a simple change of basis <ref> [8] </ref>. <p> d V ~-B d where b 0 ; :::; b k are the barycentric coordinates of u 2 X relative to a simplex = (x 0 ; :::; x k ) of points in X : (For a description of affine spaces, simplexes, and barycentric coordinates see, for instance, Farin <ref> [8] </ref> or DeRose [6].) A polynomial Q, when expressed as in Equation 1, is called a Bezier simplex; the points V ~- are called the control net of Q with respect to the domain simplex : We shall often write B d ~- (u) with the understanding that u should be <p> For instance, a Bezier tensor product patch can be degree raised by degree raising each column of the control net using the Bezier curve algorithm, then degree raising each of the resulting rows <ref> [8] </ref>. A similar, although slightly more complex, procedure holds for composing Bezier simploids F and G. However, the resulting algorithm does not reuse partial results as efficiently as the one we now develop. Our method uses the tensor product variant of the blossom [16].
Reference: [9] <author> Ronald N. Goldman and Dan Filip. </author> <title> Conversion from Bezier rectangles to Bezier triangles. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 19(1) </volume> <pages> 25-28, </pages> <year> 1987. </year>
Reference-contexts: Here equivalent means that H (t) = F (t) for all points t in the parameter space. An algorithm for solving this problem has been given by Goldman and Filip <ref> [9] </ref>; Figure 2 indicates a new solution based on composition. We construct a degree 1 triangular Bezier representation of the identity map of the parameter plane onto itself. That is, we construct G such that G (t) = t.
Reference: [10] <author> B. Grunbaum. </author> <title> Convex Polytopes. </title> <publisher> Interscience, </publisher> <address> London, New York, </address> <year> 1969. </year>
Reference-contexts: Rather than considering these cases separately, we shall unify them by formulating and solving a single general problem. The general problem is based on the notion of a simploid, a polyhedron formed as the Cartesian product of simplexes <ref> [10] </ref>. A square is a simple example of a simploid, formed as the Cartesian product of two line segments (i.e., two one-dimensional simplexes). A three-dimensional simploid can be obtained as the Cartesian product of a triangle and a line segment, resulting in a triangular prism.
Reference: [11] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 1. </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1969. </year>
Reference-contexts: The ordering we use is the lexicographic ordering of tuples <ref> [11] </ref>: ~- = (i 0 ; :::; i k ) &lt; ~| = (j 0 ; :::; j k ) if there is some a, 0 a k such that i b = j b for 0 b &lt; a but i a &lt; j a .
Reference: [12] <author> Charles T. Loop and Tony D. DeRose. </author> <title> A multisided generalization of Bezier surfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 8(3) </volume> <pages> 204-234, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The vertex (1; 0; 0) is therefore "blown up". Since G is in triangular patch form, the control points and weights of H = F ffi G will form a rational triangular representation for the surface of revolution. Composition is also a useful tool when dealing with S-patches <ref> [12, 13] </ref>. S-patches are rational generalizations of Bezier surfaces that admit any number n of boundary curves. In [12] it is shown how to use composition to convert an n-sided S-patch into an m-sided S-patch, for arbitrary n and m. <p> Composition is also a useful tool when dealing with S-patches [12, 13]. S-patches are rational generalizations of Bezier surfaces that admit any number n of boundary curves. In <ref> [12] </ref> it is shown how to use composition to convert an n-sided S-patch into an m-sided S-patch, for arbitrary n and m. Another problem that can be solved using composition is finding the representation of a trimmed tensor product patch as a collection of untrimmed S-patches.
Reference: [13] <author> Charles T. Loop and Tony D. DeRose. </author> <title> Generalized B-spline surfaces of arbitrary topology. </title> <booktitle> In SIGGRAPH '90 Proceedings, </booktitle> <pages> pages 347-356, </pages> <year> 1990. </year>
Reference-contexts: The vertex (1; 0; 0) is therefore "blown up". Since G is in triangular patch form, the control points and weights of H = F ffi G will form a rational triangular representation for the surface of revolution. Composition is also a useful tool when dealing with S-patches <ref> [12, 13] </ref>. S-patches are rational generalizations of Bezier surfaces that admit any number n of boundary curves. In [12] it is shown how to use composition to convert an n-sided S-patch into an m-sided S-patch, for arbitrary n and m.
Reference: [14] <author> T. Lyche and K. Morken. </author> <title> Knot removal for parametric B-spline curves and surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4(3) </volume> <pages> 217-230, </pages> <year> 1987. </year>
Reference-contexts: For G, knots of full multiplicity must be inserted at each of the breakpoints of H constructed above. 2. Compute the Bezier control polygon of each segment of H using the Bezier composition algorithm. 3. Meld the Bezier control polygons (and weights) into a single B-spline representation for H <ref> [2, 14, 17] </ref>. This is essentially our approach, except that F does not need to be converted to Bezier form.
Reference: [15] <author> Lyle Ramshaw. </author> <type> Personal communication. </type>
Reference-contexts: The approach in [5] is to express both polynomials in Bernstein form and manipulate the Bernstein polynomials. Another approach is to manipulate the blossoms of both polynomials using only the symmetry property of the blossom <ref> [15] </ref>. Both methods yield the same formula as the one given below in Equation (8). The approach taken here is a hybrid of the above two methods that results in a concise proof.
Reference: [16] <author> Lyle Ramshaw. </author> <title> Blossoming: A connect-the-dots approach to splines. </title> <type> Technical Report 19, </type> <institution> Digital Systems Research Center, </institution> <address> Palo Alto, Ca. </address>
Reference-contexts: Ramshaw <ref> [16] </ref> has recently discovered how to exploit a connection between Bezier simplexes and symmetric multi-affine maps. <p> Since Q maps into the affine subset of IR K+1 , it must be that ^ Q 0 (u) + + D (u) or equivalently, that ^ Q 0 (u) + + ^ Q K (u) = D (u): 3 Ramshaw has given a purely coordinate-free development <ref> [16] </ref>. 9 EvalBlossom (V , u 1 ; : : : ; u d ) f V is the control net for a Bezier simplex characterizing a blossom q returned is the point q (u 1 ; :::; u d )g begin V Prepare (V ) for ` = 1 to <p> A similar, although slightly more complex, procedure holds for composing Bezier simploids F and G. However, the resulting algorithm does not reuse partial results as efficiently as the one we now develop. Our method uses the tensor product variant of the blossom <ref> [16] </ref>.
Reference: [17] <author> P. Sablonniere. </author> <title> Spline and Bezier polygons associated with a polynomial spline curve. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 10(4) </volume> <pages> 257-261, </pages> <year> 1978. </year>
Reference-contexts: For G, knots of full multiplicity must be inserted at each of the breakpoints of H constructed above. 2. Compute the Bezier control polygon of each segment of H using the Bezier composition algorithm. 3. Meld the Bezier control polygons (and weights) into a single B-spline representation for H <ref> [2, 14, 17] </ref>. This is essentially our approach, except that F does not need to be converted to Bezier form. <p> Once again, the idea is to pull back the knots lines of F to construct the knot vector for H, convert G to piecewise Bezier form, apply Equation (8) segment by segment, and then use Sablonniere's algorithm <ref> [17] </ref> to recover the B-spline representation of H.
Reference: [18] <author> Thomas W. Sederberg and Scott R. Parry. </author> <title> Free-form deformation of solid geometric models. </title> <booktitle> In Proceedings of SIGGRAPH '86, </booktitle> <pages> pages 151-160, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Particular problems that can be solved using these composition algorithms include: evaluation, subdivision, and non-linear reparameterization of Bezier simplexes (i.e., curves, triangular patch surfaces, etc.); exact representations of shapes modeled in Bezier simplex form that have undergone free-form deformation <ref> [18] </ref>; and the joining of two Bezier curves with geometric continuity of arbitrary order. The purpose of this paper is to extend the work begun in [5] to tensor products, rational functions, and to B-splines. <p> A composition algorithm can be used to compute the control points and weights of H; giving an explicit and exact B-spline representation of the surface curve. Composition can similarly be used to compute explicit and exact representations of B-splines that have undergone free-form deformations <ref> [18] </ref>. If G is the B-spline model, and if F is the tensor product Bezier deformation of three-space, then H = F ffi G is the deformed model. product B-spline surface F , in this case a cylinder.
Reference: [19] <author> Hans-Peter Seidel. </author> <title> Knot insertion from a blossoming point of view. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5(1) </volume> <pages> 81-86, </pages> <year> 1988. </year>
Reference-contexts: Fortunately, arbitrary blossom values can be computed directly from the B-spline control points using an algorithm similar to the Cox-de Boor algorithm (c.f. <ref> [1, 19] </ref>). Thus, Equation (8) can be applied on a segment by segment basis to implement step 2 above without converting F to Bezier form.
Reference: [20] <author> Joe Warren. </author> <title> The effect of base points on rational Bezier surfaces. To appear. 23 Color Plate 1: The B-spline representation of a rational B-spline curve on a rational B-spline surface. The blue and gray balls are the control points of the curve; the blue balls are where B-spline segments abut. </title> <type> 24 </type>
Reference-contexts: The transformation G : 2 Quadratic transformations have been used elsewhere in CAGD. For example, Warren has recently used them to develop n-sided patch representations <ref> [20] </ref>. 4 (b 0 ; b 1 ; b 2 ) ! (u; v) is given by: u = b 1 + b 2 To express G in rational Bezier form, we must put u and v over a common denominator, G (b 0 ; b 1 ; b 2 )
References-found: 20

