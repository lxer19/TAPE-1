URL: ftp://ftp.cs.rutgers.edu/pub/borgida/protodl-CIKM92.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~borgida/index.html
Root-URL: http://www.cs.rutgers.edu
Title: Customizable Classification Inference in the ProtoDL Description Management System  
Author: Alex Borgida Ronald J. Brachman 
Date: February 23, 1993  
Address: New Brunswick, NJ 08903  Murray Hill, NJ 07974  
Affiliation: Dept. of Computer Science Rutgers University  AT&T Bell Laboratories  
Abstract: Description Languages (DLs) form the basis of several knowledge base management systems developed in recent years. DLs have logics that support reasoning with intensional descriptions and the subsump-tion relationship between them, and provide services not available in other KBMS. After a brief review of DL-based KBMS, we motivate the need for being able to extend the expressive power of the associated languages and customize the inferences drawn by them. We present the architecture of ProtoDL, which facilitates the addition of new description constructors to a DL, and the addition to the implementation of all the necessary inferences to support them. This extensibility provides a number of advantages, including the ability to introduce domain-specific language features (e.g., for time, planning, etc.), and a new alternative to the unpleasant traditional choice between building systems that are fully expressive (at the cost of incomplete or unpredictably slow implementation) and systems of restricted expressive power (at the cost of being unusable in many practical applications). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, R., Borgida, A., and Jagadish, H.V., </author> <title> "Efficient Management of Transitive Relationships in Large Data and Knowledge Bases," </title> <booktitle> Proc. ACM SIG-MOD '89, </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Efficient concept hierarchy management: In order to manage large hierarchies, and especially to answer quickly questions about subsumption and disjointness relations that are transitive, we have designed a module that can perform these operations quickly (in the same sense that hashing is quick), while allowing incremental updates to the hierarchy <ref> [1] </ref>. 5 Related work and Summary We have already mentioned work on extensible DBMS as having similar high-level goals as ours, although very different specifics.
Reference: [2] <author> Anwar, T.M., Beck H. and Navathe S., </author> <title> "Knowledge Mining by imprecise querying: a classification-based approach", </title> <booktitle> Proc. 8th IEEE Data Engineering Conf., </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992, </year> <pages> 622-630. </pages>
Reference-contexts: presenting a more natural conceptual model to users and especially offering support for data exploration: the KBMS itself can organize queries (not just their answers!) into an IS-A (subsumption) hierarchy, which can significantly support teams of people exploring data over extended periods of time, and the paradigm of query refinement <ref> [8, 2, 19, 10] </ref>. More surprisingly, in systems such as classic , individuals can be asserted to be instances of descriptions; i.e., descriptions are views that can be "updated".
Reference: [3] <author> Beck, H. W., Gala, S. K., and Navathe, S. B., </author> <title> "Classification as a Query Processing Technique in the CANDIDE Semantic Data Model," </title> <booktitle> Proc. 5th IEEE Data Engineering Conf., </booktitle> <month> February </month> <year> 1989, </year> <pages> pp. 572-581. </pages>
Reference-contexts: Some of these systems (e.g.,ldl [16]) are based squarely on predicate logic, while others (e.g., post-gres [21]) are based on condition-action rules. The subject of this paper is a third class of KBMS, exemplified by classic [5], candideR <ref> [3] </ref>, and loom [15], which are based on so-called description (or terminological) logics (DLs), and are particularly adept at handling intensional information. Such systems manage information about individual objects, related by binary relationships (called roles, or multi- and single-valued attributes) and grouped into concepts.
Reference: [4] <author> Borgida, A., </author> <title> "From Type Systems to Knowledge Representation: Natural Semantics Specifications for Description Logics," </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 1(1), </booktitle> <year> 1992. </year>
Reference: [5] <author> Borgida, A., Brachman, R. J., McGuinness, D. L., and Resnick, L. A. </author> <title> "CLASSIC: A Structural Data Model for Objects," </title> <booktitle> Proc. 1989 ACM SIGMOD Conf., </booktitle> <month> June </month> <year> 1989, </year> <pages> pp. 59-67. </pages>
Reference-contexts: Some of these systems (e.g.,ldl [16]) are based squarely on predicate logic, while others (e.g., post-gres [21]) are based on condition-action rules. The subject of this paper is a third class of KBMS, exemplified by classic <ref> [5] </ref>, candideR [3], and loom [15], which are based on so-called description (or terminological) logics (DLs), and are particularly adept at handling intensional information. Such systems manage information about individual objects, related by binary relationships (called roles, or multi- and single-valued attributes) and grouped into concepts.
Reference: [6] <author> Borgida, A., and Brachman, R. J., </author> <title> "The Architecture of a Customizable Knowledge Base Management System", </title> <note> (in preparation). </note>
Reference: [7] <author> Borgida, A., and Brachman, R., </author> <title> "Inference in the Interface to Intelligent and Cooperative Information Systems," </title> <booktitle> Workshop on Intelligent and Cooperative Information Systems, </booktitle> <month> October, </month> <year> 1991, </year> <title> Como, </title> <address> Italy. </address>
Reference-contexts: A description in a DL can obviously be viewed as a query specification that can be "evaluated" against a database of individuals to retrieve those that satisfy it. The advantages of using DLs for this task <ref> [7] </ref> include the possibility of presenting a more natural conceptual model to users and especially offering support for data exploration: the KBMS itself can organize queries (not just their answers!) into an IS-A (subsumption) hierarchy, which can significantly support teams of people exploring data over extended periods of time, and the
Reference: [8] <author> R.Brachman, P.Selfridge, L.Terveen, B.Altman, A.Borgida, F.Halper, T.Kirk, A.Lazar, D.McGuiness, L.Alperin Resnick, </author> <title> "Knowledge representation support for data archaelogy", </title> <booktitle> 1st Intern. Conf. on Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: presenting a more natural conceptual model to users and especially offering support for data exploration: the KBMS itself can organize queries (not just their answers!) into an IS-A (subsumption) hierarchy, which can significantly support teams of people exploring data over extended periods of time, and the paradigm of query refinement <ref> [8, 2, 19, 10] </ref>. More surprisingly, in systems such as classic , individuals can be asserted to be instances of descriptions; i.e., descriptions are views that can be "updated".
Reference: [9] <author> Devanbu, P., and Litman, D., </author> <title> "Plan-based Terminological Reasoning," </title> <booktitle> Proc. KR'91, </booktitle> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Not surprisingly, specific families of applications have additional forms that would be well supported by DLs. In fact, several research efforts have provided domain-specific logics dealing with such topics as time and actions and plans <ref> [9] </ref>. Such specialized constructors can be added as extensions to ProtoDL. * The ensuing modularization of the KBMS architecture facilitates experimenting with different processing strategies in order to tune performance, and encourages the development of shared technology, similar to that used in programming language compilers (e.g., parsers and lexers). <p> Secondly, the suggested algorithms for procedures Conjoin K and Subsumes? K are not obligatory in order to allow complex implementation tricks, such as the use of finite automata to represent and reason about plans <ref> [9] </ref>. 3.3 Experience To date, we have developed the detailed specification of ProtoDL, and have filled in the procedures required for adding to the kernel the following DCs: those appearing in classic (bounds on role cardinal-ity (at-least, at-most), all restrictions, sets of individuals as fillers and restrictions, primitives and disjoint primitives, <p> requested by users of classic, including numeric ranges (e.g., 2..5), at-least-vr (which provides a numeric lower bound on the number of fillers of a certain kind and is therefore a generalization of some), concept disjunction and negation in all restrictions; and the extensions to classic required by the clasp system <ref> [9] </ref> in order to reason about plans and actions. We have thus been able to reconstruct almost the entire classic system, and, significantly, the implementations are almost the same. <p> This is probably the most significant distinction between previous attempts at building extensible reasoning systems and the present one. In fact, by following this systematic procedure we have discovered incompleteness in a summer student's implementation of concept disjunction and in clasp <ref> [9] </ref>. * Default implementations for several procedures: Conjoin, Subsume?, and other functions are put together from pieces provided by the user according to default algorithms, and hence make the job of the implementer easier in many cases. * Classification algorithms for concepts: The classification algorithms are already completely implemented, and make
Reference: [10] <author> Devanbu, P., Brachman, R. J., Ballard, B. W., and Selfridge, P. G., </author> <title> "LaSSIE: A Knowledge-Based Software Information System," </title> <journal> Communications of the ACM, </journal> <volume> 34(5), </volume> <month> May, </month> <year> 1991. </year>
Reference-contexts: presenting a more natural conceptual model to users and especially offering support for data exploration: the KBMS itself can organize queries (not just their answers!) into an IS-A (subsumption) hierarchy, which can significantly support teams of people exploring data over extended periods of time, and the paradigm of query refinement <ref> [8, 2, 19, 10] </ref>. More surprisingly, in systems such as classic , individuals can be asserted to be instances of descriptions; i.e., descriptions are views that can be "updated".
Reference: [11] <author> Donini, F., Lenzerini, M., Nardi, D., and Nutt, W., </author> <title> "Tractable Concept Languages", </title> <booktitle> Proc. </booktitle> <address> IJCAI'91, Australia, </address> <month> August </month> <year> 1991, </year> <pages> pp. 458-463. </pages>
Reference-contexts: For example, note the absence of constructors corresponding to disjunction (or) and negation (not) from our examples, and from classic in fact. There is a long history of results proving that some or other collection of DCs has a computa-tionally intractable subsumption problem (e.g., <ref> [11] </ref>). If such intractable (or worse, undecidable) constructors are added to the language, one is faced with the unpleasant choice of either delivering an incomplete implementation (one which does not make all deductions entailed by the obvious semantics) or one which may, unpredictably, bog down in computation.
Reference: [12] <author> Genesereth, M., </author> <title> "An overview of Meta-Level Architecture," </title> <booktitle> Proc. AAAI-83, </booktitle> <address> Washington, DC, </address> <year> 1983. </year>
Reference: [13] <author> Greiner, R., and Lenat, D., "RLL: </author> <title> A Representation Language Language," </title> <booktitle> Proc. AAAI-80, </booktitle> <address> Stanford, CA, </address> <year> 1980. </year>
Reference: [14] <author> Lenat, D., and Guha, R., </author> <title> Building Large Knowledge-Based Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Moreover, there seems to be no obvious way to add capabilities of DLs such as reasoning with incomplete information or organizing views/queries. Most prior related work in AI dealt with the "declarative" definition of frame systems (e.g., [13],[12]), and was thus not concerned with efficient implementation. cycl <ref> [14] </ref> is an exception, dealing with the efficient addition of new forms of inference rule schemas in first order predicate calculus.
Reference: [15] <author> MacGregor, R. M., </author> <title> "A Deductive Pattern Matcher," </title> <booktitle> Proc. AAAI-87, </booktitle> <address> St. Paul, MN, </address> <year> 1987, </year> <pages> pp. 403-408. </pages>
Reference-contexts: Some of these systems (e.g.,ldl [16]) are based squarely on predicate logic, while others (e.g., post-gres [21]) are based on condition-action rules. The subject of this paper is a third class of KBMS, exemplified by classic [5], candideR [3], and loom <ref> [15] </ref>, which are based on so-called description (or terminological) logics (DLs), and are particularly adept at handling intensional information. Such systems manage information about individual objects, related by binary relationships (called roles, or multi- and single-valued attributes) and grouped into concepts.
Reference: [16] <author> Naqvi, S.A., and Tsur, S., </author> <title> A Logic Language for Data and Knowledge Bases. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction 1.1 Description Logic KBMS In recent years there has been considerable interest in Knowledge Base Management Systems, which we interpret to be DBMS augmented with inferential services. Some of these systems (e.g.,ldl <ref> [16] </ref>) are based squarely on predicate logic, while others (e.g., post-gres [21]) are based on condition-action rules.
Reference: [17] <author> Nebel, B., </author> <title> "Computational Complexity of Terminological Reasoning in BACK," </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 371-383, </pages> <month> April, </month> <year> 1988. </year>
Reference-contexts: This constructor has been shown to make subsumption reasoning intractable <ref> [17] </ref>. function Conjoin K (T,This) = ;; conjoins description term K (T) to the normalized description This if UniversalConcept? K (T) then signal redundant exception. old := get K (This) ;; find the part of This dealing with constructor K if old 6= nil then if (T occurs syntactically in old)
Reference: [18] <author> Owsnicki-Klewe, B., </author> <title> "Configuration as a Consistency Maintenance Task," </title> <editor> in W. Hoeppner, editor, </editor> <booktitle> Proc. of GWAI-88, </booktitle> <publisher> Springer Verlag, </publisher> <month> September, </month> <year> 1988, </year> <pages> pp. 77-87. </pages>
Reference-contexts: Note that there is no need to "declare" the description ahead of time or give it a name, as would be the case with relational DBMS views. This aspect of DL-based KBMS has made them particularly appropriate and successful in configuration management systems <ref> [18] </ref>, where an initially incomplete design is being fleshed out, and correctness constraints need to be checked. In fact, classic is being used in such (proprietary) commercial applications.
Reference: [19] <author> Patel-Schneider, P. F., Brachman, R. J., and Levesque, H. J., "ARGON: </author> <title> Knowledge Representation Meets Information Retrieval," </title> <booktitle> Proc. First Conf. on Artificial Intelligence Applications, </booktitle> <address> Denver, CO, </address> <month> December, </month> <year> 1984, </year> <pages> pp. 280-286. </pages>
Reference-contexts: presenting a more natural conceptual model to users and especially offering support for data exploration: the KBMS itself can organize queries (not just their answers!) into an IS-A (subsumption) hierarchy, which can significantly support teams of people exploring data over extended periods of time, and the paradigm of query refinement <ref> [8, 2, 19, 10] </ref>. More surprisingly, in systems such as classic , individuals can be asserted to be instances of descriptions; i.e., descriptions are views that can be "updated".
Reference: [20] <author> Rowley, S., Shrobe, H., and Cassels, R. "Joshua: </author> <title> Uniform Access to Heterogeneous Knowledge Structures," </title> <booktitle> Proc. AAAI'86, </booktitle> <pages> pp. 48-52. </pages>
Reference-contexts: Most prior related work in AI dealt with the "declarative" definition of frame systems (e.g., [13],[12]), and was thus not concerned with efficient implementation. cycl [14] is an exception, dealing with the efficient addition of new forms of inference rule schemas in first order predicate calculus. Joshua <ref> [20] </ref> is also an effort at providing extensible reasoning, which allows the user (knowledge system engineer) the ability to change at compile-time the implementation of any or all of the elements of the protocol of inference, which describes the reasoning of the system.
Reference: [21] <author> Stonebraker, M., Rowe, L., </author> <booktitle> "The Design of POST-GRES," Proc. 1986 SIGMOD Conf., </booktitle> <address> Washington, DC, </address> <month> May </month> <year> 1986. </year> <month> 9 </month>
Reference-contexts: 1 Introduction 1.1 Description Logic KBMS In recent years there has been considerable interest in Knowledge Base Management Systems, which we interpret to be DBMS augmented with inferential services. Some of these systems (e.g.,ldl [16]) are based squarely on predicate logic, while others (e.g., post-gres <ref> [21] </ref>) are based on condition-action rules. The subject of this paper is a third class of KBMS, exemplified by classic [5], candideR [3], and loom [15], which are based on so-called description (or terminological) logics (DLs), and are particularly adept at handling intensional information.
References-found: 21

