URL: ftp://ftp.cs.columbia.edu/reports/reports-1989/cucs-461-89.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1989.html
Root-URL: http://www.cs.columbia.edu
Title: THE MELD PROGRAMMING LANGUAGE USER MANUAL  
Author: Bill N. Schilit Wen-Wey Hseush Shyhtsun Felix Wu Steven S. Popovich Bill Schilit, Wen-wey Hseush, Shyhtsun Felix Wu and Steven S. Popovich 
Note: Copyright 1989  Schilit is supported in part by the Center for Advanced Technology. Hseush, Wu, and Popovich are supported in part by the Center for Telecommunications Research.  
Date: 28 September 1989  
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: Technical Report CUCS-461-89 Research in Programming Systems is supported by National Science Foundation grants CCR-8858029 and CCR-8802741, by grants from AT&T, Citicorp, IBM, Siemens, Sun and Xerox, by the Center for Advanced Technology and by the Center for Telecommunications Research. 
Abstract-found: 1
Intro-found: 1
Reference: [Broy 85] <editor> Manfred Broy (editor). </editor> <title> Control flow and data flow: concepts of distributed programming. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: MELD employs the dataflow paradigm, and MELD programmers may take full advantage of dataflow programming at the statement level (or not, if they choose). MELD's dataflow does not presume a particular underlying machine architecture. For further information on dataflow and dataflow programming languages see <ref> [Wadge 85; Broy 85; Sharp 85] </ref>. A Note on the Examples The examples in this manual show all MELD reserved words in CAPITALS and all other program components in Mixed case. This is merely a convention, case is not significant for MELD reserved words.
Reference: [Goldberg 85] <author> Adele Goldberg. </author> <title> Smalltalk-80. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1985. </year>
Reference: [Hseush 88a] <author> Wenwey Hseush and Gail E. Kaiser. </author> <title> Concurrent Breakpointing. </title> <type> Technical Report CUCS-402-88, </type> <institution> Columbia University Department of Computer Science, </institution> <month> October, </month> <year> 1988. </year>
Reference: [Hseush 88b] <author> Wenwey Hseush and Gail E. Kaiser. </author> <title> Data Path Debugging: Data-Oriented Debugging for a Concurrent Programming Language. </title> <booktitle> In ACM SIGPlan/SIGOps Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 236-246. </pages> <address> Madison WI, </address> <month> May, </month> <year> 1988. </year> <journal> Special issue of SIGPlan Notices, </journal> <volume> 24(1), </volume> <month> January </month> <year> 1989. </year>
Reference: [Kaiser 87a] <author> Gail E. Kaiser and David Garlan. </author> <title> MELDing Data Flow and Object-Oriented Programming. </title> <booktitle> In Object-Oriented Programming Systems, Languages and Applications Conference, </booktitle> <pages> pages 254-267. </pages> <address> Orlando FL, </address> <month> October, </month> <year> 1987. </year> <journal> Special issue of SIGPlan Notices, </journal> <volume> 22(12), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Views Views are not present: assignment ::= | var := VIEWS: IS-PROD ( IDENTIFIER ) | var := VIEWS: IS-PROD ( IDENTIFIER ) BOOLOP express 9.4. Union The notion of union <ref> [Kaiser 87a; Kaiser 89a] </ref> is not present: body-unit ::= union union GETS IDENTIFER := IDENTIFER * IDENTIFER 9.5. Data Dependency Bug BALANCE := BALANCE + CASH; SEND "the balance is %d"(BALANCE) TO STDOUT; There is a bug in the data dependency analysis. This example will output the old balance.
Reference: [Kaiser 87b] <author> Gail E. Kaiser and David Garlan. MELD: </author> <title> A Declarative Notation for Writing Methods. </title> <booktitle> In 6th Annual International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 280-285. </pages> <address> Scottsdale AZ, </address> <month> February, </month> <year> 1987. </year>
Reference: [Kaiser 87c] <author> Gail E. Kaiser and David Garlan. </author> <title> Composing Software Systems from Reusable Building Blocks. </title> <booktitle> In 20th Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 536-545. </pages> <address> Kona HI, </address> <month> January, </month> <year> 1987. </year>
Reference: [Kaiser 87d] <author> Gail E. Kaiser and David Garlan. </author> <title> Melding Software Systems from Reusable Building Blocks. </title> <journal> IEEE Software :17-24, </journal> <month> July, </month> <year> 1987. </year>
Reference: [Kaiser 88] <author> Gail E. Kaiser. </author> <title> Concurrent MELD. September, </title> <booktitle> 1988 Presented at the Workshop on Object-Based Concurrent Programming. Available from the author. </booktitle>
Reference: [Kaiser 89a] <author> Gail E. Kaiser and David Garlan. </author> <title> Synthesizing Programming Environments from Reusable Features. Software Reusability. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1989, </year> <pages> pages 35-55, </pages> <note> Chapter 2. MELD PROGRAMMING LANGUAGE 72 </note>
Reference-contexts: Views Views are not present: assignment ::= | var := VIEWS: IS-PROD ( IDENTIFIER ) | var := VIEWS: IS-PROD ( IDENTIFIER ) BOOLOP express 9.4. Union The notion of union <ref> [Kaiser 87a; Kaiser 89a] </ref> is not present: body-unit ::= union union GETS IDENTIFER := IDENTIFER * IDENTIFER 9.5. Data Dependency Bug BALANCE := BALANCE + CASH; SEND "the balance is %d"(BALANCE) TO STDOUT; There is a bug in the data dependency analysis. This example will output the old balance.
Reference: [Kaiser 89b] <author> Gail E. Kaiser. </author> <title> Object-Oriented Programming Language Facilities for Concurrency Control. </title> <type> Technical Report CUCS-439-89, </type> <institution> Columbia University Department of Computer Science, </institution> <month> April, </month> <year> 1989. </year> <note> Submitted for publication. </note>
Reference: [Kaiser 89c] <author> Gail E. Kaiser, Steven S. Popovich, Wenwey Hseush and Shyhtsun Felix Wu. </author> <title> Melding Multiple Granularities of Parallelism. </title> <editor> In Stephen Cook (editor), </editor> <booktitle> 3rd European Conference on Object-Oriented Programming, </booktitle> <pages> pages 147-166. </pages> <publisher> Cambridge University Press, </publisher> <address> Nottingham, UK, </address> <month> July, </month> <year> 1989. </year>
Reference: [Keene 85] <author> Sonya E. Keene and David A. Moon. </author> <title> Flavors: </title> <booktitle> Object-oriented Programming on Symbolics Computers. In Common Lisp Conference. </booktitle> <month> December, </month> <year> 1985. </year>
Reference: [Moon 86] <author> David A. Moon. </author> <title> Object-Oriented Programming with Flavors. </title> <booktitle> In Object-Oriented Systems, Languages, and Applications Conference, </booktitle> <pages> pages 1-8. </pages> <address> Portland, OR, </address> <month> September, </month> <year> 1986. </year> <journal> Special issue of SIGPlan Notices, </journal> <volume> 21(11), </volume> <month> November </month> <year> 1986. </year>
Reference: [Popovich 88] <author> Steven S. Popovich and Gail E. Kaiser. </author> <title> MELDing Parallel and Distributed Programming. </title> <type> Technical Report CUCS-402-88, </type> <institution> Columbia University Department of Computer Science, </institution> <month> October, </month> <year> 1988. </year>
Reference: [Sharp 85] <author> J. A. Sharp. </author> <title> Data flow computing. </title> <publisher> Halsted Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: MELD employs the dataflow paradigm, and MELD programmers may take full advantage of dataflow programming at the statement level (or not, if they choose). MELD's dataflow does not presume a particular underlying machine architecture. For further information on dataflow and dataflow programming languages see <ref> [Wadge 85; Broy 85; Sharp 85] </ref>. A Note on the Examples The examples in this manual show all MELD reserved words in CAPITALS and all other program components in Mixed case. This is merely a convention, case is not significant for MELD reserved words.
Reference: [Stroustrup 86] <author> Bjarne Stroustrup. </author> <title> The C++ programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1986. </year>

References-found: 17

