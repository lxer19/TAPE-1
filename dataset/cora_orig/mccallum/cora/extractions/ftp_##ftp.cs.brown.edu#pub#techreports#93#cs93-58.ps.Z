URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-58.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-58.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [Abi88] <author> Serge Abiteboul. </author> <title> Updates, a New Frontier. </title> <booktitle> In Intl. Conference on Database Theory, </booktitle> <pages> pages 1-18, </pages> <year> 1988. </year>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages.
Reference: [AEM86] <author> T. Lougenia Anderson, Earl F. Ecklund,Jr., and David Maier. PROTEUS: </author> <title> Objectifying the DBMS User Interface. </title> <booktitle> In Intl. Workshop on Object-Oriented Database Systems, </booktitle> <year> 1986. </year>
Reference-contexts: A related approach is PROTEUS <ref> [AEM86] </ref>. However, there are important differences: In doodle, visualizations (mappings from data to pictures) are specified visually, and the query languages are user-defined, while in PROTEUS visualizations are specified textually. PROTEUS is object-oriented in the usual sense, while in doodle the object-oriented concepts are extend to visual languages.
Reference: [AK89] <author> Serge Abiteboul and Paris C. Kanellakis. </author> <title> Object Identity as a Query Language Primitive. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 159-173, </pages> <year> 1989. </year>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages.
Reference: [AV87] <author> Serge Abiteboul and Victor Vianu. </author> <title> Datalog Extensions for Database Queries and Updates. </title> <type> Technical Report 900, </type> <institution> INRIA, </institution> <year> 1987. </year>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages.
Reference: [Ber83] <institution> Jacques Bertin. Semiology of Graphics. The University of Wisconsin Press, Madison, Wisconsin, </institution> <year> 1983. </year>
Reference-contexts: 1 Introduction It has a been a long-standing claim that pictures convey information in ways that text and tables cannot, as illustrated by the books of Tufte [Tuf83, Tuf90] and Bertin <ref> [Ber83] </ref>. In this paper a picture is a set of graphical symbols, and a visual language is a set of pictures. All the pictures in a visual language obey the same conventions.
Reference: [BK93] <author> Anthony J. Bonner and Michael Kifer. </author> <title> Transaction Logic: An (Early) Expose. </title> <booktitle> In Proc. of the Workshop on Formal Methods in Databases and Software Engineering, </booktitle> <year> 1993. </year> <title> Keynote address. </title> <booktitle> Workshop held in Montreal, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages. <p> We plan to investigate the expressive power of doodle as a query language, and to extend doodle with visual constructs that express negation. Also adding non-determinism (see, e.g., <ref> [BK93] </ref>) would support, for example, the specification of mappings between sets and lists. 3D U-term Language. We plan to extend the U-term language to specify 3D visualizations [Rei93]. Visual Graph Drawing. We are currently investigating the integration of the algorithmic and declarative paradigms for graph drawing through visual constraints [CTV93].
Reference: [Bor81] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: The primary aim of doodle is to formally define visual languages for representing facts in an object-oriented database. Also, with doodle the user can query the database using the same conventions as for displaying the facts. doodle differs from other visualization proposals (e.g., <ref> [Bor81, Wyk82, Rei90, GC90, Kam89] </ref>) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., [GSKZ85, Cru90, GPV90]) in that the user defines how
Reference: [CH80] <author> Ashok K. Chandra and David Harel. </author> <title> Computable Queries for Relational Databases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-178, </pages> <year> 1980. </year> <month> 19 </month>
Reference-contexts: The fundamental concept of genericity in the relational model expresses the invariance of queries under the permutations of the elements of the domains <ref> [CH80, Hul86] </ref>. As transformations of visual languages preserve only certain predicates (see Figures 23 (i), and (ii)), the notion of genericity for visual languages should consider only those permutations of the elements of the domain that preserve the relevant visual predicates.
Reference: [Cru90] <author> Isabel F. Cruz. </author> <title> Declarative Query Languages for Object-Oriented Databases. </title> <editor> In F. H. Lochovsky, editor, </editor> <booktitle> Office and Data Base Systems Research '89, </booktitle> <pages> pages 92-130. </pages> <note> Technical Report CSRI-238, </note> <month> June </month> <year> 1990. </year>
Reference-contexts: facts. doodle differs from other visualization proposals (e.g., [Bor81, Wyk82, Rei90, GC90, Kam89]) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., <ref> [GSKZ85, Cru90, GPV90] </ref>) in that the user defines how to visualize and query the data. A related approach is PROTEUS [AEM86]. However, there are important differences: In doodle, visualizations (mappings from data to pictures) are specified visually, and the query languages are user-defined, while in PROTEUS visualizations are specified textually.
Reference: [Cru92] <author> Isabel F. Cruz. DOODLE: </author> <title> A Visual Language for Object-Oriented Databases. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 71-80, </pages> <year> 1992. </year>
Reference-contexts: PROTEUS is object-oriented in the usual sense, while in doodle the object-oriented concepts are extend to visual languages. A preliminary expose of doodle appeared in <ref> [Cru92] </ref>. Since then we have considerably extended doodle. For instance, we have added a form of multiple inheritance through visual language composition. As well, we have designed an important component of doodle: the U-term language. <p> In this way we extend the object-oriented concepts that usually apply to classes and objects to the visual languages themselves. The following is a summary of these doodle capabilities, which have been considerably extended since <ref> [Cru92] </ref>. 4.1 Inheritance of Visual Languages The user can define that a visual language inherits from another visual language, with the possibility of redefining the visualization for objects of one or more classes (overriding ), and the possibility of adding visualizations for more classes in the new visual language.
Reference: [Cru93] <author> Isabel F. Cruz. </author> <title> Expressing Constraints for Data Display Specification: A Visual Approach. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Brown University, </institution> <year> 1993. </year> <note> (also submitted for publication). </note>
Reference-contexts: We also present a variety of applications of doodle, and outline the U-term language, which is a language for specifying constraints visually <ref> [Cru93] </ref>. As mentioned in the introduction, doodle is very different from other visualization and query languages, and motivates a variety of new research directions, such as: Expressive Power.
Reference: [CTV93] <author> Isabel F. Cruz, Roberto Tamassia, and Pascal Van Hentenryck. </author> <title> A Visual Approach to Graph Drawing. In Graph Drawing'93, </title> <address> Sevres, France, </address> <month> September </month> <year> 1993. </year> <note> The abstracts of the papers are available via anonymous ftp from wilma.cs.brown.edu (128.148.33.66), in file gd93-v2.tex.Z in the directory /pub/papers/compgeo. </note>
Reference-contexts: We plan to extend the U-term language to specify 3D visualizations [Rei93]. Visual Graph Drawing. We are currently investigating the integration of the algorithmic and declarative paradigms for graph drawing through visual constraints <ref> [CTV93] </ref>. Temporal Databases. We believe that temporal databases could benefit from an interface like doodle. Temporal charts (see for example [Tuf90]) could be used for expressing temporal queries. Acknowledgements Thanks to Michael Kifer, Yoram Kornatzky, Alberto Mendelzon, Theo Norvell, and Roberto Tamassia for useful discussions.
Reference: [DETT93] <author> G. Di Battista, P. Eades, R. Tamassia, and I.G. Tollis. </author> <title> Algorithms for Drawing Graphs: an Annotated Bibliography. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, </institution> <month> March </month> <year> 1993. </year> <note> To appear in Computational Geometry: Theory and Applications. </note>
Reference-contexts: The visual specification of graph layout is one of the contributions of doodle to other areas of computer science, in this case to graph drawing <ref> [DETT93] </ref>. The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages [AV87, Abi88, AK89, KLW90, GZG92, BK93].
Reference: [GC90] <author> T. C. Nicholas Graham and J. R. Cordy. GVL: </author> <title> A Graphical, </title> <booktitle> Functional Language for the Specification of Output in Programming Languages. In Proc. IEEE Intl. Conference on Computer Languages, </booktitle> <pages> pages 11-22, </pages> <year> 1990. </year>
Reference-contexts: The primary aim of doodle is to formally define visual languages for representing facts in an object-oriented database. Also, with doodle the user can query the database using the same conventions as for displaying the facts. doodle differs from other visualization proposals (e.g., <ref> [Bor81, Wyk82, Rei90, GC90, Kam89] </ref>) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., [GSKZ85, Cru90, GPV90]) in that the user defines how
Reference: [Gol91] <author> Eric J. Golin. </author> <title> A Method for the Specification and Parsing of Visual Languages. </title> <type> Technical Report CS-90-19, </type> <institution> Brown University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Such a limited set is sufficient for the kinds of displays of the database that we consider (e.g., graphs, bar charts, pie charts). Sets of visual objects that are considered in related work are comparable to the one we consider (e.g., <ref> [Gol91, Wyk82] </ref>), or more restricted (e.g., [Mac86]). 2 procedure X draw name inModule contains secondObject 0 0 firstObject contains secondObject 0 0 firstObject V O 1 V O k solid by ty boundary box solid lx rx boundary box solid lx rx boundary box 5 1 2 4 1.5 3.5 V
Reference: [GPV90] <author> Marc Gyssens, Jan Paredaens, and Dirk Van Gucht. </author> <title> A Graph-Oriented Object Database Model. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 417-424, </pages> <year> 1990. </year>
Reference-contexts: facts. doodle differs from other visualization proposals (e.g., [Bor81, Wyk82, Rei90, GC90, Kam89]) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., <ref> [GSKZ85, Cru90, GPV90] </ref>) in that the user defines how to visualize and query the data. A related approach is PROTEUS [AEM86]. However, there are important differences: In doodle, visualizations (mappings from data to pictures) are specified visually, and the query languages are user-defined, while in PROTEUS visualizations are specified textually.
Reference: [GSKZ85] <author> K.J. Goldman, S.A.Goldman, </author> <title> P.C. Kanellakis, and S.B. Zdonik. ISIS:Interface for a Semantic Information System. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 328-342, </pages> <year> 1985. </year>
Reference-contexts: facts. doodle differs from other visualization proposals (e.g., [Bor81, Wyk82, Rei90, GC90, Kam89]) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., <ref> [GSKZ85, Cru90, GPV90] </ref>) in that the user defines how to visualize and query the data. A related approach is PROTEUS [AEM86]. However, there are important differences: In doodle, visualizations (mappings from data to pictures) are specified visually, and the query languages are user-defined, while in PROTEUS visualizations are specified textually.
Reference: [GZG92] <author> Sergio Greco, Carlo Zaniolo, and Sumit Ganguly. </author> <title> Greedy by Choice. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 105-113, </pages> <year> 1992. </year>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages.
Reference: [Har88] <author> David Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: We read each visual rule in the following way: if the right-hand side is true, then the left-hand side is also true. The program of Figure 3, is an example of a doodle program that defines a higraph <ref> [Har88] </ref>. Figure 1. In Figure 3 there are two kinds of terms: F-terms and U-terms. All the terms to the right of the double f-language I : inclusion [first ! X; H X higraph H : object second ! fYg] bar are F-terms, hence the box f-language .
Reference: [Hul86] <author> Richard Hull. </author> <title> Relative Information Capacity of Simple Relational Database Schemata. </title> <journal> SIAM J. Comput., </journal> <volume> 15(3) </volume> <pages> 856-886, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The fundamental concept of genericity in the relational model expresses the invariance of queries under the permutations of the elements of the domains <ref> [CH80, Hul86] </ref>. As transformations of visual languages preserve only certain predicates (see Figures 23 (i), and (ii)), the notion of genericity for visual languages should consider only those permutations of the elements of the domain that preserve the relevant visual predicates.
Reference: [Kam89] <author> Tomihisa Kamada. </author> <title> Visualizing Abstract Objects and Relations A Constraint-Based Approach. </title> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1989. </year>
Reference-contexts: The primary aim of doodle is to formally define visual languages for representing facts in an object-oriented database. Also, with doodle the user can query the database using the same conventions as for displaying the facts. doodle differs from other visualization proposals (e.g., <ref> [Bor81, Wyk82, Rei90, GC90, Kam89] </ref>) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., [GSKZ85, Cru90, GPV90]) in that the user defines how
Reference: [KLW90] <author> Michael Kifer, Georg Lausen, and James Wu. </author> <title> Logic Foundations of Object-Oriented and Frame-Based Languages. </title> <type> Technical Report 90/14 (2-nd revision), </type> <institution> Department of Computer Science, SUNY Stony Brook, </institution> <year> 1990. </year> <note> To appear in JACM. </note>
Reference-contexts: The U-term language is also a contribution to the constraint programming area. In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages <ref> [AV87, Abi88, AK89, KLW90, GZG92, BK93] </ref>. The semantics of doodle is formally defined and given by F-logic [KLW90]. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages. <p> In using the technology of declarative and object-oriented query languages and integrating it with other areas, we explore the limits of declarative query languages [AV87, Abi88, AK89, KLW90, GZG92, BK93]. The semantics of doodle is formally defined and given by F-logic <ref> [KLW90] </ref>. The formal basis of doodle, and the extension of the concept of database querying provides a foundation for a formal study of visual languages. We organize the rest of the paper as follows. In Section 2 we give an overall up-to-date perspective of doodle. <p> In the final section we present conclusions and directions for future research. 2 DOODLE 2.1 doodle Terms and Objects There are several kinds of terms and objects that doodle deals with. We give informal definitions below. F-terms. These are F-logic terms <ref> [KLW90] </ref>, such as X : procedure [name ! "draw"; callsFrom@myModule ! fY : procedureg]: In this term, X and Y are variables that represent object identities, and procedure is a class (e.g., X belongs to class procedure). name and callsFrom are methods. <p> To implement this there are two possibilities that are offered by F-logic <ref> [KLW90] </ref>: X : Y [param (display; Y)@Z ! W : visualObject ] X : Y [display@Z ! W : visualObject ] In this case we are parameterizing the display method by the class to which it belongs.
Reference: [Mac86] <author> Jock D. Mackinlay. </author> <title> Automatic Design of Graphical Presentations. </title> <type> Technical Report STAN-NCS-86-1138, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1986. </year>
Reference-contexts: Such a limited set is sufficient for the kinds of displays of the database that we consider (e.g., graphs, bar charts, pie charts). Sets of visual objects that are considered in related work are comparable to the one we consider (e.g., [Gol91, Wyk82]), or more restricted (e.g., <ref> [Mac86] </ref>). 2 procedure X draw name inModule contains secondObject 0 0 firstObject contains secondObject 0 0 firstObject V O 1 V O k solid by ty boundary box solid lx rx boundary box solid lx rx boundary box 5 1 2 4 1.5 3.5 V O 12 V O k2 Y <p> These nodes are labelled by the class names of that can be visualized with pieChart (this is represented by the string `C`. 13 Transformation barChart sumChart barChart ffC sumChart ffC X : list 6 Visual Expressiveness Issues Mackinlay <ref> [Mac86] </ref> observes that visual languages have a limited expressiveness. <p> For example the predicate right of (and left of) is important to the layout of Pert networks, when that layout is "read" left to right; the predicate color is not relevant when the available workstations are black and white. Mackinlay <ref> [Mac86] </ref> claims that certain data visualizations may produce unsound pictures, that is, pictures that express relationships that are not true in the database. as exemplified by the visual transitive relationship contains when used to depict the non-transitive relationship neighbor, as in Figure 22.
Reference: [Rei90] <author> Steven P. Reiss. </author> <title> Interacting with the FIELD Environment. </title> <journal> Software Practice and Experience, </journal> <volume> 20(S1):89-115, </volume> <year> 1990. </year>
Reference-contexts: The primary aim of doodle is to formally define visual languages for representing facts in an object-oriented database. Also, with doodle the user can query the database using the same conventions as for displaying the facts. doodle differs from other visualization proposals (e.g., <ref> [Bor81, Wyk82, Rei90, GC90, Kam89] </ref>) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., [GSKZ85, Cru90, GPV90]) in that the user defines how
Reference: [Rei93] <author> Steven P. Reiss. </author> <title> A Framework for Abstract 3D Visualizations. </title> <booktitle> In IEEE Symposium on Visual Languages, </booktitle> <pages> pages 108-115, </pages> <year> 1993. </year>
Reference-contexts: Also adding non-determinism (see, e.g., [BK93]) would support, for example, the specification of mappings between sets and lists. 3D U-term Language. We plan to extend the U-term language to specify 3D visualizations <ref> [Rei93] </ref>. Visual Graph Drawing. We are currently investigating the integration of the algorithmic and declarative paradigms for graph drawing through visual constraints [CTV93]. Temporal Databases. We believe that temporal databases could benefit from an interface like doodle. Temporal charts (see for example [Tuf90]) could be used for expressing temporal queries.
Reference: [RM89] <author> Raymond Reiter and Alan K. Mackworth. </author> <title> A Logical Framework for Depiction and Image Interpretation. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 125-155, </pages> <year> 1989. </year>
Reference-contexts: A logical framework for depiction and image interpretation is described in <ref> [RM89] </ref>. We extend this work with graphical rules, which express the user's perception of relevant predicates (e.g., that the visual predicate 15 Mexico USA Canada contains is transitive).
Reference: [Tuf83] <author> Edward R. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press., </publisher> <address> Cheshire, Conn., </address> <year> 1983. </year>
Reference-contexts: 1 Introduction It has a been a long-standing claim that pictures convey information in ways that text and tables cannot, as illustrated by the books of Tufte <ref> [Tuf83, Tuf90] </ref> and Bertin [Ber83]. In this paper a picture is a set of graphical symbols, and a visual language is a set of pictures. All the pictures in a visual language obey the same conventions.
Reference: [Tuf90] <author> Edward R. Tufte. </author> <title> Envisioning Information. </title> <publisher> Graphics Press., </publisher> <address> Cheshire, Conn., </address> <year> 1990. </year>
Reference-contexts: 1 Introduction It has a been a long-standing claim that pictures convey information in ways that text and tables cannot, as illustrated by the books of Tufte <ref> [Tuf83, Tuf90] </ref> and Bertin [Ber83]. In this paper a picture is a set of graphical symbols, and a visual language is a set of pictures. All the pictures in a visual language obey the same conventions. <p> Visual Graph Drawing. We are currently investigating the integration of the algorithmic and declarative paradigms for graph drawing through visual constraints [CTV93]. Temporal Databases. We believe that temporal databases could benefit from an interface like doodle. Temporal charts (see for example <ref> [Tuf90] </ref>) could be used for expressing temporal queries. Acknowledgements Thanks to Michael Kifer, Yoram Kornatzky, Alberto Mendelzon, Theo Norvell, and Roberto Tamassia for useful discussions.
Reference: [Urr87] <author> Jorge Urrutia. </author> <title> Partial Orders and Euclidean geometry. </title> <type> Technical Report TR-87-23, </type> <institution> University of Ottawa, Department of Computer Science, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: As a consequence, box containment is not an adequate visual representation for a binary relation. This happens because it is known that not every partial order can be represented by the inclusion relation among boxes (see for example <ref> [Urr87] </ref>). We also identify other kinds of mismatches between data and its visual representation. For example: Ambiguous pictures. These are pictures that for the same relevant predicates and graphical rules, there is more than one set of visual facts that are entailed by the picture. Pictures that encode "impossible" databases.
Reference: [Wyk82] <author> Christopher J. Van Wyk. </author> <title> A High-Level Language for Specifying Pictures. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(2) </volume> <pages> 163-182, </pages> <month> April </month> <year> 1982. </year> <month> 20 </month>
Reference-contexts: The primary aim of doodle is to formally define visual languages for representing facts in an object-oriented database. Also, with doodle the user can query the database using the same conventions as for displaying the facts. doodle differs from other visualization proposals (e.g., <ref> [Bor81, Wyk82, Rei90, GC90, Kam89] </ref>) in that we look at data and its visual manipulation from a database point of view, and stay within the bounds of the formal database field. doodle also differs from other query languages for object-oriented databases (e.g., [GSKZ85, Cru90, GPV90]) in that the user defines how <p> Such a limited set is sufficient for the kinds of displays of the database that we consider (e.g., graphs, bar charts, pie charts). Sets of visual objects that are considered in related work are comparable to the one we consider (e.g., <ref> [Gol91, Wyk82] </ref>), or more restricted (e.g., [Mac86]). 2 procedure X draw name inModule contains secondObject 0 0 firstObject contains secondObject 0 0 firstObject V O 1 V O k solid by ty boundary box solid lx rx boundary box solid lx rx boundary box 5 1 2 4 1.5 3.5 V
References-found: 30

