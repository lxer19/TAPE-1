URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/type-classes.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Title: Type classes: an exploration of the design space  
Author: Simon Peyton Jones Mark Jones Erik Meijer 
Date: February 17, 1997  
Affiliation: University of Glasgow and Oregon Graduate Institute  University of Nottingham  University of Utrecht and Oregon Graduate Institute  
Abstract: It is possible to extend the type class mechanisms of Haskell in various ways to overcome these limitations, but such proposals must be designed with great care. For example, several different extensions have been implemented in Gofer. Some of these, particularly the support for multi-parameter classes, have proved to be very useful, but interactions between other aspects of the design have resulted in a type system that is both unsound and undecidable. Another illustration is the introduction of constructor classes in Haskell 1.3, which came without the proper generalization of the notion of a context. As a consequence, certain quite reasonable programs are not typable. In this paper we review the rationale behind the design of Haskell's class system, we identify some of the weaknesses in the current situation, and we explain the choices that we face in attempting to remove them. 
Abstract-found: 1
Intro-found: 1
Reference: <author> K Chen, </author> <title> P Hudak & M Odersky [June 1992], "Parametric type classes," </title> <booktitle> in ACM Symposium on Lisp and Functional Programming, Snowbird, </booktitle> <editor> ACM. </editor> <title> C Elliott & P Hudak [June 1997], "Functional reactive animation," </title> <booktitle> in Proc International Conference on Functional Programming, </booktitle> <address> Amsterdam, </address> <publisher> ACM. </publisher>

Reference: <editor> J Launchbury & SL Peyton Jones [Dec 1995], </editor> <title> "State in Haskell," Lisp and Symbolic Computation 8, . S Liang, </title> <editor> P Hudak & M Jones [Jan 1995], </editor> <title> "Monad transformers and modular interpreters," </title> <booktitle> in 22nd ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, </address> <publisher> ACM. </publisher>
Reference: <author> M Odersky, </author> <title> PL Wadler & M Wehr [June 1995], "A second look at overloading," </title> <booktitle> in Proc Functional Programming Languages and Computer Architecture, </booktitle> <address> La Jolla, </address> <publisher> ACM. </publisher> <month> 14 C Okasaki [Sept </month> <year> 1996], </year> <title> "Purely functional data structures," </title> <type> PhD thesis, </type> <institution> CMU-CS-96-177, Department of Computer Science, </institution> <note> Carnegie Mellon University. </note> <editor> SL Peyton Jones [Sept 1996], </editor> <title> "Bulk types with class," </title> <booktitle> in Electronic proceedings of the 1996 Glas-gow Functional Programming Workshop (http://- www.dcs.gla.ac.uk/fp/workshops/fpw96/- Proceedings96.html). </booktitle> <editor> SL Peyton Jones, AJ Gordon & SO Finne [Jan 1996], </editor> <title> "Concurrent Haskell," </title> <booktitle> in 23rd ACM Symposium on Principles of Programming Languages, </booktitle> <address> St Peters-burg Beach, Florida, </address> <publisher> ACM, </publisher> . <pages> 15 </pages>
References-found: 3

