URL: ftp://dirleton.csres.utexas.edu/pub/reports/033.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (512) 322-9951  
Title: A Verified Code Generator for a Subset of Gypsy  
Author: William D. Young 
Note: This research was supported in part by the U.S. Government. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc. or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: 33 October 1988  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [Aubin 76] <author> R. Aubin. </author> <title> Mechanizing Structural Induction. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, Edinburgh, </institution> <address> Scotland, </address> <year> 1976. </year>
Reference-contexts: They prove, by hand, the correctness of an expression compiler for an idealized machine using recursion induction. Burstall [Burstall 69] proves the expression compiler again using structural induction. Versions of the McCarthy-Painter proof have been mechanically proof-checked by Milner and Weyhrauch [MilnerWeyhrauch 72], Cartwright [Cartwright 76], and Aubin <ref> [Aubin 76] </ref>. Boyer and Moore [Boyer 79] have mechanically checked the proof of an optimizing expression compiler. Painter [Painter 67] proves an extension of the expression compiler which included assignments, conditional gotos, and I/O statements. <p> They diverge from Polak mainly in drawing a different boundary between compiler specification and implementation. Of the various work we have mentioned, the following used mechanical proof support: the proofs by Milner and Weyhrauch [MilnerWeyhrauch 72], Cartwright [Cartwright 76], Aubin <ref> [Aubin 76] </ref> and Boyer and Moore [Boyer 79] of McCarthy-Painter style expression compilers; proofs or partial proofs of compilers by Newey [Newey 75], Lynn [Lynn 78], Cohn [Cohn 79a, Cohn 79b], Polak [Polak 81] and Moore [Moore 88]; proofs of microprocessors by Hunt [Hunt 85] and Cohn [Cohn 87]; and the
Reference: [Berry 71] <author> D.M. Berry. </author> <title> Block Structure: </title> <booktitle> Retention or Deletion? In 3rd SIGACT Symposium on the Theory of Computing. </booktitle> <year> 1971. </year>
Reference-contexts: Lucas [Lucas 68] and Henhapl and Jones [HenhaplJones 70] provide "the first example of a group of interpreter equivalence proofs which establish an equivalence class of significantly different, practically important interpreters" [Wegner 72a]. McGowan [McGowan 71] proves the equivalence of three interpreters for lambda calculus and Berry <ref> [Berry 71] </ref> proves the equivalence of two models of block structure semantics. McGowan [McGowan 72] outlines a theory of interpreter equivalence theorems very similar to those we discussed in chapter 2. These writers also recognized the applicability of these proof techniques to compilers.
Reference: [Bevier 87] <author> W. </author> <month> Bevier. </month>
Reference-contexts: This form tends to emphasize the role of the program and make clear that the program is not subject to modification. For an interpreter in either form, disallowing modification of the program removes the difficult task (inherent in Bevier's work <ref> [Bevier 87] </ref>) of proving that the interpreter does not modify the program being executed. Fixing the program defines a particular interpreter function Int : S X N fi S which can be p viewed as the semantics of the program P. <p> Newey [Newey 75] proves a Lisp interpreter but was unable to complete the mechanical proof of one of London's Lisp compilers. Recently, interpreter equivalence proofs have been used to prove the Piton assembler/compiler [Moore 88], an operating system kernel <ref> [Bevier 87] </ref>, and a microprocessor definition [Hunt 85]. Interpreter equivalence style proofs have also been used for proofs of the VIPER micro-processor [Cohn 87]. A number of compiler proofs have been undertaken using semantic styles other than the operational style. <p> McCarthy-Painter style expression compilers; proofs or partial proofs of compilers by Newey [Newey 75], Lynn [Lynn 78], Cohn [Cohn 79a, Cohn 79b], Polak [Polak 81] and Moore [Moore 88]; proofs of microprocessors by Hunt [Hunt 85] and Cohn [Cohn 87]; and the proof of an operating system kernel by Bevier <ref> [Bevier 87] </ref>. 9.2 Comments and Summary The work described in this dissertation has several components. 1. We have described a subset of the Gypsy 2.05 programming language suitable for reliable compilation. The language is characterized syntactically by a recognizer and given an operational semantics with an interpreter. 2.
References-found: 3

