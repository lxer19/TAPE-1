URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--90-13--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Email: E-mail: hansh@sics.se, bengt@sics.se  
Title: A Logic for Reasoning about Time and Reliability  
Author: Hans Hansson and Bengt Jonsson and 
Date: December 5, 1994  
Address: Box 1263, S-164 28 Kista, SWEDEN  
Affiliation: Swedish Institute of Computer Science,  Department of Computer Systems, Uppsala University SICS Research  
Pubnum: Report SICS/R90013  
Abstract: We present a logic for stating properties such as, "after a request for service there is at least a 98% probability that the service will be carried out within 2 seconds". The logic extends the temporal logic CTL by Emerson, Clarke and Sistla with time and probabilities. Formulas are interpreted over discrete time Markov chains. We give algorithms for checking that a given Markov chain satisfies a formula in the logic. The algorithms require a polynomial number of arithmetic operations, in size of both the formula and fl This research report is a revised and extended version of a paper that has appeared under the title "A Framework for Reasoning about Time and Reliability" in the Proceeding of the 10 th IEEE Real-time Systems Symposium, Santa Monica CA, December 1989. This work was partially supported by the Swedish Board for Technical Development (STU) as part of Esprit BRA Project SPEC, and by the Swedish Telecommunication Administration. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC86] <author> M. Ajmone Marsan, G. Balbo, and G. Conte. </author> <title> Performance Models of Multiprocessor Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. In this paper, we shall investigate methods for reasoning about properties such as "after a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds". We call such properties soft deadlines. <p> A related research area is the work on Timed (and stochastic) Petri Nets (TPN) <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. Much effort in the TPN research goes into generating Markov chains from TPN's, and that work could probably be integrated into our framework. The main difference between the TPN approach and ours is the class of properties that are analyzed for Markov Chains.
Reference: [Abr80] <author> K. Abrahamson. </author> <title> Decidability and Expressiveness of Logics of Processes. </title> <type> PhD thesis, </type> <institution> Univ. of Washington, </institution> <year> 1980. </year>
Reference-contexts: This kind of analysis can be seen as a complement to the mean-time analysis for TPN's. 6.2 Logics for Real Time Many of the logics employed to state properties of concurrent programs are various forms of modal logics <ref> [Pnu82, Abr80] </ref>, the most common ones being forms of temporal logic. Many of these are suitable to reasoning about how events or predicates may be ordered in time, without bothering about time quantities. The logic we use is inspired by a simple such logic, CTL [CES83, EC82].
Reference: [AH89] <author> R. Alur and T. Henzinger. </author> <title> A really temporal logic. </title> <booktitle> In Proc. 30 th Annual Symp. Foundations of Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. As in our logic, they associate one time unit to each transition. A different time model is reported by Alur and Henzinger <ref> [AH89] </ref>. In their logic, time between successive states is only required not to decrease: it may remain the same, or increase by an arbitrary amount.
Reference: [AHU74] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1974. </year>
Reference-contexts: set of linear equations defined by: 15 P (1; s) = if s 2 R then 1 else if s 2 Q then 0 else X T (s; s 0 ) fi P (1; s 0 ) This can be done with Gaussian elimination, with a complexity of O fi <ref> [AHU74] </ref>.
Reference: [BH81] <author> A. Bernstein and P.K. Harter. </author> <title> Proving real-time properties of programs with temporal logic. </title> <booktitle> In Proc. 8th Symp. on Operating System Principles, </booktitle> <pages> pages 1-11, </pages> <address> Pacific Grove, California, </address> <year> 1981. </year>
Reference-contexts: Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques [PH88, SL87, OW87]. Logics that deal explicitly with time quantities have been designed <ref> [BH81, JM86, KVdR83, EMSS89] </ref>. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets [Mol82, ABC86, Zub85, RP84, HV87b]. <p> In their logic, time between successive states is only required not to decrease: it may remain the same, or increase by an arbitrary amount. An early reference to work which has tried to extend modal logics with quantitative time is <ref> [BH81] </ref>, in which traditional linear time temporal logic is extended to cope with quantitative time. Bern-stein and Harter present inference rules in the spirit of the proof lattices of Owicki and Lamport [OL82]. No attempt to look at completeness is made.
Reference: [BSW69] <author> K. Bartlett, R. Scantlebury, and P. Wilkinson. </author> <title> A note on reliable full-duplex transmissions over half duplex lines. </title> <journal> Communications of the ACM, </journal> <volume> 2(5) </volume> <pages> 260-261, </pages> <year> 1969. </year>
Reference-contexts: We will verify that a soft deadline is met by a communication protocol. The protocol, Parrow's Protocol (PP) [Par85], is a simplified version of the well known Alternating Bit Protocol <ref> [BSW69] </ref>. PP provides an error free communication over a medium that might lose messages. For simplicity it is assumed that acknowledgements (ack) are never lost. PP consists of three entities: a sender, a medium, and a receiver. The components and their interactions are described in Figure 2.
Reference: [CES83] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal logics specification: A practical approach. </title> <booktitle> In Proc. 10 th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 117-126, </pages> <year> 1983. </year>
Reference-contexts: Examples of systems for which soft deadlines are relevant are telephone switching networks and computer networks. We present a logic for stating soft deadlines. The logic is based on Emer-son, Clarke, and Sistla's Computation Tree Logic (CTL) <ref> [CES83] </ref>. CTL is a modal (temporal) logic for reasoning about qualitative program correctness. <p> Analogies to many modal operators can be derived from the basic PCTL operators. We can for instance define an operator that corresponds to the CTL <ref> [CES83] </ref> operator A [f 1 U f 2 ] as follows: A [f 1 U f 2 ] f 1 U 1 As an example we will specify a mutual exclusion property. Consider two processes (P 1 and P 2 ) using the same critical section. <p> The algorithm is based on the algorithm for model checking in CTL <ref> [CES83] </ref>. It is designed so that when it finishes each state will be labeled with the set of subformulas of f that are true in the state. One can then conclude that j= K f if the initial state (s i ) is labeled with f . <p> Many of these are suitable to reasoning about how events or predicates may be ordered in time, without bothering about time quantities. The logic we use is inspired by a simple such logic, CTL <ref> [CES83, EC82] </ref>. CTL is simple and has a polynomial time model-checking algorithm [CES83] and an exponential time satisfiability algorithm [EC82]. In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. <p> Many of these are suitable to reasoning about how events or predicates may be ordered in time, without bothering about time quantities. The logic we use is inspired by a simple such logic, CTL [CES83, EC82]. CTL is simple and has a polynomial time model-checking algorithm <ref> [CES83] </ref> and an exponential time satisfiability algorithm [EC82]. In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. As in our logic, they associate one time unit to each transition.
Reference: [Chi85] <author> G. Chiola. </author> <title> A software package for the analysis of generalized stochastic Petri net models. </title> <booktitle> In Proc. Int. Workshop on Time Petri Nets, </booktitle> <pages> pages 136-143, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Holliday and Vernon have carried out such analyses for a number of different systems, such as multiprocessor memories [HV87a], cache protocols [VH86]. There are several software packages available that help in the analysis for these models e.g. <ref> [HV86, Chi85] </ref>. TPN's have a relation to our approach, because our structures are similar to Markov Chains. Much effort in the TPN research goes into generating Markov Chains from TPN's, and that work could probably very well be integrated into our framework.
Reference: [Coh80] <author> D. E. Cohn. </author> <title> Measure Theory. </title> <publisher> Birkhauser, </publisher> <year> 1980. </year>
Reference-contexts: Following measure theory <ref> [Coh80, KSK76] </ref>, m 6 is defined on the probability space hX; Ai, where X is the set of paths starting in s 0 and A is a sigma-algebra on X generated by sets f 2 X : "n = s 0 ! s 1 ! ! s n g of paths
Reference: [CVW86] <author> C. Courcoubetis, M. Vardi, and P. Wolper. </author> <title> Reasoning about fair concurrent programs. </title> <booktitle> In Proc. 18 th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 283-294, </pages> <year> 1986. </year>
Reference-contexts: We interpret formulas in our logic over structures that are discrete time Markov chains. This relates our work to probabilistic temporal logics (e.g., [HS84, HS84]) and temporal logics with probabilistic models (e.g., <ref> [CVW86, CY88] </ref>) However, these works only deal with properties that either hold with probability one or with a non-zero probability. A related research area is the work on Timed (and stochastic) Petri Nets (TPN) [Mol82, ABC86, Zub85, RP84, HV87b].
Reference: [CY88] <author> Courcoubetis and Yannakakis. </author> <title> The complexity of probabilistic verification. </title> <booktitle> In Proc. 29 th Annual Symp. Foundations of Computer Science, </booktitle> <pages> pages 338-345, </pages> <year> 1988. </year>
Reference-contexts: We interpret formulas in our logic over structures that are discrete time Markov chains. This relates our work to probabilistic temporal logics (e.g., [HS84, HS84]) and temporal logics with probabilistic models (e.g., <ref> [CVW86, CY88] </ref>) However, these works only deal with properties that either hold with probability one or with a non-zero probability. A related research area is the work on Timed (and stochastic) Petri Nets (TPN) [Mol82, ABC86, Zub85, RP84, HV87b]. <p> The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions [Var85, Fel83, HSP83, HS84, VW86]. Courcoubetis and Yannakakis <ref> [CY88, CY89] </ref> have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [CY89] <author> Courcoubetis and Yannakakis. </author> <title> The complexity of probabilistic verification. </title> <institution> Bell labs Murry Hill, </institution> <year> 1989. </year> <month> 24 </month>
Reference-contexts: The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions [Var85, Fel83, HSP83, HS84, VW86]. Courcoubetis and Yannakakis <ref> [CY88, CY89] </ref> have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [EC82] <author> E. Emerson and E. Clarke. </author> <title> Using branching time tempo-ral logic to synthesize synchronization skeletons. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 2(3) </volume> <pages> 241-266, </pages> <year> 1982. </year>
Reference-contexts: Many of these are suitable to reasoning about how events or predicates may be ordered in time, without bothering about time quantities. The logic we use is inspired by a simple such logic, CTL <ref> [CES83, EC82] </ref>. CTL is simple and has a polynomial time model-checking algorithm [CES83] and an exponential time satisfiability algorithm [EC82]. In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. <p> The logic we use is inspired by a simple such logic, CTL [CES83, EC82]. CTL is simple and has a polynomial time model-checking algorithm [CES83] and an exponential time satisfiability algorithm <ref> [EC82] </ref>. In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. As in our logic, they associate one time unit to each transition.
Reference: [EMSS89] <author> A. Emerson, A. Mok, A. Sistla, and J. Srinivasan. </author> <title> Quantitative temporal reasoning. In Proc. Workshop on Automatic Verification Methods for Finite State Systems, </title> <address> Greno-ble, </address> <year> 1989. </year>
Reference-contexts: Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques [PH88, SL87, OW87]. Logics that deal explicitly with time quantities have been designed <ref> [BH81, JM86, KVdR83, EMSS89] </ref>. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets [Mol82, ABC86, Zub85, RP84, HV87b]. <p> Recently, and independently of the work presented here, Emerson, Mok, Sistla, and Srinivasan <ref> [EMSS89] </ref> have extended CTL to deal with quantitative time. Examples of properties expressible in the extended logic (RT CT L) are: p will become true within 50 time 3 units (AF 50 p) and q will continuously hold for 20 time units (AG 20 q). <p> After passing the for loop with index i, the algorithm will have labeled all states that satisfy f 1 U i &gt;0 f 2 . A proof of correctness for the algorithm is given in Appendix A. Emerson et.al. <ref> [EMSS89] </ref> presents a similar algorithm for model check ing in RTCTL. <p> CTL is simple and has a polynomial time model-checking algorithm [CES83] and an exponential time satisfiability algorithm [EC82]. In [ESS89] is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan <ref> [EMSS89] </ref> have extended CTL to deal with quantitative time. As in our logic, they associate one time unit to each transition. A different time model is reported by Alur and Henzinger [AH89].
Reference: [ESS89] <author> E. Emerson, T. Sadler, and J. Srinivasan. </author> <title> Efficient temporal reasoning. </title> <booktitle> In Proc. 16 th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 166-178, </pages> <address> Austin, Texas, </address> <year> 1989. </year>
Reference-contexts: The logic we use is inspired by a simple such logic, CTL [CES83, EC82]. CTL is simple and has a polynomial time model-checking algorithm [CES83] and an exponential time satisfiability algorithm [EC82]. In <ref> [ESS89] </ref> is described a logic with a polynomial time satisfiability algorithm. 21 Emerson, Mok, Sistla, and Srinivasan [EMSS89] have extended CTL to deal with quantitative time. As in our logic, they associate one time unit to each transition. A different time model is reported by Alur and Henzinger [AH89].
Reference: [Fel83] <author> Y.A. Feldman. </author> <title> A decidable propositional probabilistic dynamic logic. </title> <booktitle> In Proc. 15 th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 298-309, </pages> <address> Boston, </address> <year> 1983. </year>
Reference-contexts: Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions <ref> [Var85, Fel83, HSP83, HS84, VW86] </ref>. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [Gib85] <author> A. Gibbons. </author> <title> Algorithmic Graph Theory. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: Dijkstra's shortest path algorithm <ref> [Gib85] </ref> and observing that we only need to consider paths that are shorter than t+1 we define the algorithm LABEL EU as follows: LABEL EU: unseen := S i [ S s ; fringe := S s ; mr := min (jS i j; t); 8 &gt; : 8s 2 fringe
Reference: [Gri81] <editor> D. Gries. </editor> <booktitle> The Science of Programming. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1981. </year>
Reference: [HS84] <author> S. Hart and M. Sharir. </author> <title> Probabilistic temporal logics for finite and bounded models. </title> <booktitle> In Proc. 16 th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 1-13, </pages> <year> 1984. </year>
Reference-contexts: We interpret formulas in our logic over structures that are discrete time Markov chains. This relates our work to probabilistic temporal logics (e.g., <ref> [HS84, HS84] </ref>) and temporal logics with probabilistic models (e.g., [CVW86, CY88]) However, these works only deal with properties that either hold with probability one or with a non-zero probability. A related research area is the work on Timed (and stochastic) Petri Nets (TPN) [Mol82, ABC86, Zub85, RP84, HV87b]. <p> On the other hand, there are several examples in the litterature of modal logics that are extended with probabilities (but not time), e.g., PTL by Hart and Sharir <ref> [HS84] </ref>, and TC by Lehman and Shelah [LS82]. However, these works only deal with properties that either hold with probability one or with a non-zero probability. Probabilistic modal logics have been used in the verification of probabilistic algorithms. <p> Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions <ref> [Var85, Fel83, HSP83, HS84, VW86] </ref>. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [HSP83] <author> S. Hart, M. Sharir, and A. Pnueli. </author> <title> Termination of probabilistic concurrent programs. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 5 </volume> <pages> 356-380, </pages> <year> 1983. </year>
Reference-contexts: Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions <ref> [Var85, Fel83, HSP83, HS84, VW86] </ref>. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [HV86] <author> M.A. Holliday and M.K. Vernon. </author> <title> The gtpn analyzer: numerical methods and user interface. </title> <type> Technical Report 639, Sept. CS, </type> <institution> Univ. Wisconsin - Madison, </institution> <month> Apr. </month> <year> 1986. </year>
Reference-contexts: Holliday and Vernon have carried out such analyses for a number of different systems, such as multiprocessor memories [HV87a], cache protocols [VH86]. There are several software packages available that help in the analysis for these models e.g. <ref> [HV86, Chi85] </ref>. TPN's have a relation to our approach, because our structures are similar to Markov Chains. Much effort in the TPN research goes into generating Markov Chains from TPN's, and that work could probably very well be integrated into our framework.
Reference: [HV87a] <author> M.A. Holliday and M.K. Vernon. </author> <title> Exact performance estimates for multiprocessor memory and bus interface. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-36:76-85, </volume> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: One can make experiments with various values of system parameters to determine optimal configurations. Holliday and Vernon have carried out such analyses for a number of different systems, such as multiprocessor memories <ref> [HV87a] </ref>, cache protocols [VH86]. There are several software packages available that help in the analysis for these models e.g. [HV86, Chi85]. TPN's have a relation to our approach, because our structures are similar to Markov Chains.
Reference: [HV87b] <author> M.A. Holliday and M.K. Vernon. </author> <title> A generalized timed Petri net model for performance analysis. </title> <journal> IEEE Trans. Software Eng.., </journal> <volume> SE-13(12), </volume> <year> 1987. </year>
Reference-contexts: For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. In this paper, we shall investigate methods for reasoning about properties such as "after a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds". We call such properties soft deadlines. <p> A related research area is the work on Timed (and stochastic) Petri Nets (TPN) <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. Much effort in the TPN research goes into generating Markov chains from TPN's, and that work could probably be integrated into our framework. The main difference between the TPN approach and ours is the class of properties that are analyzed for Markov Chains.
Reference: [JM86] <author> F. Jahanian and A. Mok. </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-12(9):890-904, </volume> <month> Sept. </month> <year> 1986. </year> <month> 25 </month>
Reference-contexts: Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques [PH88, SL87, OW87]. Logics that deal explicitly with time quantities have been designed <ref> [BH81, JM86, KVdR83, EMSS89] </ref>. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets [Mol82, ABC86, Zub85, RP84, HV87b]. <p> No attempt to look at completeness is made. A related logic is presented in [KVdR83], which is richer and includes past-time operators, but there no inference system is presented. A different approach is the Real-Time Logic (RTL) of Jahanian and Mok <ref> [JM86] </ref>. RTL is not a modal logic, but a first-order logic. In RTL, one can reason about occurrences of events and the elapsed times between them. The logic is decidable without uninterpreted function symbols, as a special case of Presburger arithmetic. Of course such a decision procedure is highly inefficient.
Reference: [Jos88] <author> M. Joseph, </author> <title> editor. Formal Techniques in Real-Time and Fault-Tolerant Systems. </title> <publisher> LNCS 331, Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: For many systems, such as control systems, timing behavior is an important aspect of the correctness of the system, and the interest for research on these aspects of formal methods seems to be increasing at the moment (see e.g. <ref> [Jos88] </ref>). For some systems, it is very important that certain time bounds on their behavior are always met. Examples are flight control systems and many process control systems. Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods.
Reference: [KSK76] <author> J. Kemeny, L. Snell, and A. Knapp. </author> <title> Denumerable Markov Chains. </title> <publisher> Springer Verlag, </publisher> <year> 1976. </year>
Reference-contexts: Following measure theory <ref> [Coh80, KSK76] </ref>, m 6 is defined on the probability space hX; Ai, where X is the set of paths starting in s 0 and A is a sigma-algebra on X generated by sets f 2 X : "n = s 0 ! s 1 ! ! s n g of paths
Reference: [KVdR83] <editor> R. Koymans, J. Vytopil, and W.P. de Roever. </editor> <title> Real-time programming and asynchronous message passing. </title> <booktitle> In Proc. 2 nd ACM Symp. on Principles of Distributed Computing, Minaki, Canada, </booktitle> <pages> pages 187-197, </pages> <address> Montreal, Canada, </address> <year> 1983. </year>
Reference-contexts: Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques [PH88, SL87, OW87]. Logics that deal explicitly with time quantities have been designed <ref> [BH81, JM86, KVdR83, EMSS89] </ref>. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets [Mol82, ABC86, Zub85, RP84, HV87b]. <p> Bern-stein and Harter present inference rules in the spirit of the proof lattices of Owicki and Lamport [OL82]. No attempt to look at completeness is made. A related logic is presented in <ref> [KVdR83] </ref>, which is richer and includes past-time operators, but there no inference system is presented. A different approach is the Real-Time Logic (RTL) of Jahanian and Mok [JM86]. RTL is not a modal logic, but a first-order logic.
Reference: [LS82] <author> D. Lehmann and S. Shelah. </author> <title> Reasoning with time and chance. </title> <journal> Information and Control, </journal> <volume> 53 </volume> <pages> 165-198, </pages> <year> 1982. </year>
Reference-contexts: On the other hand, there are several examples in the litterature of modal logics that are extended with probabilities (but not time), e.g., PTL by Hart and Sharir [HS84], and TC by Lehman and Shelah <ref> [LS82] </ref>. However, these works only deal with properties that either hold with probability one or with a non-zero probability. Probabilistic modal logics have been used in the verification of probabilistic algorithms. Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1.
Reference: [Mol82] <editor> M.K. </editor> <title> Molloy. Performane analysis using stochastic petri nets. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-31(9):913-917, </volume> <month> Sept. </month> <year> 1982. </year>
Reference-contexts: For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. In this paper, we shall investigate methods for reasoning about properties such as "after a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds". We call such properties soft deadlines. <p> A related research area is the work on Timed (and stochastic) Petri Nets (TPN) <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. Much effort in the TPN research goes into generating Markov chains from TPN's, and that work could probably be integrated into our framework. The main difference between the TPN approach and ours is the class of properties that are analyzed for Markov Chains.
Reference: [OL82] <author> S. Owicki and L. Lamport. </author> <title> Proving liveness properteis of concurrent programs. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 455-495, </pages> <year> 1982. </year>
Reference-contexts: Owicki and Lamport <ref> [OL82] </ref> have defined a leads-to operator (a ; b), with the intuitive meaning that whenever a becomes true, b will eventually hold. <p> An early reference to work which has tried to extend modal logics with quantitative time is [BH81], in which traditional linear time temporal logic is extended to cope with quantitative time. Bern-stein and Harter present inference rules in the spirit of the proof lattices of Owicki and Lamport <ref> [OL82] </ref>. No attempt to look at completeness is made. A related logic is presented in [KVdR83], which is richer and includes past-time operators, but there no inference system is presented. A different approach is the Real-Time Logic (RTL) of Jahanian and Mok [JM86].
Reference: [OW87] <author> J. Ostroff and W. Wonham. </author> <title> Modelling, specifying and verifying real-time embedded computer systems. </title> <booktitle> In Proc. IEEE Real-time Systems Symp., </booktitle> <pages> pages 124-132, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Examples are flight control systems and many process control systems. Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques <ref> [PH88, SL87, OW87] </ref>. Logics that deal explicitly with time quantities have been designed [BH81, JM86, KVdR83, EMSS89]. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis.
Reference: [Par85] <author> Joachim Parrow. </author> <title> Fairness Properties in Process Algebra. </title> <type> PhD thesis, </type> <institution> Uppsala University, Uppsala, Sweden, </institution> <year> 1985. </year> <note> Available as report DoCS 85/03, </note> <institution> Department of Computer Systems, Uppsala University, Sweden. </institution>
Reference-contexts: Proof: The proof follows the same lines as the proof of Proposition 1. 2 16 5 Example In this section we provide a simple example to illustrate the proposed method. We will verify that a soft deadline is met by a communication protocol. The protocol, Parrow's Protocol (PP) <ref> [Par85] </ref>, is a simplified version of the well known Alternating Bit Protocol [BSW69]. PP provides an error free communication over a medium that might lose messages. For simplicity it is assumed that acknowledgements (ack) are never lost. PP consists of three entities: a sender, a medium, and a receiver.
Reference: [PH88] <author> A. Pnueli and E. Harel. </author> <title> Applications of temporal logic to the specification of real-time systems. </title> <editor> In M. Joseph, editor, </editor> <booktitle> Proc. Symp. on Formal Techniques in Real-Time and Fault-Tolerant Systems, </booktitle> <pages> pages 84-98. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year> <note> LNCS 331. </note>
Reference-contexts: Examples are flight control systems and many process control systems. Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques <ref> [PH88, SL87, OW87] </ref>. Logics that deal explicitly with time quantities have been designed [BH81, JM86, KVdR83, EMSS89]. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis.
Reference: [Pnu82] <author> A. Pnueli. </author> <title> The temporal semantics of concurrent programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 45-60, </pages> <year> 1982. </year>
Reference-contexts: This kind of analysis can be seen as a complement to the mean-time analysis for TPN's. 6.2 Logics for Real Time Many of the logics employed to state properties of concurrent programs are various forms of modal logics <ref> [Pnu82, Abr80] </ref>, the most common ones being forms of temporal logic. Many of these are suitable to reasoning about how events or predicates may be ordered in time, without bothering about time quantities. The logic we use is inspired by a simple such logic, CTL [CES83, EC82].
Reference: [PZ86] <author> A. Pnueli and L. Zuck. </author> <title> Verification of multiprocess probabilistic protocols. </title> <journal> Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 53-72, </pages> <year> 1986. </year>
Reference-contexts: Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions <ref> [PZ86] </ref>, and finite-state modelchecking versions [Var85, Fel83, HSP83, HS84, VW86]. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [Raz84] <author> R.R. Razouk. </author> <title> The derivation of performance expressions for communication protocols from timed Petri net models. </title> <booktitle> In Proc. ACM SIGCOMM '84, </booktitle> <pages> pages 210-217, </pages> <address> Montreal, Quebec, </address> <year> 1984. </year> <month> 26 </month>
Reference-contexts: Much of the work is therefore to make the model as true as possible to actual systems while retaining the possibility of analysis. Time Petri nets were introduced by Zuberek [Zub85] and extended by Razouk and Phelps <ref> [Raz84, RP84] </ref>. The TPN model is based on Petri Nets and associates firing frequencies and deterministic firing times with each transition in the net. The key steps in TPN analysis are: 1. Model the system as a TPN 20 2. Generate a finite-state Markov chain from the TPN.
Reference: [RP84] <author> R.R. Razouk and C.V. Phelps. </author> <title> Performance analysis of timed Petri net models. </title> <booktitle> In Proc. Ifip WG 6.2 Symp. on Protocol Specification, Testing, and Verification IV, </booktitle> <pages> pages 126-129. </pages> <publisher> North-Holland, </publisher> <month> June </month> <year> 1984. </year>
Reference-contexts: For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. In this paper, we shall investigate methods for reasoning about properties such as "after a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds". We call such properties soft deadlines. <p> A related research area is the work on Timed (and stochastic) Petri Nets (TPN) <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. Much effort in the TPN research goes into generating Markov chains from TPN's, and that work could probably be integrated into our framework. The main difference between the TPN approach and ours is the class of properties that are analyzed for Markov Chains. <p> Much of the work is therefore to make the model as true as possible to actual systems while retaining the possibility of analysis. Time Petri nets were introduced by Zuberek [Zub85] and extended by Razouk and Phelps <ref> [Raz84, RP84] </ref>. The TPN model is based on Petri Nets and associates firing frequencies and deterministic firing times with each transition in the net. The key steps in TPN analysis are: 1. Model the system as a TPN 20 2. Generate a finite-state Markov chain from the TPN.
Reference: [SL87] <author> A.U. Shankar and S.S. Lam. </author> <title> Time dependent distributed systems: Proving safety, liveness and real-time properties. </title> <journal> Distributed Computing, </journal> <volume> 2, </volume> <year> 1987. </year>
Reference-contexts: Examples are flight control systems and many process control systems. Methods for reasoning about such hard deadlines can be obtained by adding time to existing methods. One can add time as an explicit (virtual) variable, and use standard verification techniques <ref> [PH88, SL87, OW87] </ref>. Logics that deal explicitly with time quantities have been designed [BH81, JM86, KVdR83, EMSS89]. For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis.
Reference: [Var85] <author> M. Vardi. </author> <title> Automatic verification of probabilistic concurrent finite-state programs. </title> <booktitle> In Proc. 26 th Annual Symp. Foundations of Computer Science, </booktitle> <pages> pages 327-337, </pages> <year> 1985. </year>
Reference-contexts: Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions <ref> [Var85, Fel83, HSP83, HS84, VW86] </ref>. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [VH86] <author> M.K. Vernon and M.A. Holliday. </author> <title> Performance analysis of multiprocessor cache concistency protocols using generalized timed Petri nets. </title> <booktitle> In Proc. of Performance 86 and ACM SIGMETRICS 1986 Joint conf. on Computer Performance Modelling, Measurement, and Evaluation, </booktitle> <pages> pages 9-17. </pages> <publisher> ACM press, </publisher> <month> May </month> <year> 1986. </year>
Reference-contexts: One can make experiments with various values of system parameters to determine optimal configurations. Holliday and Vernon have carried out such analyses for a number of different systems, such as multiprocessor memories [HV87a], cache protocols <ref> [VH86] </ref>. There are several software packages available that help in the analysis for these models e.g. [HV86, Chi85]. TPN's have a relation to our approach, because our structures are similar to Markov Chains.
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proc. IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 332-344, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Mostly, the objective has been to verify that such algorithms satisfy certain properties with probability 1. The proof methods for these properties resemble the classical proof methods for proving liveness properties under fairness assumptions. There are both non-finite state versions [PZ86], and finite-state modelchecking versions <ref> [Var85, Fel83, HSP83, HS84, VW86] </ref>. Courcoubetis and Yannakakis [CY88, CY89] have investigated the complexity of modelchecking for linear time propositional temporal logic of 22 sequential and concurrent probabilistic programs. In the sequential case, the models are (just as our models) Markov chains.
Reference: [Zub85] <author> Zuberek. </author> <title> Performance evaluation using extended timed Petri nets. </title> <booktitle> In Proc. International Workshop on Timed Petri Nets, </booktitle> <address> Torino Italy, </address> <year> 1985. </year> <journal> IEEE Computer Society 674. </journal> <volume> 27 </volume>
Reference-contexts: For some systems, one is interested in the overall average performance, such as throughput, average response times, etc. Methods for analyzing such properties usually employ Markov analysis. Often the systems are described by different variants of timed or stochastic Petri nets <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. In this paper, we shall investigate methods for reasoning about properties such as "after a request for a service, there is at least a 98 percent probability that the service will be carried out within 2 seconds". We call such properties soft deadlines. <p> A related research area is the work on Timed (and stochastic) Petri Nets (TPN) <ref> [Mol82, ABC86, Zub85, RP84, HV87b] </ref>. Much effort in the TPN research goes into generating Markov chains from TPN's, and that work could probably be integrated into our framework. The main difference between the TPN approach and ours is the class of properties that are analyzed for Markov Chains. <p> The aim is to get a performance measure of the system which is as accurate as possible. Much of the work is therefore to make the model as true as possible to actual systems while retaining the possibility of analysis. Time Petri nets were introduced by Zuberek <ref> [Zub85] </ref> and extended by Razouk and Phelps [Raz84, RP84]. The TPN model is based on Petri Nets and associates firing frequencies and deterministic firing times with each transition in the net. The key steps in TPN analysis are: 1. Model the system as a TPN 20 2.
References-found: 42

