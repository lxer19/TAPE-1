URL: file://ftp.di.unipi.it/pub/Papers/giacobazzi/ilps95.ps.gz
Refering-URL: http://www.di.unipi.it/di/groups/lp/papers.html
Root-URL: 
Email: giaco@di.unipi.it  franz@hilbert.math.unipd.it  
Title: Functional Dependencies and Moore-Set Completions of  
Author: Roberto Giacobazzi Francesco Ranzato 
Address: Corso Italia 40, 56125 Pisa, Italy  Via Belzoni 7, 35131 Padova, Italy  
Affiliation: Dipartimento di Informatica Universita di Pisa  Dipartimento di Matematica Pura ed Applicata Universita di Padova  
Abstract: Interpretations and Abstract We introduce the notion of functional dependencies of abstract interpretations relatively to a binary operator of composition. Functional dependencies are obtained by a functional composition of abstract domains, and provide a systematic approach to construct new abstract domains. In particular, we study the case of autodepen-dencies, namely monotone operators on a given abstract domain. Under suitable hypotheses, this corresponds to a Moore-set completion of the abstract domain, providing a compact lattice-theoretic representation for dependencies. We prove that the abstract domain Def for ground-dependency analysis of logic programs can be systematically derived by autodependencies of a more abstract (and simple) domain for pure groundness analysis. Furthermore, we show that functional dependencies can be applied in collecting semantics design by abstract interpretation to systematically derive compositional semantics for logic programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Aczel. </author> <title> An introduction to inductive definitions. </title> <booktitle> In Handbook of Mathematical Logic, </booktitle> <pages> pp. 739-782. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: G c ! + b 2 T P (SLD ) iff there ex ist hhh i i=1 ; h k c = c 1 :: ::: :: c k , and b ~ ( b k :: hg k+1 ; :::; g n i)ffi. As usual (cf. <ref> [1] </ref>), a continuous operator ' P on -(T a P (SLD )) can be systematically derived by the inductive definition of E in Table 1, such that E = lfp (' P ).
Reference: [2] <author> T. Armstrong, K. Marriott, P. Schachte, and H. Stndergaard. </author> <title> Boolean functions for dependency analysis: algebraic properties and efficient representation. </title> <booktitle> In Proc. SAS '94, </booktitle> <volume> LNCS 864, </volume> <pages> pp. 266-280, </pages> <year> 1994. </year>
Reference-contexts: Def V is the finite lattice (with respect to the usual implication partial order) of definite formulae on V , i.e. positive Boolean functions on V whose models are closed under intersection (for more details see <ref> [2] </ref>). The abstraction and concretization maps between Def and -# (Sub) are well known, and can be found, e.g., in [24]. Also in this case, we remark that the concretization of any definite formula is an order ideal of substitutions.
Reference: [3] <author> R. Bagnara. </author> <title> Constraint systems for pattern analysis of constraint logic-based languages. </title> <editor> In P. Codognet, editor, </editor> <booktitle> Proc. CCP '95 Workshop, </booktitle> <year> 1995. </year> <note> URL http://www.di.unipi.it/~bagnara/bagnara.html. </note>
Reference-contexts: k (lfp (T S Q )) are renamed apart, and # = mgu (hh 1 ; :::; h k i; hg 1 ; :::; g k i), then b k # is a call pattern for G in P [ Q . 6 Related works The most related works are <ref> [3, 11, 12, 26] </ref>. Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in [11]. <p> Note, however, that functional dependencies relatively to an operation of composition are included into the relational analysis defined by combination of reduced product and down-set completion ([12]). Recently, Bagnara in <ref> [3] </ref> has developed an elegant meta-language for domain combination which is based on a subset of a cc language, providing asynchronous interaction of domains. Because of this feature, the composition of abstract domains relies upon (lower) closure operators, which provide the standard semantic interpretation of cc.
Reference: [4] <author> R. Barbuti, R. Giacobazzi, and G. Levi. </author> <title> A general framework for semantics-based bottom-up abstract interpretation of logic programs. </title> <journal> ACM TOPLAS, </journal> <volume> 15(1) </volume> <pages> 133-181, </pages> <year> 1993. </year>
Reference-contexts: The following is a list of some well known semantics for logic programs that can all be derived by abstract interpretation from h-(T a P (SLD)); ' P i. Some of them have been used in <ref> [4, 8, 18] </ref> for data-flow analysis of logic programs. Each semantics is provided with the corresponding abstraction, hence with a G.c. (indeed insertion). A more complete treatment for semantics derivable by abstract interpretation from a reference semantics is in [9, 21].
Reference: [5] <author> G. Birkhoff. </author> <title> Lattice Theory. AMS Colloq. Public. </title> <note> vol. XXV, 3rd ed., </note> <year> 1967. </year>
Reference: [6] <author> A. Bossi, M. Gabbrielli, G. Levi, and M.C. Meo. </author> <title> A compositional semantics for logic programs. </title> <journal> TCS, </journal> <volume> 122(1-2):3-47, </volume> <year> 1994. </year>
Reference-contexts: The compositional semantics corresponds to the functional autodependencies of a very abstract (non-compositional) semantics for computed answer substitutions ([17]), relatively to an operator of trace-unfolding. This provides an alternative characterization of the semantics in <ref> [6] </ref>, and introduces a framework for the definition of new compositional semantics for logic programs. This approach has several advantages with respect to previous techniques (e.g., the approach in [6]). <p> This provides an alternative characterization of the semantics in <ref> [6] </ref>, and introduces a framework for the definition of new compositional semantics for logic programs. This approach has several advantages with respect to previous techniques (e.g., the approach in [6]). In particular, it can be applied to arbitrary semantics, provided that they can be derived by abstract interpretation from a more concrete (operational) one. <p> Hence, the isomorphism above is based on the correspondence between T P -like functions and clauses, the latter encoding the functional dependency between their bodies and heads. It is worth noticing that S! r S corresponds to the well known compositional semantics of Bossi et al. introduced in <ref> [6] </ref>, specialized for left-to-right selection rule and where each predicate in P is considered open. Denotations in S! r S are T P -like functions. <p> It is straightforward to prove that S! r S is compositional in the sense of <ref> [6] </ref>, i.e., if S! r S = hD ; T P i and F (P ) = lfp (T P ) then for any P 1 ; P 2 2 Program, F (P 1 [ P 2 ) = F (F (P 1 ) [ F (P 2 )). <p> Likewise, it is easy to define the semantics C! r C and H! r H, being all compositional in the sense of <ref> [6] </ref>. Note that H! r H is the compositional semantics in [20]. An interesting feature of this approach is that, being based on arbitrary Galois connections, it is independent on specific choices for semantic denotations.
Reference: [7] <author> A. Brogi and F. Turini. </author> <title> Fully abstract compositional semantics for an algebra of logic programs. </title> <note> To appear in TCS, </note> <year> 1995. </year>
Reference-contexts: Denotations in S! r S are T P -like functions. The main difference with the approach of Brogi and Turini <ref> [7] </ref> is that in [7] the semantics of a module is a T P -like function, and compositionality is achieved by function composition, while in S! r S the semantics of a module is the fixpoint iteration of a transformation of T P -like functions. <p> Denotations in S! r S are T P -like functions. The main difference with the approach of Brogi and Turini <ref> [7] </ref> is that in [7] the semantics of a module is a T P -like function, and compositionality is achieved by function composition, while in S! r S the semantics of a module is the fixpoint iteration of a transformation of T P -like functions.
Reference: [8] <author> M. Codish, S. Debray, and R. Giacobazzi. </author> <title> Compositional analysis of modular logic programs. </title> <booktitle> In Proc. ACM POPL '93, </booktitle> <pages> pp. 451-464, </pages> <year> 1993. </year>
Reference-contexts: The following is a list of some well known semantics for logic programs that can all be derived by abstract interpretation from h-(T a P (SLD)); ' P i. Some of them have been used in <ref> [4, 8, 18] </ref> for data-flow analysis of logic programs. Each semantics is provided with the corresponding abstraction, hence with a G.c. (indeed insertion). A more complete treatment for semantics derivable by abstract interpretation from a reference semantics is in [9, 21]. <p> A semantic interpretation for S! r Call can be obtained in modular logic programming by the following result. We adopt the notation in <ref> [8] </ref>, and say that for a logic program (or module) P, open (P ) denotes the set of predicates that occur in the body of a clause in P but are not defined in P . A program Q extends P if Q defines open (P ).
Reference: [9] <author> M. Comini and G. Levi. </author> <title> An algebraic theory of observables. </title> <booktitle> In Proc. ILPS '94, </booktitle> <pages> pp. 172-186, </pages> <year> 1994. </year>
Reference-contexts: Some of them have been used in [4, 8, 18] for data-flow analysis of logic programs. Each semantics is provided with the corresponding abstraction, hence with a G.c. (indeed insertion). A more complete treatment for semantics derivable by abstract interpretation from a reference semantics is in <ref> [9, 21] </ref>.
Reference: [10] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proc. ACM POPL '77, </booktitle> <pages> pp. 238-252, </pages> <year> 1977. </year>
Reference: [11] <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proc. ACM POPL '79, </booktitle> <pages> pp. 269-282, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction Functional dependencies belong to the standard Cousot and Cousot's theory of abstract interpretation, and have been firstly introduced in <ref> [11] </ref> as domain combination for attribute dependent (or relational) analyses. In [11] the domain of functional dependencies corresponds precisely to the domain of monotone mappings between two abstract domains. Cousot and Cousot proved that this domain enjoys a Galois insertion under suitable hypotheses, like reduction with respect to concretization. <p> 1 Introduction Functional dependencies belong to the standard Cousot and Cousot's theory of abstract interpretation, and have been firstly introduced in <ref> [11] </ref> as domain combination for attribute dependent (or relational) analyses. In [11] the domain of functional dependencies corresponds precisely to the domain of monotone mappings between two abstract domains. Cousot and Cousot proved that this domain enjoys a Galois insertion under suitable hypotheses, like reduction with respect to concretization. In this paper we exploit the definition of functional dependency in [11] by <p> In <ref> [11] </ref> the domain of functional dependencies corresponds precisely to the domain of monotone mappings between two abstract domains. Cousot and Cousot proved that this domain enjoys a Galois insertion under suitable hypotheses, like reduction with respect to concretization. In this paper we exploit the definition of functional dependency in [11] by extending this notion to the functional composition of abstract domains relatively to a given concrete binary operator of composition, and apply it to data-flow analysis and semantics of logic programs. <p> In this case we call D 1 and D 2 the domain and range abstract interpretations. The above definition of functional dependencies generalizes the original proposal of Cousot and Cousot in <ref> [11] </ref>. A functional dependency is here associated with any concrete denotation d 2 D , and it is a mapping which associates with any abstract value x 2 D 1 an element of D 2 which corresponds to the composition of d and x via fi. <p> k (lfp (T S Q )) are renamed apart, and # = mgu (hh 1 ; :::; h k i; hg 1 ; :::; g k i), then b k # is a call pattern for G in P [ Q . 6 Related works The most related works are <ref> [3, 11, 12, 26] </ref>. Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in [11]. <p> Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in <ref> [11] </ref>. This construction, relied upon the particular semantics of assertions, was based on functional composition with respect to the meet-operation on assertions, which restricted to additive functions is isomorphic to Nielson's tensor product of [26].
Reference: [12] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation and application to logic programs. </title> <journal> J. of Logic Programming, </journal> <volume> 13(2,3):103-179, </volume> <year> 1992. </year>
Reference-contexts: Autodependencies are then the right way to interpret dual-Moore-set completions. Moreover, by Theorem 4.6, the dual-Moore-set completion is a domain refinement, namely it contains the original domain as an abstract interpretation. Note that the dual-Moore-set completion cannot be compared with the disjunctive completions introduced in <ref> [12, 14] </ref>. We consider the case of the down-set completion in the following example. Example 4.8 Consider the domain Sign of Example 3.7. As pointed out in Example 4.4, the dual-Moore-set completion of Sign (viz. lco (Sign)) is exactly Dep " (Sign). <p> k (lfp (T S Q )) are renamed apart, and # = mgu (hh 1 ; :::; h k i; hg 1 ; :::; g k i), then b k # is a call pattern for G in P [ Q . 6 Related works The most related works are <ref> [3, 11, 12, 26] </ref>. Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in [11].
Reference: [13] <author> P. Cousot and R. Cousot. </author> <title> Inductive definitions, semantics and abstract interpretation. </title> <booktitle> In Proc. ACM POPL '92, </booktitle> <pages> pp. 83-94, </pages> <year> 1992. </year>
Reference-contexts: T (P) is often denoted T P , for P 2 Program. As Cousot and Cousot proved in <ref> [13] </ref>, semantics of a programming language can all be derived by abstract interpretation of a more concrete reference semantics. A natural choice for a reference concrete semantics is the operational description of the computational process, which is in logic programming SLD resolution.
Reference: [14] <author> P. Cousot and R. Cousot. </author> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages). </title> <booktitle> In Proc. IEEE ICCL '94, </booktitle> <pages> pp. 95-112, </pages> <year> 1994. </year>
Reference-contexts: Autodependencies are then the right way to interpret dual-Moore-set completions. Moreover, by Theorem 4.6, the dual-Moore-set completion is a domain refinement, namely it contains the original domain as an abstract interpretation. Note that the dual-Moore-set completion cannot be compared with the disjunctive completions introduced in <ref> [12, 14] </ref>. We consider the case of the down-set completion in the following example. Example 4.8 Consider the domain Sign of Example 3.7. As pointed out in Example 4.4, the dual-Moore-set completion of Sign (viz. lco (Sign)) is exactly Dep " (Sign).
Reference: [15] <author> P. </author> <title> Dart. On derived dependencies and connected databases. </title> <journal> J. of Logic Programming, </journal> <volume> 11(2) </volume> <pages> 163-188, </pages> <year> 1991. </year>
Reference-contexts: In this section, we consider two examples of applications of functional dependencies in the context of data-flow analysis of logic programs and systematic design of semantics for logic programs by abstract interpretation. 5.1 Systematic derivation of ground-dependency analysis We show that the abstract domain Def , introduced by Dart in <ref> [15] </ref>, and used by Marriott and Stndergaard for ground-dependency analysis in [24], can be systematically derived by meet-autodependencies of the more abstract (and simple) domain for pure groundness analysis G ([23, 24]), relatively to the set-theoretic intersection of order ideals of concrete substitutions.
Reference: [16] <author> F. Denis and J.-P. Delahaye. </author> <title> Unfolding, procedural and fixpoint semantics of logic programs. </title> <booktitle> In Proc. STACS '91, </booktitle> <volume> LNCS 480, </volume> <pages> pp. 511-522, </pages> <year> 1991. </year>
Reference: [17] <author> M. Falaschi, G. Levi, M. Martelli, and C. Palamidessi. </author> <title> Declarative modeling of the operational behavior of logic languages. </title> <journal> TCS, </journal> <volume> 69(3) </volume> <pages> 289-318, </pages> <year> 1989. </year>
Reference-contexts: In the following we abuse by letting A! r B denote both the semantics which corresponds to the functional composition of A and B, and its semantic domain. The following result provides a first semantic interpretation of functional autodependencies for the s-semantics S defined in <ref> [17] </ref>. Theorem 5.6 S! r S is isomorphic to h-(Clause); ff s ffi' P ffifl s i.
Reference: [18] <author> M. Gabbrielli and R. Giacobazzi. </author> <title> Goal independency and call patterns in the analysis of logic programs. </title> <booktitle> In Proc. ACM SAC '94, </booktitle> <pages> pp. 394-399, </pages> <year> 1994. </year>
Reference-contexts: The following is a list of some well known semantics for logic programs that can all be derived by abstract interpretation from h-(T a P (SLD)); ' P i. Some of them have been used in <ref> [4, 8, 18] </ref> for data-flow analysis of logic programs. Each semantics is provided with the corresponding abstraction, hence with a G.c. (indeed insertion). A more complete treatment for semantics derivable by abstract interpretation from a reference semantics is in [9, 21].
Reference: [19] <author> M. Gabbrielli and M.C. Meo. </author> <title> Fixpoint semantics for partial computed answer substitutions and call patterns. </title> <booktitle> In Proc. </booktitle> <volume> ALP '92, LNCS 632, </volume> <pages> pp. 84-99, </pages> <year> 1992. </year>
Reference-contexts: This abstraction induces a semantics which is equivalent to the semantics for partial answers in <ref> [19] </ref>. The semantics for call patterns in [19] can also be derived by further approximating partial answers. Recall that an atom a 2 Atom is a call pattern for a goal G in a program P if G ! fl a j b 2 T P (SLD ). <p> This abstraction induces a semantics which is equivalent to the semantics for partial answers in <ref> [19] </ref>. The semantics for call patterns in [19] can also be derived by further approximating partial answers. Recall that an atom a 2 Atom is a call pattern for a goal G in a program P if G ! fl a j b 2 T P (SLD ).
Reference: [20] <author> H. Gaifman and E. Shapiro. </author> <title> Fully abstract compositional semantics for logic programs. </title> <booktitle> In Proc. ACM POPL '89, </booktitle> <pages> pp. 134-142, </pages> <year> 1989. </year>
Reference-contexts: Likewise, it is easy to define the semantics C! r C and H! r H, being all compositional in the sense of [6]. Note that H! r H is the compositional semantics in <ref> [20] </ref>. An interesting feature of this approach is that, being based on arbitrary Galois connections, it is independent on specific choices for semantic denotations.
Reference: [21] <author> R. Giacobazzi. </author> <title> On the collecting semantics of logic programs. </title> <booktitle> In Proc. Post-ICLP '94 Workshop on Verif. and Analysis of Logic Lang., </booktitle> <pages> pp. 159-174, </pages> <year> 1994. </year> <note> URL http://www.di.unipi.it/~giaco/giaco.html. </note>
Reference-contexts: This approach has several advantages with respect to previous techniques (e.g., the approach in [6]). In particular, it can be applied to arbitrary semantics, provided that they can be derived by abstract interpretation from a more concrete (operational) one. This is the case (see <ref> [21] </ref>) for the semantics of call patterns ([19]), computed answer substitutions ([17]), Clark ([17]) and Herbrand ([27]), and other semantics for logic programs. <p> A natural choice for a reference concrete semantics is the operational description of the computational process, which is in logic programming SLD resolution. In the following, we recall some basic results from <ref> [21] </ref>, where a hierarchy of semantics for logic programs has been introduced, based on standard SLD resolution. We fix the Prolog left-to-right selection rule. <p> Intuitively a set of traces is AND-compositional if the execution trace of any (possibly non-atomic) goal can be reconstructed by composing traces for its atomic subgoals. The inductive definition of the set E of AND-compositional execution traces for atomic goals is given in <ref> [21] </ref> as in Table 1. Rules 1 and 2 specify a big-step semantics as (positive) inductive definition with universe the set of traces from atomic goals only, denoted T a P (SLD) T P (SLD). The first rule specifies an atomic transition from an atomic goal h with clause c. <p> Some of them have been used in [4, 8, 18] for data-flow analysis of logic programs. Each semantics is provided with the corresponding abstraction, hence with a G.c. (indeed insertion). A more complete treatment for semantics derivable by abstract interpretation from a reference semantics is in <ref> [9, 21] </ref>.
Reference: [22] <author> R. Giacobazzi, C. Palamidessi, and F. Ranzato. </author> <title> Weak relative pseudo-complements of closure operators. </title> <type> Technical Report LIX/RR/95/04, </type> <institution> Laboratoire d'Informatique, Ecole Polytechnique, Paris, </institution> <year> 1995. </year> <note> URL http://www.di.unipi.it/~giaco/giaco.html. </note>
Reference: [23] <author> N.D. Jones and H. Stndergaard. </author> <title> A semantics-based framework for the abstract interpretation of PROLOG. </title> <booktitle> In Abstract Interpretation of Declarative Languages, </booktitle> <pages> pp. 123-142. </pages> <publisher> Ellis Horwood Ltd., </publisher> <year> 1987. </year>
Reference: [24] <author> K. Marriott and H. Stndergaard. </author> <title> Precise and efficient groundness analysis for logic programs. </title> <journal> ACM LOPLAS, </journal> <volume> 2(1-4):181-196, </volume> <year> 1993. </year>
Reference-contexts: dependencies in the context of data-flow analysis of logic programs and systematic design of semantics for logic programs by abstract interpretation. 5.1 Systematic derivation of ground-dependency analysis We show that the abstract domain Def , introduced by Dart in [15], and used by Marriott and Stndergaard for ground-dependency analysis in <ref> [24] </ref>, can be systematically derived by meet-autodependencies of the more abstract (and simple) domain for pure groundness analysis G ([23, 24]), relatively to the set-theoretic intersection of order ideals of concrete substitutions. <p> The abstraction and concretization maps between Def and -# (Sub) are well known, and can be found, e.g., in <ref> [24] </ref>. Also in this case, we remark that the concretization of any definite formula is an order ideal of substitutions.
Reference: [25] <author> J. Morgado. </author> <title> Note on complemented closure operators of complete lattices. Portugal. </title> <journal> Math., </journal> <volume> 21(3) </volume> <pages> 135-142, </pages> <year> 1962. </year>
Reference: [26] <author> F. Nielson. </author> <title> Tensor products generalize the relational data flow analysis method. </title> <booktitle> In Proc. 4th Hung. Comp. Science Conf., </booktitle> <pages> pp. 211-225, </pages> <year> 1985. </year>
Reference-contexts: k (lfp (T S Q )) are renamed apart, and # = mgu (hh 1 ; :::; h k i; hg 1 ; :::; g k i), then b k # is a call pattern for G in P [ Q . 6 Related works The most related works are <ref> [3, 11, 12, 26] </ref>. Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in [11]. <p> Cousot and Cousot firstly defined the reduced cardinal power of abstract interpretations in [11]. This construction, relied upon the particular semantics of assertions, was based on functional composition with respect to the meet-operation on assertions, which restricted to additive functions is isomorphic to Nielson's tensor product of <ref> [26] </ref>. We generalize those results for arbitrary operators of composition for concrete denotations, allowing the approach to be applicable to semantics of logic programming, where trace-unfolding does not behave like a meet-operation (e.g., it is not commutative).
Reference: [27] <author> M.H. van Emden and R.A. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> J. of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
Reference: [28] <author> M. Ward. </author> <title> The closure operators of a lattice. </title> <journal> Ann. of Math., </journal> <volume> 43(2) </volume> <pages> 191-196, </pages> <year> 1942. </year>
References-found: 28

