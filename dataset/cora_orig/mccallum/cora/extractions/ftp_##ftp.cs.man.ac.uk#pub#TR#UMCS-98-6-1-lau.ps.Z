URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-lau.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: kung-kiu@cs.man.ac.uk ornaghi@dsi.unimi.it  
Title: OOD Frameworks in Component-based Software Development in Computational Logic  
Author: Kung-Kiu Lau Mario Ornaghi 
Note: Extended Abstract  
Address: Manchester M13 9PL Via Comelico 39/41, 20135 Milano United Kingdom Italy  
Affiliation: Department of Computer Science Dipartimento di Scienze dell'Informazione University of Manchester Universita' degli studi di Milano  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R.H. Bourdeau and B.H.C. Cheng. </author> <title> A formal semantics for object model diagrams. </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 21(10) </volume> <pages> 799-821, </pages> <year> 1995. </year>
Reference-contexts: Dynamic aspects, e.g. creation and state-transition methods, will be studied in another paper. The work that is most closely related to our work here is the formalisation of OMT [13] object model diagrams by Bourdeau and Cheng <ref> [1] </ref>. However, their formalisation endows such diagrams with algebraic semantics, which is initial, in contrast to our isoinitial semantics. They model states as sorts, in contrast to our notion of abstract states as evolving axioms.
Reference: [2] <author> D. Coleman, P. Arnold, S. Bodoff, C. Dollin, H. Gilchrist, F. Hayes, and P. Jeremaes. </author> <title> Object-Oriented Development: The Fusion Method . Prentice-Hall, </title> <booktitle> 1994. </booktitle> <pages> 7 </pages>
Reference: [3] <author> S. Cook and J. Daniels. </author> <title> Designing Object Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference: [4] <author> D.F. D'Souza and A.C. Wills. </author> <title> Extending Fusion: practical rigor and refinement. </title> <editor> In R. Malan et al , editors, </editor> <booktitle> Object-Oriented Development at Work . Prentice-Hall 1996. </booktitle>
Reference: [5] <author> D.F. D'Souza and A.C. Wills. </author> <title> Component-Based Development using Catalysis. </title> <note> Draft book. </note>
Reference: [6] <author> Y. Gurevich, </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36, </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference: [7] <author> R. Helm, I.M. Holland, and D. Gangopadhay. </author> <title> Contracts | Specifying behavioural compositions in OO systems. </title> <journal> Sigplan Notices 25(10) (Proc. </journal> <volume> ECOOP/OOPSLA 90 </volume> ). 
Reference: [8] <author> C. Kreitz, K.-K. Lau, and M. Ornaghi. </author> <title> Formal reasoning about modules, reuse and their correctness. In D.M. </title> <editor> Gabbay and H.J. Ohlbach, editors, </editor> <booktitle> Proc. Int. Conf. on Formal and Applied Practical Reasoning, LNAI 1085 </booktitle> <pages> 384-399, </pages> <publisher> Springer-Verlag 1996. </publisher>
Reference: [9] <author> K.-K. Lau and M. Ornaghi. </author> <title> Towards an object-oriented methodology for deductive synthesis of logic programs. </title> <editor> In M. Proietti, editor, </editor> <booktitle> Proc. </booktitle> <volume> LOPSTR 95 , LNCS 1048 </volume> <pages> 152-169, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [10] <author> K.-K. Lau and M. Ornaghi. </author> <title> A formal approach to deductive synthesis of constraint logic programs. </title> <editor> In J.W. Lloyd, editor, </editor> <booktitle> Proc. 1995 Int. Logic Programming Symp., </booktitle> <pages> pages 543-557, </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference: [11] <author> K.-K. Lau, M. Ornaghi, and A. Wills. </author> <title> Frameworks in Catalysis: Pictorial Notation and Formal Semantics. </title> <booktitle> Proc. 1st IEEE Int. Conf. on Formal Engineering Methods, </booktitle> <pages> pages 213-220, </pages> <publisher> IEEE Computer Society, </publisher> <year> 1997. </year>
Reference-contexts: The next step is to add a dynamic model to the static one and formalise specification and correctness of dynamic methods. 4 Discussion In <ref> [11] </ref> we started to formalise a notation for OOD frameworks in Catalysis. In this paper, we have proposed a preliminary formalisation of the frameworks themselves, by introducing states into specification frameworks that we have used in our approach to formal development of logic programs.
Reference: [12] <author> R. Mauth. </author> <title> A better foundation: development frameworks let you build an application with reusable objects. </title> <address> BYTE 21(9):40IS 10-13, </address> <month> September </month> <year> 1996. </year>
Reference: [13] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Sorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Dynamic aspects, e.g. creation and state-transition methods, will be studied in another paper. The work that is most closely related to our work here is the formalisation of OMT <ref> [13] </ref> object model diagrams by Bourdeau and Cheng [1]. However, their formalisation endows such diagrams with algebraic semantics, which is initial, in contrast to our isoinitial semantics. They model states as sorts, in contrast to our notion of abstract states as evolving axioms.
Reference: [14] <author> M. Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 675-788. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year> <month> 8 </month>
References-found: 14

