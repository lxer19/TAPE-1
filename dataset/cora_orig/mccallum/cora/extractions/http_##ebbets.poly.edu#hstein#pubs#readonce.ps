URL: http://ebbets.poly.edu/hstein/pubs/readonce.ps
Refering-URL: http://ebbets.poly.edu/hstein/journal.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Learning Read-Once Formulas with Queries  
Author: Dana Angluin Lisa Hellerstein Marek Karpinski 
Date: 40:1, 1993.  
Note: Journal of the Association for Computing machinery  
Abstract: A read-once formula is a boolean formula in which each variable occurs at most once. Such formulas are also called -formulas or boolean trees. This paper treats the problem of exactly identifying an unknown read-once formula using specific kinds of queries. The main results are a polynomial time algorithm for exact identification of monotone read-once formulas using only membership queries, and a polynomial time algorithm for exact identification of general read-once formulas using equivalence and membership queries (a protocol based on the notion of a minimally adequate teacher [1]). Our results improve on Valiant's previous results for read-once formulas [26]. We also show that no polynomial time algorithm using only membership queries or only equivalence queries can exactly identify all read-once formulas.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Angluin. </author> <title> Learning regular sets from queries and counterexamples. </title> <journal> Information and Computation, </journal> <volume> 75 </volume> <pages> 87-106, </pages> <year> 1987. </year>
Reference-contexts: In particular, a learning algorithm that uses equivalence queries and membership queries and achieves exact identification may be transformed into one that uses randomly drawn examples and membership queries and achieves approximate identification in the distribution free model, with a polynomial increase in computational cost <ref> [1, 2] </ref>. The idea is to replace each equivalence query with a sufficient quantity of randomly drawn examples, checking that the hypothesis classifies each one correctly. If so, the equivalence query is answered "yes" and with high probability the hypothesis is approximately equal to the unknown concept. <p> Several learning problems have been shown to have polynomial time exact identification algorithms using equivalence and membership queries. Some examples are deterministic finite state acceptors <ref> [1] </ref>, monotone DNF formulas [2], bracketted context free languages described by deterministic bottom-up tree automata [25], and propositional Horn sentences [5]. In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries [4, 2].
Reference: [2] <author> D. Angluin. </author> <title> Queries and concept learning. </title> <journal> Machine Learning, </journal> <volume> 2 </volume> <pages> 319-342, </pages> <year> 1987. </year>
Reference-contexts: Thus, it seems that we must move away from the distribution free model in order to exploit the special properties of read-once formulas. Angluin <ref> [2] </ref> has proposed studying the notion of polynomial time exact identifiability of concepts using various types of queries (or oracles, in Valiant's terminology.) Two types of queries seem to be particularly interesting: membership queries and equivalence queries. <p> In particular, a learning algorithm that uses equivalence queries and membership queries and achieves exact identification may be transformed into one that uses randomly drawn examples and membership queries and achieves approximate identification in the distribution free model, with a polynomial increase in computational cost <ref> [1, 2] </ref>. The idea is to replace each equivalence query with a sufficient quantity of randomly drawn examples, checking that the hypothesis classifies each one correctly. If so, the equivalence query is answered "yes" and with high probability the hypothesis is approximately equal to the unknown concept. <p> Several learning problems have been shown to have polynomial time exact identification algorithms using equivalence and membership queries. Some examples are deterministic finite state acceptors [1], monotone DNF formulas <ref> [2] </ref>, bracketted context free languages described by deterministic bottom-up tree automata [25], and propositional Horn sentences [5]. In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries [4, 2]. <p> In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries <ref> [4, 2] </ref>. To this list we now add read-once formulas. 2 Preliminaries 2.1 Boolean functions and formulas Let n be a positive integer. The boolean n-vectors is the set B n of vectors f0; 1g n . The i th component of the boolean vector x is denoted x [i]. <p> A simple adversary argument shows that no polynomial time algorithm can exactly identify all the read-once formulas over V n using only membership queries <ref> [2] </ref>. <p> Q.E.D. 20 Let M denote the class of monotone DNF formulas. Then M can be exactly identified in polynomial time using membership and equivalence queries <ref> [2] </ref>, and M is closed under projection. Moreover, U (M ) is the class of unate DNF formulas. Thus, as an easy corollary of the theorem above, we have the following. <p> Theorem 5 shows that monotone read-once formulas can be exactly identified in time O (n 3 ) using O (n 2 ) membership queries. The running time bound has been improved to O (n 2 ) by Ragha-van and Schach [24]. A simple adversary argument <ref> [2] </ref> shows that there is no polynomial time algorithm that exactly identifies arbitrary read-once formulas using only membership queries. When both membership and equivalence queries are available, the results for the monotone case are clearly no worse than when just membership queries are available. <p> In particular, the class of monotone DNF formulas is identifiable in polynomial time using membership and equivalence queries, but not with membership queries alone <ref> [2] </ref>. For classes of monotone formulas, constrained instance queries can be simulated using membership queries 27 [8], which implies that the class of monotone DNF formulas cannot be identified in polynomial time using constrained instance queries alone.
Reference: [3] <author> D. Angluin. </author> <title> Using queries to identify -formulas. </title> <type> Technical report, </type> <institution> Yale University, YALE/DCS/RR-694, </institution> <year> 1989. </year>
Reference-contexts: The algorithm is an improvement of Valiant's polynomial time algorithm because it uses only one of the three oracles that Valiant's uses. Some of the results in this paper appeared in a preliminary form in <ref> [3] </ref> and [15]. Angluin [3] and Hellerstein and Karpinski [15] independently discovered polynomial time algorithms to exactly identify monotone read-once formulas using membership queries. The problem of exact identification using only membership queries can be viewed as a problem of interpolation using a "black box" input oracle. <p> The algorithm is an improvement of Valiant's polynomial time algorithm because it uses only one of the three oracles that Valiant's uses. Some of the results in this paper appeared in a preliminary form in <ref> [3] </ref> and [15]. Angluin [3] and Hellerstein and Karpinski [15] independently discovered polynomial time algorithms to exactly identify monotone read-once formulas using membership queries. The problem of exact identification using only membership queries can be viewed as a problem of interpolation using a "black box" input oracle.
Reference: [4] <author> D. Angluin. </author> <title> Negative results for equivalence queries. </title> <journal> Machine Learning, </journal> <volume> 5 </volume> <pages> 121-150, </pages> <year> 1990. </year>
Reference-contexts: In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries <ref> [4, 2] </ref>. To this list we now add read-once formulas. 2 Preliminaries 2.1 Boolean functions and formulas Let n be a positive integer. The boolean n-vectors is the set B n of vectors f0; 1g n . The i th component of the boolean vector x is denoted x [i]. <p> The proof is similar to the proof in <ref> [4] </ref> that there is no polynomial time algorithm to identify all DNF formulas using only equivalence queries. That proof made use of a certain combinatorial property of DNF formulas: every DNF formula is satisfied by an assignment with "few" ones or falsified by an assignment with "few" zeroes.
Reference: [5] <author> D. Angluin, M. Frazier, and L. Pitt. </author> <title> Learning conjunctions of Horn clauses. </title> <booktitle> In Proceedings of the 31st Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 186-192. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: Several learning problems have been shown to have polynomial time exact identification algorithms using equivalence and membership queries. Some examples are deterministic finite state acceptors [1], monotone DNF formulas [2], bracketted context free languages described by deterministic bottom-up tree automata [25], and propositional Horn sentences <ref> [5] </ref>. In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries [4, 2]. To this list we now add read-once formulas. 2 Preliminaries 2.1 Boolean functions and formulas Let n be a positive integer.
Reference: [6] <author> D. Angluin and M. Kharitonov. </author> <booktitle> When won't membership queries help? In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 444-454. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: For k 3, Angluin and Kharitonov show that predicting k-formulas with membership queries is no easier (modulo a polynomial time transformation) than predicting general boolean formulas with membership queries, and give cryptographic evidence for the difficulty of the latter problem <ref> [6] </ref>. This leaves open the case of k = 2. Hancock gives a polynomial time algorithm for predicting 2-DNF using membership queries [12]. <p> For classes of monotone formulas, constrained instance queries can be simulated using membership queries 27 [8], which implies that the class of monotone DNF formulas cannot be identified in polynomial time using constrained instance queries alone. For the other direction, the techniques of Angluin and Kharitonov <ref> [6] </ref> can be used to give cryptographic evidence that there are classes of formulas identifiable in polynomial time using constrained instance queries that are not identifiable in polynomial time using membership and equivalence queries.
Reference: [7] <author> D. Angluin and L. Valiant. </author> <title> Fast probabilistic algorithms for Hamiltonian circuits and match-ings. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 18 </volume> <pages> 155-193, </pages> <year> 1979. </year>
Reference-contexts: defined by Valiant [26], the learning algorithm specifies a set S 0 of literals from L n and the reply is "yes" if S 0 is a subset of a minterm of f and "no" otherwise. 2.3 Model of computation Our model of computation is the random access computer (RAC) <ref> [7] </ref> augmented to allow for queries. We describe the augmentation in some detail, since we want to reflect accurately the set-up time for queries in our bounds.
Reference: [8] <author> A. Blum, L. Hellerstein, and N. Littlestone. </author> <title> Learning in the presence of finitely or infinitely many irrelevant attributes. To appear, </title> <booktitle> Proceedings of the Fourth Annual Workshop on Computational Learning Theory, </booktitle> <year> 1991. </year>
Reference-contexts: In particular, the class of monotone DNF formulas is identifiable in polynomial time using membership and equivalence queries, but not with membership queries alone [2]. For classes of monotone formulas, constrained instance queries can be simulated using membership queries 27 <ref> [8] </ref>, which implies that the class of monotone DNF formulas cannot be identified in polynomial time using constrained instance queries alone.
Reference: [9] <author> D. Yu. Grigoriev, M. Karpinski, and M. F. Singer. </author> <title> Fast parallel algorithms for sparse multi-variate polynomial interpolation over finite fields. </title> <journal> Siam J. Comput., </journal> <pages> pages 1059-1063, </pages> <year> 1990. </year>
Reference-contexts: Corresponding results for interpolation of boolean polynomials (formulas over the basis of AND and XOR) over small extensions of finite fields are proved by Grigoriev, Karpinski, and Singer <ref> [9] </ref>. Several learning problems have been shown to have polynomial time exact identification algorithms using equivalence and membership queries. Some examples are deterministic finite state acceptors [1], monotone DNF formulas [2], bracketted context free languages described by deterministic bottom-up tree automata [25], and propositional Horn sentences [5].
Reference: [10] <author> T. Hancock. </author> <title> Identifying -decision trees and -formulas with constrained instance queries. </title> <type> Manuscript, </type> <institution> Harvard University, </institution> <year> 1989. </year> <month> 28 </month>
Reference-contexts: Since one subset query with a conjunction of n literals can be used to answer a membership query, and a pair consisting of a subset query and a superset query can be used to answer an equivalence query, we have the following result, independently proved by Hancock <ref> [10] </ref>. 18 Corollary 13 There is an algorithm that exactly identifies all the read-once formulas over V n in time polynomial in n using subset and superset queries. 7 A generalization of this transformation The transformation given in the preceding section of the algorithm MM into the algorithm MEQ can be <p> The complexity of predicting general DNF (or CNF) with membership queries is open, but Angluin and Kharitonov give cryptographic evidence that it is no easier than predicting them without membership queries. Hancock <ref> [10] </ref> has shown that read-once formulas and -decision trees are identifiable in polynomial time using constrained instance queries. (The result for read-once formulas was proved independently by Hellerstein and Karpinski [15].) The input to a constrained instance query is a partial assignment a and a boolean value b, and the reply
Reference: [11] <author> T. Hancock. </author> <title> Identifying -formula decision trees with queries. </title> <booktitle> In Proceedings of the Third Annual Workshop on Computational Learning Theory, </booktitle> <pages> pages 23-37. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Their results imply an O (n 2 ) time algorithm for learning monotone read-once formulas using O (n 2 ) membership queries, which improves our time bound by a factor of n. Hancock <ref> [11] </ref> gives a polynomial time algorithm using membership and equivalence queries to learn the class of - formula decision trees, which generalizes the class of read-once formulas.
Reference: [12] <author> T. Hancock. </author> <title> Learning 2DNF formulas and k decision trees. To appear, </title> <booktitle> Proceedings of the Fourth Annual Workshop on Computational Learning Theory, </booktitle> <year> 1991. </year>
Reference-contexts: This leaves open the case of k = 2. Hancock gives a polynomial time algorithm for predicting 2-DNF using membership queries <ref> [12] </ref>. Angluin and Kharitonov, and independently, Hancock, show that predicting 3-DNF with membership queries is as hard (modulo a polynomial time transformation) as predicting general DNF with membership queries.
Reference: [13] <author> T. Hancock and L. Hellerstein. </author> <title> Learning read-once formulas over fields and extended bases. To appear, </title> <booktitle> Proceedings of the Fourth Annual Workshop on Computational Learning Theory, </booktitle> <year> 1991. </year>
Reference-contexts: Hancock [11] gives a polynomial time algorithm using membership and equivalence queries to learn the class of - formula decision trees, which generalizes the class of read-once formulas. Hancock and Hellerstein <ref> [13] </ref> give polynomial time algorithms using membership and equivalence queries to learn read-once formulas over extended bases including negation, threshold gates, and gates computing congruence to a modulo c, where c is bounded by a fixed constant.
Reference: [14] <author> L. Hellerstein. </author> <title> On Characterizing and Learning Some Classes of Read-once Functions. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1989. </year>
Reference-contexts: The above construction builds the read-once formula top-down. There is a more complicated, recursive, bottom-up, construction that runs in time O (n 2 ) <ref> [14] </ref>. The construction is based on the fact that two literals X and Y are children of the same node in f if and only if for all other literals Z appearing in f , l (lca (X; Z)) = l (lca (Y; Z)).
Reference: [15] <author> L. Hellerstein and M. Karpinski. </author> <title> Learning read-once formulas using membership queries. </title> <booktitle> In Proc. of the Second Annual Workshop on Computational Learning Theory, </booktitle> <pages> pages 146-161. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1989. </year>
Reference-contexts: The algorithm is an improvement of Valiant's polynomial time algorithm because it uses only one of the three oracles that Valiant's uses. Some of the results in this paper appeared in a preliminary form in [3] and <ref> [15] </ref>. Angluin [3] and Hellerstein and Karpinski [15] independently discovered polynomial time algorithms to exactly identify monotone read-once formulas using membership queries. The problem of exact identification using only membership queries can be viewed as a problem of interpolation using a "black box" input oracle. <p> The algorithm is an improvement of Valiant's polynomial time algorithm because it uses only one of the three oracles that Valiant's uses. Some of the results in this paper appeared in a preliminary form in [3] and <ref> [15] </ref>. Angluin [3] and Hellerstein and Karpinski [15] independently discovered polynomial time algorithms to exactly identify monotone read-once formulas using membership queries. The problem of exact identification using only membership queries can be viewed as a problem of interpolation using a "black box" input oracle. <p> Hancock [10] has shown that read-once formulas and -decision trees are identifiable in polynomial time using constrained instance queries. (The result for read-once formulas was proved independently by Hellerstein and Karpinski <ref> [15] </ref>.) The input to a constrained instance query is a partial assignment a and a boolean value b, and the reply is "yes" if and only if there exists an assignment x agreeing with a such that f (x) = b.
Reference: [16] <author> M. Karchmer, N. Linial, I. Newman, M. Saks, and A. Wigderson. </author> <title> Combinatorial characterization of read once formulae. </title> <booktitle> Presented at the Joint French-Israeli Binational Symposium on Combinatorics and Algorithms, </booktitle> <year> 1988. </year> <note> To appear in Discrete Math. </note>
Reference-contexts: We have now proved the following lemma. Lemma 3 A minterm and a maxterm of a read-once formula contain exactly one literal in common. Karchmer et al. <ref> [16] </ref> have given an elegant combinatorial characterization of read-once formulas from which Lemma 3 follows, but the derivation above provides some additional insight. 2.5 The procedures Findmin and Findmax Let f be a nonconstant monotone read-once function over V n . <p> Thus, by Lemma 2, for all Y and Z in L 0 , (Y; Z) is an edge if and only if l (lca (Y; Z)) = OR. Clearly the maxterm graph of f is the complement of the minterm graph. Karchmer et al. <ref> [16] </ref> have shown that if f is nonconstant, then a read-once formula equivalent to f may be recursively constructed from the minterm graph of f as follows.
Reference: [17] <author> R.M. Karp, E. Upfal, and A. Wigderson. </author> <title> Are search and decision problems computationally equivalent? In Proc. </title> <booktitle> 17th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 285-295. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: Lower bounds on random and parallel algorithms for learning a minterm of an arbitrary monotone function using membership queries can be derived from the lower bounds for independence system oracles of Karp, Upfal and Wigderson <ref> [17] </ref>. Various interesting generalizations of the results in this paper have been obtained. Raghavan and Schach [24] give a polynomial time algorithm using membership and equivalence queries to learn the class of switch configurations, which generalizes the class of monotone read-once formulas.
Reference: [18] <author> M. Kearns. </author> <title> The Computational Complexity of Machine Learning. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <year> 1989. </year> <note> To be published by MIT Press in the ACM Distinguished Dissertation Series. </note>
Reference-contexts: Kearns and Valiant <ref> [20, 18] </ref> have shown that prediction of general boolean formulas in the distribution free model is as hard as certain cryptographic problems, for example, factoring Blum integers. Thus, it seems that we must move away from the distribution free model in order to exploit the special properties of read-once formulas. <p> The results of Kearns, Li, Pitt and Valiant [19] show that there is a polynomial time reduction of the problem of predicting arbitrary boolean formulas to the problem of predicting monotone read-once formulas. The results of Kearns and Valiant <ref> [18, 20] </ref> give a polynomial time reduction of three apparently hard cryptographic problems to the problem of predicting arbitrary boolean formulas. These results apply also to the problem of probably approximately correctly identifying monotone read-once formulas using arbitrary polynomial time hypotheses.
Reference: [19] <author> M. Kearns, M. Li, L. Pitt, and L. Valiant. </author> <title> On the learnability of boolean formulae. </title> <booktitle> In Proc. 19th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 285-295. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: If instead we consider the problem of predicting the value of the formula on randomly chosen examples (see [23] for definitions), a potentially easier problem, the reductions given by Kearns, Li, Pitt, and Valiant <ref> [19] </ref> show that monotone read-once formulas are no easier to predict in the distribution free model than general boolean formulas. Kearns and Valiant [20, 18] have shown that prediction of general boolean formulas in the distribution free model is as hard as certain cryptographic problems, for example, factoring Blum integers. <p> This depends on the fact that the hypotheses output by the algorithm are constrained to be read-once formulas. The results of Kearns, Li, Pitt and Valiant <ref> [19] </ref> show that there is a polynomial time reduction of the problem of predicting arbitrary boolean formulas to the problem of predicting monotone read-once formulas.
Reference: [20] <author> M. Kearns and L. Valiant. </author> <title> Cryptographic limitations on learning boolean formulae and finite automata. </title> <booktitle> In Proc. 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 433-444. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Kearns and Valiant <ref> [20, 18] </ref> have shown that prediction of general boolean formulas in the distribution free model is as hard as certain cryptographic problems, for example, factoring Blum integers. Thus, it seems that we must move away from the distribution free model in order to exploit the special properties of read-once formulas. <p> The results of Kearns, Li, Pitt and Valiant [19] show that there is a polynomial time reduction of the problem of predicting arbitrary boolean formulas to the problem of predicting monotone read-once formulas. The results of Kearns and Valiant <ref> [18, 20] </ref> give a polynomial time reduction of three apparently hard cryptographic problems to the problem of predicting arbitrary boolean formulas. These results apply also to the problem of probably approximately correctly identifying monotone read-once formulas using arbitrary polynomial time hypotheses.
Reference: [21] <author> N. Littlestone. </author> <title> Learning quickly when irrelevant attributes abound: a new linear-threshold algorithm. </title> <journal> Machine Learning, </journal> <volume> 2 </volume> <pages> 285-318, </pages> <year> 1988. </year>
Reference-contexts: If so, the equivalence query is answered "yes" and with high probability the hypothesis is approximately equal to the unknown concept. If not, the equivalence query is answered with the incorrectly classified example as a counterexample. Littlestone <ref> [21] </ref> demonstrates another possible efficient transformation of a learning algorithm that uses equivalence queries and achieves exact identification.
Reference: [22] <author> L. Pitt and L. Valiant. </author> <title> Computational limitations on learning from examples. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 965-984, </pages> <year> 1988. </year>
Reference-contexts: This contrasts with the case of a general boolean formula, in which several paths may be simultaneously affected by a single change of this type. Given this initial intuition, the following negative results are surprising. Pitt and Valiant <ref> [22] </ref> show that if RP 6= NP, then there is no polynomial time algorithm to learn even monotone read-once formulas from examples in the distribution free model. In this case, the restriction that the hypothesis of the learning algorithm be represented as a read-once formula is essential to the proof. <p> Q.E.D. 9 Summary and remarks Table 1 summarizes what is known of the computational difficulty of learning monotone and arbitrary read-once formulas according to six types of learning protocols. The entries are discussed in order below. The results of Pitt and Valiant <ref> [22] </ref> show that probably approximately correct identification of monotone read-once formulas is not possible in polynomial time if RP 6= NP. This depends on the fact that the hypotheses output by the algorithm are constrained to be read-once formulas.
Reference: [23] <author> L. Pitt and M. Warmuth. </author> <title> Reductions among prediction problems: On the difficulty of predicting automata. </title> <booktitle> In Proceedings of the Third Annual Structure in Complexity Theory Conference, </booktitle> <pages> pages 60-69. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: In this case, the restriction that the hypothesis of the learning algorithm be represented as a read-once formula is essential to the proof. If instead we consider the problem of predicting the value of the formula on randomly chosen examples (see <ref> [23] </ref> for definitions), a potentially easier problem, the reductions given by Kearns, Li, Pitt, and Valiant [19] show that monotone read-once formulas are no easier to predict in the distribution free model than general boolean formulas.
Reference: [24] <author> V. Raghavan and S. Schach. </author> <title> Learning switch configurations. </title> <booktitle> In Proceedings of Third Annual Workshop on Computational Learning Theory, </booktitle> <pages> pages 38-51. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Theorem 5 shows that monotone read-once formulas can be exactly identified in time O (n 3 ) using O (n 2 ) membership queries. The running time bound has been improved to O (n 2 ) by Ragha-van and Schach <ref> [24] </ref>. A simple adversary argument [2] shows that there is no polynomial time algorithm that exactly identifies arbitrary read-once formulas using only membership queries. When both membership and equivalence queries are available, the results for the monotone case are clearly no worse than when just membership queries are available. <p> Various interesting generalizations of the results in this paper have been obtained. Raghavan and Schach <ref> [24] </ref> give a polynomial time algorithm using membership and equivalence queries to learn the class of switch configurations, which generalizes the class of monotone read-once formulas.
Reference: [25] <author> Y. Sakakibara. </author> <title> Learning context-free grammars from structural data in polynomial time. </title> <booktitle> Theoretical Computer Science, </booktitle> <pages> pages 223-242, </pages> <year> 1990. </year>
Reference-contexts: Several learning problems have been shown to have polynomial time exact identification algorithms using equivalence and membership queries. Some examples are deterministic finite state acceptors [1], monotone DNF formulas [2], bracketted context free languages described by deterministic bottom-up tree automata <ref> [25] </ref>, and propositional Horn sentences [5]. In each of these cases there is a proof that no polynomial time learning algorithm is possible that uses only membership or only equivalence queries [4, 2].
Reference: [26] <author> L. G. Valiant. </author> <title> A theory of the learnable. </title> <journal> C. ACM, </journal> <volume> 27 </volume> <pages> 1134-1142, </pages> <year> 1984. </year> <month> 30 </month>
Reference-contexts: For example, it seems unreasonable to expect a single definition to model learning well at both the neuron level and higher cognitive levels. Stimulated by Valiant's seminal paper <ref> [26] </ref>, much recent research has focused on exploring definitions of "efficient learnability." Valiant's paper addressed the question of which syntactically defined classes of boolean formulas can be efficiently learned. fl Computer Science Dept., Yale University, P. O. Box 2158, New Haven, CT 06520. <p> The choice of which counterexample to supply when h is not equivalent to f is assumed to be arbitrary. In particular, the learning algorithm must work as advertised no matter which choices of counterexamples are made. In a relevant possibility query, first defined by Valiant <ref> [26] </ref>, the learning algorithm specifies a set S 0 of literals from L n and the reply is "yes" if S 0 is a subset of a minterm of f and "no" otherwise. 2.3 Model of computation Our model of computation is the random access computer (RAC) [7] augmented to allow <p> Thus, with O (n 2 ) relevant possibility queries we may construct the minterm graph of f . By the results of the preceding section, a formula equivalent to f may then be obtained in time O (n 2 ). Q.E.D. This algorithm improves upon the algorithm of Valiant <ref> [26] </ref> because it uses only one of the three types of queries used in his algorithm (without increasing the computational complexity or total number of queries). However, it is hard to imagine situations in which relevant possibility 10 queries are directly answered by the environment.
References-found: 26

