URL: http://www.daimi.aau.dk/~daniel/texts/Lambda.Calculus.Model.ps.gz
Refering-URL: http://www.daimi.aau.dk/~daniel/texts/
Root-URL: http://www.daimi.aau.dk
Title: A lambda calculus model of Martin-Lof's theory of types with explicit substitution  
Author: Daniel Fridlender 
Keyword: type theory, explicit substitution, models of type theory, proof-irrelevant model, realizability model.  
Date: September 1997  
Abstract: This paper presents a proof-irrelevant model of Martin-Lof's theory of types with explicit substitution; that is, a model in the style of [Smi88], in which types are interpreted as truth values and objects (or proofs) are irrelevant. The fundamental difference here is the need to cope with a formal system which in addition to types has sets and substitutions. This difference leads us to a whole reformulation of the model which consists in defining an interpretation in terms of the untyped lambda calculus. From this interpretation the proof-irrelevant model is obtained as a particular instance. Finally, the paper outlines the definition of a realizability model which is also obtained as a particular instance. 
Abstract-found: 1
Intro-found: 1
Reference: [Acz80] <author> P. Aczel. </author> <title> Frege structures and the notions of proposition, truth and set. </title> <editor> In J. Barwise, H. J. Keisler, and K. Kunen, editors, </editor> <booktitle> The Kleene Symposium. </booktitle> <publisher> North-Holland Publishing Company, </publisher> <year> 1980. </year>
Reference-contexts: There are different ways of obtaining such Set and El, of which we sketch two. The first is due to Aczel <ref> [Acz80] </ref>.
Reference: [All87] <author> S. Allen. </author> <title> A Non-Type-Theoretic Semantics for Type-Theoretic Language. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: The second way we sketch is due to Allen <ref> [All87] </ref>. It consists in defining a subset of fl fi Pow (fl) using Tarski's fix point theorem for monotone operators on a complete lattice. The monotone operator OE on the lattice of subsets of fl fi Pow (fl) is defined as follows.
Reference: [Bar81] <author> H. Barendregt. </author> <title> The Lambda Calculus. </title> <publisher> North Holland, </publisher> <year> 1981. </year>
Reference-contexts: Notice that we use variables in the proof of Theorem 4.1. The theorem is still valid if N i ranges over closed lambda terms. For a proof of this case see <ref> [Bar81] </ref>, page 140. 4.2 Interpretation of inductive sets In this section we illustrate how to extend the definition of the proof-irrelevant model with inductively defined sets in the scheme of [Dyb94].
Reference: [Car86] <author> J. Cartmell. </author> <title> Generalized algebraic theories and contextual categories. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 32 </volume> <pages> 209-243, </pages> <year> 1986. </year>
Reference-contexts: In these presentations a model is required to have the same structure as type theory itself. One way to fulfill this requirement is to look at type theory as an "initial algebra" in a particular generalized algebraic theory (GAT) in the sense of Cart-mell <ref> [Car86] </ref>, which is a notion of many-sorted algebra generalized with dependent sorts, an analogue of dependent types. Any algebra in that GAT is a model of type theory and the interpretation is the morphism from type theory to that algebra.
Reference: [Coq92] <author> T. Coquand. </author> <title> Pattern matching with dependent types. </title> <booktitle> In Proceeding from the logical framework workshop at Bastad, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: The definitions of small and large types of Coquand <ref> [Coq92] </ref> are easy to adjust to pretypes and prefamilies of types. Set is large, El is small. The size of fi a, ff ! fi and fiffi is the size of fi. The size of ffffi and [x]ff is the size of ff.
Reference: [Dyb94] <author> P. Dybjer. </author> <title> Inductive families. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6 </volume> <pages> 440-465, </pages> <year> 1994. </year>
Reference-contexts: For a proof of this case see [Bar81], page 140. 4.2 Interpretation of inductive sets In this section we illustrate how to extend the definition of the proof-irrelevant model with inductively defined sets in the scheme of <ref> [Dyb94] </ref>. From the examples we show here it seems possible to deduce a general method to interpret every inductive definition which follows that scheme. Extending the system with inductively defined sets amounts to increasing the syntax and enlarging the system of rules.
Reference: [Dyb96] <author> P. Dybjer. </author> <title> Internal type theory. </title> <booktitle> In TYPES'95, Lecture Notes in Computer Science, </booktitle> <pages> pages 120-134, </pages> <year> 1996. </year> <month> 64 </month>
Reference-contexts: Thus in the presentation of the model we define the interpretation of all the expressions, in particular, of those which are not meaningful. This is in contrast with other presentations of models of type theory like Dybjer <ref> [Dyb96] </ref>, Hofmann [Hof97] and Martin-Lof's, in which only meaningful expressions are interpreted. In these presentations a model is required to have the same structure as type theory itself. <p> Any algebra in that GAT is a model of type theory and the interpretation is the morphism from type theory to that algebra. Suitable GATs for type theory are the GAT of Cartmell's categories with 8 attributes, and a variant of it, the GAT of categories with families <ref> [Dyb96] </ref>. Martin-Lof proposed a variation of this in which the model is defined in type theory itself. Sorts are represented by types and therefore, defining the model consists in formalizing in type theory a structure like that of type theory itself.
Reference: [Dyb97] <author> P. Dybjer. </author> <title> A general formulation of simultaenous inductive-recursive definitions in type theory. </title> <journal> Journal of Symbolic Logic, </journal> <note> 1997. To appear. </note>
Reference-contexts: The approach here consists in first defining a lambda calculus model and then specializing it to obtain a proof-irrelevant one. The 1 lambda calculus interpretation could also be used for other models, for example, for the realizability model shown by Dybjer <ref> [Dyb97] </ref>. This paper is organized as follows. Section 2 presents the formal system as a calculus. Section 3 defines the interpretation in terms of the lambda calculus and proves that it constitutes a model. <p> As shown in <ref> [Dyb97] </ref> realizability models like this can be defined in a schematic way even for a calculus with universes. 5.1 Defining Set and El We showed that if Set and El satisfy the requirements formulated above we obtain a realizability model of type theory extended with the inductive definitions of the set <p> As an instance of this interpretation we presented a proof-irrelevant model of the framework extended with a number of inductively defined sets. It would be interesting to formulate a general pattern for defining the interpretation of inductive definitions. We also showed that a realizability model like the one in <ref> [Dyb97] </ref> can be obtained as an instance of the model of the framework. Thierry Coquand suggested a more abstract interpretation in terms of an arbitrary model of the untyped lambda calculus. This would avoid the technical problems regarding names of variables.
Reference: [Fri97] <author> D. Fridlender. </author> <title> Higman lemma in type theory. In Types for proofs and programs, </title> <note> 1997. To appear. </note>
Reference-contexts: These examples are taken from <ref> [Fri97] </ref> where this particular extension of the system is used to prove Higman's lemma.
Reference: [Gas97] <author> V. Gaspes. </author> <title> A Type Theoretical Analysis of Some Aspects of Programming Languages. </title> <type> PhD thesis, </type> <institution> Department of Computing Science at Chalmers University of Technology and University of Goteborg, </institution> <year> 1997. </year>
Reference-contexts: Sorts are represented by types and therefore, defining the model consists in formalizing in type theory a structure like that of type theory itself. He used this idea to give Tarski-style semantics to type theory. This is shown in Gaspes <ref> [Gas97] </ref>. Compared to our presentation, these approaches avoid interpreting expressions which are not meaningful. On the other hand, the structure of the model becomes almost as complex as that of type theory. Also, they are intended for type theory without variables whereas here we deal with a calculus with variables.
Reference: [Hof97] <author> M. Hofmann. </author> <title> Syntax and semantics of dependent types. </title> <editor> In A Pitts and P. Dybjer, editors, </editor> <booktitle> Semantics and Logics of Computation, </booktitle> <pages> pages 79-130. </pages> <publisher> Cambridge University Press, </publisher> <year> 1997. </year>
Reference-contexts: Thus in the presentation of the model we define the interpretation of all the expressions, in particular, of those which are not meaningful. This is in contrast with other presentations of models of type theory like Dybjer [Dyb96], Hofmann <ref> [Hof97] </ref> and Martin-Lof's, in which only meaningful expressions are interpreted. In these presentations a model is required to have the same structure as type theory itself.
Reference: [Mar75] <author> P. Martin-Lof. </author> <title> An Intuitionistic Theory of Types: Predicative Part. </title> <editor> In H. E. Rose and J. C. Shepherdson, editors, </editor> <booktitle> Logic Colloquium 1973, </booktitle> <pages> pages 73-118, </pages> <address> Amsterdam, 1975. </address> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: 1 Introduction Type theory, as studied here, is a system created by Martin-Lof and intended for formalizing intuitionistic mathematics. The progressive development of type theory by successive modifications introduced by Martin-Lof has led to several formulations of the system, see for instance <ref> [Mar75] </ref>, and [Mar84]. For these presentations of type theory Smith [Smi88] defined a model in which every type is interpreted either as the empty set or as a singleton. As a consequence of this interpretation of types any two objects of a type are never distinguishable in the model. <p> This simplicity comes from the fact that both in <ref> [Mar75] </ref> and in [Mar84] every object is understood as a proof (or element). Hence, the proof-irrelevant model ignores the objects and only considers interpreting types, which are represented by the truth values truth and falsity. Instead, in Martin-Lof's theory of types with explicit substitution, there is a type of sets. <p> The use in [Smi88] of a two-valued set for the interpretation of types suggests using a two-valued set now for the interpretation of Set. This is so since in <ref> [Mar75] </ref> and [Mar84] propositions are identified with types, whereas in [Tas97] the analogy is between propositions 33 and sets. Therefore, we define Set as follows: Set = fM 2 fl j M &gt; _ M ?g where &gt; and ? are two non-equivalent closed lambda terms.
Reference: [Mar84] <author> P. Martin-Lof. </author> <title> Intuitionistic Type Theory. </title> <type> Bibliopolis, </type> <institution> Napoli, </institution> <year> 1984. </year>
Reference-contexts: 1 Introduction Type theory, as studied here, is a system created by Martin-Lof and intended for formalizing intuitionistic mathematics. The progressive development of type theory by successive modifications introduced by Martin-Lof has led to several formulations of the system, see for instance [Mar75], and <ref> [Mar84] </ref>. For these presentations of type theory Smith [Smi88] defined a model in which every type is interpreted either as the empty set or as a singleton. As a consequence of this interpretation of types any two objects of a type are never distinguishable in the model. <p> This simplicity comes from the fact that both in [Mar75] and in <ref> [Mar84] </ref> every object is understood as a proof (or element). Hence, the proof-irrelevant model ignores the objects and only considers interpreting types, which are represented by the truth values truth and falsity. Instead, in Martin-Lof's theory of types with explicit substitution, there is a type of sets. <p> The use in [Smi88] of a two-valued set for the interpretation of types suggests using a two-valued set now for the interpretation of Set. This is so since in [Mar75] and <ref> [Mar84] </ref> propositions are identified with types, whereas in [Tas97] the analogy is between propositions 33 and sets. Therefore, we define Set as follows: Set = fM 2 fl j M &gt; _ M ?g where &gt; and ? are two non-equivalent closed lambda terms.
Reference: [NPS90] <author> B. Nordstrom, K. Petersson, and J. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. An Introduction. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Moreover, Peano's fourth axiom, for instance, can be proved using universes. In this paper |as well as in [Smi88]| only formulations of type theory without universes are considered. In more recent formulations of type theory <ref> [NPS90] </ref> Martin-Lof put forward a framework in which there is a type of sets. Defining a similar model for this version of type theory is more involved. The type of sets cannot be interpreted as an empty set since it is inhabited.
Reference: [Par88] <author> M. Parigot. </author> <title> Programming with proofs: a second order type theory. </title> <editor> In H. Ganzinger, editor, </editor> <booktitle> ESOP '88. 2nd European Symposium on Programming., number 300 in Lecture Notes in Computer Science, </booktitle> <pages> pages 145-159, </pages> <year> 1988. </year>
Reference-contexts: This gives us freedom to interpret the other constants as any lambda terms, since they will inevitably be in the interpretation of their types, fl. We interpret them using a variant of Church's numerals like the one used by Parigot <ref> [Par88] </ref> in such a way that the equalities introduced in the definition hold in the model. The interpretation is summarized in Figures 32 and 33, on page 56. <p> The equations in Figure 34 are satisfied in the model. The interpretation of 0 and succ shown above was used in <ref> [Par88] </ref>.
Reference: [Smi88] <author> J. Smith. </author> <title> The Independence of Peano's Fourth Axiom from Martin-Lof's Type Theory without Universes. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 53 </volume> <pages> 840-845, </pages> <year> 1988. </year>
Reference-contexts: The progressive development of type theory by successive modifications introduced by Martin-Lof has led to several formulations of the system, see for instance [Mar75], and [Mar84]. For these presentations of type theory Smith <ref> [Smi88] </ref> defined a model in which every type is interpreted either as the empty set or as a singleton. As a consequence of this interpretation of types any two objects of a type are never distinguishable in the model. <p> Hence, if one of them satisfies a predicate, so does the other, which means that objects are actually irrelevant. The importance of this model is that it makes often evident that a given proposition is not provable. In <ref> [Smi88] </ref> it is used for instance to show that Peano's fourth axiom, which states that zero and the successor of any natural number are not equal, is not provable. <p> It is important to mention that in the presence of universes this model cannot be defined. Moreover, Peano's fourth axiom, for instance, can be proved using universes. In this paper |as well as in <ref> [Smi88] </ref>| only formulations of type theory without universes are considered. In more recent formulations of type theory [NPS90] Martin-Lof put forward a framework in which there is a type of sets. Defining a similar model for this version of type theory is more involved. <p> Figure 12 it is always immediate using the definition of the interpretation and the induction hypotheses, besides Lemma 3.17 in the cases of rules 4 and 5, and Corollary 3.14 in the case of rule 2. 2 32 4 A proof-irrelevant model The formulation of type theory considered by Smith <ref> [Smi88] </ref> allows a simple definition of the proof-irrelevant model. This simplicity comes from the fact that both in [Mar75] and in [Mar84] every object is understood as a proof (or element). <p> But [P; x]x is an object of both. In Section 4.1 we obtain a proof-irrelevant model as a particular case of the model shown in Section 3. Section 4.2 shows how to extend this model to particular inductively defined sets. As in <ref> [Smi88] </ref>, this model can be used to demonstrate that a given statement is not provable. Here, such a statement could be represented by a set or by a small type. <p> The proof-irrelevant model is obtained as an instance of the model presented in Section 3 by defining the parameters Set and El. The use in <ref> [Smi88] </ref> of a two-valued set for the interpretation of types suggests using a two-valued set now for the interpretation of Set. This is so since in [Mar75] and [Mar84] propositions are identified with types, whereas in [Tas97] the analogy is between propositions 33 and sets.
Reference: [Tas97] <author> A. Tasistro. </author> <title> Substitution, record types and subtyping in type theory, with applications to the theory of programming. </title> <type> PhD thesis, </type> <institution> Department of Computing Science at Chalmers University of Technology and University of Goteborg, </institution> <year> 1997. </year> <month> 65 </month>
Reference-contexts: Objects of this type must be relevant in the model while elements of sets or proofs of propositions remain irrelevant. Finally, Martin-Lof gave another presentation of the framework, the theory of types with explicit substitution, which was described by Tasistro <ref> [Tas97] </ref>. Contexts and substitutions which were treated informally in the previous formulations are now defined by the rules of the formal system. Substitutions are explicit rather than metaoperations on the expressions. On the one hand with the abundance of forms of judgments and rules, defining the model becomes more complicated. <p> Section 5 sketches the definition of a realizability model. 2 Type theory Martin-Lof formulated a version of the theory of types in which substitution is not assumed as a predefined operation on expressions <ref> [Tas97] </ref>. As a calculus, it consists of a rich set of rules which can be combined to derive judgments of various forms. <p> [] fi 1 and fi 2 are equal families of types over ff under ffi : ! ffi is a substitution for under ffi 1 =ffi 2 : ! ffi 1 and ffi 2 are equal substitutions for under The intuitive meaning of the forms of judgment is explained in <ref> [Tas97] </ref>. According to that explanation all the forms of judgment, excluding the first one, make sense only under the presupposition that some other judgments have been proved. Thus, ff type [] makes sense under the assumption that is a context, that is, that context has been proved. <p> Similarly, a 1 =a 2 : ff [] makes sense only under the suppositions that is a context, ff is a type under , and a 1 and a 2 are objects of type ff under . As mentioned in <ref> [Tas97] </ref> some rules of the calculus are redundant, that is, some rules can be proved to be derived or admissible in the system obtained by eliminating them. Figures 3, 4, and 5 display a selection of the rules which 2 excludes only some of those which are redundant. <p> The following theorem states that the interpretation constitutes a model of Martin-Lof's theory of types with explicit substitution. The similarity between the statement of the theorem and the explanation of the meaning of the forms of judgment in <ref> [Tas97] </ref> is remarkable. THEOREM 3.8 Given precontexts and , pretypes ff, ff 1 and ff 2 , preobjects a, a 1 and a 2 , prefamilies of types fi, fi 1 and fi 2 , and presubstitutions ffi, ffi 1 and ffi 2 . Then the following hold: 1. <p> The use in [Smi88] of a two-valued set for the interpretation of types suggests using a two-valued set now for the interpretation of Set. This is so since in [Mar75] and [Mar84] propositions are identified with types, whereas in <ref> [Tas97] </ref> the analogy is between propositions 33 and sets. Therefore, we define Set as follows: Set = fM 2 fl j M &gt; _ M ?g where &gt; and ? are two non-equivalent closed lambda terms.
References-found: 17

