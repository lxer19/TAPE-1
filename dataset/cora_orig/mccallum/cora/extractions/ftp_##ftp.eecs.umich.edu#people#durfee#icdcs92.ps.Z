URL: ftp://ftp.eecs.umich.edu/people/durfee/icdcs92.ps.Z
Refering-URL: http://ai.eecs.umich.edu/diag/DCSP.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: yokoo/ishida/kuwabara@cslab.kecl.ntt.jp durfee@caen.engin.umich.edu  
Title: Distributed Constraint Satisfaction for Formalizing Distributed Problem Solving  
Author: Makoto Yokoo Edmund H. Durfee Toru Ishida Kazuhiro Kuwabara 
Address: Soraku-gun, Kyoto 619-02 Japan Ann Arbor, MI 48109 U.S.A.  
Affiliation: NTT Communication Science Dept. of Electrical Engineering Laboratories and Computer Science Sanpeidani Inuidani, Seika-cho University of Michigan  
Note: 12th IEEE International Conference on Distributed Computing Systems '92, pp.614-621  
Abstract: Viewing cooperative distributed problem solving (CDPS) as distributed constraint satisfaction provides a useful formalism for characterizing CDPS techniques. In this paper, we describe this formalism and compare algorithms for solving distributed constraint satisfaction problems (DCSPs). In particular, we present our newly developed technique called asynchronous backtracking that allows agents to act asynchronously and concurrently, in contrast to the traditional sequential backtracking techniques employed in constraint satisfaction problems. Our experimental results show that solving DCSPs in a distributed fashion is worthwhile when the problems solved by individual agents are loosely-coupled. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Bridgeland, D.M. and Huhns, </editor> <booktitle> M.N.: Distributed Truth Maintenance, Proc. of AAAI-90, </booktitle> <pages> pp. 72-77, </pages> <year> 1990. </year>
Reference-contexts: Also, an interpretation problem by multiple agents such as [11] can be mapped into a DCSP framework by viewing possible interpretations as possible variable values. Distributed truth maintenance tasks described in <ref> [1] </ref> are essentially solving a DCSP where each variable can be either IN or OUT. By formalizing these problems as DCSPs, these problems can be solved by the general algorithms described in this paper. * DCSPs provide a formal framework for studying various CDPS methods.
Reference: [2] <author> Chandy, K.M. and Lamport, </author> <title> L : Distributed Snapshots: Determining Global States of Distributed Systems, </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> Vol. 3, No. 1, </volume> <pages> pp. 63-75, </pages> <year> 1985 </year>
Reference-contexts: Since agents x 1 to 6 We should mention that the way to determine that agents as a whole have reached a stable state is not contained in this algorithm. To detect the stable state, distributed termination detection algorithms such as <ref> [2] </ref> are needed. x k1 are in a stable state, the nogoods agent x k receives must be compatible with its agent view, and so x k will change instantiation of its variable with a different value.
Reference: [3] <author> Collin, Z., Dechter, R. and Kaiz, S. </author> : <title> On the Feasibility of Distributed Constraint Satisfaction, </title> <booktitle> Proc. of IJCAI-91, </booktitle> <pages> pp. 318-324, </pages> <year> 1991. </year>
Reference-contexts: The second kind is a nogood message that a value sending agent receives, indicating that the constraint evaluating agent has found a constraint violation (Figure 2 (ii)). 2 Recently, <ref> [3] </ref> presented a variation of synchronous backtracking called Network Consistency Protocol, in which agents construct a depth-first search tree.
Reference: [4] <author> Conry, S.E., Meyer, R.E. and Lesser, </author> <title> V.R. : Multistage Negotiation in Distributed Planning, </title> <editor> In Alan H.Bond and Les Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann, </publisher> <pages> pp. </pages> <year> 367-384,1988. </year> <title> [5] de Kleer, J : A Comparison of ATMS and CSP Techniques, </title> <booktitle> Proc. of IJCAI-89, </booktitle> <pages> pp. 290-296, </pages> <year> 1989. </year>
Reference-contexts: In this paper, we define a dis tributed constraint satisfaction problem (DCSP) as a CSP in which multiple agents are involved. DCSPs are important for the following reasons: * Various CDPS problems can be formalized as DCSPs. Multi-agent resource allocation problems described in <ref> [4] </ref>, [8], in which tasks or resources must be allocated to agents so that inter-agent constraints are satisfied, can be formalized as DCSPs by viewing each task or resource as a variable and the possible assignments as values.
Reference: [6] <author> Durfee, E.H. and Lesser, </author> <title> V.R. : Using Partial Global Plans to Coordinate Distributed Problem Solvers, </title> <booktitle> Proc. of IJCAI-87, </booktitle> <pages> pp. 875-883, </pages> <year> 1987. </year>
Reference-contexts: There are various options in the methods for solving DCSPs, which influence the efficiency (e.g., the selection order of the values). Agents have to make decisions about these options and these decisions are interrelated. DCSPs serve as a basis for studies such as <ref> [6] </ref>, in which agents exchange their local plans in order to make agents' decisions coherent. In this paper, we define DCSPs and discuss alternative methods for solving them. In particular, we introduce our newly developed technique, called asyn chronous backtracking. <p> As a result, agents spend considerable time for local computation between sending messages. By having agents work on large-grained problems, the communication delays in a loosely-coupled network no longer dominate performance. For example, a typical problem involves having agents track vehicles moving through their different areas <ref> [6] </ref>. These agents each perform substantial processing independently as they interpret their own data, but they constrain each other at their borders since their pieces of tracks must fit to gether.
Reference: [7] <author> Gasching, J. </author> : <title> A General Backtrack Algorithm That Eliminates Most Redundant Tests, </title> <booktitle> Proc. of IJCAI-77, </booktitle> <pages> pp. 457, </pages> <year> 1977. </year>
Reference-contexts: Our asynchronous backtracking algorithm handles this problem by interrupting the consistency checks (performed at Figure 2 (i-a) and (ii-b)) whenever the agent view changes. Furthermore, we have incorporated the technique of backmarking <ref> [7] </ref> to let an agent take advantage of as much of the interrupted computation's results as possible.
Reference: [8] <author> Kuwabara, K. and Lesser, </author> <title> V.R. : Extended Protocol for Multistage Negotiation, </title> <editor> In M. Benda editor, </editor> <booktitle> Proc. of 9th Workshop on Distributed Artificial Intelligence, </booktitle> <pages> pp. 129-161, </pages> <year> 1989. </year>
Reference-contexts: In this paper, we define a dis tributed constraint satisfaction problem (DCSP) as a CSP in which multiple agents are involved. DCSPs are important for the following reasons: * Various CDPS problems can be formalized as DCSPs. Multi-agent resource allocation problems described in [4], <ref> [8] </ref>, in which tasks or resources must be allocated to agents so that inter-agent constraints are satisfied, can be formalized as DCSPs by viewing each task or resource as a variable and the possible assignments as values.
Reference: [9] <author> Lesser, </author> <title> V.R. : An Overview of DAI: Viewing Distributed AI as Distributed Search, </title> <journal> Journal of Japanese Society for Artificial Intelligence, </journal> <volume> Vol. 5, No. 4, </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction Cooperative distributed problem solving (CDPS) is a subfield of AI that is concerned with how a set of artificially intelligent agents can work together to solve problems. Recently, <ref> [9] </ref> has presented the idea of viewing CDPS as a distributed state space search in order to develop a general framework for CDPS.
Reference: [10] <author> Mackworth, </author> <title> A.K. : Constraint Satisfaction, </title> <editor> In S.C.Shapiro, editor, </editor> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <publisher> John Wiley & Sons, </publisher> <pages> pp. 205-211, </pages> <year> 1987. </year>
Reference-contexts: Our goal is to develop a framework for formalizing a subset of CDPS problems and methods by extending constraint satisfaction problems (CSPs) <ref> [10] </ref> to distributed multi-agent environments. In this paper, we define a dis tributed constraint satisfaction problem (DCSP) as a CSP in which multiple agents are involved. DCSPs are important for the following reasons: * Various CDPS problems can be formalized as DCSPs. <p> make the following assumptions while describing our algorithms for simplic ity. * Each agent has exactly one variable. * Each agent knows all constraint predicates rele vant to its variable. 3 Methods for DCSP Methods for solving CSPs can be divided into two groups, namely backtracking algorithms and consistency algorithms <ref> [10] </ref>. Consistency algorithms are preprocessing procedures that are invoked before backtracking. Consistency algorithms in the ATMS framework [5] are essentially monotonic and can be applied straightforwardly to DCSP [13]. <p> Since the nogood attached to a nogood message indicates the cause of the failure, asynchronous backtracking includes the function of dependency-directed backtracking in CSPs <ref> [10] </ref>. A nogood can be viewed as a new constraint derived from the original constraints. By incorporating such a new constraint, agents can avoid repeating the same failure again.
Reference: [11] <author> Mason, C.L. and Johnson, R.R. </author> : <month> DATMS: </month>
Reference-contexts: Also, an interpretation problem by multiple agents such as <ref> [11] </ref> can be mapped into a DCSP framework by viewing possible interpretations as possible variable values. Distributed truth maintenance tasks described in [1] are essentially solving a DCSP where each variable can be either IN or OUT.
References-found: 10

