URL: http://www.cse.ogi.edu/~stoltz/www.dir/papers/iv.ps
Refering-URL: http://www.cse.ogi.edu/~stoltz/
Root-URL: http://www.cse.ogi.edu
Title: Beyond Induction Variables: Detecting and Classifying Sequences Using a Demand-driven SSA Form  
Author: MICHAEL P. GERLEK, ERIC STOLTZ, and MICHAEL WOLFE 
Keyword: Categories and Subject Descriptors: D.3.4 [Programming Languages]: Processors|Compilers; Optimization General Terms: Algorithms, Languages Additional Key Words and Phrases: def-use chain, static single assignment, strength reduction, induction variable, wrap-around variable, constant propagation, demand-driven  
Affiliation: Oregon Graduate Institute of Science Technology  
Abstract: Linear induction variable detection is usually associated with the strength reduction optimization. For restructuring compilers, effective data dependence analysis requires that the compiler detect and accurately describe linear and nonlinear induction variables as well as more general sequences. In this paper we present a practical technique for detecting a broader class of linear induction variables than is usually recognized, as well as several other sequence forms, including periodic, polynomial, geometric, monotonic, and wrap-around variables. Our method is based on Factored Use-Def (FUD) chains, a demand-driven representation of the popular Static Single Assignment form. In this form, strongly connected components of the associated SSA graph correspond to sequences in the source program: we describe a simple yet efficient algorithm for detecting and classifying these sequences. We have implemented this algorithm in Nascent, our restructuring Fortran 90+ compiler, and we present some results showing the effectiveness of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A. V., Sethi, R., and Ullman, J. D. </author> <year> 1986. </year> <title> Compilers: Principles, Techniques, and Tools. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference: <author> Allen, F., Burke, M., Charles, P., Cytron, R., and Ferrante, J. </author> <year> 1988. </year> <title> An overview of the PTRAN analysis system for multiprocessing. </title> <journal> Journal of Parallel and Distributed Computing 5, </journal> <volume> 5 (Oct.), </volume> <pages> 617-640. </pages>
Reference: <author> Allen, F. E., Cocke, J., and Kennedy, K. </author> <year> 1981. </year> <title> Reduction in operator strength. </title> <editor> In S. </editor> <publisher> S. </publisher>
Reference: <editor> Muchnick and N. D. Jones (Eds.), </editor> <booktitle> Program Flow Analysis, </booktitle> <pages> pp. 79-101. </pages> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference: <author> Ammarguellat, Z. and Harrison III, W. L. </author> <year> 1990. </year> <title> Automatic recognition of induction variables and recurrence relations by abstract interpretation. </title> <booktitle> In Proceedings of the ACM SIG-PLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 283-295. </pages> <publisher> ACM Press. </publisher>
Reference: <author> Ballance, R. A., Maccabe, A. B., and Ottenstein, K. J. </author> <year> 1990. </year> <title> The Program Dependence Web: A representation supporting control-, data-, and demand-driven interpretation of imperative languages. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 257-271. </pages> <publisher> ACM Press. </publisher>
Reference: <author> Cybenko, G., Kipp, L., Pointer, L., and Kuck, D. </author> <year> 1990. </year> <title> Supercomputer performance evaluation and the Perfect Benchmarks. </title> <booktitle> In Proceedings of the International Conference on Supercomputing, </booktitle> <pages> pp. 254-266. </pages>
Reference: <author> Cytron, R., Ferrante, J., Rosen, B. K., Wegman, M. N., and Zadeck, F. K. </author> <year> 1989. </year> <title> An efficient method of computing Static Single Assignment form. </title> <booktitle> In Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 25-35. </pages>
Reference: <author> Cytron, R., Ferrante, J., Rosen, B. K., Wegman, M. N., and Zadeck, F. K. </author> <year> 1991. </year> <title> Efficiently computing Static Single Assignment form and the control dependence graph. </title> <journal> ACM Trans. on Programm. Lang. Syst. </journal> <volume> 13, 4 (Oct.), </volume> <pages> 451-490. </pages>
Reference: <author> Eigenmann, R., Hoeflinger, J., Li, Z., and Padua, D. </author> <year> 1992. </year> <title> Experience in the automatic par-allelization of four Perfect-Benchmark programs. </title> <editor> In U. Banerjee, D. Gelernter, A. Nico-lau, and D. Padua (Eds.), </editor> <booktitle> Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pp. 65-83. </pages> <publisher> Springer-Verlag. LNCS no. </publisher> <pages> 589. </pages>
Reference: <author> Ferrante, J. and Ottenstein, K. J. </author> <year> 1983. </year> <title> A program form based on data dependency in predicate regions. </title> <booktitle> In Conference Record of the Tenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 217-236. </pages> <publisher> ACM Press. </publisher>
Reference: <author> Gupta, R. and Spezialetti, M. </author> <year> 1991. </year> <title> Loop monotonic computations: An approach for the efficient run-time detection of races. </title> <booktitle> In Proceedings of the SIGSOFT Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pp. 98-111. </pages>
Reference: <author> Haghighat, M. R. </author> <year> 1990. </year> <title> Symbolic dependence analysis for high performance parallelizing compilers. </title> <type> Technical Report 995 (May), </type> <institution> University of Illinois (CSRD). M.S. </institution> <type> Thesis. </type>
Reference: <author> Haghighat, M. R. and Polychronopoulos, C. D. </author> <year> 1992. </year> <title> Symbolic program analysis and optimization for parallelizing compilers. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua (Eds.), </editor> <booktitle> Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pp. 65-83. </pages> <publisher> Springer-Verlag. LNCS no. </publisher> <pages> 589. </pages>
Reference: <author> Havlak, P. </author> <year> 1993. </year> <title> Construction of thinned gated single-assignment form. </title> <booktitle> In Workshop on Languages and Compilers for Parallel Computing. </booktitle>
Reference: <author> Kennedy, K. </author> <year> 1981. </year> <title> A survey of data flow analysis techniques. </title> <editor> In S. S. Muchnick and N. </editor> <address> D. </address>
Reference: <editor> Jones (Eds.), </editor> <title> Program Flow Analysis. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference: <author> Loveman, D. B. and Faneuf, R. A. </author> <year> 1975. </year> <title> Program optimization theory and practice. </title> <booktitle> In Proceedings of a Conference on Programming Languages and Compilers for Parallel and Vector Machines, </booktitle> <pages> pp. 97-102. </pages>
Reference: <author> Padua, D. A. and Wolfe, M. </author> <year> 1986. </year> <title> Advanced compiler optimizations for supercomputers. </title> <journal> Commun. ACM 29, </journal> <volume> 12 (Dec.), </volume> <pages> 1184-1201. </pages>
Reference: <author> Shen, Z., Li, Z., and Yew, P.-C. </author> <year> 1990. </year> <title> An empirical study of Fortran programs for parallelizing compilers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 3 (July), 356-364. </month> <title> Beyond Induction Variables 39 Stoltz, </title> <editor> E., Gerlek, M. P., and Wolfe, M. </editor> <year> 1994. </year> <title> Extended SSA with factored use-def chains to support optimization and parallelism. </title> <booktitle> In Hawaii International Conferences on System Sciences. </booktitle>
Reference: <author> Stoltz, E., Wolfe, M., and Gerlek, M. P. </author> <year> 1994. </year> <title> Constant propagation: A fresh, demand-driven look. </title> <booktitle> In Proceedings of the Symposium on Applied Computing, </booktitle> <pages> pp. 400-404. </pages>
Reference: <author> Tarjan, R. </author> <year> 1972. </year> <title> Depth-first search and linear graph algorithms. </title> <journal> SIAM J. Comput. </journal> <volume> 1, </volume> <month> 2 (June), </month> <pages> 146-160. </pages>
Reference: <author> Tu, P. and Padua, D. </author> <year> 1993. </year> <title> Automatic array privatization. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua (Eds.), </editor> <booktitle> Workshop on Languages and Compilers for Parallel Computing, </booktitle> <pages> pp. 500-521. </pages> <publisher> Springer-Verlag. LNCS no. </publisher> <pages> 768. </pages>
Reference: <author> Wolfe, M. </author> <year> 1992. </year> <title> Beyond induction variables. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pp. 162-174. </pages> <publisher> ACM Press. </publisher>
Reference: <author> Wolfe, M. and Banerjee, U. </author> <year> 1987. </year> <title> Data dependence and its applications to parallel processing. </title> <journal> International Journal of Parallel Programming 16, </journal> <volume> 2 (April), </volume> <pages> 137-178. </pages>
Reference: <author> Wolfe, M., Stoltz, E., Gerlek, M. P., Kolte, P., and Autrey, T. </author> <year> 1994. </year> <title> Nascent: a next-generation, high-performance compiler. </title> <note> (unpublished). Received : : : ; revised : : : ; accepted </note> : : : .
References-found: 26

