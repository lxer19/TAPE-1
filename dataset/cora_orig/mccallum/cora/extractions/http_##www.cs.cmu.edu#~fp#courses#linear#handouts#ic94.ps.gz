URL: http://www.cs.cmu.edu/~fp/courses/linear/handouts/ic94.ps.gz
Refering-URL: http://www.cs.cmu.edu/~fp/courses/linear/lectures/lecture18.html
Root-URL: 
Email: hodas@cs.hmc.edu  dale@saul.cis.upenn.edu  
Title: Logic Programming in a Fragment of Intuitionistic Linear Logic  
Author: Joshua S. Hodas Dale Miller 
Address: Claremont, CA 91711-5990 USA  Philadelphia, PA 19104-6389 USA  
Affiliation: Computer Science Department Harvey Mudd College  Computer Science Department University of Pennsylvania  
Abstract: When logic programming is based on the proof theory of intuitionistic logic, it is natural to allow implications in goals and in the bodies of clauses. Attempting to prove a goal of the form D G from the context (set of formulas) leads to an attempt to prove the goal G in the extended context [ fDg. Thus during the bottom-up search for a cut-free proof contexts, represented as the left-hand side of intuitionistic sequents, grow as stacks. While such an intuitionistic notion of context provides for elegant specifications of many computations, contexts can be made more expressive and flexible if they are based on linear logic. After presenting two equivalent formulations of a fragment of linear logic, we show that the fragment has a goal-directed interpretation, thereby partially justifying calling it a logic programming language. Logic programs based on the intuitionistic theory of hereditary Harrop formulas can be modularly embedded into this linear logic setting. Programming examples taken from theorem proving, natural language parsing, and data base programming are presented: each example requires a linear, rather than intuitionistic, notion of context to be modeled adequately. An interpreter for this logic programming language must address the problem of splitting contexts; that is, when attempting to prove a multiplicative conjunction (tensor), say G 1 G 2 , from the context , the latter must be split into disjoint contexts 1 and 2 for which G 1 follows from 1 and G 2 follows from 2 . Since there is an exponential number of such splits, it is important to delay the choice of a split as much as possible. A mechanism for the lazy splitting of contexts is presented based on viewing proof search as a process that takes a context, consumes part of it, and returns the rest (to be consumed elsewhere). In addition, we use collections of Kripke interpretations indexed by a commutative monoid to provide models for this logic programming language and show that logic programs admit a canonical model.
Abstract-found: 1
Intro-found: 1
Reference: <author> Andreoli, J.-M. </author> <year> (1992). </year> <title> Logic Programming with Focusing Proofs in Linear Logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2 (3). </volume>
Reference: <author> Andreoli, J., and Pareschi, R. </author> <year> (1991). </year> <title> Linear Objects: Logical Processes with Built-in Inheritance. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 3-4. </pages> <note> (Special issue of papers selected from ICLP'90). </note>
Reference: <author> Apt, K. R., and van Emden, M. H. </author> <year> (1982). </year> <title> Contributions to the theory of logic programming. </title> <journal> Journal of the ACM, </journal> <volume> 29 (3), 841 - 862. 29 Bollen, </volume> <editor> A. W. </editor> <year> (1991). </year> <title> Relevant Logic Programming. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 7 (4), </volume> <month> 563--586. </month>
Reference-contexts: The canonical model for first-order Horn clauses is well known <ref> (Apt and van Emden, 1982) </ref>. A Kripke-like model construction was proposed in (Miller, 1989b) as the canonical model for a subset of first-order hereditary Harrop formulas, but unfortunately the construction given there was not shown to be an actual model in the sense of possible-world semantics.
Reference: <author> Bonner, A. J., McCarty, L. T., and Vadaparty, K. </author> <year> (1989). </year> <title> Expressing Database Queries with Intuitionistic Logic. </title> <booktitle> In Logic Programming: Proceeding of the North American Conference, </booktitle> <pages> pp. 831-850. </pages>
Reference: <author> Bowen, K. A., and Kowalski, R. A. </author> <year> (1982). </year> <title> Amalgamating Language and Metalanguage in Logic Programming. </title> <editor> In Clark, K., and Tarnlund, S.-A. (Eds.), </editor> <booktitle> Logic programming, Vol. 16 of APIC studies in data processing, </booktitle> <pages> pp. 153 - 172. </pages> <publisher> Academic Press. </publisher>
Reference-contexts: that the unbounded part of a context is empty | can be managed by making use of the modal nature of !, which we now discuss in more detail. 5.4 The modality of ! One extension to logic programming languages that has been studied for several years is the demo-predicate <ref> (Bowen and Kowalski, 1982) </ref>. The intended meaning of attempting a query of the form demo (R; G) in context is simply attempting the query G in the context containing only R; that is, the main context is forgotten during the scope of the demo-predicate.
Reference: <author> Cerrito, S. </author> <year> (1990). </year> <title> A Linear Semantics for Allowed Logic Programs. </title> <editor> In Mitchell, J. (Ed.), </editor> <booktitle> Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, PA, </address> <pages> pp. 219 - 227. </pages>
Reference-contexts: Cerrito has also used classical linear logic to provide a formalization of the Clark completion theory that is sound and complete for SLDNF on allowed logic programs <ref> (Cerrito, 1990) </ref>. Gabbay has used the ideas that arise from linear logic to isolate different computational aspects of proof search in a variety of systems in an attempt to identify complete yet efficient search techniques (Gabbay, 1991).
Reference: <author> Cerrito, S. </author> <year> (1992). </year> <title> A Linear Axiomatization of Negation as Failure. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 (1 & 2), 1 - 24. </volume>
Reference-contexts: Girard suggested how linear logic can be used to model the difference between the classical, "external" logic of Horn clauses and the "internal" logic of Prolog that arises from the use of depth-first search (Girard, 1987b). His suggestions were worked out in detail by Cerrito <ref> (Cerrito, 1992) </ref> to provide a logical specification of Prolog evaluation for propositional Horn clauses. Cerrito has also used classical linear logic to provide a formalization of the Clark completion theory that is sound and complete for SLDNF on allowed logic programs (Cerrito, 1990).
Reference: <author> Church, A. </author> <year> (1940). </year> <title> A Formulation of the Simple Theory of Types. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 5, </volume> <pages> 56-68. </pages>
Reference: <author> Dyckhoff, R. </author> <year> (1992). </year> <title> Contraction-free sequent calculi for intuitionistic logic. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 57 (3). </volume>
Reference-contexts: Fortunately, improvements in the implication left-introduction rule are known. For example, the proof system given by Dyckhoff in <ref> (Dyckhoff, 1992) </ref> can be expressed directly in this setting by replacing the one formula specifying implication elimination in Figure 10 with the five clauses for implication elimination and the (partial) axiomatization of object-level atomic formulas in Figure 11.
Reference: <author> Felty, A. </author> <year> (1993). </year> <title> Implementing Tactics and Tacticals in a Higher-Order Logic Programming Language. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11 (1), </volume> <pages> 43-81. </pages>
Reference: <author> Felty, A., and Miller, D. </author> <year> (1988). </year> <title> Specifying theorem provers in a higher-order logic programming language. </title> <booktitle> In Ninth International Conference on Automated Deduction, </booktitle> <pages> pp. </pages> <address> 61 - 80 Argonne, IL. </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Gabbay, D. M., and Reyle, U. </author> <year> (1984). </year> <title> N-Prolog: An Extension of Prolog with Hypothetical Implications. I. </title> <journal> Journal of Logic Programming, </journal> <volume> 1, 319 - 355. </volume>
Reference: <author> Gabbay, D. M. </author> <year> (1991). </year> <title> Algorithmic Proof with Diminishing Resources, Part 1. </title> <editor> In Borger, E. (Ed.), CSL'90. </editor> <booktitle> Fourth Workshop on Computer Science Logic, No. 533 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Gabbay has used the ideas that arise from linear logic to isolate different computational aspects of proof search in a variety of systems in an attempt to identify complete yet efficient search techniques <ref> (Gabbay, 1991) </ref>. In particular, he was interested in those languages in which search may be restricted to using formulas linearly. This work is conceptually related to, though somewhat broader than, the recent work in linearizing intuitionistic implication by Lincoln, Scedrov, and Shankar (Lincoln et al., 1991).
Reference: <author> Gentzen, G. </author> <year> (1969). </year> <title> Investigations into Logical Deductions, 1935. </title> <editor> In Szabo, M. E. (Ed.), </editor> <booktitle> The Collected Papers of Gerhard Gentzen, </booktitle> <pages> pp. 68-131. </pages> <publisher> North-Holland Publishing Co., Amsterdam. </publisher>
Reference: <author> Girard, J.-Y. </author> <year> (1987a). </year> <title> Linear Logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50, </volume> <pages> 1-102. </pages>
Reference-contexts: Finally, we write M j= B if 8w 2 W, K 0 ; w j= B. In a sense, the Kripke interpretation K 0 models truth in the usual intuitionistic sense while K r models truth that has been moved out-of-phase (borrowing an image from Girard <ref> (Girard, 1987a) </ref>) by the presence of the resource r 2 R. The following lemma is proved by a simple induction on the structure of propositional formulas. 21 Lemma 7 Let r 2 R and w; w 0 2 W.
Reference: <author> Girard, J.-Y. </author> <year> (1987b). </year> <title> Towards a Geometry of Interaction. </title> <booktitle> In Categories in Computer Science, Vol. 92 of Contemporary Mathematics, </booktitle> <pages> pp. 69 - 108. </pages> <publisher> AMS. </publisher>
Reference-contexts: Girard suggested how linear logic can be used to model the difference between the classical, "external" logic of Horn clauses and the "internal" logic of Prolog that arises from the use of depth-first search <ref> (Girard, 1987b) </ref>. His suggestions were worked out in detail by Cerrito (Cerrito, 1992) to provide a logical specification of Prolog evaluation for propositional Horn clauses.
Reference: <author> Girard, J.-Y. </author> <year> (1991). </year> <title> On the unity of logic. </title> <type> Tech. rep. 26, </type> <institution> Universite Paris VII. </institution>
Reference: <author> Hallnas, L., and Schroeder-Heister, P. </author> <year> (1990). </year> <title> A Proof-Theoretic Approach to Logic Programming. 1. Clauses as rules. </title> <journal> Journal of Logic and Computation, </journal> <pages> 261-283. </pages>
Reference: <author> Harland, J., and Pym, D. </author> <year> (1991). </year> <title> The Uniform Proof-Theoretic Foundation of Linear Logic Programming (Extended Abstract). </title> <editor> In Saraswat, V., and Ueda, K. (Eds.), </editor> <booktitle> Proceedings of the 1991 International Logic Programming Symposium, </booktitle> <address> San Diego, </address> <pages> pp. </pages> <address> 304 - 318 San Diego. </address> <publisher> MIT Press. </publisher> <address> 30 Hodas, J. </address> <year> (1992). </year> <title> Specifying Filler-Gap Dependency Parsers in a Linear-Logic Programming Lan--guage. </title> <editor> In Apt, K. (Ed.), </editor> <booktitle> Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pp. 622 - 636. </pages>
Reference-contexts: Harland and Pym have proposed a fragment of linear logic as a logic programming language <ref> (Harland and Pym, 1991) </ref>. As was done here, their fragment is chosen so that uniform proofs remain complete. Since having !'s in right-hand side of sequents stops several inference rule permutations from holding, their proposal disallows such right-hand sides.
Reference: <author> Hodas, J. </author> <year> (1993). </year> <title> Logic Programming in Intuitionistic Linear Logic: Theory, Design, and Implementation. </title> <type> Ph.D. thesis, </type> <institution> University of Pennsylvania, Department of Computer and Information Science. </institution>
Reference-contexts: The first author has extended this application of linear logic to natural language processing (Hodas, 1992). His dissertation also includes a set of extended examples along the lines of those given here <ref> (Hodas, 1993) </ref>. 6 A model theoretic semantics Besides the fact that logic programming languages can be characterized by their use of goal-directed search, they also generally share the characteristic that given a program, there exists a single model such that validity in that model is equivalent to provability from the program. <p> The relationship between L and Bollen's system is discussed in greater depth in the first author's dissertation, where an extension of L allowing direct representation of relevant and affine implication is also presented <ref> (Hodas, 1993) </ref>. In the area of natural language parsing, Lambek (Lambek, 1958, 1987) has used a logic that can be identified with a non-commutative variant of linear logic to infer the syntactic categories of phrases.
Reference: <author> Hodas, J., and Miller, D. </author> <year> (1990). </year> <title> Representing Objects in a Logic Programming Language with Scoping Constructs. </title> <editor> In Warren, D. H. D., and Szeredi, P. (Eds.), </editor> <booktitle> 1990 International Conference in Logic Programming, </booktitle> <pages> pp. 511 - 526. </pages> <publisher> MIT Press. </publisher>
Reference-contexts: This example illustrates an approach which has previously been used by the authors to provide a notion of object state in object-oriented logic programming <ref> (Hodas and Miller, 1990) </ref>.
Reference: <author> Hodas, J., and Miller, D. </author> <year> (1991). </year> <title> Logic Programming in a Fragment of Intuitionistic Linear Logic: Extended Abstract. </title> <editor> In Kahn, G. (Ed.), </editor> <booktitle> Sixth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pp. </pages> <address> 32 - 42 Amsterdam. </address>
Reference: <author> Lambek, J. </author> <year> (1958). </year> <title> The mathematics of sentence structure. </title> <journal> American Mathematical Monthly, </journal> <volume> 65, 154 - 169. </volume>
Reference-contexts: The relationship between L and Bollen's system is discussed in greater depth in the first author's dissertation, where an extension of L allowing direct representation of relevant and affine implication is also presented (Hodas, 1993). In the area of natural language parsing, Lambek <ref> (Lambek, 1958, 1987) </ref> has used a logic that can be identified with a non-commutative variant of linear logic to infer the syntactic categories of phrases.
Reference: <author> Lambek, J. </author> <year> (1987). </year> <title> Multicategories Revisited. </title> <booktitle> In Categories in Computer Science, Vol. 92 of Contemporary Mathematics, </booktitle> <pages> pp. 217 - 239. </pages> <publisher> AMS. </publisher>
Reference: <author> Lincoln, P., Scedrov, A., and Shankar, N. </author> <year> (1991). </year> <title> Linearizing Intuitionistic Implication. </title> <editor> In Kahn, G. (Ed.), </editor> <booktitle> Sixth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pp. 51-62. </pages>
Reference-contexts: In particular, he was interested in those languages in which search may be restricted to using formulas linearly. This work is conceptually related to, though somewhat broader than, the recent work in linearizing intuitionistic implication by Lincoln, Scedrov, and Shankar <ref> (Lincoln et al., 1991) </ref>. Besides our work described here, at least three proposals for new logic programming languages have been made recently that use linear logic (or, more precisely, substructural logics) for their foundation.
Reference: <author> McCarty, L. T. </author> <year> (1988). </year> <title> Clausal Intuitionistic Logic I. Fixed Point Semantics. </title> <journal> Journal of Logic Programming, </journal> <volume> 5, 1 - 31. </volume>
Reference: <author> Miller, D. </author> <year> (1989a). </year> <title> Lexical Scoping as Universal Quantification. </title> <booktitle> In Sixth International Logic Programming Conference, </booktitle> <pages> pp. </pages> <address> 268-283 Lisbon, Portugal. </address> <publisher> MIT Press. </publisher>
Reference-contexts: It is possible to handle the first condition by making use of appropriate universal quantifiers over the predicate names item, load, and unload. Such an approach to the lexical scoping of names has been addressed in depth in previous papers <ref> (Miller, 1989a, 1990) </ref> and will not be taken up here.
Reference: <author> Miller, D. </author> <year> (1989b). </year> <title> A logical analysis of modules in logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 6, 79 - 108. </volume>
Reference-contexts: The canonical model for first-order Horn clauses is well known (Apt and van Emden, 1982). A Kripke-like model construction was proposed in <ref> (Miller, 1989b) </ref> as the canonical model for a subset of first-order hereditary Harrop formulas, but unfortunately the construction given there was not shown to be an actual model in the sense of possible-world semantics.
Reference: <author> Miller, D. </author> <year> (1990). </year> <title> Abstractions in logic programming. </title> <editor> In Odifreddi, P. (Ed.), </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pp. 329 - 359. </pages> <publisher> Academic Press. </publisher>
Reference-contexts: This example illustrates an approach which has previously been used by the authors to provide a notion of object state in object-oriented logic programming <ref> (Hodas and Miller, 1990) </ref>.
Reference: <author> Miller, D. </author> <year> (1992). </year> <title> Abstract Syntax and Logic Programming. </title> <booktitle> In Logic Programming: Proceedings of the First and Second Russian Conferences on Logic Programming, No. 592 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pp. 322-337. </pages> <note> Springer-Verlag. Also available as technical report MS-CIS-91-72, UPenn. </note>
Reference-contexts: A Kripke-like model construction was proposed in (Miller, 1989b) as the canonical model for a subset of first-order hereditary Harrop formulas, but unfortunately the construction given there was not shown to be an actual model in the sense of possible-world semantics. A canonical model was given in <ref> (Miller, 1992) </ref> for the logic programming language described in Section 2. We shall use the approach given in (Miller, 1992) to develop a canonical model for the logic programming language based on &gt;, &, ffi, and ). <p> A canonical model was given in <ref> (Miller, 1992) </ref> for the logic programming language described in Section 2. We shall use the approach given in (Miller, 1992) to develop a canonical model for the logic programming language based on &gt;, &, ffi, and ). We shall only consider the propositional case here since most of the aspects of the model are illustrated in just that simple setting. <p> We shall only consider the propositional case here since most of the aspects of the model are illustrated in just that simple setting. The analysis of the quantificational case (including higher-type quantification) given in <ref> (Miller, 1992) </ref> applies equally well here. Let hR; +; 0i be a commutative monoid and let hW; i be a partially ordered set. We shall call R the monoid of bounded resources and W the set of possible worlds.
Reference: <author> Miller, D., Nadathur, G., Pfenning, F., and Scedrov, A. </author> <year> (1991). </year> <title> Uniform Proofs as a Foundation for Logic Programming. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 51, </volume> <pages> 125-157. </pages>
Reference: <author> Nadathur, G., and Miller, D. </author> <year> (1988). </year> <title> An Overview of Prolog. </title> <booktitle> In Fifth International Logic Programming Conference, </booktitle> <pages> pp. </pages> <address> 810-827 Seattle, Washington. </address> <publisher> MIT Press. </publisher>
Reference-contexts: If Prolog <ref> (Nadathur and Miller, 1988) </ref> were used for the specification, such quantifiers could be implemented directly using -abstractions.
Reference: <author> Nadathur, G., and Miller, D. </author> <year> (1990). </year> <title> Higher-order Horn Clauses. </title> <journal> Journal of the ACM, </journal> <volume> 37 (4), 777 - 814. </volume>
Reference: <author> Pareschi, R. </author> <year> (1989). </year> <title> Type-driven Natural Language Analysis. </title> <type> Ph.D. thesis, </type> <institution> University of Edinburgh. </institution> <note> 31 Pareschi, </note> <author> R., and Miller, D. </author> <year> (1990). </year> <title> Extending Definite Clause Grammars with Scoping Con--structs. </title> <editor> In Warren, D. H. D., and Szeredi, P. (Eds.), </editor> <booktitle> 1990 International Conference in Logic Programming, </booktitle> <pages> pp. 373-389. </pages> <publisher> MIT Press. </publisher>
Reference: <author> Paulson, L. C. </author> <year> (1990). </year> <title> Isabelle: The Next 700 Theorem Provers. </title> <editor> In Odifreddi, P. (Ed.), </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pp. 361 - 386. </pages> <publisher> Academic Press. </publisher>
Reference: <author> Pereira, F. C. N. </author> <year> (1990). </year> <title> Semantic Interpretation as Higher-Order Deduction. </title> <booktitle> In Proceedings of the Second European Workshop on Logics and AI. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Recently, Pereira described how the semantics of gaps could be computed using a linear logic-like context mechanism <ref> (Pereira, 1990) </ref>: his approach can be formalized using the logic described here. 9 Conclusion There have been several examples in print of the need to refine the notion of intuitionistic context found in programs written using hereditary Harrop formulas (Felty and Miller, 1988; Hodas and Miller, 1990; Pareschi and Miller, 1990;
Reference: <author> Pereira, F. C. N., and Shieber, S. M. </author> <year> (1987). </year> <title> Prolog and Natural-Language Analysis, </title> <booktitle> Vol. 10. </booktitle> <address> CLSI, Stanford, CA. </address>
Reference-contexts: a necessary (committed) entry: as seen in the sample session, such an operation is accepted but ineffective. 5.7 A gap-threading parser for English relative clauses Our final example is a simple natural language parser which demonstrates how linear logic can be used to implement a technique known as gap threading <ref> (Pereira and Shieber, 1987) </ref>. <p> As this parser rules out subject extraction, sentences that require such extractions must be handled with additional specialized grammar rules. Several similar types of "island constraints" 20 occur in natural language parsing problems <ref> (Pereira and Shieber, 1987) </ref>. The use of !'ed formulas may aid in handling these constraints as well. The duplication of gaps across conjunctions in such phrases as "the doctor whom Bob married and Jane knew" can be explained well using a & to copy gaps.
Reference: <author> Pereira, F. C. N., and Warren, D. H. D. </author> <year> (1980). </year> <title> Definite Clauses for Language Analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 13, 231 - 278. </volume>
Reference-contexts: The "modal" distinction between these two kinds of noun phrases is not addressed naturally using intuitionistic logic. The small logic program in Figure 14 is a simple parser based on definite clause grammars (DCG) <ref> (Pereira and Warren, 1980) </ref> extended with some uses of linear logic. Each category of the grammar, such as sent for sentence, vp for verb phrase, sbar for complement clauses, etc., is given two arguments, denoting a difference list of words.
Reference: <author> Pfenning, F. </author> <year> (1988). </year> <title> Partial Polymorphic Type Inference and Higher-Order Unification. </title> <booktitle> In Proceedings of the ACM Lisp and Functional Programming Conference. </booktitle> <pages> 32 </pages>
References-found: 39

