URL: http://www.cs.pitt.edu/~gupta/research/Dist/rtsswip.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Email: vjain@cs.pitt.edu  mspezial@starbase.cs.trincoll.edu  gupta@cs.pitt.edu  
Title: An Approach for Monitoring Intrusion Removal in Real Time Systems  
Author: Vishal Jain Madalene Spezialetti Rajiv Gupta 
Address: Pittsburgh Pittsburgh, PA 15260  Hartford, CT 06106  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Department of Computer Science University of  Computer Science Department Trinity College  Department of Computer Science University of  
Abstract: To assist in the development of a real-time application, monitoring is used to collect execution timing information for the application. In this paper we propose a strategy that accurately reports timing information by accounting for intrusion introduced by monitoring. In addition, by allowing processes that miss deadlines to run to completion, our approach provides the user with times by which the execution of these processes exceeds their deadlines. This information can be used to guide the user in restructuring the application to meet timing requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Gupta and M. Spezialetti, </author> <title> "A Compact Task Graph Representation for Real-Time Scheduling", </title> <journal> Real Time Systems journal, </journal> <volume> vol. 11, no. 1, </volume> <pages> pages 71-102, </pages> <year> 1996. </year>
Reference-contexts: Thus, the intrusion times must be used across processors to accommodate the effects of varying intrusion times on inter-processor communication. Using the above techniques we intend to provide the user with accurate busy-idle execution profiles <ref> [1] </ref> of a real-time application.
Reference: [2] <author> R. Gupta and M. Spezialetti, </author> <title> "Dynamic Techniques for Minimizing the Intrusive Affects of Monitoring Actions," </title> <booktitle> IEEE-CS 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 368-376, </pages> <address> Vancouver, Canada, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion <ref> [2] </ref>, scheduling intrusion [6, 7, 8], and communication intrusion [9, 10]. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications.
Reference: [3] <author> F. Jahanian and A. Goyal, </author> <title> "A formalism for monitoring RT constraints at run time," </title> <booktitle> Proc. Fault-Tolerant Computing Symposium (FTCS-20), </booktitle> <pages> pages 148-155, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The runtime monitoring can collect information on such aspects as message arrival and contents, external input reception, the execution time of various statements and statement groups and changes in variable status <ref> [3, 4, 5] </ref>.
Reference: [4] <author> S. Raju, R. Rajkumar, and F. Jahanian, </author> <title> "Monitoring Timing Constraints in Distributed Real Time Systems," </title> <booktitle> Proc. of RTSS, </booktitle> <pages> pages 57-67, </pages> <year> 1992. </year>
Reference-contexts: The runtime monitoring can collect information on such aspects as message arrival and contents, external input reception, the execution time of various statements and statement groups and changes in variable status <ref> [3, 4, 5] </ref>.
Reference: [5] <author> H. Tokuda, M. Koreta, and C. Mercer, </author> <title> "A Real-time Monitor for a Distributed Real Time Operating System," </title> <journal> ACM Sigplan Notices, </journal> <volume> vol. 24, no.1, </volume> <pages> pages 68-77, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: The runtime monitoring can collect information on such aspects as message arrival and contents, external input reception, the execution time of various statements and statement groups and changes in variable status <ref> [3, 4, 5] </ref>. <p> In static scheduling in which each task is allotted a fixed period in which to execute, one approach is to perform monitoring of a task as possible within its allocated period <ref> [5] </ref>. However, a problem arises if insufficient time is available for monitoring, leading to an inability to carry out the required monitoring in the time period allotted.
Reference: [6] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "Designing a Non-intrusive Monitoring Tool for Developing Complex Distributed Applications," </title> <booktitle> Second IEEE International Conference on Engineering of Complex Computer Systems, </booktitle> <pages> pages 450-457, </pages> <address> Montreal, Canada, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion [2], scheduling intrusion <ref> [6, 7, 8] </ref>, and communication intrusion [9, 10]. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications. In a distributed environment separate intrusion times must be maintained for each processor.
Reference: [7] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "Guaranteed Intrusion Removal from Monitored Distributed Applications," </title> <booktitle> Eighth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 422-425, </pages> <address> New Or-leans, Louisiana, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion [2], scheduling intrusion <ref> [6, 7, 8] </ref>, and communication intrusion [9, 10]. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications. In a distributed environment separate intrusion times must be maintained for each processor.
Reference: [8] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "On-line Avoidance of the Intrusive Affects of Monitoring on Runtime Scheduling Decisions," </title> <booktitle> IEEE-CS 16th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 216-223, </pages> <address> Hong Kong, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion [2], scheduling intrusion <ref> [6, 7, 8] </ref>, and communication intrusion [9, 10]. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications. In a distributed environment separate intrusion times must be maintained for each processor.
Reference: [9] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "On-line Avoidance of Communication Intrusion in Token Ring Networks," </title> <type> Technical Report TR-96-07, </type> <institution> University of Pittsburgh, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion [2], scheduling intrusion [6, 7, 8], and communication intrusion <ref> [9, 10] </ref>. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications. In a distributed environment separate intrusion times must be maintained for each processor.
Reference: [10] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "On Intrusive Effects of Monitoring Distributed Systems," </title> <type> Technical Report TR-96-09, </type> <institution> University of Pitts-burgh, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: Three types of intrusion has been identified: execution intrusion [2], scheduling intrusion [6, 7, 8], and communication intrusion <ref> [9, 10] </ref>. Although techniques have been developed to track and avoid these intrusive effects in non real-time environments, our solution based upon intrusion times can also be used for real-time applications. In a distributed environment separate intrusion times must be maintained for each processor.
References-found: 10

