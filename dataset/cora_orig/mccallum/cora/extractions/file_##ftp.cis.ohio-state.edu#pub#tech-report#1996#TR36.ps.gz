URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR36.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: E-mail: fmanivann,singhalg@cis.ohio-state.edu  
Title: Failure Recovery based on Quasi-Synchronous Checkpointing in Mobile Computing Systems  
Author: D. Manivannan and M. Singhal 
Keyword: Distributed checkpointing, mobile computing, failure recovery, fault-tolerance.  
Address: Columbus, OH 43210.  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Mobile computing systems are expected to revolutionize the way computers are used. Mobile hosts have small memory, a relatively slow processor and low power batteries, and communicate over low bandwidth wireless communication links. In this paper, we address the problem of failure recovery in mobile computing systems. Any recovery method for mobile computing systems should take into consideration energy and communication bandwidth constraints under which mobile computers have to operate. Synchronous checkpointing is not suitable for mobile systems since it involves high communication cost over a low bandwidth network. Asynchronous checkpointing is not suitable because multiple checkpoints need to be stored in the stable storage and also some or all of the checkpoints taken may be useless for constructing consistent global checkpoints. In this paper, we propose a low-overhead recovery algorithm based on a quasi-synchronous checkpointing algorithm for mobile computing systems. The checkpointing algorithm preserves process autonomy by allowing them to take checkpoints asynchronously and uses communication-induced checkpoint coordination for the progression of the recovery line which helps bound rollback propagation during a recovery. Thus, it has the easeness and low overhead of asynchronous checkpointing and the recovery time advantages of synchronous checkpointing. The checkpointing algorithm ensures the existence of a recovery line consistent with any checkpoint of any process all the time. The recovery algorithm exploits this feature to restore the system to a state consistent with the latest checkpoint of a failed process, in the event of a failure. It uses selective pessimistic message logging at the receiver end to handle the messages lost due to rollback. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Acharya and B. R. Badrinath. </author> <title> "Checkpointing Distributed Applications on Mobile Computers". </title> <booktitle> In Proceedings of the 3 rd International Conference on Parallel and Distributed Information Systems, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Thus, processes can decide garbage checkpoints and delete them from stable storage asynchronously. 7 Comparison With Existing Work In Acharya et al.'s <ref> [1] </ref> asynchronous checkpointing algorithm for mobile computing systems, a process takes a checkpoint whenever a message reception is preceded by a message transmission. <p> This might force the processes to take as many checkpoints as the number of messages if the message reception and transmission are interleaved, resulting in high checkpointing overhead. The QSA does not have such checkpointing overhead. Moreover, Acharya et al. <ref> [1] </ref> do not present a recovery algorithm. Prakash and Singhal [18] proposed a low-cost synchronous checkpointing algorithm for mobile computing systems. In their algorithm, processes advance their checkpoints asynchronously.
Reference: [2] <author> B. Awerbuch and D. Peleg. </author> <title> "Concurrent Online Tracking of Mobile Users". </title> <booktitle> In Proc. ACM SIGCOMM Symposium on Communications, Architectures and Protocols, </booktitle> <year> 1991. </year>
Reference-contexts: Messages sent by a MH to another MH may have to be rerouted because the destination node has disconnected from the old MSS and reconnected to a new MSS. Routing protocols which handle node mobility have been proposed in <ref> [2, 4, 9, 22] </ref>. We do not address the issue of routing in this paper. 2.2 An Application Model A distributed computation in a mobile computing system consists of N sequential processes denoted by P 1 ,P 2 , ,P N running concurrently on different mobile hosts in the network.
Reference: [3] <author> B. R. Badrinath, Arup Acharya, and Tomasz Imielinski. </author> <title> "Structuring Distributed Algorithms for Mobile Hosts". </title> <booktitle> In Proceedings of the 14 th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: In Section 6, we analyze the overhead involved in the checkpointing and the recovery algorithms. In Section 7, we compare our algorithms with the existing related work. Section 8 concludes the paper. 2 Background 2.1 A Mobile Computing System Model We follow the system model described in <ref> [3] </ref>. A mobile computing system consists of a set of large number of mobile hosts (MHs) and a relatively smaller number of fixed hosts called the mobile support stations (MSSs). Figure 1 shows a schematic diagram of a mobile computing system. The MSSs are connected by a static wired network.
Reference: [4] <author> P. Bhagwat and C. E. Perkins. </author> <title> "A Mobile Networking System Based on Internet Protocol(IP)". </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 69-82, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Messages sent by a MH to another MH may have to be rerouted because the destination node has disconnected from the old MSS and reconnected to a new MSS. Routing protocols which handle node mobility have been proposed in <ref> [2, 4, 9, 22] </ref>. We do not address the issue of routing in this paper. 2.2 An Application Model A distributed computation in a mobile computing system consists of N sequential processes denoted by P 1 ,P 2 , ,P N running concurrently on different mobile hosts in the network.
Reference: [5] <author> B. Bhargava and P. Leu. </author> <title> "Concurrent Robust Checkpointing and Recovery in Distributed Systems". </title> <booktitle> In Proc. of 4 th IEEE Int. Conf. Data Eng., </booktitle> <pages> pages 154-163, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems [10, 14, 5, 17, 19, 20, 21, 23]. The checkpointing algorithms proposed in <ref> [14, 5] </ref> have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery.
Reference: [6] <author> B. Bhargava and S. R. Lian. </author> <title> "Independent Checkpointing and Concurrent Rollback for Recovery in Distributed Systems-An Optimistic Approach.". </title> <booktitle> In Proc. 7 th IEEE Symp. Reliable Distributed Syst., </booktitle> <pages> pages 3-12, </pages> <year> 1988. </year>
Reference-contexts: In this paper, we present a recovery algorithm that suits mobile computing. Several checkpointing schemes have been proposed in the literature for static distributed systems. They can be broadly classified into two categories asynchronous and synchronous. In asynchronous checkpointing <ref> [6] </ref>, processes take checkpoints periodically without any coordination with others. To recover from a failure, a process communicates with other processes to determine if their local states are causally related. If they are, processes that received messages which are responsible for causal dependencies, roll back to eliminate these causal dependencies.
Reference: [7] <author> Luis Moura e Silva and Jouao Gabriel Silva. </author> <title> "Global Checkpointing for Distributed Programs". </title> <booktitle> In Proc. Symp. Reliable Distributed Systems, </booktitle> <pages> pages 155-162, </pages> <year> 1992. </year> <month> 33 </month>
Reference-contexts: In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. In this approach, processes synchronize their checkpointing activities so that a globally consistent set of checkpoints is always maintained in the system <ref> [7, 14, 15] </ref>. The storage requirement for the checkpoints is minimum because each process keeps only one checkpoint in the stable storage at any given time.
Reference: [8] <author> George H. Forman and John Zahorjan. </author> <title> "The Challenges of Mobile Computing". </title> <journal> Com--puter, </journal> <volume> 27(4) </volume> <pages> 38-47, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Not much work has been done in the area of checkpointing and recovery in mobile computing systems. Mobile computing|the use of portable computers capable of wireless networking| is expected to revolutionize the way we use computers <ref> [8] </ref>. A mobile computing system is a distributed system in which the hosts could move from one location to another while maintaining connectivity with other hosts.
Reference: [9] <author> J. Ioannidis, D. Duchamp, and G. Q. Maguire. </author> <title> "IP-based Protocols for Mobile Inter-networking". </title> <booktitle> In Proc. ACM SIGCOMM Symposium on Communications, Architectures and Protocols, </booktitle> <pages> pages 235-245, </pages> <year> 1991. </year>
Reference-contexts: Messages sent by a MH to another MH may have to be rerouted because the destination node has disconnected from the old MSS and reconnected to a new MSS. Routing protocols which handle node mobility have been proposed in <ref> [2, 4, 9, 22] </ref>. We do not address the issue of routing in this paper. 2.2 An Application Model A distributed computation in a mobile computing system consists of N sequential processes denoted by P 1 ,P 2 , ,P N running concurrently on different mobile hosts in the network.
Reference: [10] <author> D. B. Johnson and W. Zwaenepoel. </author> <title> "Recovery in Distributed Systems Using Optimistic Message Logging and Checkpointing". </title> <journal> Journal of Algorithms, </journal> <volume> 11(3) </volume> <pages> 462-491, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. [13], and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging <ref> [10, 11, 19, 21] </ref> and message reordering [25] have been suggested in the literature to cope with the domino effect. In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. <p> This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery. Some of the recovery algorithms for distributed systems use vector timestamps <ref> [10, 17, 19, 20, 21] </ref> to track dependency between checkpoints and events. Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. <p> Smith and Johnson [20] proposed an asynchronous recovery algorithm for multiple process failures; however, the size of the vector timestamps is O (N 2 fl f ) where f is the maximum number of failures of any single process. Johnson and Zwaenepoel <ref> [10] </ref> proposed a centralized protocol to optimistically recover the maximum recoverable state. Our recovery algorithm does not require vector timestamps. Recovery is fully asynchronous. Recovery requires only one rollback message to be sent to the other processes. Maximum number of rollbacks of a process per failure is 1.
Reference: [11] <author> T. T-Y. Juang and S. Venkatesan. </author> <title> "Crash Recovery with Little Overhead". </title> <booktitle> In Proc. of 11 th International Conf. on Distributed Comput. Syst., </booktitle> <pages> pages 454-461, </pages> <year> 1991. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. [13], and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging <ref> [10, 11, 19, 21] </ref> and message reordering [25] have been suggested in the literature to cope with the domino effect. In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing.
Reference: [12] <author> Junguk L. Kim and Taesoon Park. </author> <title> "An Efficient Protocol for Checkpointing recovery in Distributed Systems". </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 4(8) </volume> <pages> 955-960, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Synchronous checkpointing schemes involve high message overhead and any checkpointing method that involves high message overhead is not suitable for mobile computing systems due to the presence of low bandwidth wireless channels in the network. Moreover, process execution may have to be suspended during the checkpointing coordination as in <ref> [12, 14] </ref>, resulting in performance degradation. Paper Objectives In this paper, we present a recovery algorithm that is suitable for mobile computing systems.
Reference: [13] <author> K. H. Kim. </author> <title> "A Scheme for Coordinated Execution of Independently Designed Recoverable Distributed Processes". </title> <booktitle> In Proc. of 16 th IEEE Symp. Fault-Tolerant Comput., </booktitle> <pages> pages 130-135, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. <ref> [13] </ref>, and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging [10, 11, 19, 21] and message reordering [25] have been suggested in the literature to cope with the domino effect.
Reference: [14] <author> R. Koo and S. Toueg. </author> <title> "Checkpointing and Roll-back Recovery for Distributed Systems". </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> SE-13(1):23-31, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. In this approach, processes synchronize their checkpointing activities so that a globally consistent set of checkpoints is always maintained in the system <ref> [7, 14, 15] </ref>. The storage requirement for the checkpoints is minimum because each process keeps only one checkpoint in the stable storage at any given time. <p> Synchronous checkpointing schemes involve high message overhead and any checkpointing method that involves high message overhead is not suitable for mobile computing systems due to the presence of low bandwidth wireless channels in the network. Moreover, process execution may have to be suspended during the checkpointing coordination as in <ref> [12, 14] </ref>, resulting in performance degradation. Paper Objectives In this paper, we present a recovery algorithm that is suitable for mobile computing systems. <p> This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems [10, 14, 5, 17, 19, 20, 21, 23]. The checkpointing algorithms proposed in <ref> [14, 5] </ref> have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery.
Reference: [15] <author> K. Li, J. F. Naughton, and J. S. Plank. </author> <title> "Checkpointing Multicomputer Applications". </title> <booktitle> In Proc. 10 th Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 2-11, </pages> <year> 1991. </year>
Reference-contexts: In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. In this approach, processes synchronize their checkpointing activities so that a globally consistent set of checkpoints is always maintained in the system <ref> [7, 14, 15] </ref>. The storage requirement for the checkpoints is minimum because each process keeps only one checkpoint in the stable storage at any given time.
Reference: [16] <author> D. Manivannan and M. Singhal. </author> <title> "A Quasi-synchronous Algorithm for Checkpointing in Distributed Systems". </title> <type> Technical Report OSU-CISRC-10/95-TR43, </type> <institution> The Ohio State University, Department of Computer and Information Science, </institution> <year> 1995. </year>
Reference-contexts: Moreover, process execution may have to be suspended during the checkpointing coordination as in [12, 14], resulting in performance degradation. Paper Objectives In this paper, we present a recovery algorithm that is suitable for mobile computing systems. We first review the quasi-synchronous checkpointing algorithm presented in <ref> [16] </ref> which has the easeness and low overhead of asynchronous checkpointing and the recovery time advantages of synchronous checkpointing. It ensures the existence of a recovery line consistent with any checkpoint of any process all the time. We then present a low-overhead recovery algorithm based on the quasi-synchronous checkpointing algorithm. <p> The results of the analysis in these two cases are given in Assertions 1 and 2, respectively below. The proofs of these assertions can be found in <ref> [16] </ref>. Assertion 1: Assume that under a basic checkpointing pattern, each process takes a basic checkpoint at the end of every x time units, and the local clocks of the processes can drift by 29 at most ffi where ffi &lt; 1 2 fl x.
Reference: [17] <author> S. L. Peterson and Phil Kearns. </author> <title> "Rollback Based on Vector Time". </title> <booktitle> In Proc. 12 th Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 68-77, </pages> <year> 1993. </year>
Reference-contexts: The use of checkpoints on a stable storage and rollback-recovery protocols are well established techniques for dealing with process failures in a distributed system. When a failure occurs, a rollback protocol uses the checkpoints and message logs to restore the system to a consistent global state <ref> [17] </ref>. <p> This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery. Some of the recovery algorithms for distributed systems use vector timestamps <ref> [10, 17, 19, 20, 21] </ref> to track dependency between checkpoints and events. Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. <p> The optimistic recovery algorithm proposed by Strom and Yemini [21] suffers from domino effect. The recovery protocols proposed by Peterson and Kearns <ref> [17] </ref> and Sistla and Welch [19] are synchronous and use vector clock.
Reference: [18] <author> R. Prakash and M. Singhal. </author> <title> "Low-Cost Checkpointing and Failure Recovery in Mobile Computing Systems". </title> <journal> IEEE Transactions on Parallel and Distributed Systems(to appear). </journal>
Reference-contexts: The QSA does not have such checkpointing overhead. Moreover, Acharya et al. [1] do not present a recovery algorithm. Prakash and Singhal <ref> [18] </ref> proposed a low-cost synchronous checkpointing algorithm for mobile computing systems. In their algorithm, processes advance their checkpoints asynchronously.
Reference: [19] <author> A. P. Sistla and J. L. Welch. </author> <title> "Efficient Distributed Recovery Using Message Logging". </title> <booktitle> In Proc. of 8 th ACM Symp. Principles Distributed Comput., </booktitle> <pages> pages 223-238, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. [13], and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging <ref> [10, 11, 19, 21] </ref> and message reordering [25] have been suggested in the literature to cope with the domino effect. In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. <p> This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery. Some of the recovery algorithms for distributed systems use vector timestamps <ref> [10, 17, 19, 20, 21] </ref> to track dependency between checkpoints and events. Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. <p> The optimistic recovery algorithm proposed by Strom and Yemini [21] suffers from domino effect. The recovery protocols proposed by Peterson and Kearns [17] and Sistla and Welch <ref> [19] </ref> are synchronous and use vector clock. Smith and Johnson [20] proposed an asynchronous recovery algorithm for multiple process failures; however, the size of the vector timestamps is O (N 2 fl f ) where f is the maximum number of failures of any single process.
Reference: [20] <author> Sean W. Smith, David B. Johnson, and J. D. Tygar. </author> <title> "Completely Asynchronous Optimistic recovery with Minimal Rollbacks". </title> <booktitle> In Proc. of 25 th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 361-370. </pages> <publisher> IEEE, </publisher> <year> 1995. </year> <month> 34 </month>
Reference-contexts: This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery. Some of the recovery algorithms for distributed systems use vector timestamps <ref> [10, 17, 19, 20, 21] </ref> to track dependency between checkpoints and events. Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. <p> The optimistic recovery algorithm proposed by Strom and Yemini [21] suffers from domino effect. The recovery protocols proposed by Peterson and Kearns [17] and Sistla and Welch [19] are synchronous and use vector clock. Smith and Johnson <ref> [20] </ref> proposed an asynchronous recovery algorithm for multiple process failures; however, the size of the vector timestamps is O (N 2 fl f ) where f is the maximum number of failures of any single process.
Reference: [21] <author> R. E. Strom and S. Yemini. </author> <title> "Optimistic Recovery in Distributed Systems". </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. [13], and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging <ref> [10, 11, 19, 21] </ref> and message reordering [25] have been suggested in the literature to cope with the domino effect. In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing. <p> We assume that messages are not lost, altered or spuriously introduced. Processes are fail-stop. All failures are detected immediately and result in halting failed processes and initiating recovery action <ref> [21] </ref>. A process can be inactive due to failure for an arbitrarily long, but finite time. 6 The states of processes involved in a distributed computation depend on one another due to inter-process communication. <p> This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. <p> This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation. The QSA does not cause any such overhead and avoids domino effect com-pletely during recovery. Some of the recovery algorithms for distributed systems use vector timestamps <ref> [10, 17, 19, 20, 21] </ref> to track dependency between checkpoints and events. Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. <p> Vector timestamps generally result in high message overhead during failure-free operation and hence is not suitable for mobile computing system due to the presence of low bandwidth wireless network. The optimistic recovery algorithm proposed by Strom and Yemini <ref> [21] </ref> suffers from domino effect. The recovery protocols proposed by Peterson and Kearns [17] and Sistla and Welch [19] are synchronous and use vector clock.
Reference: [22] <author> F. Teraoka, Y. Yokote, and M. Tokoro. </author> <title> "A Network Architecture Providing Host Migration Transparency". </title> <booktitle> In Proc. ACM SIGCOMM Symposium on Communications, Architectures and Protocols, </booktitle> <year> 1991. </year>
Reference-contexts: Messages sent by a MH to another MH may have to be rerouted because the destination node has disconnected from the old MSS and reconnected to a new MSS. Routing protocols which handle node mobility have been proposed in <ref> [2, 4, 9, 22] </ref>. We do not address the issue of routing in this paper. 2.2 An Application Model A distributed computation in a mobile computing system consists of N sequential processes denoted by P 1 ,P 2 , ,P N running concurrently on different mobile hosts in the network.
Reference: [23] <author> S. Venkatesan and T. T-Y. Juang. </author> <title> "Efficient Algorithm for Crash Recovery in Distributed Systems". </title> <booktitle> In 10 th Conf. on Foundations on Software Technology and Theoretical Computer Science, </booktitle> <pages> pages 349-361, </pages> <year> 1990. </year>
Reference-contexts: This would result in considerable message overhead and also may result in high checkpointing overhead. The QSA does not have any additional message overhead and the checkpointing overhead is nominal. A considerable body of work is available on checkpointing and recovery for static distributed systems <ref> [10, 14, 5, 17, 19, 20, 21, 23] </ref>. The checkpointing algorithms proposed in [14, 5] have a two-phase structure. This causes processes to suspend the normal computation for making checkpoint decisions which may greatly increase the overhead during normal 31 computation.
Reference: [24] <author> K. Venkatesh, T. Radhakrishnan, and H. F. Li. </author> <title> "Optimal Checkpointing and Local Encoding for Domino-free Rollback Recovery". </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 295-303, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Thus, asynchronous checkpointing is not suitable for 2 rollback recovery in mobile computing systems. To reduce domino effect, Kim et al. [13], and Venkatesh et al. <ref> [24] </ref> use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging [10, 11, 19, 21] and message reordering [25] have been suggested in the literature to cope with the domino effect.
Reference: [25] <author> Y. M. Wang and W. K. Fuchs. </author> <title> "Scheduling Message Processing for Reducing Rollback Propagation". </title> <booktitle> In Proc. IEEE Fault-Tolerant Computing Symposium, </booktitle> <pages> pages 204-211, </pages> <month> July </month> <year> 1992. </year> <month> 35 </month>
Reference-contexts: To reduce domino effect, Kim et al. [13], and Venkatesh et al. [24] use the dependency tracking and insert checkpoints before processing a new message that introduces dependency. Also, message logging [10, 11, 19, 21] and message reordering <ref> [25] </ref> have been suggested in the literature to cope with the domino effect. In synchronous checkpointing schemes, domino-free recovery is achieved by sacrificing process autonomy and incurring extra message overhead during checkpointing.
References-found: 25

