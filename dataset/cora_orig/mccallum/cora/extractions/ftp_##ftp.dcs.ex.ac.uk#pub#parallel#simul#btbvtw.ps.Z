URL: ftp://ftp.dcs.ex.ac.uk/pub/parallel/simul/btbvtw.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: 
Title: COMPARING THE BREATHING TIME BUCKETS ALGORITHM AND THE TIME WARP OPERATING SYSTEM ON A TRANSPUTER ARCHITECTURE  
Author: M. Damitio S. J. Turner C. J. M. Booth M. J. Kirton K. R. Milner P. R. Hoare 
Address: Road, Exeter EX4 4PT. UK  St. Andrews Road, Great Malvern, Worcestershire WR14 3PS. UK  
Affiliation: Department of Computer Science, University of Exeter, Prince of Wales  Defence Research Agency,  
Note: This work was funded by the U.K. Ministry of Defence under Strategic Research project AS02BN09. Crown Copyright 1994 Defence Research Agency, Farnborough, Hants GU14 6TD, U.K.  
Abstract: Breathing Time Buckets and Time Warp are two different approaches to optimistic parallel discrete event simulation. To explore their relative performance we ran two simple simulations using transputer-based implementations of the two algorithms. To exercise the two implementations thoroughly, we varied the value of the following parameters for one of the simulations, a queuing network: the number of objects involved; the granularity of events; and the distance into the future that the new events are scheduled. Both simulators provide speedup. The Breathing Time Buckets algorithm can perform better than the Time Warp based simulator for most cases. However, this latter behaves more consistently as it is not affected by either the distance into the future that new events are scheduled, nor by the network topology used. On the other hand, the performance of Breathing Time Buckets is sensitive to both of these parameters. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Booth, C. J. M., Kirton, M. J., and Milner, K. R. </author> <year> 1993. </year> <title> Experiences in implementing the breathing time buckets algorithm on a transputer array. </title> <booktitle> Proc. of the IASTED Conf. on Modelling and Simulation, </booktitle> <pages> pages 274277. </pages>
Reference-contexts: This algorithm has been implemented at DRA Malvern in C++ on a network of transputers. The communication mechanism used is again Tiny. The details of this implementation are given in <ref> (Booth et al. 1993) </ref>. THE PERFORMANCE OF THE SIMULATORS We used two simulations to compare the performance of the simulators. The first is a fully interconnected, first-come first-served queuing network in which the time taken to process events (the grain) could be varied.
Reference: <author> Chandy, K. M. and Misra, J. </author> <year> 1979. </year> <title> Distributed Simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Transactions on Software Engineering, S.E.5, no.5: </journal> <volume> 440452. </volume>
Reference-contexts: In a parallel environment, causality is the main problem and is converted to an event synchronization problem. Events are represented by time-stamped messages which are exchanged between logical processes. Algorithms for parallel DES (PDES) fall into two broad classes: conservative and optimistic. Conservative approaches <ref> (Chandy and Misra 1979) </ref> strictly avoid the possibility of any causality error ever occurring and must determine when it is safe to process an event.
Reference: <author> Clarke, L. and Wilson, G. </author> <year> 1991. </year> <title> Tiny: An efficient routing harness for the inmos transputer. </title> <journal> Concurrency: Practice and Experience 3, </journal> <volume> no.3: </volume> <pages> 221245. </pages>
Reference-contexts: TWSIM has also been ported onto transputers at Exeter (Turner et al. 1993). The transputer versions of TWSIM and TWOS are implemented under the ANSI C standard, using the Inmos ANSI C Toolset (Inmos 1990). The low level message passing routines use a message passing harness called Tiny <ref> (Clarke and Wilson 1991) </ref>. THE BREATHING TIME BUCKETS ALGORITHM The Breathing Time Buckets (BTB) algorithm is an optimistic technique in which risk (Reynolds 1988) is minimized; anti-messages are not needed since all rollbacks are local. The algorithm proceeds in cycles.
Reference: <author> Fujimoto, R. M. </author> <year> 1990. </year> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM 33, no.10: </journal> <volume> 3053. </volume> <month> Inmos </month> <year> 1988. </year> <title> Transputer Reference Manual. </title> <publisher> Prentice Hall. </publisher> <month> Inmos </month> <year> 1990. </year> <title> ANSI C Toolset reference manual. </title> <publisher> Prentice Hall Jefferson, </publisher> <editor> D. R. </editor> <year> 1985. </year> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <volume> no.3: </volume> <pages> 404425. </pages>
Reference-contexts: Conservative approaches (Chandy and Misra 1979) strictly avoid the possibility of any causality error ever occurring and must determine when it is safe to process an event. On the other hand, optimistic approaches use a detection and recovery approach <ref> (Fujimoto 1990) </ref>: causality errors are detected and repaired by undoing the effects of the erroneously processed event (s). Conservative simulation techniques can perform extremely well in the sense they give good speedup on certain types of simulation (Merrifield et al. 1990).
Reference: <author> Jones, W. J. </author> <year> 1986. </year> <title> An empirical comparison of priority-queue and event-set implementations. </title> <journal> Communication of the ACM 29, no.4: </journal> <volume> 300311. </volume>
Reference: <author> Merrifield, B. C., Richardson, S. B., and Roberts, J. B. G. </author> <year> 1990. </year> <title> Quantitative studies of discrete event simulation modelling of road traffic. </title> <booktitle> Proc. of SCS Multi-Conference on Distributed Simulation 22, </booktitle> <address> no.1. </address>
Reference-contexts: On the other hand, optimistic approaches use a detection and recovery approach (Fujimoto 1990): causality errors are detected and repaired by undoing the effects of the erroneously processed event (s). Conservative simulation techniques can perform extremely well in the sense they give good speedup on certain types of simulation <ref> (Merrifield et al. 1990) </ref>. These simulations are characterized by a known, fixed connectivity between processes and good lookahead when scheduling events. These characteristics are precisely the ones which restrict the usefulness of the techniques when applied to military simulations.
Reference: <author> Reynolds, P. F. </author> <year> 1988. </year> <title> A spectrum of options for parallel simulation. </title> <booktitle> Proc. of the 1988 Winter Simulation Conference pages 325332. </booktitle>
Reference-contexts: The low level message passing routines use a message passing harness called Tiny (Clarke and Wilson 1991). THE BREATHING TIME BUCKETS ALGORITHM The Breathing Time Buckets (BTB) algorithm is an optimistic technique in which risk <ref> (Reynolds 1988) </ref> is minimized; anti-messages are not needed since all rollbacks are local. The algorithm proceeds in cycles. Processors repeatedly process events, exchange messages, perform rollbacks and advance the simulation time until the simulation is complete. In every cycle all the events that do not precede each other are run.
Reference: <author> Steinman, J. S. </author> <year> 1991. </year> <title> Speedes: Synchronous parallel environment for emulation and discrete event simulation. </title> <booktitle> Proc. of the Workshop on Parallel and Distributed Simulation, </booktitle> <address> Anaheim. </address>
Reference-contexts: These characteristics are precisely the ones which restrict the usefulness of the techniques when applied to military simulations. We have therefore concentrated our efforts on two optimistic techniques: the Breathing Time Buckets algorithm <ref> (Steinman 1991) </ref> and the Time Warp mechanism (Jefferson 1985). An overview of these two techniques is presented. Some results of a comparison of their performance using a fully inter-connected queuing network simulation and a simplified attackers and defenders simulation from the military domain are then discussed.
Reference: <author> Turner, S. J., Damitio, M., and Trivett, S. </author> <year> 1993. </year> <title> A transputer version of the time warp operating system. </title> <type> Research Report, </type> <institution> Department of Computer Science, University of Exeter. </institution>
Reference-contexts: This work has been carried out at Exeter and is described in <ref> (Turner et al. 1993) </ref>. The Time Warp Sequential Simulator (TWSIM) is a sequential program that provides the user with a way of sequentially running applications intended for the Time Warp Operating System. TWSIM has exactly the same user interface as TWOS. <p> TWSIM has exactly the same user interface as TWOS. It produces the same results as TWOS insofar as is possible with a purely sequential algorithm. It is used to provide a basis for speedup comparisons and to debug simulations. TWSIM has also been ported onto transputers at Exeter <ref> (Turner et al. 1993) </ref>. The transputer versions of TWSIM and TWOS are implemented under the ANSI C standard, using the Inmos ANSI C Toolset (Inmos 1990). The low level message passing routines use a message passing harness called Tiny (Clarke and Wilson 1991).
References-found: 9

