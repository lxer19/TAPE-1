URL: http://www.cs.toronto.edu/~koudas/sigmod97.ps
Refering-URL: http://www.cs.toronto.edu/~koudas/publications.htm
Root-URL: http://www.cs.toronto.edu
Email: koudas@cs.toronto.edu  kcs@cs.toronto.edu  
Title: Size Separation Spatial Join  
Author: Nick Koudas Kenneth C. Sevcik 
Address: Toronto  Toronto  
Affiliation: Computer Systems Research Institute University of  Computer Systems Research Institute University of  
Abstract: We introduce a new algorithm to compute the spatial join of two or more spatial data sets, when indexes are not available on them. Size Separation Spatial Join (S 3 J ) imposes a hierarchical decomposition of the data space and, in contrast with previous approaches, requires no replication of entities from the input data sets. Thus its execution time depends only on the sizes of the joined data sets. We describe S 3 J and present an analytical evaluation of its I/O and processor requirements comparing them with those of previously proposed algorithms for the same problem. We show that S 3 J has relatively simple cost estimation formulas that can be exploited by a query optimizer. S 3 J can be efficiently implemented using software already present in many relational systems. In addition, we introduce Dynamic Spatial Bitmaps (DSB), a new technique that enables S 3 J to dynamically or statically exploit bitmap query processing techniques. Finally, we present experimental results for a prototype implementation of S 3 J involving real and synthetic data sets for a variety of data distributions. Our experimental results are consistent with our analytical observations and demonstrate the performance benefits of S 3 J over alternative approaches that have been proposed recently. 
Abstract-found: 1
Intro-found: 1
Reference: [Bia69] <author> T. Bially. </author> <title> Space-Filling Curves: Their Generation and Their Application to Bandwidth Reduction. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <month> November </month> <year> 1969. </year>
Reference: [BKS93] <author> Thomas Brinkhoff, Hans-Peter Kriegel, and Bern-hard Seeger. </author> <title> Efficient Processing of Spatial Joins using R-trees. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In the Refinement Step, the actual spatial objects corresponding to the candidate pairs are checked under the predicate. There exists an extensive body of work on spatial join algorithms. For Grid Files [NHS84], an algorithm for doing spatial joins was developed by Rotem [Rot93]. Brinkhoff, et al. <ref> [BKS93] </ref> proposed an algorithm to perform the spatial join of two spatial data sets indexed with R-trees [Gut84] [SRF87]. Sevcik and Koudas recently introduced an access method called Filter Trees and provided an algorithm to perform the Spatial Join of two data sets indexed with Filter Trees [SK96].
Reference: [BKSS94] <author> Thomas Brinkhoff, H.P Kriegel, Ralf Schneider, and Bernhard Seeger. </author> <title> Multistep Processing of Spatial Joins. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 189-208, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In order to facilitate indexing and query processing, spatial objects are usually described by their Minimum Bounding Rectangle (MBR) or some other approximation <ref> [BKSS94] </ref>. As suggested by Orenstein [Ore86], spatial joins can be executed in two steps. In the first step, called the Filter Step, the predicate is evaluated on the spatial approximations of objects, and a list of candidate join pairs is produced.
Reference: [Bur91] <institution> Bureau of the Census. TIGER/Line Census Files. </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Coverage is defined as the total area occupied by the entities over the area of the MBR of the data space. The LB and MG data sets contain road segments extracted from the TIGER/Line data set <ref> [Bur91] </ref>. The first (LB) presents road segments in Long Beach County, California. The second (MG) represents road segments from Montgomery County, Maryland and contains 39,000 line segments. Data set TR is used to model scenarios in which the spatial entities in the data sets are of various sizes.
Reference: [Gut84] <author> A. Guttman. </author> <title> R-trees : A Dynamic Index Structure for Spatial Searching. </title> <booktitle> Proceedings of ACM SIG-MOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: There exists an extensive body of work on spatial join algorithms. For Grid Files [NHS84], an algorithm for doing spatial joins was developed by Rotem [Rot93]. Brinkhoff, et al. [BKS93] proposed an algorithm to perform the spatial join of two spatial data sets indexed with R-trees <ref> [Gut84] </ref> [SRF87]. Sevcik and Koudas recently introduced an access method called Filter Trees and provided an algorithm to perform the Spatial Join of two data sets indexed with Filter Trees [SK96].
Reference: [KS96] <author> Nick Koudas and Kenneth C. Sevcik. </author> <title> Size Separation Spatial Join. </title> <institution> Computer Systems Research Institute, CSRI-TR-352. University of Toronto, </institution> <month> Oc-tober </month> <year> 1996. </year>
Reference-contexts: Notice that, in the worst case, r B equals D. Using the formulas derived above, an analytical comparison of the algorithms has been carried out. Due to space limitations it is not presented here but is available elsewhere <ref> [KS96] </ref>. 5 Experimental Comparison In this section, we present experimental results from prototype implementations of all three algorithms. We include experimental results using combinations of real and synthetic data sets. We implemented all three algorithms on top of a common storage manager that provides efficient I/O. <p> All three algorithms are capable of filtering and their relative performance depends on the amount of filtering that takes place. Due to space limitations the discussion is not included here but is available elsewhere <ref> [KS96] </ref>. 5.3 Discussion We have presented several experiments comparing the performance of the three algorithms S 3 J , PBSM, and SHJ, involving real and synthetic data sets. Our experimental results are consistent with our analytic observations [KS96]. <p> to space limitations the discussion is not included here but is available elsewhere <ref> [KS96] </ref>. 5.3 Discussion We have presented several experiments comparing the performance of the three algorithms S 3 J , PBSM, and SHJ, involving real and synthetic data sets. Our experimental results are consistent with our analytic observations [KS96]. The relative performance of the algorithms depends heavily on the statistical characteristics of the datasets. Although the experimental results presented involved data sets of equal size, we expect our results to generalize in cases where the joined data sets have different sizes. <p> For distributions in which filtering takes place, we experi mentally showed that S 3 J with DSB is able to outperform both PBSM and SHJ <ref> [KS96] </ref>. When enough filtering takes place, for our experimental results, PBSM does better than SHJ mainly due to the expensive partitioning phase of SHJ.
Reference: [LR95] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Generating Seeded Trees from Spatial Data Sets. </title> <booktitle> Symposium on Large Spatial Data Bases, </booktitle> <pages> pages 328-347, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The algorithm starts by computing the number of partitions 1 into which the data space should be divided. The computation uses a formula proposed by the same authors in earlier work <ref> [LR95] </ref>. Once the number of partitions is determined, the first data set is sampled. The centers of the spatial objects obtained from sampling are used to initialize the partitions. Then the first data set is scanned and the spatial entities are assigned to partitions based on the nearest center heuristic [LR95]. <p> <ref> [LR95] </ref>. Once the number of partitions is determined, the first data set is sampled. The centers of the spatial objects obtained from sampling are used to initialize the partitions. Then the first data set is scanned and the spatial entities are assigned to partitions based on the nearest center heuristic [LR95]. Each spatial entity is placed in the partition for which the distance from its center to the center of the partition is minimum. Once an entity is inserted in a partition, the MBR of the partition is expanded to contain the entity if necessary. <p> In all PBSM experiments, we compute the number of partitions using equation (8) as suggested by Patel et al. [PD96]. Similarly, SHJ performance depends on the statistical properties of the input data sets. We compute the number of partitions using the formula suggested by Lo and Ravishankar <ref> [LR95] </ref>. We present the times required for different phases of the algorithms. Table 2 summarizes the composition of the phases for the three algorithms.
Reference: [LR96] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Spatial hash-joins. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 247-258, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Patel and DeWitt [PD96] introduced Partition Based Spatial Merge Join (PBSM) to compute the spatial join of two data sets without the use of indices. Lo and Ravishankar <ref> [LR96] </ref> also presented an algorithm for the same problem called Spatial Hash Joins. In the next subsections, we describe these two algorithms in greater detail. 2.1 Partition Based Spatial Merge Joins Partition Based Spatial Merge Join (PBSM) is a generalization of the sort merge join algorithm. <p> If memory space is exhausted during the R-tree building phase, LRU replacement is used as outer objects are probed against the tree. The complete algorithm is summarized in figure 3. 1 The authors use the term slot <ref> [LR96] </ref>, but in order to unify terminology and facilitate the presentation, we use the term partitions throughout this paper. 2.3 Summary Both PBSM and SHJ divide the data space into partitions, either regularly (PBSM) or irregularly (SHJ) and proceed to join partition pairs.
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The Grid File: An Adaptable, Symmetric Multi-key File Structure. </title> <journal> ACM TODS 1984, </journal> <pages> pages 38-71, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: In the Refinement Step, the actual spatial objects corresponding to the candidate pairs are checked under the predicate. There exists an extensive body of work on spatial join algorithms. For Grid Files <ref> [NHS84] </ref>, an algorithm for doing spatial joins was developed by Rotem [Rot93]. Brinkhoff, et al. [BKS93] proposed an algorithm to perform the spatial join of two spatial data sets indexed with R-trees [Gut84] [SRF87].
Reference: [OG95] <author> P. O'Neil and G. Graefe. </author> <title> Multi-Table Joins Through Bitmapped Join Indeces. </title> <booktitle> SIGMOD Record Vol. </booktitle> <volume> 24, No. 3, </volume> <pages> pages 8-11, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: No information obtained during the partitioning of the first data set is used during the partitioning of the second. S 3 J can be extended to perform filtering by using Dynamic Spatial Bitmaps (DSB). DSB is similar to the technique of bitmap join indices in the relational domain [Val87] <ref> [OG95] </ref> [O'N96]. However, DSB is tailored to a spatial domain. S 3 J dynamically maps entities into a hierarchy of level files.
Reference: [O'N96] <author> P. O'Neil. </author> <title> Query Performance. </title> <institution> Talk Delivered at IBM Toronto, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: S 3 J can be extended to perform filtering by using Dynamic Spatial Bitmaps (DSB). DSB is similar to the technique of bitmap join indices in the relational domain [Val87] [OG95] <ref> [O'N96] </ref>. However, DSB is tailored to a spatial domain. S 3 J dynamically maps entities into a hierarchy of level files.
Reference: [Ore86] <author> J. Orenstein. </author> <title> Spatial Query Processing in an Object-Oriented Database System. </title> <booktitle> Procedings of ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: In order to facilitate indexing and query processing, spatial objects are usually described by their Minimum Bounding Rectangle (MBR) or some other approximation [BKSS94]. As suggested by Orenstein <ref> [Ore86] </ref>, spatial joins can be executed in two steps. In the first step, called the Filter Step, the predicate is evaluated on the spatial approximations of objects, and a list of candidate join pairs is produced.
Reference: [PD96] <author> Jignesh M. Patel and David J. DeWitt. </author> <title> Partition Based Spatial-Merge Join. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Two new algorithms have been proposed recently to solve this problem for the case where the data sets do not fit in main memory. Patel and DeWitt <ref> [PD96] </ref> introduced Partition Based Spatial Merge Join (PBSM) to compute the spatial join of two data sets without the use of indices. Lo and Ravishankar [LR96] also presented an algorithm for the same problem called Spatial Hash Joins. <p> table driven routine for computing the Hilbert values, we were able to perform the computation in less than 10 sec per value at maximum precision on a 133MHz processor, so H = 10secs. 4.1.2 PBSM I/O analysis The number of partitions suggested by Patel and DeWitt for the PBSM algorithm <ref> [PD96] </ref> is: D = M Defining the replication factor r f as: r f = Data set size af ter replication and f iltering original data set size (S f ) (9) the number of page reads and writes during the partitioning phase is: (1 + r A ) S A <p> For PBSM, we demonstrate the effect of different parameters on the performance of the algorithm. We include results for various numbers of tiles. In all PBSM experiments, we compute the number of partitions using equation (8) as suggested by Patel et al. <ref> [PD96] </ref>. Similarly, SHJ performance depends on the statistical properties of the input data sets. We compute the number of partitions using the formula suggested by Lo and Ravishankar [LR95]. We present the times required for different phases of the algorithms.
Reference: [Rot93] <author> Doron Rotem. </author> <title> Spatial Join Indices. </title> <booktitle> Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 500-509, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: In the Refinement Step, the actual spatial objects corresponding to the candidate pairs are checked under the predicate. There exists an extensive body of work on spatial join algorithms. For Grid Files [NHS84], an algorithm for doing spatial joins was developed by Rotem <ref> [Rot93] </ref>. Brinkhoff, et al. [BKS93] proposed an algorithm to perform the spatial join of two spatial data sets indexed with R-trees [Gut84] [SRF87].
Reference: [SK96] <author> Kenneth C. Sevcik and Nick Koudas. </author> <title> Filter Trees for Managing Spatial Data Over a Range of Size Granularities. </title> <booktitle> Proceedings of VLDB, </booktitle> <pages> pages 16-27, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Sevcik and Koudas recently introduced an access method called Filter Trees and provided an algorithm to perform the Spatial Join of two data sets indexed with Filter Trees <ref> [SK96] </ref>. Two new algorithms have been proposed recently to solve this problem for the case where the data sets do not fit in main memory. Patel and DeWitt [PD96] introduced Partition Based Spatial Merge Join (PBSM) to compute the spatial join of two data sets without the use of indices. <p> We experiment with data distributions that can lead to increased replication using the previously proposed algorithms and we show the benefits of avoiding replication in such cases. 3 Size Separation Spatial Join Size Separation Spatial Join derives its properties from the Filter Tree join algorithm <ref> [SK96] </ref>. Filter Trees partition spatial data sets by size. S 3 J constructs a Filter Tree partition of the space on the fly without building complete Filter Tree indices. The level j filter is composed of 2 j 1 equally spaced lines in each dimension. <p> +y h * Level (x l ; y l ; x h ; y h ), the level of the Filter Tree at which the entity resides (which is the number of initial bits in which x l and x h as well as y l and y h agree) <ref> [SK96] </ref>. Given two spatial data sets, A and B, S 3 J proceeds as follows. Each data set in turn is scanned and partitioned into level files. <p> i = 1; : : : ; k (d) 1 2 2 k (d) d) 2 i = k (d) where k (d) = d log 2 de is the lowest level to which any d fi d object can fall (since d must be less than 2 k ) <ref> [SK96] </ref>. Then the expected size of each level file i for data set j will be about S ij = f i S j , i = 1 : : : max (L A ; L B ), j 2 A; B.
Reference: [SM96] <author> M. Stonebraker and D. Moore. </author> <title> Object Relational Databases: The Next Wave. </title> <publisher> Morgan Kauffman, </publisher> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Research and development in Database Management Systems (DBMS) in recent decades has led to the existence of many products and prototypes capable of managing relational data efficiently. Recently there is interest in enhancing the functionality of relational data base systems with Object-Relational capabilities <ref> [SM96] </ref>. This means, among other things, that Object-Relational systems should be able to manage and answer queries on different data types, such as spatial and multimedia data. Spatial data are commonly found in applications like cartography, CAD/CAM and Earth Observation/Information systems. Multimedia data include video, images and sound.
Reference: [SRF87] <author> Timos Sellis, Nick Roussopoulos, and Christos Faloutsos. </author> <title> The R+ -tree : A Dynamic Index for Multi-dimensional Data. </title> <booktitle> Proceedings of VLDB 1987, </booktitle> <pages> pages 507-518, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: There exists an extensive body of work on spatial join algorithms. For Grid Files [NHS84], an algorithm for doing spatial joins was developed by Rotem [Rot93]. Brinkhoff, et al. [BKS93] proposed an algorithm to perform the spatial join of two spatial data sets indexed with R-trees [Gut84] <ref> [SRF87] </ref>. Sevcik and Koudas recently introduced an access method called Filter Trees and provided an algorithm to perform the Spatial Join of two data sets indexed with Filter Trees [SK96].
Reference: [Val87] <author> P. Valduriez. </author> <title> Join Indexes. </title> <journal> ACM TODS, </journal> <volume> Volume 12, No 2, </volume> <pages> pages 218-246, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: No information obtained during the partitioning of the first data set is used during the partitioning of the second. S 3 J can be extended to perform filtering by using Dynamic Spatial Bitmaps (DSB). DSB is similar to the technique of bitmap join indices in the relational domain <ref> [Val87] </ref> [OG95] [O'N96]. However, DSB is tailored to a spatial domain. S 3 J dynamically maps entities into a hierarchy of level files.
References-found: 18

