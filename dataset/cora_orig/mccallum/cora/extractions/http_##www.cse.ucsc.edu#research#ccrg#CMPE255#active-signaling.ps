URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/active-signaling.ps
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/
Root-URL: http://www.cse.ucsc.edu
Title: Active Signaling Protocols  
Author: Bob Braden 
Date: June 4, 1997  
Affiliation: USC/Information Sciences Institute  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: [Bhatt96] <author> Bhattacharjee, S., Calvert, K., and E. Zegura, </author> <title> An Architecture for Active Networking. </title> <type> Technical Report GIT-CC-96/20, </type> <institution> Georgia Inst. of Tech., </institution> <address> Atlanta, GA., </address> <year> 1996. </year>
Reference-contexts: We will clearly distinguish control traffic from the user data flow, which implies the discrete approach. However, considering the control traffic alone, every active reservation packet will contain a program, hence at the control level we are taking the integrated approach. Bhattacharjee et. al. at Georgia Tech <ref> [Bhatt96] </ref> augment packet headers with very restricted 10 programs; they are essentially lists of parametrized function calls, where the functions are built into the nodes.
Reference: [Java95] <author> Gosling, J and H. McGilton, </author> <title> The Java Language Environment: A White Paper. </title> <publisher> Sun Microsystems Computer Company, </publisher> <address> Mountain View, CA, </address> <month> October </month> <year> 1995. </year>
Reference: [RFC1633] <author> Braden, R., Clark, D., and S. Shenker, </author> <title> Integrated Services in the Internet Architecture: an Overview, </title> <address> RFC-1633. </address> <month> June </month> <year> 1994. </year>
Reference-contexts: For this purpose, technology and standards are being developed to add resource reservation state and scheduling mechanisms to Internet routers and hosts, in order to implement integrated services <ref> [RFC1633] </ref>. To retain the basic robustness of the Internet protocols, the reservation state required by integrated services will be "soft", i.e., it will be established incrementally and refreshed periodically. The soft-state reservation setup (i.e., signaling) protocol RSVP is designed for this purpose [RSVPv1]. <p> However, assuming that the predicted explosion of Internet teleconferencing and other realtime multimedia applications occurs, the ever-shifting technology will certainly lead to new and different requirements on RVSP. 3.2 Route Setup A fundamental design decision in the integrated services architecture was to functionally separate reservation setup from routing <ref> [RFC1633] </ref>. This choice was made to allow RSVP to work with the many existing and future Internet routing protocols. Although they are distinct, routing and reservations must be coupled to provide the desired service.
Reference: [RSVPv1] <author> Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S. Jamin, </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 Functional Specification, </title> <type> Internet Draft, </type> <month> November </month> <year> 1996. </year>
Reference-contexts: To retain the basic robustness of the Internet protocols, the reservation state required by integrated services will be "soft", i.e., it will be established incrementally and refreshed periodically. The soft-state reservation setup (i.e., signaling) protocol RSVP is designed for this purpose <ref> [RSVPv1] </ref>. ISI has been developing the RSVP protocol and a prototype implementation. RSVP research has explored part of a complex space of service attributes and functions for Internet resource reservation, in order to choose a small subset that seemed to be most likely to be useful. <p> It is unlikely that these choices will turn out to be sufficient. Version 1 of RSVP, which has been submitted for the Internet standards track, illustrates well the limitations imposed by conventional design and implementation techniques for signaling protocols <ref> [RSVPv1] </ref>. Here are some examples of RSVP v1 limitations (We assume familiarity with RSVP here). * Cross-session reservations RSVP v1 treats each session as independent for the purpose of making reservations. Here a 8 session is defined by a unique (destination address, destination port) pair.
Reference: [Smith96] <author> Smith, J., Farber, D., Gunter, C, Nettles, S., Feldmeier, D., and W. D. Sin-coskie, Switchware: </author> <title> Accelerating Network Evolution (White Paper). </title> <type> Technical Report MS-CIS-96-38, </type> <institution> CIS Dept., Univ. of Pennsylvania, </institution> <month> June </month> <year> 1996. </year> <note> Available from: http://www.cis.upenn.edu/ jms/white-paper.ps </note>
Reference-contexts: Our approach, with its use of a universally-defined bytecode stream for installing new algorithms, will be allow new algorithms to be defined and installed immediately across all platforms. The Switchware work by Jon Smith et. al. <ref> [Smith96] </ref> at University of Pennsylvania and Bell-core embraces the integrated approach to active networks. They plan to create a programmable switching node and develop several new services using it. <p> They plan to create a programmable switching node and develop several new services using it. They recognize that their switching node, to be useful, must include conventional IP datagram forwarding, reserving the active networking capability for applications that are "highly speculative, too forward looking, or simply not well understood" <ref> [Smith96] </ref>. Of their intended applications, only network management is concerned with network control and is therefore comparable to the our work on active signaling. <p> It should be possible later to extend the benefits of active networking into the latency-sensitive domain by exploiting other research efforts. For example, our active reservations can be linked with programmable packet schedulers under development <ref> [Smith96] </ref>. Another approach would bind together forwarding primitives in a manner analogous to Bhattacharjee et. al. [Bhat96]. ASPs will be represented in some safe but efficient bytecode, i.e., instructions for a virtual machine, that can be efficiently and safely interpreted and/or compiled at each node.
Reference: [Tennen96] <author> Tennenhouse, D. and D. Wetherall, </author> <title> Towards an Active Network Architecture. </title> <journal> ACM CCR, </journal> <volume> v.26 No. 2, </volume> <pages> pp 5-18, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: This approach will allow rapid deployment, dynamic re-definition, and customization of signaling algorithms. The active signaling concept is derived from a new networking paradigm known as active networking. Active networking <ref> [Tennen96, Tennen97] </ref> allows switching nodes to execute programs carried in packets, rather than simply forwarding the packets transparently. Active networking is enabled by the constantly increasing CPU power available in silicon, together with advances in operating systems and languages. <p> They distinguish the integrated approach, in which every message is a program or capsule <ref> [Tennen96] </ref>, from the discrete approach, in which the programs and data are carried in different logical channels and/or processed by logically different mechanisms. Our approach in active reservations has aspects of each of these approaches.
Reference: [Tennen97] <author> Tennenhouse, D., Smith, J., Sincoskie, W. D., Wetherall, D., and G. Minden, </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Comm. Mag., </journal> <month> January </month> <year> 1997. </year>
Reference-contexts: This approach will allow rapid deployment, dynamic re-definition, and customization of signaling algorithms. The active signaling concept is derived from a new networking paradigm known as active networking. Active networking <ref> [Tennen96, Tennen97] </ref> allows switching nodes to execute programs carried in packets, rather than simply forwarding the packets transparently. Active networking is enabled by the constantly increasing CPU power available in silicon, together with advances in operating systems and languages. <p> It is highly desirable, but may not be necessary for this project, that there be a compiler that can optionally turn bytecode into machine language for efficiency. An initial evaluation for current contenders for active languages <ref> [Tennen97] </ref> led us to the choice of Java for initial experiments. The Java bytecode representation and runtime environment appear to satisfy all requirements just listed. The Java runtime environment (Java Platform) includes the Java virtual machine and the Java API, a library of object definitions that can be dynamically linked. <p> This will allow significant research progress on the reservation/ routing area, and it also serve as a proof of concept of the rapid prototyping capability of active signaling. 4 Related Research In a recent survey of research related to active networking, Tennenhouse et. al. <ref> [Tennen97] </ref> present two expected benefits of active networking: speeding new innovation in the network infrastructure and enabling new network-based applications. <p> In particular, they intend to integrate the Bellcore Sunshine programmable port controller into their work, to provide a programmable packet scheduler; this would be a good match to our active reservation mechanism. Tennenhouse and colleagues at MIT are also pursuing the integrated or capsule approach to active networking <ref> [Tennen97] </ref>. They are planning to build a prototype using Java, and investigate advanced operating system and compiler technologies that will feed into this work. Much of their interest appears to be in providing new middleware services within the network.
Reference: [Yemeni96] <author> Yemeni, Y. and Da Silva, </author> <title> Towards Programmable Networks. </title> <booktitle> IFIP/IEEE International Workshop on Distributed Systems Operations and Management, </booktitle> <address> L'Aquila, Italy, </address> <month> October </month> <year> 1996. </year> <note> Available from http://www.cs.columbia.edu/ dasilva/content/netscript/. </note>
Reference-contexts: Much of their interest appears to be in providing new middleware services within the network. Our work will be more concentrated on a particular but important network control problem, signaling for QoS. The work that appears closest to ours is that of Yemeni and Da Silva <ref> [Yemeni96] </ref>. They appear to be interested in network control problems such as routing as well as network management, and by extension their approach could cover resource reservation. They define a general architectural model for programmable switching nodes, using Virtual Network Engines interconnected by Virtual Links.
Reference: [Zappala96] <author> Zappala, D., Braden, R., Estrin, D., and S. Shenker, </author> <title> Interdomain Multicast Routing Support for Integrated Services Networks: A White Paper. </title> <month> December </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: Our investigation of this coupling has led to the design of a number of specific services that routing must provide to resource reservation; these include route lookup, route change notification, route pinning, and alternate path joining <ref> [Zappala96] </ref>. The first two of these services require only very minor implementation extensions to existing routing protocols. However, the last two require significant routing extensions; they fall into the functional category that is called quality-of-service (QoS) routing. <p> However, the last two require significant routing extensions; they fall into the functional category that is called quality-of-service (QoS) routing. The approach that we have been developing for QoS routing services to support RSVP involves establishing soft routing state in switching nodes <ref> [Zappala96] </ref>. The (routing) protocol to create and manage this soft state is another signaling protocol. Economy of mechanism as well as packet efficiency would design a unified state setup protocol that handles both reservations and this routing state.
References-found: 10

