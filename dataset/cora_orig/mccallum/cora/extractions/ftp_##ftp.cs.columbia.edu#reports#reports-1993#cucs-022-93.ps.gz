URL: ftp://ftp.cs.columbia.edu/reports/reports-1993/cucs-022-93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1993.html
Root-URL: http://www.cs.columbia.edu
Email: israel@cs.columbia.edu  
Phone: tel: 212-939-7085/fax: 212-666-0140  
Title: A Configuration Process for a Distributed Software Development Environment (Extended Abstract)  
Author: Israel Z. Ben-Shaul Gail E. Kaiser 
Date: August 18, 1993  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: CUCS-022-93  
Abstract: This paper describes work-in-progress on a configuration facility for a multi-site software development environment. The environment supports collaboration among geographically-dispersed teams of software developers. Addition and deletion of local subenvironment sites to a global environment is performed interactively inside any one of the existing local subenvi-ronments, with the same user interface normally employed for invoking software development tools. This registration process is defined and executed using the same notation and mechanisms, respectively, as for the software development process. Each remote site is represented by a root object in the distributed objectbase containing the software under development; each local subobjectbase can be displayed and queried at any site, but only its root is physically copied at every site. Everything described in this paper has been implemented and is working, but since we are in the midst of experimentation, we do not expect that the "final" system will be exactly as described here. c fl1993 Israel Z. Ben-Shaul and Gail E. Kaiser
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: Clients may run on the same or different hosts as the server, but the enveloping facility assumes a shared network file system. The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control, are given in <ref> [2, 1, 9] </ref>. Marvel's support for schema and process evolution while a long-term project is in progress is described in [12]. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment on top of Marvel 3.0, and released in Spring 1992.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Clients may run on the same or different hosts as the server, but the enveloping facility assumes a shared network file system. The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control, are given in <ref> [2, 1, 9] </ref>. Marvel's support for schema and process evolution while a long-term project is in progress is described in [12]. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment on top of Marvel 3.0, and released in Spring 1992.
Reference: [3] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The user chooses when to try a particular process step, and then Marvel selects the "closest" matching rules (there may be more than one) and fires each of these rules in turn until it finds one whose condition is already satisfied or can be satisfied by backward chaining <ref> [3] </ref>. The activity, if any, of this rule is then executed. Afterwards, one of the effects is selected according to a status code returned by the activity, and Marvel forward chains to any other rules that are implications of this effect.
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Chaining is prohibited into or out of the compile rule from another instance of the compile rule, due to the "no chain" directive (there is also a "no backward" directive). Additional details about the rule formalism and its chaining engine are given in <ref> [4, 11, 10] </ref>. Conventional file-oriented tools are integrated into a Marvel process without source modifications, or even recompilation, through an enveloping language [7].
Reference: [5] <author> Israel Z. Ben-Shaul. </author> <title> Oz: A decentralized process centered environment. </title> <type> Technical Report CUCS-011-93, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: A geographically distributed PCE would permit each site to specify its own process model, including the desired collaboration with other sites. We do not consider the latter criteria above, where distinct environment systems might inter Our approach to multi-site process definition and execution <ref> [5] </ref> is outside the scope of this workshop. The focus of this paper is on the configuration of a global environment, and its reconfiguration over time while the long-term software development project is in progress.
Reference: [6] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: The body of an envelope is a shell script, written in any one of the conventional Unix shell languages: ksh, csh, or sh. Existing software can be immigrated from the file system into a Marvel objectbase using the Marvelizer utility [16]. Multiple users are supported by a client/server architecture <ref> [6] </ref>. A client provides the user interface, checks the arguments of commands, and forks tool envelopes, while the process engine, synchronization management and objectbase reside in the central Marvel server. Scheduling is FCFS, with rule chains interleaved at the natural breaks provided when clients execute activities.
Reference: [7] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Additional details about the rule formalism and its chaining engine are given in [4, 11, 10]. Conventional file-oriented tools are integrated into a Marvel process without source modifications, or even recompilation, through an enveloping language <ref> [7] </ref>. The rule activity indicates the tool and envelope name, with input literals and attributes to be supplied as arguments and output variables for binding to returned results; an implicit status code selects the actual effect from among those given in the rule.
Reference: [8] <author> Dennis Heimbigner and Marc Kellner. </author> <title> Software process example for ISPW-7, </title> <month> August </month> <year> 1991. </year> <note> /pub/cs/techreports/ISPW7/ispw7.ex.ps.Z available by anonymous ftp from ftp.cs.colorado.edu. </note>
Reference-contexts: Our main example environments are included as part of the distribution: C/Marvel, for Marvel's own development and testing; P/Marvel, for installation and evolution of environment definitions; and our solution to 4 5 the benchmark problem developed for the 7th International Software Process Workshop <ref> [8] </ref>. Marvel has been licensed to about 50 institutions to date; licensing is restricted to educational institutions and funding sponsors. 3 Oz Overview An Oz global environment is depicted in Figure 3.
Reference: [9] <author> George T. Heineman. </author> <title> A transaction manager component for cooperative transaction models. </title> <type> Technical Report CUCS-017-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> July </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: Clients may run on the same or different hosts as the server, but the enveloping facility assumes a shared network file system. The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control, are given in <ref> [2, 1, 9] </ref>. Marvel's support for schema and process evolution while a long-term project is in progress is described in [12]. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment on top of Marvel 3.0, and released in Spring 1992. <p> We are developing an extended transaction facility suitable for long duration, interactive, and cooperative applications <ref> [9] </ref>, which at present is implemented only with respect to a single server (within a single site).
Reference: [10] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year> <month> 13 </month>
Reference-contexts: Chaining is prohibited into or out of the compile rule from another instance of the compile rule, due to the "no chain" directive (there is also a "no backward" directive). Additional details about the rule formalism and its chaining engine are given in <ref> [4, 11, 10] </ref>. Conventional file-oriented tools are integrated into a Marvel process without source modifications, or even recompilation, through an enveloping language [7].
Reference: [11] <author> Gail E. Kaiser, Naser S. Barghouti, Peter H. Feiler, and Robert W. Schwanke. </author> <title> Database support for knowledge-based engineering environments. </title> <journal> IEEE Expert, </journal> <volume> 3(2) </volume> <pages> 18-32, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Chaining is prohibited into or out of the compile rule from another instance of the compile rule, due to the "no chain" directive (there is also a "no backward" directive). Additional details about the rule formalism and its chaining engine are given in <ref> [4, 11, 10] </ref>. Conventional file-oriented tools are integrated into a Marvel process without source modifications, or even recompilation, through an enveloping language [7].
Reference: [12] <author> Gail E. Kaiser, Israel Z. Ben-Shaul, George T. Heineman, and Wilfredo Marrero. </author> <title> Process evolution for the marvel environment. </title> <type> Technical Report CUCS-047-92, </type> <institution> Columbia University Department of Computer Science, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The external view is illustrated in Figure 2. Additional details about multi-user issues, primarily concurrency control, are given in [2, 1, 9]. Marvel's support for schema and process evolution while a long-term project is in progress is described in <ref> [12] </ref>. We completed Marvel 3.0, the first multi-user version, in Fall 1991. 3.0.1 was developed using the C/Marvel environment on top of Marvel 3.0, and released in Spring 1992.
Reference: [13] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: The X11 windows user interface supports graphical browsing and ad hoc queries; there is also a command line interface for terminals and batch scripts. The process (or workflow) is given in a process modeling language <ref> [13] </ref>. Each process step is encapsulated in a rule with a name and typed parameters.
Reference: [14] <editor> Sudha Ram, editor. </editor> <booktitle> Special Issue on Heterogeneous Distributed Database Systems, volume 24:12 of Computer. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year> <booktitle> [15] 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This end of the spectrum is analogous to a distributed database system, while the other end is comparable to a set of independent databases. The database community has delineated a practical intermediate point, often termed federated databases, which permits a high degree of site autonomy <ref> [14] </ref>.
Reference: [16] <author> Michael H. Sokolsky and Gail E. Kaiser. </author> <title> A framework for immigrating existing software into new software development environments. </title> <journal> Software Engineering Journal, </journal> <volume> 6(6) </volume> <pages> 435-453, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: The body of an envelope is a shell script, written in any one of the conventional Unix shell languages: ksh, csh, or sh. Existing software can be immigrated from the file system into a Marvel objectbase using the Marvelizer utility <ref> [16] </ref>. Multiple users are supported by a client/server architecture [6]. A client provides the user interface, checks the arguments of commands, and forks tool envelopes, while the process engine, synchronization management and objectbase reside in the central Marvel server.
Reference: [17] <author> Ian Thomas, </author> <title> editor. </title> <booktitle> 7th International Software Process Workshop: Communication and Coordination in the Software Process, </booktitle> <address> Yountville CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 14 </pages>
Reference-contexts: parameterized by a process model, which defines the software development process for that instance of the environment; the kernel assists the users in carrying out the defined process, by guiding them from one step to another, enforcing the constraints and implications of process steps, and/or automating portions of the process <ref> [15, 17] </ref>. A geographically distributed PCE would permit each site to specify its own process model, including the desired collaboration with other sites.
References-found: 16

