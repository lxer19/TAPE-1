URL: http://www.cs.utah.edu/~willrich/async/iee_paper.ps.gz
Refering-URL: http://www.cs.utah.edu/~willrich/async/mypapers.html
Root-URL: 
Email: willrich@cs.utah.edu elb@cs.utah.edu  
Title: Architectural Considerations for a Self-Timed Decoupled Processor  
Author: William F. Richardson Erik Brunvand 
Address: Salt Lake City, UT 84112 Salt Lake City, UT 84112  
Affiliation: Computer Science Department Computer Science Department University of Utah University of Utah  
Abstract: Self-timed processor designs offer several advantages over traditional synchronous designs. Further, when an asynchronous philosophy is incorporated at every stage of the design, the microarchitecture is more closely linked to the basic structures of the self-timed circuits themselves, and the resulting processor is quite simple and elegant. The Fred architecture presented here is an example of such a design approach. The self-timed design philosophy results in a powerful and exible architecture which exhibits significant savings in design effort and circuit complexity. Some of the architectural constraints discovered in the course of the design have simple yet unconventional solutions, which in turn pr ovide additional benefits beyond their immediate application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan L. Davis. </author> <title> Asynchronous advantages often cited and NOT often cited. </title> <booktitle> Distributed at the Async94 conference, November 1994. </booktitle> <address> Salt Lake City, Utah. </address>
Reference-contexts: Of course, fast design time and reduced complexity (due to the lack of clock circuitry) are two of the often-quoted advantages of asynchronous circuits in general <ref> [1] </ref>. The drawback to this approach is that a precise exception model is required for speculative execution. Fred cannot issue instructions speculatively, but it would be a relatively simple matter to implement speculative pre-fetching.
Reference: [2] <author> Harry Dwyer and H. C. Torng. </author> <title> An out-of-order superscalar processor with speculative execution and fast, precise interrupts. </title> <booktitle> In Proceedings of the 25th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 272281, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: However, as illustrated in Figure 2, the decou-pled branch mechanism is quite likely to provide enough prefetching time to eliminate the need for speculative execution. Other researchers have indicated that speculative execution is not always beneficial <ref> [2] </ref>. 6. Applicability to Synchronous Systems The elastic nature of a micropipeline FIFO allows Freds decoupled units to run at data-dependent speeds; producing or consuming data as fast as possible for the given program and data.
Reference: [3] <author> M. K. Farrens and A. R. Pleszkun. </author> <title> Implementation of the PIPE processor. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 6570, </pages> <month> January </month> <year> 1991. </year>
Reference: [4] <author> Matthew Farrens, Pius Ng, and Phil Nico. </author> <title> A comparison of superscalar and decoupled access/execute architectures. </title> <booktitle> In Proceedings of the 26th Annual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1993. </year> <pages> IEEE,ACM. </pages>
Reference: [5] <author> Matthew K. Farrens and Andrew R. Pleszkun. </author> <title> Improving performance of small on-chip instruction caches. </title> <booktitle> In 14th Annual International Symposium on Computer Ar chitec-ture, </booktitle> <pages> pages 234241. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference: [6] <author> J. R. Goodman, J. Hsieh, K. Liou, A. R. Pleszkun, P. B. Schechter, and H. C. Young. </author> <title> PIPE: A VLSI decoupled architecture. </title> <booktitle> In 12th Annual International Symposium on Computer Architecture, pages 2027. IEEE Computer Society, </booktitle> <month> June </month> <year> 1985. </year>
Reference: [7] <author> Doug Hunt. </author> <title> Advanced performance features of the 64-bit PA-8000. </title> <booktitle> In Proceedings of COMPCON95, </booktitle> <pages> pages 123 128. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: For example, the PA-8000 uses a precise exception model and has a 56-entry Instruction Reorder Buffer, which serves the purpose of an Instruction Window <ref> [7] </ref> with out-of-order completion and in-order retirement. In contrast, Freds functionally precise exception model allows instructions to retire in any order, in many cases as soon as the instructions issue. The Instruction Window must track all issued instructions which might fault only until they have completed successfully .
Reference: [8] <author> A. R. Pleszkun, J. R. Goodman, W-C. Hsu, R. T. Joersz, G. Bier, P Woest, and P. B. Schechter. WISQ: </author> <title> A restartable architecture using queues. </title> <booktitle> In 1987 Symposium on Computer Architecture, </booktitle> <pages> pages 290299. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1987. </year>
Reference: [9] <author> William F. Richardson and Erik Brunvand. Fred: </author> <title> An architecture for a self-timed decoupled computer . Technical Report UUCS95008, </title> <institution> University of Utah, </institution> <month> May </month> <year> 1995. </year> <note> ftp://ftp.cs.utah.edu/techreports/1995/ UUCS-95-008.ps.Z. </note>
Reference: [10] <author> William F. Richardson and Erik Brunvand. </author> <title> Precise exception handling for a self-timed processor. </title> <booktitle> In 1995 International Conference on Computer Design: VLSI in Computers & Processors, </booktitle> <pages> pages 3237, </pages> <address> Los Alamitos, CA, October 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Once the doit is consumed the preload cache is copied into the normal cache and invalidated. 4. Exceptions The major innovation of the Fred architecture, which makes possible many additional features, is the functionally precise exception model <ref> [10] </ref>. A precise exception model allow the programmer to view the processor state as though the exception occurred at a point exactly between two instructions, such that all instructions before that point have completed while all those after have not yet started.
Reference: [11] <author> William F. Richardson and Erik Brunvand. Fred: </author> <title> An architecture for a self-timed decoupled computer. </title> <booktitle> In Proceedings of the Second International Symposium on Advanced Research in Asynchronous Circuits and Systems, Aizu-Wakamatsu, </booktitle> <address> Japan, </address> <month> March </month> <year> 1996. </year>
Reference: [12] <author> Chandramohan A. Thekkath and Henry M. Levy. </author> <title> Hardware and software support for ef ficient exception handling. </title> <booktitle> In Sixth International Conference on Architectural Support for Programming Languages and Operating Systems , pages 110119. </booktitle> <publisher> ACM Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: With a precise exception model, each would require a separate exception, discarding any out-of-order instructions each time. Many functional language implementations use exceptions to signal special events such as garbage collection. This sort of fast exception handling may be quite useful <ref> [12] </ref>. 5.2 Circuit Complexity Because the functionally precise exception model does not reverse any state of the processor, the complexity is much less than otherwise might be expected.
Reference: [13] <author> Wm. A. Wulf. </author> <title> The WM computer architecture. </title> <journal> Computer Architecture News, </journal> <volume> 16(1), </volume> <month> March </month> <year> 1988. </year>
References-found: 13

