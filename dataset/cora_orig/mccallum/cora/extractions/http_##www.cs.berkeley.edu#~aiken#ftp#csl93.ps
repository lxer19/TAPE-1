URL: http://www.cs.berkeley.edu/~aiken/ftp/csl93.ps
Refering-URL: http://www.cs.berkeley.edu/~aiken/pubs.html
Root-URL: 
Email: faiken,vardi,wimmersg@almaden.ibm.com  kozen@cs.cornell.edu  
Phone: 2  
Title: The Complexity of Set Constraints  
Author: Alexander Aiken Dexter Kozen Moshe Vardi Ed Wimmers 
Address: 650 Harry Road, San Jose, CA 95120, USA  Ithaca, NY 14853, USA  
Affiliation: 1 IBM Almaden Research Center,  Computer Science Department, Cornell University,  
Abstract: Set constraints are relations between sets of terms. They have been used extensively in various applications in program analysis and type inference. We present several results on the computational complexity of solving systems of set constraints. The systems we study form a natural complexity hierarchy depending on the form of the constraint language.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aiken, D. Kozen, M. Vardi, and E. Wimmers. </author> <title> The complexity of set constraints. </title> <type> Technical Report 93-1352, </type> <institution> Computer Science Department, Cornell University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: An algorithm for determining the satisfiability of general systems of positive set constraints was first presented in [5]. In this paper, we extend the results of fl Proc. 1993 Conf. Computer Science Logic (CSL'93), Eur. Assoc. Comput. Sci. Logic, September 1993. A previous version of this paper appeared as <ref> [1] </ref>. [5] in two ways. In Section 5, we give a new characterization of the satisfiability problem that may be of independent interest.
Reference: 2. <author> A. Aiken, D. Kozen, and E. Wimmers. </author> <title> Decidability of systems of set constraints with negative constraints. </title> <type> Technical Report 93-1362, </type> <institution> Computer Science Department, Cornell University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In [3, 4], opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative set constraints E 6 F . The satisfiability of systems of positive and negative constraints has been shown to be decidable <ref> [2, 10] </ref>, and Stefansson [18] has recently shown that the problem is NEXPTIME -complete, thus is the same complexity as with positive constraints alone. Special cases of set constraints have also arisen naturally in the study of finite automata. <p> Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of <ref> [2, 10, 18] </ref> on negative constraints are presumably a step towards solving systems with projections. Acknowledgements Dexter Kozen was supported by the Danish Research Academy, the National Science Foundation, the John Simon Guggenheim Foundation, and the U.S.
Reference: 3. <author> A. Aiken and B. Murphy. </author> <title> Implementing regular tree expressions. </title> <booktitle> In Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 427-447, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed). <p> Our results show that such techniques are in fact necessary to achieve more efficient implementations. Most of the systems for program analysis cited above deal with only positive constraints. In <ref> [3, 4] </ref>, opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative set constraints E 6 F .
Reference: 4. <author> A. Aiken and B. Murphy. </author> <title> Static type inference in a dynamically typed language. </title> <booktitle> In Proc. 18th Symp. Principles of Programming Languages, </booktitle> <pages> pages 279-290. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed). <p> Our results show that such techniques are in fact necessary to achieve more efficient implementations. Most of the systems for program analysis cited above deal with only positive constraints. In <ref> [3, 4] </ref>, opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative set constraints E 6 F .
Reference: 5. <author> A. Aiken and E. Wimmers. </author> <title> Solving systems of set constraints. </title> <booktitle> In Proc. 7th Symp. Logic in Computer Science, </booktitle> <pages> pages 329-340. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: A set S of constraints is satisfiable if there is a valuation that satisfies all constraints in S simultaneously. An algorithm for determining the satisfiability of general systems of positive set constraints was first presented in <ref> [5] </ref>. In this paper, we extend the results of fl Proc. 1993 Conf. Computer Science Logic (CSL'93), Eur. Assoc. Comput. Sci. Logic, September 1993. A previous version of this paper appeared as [1]. [5] in two ways. <p> An algorithm for determining the satisfiability of general systems of positive set constraints was first presented in <ref> [5] </ref>. In this paper, we extend the results of fl Proc. 1993 Conf. Computer Science Logic (CSL'93), Eur. Assoc. Comput. Sci. Logic, September 1993. A previous version of this paper appeared as [1]. [5] in two ways. In Section 5, we give a new characterization of the satisfiability problem that may be of independent interest. <p> We show that deciding whether S is satisfiable is equivalent to deciding whether or not a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4). This characterization is simpler than the one in <ref> [5] </ref> and has the additional advantage for complexity analysis that the hypergraphs can be specified using short Boolean formulas. In Section 6, we exploit the hypergraph characterization of the satisfiability problem to obtain a family of complexity results for the satisfiability problem. <p> See [14] for more general results on solving negative constraints in arbitrary Boolean algebras. Finally, set constraints have been studied for their own sake and several algorithms for solving set constraints have been proposed <ref> [11, 5, 9] </ref>. Our results differ from these in that we are interested primarily in the complexity of the satisfiability problem for set constraints. 3 Set Expressions and Set Constraints Let be a finite ranked alphabet consisting of symbols f, each with an associated arity arity (f) 2 .
Reference: 6. <author> Leo Bachmair, Harald Ganzinger, and Uwe Waldmann. </author> <title> Set constraints are the monadic class. </title> <booktitle> In Proc. 8th Symp. Logic in Computer Science, </booktitle> <pages> pages 75-83. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: To the best of our knowledge, these are the first upper and lower bound results for set constraint problems other than the NEXPTIME -completeness result for the general problem, which has been obtained independently by <ref> [6] </ref>. <p> f 2 n , one can define a family of projection functions f 1 ; : : :; f n with semantics (f i (E)) = ft i j ft 1 : : : t n 2 (E)g Algorithms for solving special cases of set constraints with projections are known <ref> [17, 13, 11, 6] </ref>. Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of [2, 10, 18] on negative constraints are presumably a step towards solving systems with projections.
Reference: 7. <author> J. A. Brzozowski and E. Leiss. </author> <title> On equations for regular languages, finite automata, and sequential networks. </title> <journal> Theor. Comput. Sci., </journal> <volume> 10 </volume> <pages> 19-35, </pages> <year> 1980. </year>
Reference-contexts: Special cases of set constraints have also arisen naturally in the study of finite automata. An example is an algorithm for solving equations between regular 2 languages with free variables <ref> [7] </ref>. In [7], no complexity analysis is given. There is a simple linear-time reduction of regular expressions to systems of set constraints over unary and nullary symbols. Thus, our results show that deciding the satisfiability of equations between regular languages with free variables is in EXPTIME . <p> Special cases of set constraints have also arisen naturally in the study of finite automata. An example is an algorithm for solving equations between regular 2 languages with free variables <ref> [7] </ref>. In [7], no complexity analysis is given. There is a simple linear-time reduction of regular expressions to systems of set constraints over unary and nullary symbols. Thus, our results show that deciding the satisfiability of equations between regular languages with free variables is in EXPTIME .
Reference: 8. <author> A. Chandra, D. Kozen, and L. Stockmeyer. </author> <title> Alternation. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: EXPTIME Lower Bound The exponential time lower bound for two unary symbols is obtained by generalizing the lower bound construction for one unary symbol. Instead of a deterministic LBA, we encode an alternating LBA M on input w <ref> [8] </ref>.
Reference: 9. <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints using tree automata. </title> <journal> In Proc. Symp. Theor. Aspects of Comput. Sci., </journal> <volume> volume 665, </volume> <pages> pages 505-514. </pages> <note> Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993. </year>
Reference-contexts: See [14] for more general results on solving negative constraints in arbitrary Boolean algebras. Finally, set constraints have been studied for their own sake and several algorithms for solving set constraints have been proposed <ref> [11, 5, 9] </ref>. Our results differ from these in that we are interested primarily in the complexity of the satisfiability problem for set constraints. 3 Set Expressions and Set Constraints Let be a finite ranked alphabet consisting of symbols f, each with an associated arity arity (f) 2 .
Reference: 10. <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints with negated subset relationships. </title> <type> Technical Report LIFL IT 247, </type> <institution> Lille 1 University, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: In [3, 4], opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative set constraints E 6 F . The satisfiability of systems of positive and negative constraints has been shown to be decidable <ref> [2, 10] </ref>, and Stefansson [18] has recently shown that the problem is NEXPTIME -complete, thus is the same complexity as with positive constraints alone. Special cases of set constraints have also arisen naturally in the study of finite automata. <p> Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of <ref> [2, 10, 18] </ref> on negative constraints are presumably a step towards solving systems with projections. Acknowledgements Dexter Kozen was supported by the Danish Research Academy, the National Science Foundation, the John Simon Guggenheim Foundation, and the U.S.
Reference: 11. <author> N. Heintze and J. Jaffar. </author> <title> A decision procedure for a class of set constraints. </title> <booktitle> In Proc. 5th Symp. Logic in Computer Science, </booktitle> <pages> pages 42-51. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: See [14] for more general results on solving negative constraints in arbitrary Boolean algebras. Finally, set constraints have been studied for their own sake and several algorithms for solving set constraints have been proposed <ref> [11, 5, 9] </ref>. Our results differ from these in that we are interested primarily in the complexity of the satisfiability problem for set constraints. 3 Set Expressions and Set Constraints Let be a finite ranked alphabet consisting of symbols f, each with an associated arity arity (f) 2 . <p> f 2 n , one can define a family of projection functions f 1 ; : : :; f n with semantics (f i (E)) = ft i j ft 1 : : : t n 2 (E)g Algorithms for solving special cases of set constraints with projections are known <ref> [17, 13, 11, 6] </ref>. Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of [2, 10, 18] on negative constraints are presumably a step towards solving systems with projections.
Reference: 12. <author> N. Heintze and J. Jaffar. </author> <title> A finite presentation theorem for approximating logic programs. </title> <booktitle> In Proc. 17th Symp. Principles of Programming Languages, </booktitle> <pages> pages 197-209. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed).
Reference: 13. <author> N. D. Jones and S. S. Muchnick. </author> <title> Flow analysis and optimization of LISP-like struc tures. </title> <booktitle> In Proc. 6th Symp. Principles of Programming Languages, </booktitle> <pages> pages 244-256. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1979. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed). <p> f 2 n , one can define a family of projection functions f 1 ; : : :; f n with semantics (f i (E)) = ft i j ft 1 : : : t n 2 (E)g Algorithms for solving special cases of set constraints with projections are known <ref> [17, 13, 11, 6] </ref>. Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of [2, 10, 18] on negative constraints are presumably a step towards solving systems with projections.
Reference: 14. <author> K. Marriott and M. Odersky. </author> <title> Systems of negative boolean constraints. </title> <institution> Techni cal Report YALEU/DCS/RR-900, Computer Science Department, Yale University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus, our results show that deciding the satisfiability of equations between regular languages with free variables is in EXPTIME . Set constraints with only nullary symbols correspond to Boolean algebras over a finite set of atoms. See <ref> [14] </ref> for more general results on solving negative constraints in arbitrary Boolean algebras. Finally, set constraints have been studied for their own sake and several algorithms for solving set constraints have been proposed [11, 5, 9].
Reference: 15. <author> P. Mishra. </author> <title> Towards a theory of types in PROLOG. </title> <booktitle> In Proc. 1st Symp. Logic Programming, </booktitle> <pages> pages 289-298. </pages> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed).
Reference: 16. <author> P. Mishra and U. Reddy. </author> <title> Declaration-free type checking. </title> <booktitle> In Proc. 12th Symp. Principles of Programming Languages, </booktitle> <pages> pages 7-21. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed).
Reference: 17. <author> J. C. Reynolds. </author> <title> Automatic computation of data set definitions. </title> <booktitle> In Information Processing 68, </booktitle> <pages> pages 456-461. </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed). <p> f 2 n , one can define a family of projection functions f 1 ; : : :; f n with semantics (f i (E)) = ft i j ft 1 : : : t n 2 (E)g Algorithms for solving special cases of set constraints with projections are known <ref> [17, 13, 11, 6] </ref>. Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of [2, 10, 18] on negative constraints are presumably a step towards solving systems with projections.
Reference: 18. <author> Kjartan Stefansson. </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete. </title> <type> Technical Report TR93-1380, </type> <institution> Cornell University, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: In [3, 4], opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative set constraints E 6 F . The satisfiability of systems of positive and negative constraints has been shown to be decidable [2, 10], and Stefansson <ref> [18] </ref> has recently shown that the problem is NEXPTIME -complete, thus is the same complexity as with positive constraints alone. Special cases of set constraints have also arisen naturally in the study of finite automata. <p> Projection functions subsume negative constraints because the constraint system S [ fb f 1 (fby)g is satisfiable only if S is satisfiable with y 6= 0. The results of <ref> [2, 10, 18] </ref> on negative constraints are presumably a step towards solving systems with projections. Acknowledgements Dexter Kozen was supported by the Danish Research Academy, the National Science Foundation, the John Simon Guggenheim Foundation, and the U.S.
Reference: 19. <author> J. Young and P. O'Keefe. </author> <title> Experience with a type evaluator. </title> <editor> In D. Bjtrner, A. P. Ershov, and N. D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 573-581. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 18 </title>
Reference-contexts: 0 NP-complete 1+ 1 0 PSPACE -complete 1+ 2+ 0 EXPTIME -complete 1+ 0+ 1+ NEXPTIME -complete 2 Applications and Related Work The greatest interest in set constraints stems from the area of program analysis, where set constraints have been used for a number of years in many different settings <ref> [17, 13, 15, 16, 19, 12, 3, 4] </ref>. In these applications, set constraints are generated from the program text and then solved to obtain useful information about the program (e.g., whether it is well-typed).
References-found: 19

