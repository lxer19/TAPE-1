URL: http://www.cs.umd.edu/users/cml/work/pubs/1992-trw.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Email: (cml@cs.umd.edu) (klingler@trwacs.fp.trw.com)  
Title: A Case Study in Process Representation Using MVP-L  
Author: Carol Diane Klingler Christopher M. Lott Melissa Neviaser H. Dieter Rombach 
Date: 92), June 15-18 1992.  
Note: Appeared in Proceedings of the 7 th Annual Conference on Computer Assurance (COMPASS  
Address: Park Drive College Park, Maryland 20742 Fairfax, Virginia 22033  
Affiliation: Ann Marmor-Squires Department of Computer Science TRW Systems Division University of Maryland 1 Federal Systems  
Abstract: Explicit, formal representations of software processes are needed to help understand software development and maintenance processes, to analyze these processes prior to execution, to guide the execution of these processes, and finally to improve software processes in an evolutionary fashion. The creation of formal process representations includes activities such as requirements analysis, specification, design, coding, integration, and testing. We conducted a case study within TRW which involved the creation of formal process specifications and designs using MVP-L, an existing process notation. This paper describes the study, the lessons learned about process representation in general, and the lessons learned about the language MVP-L in detail. Keywords: software process modeling, process representation, process specification, process design, language assessment, case study. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Takuya Katayama, ed. </editor> <booktitle> Proceedings of the 6th International Software Process Workshop, </booktitle> <address> Hakodate, Hokkaido, Japan, 28-31 October 1990, </address> <publisher> IEEE Press, </publisher> <year> 1991. </year>
Reference-contexts: An excellent paper on representing software processes is [6]. Information on using process representation to manage change in software development can be found in [12]. Past Proceedings of International Software Process Workshops <ref> [1, 7, 15] </ref> explore current issues in process representation. Conventional life cycle. A conventional life cycle of requirements analysis, specification, design, coding, integration, and testing seems to be appropriate for process representation.
Reference: [2] <author> Watts S. Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: processes or fl This work was supported by DARPA STARS Contract F19628-88-D-0031 and by NSF Grant CCR-9057874. informal representations can easily hide in stable environments, but soon become apparent when the organization is subjected to significant changes such as personnel turnover, shifts in the application domain, or shifts in technology <ref> [2] </ref>. Explicit representations of processes assist in gaining intellectual control over software projects by formalizing currently existing implicit processes or informal representations.
Reference: [3] <author> Mark I. Kellner and H. Dieter Rombach. </author> <title> Comparisons of Software Process Descriptions." </title> <booktitle> Proceedings of the Sixth International Software Process Workshop, </booktitle> <address> Hako-date, Japan, October, </address> <publisher> 1990; IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: This guidance system would provide valuable feedback to process participants about conformance or deviation from the prescribed process, including unforeseen interactions of processes, schedule slippage, and other problems. Why was MVP-L chosen? Based on the process notation characterization of <ref> [3] </ref>, MVP-L appeared to be a viable candidate for the process specification and design phase of process representation. First, it supports refinement and abstraction of processes.
Reference: [4] <author> Christopher M. Lott and H. Dieter Rombach. </author> <title> An MVP-L1 Solution for the Software Process Modeling Problem." </title> <booktitle> Proceedings of the Sixth International Software Process Workshop, </booktitle> <address> Hakodate, Japan, </address> <publisher> October 1990; IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Unfortunately, documentation is often lacking when using research prototype languages. We used examples in the MVP-L paper from the 3 Categorization Criteria Submitted Asset Identification Form Evaluation Forms Analyze Asset &% 1 P P P P P Pq Sixth International Software Process Workshop <ref> [4] </ref> to guide our efforts. As mentioned above, an MVP-L expert was added to the team to instruct the primary software engineers and to assist with the work. By phase two, the software engineer had gained experience in process representation and required less assistance from the expert. Tool support.
Reference: [5] <author> David A. Marca and Clement L. McGowan. </author> <title> SADT : Structured Analysis and Design Techniques, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Section 2 gives the experimental context necessary to interpret the lessons learned given in Sections 3 and 4. The scope of the overall study at TRW was broad: we also investigated a notation for requirements analysis, specification, and design, namely SADT <ref> [5] </ref>, and a notation for process coding, namely APPL/A [11]. Those efforts are outside the scope of this paper. 2 The Case Study The goals of our overall study were aimed at understanding the various steps of representing processes and evaluating notations for each process-representation step. <p> We had to check the representations for semantic consistency by hand. Process representation approach. A prototyping approach was used in both phases of the study. We did a small amount of analysis work, using hierarchy charts and SADT diagrams <ref> [5] </ref>, to gain an initial understanding of the processes. Then we moved into representing the processes in MVP-L, using it as a process specification and design language.
Reference: [6] <author> Leon Osterweil. </author> <title> Software Processes are Software Too." </title> <booktitle> Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <pages> pp. 2-13, </pages> <address> Monterey, CA, </address> <month> March </month> <year> 1987. </year>
Reference-contexts: Explicit representations of processes assist in gaining intellectual control over software projects by formalizing currently existing implicit processes or informal representations. In <ref> [6] </ref>, Osterweil suggests that the development of process representations should follow a paradigm similar to development of a conventional software product, and should include activities such as analysis, specification, design, coding, integration, and testing. <p> The only tools that were available for our use were a syntax-directed editor and a language rec-ognizer. 3.4 Recommended Approach to Process Re presentation Based on our case study, we augment Osterweil's process programming life cycle <ref> [6] </ref> for use within the STARS framework. Our additions to the life cycle are discussed below. Process representation training is necessary. <p> Process representation training is necessary. Since process representation is a new area of software programming, it is necessary to learn the concepts by reading papers and consulting with experts before attempting to represent a process. An excellent paper on representing software processes is <ref> [6] </ref>. Information on using process representation to manage change in software development can be found in [12]. Past Proceedings of International Software Process Workshops [1, 7, 15] explore current issues in process representation. Conventional life cycle.
Reference: [7] <editor> Dewane E. Perry, ed. </editor> <booktitle> Proceedings of the 5th International Software Process Workshop, </booktitle> <address> Kennebunkport, Maine, USA, 10-13 October 1989, </address> <publisher> IEEE Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1990. </year>
Reference-contexts: An excellent paper on representing software processes is [6]. Information on using process representation to manage change in software development can be found in [12]. Past Proceedings of International Software Process Workshops <ref> [1, 7, 15] </ref> explore current issues in process representation. Conventional life cycle. A conventional life cycle of requirements analysis, specification, design, coding, integration, and testing seems to be appropriate for process representation.
Reference: [8] <author> Joanne C. Piper and Wanda L. Barner. </author> <title> The RAPID Center Reusable Software Components RSCs Certification Process." </title> <booktitle> Ninth Annual National Conference on 9 Ada Technology, </booktitle> <pages> pp. 32-38, </pages> <address> Washington, DC, </address> <month> March, </month> <year> 1991. </year>
Reference-contexts: The case study described here proceeded in two phases. In the first phase, we took as input an informal description of a reuse-oriented certification of assets process derived from <ref> [8] </ref>. In the certification of assets process, candidate assets for reuse are identified, evaluated, prepared in accordance with guidelines, and inserted into a reuse library. We created a formal specification and design of this process from the informal description using the process language MVP-L [9]. <p> Lessons learned about the language are presented in Section 4. 2.2 The Example Reuse Processes In phase one of the case study, we derived our certification of assets process from the RAPID reuse library approach introduced in <ref> [8] </ref>. The work of certifying reusable assets includes the tasks of evaluating whether an asset is suitable for inclusion into the library, preparing the asset for inclusion into the library, and loading the asset into the library.
Reference: [9] <author> H. Dieter Rombach. MVP-L: </author> <title> A Language for Process Modeling In-the-Large. </title> <institution> University of Maryland Institute for Advanced Computer Studies Technical Report UMIACS-TR-91-96, CS-TR-2709, Department of Computer Science, University of Maryland, College Park, MD, 20742. </institution>
Reference-contexts: In the certification of assets process, candidate assets for reuse are identified, evaluated, prepared in accordance with guidelines, and inserted into a reuse library. We created a formal specification and design of this process from the informal description using the process language MVP-L <ref> [9] </ref>. The certification of assets process was represented in considerable detail to exercise the capabilities of the language thoroughly and to make evaluation of the language feasible. The second phase of the case study involved creating a representation of a larger reuse process. <p> When this process is finished, the evaluation forms are expected to be complete. The personnel responsible for execution of this work are certification engineers, a senior engineer, and a quality assurance engineer. 2.3 The MVP-L Language The Multi-View Process Modeling Language (MVP-L) enables the modular representation of software processes <ref> [9] </ref>. As a specification and design language, it focuses on process aspects in-the-large. The language provides various concepts (e.g., refine/aggregate, specialize/generalize, views) for building large process representations from elementary ones. Process state is defined in terms of attributes.
Reference: [10] <author> STARS. </author> <title> STARS Reuse Concept of Operations, Volume I, Version 0.5, </title> <type> Draft. </type> <institution> STARS CDRL 03725, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: These goals are consistent with the STARS vision of a process-driven, reuse-based, technology-supported paradigm for the development of software-intensive systems <ref> [10] </ref>. 2.1 Goals The goals addressed in this paper entail learning about process representation and evaluating the MVP-L process language. Goal 1: Learn About Process Representation: Process representation is a new and evolving technology. <p> In 2 phase two, we generalized the example to a reuse process including all activities of reuse planning and implementation, described in <ref> [10] </ref>. This process includes all of the high-level activities necessary for supporting systematic reuse of assets in the context of software-intensive system development and maintenance. <p> The language met our expectations of a process design language. Our future plans are to continue to use the language in our process representation activities. In the next stage of our work for the STARS Program, we will represent the reuse process described in <ref> [10] </ref>, at a more detailed level.
Reference: [11] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-Process Programming. </title> <type> Ph.D. thesis, </type> <institution> University of Colorado, Boulder, Colorado, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: The scope of the overall study at TRW was broad: we also investigated a notation for requirements analysis, specification, and design, namely SADT [5], and a notation for process coding, namely APPL/A <ref> [11] </ref>. Those efforts are outside the scope of this paper. 2 The Case Study The goals of our overall study were aimed at understanding the various steps of representing processes and evaluating notations for each process-representation step. <p> We believe that an MVP-L process design could be used as a starting point for process coding in another process notation, such as APPL/A <ref> [11] </ref>. MVP-L is a research prototype. Few tools are currently available because the language is young. The language would benefit from tools such as translators, library managers, semantic checkers, compilers, static and dynamic analysis tools, and process simulators.
Reference: [12] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments." </title> <booktitle> Proceedings of the Fourth ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pp. 206-217, </pages> <address> Irvine, CA, </address> <year> 1990. </year>
Reference-contexts: An excellent paper on representing software processes is [6]. Information on using process representation to manage change in software development can be found in <ref> [12] </ref>. Past Proceedings of International Software Process Workshops [1, 7, 15] explore current issues in process representation. Conventional life cycle. A conventional life cycle of requirements analysis, specification, design, coding, integration, and testing seems to be appropriate for process representation.
Reference: [13] <author> TRW Systems Division. </author> <title> Process Programming Languages Experimentation Final Report, </title> <booktitle> STARS Contract Deliverable, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: The second phase of the case study involved creating a representation of a larger reuse process. The larger process included activities of reuse planning, asset creation, asset management, and asset utilization. Extensive documentation of the case study was prepared by TRW for the STARS Program <ref> [13, 14] </ref>. This paper outlines both phases of the study and presents lessons learned about process representation in general and the language MVP-L in detail. Section 2 gives the experimental context necessary to interpret the lessons learned given in Sections 3 and 4. <p> Finally, these reuse processes had not, to our knowledge, been represented before, which allowed us to avoid any bias that a previously existing solution would have introduced. Demonstration Example. Space constraints prevent showing the entire reuse processes in <ref> [13, 14] </ref> here. A single process representation from [13] is presented in data flow diagram notation in Figure 1. This is a representation of an individual process that analyzes a candidate asset for reuse. The analyze asset work entails using categorization criteria to complete evaluation forms for the asset. <p> Finally, these reuse processes had not, to our knowledge, been represented before, which allowed us to avoid any bias that a previously existing solution would have introduced. Demonstration Example. Space constraints prevent showing the entire reuse processes in [13, 14] here. A single process representation from <ref> [13] </ref> is presented in data flow diagram notation in Figure 1. This is a representation of an individual process that analyzes a candidate asset for reuse. The analyze asset work entails using categorization criteria to complete evaluation forms for the asset.
Reference: [14] <author> TRW Systems Division. </author> <title> Reusable Asset Management Process Model Informal Technical Report, </title> <booktitle> STARS Contract Deliverable, </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: The second phase of the case study involved creating a representation of a larger reuse process. The larger process included activities of reuse planning, asset creation, asset management, and asset utilization. Extensive documentation of the case study was prepared by TRW for the STARS Program <ref> [13, 14] </ref>. This paper outlines both phases of the study and presents lessons learned about process representation in general and the language MVP-L in detail. Section 2 gives the experimental context necessary to interpret the lessons learned given in Sections 3 and 4. <p> Finally, these reuse processes had not, to our knowledge, been represented before, which allowed us to avoid any bias that a previously existing solution would have introduced. Demonstration Example. Space constraints prevent showing the entire reuse processes in <ref> [13, 14] </ref> here. A single process representation from [13] is presented in data flow diagram notation in Figure 1. This is a representation of an individual process that analyzes a candidate asset for reuse. The analyze asset work entails using categorization criteria to complete evaluation forms for the asset.
Reference: [15] <editor> Colin Tully, ed. </editor> <booktitle> Proceedings of the 4th International Software Process Workshop, </booktitle> <address> Moretonhampstead, De-von, UK, 11-13 May 1988, </address> <publisher> ACM Press, </publisher> <address> Baltimore, MD, </address> <note> 1989; published as Software Enginering Notes, </note> <editor> v. </editor> <volume> 14, </volume> <editor> n. </editor> <volume> 4, </volume> <month> June </month> <year> 1989. </year> <month> 10 </month>
Reference-contexts: An excellent paper on representing software processes is [6]. Information on using process representation to manage change in software development can be found in [12]. Past Proceedings of International Software Process Workshops <ref> [1, 7, 15] </ref> explore current issues in process representation. Conventional life cycle. A conventional life cycle of requirements analysis, specification, design, coding, integration, and testing seems to be appropriate for process representation.
References-found: 15

