URL: http://www.cs.ucl.ac.uk/teaching/B011a/teach.ps
Refering-URL: http://www.cs.ucl.ac.uk/teaching/B011a/index.html
Root-URL: http://www.cs.ucl.ac.uk
Email: Email: clack@cs.uc.ac.uk  Email: colin@wmin.ac.uk  
Phone: 2  
Title: The Dys-Functional Student  
Author: Chris Clack and Colin Myers 
Address: College London, London WC1E 6BT  London W1M 8JS  
Affiliation: 1 Dept. of Computer Science, University  School of Computer Science, University of Westminster,  
Abstract: Functional languages liberate students from complex syntax, complex semantics and complex memory allocation; allowing them to concentrate on problem-solving. However, functional programming is not a universal panacea. Students still have problems with language features, program concepts and the legacy of the imperative paradigm. This paper aims to assist the lecturer asked to teach a functional language for the first time. We present typical student mistakes, attempt to explain why these mistakes arise, and propose possible remedies. 
Abstract-found: 1
Intro-found: 1
Reference: [App94] <author> A. Appel. </author> <title> A critique of Standard ML. </title> <journal> JFP, </journal> <volume> 3 </volume> <pages> 391-429, </pages> <year> 1993. </year>
Reference-contexts: We do not replicate this work, nor the valuable observations of <ref> [App94, Joo93, Mol93] </ref>.
Reference: [Cla94] <author> C. Clack, C. Myers & E. Poon. </author> <title> Programming with Miranda. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: The proximity of UCL and Westminster has resulted in a close collaboration. In particular, we have jointly produced two functional programming text books <ref> [Mye93, Cla94] </ref>, together with on-line support in the form of coursework questions (solutions emailed on request), past exam papers, etc. These can be accessed via the World Wide Web at: http://www.cs.ucl.ac.uk/staff/C.Clack/teaching. Our combined experience has proven extremely positive. <p> Each section contains recommendations for the lecturer to help overcome student errors and improve programming style. 3 Miranda is a trademark of Research Software Ltd. 1.1 Scope Space does not permit us to cover all classes and kinds of student mistakes. The approach taken by [Mye93] and <ref> [Cla94] </ref> is to teach programming practice by means of both correct code (to show how to do it) and incorrect code (how not to do it | examples often taken from actual student errors). We do not replicate this work, nor the valuable observations of [App94, Joo93, Mol93]. <p> There is also a need for a tool to think about general cases; for this we recommend the use of structural induction, as described in <ref> [Cla94] </ref>. At some point, program efficiency may also be mentioned. Beginners are told to put more general patterns last (because they often use overlapping patterns); once students have gained some facility with non-overlapping patterns, they may be invited to think more carefully about operational semantics and efficiency. <p> Notice, however, that auxr did not require fun which was already in scope, and that mentioning alist was superfluous. Recommendations. Firstly, HO abstraction should be illustrated by means of textual substitutions <ref> [Cla94] </ref>.
Reference: [Joo93] <author> S. Joosten, K. van der Berg & G. ven der Hoeven. </author> <title> Teaching functional programming to first-year students. </title> <journal> JFP, </journal> <volume> 3 </volume> <pages> 49-65, </pages> <year> 1993. </year>
Reference-contexts: We do not replicate this work, nor the valuable observations of <ref> [App94, Joo93, Mol93] </ref>. <p> Indeed, it is a good specification exercise to ask students to provide function type declarations without the function code. Type error messages. Both [Lam93] and <ref> [Joo93] </ref> comment that Miranda's type error reporting is not particularly helpful to the student. [Joo93] observes that it is mainly used to highlight the error's textual position but not the nature of the error. This is also our experience. <p> Indeed, it is a good specification exercise to ask students to provide function type declarations without the function code. Type error messages. Both [Lam93] and <ref> [Joo93] </ref> comment that Miranda's type error reporting is not particularly helpful to the student. [Joo93] observes that it is mainly used to highlight the error's textual position but not the nature of the error. This is also our experience.
Reference: [Lam93] <author> T. Lambert, P.Lindsay & K. Robinson. </author> <title> Using Miranda as a first programming language. </title> <journal> JFP, </journal> <volume> 3 </volume> <pages> 5-34, </pages> <year> 1993. </year>
Reference-contexts: For example, UCL first year undergraduates (many of whom have never programmed before) undertake a large Miranda 3 project at the end of the first term, including substantial programming tasks such as chess end-games, the travelling salesman problem and cross-compilation (this benefit has also been reported by, for example, <ref> [Lam93] </ref>). Furthermore, many advanced programmers find the experience of using a functional language improves their ability to solve problems in imperative languages. Nonetheless, students find programming difficult. <p> Indeed, it is a good specification exercise to ask students to provide function type declarations without the function code. Type error messages. Both <ref> [Lam93] </ref> and [Joo93] comment that Miranda's type error reporting is not particularly helpful to the student. [Joo93] observes that it is mainly used to highlight the error's textual position but not the nature of the error. This is also our experience. <p> Here, there is the added complication that a function composition of sections would be required ((+1).(^3)). Manipulating HOFs. As observed by <ref> [Lam93] </ref>, students do not take naturally to using general recursive functions such as foldr. We agree, and notice that students are only comfortable if foldr's functional parameter is an operator such as + or ++, which is associative and possesses an obvious identity.
Reference: [Mol93] <author> P. Molyneux. </author> <title> Functional programming for business students. </title> <journal> JFP, </journal> <volume> 3 </volume> <pages> 35-48, </pages> <year> 1993. </year>
Reference-contexts: We do not replicate this work, nor the valuable observations of <ref> [App94, Joo93, Mol93] </ref>.
Reference: [Mor82] <author> J. Morris. </author> <title> Real Programming in Functional Languages, </title> <editor> in J. Darlington P. Henderson & D. </editor> <title> Turner Functional Programming and its Applications, </title> <publisher> CUP, </publisher> <year> 1982. </year>
Reference-contexts: Indeed, experienced programmers will often be hostile since they do not believe that functional languages are used "in the real world". This problem is exemplified by <ref> [Mor82] </ref>, who asks whether functional programs are like haikus, in that they can teach through their innate elegance, even though in practice, they are as useless as a formal poem; or more like karate in that they have both an innate elegance and are useful in a fight.
Reference: [Mye93] <author> C. Myers, C. Clack & E. Poon. </author> <title> Programming with Standard ML. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: The proximity of UCL and Westminster has resulted in a close collaboration. In particular, we have jointly produced two functional programming text books <ref> [Mye93, Cla94] </ref>, together with on-line support in the form of coursework questions (solutions emailed on request), past exam papers, etc. These can be accessed via the World Wide Web at: http://www.cs.ucl.ac.uk/staff/C.Clack/teaching. Our combined experience has proven extremely positive. <p> Each section contains recommendations for the lecturer to help overcome student errors and improve programming style. 3 Miranda is a trademark of Research Software Ltd. 1.1 Scope Space does not permit us to cover all classes and kinds of student mistakes. The approach taken by <ref> [Mye93] </ref> and [Cla94] is to teach programming practice by means of both correct code (to show how to do it) and incorrect code (how not to do it | examples often taken from actual student errors). We do not replicate this work, nor the valuable observations of [App94, Joo93, Mol93].
References-found: 7

