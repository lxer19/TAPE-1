URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-52.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Title: by  
Author: Michael L. Fredman 
Address: New Brunswick, NJ 08903  
Affiliation: Dept. of Computer Science Rutgers University  
Note: Pairing Heaps are Sub-optimal  DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 97-52 September 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. L. Fredman, R. Sedgewick, D. D. Sleator, and R. E. Tarjan, </author> <title> The pairing heap: a new form of self-adjusting heap, </title> <journal> Algorithmica 1,1 (1986), </journal> <pages> pp. 111-129. </pages>
Reference-contexts: 1 Introduction Pairing heaps were introduced <ref> [1] </ref> as a self-adjusting alternative to Fibonacci heaps [2]. They are easy to code and provably enjoy log n amortized costs for the standard heap operations. <p> They are easy to code and provably enjoy log n amortized costs for the standard heap operations. Although it had not been verified that pairing heaps perform the decrease key operation in constant amortized time (the raison d'etre of Fibonacci heaps), this has been conjectured <ref> [1] </ref> and extensive experimental evidence [3, 5] supports this conjecture. These same experimental studies suggest that pairing heaps are superior to Fibonacci heaps in practice. <p> Several variants of this data structure have been suggested <ref> [1, 5] </ref>. The significant and interesting feature of pairing heaps, as seen from our description, is that the selection of operands for the various node pairings does not take into consideration - 2 - structural aspects of the respective trees (e.g. tree size), unlike the manipulations of Fi-bonacci heaps. <p> We proceed to define the random variable X over the O-sequences of length m. Let C = C (n) be a constant depending on n such that C 1. X is constructed by independently choosing for each round a random sequence consisting of L distinct integers in <ref> [1; C L] </ref>. Each sequence is chosen with uniform probability from among the set of possible sequences.
Reference: [2] <author> M. L. Fredman and R. E. Tarjan, </author> <title> Fibonacci heaps and their uses in improved network optimization problems JACM 34,3 (1987), </title> <journal> pp. </journal> <pages> 596-615. </pages>
Reference-contexts: 1 Introduction Pairing heaps were introduced [1] as a self-adjusting alternative to Fibonacci heaps <ref> [2] </ref>. They are easy to code and provably enjoy log n amortized costs for the standard heap operations.
Reference: [3] <author> A. M. Liao, </author> <title> Three priority queue applications revisited , Algorithmica 7,4 (1992), </title> <journal> pp. </journal> <pages> 415-427. </pages>
Reference-contexts: Although it had not been verified that pairing heaps perform the decrease key operation in constant amortized time (the raison d'etre of Fibonacci heaps), this has been conjectured [1] and extensive experimental evidence <ref> [3, 5] </ref> supports this conjecture. These same experimental studies suggest that pairing heaps are superior to Fibonacci heaps in practice.
Reference: [4] <author> R. Sedgewick, </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: However, as demonstrated in this paper, pairing heaps do not accommodate decrease key operations in constant amortized time. The conceptual simplicity of pairing heaps justify their occasional inclusion in the undergraduate algorithms curriculum <ref> [4, 6] </ref>. Although simple in terms of their design, their behavior may ultimately prove to be complex. 2 Pairing Heaps We begin with a brief description of the pairing heap data structure.
Reference: [5] <author> J. T. Stasko and J. S. Vitter, </author> <title> Pairing heaps: experiments and analysis, </title> <journal> CACM 30,3 (1987), </journal> <pages> pp. 234-249. </pages>
Reference-contexts: Although it had not been verified that pairing heaps perform the decrease key operation in constant amortized time (the raison d'etre of Fibonacci heaps), this has been conjectured [1] and extensive experimental evidence <ref> [3, 5] </ref> supports this conjecture. These same experimental studies suggest that pairing heaps are superior to Fibonacci heaps in practice. <p> Several variants of this data structure have been suggested <ref> [1, 5] </ref>. The significant and interesting feature of pairing heaps, as seen from our description, is that the selection of operands for the various node pairings does not take into consideration - 2 - structural aspects of the respective trees (e.g. tree size), unlike the manipulations of Fi-bonacci heaps.
Reference: [6] <author> M. A. Weiss, </author> <title> Data Structures and Algorithm Analysis in C, </title> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: However, as demonstrated in this paper, pairing heaps do not accommodate decrease key operations in constant amortized time. The conceptual simplicity of pairing heaps justify their occasional inclusion in the undergraduate algorithms curriculum <ref> [4, 6] </ref>. Although simple in terms of their design, their behavior may ultimately prove to be complex. 2 Pairing Heaps We begin with a brief description of the pairing heap data structure.
References-found: 6

