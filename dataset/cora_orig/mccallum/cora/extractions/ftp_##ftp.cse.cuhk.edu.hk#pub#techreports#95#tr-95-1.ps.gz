URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/95/tr-95-1.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Applying Constraint Satisfaction Technique in University Timetable Scheduling  
Author: Chi-mei Yeung Suet-mui Leung Ho-fung Leung 
Address: Shatin, New Territories Hong Kong  
Affiliation: Department of Computer Science The Chinese University of Hong Kong  
Abstract: Planning and scheduling are often NP-complete problems. There have been different approaches to tackle these problems. With the emergence of constraint logic programming, the constraint satisfaction approach has started to attract attention due to its effectness in solving these real-life problems. In this paper, we report our experience of applying constraint logic programming to fully automate the time table scheduling process in our faculty, which has been a tedious task for the administration. The system consists of a core for scheduling as well as an X-window user interface. Implemented in CHIP, the system consists of 1500 lines of codes, 80% of which are an X-window user interface. The system is able to produce a time table for the whole faculty in just a few seconds. Our experience shows that applying constraint logic programming is a practical viable means for time table scheduling in a university. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving the Car Sequencing Problem in Constraint Logic Programming. </title> <editor> In Y. Kodratoff, editor, </editor> <booktitle> ECAI 88 : proceedings of the 8th European Conference on Artificial Intelligence, </booktitle> <pages> pages 290-295, </pages> <address> Munich, Germany, August 1988. </address> <publisher> Pitman Publishing. </publisher>
Reference-contexts: With the emergence of constraint logic programming [4], especially the introduction of finite domain constraints into logic programming [8], the constraint satisfaction approach has started to attract more and more attention due to its effectiveness in solving some real-life planning and scheduling problems <ref> [1, 2, 6] </ref>. In the paradigm of constraint logic programming, a constraint satisfaction problem can be written in the form of Horn clause logic programs in which the clause bodies may contain constraints.
Reference: [2] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving Large Combinatorial Problems in Logic Programming. </title> <journal> J. Logic Programming, </journal> <volume> 8 </volume> <pages> 75-93, </pages> <year> 1990. </year>
Reference-contexts: With the emergence of constraint logic programming [4], especially the introduction of finite domain constraints into logic programming [8], the constraint satisfaction approach has started to attract more and more attention due to its effectiveness in solving some real-life planning and scheduling problems <ref> [1, 2, 6] </ref>. In the paradigm of constraint logic programming, a constraint satisfaction problem can be written in the form of Horn clause logic programs in which the clause bodies may contain constraints.
Reference: [3] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The Constraint Logic Programming Language CHIP. </title> <editor> In ICOT, editor, </editor> <booktitle> Proceedings of the International Conference on Fifth Generation C omputer Systems 1988, </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, 1988. </address> <publisher> ICOT, ICOT. </publisher>
Reference-contexts: If any conflict arises, rearrangement of sessions of courses will be conducted until the designated number of periods and appropriate places are allocated to all the courses. We have implemented our system on a SUN SPARCstation 10/30 in CHIP 1 <ref> [3, 7] </ref>, a commercially available constraint logic programming system that is best known for its capacity in finite domain constraint solving. The scheduling system includes a constraint satisfaction system that searches for a feasible solution based on the given constraints as well as a user-friendly X-window based user interface.
Reference: [4] <author> J. Jaffar and J.-L. Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> In Conference record of the 14th Annual ACM Symposium on Principles of Programming Language, </booktitle> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Planning and scheduling are often NP-complete problems. There have been different approaches to tackle these problems, such as the algorithmic approach and operational research approach. With the emergence of constraint logic programming <ref> [4] </ref>, especially the introduction of finite domain constraints into logic programming [8], the constraint satisfaction approach has started to attract more and more attention due to its effectiveness in solving some real-life planning and scheduling problems [1, 2, 6].
Reference: [5] <author> S. F. Koo and C. L. Lim. </author> <title> Computer-aided time-tabling system. </title> <type> Project Report 94/20, </type> <institution> Department of Computer Science, The Chinese University of Hong Kong, Hong Kong, </institution> <year> 1994. </year>
Reference-contexts: Number of Number of Number of CPU Time Depts. Group of courses Courses (seconds) 1 5 26 0.840 3 11 47 2.180 5 18 72 3.840 The whole system is composed of 1500 lines of CHIP codes. About 80% of them are used for user interface. The system CATTS <ref> [5] </ref> for a similar purpose, which is implemented in C with algorithmic approach, needs 8000 lines of coding, half of which are for interface. Execution of our system is 5 times faster than CATTS. 7 Conclusion The timetable scheduling problem is a NP-complete combinatorial problem.
Reference: [6] <author> M. Perret. </author> <title> Using Constraint Logic Programming Techniques in Container Port Planning. </title> <journal> ICL Technical Journal, </journal> <pages> pages 537-545, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: With the emergence of constraint logic programming [4], especially the introduction of finite domain constraints into logic programming [8], the constraint satisfaction approach has started to attract more and more attention due to its effectiveness in solving some real-life planning and scheduling problems <ref> [1, 2, 6] </ref>. In the paradigm of constraint logic programming, a constraint satisfaction problem can be written in the form of Horn clause logic programs in which the clause bodies may contain constraints.
Reference: [7] <author> The COSYTEC team. </author> <title> CHIP Reference Manual. </title> <address> COSYTEC SA, Orsay Cedex, France, </address> <year> 1993. </year>
Reference-contexts: If any conflict arises, rearrangement of sessions of courses will be conducted until the designated number of periods and appropriate places are allocated to all the courses. We have implemented our system on a SUN SPARCstation 10/30 in CHIP 1 <ref> [3, 7] </ref>, a commercially available constraint logic programming system that is best known for its capacity in finite domain constraint solving. The scheduling system includes a constraint satisfaction system that searches for a feasible solution based on the given constraints as well as a user-friendly X-window based user interface. <p> Our X-window user interface is implemented with the XGIP X11 graphics system in CHIP. 1 We are using CHIP System Version 4.0.1. 3 Finite Domain Constraint Solving in CHIP CHIP <ref> [7] </ref> is a commercially available constraint logic programming language that supports various domains of constraints. A CHIP program resembles a Prolog program, except that constraints are allowed in the clause bodies and programmers are allowed to specify the type of unification used in goal-head unifications.
Reference: [8] <author> P. Van Hentenryck. </author> <title> Constraint satisfaction in logic programming. </title> <publisher> MIT Press, </publisher> <address> Cambridge, United States, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Planning and scheduling are often NP-complete problems. There have been different approaches to tackle these problems, such as the algorithmic approach and operational research approach. With the emergence of constraint logic programming [4], especially the introduction of finite domain constraints into logic programming <ref> [8] </ref>, the constraint satisfaction approach has started to attract more and more attention due to its effectiveness in solving some real-life planning and scheduling problems [1, 2, 6]. <p> A CHIP program resembles a Prolog program, except that constraints are allowed in the clause bodies and programmers are allowed to specify the type of unification used in goal-head unifications. A typical CHIP program for constraint satisfaction problems in finite domain <ref> [8] </ref> is in the following form top (: : :) : constraint 1 (: : :); constraint 2 (: : :); : : : ; constraint n (: : :); labeling ([X 1 ; X 2 ; : : :]): where constraint i (: : :) are CHIP procedures which specify <p> A domain variable (d-variable) X is declared with the goal X :: D where D is the initial domain of X. CHIP supports several types of constraints in finite domain, such as equations (including d-unifications <ref> [8] </ref>), inequalities and disequalities. Constraints are (partially) solved using forward-checking inference rule (FCIR) and partial looking-ahead inference rule (PLAIR) after they are incrementally generated. <p> It should be noted that the search space is reduced in an a prior manner <ref> [8] </ref> during searching in the labelling process: after each search step, the search space is reduced by actively using the unsolved constraints in the system before the next search step.
References-found: 8

