URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/tygar/www/papers/decaf/main.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/tygar/www/publications.html
Root-URL: http://www.cs.cmu.edu
Email: tygar@cs.cmu.edu alma@cs.cmu.edu  
Title: WWW Electronic Commerce and Java Trojan Horses  
Author: J. D. Tygar Alma Whitten 
Address: Pittsburgh, PA 15213  
Affiliation: Carnegie Mellon University  
Abstract: This paper outlines a simple way to accomplish this using Java or similar remote execution facilities. We implemented a simple version of this attack. We give a general method, window personalization, that can thwart or prevent this attack. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Adl-Tabatabai, G. Langdale, S. Lucco, and R. Wahbe. </author> <title> Efficient and language-independent mobile programs. In Proceedings of the 1996 ACM SIGPLAN Symposium on Programming 6 Even smartcards can not completely solve these problems; for a discussion of the difficulties with the smartcard approach to solving the POS integrity problem, see [9]. Language Design and Implementation. </title> <publisher> ACM Press, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: A consumer may not be able to distinguish the tro-jan horse applet display from a valid information request. Thus, Java applets can easily serve as trojan horses that mimic electronic commerce applications. Java is not the only culprit. Other remote execution mechanisms such as Omniware <ref> [1] </ref>, Telescript [12], and Dyad [18] provide ample opportunities to download programs to a consumer's computer that can display arbitrary graphical interfaces and transmit information to an adversary.
Reference: [2] <author> Nathaniel Borenstein. </author> <title> Vulnerability of software based credit card encryption. </title> <note> At http://fv.com/ccdanger/index.html; see also San Jose Mercury News, </note> <month> 29 January </month> <year> 1996, </year> <title> "Program shows ease of stealing credit information" by Simpson L. </title> <type> Garfinkel. </type>
Reference-contexts: horse can: * imitate remote pages, or * grab keystrokes (such as SET entry keystrokes) from the local machine. (The possibility of this type of attack has been known in the computer science folklore for many years; recently Nathaniel Borenstein gave a dramatic demonstration of trojan horse keystroke grab bing <ref> [2] </ref>.) 1 In the past, consumers have been protected by the relative difficulty of loading trojan horse applications onto arbitrary workstations. If the consumer took moderate care to protect herself from loading untrusted software (including viruses and worms), she could reduce the risk of attack to a manageable level.
Reference: [3] <author> Benjamin Cox, J. D. Tygar, and Marvin Sirbu. </author> <title> NetBill security and transaction protocol. </title> <booktitle> In Proceedings of the First USENIX Workshop in Electronic Commerce, </booktitle> <pages> pages 77-88, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: However, local trojan horses are particularly dangerous for electronic commerce protocols that depend on the local client interfaces to obtain and securely handle confidential information. Examples of systems that use these features include SET (discussed above) and NetBill <ref> [16, 3] </ref> For example, if a trojan horse emulation of the SET interface is very well done, it may be difficult or impossible for the consumer to determine whether she is dealing with the true program or not.
Reference: [4] <author> Donald Watts Davies and W. L. Price. </author> <title> Security for Computer Networks: an Introduction to Data Security in Teleprocessing and Electronic Funds Transfer, 2nd Edition. </title> <publisher> Wiley, </publisher> <year> 1989. </year>
Reference-contexts: Typical ATM authentication today relies only on local encrypted information stored on a single ATM card. No central database query is done until after authentication is complete <ref> [4] </ref>.
Reference: [5] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java security: from HotJava to Netscape and beyond. </title> <booktitle> In Proceedings 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: to select a pattern for window display that will be unknowable (or very difficult to determine) by rogue applets and other electronic commerce is particularly compelling since there is a well-defined target of attack | the consumer's credit card numbers or bank account information. 3 Recently, Dean, Felton, and Wallach <ref> [5] </ref> and others have argued that substantial flaws exist in the Java API library and in the methods used to check type safety. These flaws lead to direct attacks that can be implemented in Java applets. <p> Socket connections are allowed only to the server on which the web page containing the applet resides. 3. Windows and dialogue boxes opened by applets contain vivid banners labeling them as "Un trusted Java Applet Window". Recent work by Dean, Felten and Wallach <ref> [5] </ref> has focused on security flaws in Netscape Navigator Java which are due to implementation errors, such as significant weakness in the Java class loader. These flaws may be exploited by a sophisticated attacker in order to bypass any or all of the above API security restrictions.
Reference: [6] <author> Dorothy Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: 1 Introduction Computer security experts have long recognized the threat of trojan horse programs <ref> [6, 15, 13] </ref>: programs that appear to perform one function while actually performing a second, unwanted function. A particular concern arises from the presentation of an interface to a user or consumer.
Reference: [7] <author> Peter J. Denning. </author> <title> Computers Under Attack: Intruders, Worms, and Viruses. </title> <publisher> ACM Press, </publisher> <address> New York, N.Y., </address> <year> 1990. </year>
Reference-contexts: Given that Microsoft, a company that has announced interest in Java code signing, has in the past released software containing hostile code <ref> [7] </ref>, we believe that such certification is best used in conjunction with additional security strategies, such as the window personalization technique described in this paper, which is complementary to (and independent of) applet signing.
Reference: [8] <author> N. Borenstein et al. </author> <title> Perils and pitfalls of practical cybercommerce: </title> <booktitle> The lessons of First Virtual's first year. In Proceedings of Frontiers in Electronic Commerce, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: Such a rogue program could transmit the consumer's credit card number directly to the adversary; alternatively, it could store it for later retrieval. 2 1 In his First Virtual work <ref> [14, 8] </ref>, Borenstein and his colleagues argue for a system where a consumer would enter a First Virtual account number, rather than directly entering credit card information. Consumers would have the opportunity to review and decline charges that were improperly made on their account.
Reference: [9] <author> Howard Gobioff, Sean Smith, J. D. Tygar, and Bennet Yee. </author> <title> Smartcards in hostile environments. </title> <booktitle> In Proceedings of the Second USENIX Workshop on Electronic Commerce, </booktitle> <month> November </month> <year> 1996. </year>
Reference: [10] <author> James Gosling and Henry McGilton. </author> <title> The Java language environment: A white paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> May </month> <year> 1996. </year> <note> See also http://www.javasoft.com/doc/ language environment/. </note>
Reference-contexts: It might infect an e-mail system allowing messages to be read by third parties. It might infect a compiler allowing trojan horses to be inserted in locally compiled programs [17]. Ultimately, any application program might be emulated. However, the case of Java applets <ref> [10] </ref> have changed the balance of power | increasing the possibility of untrusted software and local trojan horses being transferred to a workstation. Java applets are usually loaded onto a workstation without requiring explicit applet-by-applet consent by the consumer.
Reference: [11] <author> Mastercard International and Visa International. </author> <title> Secure Electronic Transaction (SET) Specification, </title> <month> June </month> <year> 1996. </year> <note> See http://www.visa.com or http://www.mastercard.com. </note>
Reference-contexts: fraudulent use of credit cards by merchants is already recognized to be a serious problem (this is sometimes called the "Lyn-don LaRouche problem" after the fringe presidential candidate who has been accused of credit card fraud.) To address this problem, Visa and Master-card, in their Secure Electronic Transaction (SET) specification <ref> [11] </ref>, indicated that merchants (both legitimate and bogus) should not receive credit card numbers and similar confidential billing information about consumers. Rather, credit card information entered by consumers should be encrypted before it leaves the local client, so that only an acquiring bank could read the information.
Reference: [12] <author> General Magic. </author> <title> Telescript technology: The foundation for the electronic marketplace. </title> <type> Technical report, </type> <institution> General Magic, </institution> <year> 1996. </year> <note> See also http://www.genmagic.com/Telescript/ Whitepapers/wp1/whitepaper-1.html. </note>
Reference-contexts: A consumer may not be able to distinguish the tro-jan horse applet display from a valid information request. Thus, Java applets can easily serve as trojan horses that mimic electronic commerce applications. Java is not the only culprit. Other remote execution mechanisms such as Omniware [1], Telescript <ref> [12] </ref>, and Dyad [18] provide ample opportunities to download programs to a consumer's computer that can display arbitrary graphical interfaces and transmit information to an adversary.
Reference: [13] <author> Peter G. Neumann. </author> <title> Computer Related Risks. </title> <publisher> ACM Press and Addison-Wesley, </publisher> <year> 1995. </year> <note> Also see Risks Digests at ftp://ftp.sri.com/risks. </note>
Reference-contexts: 1 Introduction Computer security experts have long recognized the threat of trojan horse programs <ref> [6, 15, 13] </ref>: programs that appear to perform one function while actually performing a second, unwanted function. A particular concern arises from the presentation of an interface to a user or consumer.
Reference: [14] <author> Darren New. </author> <title> Internet information commerce: The First Virtual approach. </title> <booktitle> In Proceedings of the First USENIX Workshop in Electronic Commerce, </booktitle> <pages> pages 33-68, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Such a rogue program could transmit the consumer's credit card number directly to the adversary; alternatively, it could store it for later retrieval. 2 1 In his First Virtual work <ref> [14, 8] </ref>, Borenstein and his colleagues argue for a system where a consumer would enter a First Virtual account number, rather than directly entering credit card information. Consumers would have the opportunity to review and decline charges that were improperly made on their account.
Reference: [15] <author> Adrian R. D. Norman. </author> <title> Computer Insecurity. </title> <publisher> Chapman and Hall, </publisher> <address> London, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction Computer security experts have long recognized the threat of trojan horse programs <ref> [6, 15, 13] </ref>: programs that appear to perform one function while actually performing a second, unwanted function. A particular concern arises from the presentation of an interface to a user or consumer.
Reference: [16] <author> Marvin Sirbu and J. D. Tygar. NetBill: </author> <title> an internet commerce system optimized for network delivered services. </title> <journal> IEEE Personal Communications, </journal> <pages> pages 34-39, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: However, local trojan horses are particularly dangerous for electronic commerce protocols that depend on the local client interfaces to obtain and securely handle confidential information. Examples of systems that use these features include SET (discussed above) and NetBill <ref> [16, 3] </ref> For example, if a trojan horse emulation of the SET interface is very well done, it may be difficult or impossible for the consumer to determine whether she is dealing with the true program or not.
Reference: [17] <author> Ken Thompson. </author> <title> Reflections on trusting trust. </title> <editor> In Robert L. Ashenhurst and Susan Graham, editors, </editor> <booktitle> ACM Turing Award Lectures, The First Twenty Years, </booktitle> <year> 1966 </year> <month> - </month> <year> 1985, </year> <pages> pages 163-170. </pages> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: A trojan horse might emulate a word processor, causing (potentially sensitive) text to be transmitted to an adversary. It might infect an e-mail system allowing messages to be read by third parties. It might infect a compiler allowing trojan horses to be inserted in locally compiled programs <ref> [17] </ref>. Ultimately, any application program might be emulated. However, the case of Java applets [10] have changed the balance of power | increasing the possibility of untrusted software and local trojan horses being transferred to a workstation.
Reference: [18] <author> Bennet Yee and J. D. Tygar. </author> <title> Secure coproces-sors in electronic commerce applications. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 155-170, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Thus, Java applets can easily serve as trojan horses that mimic electronic commerce applications. Java is not the only culprit. Other remote execution mechanisms such as Omniware [1], Telescript [12], and Dyad <ref> [18] </ref> provide ample opportunities to download programs to a consumer's computer that can display arbitrary graphical interfaces and transmit information to an adversary. In section 3 below, we discuss an example trojan horse Java applet that we developed which performs its own emulation of a standard Netscape dialogue box.
References-found: 18

