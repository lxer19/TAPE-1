URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3424/3424.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: <author> IEEE Transactions on Software Engineering Software Reuse: </author> <booktitle> Emerging Technology Proceedings of the First Pan Pacific Computer Conference IEEE Transaction on Software Engineering ACM Transactions on Software Engineering and Methodology Communications of the ACM IEEE Transactions on Software Engineering IEEE Transactions on Software Engineering Software Engineering Journal IEEE Computer IEEE Transactions on Software Engineering Proceedings of the Fifteenth International Conference on Software Engineering Proceedings of the 18th Annual Software Engineering Workshop IEEE Computer </booktitle>
Reference: [AE92] <author> W. W. Agresti and W. M. Evanco. </author> <title> Projecting software defects from analyzing Ada designs. </title> , <type> 18(11), </type> <month> November </month> <year> 1992. </year>
Reference-contexts: A number of recent studies have shown that product metrics can be used to determine the areas in a program that are at a greater risk of containing a fault <ref> [AE92, SP88, BBH93, BTH93, MK92] </ref>. These studies indicate that models can be developed to isolate faulty components in a system based on characteristics of the components and their environment.
Reference: [AM87] <author> W. Agresti and F. McGarry. </author> <title> The Minnowbrook workshop on software reuse: A summary report. </title> <editor> In W. Tracz, editor, </editor> . <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Reuse has been advocated as a technique with great potential to increase software development productivity, reduce development cycle time, and improve product quality <ref> [AM87, Bro87, BP88] </ref>. However, reuse will not just happen-rather, components must be designed for reuse, and organizational elements must be in place to enable projects to take advantage of the reusable artifacts.
Reference: [Bas85] <author> V. R. Basili. </author> <title> Quantitative Evaluation of Software Methodology. </title> <booktitle> In , Australia, </booktitle> <month> July </month> <year> 1985. </year>
Reference-contexts: for example, selecting a component that does not provide the intended function. 5 3 Using Error Analysis to Optimize the Development Process Characterize Set Goals Choose processes Execute Analyze Package The Quality Improvement Paradigm provides a framework to build a continually improving organization relative to its evolving set of goals <ref> [Bas85, BR88] </ref>.
Reference: [BBH93] <author> L. C. Briand, V.R. Basili, and C. J. Hetmanski. </author> <title> Developing interpretable models with optimized set reduction for identifying high-risk software components. </title> , <month> 19(11), November </month> <year> 1993. </year>
Reference-contexts: A number of recent studies have shown that product metrics can be used to determine the areas in a program that are at a greater risk of containing a fault <ref> [AE92, SP88, BBH93, BTH93, MK92] </ref>. These studies indicate that models can be developed to isolate faulty components in a system based on characteristics of the components and their environment.
Reference: [BCC92] <author> V. R. Basili, G. Caldiera, and G. Cantone. </author> <title> A Reference Architecture for the Component Factory. </title> , <type> 1(1), </type> <month> January </month> <year> 1992. </year>
Reference-contexts: The factory organization provides software components in response to requests from the various projects being developed in the project organization <ref> [BCC92] </ref>. Figure 1 illustrates the component factory concept in support of a project organization. In this setting, the development organization makes requests to the component factory to provide components to be integrated into the desired product. <p> As such, new systems have been developed in accordance with the packaged experience of reusable architectures, designs and code. One aspect of the Component Factory organization is the separate organization that produces or releases all reusable software products <ref> [BCC92] </ref>. While this feature is not present in the SEL, it is apparent that less effort is being spent on project-specific development activities.
Reference: [BP84] <author> V. R. Basili and B. T. Perricone. </author> <title> Software errors and complexity: An empirical investigation. </title> , <type> 27(1), </type> <month> January </month> <year> 1984. </year>
Reference-contexts: One factor to be considered is the structure of the candidate reusable component. Selby investigated various characteristics of new versus reused code in a large collection of FORTRAN projects [Sel88]. Basili and Perricone analyzed tradeoffs between creating a component from scratch versus modifying an existing component <ref> [BP84] </ref>. This work extends these studies by investigating the nature of errors occurring in a reuse oriented development environment, and drawing conclusions as to their impact in such an environment. <p> A number of studies have found higher defect/error densities in smaller components than in larger components <ref> [BP84, SYTP85, LV89, MP93] </ref>. As shown in table 6, our data supports their findings. Small components (25 or less statements) have defect density more than twice that of the larger components (more than 25 statements), and this difference is highly significant. <p> Basili and Perricone, in their study of a FORTRAN development project, reported that modified components typically required more correction effort than new components <ref> [BP84] </ref>. We see a similar result in the two classes of modified components, and also see the same pattern occurring in the reused verbatim components. <p> The Basili-Perricone study reported the opposite effect of reuse on the specification errors <ref> [BP84] </ref>. They found that modified modules had a higher proportion of specification errors than did the new modules, and explained the result by suggesting that the specification was not well-enough or appropriately defined to be used in different contexts. A similar result was reported by Endres [End75].
Reference: [BP88] <author> B. W. Boehm and P. N. Papaccio. </author> <title> Understanding and Controlling Software Costs. </title> , <type> 14(10), </type> <month> October </month> <year> 1988. </year>
Reference-contexts: Reuse has been advocated as a technique with great potential to increase software development productivity, reduce development cycle time, and improve product quality <ref> [AM87, Bro87, BP88] </ref>. However, reuse will not just happen-rather, components must be designed for reuse, and organizational elements must be in place to enable projects to take advantage of the reusable artifacts.
Reference: [BR88] <author> V. Basili and D. Rombach. </author> <title> The TAME Project: Towards Improvement-Oriented Software Environments. </title> , <type> 14(6), </type> <month> June </month> <year> 1988. </year>
Reference-contexts: The key features of the component factory are the repository of the components for future reuse, and the focus on flexibility and continuous improvement. Thus a measurement-oriented approach must be utilized, such as that proposed in the TAME project <ref> [BR88] </ref>, which provides an experimental view of software development, allowing for analysis and learning about the effectiveness of the new technologies. Reuse-oriented development will require some effort to be expended in activities that are not a part of traditional software development. <p> for example, selecting a component that does not provide the intended function. 5 3 Using Error Analysis to Optimize the Development Process Characterize Set Goals Choose processes Execute Analyze Package The Quality Improvement Paradigm provides a framework to build a continually improving organization relative to its evolving set of goals <ref> [Bas85, BR88] </ref>.
Reference: [BR91] <author> V. R. Basili and H. D. Rombach. </author> <title> Support for Comprehensive Reuse. </title> , <type> 6(5), </type> <month> September </month> <year> 1991. </year>
Reference-contexts: Basili and Rombach present a framework of comprehensive support for reuse, including organizational and methodological properties necessary to maximize the benefit of reuse <ref> [BR91] </ref>. For reuse to attain a significant role in an environment, organizational changes must be made to facilitate the change in development style. Maintaining a library of reusable parts may require resources including personnel, hardware, and software. While increasing 1 William M. Thomas Alex Delis Victor R.
Reference: [Bro87] <author> F. P. Brooks. </author> <title> No Silver Bullet: </title> <journal> Essence and Accidents of Software Engineering. </journal> , <volume> 20(4), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Reuse has been advocated as a technique with great potential to increase software development productivity, reduce development cycle time, and improve product quality <ref> [AM87, Bro87, BP88] </ref>. However, reuse will not just happen-rather, components must be designed for reuse, and organizational elements must be in place to enable projects to take advantage of the reusable artifacts.
Reference: [BS87] <author> V. R. Basili and R. W. Selby. </author> <title> Comparing the effectiveness of software testing strategies. </title> , <type> 13(12), </type> <month> December </month> <year> 1987. </year>
Reference-contexts: Increased 6 4 Description of the Analysis knowledge about the types of errors in an environment can be used to optimize the process for that environment. Basili and Selby found that the effectiveness of error detection techniques varies with the type of fault encountered <ref> [BS87] </ref>. For example, code reading was found to be the most effective technique for isolating interface errors, while functional testing was found to be more effective at finding logic errors.
Reference: [BTH93] <author> L. C. Briand, W. M. Thomas, and C. J. Hetmanski. </author> <title> Modeling and managing risk early in software development. </title> <note> In , May 1993. </note>
Reference-contexts: A number of recent studies have shown that product metrics can be used to determine the areas in a program that are at a greater risk of containing a fault <ref> [AE92, SP88, BBH93, BTH93, MK92] </ref>. These studies indicate that models can be developed to isolate faulty components in a system based on characteristics of the components and their environment.
Reference: [BWS93] <author> J. Bailey, S. Waligora, and M. Stark. </author> <title> Impact of Ada in the flight dynamics division: </title> <editor> Excitement and frustration. In . NASA/GSFC, </editor> <month> December </month> <year> 1993. </year>
Reference-contexts: High levels of reuse may be achieved in languages without such features, however, the approach taken to achieve such reuse will be different. Such differences were reported in a study comparing FORTRAN and Ada reuse in the NASA/SEL <ref> [BWS93] </ref>. The Ada approach was to develop a set of generics that can be instantiated to support a variety of application types. In contrast, the FORTRAN approach was to develop a collection of libraries specific to each application type. <p> On projects within a very narrow domain, both approaches achieved similar high levels of reuse. However, when there was a significant change in the domain, the Ada approach achieved a sizable amount of reuse (50 percent verbatim reuse), while the FORTRAN approach showed less than 10 percent verbatim reuse <ref> [BWS93] </ref>. Thus it would appear that the parameterized, generic approach is better suited to development in a dynamic, evolving domain. While improved language features may help to enable reuse, they alone have not resulted in large-scale reuse in software development. <p> A much higher level of reuse than what was reported in [Sel88] has been achieved more recently in this environment [Kes90]. The high levels of reuse have been attributed in part to the Ada language constructs and object-oriented methods <ref> [Kes90, Sta93, BWS93] </ref>. More recently, 7 Project Pct. Total Pct. <p> This difference may be indicative of the approach being taken to reuse in the environment. As previously noted, the Ada approach in this environment was based on the use of well-parameterized generics, while the FORTRAN approach was based on libraries of more specialized functions <ref> [BWS93] </ref>. As such, we might expect a lower level of parameterization in reused FORTRAN modules. Another reason for the difference from Selby's study may be that his measure of a module's interface is a sum of counts of the parameters and global references in the module.
Reference: [CB91] <author> G. Caldiera and V. R. Basili. </author> <title> Identifying and Qualifying Reusable Software Components. </title> , <type> 24(2), </type> <month> February </month> <year> 1991. </year> <booktitle> 19 Proceedings of the 15th International Conference on Software Engineering Software Reuse with Ada Proceedings of the International Conference on Software Engineering IEEE Software The Rationale for the Ada Programming Language IEEE Transactions on Software Engineering Proceedings of the 15th Annual GSFC Software Engineering Workshop IEEE Transactions on Software Engineering IEEE Transactions on Software Engineering IEEE Transactions on Software Engineering Proceedings of the First International Software Metrics Symposium Information and Software Technology Software Reuse: Emerging Technology </booktitle>
Reference-contexts: By analyzing the nature of the defects in the reuse process, one can tailor the process appropriately to best achieve the organization's goals. There have been several studies into techniques to stock an initial reuse library <ref> [CB91, DK93] </ref>. One factor to be considered is the structure of the candidate reusable component. Selby investigated various characteristics of new versus reused code in a large collection of FORTRAN projects [Sel88]. Basili and Perricone analyzed tradeoffs between creating a component from scratch versus modifying an existing component [BP84].
Reference: [DK93] <author> M. Dunn and J. Knight. </author> <title> Automating the detection of reusable parts in existing software. </title> <booktitle> In , Baltimore, </booktitle> <address> Maryland, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: By analyzing the nature of the defects in the reuse process, one can tailor the process appropriately to best achieve the organization's goals. There have been several studies into techniques to stock an initial reuse library <ref> [CB91, DK93] </ref>. One factor to be considered is the structure of the candidate reusable component. Selby investigated various characteristics of new versus reused code in a large collection of FORTRAN projects [Sel88]. Basili and Perricone analyzed tradeoffs between creating a component from scratch versus modifying an existing component [BP84].
Reference: [Dou87] <author> D. </author> <title> Doubleday. ASAP: Ada Static Analyzer Program. </title> <type> Technical Report CS-TR-1897, </type> <institution> University of Maryland, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Finally, we analyzed the systems with a source code static analysis tool, ASAP <ref> [Dou87] </ref>, which provided us with a static profile of each compilation unit, including, for example, basic complexity measures such as McCabe's Cyclomatic Complexity and Halstead's Software Science, as well as counts of various types of declarations and statement usage.
Reference: [EG90] <author> N. Ebel and C. Genillard. </author> <title> The reusability of Ada software components. </title> <editor> In R. Gautier and P. Wallis, editors, . Peter Peregrinus Ltd., </editor> <year> 1990. </year>
Reference-contexts: New types of errors may arise, such as removing too much or not enough of the old component. The Ada programming language contains a number of constructs that encourage effective reuse, including packages and generics <ref> [Ich85, WCW85, GP87, EG90] </ref>. A package is used to group a collection of declarations, such as types, variables, procedures and functions. The package construct allows for the encapsulation of related entities, encouraging the creation of well-defined abstractions such as encapsulated data types.
Reference: [End75] <author> A. Endres. </author> <title> An analysis of errors and their causes in system programs. </title> <note> In , April 1975. </note>
Reference-contexts: They found that modified modules had a higher proportion of specification errors than did the new modules, and explained the result by suggesting that the specification was not well-enough or appropriately defined to be used in different contexts. A similar result was reported by Endres <ref> [End75] </ref>. A difference from the environments examined in those studies is that reuse has been well planned for in this environment. The organization is not structured as a pure "component factory" as described in section 3, but it is moving in that direction.
Reference: [GP87] <author> A. Gargaro and T. Pappas. </author> <title> Reusability issues and Ada. </title> , <month> July </month> <year> 1987. </year>
Reference-contexts: New types of errors may arise, such as removing too much or not enough of the old component. The Ada programming language contains a number of constructs that encourage effective reuse, including packages and generics <ref> [Ich85, WCW85, GP87, EG90] </ref>. A package is used to group a collection of declarations, such as types, variables, procedures and functions. The package construct allows for the encapsulation of related entities, encouraging the creation of well-defined abstractions such as encapsulated data types.
Reference: [Ich85] <author> J. </author> <title> Ichbiah. </title> . <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: New types of errors may arise, such as removing too much or not enough of the old component. The Ada programming language contains a number of constructs that encourage effective reuse, including packages and generics <ref> [Ich85, WCW85, GP87, EG90] </ref>. A package is used to group a collection of declarations, such as types, variables, procedures and functions. The package construct allows for the encapsulation of related entities, encouraging the creation of well-defined abstractions such as encapsulated data types.
Reference: [Jon84] <author> T. C. Jones. </author> <title> Reusability in programming: A survey of the state of the art. </title> , <address> SE-10(5), </address> <month> September </month> <year> 1984. </year>
Reference-contexts: Reuse has been cited as a technology with the potential to provide a significant increase in software development productivity and quality. For example, Jones estimates that only 15 percent of the developed software is unique to the applications for which it was developed <ref> [Jon84] </ref>. Reduced development cost is not the only benefit of reuse-in fact, the greatest benefit from reuse may be its impact on maintenance [LG84, Rom91]. The potential for substantial savings from reuse clearly exists. Unfortunately, achieving high levels of reuse still remains an difficult task.
Reference: [Kes90] <author> R. Kester. </author> <title> SEL Ada Reuse Analysis and Representations. </title> <booktitle> In . NASA/GSFC, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: Because of the support for reuse provided by the Ada language, as discussed in section 2.2, we chose to analyze the Ada projects in this environment. A much higher level of reuse than what was reported in [Sel88] has been achieved more recently in this environment <ref> [Kes90] </ref>. The high levels of reuse have been attributed in part to the Ada language constructs and object-oriented methods [Kes90, Sta93, BWS93]. More recently, 7 Project Pct. Total Pct. <p> A much higher level of reuse than what was reported in [Sel88] has been achieved more recently in this environment [Kes90]. The high levels of reuse have been attributed in part to the Ada language constructs and object-oriented methods <ref> [Kes90, Sta93, BWS93] </ref>. More recently, 7 Project Pct. Total Pct.
Reference: [LG84] <author> R. Lanergan and C. Grasso. </author> <title> Software Engineering with Reusable Designs and Code. </title> , <address> SE-10(5), </address> <month> September </month> <year> 1984. </year>
Reference-contexts: For example, Jones estimates that only 15 percent of the developed software is unique to the applications for which it was developed [Jon84]. Reduced development cost is not the only benefit of reuse-in fact, the greatest benefit from reuse may be its impact on maintenance <ref> [LG84, Rom91] </ref>. The potential for substantial savings from reuse clearly exists. Unfortunately, achieving high levels of reuse still remains an difficult task.
Reference: [LV89] <author> R. Lind and K. Vairavan. </author> <title> An experimental investigation of software metrics and their relationship to software development effort. </title> , <type> 15(5), </type> <month> May </month> <year> 1989. </year>
Reference-contexts: A number of studies have found higher defect/error densities in smaller components than in larger components <ref> [BP84, SYTP85, LV89, MP93] </ref>. As shown in table 6, our data supports their findings. Small components (25 or less statements) have defect density more than twice that of the larger components (more than 25 statements), and this difference is highly significant.
Reference: [MK92] <author> J. Munson and T. Khoshgoftaar. </author> <title> The detection of fault-prone programs. </title> , <type> 18(5), </type> <month> May </month> <year> 1992. </year>
Reference-contexts: A number of recent studies have shown that product metrics can be used to determine the areas in a program that are at a greater risk of containing a fault <ref> [AE92, SP88, BBH93, BTH93, MK92] </ref>. These studies indicate that models can be developed to isolate faulty components in a system based on characteristics of the components and their environment.
Reference: [MP93] <author> K. Moller and D. Paulish. </author> <title> An empirical investigation of software fault distribution. </title> <booktitle> In , Baltimore, </booktitle> <address> Maryland, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A number of studies have found higher defect/error densities in smaller components than in larger components <ref> [BP84, SYTP85, LV89, MP93] </ref>. As shown in table 6, our data supports their findings. Small components (25 or less statements) have defect density more than twice that of the larger components (more than 25 statements), and this difference is highly significant.
Reference: [Rom91] <author> H. D. Rombach. </author> <title> Software Reuse: A Key to the Maintenance Problem. </title> , <type> 33(1), </type> <month> January/February </month> <year> 1991. </year>
Reference-contexts: For example, Jones estimates that only 15 percent of the developed software is unique to the applications for which it was developed [Jon84]. Reduced development cost is not the only benefit of reuse-in fact, the greatest benefit from reuse may be its impact on maintenance <ref> [LG84, Rom91] </ref>. The potential for substantial savings from reuse clearly exists. Unfortunately, achieving high levels of reuse still remains an difficult task.
Reference: [Sel88] <author> R. Selby. </author> <title> Empirically analyzing software reuse in a production environment. </title> <editor> In W. Tracz, editor, </editor> . <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: There have been several studies into techniques to stock an initial reuse library [CB91, DK93]. One factor to be considered is the structure of the candidate reusable component. Selby investigated various characteristics of new versus reused code in a large collection of FORTRAN projects <ref> [Sel88] </ref>. Basili and Perricone analyzed tradeoffs between creating a component from scratch versus modifying an existing component [BP84]. This work extends these studies by investigating the nature of errors occurring in a reuse oriented development environment, and drawing conclusions as to their impact in such an environment. <p> Since its origin, The NASA/GSFC SEL has collected a wealth of data from their software development [SEL94]. Selby performed a study on the characteristics of reused components on a collection of FORTRAN projects from this environment <ref> [Sel88] </ref>, in which the level of reuse averaged 32 percent. Because of the support for reuse provided by the Ada language, as discussed in section 2.2, we chose to analyze the Ada projects in this environment. A much higher level of reuse than what was reported in [Sel88] has been achieved <p> from this environment <ref> [Sel88] </ref>, in which the level of reuse averaged 32 percent. Because of the support for reuse provided by the Ada language, as discussed in section 2.2, we chose to analyze the Ada projects in this environment. A much higher level of reuse than what was reported in [Sel88] has been achieved more recently in this environment [Kes90]. The high levels of reuse have been attributed in part to the Ada language constructs and object-oriented methods [Kes90, Sta93, BWS93]. More recently, 7 Project Pct. Total Pct. <p> These results are similar to what was reported by Selby in his analysis of reuse in a collection of FORTRAN systems-the reused components tend to be simpler than newly created components in terms of size and interaction with other modules <ref> [Sel88] </ref>. This additional complexity may result in an increase in difficulty associated with these components in terms or their error density and error correction effort. We did note one result that is in contrast to Selby's study.
Reference: [SEL94] <institution> An Overview of the Software Enginnering Laboratory. </institution> <type> Technical Report SEL-94-005, </type> <institution> Software Engineering Laboratory, NASA Goddard Space Flight Center, </institution> <month> December </month> <year> 1994. </year> <booktitle> 20 IEEE Transactions on Software Engineering Proceedings of Eigth Annual Conference on Object-Oriented Programming Systems, Languages and Applications IEEE Transactions on Software Engineering Ada: Moving Towards 2000 (Proceedings of the Ada-Europe International Conference) IEEE Software </booktitle>
Reference-contexts: Since its origin, The NASA/GSFC SEL has collected a wealth of data from their software development <ref> [SEL94] </ref>. Selby performed a study on the characteristics of reused components on a collection of FORTRAN projects from this environment [Sel88], in which the level of reuse averaged 32 percent.
Reference: [SP88] <author> R.W. Selby and A.A. Porter. </author> <title> Learning from Examples: Generation and Evaluation of Decision Trees for Software Resource Analysis. </title> , <type> 14(11), </type> <month> November </month> <year> 1988. </year>
Reference-contexts: A number of recent studies have shown that product metrics can be used to determine the areas in a program that are at a greater risk of containing a fault <ref> [AE92, SP88, BBH93, BTH93, MK92] </ref>. These studies indicate that models can be developed to isolate faulty components in a system based on characteristics of the components and their environment.
Reference: [Sta93] <author> M. Stark. </author> <title> Impacts of object-oriented technologies: Seven years of SEL studies. </title> <note> In , October 1993. </note>
Reference-contexts: A much higher level of reuse than what was reported in [Sel88] has been achieved more recently in this environment [Kes90]. The high levels of reuse have been attributed in part to the Ada language constructs and object-oriented methods <ref> [Kes90, Sta93, BWS93] </ref>. More recently, 7 Project Pct. Total Pct. <p> While this environment is not organized along the lines of the Component Factory discussed in section 2, it does have some characteristics in common with that organization. In the SEL, generalized architectures were developed explicitly to facilitate large scale reuse from project to project <ref> [Sta93] </ref>, so it is clear that significant effort has been applied towards the goal of reuse in the organization. As such, new systems have been developed in accordance with the packaged experience of reusable architectures, designs and code. <p> The percentage of effort spent in the Coding/Unit Test phase has dropped from 44 percent on an early simulator, to only 18 percent on one of the more recent simulators <ref> [Sta93] </ref>. This suggests that there is a significant leveraging of the stored experience, and as such, the observed effort on the SEL projects is becoming more in line with the profile one would expect in the Component Factory's project organization, i.e., dominated by design and testing activities.
Reference: [SYTP85] <author> V. Shen, T. Yu, S. Thebaut, and L. Paulsen. </author> <title> Identifying error-prone software-an empirical study. </title> , <address> SE-11(4), </address> <month> April </month> <year> 1985. </year>
Reference-contexts: A number of studies have found higher defect/error densities in smaller components than in larger components <ref> [BP84, SYTP85, LV89, MP93] </ref>. As shown in table 6, our data supports their findings. Small components (25 or less statements) have defect density more than twice that of the larger components (more than 25 statements), and this difference is highly significant.
Reference: [TDB92] <author> W. M. Thomas, A. Delis, and V. R. Basili. </author> <title> An evaluation of Ada source code reuse. </title> <editor> In J. van Katwijk, editor, , Zandvoort, </editor> <address> The Netherlands, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: not imply "defect-free." An investigation into the benefits of reuse in the NASA Goddard Space Flight Center (NASA/GSFC) showed that even among components that were intended to be reused verbatim, while their error rate was an order of magnitude lower than newly created code, the error rate is still significant <ref> [TDB92] </ref>. By analyzing the nature of the defects in the reuse process, one can tailor the process appropriately to best achieve the organization's goals. There have been several studies into techniques to stock an initial reuse library [CB91, DK93].
Reference: [WCW85] <author> A. Wolf, L. Clarke, and J. Wileden. </author> <title> Ada-based support for programmming in the large. </title> , <month> March </month> <year> 1985. </year> <month> 21 </month>
Reference-contexts: New types of errors may arise, such as removing too much or not enough of the old component. The Ada programming language contains a number of constructs that encourage effective reuse, including packages and generics <ref> [Ich85, WCW85, GP87, EG90] </ref>. A package is used to group a collection of declarations, such as types, variables, procedures and functions. The package construct allows for the encapsulation of related entities, encouraging the creation of well-defined abstractions such as encapsulated data types.
References-found: 35

