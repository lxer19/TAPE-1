URL: http://www.cs.brown.edu/people/dgk/Papers/ptm.ps
Refering-URL: http://www.cs.brown.edu/people/dgk/papers.html
Root-URL: http://www.cs.brown.edu/
Email: dqg@cs.umb.edu  pw@cs.brown.edu  
Title: Persistence as a Form of Interaction  
Author: D. Goldin P. Wegner 
Date: July 14, 1998  
Address: Boston  
Affiliation: Univ. of Massachusetts  Brown University  
Abstract: This paper establishes a relation between interaction and persistence. Interactive computation is characterized by Interaction Machines (IMs) [We1], with a restricted subclass of Sequential Interaction Machines (SIMs) controlled by a single sequential stream of interactions, modeling transducers and simple data abstractions. Persistent Turing Machines (PTMs) are introduced by extending Turing Machines (TMs) with a persistent working tape. It is shown that SIMs and PTMs are expressively equivalent but more expressive than TMs where, following Milner [Mi2], expressiveness is defined in terms of observerability of system behavior. This work is part of a larger effort towards a more comprehensive formalization of interactive computation, with the aim of characterizing empirical computation by interaction.
Abstract-found: 1
Intro-found: 1
Reference: [Ag] <author> Gul Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: For example, actors <ref> [Ag] </ref> that accept inputs sequentially from their mail queue are not SIMs because they allow computations of successive inputs to run concurrently. Proposition 7.1 (Semantics of SIM computation) A SIM M defines a partial recursive function f M from a sequence of inputs to one output.
Reference: [BA] <author> J.D. Brock, W.B. Ackerman. </author> <title> Scenarios: </title> <booktitle> A Model of Non-Determinate Computation, </booktitle> <pages> pp. 252-259. </pages> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Observations may include multiple interactions with the system, with one of several pragmatics [GW]: on-line vs. off-line, leading to distinctions known in process theory as linear time vs. branching time equivalence [Pn]. The Brock-Ackerman anomaly <ref> [BA] </ref> is a classic example of how these modes of observation affect the observer's ability to distinguish between systems. 1 black-box vs. glass-box, known in process theory as as trace equivalence vs. different types of simu-lation.
Reference: [Br] <author> Manfred Broy. </author> <title> A Theory for Nondeterminism, Communication, and Concurrency. </title> <booktitle> Theoretical Computer Science 45, </booktitle> <year> 1986. </year>
Reference-contexts: Our model is related to formalizations of process models of observability [Mi2], reactive systems by temporal logis [MP], specification models of data abstraction <ref> [Br] </ref>, and input-output automata [Ly]. It shows how PTMs can be defined by a minimal extension of TMs and that making memory persistent (an inner property) corresponds to making the machine interactive (an outer property).
Reference: [Gl] <author> R.J. Van Glabbeek. </author> <title> The Linear Time Branching Time Spectrum. </title> <booktitle> CONCUR 90, </booktitle> <pages> pp. 278-297. </pages> <publisher> LNCS 458, Springer, </publisher> <year> 1990. </year>
Reference-contexts: The equivalence classes of system behavior induced by different glass-box observational modes for labeled transition systems are well studied <ref> [Gl] </ref> The transformational view of system expressiveness, where some classes of automata are more powerful than others due to their ability to express a wider set of functions, generalizes to the interactive framework as well.
Reference: [GW] <author> Dina Goldin, Peter Wegner. </author> <title> On the Expressiveness of Interactive Observers. </title> <booktitle> Work in Progress. </booktitle>
Reference-contexts: In the interactive framework, whether two systems are equivalent depends not only on the systems but on the mode of observation. Observations may include multiple interactions with the system, with one of several pragmatics <ref> [GW] </ref>: on-line vs. off-line, leading to distinctions known in process theory as linear time vs. branching time equivalence [Pn].
Reference: [Kn] <institution> Donald Knuth The Art of Computer Programming, Volume 1. </institution> <year> 1968 </year>
Reference-contexts: 1 Introduction In this paper, we adopt Milner's interactive view of system behavior [Mi1]. This view is more general than the algorithmic view <ref> [Kn, Pa] </ref>, extending the one-input one-output computational model of Turing Machines (TMs) to computations that involve sequences of interactions.
Reference: [LP] <author> Harry Lewis, Christos Papadimitriou. </author> <title> Elements of the Theory of Computation. </title> <publisher> Prentice-Hall, </publisher> <year> 1998. </year>
Reference-contexts: Each transition consists of moving the I/O head by one position, reading/writing one character at current position, and changing its internal state. Semantics of TM computations: Is is well known that a TM M defines a partial recursive function f M <ref> [LP] </ref>: f M (input) = output. Turing machines can be generalized to multiple-tape TMs (MTMs), with a read-only input tape, an output tape, and a finite number of work tapes. It is well known that MTMs with any finite number of tapes are no more expressive than TMs [LP]. <p> f M <ref> [LP] </ref>: f M (input) = output. Turing machines can be generalized to multiple-tape TMs (MTMs), with a read-only input tape, an output tape, and a finite number of work tapes. It is well known that MTMs with any finite number of tapes are no more expressive than TMs [LP]. Definition 3.3 Multitape Turing Machines (MTMs) perform computations by being given a finite input string on the input tape, with the other tapes being blank, and with the reading/writing heads positioned at the beginning of the tapes. Whatever is on the output tape at the end is considered output.
Reference: [Ly] <author> N. Lynch, M. Merritt, W. Weihl, A. Fekete. </author> <title> Atomic Transactions. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Our model is related to formalizations of process models of observability [Mi2], reactive systems by temporal logis [MP], specification models of data abstraction [Br], and input-output automata <ref> [Ly] </ref>. It shows how PTMs can be defined by a minimal extension of TMs and that making memory persistent (an inner property) corresponds to making the machine interactive (an outer property). The ability to remember elevates the expressiveness of PTMs above that of TMs, giving them a sense of identity.
Reference: [Mi1] <author> Robin Milner. </author> <title> Elements of Interaction. </title> <journal> Communications of the ACM, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: 1 Introduction In this paper, we adopt Milner's interactive view of system behavior <ref> [Mi1] </ref>. This view is more general than the algorithmic view [Kn, Pa], extending the one-input one-output computational model of Turing Machines (TMs) to computations that involve sequences of interactions.
Reference: [Mi2] <author> Robin Milner. </author> <title> Operational and Algebraic Semantics of Concurrent Processes. </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen editor, </editor> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Our model is related to formalizations of process models of observability <ref> [Mi2] </ref>, reactive systems by temporal logis [MP], specification models of data abstraction [Br], and input-output automata [Ly]. It shows how PTMs can be defined by a minimal extension of TMs and that making memory persistent (an inner property) corresponds to making the machine interactive (an outer property).
Reference: [MP] <author> Zohar Manna, Amir Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Whereas algorithmic expressiveness is defined by the transformational power of systems, interactive expressiveness is defined by the ability of observers to make observational distinctions. In <ref> [MP] </ref>, it was shown that reactive (interactive) systems cannot be modeled by TMs. However, interactive behavior specifications can easily be specialized from multiple to single interactions. Thus, observational expressiveness provides a common framework for expressing the behavior of algorithmic and interactive systems within which they can be compared. <p> This represents two different views of a computation, as a transformation of inputs to outputs or as a reactive process that continuously receives new inputs and processes them <ref> [MP] </ref>. However, both SIM computations and extended computations of PTMs (Section 4), can be characterized by interaction sequences (Definition 2.1), and are therefore directly comparable. <p> Our model is related to formalizations of process models of observability [Mi2], reactive systems by temporal logis <ref> [MP] </ref>, specification models of data abstraction [Br], and input-output automata [Ly]. It shows how PTMs can be defined by a minimal extension of TMs and that making memory persistent (an inner property) corresponds to making the machine interactive (an outer property).
Reference: [Pa] <author> Christos Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction In this paper, we adopt Milner's interactive view of system behavior [Mi1]. This view is more general than the algorithmic view <ref> [Kn, Pa] </ref>, extending the one-input one-output computational model of Turing Machines (TMs) to computations that involve sequences of interactions.
Reference: [Pn] <author> Amir Pnueli. </author> <title> Linear and Branching Structures in the Semantics and Logics of Reactive Systems, </title> <editor> in W. Brauer, editor: </editor> <booktitle> Proceedings 12th ICALP, </booktitle> <address> Nafplion </address>
Reference-contexts: Observations may include multiple interactions with the system, with one of several pragmatics [GW]: on-line vs. off-line, leading to distinctions known in process theory as linear time vs. branching time equivalence <ref> [Pn] </ref>. The Brock-Ackerman anomaly [BA] is a classic example of how these modes of observation affect the observer's ability to distinguish between systems. 1 black-box vs. glass-box, known in process theory as as trace equivalence vs. different types of simu-lation.
Reference: [Tu] <author> Alan Turing. </author> <title> On Computable Numbers, with an Application to the Entscheidungsproblem. </title> <booktitle> Proc. of the London Mathematical Society, 2:42, </booktitle> <pages> pp. 230-265, </pages> <year> 1936. </year>
Reference-contexts: It is interesting to note that the distinction between automatic machines and choice machines, where the latter allow choices by an external operator, was already present in Turing's seminal paper <ref> [Tu] </ref>, but was not followed up by Turing. Whereas algorithmic expressiveness is defined by the transformational power of systems, interactive expressiveness is defined by the ability of observers to make observational distinctions. In [MP], it was shown that reactive (interactive) systems cannot be modeled by TMs. <p> What makes I/O actions special is that these are the only actions of the TM that allow it to interact with the external environment, obtaining values that are not under its direct control. It is interesting to note that Turing's original paper on automata <ref> [Tu] </ref> provided for the possibility of automata with interactive computational steps; these c-automata, for choice were defined and contrasted with a-automata, for automatic. However, the rest of the paper only considered a-automata, and the a prefix was discarded.
Reference: [We1] <author> Peter Wegner. </author> <title> Interactive Foundations of Computing. </title> <booktitle> Theoretical Computer Science, </booktitle> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Definition 7.2 An Interaction Machine (IM) is a TM extended with the interaction property. Note that this is an intensional definition in terms of the interaction property rather than an extensional definition. There are many modes of interaction, as discussed in <ref> [We1] </ref>. We will consider those IMs where the computation associated with any interaction is completed before the next interaction can begin. Definition 7.3 A Sequential Interaction Machine (SIM) is an IM whose interactions are sequential. SIMs model serializable transaction systems, where there is no interference between sequential transactions. <p> Corollary 8.1 SIMs are more expressive that TMs. Corollary 8.1 provides a formal justification for the claim made in <ref> [We1] </ref> that IMs are more expressive than TMs.
Reference: [We2] <author> Peter Wegner. </author> <title> Towards Empirical Computer Science, </title> <journal> The Monist, special issue on the Philosophy of Computer Science, </journal> <month> Jan. </month> <year> 1999 </year> <month> 10 </month>
Reference-contexts: In particular, there is strong evidence that machines with multiple input streams are more expressive than SIMs; this contrasts with the result that 9 TMs with multiple tapes are no more expressive than TMs with a single tape. In <ref> [We2] </ref>, we show that observational expressiveness for models of computation corresponds to explanatory power for models of physics, and propose the thesis that observational expressiveness captured by interaction machines characterizes the intuitive notion of empirical computer science just as algorithmic expressiveness characterized by TMs captures Church's notion of effective computability.
References-found: 16

