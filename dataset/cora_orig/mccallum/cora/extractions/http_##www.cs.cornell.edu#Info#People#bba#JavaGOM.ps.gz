URL: http://www.cs.cornell.edu/Info/People/bba/JavaGOM.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/bba/papers.html
Root-URL: http://www.cs.brown.edu/
Email: email: bba@zurich.ibm.com  
Title: Using Java For Dynamic Access to Multiple Object Models  
Author: Bela Ban 
Date: October 23, 1996  
Address: 8803 Ruschlikon  
Affiliation: IBM Zurich Research Laboratory  
Abstract-found: 0
Intro-found: 1
Reference: [Ban95] <author> Bela Ban. </author> <title> Extending Corba For Multi-Domain Management. </title> <type> Technical report, </type> <institution> IBM Research Division, IBM Zurich Research Laboratory Saeumerstr. </institution> <address> 4 8803 Rueschlikon, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The following approach shows how this restriction can be removed. The main advan tages are: 1 * Dynamic access to CORBA interfaces at runtime. * Smaller client applications. Only little compile time knowledge (fixed number of interfaces) is needed (GOM interfaces GenObj, Val (and subclasses) and Factory <ref> [Ban95] </ref>). * Access to other object models. This is quasi a 'free' add-on feature of the GOM architecture itself. 2 Architecture The architecture is shown in fig. 1.
Reference: [Box95] <author> Don Box. </author> <title> Building C++ Components Using OLE2. C++ Report, </title> <booktitle> 7(3) </booktitle> <pages> 28-34, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: A request sent to a GenObj stub instance will be transparently forwarded to a GenObj implementation object in a CORBA server which then uses an adapter to dispatch the request to a specific object model (such as CORBA, CMIP [CMI], OLE <ref> [Bro94, Box95] </ref>, SNMP [CFSD90]etc.). Given the availability of GOM CORBA interfaces and their implementation and an IDL-Java translator (to be furnished by an ORB implementor), we just need to generate Java classes from GOM's CORBA interfaces and can immediately use them in Java applications without any further interaction.
Reference: [Bro94] <author> K. Brockschmidt. </author> <title> Inside OLE2. </title> <publisher> Microsoft Press, </publisher> <address> Redmont, WA, </address> <year> 1994. </year>
Reference-contexts: A request sent to a GenObj stub instance will be transparently forwarded to a GenObj implementation object in a CORBA server which then uses an adapter to dispatch the request to a specific object model (such as CORBA, CMIP [CMI], OLE <ref> [Bro94, Box95] </ref>, SNMP [CFSD90]etc.). Given the availability of GOM CORBA interfaces and their implementation and an IDL-Java translator (to be furnished by an ORB implementor), we just need to generate Java classes from GOM's CORBA interfaces and can immediately use them in Java applications without any further interaction.
Reference: [CFSD90] <author> J. Case, M. Fedor, M. Schoffstall, and C. Davin. </author> <title> The Simple Network Management Protocol. </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year>
Reference: [CMI] <author> International Standards Organization. </author> <title> Common Management Information Protocol (CMIP). </title> <type> ISO / IEC 9596. </type>
Reference-contexts: A request sent to a GenObj stub instance will be transparently forwarded to a GenObj implementation object in a CORBA server which then uses an adapter to dispatch the request to a specific object model (such as CORBA, CMIP <ref> [CMI] </ref>, OLE [Bro94, Box95], SNMP [CFSD90]etc.). Given the availability of GOM CORBA interfaces and their implementation and an IDL-Java translator (to be furnished by an ORB implementor), we just need to generate Java classes from GOM's CORBA interfaces and can immediately use them in Java applications without any further interaction.
Reference: [GR89] <author> Adele Goldberg and David Rob-son. </author> <title> Smalltalk-80. The Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: CORBA is more geared towards distributed object oriented processing of information. In my opinion, it will be feasible to create future distributed applications using Java for the GUI and CORBA for the model (after the model-view-controller paradigm <ref> [GR89] </ref>). If we follow the MVC paradigm, implications are that a view accesses the model, never vice versa. Therefore a mechanism has to be provided that lets Java applications access CORBA instances as if they were native Java classes.
Reference: [OMG95] <editor> The Common Object Request Broker: </editor> <booktitle> Architecture And Specification. </booktitle> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: 1 Introduction CORBA <ref> [OMG95] </ref> and Java [Sun95] are ideal combinations for creating distributed systems. Java is a platform independent language, suitable to be downloaded to any machine and with its GUI class library, especially suitable for GUI development. CORBA is more geared towards distributed object oriented processing of information.
Reference: [Sun95] <author> Sun Microsystems. </author> <title> The Java Language Environment: A White Paper, 1995. Bela Ban is a researcher at IBM's Zurich Research Laboratory, working on multi-object model management problems. </title> <type> 5 </type>
Reference-contexts: 1 Introduction CORBA [OMG95] and Java <ref> [Sun95] </ref> are ideal combinations for creating distributed systems. Java is a platform independent language, suitable to be downloaded to any machine and with its GUI class library, especially suitable for GUI development. CORBA is more geared towards distributed object oriented processing of information.
References-found: 8

