URL: http://www-cad.eecs.berkeley.edu/~ellen/Pubs/eurodac96.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~ellen/Html/pub.html
Root-URL: 
Title: Incremental Re-encoding for Symbolic Traversal of Product Machines  
Author: Stefano Quer Gianpiero Cabodi Paolo Camurati Luciano Lavagno Ellen Sentovich R. K. Brayton 
Address: Berkeley, CA (USA)  Turin, ITALY  Turin, ITALY  SophiaAntipolis, FRANCE  
Affiliation: UCB Dept. of EECS  Politecnico di Torino Dip. di Automatica e Informatica  Universit di Udine Dip. di Matematica e Informatica Udine, ITALY Politecnico di Torino Dip. di Elettronica  Ecole des Mines de Paris Centre de Mathmatiques Appliques  
Abstract: State space exploration of tnite state machines is used to prove properties. The three paradigms for exploring reachable states, forward traversal, backward traversal and a combination of the two, reach their limits on large practical examples. Approximate techniques and combi national veritcation are far less expensive but these im ply sucient, not strictly necessary conditions. Extend ing the applicability of the purely combinational check can be achieved through state minimization, partition ing, and re-encoding the FSMs to factor out their dif ferences. This paper focuses on re-encoding presenting an incremental approach to re-encoding for sequential veritcation. Experimental results demonstrate the eec tiveness of this solution on mediumlarge circuits where other techniques may fail. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.I. Cheng, M. MarekSadowska, </author> <title> Verifying Equiv alence of Functions with Unknown Input Corre spondence, </title> <booktitle> in Proc. </booktitle> <address> EDAC'93, </address> <month> February </month> <year> 1993, </year> <pages> pp. 8185 </pages>
Reference-contexts: One of the main issues is to try and keep corresponding nextstate functions and variables inter leaved. To identify permutations of state variable names, we follow a heuristic approach inspired by Chen et al. <ref> [1] </ref> that computes signatures associated to input variables. We modify the method applying it to state variables. The algorithm is implemented in the pm_heuristic function. This corresponds to an initial decomposition and re-ordering of M p . The re-encoding is generated and updated in the inner loop.
Reference: [2] <author> G. Hachtel, F. Somenzi, </author> <title> A Symbolic Algorithm for Maximum Flow in 01 Networks, </title> <booktitle> in Proc. IEEE ICCAD'93, </booktitle> <month> November </month> <year> 1993, </year> <pages> pp. 403406 </pages>
Reference-contexts: Then the problem is equiv alent to solving a perfect bipartite matching problem. If a perfect matching exists, it is also a maximum one, and wellknown algorithms for maximum match ing based on the mincut maxow theorem (or their symbolic versions <ref> [2] </ref>) could be used. Unfortunately the matching problem is in the inner loop of our algo rithm, so exact algorithms, would still require an exces sive amount time. We propose a quick heuristic algorithm, based on Lin's et al. compatible projection operator without guar antee of maximality.
Reference: [3] <author> B. Lin, A. Richard Newton, </author> <title> Implicit Manipulation of Equivalence Classes Using Binary Decision Di agrams, </title> <booktitle> in Proc. IEEE ICCD'91, </booktitle> <month> October </month> <year> 1991, </year> <pages> pp. 8185 </pages>
Reference-contexts: This is mandatory to reduce the com plexity of approximate and exact traversals, and to reduce the complexity of the re-encoding function. State minimization of the initial machines in some cases results in machines with isomorphic STGs and is an or thogonal technique <ref> [3] </ref> that will not be discussed here. 2.1 Transforming FSMs An FSM M is given by M = (I; O; S; ffi; ; S 0 ), where I is the set of input variables, O the set of output variables, S the set of states, ffi the set of nextstate functions,
Reference: [4] <author> E.M. Sentovich, K.J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P.R. Stephan, R.K. Brayton, A. SangiovanniVincentelli, </author> <title> SIS: A system for sequential circuit synthesis, </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> U.C. Berkeley, </institution> <month> May </month> <year> 1992 </year>
Reference-contexts: Table 2 presents the veritcation of mediumlarge ma chines composed of smaller FSMs. We used equivalent but not equal circuits (like s344 and s349) or circuits with dierent state assignments obtained using SIS <ref> [4] </ref>. In the latter case we start from the STG of the ma chine in kiss format, and we synthesize it with dierent state assignment strategies (i.e. dierent options for the state_assign command of Nova [5] are used to obtain equivalent machines).

References-found: 4

