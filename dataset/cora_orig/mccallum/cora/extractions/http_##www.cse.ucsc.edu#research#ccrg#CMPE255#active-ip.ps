URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/active-ip.ps
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/
Root-URL: http://www.cse.ucsc.edu
Title: The ACTIVE IP Option  
Author: David J. Wetherall and David L. Tennenhouse 
Affiliation: Telemedia Networks and Systems Group Laboratory for Computer Science Massachusetts Institute of Technology  
Date: Sept. 1996  
Note: Appears in Proc. of the 7th ACM SIGOPS European Workshop, Connemara, Ireland,  
Abstract: In this paper, we discuss our work on an active network architecture in which passive packets are replaced with active capsules | encapsulated program fragments that are executed at each switch they traverse. This approach allows application-specific processing to be injected into the network. The accessibility of computation and storage "within" the network provides a substrate that can be tailored to build global applications, including those that invoke customized multicast and merge processing. We describe an extension to the IP options mechanism that supports the embedding of program fragments in datagrams and the evaluation of these fragments as they traverse the Internet. The active option provides a generic approach to the extension of the IP network service. 
Abstract-found: 1
Intro-found: 1
Reference: [A + 95] <author> E. Amir et al. </author> <title> An Application-level Video Gateway. </title> <booktitle> In Multimedia '95, </booktitle> <pages> pages 511-522, </pages> <address> San Francisco, CA, </address> <month> November </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: Examples include application-neutral TCP snooping at wireless base stations [B + 95a]; "nomadic routers" that are interposed between an end system and the network [Kle95]; and application-specific service gateways that perform file caching and the transcoding of images <ref> [A + 95] </ref>. Our goal is to replace these ad hoc approaches with a generic capability that allows users to program their networks. Active networks address the mismatch between the rate at which user requirements can change, i.e., overnight, and the pace at which physical assets can be deployed. <p> It is clear that by using a scripting language to combine primitives, much of the functionality of the existing IP option suite can be subsumed. More ambitious experiments, e.g. those that mimic the application-level video gateway <ref> [A + 95] </ref> and TCP snooping [B + 95a], are also possible. active options provide applications with a means to attach policy decisions to their data directly, rather than attempting to locate processing at pre-determined positions in the network.
Reference: [A + 96] <author> A. Adl-Tabatabai et al. </author> <title> Efficient and Language-Independent Mobile Code. </title> <booktitle> In Proc. ACM SIG-PLAN Symp. on Programming Language Design and Implementation, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Java [Gos95] uses an intermediate code representation that is portable and can be statically verified for safety by its consumer. Software-based fault isolation, which can enforce modularity efficiently, is used as the basis of the Omniware system <ref> [A + 96] </ref>. Finally, SPIN uses a language-based approach to achieve safety without sacrificing performance. The "pull" comes from the ad hoc collection of firewalls, Web proxies, multicast routers, mobile proxies, video gateways, etc. that perform user-driven computation at nodes "within" the network.
Reference: [B + 94] <author> T. Blackwell et al. </author> <title> Secure Short-Cut Routing in Mobile IP. </title> <booktitle> In 1994 Summer USENIX, </booktitle> <pages> pages 305-316, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1994. </year> <month> 7 </month>
Reference-contexts: Today, IP options are used to specify unusual datagram processing, typically for network monitoring or measurement, e.g., to control the route of a datagram from its source, record the route taken, and gather timing information. They have been previously used in attempts to accommodate diversity <ref> [B + 94] </ref>.
Reference: [B + 95a] <author> H. Balakrishnan et al. </author> <title> Improving TCP/IP Performance over Wireless Networks. </title> <booktitle> In 1st Intl. Conf. on Mobile Computing and Networking, </booktitle> <address> Berkeley, CA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Despite architectural injunctions against such practices, these nodes are flourishing, suggesting user and management demand for their services. Examples include application-neutral TCP snooping at wireless base stations <ref> [B + 95a] </ref>; "nomadic routers" that are interposed between an end system and the network [Kle95]; and application-specific service gateways that perform file caching and the transcoding of images [A + 95]. <p> It is clear that by using a scripting language to combine primitives, much of the functionality of the existing IP option suite can be subsumed. More ambitious experiments, e.g. those that mimic the application-level video gateway [A + 95] and TCP snooping <ref> [B + 95a] </ref>, are also possible. active options provide applications with a means to attach policy decisions to their data directly, rather than attempting to locate processing at pre-determined positions in the network.
Reference: [B + 95b] <author> B. Bershad et al. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In 15th Symp. on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: The aim is to accommodate the increasing diversity in networking (e.g. IPv6, mobility, multicasting, wireless media, etc.) by easing the process of innovation. This mirrors trends in extensible operating systems research, such as the Exokernel and SPIN <ref> [E + 95, B + 95b] </ref>, which facilitate application-specific customization of kernel functionality. 3 The active IP Option Our ultimate objective is to develop a new approach to networking based on active technologies. However, much can be learned by "retrofitting" active capabilities to the existing Internet. <p> The exokernel [E + 95] provides applications with very low-level access to the machine. It has been used to support application-specific safe message handlers (ASHs) [WEK96], which demonstrate the use of user-supplied code and on-the-fly compilation within the context of device drivers and packet filters. Alternatively, SPIN <ref> [B + 95b] </ref> is pursuing a language-based approach to safe kernel extensibility, and Scout [MP96] is providing automatic mechanisms for high-performance network processing based on the "path" abstraction. 5 Conclusions Our Tcl-based implementation of the active IP option has demonstrated a generic facility for programming the network.
Reference: [BCZ96] <author> S. Bhattacharjee, K. L. Calvert, and E. W. Zegura. </author> <title> On Active Networking and Congestion. </title> <type> Technical Report CIT-CC-96/02, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> Spring </month> <year> 1996. </year>
Reference-contexts: There is much work on mobile code systems, e.g. Java-based Web clients and servers, but such systems operate on an end-to-end basis, passing code across the network untouched. Under the banner of programmable networks, we are aware of SwitchWare, NetScript and an effort at Georgia Tech <ref> [SFG + 96, Yd96, BCZ96] </ref>. SwitchWare is based on a programmable ATM switch with user-selectable network services. Netscript is positioned as an agent-based programming language for managing networked systems remotely.
Reference: [Bor94] <author> Nathaniel Borenstein. </author> <title> Email with a Mind of its Own: The Safe-Tcl Language for Enabled Mail. </title> <booktitle> In IFIP International Conference, </booktitle> <address> Barcelona, Spain, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Our first language encoding is Tcl, which is processed by a stripped-down Tcl interpreter embedded within the kernel. It provides a restricted environment conceptually similar to that of Safe-Tcl <ref> [Bor94] </ref> 2 . User-level code may attach active options to outgoing IP packets by using the setsockopt system call. This makes them available across all sockets that support the Internet family of protocols, e.g. TCP, UDP, raw IP.
Reference: [Bra89] <author> R. Braden, Ed. </author> <title> Requirements for Internet Hosts Communication Layers. Request for Comments 1122, </title> <month> October </month> <year> 1989. </year>
Reference-contexts: Tcl, Java, and sandboxed portable object code) depending on the required performance versus ease of extensibility. The second option is used to query an active router for the languages it supports. For backwards compatibility, we rely on the RFC 1122 <ref> [Bra89] </ref> requirement that Internet hosts must silently ignore options they do not recognize. The active option processing model is shown in Figure 2.
Reference: [Cla88] <author> David D. Clark. </author> <title> The Design Philosophy of the DARPA Internet Protocols. </title> <booktitle> In SIGCOMM '88, </booktitle> <pages> pages 106-114, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: Subsequent packets can include code whose execution is dependent on this state. Connections in active networks can be more powerful than those of present day systems because the state left behind may be in the form of programs. Flows <ref> [Cla88] </ref>, which are somewhat "softer" than connections, could be realized with a similar scheme.
Reference: [CT90] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In SIGCOMM '90, </booktitle> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year> <note> ACM. </note>
Reference-contexts: We also anticipate changes to the organization of end-system software | in place of protocol "stacks", applications may use protocol "components" that can be specialized and composed to perform application-specific functions <ref> [CT90] </ref>. Acknowledgments We thank Frans Kaashoek for his helpful advice and comments, and Henry Houh for proofreading this manuscript. Sun Microsystems Inc. provided seed funding for this project.
Reference: [DH95] <author> S. Deering and R. Hinden. </author> <title> Internet Protocol, Version 6 (IPv6) Specification. Request For Comments 1883, </title> <month> December </month> <year> 1995. </year>
Reference-contexts: They have been previously used in attempts to accommodate diversity [B + 94]. Since the options mechanism is being revamped to be both more general and more efficient as part of IPv6 <ref> [DH95] </ref>, experimentation with it is timely. 3 active Option Fields and Processing The active IP option field (Figure 1) provides a mechanism for embedding a program fragment in an IP datagram. These fragments are then executed by active routers along the path taken by the datagram. <p> Our design addresses three high-level issues: how program fragments are embedded in packets; when they are processed; and what processing environment they may expect when they are evaluated. Two specific option codes which adhere to the generic type-length-value format of IP options <ref> [Pos81, DH95] </ref> are defined. The first is used to carry program fragments, which may be encoded in a variety of languages. An example fragment is shown in Figure 1. We expect a spectrum of encodings, from source-level through intermediate code to binary representations (e.g.
Reference: [E + 95] <author> D. R. Engler et al. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In 15th Symp. on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: The aim is to accommodate the increasing diversity in networking (e.g. IPv6, mobility, multicasting, wireless media, etc.) by easing the process of innovation. This mirrors trends in extensible operating systems research, such as the Exokernel and SPIN <ref> [E + 95, B + 95b] </ref>, which facilitate application-specific customization of kernel functionality. 3 The active IP Option Our ultimate objective is to develop a new approach to networking based on active technologies. However, much can be learned by "retrofitting" active capabilities to the existing Internet. <p> The exokernel <ref> [E + 95] </ref> provides applications with very low-level access to the machine. It has been used to support application-specific safe message handlers (ASHs) [WEK96], which demonstrate the use of user-supplied code and on-the-fly compilation within the context of device drivers and packet filters.
Reference: [Gos95] <author> J. Gosling. </author> <title> Java Intermediate Bytecodes. </title> <booktitle> In SIGPLAN Workshop on Intermediate Representations (IR95), </booktitle> <pages> pages 111-118, </pages> <address> San Francisco, CA, </address> <month> January </month> <year> 1995. </year> <journal> ACM. Appears in SIGPLAN Notices, </journal> <volume> 30, </volume> <month> 3 (March </month> <year> 1995). </year>
Reference-contexts: Our innovation is to leverage and extend these technologies for use within the network. 2 Although these technologies have been under development for some time, only recently have we begun to see work that addresses the issues of safety, mobility, and efficiency in concert. Java <ref> [Gos95] </ref> uses an intermediate code representation that is portable and can be statically verified for safety by its consumer. Software-based fault isolation, which can enforce modularity efficiently, is used as the basis of the Omniware system [A + 96].
Reference: [Kle95] <author> L. Kleinrock. </author> <title> Nomadic Computing (Keynote Address). </title> <booktitle> In 1st Intl. Conf. on Mobile Computing and Networking, </booktitle> <address> Berkeley, CA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Despite architectural injunctions against such practices, these nodes are flourishing, suggesting user and management demand for their services. Examples include application-neutral TCP snooping at wireless base stations [B + 95a]; "nomadic routers" that are interposed between an end system and the network <ref> [Kle95] </ref>; and application-specific service gateways that perform file caching and the transcoding of images [A + 95]. Our goal is to replace these ad hoc approaches with a generic capability that allows users to program their networks.
Reference: [KM87] <author> C. Kent and J. Mogul. </author> <title> Fragmentation Considered Harmful. </title> <booktitle> In SIGCOMM '87, </booktitle> <address> Stowe, VT, </address> <month> August </month> <year> 1987. </year> <note> ACM. </note>
Reference-contexts: The mtu script, for example, accumulates the link transmission unit (i.e. MTU) sizes along a path and then informs the source. It may be used as a component in path MTU discovery, which is known to have a measurable performance impact <ref> [KM87] </ref>. The script improves on current MTU discovery techniques by eliminating the need for a search based on ICMP error messages. It determines the MTU directly, and may be especially useful in IPv6, where fragmentation is the responsibility of the end node.
Reference: [MP96] <author> David Mosberger and Larry L. Peterson. </author> <title> Making Paths Explicit in the Scout Operating System. </title> <type> Technical Report TR 96-05, </type> <institution> Dept. of Computer Science, University of Arizona, </institution> <year> 1996. </year>
Reference-contexts: It has been used to support application-specific safe message handlers (ASHs) [WEK96], which demonstrate the use of user-supplied code and on-the-fly compilation within the context of device drivers and packet filters. Alternatively, SPIN [B + 95b] is pursuing a language-based approach to safe kernel extensibility, and Scout <ref> [MP96] </ref> is providing automatic mechanisms for high-performance network processing based on the "path" abstraction. 5 Conclusions Our Tcl-based implementation of the active IP option has demonstrated a generic facility for programming the network. The ability to tag a packet with a program fragment supports a spectrum of behaviors.
Reference: [N + 96] <author> B. Noble et al. </author> <title> Mobile Network Tracing (Draft RFC). </title> <type> Personal Communication, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: The probe fragment demonstrates a script that combines the previous two functions. Many other scripts are possible, and may be useful, for example, as a basis for gathering mobile network traces <ref> [N + 96] </ref>. 4 Related Work We believe our active option is the first use of computational objects within the IP network layer. There is much work on mobile code systems, e.g.
Reference: [Pos81] <author> J. Postel, Ed. </author> <title> Internet Protocol: DARPA Internet Program Protocol Specification. Request For Comments 791, </title> <month> September </month> <year> 1981. </year>
Reference-contexts: Our design addresses three high-level issues: how program fragments are embedded in packets; when they are processed; and what processing environment they may expect when they are evaluated. Two specific option codes which adhere to the generic type-length-value format of IP options <ref> [Pos81, DH95] </ref> are defined. The first is used to carry program fragments, which may be encoded in a variety of languages. An example fragment is shown in Figure 1. We expect a spectrum of encodings, from source-level through intermediate code to binary representations (e.g.
Reference: [SFG + 96] <author> J. Smith, D. Farber, C. Gunter, S. Nettles, D. Feldmeier, and W. Sincoskie. SwitchWare: </author> <title> Accelerating Network Evolution (White Paper). </title> <type> Personal communication, </type> <month> June </month> <year> 1996. </year>
Reference-contexts: There is much work on mobile code systems, e.g. Java-based Web clients and servers, but such systems operate on an end-to-end basis, passing code across the network untouched. Under the banner of programmable networks, we are aware of SwitchWare, NetScript and an effort at Georgia Tech <ref> [SFG + 96, Yd96, BCZ96] </ref>. SwitchWare is based on a programmable ATM switch with user-selectable network services. Netscript is positioned as an agent-based programming language for managing networked systems remotely.
Reference: [TGSK96] <author> D. L. Tennenhouse, S. J. Garland, L. Shrira, and M. F. Kaashoek. </author> <title> From Internet to ActiveNet. Request for Comments, TNS Group, </title> <publisher> MIT LCS, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: In advanced applications, the option program can eval the payload, thereby realizing the Active Network paradigm. In the next stage of our research, we intend to implement a Java-based capsule encoding, introduce active storage <ref> [TGSK96] </ref>, and experiment with safety and efficiency mechanisms such as on-the-fly compilation. We have used the active option to construct a set of network probing/discovery functions.
Reference: [TW96] <author> D. L. Tennenhouse and D. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <booktitle> In Proc. of Multimedia Computing and Networking 96, </booktitle> <address> San Jose, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: 1 Active Networks Traditional data networks passively transport bits from one end system to another. Ideally, the user data is transferred opaquely, with the role of computation within such networks being extremely limited, e.g., header processing in packet-switched networks and signaling in connection-oriented networks. Active Networks <ref> [TW96] </ref> break with tradition by allowing the network to perform customized computations on the user data. <p> Section 2 provides some background to motivate Active Networks and further details of our approach can be found in <ref> [TW96] </ref>. In section 3, we describe an implementation of the active IP option, a mechanism we are using to explore the issues associated with programming an active network. 2 Motivation Our work is motivated by both technology "push" and user "pull".
Reference: [WEK96] <author> Deborah A. Wallach, Dawson R. Engler, and M. Frans Kaashoek. ASHs: </author> <title> Application-specific handlers for high-performance messaging. </title> <booktitle> In SIGCOMM '96, </booktitle> <address> Stanford, CA, </address> <month> August </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: The exokernel [E + 95] provides applications with very low-level access to the machine. It has been used to support application-specific safe message handlers (ASHs) <ref> [WEK96] </ref>, which demonstrate the use of user-supplied code and on-the-fly compilation within the context of device drivers and packet filters.
Reference: [Yd96] <author> Y. Yemini and S. da Silva. </author> <title> Towards Programmable Networks (White Paper). </title> <type> Personal communication, </type> <month> April </month> <year> 1996. </year> <month> 8 </month>
Reference-contexts: There is much work on mobile code systems, e.g. Java-based Web clients and servers, but such systems operate on an end-to-end basis, passing code across the network untouched. Under the banner of programmable networks, we are aware of SwitchWare, NetScript and an effort at Georgia Tech <ref> [SFG + 96, Yd96, BCZ96] </ref>. SwitchWare is based on a programmable ATM switch with user-selectable network services. Netscript is positioned as an agent-based programming language for managing networked systems remotely.
References-found: 23

