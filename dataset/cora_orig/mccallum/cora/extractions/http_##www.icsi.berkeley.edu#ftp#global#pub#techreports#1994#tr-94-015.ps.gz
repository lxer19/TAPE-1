URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/tr-94-015.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/
Root-URL: http://www.icsi.berkeley.edu
Title: Designing and Integrating User Interfaces of Geographic Database Applications  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Agnes Voisard 
Date: March 1994  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-94-015  
Abstract: In this paper, we investigate the problem of designing graphical geographic database user interfaces (GDUIs) and of integrating them into a database management system (DBMS). Geographic applications may vary widely but they all have common aspects due to the spatial component of their data: Geographic data are not standard data and they require appropriate tools for (i) editing them (i.e., display and modify) and (ii) querying them. The conceptual problems encountered in designing GDUIs are partly due to the merger of two independent fields, geographic DBMSs on the one hand, and graphical user interfaces (GUIs) on the other hand. Although these areas have evolved considerably during the past ten years, only little effort has been made to understand the problems of connecting them in order to efficiently manipulate geographic data on a display. This issue raises the general problem of coupling a DBMS with specialized modules (in particular, the problem of strong vs. weak integration), and more generally of the role of a DBMS in a specific application. After giving the functionalities that a GDUI should provide, we study the possible conceptual integrations between a GUI and a DBMS. Finally, a map editing model as well as a general and modular GDUI architecture are presented. fl A previous version of this paper has been accepted for presentation at AVI'94, Bari, Italy, June 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Amann, V. Christophides, and M. Scholl. </author> <title> HyperPATH/O 2 : Integrating Hypermedia Systems with Object-Oriented Database Systems. </title> <booktitle> In Proc. of the DEXA Intl. Conf., </booktitle> <year> 1993. </year>
Reference-contexts: In particular, only one data model exist, and if the (virtual) external module needs special structures, these structures will be defined using the database model. This approach was chosen in <ref> [1] </ref> for instance. In the case of weak integration (Figure 1.b), two independent systems coexist: The DBMS on the one hand and the external module on the other hand, and the main problem is to build the connection between them.
Reference: [2] <editor> F. Bancilhon, C. Delobel, and P. Kanellakis, editors. </editor> <title> Building an Object-Oriented Database Systems: </title> <publisher> The Story of O 2 . Morgan Kaufmann, </publisher> <address> San Mateo (CA), </address> <year> 1991. </year> <month> 19 </month>
Reference-contexts: We focus here on GISs using a database management system (DBMS) as a support. Although DBMSs sometimes provide basic features for handling geographic data, they are usually not designed to manipulate them graphically in an efficient way. In addition, only a few of them <ref> [2, 24, 14] </ref> offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see [22, 7, 11]) and graphical manipulation [17, 8]. <p> Second, an orthogonal approach consisting of a map editing kernel [20] connected to the geographic DBMS GeO 2 [6] developed on top of the O 2 product <ref> [2] </ref>, whose basis was the map editing model presented in [29] and extended in [30]. <p> There is only one way to display an object (the idea is "One object from the disk to the screen"). On the other hand, the geographic application GeO 2 [6] (built using the O 2 product <ref> [2] </ref>) is an example of Case 2: With some GeO 2 objects is associated a "display" method programmed by the GeO 2 developers. In Case 1 (existence of an interface generator), the advantage is that the developer's task is obviously facilitated. <p> We finally proposed a model of a map editing kernel as well as a general architecture for GDUIs. This architecture has been used in a recent prototype [20], using on the one hand the O 2 DBMS <ref> [2] </ref> and the geographic layer GeO 2 [6], and on the other hand the X11/Motif environment [21, 18].
Reference: [3] <author> K. E. Brassel and R. Weibel. </author> <title> A Review and Conceptual Framework of Automated Map Generalization. </title> <journal> Intl. Journal on Geographical Information Systems (IJGIS), </journal> <volume> 2(3), </volume> <year> 1988. </year>
Reference-contexts: A well-known related problem is the problem of generalization <ref> [16, 3] </ref>. For instance, it allows one to modify the representation of geographic data according to the scale (e.g., for displaying them in a smaller space). This means that new cartographic objects have to be computed.
Reference: [4] <author> M. Breunig and A. Perkhoff. </author> <title> Data and System Integration for Geoscientific Data. </title> <booktitle> In Proc. Intl. Symposium on Spatial Data Handling (SDH), </booktitle> <year> 1992. </year>
Reference-contexts: This can be realized by a layer having a unified view of the two worlds, and could be defined using a language such as the FGD functional language <ref> [4] </ref>. Note that such a mapping is not an "1-1" mapping, but rather is a "m n" mapping (see Section 2). 15 4.3 Back to Map Display The model described above allows one to display maps in mapgets.
Reference: [5] <author> Bull, France. GoPATH 1.2.0, </author> <title> Documentation Volume of the Public Release, </title> <year> 1993. </year>
Reference-contexts: The user interface can be developed using graphic packages (such as GoPATH <ref> [5] </ref>, IlogViews [13], ...). The application is driven by the interface. Compared to the previous approach, the advantages here rely on the fact that the interface is adapted to the needs of geographic applications. <p> A more modular solution was chosen in the Godot system [10], developed on top of ObjectStore [15], whose GUI uses the GoPATH <ref> [5] </ref> package together with an "interactive interface" level. Moreover, as mentioned in the beginning in the case of index structures, it is sometimes not clear what actions should be performed by the DBMS and by the GUI. As another example take the zoom operation.
Reference: [6] <author> B. David, L. Raynal, G. Schorter, and V. Mansart. GeO2: </author> <title> Why Objects in a Geographical DBMS? In D. </title> <editor> Abel and B. C. Ooi, editors, </editor> <booktitle> Advances in Spatial Databases (SSD'93). Lecture Notes in Computer Science No. </booktitle> <volume> 692, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Second, an orthogonal approach consisting of a map editing kernel [20] connected to the geographic DBMS GeO 2 <ref> [6] </ref> developed on top of the O 2 product [2], whose basis was the map editing model presented in [29] and extended in [30]. <p> There is only one way to display an object (the idea is "One object from the disk to the screen"). On the other hand, the geographic application GeO 2 <ref> [6] </ref> (built using the O 2 product [2]) is an example of Case 2: With some GeO 2 objects is associated a "display" method programmed by the GeO 2 developers. In Case 1 (existence of an interface generator), the advantage is that the developer's task is obviously facilitated. <p> We finally proposed a model of a map editing kernel as well as a general architecture for GDUIs. This architecture has been used in a recent prototype [20], using on the one hand the O 2 DBMS [2] and the geographic layer GeO 2 <ref> [6] </ref>, and on the other hand the X11/Motif environment [21, 18].
Reference: [7] <author> M. Egenhofer. </author> <title> Spatial Query Languages. </title> <type> PhD thesis, </type> <institution> University of Maine, </institution> <year> 1991. </year>
Reference-contexts: In addition, only a few of them [2, 24, 14] offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see <ref> [22, 7, 11] </ref>) and graphical manipulation [17, 8]. However, to our knowledge, nothing has been done to understand in detail the problems of designing GUIs for geographic applications when connected to a DBMS.
Reference: [8] <author> M. Egenhofer and A. Frank. </author> <title> Towards a Spatial Query Language: User Interface Considerations. </title> <booktitle> In Proc. Intl. Conference on Very Large Data Bases (VLDB), </booktitle> <year> 1988. </year>
Reference-contexts: In addition, only a few of them [2, 24, 14] offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see [22, 7, 11]) and graphical manipulation <ref> [17, 8] </ref>. However, to our knowledge, nothing has been done to understand in detail the problems of designing GUIs for geographic applications when connected to a DBMS. One of these problems is that such a design involves geographic DBMS features as well as graphical tools.
Reference: [9] <editor> O. Deux et al. </editor> <title> The Story of O2. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <year> 1990. </year>
Reference-contexts: This work is based on our experiment: First, GOODS/O 2 [23], a GIS prototype built on top of the object-oriented system O 2 (version V1) <ref> [9] </ref>, whose user interface [28] was developed by extending the O 2 regular interface generator Looks [19]. <p> As an example of Case 1, we can cite the O 2 prototype <ref> [9] </ref> with its interface generator Looks [19]. Looks offers editors for each basic O 2 type (string, integer, bitmap, etc.) and for each O 2 constructor (tuple, set, list) called recursively, thus each O 2 8 object, even complex, can be displayed.
Reference: [10] <author> O. Gunther and W.-F. Riekert. </author> <title> The Design of GODOT: An Object-Oriented Geographic Information System. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(3), </volume> <year> 1993. </year>
Reference-contexts: To implement one of the first user interface of the Sequoia project [25] built on top of Postgres [26], a visualization software package (AVS) was chosen, which required the writing of an AVS-Postgres bridge (obviously very specific). A more modular solution was chosen in the Godot system <ref> [10] </ref>, developed on top of ObjectStore [15], whose GUI uses the GoPATH [5] package together with an "interactive interface" level. Moreover, as mentioned in the beginning in the case of index structures, it is sometimes not clear what actions should be performed by the DBMS and by the GUI.
Reference: [11] <author> R. H. Guting and M. Schneider. </author> <title> Realm-Based Spatial Data Types: The ROSE Algebra. </title> <type> Technical report, </type> <address> Fernuniversitat, Hagen, Germany, </address> <year> 1993. </year>
Reference-contexts: In addition, only a few of them [2, 24, 14] offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see <ref> [22, 7, 11] </ref>) and graphical manipulation [17, 8]. However, to our knowledge, nothing has been done to understand in detail the problems of designing GUIs for geographic applications when connected to a DBMS.
Reference: [12] <author> L. Haas and W. Cody. </author> <title> Exploiting Extensible DBMS in Integrated Geographic Information Systems. </title> <editor> In O. Gunther and H. J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases (SSD'91). Lecture Notes in Computer Science No. </booktitle> <volume> 525, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: Note that the way from strong to weak integration is gradual. For instance, a solution in between is to consider an 6 extensible DBMS (i.e., a DBMS with hooks for extensions at different levels, see <ref> [12] </ref>), so the DBMS plays the role of an integrator. In the case of strong integration, the potential of the underlying DBMS is exploited as much as possible, and all concepts are embedded within the same homogeneous environment.
Reference: [13] <author> Ilog. </author> <title> Ilog Views Version 1.1, Reference Manual, </title> <year> 1993. </year>
Reference-contexts: For instance, consider the problem of efficiently finding an object on the screen, and suppose the existence of an external package for displaying graphic objects, for instance the C++ graphic library Ilog Views <ref> [13] </ref>. Ilog Views defines indices on graphic data (thus in the GUI), although any geographic DBMS kernel now encompasses such a notion. Moreover, it is usually more adequately defined in a DBMS since it is made especially for geographic data. <p> The user interface can be developed using graphic packages (such as GoPATH [5], IlogViews <ref> [13] </ref>, ...). The application is driven by the interface. Compared to the previous approach, the advantages here rely on the fact that the interface is adapted to the needs of geographic applications. <p> We now plan to implement the map editing kernel using more sophisticated tools for displaying graphic objects (e.g., Ilog Views <ref> [13] </ref>), to integrate a powerful multiple representation mechanism, and to finally study the more general problem of integrating within the same environment a GDUI, many geographic DBMSs as well as other specialized systems (statistics package, expert system, etc.).
Reference: [14] <author> Ingres. </author> <title> Windows L4G. </title> <type> Technical report, </type> <institution> Ingres Corporation, </institution> <year> 1990. </year>
Reference-contexts: We focus here on GISs using a database management system (DBMS) as a support. Although DBMSs sometimes provide basic features for handling geographic data, they are usually not designed to manipulate them graphically in an efficient way. In addition, only a few of them <ref> [2, 24, 14] </ref> offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see [22, 7, 11]) and graphical manipulation [17, 8].
Reference: [15] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore Database System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10), </volume> <year> 1991. </year>
Reference-contexts: A more modular solution was chosen in the Godot system [10], developed on top of ObjectStore <ref> [15] </ref>, whose GUI uses the GoPATH [5] package together with an "interactive interface" level. Moreover, as mentioned in the beginning in the case of index structures, it is sometimes not clear what actions should be performed by the DBMS and by the GUI. As another example take the zoom operation.
Reference: [16] <author> W. Lichtner. </author> <title> Computer-Assisted Process of Cartographic Generalization in Topographic Maps. </title> <journal> Geoprocessing, </journal> <volume> 1, </volume> <year> 1979. </year>
Reference-contexts: A well-known related problem is the problem of generalization <ref> [16, 3] </ref>. For instance, it allows one to modify the representation of geographic data according to the scale (e.g., for displaying them in a smaller space). This means that new cartographic objects have to be computed.
Reference: [17] <author> M. Mainguenaud and M. A. Portier. CIGALES: </author> <title> A Graphical Query Language for Geographical Information Systems. </title> <booktitle> In Proc. Intl. Symposium on Spatial Data Handling (SDH), </booktitle> <year> 1990. </year>
Reference-contexts: In addition, only a few of them [2, 24, 14] offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see [22, 7, 11]) and graphical manipulation <ref> [17, 8] </ref>. However, to our knowledge, nothing has been done to understand in detail the problems of designing GUIs for geographic applications when connected to a DBMS. One of these problems is that such a design involves geographic DBMS features as well as graphical tools. <p> Provide the possibility to draw areas on the screen (e.g., a rectangle for a zoom or for a spatial selection, see below). Give the user the possibility to modify objects interactively (e.g., erase a bound ary between two polygons). Provide query language facilities, either graphically (e.g., <ref> [17] </ref>) or through a language (in a text editor) such as SQL extended to spatial concepts ([7]). Such a language has a tight connection with the GUI because of the interactive nature of queries in geographic databases.
Reference: [18] <author> OSF. </author> <title> Motif 1.0 programmer's guide. </title> <journal> OSF Journal, </journal> <year> 1989. </year>
Reference-contexts: This architecture has been used in a recent prototype [20], using on the one hand the O 2 DBMS [2] and the geographic layer GeO 2 [6], and on the other hand the X11/Motif environment <ref> [21, 18] </ref>.
Reference: [19] <author> D. Plateau, R. Cazalens, D. Lev^eque, J.C. Mamou, and B. Poyet. </author> <title> Building User Interfaces with the LOOKS Hyper-Objects System. </title> <booktitle> In Proc. Eurographics Workshop on Object-Oriented Graphics, </booktitle> <year> 1990. </year> <month> 20 </month>
Reference-contexts: This work is based on our experiment: First, GOODS/O 2 [23], a GIS prototype built on top of the object-oriented system O 2 (version V1) [9], whose user interface [28] was developed by extending the O 2 regular interface generator Looks <ref> [19] </ref>. Second, an orthogonal approach consisting of a map editing kernel [20] connected to the geographic DBMS GeO 2 [6] developed on top of the O 2 product [2], whose basis was the map editing model presented in [29] and extended in [30]. <p> As an example of Case 1, we can cite the O 2 prototype [9] with its interface generator Looks <ref> [19] </ref>. Looks offers editors for each basic O 2 type (string, integer, bitmap, etc.) and for each O 2 constructor (tuple, set, list) called recursively, thus each O 2 8 object, even complex, can be displayed.
Reference: [20] <author> P. Rigaux, M. Scholl, and A. Voisard. </author> <title> A Map Editing Kernel Implementation: Appli--cation to Multiple Scale Display. </title> <editor> In A. Frank and I. Campari, editors, </editor> <booktitle> Spatial Information Theory (COSIT'93). Lecture Notes in Computer Science No. </booktitle> <volume> 716, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Second, an orthogonal approach consisting of a map editing kernel <ref> [20] </ref> connected to the geographic DBMS GeO 2 [6] developed on top of the O 2 product [2], whose basis was the map editing model presented in [29] and extended in [30]. <p> In the worst case, if the scale is too small, the geographic object will disappear unless it has a "semantic importance" <ref> [20] </ref>. Simplify the contour of a 2-dimensional object (remove points on the border), or of a 1-dimensional object (drop points on a line). Simplify the display of geographic objects by using the concept of aggregation when there exists subobjects that represent a partition of the plane. <p> This proposal is independent of any underlying database model but is supposed to cooperate with one or many. The architecture presented below was used in previous development <ref> [20] </ref>. After describing the main modules of the GDUI, we come back to map display and we detail some features necessary for "advanced" map display. 4.1 A Model for Editing Maps Before presenting the editing model itself, we briefly describe maps in the database. <p> It can be the drawing of a map with symbols such as labels or icons (Figure 3). It is composed of graphic objects, which are not relevant here because they are implementation dependent. In the prototype <ref> [20] </ref>, presentations correspond exactly to images (no notion of stack). They are implemented as X/Motif "pixmaps", i.e., raster structures, for performance reasons (in particular, the 12 scroll and simple zoom operations already exist on pixmaps). <p> This problem is related to the classical time-space trade-off, which is especially relevant here because of the size of the objects involved. We finally proposed a model of a map editing kernel as well as a general architecture for GDUIs. This architecture has been used in a recent prototype <ref> [20] </ref>, using on the one hand the O 2 DBMS [2] and the geographic layer GeO 2 [6], and on the other hand the X11/Motif environment [21, 18].
Reference: [21] <author> R.W. Scheifler and J. Gettys. </author> <title> The X Window System. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 79-109, </pages> <year> 1986. </year>
Reference-contexts: This architecture has been used in a recent prototype [20], using on the one hand the O 2 DBMS [2] and the geographic layer GeO 2 [6], and on the other hand the X11/Motif environment <ref> [21, 18] </ref>.
Reference: [22] <author> M. Scholl and A. Voisard. </author> <title> Thematic Map Modeling. </title> <editor> In A. Buchmann et al, editor, </editor> <title> Design and Implementation of Large Spatial Databases (SSD'89). </title> <booktitle> Lecture Notes in Computer Science No. </booktitle> <volume> 409, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: In addition, only a few of them [2, 24, 14] offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see <ref> [22, 7, 11] </ref>) and graphical manipulation [17, 8]. However, to our knowledge, nothing has been done to understand in detail the problems of designing GUIs for geographic applications when connected to a DBMS. <p> As said before, GIS queries often deal with objects displayed on the screen, for example: "What is the appropriate subway route to go from here (clicked on the screen) to home?" In an object-oriented environment, some queries corresponding to (algebraic) operations on maps such as clipping, windowing, map overlay, etc.(see <ref> [22] </ref>) can be defined as methods invoked from a GUI.
Reference: [23] <author> M. Scholl and A. Voisard. </author> <title> Object-Oriented Database Systems for Geographic Applications: An Experiment With O 2 . In The O 2 Book, </title> <editor> F. Bancilhon, C. Delobel, P. Kanellakis (Eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1992. </year>
Reference-contexts: The goal of this paper is to investigate the problem of designing a geographic database user interface (GDUI), and to propose a toolkit-based solution that satisfies a large number of users. This work is based on our experiment: First, GOODS/O 2 <ref> [23] </ref>, a GIS prototype built on top of the object-oriented system O 2 (version V1) [9], whose user interface [28] was developed by extending the O 2 regular interface generator Looks [19]. <p> Then for designing a GDUI, the problem of choosing a type of integration still remains, and the two opposite approaches mentioned above can be considered: Either graphic concepts are embedded into the DBMS environment (such as in <ref> [23] </ref>) (Figure 2.a), or they are completely independent (such as in [29], Figure 2.b). In Figure 2.b.2, the GUI objects are stored in a database, which is not necessarily the one used to store the geographic objects.
Reference: [24] <author> S. Seitz and P. Schank. </author> <title> Picasso Widget Writer's Guide. </title> <type> Technical report, </type> <institution> UC Berkeley - ERL, </institution> <year> 1990. </year>
Reference-contexts: We focus here on GISs using a database management system (DBMS) as a support. Although DBMSs sometimes provide basic features for handling geographic data, they are usually not designed to manipulate them graphically in an efficient way. In addition, only a few of them <ref> [2, 24, 14] </ref> offer a customizable and extensible graphical user interface (GUI). As far as geographic applications are concerned, some work has been done in the area of spatial query languages (see [22, 7, 11]) and graphical manipulation [17, 8].
Reference: [25] <author> M. Stonebraker, J. Frew, and J. Dozier. </author> <title> The Sequoia 2000 Project. </title> <editor> In D. Abel and B. C. Ooi, editors, </editor> <booktitle> Advances in Spatial Databases (SSD'93). Lecture Notes in Computer Science No. </booktitle> <volume> 692, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: For instance, if the geographic interface is developed from scratch, a low level communication dialog has to be defined (e.g., using Unix sockets). Moreover, if the DBMS changes, the communication layer has to be reprogrammed. To implement one of the first user interface of the Sequoia project <ref> [25] </ref> built on top of Postgres [26], a visualization software package (AVS) was chosen, which required the writing of an AVS-Postgres bridge (obviously very specific).
Reference: [26] <author> M. Stonebraker and L. A. Rowe. </author> <title> The Design of Postgres. </title> <booktitle> In Proc. ACM SIGACT-SIGMOD, </booktitle> <pages> pages 340-355, </pages> <year> 1986. </year>
Reference-contexts: Moreover, if the DBMS changes, the communication layer has to be reprogrammed. To implement one of the first user interface of the Sequoia project [25] built on top of Postgres <ref> [26] </ref>, a visualization software package (AVS) was chosen, which required the writing of an AVS-Postgres bridge (obviously very specific). A more modular solution was chosen in the Godot system [10], developed on top of ObjectStore [15], whose GUI uses the GoPATH [5] package together with an "interactive interface" level.
Reference: [27] <institution> O2 Technology. O 2 Link, </institution> <year> 1992. </year> <note> Chapter 11 of the O 2 Documentation. </note>
Reference-contexts: The connection module, which is the interface between the DBMS and the main module, is in particular in charge of handling all exchanges with the DBMS when displaying and querying. In our previous prototype, this was done by O 2 link <ref> [27] </ref>, which handles exchanges between C++ and the O 2 C programming environment using import and export functions. It is clear that the connection module can be used for other applications (e.g., applications using statistics), in order to make the bridge between an external module and a DBMS.
Reference: [28] <author> A. Voisard. </author> <title> Programming Map Editors in GOODS/O 2 using Looks. </title> <type> Internal report, </type> <institution> projet Verso, INRIA. </institution> <note> In French, </note> <year> 1990. </year>
Reference-contexts: This work is based on our experiment: First, GOODS/O 2 [23], a GIS prototype built on top of the object-oriented system O 2 (version V1) [9], whose user interface <ref> [28] </ref> was developed by extending the O 2 regular interface generator Looks [19].
Reference: [29] <author> A. Voisard. </author> <title> Towards a Toolbox for Geographic User Interfaces. </title> <editor> In O. Gunther and H. J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases (SSD'91). Lecture Notes in Computer Science No. </booktitle> <volume> 525, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: Second, an orthogonal approach consisting of a map editing kernel [20] connected to the geographic DBMS GeO 2 [6] developed on top of the O 2 product [2], whose basis was the map editing model presented in <ref> [29] </ref> and extended in [30]. GISs are concerned with many different fields, such as planning, resource management, traffic control, etc., which may have an impact on the functionalities of a GUI (data input, cartography, animation, use of graphic tools for statistics, etc.). <p> Then for designing a GDUI, the problem of choosing a type of integration still remains, and the two opposite approaches mentioned above can be considered: Either graphic concepts are embedded into the DBMS environment (such as in [23]) (Figure 2.a), or they are completely independent (such as in <ref> [29] </ref>, Figure 2.b). In Figure 2.b.2, the GUI objects are stored in a database, which is not necessarily the one used to store the geographic objects. <p> In particular, the legend of different map layers should not interfere. It is obviously difficult to automatize the realization of such a constraint because it is related to human perception. In <ref> [29] </ref> four types of legend are proposed: Name (or label), symbol (or icon), statistics 16 and theme legend.
Reference: [30] <author> A. Voisard. </author> <title> Geographic Databases: From the Data Model to the User Interface. </title> <type> PhD thesis, </type> <institution> University of Paris at Orsay and INRIA, </institution> <year> 1992. </year> <note> In French. 21 </note>
Reference-contexts: Second, an orthogonal approach consisting of a map editing kernel [20] connected to the geographic DBMS GeO 2 [6] developed on top of the O 2 product [2], whose basis was the map editing model presented in [29] and extended in <ref> [30] </ref>. GISs are concerned with many different fields, such as planning, resource management, traffic control, etc., which may have an impact on the functionalities of a GUI (data input, cartography, animation, use of graphic tools for statistics, etc.). <p> At implementation time, the geometry of geographic objects usually corresponds to spatial data types. These are easily implementable using an extended-relational or an object-oriented DBMS <ref> [30] </ref>. In general, the following spatial data types are defined: Area (2-dimensional), line (1-dimensional) and point (0-dimensional), and operations such as intersection, adjacency, etc. are associated with these types. In Section 2, the notion of raster data such as satellite images was mentioned. <p> Operations on stacks such as shift-up or shift-down can be found in <ref> [30] </ref>. 4.1.4 Presentation A presentation is a view of an image-stack at a given time. It can be the drawing of a map with symbols such as labels or icons (Figure 3). It is composed of graphic objects, which are not relevant here because they are implementation dependent.
References-found: 30

