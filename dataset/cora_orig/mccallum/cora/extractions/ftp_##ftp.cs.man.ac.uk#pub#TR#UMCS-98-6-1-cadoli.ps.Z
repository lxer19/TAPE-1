URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-cadoli.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: email: fcadoli,aschaerfg@dis.uniroma1.it  e-mail: fpalopoli,vasileg@si.deis.unical.it  
Phone: 2.  
Title: np-spec: An Executable Specification Language for Solving all Problems in NP  
Author: Marco Cadoli Luigi Palopoli Andrea Schaerf Domenico Vasile 
Date: June 25, 1998  
Address: Via Salaria 113, I-00198 Roma, Italy,  I-87036 Rende (CS), Italy  
Affiliation: 1. Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza",  Dipartimento di Elettronica Informatica e Sistemistica Universita della Calabria  
Abstract-found: 0
Intro-found: 1
Reference: [CP98] <author> Marco Cadoli and Luigi Palopoli. </author> <title> Circumscribing datalog: expressive power and complexity. </title> <journal> Theoretical Computer Science, </journal> <volume> 193 </volume> <pages> 215-244, </pages> <year> 1998. </year>
Reference-contexts: The main distinctive features of np-spec are the following: * It has a completely defined semantics, which is based on an extension of datalog known as datalog CIRC , defined in <ref> [CP98] </ref>. * It has a precise connotation in terms of expressive power and computational complex ity. <p> In <ref> [CP98] </ref> it is proven that: * The data complexity of datalog CIRC , i.e., the input is the database and not the fact-free program, is always in NP. * The expressiveness of datalog CIRC is such that the language captures NP.
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Francisco, Ca, </address> <year> 1979. </year>
Reference-contexts: We start with an example of an np-spec specification, which helps us to highlight the main aspects of the language. The example concerns the famous "3-coloring" problem, which is well-known to be NP-complete (cf. e.g., <ref> [GJ79] </ref>), and is formally defined as follows. <p> Even with this small number of metapredicates we were able to specify in np-spec a number of problems in NP in a natural way, the most significant of which are (in square parentheses we have reported the reference number in the Garey and Johnson's list <ref> [GJ79] </ref>)): Integer knapsack [MP10]; Inequivalence of simple functions [PO15]; Register sufficiency [PO1]; Dynamic storage allocation [SR2]; Pruned trie space minimization [SR3]; Integral flow with multipliers [ND33]; Consecutive ones matrix augmentation [SR16]; Boyce-Codd normal form violation [SR29]; Quadratic Diophantine equations [AN8]; Generalized instant insanity [GP15]; Modal logic S5 satisfiability [LO13]; Code generation
Reference: [KM97] <author> Feliks Kluzniak and Miros lawa Mi lkowska. </author> <title> Spill a logic language for writing testable requirements specifications. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 28 </volume> <pages> 193-223, </pages> <year> 1997. </year>
Reference-contexts: Such limitation, which is characterized in an exact formal way (see Section 2.3), is one of the strengths of np-spec, together with the capability of a fully automatic translation (in kids a certain degree of interactivity is required). Another specification language proposed in the literature is Spill <ref> [KM97] </ref>. In few words, Spill is a typed subset of pure prolog. The main limitation with respect to prolog is the so-called groundness restriction: at run time, terms must not contain variables and they must be finite.
Reference: [Lif85] <author> V. Lifschitz. </author> <title> Computing circumscription. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence (IJCAI-85), </booktitle> <pages> pages 121-127, </pages> <year> 1985. </year>
Reference-contexts: As for datalog CIRC programs, their semantics originates from the formalism of circumscription, and takes into account partition of predicates into (P ; Q). Let T be a datalog CIRC program. A preorder among the Herbrand models of T is defined as follows. Definition 2.1 ((P ; Q)-minimal models, <ref> [Lif85] </ref>) Let M , N be two Herbrand models of a formula T .
Reference: [Smi90] <author> Douglas R. Smith. KIDS: </author> <title> A semi-automatic program development system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(9), </volume> <year> 1990. </year>
Reference-contexts: The second module parses the specification and generates a prolog "translation" of it. The two modules are then compiled together automatically. 7 3 Related Work The language np-spec is similar in spirit to the system kids <ref> [Smi90] </ref>, which produces the concrete implementation starting from the specification written in a logic language based on set theory.
Reference: [Ull88] <author> J. D. Ullman. </author> <booktitle> Principles of Database and Knowledge Base Systems, </booktitle> <volume> volume 1. </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: We also briefly address computational properties of datalog CIRC , which explain why np-spec is able to specify exactly all problems in NP. 2.1 Syntax of datalog CIRC First of all, we remind the syntax of datalog. A datalog program <ref> [Ull88] </ref> is a finite set of universally quantified function-free first-order definite formulae T , i.e., sentences of one of the forms reported below. a (X) b 1 (X 1 ); : : : ; b n (X n ) where n 0, a (X), b i (X i ) (1 i <p> The intersection of all the Herbrand models of a datalog program T is itself a model for T <ref> [vEK76, Ull88] </ref>. This model, denoted LM T , is called the least or minimum model of T . The semantics of a datalog program relies on its least model.
Reference: [vEK76] <author> M. H. van Emden and R. A. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year> <month> 8 </month>
Reference-contexts: The intersection of all the Herbrand models of a datalog program T is itself a model for T <ref> [vEK76, Ull88] </ref>. This model, denoted LM T , is called the least or minimum model of T . The semantics of a datalog program relies on its least model.
References-found: 7

