URL: http://www.cs.colostate.edu/~ftppub/TechReports/1997/tr97-110.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Self-Stabilizing Algorithm for Minimum Spanning Tree Construction  
Author: Gheorghe Antonoiu and Pradip K. Srimani 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  Germany,  
Affiliation: Computer Science Department Colorado State University  Passau,  
Date: May 20, 1997  August 26-29, 1997  
Note: Distributed  A somewhat abridged version of it will appear in the Proceedings of Euro-Par '97,  
Pubnum: Technical Report CS-97-110  
Abstract: Computer Science Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: [ADG92] <author> A. Arora, S. Dolev, and M. Gouda. </author> <title> Maintaining digital clocks in step. </title> <journal> Parallel Processing Letters, </journal> <volume> 1(1) </volume> <pages> 11-18, </pages> <year> 1992. </year>
Reference: [Agg94] <author> S. Aggrawal. </author> <title> Time optimal self-stabilizing spanning tree algorithms. </title> <type> Technical Report MIT/LCS/TR-632, </type> <institution> Massachusetts Institute of Technology, </institution> <month> May </month> <year> 1994. </year>
Reference: [AS95] <author> G. Antonoiu and P. K. Srimani. </author> <title> A self-stabilizing distributed algorithm to construct an arbitrary spanning tree of a connected graph. </title> <journal> Computers Mathematics and Applications, </journal> <volume> 30(9) </volume> <pages> 1-7, </pages> <month> September </month> <year> 1995. </year>
Reference: [BGW89] <author> G. M. Brown, M. G. Gouda, and C. L. Wu. </author> <title> Token systems that self-stabilize. </title> <journal> IEEE Trans. Comput., </journal> <volume> 38(6) </volume> <pages> 845-852, </pages> <month> June </month> <year> 1989. </year>
Reference: [CYH91] <author> N. S. Chen, H. P. Yu, and S. T. Huang. </author> <title> A self-stabilizing algorithm for constructing spanning trees. </title> <journal> Inf. Processing Letters, </journal> <volume> 39(3) </volume> <pages> 14-151, </pages> <year> 1991. </year>
Reference: [Dij74] <author> E. W. Dijkstra. </author> <title> Self-stabilizing systems in spite of distributed control. </title> <journal> Communications of the ACM, </journal> <volume> 17(11) </volume> <pages> 643-644, </pages> <month> November </month> <year> 1974. </year>
Reference-contexts: 1 Introduction Self-stabilization is a relatively new way of looking at system fault tolerance, especially it provides a "built-in-safeguard" against "transient failures" that might corrupt the data in a distributed system. The concept of self-stabilization was first introduced in <ref> [Dij74] </ref> and the possibility of using this concept for designing fault tolerant algorithms was first explored in [Lam84]. A distributed system can be considered as a set of computing elements, interconnected by a network of some fixed topology. These computing elements or nodes exchange information only through message passing. <p> Systems that reach a legitimate state starting from any illegitimate state in a finite number of steps are called self-stabilizing systems <ref> [Dij74] </ref> [Dij86]. Every node in a self-stabilizing system has a set of rules, each rule having two parts an antecedent (boolean condition) part and an action part. A node is said to be privileged if the antecedent part of some rule is true for that node. <p> Our purpose in this paper is to propose a self-stabilizing distributed algorithm for the MST problem in a symmetric graph and to prove its correctness using induction in an interesting way. Most self-stabilizing algorithms assume that there is a central daemon <ref> [Dij74] </ref> that decides which of the privileged nodes makes a move. In other words, the central daemon serializes the moves made by the privileged nodes, but the order in which the privileged nodes are chosen to make their moves is not known a priori.
Reference: [Dij86] <author> E. W. Dijkstra. </author> <title> A belated proof of self-stabilization. </title> <journal> J. of Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 5-6, </pages> <year> 1986. </year>
Reference-contexts: Systems that reach a legitimate state starting from any illegitimate state in a finite number of steps are called self-stabilizing systems [Dij74] <ref> [Dij86] </ref>. Every node in a self-stabilizing system has a set of rules, each rule having two parts an antecedent (boolean condition) part and an action part. A node is said to be privileged if the antecedent part of some rule is true for that node.
Reference: [FD92] <author> M. Flatebo and A. K. Datta. </author> <title> Two-State self-Stabilizing algorithms. </title> <booktitle> In Proceedings of the IPPS-92, </booktitle> <address> California, </address> <month> June </month> <year> 1992. </year>
Reference: [GH90] <author> M. Gouda and T. Herman. </author> <title> Stabilizing unison. </title> <journal> Inf. Processing Letters, </journal> <volume> 35(4) </volume> <pages> 171-175, </pages> <year> 1990. </year>
Reference: [HC92] <author> S.T. Huang and N.-S. Chen. </author> <title> A self-stabilizing algorithm for constructing breadth first trees. </title> <journal> Inf. Processing Letters, </journal> <volume> 41 </volume> <pages> 109-117, </pages> <month> January </month> <year> 1992. </year>
Reference: [HS84] <author> E. Horowitz and S. Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1984. </year>
Reference-contexts: MST of a given undirected connected edge-weighted graph is defined to be a spanning tree of the graph with minimum total weight of the edges <ref> [HS84] </ref>. Most of the communication issues in any distributed system including broadcasting, packet routing, resource allocation, deadlock resolution etc. involve maintaining a minimal spanning tree of the underlying symmetric graph of the system. <p> Let N (x) represent the set of all nodes adjacent to node x. Remark 2. If the weights fw ij g of a graph are unique (distinct), the graph has a unique MST <ref> [HS84] </ref>. To design a self-stabilizing algorithm for the MST of a graph, we introduce a new characterization of any path in a given graph.
Reference: [Lam84] <author> L. Lamport. </author> <title> Solved problems, unsolved problems, </title> <booktitle> and non-problems in con-currency. In Proceedings of the 3rd Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-11, </pages> <year> 1984. </year>
Reference-contexts: The concept of self-stabilization was first introduced in [Dij74] and the possibility of using this concept for designing fault tolerant algorithms was first explored in <ref> [Lam84] </ref>. A distributed system can be considered as a set of computing elements, interconnected by a network of some fixed topology. These computing elements or nodes exchange information only through message passing. Every node has a set of local variables whose contents specify the state of that node.
Reference: [MP88] <author> B. M. Maggs and S. A. Plotkin. </author> <title> Minimum-cost spanning tree as a path finding problem. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 291-293, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: In this paper, we assume that the graph is edge-weighted, i.e., each edge is assigned a unique nonzero positive weight. This assumption is for convenience of description only; if the edge weights are not unique, lexicographic information can be easily added to make them unique <ref> [MP88] </ref>. <p> Note that the shortest path between nodes a and d is (a; b; d) with length 7. Theorem 6. Consider a graph G with unique edge weights. An edge e ij is in the unique MST if and only if ij = w ij <ref> [MP88] </ref>. Proof. The proof is by contradiction; for details, see [MP88]. We use Remark 2 and Theorem 6 to develop our algorithm for MST construction. <p> Theorem 6. Consider a graph G with unique edge weights. An edge e ij is in the unique MST if and only if ij = w ij <ref> [MP88] </ref>. Proof. The proof is by contradiction; for details, see [MP88]. We use Remark 2 and Theorem 6 to develop our algorithm for MST construction. First, we can safely assume the edge weights to be unique; this is no restriction since if not, we can easily add lexicographic information to make them unique [MP88]. <p> proof is by contradiction; for details, see <ref> [MP88] </ref>. We use Remark 2 and Theorem 6 to develop our algorithm for MST construction. First, we can safely assume the edge weights to be unique; this is no restriction since if not, we can easily add lexicographic information to make them unique [MP88]. Second, if a distributed algorithm can compute the ff ij values for all nodes, we can add an additional data structure i at each node i that keeps track of the MST edges incident on node i, i.e., i = fkj the edge e ik 2 M ST g.
Reference: [Sch93] <author> M. Schneider. </author> <title> Self-stabilization. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(1) </volume> <pages> 45-67, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: A node is said to be privileged if the antecedent part of some rule is true for that node. Recently there has been a spurt of research in designing self-stabilizing distributed graph algorithms for many applications [GH90,SS92,BGW89,FD92,ADG92]; a good survey of self-stabilizing algorithms can be found in <ref> [Sch93] </ref>. One of the most fundamental structures that is very essential in many distributed applications is the minimum spanning tree (MST) of a given undirected connected ? A somewhat abridged version of it will appear in the Proceedings of Euro-Par '97, Passau, Germany, August 26-29, 1997 edge-weighted graph.
Reference: [SS92] <author> S. Sur and P. K. Srimani. </author> <title> A self-stabilizing distributed algorithm to construct BFS spanning tress of a symmetric graph. Parallel Processing Letters, </title> <address> 2(2,3):171-180, </address> <month> September </month> <year> 1992. </year>
References-found: 15

