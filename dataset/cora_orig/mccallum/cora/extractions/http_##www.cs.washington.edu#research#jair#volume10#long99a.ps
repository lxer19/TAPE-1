URL: http://www.cs.washington.edu/research/jair/volume10/long99a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/contents/v10.html
Root-URL: http://www.cs.washington.edu
Email: d.p.long@dur.ac.uk maria.fox@dur.ac.uk  
Title: Efficient Implementation of the Plan Graph in STAN  
Author: Derek Long Maria Fox 
Address: Durham, UK  
Affiliation: Department of Computer Science University of  
Note: Journal of Artificial Intelligence Research 10 (1999) 87-115 Submitted 9/98; published 2/99  
Abstract: Stan is a Graphplan-based planner, so-called because it uses a variety of STate ANalysis techniques to enhance its performance. Stan competed in the AIPS-98 planning competition where it compared well with the other competitors in terms of speed, finding solutions fastest to many of the problems posed. Although the domain analysis techniques Stan exploits are an important factor in its overall performance, we believe that the speed at which Stan solved the competition problems is largely due to the implementation of its plan graph. The implementation is based on two insights: that many of the graph construction operations can be implemented as bit-level logical operations on bit vectors, and that the graph should not be explicitly constructed beyond the fix point. This paper describes the implementation of Stan's plan graph and provides experimental results which demonstrate the circumstances under which advantages can be obtained from using this implementation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Blum, A., & Furst, M. </author> <year> (1997). </year> <title> Fast Planning through Planning Graph Analysis. </title> <journal> Artificial Intelligence, </journal> <volume> 90, </volume> <pages> 281-300. </pages>
Reference-contexts: 1. Introduction Stan is a domain-independent planner for STRIPS domains, based on the graph construction and search method of Graphplan <ref> (Blum & Furst, 1997) </ref>. Its name is derived from the fact that it performs a number of preprocessing analyses, or STate ANalyses, on the domain before planning, using the Type Inference Module Tim described by Fox and Long (1998). <p> In this paper we describe the spike and wave front mechanisms and provide experimental results indicating the performance advantages obtained. 2. The Spike Graph Structure Graphplan <ref> (Blum & Furst, 1997) </ref> uses constraint satisfaction techniques to search a layered graph which represents a compressed reachability analysis of a domain. The layers correspond to snapshots of possible states at instants on a time line from the initial to the goal state. <p> We show the efficiency of graph construction in Stan by showing relative performance figures for Stan and the competition version of Ipp in several of the competition domains and two further standard bench mark domains. These are the Graphplan version of the Travelling Salesman domain <ref> (Blum & Furst, 1997) </ref>, which uses a complete graph and is referred to here as the Complete-Graph Travelling Salesman domain, and the Ferry domain available in the PDDL release.
Reference: <author> Fox, M., & Long, D. </author> <year> (1998). </year> <title> The Automatic Inference of State Invariants in TIM. </title> <journal> JAIR, </journal> <volume> 9, </volume> <pages> 317-371. </pages>
Reference-contexts: 100 1000 10000 100000 STAN 3 3 3 10 1000 100000 10 100 1000 10000 100000 STAN no wf STAN with wf 3 3 3 111 Long & Fox 100 10000 1e+06 1e+08 1e+10 IPP STAN 3 3 3 lems of 10-20 cities. ploiting the resource analysis techniques of Tim <ref> (Fox & Long, 1998) </ref>, whilst a significant proportion of the advantage is obtained from the use of the wave front, as Figure 20 shows. <p> The second set of data shows the advantages obtained during the search of the plan graph by using the wave front. Stan also employs the state invariant inference machinery of Tim <ref> (Fox & Long, 1998) </ref>, but in version 2 the integration of the invariants into the graph construction process is still only partial. We observe that the mutex relations generated in the Complete-Graph TSP, in particular, are almost entirely domain invariants of the kind inferred by Tim.
Reference: <author> Kambhampati, S. </author> <year> (1998). </year> <title> EBL and DDB for Graphplan. </title> <type> Tech. rep. ASU CSE TR 98-008, </type> <institution> Arizona State University. </institution>
Reference: <author> Kambhampati, S. </author> <year> (1999). </year> <title> On the Relations Between Intelligent Backtracking and Explanation Based Learning in Planning and CSP. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 105 (1-2). </pages>
Reference: <author> Koehler, J., Nebel, B., & Dimopoulos, Y. </author> <year> (1997). </year> <title> Extending Planning Graphs to an ADL Subset. </title> <booktitle> In Proceedings of 4th European Conference on Planning. </booktitle>
Reference-contexts: The wave front mechanism allows Stan to solve very large problem instances using a fraction of the time and space consumed by Graphplan and Ipp <ref> (Koehler, Nebel, & Dimopoulos, 1997) </ref>. For example, using a heuristic discussed in Section 5.1, Stan can solve the 10-disc Towers of Hanoi problem (a 1023 step plan) in less than 9 minutes.
Reference: <author> Smith, D., & Weld, D. </author> <year> (1998). </year> <title> Incremental Graphplan. </title> <type> Tech. rep. TR 98-09-06, </type> <institution> University of Washington. </institution> <month> 115 </month>
References-found: 6

