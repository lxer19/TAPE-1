URL: ftp://theory.lcs.mit.edu/pub/classes/18.415/notes-online.ps
Refering-URL: http://theory.lcs.mit.edu/~goemans/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On-Line Algorithms  
Author: Lecturer: Michel X. Goemans 
Date: September 1994  
Note: 18.415/6.854 Advanced Algorithms  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> L. Belady. </author> <title> A study of replacement algorithms for virtual storage computers. </title> <journal> IBM Syst. J., </journal> <volume> 5 </volume> <pages> 78-101, </pages> <year> 1966. </year>
Reference-contexts: We consider an off-line algorithm which we call longest forward distance or LFD. When LFD must service a page fault it removes the page, among the pages currently in memory, whose next request comes last. Theorem 2 (Belady <ref> [1] </ref>) LFD is an optimal off-line algorithm for paging. Proof: By contradiction: assume that there is an algorithm MIN superior to LFD. Let = 1 2 : : : n be a sequence so that C LFD () &gt; C MIN ().
Reference: [2] <author> S. Ben-David, A. Borodin, R. Karp, G. Tardos, and A. Wigderson. </author> <title> On the power of randomization in on-line algorithms. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 2-14, </pages> <year> 1990. </year>
Reference-contexts: Online-14 8 Types of Adversaries In this section, we discuss various types of adversaries for on-line algorithms and their relative power. The definitions and results in this and the following section are due to Ben-David, Borodin, Karp, Tardos, and Wigderson <ref> [2] </ref>. So far, we have analyzed the performance of a randomized on-line algorithm A against an oblivious adversary Q. Q knows the distribution over deterministic algorithms that A is using, but must generate a request sequence without knowledge of the results of A's coin tosses.
Reference: [3] <author> P. Berman, H. Karloff, and G. Tardos. </author> <title> A competitive three-server algorithm. </title> <booktitle> In Proceedings of the 1st ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1990. </year>
Reference-contexts: Harmonic is competitive as stated below. Theorem 21 (Grove [11]) Harmonic is ( 5 4 k2 k 2k)-competitive against an adap tive on-line adversary. Before this fairly recent result, Harmonic was only known to be 3 17000 -competitive for k = 3 <ref> [3] </ref> and 3-competitive for 2 servers [6]. There is a known lower bound for this algorithm. Specifically, for some adaptive on-line adversary Q, we know that C H (Q) = 2 C Q (H), (where H denotes Har monic) so we can't hope to do better than 2 -competitiveness.
Reference: [4] <author> M. Chrobak and L. Larmore. </author> <title> On fast algorithms for two servers. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 607-614, </pages> <year> 1991. </year>
Reference-contexts: The work function algorithm is also known to be 2-competitive [7]. There has also been work on developing competitive algorithms for 2 servers which are "fast" in the sense that they perform only a constant amount of work per request <ref> [12, 4, 14] </ref>. k = jV j 1 . Then the algorithm Balance, described later, is k-competitive [16].
Reference: [5] <author> M. Chrobak and L. Larmore. </author> <title> An optimal on-line algorithm for k-servers on trees. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(1) </volume> <pages> 144-148, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: A variation of Balance is also known to be 10-competitive for the case k = 2 (Irani and Rubinfeld [12]). 11.2.2 Results for specific metric spaces paging For paging, we've already seen a k-competitive algorithm. line, tree For these configurations, there is a k-competitive deterministic algorithm <ref> [5] </ref>. circle For points on the circle, there is a deterministic k 3 -competitive algorithm. Online-24 11.2.3 Greedy The most obvious on-line algorithm for the k-server problem is Greedy, in which a given request is serviced by whichever server is closest at the time. <p> This would result in a "small" expected cost. However, by a similar argument, we would expect a larger expected cost if n (a) is small. 13 A k-competitive, deterministic algorithm for trees The results of this section are due to Chrobak and Larmore <ref> [5] </ref>. Let (V; E) be a tree (an undirected graph without cycles) with a positive distance function on each edge. We view each edge, e; as an actual segment of length d (e).
Reference: [6] <author> M. Chrobak and L. Larmore. </author> <title> HARMONIC is 3-competitive for 2 servers. </title> <journal> Theoretical Computer Science, </journal> <volume> 98 </volume> <pages> 339-346, </pages> <year> 1992. </year>
Reference-contexts: Harmonic is competitive as stated below. Theorem 21 (Grove [11]) Harmonic is ( 5 4 k2 k 2k)-competitive against an adap tive on-line adversary. Before this fairly recent result, Harmonic was only known to be 3 17000 -competitive for k = 3 [3] and 3-competitive for 2 servers <ref> [6] </ref>. There is a known lower bound for this algorithm. Specifically, for some adaptive on-line adversary Q, we know that C H (Q) = 2 C Q (H), (where H denotes Har monic) so we can't hope to do better than 2 -competitiveness.
Reference: [7] <author> M. Chrobak and L. Larmore. </author> <title> The server problem and on-line games. </title> <editor> In D. Sleator and L. McGeoch, editors, </editor> <booktitle> On-line algorithms, volume 7 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 11-64. </pages> <publisher> AMS, </publisher> <year> 1992. </year>
Reference-contexts: Very recently, it was shown by Koutsoupias and Papadimitriou [15] that the so-called work-function algorithm of Chrobak and Larmore <ref> [7] </ref> is 2k 1-competitive. It is an open problem whether the same algorithm is in fact k-competitive. 11.2.1 Results for specific k k = 1 This case is trivial, since there is never any choice about which server to send. <p> Even with this small k, the algorithm is nontrivial and would make a challenging exercise. The work function algorithm is also known to be 2-competitive <ref> [7] </ref>. There has also been work on developing competitive algorithms for 2 servers which are "fast" in the sense that they perform only a constant amount of work per request [12, 4, 14]. k = jV j 1 . Then the algorithm Balance, described later, is k-competitive [16]. <p> The algorithm was proposed by Chrobak and Larmore <ref> [7] </ref> but they were only able to show that it is 2-competitive when k = 2. The following proof is due to Koutsoupias and Papadimitriou [15]. Before this result was obtained, no algorithm was known to have a competitive ratio which was polynomial in k for an arbitrary metric space.
Reference: [8] <author> D. Coppersmith, P. Doyle, P. Raghavan, and M. Snir. </author> <title> Random walks on weighted graphs, and application to on-line algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 40 </volume> <pages> 421-453, </pages> <year> 1993. </year> <note> A preliminary version appeared in the Proceedings of the 22nd STOC, 369-378, </note> <year> 1990. </year>
Reference-contexts: that a marked page is never removed from fast memory by LRU, notice that each marked page has been requested after the last request to any unmarked page. 14 Electric Network Theory We will use electric network theory for a randomized k-server algorithm due to Coppersmith, Doyle, Raghavan, and Snir <ref> [8] </ref>. Their algorithm will be k-competitive against an adaptive on-line adversary for a subclass of metrics.
Reference: [9] <author> A. Fiat, R. M. Karp, M. Luby, L. A. McGeoch, D. D. Sleator, and N. E. Young. </author> <title> Competitive paging algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 685-699, </pages> <year> 1991. </year>
Reference-contexts: In proving this, we will introduce a general method of proving lower bounds for randomized competitive algorithms against an oblivious adversary. Both results are due to Fiat et al. <ref> [9] </ref>. 6 Analysis of the Marking Algorithm Theorem 5 Marking is a 2H k -competitive paging algorithm against any oblivious adversary, where H k = P k 1 i is the kth harmonic number.
Reference: [10] <author> A. Fiat, Y. Rabani, and Y. Ravid. </author> <title> Competitive k-server algorithms. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: Open Problem: Whether or not there exists a k-competitive deterministic algorithm for the general k-server problem. In fact, for some time it was unknown whether there exists a f (k)-competitive algorithm, where f (k) is a function of k. Theorem 20 Fiat, Rabani and Ravid <ref> [10] </ref> proved by induction on k that there is an f (k)-competitive algorithm for the general k-server problem, where f (k) = e O (k log k) .
Reference: [11] <author> E. Grove. </author> <title> The harmonic online k-server algorithm is competitive. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 260-266, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Note, once again, that in the special case of paging this is identical to Random. Harmonic is competitive as stated below. Theorem 21 (Grove <ref> [11] </ref>) Harmonic is ( 5 4 k2 k 2k)-competitive against an adap tive on-line adversary. Before this fairly recent result, Harmonic was only known to be 3 17000 -competitive for k = 3 [3] and 3-competitive for 2 servers [6]. There is a known lower bound for this algorithm.
Reference: [12] <author> S. Irani and R. Rubinfeld. </author> <title> A competitive 2-server algorithm. </title> <journal> Information Processing Letters, </journal> <volume> 39 </volume> <pages> 85-91, </pages> <year> 1991. </year>
Reference-contexts: The work function algorithm is also known to be 2-competitive [7]. There has also been work on developing competitive algorithms for 2 servers which are "fast" in the sense that they perform only a constant amount of work per request <ref> [12, 4, 14] </ref>. k = jV j 1 . Then the algorithm Balance, described later, is k-competitive [16]. <p> Then the algorithm Balance, described later, is k-competitive [16]. A variation of Balance is also known to be 10-competitive for the case k = 2 (Irani and Rubinfeld <ref> [12] </ref>). 11.2.2 Results for specific metric spaces paging For paging, we've already seen a k-competitive algorithm. line, tree For these configurations, there is a k-competitive deterministic algorithm [5]. circle For points on the circle, there is a deterministic k 3 -competitive algorithm. <p> A slight variation of Balance in which one minimizes D x + 2d (x; i) can be shown to be 10-competitive for k = 2 <ref> [12] </ref>. 12 The Randomized Algorithm, Harmonic While Greedy doesn't work very well on its own, the intuition of sending the closest server can be useful if we randomize it slightly.
Reference: [13] <author> D. Johnson. </author> <title> Fast algorithms for bin packing. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 8 </volume> <pages> 272-314, </pages> <year> 1974. </year> <month> Online-51 </month>
Reference-contexts: 1 Introduction The first topic we will cover in this course is on-line algorithms. The concept of online algorithms has been around for quite some time (it was for example present in the seventies in the bin packing literature, see <ref> [13, 20] </ref>), but it has been a fairly hot research area since the publication of the landmark paper by Sleator and Tarjan [19] in 1985. Typically when we solve problems and design algorithms we assume that we know all the data a priori.
Reference: [14] <author> J. M. Kleinberg. </author> <title> On-line algorithms for robot navigation and server problems. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: The work function algorithm is also known to be 2-competitive [7]. There has also been work on developing competitive algorithms for 2 servers which are "fast" in the sense that they perform only a constant amount of work per request <ref> [12, 4, 14] </ref>. k = jV j 1 . Then the algorithm Balance, described later, is k-competitive [16].
Reference: [15] <author> E. Koutsoupias and C. Papadimitriou. </author> <title> On the k-server conjecture. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 507-511, </pages> <year> 1994. </year>
Reference-contexts: Theorem 20 Fiat, Rabani and Ravid [10] proved by induction on k that there is an f (k)-competitive algorithm for the general k-server problem, where f (k) = e O (k log k) . Very recently, it was shown by Koutsoupias and Papadimitriou <ref> [15] </ref> that the so-called work-function algorithm of Chrobak and Larmore [7] is 2k 1-competitive. It is an open problem whether the same algorithm is in fact k-competitive. 11.2.1 Results for specific k k = 1 This case is trivial, since there is never any choice about which server to send. <p> The algorithm was proposed by Chrobak and Larmore [7] but they were only able to show that it is 2-competitive when k = 2. The following proof is due to Koutsoupias and Papadimitriou <ref> [15] </ref>. Before this result was obtained, no algorithm was known to have a competitive ratio which was polynomial in k for an arbitrary metric space.
Reference: [16] <author> M. Manasse, L. McGeoch, and D. Sleator. </author> <title> Competitive algorithms for server problems. </title> <journal> Journal of Algorithms, </journal> <volume> 11 </volume> <pages> 208-230, </pages> <year> 1990. </year>
Reference-contexts: Online-23 11.2 Summary of known results We already have results about paging that can be used for the k-server problem. Positive results about paging can't be generalized, but since paging is a case of the k-server problem, the lower bound for paging also applies in general. Theorem 19 (Manasse-McGeoch-Sleator <ref> [16] </ref>) For no metric spaces is there a deterministic ff-competitive algorithm for the k-server problem such that ff &lt; k. The general proof is similar to the previous proof with a uniform distance metric. However, in the case of paging we actually have a k-competitive deterministic on-line algorithm. <p> Thus any reasonable algorithm is 1-competitive. k = 2 There is a 2-competitive deterministic algorithm for this case, due to Manasse, McGeoch and Sleator <ref> [16] </ref>. Even with this small k, the algorithm is nontrivial and would make a challenging exercise. The work function algorithm is also known to be 2-competitive [7]. <p> There has also been work on developing competitive algorithms for 2 servers which are "fast" in the sense that they perform only a constant amount of work per request [12, 4, 14]. k = jV j 1 . Then the algorithm Balance, described later, is k-competitive <ref> [16] </ref>.
Reference: [17] <author> L. McGeoch and D. Sleator. </author> <title> A strongly competitive randomized paging algorithm. </title> <journal> Algorithmica, </journal> <volume> 6 </volume> <pages> 816-825, </pages> <year> 1991. </year>
Reference-contexts: This completes the proof of Theorem 11. fl From Theorem 11, we see that Marking is optimal up to a factor of 2. An optimal (i.e. with competitive ration H k ) randomized on-line algorithm against any oblivious adversary has been obtained by McGeoch and Sleator <ref> [17] </ref>. Online-14 8 Types of Adversaries In this section, we discuss various types of adversaries for on-line algorithms and their relative power. The definitions and results in this and the following section are due to Ben-David, Borodin, Karp, Tardos, and Wigderson [2].
Reference: [18] <author> P. Raghavan and M. Snir. </author> <title> Memory vs. randomization in on-line algorithms. </title> <booktitle> In Proceedings of the 1989 ICALP Conference, </booktitle> <year> 1989. </year>
Reference-contexts: An even simpler randomized algorithm is Random, which, when needed, removes a uniformly selected page from the main algorithm's fast memory. We'll show Theorem 16 (Raghavan and Snir <ref> [18] </ref>) Random (R) is k-competitive against any adaptive on-line adversary Q. The proof of the theorem uses a potential function argument, which is a fundamental technique in establishing competitive ratios.
Reference: [19] <author> D. Sleator and R. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: The concept of online algorithms has been around for quite some time (it was for example present in the seventies in the bin packing literature, see [13, 20]), but it has been a fairly hot research area since the publication of the landmark paper by Sleator and Tarjan <ref> [19] </ref> in 1985. Typically when we solve problems and design algorithms we assume that we know all the data a priori. However in many practical situations this may not be true and rather than have the input in advance it may be presented to us as we proceed. <p> The analytic machinery we present will not demand that the inputs come from some known distribution, but instead will compare the performance of the on-line algorithm with that of the best o*ine algorithm. This notion of comparison is called competitive analysis and was introduced by Sleator and Tarjan <ref> [19] </ref>. Definition 1 An on-line algorithm A is ff-competitive if for all input sequences , C A () ffC MIN (), where C A () is the cost of the on-line strategy A for and C MIN () is the cost of the optimal o*ine algorithm for . <p> Hence they both must do a page fault. fl Remark 1 Notice that essentially the same argument goes for FIFO in order to show that FIFO is also k-competitive. The above theorem was proved by Sleator and Tarjan <ref> [19] </ref>. Notice that in the above proof we have not used explicitly what is the optimal o*ine strategy MIN. We have only related the cost of the on-line algorithm under consideration to a lower bound on the cost of any on-line algorithm.
Reference: [20] <author> A. Yao. </author> <title> New algorithms for bin packing. </title> <journal> Journal of the ACM, </journal> <volume> 27 </volume> <pages> 207-227, </pages> <year> 1980. </year> <month> Online-52 </month>
Reference-contexts: 1 Introduction The first topic we will cover in this course is on-line algorithms. The concept of online algorithms has been around for quite some time (it was for example present in the seventies in the bin packing literature, see <ref> [13, 20] </ref>), but it has been a fairly hot research area since the publication of the landmark paper by Sleator and Tarjan [19] in 1985. Typically when we solve problems and design algorithms we assume that we know all the data a priori.
References-found: 20

