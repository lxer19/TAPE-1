URL: ftp://ftp.cs.huji.ac.il/users/transis/tocs.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts95.html
Root-URL: http://www.cs.huji.ac.il
Title: The Totem Single-Ring Ordering and Membership Protocol  
Author: Y. AMIR, L. E. MOSER, P. M. MELLIAR-SMITH, D. A. AGARWAL, P. CIARFELLA 
Keyword: Categories and Subject Descriptors: C.2.1 [Computer-Communications Networks]: Network Architecture and Design|network communications; C.2.2 [Computer Communication Networks]: Network Protocols|protocol architecture; C.2.4 [Computer-Communication Networks]: Distributed Systems|network operating systems; C.2.5 [Computer-Communication Networks]: Local Networks|rings; D.4.4 [Operating Systems]: Communications Management| network communication; D.4.5 [Operating Systems]: Reliability|fault-tolerance; D.4.7 [Operating Systems]: Organization and Design|distributed systems General Terms: Protocols, Performance, Reliability Additional Key Words and Phrases: Flow control, membership, reliable delivery, token passing, total ordering, virtual synchrony  
Address: Santa Barbara  
Affiliation: University of California,  
Abstract: Fault-tolerant distributed systems are becoming more important but, in existing systems, maintaining the consistency of replicated data is quite expensive. The Totem single-ring protocol supports consistent concurrent operations by placing a total order on broadcast messages. This total order is derived from the sequence number in a token that circulates around a logical ring imposed on a set of processors in a broadcast domain. The protocol handles reconfiguration of the system when processors fail and restart or the network partitions and remerges. Extended virtual synchrony ensures that processors deliver messages and configuration changes to the application in a consistent total order system-wide. An effective flow control mechanism enables the Totem single-ring protocol to achieve message ordering rates significantly higher than the best prior total ordering protocols. Earlier versions of the Totem single-ring protocol appeared in the Proceedings of the IEE International Conference on Information Engineering, Singapore (December 1991) and in the Proceedings of the IEEE 13th International Conference on Distributed Computing Systems, Pittsburgh, PA (May 1993). This research was supported by NSF Grant No. NCR-9016361, ARPA Contract No. N00174-93-K-0097, and Rockwell CMC/State of California MICRO Grant No. 92-101. Authors' Addresses: Y. Amir, Computer Science Department, The Hebrew University of Jerusalem, Israel; L. E. Moser and P. M. Melliar-Smith, Department of Electrical and Computer Engineering, University of California, Santa Barbara, CA 93106; D. A. Agarwal, Lawrence Berkeley National Laboratory, Berkeley, CA 94720; P. Ciarfella, Cascade Communications Corporation, 5 Carlisle Road, Westford, MA 01886. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amir, Y., Dolev, D., Kramer, S., and Malki, D. </author> <title> Membership algorithms in broadcast domains. </title> <booktitle> In Proceedings of the 6th International Workshop on Distributed Algorithms (Haifa, </booktitle> <address> Israel, </address> <month> November </month> <year> 1992), </year> <pages> pp. </pages> <month> 292-312. </month> <title> The Totem Single-Ring Ordering and Membership Protocol 29 </title>
Reference-contexts: RELATED WORK Our work on the Totem protocol is based on our combined experience with two systems: the Trans and Total reliable ordered broadcast and membership protocols [12; 16] and the Transis group communication system <ref> [1; 2] </ref>. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [2] <author> Amir, Y., Dolev, D., Kramer, S., and Malki, D. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing (Boston, </booktitle> <address> MA, </address> <month> July </month> <year> 1992), </year> <pages> pp. 76-84. </pages>
Reference-contexts: Existing fault-tolerant distributed systems that address these problems are difficult to program, and expensive in the number of messages broadcast and/or computations required. Recent protocols for fault-tolerant distributed systems <ref> [2; 5; 9; 12; 17] </ref> employ the idea of placing a partial or total order on broadcast messages to simplify the application programs and to reduce the communication and computation costs. <p> RELATED WORK Our work on the Totem protocol is based on our combined experience with two systems: the Trans and Total reliable ordered broadcast and membership protocols [12; 16] and the Transis group communication system <ref> [1; 2] </ref>. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [3] <author> Amir, Y., Moser, L. E., Melliar-Smith, P. M., Agarwal, D. A., and Ciarfella, P. </author> <title> Fast message ordering and membership using a logical token-passing ring. </title> <booktitle> In Proceedings of the IEEE 13th International Conference on Distributed Computing Systems (Pittsburgh, </booktitle> <address> PA, </address> <month> May </month> <year> 1993), </year> <pages> pp. 551-560. </pages>
Reference-contexts: Its novel mechanisms prevent delivery of messages in different orders in different components of a partitioned network, and provide accurate information about which processors have delivered which messages. Earlier versions of the Totem single-ring protocol are described in <ref> [3; 11] </ref>. Programming the application is considerably simplified if messages are delivered in total order rather than only in causal order, or if messages are delivered in causal order rather than only in FIFO order.
Reference: [4] <author> Amir, Y., Moser, L. E., Melliar-Smith, P. M., Agarwal, D. A., and Ciarfella, P. </author> <title> The Totem single-ring ordering and membership protocol. </title> <type> Tech. Rep. 94-19, </type> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: In <ref> [4] </ref> we prove that the Delivery Order for Configuration C is a total order and that the Global Delivery Order is a total order. 4. <p> In [14] we demonstrated that virtual synchrony can be implemented on top of the more general extended virtual synchrony property provided by Totem. Proofs of correctness for the Totem single-ring protocol based on the service properties defined above can be found in <ref> [4] </ref>. 4 Note, however, that a definition based on pairwise delivery of messages does not suffice. We must ensure that the Global Delivery Order has no cycles of any length. 10 Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, P. Ciarfella 5.
Reference: [5] <author> Birman, K. P., and Renesse, R. V. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1994. </year>
Reference-contexts: Existing fault-tolerant distributed systems that address these problems are difficult to program, and expensive in the number of messages broadcast and/or computations required. Recent protocols for fault-tolerant distributed systems <ref> [2; 5; 9; 12; 17] </ref> employ the idea of placing a partial or total order on broadcast messages to simplify the application programs and to reduce the communication and computation costs. <p> The application programs may also need to know about configuration changes. Different processors may learn of a configuration change at different times, but they must form consistent views of the configuration change and of the messages that precede or follow the configuration change. Birman <ref> [5] </ref> devised the concept of virtual synchrony, which ensures that processors deliver messages consistently in the event of processor fail-stop faults. <p> In contrast, Totem handles network partitioning and re-merging by allowing each component of a partitioned system to continue operating, not just the component that contains a majority of the processors. Birman's Isis system <ref> [5] </ref>, and the more recent Horus system [19], have focused on process groups and the application program interface. Isis provides BCAST The Totem Single-Ring Ordering and Membership Protocol 5 or unordered messages, CBCAST or causally ordered messages, and ABCAST or totally ordered messages. <p> Virtual synchrony was devised by Birman <ref> [5] </ref> to ensure that view (configuration) changes occur at the same point in the message delivery history for all operational processors. Processors that are members of two successive views must deliver exactly the same set of messages in the first view.
Reference: [6] <author> Boxma, O. J., Levy, H., and Weststrate, J. A. </author> <title> Optimization of polling systems. </title> <booktitle> In Performance '90, Proceedings of the 14th IFIP WG 1.3 International Symposium on Computer Performance Modelling, Measurement and Evaluation (Edinburgh, </booktitle> <address> UK, </address> <month> September </month> <year> 1990), </year> <pages> pp. 1-17. </pages>
Reference-contexts: To minimize the latency, 26 Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, P. Ciarfella the rate at which the token visits a processor should be approximately proportional to the square root of the rate at which the processor broadcasts <ref> [6] </ref>. 8.1 The Data Structures Regular Token Fields The flow control mechanism depends on two fields of the regular token: * fcc: A count of the number of messages broadcast by all processors during the previous rotation of the token. * backlog: The sum of the number of new messages waiting
Reference: [7] <author> Chang, J. M., and Maxemchuk, N. F. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 3 (August </month> <year> 1984), </year> <pages> 251-273. </pages>
Reference-contexts: The Totem membership protocol uses the idea, first proposed for Transis, that the membership can be reduced in size to ensure termination. In <ref> [7] </ref> Chang and Maxemchuk described a reliable broadcast and ordering protocol that uses a token-based sequencer strategy. Unlike Totem, which requires that a processor must hold the token to broadcast a message, their protocol allows processors to broadcast messages at any time.
Reference: [8] <author> Fischer, M. J., Lynch, N. A., and Paterson, M. S. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM 32, </journal> <month> 2 (April </month> <year> 1985), </year> <pages> 374-382. </pages>
Reference-contexts: That the physical world is anti-symmetric must be an assumption. 3 This does not violate the impossibility result of Fischer, Lynch and Paterson <ref> [8] </ref> because the membership protocol allows the membership to decrease in order to reach consensus. 8 Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, P.
Reference: [9] <author> Kaashoek, M. F., and Tanenbaum, A. S. </author> <title> Group communication in the Amoeba distributed operating system. </title> <booktitle> In Proceedings of the IEEE 11th International Conference on Distributed Computing Systems (Arlington, </booktitle> <address> TX, </address> <month> May </month> <year> 1991), </year> <pages> pp. 882-891. </pages>
Reference-contexts: Existing fault-tolerant distributed systems that address these problems are difficult to program, and expensive in the number of messages broadcast and/or computations required. Recent protocols for fault-tolerant distributed systems <ref> [2; 5; 9; 12; 17] </ref> employ the idea of placing a partial or total order on broadcast messages to simplify the application programs and to reduce the communication and computation costs. <p> Isis, Trans, and Transis employ a similar strategy. In contrast, Totem constructs a total order on messages directly without constructing a partial order first. Mishra, Peterson and Schlichting [13] have developed a membership protocol based on the partial order of Psync. In <ref> [9] </ref> Kaashoek and Tanenbaum describe group communication in the Amoeba distributed operating system. One processor, called the sequencer, is responsible for placing a total order on messages. Processors send point-to-point messages to the sequencer, which assigns sequence numbers to messages and broadcasts them to the other processors.
Reference: [10] <author> Lamport, L. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: The identifiers of the regular and Configuration Change messages consist of configuration identifiers and message sequence numbers. We define a causal order that is a modification of Lamport's causal order <ref> [10] </ref> in that it applies to messages rather than events and is constrained to messages originated within a single configuration. This allows remerging of a partitioned network and joining of a failed processor without requiring all messages in the history to be delivered.
Reference: [11] <author> Melliar-Smith, P. M., Moser, L. E., and Agarwal, D. A. </author> <title> Ring-based ordering protocols. </title> <booktitle> In Proceedings of the IEE International Conference on Information Engineering (Singapore, </booktitle> <month> December </month> <year> 1991), </year> <pages> pp. 882-891. </pages>
Reference-contexts: Its novel mechanisms prevent delivery of messages in different orders in different components of a partitioned network, and provide accurate information about which processors have delivered which messages. Earlier versions of the Totem single-ring protocol are described in <ref> [3; 11] </ref>. Programming the application is considerably simplified if messages are delivered in total order rather than only in causal order, or if messages are delivered in causal order rather than only in FIFO order.
Reference: [12] <author> Melliar-Smith, P. M., Moser, L. E., and Agrawala, V. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 1 (January </month> <year> 1990), </year> <pages> 17-25. </pages>
Reference-contexts: Existing fault-tolerant distributed systems that address these problems are difficult to program, and expensive in the number of messages broadcast and/or computations required. Recent protocols for fault-tolerant distributed systems <ref> [2; 5; 9; 12; 17] </ref> employ the idea of placing a partial or total order on broadcast messages to simplify the application programs and to reduce the communication and computation costs. <p> The processor then installs the new ring, by delivering Configuration Change messages to the application. 2. RELATED WORK Our work on the Totem protocol is based on our combined experience with two systems: the Trans and Total reliable ordered broadcast and membership protocols <ref> [12; 16] </ref> and the Transis group communication system [1; 2]. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [13] <author> Mishra, S., Peterson, L. L., and Schlichting, R. D. </author> <title> A membership protocol based on partial order. </title> <booktitle> In Proceedings of the International Working Conference on Dependable Computing for Critical Applications (Tucson, </booktitle> <address> AZ, </address> <month> February </month> <year> 1991), </year> <pages> pp. 309-331. </pages>
Reference-contexts: Isis, Trans, and Transis employ a similar strategy. In contrast, Totem constructs a total order on messages directly without constructing a partial order first. Mishra, Peterson and Schlichting <ref> [13] </ref> have developed a membership protocol based on the partial order of Psync. In [9] Kaashoek and Tanenbaum describe group communication in the Amoeba distributed operating system. One processor, called the sequencer, is responsible for placing a total order on messages.
Reference: [14] <author> Moser, L. E., Amir, Y., Melliar-Smith, P. M., and Agarwal, D. A. </author> <title> Extended virtual synchrony. </title> <booktitle> In Proceedings of the IEEE 14th International Conference on Distributed Computing Systems (Poznan, </booktitle> <address> Poland, </address> <month> June </month> <year> 1994), </year> <pages> pp. 56-65. </pages>
Reference-contexts: Birman [5] devised the concept of virtual synchrony, which ensures that processors deliver messages consistently in the event of processor fail-stop faults. We have generalized this concept to extended virtual synchrony <ref> [14] </ref>, which applies to systems in which the network can partition and remerge, and in which processors can fail and restart with stable storage intact. The Totem single-ring protocol is designed to operate over a single broadcast domain, such as an Ethernet. <p> Thus, Totem delivers two Configuration Change messages, the first to introduce a smaller transitional configuration and the second to introduce the new regular configuration. In <ref> [14] </ref> we demonstrated that virtual synchrony can be implemented on top of the more general extended virtual synchrony property provided by Totem.
Reference: [15] <author> Moser, L. E., and Melliar-Smith, P. M. </author> <title> Probabilistic bounds on message delivery for the Totem single-ring protocol. </title> <booktitle> In Proceedings of the 15th IEEE Real-Time Systems Symposium (San Juan, </booktitle> <address> Puerto Rico, </address> <month> December </month> <year> 1994), </year> <pages> pp. 238-248. </pages>
Reference-contexts: We have also investigated the latency from origination to delivery of a message in agreed and safe order; a detailed analysis can be found in <ref> [15] </ref>. The right graph of Figure 9 shows the mean latency to agreed and safe delivery for Poisson arrivals at lower, more typical loads for 1024 byte messages.
Reference: [16] <author> Moser, L. E., Melliar-Smith, P. M., and Agrawala, V. </author> <title> Processor membership in asynchronous distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 5, </journal> <month> 5 (May </month> <year> 1994), </year> <pages> 459-473. </pages>
Reference-contexts: The processor then installs the new ring, by delivering Configuration Change messages to the application. 2. RELATED WORK Our work on the Totem protocol is based on our combined experience with two systems: the Trans and Total reliable ordered broadcast and membership protocols <ref> [12; 16] </ref> and the Transis group communication system [1; 2]. The Trans protocol uses positive and negative acknowledgments piggybacked onto broadcast messages and exploits the transitivity of positive acknowledgments to reduce the number of acknowledgments required.
Reference: [17] <author> Peterson, L. L., Buchholz, N. C., and Schlichting, R. D. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems 7, </journal> <month> 3 (August </month> <year> 1989), </year> <pages> 217-246. </pages>
Reference-contexts: Existing fault-tolerant distributed systems that address these problems are difficult to program, and expensive in the number of messages broadcast and/or computations required. Recent protocols for fault-tolerant distributed systems <ref> [2; 5; 9; 12; 17] </ref> employ the idea of placing a partial or total order on broadcast messages to simplify the application programs and to reduce the communication and computation costs. <p> The user interfaces of both Transis and Totem were inspired by the Isis user interface. The Psync protocol of Peterson, Buchholz and Schlichting <ref> [17] </ref> constructs a partial order on messages that can be converted into a total order. Isis, Trans, and Transis employ a similar strategy. In contrast, Totem constructs a total order on messages directly without constructing a partial order first.
Reference: [18] <author> Rajagopalan, B., and McKinley, P. K. </author> <title> A token-based protocol for reliable, ordered multi-cast communication. </title> <booktitle> In Proceedings of the 8th IEEE Symposium on Reliable Distributed Systems (Seattle, </booktitle> <address> WA, </address> <month> October </month> <year> 1989), </year> <pages> pp. 84-93. </pages> <note> [19] van Renesse, </note> <author> R., Hickey, T. M., and Birman, K. P. </author> <title> Design and performance of Horus: A lightweight group communications system. </title> <type> Tech. Rep. 94-1442, </type> <institution> Cornell University, Department of Computer Science, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: While the latency is good at low loads, it increases at high loads and in the presence of a failed processor. More closely related to Totem is the TPM protocol of Rajagopalan and McKin-ley <ref> [18] </ref>, which also uses a token to control broadcasting and sequencing of messages. The TPM protocol provides the safe delivery but not the agreed delivery that Totem provides.
References-found: 18

