URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-22.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: marc@cs.ruu.nl  
Title: Variations on Sweep Algorithms: efficient computation of extended viewsheds and class intervals  
Author: Marc van Kreveld 
Address: The Netherlands  
Affiliation: Dept. of Computer Science, Utrecht University  
Abstract: Two novel applications of the plane sweep paradigm are demonstrated, namely, for the computation of extended viewsheds on gridded DEMs and for class interval selection on TIN-based DEMs. In both cases, the efficiency of the plane sweep algorithm is significantly better than a straightforward approach. The algorithms are presented by first giving the plane sweep method as a general approach that requires some ingredients to make it work well. Adaptations to minimize additional storage use are also presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Arge. </author> <title> External-storage data structures for plane-sweep algorithms. </title> <type> Technical Report RS-94-16, BRICS, </type> <institution> Aarhus Univ., Denmark, </institution> <year> 1994. </year>
Reference-contexts: Objects are needed in the order of their y-coordinates, and only the objects that intersect the sweep line in its current position need be in main memory (in the status structure). There are simple ways to avoid storing the whole event list in main memory <ref> [1, 2, 28] </ref>. Divide-and-conquer algorithms usually require all objects to be in main memory at some moment, either during the first divide or during the last conquer step. Of course, plane sweep is not the appropriate solution to all problems.
Reference: [2] <author> L. Arge. </author> <title> The Buffer Tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. WADS, number 955 in Lect. Notes in Comp. Science, </booktitle> <pages> pages 334-345, </pages> <year> 1995. </year>
Reference-contexts: Objects are needed in the order of their y-coordinates, and only the objects that intersect the sweep line in its current position need be in main memory (in the status structure). There are simple ways to avoid storing the whole event list in main memory <ref> [1, 2, 28] </ref>. Divide-and-conquer algorithms usually require all objects to be in main memory at some moment, either during the first divide or during the last conquer step. Of course, plane sweep is not the appropriate solution to all problems.
Reference: [3] <author> F. Bartling and K. Hinrichs. </author> <title> A plane-sweep algorithm for finding a closest pair among convex planar objects. </title> <booktitle> In Proc. 9th Sympos. Theoret. Aspects Comput. Sci., volume 577 of Lecture Notes in Computer Science, </booktitle> <pages> pages 221-232. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects <ref> [3, 25, 26] </ref>, triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [4] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reporting and counting geometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. On the other hand, in GIS literature the plane sweep technique is known|in particular for map overlay <ref> [4, 28, 32] </ref>|but not yet a standard technique. Certainly, its use hasn't been recognized to its full extent. The purpose of this paper is to give two new applications of the plane sweep method, showing its importance and versatility once more. <p> The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay <ref> [4, 32] </ref>, nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [5] <author> T. Brinkhoff, H.-P. Kriegel, and B. Seeger. </author> <title> Efficient processing of spatial joins using R-trees. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <year> 1993. </year>
Reference-contexts: For certain more difficult tasks, lack of a dynamic geometric data structure prohibits the use of efficient plane sweep. In other cases, plane sweep is just one of several candidates for a problem. Map 4 overlay can also be solved using different techniques, like those based on R-trees <ref> [45, 5] </ref> or on geometric graph traversal [16]. Finally, there are cases where plane sweep is possible but not at all clever. To construct a minimum bounding box of a set of n objects one can use plane sweep and get an O (n log n) time solution.
Reference: [6] <author> K. Q. Brown. </author> <title> Comments on "Algorithms for reporting and counting geometric intersections". </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30:147-148, </volume> <year> 1981. </year>
Reference-contexts: We only need to be sure that if some event is the next one to be handled (reached by the sweep), then it must be in the event list. The underlying idea is the same as Brown's improvement in storage of the well-known Bentley-Ottmann sweep algorithm <ref> [6] </ref>. Consider the viewshed algorithm of Section 3. Instead of storing all O (n 2 ) events, we will only store the events caused by pixels that are not yet encountered, but which have a neighboring pixel that has been encountered.
Reference: [7] <author> P. A. Burrough. </author> <title> Principles of Geographical Information Systems for Land Resourses Assessment. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: For a good discussion on class interval selection, see Evans [14]. Several textbooks also describe the choice of class intervals, sometimes called setting contour levels or indicator thresholds <ref> [7, 27, 46, 47] </ref>. The algorithm to compute the density function sweeps a horizontal plane vertically through the TIN. For a TIN with n triangles the algorithm requires O (n log n) time. The sweep algorithm is the first one|to our knowledge|to sweep a horizontal plane through a TIN. <p> Finally, the density function can be used class interval selection by natural breaks in the data: They are the local minima of F (t). We refer to Burrough <ref> [7] </ref> and Evans [14] for other classification schemes. 5 Reducing the storage requirements In both of the given sweep algorithms, the event list requires far more storage than the status structure.
Reference: [8] <author> R. Cole. </author> <title> Searching and storing similar lists. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 202-220, </pages> <year> 1986. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location <ref> [8, 41, 42] </ref>, separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5.
Reference: [9] <author> R. Cole, M. Sharir, and C. K. Yap. </author> <title> On k-hulls and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 16 </volume> <pages> 61-77, </pages> <year> 1987. </year>
Reference-contexts: In total, this comes down to O (n 2 log n) time, whereas plane sweep only takes O (n log n) time. Some variants of the standard sweep are versions where a line rotates about a point <ref> [9, 15, 35] </ref>, and the three-dimensional version where a horizontal plane translates through space [39, 41]. There are also sweep algorithms where a "topological" line is used instead of a straight line [12].
Reference: [10] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: One can perform insertions and deletions in O (log n) time in T , inclusive the updating of the additional real numbers. The method of augmenting data structures, that is, maintaining the additional information in the tree, is described in several textbooks on algorithms (e.g. <ref> [10] </ref>). The event list consists of all angles at which the sweep half-line starts to intersect a pixel, at which the sweep half-line stops intersecting a pixel, and at which the sweep half-line goes through a pixel center.
Reference: [11] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, Part II. </title> <journal> Internat. J. Comput. Math., </journal> <volume> 13 </volume> <pages> 221-229, </pages> <year> 1983. </year>
Reference-contexts: If an object stops being intersected by the sweep line then delete it from the status structure. 7. Address the question of interest using the status structure. 8. If necessary, add new events to the event list. 9. Enddo of point sets [15], rectangle intersection <ref> [11] </ref>, shortest paths [36], median-of-squares statistics [13, 43], and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database [24], a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep.
Reference: [12] <author> H. Edelsbrunner and L. J. Guibas. </author> <title> Topologically sweeping an arrangement. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 38 </volume> <pages> 165-194, </pages> <year> 1989. </year> <note> Corrigendum in 42 (1991), 249-251. </note>
Reference-contexts: Some variants of the standard sweep are versions where a line rotates about a point [9, 15, 35], and the three-dimensional version where a horizontal plane translates through space [39, 41]. There are also sweep algorithms where a "topological" line is used instead of a straight line <ref> [12] </ref>. Implementation of plane sweep algorithms is not difficult, certainly not if existing code for balanced search trees, sorting, and geometric primitives is used. A major advantage of sweeping over other methods like divide-and-conquer is that not all objects need be in main memory simultaneously.
Reference: [13] <author> H. Edelsbrunner and D. L. Souvaine. </author> <title> Computing median-of-squares regression lines and guided topological sweep. </title> <journal> J. Amer. Statist. Assoc., </journal> <volume> 85 </volume> <pages> 115-119, </pages> <year> 1990. </year>
Reference-contexts: Address the question of interest using the status structure. 8. If necessary, add new events to the event list. 9. Enddo of point sets [15], rectangle intersection [11], shortest paths [36], median-of-squares statistics <ref> [13, 43] </ref>, and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database [24], a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep.
Reference: [14] <author> I. S. Evans. </author> <title> The selection of class intervals. </title> <journal> Trans. Inst. Br. Geogrs., </journal> <volume> 2 </volume> <pages> 98-124, </pages> <year> 1977. </year>
Reference-contexts: It is important that classes are chosen based on the whole elevation model, not the underlying data set of point samples, so that percentile classes ensure equal representation of each class on the isarithmic map. For a good discussion on class interval selection, see Evans <ref> [14] </ref>. Several textbooks also describe the choice of class intervals, sometimes called setting contour levels or indicator thresholds [7, 27, 46, 47]. The algorithm to compute the density function sweeps a horizontal plane vertically through the TIN. <p> The presense of auto-correlation in the data will cause that class intervals based on the sample will not classify in a fair way, unless random sampling was used. By interpolating between the data points this problem is overcome (see e.g. <ref> [14, 27] </ref>). A triangulation is one example of an interpolation method. We begin with a useful observation and a straightforward algorithm. Consider just one triangle in 3-space with vertices u; v; w. <p> Finally, the density function can be used class interval selection by natural breaks in the data: They are the local minima of F (t). We refer to Burrough [7] and Evans <ref> [14] </ref> for other classification schemes. 5 Reducing the storage requirements In both of the given sweep algorithms, the event list requires far more storage than the status structure.
Reference: [15] <author> H. Everett, J.-M. Robert, and M. van Kreveld. </author> <title> An optimal algorithm for the ( k)-levels, with applications to separation and transversal problems. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 38-46, </pages> <year> 1993. </year>
Reference-contexts: If an object stops being intersected by the sweep line then delete it from the status structure. 7. Address the question of interest using the status structure. 8. If necessary, add new events to the event list. 9. Enddo of point sets <ref> [15] </ref>, rectangle intersection [11], shortest paths [36], median-of-squares statistics [13, 43], and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database [24], a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep. <p> In total, this comes down to O (n 2 log n) time, whereas plane sweep only takes O (n log n) time. Some variants of the standard sweep are versions where a line rotates about a point <ref> [9, 15, 35] </ref>, and the three-dimensional version where a horizontal plane translates through space [39, 41]. There are also sweep algorithms where a "topological" line is used instead of a straight line [12].
Reference: [16] <author> U. Finke and K. H. Hinrichs. </author> <title> The quad view data structure a representation for planar subdivisions. </title> <booktitle> In Advances in Spatial Databases (proc. SSD'95), number 951 in Lect. Notes in Comp. Science, </booktitle> <pages> pages 29-46, </pages> <year> 1995. </year>
Reference-contexts: In other cases, plane sweep is just one of several candidates for a problem. Map 4 overlay can also be solved using different techniques, like those based on R-trees [45, 5] or on geometric graph traversal <ref> [16] </ref>. Finally, there are cases where plane sweep is possible but not at all clever. To construct a minimum bounding box of a set of n objects one can use plane sweep and get an O (n log n) time solution.
Reference: [17] <author> P. F. Fisher. </author> <title> Algorithm and implementation uncertainty in viewshed analysis. </title> <journal> Int. J. of GIS, </journal> <volume> 7 </volume> <pages> 331-347, </pages> <year> 1993. </year>
Reference-contexts: Rotating sweep algorithms have been described before, but not for viewshed computations, nor for elevation grids. The additional storage required by the algorithm is only O (n). There have been many other papers dealing with various aspects of viewshed analysis <ref> [20, 21, 17, 30, 31] </ref>. The second application of plane sweep involves the computation of class intervals on DEMs. These are needed for displaying isarithmic maps with appropriate isolines. We now assume that the elevation model is a triangulated irregular network, or TIN. The idea applies to grids as well.
Reference: [18] <author> P. F. Fisher. </author> <title> Stretching the viewshed. </title> <booktitle> In Proc. 6th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 725-738, </pages> <year> 1994. </year>
Reference-contexts: Both applications address a problem in the important GIS capability of geographical analysis. The first plane sweep algorithm that will be described solves various problems in view-shed analysis, such as the computation of extended viewsheds <ref> [18, 19] </ref> and visibility indices 1 [23, 44]. <p> This section presents efficient algorithms for viewshed computations on an n fi n grid. We don't just consider standard viewsheds, but also local and global horizon offsets like described by Fisher <ref> [18, 19] </ref>. He notes the use of computing more than just a binary grid of visible/non-visible information, such as, what distance a grid pixel is below the local horizon that obscures it (the local offset).
Reference: [19] <author> P. F. Fisher. </author> <title> Reconsideration of the viewshed function in terrain modelling. </title> <journal> Geographical Systems, </journal> <volume> 3 </volume> <pages> 33-58, </pages> <year> 1996. </year>
Reference-contexts: Both applications address a problem in the important GIS capability of geographical analysis. The first plane sweep algorithm that will be described solves various problems in view-shed analysis, such as the computation of extended viewsheds <ref> [18, 19] </ref> and visibility indices 1 [23, 44]. <p> This section presents efficient algorithms for viewshed computations on an n fi n grid. We don't just consider standard viewsheds, but also local and global horizon offsets like described by Fisher <ref> [18, 19] </ref>. He notes the use of computing more than just a binary grid of visible/non-visible information, such as, what distance a grid pixel is below the local horizon that obscures it (the local offset).
Reference: [20] <author> L. De Floriani, B. Falcidieno, C. Pienovi, D. Allen, and G. Nagy. </author> <title> A visibility-based model for terrain features. </title> <booktitle> In Proc. 2nd Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 235-250, </pages> <year> 1986. </year>
Reference-contexts: Rotating sweep algorithms have been described before, but not for viewshed computations, nor for elevation grids. The additional storage required by the algorithm is only O (n). There have been many other papers dealing with various aspects of viewshed analysis <ref> [20, 21, 17, 30, 31] </ref>. The second application of plane sweep involves the computation of class intervals on DEMs. These are needed for displaying isarithmic maps with appropriate isolines. We now assume that the elevation model is a triangulated irregular network, or TIN. The idea applies to grids as well.
Reference: [21] <author> L. De Floriani, G. Nagy, and E. Puppo. </author> <title> Computing a line-of-sight network on a terrain model. </title> <booktitle> In Proc. 5th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 672-681, </pages> <year> 1992. </year>
Reference-contexts: Rotating sweep algorithms have been described before, but not for viewshed computations, nor for elevation grids. The additional storage required by the algorithm is only O (n). There have been many other papers dealing with various aspects of viewshed analysis <ref> [20, 21, 17, 30, 31] </ref>. The second application of plane sweep involves the computation of class intervals on DEMs. These are needed for displaying isarithmic maps with appropriate isolines. We now assume that the elevation model is a triangulated irregular network, or TIN. The idea applies to grids as well.
Reference: [22] <author> S. J. Fortune. </author> <title> A sweepline algorithm for Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 153-174, </pages> <year> 1987. </year>
Reference-contexts: The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram <ref> [22] </ref>, map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [23] <author> Wm Randolph Franklin and C. K. Ray. </author> <title> Higher isn't necessarily better: Visibility algorithms and experiments. </title> <booktitle> In Proc. 6th Int. Symp. on Spatial Data Handling, </booktitle> <pages> pages 751-763, </pages> <year> 1994. </year>
Reference-contexts: Both applications address a problem in the important GIS capability of geographical analysis. The first plane sweep algorithm that will be described solves various problems in view-shed analysis, such as the computation of extended viewsheds [18, 19] and visibility indices 1 <ref> [23, 44] </ref>. Given a gridded DEM and a specific pixel on it, we're interested in information like the number of pixels that are visible from the specific pixel (the visibility index), the vertical distance to visibility for the non-visible pixels, and the vertical distance to the local or global horizons. <p> There are other methods to compute viewsheds in roughly quadratic time. These can perhaps be generalized to extended viewsheds as well, but they have other drawbacks. The ring growing method, described in several papers <ref> [23, 44] </ref>, requires O (n 2 ) time, but visibility between two pixels can be blocked by pixels that may be quite far from the line of sight. A highly undesirable situation. <p> A highly undesirable situation. Another algorithm that requires quadratic time uses the line of sight from the viewpoint to all perimeter pixels, but not to others <ref> [23] </ref>. This method doesn't use center-of-pixel to center-of-pixel visibility except for the perimeter. Furthermore, it requires additional bookkeeping to determine for pixels which line (s) of sight determine the visibility. In some versions, a counter is needed with every pixel, thus requiring quadratic extra storage.
Reference: [24] <institution> Geometry Literature Database. </institution> <note> http://www.cs.ruu.nl/people/otfried/html/geombib.html. </note>
Reference-contexts: If necessary, add new events to the event list. 9. Enddo of point sets [15], rectangle intersection [11], shortest paths [36], median-of-squares statistics [13, 43], and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database <ref> [24] </ref>, a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep. In most of the two-dimensional applications listed above, the status structure is either a balanced binary tree or a segment tree.
Reference: [25] <author> Thorsten Graf and Klaus Hinrichs. </author> <title> A plane-sweep algorithm for the all-nearest-neighbors problem for a set of convex planar objects. </title> <booktitle> In Proc. 3rd Workshop Algorithms Data Struct., volume 709 of Lecture Notes in Computer Science, </booktitle> <pages> pages 349-360, </pages> <year> 1993. </year>
Reference-contexts: The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects <ref> [3, 25, 26] </ref>, triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [26] <author> K. Hinrichs, J. Nievergelt, and P. Schorn. </author> <title> A sweep algorithm for the all-nearest-neighbours problem. In Computational Geometry and its Applications, </title> <booktitle> volume 333 of Lecture Notes in Computer Science, </booktitle> <pages> pages 43-54. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <month> 12 </month>
Reference-contexts: The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects <ref> [3, 25, 26] </ref>, triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [27] <author> E. H. Isaaks and R. M Srivastava. </author> <title> An Introduction to Applied Geostatistics. </title> <publisher> Oxford Univer--sity Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: For a good discussion on class interval selection, see Evans [14]. Several textbooks also describe the choice of class intervals, sometimes called setting contour levels or indicator thresholds <ref> [7, 27, 46, 47] </ref>. The algorithm to compute the density function sweeps a horizontal plane vertically through the TIN. For a TIN with n triangles the algorithm requires O (n log n) time. The sweep algorithm is the first one|to our knowledge|to sweep a horizontal plane through a TIN. <p> The presense of auto-correlation in the data will cause that class intervals based on the sample will not classify in a fair way, unless random sampling was used. By interpolating between the data points this problem is overcome (see e.g. <ref> [14, 27] </ref>). A triangulation is one example of an interpolation method. We begin with a useful observation and a straightforward algorithm. Consider just one triangle in 3-space with vertices u; v; w.
Reference: [28] <author> H.-P. Kriegel, T. Brinkhoff, and R. Schneider. </author> <title> The combination of spatial access methods and computational geometry in geographic database systems. </title> <booktitle> In Advances in Spatial Databases (proc. SSD'91), number 525 in Lect. Notes in Comp. Science, </booktitle> <pages> pages 5-21, </pages> <year> 1991. </year>
Reference-contexts: Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. On the other hand, in GIS literature the plane sweep technique is known|in particular for map overlay <ref> [4, 28, 32] </ref>|but not yet a standard technique. Certainly, its use hasn't been recognized to its full extent. The purpose of this paper is to give two new applications of the plane sweep method, showing its importance and versatility once more. <p> Objects are needed in the order of their y-coordinates, and only the objects that intersect the sweep line in its current position need be in main memory (in the status structure). There are simple ways to avoid storing the whole event list in main memory <ref> [1, 2, 28] </ref>. Divide-and-conquer algorithms usually require all objects to be in main memory at some moment, either during the first divide or during the last conquer step. Of course, plane sweep is not the appropriate solution to all problems.
Reference: [29] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation <ref> [29] </ref>, hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5.
Reference: [30] <author> J. Lee. </author> <title> Analyses of visibility sites on topographic surfaces. </title> <journal> Int. J. of GIS, </journal> <volume> 5 </volume> <pages> 413-430, </pages> <year> 1991. </year>
Reference-contexts: Rotating sweep algorithms have been described before, but not for viewshed computations, nor for elevation grids. The additional storage required by the algorithm is only O (n). There have been many other papers dealing with various aspects of viewshed analysis <ref> [20, 21, 17, 30, 31] </ref>. The second application of plane sweep involves the computation of class intervals on DEMs. These are needed for displaying isarithmic maps with appropriate isolines. We now assume that the elevation model is a triangulated irregular network, or TIN. The idea applies to grids as well.
Reference: [31] <author> P. Magillo and L. De Floriani. </author> <title> Computing visibility maps on hierarchical terrain models. </title> <booktitle> In Proc. 2nd ACM Workshop on Advances in GIS, page ??, 1994. </booktitle>
Reference-contexts: Rotating sweep algorithms have been described before, but not for viewshed computations, nor for elevation grids. The additional storage required by the algorithm is only O (n). There have been many other papers dealing with various aspects of viewshed analysis <ref> [20, 21, 17, 30, 31] </ref>. The second application of plane sweep involves the computation of class intervals on DEMs. These are needed for displaying isarithmic maps with appropriate isolines. We now assume that the elevation model is a triangulated irregular network, or TIN. The idea applies to grids as well.
Reference: [32] <author> H. G. Mairson and J. Stolfi. </author> <title> Reporting and counting intersections between two sets of line segments. </title> <editor> In R. A. Earnshaw, editor, </editor> <booktitle> Theoretical Foundations of Computer Graphics and CAD, volume F40 of NATO ASI, </booktitle> <pages> pages 307-325. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, West Germany, </address> <year> 1988. </year>
Reference-contexts: Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. On the other hand, in GIS literature the plane sweep technique is known|in particular for map overlay <ref> [4, 28, 32] </ref>|but not yet a standard technique. Certainly, its use hasn't been recognized to its full extent. The purpose of this paper is to give two new applications of the plane sweep method, showing its importance and versatility once more. <p> The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep. Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay <ref> [4, 32] </ref>, nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4.
Reference: [33] <author> M. McKenna. </author> <title> Worst-case optimal hidden-surface removal. </title> <journal> ACM Trans. Graph., </journal> <volume> 6 </volume> <pages> 19-28, </pages> <year> 1987. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal <ref> [33, 38] </ref>, two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5.
Reference: [34] <author> K. Mehlhorn. </author> <title> Multi-dimensional Searching and Computational Geometry, volume 3 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: Plane sweep algorithms have been used for a variety of geometric problems like map overlay, Voronoi diagrams and hidden surface removal. The plane sweep approach is described in most textbooks on computational geometry <ref> [34, 37, 40] </ref>. Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. <p> With plane sweep, a two-dimensional geometric problem is solved by using dynamic one-dimensional data structures. More extensive descriptions of plane sweep algorithms can be found in textbooks on computational geometry <ref> [34, 37, 40] </ref>. The idea can be generalized to dimension three, where a plane sweeps through space. The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep.
Reference: [35] <author> A. Mirante and N. Weingarten. </author> <title> The radial sweep algorithm for constructing triangulated irreguler networks. </title> <journal> IEEE Comput. Graph. Appl., </journal> <pages> pages 11-21, </pages> <month> May </month> <year> 1982. </year>
Reference-contexts: In total, this comes down to O (n 2 log n) time, whereas plane sweep only takes O (n log n) time. Some variants of the standard sweep are versions where a line rotates about a point <ref> [9, 15, 35] </ref>, and the three-dimensional version where a horizontal plane translates through space [39, 41]. There are also sweep algorithms where a "topological" line is used instead of a straight line [12].
Reference: [36] <author> J. S. B. Mitchell. </author> <title> L 1 shortest paths among polygonal obstacles in the plane. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 55-88, </pages> <year> 1992. </year>
Reference-contexts: If an object stops being intersected by the sweep line then delete it from the status structure. 7. Address the question of interest using the status structure. 8. If necessary, add new events to the event list. 9. Enddo of point sets [15], rectangle intersection [11], shortest paths <ref> [36] </ref>, median-of-squares statistics [13, 43], and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database [24], a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep.
Reference: [37] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Plane sweep algorithms have been used for a variety of geometric problems like map overlay, Voronoi diagrams and hidden surface removal. The plane sweep approach is described in most textbooks on computational geometry <ref> [34, 37, 40] </ref>. Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. <p> With plane sweep, a two-dimensional geometric problem is solved by using dynamic one-dimensional data structures. More extensive descriptions of plane sweep algorithms can be found in textbooks on computational geometry <ref> [34, 37, 40] </ref>. The idea can be generalized to dimension three, where a plane sweeps through space. The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep.
Reference: [38] <author> M. Overmars and M. Sharir. </author> <title> A simple output-sensitive algorithm for hidden surface removal. </title> <journal> ACM Trans. Graph., </journal> <volume> 11 </volume> <pages> 1-11, </pages> <year> 1992. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal <ref> [33, 38] </ref>, two- and three-dimensional point location [8, 41, 42], separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5.
Reference: [39] <author> M. H. Overmars and C.-K. Yap. </author> <title> New upper bounds in Klee's measure problem. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 1034-1045, </pages> <year> 1991. </year>
Reference-contexts: Some variants of the standard sweep are versions where a line rotates about a point [9, 15, 35], and the three-dimensional version where a horizontal plane translates through space <ref> [39, 41] </ref>. There are also sweep algorithms where a "topological" line is used instead of a straight line [12]. Implementation of plane sweep algorithms is not difficult, certainly not if existing code for balanced search trees, sorting, and geometric primitives is used.
Reference: [40] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Plane sweep algorithms have been used for a variety of geometric problems like map overlay, Voronoi diagrams and hidden surface removal. The plane sweep approach is described in most textbooks on computational geometry <ref> [34, 37, 40] </ref>. Implementation of plane sweep algorithms usually is straightforward. In computational geometry, the plane sweep approach has become a standard technique in the design of efficient algorithms. <p> With plane sweep, a two-dimensional geometric problem is solved by using dynamic one-dimensional data structures. More extensive descriptions of plane sweep algorithms can be found in textbooks on computational geometry <ref> [34, 37, 40] </ref>. The idea can be generalized to dimension three, where a plane sweeps through space. The status structure now is a dynamic two-dimensional data structure and since these aren't that well-known, three-dimensional sweeping hasn't been applied as often as plane sweep.
Reference: [41] <author> F. P. Preparata and R. Tamassia. </author> <title> Efficient point location in a convex spatial cell-complex. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 267-280, </pages> <year> 1992. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location <ref> [8, 41, 42] </ref>, separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5. <p> Some variants of the standard sweep are versions where a line rotates about a point [9, 15, 35], and the three-dimensional version where a horizontal plane translates through space <ref> [39, 41] </ref>. There are also sweep algorithms where a "topological" line is used instead of a straight line [12]. Implementation of plane sweep algorithms is not difficult, certainly not if existing code for balanced search trees, sorting, and geometric primitives is used.
Reference: [42] <author> N. Sarnak and R. E. Tarjan. </author> <title> Planar point location using persistent search trees. </title> <journal> Commun. ACM, </journal> <volume> 29 </volume> <pages> 669-679, </pages> <year> 1986. </year>
Reference-contexts: Known applications of plane sweep and variants are computation of the Voronoi diagram [22], map overlay [4, 32], nearest objects [3, 25, 26], triangulation [29], hidden surface removal [33, 38], two- and three-dimensional point location <ref> [8, 41, 42] </ref>, separation 3 1. Initialize the event list. 2. Initialize the status structure. 3. While the event list is not empty 4. Do Delete the event with maximum y-coordinate from the event list. 5.
Reference: [43] <author> D. L. Souvaine and J. M. Steele. </author> <title> Time- and space- efficient algorithms for least median of squares regression. </title> <journal> J. Amer. Statist. Assoc., </journal> <volume> 82 </volume> <pages> 794-801, </pages> <year> 1987. </year> <month> 13 </month>
Reference-contexts: Address the question of interest using the status structure. 8. If necessary, add new events to the event list. 9. Enddo of point sets [15], rectangle intersection [11], shortest paths [36], median-of-squares statistics <ref> [13, 43] </ref>, and many others that don't seem to have immediate applications in GIS. The Geometry Literature Database [24], a database with over 7000 papers related to computational geometry, lists about one hundred papers that employ plane sweep.
Reference: [44] <author> Y. A. Teng and L. S. Davies. </author> <title> Visibility analysis on digital terrain models and its parallel im-plementation. </title> <type> Technical Report CAR-TR-625, </type> <institution> Center for Automation Research, University of Maryland, </institution> <year> 1992. </year>
Reference-contexts: Both applications address a problem in the important GIS capability of geographical analysis. The first plane sweep algorithm that will be described solves various problems in view-shed analysis, such as the computation of extended viewsheds [18, 19] and visibility indices 1 <ref> [23, 44] </ref>. Given a gridded DEM and a specific pixel on it, we're interested in information like the number of pixels that are visible from the specific pixel (the visibility index), the vertical distance to visibility for the non-visible pixels, and the vertical distance to the local or global horizons. <p> There are other methods to compute viewsheds in roughly quadratic time. These can perhaps be generalized to extended viewsheds as well, but they have other drawbacks. The ring growing method, described in several papers <ref> [23, 44] </ref>, requires O (n 2 ) time, but visibility between two pixels can be blocked by pixels that may be quite far from the line of sight. A highly undesirable situation. <p> Furthermore, it requires additional bookkeeping to determine for pixels which line (s) of sight determine the visibility. In some versions, a counter is needed with every pixel, thus requiring quadratic extra storage. Our algorithm, and also the partial blocking method of Teng and Davis <ref> [44] </ref>, doesn't have these drawbacks. Suppose a grid G with elevation data is given together with a viewpoint v, which is represented by the center of one of the pixels.
Reference: [45] <author> P. van Oosterom. </author> <title> An R-tree based map-overlay algorithm. </title> <booktitle> In Proc. EGIS'94, </booktitle> <pages> pages 318-327, </pages> <year> 1994. </year>
Reference-contexts: For certain more difficult tasks, lack of a dynamic geometric data structure prohibits the use of efficient plane sweep. In other cases, plane sweep is just one of several candidates for a problem. Map 4 overlay can also be solved using different techniques, like those based on R-trees <ref> [45, 5] </ref> or on geometric graph traversal [16]. Finally, there are cases where plane sweep is possible but not at all clever. To construct a minimum bounding box of a set of n objects one can use plane sweep and get an O (n log n) time solution.
Reference: [46] <author> David F. Watson. Contouring: </author> <title> A Guide to the Analysis and Display of Spatial Data. </title> <address> Perg-amon, </address> <year> 1992. </year>
Reference-contexts: For a good discussion on class interval selection, see Evans [14]. Several textbooks also describe the choice of class intervals, sometimes called setting contour levels or indicator thresholds <ref> [7, 27, 46, 47] </ref>. The algorithm to compute the density function sweeps a horizontal plane vertically through the TIN. For a TIN with n triangles the algorithm requires O (n log n) time. The sweep algorithm is the first one|to our knowledge|to sweep a horizontal plane through a TIN.
Reference: [47] <author> R. Webster and M. A. Oliver. </author> <title> Statistical Methods in Soil and Land Resource Survey. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1990. </year> <month> 14 </month>
Reference-contexts: For a good discussion on class interval selection, see Evans [14]. Several textbooks also describe the choice of class intervals, sometimes called setting contour levels or indicator thresholds <ref> [7, 27, 46, 47] </ref>. The algorithm to compute the density function sweeps a horizontal plane vertically through the TIN. For a TIN with n triangles the algorithm requires O (n log n) time. The sweep algorithm is the first one|to our knowledge|to sweep a horizontal plane through a TIN.
References-found: 47

