URL: ftp://ftp.cs.wisc.edu/tech-reports/reports/93/tr1153.ps.Z
Refering-URL: http://www.cs.wisc.edu/~arch/uwarch/tech_reports/tech_reports.html
Root-URL: 
Email: strik@cs.wisc.edu mansha@cs.wisc.edu  
Title: Evaluating the Mean Completion Time of a Fork-Join Barrier Synchronization  
Author: John Strikwerda and Rajesh K. Mansharamani 
Date: May 20, 1993  
Address: 1210 W. Dayton St. Madison, WI 53706.  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: In this paper we analyze the mean completion time of a fork-join barrier synchronization for a parallel program model proposed in previous literature. The task service times in the model are derived from the total job demand by ratios of uniform random variables. We first compute an analytic expression for the mean time to barrier completion, S(n), for jobs that have n tasks. This expression is an alternating series of combinatorial terms that is numerically unstable for large values of n if summed in straightforward manner. We next derive an alternate method of computing S(n) that consists of an infinite series of positive terms that sums to less than 1. We obtain error estimates for truncated sums of this series and using the error estimates compute S(n) to a desired level of accuracy. Finally, we compare estimates of the mean time to barrier completion with other common models of parallel program task execution times. The main emphasis of this paper is on the techniques used to derive and compute S(n). fl This research was partially supported by the National Science Foundation under grants DMS-9208049 and CCR-9024144.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. ADVE, and M. VERNON. </author> <title> Influence of random delays on parallel execution times. </title> <booktitle> ACM SIGMETRICS Conf. and Performance Evaluation Review 21, </booktitle> <month> 1 (May </month> <year> 1993). </year>
Reference-contexts: Note that the randomness in the above division of demand reflects the fact that different programs with n tasks will in general have different divisions of demand amongst their tasks, rather than randomness in task service times. In fact, a recent paper by Adve and Vernon <ref> [1] </ref> makes a strong case that for a given parallel program one can essentially treat task service times as deterministic and include just the mean communication overhead into the task service time. <p> 1 : : : du n Z 1 Z 1 0 n X u i = n 0 0 Z u n u n i=1 du 1 : : : du n1 du n : (3) The last equation follows by symmetry of the integrand in the n dimensional hypercube <ref> [0; 1] </ref> n (each of u 1 ; : : : ; u n is maximum in a particular region of [0; 1] n and the value of the integral is the same in each such 3 region.) For example, when n = 2 we have S (2) = 0 0 <p> n u n i=1 du 1 : : : du n1 du n : (3) The last equation follows by symmetry of the integrand in the n dimensional hypercube <ref> [0; 1] </ref> n (each of u 1 ; : : : ; u n is maximum in a particular region of [0; 1] n and the value of the integral is the same in each such 3 region.) For example, when n = 2 we have S (2) = 0 0 u 1 + u 2 Z 1 Z u 2 u 2 du 1 du 2 = 2 0 u 2
Reference: [2] <author> E. DUDEWICZ, and S. MISHRA. </author> <title> Modern Mathematical Statistics. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: 1 x n+`j2 dx Z 1 x ` j=0 n 2 13 = 0 = (1) n2 0 = (1) n2 `! (n 2)! : The last equality holds because fi (i; j) = 0 (i)(j) = (i + j 1)! fi (i; j) is called the beta function. (See <ref> [2] </ref>.) Substituting the above expression for a n1+` in (9) we get S (n) = (n 2)! `=0 (n + ` 1)! 1 n1 X i (1) i+1 i n1+` 1 X (1) n2 `! n `+1 i=0 n 1 = `=0 (n + ` 1)! 1 1 X i (1)
Reference: [3] <author> S. </author> <title> LEUTENEGGER. Issues in multiprogrammed multiprocessor scheduling. </title> <type> Ph.D. Thesis, Technical Report #954, </type> <institution> Computer Sciences Dept., Univ. of Wisconsin-Madison, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: This model has been used in two previous simulation studies of the performance of multiprogrammed parallel processor allocation policies <ref> [5, 3] </ref>. Note that the randomness in the above division of demand reflects the fact that different programs with n tasks will in general have different divisions of demand amongst their tasks, rather than randomness in task service times. <p> Thus, the estimates obtained for the uniform model in this paper are less pessimistic than the estimates for the exponential task service times model. Interestingly, the two simulation studies of multiprogrammed parallel processor allocation policies by Majumdar et al. [5] and Leutenegger <ref> [3] </ref> mentioned that their qualitative results of policy comparison were more or less the same for the uniform model and the equal task service times model.
Reference: [4] <author> S. LEUTENEGGER, and R. NELSON. </author> <title> Analysis of spatial and temporal scheduling policies for semi-static and dynamic multiprocessor environments. </title> <institution> Research Report - IBM T.J. Watson Research Center, Yorktown Heights, </institution> <month> August </month> <year> 1991. </year> <month> 24 </month>
Reference-contexts: The curve labelled "exponential" corresponds to mean barrier completion times for independent and identically distributed (i.i.d.) task service times from an exponential distribution (T i = exp (), i = 1; 2; : : :; n), a model that has been frequently used in the literature (for example in <ref> [7, 6, 4, 8] </ref>).
Reference: [5] <author> S. MAJUMDAR, D. EAGER, and R. BUNT. </author> <title> Scheduling in multiprogrammed parallel systems. </title> <booktitle> ACM SIG--METRICS Conf. and Performance Evaluation Review 16, </booktitle> <month> 1 (May </month> <year> 1988), </year> <pages> 104-113. </pages>
Reference-contexts: This model has been used in two previous simulation studies of the performance of multiprogrammed parallel processor allocation policies <ref> [5, 3] </ref>. Note that the randomness in the above division of demand reflects the fact that different programs with n tasks will in general have different divisions of demand amongst their tasks, rather than randomness in task service times. <p> Thus, the estimates obtained for the uniform model in this paper are less pessimistic than the estimates for the exponential task service times model. Interestingly, the two simulation studies of multiprogrammed parallel processor allocation policies by Majumdar et al. <ref> [5] </ref> and Leutenegger [3] mentioned that their qualitative results of policy comparison were more or less the same for the uniform model and the equal task service times model.
Reference: [6] <author> R. NELSON. </author> <title> A performance evaluation of a general parallel processing model. </title> <booktitle> ACM SIGMETRICS Conf. and Performance Evaluation Review 18, </booktitle> <month> 1 (May </month> <year> 1990), </year> <pages> 13-26. </pages>
Reference-contexts: The curve labelled "exponential" corresponds to mean barrier completion times for independent and identically distributed (i.i.d.) task service times from an exponential distribution (T i = exp (), i = 1; 2; : : :; n), a model that has been frequently used in the literature (for example in <ref> [7, 6, 4, 8] </ref>). <p> For i.i.d. exponential task times T i = exp (), i = 1; 2; : : :; n, we have (cf. <ref> [7, 6] </ref>) S (n) = E [max (T 1 ; : : : ; T n )] = n= + (n 1)= + : : : + 1= = H n =; (17) where H n is the harmonic sum P n i=1 1=i.
Reference: [7] <author> R. NELSON, D. TOWSLEY, and A. TANTAWI. </author> <title> Performance analysis of parallel processing systems. </title> <journal> IEEE Trans. on Software Engg. </journal> <volume> 14, </volume> <month> 4 (April </month> <year> 1988), </year> <pages> 532-540. </pages>
Reference-contexts: The curve labelled "exponential" corresponds to mean barrier completion times for independent and identically distributed (i.i.d.) task service times from an exponential distribution (T i = exp (), i = 1; 2; : : :; n), a model that has been frequently used in the literature (for example in <ref> [7, 6, 4, 8] </ref>). <p> For i.i.d. exponential task times T i = exp (), i = 1; 2; : : :; n, we have (cf. <ref> [7, 6] </ref>) S (n) = E [max (T 1 ; : : : ; T n )] = n= + (n 1)= + : : : + 1= = H n =; (17) where H n is the harmonic sum P n i=1 1=i.
Reference: [8] <author> R. NELSON, and D. TOWSLEY. </author> <title> A performance evaluation of several priority policies for parallel processing systems. </title> <type> COINS Tech. Report 91-32, </type> <institution> Computer and Info. Sciences, Univ. of Mass. at Amherst, </institution> <month> May </month> <year> 1991. </year> <note> (To appear in JACM.) 25 </note>
Reference-contexts: The curve labelled "exponential" corresponds to mean barrier completion times for independent and identically distributed (i.i.d.) task service times from an exponential distribution (T i = exp (), i = 1; 2; : : :; n), a model that has been frequently used in the literature (for example in <ref> [7, 6, 4, 8] </ref>).
References-found: 8

