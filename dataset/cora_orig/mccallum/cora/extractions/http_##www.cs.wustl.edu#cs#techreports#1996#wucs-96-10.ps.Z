URL: http://www.cs.wustl.edu/cs/techreports/1996/wucs-96-10.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Email: suri@cs.wustl.edu  varghese@askew.wustl.edu  girish@cs.wustl.edu  wucs-96-10  
Phone: +1 314 935 7546  +1 314 935 4963  +1 314 935 4163  
Title: Leap Forward Virtual Clock: An O(log log N) Fair Queuing Scheme with Guaranteed Delays and
Author: Subhash Suri George Varghese Girish P. Chandranmenon 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> Proc. Sigcomm '89, </booktitle> <volume> 19(4) </volume> <pages> 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In this new setting, market forces will require cost-effective solutions. Even today, with limited and shrinking government subsidies, it is important to consider cheap solutions that can be widely deployed using existing links and existing hardware platforms. There is a remarkable scheme called Weighted Fair Queuing (WFQ) <ref> [1] </ref> that has been regarded as a central mechanism for the new Integrated Services Internet. WFQ provides guaranteed delay bounds, fair throughput sharing, as well as traffic isolation. <p> The ideas of our paper can be combined with the results of [3] to bound jitter in the context of a non-work-conserving server (see concluding remarks). Weighted Fair Queuing (WFQ) was proposed by Demers, Keshav and Shenker <ref> [1] </ref>, who suggested its efficacy for throughput fairness and delay bounds. The main idea behind WFQ is to compute a tag for each packet based on the packet's scheduled departure time in an idealized bit-by-bit round-robin discipline, and then to serve packets in non-decreasing order of tag values. <p> If N is the number of active flows contending for a link, then tag computation/update can take fi (N ) time. The work of Demers et al. <ref> [1] </ref> was extended by Parekh and Gallager [7, 8], who showed that end-to-end delay bound for a flow can be computed under the following assumptions: (1) the burstiness of the flow is controlled by a suitable token bucket filter, and (2) all servers in the path of a flow use the <p> Then, rounding up all the tags to multiples of M=B dramatically reduces the underlying key space of the priority queue, while possibly increasing the delay by at most M=B. We further reduce the key space to a set of O (N ) integers, in the range <ref> [1; cN ] </ref> for a fixed constant c, by using a tag-separation property of our algorithm and modular arithmetic to recycle tags.
Reference: [2] <author> P. van Emde Boas, R. Kaas, and E. Zijlstra. </author> <title> Design and implementation of an efficient priority queue. </title> <journal> Math. Syst. Theory, </journal> <volume> 10 </volume> <pages> 99-127, </pages> <year> 1977. </year>
Reference-contexts: With these ideas in place, we can then use "approximate sorting" and a finite-universe priority queue of van Emde Boas <ref> [2] </ref> to achieve O (log log N ) processing time per packet. Leap Forward Virtual Clock 17 Our technique applies to most clock-based fair queuing schemes, and so a similar performance tradeoff can be realized for these schemes as well. <p> We quote the following result from van Emde Boas <ref> [2] </ref>; Mehlhorn's book [6] contains an eminently readable account of this data structure. Lemma 7.3 (van Emde Boas) Let U = f0; 1; 2; : : :; Lg, and let X U be a subset.
Reference: [3] <author> N. Figuera and J. Pasquale. Leave-in-time: </author> <title> A new service discipline for real-time communication in a packet-switching data network. </title> <booktitle> Proc. Sigcomm '95, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: Our paper also shows that the Virtual Clock scheme of Zhang [12] can be modified to achieve delay and throughput properties comparable to WFQ. Previous papers have shown that Virtual Clock provided identical delay bounds to PGPS <ref> [11, 3] </ref>, but did not provide fair throughput sharing [5, 10]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> We only review work-conserving scheduling algorithms, since they lead to better delay bounds than non-work-conserving algorithms. (A scheduling algorithm is work-conserving if the server is never idle as long as there is a packet in an input queue.) Non-work-conserving disciplines, like the one proposed by Figuera and Pasquale <ref> [3] </ref>, can be useful for bounding jitter, which is important in some applications. The ideas of our paper can be combined with the results of [3] to bound jitter in the context of a non-work-conserving server (see concluding remarks). <p> server is never idle as long as there is a packet in an input queue.) Non-work-conserving disciplines, like the one proposed by Figuera and Pasquale <ref> [3] </ref>, can be useful for bounding jitter, which is important in some applications. The ideas of our paper can be combined with the results of [3] to bound jitter in the context of a non-work-conserving server (see concluding remarks). Weighted Fair Queuing (WFQ) was proposed by Demers, Keshav and Shenker [1], who suggested its efficacy for throughput fairness and delay bounds. <p> As in WFQ, the Virtual Clock scheme services packets in the non-decreasing order of packet tags. Zhang's scheme achieves the PGPS delay bound <ref> [3, 11] </ref> but fails to provide throughput fairness; Figure 1 shows an example where throughput fairness can be arbitrarily bad. The throughput unfairness of Virtual Clock is removed by Golestani's Self-Clocked Fair Queuing algorithm [5]. <p> While non-work-conserving disciplines in general do not lead to better latency bounds, they can be useful for bounding jitter, which is useful in some applications. We believe that our ideas can be generalized to these settings as well using ideas similar to that in Figuera and Pasquale <ref> [3] </ref>, where the virtual clock algorithm is generalized by adding delay regulators. A final feature of our scheme that might be of possible interest is that it can give improved delay bounds for flows that exceed their assigned rates.
Reference: [4] <author> P. Goyal, S. S. Lam, and H. M. Vin. </author> <title> Determining End-to-End Delay Bounds in Heterogeneous Networks. </title> <booktitle> In Proceedings of Workshop on Network and OS Support forAudio-Video, </booktitle> <pages> pages 287-298, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: We concentrate on analyzing the performance of our queuing algorithm at a single server. We will show that our algorithm falls within the general framework of guaranteed rate (GR) fair-queuing algorithms as defined by Goyal et al. <ref> [4] </ref>, which allows us to establish a PGPS-like bound on the end-to-end delay in a multi-hop system. In the following, therefore, we describe the algorithm at a single server S, with an output rate B bits per second. <p> We will use this in the next subsection to prove end-to-end delay bounds. Leap Forward Virtual Clock 12 5.2. End-to-End Delay Bound Seminal work on End-to-end delay bounds has been done by Parekh and Gallager [7, 8]. Recently, Goyal et al. <ref> [4] </ref> have synthesized an elegant and general strategy for proving delay bounds in the style of Parekh-Gallager. <p> Their formulation applies to a large class of scheduling/queuing algorithms, which they call Guaranteed Rate scheduling. 4 We show that Leap Backward and Leap Forward schemes also belong to the Guaranteed Rate class, and thus we can use the framework of <ref> [4] </ref> to derive end-to-end delay bounds. We begin by reviewing the definition of the Guaranteed Rate class from [4]. Consider a flow f with a guaranteed rate r f . Let p j f and l j f denote the jth packet of flow f and its length. <p> algorithms, which they call Guaranteed Rate scheduling. 4 We show that Leap Backward and Leap Forward schemes also belong to the Guaranteed Rate class, and thus we can use the framework of <ref> [4] </ref> to derive end-to-end delay bounds. We begin by reviewing the definition of the Guaranteed Rate class from [4]. Consider a flow f with a guaranteed rate r f . Let p j f and l j f denote the jth packet of flow f and its length. <p> Let ff i = fi i + t i;i+1 , where t i;i+1 is the propagation delay between the servers i and i + 1. Then, the following result about end-to-end delay is established in Goyal et al. <ref> [4] </ref>. Lemma 5.6 (Goyal et al.) Suppose that a flow f conforms to a leaky bucket process with parameters ( f ; r f ), and the scheduling algorithm at each of the K servers on its path belongs to GR. <p> Then, the end-to-end delay of a packet p n f , denoted by d n f , is given by the following: d n f + (K 1) max l f + i=1 Proof. The theorem follows immediately from Lemmas 5.5 and 5.6. 2 Goyal et al. <ref> [4] </ref> also show how to obtain probabilistic bounds on the end-to-end delay when the burstiness of a flow is bounded with a stochastic process (e.g., exponentially bounded burstiness). The same results also apply to our scheduling algorithms. In next section, we address the throughput fairness of our algorithm.
Reference: [5] <author> S. J. Golestani. </author> <title> A Self-Clocked Fair Queueing Scheme for High Speed Applications. </title> <booktitle> In Proceedings of IEEE INFOCOM '94, </booktitle> <pages> pages 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: While algorithms requiring O (log N ) time per packet are a great improvement over the O (N ) time schemes, logarithmic computational overhead remains a considerable cost for routers that run at Gigabit speeds. Some papers on fair queuing, such as <ref> [5, 10] </ref>, suggest using special-purpose hardware at routers to overcome the fi (log N ) sorting bottleneck. 1 However, the use of special-purpose hardware drives up the cost of routers. <p> Note that our computational cost includes all sorting overheads. This contrasts with several existing algorithms <ref> [5, 10] </ref>, whose O (1) time complexity bound accounts only for "tag computation;" these methods still incur an additional cost of O (log N ) per packet to insert each tag in a priority queue. <p> Our paper also shows that the Virtual Clock scheme of Zhang [12] can be modified to achieve delay and throughput properties comparable to WFQ. Previous papers have shown that Virtual Clock provided identical delay bounds to PGPS [11, 3], but did not provide fair throughput sharing <ref> [5, 10] </ref>. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. By contrast, many previous approaches to providing efficient fair queuing have been based on modifications to WFQ (e.g., [10]). 2 The rest of the paper is organized as follows. <p> Zhang's scheme achieves the PGPS delay bound [3, 11] but fails to provide throughput fairness; Figure 1 shows an example where throughput fairness can be arbitrarily bad. The throughput unfairness of Virtual Clock is removed by Golestani's Self-Clocked Fair Queuing algorithm <ref> [5] </ref>. Unfortunately, this scheme (SCFQ) suffers from large delay bounds, as shown by [4]|the worst-case delay of a packet may be almost N times the delay guaranteed by PGPS, where N is the number of active flows. <p> Proof of Throughput Fairness We will show that our scheme guarantees near-ideal throughput fairness. Informally, a scheme is fair if each backlogged flow receives its fair share of the available server bandwidth. More formally, we adopt a measure of throughput fairness defined by Golestani <ref> [5] </ref>. A flow is said to be backlogged during an interval (t 1 ; t 2 ) if the queue for flow f is never empty during (t 1 ; t 2 ). <p> In particular, F should be a constant, independent of the length of the time interval <ref> [5] </ref>. PGPS schemes achieve F l max , and the self-clocked fair queuing (SCFQ) has F 2l max . However, no finite bound can be shown for the original virtual clock scheme|in a worst case, F ! 1.
Reference: [6] <author> K. Mehlhorn. </author> <title> Sorting and Searching, Volume 1 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: We quote the following result from van Emde Boas [2]; Mehlhorn's book <ref> [6] </ref> contains an eminently readable account of this data structure. Lemma 7.3 (van Emde Boas) Let U = f0; 1; 2; : : :; Lg, and let X U be a subset.
Reference: [7] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control: The Single Node Case. </title> <booktitle> In Proceedings of IEEE INFOCOM '92, </booktitle> <volume> volume 2, </volume> <pages> pages 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: If N is the number of active flows contending for a link, then tag computation/update can take fi (N ) time. The work of Demers et al. [1] was extended by Parekh and Gallager <ref> [7, 8] </ref>, who showed that end-to-end delay bound for a flow can be computed under the following assumptions: (1) the burstiness of the flow is controlled by a suitable token bucket filter, and (2) all servers in the path of a flow use the WFQ discipline. <p> We will use this in the next subsection to prove end-to-end delay bounds. Leap Forward Virtual Clock 12 5.2. End-to-End Delay Bound Seminal work on End-to-end delay bounds has been done by Parekh and Gallager <ref> [7, 8] </ref>. Recently, Goyal et al. [4] have synthesized an elegant and general strategy for proving delay bounds in the style of Parekh-Gallager.
Reference: [8] <author> A. K. Parekh and R. G. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Controlin Integrated Services Networks: The Multiple Node Case. </title> <booktitle> In Proceedings of IEEE INFOCOM '93, </booktitle> <volume> volume 2, </volume> <pages> pages 521-530, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: If N is the number of active flows contending for a link, then tag computation/update can take fi (N ) time. The work of Demers et al. [1] was extended by Parekh and Gallager <ref> [7, 8] </ref>, who showed that end-to-end delay bound for a flow can be computed under the following assumptions: (1) the burstiness of the flow is controlled by a suitable token bucket filter, and (2) all servers in the path of a flow use the WFQ discipline. <p> We will use this in the next subsection to prove end-to-end delay bounds. Leap Forward Virtual Clock 12 5.2. End-to-End Delay Bound Seminal work on End-to-end delay bounds has been done by Parekh and Gallager <ref> [7, 8] </ref>. Recently, Goyal et al. [4] have synthesized an elegant and general strategy for proving delay bounds in the style of Parekh-Gallager.
Reference: [9] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient Fair Queueing Using Deficit Round Robin. </title> <booktitle> In Proceedings of ACM SIGCOMM '95, </booktitle> <pages> pages 231-242, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: WFQ provides guaranteed delay bounds, fair throughput sharing, as well as traffic isolation. Unfortunately, the computational overhead for implementing this scheme is rather large|it requires O (N ) computation per packet, where N is the number of conversations (flows) using a link. Other more efficient variants <ref> [9] </ref>, fail to match the delay bounds provided by WFQ. Very recently, an algorithm has been proposed [10] whose service guarantee is almost as good as that of WFQ, but the new algorithm still requires O (log N ) time per packet. <p> Unfortunately, this scheme (SCFQ) suffers from large delay bounds, as shown by [4]|the worst-case delay of a packet may be almost N times the delay guaranteed by PGPS, where N is the number of active flows. Deficit Round Robin (DRR) <ref> [9] </ref>, a variation of the classical round robin is also able to guarantee throughput fairness. Instead of servicing one packet per flow in each round, DRR services upto a specified amount Q per flow.
Reference: [10] <author> D. Stiliadis and A. Varma. </author> <title> Latency-Rate Servers: A General Model for Analysis of Traffic Scheduling Algorithms. </title> <type> Technical Report UCSC-CRL-95-38, </type> <institution> Dept. of Computer Enginieering and Information Sciences, University of California, Santa Cruz, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Other more efficient variants [9], fail to match the delay bounds provided by WFQ. Very recently, an algorithm has been proposed <ref> [10] </ref> whose service guarantee is almost as good as that of WFQ, but the new algorithm still requires O (log N ) time per packet. <p> While algorithms requiring O (log N ) time per packet are a great improvement over the O (N ) time schemes, logarithmic computational overhead remains a considerable cost for routers that run at Gigabit speeds. Some papers on fair queuing, such as <ref> [5, 10] </ref>, suggest using special-purpose hardware at routers to overcome the fi (log N ) sorting bottleneck. 1 However, the use of special-purpose hardware drives up the cost of routers. <p> Note that our computational cost includes all sorting overheads. This contrasts with several existing algorithms <ref> [5, 10] </ref>, whose O (1) time complexity bound accounts only for "tag computation;" these methods still incur an additional cost of O (log N ) per packet to insert each tag in a priority queue. <p> Our paper also shows that the Virtual Clock scheme of Zhang [12] can be modified to achieve delay and throughput properties comparable to WFQ. Previous papers have shown that Virtual Clock provided identical delay bounds to PGPS [11, 3], but did not provide fair throughput sharing <ref> [5, 10] </ref>. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. By contrast, many previous approaches to providing efficient fair queuing have been based on modifications to WFQ (e.g., [10]). 2 The rest of the paper is organized as follows. <p> We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. By contrast, many previous approaches to providing efficient fair queuing have been based on modifications to WFQ (e.g., <ref> [10] </ref>). 2 The rest of the paper is organized as follows. In Section 2 we review previous fair queuing schemes. In Section 3, we introduce our main algorithm, Leap Forward Virtual Clock. <p> tag coarsening technique and the O (log log N ) time implementation. 1 Indeed, by using special-purpose hardware, it appears possible to implement WFQ in O (1) time. 2 We have not been able to determine the details of the Frame Based Frame Queuing scheme because the available Technical Report <ref> [10] </ref> only refers to the scheme without providing details. Leap Forward Virtual Clock 3 2. Previous Work FIFO is perhaps the simplest possible scheduling algorithm, but it falls well short of providing throughput fairness. <p> DRR is almost as simple as round robin and can be implemented in O (1) time per packet. Unfortunately, like SCFQ, the delay bounds for DRR can be unacceptably large. Recently, a new scheme proposed by Stiliadis and Varma <ref> [10] </ref>, called Frame Based FQ, claims to guarantee PGPS delay and fairness bounds and be implementable in O (log N ) time per packet. We have not been able to obtain details of this scheme, except for a brief description of its properties in [10], because of some patent-related issues. <p> scheme proposed by Stiliadis and Varma <ref> [10] </ref>, called Frame Based FQ, claims to guarantee PGPS delay and fairness bounds and be implementable in O (log N ) time per packet. We have not been able to obtain details of this scheme, except for a brief description of its properties in [10], because of some patent-related issues. Table 1 summarizes the salient features of perviously known scheduling algorithms, and compares them to our new Leap Forward Virtual Clock scheme. <p> No other scheme we know of matches these bounds. We remark that a vanilla implementation of our algorithm has exactly the same delay bounds as PGPS and needs O (log N ) time per packet, thus matching the Stiliadis and Varma <ref> [10] </ref> scheme. <p> In reality, flows send packets in bursts and some flows misbehave, causing local clocks to deviate significantly from the server clock. The following simple example, due to Stiliadis and Varma <ref> [10] </ref>, shows how the original virtual clock scheme of Zhang fails to provide throughput fairness. Figure 1 illustrates this example. Consider two flows, each with a guaranteed rate of 0.5 byte/sec, and let the server rate be 1 byte/sec.
Reference: [11] <author> G. G. Xie and S. S. Lam. </author> <title> Delay Guarantee of a Virtual Clock Server. </title> <type> Techincal Report TR-94-24, </type> <institution> Dept. of Computer Sciences UT-Austin, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Our paper also shows that the Virtual Clock scheme of Zhang [12] can be modified to achieve delay and throughput properties comparable to WFQ. Previous papers have shown that Virtual Clock provided identical delay bounds to PGPS <ref> [11, 3] </ref>, but did not provide fair throughput sharing [5, 10]. We present an intuitive "Leap Forward" modification to Virtual Clock that preserves throughput fairness. <p> As in WFQ, the Virtual Clock scheme services packets in the non-decreasing order of packet tags. Zhang's scheme achieves the PGPS delay bound <ref> [3, 11] </ref> but fails to provide throughput fairness; Figure 1 shows an example where throughput fairness can be arbitrarily bad. The throughput unfairness of Virtual Clock is removed by Golestani's Self-Clocked Fair Queuing algorithm [5].
Reference: [12] <author> Lixia Zhang. </author> <title> Virtual Clock: A New Traffic Control Algorithm for Packet-Switched Networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: Thus, our algorithm appears to be the first to break the (log N ) sorting bottleneck, while retaining all the desirable properties of WFQ, namely, throughput fairness and delay bounds. Our paper also shows that the Virtual Clock scheme of Zhang <ref> [12] </ref> can be modified to achieve delay and throughput properties comparable to WFQ. Previous papers have shown that Virtual Clock provided identical delay bounds to PGPS [11, 3], but did not provide fair throughput sharing [5, 10]. <p> We will use the terms PGPS and WFQ interchangably in this paper. The end-to-end delay bounds proved by Parekh and Gallager serve as benchmarks for comparing delay guarantees of other fair queuing algorithms. Zhang <ref> [12] </ref> introduced Virtual Clock Fair Queuing, in which each packet is stamped with a tag based on a hypothetical clock that "ticks" at the rate assigned to that packet's flow. As in WFQ, the Virtual Clock scheme services packets in the non-decreasing order of packet tags. <p> In the PGPS system, the delay of the 10-byte packet should be about 10 secs. We will show that situations like the one described above cannot occur in our Leap Backward scheme or in ordinary Virtual Clock <ref> [12] </ref>. We first establish the delay bound at a single server, then extend it to the end-to-end case. 5.1. <p> Thus the delay penalty for such a flow is always bounded, without adversely affecting the delay bounds or the throughput fairness of other flows. Except for this effect, the average (not the worst-case) delay bounds of our scheme should be similar to those of the standard virtual clock scheme <ref> [12] </ref>. We are currently in the process of carrying out a simulation study to verify these and other behaviors. Leap Forward Virtual Clock 21
References-found: 12

