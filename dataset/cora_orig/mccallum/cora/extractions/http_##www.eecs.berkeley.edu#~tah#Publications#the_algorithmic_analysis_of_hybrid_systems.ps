URL: http://www.eecs.berkeley.edu/~tah/Publications/the_algorithmic_analysis_of_hybrid_systems.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/the_algorithmic_analysis_of_hybrid_systems.html
Root-URL: 
Title: The Algorithmic Analysis of Hybrid Systems  
Author: R. Alur C. Courcoubetis N. Halbwachs T.A. Henzinger P.-H. Ho X. Nicollin A. Olivero J. Sifakis S. Yovine 
Abstract: We present a general framework for the formal specification and algorithmic analysis of hybrid systems. A hybrid system consists of a discrete program with an analog environment. We model hybrid systems as finite automata equipped with variables that evolve continuously with time according to dynamical laws. For verification purposes, we restrict ourselves to linear hybrid systems, where all variables follow piecewise-linear trajectories. We provide decidability and undecidability results for classes of linear hybrid systems, and we show that standard program-analysis techniques can be adapted to linear hybrid systems. In particular, we consider symbolic model-checking and minimization procedures that are based on the reachability analysis of an infinite state space. The procedures iteratively compute state sets that are definable as unions of convex polyhedra in multidimensional real space. We also present approximation techniques for dealing with systems for which the iterative procedures do not converge. fl A preliminary version of this paper appeared in the Proceedings of the 11th International Conference on Analysis and Optimization of Discrete Event Systems, Lecture Notes in Control and Information Sciences 199, Springer-Verlag, 1994, pp. 331-351, and an extended version appeared in Theoretical Computer Science 138, 1995, pp. 3-34. y AT&T Bell Laboratories, Murray Hill, NJ, U.S.A. z University of Crete and ICS, FORTH, Heraklion, Greece. Partially supported by Esprit-BRA 6021 REACT-P. x VERIMAG-SPECTRE, Grenoble, France. VERIMAG is a joint laboratory of CNRS, INPG, UJF, and VERILOG S.A., associated with the institute IMAG. SPECTRE is an INRIA project. Partially supported by Esprit-BRA 6021 REACT-P. Computer Science Department, Cornell University, Ithaca, NY, U.S.A. Supported in part by the National Science Foundation under grant CCR-9200794, by the United States Air Force Office of Scientific Research under contract F49620-93-1-0056, and by the Defense Advanced Research Projects Agency under grant NAG2-892. 
Abstract-found: 1
Intro-found: 1
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: It is not difficult to check that there is a run of H from to 0 iff there is a run of sc (H) from sc () to sc ( 0 ). The reachability problem for timed automata is solved in <ref> [ACD93] </ref>. Two undecidability results Theorem 3.2 The reachability problem is undecidable for 2-rate timed systems. Proof. The theorem follows from the undecidability of the halting problem for nondeterministic 2-counter machines. <p> Now we address the more general problem of whether the given linear hybrid system H satisfies a requirement that is expressed in the real-time temporal logic TCTL <ref> [ACD93] </ref>. Timed computation tree logic Let C be a set of clocks not in Var ; that is, C " Var = ;. A state predicate is a linear formula over the set Var [ C of variables.
Reference: [ACD + 92] <author> A. Alur, C. Courcoubetis, D. Dill, N. Halbwachs, and H. Wong-Toi. </author> <title> Minimization of timed transition systems. </title> <editor> In W.R. Cleaveland, editor, </editor> <booktitle> CONCUR 92: Theories of Concurrency, Lecture Notes in Computer Science 630, </booktitle> <pages> pages 340-354. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: In particular, we consider the symbolic model-checking method for timed automata presented in [HNSY94], and the minimization procedure for timed automata presented in <ref> [ACD + 92] </ref>. Both methods perform a reachability analysis over an infinite state space. The procedures compute state sets by iterative approximation such that each intermediate result is definable by a linear formula; that is, each computed state set is a finite union of convex polyhedra in multidimensional real space.
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Workshop on Theory of Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: To cope with this problem, approximate analysis techniques are used to enforce the convergence of iterations by computing upper approximations of state sets. Approximate techniques yield either necessary or sufficient verification conditions. The paper is essentially a synthesis of the results presented in <ref> [ACHH93, NOSY93, HPR94] </ref>. Section 2 presents a general model for hybrid systems. Section 3 defines linear hybrid systems, and presents decidability and undecidability results for the reachability problem of subclasses of linear hybrid systems. The verification methods are presented in Section 4.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Each location is also labeled with an invariant condition that must hold when the control resides at the location. This model for hybrid systems is inspired by the phase transition systems of [MMP92, NSY93], and can be viewed as a generalization of timed safety automata <ref> [AD94, HNSY94] </ref>. The purpose of this paper is to demonstrate that standard program-analysis techniques can be adapted to hybrid systems. For verification purposes we restrict ourselves to linear hybrid systems. <p> In a linear hybrid system, for each variable the rate of change is constant|though this constant may vary from location to location|and the terms involved in the invariants, guards, and assignments are required to be linear. An interesting special case of a linear hybrid system is a timed automaton <ref> [AD94] </ref>. In a timed automaton each continuously changing variable is an accurate clock whose rate of change with time is always 1. Furthermore, in a timed automaton all terms involved in assignments are constants, and all invariants and guards only involve comparisons of clock values with constants. <p> Thus, (1) the value of a clock increases uniformly with time, and (2) a discrete transition either resets a clock to 0, or leaves it unchanged. A timed automaton <ref> [AD94] </ref> is a linear hybrid system all of whose variables are propositions or clocks, and the linear expressions are boolean combinations of inequalities of the form x#c or x y#c where c is a nonnegative integer and # 2 f&lt;; ; =; &gt;; g. 5 * If there is a nonzero
Reference: [AH94] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time system = discrete system + clock variables. </title> <editor> In T. Rus, editor, </editor> <title> Proceedings of the First AMAST Workshop on Real-time Systems, </title> <note> to appear. Available as Technical Report CSD-TR-94-1403, </note> <institution> Cornell University, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: The run diverges if is infinite and the infinite sum P i0 t i diverges. The hybrid system H is nonzeno if every finite run of H is a prefix of some divergent run of H . Nonzeno systems can be executed <ref> [AH94] </ref>.
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: The verification methods are presented in Section 4. Some paradigmatic examples are specified and verified to illustrate the application of our results. These examples are analyzed using the Kronos tool [NSY92, NOSY93] (available from Grenoble) and the HyTech tool <ref> [AHH93, HH94] </ref> (available from Cornell), two symbolic model checkers for timed and hybrid systems. 1 2 A Model for Hybrid Systems We specify hybrid systems by graphs whose edges represent discrete transitions and whose vertices represent continuous activities. <p> Table 1 shows the number of iterations and the running times (measured in seconds) obtained with Kronos on a SUN 4 Sparc Station for verifying the formula on the system for different values of the parameters. (Performance figures for HyTech can be found in <ref> [AHH93, HH94] </ref>.) Example: the billiards game Consider the movement of the grey ball on the billard table. It is possible that the grey ball returns to the initial position with the initial direction. In this case the movement is periodic. <p> For example, our results have recently been extended to a more general model, where the rates of variables are not constant in each location, but vary arbitrarily between given constant lower and upper bounds <ref> [AHH93, OSY94] </ref>. 1 If T is not an integer, but is a rational p q , we have to multiply l, h, x g , y g , x w and y w by q to make it an integer. 27 In that case the state sets that are computed by
Reference: [BFH90] <author> A. Bouajjani, J.-C. Fernandez, and N. Halbwachs. </author> <title> Minimal model generation. In E.M. </title> <editor> Clarke and R.P. Kurshan, editors, </editor> <booktitle> Proceedings of the Second Annual Workshop on Computer-Aided Verification, Lecture Notes in Computer Science 531, </booktitle> <pages> pages 197-203. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: respects R F . 19 If we are given, in addition to R F , an initial region I that restricts our interest to the reachable region (I 7! fl ), then it is best to use an algorithm that performs a simultaneous reachability and minimization analysis of transition systems <ref> [BFH90, LY92] </ref>. The minimization procedure of [BFH90] is given below. <p> The minimization procedure of <ref> [BFH90] </ref> is given below. Starting from the initial partition fR F ; R F g that respects R F , the procedure selects a region R and checks if R is stable with respect to the current partition; if not, then R is split into smaller sets.
Reference: [CC77] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proceedings of the 4th Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1977. </year>
Reference-contexts: An approximate solution to these problems is provided by abstract interpretation techniques <ref> [CC77, CH78] </ref>. First, union of polyhedra is approximated by their convex hull, i.e., the least convex polyhedron containing the operands of the union. <p> See [CH78, LeV92] for efficient algorithms to compute the convex hull. The system of equations becomes: X ` = hI ` t e=(` 0 ;`)2Edg post e [X ` 0 ]i % To enforce the convergence of iterations, we apply Cousot's "widening technique" <ref> [CC77, CH78] </ref>. The idea is to extrapolate the limit of a sequence of polyhedra, in such a way that an upper approximation of the limit be always reached in a finite number of iterations.
Reference: [ Cer92] <author> K. Cerans. </author> <title> Decidability of bisimulation equivalences for parallel timer processes. </title> <editor> In G.v. Bochman and D.K. Probst, editors, </editor> <booktitle> Proceedings of the 4th Annual Workshop on Computer-Aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 269-300. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <month> 28 </month>
Reference-contexts: Thus, the runs of H encode the runs of M , and the halting problem for M is reduced to a reachability problem for H. Theorem 3.3 The reachability problem is undecidable for simple integrator systems. Proof. This is proved in <ref> [ Cer92] </ref>. 4 The Verification of Linear Hybrid Systems We present a methodology for analyzing linear hybrid systems that is based on predicate transformers for computing the step predecessors and the step successors of a given set of states.
Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proceedings of the 5th Annual Symposium on Principles of Programming Languages, </booktitle> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: An approximate solution to these problems is provided by abstract interpretation techniques <ref> [CC77, CH78] </ref>. First, union of polyhedra is approximated by their convex hull, i.e., the least convex polyhedron containing the operands of the union. <p> Let t denote the convex hull operator: P t P 0 = fx + (1 )x 0 j x 2 P; x 0 2 P 0 ; 2 [0; 1]g Fig. 8.a shows an example of convex hull. See <ref> [CH78, LeV92] </ref> for efficient algorithms to compute the convex hull. The system of equations becomes: X ` = hI ` t e=(` 0 ;`)2Edg post e [X ` 0 ]i % To enforce the convergence of iterations, we apply Cousot's "widening technique" [CC77, CH78]. <p> See [CH78, LeV92] for efficient algorithms to compute the convex hull. The system of equations becomes: X ` = hI ` t e=(` 0 ;`)2Edg post e [X ` 0 ]i % To enforce the convergence of iterations, we apply Cousot's "widening technique" <ref> [CC77, CH78] </ref>. The idea is to extrapolate the limit of a sequence of polyhedra, in such a way that an upper approximation of the limit be always reached in a finite number of iterations. <p> A widening operator on polyhedra has been defined in <ref> [CH78, Hal93] </ref>. Intuitively, the system of linear constraints of P rP 0 is made of exactly those constraints of P which are also satisfied by P 0 . So it is built by removing constraints from P and since we cannot remove infinitely many constraints, the finiteness property follows.
Reference: [CHR91] <author> Z. Chaochen, C. A. R. Hoare, and A. P. Ravn. </author> <title> A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40(5) </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: The private clocks of the processes P 1 and P 2 determine the rate of change of the two skewed-clock variables x and y, respectively. A leaking gas burner Now we consider an integrator system. In <ref> [CHR91] </ref>, the duration calculus is used to prove that a gas burner does not leak excessively.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Proceedings of the 5th Annual Conference on Computer-Aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: A widening operator on polyhedra has been defined in <ref> [CH78, Hal93] </ref>. Intuitively, the system of linear constraints of P rP 0 is made of exactly those constraints of P which are also satisfied by P 0 . So it is built by removing constraints from P and since we cannot remove infinitely many constraints, the finiteness property follows.
Reference: [HH94] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Model-checking strategies for hybrid systems. </title> <booktitle> Presented at the Seventh International Conference on Industrial and Engineering Applications of Artificial Intelligence and Expert Systems, </booktitle> <month> May </month> <year> 1994. </year> <note> Available as Technical Report CSD-TR-94-1437, </note> <institution> Cornell University, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The verification methods are presented in Section 4. Some paradigmatic examples are specified and verified to illustrate the application of our results. These examples are analyzed using the Kronos tool [NSY92, NOSY93] (available from Grenoble) and the HyTech tool <ref> [AHH93, HH94] </ref> (available from Cornell), two symbolic model checkers for timed and hybrid systems. 1 2 A Model for Hybrid Systems We specify hybrid systems by graphs whose edges represent discrete transitions and whose vertices represent continuous activities. <p> It follows that the design requirement is an invariant. 16 4.3 Approximate Analysis In this section, we briefly present an approximate technique for dealing with systems where the (forward or backward) iterative procedure does not converge. For more details, see <ref> [HH94, HPR94] </ref>. <p> Table 1 shows the number of iterations and the running times (measured in seconds) obtained with Kronos on a SUN 4 Sparc Station for verifying the formula on the system for different values of the parameters. (Performance figures for HyTech can be found in <ref> [AHH93, HH94] </ref>.) Example: the billiards game Consider the movement of the grey ball on the billard table. It is possible that the grey ball returns to the initial position with the initial direction. In this case the movement is periodic.
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Each location is also labeled with an invariant condition that must hold when the control resides at the location. This model for hybrid systems is inspired by the phase transition systems of [MMP92, NSY93], and can be viewed as a generalization of timed safety automata <ref> [AD94, HNSY94] </ref>. The purpose of this paper is to demonstrate that standard program-analysis techniques can be adapted to hybrid systems. For verification purposes we restrict ourselves to linear hybrid systems. <p> In particular, we consider the symbolic model-checking method for timed automata presented in <ref> [HNSY94] </ref>, and the minimization procedure for timed automata presented in [ACD + 92]. Both methods perform a reachability analysis over an infinite state space. <p> the transition system T H : for all states ; 0 2 , where = (`; -), and for all t 2 R 0 , 9f 2 Act (`); 7! t It follows that for every hybrid system, the set of runs is closed under prefixes, suffixes, stuttering, and fusion <ref> [HNSY94] </ref>. For time-deterministic hybrid systems, the rule for the time-step relation can be simplified. <p> The characteristic set [[]] of is the set of states that satisfy . The model-checking algorithm Given a closed TCTL-formula , a model-checking algorithm computes the characteristic set [[]]. We present the symbolic model-checking algorithm for timed automata <ref> [HNSY94] </ref>, which is a semidecision procedure for model checking TCTL-formulas over linear hybrid systems. The procedure is based on fixpoint characterizations of the TCTL-modalities in terms of a binary next operator .. Given two regions R; R 0 , the region R . <p> R 0 . In <ref> [HNSY94] </ref> it is shown that for nonzeno timed automata, the meaning of both TCTL-modalities 9U and 8U can be computed iteratively as fixpoints, using the . operator. While for multirate timed systems, the iterative fixpoint computation always terminates, this is no longer the case for linear hybrid systems in general.
Reference: [HPR94] <author> N. Halbwachs, Y.-E. Proy, and P. Raymond. </author> <title> Verification of linear hybrid systems by means of convex approximations. </title> <booktitle> In Proceedings of the International Symposium on Static Analysis, Lecture Notes in Computer Science, to appear. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: To cope with this problem, approximate analysis techniques are used to enforce the convergence of iterations by computing upper approximations of state sets. Approximate techniques yield either necessary or sufficient verification conditions. The paper is essentially a synthesis of the results presented in <ref> [ACHH93, NOSY93, HPR94] </ref>. Section 2 presents a general model for hybrid systems. Section 3 defines linear hybrid systems, and presents decidability and undecidability results for the reachability problem of subclasses of linear hybrid systems. The verification methods are presented in Section 4. <p> It follows that the design requirement is an invariant. 16 4.3 Approximate Analysis In this section, we briefly present an approximate technique for dealing with systems where the (forward or backward) iterative procedure does not converge. For more details, see <ref> [HH94, HPR94] </ref>.
Reference: [JLHM91] <author> M. Jaffe, N. Leveson, M. Heimdahl, and B. Melhart. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-258, </pages> <year> 1991. </year>
Reference-contexts: the next section, we will prove that y 60 ) 20z y is an invariant of the system. 1 2 x := 0 x := 0 z = 0 _x = 1 _z = 1 _x = 1 _z = 0 8 A temperature control system This example appears in <ref> [JLHM91] </ref>. The system controls the coolant temperature in a reactor tank by moving two independent control rods. The goal is to maintain the coolant between the temperatures m and M . When the temperature reaches its maximum value M , the tank must be refrigerated with one of the rods.
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Workshop on Theory of Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We did not discuss any analysis techniques that cannot be formulated within the framework of reachability analysis. Most of these techniques are based on digitization methods that reduce verification problems for hybrid systems to verification problems for discrete systems, which are decidable <ref> [KPSY93, PV94] </ref>.
Reference: [Lam87] <author> L. Lamport. </author> <title> A fast mutual-exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <year> 1987. </year>
Reference-contexts: Each process has a critical section and at each time instant, at most one of the two processes is allowed to be in its critical section. Mutual exclusion is ensured by a version of Fischer's protocol <ref> [Lam87] </ref>, which we describe first in pseudocode.
Reference: [LeV92] <author> H. LeVerge. </author> <title> A note on Chernikova's algorithm. </title> <type> Research Report 635, </type> <institution> IRISA, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: Let t denote the convex hull operator: P t P 0 = fx + (1 )x 0 j x 2 P; x 0 2 P 0 ; 2 [0; 1]g Fig. 8.a shows an example of convex hull. See <ref> [CH78, LeV92] </ref> for efficient algorithms to compute the convex hull. The system of equations becomes: X ` = hI ` t e=(` 0 ;`)2Edg post e [X ` 0 ]i % To enforce the convergence of iterations, we apply Cousot's "widening technique" [CC77, CH78].
Reference: [LY92] <author> D. Lee and M. Yannakakis. </author> <title> Online minimization of transition systems. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 264-274. </pages> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: respects R F . 19 If we are given, in addition to R F , an initial region I that restricts our interest to the reachable region (I 7! fl ), then it is best to use an algorithm that performs a simultaneous reachability and minimization analysis of transition systems <ref> [BFH90, LY92] </ref>. The minimization procedure of [BFH90] is given below. <p> If the regions R F and I are linear, from Lemma 4.2 it follows that all regions that are constructed by the minimization procedure are linear. The minimization procedure terminates if the coarsest bisimulation has only a finite number of equivalence classes. An alternative minimization procedure is presented in <ref> [LY92] </ref>, which can also be implemented using the primitives hi . and pre. Example: the water-level monitor Let H be the hybrid automaton defined in Figure 2. We use the minimization procedure to prove that the formula 1 y 12 is an invariant of H.
Reference: [MMP92] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", Lecture Notes in Computer Science 600, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Each location is also labeled with an invariant condition that must hold when the control resides at the location. This model for hybrid systems is inspired by the phase transition systems of <ref> [MMP92, NSY93] </ref>, and can be viewed as a generalization of timed safety automata [AD94, HNSY94]. The purpose of this paper is to demonstrate that standard program-analysis techniques can be adapted to hybrid systems. For verification purposes we restrict ourselves to linear hybrid systems.
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Workshop on Theory of Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 29 </month>
Reference-contexts: To cope with this problem, approximate analysis techniques are used to enforce the convergence of iterations by computing upper approximations of state sets. Approximate techniques yield either necessary or sufficient verification conditions. The paper is essentially a synthesis of the results presented in <ref> [ACHH93, NOSY93, HPR94] </ref>. Section 2 presents a general model for hybrid systems. Section 3 defines linear hybrid systems, and presents decidability and undecidability results for the reachability problem of subclasses of linear hybrid systems. The verification methods are presented in Section 4. <p> The verification methods are presented in Section 4. Some paradigmatic examples are specified and verified to illustrate the application of our results. These examples are analyzed using the Kronos tool <ref> [NSY92, NOSY93] </ref> (available from Grenoble) and the HyTech tool [AHH93, HH94] (available from Cornell), two symbolic model checkers for timed and hybrid systems. 1 2 A Model for Hybrid Systems We specify hybrid systems by graphs whose edges represent discrete transitions and whose vertices represent continuous activities.
Reference: [NSY92] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Compiling real-time specifications into extended automata. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(9) </volume> <pages> 794-804, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The verification methods are presented in Section 4. Some paradigmatic examples are specified and verified to illustrate the application of our results. These examples are analyzed using the Kronos tool <ref> [NSY92, NOSY93] </ref> (available from Grenoble) and the HyTech tool [AHH93, HH94] (available from Cornell), two symbolic model checkers for timed and hybrid systems. 1 2 A Model for Hybrid Systems We specify hybrid systems by graphs whose edges represent discrete transitions and whose vertices represent continuous activities.
Reference: [NSY93] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 181-202, </pages> <year> 1993. </year>
Reference-contexts: Each location is also labeled with an invariant condition that must hold when the control resides at the location. This model for hybrid systems is inspired by the phase transition systems of <ref> [MMP92, NSY93] </ref>, and can be viewed as a generalization of timed safety automata [AD94, HNSY94]. The purpose of this paper is to demonstrate that standard program-analysis techniques can be adapted to hybrid systems. For verification purposes we restrict ourselves to linear hybrid systems.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D. Dill, editor, </editor> <booktitle> Proceedings of the 6th Annual Conference on Computer-Aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: For example, our results have recently been extended to a more general model, where the rates of variables are not constant in each location, but vary arbitrarily between given constant lower and upper bounds <ref> [AHH93, OSY94] </ref>. 1 If T is not an integer, but is a rational p q , we have to multiply l, h, x g , y g , x w and y w by q to make it an integer. 27 In that case the state sets that are computed by
Reference: [PV94] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D. Dill, editor, </editor> <booktitle> Proceedings of the 6th Annual Conference on Computer-Aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 30 </month>
Reference-contexts: We did not discuss any analysis techniques that cannot be formulated within the framework of reachability analysis. Most of these techniques are based on digitization methods that reduce verification problems for hybrid systems to verification problems for discrete systems, which are decidable <ref> [KPSY93, PV94] </ref>.
References-found: 26

