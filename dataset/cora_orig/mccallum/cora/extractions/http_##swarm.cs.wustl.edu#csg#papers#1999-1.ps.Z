URL: http://swarm.cs.wustl.edu/csg/papers/1999-1.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: http://www.cs.wustl.edu
Email: fpicco,alm,romang@cs.wustl.edu  
Title: Lime: Linda Meets Mobility  
Author: Gian Pietro Picco, Amy L. Murphy, and Gruia-Catalin Roman 
Address: Campus Box 1045, One Brookings Drive St. Louis, MO 63130-4899, USA +1-314-935-f7536,7537,6132g  
Affiliation: Dept. of Computer Science, Washington University  
Abstract: Lime is a system designed to assist in the rapid development of dependable mobile applications over both wired and ad hoc networks. Mobile agents reside on mobile hosts and all communication takes place via transiently shared tuple spaces distributed across the mobile hosts. The decoupled style of computing characterizing the Linda model is extended to the mobile environment. At the application level, both agents and hosts perceive movement as a sudden change of context. The set of tuples accessible by a particular agent residing on a given host is altered transparently in response to changes in the connectivity pattern among the mobile hosts. In this paper we present the key design concepts behind the Lime system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The formal semantic definition of Lime is the subject of a companion paper and relies on the use of Mobile UNITY [8], an extension of the UNITY notation and logic proposed by Chandy and Misra <ref> [1] </ref> with concepts that are fundamental in dealing with mobility. The remainder of this paper is structured as follows. Section 2 provides a brief review of Linda. Section 3 motivates Lime and its design philosophy.
Reference: [2] <author> A. Fuggetta, G. P. Picco, and G. Vigna. </author> <title> Understanding Code Mobility. </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> May </month> <year> 1998. </year>
Reference-contexts: Alongside this form of physical mobility, in which the hosts roam across the physical space and modify the topology of the network, researchers are paying increasing attention to various forms of logical mobility as well. In the latter case, often referred to as code mobility <ref> [2] </ref>, the entity being migrated is the code running on the hosts, which are usually not allowed to move. Code relocation is expected to offer several advantages over the traditional client-server paradigm, the most important being enhanced flexibility, customizability, and reduced network traffic.
Reference: [3] <author> D. Garlan and D. Le Metayer, </author> <title> editors. </title> <booktitle> Proc. of the 2 nd Int. Conf. on Coordination Models and Languages (COORDINATION '97), volume 1282 of LNCS. </booktitle> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1997. </year>
Reference-contexts: The idea enjoys wide acceptance in many scientific communities ranging from economics to artificial intelligence, and is at the core of a new interdisciplinary research area that investigates technologies and methodologies for the coordination of components in complex systems <ref> [7, 3] </ref>. Notably, the decoupling between components and their coordination fostered by Linda has several points of contact with the distinction between components and their interconnection that constitutes the core of recent research on software architecture [11].
Reference: [4] <author> D. Gelernter. </author> <title> Generative Communication in Linda. </title> <journal> ACM Computing Surveys, </journal> <volume> 7(1) </volume> <pages> 80-112, </pages> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: The underlying assumption in our work is that both mobile hosts and mobile agents can be regarded as instances of a generic concept of mobile component, and coordination takes place through the use of transiently shared tuple spaces accessed via the basic set of Linda primitives <ref> [4] </ref>. In Linda, coordination is achieved through a tuple space globally shared among components which, independent of their actual location, can access the tuple space by inserting, reading, or withdrawing tuples containing information. The model provides both spatial and temporal decoupling. <p> Section 7 highlights the technical challenges involved in implementing Lime and outlines several sample application scenarios. Finally, Section 8 summarizes our research contributions and highlights directions for future work. 2 LINDA Linda has been proposed at the beginning of the past decade <ref> [4] </ref> as a new model of communication among concurrent processes. The fundamental abstraction provided to each process is a shared tuple space that acts as a repository of elementary data structures|the tuples.
Reference: [5] <institution> IBM. T Spaces. </institution> <note> www.almaden.ibm.com/cs/TSpaces. </note>
Reference-contexts: The operation upon in Lime is similar to the notify operation provided by Sun's JavaSpace [9] and to the event registration mechanism provided by IBM's T-Spaces <ref> [5] </ref>. The development of a richer event model, allowing reactions to arbitrary events other than insertion of a new tuple, is the subject of on-going work. 7 DISCUSSION The technical issues involved in the development of Lime are complex. <p> Figures 6 and 7 show snapshots of a Lime implementation of a popular word game 1 , called Boggle TM . A prototype of Lime, built upon IBM's T-Spaces <ref> [5] </ref> is under development at our university. The initial version was developed under the constraining assumptions of full connectivity and anticipated disconnection|indeed, meaningful for small communities of people using collaborative applications in a short communication range, e.g., managers synchronizing their agendas in an airport meeting room.
Reference: [6] <author> D.B. Johnson. </author> <title> Routing in Ad Hoc Networks of Mobile Hosts. </title> <booktitle> In Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 158-163, </pages> <year> 1994. </year>
Reference-contexts: At the other end, the fixed network is absent and all the network facilities (e.g., routing) must be implemented by relying only on the available mobile hosts|this is the assumption made by research on ad hoc networks <ref> [6] </ref>. The characteristics of the wireless communication media, e.g., limited bandwidth and frequent disconnection, favor a decoupled and opportunistic style of computation. Computation is de-coupled in that it is expected to proceed even in the presence of disconnection|a frequent event in this domain.
Reference: [7] <author> T.M. Malone and K. Crowston. </author> <title> The interdisciplinary study of coordination. </title> <journal> ACM Computing Surveys, </journal> <volume> 26(1) </volume> <pages> 87-119, </pages> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: The idea enjoys wide acceptance in many scientific communities ranging from economics to artificial intelligence, and is at the core of a new interdisciplinary research area that investigates technologies and methodologies for the coordination of components in complex systems <ref> [7, 3] </ref>. Notably, the decoupling between components and their coordination fostered by Linda has several points of contact with the distinction between components and their interconnection that constitutes the core of recent research on software architecture [11].
Reference: [8] <author> P.J. McCann and G.-C. Roman. </author> <title> Compositional Programming abstractions for Mobile computing. </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: The system, not the application program, is responsible for managing movement and the tuple space restructuring associated with connectivity changes. The formal semantic definition of Lime is the subject of a companion paper and relies on the use of Mobile UNITY <ref> [8] </ref>, an extension of the UNITY notation and logic proposed by Chandy and Misra [1] with concepts that are fundamental in dealing with mobility. The remainder of this paper is structured as follows. Section 2 provides a brief review of Linda. Section 3 motivates Lime and its design philosophy. <p> The execution of reactsTo "registers" the reaction with T ; a complementary operation to "de-register" the reaction is also provided by Lime. The semantics of the reactsTo statement are the same as those defined for Mobile UNITY reactive statements, described in <ref> [8] </ref>. After each non-reactive statement, a reaction is selected non-deterministically among those registered, and its guard is evaluated. If the guard is true, the corresponding action is executed, otherwise the reaction is equivalent to a skip.
Reference: [9] <author> Sun Microsystems. JavaSpace Specification, </author> <month> March </month> <year> 1998. </year> <note> http://java.sun.com/products/jini/specs. </note>
Reference-contexts: When t 0 reaches E , the reaction E :reactsTo (s; t 0 ) fires, where s is actually the statement specified originally in the upon. The operation upon in Lime is similar to the notify operation provided by Sun's JavaSpace <ref> [9] </ref> and to the event registration mechanism provided by IBM's T-Spaces [5]. The development of a richer event model, allowing reactions to arbitrary events other than insertion of a new tuple, is the subject of on-going work. 7 DISCUSSION The technical issues involved in the development of Lime are complex.
Reference: [10] <author> C. Perkins. </author> <title> IP mobility support. RFC 2002, </title> <institution> IETF Network Working Group, </institution> <year> 1996. </year>
Reference-contexts: The networking scenarios enabled by mobile computing range roughly between two extremes. At one end, the availability of a fixed network is assumed, and its facilities are exploited by the mobile infrastructure| this is the case with Mobile IP <ref> [10] </ref>. At the other end, the fixed network is absent and all the network facilities (e.g., routing) must be implemented by relying only on the available mobile hosts|this is the assumption made by research on ad hoc networks [6].
Reference: [11] <author> M. Shaw and D. Garlan. </author> <title> Software Architecture: Perspective on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Notably, the decoupling between components and their coordination fostered by Linda has several points of contact with the distinction between components and their interconnection that constitutes the core of recent research on software architecture <ref> [11] </ref>. We chose the Linda model as the basis for this work due to its minimality and decou-pling in time and space. 3 LINDA EXTENSIONS FOR A MOBILE ENVIRONMENT Linda provides coordination among concurrently executing components accessing a shared tuple space that is persistent, globally accessible, and statically created.
Reference: [12] <author> A. Xu and B. Liskov. </author> <title> A design for a fault-tolerant, distributed implementation of Linda. </title> <booktitle> In Digest of Papers of the 19 th Int. Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 199-206, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Maintaining these properties in the presence of physical mobility is complicated, because connectivity can no longer be taken for granted. Early research on fault-tolerant distributed implementations of Linda <ref> [12] </ref> tack led the problem under the assumption that disconnection was just an unfortunate accident, and employed replication schemes to increase tuple availability.
References-found: 12

