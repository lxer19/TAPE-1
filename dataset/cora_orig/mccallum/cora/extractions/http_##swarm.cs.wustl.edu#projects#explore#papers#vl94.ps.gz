URL: http://swarm.cs.wustl.edu/projects/explore/papers/vl94.ps.gz
Refering-URL: http://swarm.cs.wustl.edu/~hart/papers/papers.html
Root-URL: http://www.cs.wustl.edu
Title: Visual Communication of Formal Design Properties A Case Study  
Author: Delbert Hart Charles Calkins 
Address: in Saint Louis  
Affiliation: Washington University  
Abstract: Formal methods hold the promise for high dependability in the design of critical software. However, software engineers who employ formal methods need to communicate their design decisions to those who may not be in a position to acquire a full understanding of the formal notation being used. Visualizations might be able convey the required information precisely and reliably without the use of formal notation. This paper presents a case study on how to employ visualization to communicate information about successive refinements involved in the formal derivation of a message router. The ultimate goal is to identify issues fundamental to this particular use of visualization and to outline a methodology which achieves effective visual communication without compromising formal reasoning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Creveuil, C., and Roman, G.-C., </author> <title> Formal Specification and Design of a Message Router, </title> <institution> Department of Computer Science, Washington University, St. Louis, Missouri, </institution> <note> Technical Report WUSC-92-44, 1992. (To appear in ACM Transactions on Software Engineering Methodology.) </note>
Reference-contexts: In the simplest terms, the message router is a device which accepts messages on a number of input lines and delivers them to its output lines. A full formal derivation of a message router design employing wormhole routing in a crossbar switch <ref> [1] </ref> already existed prior to the start of this work. The general question we try to address in this paper is how can the various stages of the design be presented visually. We used the case study to identify challenging issues and helpful techniques.
Reference: [2] <author> Price, B. A., Baecker, R. M., and Small, I. S., </author> <title> A Principled Taxonomy of Software Visualization, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 4, </volume> <pages> pp. 211-266, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction As amply demonstrated by two recently published surveys <ref> [2, 5] </ref> , program visualization is an area of significant research growth. Recently, we have been exploring ways in which visualization can be used within the design process. There is one design area where visualization may prove to be not only a costsaving technique but a basic necessity.
Reference: [3] <author> Roman, G.-C., Cox, K. C., Wilcox, C. D., and Plun, J. Y., Pavane: </author> <title> A System for Declarative Visualization of Concurrent Computations, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 3, no. 1, </volume> <pages> pp. 161-193, </pages> <year> 1992. </year>
Reference-contexts: The general question we try to address in this paper is how can the various stages of the design be presented visually. We used the case study to identify challenging issues and helpful techniques. All the visualizations discussed in this paper have been produced using Pavane <ref> [3, 5] </ref>. They involve one or more worlds (windows) of three-dimensional geometric objects, full-color, and smooth animation. Each visualization is constructed by writing a set of rules that map program states to graphical representations. Pavane supports rapid visualization of C and Swarm [4] programs.
Reference: [4] <author> Roman, G.-C., and Cunningham, H. C., </author> <title> Mixed Programming Metaphors in a Shared Dataspace Model of Concurrency, </title> <journal> IEEE Transactions on Software Engineering , vol. </journal> <volume> 16, no. 12, </volume> <pages> pp. 1361-1373, </pages> <year> 1990. </year>
Reference-contexts: They involve one or more worlds (windows) of three-dimensional geometric objects, full-color, and smooth animation. Each visualization is constructed by writing a set of rules that map program states to graphical representations. Pavane supports rapid visualization of C and Swarm <ref> [4] </ref> programs. We used the Swarm logic to build the specifications and carry out the refinements, the Swarm programming notation is used to write abstract programs that satisfy the specifications, and Pavane is used to construct the visualizations that convey the design decisions associated with each refinement step. 2.
Reference: [5] <author> Roman, G. C., and Cox, K., </author> <title> A Taxonomy of Program Visualization Systems, </title> <journal> IEEE Computer , vol. </journal> <volume> 26, no. 12, </volume> <pages> pp. 11-24, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction As amply demonstrated by two recently published surveys <ref> [2, 5] </ref> , program visualization is an area of significant research growth. Recently, we have been exploring ways in which visualization can be used within the design process. There is one design area where visualization may prove to be not only a costsaving technique but a basic necessity. <p> The general question we try to address in this paper is how can the various stages of the design be presented visually. We used the case study to identify challenging issues and helpful techniques. All the visualizations discussed in this paper have been produced using Pavane <ref> [3, 5] </ref>. They involve one or more worlds (windows) of three-dimensional geometric objects, full-color, and smooth animation. Each visualization is constructed by writing a set of rules that map program states to graphical representations. Pavane supports rapid visualization of C and Swarm [4] programs.
References-found: 5

