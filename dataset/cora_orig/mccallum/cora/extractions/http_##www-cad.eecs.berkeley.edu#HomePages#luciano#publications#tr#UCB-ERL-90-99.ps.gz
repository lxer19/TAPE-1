URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications/tr/UCB-ERL-90-99.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications.html
Root-URL: 
Title: Synthesis of verifiably hazard-free asynchronous control circuits  
Author: L. Lavagno K. Keutzer A. Sangiovanni-Vincentelli 
Note: STG persistency is not necessary for hazard-free implementation is given.  
Date: November 9, 1990  
Address: Murray Hill, NJ  
Affiliation: Dept. of EECS University of California, Berkeley  AT&T Bell Laboratories  Dept. of EECS University of California, Berkeley  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [BC88] <author> C. Berthet and E. Cerny. </author> <title> Synthesis of speed-independent circuits using set-memory elements. </title> <editor> In G. Saucier, editor, </editor> <booktitle> Proceedings of the International Workshop Logic and Architectural Synthesis for Silicon Compilers. </booktitle> <address> Grenoble, France, </address> <month> May </month> <year> 1988. </year>
Reference: [BHMSV84] <author> R. K. Brayton, G. D. Hachtel, C. T. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference: [BRSVW87] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> MIS: A multiple-level logic optimization system. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-6(6):1062-1081, </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: If we want to further improve the area and/or delay performance of the circuit, we can use some multi-level synthesis techniques, such as those described in <ref> [BRSVW87] </ref>. In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed by Theorem 2.1.
Reference: [CHEP71] <author> F. Commoner, A. W. Holt, S. Even, and A. Pnueli. </author> <title> Marked directed graphs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 5 </volume> <pages> 511-523, </pages> <year> 1971. </year>
Reference-contexts: They are said to be concurrent if they are not ordered and there exists some MG component to which both belong. Otherwise they are said to be in conflict. The following Theorems about marked graph components of an FC net are proved in <ref> [CHEP71] </ref>: Theorem 2.2 An MG marking is live if and only if the token count in every simple cycle is positive. Theorem 2.3 An MG marking is safe if and only if every edge belongs to at least one simple cycle with exactly one token.
Reference: [Chu86] <author> T.-A. Chu. </author> <title> On the models for designing VLSI asynchronous digital systems. Integration: </title> <journal> the VLSI journal, </journal> <volume> 4 </volume> <pages> 99-113, </pages> <year> 1986. </year>
Reference-contexts: that does not exhibit hazards for some class of input changes, then we can use multi-level synthesis techniques, constrained to use only the transformations listed above, to obtain a multi-level implementation of f that has the same hazard properties. 2.3 Signal Transition Graph The Signal Transition Graph was introduced by <ref> [Chu86] </ref> as a specification formalism for asynchronous sequential circuits. It is a natural way to specify asynchronous interface circuits, because the causal relations among the signal transitions can be easily described, and it the concurrency is captured explicitly.
Reference: [Chu87] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: An example of such unintentional changes, also called hazards, are the multiple oscillations of a signal that is supposed to have a single transition. In this paper we will give a procedure transforming a formal, technology-independent specification, called Signal Transition Graph (introduced by <ref> [Chu87] </ref>), into a circuit implementation made out of basic gates such as nands, nors and S-R flip-flops. We want to prove that the output of our procedure does not have hazards. <p> In this paper we introduce a new synthesis procedure, that can be proved to generate hazard-free circuits from an STG specification, both with the unbounded gate-delay and the bounded wire-delay models. The synthesis procedure resembles the one presented in <ref> [Chu87] </ref> and [Men88]. <p> The paper is organized as follows. Section 2 recalls some definitions from the literature. Section 3 describes briefly the synthesis procedure introduced by <ref> [Chu87] </ref> and improved by [Men88] and [Van90]. Section 4 gives a procedure to synthesize a hazard-free circuit under the bounded wire-delay model. Section 5 describes the algorithm implementation and gives experimental results. Section 6 draws some conclusions and outlines some opportunities for future development. <p> Appendix A describes a very simple example, applying the ideas presented in the paper. 2 Definitions This section gives some basic definitions and previous results useful throughout the paper. Most of the definitions and results, unless otherwise stated, are from <ref> [Chu87] </ref>. 2.1 Logic functions A completely specified single-output logic function g of n input variables is a mapping g : f0; 1g n ! f0; 1g. Each input variable x i corresponds to a coordinate of the domain of g. Each element of f0; 1g n is called a vertex. <p> So all live and safe markings of an MG are partitioned into equivalence classes, where all mutually reachable markings belong to the same class. The following Theorem is proved in <ref> [Chu87] </ref>: Theorem 2.6 Let N be an FC net such that each FSM component has exactly one token in the initial marking. Then every live and safe marking of N is a live and safe marking of some MG component. <p> reachable from the initial one, because a rising and falling transition for the same signal can never be concurrently enabled and each signal must have alternate rising and falling transitions. 2 Note the distinction between live net and live STG. 6 This definition is broader than the one given in <ref> [Chu87] </ref>, since * he required that only two transitions per signal appear in the STG, and that those transitions are ordered (i.e. belong to a simple cycle) in every FSM component of the net. * we do not restrict the number of transitions per signal, and we require that at least <p> An edge joins state s 1 with state s 2 if the corresponding marking M 2 can be reached from M 1 (corresponding to s 1 ) through the firing of a single transition. This transition labels the edge. 2.5 Unique state coding The synthesis procedure described in <ref> [Chu87] </ref> uses the output signals of the circuit directly as state variables, so the circuit must be able to tell its global state given only the values of the input and output signals. <p> An example of such a labeling appears in Figure 4.b. If this can be done, then we say that the STG from which the SG was derived has the Unique State Coding property (USC, [Van90]). The following Theorem was proved in <ref> [Chu87] </ref>: 7 Theorem 2.7 An STG S has the USC property if no complementary set of transitions is feasible in S. Informally, if a set of transitions is feasible, then they can all fire without any other signal changing in the circuit. <p> generate the same result, so either of them can be used to obtain the implementation, but both are useful in order to prove properties of this implementation. 3.1 State Graph derivation from Signal Transition Graph The SG can be derived from the STG by exhaustive simulation as follows (see also <ref> [Chu87] </ref> for an equivalent procedure based on graph decomposition): Procedure 3.1 1. for each live and safe marking M 1 : (a) if M 1 has not been recorded yet, then: i. create a new state s 1 associated with M 1 . ii. for each transition t fl enabled in <p> Persistency at the STG level was considered to be a necessary and sufficient condition for the existence of a hazard-free circuit implementation, due to the the following Theorem, taken from <ref> [Chu87] </ref> (only the notation is changed here, to be consistent with the rest of the paper): Theorem 4.3 Let S be a live STG. <p> See for example the STG in Figure 2.a, where y + is not persistent. The logic equation for y is y = x + z, and using the gate-delay model, as assumed by <ref> [Chu87] </ref>, we know that x is caused by z + , so when x fires z is already at 1 (a controlling value for the or gate), and x cannot disable y + . <p> But this model is a reasonable approximation of reality only if the whole sub-circuit was only one simple gate, such as a nand or a nor. We can examine now the example in Figure 10 (from <ref> [Chu87] </ref>), where a circuit implementation was derived from a persistent STG (only a fragment is shown here). The value of signals in the given marking is La = 0, Lr = 1, Sa = 0, Sr = 1, Ca = 0 and Cr = 0. <p> delays within the same gate, implementing either s or m, so d 1 = d 2 , and d 1 d 2 = 0 &lt; d 3 . 2 Notice that the assumption that each excitation function may be modeled as a single gate was used, as shown above, by <ref> [Chu87] </ref> and [Men88]. 5 Experimental results All the algorithms described in this paper have been implemented within the sis sequential logic synthesis system (developed at U.C. Berkeley). Table 1 contains the results of the synthesis and hazard removal procedures for a set of STG examples taken from the literature.
Reference: [Hac72] <author> M. Hack. </author> <title> Analysis of production schemata by Petri Nets. </title> <type> Technical Report TR 94, </type> <institution> Project MAC, MIT, </institution> <year> 1972. </year>
Reference-contexts: An FC net is safe if no place can ever be assigned more than one token after any sequence of firings from the initial marking. In <ref> [Hac72] </ref> was proved that a live and safe FC net can be decomposed into 1. FSM components that cover the net (each component is sequential and exhibits non-deterministic choice), 2. MG components that cover the net (each component has concurrency and does not exhibit non-deterministic choice).
Reference: [Huf54] <author> D. A. Huffman. </author> <title> The synthesis of sequential switching circuits. </title> <journal> J. Franklin Institute, </journal> <volume> 257 161-190,275-303, </volume> <month> March </month> <year> 1954. </year>
Reference-contexts: Because of statistical fluctuations in the manufacturing process and of modeling errors, for example the delay on the wires themselves, a lower and an upper bound on the nominal delay are considered when verifying the circuit with timing analysis. This delay model was introduced by <ref> [Huf54] </ref> (together with the assumption, that we shall not make, that input changes are applied only when the circuit is known to be stable).
Reference: [McC56] <author> E. McCluskey. </author> <title> Minimization of Boolean functions. </title> <journal> Bell Laboratories Technical Journal, </journal> <month> November </month> <year> 1956. </year>
Reference-contexts: Unfortunately we cannot remove redundant cubes, unless each cube in the original on-set cover is already covered by some other prime. So we can set up a minimum covering problem similar to the classical Quine-McCluskey minimization procedure <ref> [McC56] </ref>, where each cube c of the original cover (rather than each minterm of f , as in the original procedure) must be completely covered by at least one prime in the output cover. excitation function m according to Procedure 4.2 is redundant 6 .
Reference: [Men88] <author> T. Meng. </author> <title> Asynchronous Design for Digital Signal Processing Architectures. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: In this paper we introduce a new synthesis procedure, that can be proved to generate hazard-free circuits from an STG specification, both with the unbounded gate-delay and the bounded wire-delay models. The synthesis procedure resembles the one presented in [Chu87] and <ref> [Men88] </ref>. However our procedure is more general, since it deals with a more realistic delay model, and it can potentially give better results, since it can guarantee that the circuit is hazard-free without requiring the STG to be persistent in the case of both unbounded gate-delay and bounded wire-delay. <p> The paper is organized as follows. Section 2 recalls some definitions from the literature. Section 3 describes briefly the synthesis procedure introduced by [Chu87] and improved by <ref> [Men88] </ref> and [Van90]. Section 4 gives a procedure to synthesize a hazard-free circuit under the bounded wire-delay model. Section 5 describes the algorithm implementation and gives experimental results. Section 6 draws some conclusions and outlines some opportunities for future development. <p> the same gate, implementing either s or m, so d 1 = d 2 , and d 1 d 2 = 0 &lt; d 3 . 2 Notice that the assumption that each excitation function may be modeled as a single gate was used, as shown above, by [Chu87] and <ref> [Men88] </ref>. 5 Experimental results All the algorithms described in this paper have been implemented within the sis sequential logic synthesis system (developed at U.C. Berkeley). Table 1 contains the results of the synthesis and hazard removal procedures for a set of STG examples taken from the literature.
Reference: [Moo90] <author> C. W. Moon. </author> <title> On synthesizing logic from signal transition graphs. </title> <type> Personal communication, </type> <year> 1990. </year>
Reference-contexts: to implement the feedback loop (sequential part), and apply known logic synthesis techniques in order to obtain a minimal implementation of the combinational part. 4.3.1 Feedback loop implementation with S-M flip-flop The feedback loop can always be implemented using a simple flip-flop, due to the following theorem, first proved in <ref> [Moo90] </ref> in the restricted case when the STG is persistent. Theorem 4.2 Let S be a live STG with the USC property. Let F and R be a pair of on-set and off-set covers of the next-state/output function f of signal t derived from S according to Procedure 4.2.
Reference: [Sei81] <author> C. L. Seitz. </author> <note> Chapter 7. </note> <editor> In C. Mead and L. Conway, editors, </editor> <title> Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference: [Ung69] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley Interscience, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction Asynchronous sequential circuit design has always been a controversial topic. In the early years of electronic circuit design, when the size of the circuits was such that a human designer could keep track of the complex timing issues involved, it was a popular design style (see <ref> [Ung69] </ref> for a thorough review). Then synchronous logic dominated the VLSI era, when the ease of design of clocked circuits overwhelmed the advantages of the asynchronous style. Asynchronous design, still, has always been around, at least in the restricted domain of interfaces to the external world, asynchronous by definition. <p> Hazards must be absolutely avoided, because they can cause the circuit to malfunction in an unpredictable way (for example in response to a change in operating temperature). The following Theorem was proved in <ref> [Ung69] </ref>: Theorem 2.1 Let T be a two-level representation of a logic function f . Let M be a multi-level representation of f such that it can be obtained from T using only the associative, distributive and De Morgan laws. <p> Exhaustive simulation of all input vector sequences for all possible delay assignments is clearly not feasible. So we will use three-valued logic analysis, where each variable can assume a value of 0, 1 or - (for undetermined), as described in <ref> [Ung69] </ref>, by collapsing a whole family of input vector sequences and delay assignments into a single three-valued simulation. <p> Each valid vector pair has associated a transition cube, where all signals that change value from v 1 to v 2 are undetermined, while the other signals have the value they have in v 1 (and also in v 2 , of course). It was proved in <ref> [Ung69] </ref> that a hazard condition exists for a gate-level implementation, with the unbounded wire-delay model, if and only if the three-valued simulation of the extended transition cube corresponding to a valid vector pair gives an undetermined output value. <p> We shall see in Section 4.3.2 that the assumption to use S-M flip-flops can be removed without changing the hazard properties of the sub-circuit. Dynamic hazards are practically unavoidable in any circuit implementation of a combinational function (see <ref> [Ung69] </ref>). Thus we assume that the S-M flip-flop implementation, or any flip-flop type that we will use, is relatively immune to dynamic hazards, i.e. that a dynamic hazard on S or M can cause only one of the following events: 1. <p> For example we can encode each external signal t with two wires, t 0 and t 1 , carrying complementary values during quiescent conditions (dual-rail encoding), and driven with wired-or logic. The logic implementation should also follow the guidelines described in <ref> [Ung69] </ref> for speed-independent circuits, that require disjoint two-level implementation. Under quiescent conditions all sub-circuits drive one of the wires to 0, say t 0 , and leave the other wire at 1.
Reference: [Van90] <author> P. Vanbekbergen. </author> <title> Optimized synthesis of asynchronous control circuits from graph-theoretic specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 184-187, </pages> <month> November </month> <year> 1990. </year> <month> 21 </month>
Reference-contexts: The paper is organized as follows. Section 2 recalls some definitions from the literature. Section 3 describes briefly the synthesis procedure introduced by [Chu87] and improved by [Men88] and <ref> [Van90] </ref>. Section 4 gives a procedure to synthesize a hazard-free circuit under the bounded wire-delay model. Section 5 describes the algorithm implementation and gives experimental results. Section 6 draws some conclusions and outlines some opportunities for future development. <p> An example of such a labeling appears in Figure 4.b. If this can be done, then we say that the STG from which the SG was derived has the Unique State Coding property (USC, <ref> [Van90] </ref>). The following Theorem was proved in [Chu87]: 7 Theorem 2.7 An STG S has the USC property if no complementary set of transitions is feasible in S. Informally, if a set of transitions is feasible, then they can all fire without any other signal changing in the circuit. <p> The first formal procedure to enforce the USC property was given by <ref> [Van90] </ref>.
References-found: 14

