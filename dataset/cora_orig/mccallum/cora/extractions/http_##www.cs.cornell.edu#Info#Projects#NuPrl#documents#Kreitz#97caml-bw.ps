URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/documents/Kreitz/97caml-bw.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/html/publication.html
Root-URL: 
Title: Formal Reasoning about Communication Systems I Embedding ML into Type Theory formal representations and the
Author: Christoph Kreitz 
Note: The  
Abstract: We present a semantically correct embedding of a subset of the Ocaml programming language into the type theory of NuPRL. The subset is that needed to build the Ensemble group communication system. We describe the essential methodologies for representing language constructs by type-theoretical expressions. Tactics representing derived inference rules and a programming logic for these constructs will be discussed as well as algorithms for translating an Ocaml-program into NuPRL-objects and vice versa. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Aagaard and M. Leeser. </author> <title> Verifying a logic synthesis tool in Nuprl. </title> <booktitle> In Proceedings of the Workshop on Computer-Aided Verification, Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The system itself supports interactive and semi-automatic formal reasoning, evaluation of programs, language extensions by user-defined concepts, and an extendible library of verified knowledge from various domains. It has been used for large verifications of a logic synthesis tool <ref> [1] </ref> and the SCI cache coherency protocol [12]. In order to tailor NuPRL as a reasoning tool for verifying and reconfiguring communication systems we have to solve several subtasks (see figure 2).
Reference: 2. <author> Stuart Allen. </author> <title> A non-type-theoretic definition of Martin-Lof's types. </title> <editor> In David Gries, editor, </editor> <booktitle> LICS-87 | Proceedings of the Second Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 215-224. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: It provides formalizations of a constructive higher order logic, an elementary programming language, and fundamental data types and has been shown correct with respect to a formalization of Martin-Lof's semantics <ref> [2] </ref>. The basic objects of reasoning are types and members of types.
Reference: 3. <author> K. P. Birman. </author> <title> Building Secure and Reliable Network Applications. </title> <publisher> Manning Publishing Co. & Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Group communication via computer networks has become increasingly important over the past years. Applications can be identified in a wide range of businesses as well as in military intelligence analysis, command and control (see <ref> [3] </ref> for a general treatment). Because of the variety of applications group communication systems not only have to be efficient and secure but also flexible enough to be adaptable to any specific task.
Reference: 4. <author> K.P. Birman and R. van Renesse. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: It is based on the system Horus [18] which is a redesign of the widely used Isis system <ref> [4] </ref>. Ensemble, like its predecessor Horus, has a layered architecture. It is broken up into 40 small functions, called protocol layers, which are linked by simple input/output channels and can be combined almost arbitrarily (see figure 1).
Reference: 5. <author> Robert L. Constable. </author> <title> The structure of NuPRL's type theory. </title> <editor> In M. Broy and H. Schwichtenberg, editors, </editor> <booktitle> Logic of Computation. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: For a complete account we refer to <ref> [6, 13, 14, 5] </ref>. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory [16, 17] but has been reformulated and extended to support programming concepts as well as proof development on a computer.
Reference: 6. <author> Robert L. Constable, Stuart F. Allen, H. Mark Bromley, W. Rance Cleaveland, J. F. Cremer, Robert W. Harper, Douglas J. Howe, Todd B. Knoblock, Nax Paul Mendler, Prakash Panangaden, Jim T. Sasaki, and Scott F. Smith. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: Finally, fast-track reconfiguration (i.e. symbolic optimization), which is error-prone if performed by hand, is an area which can be particularly well supported by reasoning techniques in order to be made secure and efficient. The NuPRL proof development system <ref> [6] </ref> provides a platform well suited for developing construction methodologies for improving distributed system security. <p> For a complete account we refer to <ref> [6, 13, 14, 5] </ref>. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory [16, 17] but has been reformulated and extended to support programming concepts as well as proof development on a computer.
Reference: 7. <author> Daniel de Rauglaudre. </author> <note> Camlp4 version 0.5. </note> <institution> Institut National de Recherche en Informatique et en Automatique, </institution> <year> 1997. </year>
Reference-contexts: A modifiable, isolated version of the Ocaml- parser is the Camlp4 parser-preprocessor <ref> [7] </ref> which parses a source file, generates an abstract syntax tree, and returns the result either as pretty-printed text or as binary dump. To run, it loads separate files holding operations which define parsing and printing. <p> This means generating pieces of text for each possible content of a syntax tree node, distinguishing the various kinds of identifiers, language expressions, patterns, types, signature items, module types, and module expressions (see <ref> [7, Appendix A] </ref>). Although not all of these are used within the implementation of Ensemble, about 80 cases had to be distinguished. We have decided to modify one of the existing pretty printing modules for this purpose instead of creating the conversion module from scratch.
Reference: 8. <author> Michael J. Gordon, Robin Milner, and Christopher P. Wadsworth. </author> <title> Edinburgh LCF: A mechanized Logic of Computation. </title> <booktitle> Number 78 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: of type theory including theories about (natural, rational, and real) numbers, booleans, lists, segments, and functions which are valuable for all further developments. 2.2 Relating Ocaml and Type Theory Objective Caml [15] is a member of the ML language family which descends from the meta-language of the Edinburgh LCF system <ref> [8] </ref>. It is a strongly typed, (almost) functional language which has recently been extended by a module 4 The metalanguage used for this purpose is the original programming language ML, defined in [8, 13], which is the ancestor of all ML-dialects including Ocaml. 6 system. <p> It is a strongly typed, (almost) functional language which has recently been extended by a module 4 The metalanguage used for this purpose is the original programming language ML, defined in <ref> [8, 13] </ref>, which is the ancestor of all ML-dialects including Ocaml. 6 system. At its core it is very similar to the language of type theory but has a different syntax and contains many more features which make it a real programming language.
Reference: 9. <author> Mark Hayden. </author> <title> Ensemble Reference Manual. </title> <institution> Cornell University, </institution> <year> 1996. </year>
Reference-contexts: Because of the variety of applications group communication systems not only have to be efficient and secure but also flexible enough to be adaptable to any specific task. Ensemble is a group communication toolkit which has been implemented by Mark Hayden <ref> [9] </ref> in the Objective Caml programming language [15] in order to provide a concise and clear `reference' implementation of flexible and secure communication systems. It is based on the system Horus [18] which is a redesign of the widely used Isis system [4]. <p> Protocol layers ensure or check individual properties of a group communication (such as membership, leader election, stability of messages received, etc.) by adding or analyzing message headers. Individual layers are executed as I/O automata, with pairs of event queues connecting adjacent layers. (adapted from <ref> [9] </ref>) to become more reliable. Formal proofs of system properties can be used as documentation thereby making the system's behavior more predictable.
Reference: 10. <author> Mark Hayden and Robbert vanRenesse. </author> <title> Optimizing layered communication proto-cols. </title> <type> Technical Report TR 96-1613, </type> <institution> Cornell University. Department of Computer Science, </institution> <year> 1996. </year>
Reference-contexts: Although layering of protocols typically leads to serious performance problems, the efficiency of layered group communication systems can be improved even beyond the one of monolithic systems by analyzing common sequences of operation and reconfiguring the system accordingly <ref> [10] </ref>. Hayden chose Ocaml as implementation language of Ensemble not only for the purpose of clarity and flexibility but also to enable formal reasoning about the system's properties and symbolic processing of its components. Automated reasoning tools can check the protocols for errors and thus cause the system Fig. 1.
Reference: 11. <author> Jason Hickey. NuPRL-Light: </author> <title> An implementation framework for higher-order log-ics. </title> <editor> In W. McCune, editor, </editor> <booktitle> Proceedings of the 14 th Conference on Automated Deduction, Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Both steps are strongly related and had to be approached simultaneously. Parsing Ocaml-programs leads to a syntax tree which is already a structured description of the program text. Unfortunately the syntax tree is an object of the Ocaml-programming environment which has a different structure than 13 NuPRL-light <ref> [11] </ref>, a modular re-implementation of the NuPRL refiner also influ <br>- encing its next release, supports the creation inference rules as system primitives. 31 Fig. 6. Translating between Ocaml and NuPRL: General Methodology the meta-level of NuPRL. <p> has to build a print representation of the terms contained in the library which we wish to convert. 14 The combination between the Ocaml-parser and the meta-level of NuPRL would be less complicated if the meta-language of NuPRL would not be the original ML language but Ocaml as in NuPRL-light <ref> [11] </ref>.
Reference: 12. <author> D.J. Howe. </author> <title> Importing mathematics from HOL into NuPRL. </title> <editor> In J. von Wright, J. Grundy, and J. Harrison, editors, </editor> <title> Theorem Proving in Higher Order Logics, </title> <booktitle> num-ber 1125 in Lecture Notes in Computer Science, </booktitle> <pages> pages 267-282. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The system itself supports interactive and semi-automatic formal reasoning, evaluation of programs, language extensions by user-defined concepts, and an extendible library of verified knowledge from various domains. It has been used for large verifications of a logic synthesis tool [1] and the SCI cache coherency protocol <ref> [12] </ref>. In order to tailor NuPRL as a reasoning tool for verifying and reconfiguring communication systems we have to solve several subtasks (see figure 2). First we have to embed the programming language Ocaml into the type theory of NuPRL and thus provide a formal semantics for Ocaml.
Reference: 13. <author> Paul Jackson. </author> <title> NuPRL ML Manual. </title> <institution> Cornell University. Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: For a complete account we refer to <ref> [6, 13, 14, 5] </ref>. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory [16, 17] but has been reformulated and extended to support programming concepts as well as proof development on a computer. <p> It is a strongly typed, (almost) functional language which has recently been extended by a module 4 The metalanguage used for this purpose is the original programming language ML, defined in <ref> [8, 13] </ref>, which is the ancestor of all ML-dialects including Ocaml. 6 system. At its core it is very similar to the language of type theory but has a different syntax and contains many more features which make it a real programming language.
Reference: 14. <author> Paul Jackson. </author> <title> The Nuprl Proof Development System, Version 4.2: Reference Manual and User's Guide. </title> <institution> Cornell University. Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: For a complete account we refer to <ref> [6, 13, 14, 5] </ref>. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory [16, 17] but has been reformulated and extended to support programming concepts as well as proof development on a computer.
Reference: 15. <author> Xavier Leroy. </author> <title> The Objective Caml system release 1.05. </title> <institution> Institut National de Recherche en Informatique et en Automatique, </institution> <year> 1997. </year>
Reference-contexts: Because of the variety of applications group communication systems not only have to be efficient and secure but also flexible enough to be adaptable to any specific task. Ensemble is a group communication toolkit which has been implemented by Mark Hayden [9] in the Objective Caml programming language <ref> [15] </ref> in order to provide a concise and clear `reference' implementation of flexible and secure communication systems. It is based on the system Horus [18] which is a redesign of the widely used Isis system [4]. Ensemble, like its predecessor Horus, has a layered architecture. <p> This library already contains many standard extensions of type theory including theories about (natural, rational, and real) numbers, booleans, lists, segments, and functions which are valuable for all further developments. 2.2 Relating Ocaml and Type Theory Objective Caml <ref> [15] </ref> is a member of the ML language family which descends from the meta-language of the Edinburgh LCF system [8]. <p> Representing arrays by finite functions from f0..lg-1g into the type T proved to have several disadvantages when reasoning about operations on arrays including an inconsistency with the typings described in <ref> [15, section 15.2] </ref>.
Reference: 16. <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In 6-th International Congress for Logic, Methodology and Philosophy of Science, </booktitle> <year> 1979, </year> <pages> pages 153-175. </pages> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: For a complete account we refer to [6, 13, 14, 5]. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory <ref> [16, 17] </ref> but has been reformulated and extended to support programming concepts as well as proof development on a computer.
Reference: 17. <author> Per Martin-Lof. </author> <title> Intuitionistic Type Theory, </title> <booktitle> volume 1 of Studies in Proof Theory Lecture Notes. </booktitle> <publisher> Bibliopolis, </publisher> <year> 1984. </year>
Reference-contexts: For a complete account we refer to [6, 13, 14, 5]. NuPRL's type theory is based on Martin-Lof's inductive semantics; it is related to his intuitionistic type theory <ref> [16, 17] </ref> but has been reformulated and extended to support programming concepts as well as proof development on a computer.
Reference: 18. <author> R. van Renesse, K. Birman, and S. Maffeis. Horus: </author> <title> A flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <year> 1996. </year> <month> 42 </month>
Reference-contexts: Ensemble is a group communication toolkit which has been implemented by Mark Hayden [9] in the Objective Caml programming language [15] in order to provide a concise and clear `reference' implementation of flexible and secure communication systems. It is based on the system Horus <ref> [18] </ref> which is a redesign of the widely used Isis system [4]. Ensemble, like its predecessor Horus, has a layered architecture. It is broken up into 40 small functions, called protocol layers, which are linked by simple input/output channels and can be combined almost arbitrarily (see figure 1).
References-found: 18

