URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/AHV-PROJECT/vlsi97-paper.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node17.html
Root-URL: http://www.cs.man.ac.uk
Email: email: rainbow@cs.man.ac.uk  
Phone: phone: +44 (0) 161-275-6248 fax: +44 (0) 161-275-6211  
Title: Multi-View Design of Asynchronous Micropipeline Systems using Rainbow  
Author: H. Barringer, D. Fellows, G. Gough, P. Jinks and A. Williams 
Keyword: Multi-view design, micropipelines, asynchronous systems, formal methods.  
Address: Manchester, Manchester M13 9PL, UK  
Affiliation: Department of Computer Science University of  
Abstract: We present the Rainbow hardware design environment for asynchronous mi-cropipeline systems. Rainbow contains a suite of user-level sub-languages for multi-view design description. An underlying formal model defines the be-haviour of Rainbow components and thus provides a means of determining their combined behaviour. A simple processor design is used to illustrate the integrated description style provided by Rainbow and a smaller example shows how the components interwork at the semantic level. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barringer, H., Fellows, D., Gough, G., Jinks, P., Marsden, B. & Williams, A. </author> <year> (1996a), </year> <title> Design and simulation in rainbow: A framework for asynchronous micropipeline circuits., </title> <editor> in A. Bruzzone & U. Kerckhoffs, eds, </editor> <booktitle> `Proceedings of the European Simulation Symposium (ESS'96)', </booktitle> <volume> Vol. 2, </volume> <booktitle> Society for Computer Simulation International, </booktitle> <address> Genoa, Italy, </address> <pages> pp. 567-571. </pages> <note> See also the Rainbow Project web pages, URL: http://www.cs.man.ac.uk/fmethods/projects/ AHV-PROJECT/ahv-project.html. </note>
Reference-contexts: Dataflow control elements provide ways to conditionally merge and split data streams. A more generalised element is the Table, which combines functionality and flow control. Elements can be combined serially (as a pipeline) or in parallel. Refer to <ref> (Barringer et al. 1996a) </ref> for more details of Green and its editing/simulation tools. As an example of Green, Figure 1 shows part of the simulation of a schematic computing sequences of Fibonacci numbers (an APA translation will be given in section 3).
Reference: <author> Barringer, H., Gough, G., Monahan, B. & Williams, A. </author> <year> (1996b), </year> <title> `A Process Algebra Foundation for Reasoning about Core ELLA', </title> <journal> The Computer Journal 39(4), </journal> <pages> 303-324. </pages>
Reference-contexts: The semantics of APA is defined via SOS-style transition rules (Hennessy 1990). This provides the foundation for the development of formal analysis tools. The general approach adopted to the Rainbow semantics follows the successful line we took with developing formal analysis tools for the (synchronous) hardware description language ELLA <ref> (Barringer et al. 1996b) </ref>. In section 2, we describe Rainbow and the component sub-languages. An example of the design development style now possible is illustrated with a description of a simple processor (section 2.3).
Reference: <author> Bolognesi, T. & Brinksma, E. </author> <year> (1987), </year> <title> `Introduction to the ISO Specification Language LOTOS', </title> <booktitle> Computer Networks and ISDN Systems 14(1), </booktitle> <pages> 25-59. </pages>
Reference-contexts: This has some similarities to more familiar process algebras, such as CCS (Milner 1989), CSP (Hoare 1985) or LOTOS <ref> (Bolognesi & Brinksma 1987) </ref>, having the usual types of process operators and an operational semantics. However, our composition operators are designed to support bundled-data micropipeline communication, and their semantics resembles that given in (Li 1982). APA supports value-passing and has richly-structured actions, which leads to a compact semantic representation.
Reference: <author> Hennessy, M. </author> <year> (1990), </year> <title> The Semantics of Programming Languages, </title> <publisher> Wiley. </publisher>
Reference-contexts: The semantics of APA is defined via SOS-style transition rules <ref> (Hennessy 1990) </ref>. This provides the foundation for the development of formal analysis tools. The general approach adopted to the Rainbow semantics follows the successful line we took with developing formal analysis tools for the (synchronous) hardware description language ELLA (Barringer et al. 1996b).
Reference: <author> Herath, J., Yamaguchi, Y., Toda, K., Mattingley, R., Saito, N. & Yuba, T. </author> <year> (1992), </year> <title> Comparison of Dataflow Computing Models, </title> <editor> in J. A. Sharp, ed., </editor> <title> `Data Flow Computing: Theory and Practice', </title> <publisher> Ablex, </publisher> <pages> pp. 16-34. </pages>
Reference-contexts: Rainbow 2.1 Green Green is a static dataflow language <ref> (Herath et al. 1992) </ref>, using explicit finite buffering between elements fl , that models micropipelines.
Reference: <author> Hoare, C. </author> <year> (1985), </year> <title> Communicating Sequential Processes, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Muti-View Design using Rainbow 2.2 Yellow In contrast to the static structural description style offered by Green, Yellow allows evolving descriptions to be constructed, using a control-flow style, similar in many respects to CSP <ref> (Hoare 1985) </ref> or Ada. The (explicit) call/accept communication primitives used are adaptations of the Ada rendezvous. An input statement `accept inps do P end' starts execution of P when all of the inputs inps are ready. <p> This has some similarities to more familiar process algebras, such as CCS (Milner 1989), CSP <ref> (Hoare 1985) </ref> or LOTOS (Bolognesi & Brinksma 1987), having the usual types of process operators and an operational semantics. However, our composition operators are designed to support bundled-data micropipeline communication, and their semantics resembles that given in (Li 1982).
Reference: <author> Josephs, M. & Udding, J. </author> <year> (1990), </year> <title> Delay-Insensitive Circuits: An Algebraic Approach to their Design, </title> <editor> in J. Baeten & J. Klop, eds, `CONCUR'90 (LNCS)', </editor> <volume> Vol. 458, </volume> <publisher> Springer-Verlag, </publisher> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: Current formally based approaches have usually been limited to cap c flIFIP 1997. Published by Chapman & Hall Muti-View Design using Rainbow turing the request/acknowledge control signalling between micropipeline components, e.g. the CCS models of the AMULET1 processor (Liu 1995). Others have developed special process algebras for delay-insensitive systems <ref> (Josephs & Udding 1990) </ref>, or have used Petri Net models (Yakovlev et al. 1995). 1.1 The Rainbow Approach Our approach has been to develop Rainbow, a suite of user-oriented, multi-view, description languages specialised for modelling micropipeline designs.
Reference: <author> Li, W. </author> <year> (1982), </year> <title> An Operational Semantics of Tasking and Exception Handling in Ada, </title> <type> Technical Report CSR-99-82, </type> <institution> University of Edinburgh. </institution>
Reference-contexts: It also includes a control-flow style language (Yellow ) for algorithmic descriptions, using Ada-like rendezvous communication <ref> (Li 1982, Sommerville & Morrison 1987) </ref> between components. <p> However, our composition operators are designed to support bundled-data micropipeline communication, and their semantics resembles that given in <ref> (Li 1982) </ref>. APA supports value-passing and has richly-structured actions, which leads to a compact semantic representation.
Reference: <author> Liu, Y. </author> <year> (1995), </year> <title> AMULET1: Specification and Verification in CCS, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Calgary. </institution>
Reference-contexts: Current formally based approaches have usually been limited to cap c flIFIP 1997. Published by Chapman & Hall Muti-View Design using Rainbow turing the request/acknowledge control signalling between micropipeline components, e.g. the CCS models of the AMULET1 processor <ref> (Liu 1995) </ref>. Others have developed special process algebras for delay-insensitive systems (Josephs & Udding 1990), or have used Petri Net models (Yakovlev et al. 1995). 1.1 The Rainbow Approach Our approach has been to develop Rainbow, a suite of user-oriented, multi-view, description languages specialised for modelling micropipeline designs. <p> We are extending the framework to include a high-level language (Red ) for behavioural/specification descriptions using, for example, temporal logic or stream transformers, and a Blue language to operate at a level below Green, by exposing the handshaking control, similar to the CCS models of AMULET in <ref> (Liu 1995) </ref>. Rainbow 2.1 Green Green is a static dataflow language (Herath et al. 1992), using explicit finite buffering between elements fl , that models micropipelines.
Reference: <author> Martin, A. </author> <year> (1990), </year> <title> Synthesis of asynchronous VLSI circuits, </title> <editor> in J. Staunstrup, ed., </editor> <title> `Formal Methods for VLSI', </title> <publisher> North-Holland, </publisher> <pages> chapter 6, pp. 237-283. </pages>
Reference-contexts: Certain design methods are equipped with description languages, such as Philips' Tangram system (van Berkel 1992), or the synthesis approach adopted in <ref> (Martin 1990) </ref>. However specialised design languages have not yet emerged for micropipelines, especially for higher-level abstract descriptions. Designers also require simulation tools for early (high-level) experimentation, and analysis tools for detecting deadlocks, estimating performance, or for checking design equivalence.
Reference: <author> Milner, R. </author> <year> (1989), </year> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <address> Hemel Hemp-stead, Herts, England. </address>
Reference-contexts: Muti-View Design using Rainbow 3 APA The interfaces between the various components described in Green and Yellow must be well-defined, and is achieved by translating the sub-language components into a common underlying process term language called APA. This has some similarities to more familiar process algebras, such as CCS <ref> (Milner 1989) </ref>, CSP (Hoare 1985) or LOTOS (Bolognesi & Brinksma 1987), having the usual types of process operators and an operational semantics. However, our composition operators are designed to support bundled-data micropipeline communication, and their semantics resembles that given in (Li 1982).
Reference: <author> Paver, N. </author> <year> (1994), </year> <title> The Design and Implementation of an Asynchronous Microprocessor, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Manchester. </institution>
Reference-contexts: 1 INTRODUCTION The Micropipeline method (Sutherland 1989) for designing asynchronous hardware systems has been used successfully for the development of commercial-scale devices, including asynchronous versions of the ARM processor in the AMULET Project <ref> (Paver 1994) </ref>. However, the perceived benefits of asynchronous design | the production of high-speed and low-power systems | have so far been difficult to realise due to the relative lack of design representations and associated tools specialised to asynchronous micropipeline hardware. <p> Figure 2 shows the top-level block structure described in Visual Green, a style similar to that used in informal descriptions given in design documentation, such as for AMULET1 <ref> (Paver 1994) </ref>.
Reference: <author> Sommerville, I. & Morrison, R. </author> <year> (1987), </year> <title> Software Development with Ada, </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Sutherland, I. </author> <year> (1989), </year> <note> `Micropipelines', Communications of the ACM 32(6). </note> <author> van Berkel, K. </author> <year> (1992), </year> <title> Handshake Circuits: an Intermediary between Communicating Processes and VLSI, </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology. </institution>
Reference-contexts: 1 INTRODUCTION The Micropipeline method <ref> (Sutherland 1989) </ref> for designing asynchronous hardware systems has been used successfully for the development of commercial-scale devices, including asynchronous versions of the ARM processor in the AMULET Project (Paver 1994).
Reference: <author> Yakovlev, A., Varshavsky, V., Marakhovsky, V. & Semenov, A. </author> <year> (1995), </year> <title> Designing an Asynchronous Pipeline Token Ring Interface, in `Asynchronous Design Methodologies', </title> <institution> South Bank University, </institution> <address> London. </address>
Reference-contexts: Published by Chapman & Hall Muti-View Design using Rainbow turing the request/acknowledge control signalling between micropipeline components, e.g. the CCS models of the AMULET1 processor (Liu 1995). Others have developed special process algebras for delay-insensitive systems (Josephs & Udding 1990), or have used Petri Net models <ref> (Yakovlev et al. 1995) </ref>. 1.1 The Rainbow Approach Our approach has been to develop Rainbow, a suite of user-oriented, multi-view, description languages specialised for modelling micropipeline designs. A single design can be described in a variety of styles, using the language most appropriate for each design component.
References-found: 15

