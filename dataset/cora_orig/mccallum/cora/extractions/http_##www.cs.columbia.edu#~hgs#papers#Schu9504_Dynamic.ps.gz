URL: http://www.cs.columbia.edu/~hgs/papers/Schu9504_Dynamic.ps.gz
Refering-URL: http://www.cs.columbia.edu/~hgs/research/imm/
Root-URL: http://www.cs.columbia.edu
Email: hgs@fokus.gmd.de  
Title: Dynamic Configuration of Conferencing Applications using Pattern-Matching Multicast  
Author: Henning Schulzrinne 
Address: Fokus, Berlin  
Affiliation: GMD  
Abstract: Multimedia conferencing systems are usually large, complex software systems. We describe a local control architecture and communication protocols that allow to tie together media agents, controllers and auxiliary applications such as media recorders and management proxies into a single conference application. Unlike other systems, control of a single conference can be shared between several controllers. Each media can be handled by one or more independent media agents. Parts of the system have been implemented using an IP-multicast-based audio conferencing tool (NeVoT). The communicating applications disseminate state and control information through a replicator. The replicator mainly limits distribution of messages based on expressed interest of other applications, thus implementing an application-level, receiver-driven local multicast. It also automatically starts applications as needed. The same functionality was also implemented using IP multicast restricted to the local host.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. J. Frivold and R. E. Lang, </author> <title> "Conference control glossary." based on presentation to MMUSIC working group at 27th IETF meeting, </title> <address> Amsterdam, Netherlands, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Here, each media is typically handled by a distinct media agent, with control delegated to an external conference controller [4]. This separation 1 We generally follow the terminology of <ref> [1] </ref>, where media agents are defined as "a software entity that handles media-specific functions such as encoding, compression and transport packetization that are used by conferences. Media in a conference might include audio, video, graphics and text".
Reference: [2] <author> S. Casner and S. Deering, </author> <title> "First IETF Internet audiocast," </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 22, </volume> <pages> pp. 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Secondly, every such suite of applications had its own set of protocols, so that there was little opportunity to replace, say, one video agent by another. The set of media agents 1 built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) <ref> [2, 3] </ref> depart from this approach. Here, each media is typically handled by a distinct media agent, with control delegated to an external conference controller [4].
Reference: [3] <author> H. Eriksson, "MBONE: </author> <title> The multicast backbone," </title> <journal> Communications ACM, </journal> <volume> vol. 37, </volume> <pages> pp. 54-60, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Secondly, every such suite of applications had its own set of protocols, so that there was little opportunity to replace, say, one video agent by another. The set of media agents 1 built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) <ref> [2, 3] </ref> depart from this approach. Here, each media is typically handled by a distinct media agent, with control delegated to an external conference controller [4].
Reference: [4] <author> E. Schooler and S. L. Casner, </author> <title> "An architecture for multimedia connection management," </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 22, </volume> <pages> pp. 73-74, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: The set of media agents 1 built by a diverse set of research groups for use on the Internet multicast backbone (MBONE) [2, 3] depart from this approach. Here, each media is typically handled by a distinct media agent, with control delegated to an external conference controller <ref> [4] </ref>. This separation 1 We generally follow the terminology of [1], where media agents are defined as "a software entity that handles media-specific functions such as encoding, compression and transport packetization that are used by conferences. Media in a conference might include audio, video, graphics and text".
Reference: [5] <author> E. M. Schooler, </author> <title> "The connection control protocol: Specification (version 1.1)," </title> <type> technical report, </type> <institution> USC/Information Sciences Institute, Marina del Ray, California, </institution> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: For example, the same video application might be used both within seminar-style, "loosely-controlled" conferences initiated from multicast or centralized directories as well as a "telephone-style", "tightly-controlled" invitation-based conference <ref> [5] </ref>. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous [7, 8]. While the MBONE conference controllers allow the combination of different media agents, these controllers are of the "fire-and-forget" variety.
Reference: [6] <author> V. Jacobson, </author> <note> "sd, the LBL session directory." Manual page, </note> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: For example, the same video application might be used both within seminar-style, "loosely-controlled" conferences initiated from multicast or centralized directories as well as a "telephone-style", "tightly-controlled" invitation-based conference [5]. Examples of a multicast directory include sd <ref> [6] </ref>), while WWW is becoming popular for centralized session rendezvous [7, 8]. While the MBONE conference controllers allow the combination of different media agents, these controllers are of the "fire-and-forget" variety.
Reference: [7] <author> T. J. Frivold, R. E. Lang, and M. W. Fong, </author> <title> "Extending WWW for synchronous collaboration," </title> <booktitle> in Proc. of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <address> (Chicago, Illinois), </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: For example, the same video application might be used both within seminar-style, "loosely-controlled" conferences initiated from multicast or centralized directories as well as a "telephone-style", "tightly-controlled" invitation-based conference [5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8] </ref>. While the MBONE conference controllers allow the combination of different media agents, these controllers are of the "fire-and-forget" variety. The conference controller simply starts the media agent processes, passing parameters such as multicast address, port number or media encoding as command line arguments.
Reference: [8] <author> J. Glicksman and V. Kumar, </author> <title> "A SHAREd collaborative environment for mechanical engineers," </title> <booktitle> in Proc. of Groupware'93, </booktitle> <pages> pp. 335-447, </pages> <year> 1993. </year>
Reference-contexts: For example, the same video application might be used both within seminar-style, "loosely-controlled" conferences initiated from multicast or centralized directories as well as a "telephone-style", "tightly-controlled" invitation-based conference [5]. Examples of a multicast directory include sd [6]), while WWW is becoming popular for centralized session rendezvous <ref> [7, 8] </ref>. While the MBONE conference controllers allow the combination of different media agents, these controllers are of the "fire-and-forget" variety. The conference controller simply starts the media agent processes, passing parameters such as multicast address, port number or media encoding as command line arguments.
Reference: [9] <author> J. K. Ousterhout, </author> <title> Tcl and the Tk Toolkit. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Rather than bloating already complicated media agents (even assuming that access to source code or a cooperative author exists), these tasks are often ideally suited for implementation by users or local administrators as small scripts in an interpreted language, such as Tcl <ref> [9] </ref>. The Tcl tool command language and the Unix shell share the same philosophy of composing larger applications from communicating components. While Tcl uses the send command to implement a remote procedure call, the Unix shell uses pipes to connect a linear sequence of independent tools. <p> All messages are sent as ASCII text and are formatted to be directly interpretable by a standard Tcl <ref> [9] </ref> interpreter. Generally, messages are idempotent, so that the second request to join the same multicast group is simply ignored.
Reference: [10] <author> H. Schulz-Rinne, </author> <title> "The DSP workbench: Modeling parallel architectures as concurrent processes," </title> <booktitle> in 1986 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), </booktitle> <address> (Tokyo, Japan), </address> <pages> pp. </pages> <address> 54.9.1 - 54.9.4, </address> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1986. </year>
Reference-contexts: While Tcl uses the send command to implement a remote procedure call, the Unix shell uses pipes to connect a linear sequence of independent tools. A related approach for constructing digital signal processing simulators was presented in <ref> [10] </ref>. The approach presented here is geared towards exchanging control information rather than data; it is point-to-multipoint rather than two-party and is based on an asynchronous communication model rather than the reply-response model.
Reference: [11] <author> A. L. Ananda, B. H. Tay, and E. K. Koh, </author> <title> "A survey of asynchronous remote procedure calls," </title> <journal> ACM Operating Systems Review, </journal> <volume> vol. 26, </volume> <pages> pp. 92-109, </pages> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: It has the disadvantage that every message wakes up every process that subscribes to the local multicast address, even though each process may only care about a small subset of the messages. 2 <ref> [11, 12] </ref> discuss asynchronous RPC. 3 To tie together applications on different hosts, a larger ttl value is needed.
Reference: [12] <author> E. Walker, P. Neves, and R. Floyd, </author> <title> "Asynchronous remote operation execution in distributed systems," </title> <booktitle> in Proc. 10th Intl. Conf. Distributed Computing Systems (ICDCS-10), </booktitle> <address> (Paris, France), </address> <publisher> IEEE, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: It has the disadvantage that every message wakes up every process that subscribes to the local multicast address, even though each process may only care about a small subset of the messages. 2 <ref> [11, 12] </ref> discuss asynchronous RPC. 3 To tie together applications on different hosts, a larger ttl value is needed.
Reference: [13] <author> B. Bhargava, E. Mafla, J. Riedl, and B. Sauder, </author> <title> "Implementation and measurements of an efficient communication facility for distributed database systems," </title> <type> Technical Report Purdue Technical Report CSD-TR-783, </type> <institution> Department of Computer Science, Purdue University, West Lafayette, </institution> <note> IN 47907-2004, </note> <month> June </month> <year> 1988. </year> <booktitle> NOSSDAV'95 (5th International Workshop on Network and Operating System Support for Digital Audio and Video); Durham, </booktitle> <address> New Hampshire, </address> <month> April 18-21, </month> <note> 1995 (pp. -) 10 REFERENCES </note>
Reference-contexts: The replicator is not aware of the distinction between controllers and media agents. These control messages could be delivered through any Unix IPC mechanism (Unix sockets, TCP connections, UDP messages, RPC, pipes, stdin, . . . ) or specialized in-memory multicast support <ref> [13] </ref>. Three IPC methods have been implemented. In the first, a single message replicator process called pmm is used, listening for connections at a well-known TCP port. The second approach also uses a replicator process, but communicates using UDP datagrams.
Reference: [14] <author> S. E. Deering and D. R. Cheriton, </author> <title> "Multicast routing in datagram internetworks and extended LANs," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: As described later, the replicator process can be told by each 'attached' process which messages it wants to receive, based on the message content. In the third approach, no replicator process is needed as applications send UDP datagram to an IP multicast address <ref> [14] </ref>. The reach of the multicast packets is restricted by setting their time-to-live value to zero 3 . Local multicast offers the advantage of dispensing with the replicator process and avoiding maintaining membership information in the replicator.
Reference: [15] <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson, "RTP: </author> <title> A transport protocol for real-time applications." Internet draft (work-in-progress) draft-ietf-avt-rtp-*.txt, </title> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: NOSSDAV'95 (5th International Workshop on Network and Operating System Support for Digital Audio and Video); Durham, New Hampshire, April 18-21, 1995 (pp. -) 4 The system presented here uses constants and information provided by the Real-Time Transport Protocol (RTP) <ref> [15] </ref> and the audio/video profile of that protocol [16]. In that protocol, each member of a session periodically announces itself by transmitting RTP control (RTCP) packets containing a globally unique canonical name, other "business-card" information and statistics about received sites.
Reference: [16] <author> H. Schulzrinne, </author> <title> "Sample profile and encodings for the use of RTP for audio and video conferences with minimal control," </title> <type> Internet Draft, </type> <institution> GMD Fokus, </institution> <month> May </month> <year> 1994. </year> <title> Work in progress. </title>
Reference-contexts: NOSSDAV'95 (5th International Workshop on Network and Operating System Support for Digital Audio and Video); Durham, New Hampshire, April 18-21, 1995 (pp. -) 4 The system presented here uses constants and information provided by the Real-Time Transport Protocol (RTP) [15] and the audio/video profile of that protocol <ref> [16] </ref>. In that protocol, each member of a session periodically announces itself by transmitting RTP control (RTCP) packets containing a globally unique canonical name, other "business-card" information and statistics about received sites.
Reference: [17] <author> R. Want, A. Hopper, V. Falcao, and J. Gibbons, </author> <title> "The active badge location system," </title> <journal> ACM Transactions on Information Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 91-102, </pages> <month> Jan. </month> <year> 1992. </year> <note> also Olivetti Research Limited Technical Report ORL 92-1. </note>
Reference-contexts: The activity indicator is rarely seen by the user, as icc is typically started from a session directory like sd, which supplies it with the necessary parameters. Some initial helper applications have been implemented. A small applet listens to multicasts on the local network from the Active Badge <ref> [17] </ref> system. Whenever somebody enters or leaves the room, it changes the outgoing user name indication to show the list of people gathered around the workstation for all active conferences. Recently, stereo placement of session members was added to NeVoT.
Reference: [18] <author> U. K. Wiil, </author> <title> "Using events as support for data sharing in collaborative work," </title> <booktitle> in International Workshop on CSCW, </booktitle> <address> (Berlin, Germany), </address> <pages> pp. 162-176, </pages> <institution> Institute of Informatics and Computing Technique, Germany, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: There is no way for a process to disable receiving its own local multicast packets; rather, it has to filter by content or source port. 6 Related Work The idea of subscribing to events is also found in <ref> [18] </ref>, albeit for mediating access to shared hy-permedia objects within a single system. A file-system event registration service called file-activity monitor (FAM) is offered within the Silicon Graphics Irix operating system. The CCCP approach to naming components is reflected in the message formats [19].
Reference: [19] <author> M. Handley and I. Wakeman, "CCCP: </author> <title> conference control channel protocol a scalable base for building conference control applications." </title> <address> V1.4, </address> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: A file-system event registration service called file-activity monitor (FAM) is offered within the Silicon Graphics Irix operating system. The CCCP approach to naming components is reflected in the message formats <ref> [19] </ref>. This approach could also be considered as a status-based system, as used for control networks [20]. However, the message replicator offers a selection mechanism beyond a predefined set of multicast addresses, somewhat similar to the receiver-directed filters are also central to the RSVP resource reservation protocol [21].
Reference: [20] <author> R. S. Raji, </author> <title> "Smart networks for control," </title> <journal> IEEE Spectrum, </journal> <volume> vol. 31, </volume> <pages> pp. 49-55, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: A file-system event registration service called file-activity monitor (FAM) is offered within the Silicon Graphics Irix operating system. The CCCP approach to naming components is reflected in the message formats [19]. This approach could also be considered as a status-based system, as used for control networks <ref> [20] </ref>. However, the message replicator offers a selection mechanism beyond a predefined set of multicast addresses, somewhat similar to the receiver-directed filters are also central to the RSVP resource reservation protocol [21].
Reference: [21] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala, "Rsvp: </author> <title> a new resource ReSerVation protocol," </title> <journal> IEEE Network, </journal> <volume> vol. 7, </volume> <pages> pp. 8-18, </pages> <month> Sept. </month> <year> 1993. </year> <booktitle> NOSSDAV'95 (5th International Workshop on Network and Operating System Support for Digital Audio and Video); Durham, </booktitle> <address> New Hampshire, </address> <month> April 18-21, </month> <note> 1995 (pp. -) 11 </note>
Reference-contexts: This approach could also be considered as a status-based system, as used for control networks [20]. However, the message replicator offers a selection mechanism beyond a predefined set of multicast addresses, somewhat similar to the receiver-directed filters are also central to the RSVP resource reservation protocol <ref> [21] </ref>. Independently, McCanne and Jacobson implemented an IPC mechanism based on local IP multicast that mediates access to the workstation audio device by several concurrently running vat audio tools through a per-host multicast address and port.
References-found: 21

