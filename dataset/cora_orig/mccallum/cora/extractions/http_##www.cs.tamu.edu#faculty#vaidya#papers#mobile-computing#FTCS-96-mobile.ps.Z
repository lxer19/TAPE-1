URL: http://www.cs.tamu.edu/faculty/vaidya/papers/mobile-computing/FTCS-96-mobile.ps.Z
Refering-URL: http://www.cs.tamu.edu/faculty/vaidya/Vaidya-ftc.html
Root-URL: http://www.cs.tamu.edu
Title: Recoverable Mobile Environment: Design and Trade-off Analysis  
Author: Dhiraj K. Pradhan P. Krishna Nitin H. Vaidya 
Address: College Station, TX 77843-3112  
Affiliation: Laboratory of Computer and Digital Systems Department of Computer Science Texas A&M University  
Abstract: Presented here are schemes for recovery upon a failure of a mobile host. This paper portrays the limitations of the mobile wireless environment, and their impact on recovery protocols. Toward this, adaptation of well-known recovery schemes are presented which suit the mobile environment. The performance of these schemes has been analyzed to determine those environments where a particular recovery scheme is best-suited. The performance of the recovery schemes primarily depends on (i) the wireless bandwidth, (ii) the communication-mobility ratio of the user, and (iii) the failure rate of the mobile host. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Alagar and S. Venkatesan, </author> <title> "Tolerating Mobile Support Station Failures," Comp. Sc. </title> <type> Tech. Report, </type> <institution> Univ. of Texas, Dallas, </institution> <month> Nov., </month> <year> 1993. </year>
Reference-contexts: Work on fault-tolerance issues is very limited. Alagar et.al. <ref> [1] </ref>, demonstrate schemes to tolerate base station failures by replicating the information stored at a base station, at several "secondary" base stations. Strategies for selecting the secondary base stations were shown.
Reference: [2] <author> R. Alonso and H. Korth, </author> <title> "Database System Issues in Nomadic Computing," </title> <booktitle> SIGMOD, </booktitle> <month> June, </month> <year> 1993. </year>
Reference-contexts: Some of the differences between static and mobile networks are enumerated in Table 1. Traditional fault-tolerance schemes like checkpoint-ing and message logging [6, 9] require a stable storage for saving the checkpoint and the logs. It has been pointed out <ref> [2] </ref> that while the disk storage on a static host is stable, the stability of any storage on a mobile host is questionable, for obvious reasons such as dropping of laptops or effect of airport security systems [3]. <p> In such strategies, the host periodically saves its state at a stable storage. Thus, upon failure of the host, execution can be restarted from the last-saved checkpoint. It was indicated earlier <ref> [2] </ref> that a mobile host's disk storage cannot be considered stable. Thus, our algorithms use the storage available at the base station for the cell in which the mobile host is currently residing, as the stable storage. Multiple hosts (both static and mobile) will take part in a distributed application.
Reference: [3] <author> A. Acharya and B. R. Badrinath, </author> <title> "Checkpointing Distributed Applications on Mobile Computers," </title> <booktitle> IEEE Conf. on PDIS, </booktitle> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: It has been pointed out [2] that while the disk storage on a static host is stable, the stability of any storage on a mobile host is questionable, for obvious reasons such as dropping of laptops or effect of airport security systems <ref> [3] </ref>. Thus, a mobile host's disk storage cannot be considered stable and is uniquely vulnerable to catastrophic failures. Moreover, all mobile hosts are not necessarily equipped with disk storage. Thus, we need the stable storage to be located on a static host. <p> Rangarajan et.al. [10], present a fault-tolerant protocol for location directory maintenance in mobile networks. The protocol tolerates base station failures and host disconnections. Logical timestamps are used to distinguish between old and new location information. The protocol also tolerates the corruption of these logical timestamps. Acharya et.al. <ref> [3] </ref>, identify the problems with check-pointing mobile distributed applications, presenting an algorithm for recording global checkpoints for distributed applications running on mobile hosts. In this paper, however, we consider protocols to recover from failure in a mobile host, independent of other hosts in the system.
Reference: [4] <author> A. Borg et. al., </author> <title> "A Message System Supporting Fault Tolerance," </title> <booktitle> ACM SOSP, </booktitle> <month> Oct., </month> <year> 1983. </year>
Reference-contexts: The mobile host then loads the latest state and resumes operation. Importantly, need for frequent transmission of state on the wireless link is a limiting factor for this scheme. * Logging Approach (denoted as L): This approach is rooted in "pessimistic" logging <ref> [4] </ref>, used in static systems. In this scheme, a mobile host checkpoints its state periodically. To facilitate recovery, the write events that take place in the interval between checkpoints are also logged.
Reference: [5] <editor> G.H.Forman, et. al., </editor> <booktitle> "The Challenges of Mobile Computing," IEEE Computer, </booktitle> <address> Apr.1994. </address>
Reference-contexts: 1 Introduction A distributed system with mobile hosts is composed of a static backbone network and a dynamic wireless network <ref> [5] </ref>. A node that can move while retaining its network connection is referred to as a mobile host. A static network is comprised of the fixed hosts and the communication network. <p> This process, known as handoff, is transparent to the mobile host. Thus, end-to-end connectivity in the dynamically changing network topology is preserved transparently. A mobile host may become unavailable due to (i) failure of the mobile host, (ii) disconnection of the mobile host, and (iii) wireless link failure <ref> [5] </ref>. Limitations in battery power make disconnections from the network very frequent. Because of their frequency, disconnections must be treated differently than failures. The difference between disconnection and failure is its elective nature. Disconnections can be treated as planned failures, which can be anticipated and prepared for [5]. <p> wireless link failure <ref> [5] </ref>. Limitations in battery power make disconnections from the network very frequent. Because of their frequency, disconnections must be treated differently than failures. The difference between disconnection and failure is its elective nature. Disconnections can be treated as planned failures, which can be anticipated and prepared for [5]. The wireless link is equivalent to an intermittently faulty link, which transmits the correct message during fault-free conditions, and which stops transmitting upon a failure. Disconnections and weak wireless links primarily delay the system response, whereas a host failure affects the system state. <p> Section 3 presents the recovery strategies. Section 4 gives the performance analysis of the recovery strategies, and conclusions are found in Section 5. 2 Related Work Research in mobile computing primarily has focussed on mobility management, database system issues, network protocols, disconnected operation and distributed algorithms for mobile hosts <ref> [5, 7] </ref>. Work on fault-tolerance issues is very limited. Alagar et.al. [1], demonstrate schemes to tolerate base station failures by replicating the information stored at a base station, at several "secondary" base stations. Strategies for selecting the secondary base stations were shown. <p> During a handoff period, there are no packets sent or received by the mobile host. Thus, if handoff time is very high, the communication protocols used for these connection-oriented services might timeout and/or the mobile host might notice long disruption in service during handoffs <ref> [5] </ref>. Some applications might require a very quick recovery, and some other applications might require a very low total cost to be incurred by the recovery schemes. Some hosts might be running the application in a high failure rate environment, and some in a very low failure rate environment.
Reference: [6] <author> Pankaj Jalote, </author> <title> "Fault Tolerance in Distributed Systems," </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: It will now be discussed why traditional fault-tolerance schemes cannot be applied to a mobile wireless environment. Some of the differences between static and mobile networks are enumerated in Table 1. Traditional fault-tolerance schemes like checkpoint-ing and message logging <ref> [6, 9] </ref> require a stable storage for saving the checkpoint and the logs. <p> The base station then forwards the messages to the corresponding mobile host. Likewise, all messages sent by a mobile host will first be sent to its base station, which will forward them to the destination host (static or mobile). Two strategies to save the process state <ref> [6] </ref> will be discussed here: (i) No Logging and (ii) Logging. It is assumed that the mobile host remains in one cell during the length of the application.
Reference: [7] <author> P. Krishna, </author> <title> "Performance Issues in Wireless Networks," </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, Texas A&M University, </institution> <year> 1996. </year>
Reference-contexts: Section 3 presents the recovery strategies. Section 4 gives the performance analysis of the recovery strategies, and conclusions are found in Section 5. 2 Related Work Research in mobile computing primarily has focussed on mobility management, database system issues, network protocols, disconnected operation and distributed algorithms for mobile hosts <ref> [5, 7] </ref>. Work on fault-tolerance issues is very limited. Alagar et.al. [1], demonstrate schemes to tolerate base station failures by replicating the information stored at a base station, at several "secondary" base stations. Strategies for selecting the secondary base stations were shown.
Reference: [8] <author> D. K. Pradhan and N. H. Vaidya, </author> <title> "Roll-Forward Checkpointing Scheme:A Novel Fault-Tolerant Architecture," </title> <journal> IEEE Trans. on Comp., </journal> <volume> vol.43(10), </volume> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Available wireless bandwidth and error conditions will be different in each of these wireless networks. Thus, the appropriate recovery protocol needs to be determined adaptively, based on the characteristics of the underlying wireless network. Performance of traditional recovery schemes primarily depends on the failure rate of the host <ref> [8, 12] </ref>. However, in a mobile environment, due to mobility of the hosts and limited bandwidth on the wireless links, parameters other than failure rate of the mobile host play a key role in determining the effectiveness of a recovery scheme.
Reference: [9] <author> Dhiraj K. Pradhan, </author> <title> "Fault Tolerant Computer System Design," </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: It will now be discussed why traditional fault-tolerance schemes cannot be applied to a mobile wireless environment. Some of the differences between static and mobile networks are enumerated in Table 1. Traditional fault-tolerance schemes like checkpoint-ing and message logging <ref> [6, 9] </ref> require a stable storage for saving the checkpoint and the logs.
Reference: [10] <author> S. Rangarajan et.al., </author> <title> "A Fault-Tolerant Protocol for Location Directory Maintenance in Mobile Networks," </title> <address> FTCS, </address> <month> June, </month> <year> 1995. </year>
Reference-contexts: Strategies for selecting the secondary base stations were shown. These schemes can easily be integrated with the recovery schemes presented in this paper, to provide a system that tolerates both base station and mobile host failures. Rangarajan et.al. <ref> [10] </ref>, present a fault-tolerant protocol for location directory maintenance in mobile networks. The protocol tolerates base station failures and host disconnections. Logical timestamps are used to distinguish between old and new location information. The protocol also tolerates the corruption of these logical timestamps.
Reference: [11] <author> K. S. Trivedi, </author> <title> "Probability and Statistics with Reliability Queueing and Computer Science Applications," </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: A handoff interval can be represented using a 3-state discrete Markov chain <ref> [11, 12] </ref>, as presented in Figure 3. State 0 is the initial state when the handoff interval begins. During the handoff interval, the host receives messages and/or user inputs (write events). Depending upon the state-saving scheme, the host either takes a checkpoint or logs the write events.
Reference: [12] <author> N. H. Vaidya, </author> <title> "On Checkpoint Latency," Pacific Rim Fault Tolerant Sys., </title> <month> December, </month> <year> 1995. </year>
Reference-contexts: Available wireless bandwidth and error conditions will be different in each of these wireless networks. Thus, the appropriate recovery protocol needs to be determined adaptively, based on the characteristics of the underlying wireless network. Performance of traditional recovery schemes primarily depends on the failure rate of the host <ref> [8, 12] </ref>. However, in a mobile environment, due to mobility of the hosts and limited bandwidth on the wireless links, parameters other than failure rate of the mobile host play a key role in determining the effectiveness of a recovery scheme. <p> A handoff interval can be represented using a 3-state discrete Markov chain <ref> [11, 12] </ref>, as presented in Figure 3. State 0 is the initial state when the handoff interval begins. During the handoff interval, the host receives messages and/or user inputs (write events). Depending upon the state-saving scheme, the host either takes a checkpoint or logs the write events.
References-found: 12

