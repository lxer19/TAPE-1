URL: ftp://ftp.cse.ucsc.edu/pub/reinas/papers/info98.disc.ps.gz
Refering-URL: http://www.cse.ucsc.edu/research/slvg/disc.html
Root-URL: http://www.cse.ucsc.edu
Email: csjeong@charlie.korea.ac.kr pang@cse.ucsc.edu  
Title: Reconfigurable Disc Trees for Visualizing Large Hierarchical Information Space  
Author: Chang-Sung Jeong Alex Pang 
Keyword: Key Words and Phrases: Information visualization, disc tree, compact disc tree, plane disc tree, hierarchy.  
Address: Seoul, Korea Santa Cruz, California  
Affiliation: Department of Electronics Engineering Computer Science Department Korea University University of California  
Abstract: We present a new visualization technique, called RDT (Reconfigurable Disc Tree) which can alleviate the disadvantages of cone trees significantly for large hierarchies while maintaining its context of using 3D depth. In RDT , each node is associated with a disc around which its children are placed. Using discs instead of cones as the basic shape in RDT has several advantages: significant reduction of occluded region, sharp increase in number of displayed nodes, and easy projection onto plane without visual overlapping. We show that RDT can greatly enhance user perception by transforming its shapes dynamically in several ways: (1) disc tree which can significantly reduce the occluded region by the foreground objects, (2) compact disc tree which can increase the number of nodes displayed on the screen, and (3) plane disc tree which can be mapped onto the plane without visual overlapping. We describe an implementation of our visualization system called VISIT (Visual Information System for reconfigurable dIsc Tree). It provides 2D and 3D layouts for RDT and various user interface features such as tree reconfiguration, tree transformation, tree shading, viewing transformation, animation, selection and browsing which can enhance the user perception and navigation capabilities. We also evaluate our system using the following three metrics: percentage of occlusion, density of displayed nodes on a screen. number of identifiable nodes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beaudoin, L., Parent, M. A. and Vroomen, L. C., Cheops: </author> <title> A Compact Explorer for Complex Hierarchies, </title> <booktitle> in Proceedings of the IEEE Visualization '96 Conference, </booktitle> <year> 1996, </year> <pages> pp. 87-92. </pages>
Reference: [2] <author> Brath, R., </author> <title> Concept demonstration metrics for effective information visualization, </title> <booktitle> in Proceedings of the information Visualization '97 Conference, </booktitle> <year> 1997, </year> <pages> pp. 108-111. </pages>
Reference-contexts: We can evaluate a visualization system from two viewpoints: User perception and interaction capabilities. There are few metrics known for the latter, since attempting to include interactive factors in the metrics adds significant complexity to them <ref> [2] </ref>. Since our system provides almost the same interactive capabilities as the previous implementations like animation, navigation, selection and browsing, we concentrate on the user perception capabilities for a static image of the scene. <p> For the user perception capabilities of a static image of the scene, we make use of the metrics proposed in <ref> [2] </ref>, where the following five metrics are considered. * Percentage of Occlusion * Density of displayed nodes on a screen * Number of identifiable nodes * Number of dimensions and cognitive overhead * Reference context We evaluate and compare our visualization technique on the first three metrics since there are no
Reference: [3] <author> Card, S. K. and Mackinlay, J., </author> <title> The structure of the information visualization design space, </title> <booktitle> in Proceedings of the Information Visualization '97 Conference, </booktitle> <year> 1997, </year> <pages> pp. 92-99. </pages>
Reference-contexts: Therefore, RDT provides great flexibility and a powerful searching method by reconfiguring its shape according to the desired visual condition or specific application such as landscapes where information is laid out on a surface <ref> [3] </ref>. We presented the layout algorithms for 2D and 3D RDT that produce no visual overlaps in 2D and 3D respectively. These turn out to work very well for different trees from balanced to unbalanced, and from sparse to dense.
Reference: [4] <author> Card, S. K., Robertson, G. G. and Mackinlay, J. D., </author> <title> The information visualizer, an information workspace, </title> <booktitle> in Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems, </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <year> 1991, </year> <pages> pp. 181-188. </pages>
Reference: [5] <author> Carriere, J. and Kazman, R., </author> <title> Research report: Interacting with huge hierarchies: Beyond cone trees, </title> <booktitle> in Proceeding of the Information Visualization '95 Conference, </booktitle> <year> 1995, </year> <pages> pp. 74-81. </pages>
Reference-contexts: Hierarchical structures are used in many different applications [1-8]. They are flexible in storing structural information. In some cases, arbitrary graphs can be transformed into hierarchies. Cone tree is one of the visualization techniques for presenting hierarchical information structures <ref> [5, 8] </ref>. Cone tree is a three dimensional representation of hierarchical information. The node of a tree is located at the apex of a cone and all the children are arranged around the circular base of the cone in three dimensions. <p> A simple node layout algorithm for cone trees often produces satisfactory results for small trees, but not inadequate for large hierarchies. A new layout algorithm was proposed to reduce the visual clutter for large hierarchy <ref> [5] </ref>. However, though it can eliminate the overlap of individual cones in the three dimensional tree, it can not prevent the visual overlap when the three dimensional representation is projected into two dimensions, i.e. causing the occlusion of background objects by foreground objects. <p> Details for finding the disc radii for both 2D and 3D cases are described below. 3D RDT The following procedure shows how we calculate the radius of each disc so that there is no 3D overlap among the subtrees. It is similar to the one in <ref> [5] </ref>. Unlike their algorithm, our algorithm can readily handle the case where a node has a small or a large number of children. Procedure Calculate radius 3D (i) returns the disc radius and outer-radius of node i by calling itself recursively.
Reference: [6] <author> Johnson, B. and Shneiderman, B., </author> <title> Tree-maps: A space filling approach to the visualization of hierarchical information structures, </title> <booktitle> in Proceedings of Visualization '91, </booktitle> <year> 1995, </year> <pages> pp. 284-291. </pages>
Reference: [7] <author> Mukherjea, S., Foley, J. D. and Hudson, S., </author> <title> Visualizing complex hypermedia networks through multiple hierarchical views, </title> <booktitle> in Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems, </booktitle> <year> 1995, </year> <pages> pp. 331-337. </pages>
Reference: [8] <author> Robertson, G. G., Mackinlay, J. D. and Card, S. K., </author> <title> Cone trees: Animated 3D visualizations of hierarchical information, </title> <booktitle> in Proceedings of the ACM SIGSCHI conference on Human Factors in Computing Systems, </booktitle> <address> New York: </address> <publisher> ACM Press, </publisher> <year> 1991, </year> <pages> pp. 189-194. </pages>
Reference-contexts: Hierarchical structures are used in many different applications [1-8]. They are flexible in storing structural information. In some cases, arbitrary graphs can be transformed into hierarchies. Cone tree is one of the visualization techniques for presenting hierarchical information structures <ref> [5, 8] </ref>. Cone tree is a three dimensional representation of hierarchical information. The node of a tree is located at the apex of a cone and all the children are arranged around the circular base of the cone in three dimensions. <p> However, parts of the cone tree may not be visible to the user, and they then tend to produce visual clutter when more than 1000 nodes are presented <ref> [8] </ref>. A simple node layout algorithm for cone trees often produces satisfactory results for small trees, but not inadequate for large hierarchies. A new layout algorithm was proposed to reduce the visual clutter for large hierarchy [5].
References-found: 8

