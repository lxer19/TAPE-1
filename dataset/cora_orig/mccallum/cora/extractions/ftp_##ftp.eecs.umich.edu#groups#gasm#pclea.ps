URL: ftp://ftp.eecs.umich.edu/groups/gasm/pclea.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Email: poetzsch@informatik.tu-muenchen.de  
Title: Deriving Partial Correctness Logics From Evolving Algebras  
Author: Arnd Poetzsch-Heffter afl 
Keyword: Keyword Codes: D.3.1; F.3.0; F.3.1 Keywords: Programming Languages, Formal Definitions and Theory; Logics and Meanings of Programs, General; Specifying and Verifying and Reasoning about Programs  
Address: D-80290 Munchen,  
Affiliation: a Fakultat fur Informatik, Technische Universitat,  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Micheal J. O'Donnell. </author> <title> A critique of the foundations of hoare-style programming logics. </title> <editor> In D. Kozen, editor, </editor> <booktitle> Logics of Programs, </booktitle> <pages> pages 349-374, </pages> <year> 1981. </year> <note> LNCS 131. </note>
Reference-contexts: One of the major problems with this challenge is the systematic design of programming logics for realistic programming languages. Experiences e.g. with Hoare logic have shown that it can be difficult to design consistent programming logics even for simple languages from scratch (cf. <ref> [1] </ref>). Using evolving algebras as semantical basis has two advantages: 1. They support appropriate specifications of control flow, thereby simplifying these aspects in the logic. 2. Proving rules sound w.r.t. a given semantics or systematically deriving rules from semantics specification is simpler than proving the consistency of a logic.
Reference: 2. <author> Y. Gurevich. </author> <title> Evolving Algebras, </title> <booktitle> volume 43, </booktitle> <pages> pages 264-284. </pages> <note> EATCS Bulletin, </note> <year> 1991. </year>
Reference-contexts: The main idea of the derivation process is to relate evolving algebras and temporal logic and apply this combination to develop partial correctness logics. 2. Evolving Algebras and Temporal Logic Evolving algebras are a powerful framework for specifying programming languages (for an introduction see <ref> [2] </ref>). This section provides the needed definitions for evolving algebras and temporal logic. In particular, we introduce so-called simple evolving algebras and show how general evolving algebras can be transformed into simple ones. <p> It is called simple, if it is consistent, complete, and all updates have the form f () := t. Definition 2.1 follows the introduction of evolving algebras in [3]. This setting is a bit different from the one given in <ref> [2] </ref>, in particular the execution semantics (see below). Whereas the latter setting provides more flexibility in writing down specifications, the focus here is to keep formal definitions simple. Each evolving algebra can be made consistent and complete by simple rule transformations.
Reference: 3. <author> P. Glavan and D. Rosenzweig. </author> <title> Communicating evolving algebras. </title> <editor> In E. Borger et al., editor, </editor> <booktitle> Computer Science Logic, </booktitle> <pages> pages 182-215, </pages> <year> 1992. </year> <note> LNCS 702. </note>
Reference-contexts: It is called consistent if all rules are consistent. It is called complete, if the disjunction of the guards is valid. It is called simple, if it is consistent, complete, and all updates have the form f () := t. Definition 2.1 follows the introduction of evolving algebras in <ref> [3] </ref>. This setting is a bit different from the one given in [2], in particular the execution semantics (see below). Whereas the latter setting provides more flexibility in writing down specifications, the focus here is to keep formal definitions simple. <p> This approach slightly extends the sentential operator defined in <ref> [3] </ref>, p. 189, in that wb is defined for an evolving algebra and not only for one rule 3 .
Reference: 4. <author> F. Kroger. </author> <title> Temporal Logic of Programs. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: A formula not containing a temporal operator is called a state formula. 2 The introduction of other operators and concepts is straightforward (cf. e.g. <ref> [4] </ref>). 3 In temporal logic, formulas are interpreted w.r.t. computations. As we work with simple evolving algebras, we can use the following definition of "computation" for both frameworks: Definition 2.3 Let be a signature, SEA a simple evolving algebra, and DVAR the dynamic variables of SEA. <p> Definition 2.3 reflects the temporal logic semantics. The validity of temporal formulas in a computation is defined as usual (cf. <ref> [4] </ref>).
Reference: 5. <author> A. Poetzsch-Heffter. </author> <title> Developing efficient interpreters based on formal language specifications. </title> <editor> In P. Fritzson, editor, </editor> <booktitle> Compiler Construction, </booktitle> <year> 1994. </year> <note> appears in LNCS. 4 Such a "counter" can be easily added if necessary (cf. [5]). </note>
References-found: 5

