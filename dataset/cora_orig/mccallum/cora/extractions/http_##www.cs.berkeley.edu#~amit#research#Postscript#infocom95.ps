URL: http://www.cs.berkeley.edu/~amit/research/Postscript/infocom95.ps
Refering-URL: http://www.cs.berkeley.edu/~amit/research/index.html
Root-URL: http://www.cs.berkeley.edu
Email: famit,whowe,moran,nguyenqg@tenet.berkeley.edu  
Title: In Proceedings of INFOCOM'95 Resource sharing for multi-party real-time communication  
Author: Amit Gupta, Wingwai Howe, Mark Moran, Quyen Nguyen 
Address: Berkeley  
Affiliation: University of California at Berkeley, and International Computer Science Institute,  
Abstract: Current approaches to supporting real-time communication allocate network resources either to individual connections, or to aggregates of connections. Resource sharing is a new approach that exploits known relationships between related connections to allow network resources to be shared between them without sacrificing well-defined guarantees. We present a fully distributed technique for using resource sharing to provide guaranteed performance communication in a heterogeneous internetwork. Results show that resource sharing leads to a large gain in the connection acceptance rate, and a significant reduction in the computational overhead associated with admission control. Thus, resource sharing is an important tool for providing real-time performance guarantees for large conferences. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Clark, Scott Shenker, and Lixia Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanism. </title> <booktitle> Proc. ACM SIGCOMM'92, </booktitle> <pages> pages 14-26, </pages> <address> Baltimore, MD, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Many classes of applications, including distributed multimedia group communication [8] and traditional distributed processing, require or benefit from a network communication service that provides well-defined performance guarantees. A number of protocols and schemes have been proposed to provide real-time communication services <ref> [1, 3] </ref>. These schemes are usually connection-oriented, in that they allocate network resources (e.g., bandwidth, buffers, etc.) along the path data packets will travel. <p> One technique to improve utilization (and hence the connection acceptance rate) is to measure the actual traffic characterization of individual connections and to modify their traffic characterizations dynamically [10]. Another technique uses performance measurements over aggregations of con nections to predict future performance <ref> [1] </ref>. The first approach still over-estimates aggregate resource requirements, since it fails to capture the important relationships between connections (e.g. in a conference, usually only one speaker is active at a time).
Reference: [2] <author> Domenico Ferrari, Anindo Banerjea, and Hui Zhang. </author> <title> Network support for multimedia: a discussion of the Tenet approach. Computer Networks and ISDN Systems 26, </title> <journal> special issue on Multimedia Networking, </journal> <note> 1994. Also published as TR-92-072, </note> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: A number of protocols and schemes have been proposed to provide real-time communication services [1, 3]. These schemes are usually connection-oriented, in that they allocate network resources (e.g., bandwidth, buffers, etc.) along the path data packets will travel. Traditional real-time network systems (e.g., <ref> [2] </ref>) may over-allocate resources for two reasons: (1) they allocate resources based on a worst-case prediction of the actual traffic; and (2) they treat traffic on different connections independently when determining their resource requirements. <p> Before that time, resources are reserved for each channel indepen dently of the others in the group. 3.2 Admission control The admission control tests determine if a new channel can be admitted without potentially violat ing the guarantees given to established channels. As described in <ref> [2] </ref>, the Tenet protocols utilize a fully-distributed technique for connection establishment and admission control. The modifications to support resource sharing maintains this fully-distributed property. <p> An interesting issue is the interaction of this globally specified relationship with the admission control decisions that are made locally at the intermediate nodes (the local decision-making is due to the distributed nature of our resource sharing technique). During channel establishment, the Real-Time Channel Administration Protocol (RCAP) <ref> [2] </ref> is responsible for admission control and resource reservation at each node. When the RCAP module at a certain node is reserving resources for a new channel, it allocates buffers for handling the delay jitter of the data packets from the previous node.
Reference: [3] <author> Domenico Ferrari and Dinesh Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Many classes of applications, including distributed multimedia group communication [8] and traditional distributed processing, require or benefit from a network communication service that provides well-defined performance guarantees. A number of protocols and schemes have been proposed to provide real-time communication services <ref> [1, 3] </ref>. These schemes are usually connection-oriented, in that they allocate network resources (e.g., bandwidth, buffers, etc.) along the path data packets will travel.
Reference: [4] <author> Amit Gupta, Wendy Heffner, Mark Moran, and Clemens Szyperski. </author> <title> Multi-party real-time communication in computer networks. </title> <booktitle> Collected abstracts of 4th NOSSDAV , pages 37-39, </booktitle> <address> Lan-caster, UK, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: In this section, we present the results of our simulations with resource sharing. Our goal was to make the experiments realistic so that the results obtained can be confidently transposed to our resource sharing implementation in the Tenet Protocol Suite 2 <ref> [4] </ref>.
Reference: [5] <author> Amit Gupta, Wingwai Howe, Quyen Nguyen, and Mark Moran. </author> <title> Evaluation of resource sharing ben-effits. </title> <type> Technical Report TR-94-051, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> Octo-ber </month> <year> 1994. </year>
Reference-contexts: The mechanisms we have devised are completely distributed; hence, they do not restrict the scalability of communication, and are robust in the presence of node and link failures. Indeed, simulation results indicate that resource sharing improves the scalability of communication <ref> [5] </ref>. Three types of mechanisms are required: * Client-service interface: The network client must inform the network of sharing relationships between channels. <p> We omit the proofs due to lack of space; the interested reader can look up the proofs in <ref> [5] </ref>. 4.1 Sparse network Wide-Area-Networks (WANs) tend to be rather sparse; for example, the NSFNET backbone WAN has 32 nodes and only 35 links. <p> We also ran many other simulations; due to lack of space, we can only provide a brief description of the results here. The interested reader can obtain details from <ref> [5] </ref>. On the same NSFNET topology, we measured the effect of resource sharing on the computational overhead associated with admission control. We found that resource sharing decreases this overhead. We also ran simulations with a tree-based topology. <p> We found that resource sharing decreases this overhead. We also ran simulations with a tree-based topology. The results are very similar to the results obtained with the NSFNET topology and are described in <ref> [5] </ref>. <p> Thus, adding a new channel for an already established group may result in additional buffer allocation at that node. 6.2 Interactions with routing The analysis and simulations described in <ref> [5] </ref> support the intuition that routing techniques affect the success of resource sharing.
Reference: [6] <author> Amit Gupta and Mark Moran. </author> <title> Channel groups: A unifying abstraction for specifying inter-stream relationships. </title> <type> Technical Report TR-93-015, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Two of the authors have previously defined the channel groups abstraction to enable clients to specify inter-channel relationships to the network <ref> [6] </ref>. To specify a list of channels that may share resources, we define a channel group with a resource sharing relationship. Individual channels then join the group to share resources with other member channels. * Resource requirements for each group.
Reference: [7] <author> Steve McCanne, </author> <month> October </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: Since many data streams cannot be scaled arbitrarily without serious degradation in perceived quality (e.g. [9]), we argue that the source should specify the resource requirements (at least in terms of bandwidth). Receiver control over bandwidth requirements can be obtained by using layered coding schemes <ref> [7] </ref> and putting each layer in a separate sharing group. 8 Conclusions We have presented a scheme for sharing resource allocations between guaranteed performance connections in computer networks. The scheme provides a fully-distributed, low-overhead technique for implementing resource sharing.
Reference: [8] <author> Mark Moran and Riccardo Gusella. </author> <title> System support for efficient dynamically-configurable multi-party interactive multimedia applications. </title> <booktitle> Proc. 3rd NOSSDAV , pages 143-156, </booktitle> <address> San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Many classes of applications, including distributed multimedia group communication <ref> [8] </ref> and traditional distributed processing, require or benefit from a network communication service that provides well-defined performance guarantees. A number of protocols and schemes have been proposed to provide real-time communication services [1, 3].
Reference: [9] <author> Pramod Pancha and Magda El Zarki. </author> <title> A look at the MPEG video coding standard for variable bit rate video transmission. </title> <booktitle> Proc. IEEE INFOCOM '92, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Since many data streams cannot be scaled arbitrarily without serious degradation in perceived quality (e.g. <ref> [9] </ref>), we argue that the source should specify the resource requirements (at least in terms of bandwidth).
Reference: [10] <author> Colin Parris, Hui Zhang, and Domenico Fer-rari. </author> <title> Dynamic management of guaranteed performance multimedia connections, </title> <month> April </month> <year> 1993. </year> <note> to appear in ACM Journal of Multimedia Systems. </note>
Reference-contexts: One technique to improve utilization (and hence the connection acceptance rate) is to measure the actual traffic characterization of individual connections and to modify their traffic characterizations dynamically <ref> [10] </ref>. Another technique uses performance measurements over aggregations of con nections to predict future performance [1]. The first approach still over-estimates aggregate resource requirements, since it fails to capture the important relationships between connections (e.g. in a conference, usually only one speaker is active at a time).
Reference: [11] <author> Joseph Pasquale, George Polyzos, Eric Anderson, and Vachaspati Kompella. </author> <title> The multimedia mul-ticast channel. </title> <booktitle> Proc. </booktitle> <address> 3rd NOSSDAV , San Diego, CA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Preliminary simulation results show a synergy between resource sharing and advance reservation mechanisms, i.e. advance reservations help increase resource sharing acceptance gain. 7 Related work There are only two other related research efforts that we are aware of: the UCSD filters <ref> [11] </ref> and RSVP [12]. [11] proposed a stream filter that is "... an executable module which may be placed on a port, and implements a function which takes a specific set of streams associated with that port and produces a new stream". <p> Preliminary simulation results show a synergy between resource sharing and advance reservation mechanisms, i.e. advance reservations help increase resource sharing acceptance gain. 7 Related work There are only two other related research efforts that we are aware of: the UCSD filters <ref> [11] </ref> and RSVP [12]. [11] proposed a stream filter that is "... an executable module which may be placed on a port, and implements a function which takes a specific set of streams associated with that port and produces a new stream". These filters perform an application-level transformation of one or more streams.
Reference: [12] <author> Lixia Zhang, Steve Deering, Deborah Estrin, Scott Shenker, and Daniel Zappala. RSVP: </author> <title> A new resource reservation protocol. </title> <journal> IEEE Networks Magazine, </journal> <volume> 31(9) </volume> <pages> 8-18, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Preliminary simulation results show a synergy between resource sharing and advance reservation mechanisms, i.e. advance reservations help increase resource sharing acceptance gain. 7 Related work There are only two other related research efforts that we are aware of: the UCSD filters [11] and RSVP <ref> [12] </ref>. [11] proposed a stream filter that is "... an executable module which may be placed on a port, and implements a function which takes a specific set of streams associated with that port and produces a new stream". These filters perform an application-level transformation of one or more streams.
References-found: 12

