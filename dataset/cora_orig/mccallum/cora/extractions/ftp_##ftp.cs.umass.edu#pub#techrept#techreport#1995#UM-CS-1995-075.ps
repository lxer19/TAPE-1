URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1995/UM-CS-1995-075.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/95-075.html
Root-URL: 
Title: Multilanguage Interoperability in Distributed Systems: EXPERIENCE REPORT  
Author: Mark J. Maybee Dennis H. Heimbigner Leon J. Osterweil 
Keyword: Interoperability, Heterogeneity, Distributed, Software Environments,  
Address: Boulder, CO 80309-0430  Amherst, MA 01003-4610  
Affiliation: Department of Computer Science, University of Colorado,  Department of Computer Science, University of Massachusetts,  
Note: Experience.  
Date: August 17, 1995  
Abstract: The Q system provides interoperability support for multilingual, heterogeneous component-based software systems. Initial development of Q began in 1988, and was driven by the very pragmatic need for a communication mechanism between a client program written in Ada and a server written in C. The initial design was driven by language features present in C, but not in Ada, or vice-versa. In time our needs and aspirations grew and Q evolved to support other languages, such as C++, Lisp, and Prolog. As a result of pervasive usage by the Arcadia SDE research project, usage levels and modes of the Q system grew and so more emphasis was placed upon portability, reliability, and performance. In that context we identified specific ways in which programming language support systems can directly impede effective interoperability. This necessitated extensive changes to both our conceptual model, and our implementation, of the Q system. We also discovered the need to support modes of interoperability far more complex than the usual client-server. The continued evolution of Q has allowed the architecture of Arcadia software to become highly distributed and component-based, exploiting components written in a variety of languages. In addition to becoming an Arcadia project mainstay, Q has also been made available to over 100 other sites. It is currently in use by SAIC, Loral, Stars project participants, and NASA Goddard. This paper summarizes key points that have been learned from this considerable base of experience. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for UNIX development. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Technical Conference and Exhibition, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: It is fair to say that this means that COM will have the same merits and demerits as DCE. 6.4 Matchmaker When supported by the capability-based interprocess communications found in the Mach kernel <ref> [1] </ref> Matchmaker [8] provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Pascal. The Matchmaker language defines the type model within which the supported languages may exchange data objects.
Reference: [2] <author> Danny Cohen. </author> <title> On holy wars and a plea for peace. </title> <booktitle> IEEE Computer, </booktitle> <month> October </month> <year> 1981. </year>
Reference-contexts: Figure 1 depicts the virtual machine layers of the resulting interoperability mechanism. A variety of language interfaces rest upon a 1 ONC is a trademark of Sun Microsystems, Incorporated. 2 This is particularly relevant when moving data between machines with differing byte-order archi tectures <ref> [2] </ref>. 2 Ada Interface C Interface C++ Interface Message Transport Interface ONC/RPC Interface ONC/XDR Interface standard remote procedure invocation interface (ONC/RPC) with a separate argument marshaling interface (ONC/XDR). Underlying this is a basic data transport mechanism supporting the physical message transport needs of the system.
Reference: [3] <author> Open Software Foundation. </author> <title> OSF DCE Application Development Guide. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> Revision 1.0. </note>
Reference-contexts: Arcadia systems have been built intentionally to be heterogeneous with respect to computing platform hardware, operating systems, and especially programming languages. The latter point is worth expanding upon, since many other systems (e.g., CORBA [15], OLE2 [13, 14], DCE <ref> [3] </ref>) claim to support multi-language heterogeneity. In fact, they have generally restricted themselves to C and C++. From its inception, Arcadia has been using a variety of languages, including C, C++, Ada, Lisp, and even occasionally Prolog. <p> As Arcadia grows so to will Q: modern software architectures appear to be more and more like the Arcadia environment. This trend implies uses for Q beyond the Software Development Environment arena which spawned it. 6 Related Work 6.1 DCE The Distributed Computing Environment <ref> [3] </ref> is an integrated set of services designed to support distributed applications. These services include: * Remote Procedure Call * Directory Service 15 * Time Service * Security Service * Threads Service The remote procedure call services were developed specifically to provide simplicity, performance, portability, and platform independence.
Reference: [4] <author> Dennis Heimbigner. ARPC: </author> <title> An augmented remote procedure call system. </title> <type> Technical Report CU-ARCADIA-100-94, </type> <institution> University of Colorado Arcadia Project, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: The resulting behavior was unpredictable, and usually erroneous. What was required was an IO multiplexing capability to resolve multiple requests for IO availability into a single select call. To facilitate this the ONC/RPC infrastructure was reengineered and extended to produce the Augmented Remote Procedure Call (Arpc) interface <ref> [4] </ref>. Among other things, the new infrastructure exposed a message passing interface for client/server interactions. Where previously a client made a single call to clnt call, now the client called clnt sendmsg followed by clnt recvmsg 5 .
Reference: [5] <author> Dennis Heimbigner. </author> <title> Why CORBA Doesn't Cut It or Experiences with Distributed Objects. </title> <type> Technical Report CU-ARCADIA-108-95, </type> <institution> University of Colorado Arcadia Project, Boulder, </institution> <address> CO 80309-0430, </address> <month> 30 June </month> <year> 1995. </year> <month> ftp://ftp.cs.colorado.edu/pub/cs/techreports/arcadia/Misc/sett.ps.Z. </month>
Reference-contexts: CORBA (and technically, DCE) does not support direct marshaling of such pre-defined types. Instead, one is required to define a duplicate type system in IDL and translate at run-time between the pre-defined types and the IDL types. The CORBA type system suffers from other deficiencies (See <ref> [5] </ref> for more detailed discussions). 8 CORBA is a trademark of the Object Management Group, Incorporated. 9 Orbix is a trademark of Iona Technologies. 10 ORBeline is a trademark of PostModern Computing Technologies Incorporated. 16 6.3 OLE2 Microsoft's COM/OLE2 [14] has grown over time to provide support for distributed objects.
Reference: [6] <author> M. Herlihy and B. H. Liskov. </author> <title> A value transmission method for abstract data types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(4) </volume> <pages> 527-551, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: This lack of flexibility/portability and the sparse usage of Mach make Matchmaker unsuitable as a solution to the interoperability needs of most contemporary software development environments. 6.5 Mercury The work done at MIT on a value transmission method for abstract data types <ref> [12, 6] </ref> is designed to support communicating abstract data types that are interoperable between regions of a system using different data value representations. This method defines call-by-value semantics for communicating values over a network of different computers. A canonical representation for each type used in communications is defined.
Reference: [7] <institution> Institute of Electrical and Electronics Engineers. IEEE Standard for Binary Floating-Point Arithmetic, </institution> <month> August </month> <year> 1985. </year> <title> ANSI/IEEE Standard. </title>
Reference-contexts: Floating point is signed 64 bit value whose precise representation is defined in the IEEE standard on floating point numbers <ref> [7] </ref>. Fixed point is a 32 bit value whose precise representation is defined in the Ada lan guage reference manual [23]. Enumeration is represented as an integer denoting the position of the data value in the enumeration set 3 . Boolean is an enumeration type.
Reference: [8] <author> Michael B. Jones and Richard F. Rashid. </author> <title> Mach and matchmaker: Kernel and language support for object-oriented distributed systems. </title> <type> Technical Report CMU-CS-87-150, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: It is fair to say that this means that COM will have the same merits and demerits as DCE. 6.4 Matchmaker When supported by the capability-based interprocess communications found in the Mach kernel [1] Matchmaker <ref> [8] </ref> provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Pascal. The Matchmaker language defines the type model within which the supported languages may exchange data objects.
Reference: [9] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment: Lessons learned from the Arcadia project. </title> <booktitle> In Proceedings of ACM SIGSOFT '92: Fifth Symposium on Software Development Environments, </booktitle> <address> Tyson's Corner, Virginia, </address> <month> December </month> <year> 1992. </year> <month> 19 </month>
Reference-contexts: Distribution also facilitates this. 1.1 Motivation for Q Q has evolved over a period of years to provide the infrastructure for distributed objects within the Arcadia environment project <ref> [21, 10, 9] </ref>. That evolution was driven by a cycle involving experience with Q leading to a crisis in handling some important problem, followed by extending and modifying Q to address the problem successfully.
Reference: [10] <author> R. Kadia. </author> <title> Lessons learned from the Arcadia project. </title> <booktitle> In DARPA Software Technol--ogy Conference, </booktitle> <address> Los Angeles, California, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Distribution also facilitates this. 1.1 Motivation for Q Q has evolved over a period of years to provide the infrastructure for distributed objects within the Arcadia environment project <ref> [21, 10, 9] </ref>. That evolution was driven by a cycle involving experience with Q leading to a crisis in handling some important problem, followed by extending and modifying Q to address the problem successfully.
Reference: [11] <author> Rudolf K. Keller, Mary Cameron, Richard N. Taylor, and Dennis B. Troup. </author> <title> User interface development and software environments: </title> <booktitle> The Chiron-1 system. In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 208-218, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: even while engaged in lengthy service 10 ADL Library Interpreter I/E Depiction Abstract Virtual Window System Chiron Server Chiron Server Chiron Client Chiron Client Concrete Depiction Artist Artist Dispatcher Artist ADT Wrapper ADT Wrapper ADT Text Text Text Wrapper Artist Application Chiron Client operations. 3.3 Experience with Version 2 Chiron <ref> [26, 11] </ref> is a user interface development system (UIDS) supporting the user interface needs of the Arcadia environment.
Reference: [12] <author> B. H. Liskov, T. Bloom, D. Gifford, R. Scheifler, and W. Weihl. </author> <title> Communication in the mercury system. </title> <booktitle> In Proceedings of the 21st Annual Hawaii Conference on System Sciences, </booktitle> <pages> pages 178-187. </pages> <publisher> IEEE, </publisher> <month> January </month> <year> 1988. </year>
Reference-contexts: This lack of flexibility/portability and the sparse usage of Mach make Matchmaker unsuitable as a solution to the interoperability needs of most contemporary software development environments. 6.5 Mercury The work done at MIT on a value transmission method for abstract data types <ref> [12, 6] </ref> is designed to support communicating abstract data types that are interoperable between regions of a system using different data value representations. This method defines call-by-value semantics for communicating values over a network of different computers. A canonical representation for each type used in communications is defined.
Reference: [13] <author> MicroSoft. </author> <title> OLE 2 Programmer's Reference. </title> <publisher> MicroSoft Press, </publisher> <year> 1994. </year> <title> Volumes One and Two. </title>
Reference-contexts: Arcadia systems have been built intentionally to be heterogeneous with respect to computing platform hardware, operating systems, and especially programming languages. The latter point is worth expanding upon, since many other systems (e.g., CORBA [15], OLE2 <ref> [13, 14] </ref>, DCE [3]) claim to support multi-language heterogeneity. In fact, they have generally restricted themselves to C and C++. From its inception, Arcadia has been using a variety of languages, including C, C++, Ada, Lisp, and even occasionally Prolog.
Reference: [14] <author> Microsoft/Object Management Group. </author> <title> Draft Component Object Model Specification, </title> <month> 6 March </month> <year> 1995. </year>
Reference-contexts: Arcadia systems have been built intentionally to be heterogeneous with respect to computing platform hardware, operating systems, and especially programming languages. The latter point is worth expanding upon, since many other systems (e.g., CORBA [15], OLE2 <ref> [13, 14] </ref>, DCE [3]) claim to support multi-language heterogeneity. In fact, they have generally restricted themselves to C and C++. From its inception, Arcadia has been using a variety of languages, including C, C++, Ada, Lisp, and even occasionally Prolog. <p> The CORBA type system suffers from other deficiencies (See [5] for more detailed discussions). 8 CORBA is a trademark of the Object Management Group, Incorporated. 9 Orbix is a trademark of Iona Technologies. 10 ORBeline is a trademark of PostModern Computing Technologies Incorporated. 16 6.3 OLE2 Microsoft's COM/OLE2 <ref> [14] </ref> has grown over time to provide support for distributed objects. Strictly speaking, COM (component object model) is the lowest layer in OLE2, but is the part that is most analogous to Q, CORBA, and DCE.
Reference: [15] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> 29 December </month> <year> 1993. </year>
Reference-contexts: Arcadia systems have been built intentionally to be heterogeneous with respect to computing platform hardware, operating systems, and especially programming languages. The latter point is worth expanding upon, since many other systems (e.g., CORBA <ref> [15] </ref>, OLE2 [13, 14], DCE [3]) claim to support multi-language heterogeneity. In fact, they have generally restricted themselves to C and C++. From its inception, Arcadia has been using a variety of languages, including C, C++, Ada, Lisp, and even occasionally Prolog. <p> As a result, it is difficult to rehost DCE onto platforms with different thread models, and even more difficult to embed DCE into languages like Ada that provide a significantly different model of concurrency. 6.2 CORBA CORBA 8 <ref> [15] </ref> is an evolving application interoperability standard. The current version, 2.0, was released in late 1994. As an evolving standard it is a moving target.
Reference: [16] <author> Xiping Song and Lee J. Osterweil. Debus: </author> <title> A software design process program. </title> <type> Arcadia Technical Report UCI-89-02, </type> <institution> Department of Information and Computer Science, University of California, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: Q has become the major mechanism used to support the interoperability needs of Arcadia. Almost every component therein (Rebus [22, 20], Debus <ref> [16] </ref>, PIC [24, 25], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q. Arcadia demonstrations are typically run on a network of Sun and DEC workstations, and considerably greater heterogeneity and distribution are possible.
Reference: [17] <author> Sun Microsystems. XDR: </author> <title> External data representation standard. </title> <type> Technical Report RFC-1014, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Q need to be duplicated in CORBA to shape its future if it is to also be successful in meeting these same needs. 2 Q Version 1 For largely pragmatic reasons the Open Network Computing ( ONC 1 ) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [18, 17] </ref> were chosen in 1988 as a basis for the construction of our language-heterogeneous interoperability mechanism. The, then newly available, version 4.0 release of RPC/XDR from Sun Microsystems was a public domain implementation that included the source code. This made modifications easy.
Reference: [18] <author> Sun Microsystems. </author> <title> RPC: Remote procedure call protocol specification. </title> <type> Technical Report RFC-1057, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Q need to be duplicated in CORBA to shape its future if it is to also be successful in meeting these same needs. 2 Q Version 1 For largely pragmatic reasons the Open Network Computing ( ONC 1 ) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [18, 17] </ref> were chosen in 1988 as a basis for the construction of our language-heterogeneous interoperability mechanism. The, then newly available, version 4.0 release of RPC/XDR from Sun Microsystems was a public domain implementation that included the source code. This made modifications easy.
Reference: [19] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Language constructs for managing change in process-centered environments. </title> <booktitle> In Proceedings of ACM SIGSOFT '90: Fourth Symposium on Software Development Environments, </booktitle> <pages> pages 206-217, </pages> <address> Irvine, CA, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Note that while this approach provides the ability to marshal arbitrarily complex type structures, it does not provide any support for conveying the semantics associated with them. 2.3 Experience with Version 1 APPL/A <ref> [19] </ref> is a software-process programming language designed as an extension of the Ada programming language. It adds constructs to the Ada language designed to 6 support change management in process-centered environments. APPL/A's extensions to Ada include persistent relations, triggers, enforcible predicates, and transactions.
Reference: [20] <author> Stanley M. Sutton, Jr., Hadar Ziv, Dennis Heimbigner, Harry E. Yessayan, Mark Maybee, Leon J. Osterweil, and Xiping Song. </author> <title> Programming a software requirements-specification process. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <pages> pages 68-89, </pages> <address> Redondo Beach, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Q has become the major mechanism used to support the interoperability needs of Arcadia. Almost every component therein (Rebus <ref> [22, 20] </ref>, Debus [16], PIC [24, 25], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q. Arcadia demonstrations are typically run on a network of Sun and DEC workstations, and considerably greater heterogeneity and distribution are possible.
Reference: [21] <author> Richard N. Taylor, Lori Clarke, Leon J. Osterweil, Jack C. Wileden, and Michal Young. Arcadia: </author> <title> A software development environment research project. </title> <booktitle> In Proceedings of the IEEE Computer Society Second International Conference on Ada Applications and Environments, </booktitle> <pages> pages 137-149, </pages> <address> Miami, Florida, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Distribution also facilitates this. 1.1 Motivation for Q Q has evolved over a period of years to provide the infrastructure for distributed objects within the Arcadia environment project <ref> [21, 10, 9] </ref>. That evolution was driven by a cycle involving experience with Q leading to a crisis in handling some important problem, followed by extending and modifying Q to address the problem successfully.
Reference: [22] <author> Robert B. Terwilliger, Mark J. Maybee, and Leon J. Osterweil. </author> <title> An example of formal specification as an aid to design and development. </title> <booktitle> In Proceedings of the ACM SIGSOFT '89: Fifth International Workshop on Software Specification and Design, </booktitle> <pages> pages 266-272, </pages> <address> Pittsburgh, </address> <month> May </month> <year> 1989. </year> <booktitle> SIGSOFT Engineering Notes. </booktitle> <pages> 20 </pages>
Reference-contexts: Q has become the major mechanism used to support the interoperability needs of Arcadia. Almost every component therein (Rebus <ref> [22, 20] </ref>, Debus [16], PIC [24, 25], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q. Arcadia demonstrations are typically run on a network of Sun and DEC workstations, and considerably greater heterogeneity and distribution are possible.
Reference: [23] <institution> United States Department of Defense. </institution> <note> Reference Manual for the Ada Programming Language, 1983. ANSI/MIL-STD-1815A-1983. </note>
Reference-contexts: Floating point is signed 64 bit value whose precise representation is defined in the IEEE standard on floating point numbers [7]. Fixed point is a 32 bit value whose precise representation is defined in the Ada lan guage reference manual <ref> [23] </ref>. Enumeration is represented as an integer denoting the position of the data value in the enumeration set 3 . Boolean is an enumeration type. False is represented as the integer 0 and True is represented as the integer 1.
Reference: [24] <author> A. L. Wolf, L. A. Clarke, and J. C. Wileden. </author> <title> The AdaPIC toolset: Supporting interface control and analysis throughout the software development process. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(3) </volume> <pages> 250-263, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Q has become the major mechanism used to support the interoperability needs of Arcadia. Almost every component therein (Rebus [22, 20], Debus [16], PIC <ref> [24, 25] </ref>, BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q. Arcadia demonstrations are typically run on a network of Sun and DEC workstations, and considerably greater heterogeneity and distribution are possible.
Reference: [25] <author> Alexander L. Wolf, Lori A. Clarke, and Jack C. Wileden. </author> <title> Ada-based support for programming-in-the-large. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 58-71, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: Q has become the major mechanism used to support the interoperability needs of Arcadia. Almost every component therein (Rebus [22, 20], Debus [16], PIC <ref> [24, 25] </ref>, BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q. Arcadia demonstrations are typically run on a network of Sun and DEC workstations, and considerably greater heterogeneity and distribution are possible.
Reference: [26] <author> Michal Young, Richard N. Taylor, and Dennis B. Troup. </author> <title> Software environment architectures and user interface facilities. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(6) </volume> <pages> 697-708, </pages> <month> June </month> <year> 1988. </year> <month> 21 </month>
Reference-contexts: even while engaged in lengthy service 10 ADL Library Interpreter I/E Depiction Abstract Virtual Window System Chiron Server Chiron Server Chiron Client Chiron Client Concrete Depiction Artist Artist Dispatcher Artist ADT Wrapper ADT Wrapper ADT Text Text Text Wrapper Artist Application Chiron Client operations. 3.3 Experience with Version 2 Chiron <ref> [26, 11] </ref> is a user interface development system (UIDS) supporting the user interface needs of the Arcadia environment.
References-found: 26

