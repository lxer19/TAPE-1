URL: http://www.cs.tamu.edu/people/dalel/Personal/parallel-report.ps
Refering-URL: http://www.cs.tamu.edu/people/dalel/Personal/
Root-URL: http://www.cs.tamu.edu
Title: CPSC 626 Parallel Algorithm Design and Analysis Term Project Report  
Author: Lucia Dale Xiaoling Huang 
Degree: Presented to: Dr. Nancy Amato by  
Date: 06/29/96  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aggarwal, B. Chazelle, L. J. Guibas, C. O'Dublaing, and C. K. Yap, </author> <title> "Parallel Computational Geometry", </title> <journal> Algorithmica, </journal> <volume> vol. 3, </volume> <year> 1988, </year> <pages> 293-327. </pages>
Reference-contexts: In contrast, the CRCW PRAM algorithm described in [14], which requires O (n) processors and the COLLISION rule for resolving write conflicts, assumes that the data are chosen from a uniform distribution and runs in constant expected time. A different 2 approach is taken in [5] and, independently in <ref> [1] </ref>, for the weaker CREW PRAM with O (n) processors. Based on the concept of multiway divide-and-conquer, it consists of dividing the problem into a number of subproblems whose solutions are obtained recursively in parallel and then merging these solutions. <p> Many efforts were directed toward obtaining efficient convex hull algorithms on the least powerful variant of the shared-memory model, namely the CREW PRAM. It is shown in [11] how the CREW PRAM multiway divide-and-conquer algorithm of [5] and <ref> [1] </ref> can be modified to achieve the same performance on the weaker EREW PRAM.
Reference: [2] <author> S. G. Akl, </author> <title> "A Constant-time Parallel Algorithm for Computing Convex Hulls," </title> <journal> Al-gorithmica, </journal> <volume> vol. 22, </volume> <pages> pp. 130-134, </pages> <year> 1982. </year>
Reference-contexts: Central to many application areas, the convex hull problem has been extensively studied in the literature, both sequentially and in parallel [4] [9] [12]. One of the first parallel algorithms appears in <ref> [2] </ref>. It runs in constant time on a CRCW PRAM and requires O (n 3 ) processors. An improved algorithm for the same model that also runs in constant time but with O (n 2 ) processors is described in [3].
Reference: [3] <author> S. G. Akl, </author> <title> The Design and Analysis of Parallel Algorithms, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: One of the first parallel algorithms appears in [2]. It runs in constant time on a CRCW PRAM and requires O (n 3 ) processors. An improved algorithm for the same model that also runs in constant time but with O (n 2 ) processors is described in <ref> [3] </ref>. This algorithm is essentially a parallelization of the sequential algorithm by Jarvis [10], long believed to be inherently sequential because of the incremental way in which it constructs the convex hull.
Reference: [4] <author> S. G. Akl and K. A. Lyons, </author> <title> Parallel Computational Geometry, </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, New Jersey, </address> <year> 1993. </year> <month> 9 </month>
Reference-contexts: One of the fundamental heuristics in pattern recognition, image processing and robot navigation involves approximating real-world objects by their corresponding convex sets. Central to many application areas, the convex hull problem has been extensively studied in the literature, both sequentially and in parallel <ref> [4] </ref> [9] [12]. One of the first parallel algorithms appears in [2]. It runs in constant time on a CRCW PRAM and requires O (n 3 ) processors.
Reference: [5] <author> M. J. Atallah and M. T. Goodrich, </author> <title> "Efficient Parallel Solutions to Some Geometric Problems," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 3, </volume> <year> 1986, </year> <pages> 492-507. </pages>
Reference-contexts: In contrast, the CRCW PRAM algorithm described in [14], which requires O (n) processors and the COLLISION rule for resolving write conflicts, assumes that the data are chosen from a uniform distribution and runs in constant expected time. A different 2 approach is taken in <ref> [5] </ref> and, independently in [1], for the weaker CREW PRAM with O (n) processors. Based on the concept of multiway divide-and-conquer, it consists of dividing the problem into a number of subproblems whose solutions are obtained recursively in parallel and then merging these solutions. <p> Many efforts were directed toward obtaining efficient convex hull algorithms on the least powerful variant of the shared-memory model, namely the CREW PRAM. It is shown in [11] how the CREW PRAM multiway divide-and-conquer algorithm of <ref> [5] </ref> and [1] can be modified to achieve the same performance on the weaker EREW PRAM.
Reference: [6] <author> A. L. Chow, </author> <title> "Parallel Algorithm for Determining Convex Hull of Sets of Points in Two Dimensions," </title> <booktitle> Proceedings of the Nineteenth Annual Allerton Conference on Communication, Control and Computing, </booktitle> <address> Monticello, Illinois, </address> <month> September/October </month> <year> 1981, </year> <pages> 214-223. </pages>
Reference-contexts: The same running time is obtained in [7], using the cascading merge techniques. Two other algorithms for the CREW PRAM are described in the pioneering work of Chow <ref> [6] </ref>. The first uses O (n) processors and runs in O (log 2 n) time, while the second uses O (n 1+1=K ) processors and runs in O (K log n) time, with 1 K log n.
Reference: [7] <author> R. Cole and M. T. Goodrich, </author> <title> "Optimal Parallel Algorithms for Polygon and Point-set Problems," </title> <booktitle> Proceedings of the Fourth Annual ACM Symposium on Computational Geometry, </booktitle> <address> Urbana-Champaign, Illinois, </address> <month> June </month> <year> 1988, </year> <pages> 201-210. </pages>
Reference-contexts: Based on the concept of multiway divide-and-conquer, it consists of dividing the problem into a number of subproblems whose solutions are obtained recursively in parallel and then merging these solutions. The same running time is obtained in <ref> [7] </ref>, using the cascading merge techniques. Two other algorithms for the CREW PRAM are described in the pioneering work of Chow [6].
Reference: [8] <author> F. Dehne, A. Fabri and A. Ran-Chaplin, </author> <title> "Scalable Parallel Geometric Algorithms for Coarse Grained Multicomputers", </title> <booktitle> Proc. 9th Annual Symposium on Computational Geometry, </booktitle> <pages> pp. 298-307, </pages> <year> 1993. </year>
Reference: [9] <author> R. O. Duda and P. E. Hart, </author> <title> Pattern Classification and Scene Analysis, </title> <publisher> Wiley and Sons, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: One of the fundamental heuristics in pattern recognition, image processing and robot navigation involves approximating real-world objects by their corresponding convex sets. Central to many application areas, the convex hull problem has been extensively studied in the literature, both sequentially and in parallel [4] <ref> [9] </ref> [12]. One of the first parallel algorithms appears in [2]. It runs in constant time on a CRCW PRAM and requires O (n 3 ) processors.
Reference: [10] <author> R. A. Jarvis, </author> <title> "On the Identification of the Convex Hull of a Finite Set of Points in the Plane," </title> <journal> Information Processing Letters, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 18-21, </pages> <year> 1973. </year>
Reference-contexts: An improved algorithm for the same model that also runs in constant time but with O (n 2 ) processors is described in [3]. This algorithm is essentially a parallelization of the sequential algorithm by Jarvis <ref> [10] </ref>, long believed to be inherently sequential because of the incremental way in which it constructs the convex hull. No algorithm is known for constructing the convex hull in constant time in the worst case while using asymptotically fewer that n 2 processors.
Reference: [11] <author> R. Miller and Q. F. Stout, </author> <title> "Efficient parallel convex hull algorithms," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-37, No. 12, </volume> <month> December </month> <year> 1988, </year> <pages> 1605-1618. </pages>
Reference-contexts: Many efforts were directed toward obtaining efficient convex hull algorithms on the least powerful variant of the shared-memory model, namely the CREW PRAM. It is shown in <ref> [11] </ref> how the CREW PRAM multiway divide-and-conquer algorithm of [5] and [1] can be modified to achieve the same performance on the weaker EREW PRAM.
Reference: [12] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <address> Spring-Verlag, Berlin, </address> <year> 1985. </year>
Reference-contexts: In computational geometry, computing the convex hull of a set of points is critical to devising efficient algorithms for a number of seemingly unrelated problems <ref> [12] </ref>. One of the fundamental heuristics in pattern recognition, image processing and robot navigation involves approximating real-world objects by their corresponding convex sets. Central to many application areas, the convex hull problem has been extensively studied in the literature, both sequentially and in parallel [4] [9] [12]. <p> of seemingly unrelated problems <ref> [12] </ref>. One of the fundamental heuristics in pattern recognition, image processing and robot navigation involves approximating real-world objects by their corresponding convex sets. Central to many application areas, the convex hull problem has been extensively studied in the literature, both sequentially and in parallel [4] [9] [12]. One of the first parallel algorithms appears in [2]. It runs in constant time on a CRCW PRAM and requires O (n 3 ) processors. An improved algorithm for the same model that also runs in constant time but with O (n 2 ) processors is described in [3].
Reference: [13] <author> J. Reif, </author> <title> Synthesis of Parallel Algorithms, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> California, </address> <year> 1993. </year>
Reference-contexts: In this section, we give brief high-level descriptions of the randomized parallel algorithm. The randomized algorithm <ref> [13] </ref> is based on an important duality property. The dual of a point p = (a; b) is the hyperplane D (p) : ax + by = 1. Conversely, D (p) is the dual of point p.
Reference: [14] <author> Q. F. Stout, </author> <title> "Constant-time Geometry on PRAMS," </title> <booktitle> Proceedings of the 1988 International Conference on Parallel Processing, </booktitle> <address> St. Charles, Illinois, </address> <month> August </month> <year> 1988, </year> <title> Vol. </title> <booktitle> III, Algorithms and Applications, </booktitle> <pages> 104-107. 10 </pages>
Reference-contexts: No algorithm is known for constructing the convex hull in constant time in the worst case while using asymptotically fewer that n 2 processors. In contrast, the CRCW PRAM algorithm described in <ref> [14] </ref>, which requires O (n) processors and the COLLISION rule for resolving write conflicts, assumes that the data are chosen from a uniform distribution and runs in constant expected time.
References-found: 14

