URL: ftp://ftp.cs.uah.edu/techreports/TR-UAH-CS-1996-01.ps.Z
Refering-URL: http://www.cs.uah.edu/~delugach/cs-tech-reports.html
Root-URL: 
Title: Vector-Parallel Realization of the Marching Cubes  
Author: Ning Tang Timothy S. Newman 
Date: January 30, 1996  
Address: in Huntsville  
Affiliation: Department of Computer Science University of Alabama in Huntsville  Department of Computer Science University of Alabama  
Note: A  
Abstract: Technical Report TR-UAH-CS-1996-01: UAH Computer Science Department Abstract The Marching Cubes algorithm is a popular high-resolution isosurface extraction method used in volume data visualization. However, it is relatively computationally intensive making real-time operation on normal workstations a difficult goal when applied to large datasets. One solution is to transform the serial algorithm into a vector-parallel algorithm designed to exploit the potential computing power supplied by a supercomputer. In this paper, we present an implementation of the Marching Cubes that considers the inherent parallelism in the algorithm as well as the specific characteristics of the pipelined CPU of a vector-parallel supercomputer (Cray C90). In our approach, we vectorize two time-consuming operations in the Marching Cubes. The first operation is the interpolation of the intersection points between the isosurface and the cube edges. The second vectorized operation is the computation of topological equivalences for classes of intersections. In this paper, we describe the details of our parallel algorithm and present the experimental results for several typical volume datasets. 
Abstract-found: 1
Intro-found: 1
Reference: [Alma94] <author> Almasi, G.S. </author> <title> Highly Parallel Computing, 2nd ed. </title> <publisher> Benjamin/Cummings Publishing: </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Apart from the time to fill and empty the pipe, the pipeline time improvement is proportional to the number of sections in the pipe <ref> [Alma94] </ref> [Matv94]. Since the operation is done on an array of data, this computation mode is called vector computation. In practice, the main operations that can be vectorized in an application are those calculations within loops. However, there are some limitations on the loops that can be vectorized. <p> In loop ( 2), the operation on one element of 5 the array depends on the calculation result from the previous element and thus that element could not enter the pipe until its predecessor exits. This is called a flow dependence <ref> [Alma94] </ref> [Cray95]. f or i = 1 to N do Loop ( 3) can not be vectorized because it is difficult to arrange the data in array b for vector computation since its indices will not be known at compilation time.
Reference: [Cray95] <institution> Cray Standard C programmer's Reference Manual; SR-2074 3.0 Cray Research Inc.; </institution> <year> 1995. </year>
Reference-contexts: In loop ( 2), the operation on one element of 5 the array depends on the calculation result from the previous element and thus that element could not enter the pipe until its predecessor exits. This is called a flow dependence [Alma94] <ref> [Cray95] </ref>. f or i = 1 to N do Loop ( 3) can not be vectorized because it is difficult to arrange the data in array b for vector computation since its indices will not be known at compilation time.
Reference: [Lore87] <author> Lorensen, </author> <title> W.E. and Cline, H.E., "Marching Cubes: A High Resolution 3D Surface Construction Algorithm," </title> <booktitle> SIGGRAPH 87 Conference Proceedings, Computer Graphics, </booktitle> <volume> Vol. 21, No. 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 163-169. </pages>
Reference-contexts: Thus it is essential that the extraction be done accurately and efficiently. The Marching Cubes technique can be understood by considering a set of volume data with data values (voxels) distributed on a regularly spaced 3D grid <ref> [Lore87] </ref> [Mont94] [Matv94]. The grid lines define the bounding edges of cubes. The isosurface could potentially intersect any boundary edge of any cube. <p> Images of extracted isosurfaces are also presented at the end of the paper. 2 SERIAL MARCHING CUBES IMPLEMENTATION A number of descriptions of the Marching Cubes algorithm have been presented in the literature, and our implementation is motivated by <ref> [Lore87] </ref>. Most implementation details were omitted in the papers available to us, thus we have developed our own data structures and program organization. <p> We use a look-up table (LUT) refined for our application to help determine the topological connection between these intersection points. Many other Marching Cubes algorithm realizations also use various types of look-up tables (for example, <ref> [Lore87] </ref> [Matv94]). When the isosurface is determined to intersect a cube edge, linear interpolation between the two edge vertices is used to calculate the location of the intersection. Thus the location of the intersection point on an edge depends on the values of the two vertices. <p> However, if complementary symmetry and rotational symmetry are considered, the number of classes is reduced to fourteen <ref> [Lore87] </ref>. Complementary symmetry can be understood with the following example. In Figure 3, let S 1 = fV 0 ; V 2 ; V 5 ; V 6 ; V 7 g be the set of vertices whose values are above the isosurface threshold T.
Reference: [Mach93] <author> Machiraju, R.K. and Yagel, R., </author> <title> "Efficient Feed-Forward Volume Rendering Techniques for Vector and Parallel Processors," </title> <booktitle> Supercomputing '93, </booktitle> <address> Portland, </address> <year> 1993, </year> <pages> pp. 699-708. </pages>
Reference: [Matv94] <author> Matveyev, </author> <title> S.V., "Approximation of Isosurface in the Marching Cube: Ambiguity Problem," Visualization 94, </title> <address> Washington, </address> <year> 1994, </year> <pages> pp. 288-292. </pages>
Reference-contexts: Thus it is essential that the extraction be done accurately and efficiently. The Marching Cubes technique can be understood by considering a set of volume data with data values (voxels) distributed on a regularly spaced 3D grid [Lore87] [Mont94] <ref> [Matv94] </ref>. The grid lines define the bounding edges of cubes. The isosurface could potentially intersect any boundary edge of any cube. <p> We use a look-up table (LUT) refined for our application to help determine the topological connection between these intersection points. Many other Marching Cubes algorithm realizations also use various types of look-up tables (for example, [Lore87] <ref> [Matv94] </ref>). When the isosurface is determined to intersect a cube edge, linear interpolation between the two edge vertices is used to calculate the location of the intersection. Thus the location of the intersection point on an edge depends on the values of the two vertices. <p> Apart from the time to fill and empty the pipe, the pipeline time improvement is proportional to the number of sections in the pipe [Alma94] <ref> [Matv94] </ref>. Since the operation is done on an array of data, this computation mode is called vector computation. In practice, the main operations that can be vectorized in an application are those calculations within loops. However, there are some limitations on the loops that can be vectorized.
Reference: [Mont94] <author> Montani, C., Scateni, R., and Scopigno, R., </author> <title> "Discretized Marching Cubes," Visualization 94, </title> <address> Washington, </address> <year> 1994, </year> <pages> pp. 281-287. </pages>
Reference-contexts: Thus it is essential that the extraction be done accurately and efficiently. The Marching Cubes technique can be understood by considering a set of volume data with data values (voxels) distributed on a regularly spaced 3D grid [Lore87] <ref> [Mont94] </ref> [Matv94]. The grid lines define the bounding edges of cubes. The isosurface could potentially intersect any boundary edge of any cube.
Reference: [Simm92] <author> Simmons, L.S., Wasserman, H.J., Lubeck, O.M.,et al., </author> <title> "A Performance Comparison Of Four Supercomputers," </title> <journal> Communications of The ACM, </journal> <volume> Vol. 35, No. 8, </volume> <month> August </month> <year> 1992, </year> <pages> pp. 116-123. </pages>
Reference: [Ston87] <author> Stone, H.S., </author> <title> High Performance Computer Architecture, </title> <publisher> Addison Wesley Publishing Company: </publisher> <address> New York, </address> <year> 1987. </year> <month> 13 </month>
References-found: 8

