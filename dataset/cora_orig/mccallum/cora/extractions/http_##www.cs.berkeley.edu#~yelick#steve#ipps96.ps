URL: http://www.cs.berkeley.edu/~yelick/steve/ipps96.ps
Refering-URL: http://www.cs.berkeley.edu/~yelick/papers.html
Root-URL: 
Title: Performance Modeling and Composition: A Case Study in Cell Simulation  
Author: Steve G. Steinberg, Jun Yang, and Katherine Yelick 
Address: Berkeley  
Affiliation: Computer Science Division University of California at  
Abstract: We present a case study in the use of performance modeling for parallel application development, with a biological cell simulation as our target application. We show that a simple performance model is adequate for determining data layout for arrays and linked structures, and validate our model against experimental results for some application kernels. We quantify the importance of optimizing across program components using information about machine performance and input characteristics. The cell simulation application has two phases, one regular and one irregular. The model closely predicts actual performance within the regular phase and allows for qualitative design comparisons in the irregular one. The resulting application is written in Split-C and runs on multiple platforms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Adve, J.-C. Wang, J. Mellor-Crummey, D. Reed, M. An-derson, and K. Kennedy. </author> <title> An integrated compilation and performance analysis environment for data parallel programs. </title> <booktitle> In Supercomputing, </booktitle> <address> San Diego, CA, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. <p> The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive <ref> [11, 1] </ref>. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems [14, 3, 15], although none consider the skewed layout.
Reference: [2] <author> G. Agrawal and J. Saltz. </author> <title> Interprocedural compilation of irregular applications for distributed memory machines. </title> <type> Technical Report CS-TR-3447, </type> <institution> University of Maryland, College Park, MD, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: In addition, transformations to globally rearrange FFTs and other computations using high-level knowledge of the semantics are probably beyond the scope of these compilers. The problem of compiling irregular applications is typically addressed using a combination of compiler and runtime analysis <ref> [2, 9] </ref>. The information from this analysis is useful in eliminating redundant communication, converting small messages into larger ones, and in generating efficient communication schedules, but is not yet applicable to automatic alignment and distribution of irregular structures across program phases. 8.
Reference: [3] <author> J. M. Anderson and M. S. Lam. </author> <title> Global optimizations for parallelism and locality on scalable parallel machines. </title> <booktitle> In Proceedings of the ACM SIGPLAN '93 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 23-25, </pages> <address> Albuquerque, NM, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. <p> The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics <ref> [3, 11, 15] </ref> and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. <p> Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems <ref> [14, 3, 15] </ref>, although none consider the skewed layout. In addition, transformations to globally rearrange FFTs and other computations using high-level knowledge of the semantics are probably beyond the scope of these compilers.
Reference: [4] <author> G. Angelopoulos and I. Pitas. </author> <title> Two-dimensional fft algorithms on hypercube and mesh machines. </title> <booktitle> Signal Processing, </booktitle> <volume> 30, </volume> <year> 1993. </year>
Reference-contexts: Fast Fourier Transform The dominating cost of the Navier-Stokes solver is the time required for two 2-D FFTs. To implement the 2-D FFT, we may choose a row-column technique <ref> [4] </ref> with 2N 1-D FFTs, using a row layout for the row FFTs and a column layout for the column FFTs. Each processor performs 1-D FFTs on its local rows, followed by a global remap, and then 1-D FFTs on its local columns.
Reference: [5] <author> R. Bixby, K. Kennedy, and U. Kremer. </author> <title> Automatic data layout using 0-1 integer programming. </title> <booktitle> In Proceedings of the IFIP WG 10.3 Working Conference on Parallel Architectures and Compilation Techniques, </booktitle> <pages> pages 111-122, </pages> <address> Montreal, Quebec, </address> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques <ref> [5] </ref>. Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems [14, 3, 15], although none consider the skewed layout.
Reference: [6] <author> E. Brewer. </author> <title> High-level optimization via automated satistical modeling. </title> <booktitle> In Principles and Practice of Parallel Programming, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: 1. Introduction Judicious choice of data layouts to balance computation and minimize communication is critical to the performance of parallel programs. Even for regular computational kernels, determining the optimal layout may require detailed performance models [10] or experimentation <ref> [6] </ref>. For large parallel programs composed of irregular and regular kernels, experimenting with several implementations is not feasible.
Reference: [7] <author> S. Chatterjee, J. R. Gilbert, R. Schreiber, and S.-H. Teng. </author> <title> Automatic array alignment in data-parallel programs. </title> <booktitle> In Proceedings, 20th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 16-28, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1].
Reference: [8] <author> D. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Supercomputing '93, </booktitle> <pages> pages 262-273, </pages> <address> Portland, OR, </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: For the irregular phase, we extend the model with a small amount of information about the input, and then use it to correctly make some basic design decisions. The paper is organized around the cell simulation program, implemented in Split-C <ref> [8, 17] </ref>. Section 2 provides an overview of the application, and section 3 describes the performance model. We explore parallelization of the regular phase in section 4, the irregular phase in section 5, and the overall program in section 6.
Reference: [9] <author> R. Das, M. Uysal, J. Saltz, and Y.-S. Hwang. </author> <title> Communication Optimizations for Irregular Scientific Computations on Distributed Memory Architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: In addition, transformations to globally rearrange FFTs and other computations using high-level knowledge of the semantics are probably beyond the scope of these compilers. The problem of compiling irregular applications is typically addressed using a combination of compiler and runtime analysis <ref> [2, 9] </ref>. The information from this analysis is useful in eliminating redundant communication, converting small messages into larger ones, and in generating efficient communication schedules, but is not yet applicable to automatic alignment and distribution of irregular structures across program phases. 8.
Reference: [10] <author> J. Demmel and S. Smith. </author> <title> Parallelizing a global atmospheric chemical tracer model. </title> <booktitle> In IEEE Conference for Scalable High Performance Computation, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Judicious choice of data layouts to balance computation and minimize communication is critical to the performance of parallel programs. Even for regular computational kernels, determining the optimal layout may require detailed performance models <ref> [10] </ref> or experimentation [6]. For large parallel programs composed of irregular and regular kernels, experimenting with several implementations is not feasible.
Reference: [11] <author> T. Fahringer, R. Blasko, and H. P. Zima. </author> <title> Automatic performance prediction to support parallelization of fortran programs for massively parallel systems. </title> <booktitle> In 6th ACM International Conference on Supercomputing, </booktitle> <pages> pages 347-356, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. <p> The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics <ref> [3, 11, 15] </ref> and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. <p> The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive <ref> [11, 1] </ref>. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems [14, 3, 15], although none consider the skewed layout.
Reference: [12] <author> F. Fauci and A. Fogelson. </author> <title> Truncated newton methods and the modeling of complex immersed elastic structures. </title> <journal> Communications on Pure and Applied Mathematics, </journal> <volume> XLVI, </volume> <year> 1993. </year>
Reference-contexts: We present some related work in section 7, and conclude in section 8. 2. Application Overview Biologists use computational models of bodies immersed in an incompressible fluid to help understanding blood flow in the heart [16], the growth of embryos [18], platelet aggregation during blood clotting <ref> [12] </ref>, sperm motility [12], and other biological phenomena. This simulation technique, known as the immersed boundary method, was first developed by Charles Peskin to model blood flow in the heart in order to aid the design of artificial heart valves. <p> We present some related work in section 7, and conclude in section 8. 2. Application Overview Biologists use computational models of bodies immersed in an incompressible fluid to help understanding blood flow in the heart [16], the growth of embryos [18], platelet aggregation during blood clotting <ref> [12] </ref>, sperm motility [12], and other biological phenomena. This simulation technique, known as the immersed boundary method, was first developed by Charles Peskin to model blood flow in the heart in order to aid the design of artificial heart valves.
Reference: [13] <author> S. Greenberg. </author> <title> Three-dimensional fluid dynamics in a two-dimensional amount of central memory. Wave Motion: Theory, </title> <booktitle> Modeling, and Computation, </booktitle> <year> 1987. </year>
Reference-contexts: At each time step, discrete versions of the incompressible Navier-Stokes equations are solved over a rectangular, periodic grid to find the fluid's velocity and pressure field. The solver is based on Chorin's projection method (a finite-difference scheme) and the Fourier-Toeplitz fast Poisson solver <ref> [13] </ref>.
Reference: [14] <author> K. Kennedy, C. Koelbel, and U. Kremer. </author> <title> Automatic Data Layout for High Performance Fortran. </title> <type> Technical Report TR94498, CRPC, </type> <institution> Rice University, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. <p> Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems <ref> [14, 3, 15] </ref>, although none consider the skewed layout. In addition, transformations to globally rearrange FFTs and other computations using high-level knowledge of the semantics are probably beyond the scope of these compilers.
Reference: [15] <author> D. J. Palermo and P. Banerjee. </author> <title> Automatic selection of dynamic data partitioning schemes for distributed-memory multicomputers. </title> <booktitle> In Proceedingsof the 8th Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Columbus, OH, </address> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Related Work in Automating Layout Many researchers have developed compilation algorithms or systems to support automatic alignment and data distribution for data-parallel or automatically parallelized sequential programs <ref> [11, 7, 3, 14, 1, 15] </ref>. The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics [3, 11, 15] and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. <p> The global optimization problem for both locality and parallelism is NP-complete, and has been addressed using heuristics <ref> [3, 11, 15] </ref> and 0-1 integer programming techniques [5]. Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. <p> Some systems are interactive [11, 1]. All of this work covers regular parallel programs and is applicable only to the Navier-Stokes solver phase of our application. The tridiagonal solver is used as a benchmark for some systems <ref> [14, 3, 15] </ref>, although none consider the skewed layout. In addition, transformations to globally rearrange FFTs and other computations using high-level knowledge of the semantics are probably beyond the scope of these compilers.
Reference: [16] <author> C. Peskin and D. McQueen. </author> <title> Cardiac fluid dynamics. Critical Reviews in Biomedical Engineering, </title> <type> 20, </type> <year> 1992. </year>
Reference-contexts: We present some related work in section 7, and conclude in section 8. 2. Application Overview Biologists use computational models of bodies immersed in an incompressible fluid to help understanding blood flow in the heart <ref> [16] </ref>, the growth of embryos [18], platelet aggregation during blood clotting [12], sperm motility [12], and other biological phenomena.
Reference: [17] <author> S. Steinberg. </author> <title> Parallelizing a cell simulation: Analysis, abstraction, and portability. </title> <type> Master's thesis, </type> <institution> University of Cal-ifornia, Berkeley, Computer Science Division, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: For the irregular phase, we extend the model with a small amount of information about the input, and then use it to correctly make some basic design decisions. The paper is organized around the cell simulation program, implemented in Split-C <ref> [8, 17] </ref>. Section 2 provides an overview of the application, and section 3 describes the performance model. We explore parallelization of the regular phase in section 4, the irregular phase in section 5, and the overall program in section 6.
Reference: [18] <author> M. Weliky. </author> <title> Notochord morphogenesis in xernopus laevis: simulation of cell behavior underlying tissue convergence and extension. </title> <booktitle> Development, </booktitle> <volume> 113, </volume> <year> 1991. </year>
Reference-contexts: We present some related work in section 7, and conclude in section 8. 2. Application Overview Biologists use computational models of bodies immersed in an incompressible fluid to help understanding blood flow in the heart [16], the growth of embryos <ref> [18] </ref>, platelet aggregation during blood clotting [12], sperm motility [12], and other biological phenomena. This simulation technique, known as the immersed boundary method, was first developed by Charles Peskin to model blood flow in the heart in order to aid the design of artificial heart valves.
References-found: 18

