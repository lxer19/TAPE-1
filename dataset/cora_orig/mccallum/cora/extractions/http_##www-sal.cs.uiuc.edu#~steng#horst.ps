URL: http://www-sal.cs.uiuc.edu/~steng/horst.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~steng/horst.html
Root-URL: http://www.cs.uiuc.edu
Title: HOW GOOD IS RECURSIVE BISECTION?  
Author: HORST D. SIMON AND SHANG-HUA TENG 
Keyword: Key words. Communication cost, data and computation mapping on parallel machines, load balancing, mesh partitioning, parallel processing, recursive bisection, scalable parallel algorithms, well-shaped finite-element and finite-difference meshes.  
Date: 000  
Note: SIAM J. SCIENT. COMP. c 1995 Society for Industrial and Applied Mathematics Vol. xx, No. pp. 000-000, 1995 (to appear)  AMS subject classifications. 05C50, 68R10  
Abstract: The most commonly used p-way partitioning method is recursive bisection (RB). It first divides a graph or a mesh into two equal sized pieces, by a "good" bisection algorithm, and then recursively divides the two pieces. Ideally, we would like to use an optimal bisection algorithm. Because the optimal bisection problem, that partitions a graph into two equal sized subgraphs to minimize the number of edges cut, is NP-complete, practical RB algorithms use more efficient heuristics in place of an optimal bisection algorithm. Most such heuristics are designed to find the best possible bisection within allowed time. We show that the recursive bisection method, even when an optimal bisection algorithm is assumed, may produce a p-way partition that is very far way from the optimal one. Our negative result is complemented by two positive ones: First we show that for some important classes of graphs that occur in practical applications, such as well-shaped finite element and finite difference meshes, RB is within a constant factor of the optimal one "almost always". Secondly, we show that if the balance condition is relaxed so that each block in the p-way partition is bounded by 2n=p, where n is the number of vertices of the graph, then a modified RB finds an approximately balanced p-way partition whose cost is within an O(log p) factor of the cost of the optimal p-way partition. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, P. Seymour, and R. Thomas. </author> <title> A separator theorem for graphs with an excluded minor and its applications. </title> <booktitle> In ACM STOC, </booktitle> <pages> 293-299. </pages> <year> 1990. </year>
Reference-contexts: D. SIMON AND S. H. TENG * Planar graphs [21] have a family of O ( p n)-separators. * Bounded genus graphs [12] have a family of O ( p gn)-separators, where g is the genus of the graphs. * Bounded minor graphs <ref> [1] </ref> have a family of O (h 1:5 p n)-separators, where h is the size of the largest minor clique. A minor of a graph is a subgraph obtained from the original graph by contracting edges. <p> The results in Section 4 is mainly observational and follows quite directly from the previous separator results <ref> [1, 12, 21, 24] </ref>. These results give an absolute upper bound on the cut-size of the p-way partition. It shows that the ratio of cut-size to the graph size is O ((p=n) 1=d ) &lt; 1.
Reference: [2] <author> S. T. Barnard and H. D. Simon. </author> <title> A Fast Multilevel Implementation of Recursive Spectral Bisection for Partitioning Unstructured Problems. </title> <journal> Concurrency: Practice and Experience 6(2), </journal> <volume> pp101-117, </volume> <year> 1994. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection. <p> Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18].
Reference: [3] <author> M. J. Berger and S. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Trans. Comp., </journal> <volume> C-36:570-580, </volume> <year> 1987. </year>
Reference-contexts: Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18].
Reference: [4] <author> M. Bern, D. Eppstein and J. R. Gilbert. </author> <title> Provably good mesh generation. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, IEEE, </booktitle> <pages> 231-241, </pages> <year> 1990. </year>
Reference-contexts: On the optimistic side, our negative result is complemented by two positive results. First, we show that for some important classes of graphs that occur in practical applications such as well shaped finite-element and finite-difference meshes <ref> [4, 9, 24, 25, 28] </ref>, recursive bisection is within a constant factor of the optimal one in the expected case.
Reference: [5] <author> H. Berryman, J. Saltz and J. Scroggs. </author> <title> Execution time support for adaptive scientific algorithms on distributed memory machines. </title> <journal> Concurrency: Practice and Experience 3(3), </journal> <volume> pp159-178, </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [6] <author> P. E. Bjtrstad and O. B. Widlund. </author> <title> Iterative methods for the solution of elliptic problems on regions partitioned into substructures. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 23 </volume> <pages> 1097-1120, </pages> <year> 1986. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [7] <author> G. E. Blelloch, A. Feldmann, O. Ghattas, J. R. Gilbert, G. L. Miller, D. R. O'Hallaron, E. J. Schwabe, J. R. Shewchuk and S.-H. Teng. </author> <title> Automated parallel solution of unstructured PDE problems. </title> <journal> CACM, </journal> <note> accepted and to appear 1995. </note>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection. <p> Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18]. <p> So the ratio of computations to communication in processing well-shaped meshes is reasonably balanced as p and especially n increase, demonstrating that the partitioning based parallel algorithms are scalable. The results of Section 5 gives a theoretical justification to the recursive approach taken in <ref> [7, 13, 24, 31] </ref> and many similar heuristics currently implemented. We expect to see these ideas be extended for better, perhaps more global schemes, for approximating p-way partitioning. Acknowledgments We would like to thank David Bailey and Jim Ruppert for their careful proof-reading of the draft and helpful comments.
Reference: [8] <author> P. K. Chan, M. Schlag, and J. Zien. </author> <title> Spectral k-Way Ratio Cut Partitioning and Clustering. </title> <booktitle> Proceedings of Symposium on Integrated Systems Seattle, </booktitle> <address> WA, </address> <year> 1993. </year>
Reference-contexts: It first divides a graph into two equal sized pieces, by a "good" bisection algorithm, and then recursively divides the two pieces. When p is not a power of 2, simple variants of recursive bisection are used <ref> [8] </ref>. Ideally, we would like to use an optimal bisection algorithm in recursive bisection.
Reference: [9] <author> L. P. Chew. </author> <title> Guaranteed quality triangular meshes, </title> <institution> Department of Computer Science, Cornell University TR 89-893, </institution> <year> 1989. </year>
Reference-contexts: On the optimistic side, our negative result is complemented by two positive results. First, we show that for some important classes of graphs that occur in practical applications such as well shaped finite-element and finite-difference meshes <ref> [4, 9, 24, 25, 28] </ref>, recursive bisection is within a constant factor of the optimal one in the expected case.
Reference: [10] <author> P. Erdos, R. L. Graham, and E. Szemeredi. </author> <title> On sparse graphs with dense long paths. </title> <journal> Comp. and Math. with Appl. </journal> <volume> 1: </volume> <pages> 365-369, </pages> <year> 1975. </year>
Reference-contexts: One way to construct an expander is to choose a random bounded degree graph. It follows from a result of Erdos, Graham, Szemeredi <ref> [10] </ref> that all ffi-edge-separators of almost all such linear sized graphs have cost (n). The optimal 4-way partition divides the graph into A i [ B i , 1 i 4. The total cut size is 12.
Reference: [11] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: a guide to the theory of NP-completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Notice that the height of the partition tree is log p. If we use an optimal bisection function, the resulting recursive bisection is called an Ideal Recursive Bisection. However, notice that the problem of finding an optimal bisection itself is NP-hard <ref> [11] </ref>. The Recursive Bisection Scheme given above is a template of practical implementations where we use the best available bisection algorithm. Our results can be extended to the case when BISECTION is an approximately optimal bisection algorithm.
Reference: [12] <author> J. R. Gilbert, J. P. Hutchinson, and R. E. Tarjan. </author> <title> A separator theorem for graphs of bounded genus. </title> <journal> J. Algorithms, </journal> <volume> 5, </volume> <pages> 391-407, </pages> <year> 1984. </year>
Reference-contexts: The following are some classes of graphs that have a family of small separators and hence have a family of small bisectors as well. 6 H. D. SIMON AND S. H. TENG * Planar graphs [21] have a family of O ( p n)-separators. * Bounded genus graphs <ref> [12] </ref> have a family of O ( p gn)-separators, where g is the genus of the graphs. * Bounded minor graphs [1] have a family of O (h 1:5 p n)-separators, where h is the size of the largest minor clique. <p> The results in Section 4 is mainly observational and follows quite directly from the previous separator results <ref> [1, 12, 21, 24] </ref>. These results give an absolute upper bound on the cut-size of the p-way partition. It shows that the ratio of cut-size to the graph size is O ((p=n) 1=d ) &lt; 1.
Reference: [13] <author> J. R. Gilbert, G. L. Miller, and S.-H. Teng. </author> <title> Geometric mesh partitioning: implementation and experiments. </title> <note> In IPPS, to appear, </note> <year> 1995. </year>
Reference-contexts: Theorem 4.3. Ideal Recursive Bisection has worst case approximation ratio of fi ( n=p) for planar graphs and fi ((n=p) 11=d ) for well-shaped meshes in d dimensions. 5. Approximately Balanced p-Way Partition. We observe that even though we use general edge separators (not necessarily bisection, <ref> [13, 21, 24] </ref>) or use minimum quotient separator of [19] at each level of a recursive partitioning scheme, we still can not guarantee the approximation ratio as long as the final partition is required to be a (perfectly balanced) p-way partition. All of the results in the previous sections generalize. <p> So the ratio of computations to communication in processing well-shaped meshes is reasonably balanced as p and especially n increase, demonstrating that the partitioning based parallel algorithms are scalable. The results of Section 5 gives a theoretical justification to the recursive approach taken in <ref> [7, 13, 24, 31] </ref> and many similar heuristics currently implemented. We expect to see these ideas be extended for better, perhaps more global schemes, for approximating p-way partitioning. Acknowledgments We would like to thank David Bailey and Jim Ruppert for their careful proof-reading of the draft and helpful comments.
Reference: [14] <author> J. R. Gilbert and R. E. Tarjan. </author> <title> The analysis of a nested dissection algorithm. </title> <journal> Numerische Mathematik, </journal> <volume> 50(4) </volume> <pages> 377-404, </pages> <year> 1987. </year> <title> 10 H. </title> <editor> D. SIMON AND S. H. </editor> <publisher> TENG </publisher>
Reference-contexts: Lipton and Tarjan [21] and Gilbert <ref> [14] </ref> showed that if a graph has a family of f -separators, then it has a family of O (f)-bisectors. The following are some classes of graphs that have a family of small separators and hence have a family of small bisectors as well. 6 H. D. SIMON AND S.
Reference: [15] <author> J. A. George. </author> <title> Nested dissection of a regular finite element mesh. </title> <journal> SIAM J. Numerical Analysis, </journal> <volume> 10: </volume> <pages> 345-363, </pages> <year> 1973. </year>
Reference: [16] <author> J. A. George and J. W. H. Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [17] <author> S. Hammond and R. Schreiber. </author> <title> Solving unstructured grid problems on massively parallel computers. </title> <type> Technical Report TR 90.22, </type> <institution> RIACS, </institution> <year> 1990. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [18] <author> B. Hendrickson and R. Leland. </author> <title> An improved spectral graph partitioning algorithm for mapping parallel computations. </title> <journal> SIAM J. Scientific Computing 16(2), </journal> <pages> 452-469, </pages> <year> 1995. </year>
Reference-contexts: Most such heuristics are designed to find the best possible bisection within allowed time [2, 3, 7, 24, 29, 32]. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection <ref> [18] </ref>. The published experimental results of Hendrickson and Leland [18] seems to indicate that, in the context of spectral partitioning, quadsectioning and octsectioning, though more expensive than bisecting, give the recursive scheme better quality. <p> Most such heuristics are designed to find the best possible bisection within allowed time [2, 3, 7, 24, 29, 32]. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection <ref> [18] </ref>. The published experimental results of Hendrickson and Leland [18] seems to indicate that, in the context of spectral partitioning, quadsectioning and octsectioning, though more expensive than bisecting, give the recursive scheme better quality. Little is known, however, about how good fl NERSC Division Lawrence Berkeley National Laboratory, Mail Stop 50B, 4230 University of California Berkeley, CA 94720. <p> In practice, we can use the best available approximate bisection algorithms, such as the spectral algorithm <ref> [18, 29] </ref> and the geometric algorithm [24]. We can use Theorem 5.3 to justify their performance. Theoretically, we can apply Theorem 5.3 in conjunctions with the following result of Leighton and Rao [19] to obtain the first provably good approximately balanced p-way partition algorithm. Theorem 5.4 (Leighton and Rao).
Reference: [19] <author> F. T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multi-commodity flow problems with applications to approximation algorithms. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp 422-431, </pages> <year> 1988. </year>
Reference-contexts: Approximately Balanced p-Way Partition. We observe that even though we use general edge separators (not necessarily bisection, [13, 21, 24]) or use minimum quotient separator of <ref> [19] </ref> at each level of a recursive partitioning scheme, we still can not guarantee the approximation ratio as long as the final partition is required to be a (perfectly balanced) p-way partition. All of the results in the previous sections generalize. <p> In practice, we can use the best available approximate bisection algorithms, such as the spectral algorithm [18, 29] and the geometric algorithm [24]. We can use Theorem 5.3 to justify their performance. Theoretically, we can apply Theorem 5.3 in conjunctions with the following result of Leighton and Rao <ref> [19] </ref> to obtain the first provably good approximately balanced p-way partition algorithm. Theorem 5.4 (Leighton and Rao). Let ffi 0 and ffi be two constants such that 1=2 &lt; ffi 0 &lt; ffi &lt; 1.
Reference: [20] <author> C. E. Leiserson. </author> <title> Area Efficient VLSI Computation. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1983. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [21] <author> R. J. Lipton and R. E. Tarjan. </author> <title> A separator theorem for planar graphs. </title> <journal> SIAM J. of Appl. Math., </journal> <volume> 36 </volume> <pages> 177-189, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: Lipton and Tarjan <ref> [21] </ref> and Gilbert [14] showed that if a graph has a family of f -separators, then it has a family of O (f)-bisectors. The following are some classes of graphs that have a family of small separators and hence have a family of small bisectors as well. 6 H. D. <p> The following are some classes of graphs that have a family of small separators and hence have a family of small bisectors as well. 6 H. D. SIMON AND S. H. TENG * Planar graphs <ref> [21] </ref> have a family of O ( p n)-separators. * Bounded genus graphs [12] have a family of O ( p gn)-separators, where g is the genus of the graphs. * Bounded minor graphs [1] have a family of O (h 1:5 p n)-separators, where h is the size of the <p> Theorem 4.3. Ideal Recursive Bisection has worst case approximation ratio of fi ( n=p) for planar graphs and fi ((n=p) 11=d ) for well-shaped meshes in d dimensions. 5. Approximately Balanced p-Way Partition. We observe that even though we use general edge separators (not necessarily bisection, <ref> [13, 21, 24] </ref>) or use minimum quotient separator of [19] at each level of a recursive partitioning scheme, we still can not guarantee the approximation ratio as long as the final partition is required to be a (perfectly balanced) p-way partition. All of the results in the previous sections generalize. <p> The results in Section 4 is mainly observational and follows quite directly from the previous separator results <ref> [1, 12, 21, 24] </ref>. These results give an absolute upper bound on the cut-size of the p-way partition. It shows that the ratio of cut-size to the graph size is O ((p=n) 1=d ) &lt; 1.
Reference: [22] <author> R. J. Lipton, D. J. Rose, and R. E. Tarjan. </author> <title> Generalized nested dissection. </title> <journal> SIAM J. on Numerical Analysis, </journal> <volume> 16 </volume> <pages> 346-358, </pages> <year> 1979. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection.
Reference: [23] <author> J. W. H. Liu. </author> <title> The solution of mesh equations on a parallel computer. </title> <booktitle> in 2nd Langley Conference on Scientific Computing, </booktitle> <year> 1974. </year>
Reference: [24] <author> G.L. Miller, S.-H. Teng, W. Thurston, and S.A. Vavasis. </author> <title> Automatic Mesh Partitioning. </title> <editor> In A. George, J. Gilbert, and J. Liu, editors, </editor> <title> Sparse Matrix Computations: Graph Theory Issues and Algorithms, IMA Volumes in Mathematics and its Applications. </title> <publisher> Springer-Verlag, </publisher> <address> pp57-84, </address> <year> 1993. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection. <p> Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18]. <p> In other words, optimal recursive bisection may not lead to a good p-way partition. Our results hold even for sparse graphs and more structured graphs such as planar graphs and geometric graphs <ref> [24] </ref>. On the optimistic side, our negative result is complemented by two positive results. <p> On the optimistic side, our negative result is complemented by two positive results. First, we show that for some important classes of graphs that occur in practical applications such as well shaped finite-element and finite-difference meshes <ref> [4, 9, 24, 25, 28] </ref>, recursive bisection is within a constant factor of the optimal one in the expected case. <p> In particular, it follows from a result of Miller, Teng, Thurston, and Vavasis <ref> [24] </ref> that recursive bisection finds a p-way partition of cost O (p 1=d n 11=d ) for well shaped meshes embedded in d dimensions. <p> Since the cost of the optimal p-way partition has cost k, the approximation ratio is again O (n=p). 2 4. Graphs with a Family of Small Edge Bisectors. Many graphs from practical applications have a family of small separators <ref> [24] </ref>, i.e., they have the property that each of its subgraphs has a bisector of size sublinear in the number of vertices of the subgraph. <p> A minor of a graph is a subgraph obtained from the original graph by contracting edges. For example, no planar graph has a minor isomorphic to a 5-clique. * Well-shaped meshes <ref> [24] </ref> have a family of O (n 11=d )-separators, where d is the dimension of the space in which the meshes are embedded. * k-nearest neighborhood graphs [24] have a family of O (k 1=d n 11=d )- separators. The following lemma follows directly from Lemma 4.1, Lemma 4.2. <p> For example, no planar graph has a minor isomorphic to a 5-clique. * Well-shaped meshes <ref> [24] </ref> have a family of O (n 11=d )-separators, where d is the dimension of the space in which the meshes are embedded. * k-nearest neighborhood graphs [24] have a family of O (k 1=d n 11=d )- separators. The following lemma follows directly from Lemma 4.1, Lemma 4.2. If f (n) = n 11=d , then RB finds a p-way partition of cost O (p 1=d n 11=d ). Proof. <p> Theorem 4.3. Ideal Recursive Bisection has worst case approximation ratio of fi ( n=p) for planar graphs and fi ((n=p) 11=d ) for well-shaped meshes in d dimensions. 5. Approximately Balanced p-Way Partition. We observe that even though we use general edge separators (not necessarily bisection, <ref> [13, 21, 24] </ref>) or use minimum quotient separator of [19] at each level of a recursive partitioning scheme, we still can not guarantee the approximation ratio as long as the final partition is required to be a (perfectly balanced) p-way partition. All of the results in the previous sections generalize. <p> In practice, we can use the best available approximate bisection algorithms, such as the spectral algorithm [18, 29] and the geometric algorithm <ref> [24] </ref>. We can use Theorem 5.3 to justify their performance. Theoretically, we can apply Theorem 5.3 in conjunctions with the following result of Leighton and Rao [19] to obtain the first provably good approximately balanced p-way partition algorithm. Theorem 5.4 (Leighton and Rao). <p> The results in Section 4 is mainly observational and follows quite directly from the previous separator results <ref> [1, 12, 21, 24] </ref>. These results give an absolute upper bound on the cut-size of the p-way partition. It shows that the ratio of cut-size to the graph size is O ((p=n) 1=d ) &lt; 1. <p> So the ratio of computations to communication in processing well-shaped meshes is reasonably balanced as p and especially n increase, demonstrating that the partitioning based parallel algorithms are scalable. The results of Section 5 gives a theoretical justification to the recursive approach taken in <ref> [7, 13, 24, 31] </ref> and many similar heuristics currently implemented. We expect to see these ideas be extended for better, perhaps more global schemes, for approximating p-way partitioning. Acknowledgments We would like to thank David Bailey and Jim Ruppert for their careful proof-reading of the draft and helpful comments.
Reference: [25] <author> S. A. Mitchell and S. A. Vavasis. </author> <title> Quality mesh generation in three dimensions. </title> <booktitle> Proc. ACM Symposium on Computational Geometry, </booktitle> <pages> pp 212-221, </pages> <year> 1992. </year>
Reference-contexts: On the optimistic side, our negative result is complemented by two positive results. First, we show that for some important classes of graphs that occur in practical applications such as well shaped finite-element and finite-difference meshes <ref> [4, 9, 24, 25, 28] </ref>, recursive bisection is within a constant factor of the optimal one in the expected case.
Reference: [26] <author> V. Pan and J. Reif. </author> <title> Efficient parallel solution of linear systems. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 143-152, </pages> <month> May </month> <year> 1985. </year>
Reference: [27] <author> A. Pothen, H. D. Simon, K.-P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Matrix Anal. Appl. </journal> <volume> 11 (3), </volume> <pages> pp 430-452, </pages> <month> July, </month> <year> 1990. </year>
Reference: [28] <author> J. Ruppert. </author> <title> Results on Triangulation and High Quality Mesh Generation. </title> <type> Ph.D. Thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1992. </year>
Reference-contexts: On the optimistic side, our negative result is complemented by two positive results. First, we show that for some important classes of graphs that occur in practical applications such as well shaped finite-element and finite-difference meshes <ref> [4, 9, 24, 25, 28] </ref>, recursive bisection is within a constant factor of the optimal one in the expected case.
Reference: [29] <author> H. D. Simon. </author> <title> Partitioning of unstructured problems for parallel processing. </title> <booktitle> Computing Systems in Engineering 2:(2/3), </booktitle> <address> pp135-148, </address> <year> 1991. </year>
Reference-contexts: For a variety of applications, such as parallel scientific processing, VLSI layout, circuit testing and simulation, sparse linear system solving, we need to partition the vertices of a graph into a given number of subsets such that the total number of edges whose endpoints are in different subsets is small <ref> [2, 5, 6, 7, 16, 17, 20, 22, 24, 29] </ref>. If p subsets are required, the problem is called the graph p-way partition problem. The most commonly used method for p-way partitioning, when p is a power of 2, is recursive bisection. <p> Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18]. <p> In practice, we can use the best available approximate bisection algorithms, such as the spectral algorithm <ref> [18, 29] </ref> and the geometric algorithm [24]. We can use Theorem 5.3 to justify their performance. Theoretically, we can apply Theorem 5.3 in conjunctions with the following result of Leighton and Rao [19] to obtain the first provably good approximately balanced p-way partition algorithm. Theorem 5.4 (Leighton and Rao).
Reference: [30] <author> G. Strang and G. J. Fix. </author> <title> An Analysis of the Finite Element Method, </title> <publisher> Prentice-Hall, </publisher> <year> 1973. </year>
Reference: [31] <author> S.-H. Teng. </author> <title> Points, Spheres, and Separators: A Unified Geometric Approach to Graph Partitioning. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, </institution> <year> 1991. </year> <month> CMU-CS-91-184. </month>
Reference-contexts: We distinguish two classes of graphs: dense graphs and sparse graphs. A dense graph may have O (n 2 )-edges and while a sparse graph has only O (n) edges. We can further restrict that each vertex in a sparse graph has a bounded degree. As shown in <ref> [31] </ref>, all well shaped finite-element meshes in three dimensions are sparse. A p-way partition algorithm has approximation ratio ff, where ff 1, if for each graph G, it finds a p-way partition of cost at most ff times the cost of an optimal p-way partition. 3. <p> Proof. The cost of the p-way partition constructed by RB is bounded from above by i = n 11=d ( i=1 = O (p 1=d n 11=d ) Most well-shaped meshes (in d-dimensions) in practical applications have no p-way partition of size o (p 1=d n 11=d ) <ref> [31] </ref>. For example, a d dimensional regular grid has no p-way partition of size o (p 1=d n 11=d ). So the p-way partition of RB is optimal (up to a constant factor). <p> So the ratio of computations to communication in processing well-shaped meshes is reasonably balanced as p and especially n increase, demonstrating that the partitioning based parallel algorithms are scalable. The results of Section 5 gives a theoretical justification to the recursive approach taken in <ref> [7, 13, 24, 31] </ref> and many similar heuristics currently implemented. We expect to see these ideas be extended for better, perhaps more global schemes, for approximating p-way partitioning. Acknowledgments We would like to thank David Bailey and Jim Ruppert for their careful proof-reading of the draft and helpful comments.
Reference: [32] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency, </journal> <note> 3 (1991) 457, also available from the World Wide Web at http://www.ccsf.caltech.edu/ roy/papers/annealing.ps.Z </note>
Reference-contexts: Most such heuristics are designed to find the best possible bisection within allowed time <ref> [2, 3, 7, 24, 29, 32] </ref>. Some extended heuristics have been proposed that apply quadsection or octsection in place of bisection [18].
References-found: 32

