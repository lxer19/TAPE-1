URL: ftp://garovix.ijs.si/pub/papers/bz/tkde97.ps.gz
Refering-URL: http://www-ai.ijs.si/BlazZupan/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Optimization of Rule-Based Systems Using State Space Graphs  
Author: Blaz Zupan, Student Member, IEEE, Albert Mo Kim Cheng, Senior Member, IEEE 
Keyword: computer-aided software engineering, real-time decision systems, response time, rule-based programs, optimization, state-space graphs, synthesis  
Date: 1997 1  
Note: IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, VOL. XX, NO. YY, MONTH  
Abstract: Embedded rule-based expert systems must satisfy stringent timing constraints when applied to real-time environments. The paper describes a novel approach to reduce the response time of rule-based expert systems. Our optimization method is based on a construction of the reduced cycle-free finite state space graph corresponding to the input rule-based system. In contrast with traditional state space graph generation algorithms, the optimization algorithm derives a state space graph starting from the final states (fixed points) and gradually expands the state space graph until all of the states with a reachable fixed point are found. The new and optimized system is synthesized from the derived transition system with a synthesis method. We present several algorithms implementing the optimization method. They vary in complexity as well as in the usage of concurrency and state-equivalency, both targeted to minimizing the size of the optimized state space graph. Though depending on the algorithm used, the optimized rule based systems (1) have in general better response time in that it requires a fewer number of rule firings to reach the fixed point, (2) are stable, i.e., have no cycles that would result in the instability of execution, and (3) have no redundant rules. We also address the issue of deterministic execution and propose optimization algorithms that generate the rule-bases with single corresponding fixed points for every initial state. The synthesis method also determines the tight response time bound of the new system and can identify unstable states in the original rule-base. No information other than the rule-based real-time decision program itself is given to the optimization method. The optimized system is guaranteed to compute correct results independent of the scheduling strategy and execution environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and E. Simon, </author> <title> "Fundamental properties of deterministic and nondeterministic extensions of Datalog," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 78, </volume> <pages> pp. 137-158, </pages> <year> 1991. </year>
Reference: [2] <author> A. Aiken, J. Widom, and J. M. Hellerstein, </author> <title> "Behavior of database production rules: termination, confluence and observable determinism," </title> <booktitle> in Proc. 1992 ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <address> San Diego, California, </address> <month> June </month> <year> 1992, </year> <pages> pp. 59-68. </pages>
Reference: [3] <editor> J. C. Browne et al., </editor> <title> "A new approach to modularity in rule-based programming," </title> <booktitle> in Proc. 6th Int'l Conf. on Tools With Artificial Intelligence, </booktitle> <address> TAI'94, </address> <month> Nov. </month> <year> 1994, </year> <pages> pp. 18-25. </pages>
Reference: [4] <author> J. C. Browne, A. M. K. Cheng, and A. K. Mok, </author> <title> "Computer-aided design of real-time rule-based decision systems," </title> <type> Tech. Rep., </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <year> 1988, </year> <note> Also to appear in IEEE Transactions on Software Engineering. </note>
Reference-contexts: To clearly state the difference between original and optimized program, a precise upper bound of the number of rules to fire to reach a fixed point is required. For this purpose, we have built a system like the one described in [17], <ref> [4] </ref> that takes an EQL program, converts it to a C language routine, and then uses it to build an exact state space graph.
Reference: [5] <author> J.-R. Chen and A. M. K. Cheng, </author> <title> "Response time analysis of EQL real-time rule-based systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 26-43, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: yes yes yes exploits rule firing concurrency no no yes yes removes cycles and unstable states yes yes yes yes stabilizes pot. unstable states yes yes yes yes minimizes number of rules to fire yes yes no yes generates deterministic transition system yes yes no yes of EQL (see [8], <ref> [5] </ref>, [7]) were then re-implemented to be used for MRL [21].
Reference: [6] <author> J.-R. Chen and A. M. K. Cheng, </author> <title> "Predicting the response time of OPS5-style production systems," </title> <booktitle> in Proc. IEEE Conf. on Artificial Intelligence for Applications, </booktitle> <address> Los Angeles, CA, </address> <month> Feb. </month> <year> 1995. </year>
Reference: [7] <author> A. M. K. Cheng, </author> <title> "Parallel execution of real-time rule-based systems," </title> <booktitle> in Proc. IEEE Int. Parallel Processing Symposium, </booktitle> <address> Newport Beach, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 779-789. </pages>
Reference-contexts: The section concludes with the algorithm that uses the generated state space graph to synthesize the optimized EQL (B) program. A. Decomposition of an EQL (B) Program We use a decomposition algorithm for EQL as given in <ref> [7] </ref> and modify it for the EQL (B) case. The algorithm is based on the notion of rule independency. <p> For each vertex the corresponding rules are fired until a fixed point is reached. If the EQL program is guaranteed to reach the fixed point from every launch state, the above rule schedule will guarantee the program will reach a fixed point as well <ref> [7] </ref>. If the optimization technique maintains the assertion about fixed-point reachability for every independent rule-set, each rule-set can be optimized independently. The above decomposition method was evaluated in [7] and the results encourage us to use it to substantially reduce the complexity of the optimization process. B. <p> the fixed point from every launch state, the above rule schedule will guarantee the program will reach a fixed point as well <ref> [7] </ref>. If the optimization technique maintains the assertion about fixed-point reachability for every independent rule-set, each rule-set can be optimized independently. The above decomposition method was evaluated in [7] and the results encourage us to use it to substantially reduce the complexity of the optimization process. B. Derivation of an Optimized State Space Graph The core of EQL (B) optimization is a construction of a corresponding state space graph. <p> Bottom-up generation of an optimized transition system with generation of equivalent states and multiple rule transitions. notion of intra-rule-set parallelism <ref> [7] </ref> and from the idea of utilizing the concurrency for preventing the state explosion [12]. In contrast with the BU and ES algorithms, we will allow transitions to be labeled with a set of rules R rather than with a single rule r. <p> M1 follows the idea of intra-rule set parallelism <ref> [7] </ref>. Rule r i potentially disables r j if there exists a state where both rules are enabled and firing r i results in a state where r j is disabled. <p> III-D) to be used to find fixed points. New constraints that would handle rules with non-constant assignments for decomposition and parallel rule firing could then be adopted from existing ones used for analysis and paral-lelization of such rule-bases as described in [8], <ref> [7] </ref>. Several restrictions were imposed that influenced the generation of state space graphs and defined which state may be merged in a single vertex and thus reduce the number of vertices in state space graphs. Through experimental evaluation (Sec. <p> yes yes exploits rule firing concurrency no no yes yes removes cycles and unstable states yes yes yes yes stabilizes pot. unstable states yes yes yes yes minimizes number of rules to fire yes yes no yes generates deterministic transition system yes yes no yes of EQL (see [8], [5], <ref> [7] </ref>) were then re-implemented to be used for MRL [21].
Reference: [8] <author> A. M. K. Cheng, J. C. Browne, A. K. Mok, and R.-H. Wang, </author> <title> "Analysis of real-time rule-based system with behavioral constraint assertions specified in Estella," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 9, </volume> <pages> pp. 863-885, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Such analysis tools should derive the number of rules to be fired to reach a fixed point for both original and optimized rule-based program and should analyze the stability of the programs. For EQL rule-based programs, the Estella analysis tool <ref> [8] </ref> has the potential for estimation of both. Estella can discover potential cycles, and, when no cycles exist, Estella can estimate an upper bound of the number of rules to fire to reach a fixed point. <p> All test programs were generated so that to consist of only one independent rule set. Additional constraints were imposed for the programs to meet one of the special form requirements and therefore to be acceptable for analysis with the Estella tool <ref> [8] </ref>. Both Estella and the exact state space graph based analysis tools described above were then used to estimate (Estella) or to derive the precise (state space graph analysis) upper bound of the number of rules to fire for the unoptimized and optimized programs. <p> This real-time expert system, originally written by Mitre in OPS5, identifies the faulty components in the planned NASA Space Station. Its EQL equivalent is described in <ref> [8] </ref> and for the purpose of this paper we have converted it to an EQL (B) program that consists of 35 rules and 46 variables. In the first optimization step ISA is decomposed into 17 independent rule sets. <p> IDs of rules in a subset #vars ISA1 #3, #6, #18, #34, #35 40 ISA3 #9, #17 6 For rule set ISA1, Estella analysis tool identifies a possible cycle involving rules #34, #10, and #18 (see <ref> [8] </ref> for the similar analysis which discovered a potential cycle in ISA) For ISA2 and ISA3, Estella estimated the upper bound of rule firings to reach a fixed point to be 2. Rules in ISA4 do not meet Estella's constraints and could not be further analyzed with Estella. <p> III-D) to be used to find fixed points. New constraints that would handle rules with non-constant assignments for decomposition and parallel rule firing could then be adopted from existing ones used for analysis and paral-lelization of such rule-bases as described in <ref> [8] </ref>, [7]. Several restrictions were imposed that influenced the generation of state space graphs and defined which state may be merged in a single vertex and thus reduce the number of vertices in state space graphs. Through experimental evaluation (Sec. <p> no yes yes yes exploits rule firing concurrency no no yes yes removes cycles and unstable states yes yes yes yes stabilizes pot. unstable states yes yes yes yes minimizes number of rules to fire yes yes no yes generates deterministic transition system yes yes no yes of EQL (see <ref> [8] </ref>, [5], [7]) were then re-implemented to be used for MRL [21].
Reference: [9] <author> A. M. K. Cheng and H. Tsai, </author> <title> "Timing analysis of OPS5 expert system," </title> <journal> IEEE Transactions on Software Engineering, </journal> <note> to appear in 1997. </note>
Reference-contexts: Furthermore, the analysis tools that originated from those of EQL and consequently from those of MRL were recently developed for OPS5 as well <ref> [9] </ref>.
Reference: [10] <author> L. B. Eliot, </author> <title> "If it works, is it good?," </title> <journal> AI Expert, </journal> <volume> vol. 7, no. 6, </volume> <pages> pp. 9-11, </pages> <month> June </month> <year> 1992. </year>
Reference: [11] <author> C. L. Forgy, </author> <title> "OPS5 user's manual," </title> <type> Tech. Rep. </type> <institution> CMU-CS-81-135, Carnegie-Mellon University, Department of Computer Science, </institution> <year> 1981. </year>
Reference: [12] <author> P. Godefroid, G. J. Holzmann, and D. Pirottin, </author> <title> "State space caching revisited," </title> <booktitle> in Proc. 4th Workshop on Computer Aided Verification, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1992, </year> <pages> pp. 178-191. </pages>
Reference-contexts: Bottom-up generation of an optimized transition system with generation of equivalent states and multiple rule transitions. notion of intra-rule-set parallelism [7] and from the idea of utilizing the concurrency for preventing the state explosion <ref> [12] </ref>. In contrast with the BU and ES algorithms, we will allow transitions to be labeled with a set of rules R rather than with a single rule r.
Reference: [13] <author> G. J. Holzmann, </author> <title> Design and validation of computer protocols, </title> <booktitle> chapter Protocol validation, </booktitle> <pages> pp. 217-244, </pages> <publisher> Prentice Hall, </publisher> <address> London, UK, </address> <year> 1991. </year>
Reference: [14] <author> T. Ishida, </author> <title> "An optimization algorithm for production systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 6, no. 4, </volume> <pages> pp. 549-558, </pages> <month> Aug. </month> <year> 1994. </year>
Reference: [15] <author> S. Kuo and D. Moldovan, </author> <title> "Implementation of multiple rule firing production system on hypercube," </title> <journal> J. Parallel and Distr. Computing, </journal> <volume> vol. 13(4), </volume> <pages> pp. 383-394, </pages> <month> Dec. </month> <year> 1991. </year>
Reference: [16] <author> C. A. Marsh, </author> <title> "The ISA expert system: A prototype system for failure diagnosis on the space station," </title> <type> MITRE report, </type> <institution> The MITRE Corporation, Houston, Texas, </institution> <year> 1988. </year>
Reference-contexts: C. Optimization of the Integrated Status Assessment Ex pert System (ISA) To demonstrate the applicability of the proposed optimization techniques, we used it to optimize the Integrated Status Assessment Expert System (ISA) <ref> [16] </ref>. This real-time expert system, originally written by Mitre in OPS5, identifies the faulty components in the planned NASA Space Station.
Reference: [17] <author> A. K. Mok, </author> <title> "Formal analysis of real-time equational rule-based systems," </title> <booktitle> in Proc. 10th Real-Time Systems Symposium (RTSS), </booktitle> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: The interested reader is referred to [23]. IV. Optimization Algorithm Our optimization method consists of two main steps: construction of an optimized finite state space graph and synthesis of a new EQL rule-based expert system from it. The potentially exponential complexity of these two phases <ref> [17] </ref> is reduced by optimizing only one independent rule-set at a time. The optimization schema is depicted in Fig. 5. <p> To clearly state the difference between original and optimized program, a precise upper bound of the number of rules to fire to reach a fixed point is required. For this purpose, we have built a system like the one described in <ref> [17] </ref>, [4] that takes an EQL program, converts it to a C language routine, and then uses it to build an exact state space graph.
Reference: [18] <author> A. J. Pasik, </author> <title> "A source-to-source transformation fro increasing rule-based system parallelism," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 4, no. 4, </volume> <pages> pp. 336-343, </pages> <month> Aug. </month> <year> 1992. </year>
Reference: [19] <author> A. A. Valmari and T. M. Jokela, </author> <title> "Embedded software validation through state space generation," </title> <booktitle> in Proc. 2nd Int'l Conf. on Software Engineering for Real-Time Systems, </booktitle> <address> Cirencester, England, </address> <year> 1989, </year> <pages> pp. 278-282. </pages>
Reference: [20] <author> C.-K. Wang, </author> <title> "Translation between OPS5 and MRL rule-based programs," </title> <type> Tech. Rep., </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: It was shown that the expressive power of MRL and a popular production language OPS5 is the same, and to enable the use of response-time analysis tools for OPS5, translation methods from OPS5 to MRL and vice versa were proposed <ref> [20] </ref>. Furthermore, the analysis tools that originated from those of EQL and consequently from those of MRL were recently developed for OPS5 as well [9].
Reference: [21] <author> C.-K. Wang and A. K. Mok, </author> <title> "Timing analysis of MRL: a real-time rule-based system," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 5, no. 1, </volume> <pages> pp. 89-128, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: yes removes cycles and unstable states yes yes yes yes stabilizes pot. unstable states yes yes yes yes minimizes number of rules to fire yes yes no yes generates deterministic transition system yes yes no yes of EQL (see [8], [5], [7]) were then re-implemented to be used for MRL <ref> [21] </ref>. It was shown that the expressive power of MRL and a popular production language OPS5 is the same, and to enable the use of response-time analysis tools for OPS5, translation methods from OPS5 to MRL and vice versa were proposed [20].
Reference: [22] <author> C.-K. Wang, A. K. Mok, and A. M. K. Cheng, </author> <title> "MRL areal-time rule-based production system," </title> <booktitle> in Proc. IEEE Real-Time Systems Symposium, </booktitle> <address> Lake Buena Vista, Florida, </address> <month> Dec. </month> <year> 1990, </year> <pages> pp. 267-276. </pages>
Reference-contexts: EQL's simplicity is due to its use of zero-order logic. To increase the expressive power of such production language, a similar, fixed point interpretable, Macro Rule-based MRL language <ref> [22] </ref> that uses first-order logic was derived from EQL.

References-found: 22

