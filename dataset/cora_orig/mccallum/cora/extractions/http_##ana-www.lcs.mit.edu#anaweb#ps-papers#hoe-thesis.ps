URL: http://ana-www.lcs.mit.edu/anaweb/ps-papers/hoe-thesis.ps
Refering-URL: http://ana-www.lcs.mit.edu/anaweb/ps-papers/
Root-URL: 
Title: Start-up Dynamics of TCP's Congestion Control and Avoidance Schemes  
Author: by Janey C. Hoe Dr. David D. Clark 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in Partial Fulfillment of the Requirements for the Degree of Master of Science in Electrical Engineering and Computer Science at the  The author hereby grants to MIT permission to reproduce and to distribute publicly paper and electronic copies of this thesis document in whole or in part. Signature of Author  Certified by  Thesis Supervisor Accepted by Professor Frederic R. Morgenthaler Chairman, Departmental Committee on Graduate Students  
Note: c Janey C. Hoe  
Date: 1993  June, 1995  1995  May 26, 1995  
Address: Berkeley,  
Affiliation: B.S. in Electrical Engineering and Computer Science University of California at  Massachusetts Institute of Technology  Department of Electrical Engineering and Computer Science  Senior Research Scientist, Laboratory for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Braden. </author> <title> Requirements for internet hosts communication layers. Request for Comments 1122, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: We are also interested in the complexity of this seemingly simple protocol. Since the 1981 release of its specification [17], implementations of TCP have been augmented with several performance-enhancing mechanisms, such as congestion control, fast retransmission, and fast recovery <ref> [1, 11, 23] </ref>. With these mechanisms and their interactions, many will agree that the complexity of TCP has made its detailed behavior very difficult to comprehend without close scrutiny using simulations, emulations, or visualization tools.
Reference: [2] <author> R. Braden. </author> <title> T/TCP-TCP extensions for transactions functional specification. Request for Comments 1644, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: These schemes are now a essential part of the TCP implementations. We refer to these schemes in Chapter 3.2.2. Selective acknowledgments <ref> [2, 12, 13] </ref> is an extension to TCP that has been proposed. Using selective acknowledgments, the receiver of data can inform the sender about all the segments 1 that have arrived successfully, so the sender need retransmit 1 In this thesis, segments and packets have different meanings.
Reference: [3] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of the ACM SIGCOMM '94, </booktitle> <pages> pages 24-35, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: One paper that centers on such performance issues is the work of L. Brakmo, S. W. O'Malley, and L. L. Peterson on TCP Vegas <ref> [3] </ref>. The initial focus of this project was simply to reproduce the results of that paper in a simulator environment. 11 This original intent dictated the choice of the parameters and the topology used in our simulations. <p> Mogul [16] shows how to observe in "real life" some of the phenomena described in the previous work by analyzing traces of a busy segment of the Internet and how to measure their frequency and their effects on performance. Brakmo and Peterson <ref> [3] </ref> propose an alternative implementation of the TCP specification, claiming better performance. <p> We picked a smaller buffer size, 10, which may have led to more loss events. However, since this thesis is a part of the results obtained from a attempt to reproduce Figure 6 in <ref> [3] </ref>, our simulations use the same topology and parameters as the experiments conducted in that paper. Another point is that although this thesis does look at some performance issues, the focus is on TCP's start-up transient behavior, i.e. how TCP reacts when congestion emerges. <p> In this chapter, we document some interesting observations on the start-up transients of a 1-Mbyte transfer over a one-way Net/2 TCP connection simulated in the Netsim simulator [10]. Some of the phenomena have been briefly discussed in other sources <ref> [4, 3, 8, 26] </ref>. We first look at the effects of increasing congestion window by more than one segment every round-trip (an additional factor of maximum segment size 8 is added per acknowledgment) in the congestion-avoidance mode in Section 5.1. <p> For the simulations studied in the rest of this section, we eliminate the factor described in Section 5.1 and changed the code to acknowledge every packet. The choice to acknowledge every packet is based on the original effort to match the conditions of <ref> [3] </ref>. Figure 5.4 shows the entire transfer and labels the relevant events. For the discussions that follow, we examine the blowup of each relevant region. 5.3.1 Single Packet Loss fast retransmit. Segment 579 was lost. At time right before 5.43 sec, the connection starts receiving duplicate ACK's. <p> We illustrate this in Section 6.2 using the parameter round-trip delay as an example. 6.1 Why Not Pick A Larger Buffer Size? As mentioned before, since this thesis is a part of the results obtained from attempts to reproduce Figure 6 in <ref> [3] </ref>, we choose parameters to conform with those in the paper. One may argue that if more suitable parameter values were selected, multiple packet losses during one round-trip time may not have occurred, and none of the episodes mentioned would occur anyway.
Reference: [4] <author> L. S. Brakmo and L. L. Peterson. </author> <title> Performance problems in BSD4.4 TCP. </title> <note> By anonymous FTP at cs.arizona.edu. </note>
Reference-contexts: Danzig, Liu, and Yan [7] evaluate the algorithms of TCP Vegas using live emulation. Two papers point out various performance problems of some TCP implementations. First, in a paper available by ftp, Brakmo and Peterson <ref> [4] </ref> describe some problems in the BSD 4.4-Lite version of TCP and propose some fixes that may increase the throughput. Some of the problems reported lie in header prediction, retransmit timeout estimates, and acknowledgments. <p> In this chapter, we document some interesting observations on the start-up transients of a 1-Mbyte transfer over a one-way Net/2 TCP connection simulated in the Netsim simulator [10]. Some of the phenomena have been briefly discussed in other sources <ref> [4, 3, 8, 26] </ref>. We first look at the effects of increasing congestion window by more than one segment every round-trip (an additional factor of maximum segment size 8 is added per acknowledgment) in the congestion-avoidance mode in Section 5.1.
Reference: [5] <author> D. D. Clark, M. L. Lambert, and L. Zhang. NETBLT: </author> <title> A bulk data transfer protocol. Request for Comments 998, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> March </month> <year> 1987. </year>
Reference-contexts: If so, the scheme decreases the congestion window by one-eighth. Keshav's Packet-Pair rate probing technique [15] sends two back-to-back segments and determines an estimate of the available bandwidth from the delay between the ACK's. NETBLT <ref> [5, 6] </ref> is a high throughput transport protocol based on flow control by rate. The protocol uses selective acknowledgments. 17 Chapter 3 TCP: Points of Interest This chapter describes the salient aspects of the TCP protocol and of the particular BSD Net/2 implementation of TCP.
Reference: [6] <author> D. D. Clark, M. L. Lambert, and L. Zhang. NETBLT: </author> <title> A high throughput transport protocol. </title> <booktitle> In Proceedings of the ACM SIGCOMM '88, </booktitle> <pages> pages 353-359, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: If so, the scheme decreases the congestion window by one-eighth. Keshav's Packet-Pair rate probing technique [15] sends two back-to-back segments and determines an estimate of the available bandwidth from the delay between the ACK's. NETBLT <ref> [5, 6] </ref> is a high throughput transport protocol based on flow control by rate. The protocol uses selective acknowledgments. 17 Chapter 3 TCP: Points of Interest This chapter describes the salient aspects of the TCP protocol and of the particular BSD Net/2 implementation of TCP.
Reference: [7] <author> P. B. Danzig, Z. Liu, and L. Yan. </author> <title> An evaluation of TCP Vegas by live emulation. </title> <type> Technical Report 94-588, </type> <institution> USC Computer Science Department, </institution> <year> 1994. </year>
Reference-contexts: The implementation also proposes other additions such as spike suppression, more accurate RTT calculations, 15 and a new mechanism for deciding when to retransmit. Danzig, Liu, and Yan <ref> [7] </ref> evaluate the algorithms of TCP Vegas using live emulation. Two papers point out various performance problems of some TCP implementations. <p> The small crosses show changes in the value of ssthresh. 4.4 Limitations of the Simulations As indicated in <ref> [7] </ref>, simulations have their limitations, since they eliminate the "noise" and the "randomness" in real networks. So, some behavior in simulations may not be observed in real networks, and some situations in real networks may not be present in a simulator.
Reference: [8] <author> S. Floyd. </author> <title> TCP and successive fast retransmits. </title> <note> By anonymous FTP at ee.lbl.gov. </note>
Reference-contexts: First, in a paper available by ftp, Brakmo and Peterson [4] describe some problems in the BSD 4.4-Lite version of TCP and propose some fixes that may increase the throughput. Some of the problems reported lie in header prediction, retransmit timeout estimates, and acknowledgments. Second, Floyd <ref> [8] </ref> focuses on the problem of Tahoe and Reno TCP implementations that result from invoking the fast retransmit mechanism more than once in one round-trip time. This thesis provides some simulation data to corroborate similar problems in the Net/2 TCP implementation as well. <p> In this chapter, we document some interesting observations on the start-up transients of a 1-Mbyte transfer over a one-way Net/2 TCP connection simulated in the Netsim simulator [10]. Some of the phenomena have been briefly discussed in other sources <ref> [4, 3, 8, 26] </ref>. We first look at the effects of increasing congestion window by more than one segment every round-trip (an additional factor of maximum segment size 8 is added per acknowledgment) in the congestion-avoidance mode in Section 5.1. <p> Comparatively, the new mechanism is much simpler to implement, yet it offers reasonable performance improvement. The concept of a fast retransmit phase can also be used to fix the problem of false fast retransmits as pointed out by <ref> [8] </ref>.
Reference: [9] <author> S. Floyd. </author> <title> TCP and explicit congestion notification. </title> <journal> ACM Computer Communication Review, </journal> <volume> 24(5) </volume> <pages> 10-23, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Second, Floyd [8] focuses on the problem of Tahoe and Reno TCP implementations that result from invoking the fast retransmit mechanism more than once in one round-trip time. This thesis provides some simulation data to corroborate similar problems in the Net/2 TCP implementation as well. In another paper, Floyd <ref> [9] </ref> discusses the use of Explicit Congestion Notification mechanisms in the TCP/IP protocol.
Reference: [10] <author> A. Heybey. </author> <title> The network simulator. </title> <type> Technical report, </type> <institution> MIT, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: With these mechanisms and their interactions, many will agree that the complexity of TCP has made its detailed behavior very difficult to comprehend without close scrutiny using simulations, emulations, or visualization tools. Thus, the work of this thesis involves enhancing an existing network simulator, Netsim <ref> [10] </ref>, to examine one particular implementation, U. C. Berkeley's BSD Net/2 TCP. This thesis focuses on the start-up epoch, because TCP's performance (e.g. throughput, number of dropped packets, etc.) during this epoch is important. <p> In this chapter, we document some interesting observations on the start-up transients of a 1-Mbyte transfer over a one-way Net/2 TCP connection simulated in the Netsim simulator <ref> [10] </ref>. Some of the phenomena have been briefly discussed in other sources [4, 3, 8, 26].
Reference: [11] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of the ACM SIGCOMM '88, </booktitle> <pages> pages 314-329, </pages> <month> August </month> <year> 1988. </year> <month> 67 </month>
Reference-contexts: We are also interested in the complexity of this seemingly simple protocol. Since the 1981 release of its specification [17], implementations of TCP have been augmented with several performance-enhancing mechanisms, such as congestion control, fast retransmission, and fast recovery <ref> [1, 11, 23] </ref>. With these mechanisms and their interactions, many will agree that the complexity of TCP has made its detailed behavior very difficult to comprehend without close scrutiny using simulations, emulations, or visualization tools. <p> The work in Section 2.2 proposes general congestion avoidance and control schemes that have a broader scope and intent than this thesis. 2.1 Observation on TCP Dynamics Van Jacobson's important paper <ref> [11] </ref> defines his congestion avoidance and control schemes, generally known as slow start. These schemes are now a essential part of the TCP implementations. We refer to these schemes in Chapter 3.2.2. Selective acknowledgments [2, 12, 13] is an extension to TCP that has been proposed. <p> When the aggregate queuing of packets from multiple connections causes buffer overflow in the switches, packets are dropped. Based on the assumption that packet loss caused by data corruption during transit, which results in checksum test failure, is rare (much less than 1% of all the packet losses <ref> [11] </ref>), we can infer from a packet loss that a packet has been dropped at a bottleneck switch, and thus a packet loss can be used as an indication of congestion in the implementations. <p> Thus, the ACK's can be viewed as a "clock signal" to strobe new packets into the network. Thus, the protocol is "self-clocking", since the ACK's can be generated no faster than data packets can get through the network. A more detailed discussion on this is in <ref> [11] </ref>. Ideally, this mechanism can be exploited for congestion avoidance. Data packets arrive at the receiver no faster than the rate of the bottleneck link bandwidth. <p> In any case, ACK-compression is not a significant factor within the scope of this thesis. We raise this issue for completeness, but we will not offer further detailed discussions. The self-clocking mechanism is at the center of Jacobson's idea of "conservation of packets" <ref> [11] </ref>. A connection is said to be in equilibrium if it is running stably with a full window of data in transit. So, a connection in equilibrium is "conservative" if a new packet isn't put into the network until an old packet leaves. <p> A variable, smoothed round-trip time (SRTT), keeps track of an approximation of the average of all the round-trip times measured so far, and another variable, retransmission timeout (RTO), is constantly updated based on the RTT and its variance. The details of these calculations can be found in <ref> [11] </ref> and the code. The retransmit timer is set to the current RTO, and decremented every 500ms. When an ACK is received, the retransmit timer is restarted with the latest, dynamically calculated RTO. <p> The schemes are generally known as slow start. More details and intuition on this topic are in <ref> [11, 26] </ref>. Using these schemes, a sender is in one of two modes: slow start or congestion avoidance. The two modes differ primarily in that the sending rate of data flow increases more aggressively in the former mode than in the latter. <p> From the effects observed, results, and we plan to improve on the method to obtain this estimate we realize the complexity of the interactions between the different mechanisms in TCP. We also observe the importance of the "conservation of packets" in the network <ref> [11] </ref> from all the subtle effects observed. Ultimately, we need to keep the pipeline moving, since only by sending packets, can ACK's be triggered, and only ACK's in turn can trigger more packets to be sent.
Reference: [12] <author> V. Jacobson and R. Braden. </author> <title> TCP extensions for long-delay paths. Request for Comments 1072, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: These schemes are now a essential part of the TCP implementations. We refer to these schemes in Chapter 3.2.2. Selective acknowledgments <ref> [2, 12, 13] </ref> is an extension to TCP that has been proposed. Using selective acknowledgments, the receiver of data can inform the sender about all the segments 1 that have arrived successfully, so the sender need retransmit 1 In this thesis, segments and packets have different meanings.
Reference: [13] <author> V. Jacobson, R. Braden, and D. </author> <title> Borman. Tcp extensions for high performance. Request for Comments 1323, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: These schemes are now a essential part of the TCP implementations. We refer to these schemes in Chapter 3.2.2. Selective acknowledgments <ref> [2, 12, 13] </ref> is an extension to TCP that has been proposed. Using selective acknowledgments, the receiver of data can inform the sender about all the segments 1 that have arrived successfully, so the sender need retransmit 1 In this thesis, segments and packets have different meanings.
Reference: [14] <author> R. Jain. </author> <title> A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. </title> <booktitle> In Proceedings of the ACM SIGCOMM '88, </booktitle> <pages> pages 56-71, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: When the receiver detects that the bit is set, it advertises a smaller window to the sender, even though it may have ample storage space. 16 Jain's CARD (Congestion Avoidance using Round-trip Delay) <ref> [14] </ref> approach is based on an analytical derivation of a socially optimum window size for a deterministic network. The window size is adjusted once every two round-trip delays (RTT).
Reference: [15] <author> S. Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of the ACM SIGCOMM '91, </booktitle> <pages> pages 3-15, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Wang and Crowcroft's DUAL algorithm [25] checks to see if the current RTT is greater than the average of the minimum and maximum RTT's seen so far every two round trip delays. If so, the scheme decreases the congestion window by one-eighth. Keshav's Packet-Pair rate probing technique <ref> [15] </ref> sends two back-to-back segments and determines an estimate of the available bandwidth from the delay between the ACK's. NETBLT [5, 6] is a high throughput transport protocol based on flow control by rate. <p> Once the connection is established, the bandwidth is calculated by using the least-squares estimation on three closely-spaced ACK's received at the sender and their respective time of receipt. (This is similar to the Packet-Pair algorithm in <ref> [15] </ref>.) The resulting estimate, 20 or 20480 bytes, is expectedly accurate. As a result, we see a very smooth transfers without retransmit timeouts, since the good guess of the initial ssthresh value prevented the episodes of the surge of packets that led to multiple packet losses.
Reference: [16] <author> J. C. Mogul. </author> <title> Observing TCP dynamics in real networks. </title> <journal> ACM Computer Communication Review, </journal> <month> August </month> <year> 1992. </year>
Reference-contexts: Again, this paper only focuses on TCP's steady-state behavior. From simulations of TCP/IP network operations, Zhang and Clark [27] examine and document the data traffic oscillation phenomena that have been observed both in operational networks and in simulations. Mogul <ref> [16] </ref> shows how to observe in "real life" some of the phenomena described in the previous work by analyzing traces of a busy segment of the Internet and how to measure their frequency and their effects on performance.
Reference: [17] <author> J. Postel. </author> <title> Transmission control protocol. Request for Comments 793, </title> <institution> DDN Network Information Center, SRI International, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: We are also interested in the complexity of this seemingly simple protocol. Since the 1981 release of its specification <ref> [17] </ref>, implementations of TCP have been augmented with several performance-enhancing mechanisms, such as congestion control, fast retransmission, and fast recovery [1, 11, 23]. <p> Its identifying features include 18 explicit and acknowledged connection initiation and termination, reliable, in-order, unduplicated delivery of data, congestion control, and out-of-band indication of urgent data. Details of the protocol specification are in <ref> [17] </ref>. TCP operates on top of the IP architecture. IP itself makes no guarantee to deliver packets reliably. TCP provides a reliable byte stream with end-to-end flow control by using checksums, sequence number, acknowledgments (ACK's), and windows.
Reference: [18] <author> K. K. Ramakrishnan and R. Jain. </author> <title> A binary feedback scheme for congestion avoidance in computer networks with a connectionless network layer. </title> <booktitle> In Proceedings of the ACM SIGCOMM '88, </booktitle> <pages> pages 303-313, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Ra-makrishnan and Jain <ref> [18] </ref> propose a congestion avoidance scheme that uses one bit in each packet as feedback from the network to adjust the amount of traffic allowed into the network. The servers in the network detect congestion and set a congestion indication bit on packets flowing in the forward direction.
Reference: [19] <author> K. K. Ramakrishnan and R. Jain. </author> <title> Issues with backward explicit congestion notification based congestion control. </title> <type> ATM Forum 93-870, </type> <month> September </month> <year> 1993. </year>
Reference-contexts: Simulation results using other parameters will be organized and presented in a later paper. 30 4.2 Performance Metrics As mentioned before, although the focus of this thesis is not completely on performance issues, we briefly list some important measures for the performance of a TCP congestion control and avoidance schemes <ref> [19] </ref>: * Control stability: 1. reliable detection of congestion 2. robustness to noise 3. low parameter sensitivity 4. appropriate sensitivity to transient congestion, e.g. bursts and synchro nization between flows. * Timely response to changes in network utilization * Efficiency: not a lot of unused bandwidth in the network but also
Reference: [20] <author> A. Romanow and S. Floyd. </author> <title> Dynamics of TCP traffic over ATM networks. </title> <booktitle> In Proceedings of the ACM SIGCOMM '94, </booktitle> <pages> pages 79-88, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: This thesis provides some simulation data to corroborate similar problems in the Net/2 TCP implementation as well. In another paper, Floyd [9] discusses the use of Explicit Congestion Notification mechanisms in the TCP/IP protocol. In addition, Romanow and Floyd <ref> [20] </ref> investigate the performance of TCP connections over ATM networks with no ATM-level congestion control and compare it to the performance of TCP over packet-based networks. 2.2 Congestion Control and Avoidance on a Network There are several proposed approaches for congestion control and avoidance.
Reference: [21] <author> S. Shenker and L. Zhang. </author> <title> Some observations on the dynamics of a congestion control algorithm. </title> <journal> ACM Computer Communication Review, </journal> <volume> 20 </volume> <pages> 30-39, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Such an "envelope", along with the segment it contains, is referred to as a packet. 14 only the segments that have been lost. This thesis proposes an alternative mechanism to deal with multiple packet losses within one round-trip time of a TCP connection in Section 7.2. Shenker and Zhang <ref> [21] </ref> use simulations to make some observations about the behavior of the congestion control algorithm in the 4.3-Tahoe BSD TCP implementation. They note and explain two main observations. First, packets from individual one-way connections originating from the same host are separated into completely individual clusters, instead of being interleaved.
Reference: [22] <author> T. Shepard. </author> <title> TCP packet trace analysis. </title> <type> Technical Report 494, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: The segment size for transfer is 1024 bytes, and the maximum window size of the connection is 50 segments (51200 bytes). We transfer 1 Mbyte across a simple one-way TCP connection. We then graph the simulation data using the graphical method modeled after <ref> [22] </ref>. This method is explained briefly in Section 4.3. The parameters chosen may limit the relevance of the results to real situations. <p> Both types of graphs show data collected from the sender's perspective. The graphic convention used in the time-segment-number graphs is similar to that developed in <ref> [22] </ref>. To make these graphs, we converted sequence numbers into segment numbers 1 to make the graphs more readable and the discussions simpler. We occasionally draw circles around the regions of interest in the graph. <p> Therefore, simulations can be a good initial approach to examine various networking issues. Despite the limitations of simulations, our observations on TCP's dynamics presented in the next chapter are in fact in real networks. <ref> [22] </ref> shows many TCP traces 34 of real networks, and many of the phenomena we observe in Chapter 5 can be easily found in those traces. 35 Chapter 5 Observations on the Start-up Transients of the Net/2 Implementation of TCP Because many applications use TCP for short data transfers, the performance
Reference: [23] <author> W. R. </author> <title> Stevens. </title> <journal> TCP/IP Illustrated, </journal> <volume> volume 1. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: these observations, this thesis proposes simple changes to this implementation to improve its performance during the start-up epoch. 1.1 Motivation for This Thesis Over the years, TCP, a reliable, connection-oriented stream transport protocol in the Internet protocol (IP) suite, has become the most widely used form of networking between computers <ref> [23] </ref>. Because TCP achieves its primary function of reliable data delivery, many application developers and users have not been very concerned with the details of TCP's mechanisms and how they affect TCP's performance. <p> We are also interested in the complexity of this seemingly simple protocol. Since the 1981 release of its specification [17], implementations of TCP have been augmented with several performance-enhancing mechanisms, such as congestion control, fast retransmission, and fast recovery <ref> [1, 11, 23] </ref>. With these mechanisms and their interactions, many will agree that the complexity of TCP has made its detailed behavior very difficult to comprehend without close scrutiny using simulations, emulations, or visualization tools.
Reference: [24] <author> Z. Wang and J. Crowcroft. </author> <title> A new congestion control scheme: Slow start and search (Tri-S). </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> 21(1) </volume> <pages> 32-43, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Otherwise, the window size is increased by one maximum segment size. Therefore, the window changes during every adjustment and oscillates around its optimal point. Wang and Crowcroft's Tri-S scheme <ref> [24] </ref> is based on using the flattening of the sending rate as an indication that the network is approaching congestion. Every RTT, the window size is increased by one segment, and the achieved throughput is compared to the throughput when the window was one segment smaller.
Reference: [25] <author> Z. Wang and J. Crowcroft. </author> <title> Eliminating periodic packet losses in 4.3-Tahoe BSD TCP congestion control algorithm. </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <volume> 22(2) </volume> <pages> 9-16, </pages> <month> April </month> <year> 1992. </year> <month> 68 </month>
Reference-contexts: If the difference is less than one-half the throughput achieved when only one segment was in transit, window is decreased by one segment. Throughput in this scheme is defined by the number of bytes outstanding in the network divided by the RTT. Wang and Crowcroft's DUAL algorithm <ref> [25] </ref> checks to see if the current RTT is greater than the average of the minimum and maximum RTT's seen so far every two round trip delays. If so, the scheme decreases the congestion window by one-eighth.
Reference: [26] <author> G. R. Wright and W. R. </author> <title> Stevens. </title> <journal> TCP/IP Illustrated, </journal> <volume> volume 2. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: The diagram is adapted from <ref> [26] </ref>. 22 3.2.1 Implementation of the TCP Specification We briefly discuss the implementation of some key ideas in the TCP specification: acknowledgment, reassembly, and retransmission timeout, A well-known mechanism of TCP is that it acknowledges received data. <p> The schemes are generally known as slow start. More details and intuition on this topic are in <ref> [11, 26] </ref>. Using these schemes, a sender is in one of two modes: slow start or congestion avoidance. The two modes differ primarily in that the sending rate of data flow increases more aggressively in the former mode than in the latter. <p> This factor is a known error, and it should be left out in future implementations <ref> [26] </ref>. <p> In this chapter, we document some interesting observations on the start-up transients of a 1-Mbyte transfer over a one-way Net/2 TCP connection simulated in the Netsim simulator [10]. Some of the phenomena have been briefly discussed in other sources <ref> [4, 3, 8, 26] </ref>. We first look at the effects of increasing congestion window by more than one segment every round-trip (an additional factor of maximum segment size 8 is added per acknowledgment) in the congestion-avoidance mode in Section 5.1.
Reference: [27] <author> L. Zhang and D. D. Clark. </author> <title> Oscillating behavior of network traffic: A case study simulation. Internetworking: </title> <journal> Research and Experience, </journal> <volume> 1 </volume> <pages> 101-112, </pages> <year> 1990. </year>
Reference-contexts: The paper makes two new observations: ACK-compression and out-of-phase queue synchronization. Again, this paper only focuses on TCP's steady-state behavior. From simulations of TCP/IP network operations, Zhang and Clark <ref> [27] </ref> examine and document the data traffic oscillation phenomena that have been observed both in operational networks and in simulations.
Reference: [28] <author> L. Zhang, S. Shenker, and D. Clark. </author> <title> Observations on the dynamics of a congestion control algorithm: The effects of two-way traffic. </title> <booktitle> In Proceedings of the ACM SIGCOMM '91, </booktitle> <pages> pages 133-147, </pages> <month> September </month> <year> 1991. </year> <month> 69 </month>
Reference-contexts: The motivation of their paper differs from that of this thesis in that their paper focuses on the steady-state behavior of the algorithm and omits the initial start-up transients in their data set. As an extension of the paper above, Zhang, Shenker, and Clark <ref> [28] </ref> examines the dynamics of the same congestion control algorithm, but this time focusing on the effects of two-way traffic. The paper makes two new observations: ACK-compression and out-of-phase queue synchronization. Again, this paper only focuses on TCP's steady-state behavior. <p> If the receiver's ACK's arrive at the sender with the same spacing, then by sending new data packets at the same rate the sender can avoid overloading the bottleneck link. Although the mechanism is subjected to distortion by ACK's that do not arrive with the same spacing or ACK-compression <ref> [28] </ref>, over a large time scale, the distortion is transient. In any case, ACK-compression is not a significant factor within the scope of this thesis. We raise this issue for completeness, but we will not offer further detailed discussions.
References-found: 28

