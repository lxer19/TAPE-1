URL: http://pertsserver.cs.uiuc.edu/papers/SuLi96a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Bounding the End-to-End Response Times of Tasks in a Distributed Real-Time System Using the Direct
Author: Jun Sun Jane Liu 
Abstract: In a distributed real-time system, a task may consist of a chain of subtasks which execute on different processors. In order to guarantee that all timing constraints are met in such a system, it is imperative to be able to determine the end-to-end response time for each task. This report focuses on distributed systems where tasks are periodic and scheduled according to fixed priority scheduling algorithms. Moreover, if a subtask has predecessors, every instance of the subtask is released as soon as the corresponding instance of the immediate predecessor subtask completes. This report describes an algorithm that can be used to find upper bounds on the end-to-end response times of tasks in such a distributed real-time system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Sun and J. W.S. Liu. </author> <title> Synchronization protocols in distributed real-time systems. </title> <booktitle> In The 16th International Conference on Distributed Computing Systems, </booktitle> <address> Hong Kong, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: According to this protocol, an instance of a subtask that has predecessors is released immediately after the corresponding instance of its immediate predecessor completes. (For more discussion on synchronization protocols, interested readers can refer to <ref> [1] </ref>.) For example, a monitoring task in a control system may have three subtasks: (1) the sampling subtask which samples physical parameters on the field processor, (2) the transmission subtask which transmits the date over a communication link, and (3) the displaying subtask which processes the data and displays them on <p> The DS protocol has many merits: it is simple to implement, it has low run-time overhead, and it yields short average EER times of tasks <ref> [1] </ref>. Algorithm EERT/DS enables us to analyze the schedulability of a system that uses the DS protocol and, consequently, makes the DS protocol applicable to hard real-time systems. In this report, we assume that fixed priority scheduling is used.
Reference: [2] <author> K. Tindell and J. Clark. </author> <title> Holistic schedulability analysis for distributed hard real-time systems. </title> <journal> Microprocessing and Microprogramming, </journal> <volume> 50(2) </volume> <pages> 117-134, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Let T i;j (g) denote the gth instance of T i;j . It is equivalent to say that subtask instance T i;j (g) must complete before T i;j (g+1) can start. This is the strategy typically used in practice. A closely related work is done by Tindell, et al. <ref> [2] </ref>, where a similar problem is addressed. Near the end of this report, we will compare our approach with the one in [2]. 2 Clumping Effect In a system that uses the DS protocol, the time demand analysis for periodical task systems [3, 4, 5] cannot be used directly to obtain <p> This is the strategy typically used in practice. A closely related work is done by Tindell, et al. <ref> [2] </ref>, where a similar problem is addressed. Near the end of this report, we will compare our approach with the one in [2]. 2 Clumping Effect In a system that uses the DS protocol, the time demand analysis for periodical task systems [3, 4, 5] cannot be used directly to obtain a bound on the response time of each subtask. <p> To bound the extra interference precisely, we will end up with a mutual dependent system to solve <ref> [2] </ref>. Furthermore, since many instances of the same subtask can be released almost at the same time, they may interfere with each other (because later instances need to wait until previous instances complete before they can start). <p> In this case, we can set up an additional termination condition for Algorithm EERT/DS so that it terminates either when an solution is obtained or when the bounds exceed the relative deadlines. 4 Relation with Previous Work As we have mentioned earlier, Tindell, and et al. proposed a solution in <ref> [2] </ref> for a very similar problem. In their approach, the irregular release times are called release jitters, and the extra interference to a target subtask caused by release jitters is counted in their extended busy period analysis method [6, 7]. The release jitters are propagated along the subtask chains. <p> In an extreme case, several instances of T i;j may be released closely together in time, and the worst-case response time of T i;j is longer than the one when T i;j is periodic, which is obtained by the method in [7]. Since the approach proposed in <ref> [2] </ref> uses the method in [7] to obtain 14 an upper bound on the response time of a subtask, we expect that in general Tindell's approach will not yield correct upper bounds on the end-to-end response times of tasks. 5 Summary In this report, we described an algorithm, Algorithm EERT/DS, that
Reference: [3] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Near the end of this report, we will compare our approach with the one in [2]. 2 Clumping Effect In a system that uses the DS protocol, the time demand analysis for periodical task systems <ref> [3, 4, 5] </ref> cannot be used directly to obtain a bound on the response time of each subtask. In the worst 3 case, several instances of a higher-priority subtask may execute back-to-back consecutively or rather closely together in time, a phenomenon called the clumping effect.
Reference: [4] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Near the end of this report, we will compare our approach with the one in [2]. 2 Clumping Effect In a system that uses the DS protocol, the time demand analysis for periodical task systems <ref> [3, 4, 5] </ref> cannot be used directly to obtain a bound on the response time of each subtask. In the worst 3 case, several instances of a higher-priority subtask may execute back-to-back consecutively or rather closely together in time, a phenomenon called the clumping effect. <p> In the following discussion, we focus on subtask T i;j , the target subtask whose IEER time is to be bounded. The key technique used in Algorithm IEERT is an extension of busy period analysis <ref> [4, 5] </ref>. We first define a -level idle point and a -level busy period.
Reference: [5] <author> J. Lehoczky. </author> <title> Fixed priority scheduling of periodic task sets with arbitrary deadlines. </title> <booktitle> In 11th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 201-209, </pages> <month> December </month> <year> 1990. </year> <month> 15 </month>
Reference-contexts: Near the end of this report, we will compare our approach with the one in [2]. 2 Clumping Effect In a system that uses the DS protocol, the time demand analysis for periodical task systems <ref> [3, 4, 5] </ref> cannot be used directly to obtain a bound on the response time of each subtask. In the worst 3 case, several instances of a higher-priority subtask may execute back-to-back consecutively or rather closely together in time, a phenomenon called the clumping effect. <p> In the following discussion, we focus on subtask T i;j , the target subtask whose IEER time is to be bounded. The key technique used in Algorithm IEERT is an extension of busy period analysis <ref> [4, 5] </ref>. We first define a -level idle point and a -level busy period.
Reference: [6] <author> N. Audsley, A. Burns, K. Tindell, M. Richardson, and A. Wellings. </author> <title> Applying new scheduling theory to static priority pre-emptive scheduling. </title> <journal> Software Engineering Journal, </journal> <volume> 8(5) </volume> <pages> 284-292, </pages> <year> 1993. </year>
Reference-contexts: In their approach, the irregular release times are called release jitters, and the extra interference to a target subtask caused by release jitters is counted in their extended busy period analysis method <ref> [6, 7] </ref>. The release jitters are propagated along the subtask chains. The response time of each subtask is thus bounded and the bound on the EER time of each task is simply the sum of the bounds on the response times of all its subtasks.
Reference: [7] <author> K. W. Tindell, A. Burns, and A. J. Wellings. </author> <title> An extendible approach for analyzing fixed priority hard real-time tasks. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2) </volume> <pages> 133-152, </pages> <month> March </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: In their approach, the irregular release times are called release jitters, and the extra interference to a target subtask caused by release jitters is counted in their extended busy period analysis method <ref> [6, 7] </ref>. The release jitters are propagated along the subtask chains. The response time of each subtask is thus bounded and the bound on the EER time of each task is simply the sum of the bounds on the response times of all its subtasks. <p> However, in their approach, although the release jitters of the interfering subtasks, i.e., subtasks that are in H i;j , are correctly taken into account, release jitters of the target subtask is not taken into account. Tindell, et al. assumed that the target subtask is periodic <ref> [7] </ref>. This is only true for the first subtask in each end-to-end task. When a target subtask (T i;j ) is not the first subtask, itself has release jitters. <p> In an extreme case, several instances of T i;j may be released closely together in time, and the worst-case response time of T i;j is longer than the one when T i;j is periodic, which is obtained by the method in <ref> [7] </ref>. Since the approach proposed in [2] uses the method in [7] to obtain 14 an upper bound on the response time of a subtask, we expect that in general Tindell's approach will not yield correct upper bounds on the end-to-end response times of tasks. 5 Summary In this report, we <p> extreme case, several instances of T i;j may be released closely together in time, and the worst-case response time of T i;j is longer than the one when T i;j is periodic, which is obtained by the method in <ref> [7] </ref>. Since the approach proposed in [2] uses the method in [7] to obtain 14 an upper bound on the response time of a subtask, we expect that in general Tindell's approach will not yield correct upper bounds on the end-to-end response times of tasks. 5 Summary In this report, we described an algorithm, Algorithm EERT/DS, that computes upper bounds on the
References-found: 7

