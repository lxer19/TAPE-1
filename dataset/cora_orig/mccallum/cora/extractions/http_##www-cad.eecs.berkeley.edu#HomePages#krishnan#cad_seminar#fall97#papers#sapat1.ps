URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/papers/sapat1.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/abstract/sapatnekar.html
Root-URL: http://www.cs.berkeley.edu
Title: Utilizing the Retiming-Skew Equivalence in a Practical Algorithm for Retiming Large Circuits  
Author: Sachin S. Sapatnekar and Rahul B. Deokar 
Address: 201 Coover Hall  Ames, IA 50011.  
Affiliation: Department of Electrical and Computer Engineering  Iowa State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. E. Leiserson and J. B. Saxe, </author> <title> "Retiming synchronous circuitry," </title> <journal> Algorithmica, </journal> <volume> vol. 6, </volume> <pages> pp. 5-35, </pages> <year> 1991. </year>
Reference-contexts: introduction to any reader of this paper, and a great deal of effort has been invested into research in this field. This paper considers the method of retiming <ref> [1] </ref>, which proceeds by relocating flip-flops within a network to achieve faster clocking speeds. A novel approach to retiming that utilizes the solution of the clock skew optimization problem [2] forms the backbone of this work. <p> The complexity of solving the retiming problem at the gate level using the technique in <ref> [1] </ref> is O (jGj 2 log jGj), where jGj is the number of gates in the circuit; this could be phenomenally large, and a "verbatim" implementation, such as that in SIS [6] is incapable of handling large circuits. <p> The clock skew optimization problem was formulated as a linear program that may be solved to find the optimal clock period. A second approach that is exploited here to improve the performance of the circuit is the procedure of retiming <ref> [1] </ref>. Retiming involves the relocation of flip-flops across logic gates to allow the circuit to be operated under a faster clock, without changing its functionality. <p> This results in the combinational circuit blocks CC 1 and CC 2 having delays of 2.0 units each as seen in Figure 2. This approach is formalized in <ref> [1] </ref>. If one were to imagine the circuit as being drawn with its inputs to the left and outputs to the right, then the conversion of a negative (positive) skew to zero skew would involve the relocation of flip-flops to the right (left). <p> minimum clock period corresponds to the smallest value of P at which no positive cycle exists. 7 The skews at all primary inputs and primary outputs are assumed to be zero; this is repre- sented by a host node in the constraint graph, similar in principle to the notion in <ref> [1] </ref>. Observe that the constraint set of the linear program (4) is a subset of the constraint set of the linear program (3). Therefore, the optimal period for the LP above must be less than or equal to that for the LP that handles double-sided constraints.
Reference: [2] <author> J. P. Fishburn, </author> <title> "Clock skew optimization," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 39, </volume> <pages> pp. 945-951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: This paper considers the method of retiming [1], which proceeds by relocating flip-flops within a network to achieve faster clocking speeds. A novel approach to retiming that utilizes the solution of the clock skew optimization problem <ref> [2] </ref> forms the backbone of this work. The introduction of clock skew at a flip-flop has an effect that is similar to the movement of the flip-flop across combinational logic module boundaries. This was observed (but not proved) in [2], which stated that clock skew and retiming are continuous and discrete <p> retiming that utilizes the solution of the clock skew optimization problem <ref> [2] </ref> forms the backbone of this work. The introduction of clock skew at a flip-flop has an effect that is similar to the movement of the flip-flop across combinational logic module boundaries. This was observed (but not proved) in [2], which stated that clock skew and retiming are continuous and discrete optimizations with the same effect. Although the designer can choose between the two transformations, these methods can, in general, complement each other. <p> The algorithm has been named ASTRA (A Skew-To-Retiming Algorithm). 1 The clock skew problem is first solved using efficient graph-theoretic techniques in polynomial time. The idea of using graph algorithms is to take advantage of the structure of the problem to arrive at an efficient solution. Like <ref> [2] </ref>, our technique is illustrated on single-phase clocked circuits containing edge-triggered flip-flops. <p> However, if a skew of +1.0 unit is applied to the clock line to flip-flop B, the circuit can run with a clock period of 2.0 units. This approach was formalized in the work by Fishburn <ref> [2] </ref>. The clock skew optimization problem was formulated as a linear program that may be solved to find the optimal clock period. A second approach that is exploited here to improve the performance of the circuit is the procedure of retiming [1]. <p> In <ref> [2] </ref>, the clock skew problem for minimizing the clock period is solved by solving the following linear program: minimize P subject to x i x j T hold d (i; j) x j x i + P T setup + d (i; j) (3) for every pair, (i; j) of flip-flops <p> If d (i; j) is finite, then a directed edge between x i and x j are constructed in G 1 (P ) in accordance with the long path delay constraint. 4.2 Calculating the worst-case flip-flop-to-flip-flop delays For any input i, the procedure <ref> [2] </ref> for computing d (i; j) for all j involves setting the arrival time at input i to zero, and that at all other inputs to 1. The resulting signal arrival time at each output j, found using PERT [18], is the value of d (i; j).
Reference: [3] <author> H.-G. Martin, </author> <title> "Retiming by combination of relocation and clock delay adjustment," </title> <booktitle> in Proceedings of the European Design Automation Conference, </booktitle> <pages> pp. 384-389, </pages> <year> 1993. </year>
Reference: [4] <author> B. Lockyear and C. Ebeling, </author> <title> "Minimizing the effect of clock skew via circuit retiming," </title> <type> Tech. Rep. </type> <institution> UW-CSE-93-05-04, Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, </address> <year> 1993. </year>
Reference: [5] <author> L.-F. Chao and E. H.-M. Sha, </author> <title> "Retiming and clock skew for synchronous systems," </title> <booktitle> in Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. </pages> <address> 1.283-1.286, </address> <year> 1994. </year>
Reference: [6] <author> E. M. Sentovich et al., </author> <title> "SIS: A system for sequential circuit synthesis," </title> <type> Tech. Rep. </type> <institution> UCB/ERL M92/41, Electronics Research Laboratory, University of California at Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The complexity of solving the retiming problem at the gate level using the technique in [1] is O (jGj 2 log jGj), where jGj is the number of gates in the circuit; this could be phenomenally large, and a "verbatim" implementation, such as that in SIS <ref> [6] </ref> is incapable of handling large circuits. However, a clever implementation, such as that proposed very recently in [7], can render the problem of finding a retiming of a circuit at the minimum clock period tractable.
Reference: [7] <author> N. Shenoy and R. Rudell, </author> <title> "Efficient implementation of retiming," </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 226-233, </pages> <year> 1994. </year> <month> 26 </month>
Reference-contexts: However, a clever implementation, such as that proposed very recently in <ref> [7] </ref>, can render the problem of finding a retiming of a circuit at the minimum clock period tractable. Another method proposed in [8] provides an efficient solution for the specific problem of circuits with unit-delay gates. To place the our method in perspective with that in [7], it must be pointed <p> proposed very recently in <ref> [7] </ref>, can render the problem of finding a retiming of a circuit at the minimum clock period tractable. Another method proposed in [8] provides an efficient solution for the specific problem of circuits with unit-delay gates. To place the our method in perspective with that in [7], it must be pointed out that the two were research efforts that were carried out independently and parallelly in time. While [7] performs the important task of debunking the myth that the Leiserson-Saxe algorithm cannot be applied to retime large gate-level circuits, our approach shows an alternative view to retiming, <p> To place the our method in perspective with that in <ref> [7] </ref>, it must be pointed out that the two were research efforts that were carried out independently and parallelly in time. While [7] performs the important task of debunking the myth that the Leiserson-Saxe algorithm cannot be applied to retime large gate-level circuits, our approach shows an alternative view to retiming, by way of clock skew optimization. <p> Apart from taking different approaches to solving the retiming problem, the two also differ in that the work presented here also directly provides a solution to the problem of jointly finding an optimal retiming and optimal clock skews for a minimum period circuit. The work in <ref> [7] </ref> also performs minimum area retiming; however, we have currently left that as a topic for further research. The run-time of our approach and that in [7] are essentially the same for the minimum period retiming problem. <p> The work in <ref> [7] </ref> also performs minimum area retiming; however, we have currently left that as a topic for further research. The run-time of our approach and that in [7] are essentially the same for the minimum period retiming problem. In this paper, the circuit is assumed to be composed of gates with constant delays. We assume the presence of an FF at each primary input and each primary output.
Reference: [8] <author> S. Chakradhar, </author> <title> "A fast optimal retiming algorithm for sequential circuits," </title> <type> Tech. Rep. </type> <institution> 93--C019-4-5506-5, CCRL, NEC USA, Inc, Princeton, NJ, </institution> <year> 1993. </year>
Reference-contexts: However, a clever implementation, such as that proposed very recently in [7], can render the problem of finding a retiming of a circuit at the minimum clock period tractable. Another method proposed in <ref> [8] </ref> provides an efficient solution for the specific problem of circuits with unit-delay gates. To place the our method in perspective with that in [7], it must be pointed out that the two were research efforts that were carried out independently and parallelly in time.
Reference: [9] <author> M. A. B. Jackson, A. Srinivasan, and E. S. Kuh, </author> <title> "Clock routing for high-performance IC's," </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 573-579, </pages> <year> 1990. </year>
Reference: [10] <author> A. Kahng, J. Cong, and G. Robins, </author> <title> "High-performance clock routing based on recursive geometric matching," </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 322-327, </pages> <year> 1991. </year>
Reference: [11] <author> R.-S. Tsay, </author> <title> "Exact zero skew," </title> <booktitle> in Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pp. 336-339, </pages> <year> 1991. </year>
Reference: [12] <author> S. Pullela, N. Menezes, and L. T. Pillage, </author> <title> "Reliable nonzero clock skew trees using wire width optimization," </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 165-170, </pages> <year> 1993. </year>
Reference: [13] <author> S. Pullela, N. Menezes, J. Omar, and L. T. Pillage, </author> <title> "Skew and delay optimization for reliable buffered clock trees," </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 556-562, </pages> <year> 1993. </year>
Reference: [14] <author> L.-F. Chao, </author> <title> Scheduling and Behavioral Transformations for Parallel Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Princeton University, </institution> <year> 1993. </year>
Reference-contexts: An alternative view of the same procedure is as follows. Retiming may be thought of as a sequence of movements of flip-flops across gates (Theorem 9.1 in <ref> [14] </ref>). We may start from the final retimed circuit, where all of the skews are zero, and the zero-clocking constraints are met, and perform the sequence of movements in reverse order.
Reference: [15] <author> D. Joy and M. Ciesielski, </author> <title> "Clock period minimization with wave pipelining," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 12, </volume> <pages> pp. 461-472, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: The rationale behind this approach is that, as will be shown in the next section, the clock period obtained thus is smaller than that obtained with the inclusion of double-sided constraints. This minimum clock period can be preserved while reconciling short path and logic signal separation constraint violations <ref> [15] </ref> by using an algorithm for minimum padding, such as the one in [16]. 4.1 Solution to the clock period optimization problem 4.1.1 Formation of the constraint graph The linear program (3) without the short path constraints is rewritten as minimize P subject to x j x i + P T
Reference: [16] <author> N. V. Shenoy, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> "Minimum padding to satisfy short path constraints," </title> <booktitle> in Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 156-161, </pages> <year> 1993. </year>
Reference-contexts: This minimum clock period can be preserved while reconciling short path and logic signal separation constraint violations [15] by using an algorithm for minimum padding, such as the one in <ref> [16] </ref>. 4.1 Solution to the clock period optimization problem 4.1.1 Formation of the constraint graph The linear program (3) without the short path constraints is rewritten as minimize P subject to x j x i + P T setup + d (i; j) (4) Notice that for a constant value of
Reference: [17] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms. </title> <address> New York, New York: </address> <publisher> McGraw-Hill Book Company, </publisher> <year> 1990. </year> <month> 27 </month>
Reference-contexts: short path constraints is rewritten as minimize P subject to x j x i + P T setup + d (i; j) (4) Notice that for a constant value of P , the constraint matrix reduces to a system of difference constraints which can be represented by a constraint graph <ref> [17] </ref>. <p> P = (P max + P min )=2; if G 1 (P ) has a positive cycle P min = P ; else P max = P ; In the above algorithm, the presence of a positive cycle in G 1 (P ) may be tested using the Bellman-Ford algorithm <ref> [17] </ref>. If the skews are initialized to 0, the Bellman-Ford solution achieves the objective of minimizing jx i;max x i;min j [17]. On a graph with V vertices and E edges, the computational complexity of this algorithm is O (V E). <p> ; else P max = P ; In the above algorithm, the presence of a positive cycle in G 1 (P ) may be tested using the Bellman-Ford algorithm <ref> [17] </ref>. If the skews are initialized to 0, the Bellman-Ford solution achieves the objective of minimizing jx i;max x i;min j [17]. On a graph with V vertices and E edges, the computational complexity of this algorithm is O (V E). The number of iterations is (P high P low )=*.
Reference: [18] <author> S. </author> <title> Even, Graph Algorithms. </title> <address> Potomac, MD: </address> <publisher> Computer Science Press, </publisher> <year> 1979. </year>
Reference-contexts: The resulting signal arrival time at each output j, found using PERT <ref> [18] </ref>, is the value of d (i; j). However, if this procedure were to be performed directly, it would lead to large computation times.
Reference: [19] <author> W. Chuang, S. S. Sapatnekar, and I. N. Hajj, </author> <title> "Timing and area optimization for standard cell VLSI circuit design," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pp. 308-320, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: The resulting signal arrival time at each output j, found using PERT [18], is the value of d (i; j). However, if this procedure were to be performed directly, it would lead to large computation times. It was observed during the symbolic propagation of constraints in <ref> [19] </ref> that in most cases, a flip-flop at the input to a combinational block exercises only a small fraction of all of the paths between the inputs of the combinational block to the outputs.
Reference: [20] <author> T. G. Szymanski, </author> <title> "Computing optimal clock schedules," </title> <booktitle> in Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 399-404, </pages> <year> 1992. </year>
Reference-contexts: We point out that for real circuits, E = O (F ). 12 We caution the reader that the complexity shown above is not a genuine indication of the complexity if the implementation is cleverly carried out, using back-pointers during the Bellman-Ford process <ref> [20] </ref> and the procedure in Section 4.2 for d (i; j) calculations. In the solution found above, all skews must necessarily be positive, since the weights of each node in the Bellman-Ford algorithm was initialized to zero.

References-found: 20

