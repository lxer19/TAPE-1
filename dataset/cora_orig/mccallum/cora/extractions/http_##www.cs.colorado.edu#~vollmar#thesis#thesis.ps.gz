URL: http://www.cs.colorado.edu/~vollmar/thesis/thesis.ps.gz
Refering-URL: http://www.cs.colorado.edu/~vollmar/thesis/thesis.html
Root-URL: http://www.cs.colorado.edu
Title: RESOLVING CONSISTENCY PROBLEMS IN DISTRIBUTED EDITORS APPLYING GROUP THEORY  
Author: by DAVID VOLLMAR 
Degree: A thesis submitted to the Faculty of the Graduate School of the  in partial fulfillment of the requirements for the degree of Masters of Science  
Date: 1992  1995  
Address: Germany,  
Affiliation: Informatik Vordiplom, Technische Hochschule Darmstadt  University of Colorado  Department of Computer Science  
Abstract-found: 0
Intro-found: 0
Reference: <institution> BIBLIOGRAPHY </institution>
Reference: [Ellis 91] <author> C.A. Ellis, S.J. Gibbs, G.L. Rein. </author> <title> Groupware Some issues and experiences. </title> <journal> CACM 1/1991/Vol.34, </journal> <volume> No. </volume> <pages> 1. </pages>
Reference-contexts: This is obviously more efficient than editing several copies of a text with single-user editors and trying afterwards to merge the texts together in order to resolve consistency problems. This is not only a theoretical result but is also supported by experiments conducted with group-editors <ref> [Ellis 91] </ref> . 2 1.2 Groupware Terminology The same benefits of group-editors listed above are also valid in other groupware systems. In the groupware context one usually talks about shared environments and collaborative awareness. In order to explain these two notions, the usage of sites must be explained first. <p> These two concepts make it possible for users to coordinate their work much better, and to perform synchronous work in a more closely coupled way. 1.3 Groupware Taxonomy Different groupware systems may have very different attributes. A group-ware taxonomy <ref> [Ellis 91] </ref> exists which illustrates how different groupware products might be initially distinguished. <p> Adding more complex edit-operations is difficult, since creating the appropriate functions to modify the operations is hard. Furthermore proving the correctness of these functions is difficult. 1.6 Different Workstyles Ellis shows <ref> [Ellis 91] </ref> an interesting aspect making it worthwhile to investigate group-editors more closely: with new groupware-environments people begin using these tools in unexpected ways. This is evidence for the possibility of many more workstyles using groupware existing than previously expected.
Reference: [Ellis 88] <author> C.A. Ellis, S.J. Gibbs. </author> <title> Concurrency Control in Groupware Systems. </title> <type> MCC Technical Report Number STP-417-88, 12/1988. </type>
Reference-contexts: Due to these circumstances the next problem is consistency of the sets 5 of data at each site. The main content of this thesis is to suggest an alternative approach to solve this problem. A conservative approach is suggested in <ref> [Ellis 88] </ref> using logs of the changes. Another solution to guarantee consistency is to introduce the concept of a floorholder. <p> Situations like this cannot be completely avoided, as will be shown later. Not all conflicts should be resolved automatically, since it is not always in the best interest of the user. 1.5 The dOPT-Algorithm One approach to solve the consistency problem suggested by Ellis in <ref> [Ellis 88] </ref> is outlined now. The dOPT-algorithm is implemented in the multi-user group-editor Grove, which allows synchronous editing. The description will be on a high level, sufficient enough to understand the principle, but leaving out details. In Grove a replicated data model was used with an unrestricted number of participants. <p> Since each side is aware of it's assigned side, each side will construct the modifiers in the appropriate way. Once the modifier is constructed the local change is performed immediately and the modifier is sent to the other site across a network. In quiescence <ref> [Ellis 88] </ref>, meaning there are no outstanding edits to be performed at either site, the data at each site is consistent due to the earlier proven associativity of the multiplication. (We must assume the modifiers arrive at a site in order. <p> edit appears when during a parallel edit site #1 wants to modify a part of the string which is on the right side of the part of the string targeted by the edit operation of site #2. 1 This is a different definition than the one for overlapping operations in <ref> [Ellis 88] </ref>. 21 4.1 Some Words About Patterns In the previous paragraph, the notion of equality of patterns appeared in the context that two patterns where found to be different. This intuitive notion of equality can be properly defined. <p> My rational for classifying ffd (dr)rfl with 4 is, that users probably should get feedback in this case, because it is probable that users had different knowledge about the situation, and decided therefore to perform a different edit operation. 1 The notion DWWM (Do What We Mean) appears also in <ref> [Ellis 88] </ref>. 31 Table 5.2: Examples for the ambiguity of conflicts op extended source site #1 site #2 result class signature string edit edit string ii ff (i2)fi (i1)fl abe 3ic 2id abcBdbe 2 rr ff (r1)(r1r2)(r2)fl awbye 2rbc 3rdb abcBdbe 4 di ff (d1)i (d2)fl awbd 2d2 3ic aBcbd 3 <p> The question remains if the suggested approach is of any advantage compared to other existing solutions, especially whether one can gain something compared to the approach taken in Grove with the dOPT-algorithm <ref> [Ellis 88] </ref>. In Grove a log of the performed edits of each site needs to be maintained at each site, which causes the collection of redundant data at each site and slows down the process. Ambiguities were resolved for each pair of edits in a way which could be adjusted.
Reference: [Land 90] <author> George P. Landow. </author> <title> Hypertext and Collaborative Work: The Example of Intermedia. </title> <editor> Readings in Groupware and CSCW (Ronald M. </editor> <booktitle> Baecker) 1993. </booktitle> <pages> (pp. 523-530). </pages>
Reference-contexts: be better suited to complete a task than with common single user editors, for instance * in the brainstorming phase of a project users can enter their ideas in a highly parallel mode. * while writing a co-authored paper the authors can edit the text simultane ously. * in hypertext <ref> [Land 90] </ref> systems. That groups actually can benefit from group-editors has been shown in [Pos 92]. This originates from the possibility to work with a group-editor closely coupled with the co-workers, to coordinate tasks better and to be able to work much more parallel than with usual single user editors.
Reference: [Lipp 91] <author> Stanley Lippman. </author> <title> C++ Primer. </title> <publisher> Addison Wesley 1991. </publisher>
Reference-contexts: This had to be done explicitly for each site. Therefore each situation in a real system with network-delays can be simulated, for instance parallel edits with overlapping transmissions. The editor was written in C++ <ref> [Lipp 91] </ref> on a UNIX-system. CHAPTER 4 THE NOTATION I decided to develop a notation which would make it possible to describe all possible outcomes of a parallel edit unambiguously. The following formalism allows one to describe edits in a dense and simultaneously expressive way.
Reference: [Mino 93] <author> Sten Minor, Boris Magnussen. </author> <title> A model for semi-(a)synchronous collaborative editing. </title> <booktitle> Proceedings of the 3. ECSCW 1993. </booktitle> <pages> (pp. 219-231.) </pages>
Reference-contexts: It should be noted that some research has been done in the field of asynchronous editors. One approach is to split the text into several copies, one for each person editing the text. These copies must then be merged together afterwards, which is quite a difficult task <ref> [Mino 93] </ref>. 1.4 Problems Typical to Groupware Shared workspaces and collaborative awareness results in the conceptual difference between groupware and multiuser databases. Due to this difference it is usually not appropriate to use a conservative database approach to implement groupware.
Reference: [Papa 86] <author> C. H. Papadimitriou. </author> <title> The Theory of Database Concurrency Control. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Md, </address> <year> 1986. </year>
Reference-contexts: Due to this difference it is usually not appropriate to use a conservative database approach to implement groupware. The reason for this is further explained in the next section. In database systems concepts of transaction processing (like locking) <ref> [Papa 86] </ref> are used in order to keep the data at each site consistent. These methods are usually not applicable in groupware systems for several reasons.
Reference: [Pos 92] <author> Ilona R. Posner. </author> <title> How People Write Together. </title> <editor> Readings in Groupware and CSCW (Ronald M. </editor> <booktitle> Baecker) 1993. (p. </booktitle> <pages> 239-250). </pages>
Reference-contexts: That groups actually can benefit from group-editors has been shown in <ref> [Pos 92] </ref>. This originates from the possibility to work with a group-editor closely coupled with the co-workers, to coordinate tasks better and to be able to work much more parallel than with usual single user editors. These advantages should be present in each groupware product. <p> This is evidence for the possibility of many more workstyles using groupware existing than previously expected. For that reason one can conclude that group-editors should not be restrictive about the way they are used. This is suggested also in <ref> [Pos 92] </ref>. CHAPTER 2 THE GROUP THEORY APPROACH 2.1 Introduction For the new approach we consider characters as elements of a semi-group G, where G is the set of all strings over the English alphabet.

References-found: 8

