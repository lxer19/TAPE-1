URL: ftp://cag.lcs.mit.edu/pub/dm/papers/mazieres:masters.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/~dm/
Root-URL: 
Title: Security and Decentralized Control in the SFS Global File System  
Author: David Mazieres 
Date: August 29, 1997  
Abstract: SFS (secure file system) is a global file system designed to be secure against all active and passive network attacks, provide a single namespace across all machines in the world, and avoid any form of centralized control. Using SFS, any unprivileged user can access any file server in the world securely and with no prior arrangement on the part of system administrators. New file servers are immediately accessible securely by all client machines. Users can name such new servers from any existing file system by specifying public keys in symbolic links. A prototype implementation of SFS installs easily, coexists with other file systems, and should port trivially to most UNIX platforms. Preliminary performance numbers on application benchmarks show that, despite its use of encryption and user-level servers, SFS delivers performance competitive with an in-kernel NFS implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Martn Abadi. </author> <title> Explicit communication revisited: Two new examples. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-23(3):185-186, </volume> <month> March </month> <year> 1997. </year>
Reference-contexts: With this scheme, all user authentication after the initial agent registration takes place completely transparently. The SFS authentication protocol was inspired by ssh [59], but with several fixes <ref> [1] </ref> and modifications. It takes place in two stages: first, authenticating the server to the client, and second, authenticating the user to the server, via the client. Three parties are involved: the SFS client software C, the SFS server software S, and the user's authentication agent A.
Reference: [2] <author> Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman. </author> <title> Extending the operating system at the user level: the Ufo global file system. </title> <booktitle> In Proceedings of the 1997 USENIX, </booktitle> <pages> pages 77-90. </pages> <publisher> USENIX, </publisher> <month> January </month> <year> 1997. </year>
Reference-contexts: hope to implement SFS as the vnode layer in a free operating system, but can't expect SFS to succeed on such a platform-specific implementation.) New file systems can also be implemented by replacing system shared libraries or even intercepting all of a process's system calls, as the UFO system does <ref> [2] </ref>. Both methods are appealing because they can be implemented by a completely unprivileged user. Unfortunately, it is hard to implement complete file system semantics using these methods (for instance, you can't hand off a file descriptor using sendmsg).
Reference: [3] <author> Thomas E. Anderson, Michael D. Dahlin, Jeanna M. Neefe, David A. Patterson, Drew S. Roseli, and Ran-dolph Y. Wang. </author> <title> Serverless network file systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(1) </volume> <pages> 41-79, </pages> <month> February </month> <year> 1996. </year> <booktitle> Also appears in Proceedings of the of the 15th Symposium on Operating System Principles. </booktitle>
Reference-contexts: Utilities to list and manipulate remote files with their remote user- and group-names would also prove quite useful. We may explore communication between clients. Insecure file systems such as xFS <ref> [3] </ref> have exploited client-to-client data transfers to improve the performance of shared files. Between mutually distrustful clients, this kind of cooperation opens up many interesting questions.
Reference: [4] <author> Eshwar Belani, Alex Thornton, and Min Zhou. </author> <title> Authentication and security in webfs. </title> <note> from http:/ /now.cs.berkeley.edu/WebOS/security.ps, Jan-uary 1997. </note>
Reference-contexts: Specifically, WebFS uses the HTTP protocol to transfer data between user-level HTTP servers and an in-kernel client file system implementation. This allows the contents of existing URLs to be accessed through the file system. WebFS attempts to provide authentication and security through a protocol layered over HTTP <ref> [4] </ref>; authentication requires a hierarchy of certification authorities. WebFS lets normal file utilities manipulate the contents of remote web sites. It does not, however, address any of HTTP's serious shortcomings as a file sharing protocol. HTTP transfers the entire contents of a file before allowing clients to issue more requests.
Reference: [5] <author> Mihir Bellare and Phillip Rogaway. </author> <title> The exact security of digital signatures|how to sign with RSA and Rabin. </title> <editor> In U. Maurer, editor, </editor> <booktitle> Advances in Cryptology|Eurocrypt 1996, volume 1070 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We may switch to a more compact notation such as base-36 (0-9 and a-z) before releasing SFS. SHA-1 is also used to compute the session ID and the answer to the user authentication challenge. We also use SHA-1 in conjunction with the PRab redundancy function <ref> [5] </ref> for digital sig natures. 6 connect Specifies the file system a client intends to mount. Returns a public key that hashes to Host ID. encrypt Begin encrypting the connection (must follow a connect). Returns the root file handle. login Begins authenticating a user.
Reference: [6] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, CO, 1995. </address> <publisher> ACM. </publisher>
Reference-contexts: Moreover, because most NFS server implementations are in the kernel, a few changes to an operating system's NFS code are all that is required to give WebNFS servers many of the performance benefits research systems like SPIN <ref> [6] </ref> get by downloading web servers into the kernel. Sun claims to have achieved an order of magnitude better performance from WebNFS than from an ordinary Web server.
Reference: [7] <author> A. D. Birrell and R. M. Needham. </author> <title> A universal file server. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(5):450-453, </volume> <month> September </month> <year> 1980. </year> <month> 18 </month>
Reference: [8] <author> Andrew D. Birrell, Andy Hisgen, Chuck Jerian, Tim--othy Mann, and Garret Swart. </author> <title> The Echo distributed file system. </title> <type> Technical Report 111, </type> <institution> Digital Systems Research Center, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: DFS [27] is a second generation file system based on AFS, in which a centrally maintained database determines all available file systems. The Echo distributed file system <ref> [8, 9, 31, 32] </ref> achieves secure global file access without global trust of the authentication root. Each Echo client and server attaches to a particular point in the global namespace, which also forms a hierarchy of trust.
Reference: [9] <author> Andrew D. Birrell, Butler W. Lampson, Roger M. Needham, and Michael D. Schroeder. </author> <title> A global authentication service without global trust. </title> <booktitle> In Proceedings of the 1986 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 223-230, </pages> <year> 1986. </year>
Reference-contexts: DFS [27] is a second generation file system based on AFS, in which a centrally maintained database determines all available file systems. The Echo distributed file system <ref> [8, 9, 31, 32] </ref> achieves secure global file access without global trust of the authentication root. Each Echo client and server attaches to a particular point in the global namespace, which also forms a hierarchy of trust.
Reference: [10] <author> Matt Blaze. </author> <title> A cryptographic file system for unix. </title> <booktitle> In 1st ACM Conference on Communications and Computing Security, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Several previous file systems have used NFS loop-back mounts <ref> [10, 17, 20] </ref>. These file systems all have new functionality which complements existing file systems and is valuable even at the cost of some performance. <p> SFS allows file sharing across the network without sacrificing the security of servers or their local file systems. It does not provide higher security than a local file system, or otherwise replace encrypting file systems such as CFS <ref> [10] </ref> which encrypt all data written to disk. Like most network services, SFS is vulnerable to denial of service attacks, such as SYN-bombing or large numbers of connections from the same client. More importantly, the very existence of a global file system raises new kinds of security concerns.
Reference: [11] <author> Matthew Blaze and Rafael Alonso. </author> <title> Dynamic hierarchical caching in large-scale distributed file systems. </title> <booktitle> In Proceedings of the 12th International Distributed Computing Systems Conference, </booktitle> <pages> pages 521-528, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This enforces a hard limit of 10 connections accepted per second, potentially preventing an SFS server from serving more than a few thousand clients. One possible solution would be to require large groups of clients to access SFS servers through a single trusted proxy; however, several studies <ref> [11, 33] </ref> have shown that such organization-wide caches have extremely poor hit rates. Another solution would be to replicate widely used servers; however, this would require widely distributing these servers' private keys|unacceptable if high security is a requirement.
Reference: [12] <author> Mark R. Brown, Karen N. Kolling, and Edward A. Taft. </author> <title> The Alpine file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(4) </volume> <pages> 261-293, </pages> <month> November </month> <year> 1985. </year>
Reference: [13] <author> Luis Felipe Cabrera and Jim Wyllie. </author> <title> Quicksilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Workstations, </booktitle> <year> 1988. </year>
Reference: [14] <author> B. Callaghan. </author> <title> WebNFS client specification. RFC 2054, Sun Microsystems, </title> <publisher> Inc., </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Truffles also relies on centralized, hierarchical certification authorities, naming users with X.500 distinguished names and requiring X.509 certificates for all users and servers. Recently, Sun has introduced some extensions to NFS called WebNFS <ref> [14, 15] </ref> and aimed at replacing HTTP. WebNFS optimizes connection setup relative to NFS, and also allows anonymous file access through a "public" file handle, in effect providing a global file system.
Reference: [15] <author> B. Callaghan. </author> <title> WebNFS server specification. RFC 2055, Sun Microsystems, </title> <publisher> Inc., </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Truffles also relies on centralized, hierarchical certification authorities, naming users with X.500 distinguished names and requiring X.509 certificates for all users and servers. Recently, Sun has introduced some extensions to NFS called WebNFS <ref> [14, 15] </ref> and aimed at replacing HTTP. WebNFS optimizes connection setup relative to NFS, and also allows anonymous file access through a "public" file handle, in effect providing a global file system.
Reference: [16] <author> Brent Callaghan and Tom Lyon. </author> <booktitle> The automounter. In Proceedings of the Winter 1989 USENIX, </booktitle> <pages> pages 43-51. </pages> <publisher> USENIX, </publisher> <year> 1989. </year>
Reference-contexts: Since we also wanted the pwd command to show full canonical pathnames, including a server's host ID, we could not simply use the solution employed by automounters of returning a symbolic link to an actual mount point in a different directory <ref> [16, 37] </ref>.
Reference: [17] <author> Vincent Cate. </author> <title> Alex|a global filesystem. </title> <booktitle> In Proceedings of the USENIX File System Workshop, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Several previous file systems have used NFS loop-back mounts <ref> [10, 17, 20] </ref>. These file systems all have new functionality which complements existing file systems and is valuable even at the cost of some performance.
Reference: [18] <author> Jeremy Dion. </author> <title> The Cambridge file server. </title> <journal> ACM SIGOPS Operating System Review, </journal> <volume> 14(4) </volume> <pages> 26-35, </pages> <month> Oct </month> <year> 1980. </year>
Reference: [19] <editor> FIPS 180-1. </editor> <title> Secure Hash Standard. </title> <type> U.S. </type> <institution> Department of Commerce/N.I.S.T, National Tecnical Information Service, Springfield, VA, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: We also hope to avoid US patent restrictions by using an algorithm other than RSA. We chose SHA-1 <ref> [19] </ref>, a collision-free hash function, to compute the public-key-hash used in pathnames of remote servers. The hash result is 160 bits long, which is currently expressed as 40 characters of hexadecimal digits in pathnames.
Reference: [20] <author> David K. Gifford, Pierre Jouvelot, Mark Sheldon, and James O'Toole. </author> <title> Semantic file systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 16-25, </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: Several previous file systems have used NFS loop-back mounts <ref> [10, 17, 20] </ref>. These file systems all have new functionality which complements existing file systems and is valuable even at the cost of some performance.
Reference: [21] <author> Cary G. Gray and David R. Cheriton. Leases: </author> <title> An efficient fault-tolerant mechanism for distributed file cache consistency. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles. ACM, </booktitle> <year> 1989. </year>
Reference-contexts: The fact that SFS client machines are untrusted produced a further restriction: we did not want to allow one misbehaving client to hang another client for unreasonable amounts of time. Our solution is a lease-based cache mechanism <ref> [21] </ref> where clients must hold a server-granted lease, with explicit expiration time, before 5 accessing any file. The SFS client cache stores three types of objects: file data, name lookups, and file attributes. Both successful and unsuccessful name lookups are cached.
Reference: [22] <author> Bjorn Gronvall, Ian Marsh, and Stephen Pink. </author> <title> A multicast-based distributed file system for the internet. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS Euro-pean Workshop, </booktitle> <pages> pages 95-102, </pages> <year> 1996. </year>
Reference: [23] <author> John S. Heidemann and Gerald J. Popek. </author> <title> File system development with stackable layers. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 58-89, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Echo also does not allow for any local namespace, and changes the meaning of the root directory| interesting ideas, but ones that would prevent it from coexisting easily with other file systems. The Tru*es service [40] is an extension of the Fi-cus file system <ref> [23] </ref> to operate securely across the Internet. Tru*es provides fine-grained access control with the interesting property that, policy permitting, a user can export files to any other user in 2 the world, without the need to involve administra-tors.
Reference: [24] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Second, the authentication information in RPC packets was not cryptographically tied to their contents, allowing attackers to tamper with request packets. Third, file data on the network was sent in cleartext, which may be acceptable for local area networks, but certainly will not work across the Internet. AFS <ref> [24, 46] </ref> is probably the most successful global file system to date. It provides a clean separation between the local and global namespace by mounting all remote file systems under a single directory, /afs.
Reference: [25] <author> Phil Karn and William Allen Simpson. </author> <title> The Pho-turis session key management protocol. Internet draft (draft-simpson-photuris-15), </title> <institution> Network Working Group, </institution> <month> July </month> <year> 1997. </year> <title> Work in progress. </title>
Reference-contexts: The plaintext echoing of N 0 has no effect on authentication proper, but can be used by the server to filter out certain denial-of-service attacks that would otherwise require significant CPU time due to the expense of public-key decryption <ref> [25] </ref>. After this initial stage, all traffic from C to S is encrypted with K cs and all traffic from S to C with K sc . The client can be sure it is talking to the server as only the server could have decrypted these session keys.
Reference: [26] <author> Kalle Kaukonen and Rodney Thayer. </author> <title> A stream cipher encryption algorithm "arcfour". Internet draft (draft-kaukonen-cipher-arcfour-01), </title> <institution> Network Working Group, </institution> <month> July </month> <year> 1997. </year> <title> Work in progress. </title>
Reference-contexts: a directory for which the client holds a lease. rename Notifies a client of a rename operation affecting a directory for which the client holds a lease. 7 The shared-key system used for data communication|that is, with K cs and K sc |is a combination of the Arcfour stream cipher <ref> [26] </ref> for secrecy and an SHA-1-based message authentication code (MAC) to detect any modification of network packets. We chose these algorithms for their strong security and high efficiency when implemented in software.
Reference: [27] <author> Michael L. Kazar, Bruce W. Leverett, Owen T. An-derson, Vasilis Apostolides, Beth A. Bottos, Sailesh Chutani, Craig F. Everhart, W. Anthony Mason, Shu-Tsui Tu, and Edward R. Zayas. </author> <title> DEcorum file system architectural overview. </title> <booktitle> In Proceedings of the Summer 1990 USENIX, </booktitle> <pages> pages 151-163. </pages> <publisher> USENIX, </publisher> <year> 1990. </year>
Reference-contexts: Though AFS can be compiled to encrypt network communications to servers on which users have accounts, the commercial binary distributions in widespread use do not offer any secrecy. DFS <ref> [27] </ref> is a second generation file system based on AFS, in which a centrally maintained database determines all available file systems. The Echo distributed file system [8, 9, 31, 32] achieves secure global file access without global trust of the authentication root.
Reference: [28] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: Note that if, after killing her agent, a user goes on to change the same file from another client machine, this may be the right behavior: the user's later changes will not be overwritten by her earlier ones. Using techniques developed for disconnected operation <ref> [28] </ref>, one could do better; we may in the future adopt such techniques. sfsrwcd needs to translate remote file permissions to something that makes sense on the local machine. This requires that it provide a per-user view of the file system.
Reference: [29] <author> S. R. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proceedings of the Summer 1986 USENIX, </booktitle> <pages> pages 238-247. </pages> <publisher> USENIX, </publisher> <year> 1986. </year>
Reference-contexts: There are several ways of implementing a new file system in Unix; one of the most attractive is to put the file system in the kernel at the vnode layer <ref> [29] </ref>. NFS, AFS, WebFS and local file systems like FFS are all implemented at the vnode layer. Unfortunately, while writing a file system at the vnode layer gives the highest performance and the most control, the vnode interface differs enough between operating systems that portability becomes a serious problem.
Reference: [30] <author> Brian A. LaMacchia and Andrew M. Odlyzko. </author> <title> Computation of discrete logarithms in prime fields. In Designs, </title> <booktitle> Codes and Cryptography 1, </booktitle> <pages> pages 47-62, </pages> <year> 1991. </year>
Reference-contexts: A later attempt to add security to NFS through secure RPC [55] had a very appealing design based on public key cryptography. Unfortunately, the protocol had several flaws. First, the public key lengths were far too short <ref> [30] </ref>. Second, the authentication information in RPC packets was not cryptographically tied to their contents, allowing attackers to tamper with request packets. Third, file data on the network was sent in cleartext, which may be acceptable for local area networks, but certainly will not work across the Internet.
Reference: [31] <author> Butler Lampson, Martn Abadi, Michael Burrows, and Edward P. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <year> 1992. </year>
Reference-contexts: DFS [27] is a second generation file system based on AFS, in which a centrally maintained database determines all available file systems. The Echo distributed file system <ref> [8, 9, 31, 32] </ref> achieves secure global file access without global trust of the authentication root. Each Echo client and server attaches to a particular point in the global namespace, which also forms a hierarchy of trust.
Reference: [32] <author> Timothy Mann, Andrew D. Birrell, Andy His-gen, Chuck Jerian, and Garret Swart. </author> <title> A coherent distrubuted file cache with directory write-behind. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(2) </volume> <pages> 123-164, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: DFS [27] is a second generation file system based on AFS, in which a centrally maintained database determines all available file systems. The Echo distributed file system <ref> [8, 9, 31, 32] </ref> achieves secure global file access without global trust of the authentication root. Each Echo client and server attaches to a particular point in the global namespace, which also forms a hierarchy of trust.
Reference: [33] <author> D. Muntz and P. Honeyman. </author> <title> Multi-level caching in distributed file systems, or your cache ain't nuthin' but trash. </title> <booktitle> In Proceedings of the Winter 1992 USENIX, </booktitle> <pages> pages 305-312. </pages> <publisher> USENIX, </publisher> <month> January </month> <year> 1992. </year>
Reference-contexts: This enforces a hard limit of 10 connections accepted per second, potentially preventing an SFS server from serving more than a few thousand clients. One possible solution would be to require large groups of clients to access SFS servers through a single trusted proxy; however, several studies <ref> [11, 33] </ref> have shown that such organization-wide caches have extremely poor hit rates. Another solution would be to replicate widely used servers; however, this would require widely distributing these servers' private keys|unacceptable if high security is a requirement.
Reference: [34] <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite network file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 134-154, </pages> <month> February </month> <year> 1988. </year>
Reference: [35] <author> J. Ousterhout, H. Da Costa, D. Harrison, J. A. Kunze, M. Kupfer, and J. G. Thompson. </author> <title> A trace-driven analysis of the Unix 4.2 BSD file system. </title> <booktitle> In 19 Proceedings of the 10th ACM Symposium on Oper--ating Systems Principles, </booktitle> <pages> pages 15-24, </pages> <address> Orcas Island, WA, </address> <month> December </month> <year> 1985. </year> <note> ACM. </note>
Reference-contexts: We deal with this problem in two ways. First, SFS does not perform write through on close operations; this was a conscious decision for performance based on the results of Ousterhout et al. <ref> [35] </ref>, which show that most files stay open only for short periods of time, thereby undermining the usefulness of write-back caching. In the future, if our reference implementation can count on operating systems supporting NFS version 3, we could duplicate the NFS semantics on close, if desired.
Reference: [36] <author> John K. Ousterhout. </author> <title> Why aren't operating systems getting faster as fast as hardware? In Summer USENIX '90, </title> <address> pages 247-256, Anaheim, CA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: While no special effort was made to reduce ambient network traffic, all experiments were run until at least three runs generated very similar results. The network was periodically monitored to ensure that the experiments do not represent performance artifacts. 6.2.2 Modified Andrew benchmark We ran the modified Andrew benchmark <ref> [36] </ref> on a local file system, NFS, and SFS with encryption. The timing results are shown in Figure 8. All experiments were run with a warm cache. SFS's data and meta-data cache and aggressive write-buffering make it faster than NFS on the MAB.
Reference: [37] <author> Jan-Simon Pendry. Amd anAutomounter. London, SW7 2BZ, </author> <title> UK. Manual comes with amd software distribution. </title>
Reference-contexts: Since we also wanted the pwd command to show full canonical pathnames, including a server's host ID, we could not simply use the solution employed by automounters of returning a symbolic link to an actual mount point in a different directory <ref> [16, 37] </ref>.
Reference: [38] <author> Michael O. Rabin. </author> <title> Digitalized signatures and public key functions as intractable as factorization. </title> <type> Technical Report TR-212, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> January </month> <year> 1979. </year>
Reference-contexts: Second, some method is required to limit the length of time a problem client can hold a write lock, since SFS does not trust client machines; leases present an attractive and simple alternative. 4.2 Algorithms We chose the Rabin-Williams public key system <ref> [38, 58] </ref> for SFS for several reasons. Like RSA, the Ra-bin algorithm depends on the difficulty of factoring. However, while there may exist an easier way of breaking RSA than by factoring the modulus, the Rabin cipher is provably as hard as factoring.
Reference: [39] <author> David Reed and Liba Svobodova. Swallow: </author> <title> A distributed data storage system for a local network. </title> <editor> In A. West and P. Janson, editors, </editor> <title> Local Networks for Computer Communications. </title> <publisher> North-Holland Publ., </publisher> <address> Amsterdam, </address> <year> 1981. </year>
Reference: [40] <author> Peter Reiher, Jr. Thomas Page, Gerald Popek, Jeff Cook, and Stephen Crocker. </author> <title> Tru*es | a secure service for widespread file sharing. </title> <booktitle> In Proceedings of the PSRG Workshop on Network and Distributed System Security, </booktitle> <year> 1993. </year>
Reference-contexts: Echo also does not allow for any local namespace, and changes the meaning of the root directory| interesting ideas, but ones that would prevent it from coexisting easily with other file systems. The Tru*es service <ref> [40] </ref> is an extension of the Fi-cus file system [23] to operate securely across the Internet. Tru*es provides fine-grained access control with the interesting property that, policy permitting, a user can export files to any other user in 2 the world, without the need to involve administra-tors. <p> It would be useful to allow users to grant file access to the holders of particular public keys without having to get an administrator to create a local account for each such person, as was permitted by Tru*es <ref> [40] </ref>. It would also be desirable to allow externally designated groups of users, so that, for instance, files can be exported to all employees of a company without the file server having to keep an explicit list of employee public keys.
Reference: [41] <author> Andrew P. Rifkin, Michael P. Forbes, Richard L. Hamilton, Michael Sabrio, Suryakanta Shah, and Kang Yueh. </author> <title> RFS architectural overview. </title> <booktitle> In Proceedings of the Summer 1986 USENIX, </booktitle> <pages> pages 248-259. </pages> <publisher> USENIX, </publisher> <year> 1986. </year>
Reference-contexts: To accomplish this, SFS disables the kernel's NFS attribute cache for all SFS file systems, allowing it to give different local users different views of the file system. SFS builds ID translation tables similar to those of RFS <ref> [41] </ref>. However, in SFS these tables are maintained dynamically and automatically, and are specific to each user.
Reference: [42] <author> Ronald L. Rivest and Butler Lampson. </author> <title> SDSI| a simple distributed security infrastructure. </title> <note> Version 1.0 of working document from http:// theory.lcs.mit.edu/~rivest/publications.html. </note>
Reference-contexts: To provide this binding without relying on naming authorities, SFS names file servers by their public keys, an approach similar in spirit to the SDSI public key infrastructure <ref> [42] </ref>. Each SFS file system is mounted on a directory named /sfs/Location:HostID. Location is a DNS host name; HostID is a cryptographic hash of the server's public key and hostname.
Reference: [43] <author> M. Rosenblum and J. Ousterhout. </author> <title> The design and implementation of a log-structured file system. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 1-15, </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: The SFS caches are successful in allowing it to avoid frequent decryption. These numbers confirm our experience in using SFS for document preparation and for compiling (often the sources to SFS itself). 6.2.3 Sprite LFS microbenchmarks The Sprite LFS microbenchmarks <ref> [43] </ref> do not represent any realistic file system workload, but they help isolate performance characteristics of the file system. The small file test creates 1,000 1KB files, reads them, and unlinks them all.
Reference: [44] <author> Russel Sandberg, David Goldberg, Steve Kleiman, Dan Walsh, and Bob Lyon. </author> <title> Design and implementation of the Sun network filesystem. </title> <booktitle> In Proceedings of the Summer 1985 USENIX, </booktitle> <pages> pages 119-130. </pages> <publisher> USENIX, </publisher> <year> 1985. </year>
Reference-contexts: While SFS's design goals have been met individually by previous projects, SFS is the first file system to provide security, a global namespace, and completely decentralized control at the same time. One of the file systems in most widespread use to day is Sun's NFS <ref> [44, 54] </ref>. NFS is purely a local-area file system; it doesn't perform well over wide area networks, and offers no security in the face of network eavesdropping. A later attempt to add security to NFS through secure RPC [55] had a very appealing design based on public key cryptography.
Reference: [45] <author> M. Satyanarayanan. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 247-280, </pages> <year> 1989. </year>
Reference: [46] <author> M. Satyanarayanan. </author> <title> Scalable, secure and highly available file access in a distributed workstation environment. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Second, the authentication information in RPC packets was not cryptographically tied to their contents, allowing attackers to tamper with request packets. Third, file data on the network was sent in cleartext, which may be acceptable for local area networks, but certainly will not work across the Internet. AFS <ref> [24, 46] </ref> is probably the most successful global file system to date. It provides a clean separation between the local and global namespace by mounting all remote file systems under a single directory, /afs.
Reference: [47] <author> Bruce Schneier. </author> <title> Description of a new variable-length key, 64-bit block cipher (blowfish). In Fast Software Encryption, </title> <booktitle> Cambridge Security Workshop Proceedings, </booktitle> <pages> pages 191-204. </pages> <publisher> Springer-Verlag, </publisher> <month> Decem-ber </month> <year> 1993. </year>
Reference-contexts: The remaining bytes are used for redundancy; they are set to zero before the file handle is encrypted with blowfish <ref> [47] </ref> in CFB mode. 5.6 Security issues The SFS client daemons exchange NFS packets with the kernel over the loopback network interface. They do so by listening for UDP packets at a port with the localhost IP address.
Reference: [48] <author> Michael D. Schroeder, David K. Gifford, and Roger M. Needham. </author> <title> A caching file system for a programmer's workstation. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 25-34, </pages> <address> Orcas Island, WA, </address> <month> December </month> <year> 1985. </year> <note> ACM. </note>
Reference: [49] <author> Alan B. Sheltzer and Gerald J. Popek. </author> <title> Internet Locus: Extending transparency to an Internet environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(11):1067-1075, </volume> <month> November </month> <year> 1986. </year>
Reference: [50] <author> R. Srinivasan. </author> <title> RPC: Remote procedure call protocol specification version 2. </title> <type> RFC 1831, </type> <institution> Network Working Group, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Supporting this event-driven architecture required building a new asynchronous RPC (ARPC) library. We chose to make this library compatible with Sun RPC <ref> [50] </ref> and the Sun XDR [51] marshaling routines generated by rpcgen. We also built an encrypting packet stream transport over TCP, and added a new base type of multiprecision integer (to facilitate public key messages).
Reference: [51] <author> R. Srinivasan. XDR: </author> <title> External data representation standard. </title> <type> RFC 1832, </type> <institution> Network Working Group, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Supporting this event-driven architecture required building a new asynchronous RPC (ARPC) library. We chose to make this library compatible with Sun RPC [50] and the Sun XDR <ref> [51] </ref> marshaling routines generated by rpcgen. We also built an encrypting packet stream transport over TCP, and added a new base type of multiprecision integer (to facilitate public key messages).
Reference: [52] <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller. Ker-beros: </author> <title> An authentication service for open network systems. </title> <booktitle> In Proceedings of the Winter 1988 USENIX. USENIX, </booktitle> <year> 1988. </year>
Reference-contexts: AFS also makes extensive use of client caching to achieve good performance on remote file systems, and doesn't trust client machines beyond their authenticated users. Unlike SFS, however, AFS client machines contain a fixed list of available servers that only a privileged administrator can update. AFS uses Kerberos <ref> [52] </ref> shared secrets to protect network traffic, and so cannot guarantee the integrity of file systems on which users do not have accounts.
Reference: [53] <author> H. Sturgis, J. Mitchell, and J. Israel. </author> <title> Issues in the design and use of a distributed file system. </title> <journal> ACM Operating Systems Review, </journal> <volume> 14(3) </volume> <pages> 55-69, </pages> <month> July </month> <year> 1980. </year>
Reference: [54] <author> Sun Microsystems, Inc. NFS: </author> <title> Network file system protocol specification. </title> <type> RFC 1094, </type> <institution> Network Working Group, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: While SFS's design goals have been met individually by previous projects, SFS is the first file system to provide security, a global namespace, and completely decentralized control at the same time. One of the file systems in most widespread use to day is Sun's NFS <ref> [44, 54] </ref>. NFS is purely a local-area file system; it doesn't perform well over wide area networks, and offers no security in the face of network eavesdropping. A later attempt to add security to NFS through secure RPC [55] had a very appealing design based on public key cryptography.
Reference: [55] <author> Bradley Taylor and David Goldberg. </author> <title> Secure networking in the Sun environment. </title> <booktitle> In Proceedings of the Summer 1986 USENIX, </booktitle> <pages> pages 28-37. </pages> <publisher> USENIX, </publisher> <year> 1986. </year>
Reference-contexts: NFS is purely a local-area file system; it doesn't perform well over wide area networks, and offers no security in the face of network eavesdropping. A later attempt to add security to NFS through secure RPC <ref> [55] </ref> had a very appealing design based on public key cryptography. Unfortunately, the protocol had several flaws. First, the public key lengths were far too short [30]. Second, the authentication information in RPC packets was not cryptographically tied to their contents, allowing attackers to tamper with request packets.
Reference: [56] <author> Amin M. Vahdat, Paul C. Eastha, and Thomas E. Anderson. WebFS: </author> <title> A global cache coherent file system. </title> <note> from http://www.cs.berkeley.edu/~vahdat/ webfs/webfs.html, </note> <month> December </month> <year> 1996. </year>
Reference-contexts: The small additions to NFS which constitute WebNFS greatly enhance its utility as a global file system, but do not address NFS's security problems. Instead of speeding up the Web by replacing HTTP with a well-known network file system protocol, WebFS <ref> [56] </ref> implements a network file system on top of the HTTP protocol. Specifically, WebFS uses the HTTP protocol to transfer data between user-level HTTP servers and an in-kernel client file system implementation. This allows the contents of existing URLs to be accessed through the file system.
Reference: [57] <author> Bruce Walker, Gerald Popek, Robert English, Charles Kline, and Greg Thiel. </author> <title> The LOCUS distributed operating system. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70. </pages> <publisher> ACM, </publisher> <year> 1983. </year>
Reference: [58] <author> Hugh. C. Williams. </author> <title> A modification of the RSA public-key encryption procedure. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-26(6):726-729, </volume> <month> Novem-ber </month> <year> 1980. </year>
Reference-contexts: Second, some method is required to limit the length of time a problem client can hold a write lock, since SFS does not trust client machines; leases present an attractive and simple alternative. 4.2 Algorithms We chose the Rabin-Williams public key system <ref> [38, 58] </ref> for SFS for several reasons. Like RSA, the Ra-bin algorithm depends on the difficulty of factoring. However, while there may exist an easier way of breaking RSA than by factoring the modulus, the Rabin cipher is provably as hard as factoring.
Reference: [59] <author> Tatu Ylonen. </author> <title> SSH secure login connections over the Internet. </title> <booktitle> In Proceedings of the 6th USENIX Security Symposium, </booktitle> <pages> pages 37-42, </pages> <month> July </month> <year> 1996. </year> <month> 20 </month>
Reference-contexts: When the authentication agent exits, the client machine flushes any cached data associated with that user and de-allocates any authentication numbers obtained through that agent. With this scheme, all user authentication after the initial agent registration takes place completely transparently. The SFS authentication protocol was inspired by ssh <ref> [59] </ref>, but with several fixes [1] and modifications. It takes place in two stages: first, authenticating the server to the client, and second, authenticating the user to the server, via the client.
References-found: 59

