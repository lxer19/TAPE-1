URL: http://www.cs.caltech.edu/~ps/papers/gi97/WCSFH.ps.gz
Refering-URL: http://www.cs.caltech.edu/~ps/papers/gi97/
Root-URL: http://www.cs.caltech.edu
Title: To increase drawing speed, the number of polygons drawn per frame needed to be reduced
Keyword: BSP trees, Virtual reality, Real-time graphics, Multiple levels-of-detail.  
Abstract: Transparent renderings of the volume data needed to be overlaid on the terrain to provide location cues and to give a better understanding of the effects of the terrain on the simulation. Combining transparent and opaque objects presented difficulties. The volume data could potentially intersect the terrain, so we could not just draw the terrain and then draw the volume data. There was no simple solution for the drawing order of the volume data. Alpha blending is a non-commutative operation, so transparent objects must be drawn in strictly back-to-front or front-to-back order. When volume data is organized in a single axis-aligned grid, a visible priority sort can be derived by correctly indexing the data. Unfortunately our data was generated by several simulations over different, overlapping grids. This eliminated most of the simple sorting options, and it presented the potential for intersecting transparent polygons, which are not handled correctly by sorting alone. This paper describes the algorithms and data structures we developed in solving the problems described above. Our results proved to be applicable beyond the scope of our initial problem to more general visualization systems. We handle multiple LOD representations along with correct rendering of complex transparent polygon sets without needing to explicitly sort the polygons for each frame. Our solution may be used in conjunction with a wide variety of LOD methods. The remainder of this paper is organized as follows. Section 2 reviews relevant prior work. Section 3 gives an overview of our approach. In Section 4 we define the Multiresolution BSP tree and show how to build it, and in Section 5 we show how to use our new data structure for rendering. In Section 6 we show how other LOD algorithms may be used within our system. Section 7 pro Abstract We present a system for incorporating multiple level of detail (LOD) models of 3D objects within a single hierarchical data structure. This system was designed for a scientific visualization application involving terrain and volume rendering. Our data structure is a modified Binary Space Partitioning (BSP) tree. We describe how our tree construction and traversal routines may be used with a variety of LOD methods. This is demonstrated with two different LOD methods: a new method specialized for terrain elevation height fields, and an existing method for general objects. Images, timings, and storage data for our implementation are provided. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Campbell, A. T., Fussell, D., </author> <title> Adaptive Mesh Generation for Global Diffuse Illumination, </title> <booktitle> Computer Graphics, Proceedings SIGGRAPH 1990, </booktitle> <volume> vol. 24, no. 4, </volume> <pages> pp. 155-164, </pages> <year> 1990. </year>
Reference-contexts: These are all fine for producing individual images, but none is fast enough for interaction. Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons. Developed for visible surface determination [6, 16, 17, 19, 30], they have been used in several systems that use static scenes <ref> [1, 2] </ref>, and in several dynamic virtual environments [3, 4, 31]. Previous work has not addressed the use of multiple LODs within the BSP tree. 3 Overview of Approach Our approach is based on the BSP tree, which has several advantages over a quadtree or grid.
Reference: [2] <author> Campbell, A. T., </author> <title> Modeling Global Diffuse Illumination for Image Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, the University of Texas at Austin, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: These are all fine for producing individual images, but none is fast enough for interaction. Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons. Developed for visible surface determination [6, 16, 17, 19, 30], they have been used in several systems that use static scenes <ref> [1, 2] </ref>, and in several dynamic virtual environments [3, 4, 31]. Previous work has not addressed the use of multiple LODs within the BSP tree. 3 Overview of Approach Our approach is based on the BSP tree, which has several advantages over a quadtree or grid.
Reference: [3] <author> Chrysanthou, Y., Slater, M., </author> <title> Computing Dynamic Changes to BSP Trees, </title> <booktitle> EUROGRAPHICS 1992, </booktitle> <volume> vol 11, no. 3, </volume> <pages> pp. 321-332, </pages> <year> 1992. </year>
Reference-contexts: Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons. Developed for visible surface determination [6, 16, 17, 19, 30], they have been used in several systems that use static scenes [1, 2], and in several dynamic virtual environments <ref> [3, 4, 31] </ref>. Previous work has not addressed the use of multiple LODs within the BSP tree. 3 Overview of Approach Our approach is based on the BSP tree, which has several advantages over a quadtree or grid.
Reference: [4] <author> Chrysanthou, Y., Slater, M., </author> <title> Shadow Volume BSP Trees for Computation of Shadows in Dynamic Scenes, </title> <booktitle> 1995 ACM Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 45-50, </pages> <year> 1995. </year>
Reference-contexts: Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons. Developed for visible surface determination [6, 16, 17, 19, 30], they have been used in several systems that use static scenes [1, 2], and in several dynamic virtual environments <ref> [3, 4, 31] </ref>. Previous work has not addressed the use of multiple LODs within the BSP tree. 3 Overview of Approach Our approach is based on the BSP tree, which has several advantages over a quadtree or grid.
Reference: [5] <author> DeHaemer, M., Zyda, M., </author> <title> Simplification of Objects Rendered by Polygonal Approximations, </title> <journal> Computers & Graphics, </journal> <volume> vol. 15, no. 2, </volume> <pages> pp. 175-184, </pages> <year> 1991. </year>
Reference-contexts: Thus visibility culling is not applicable. Among LOD algorithms are techniques that construct a triangular mesh that closely approximates a terrain surface while minimizing the number of triangles [22, 26, 28], adaptive subdivision to fit a set of polygons to a surface <ref> [5] </ref>, and decimation to remove vertices [7, 24]. Approaches that decide when to use the simplified models include a method to maintain a minimum frame rate while providing the best possible image [7], using distance from the viewpoint as a decision metric [36], and using hybrid metric functions [11, 13].
Reference: [6] <author> Fuchs, H., Kedem, Z., and Naylor, B., </author> <title> On Visible Surface Generation by A Priori Tree Structures, </title> <booktitle> Computer Graphics, Proceedings SIGGRAPH 1980, </booktitle> <volume> vol. 14, no. 3, </volume> <pages> pp. 124-133, </pages> <year> 1980. </year>
Reference-contexts: These are all fine for producing individual images, but none is fast enough for interaction. Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons. Developed for visible surface determination <ref> [6, 16, 17, 19, 30] </ref>, they have been used in several systems that use static scenes [1, 2], and in several dynamic virtual environments [3, 4, 31].
Reference: [7] <author> Funkhouser, T., Sequin, C., </author> <title> Adaptive Display Algorithm for Interactive Frame Rates During Visualization of Complex Virtual Environments, </title> <booktitle> Computer Graphics, Proceedings SIGGRAPH 1993, </booktitle> <pages> pp. 247-254, </pages> <year> 1993. </year>
Reference-contexts: 78712 Fred Hudson IBM Austin Division, 11400 Burnet Road, Austin, TX 78758 vides implementation details and test results, and in Section 8 we present our conclusions and discuss directions for future work. 2 Previous Work Algorithms for reducing the number of polygons drawn may be broadly classified into visibility culling <ref> [7, 8] </ref> and level of detail (LOD) [9] methods. For our application all views of interest are from the exterior, and the majority of scene surfaces are visible at all times. Thus visibility culling is not applicable. <p> Thus visibility culling is not applicable. Among LOD algorithms are techniques that construct a triangular mesh that closely approximates a terrain surface while minimizing the number of triangles [22, 26, 28], adaptive subdivision to fit a set of polygons to a surface [5], and decimation to remove vertices <ref> [7, 24] </ref>. Approaches that decide when to use the simplified models include a method to maintain a minimum frame rate while providing the best possible image [7], using distance from the viewpoint as a decision metric [36], and using hybrid metric functions [11, 13]. <p> Approaches that decide when to use the simplified models include a method to maintain a minimum frame rate while providing the best possible image <ref> [7] </ref>, using distance from the viewpoint as a decision metric [36], and using hybrid metric functions [11, 13]. None of this work has addressed transparent objects in the scene. Most virtual world or simulation systems use a location-based approach to segmenting the terrain model [11, 13, 20, 36, 37].
Reference: [8] <author> Greene, N., Kass, M., Miller, G., </author> <title> Hierarchical Z-Buffer Visibility, </title> <booktitle> Computer Graphics, Proceedings SIGGRAPH 1993, </booktitle> <pages> pp. 231-236, </pages> <year> 1993. </year>
Reference-contexts: 78712 Fred Hudson IBM Austin Division, 11400 Burnet Road, Austin, TX 78758 vides implementation details and test results, and in Section 8 we present our conclusions and discuss directions for future work. 2 Previous Work Algorithms for reducing the number of polygons drawn may be broadly classified into visibility culling <ref> [7, 8] </ref> and level of detail (LOD) [9] methods. For our application all views of interest are from the exterior, and the majority of scene surfaces are visible at all times. Thus visibility culling is not applicable.
Reference: [9] <author> Heckbert, P., Garland, M., </author> <title> Multiresolution Modeling for Fast Rendering, </title> <booktitle> Proceedings of Graphics Interface 1994, </booktitle> <pages> pp. 43-50, </pages> <year> 1994. </year>
Reference-contexts: Burnet Road, Austin, TX 78758 vides implementation details and test results, and in Section 8 we present our conclusions and discuss directions for future work. 2 Previous Work Algorithms for reducing the number of polygons drawn may be broadly classified into visibility culling [7, 8] and level of detail (LOD) <ref> [9] </ref> methods. For our application all views of interest are from the exterior, and the majority of scene surfaces are visible at all times. Thus visibility culling is not applicable.
Reference: [10] <author> Kajiya, J., Kay, T., </author> <title> Rendering Fur with Three Dimensional Textures, </title> <booktitle> Computer Graphics, Proceedings SIGGRAPH 1989, </booktitle> <volume> vol. 23, no. 3, </volume> <pages> pp. 165-174, </pages> <year> 1989. </year>
Reference-contexts: These approaches work well for scenes containing only terrain, but do not handle the addition of arbitrarily-oriented polygons. Previous volume visualization systems rely on methods that explicitly sort the primitives based on distance from the viewpoint [14, 15, 25, 33] or on ray-tracing <ref> [10, 27] </ref> or splatting [32, 35, 12]. These are all fine for producing individual images, but none is fast enough for interaction. Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons.
Reference: [11] <author> Koller, D., Lindstrom, P., Ribarsky, W., Hodges, L., Faust, N., Turner, G., </author> <title> Virtual GIS: A Real-Time 3D Geographic Information System, Graphics, </title> <institution> Visualization and Usability Center Georgia Institute of Technology Tech Report 95-14, </institution> <year> 1995. </year>
Reference-contexts: Approaches that decide when to use the simplified models include a method to maintain a minimum frame rate while providing the best possible image [7], using distance from the viewpoint as a decision metric [36], and using hybrid metric functions <ref> [11, 13] </ref>. None of this work has addressed transparent objects in the scene. Most virtual world or simulation systems use a location-based approach to segmenting the terrain model [11, 13, 20, 36, 37]. Typical data structures are grids and quadtrees. <p> None of this work has addressed transparent objects in the scene. Most virtual world or simulation systems use a location-based approach to segmenting the terrain model <ref> [11, 13, 20, 36, 37] </ref>. Typical data structures are grids and quadtrees. The grid approach has a single level structure based on a single resolution. The quadtree approach is based on a recursive subdivision of space, wherein each area is divided into four quadrants recursively until reaching some minimum resolution.
Reference: [12] <author> Laur, D., Hanrahan, P., </author> <title> Hierarchical Splatting: </title>
Reference-contexts: These approaches work well for scenes containing only terrain, but do not handle the addition of arbitrarily-oriented polygons. Previous volume visualization systems rely on methods that explicitly sort the primitives based on distance from the viewpoint [14, 15, 25, 33] or on ray-tracing [10, 27] or splatting <ref> [32, 35, 12] </ref>. These are all fine for producing individual images, but none is fast enough for interaction. Binary Space Partitioning (BSP) trees facilitate quick back-to-front ordering of scene polygons.
References-found: 12

