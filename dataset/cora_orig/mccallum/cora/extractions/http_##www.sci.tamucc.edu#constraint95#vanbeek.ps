URL: http://www.sci.tamucc.edu/constraint95/vanbeek.ps
Refering-URL: http://www.sci.tamucc.edu/constraint95/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: vanbeek@cs.ualberta.ca  
Title: A Theoretical Evaluation of Selected Backtracking Algorithms  
Author: Grzegorz Kondrak and Peter van Beek 
Address: Edmonton, Alberta, Canada T6G 2H1  
Affiliation: Department of Computing Science University of Alberta  
Abstract: In recent years, many new backtracking algorithms for solving constraint satisfaction problems have been proposed. The algorithms are usually evaluated by empirical testing. This method, however, has its limitations. Our paper adopts a different, purely theoretical approach, which is based on characterizations of the sets of search tree nodes visited by the backtracking algorithms. A notion of inconsistency between instantiations and variables is introduced, and is shown to be a useful tool for characterizing such well-known concepts as backtrack, backjump, and domain annihilation. The characterizations enable us to: (a) prove the correctness of the algorithms, and (b) partially order the algorithms according to two standard performance measures: the number of nodes visited, and the number of consistency checks performed. Among other results, we prove, for the first time, the correctness of Backjumping and Conflict-Directed Backjumping, and show that Forward Checking never visits more nodes than Backjumping. Our approach leads us also to propose a modification to two hybrid backtracking algorithms, Back-marking with Backjumping (BMJ) and Backmarking with Conflict-Directed Back-jumping (BM-CBJ), so that they always perform fewer consistency checks than the original algorithms.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Bitner and E. Reingold. </author> <title> Backtrack programming techniques. </title> <journal> Comm. ACM, </journal> <volume> 18(11): </volume> <pages> 651-656, </pages> <year> 1975. </year>
Reference-contexts: Backtracking search is one of the methods of solving constraint networks. The generic backtracking algorithm was first described more than a century ago, and since then has been rediscovered many times <ref> [1] </ref>. In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking [3], Backjumping [4], Forward Checking [5], and Conflict-Directed Backjumping [10]. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. <p> We consider two backtracking algorithms to be equivalent if on every constraint network they generate the same backtrack tree and perform the same consistency checks. Chronological Backtracking (BT) <ref> [1] </ref> is the generic backtracking algorithm. The consistency checks between the instantiation of the current variable and the instantiations of the past variables are performed according to the original order of instantiations. If a consistency check fails, the next domain value of the current variable is tried.
Reference: [2] <author> R. Dechter. </author> <title> Enhancement schemes for constraint processing: Backjumping, learning, and cutset decomposition. </title> <journal> Artificial Intelligence, </journal> <volume> 41(3) </volume> <pages> 273-312, </pages> <year> 1990. </year>
Reference-contexts: One of the modified algorithms is always better (in terms of consistency checks) than all six backward checking algorithms described by Prosser in [10]. In the future the hierarchies could be extended by applying our approach to other backtracking algorithms, such as Dechter's graph-based back-jumping algorithm <ref> [2] </ref> and Nadel's backtracking algorithm with full arc-consistency lookahead [8].
Reference: [3] <author> J. Gaschnig. </author> <title> A general backtracking algorithm that eliminates most redundant tests. </title> <booktitle> In Proc. of the Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> page 457, </pages> <year> 1977. </year>
Reference-contexts: Backtracking search is one of the methods of solving constraint networks. The generic backtracking algorithm was first described more than a century ago, and since then has been rediscovered many times [1]. In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking <ref> [3] </ref>, Backjumping [4], Forward Checking [5], and Conflict-Directed Backjumping [10]. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. There is no simple answer to the question which backtracking algorithm is the best one. <p> Therefore, our results hold also for the "one solution" versions of the backtracking algorithms, with only slightly modified proofs. 4 Hybrid Algorithms with Backmarking In this section we briefly discuss Backmarking <ref> [3] </ref> and its two hybrids. We propose a modification to the hybrids, and then include these algorithms in our hierarchies. Backmarking (BM) imposes a marking scheme on the Chronological Backtracking algorithm in order to eliminate some redundant consistency checks.
Reference: [4] <author> J. Gaschnig. </author> <title> Experimental case studies of backtrack vs. waltz-type vs. new algorithms for satis-ficing assignment problems. </title> <booktitle> In Proc. of the 2nd Biennial Conf. of the Canadian Soc. for Comput. Studies of Intell., </booktitle> <pages> pages 268-277, </pages> <year> 1978. </year>
Reference-contexts: Backtracking search is one of the methods of solving constraint networks. The generic backtracking algorithm was first described more than a century ago, and since then has been rediscovered many times [1]. In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking [3], Backjumping <ref> [4] </ref>, Forward Checking [5], and Conflict-Directed Backjumping [10]. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. There is no simple answer to the question which backtracking algorithm is the best one. <p> If all checks succeed, the branch is extended by instantiating the next variable to each of the values in its domain. A solution is recorded every time when all consistency checks succeed after the last variable has been instantiated. Backjumping (BJ) <ref> [4] </ref> is similar to BT, except that it behaves more efficiently when no consistent instan-tiation can be found for the current variable (at a dead-end). Instead of chronologically backtracking to the preceding variable, BJ backjumps to the highest past variable that was checked against the current variable.
Reference: [5] <author> R. M. Haralick and G. L. Elliot. </author> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-314, </pages> <year> 1980. </year>
Reference-contexts: The generic backtracking algorithm was first described more than a century ago, and since then has been rediscovered many times [1]. In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking [3], Backjumping [4], Forward Checking <ref> [5] </ref>, and Conflict-Directed Backjumping [10]. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. There is no simple answer to the question which backtracking algorithm is the best one. First, the performance of backtracking algorithms depends heavily on the problem being solved. <p> At the same time, the conflict set of x i is absorbed by the conflict set of x h , so that no information about conflicts is lost. In contrast with the above backward checking algorithms, Forward Checking (FC) <ref> [5] </ref> performs consistency checks forward, that is, between the current variable and the future variables. After the current variable has been instantiated, the domains of the future variables are filtered in such a way that all values inconsistent with the current instantiation are removed.
Reference: [6] <author> G. Kondrak. </author> <title> A theoretical evaluation of selected backtracking algorithms. </title> <type> Technical Report TR94-10, </type> <institution> University of Alberta, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: We deal with the more general problem of finding all solutions; at the end of the section we briefly comment on the validity of our results when only one solution is sought. The proofs that are not included here can be found in <ref> [6] </ref>. Lemma 1 If BJ backtracks to variable x h from a dead-end at variable x i then (a 1 ; : : : ; a h ) is inconsistent with x i . <p> Imposing a marking scheme on a backtracking algorithm results in a reduction of the number of consistency checks performed. The figure contains also one Forward Checking hybrid: Forward Checking and Conflict-Directed Backjumping (FC-CBJ) [10], which has not been discussed here. For a treatment of FC-CBJ see <ref> [6] </ref>. Besides the relationships that are shown explicitly, it is important to note the ones that are implicit in the picture.
Reference: [7] <author> U. Montanari. </author> <title> Networks of constraints: Fundamental properties and applications to picture processing. </title> <journal> Information Sciences, </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: Definition 1 A binary constraint network <ref> [7] </ref> consists of a set of n variables fx 1 ; : : : ; x n g; their respective value domains, D 1 ; : : : ; D n ; and a set of binary constraints.
Reference: [8] <author> B. </author> <title> Nadel. Constraint satisfaction algorithms. </title> <journal> Comput. Intell., </journal> <volume> 5 </volume> <pages> 188-224, </pages> <year> 1989. </year>
Reference-contexts: Two of these algorithms, Backjumping (BJ) and Conflict-Directed Backjumping (CBJ) have not been proven before. The orderings proved also to be a stimulus for developing more efficient backtracking algorithms. The idea of combining Backjumping and Backmarking into a new hybrid algorithm was first put forward by Nadel <ref> [8] </ref>. Such algorithm, called BMJ, was presented by Prosser [10]. BMJ, however, does not retain all the power of both base algorithms in terms of consistency checks. Prosser observed that on some instances of the zebra problem BMJ performs more consistency checks than BM. <p> We propose a modification to the hybrids, and then include these algorithms in our hierarchies. Backmarking (BM) imposes a marking scheme on the Chronological Backtracking algorithm in order to eliminate some redundant consistency checks. The scheme is based on the following two observations <ref> [8] </ref>: (a) If at the most recent node where a given instantia-tion was checked the instantiation failed against some past instantiation that has not yet changed, then it will fail against it again. <p> The entry mcl [i][j] contains the number of the highest variable that was checked against the j-th value in the domain of the variable x i . Nadel <ref> [8] </ref> suggested combining BM and BJ into a new hybrid algorithm. Prosser presented such algorithm, called Backmarking and Backjumping (BMJ), in [10]. BMJ, however, does not retain all the power of each base algorithm in terms of consistency checks. <p> For example, BM performs fewer consistency checks than FC on the regular 8-queens problem, but more on the confused 8-queens problem <ref> [8] </ref>. Examples of constraint networks were found that disprove all relationships that are not included in the hierarchies. Thus, however counterintuitive it may seem, FC-CBJ may visit more nodes than CBJ, and perform more consistency checks than BT. 6 Conclusions We presented a theoretical analysis of several backtracking algorithms. <p> In the future the hierarchies could be extended by applying our approach to other backtracking algorithms, such as Dechter's graph-based back-jumping algorithm [2] and Nadel's backtracking algorithm with full arc-consistency lookahead <ref> [8] </ref>.
Reference: [9] <author> B. Nudel. </author> <title> Consistent labeling problems and their algorithms: Expected complexities and theory based heuristics. </title> <journal> Artificial Intelligence, </journal> <volume> 21 </volume> <pages> 135-178, </pages> <year> 1983. </year>
Reference-contexts: Another standard measure is the number of nodes in the backtrack tree generated by an algorithm. The need for ordering algorithms according to their efficiency has been recognized before. Nudel <ref> [9] </ref> ordered backtracking algorithms according to their average-case performance. Prosser [10] performed a series of experiments to evaluate nine backtracking algorithms against each other. However, such an approach is open to the criticism that the test problems are not representative of the problems that arise in practice.
Reference: [10] <author> P. Prosser. </author> <title> Hybrid algorithms for the constraint satisfaction problem. </title> <journal> Comput. Intell., </journal> <volume> 9(3) </volume> <pages> 268-299, </pages> <year> 1993. </year>
Reference-contexts: The generic backtracking algorithm was first described more than a century ago, and since then has been rediscovered many times [1]. In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking [3], Backjumping [4], Forward Checking [5], and Conflict-Directed Backjumping <ref> [10] </ref>. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. There is no simple answer to the question which backtracking algorithm is the best one. First, the performance of backtracking algorithms depends heavily on the problem being solved. <p> In recent years, many new backtracking algorithms have been proposed. The basic ones include Back-marking [3], Backjumping [4], Forward Checking [5], and Conflict-Directed Backjumping <ref> [10] </ref>. Several hybrid algorithms, which combine two or more basic algorithms, have also been developed [10]. There is no simple answer to the question which backtracking algorithm is the best one. First, the performance of backtracking algorithms depends heavily on the problem being solved. <p> Another standard measure is the number of nodes in the backtrack tree generated by an algorithm. The need for ordering algorithms according to their efficiency has been recognized before. Nudel [9] ordered backtracking algorithms according to their average-case performance. Prosser <ref> [10] </ref> performed a series of experiments to evaluate nine backtracking algorithms against each other. However, such an approach is open to the criticism that the test problems are not representative of the problems that arise in practice. <p> The orderings proved also to be a stimulus for developing more efficient backtracking algorithms. The idea of combining Backjumping and Backmarking into a new hybrid algorithm was first put forward by Nadel [8]. Such algorithm, called BMJ, was presented by Prosser <ref> [10] </ref>. BMJ, however, does not retain all the power of both base algorithms in terms of consistency checks. Prosser observed that on some instances of the zebra problem BMJ performs more consistency checks than BM. <p> Instead of chronologically backtracking to the preceding variable, BJ backjumps to the highest past variable that was checked against the current variable. Conflict-Directed Backjumping (CBJ) <ref> [10] </ref> has a more sophisticated backjumping behaviour than BJ. Every variable has its own conflict set that contains the past variables which failed consistency checks with its current instantiation. <p> However, if we restrict our attention to only those of the search tree nodes that precede (in the preorder 2 Backjumping was first presented without formal proof and the suggested future work was to prove that it is a valid algorithm [11]. Recently, a reviewer of <ref> [10] </ref> commented: "I am not convinced that BJ or CBJ are sound! [Gaschnig's original algorithm] was never proved to be correct" [11]. traversal) the last node visited by a backtracking al-gorithm, the theorems are still valid. <p> The entry mcl [i][j] contains the number of the highest variable that was checked against the j-th value in the domain of the variable x i . Nadel [8] suggested combining BM and BJ into a new hybrid algorithm. Prosser presented such algorithm, called Backmarking and Backjumping (BMJ), in <ref> [10] </ref>. BMJ, however, does not retain all the power of each base algorithm in terms of consistency checks. Prosser observed that on some instances of the zebra problem BMJ performs more consistency checks than BM. BMJ is also worse than BM on the benchmark 8-queens problem. <p> Imposing a marking scheme on a backtracking algorithm results in a reduction of the number of consistency checks performed. The figure contains also one Forward Checking hybrid: Forward Checking and Conflict-Directed Backjumping (FC-CBJ) <ref> [10] </ref>, which has not been discussed here. For a treatment of FC-CBJ see [6]. Besides the relationships that are shown explicitly, it is important to note the ones that are implicit in the picture. <p> The gaps in the resulting hierarchy prompted us to modify existing hybrid algorithms so that they are superior to the corresponding basic algorithms in every case. One of the modified algorithms is always better (in terms of consistency checks) than all six backward checking algorithms described by Prosser in <ref> [10] </ref>. In the future the hierarchies could be extended by applying our approach to other backtracking algorithms, such as Dechter's graph-based back-jumping algorithm [2] and Nadel's backtracking algorithm with full arc-consistency lookahead [8].
Reference: [11] <author> P. Prosser. </author> <type> Personal communication, </type> <year> 1994. </year>
Reference-contexts: However, if we restrict our attention to only those of the search tree nodes that precede (in the preorder 2 Backjumping was first presented without formal proof and the suggested future work was to prove that it is a valid algorithm <ref> [11] </ref>. Recently, a reviewer of [10] commented: "I am not convinced that BJ or CBJ are sound! [Gaschnig's original algorithm] was never proved to be correct" [11]. traversal) the last node visited by a backtracking al-gorithm, the theorems are still valid. <p> the preorder 2 Backjumping was first presented without formal proof and the suggested future work was to prove that it is a valid algorithm <ref> [11] </ref>. Recently, a reviewer of [10] commented: "I am not convinced that BJ or CBJ are sound! [Gaschnig's original algorithm] was never proved to be correct" [11]. traversal) the last node visited by a backtracking al-gorithm, the theorems are still valid.
References-found: 11

