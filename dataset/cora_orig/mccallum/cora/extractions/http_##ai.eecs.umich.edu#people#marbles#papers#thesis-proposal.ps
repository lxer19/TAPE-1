URL: http://ai.eecs.umich.edu/people/marbles/papers/thesis-proposal.ps
Refering-URL: http://ai.eecs.umich.edu/people/marbles/homepage.html
Root-URL: http://www.cs.umich.edu
Email: Co-advisors:  
Title: Thesis Proposal: Reasoning About and In Time when Building Plans for Safe, Fully-Automated Aircraft Flight  
Author: Ella M. Atkins Edmund H. Durfee and Kang G. Shin Edmund Durfee, Kang Shin, Dan Koditschek, Mike Wellman, and N. Harris McClamroch 
Degree: Thesis Committee:  
Address: 1101 Beal Ave. Ann Arbor, MI 48109  
Affiliation: University of Michigan  
Abstract-found: 0
Intro-found: 1
Reference: = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
Reference: [1] <author> E. M. Atkins, E. H. Durfee, and K. G. Shin, </author> " <title> Detecting and Reacting to Unplanned-for World States," </title> <booktitle> Proceedings of AAAI Fall Symposium on Plan Execution: Problems and Issues, </booktitle> <pages> pp. 1-7, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: The algorithms to build lists for deadend, removed, and imminent-failure states are described in detail in <ref> [1] </ref>. To summarize, CIRCA builds a list of each class of unhandled state, then uses ID3 [24] with that unhandled state list as the set of positive examples and a subset of the reachable states (depending on unhandled state type) as the set of negative examples. <p> Using these basic emergency situations, variations of the knowledge base allowed tests of each algorithm to detect and handle the classes of unplanned-for states (as described in Section 3.2.2 and <ref> [1] </ref>), as well as tests of CIRCAs model of probability (as described in Section 3.2.1 and [2]). In both emergency situations, CIRCA was able to notice the problem and react appropriately, replanning for a go-around procedure when gear failed and extending pattern legs to avoid collision-course traffic.
Reference: [2] <author> E. M. Atkins, E. H. Durfee, and K. G. Shin, </author> <title> "Plan Development in CIRCA using Local Probabilistic Models," </title> <booktitle> Uncertainty in Artificial Intelligence: Proceedings of the Twelfth Conference, </booktitle> <pages> pp. 49-56, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: First, we implemented a model of probability in which individual state probabilities are computed using temporal transition probability functions and expected action execution delays. This model and its uses to-date are described below (Section 3.2.1) and in <ref> [2] </ref>. 23 To minimize the planners set of expanded states as well as improve plan schedulability, CIRCA selects only those states it considers reachable, and is satisfied so long as at least one path reaches a goal state. <p> Pinit P1 P2 tt Pn i=1 Pi Pinit b) Non-preemptive Action Planned. Pinit P1 P2 tt Pn i=1 Pi Pinit The algorithm in Table 3-1 is used to locally compute probabilities for each reachable state. A more detailed description of the algorithm is provided in <ref> [2] </ref>. <p> Anytime Planning using Best-First Search In the original version of CIRCA, search proceeded depth-first, so there was no guarantee that the resulting goal path was any more desirable than other possible goal paths. Reference <ref> [2] </ref> discusses the basic conversion to best-first search based solely on state probability estimates. However, in this work, best is based completely on state probability, with state expansion occurring in decreasing order of state probability. <p> Using these basic emergency situations, variations of the knowledge base allowed tests of each algorithm to detect and handle the classes of unplanned-for states (as described in Section 3.2.2 and [1]), as well as tests of CIRCAs model of probability (as described in Section 3.2.1 and <ref> [2] </ref>). In both emergency situations, CIRCA was able to notice the problem and react appropriately, replanning for a go-around procedure when gear failed and extending pattern legs to avoid collision-course traffic.
Reference: [3] <author> C. Boutilier and R. Dearden, </author> <title> Using Abstractions for Decision-Theoretic Planning with Time Constraints, </title> <booktitle> Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 1016-1022, </pages> <year> 1994. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area <ref> [3] </ref>, [7], [11], [12], [15], [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
Reference: [4] <author> D. J. Brudnicki and D. B. Kirk, </author> <title> Trajectory Modeling for Automated En Route Air Traffic Control (AERA), </title> <booktitle> Proceedings of the American Control Conference, </booktitle> <pages> pp. 3425-3429, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Given this current capability, why is the pilot still around? In summary, airline pilots are around to enhance safety and to coordinate with air traffic controllers (a task which is in the process of being partially automated by others <ref> [4] </ref>, [32]). Current FMS work fine under normal flight circumstances, but the pilots still must manually reprogram or override the FMS and fly manually when any of a great number of anomalies occur during flight.
Reference: [5] <author> A. R. Cassandra, L. P. Kaelbling, and M. L. Littman, </author> <title> "Acting Optimally in Partially Observable Stochastic Domains," </title> <booktitle> Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <year> 1994. </year>
Reference-contexts: However, a typical real-world domain model will produce a very complex MDP [18]. Also, in some cases, the Markov assumption [27] 2 required for an MDP is difficult to satisfy, at which time the MDP becomes partially observable (a POMDP <ref> [5] </ref>), and even more difficult to solve [5]. <p> However, a typical real-world domain model will produce a very complex MDP [18]. Also, in some cases, the Markov assumption [27] 2 required for an MDP is difficult to satisfy, at which time the MDP becomes partially observable (a POMDP <ref> [5] </ref>), and even more difficult to solve [5].
Reference: [6] <author> T. L. Dean, </author> <title> Decision Theoretic Planning and Markov Decision Processes, </title> <booktitle> a tutorial presented at the Summer Institute on Probability and Artificial Intelligence, </booktitle> <address> Corvalis, Oregon, </address> <year> 1994. </year> <note> (Found at http://www.cs.brown.edu/people/tld/ </note> ) 
Reference-contexts: However, often discretized feature value boundaries are artificial devices used to promote tractability when modeling or working with continuous quantities (e.g., fuel quantity in an aircraft), in which case much information is lost. Researchers have proposed planners using techniques such as Markov Decision Processes (MDP) <ref> [6] </ref> to produce states corresponding with constant discrete time steps (Dt) in the real world. And, in several simplified cases, these models can be shown to have desirable properties, including computational tractability and the ability to accurately model changes in discrete state features over time. <p> In Section 3.3, I describe an approach by which one can combine CIRCAs current probability model with the other extreme: a Markov Decision Process (MDP) based model <ref> [6] </ref> in which all states have an explicit time 22 stamp. The MDP model contains a more accurate model of state changes over time, but such a model significantly increases planning complexity over our current model. Initial work to better address temporal aspect 2) has also begun. <p> I propose that adding a time stamp to each state is a better way to solve this problem. Markov Decision Processes (MDP) <ref> [6] </ref> employ a model which attaches a time stamp to each state. In this manner, there are never cycles in statespace, since any one value of time can occur only once. Figure 3-11 shows how the aircraft holding pattern problem would map to an MDP model.
Reference: [7] <author> T. L. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson, </author> <title> Planning with Deadlines in Stochastic Domains, </title> <booktitle> Proceedings of AAAI, </booktitle> <pages> pp. 574-579, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], <ref> [7] </ref>, [11], [12], [15], [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires. <p> For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], <ref> [7] </ref>, [11], [12], [15], [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires. <p> I propose an approach to limiting planner deliberation time that combines elements from design-to-time [9] and anytime <ref> [7] </ref> algorithms. As shown in Figure 3-13, upon receipt of a state for which plans must be developed online, the planner first computes available deliberation time. This quantity is used in a design-to-time fashion to set up CIRCA planning parameters.
Reference: [8] <author> R. E. Fikes, and N. J. Nilsson, </author> <title> STRIPS: a new approach to the application of theorem proving to problem solving, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 2, no. </volume> <pages> 3-4, pp. 189-208, </pages> <year> 1971. </year> <month> 86 </month>
Reference-contexts: At its inception, AI planning research focused only on modeling discrete changes in high-level quantities, such as those found in the blocks world and robot planning STRIPS examples <ref> [8] </ref>, rather than modeling them as functions of time. Todays AI researchers have recognized the importance of accurately handling time during planning, and have responded via mechanisms such as those to impose limits on planner deliberation time. <p> I have begun work toward limiting planning time by incorporating an approximate but relatively fast computational model of probability within the planner. The existing CIRCA probability model is discussed in Section 3.2. Unfortunately, there are key approximations in STRIPS-based planners <ref> [8] </ref> that carry through to our existing probability model (which has been placed within a STRIPS-like planner).
Reference: [9] <author> A. J. Garvey and V. R. Lesser, </author> <title> Design-to-time real-time scheduling, </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> vol. 23 no. 6, </volume> <pages> pp. 1491-1502, </pages> <year> 1993. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], [11], [12], [15], [33], and [35]. Instead, I plan to use a combination of design-to-time <ref> [9] </ref> and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires. <p> Of course, these assumptions need to be addressed in detail before CIRCA can be relied upon to always produce plans in a timely fashion, so I discuss future work on each in Section 3.4. I propose an approach to limiting planner deliberation time that combines elements from design-to-time <ref> [9] </ref> and anytime [7] algorithms. As shown in Figure 3-13, upon receipt of a state for which plans must be developed online, the planner first computes available deliberation time. This quantity is used in a design-to-time fashion to set up CIRCA planning parameters.
Reference: [10] <author> M. L. Ginsberg, </author> <title> "Universal Planning: An (Almost) Universally Bad Idea," </title> <journal> AI Magazine, </journal> <volume> vol. 10, no. 4, </volume> <year> 1989. </year>
Reference-contexts: Based on the assumption that it is infeasible to either build or schedule Universal Plans [30] to handle all states (as discussed in <ref> [10] </ref>), CIRCA minimized planner memory and time usage by expanding only states produced by transitions from initial states or their descendants. State expansion terminated whenever all features of the specified goal state were reached in at least one reachable state while avoiding all failure states.
Reference: [11] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This schedule was then executed on a separate real-time processor. Figure 1 shows the general architecture of the CIRCA system. The AI subsystem (AIS) contained the planner and scheduler. The "shell" around all AIS operations consisted of meta-rules controlling a set of knowledge areas, similar to the PRS architecture <ref> [11] </ref>. <p> For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], <ref> [11] </ref>, [12], [15], [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
Reference: [12] <author> E. Horvitz and M. Barry, </author> <title> Display of Information for Time-Critical Decision Making, </title> <booktitle> Proceedings of UAI-95, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], [11], <ref> [12] </ref>, [15], [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
Reference: [13] <author> Krishna and K. G. Shin, </author> <title> Real-Time Systems, </title> <publisher> McGraw-Hill, </publisher> <year> 1996. </year>
Reference-contexts: Also, the state fed back to planner and executor is not a set of sensor values, but instead processed sensor data that has been abstracted to the format used to represent state in the planner and knowledge base. 4.1.2 Real-Time Systems Real-time algorithms <ref> [13] </ref> focus their efforts on allocating computational resources to provide guarantees regarding system performance. As shown in Figure 4-2, typical input includes a set of tasks to be executed, along with a set of execution constraints. Tasks correspond with sets of functions that will require system resources.
Reference: [14] <author> B. C. Kuo, </author> <title> Automatic Control Systems, sixth edition, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: However, as shown in Figure 4-2, the real-time system assumes task specification in the form of a specific set of constraints such as deadlines, etc., as well as assuming that execution platform computational resources are predictable and easily measured. 4.1.3 Control Systems control system <ref> [14] </ref>. The input to the system includes a reference trajectory (r (t)) to be tracked and sensor feedback (y (t)) from the plant (or environment). The output from the system is a set of actuator commands (u (t)) which operate on the plant. <p> how CIRCA can be used to plan reactions to key emergencies that would simply be ignored by a controller blindly following a preset reference trajectory, as described below in Section 5.2.3. 5.2.2 Aircraft Controller I interfaced the ACM F-16 flight simulator [25] to a set of linear Proportional-Derivative (P-D) controllers <ref> [14] </ref> to calculate actuator values that achieve the commanded reference altitude and heading.
Reference: [15] <author> N. K. Kushmerick, S. Hanks, D. Weld, </author> <title> An Algorithm for Probabilistic Least-Commitment Planning, </title> <booktitle> Proc. of AAAI, </booktitle> <pages> pp. 1073-1078, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], [11], [12], <ref> [15] </ref>, [33], and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
Reference: [16] <author> D. A. Lawrence and W. J. Rugh, </author> <title> Gain Scheduling Dynamic Linear Controllers for a Nonlinear Plant, </title> <journal> Automatica, </journal> <volume> vol. 31, no. 3, </volume> <pages> pp. 381-390, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: These controllers then use aircraft-specific feedback control laws for achieving these commands. Since aircraft dynamics are highly nonlinear, these controllers are difficult to specify for wide ranges of reference inputs. Techniques such as gain scheduling <ref> [16] </ref> allow local linearization of the system, which facilitates the computation of controller parameters. Due to the nonlinear and tightly-coupled nature of the reference command attributes, only certain combinations of state (r (t) = roll, pitch, airspeed, thrust) may be successfully achieved. <p> Eventually, the aircraft control system may be composed of nonlinear and/or linear feedback controllers which are automatically invoked by methods such as the current gain scheduling <ref> [16] </ref> and its variants (e.g., [26]) or methods like the neural-network-based approach described in [29]. With an advanced set of such controllers, the control system itself will be able to detect and correct for low-level sensor or actuator anomalies.
Reference: [17] <author> S. Liden, </author> <title> The Evolution of Flight Management Systems, </title> <booktitle> Proceedings of the 1994 IEEE/AIAA Thirteenth Digital Avionics Systems Conference, IEEE, </booktitle> <pages> pp. 157-169, </pages> <year> 1995. </year>
Reference-contexts: The FAA sets stringent standards, but they cannot screen out all pilots who might possibly commit some erroneous act. To date, the technical approach has been to improve cockpit Flight Management Systems (FMS) <ref> [17] </ref> to minimize pilot error in tasks which can be easily handled with available technology. As a start, such systems were built so that a pilot need not worry about mistakes in mundane tasks such as fuel calculations and holding an altitude during cruise. <p> In this section, I describe the capabilities and limitations of state-of-the-art FMS. As described in <ref> [17] </ref>, current FMS have two basic components: the Flight Management Computer (FMC) and the Control and Display Unit (CDU). The FMC is responsible for all aircraft computational and control tasks, while the CDU serves as the main interface between cockpit crew and FMS. <p> In this section, I focus on FMS tasks that are applicable to a fully-automated aircraft, since no pilot interface would be required. For more details of FMS tasks related to user interfacing, see <ref> [17] </ref>. Several basic functions are performed by the FMC: Flight planning, Navigation, Performance Optimization, Performance Prediction, and Guidance. Figure 5-1 shows the computation modules of the FMS and how they are connected. I briefly describe each below; more details are provided in [17] and [31]. <p> of FMS tasks related to user interfacing, see <ref> [17] </ref>. Several basic functions are performed by the FMC: Flight planning, Navigation, Performance Optimization, Performance Prediction, and Guidance. Figure 5-1 shows the computation modules of the FMS and how they are connected. I briefly describe each below; more details are provided in [17] and [31]. Performance Prediction Guidance Control Flight Planning Pilot ATC Performance Optimization aircraft data r (t) Navigation Sensor data Nav Radio Tuning u (t) attitude, thrust sensor data plan descent profile x, x reference . wind . <p> Subsidiary functions are also provided in this module, primarily to provide information to the pilot or support the FMS flight performance optimizations described above. These subsidiary functions are time-consuming <ref> [17] </ref>, and are strictly done on a best-effort basis as background processes. Quantities computed from these background processes include predictions of nearest alternate airports, descent path generation (to determine the inflight location to begin the initial descent from cruise), etc. <p> During a normal diverting procedure, replanning will not be overly time-limited, since the aircraft is flying away from the storm. Normal FMS flight plans contain a trajectory to one alternate airport should the destination airport close <ref> [17] </ref>. However, if a large weather system results in multiple airport closings, the FMS will not have planned a route for any other airport.
Reference: [18] <author> M. L. Littman, T. L. Dean, and L. P. Kaelbling, </author> <title> On the Complexity of Solving Markov Decision Problems, </title> <booktitle> Proceedings of UAI-95, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: And, in several simplified cases, these models can be shown to have desirable properties, including computational tractability and the ability to accurately model changes in discrete state features over time. However, a typical real-world domain model will produce a very complex MDP <ref> [18] </ref>. Also, in some cases, the Markov assumption [27] 2 required for an MDP is difficult to satisfy, at which time the MDP becomes partially observable (a POMDP [5]), and even more difficult to solve [5].
Reference: [19] <author> C. B. McVey, </author> <title> Development of Feedback for Real-Time Scheduling and Planning in CIRCA, Directed Study Report, </title> <institution> University of Michigan, </institution> <month> December </month> <year> 1996. </year> <month> 87 </month>
Reference-contexts: To-date, I have modified CIRCA to handle a variety of new circumstances, including multiple subgoals, unhandled states (to be described), and probabilistic state transition models. Concurrent work <ref> [19] </ref> has allowed parallel execution of the scheduler and planner. <p> This metalevel KA structure has now been removed from the code, and the AIS has been split into two components: the Planning Subsystem and the Scheduling Subsystem, as shown in Figure 2-3. As discussed in <ref> [19] </ref>, the scheduler was split from the planner so the two could execute in parallel, and the scheduler code was enhanced to provide helpful numerical feedback to the AIS regarding plan schedulability, as opposed to the yes/no answer given in the past. <p> The contingency plan storage capabilities will facilitate scheduling, since we now will be able to have multiple plans with plan switch guarantees instead of a single plan only. However, I will be looking at contingency plans from the completeness perspective, leaving work on scheduling issues for others. Reference <ref> [19] </ref> describes ongoing modifications to the scheduler-planner interface that will further improve CIRCAs ability to build schedulable plans. 3.2 Research Completed My initial research efforts have involved improving CIRCAs ability to schedule plans and select viable goal paths, even with imprecise knowledge. <p> In the future, if the scheduler remains NP-complete, the anytime approach proposed for planning may be extended to include both the planner and scheduler, with appropriate tradeoffs used to assess the utility of continued planning versus starting the scheduler with the existing action set. Others <ref> [19] </ref>, [21] have worked to optimize the CIRCA scheduler so that it is relatively fast given TAP maximum periods and worst-case execution times. <p> Heuristics include reducing TAP maximum periods to shorten the required schedule length (based on the least common multiple of all assigned TAP periods), and performing utilization and conflict checks prior to scheduling so that failures may be identified early. Ongoing research efforts <ref> [19] </ref> are beginning to allow relaxation of worst-case requirements for low-priority (or utility) TAPS 47 to help the scheduler succeed. <p> I improved CIRCAs ability to find a schedulable plan by allowing the removal of improbable states (and any associated guaranteed actions), while others <ref> [19] </ref> have enhanced the scheduling procedures and scheduler-planner feedback to allow the planner to better reason about how a plan needs to change before attempting to schedule again. <p> Although issues in guaranteeing response times for the planner deliberation time calculation process, scheduling, and plannerscheduler negotiations <ref> [19] </ref> still need to be addressed (as discussed in Section 3.4), I believe the combination of methods proposed in this document will provide the basic links between the planning / plan execution processes and real-time scheduling / execution system. 4.4 Interfacing Planning and Control Systems In this section, I describe how <p> Any new planner put into CIRCA would still need to reason about the real-time requirements of planned actions so the interface to the scheduler could be nearly identical to the current interface <ref> [19] </ref>. Unfortunately, switching the planner may require different knowledge base structures, so both environmental and controller properties would need to be modified to fit into the new knowledge base. <p> Others <ref> [19] </ref> have described work that will still needs to be done with respect to testing the CIRCA planner - scheduler interface. I believe the key 61 to testing the other interfaces is to build a more complex knowledge base and controller set, then run a very diverse set of tests. <p> In both emergency situations, CIRCA was able to notice the problem and react appropriately, replanning for a go-around procedure when gear failed and extending pattern legs to avoid collision-course traffic. Recent tests <ref> [19] </ref> have used the CIRCA aircraft flight knowledge base to illustrate planner-scheduler negotiations, using extended traffic avoidance maneuvers plus some additional highly-improbable events (e.g., flight into a tornado) to overload the scheduler. Due to the knowledge base extensions in [19], CIRCA can now avoid traffic via a standard avoidance maneuver at <p> Recent tests <ref> [19] </ref> have used the CIRCA aircraft flight knowledge base to illustrate planner-scheduler negotiations, using extended traffic avoidance maneuvers plus some additional highly-improbable events (e.g., flight into a tornado) to overload the scheduler. Due to the knowledge base extensions in [19], CIRCA can now avoid traffic via a standard avoidance maneuver at any position in the pattern.
Reference: [20] <author> D. J. Musliner, E.H. Durfee, and K.G. Shin, </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans", </title> <journal> Artificial Intelligence, </journal> <volume> vol. 74, no. 1, </volume> <pages> pp. 83-127, </pages> <year> 1995. </year>
Reference-contexts: The Cooperative Intelligent Real-time Control Architecture (CIRCA) <ref> [20] </ref>, [22] combines a traditional AI planner, scheduler, and real-time plan execution module to provide guaranteed performance for the control of complex real-world systems. <p> For my thesis work, I propose a future version of CIRCA that will allow a more realistic treatment of temporal issues associated with limited planning deliberation time and reasoning accurately about the world. 2.1 Background The CIRCA system <ref> [20] </ref>, [22] was designed to provide guarantees about system performance even with limited sensing, actuating, and processing power. When controlling a complex system in a dynamic environment, a real-time plan execution system may not have sufficient resources to be able to react in all situations. <p> CIRCA builds plans for a set of sequential subgoals (determined by the user now; proposed in Section 2.3 to be created automatically in the future). In some domains, these subgoals may be structured so that the system will indefinitely remain safe while the planner builds its next subgoal plan <ref> [20] </ref>. However, in dynamic domains such as aircraft flight, CIRCA would be limited to one subgoal for the entire flight if CIRCA required indefinite safety within each subgoal plan.
Reference: [21] <author> D. J. Musliner, </author> <title> Scheduling Issues Arising from Automated Real-Time System Design,. </title> <institution> University of Maryland Technical Report CS-TR-3364, UMIACS-TR-94-118, </institution> <year> 1994. </year>
Reference-contexts: When the AIS planner created a TAP, it stored an 12 associated execution deadline, which is used by a distance-constrained scheduler <ref> [21] </ref> to create a periodic TAP schedule that guarantees system safety when TTFs are present. <p> In the future, if the scheduler remains NP-complete, the anytime approach proposed for planning may be extended to include both the planner and scheduler, with appropriate tradeoffs used to assess the utility of continued planning versus starting the scheduler with the existing action set. Others [19], <ref> [21] </ref> have worked to optimize the CIRCA scheduler so that it is relatively fast given TAP maximum periods and worst-case execution times. <p> This flexibility is in part due to the decision to place the controller in CIRCAs environment, then express controller functionality in terms of planner features, state transistions, and associated action scoring functions. 60 affecting the rest of the system, since the main output is an ordered list specifying the schedule <ref> [21] </ref>. Natural extensions to CIRCAs real-time scheduling capabilities include the implementation of algorithms to perform task allocation and to schedule additional resources (e.g., network traffic, I/O) as well as CPU usage.
Reference: [22] <author> D. J. Musliner, </author> <title> CIRCA: The Cooperative Intelligent Real-Time Control Architecture, </title> <type> Ph.D. Thesis, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1993. </year>
Reference-contexts: The Cooperative Intelligent Real-time Control Architecture (CIRCA) [20], <ref> [22] </ref> combines a traditional AI planner, scheduler, and real-time plan execution module to provide guaranteed performance for the control of complex real-world systems. <p> For my thesis work, I propose a future version of CIRCA that will allow a more realistic treatment of temporal issues associated with limited planning deliberation time and reasoning accurately about the world. 2.1 Background The CIRCA system [20], <ref> [22] </ref> was designed to provide guarantees about system performance even with limited sensing, actuating, and processing power. When controlling a complex system in a dynamic environment, a real-time plan execution system may not have sufficient resources to be able to react in all situations. <p> Finally, maintaining an ABS module may help the system with predictive sufficiency issues 15 <ref> [22] </ref> by giving the ABS scheduled autonomy to sample the environment with sufficient frequency such that current feature values are always available, thus optimizing the number of actual sensor reads performed. 1 Currently, the ABS still reads feature values from the environment each time the RTS requests a value, but I <p> CIRCA would build the state diagram shown in Figure 3-10. Define minD as in <ref> [22] </ref>: the minimum delay before which a temporal transition can occur, corresponding with the maximum action response time allowable for preempting the transition. Note that in our current probabilistic model, minD is the time at which a temporal transitions probability exceeds some small value e. <p> For this example, the MDP would create new states that would look like exact copies of these states (except for the time stamps), complete with preemption, until the time stamp 6 Reference <ref> [22] </ref> addresses the problem of a persistent temporal transition, but the author only considers the case where there is a clear path along which CIRCA can backtrack. <p> Once the best action 57 has been selected, the CIRCA planner computes the periodic timing requirements for that action based on TTFs, then uses this value during computation of all descendant state probabilities. In previous versions of CIRCA <ref> [22] </ref>, action scoring was based on lookahead search.
Reference: [23] <author> NTSB/ARC-94/02, </author> <title> Annual Review of Aircraft Accident Data: </title> <type> U.S. </type> <institution> Air Carrier Operations Calendar Year 1992, National Transportation Safety Board, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: NTSB (National Transportation Safety Board) accident report statistics <ref> [23] </ref> show that pilot error is at least a contributing factor in the vast majority of aviation accidents in the United States.
Reference: [24] <author> J. R. Quinlan, </author> <title> "Induction of Decision Trees," </title> <journal> Machine Learning, </journal> <volume> vol. 1, </volume> <pages> pp. 81-106, </pages> <year> 1986. </year>
Reference-contexts: Typical tests to determine system state involved reading sensors and comparing the sensed values with certain preset thresholds, while actions involved sending actuator commands or transferring data between CIRCA modules. CIRCA minimized the set of TAP tests using ID3 <ref> [24] </ref>, using a list of all states in which that TAP action should be executed as positive examples and all other expanded states as negative examples. <p> The algorithms to build lists for deadend, removed, and imminent-failure states are described in detail in [1]. To summarize, CIRCA builds a list of each class of unhandled state, then uses ID3 <ref> [24] </ref> with that unhandled state list as the set of positive examples and a subset of the reachable states (depending on unhandled state type) as the set of negative examples.
Reference: [25] <author> R. Rainey, </author> <title> ACM: The Aerial Combat Simulation for X11. </title> <month> February </month> <year> 1994. </year>
Reference-contexts: of navigation, guidance, and control modules, and many years of work specifying flight knowledge and testing the system, an FMS may be developed that will produce far fewer errors than are produced in human-piloted aircraft today, even in emergency situations. 70 5.2 Current CIRCA Aircraft Model The Aerial Combat (ACM) <ref> [25] </ref> Flight Simulator has been used for all CIRCA aircraft domain tests to-date. ACM simulates an F-16 aircraft, using a six degree-of-freedom nonlinear dynamic model to compute aircraft motion parameters given the complement of actuator inputs. <p> These models are very simple, but they illustrate how CIRCA can be used to plan reactions to key emergencies that would simply be ignored by a controller blindly following a preset reference trajectory, as described below in Section 5.2.3. 5.2.2 Aircraft Controller I interfaced the ACM F-16 flight simulator <ref> [25] </ref> to a set of linear Proportional-Derivative (P-D) controllers [14] to calculate actuator values that achieve the commanded reference altitude and heading.
Reference: [26] <author> O. R. Reynolds, H. Pachter, and C. H. Houpis, </author> <title> Full Envelope Flight Control System Design using Qualitative Feedback Theory, </title> <journal> Journal of Guidance, Control, and Dynamics, </journal> <volume> vol. 29, no. 1, </volume> <pages> pp. 23-29, </pages> <month> January-February </month> <year> 1996. </year>
Reference-contexts: Eventually, the aircraft control system may be composed of nonlinear and/or linear feedback controllers which are automatically invoked by methods such as the current gain scheduling [16] and its variants (e.g., <ref> [26] </ref>) or methods like the neural-network-based approach described in [29]. With an advanced set of such controllers, the control system itself will be able to detect and correct for low-level sensor or actuator anomalies.
Reference: [27] <author> S. J. Russell and P. Norvig, </author> <title> Artificial Intelligence: A Modern Approach, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1995. </year>
Reference-contexts: However, a typical real-world domain model will produce a very complex MDP [18]. Also, in some cases, the Markov assumption <ref> [27] </ref> 2 required for an MDP is difficult to satisfy, at which time the MDP becomes partially observable (a POMDP [5]), and even more difficult to solve [5]. <p> These system descriptions are used in later sections to show how the three systems can be usefully combined. 4.1.1 AI Planning Systems <ref> [27] </ref>. System input is some sort of userspecified domain knowledge, which may be represented in the form of rules or transitions, preferences, fitness functions, etc.
Reference: [28] <author> E. D. Sacerdoti, </author> <title> Planning in a Hierarchy of Abstraction Spaces, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 5, no. 2, </volume> <pages> pp. 115-135, </pages> <year> 1974. </year>
Reference-contexts: However, planning problem size will be limited by problem decomposability (i.e., the necessity to have plans that guarantee safety for extended periods of time). Perfecting subgoaling algorithms is not the emphasis of my research, so I will implement a rather simple procedure (similar to ABSTRIPS <ref> [28] </ref>) that will most likely require future enhancements not proposed here.
Reference: [29] <author> R. M. Sanner and J. J. E. Slotine, </author> <title> Function Approximation, 'Neural' Networks, and Adaptive Nonlinear Control, </title> <booktitle> Proceedings of the IEEE Conference on Control Applications, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1225-1232, </pages> <year> 1994. </year>
Reference-contexts: Eventually, the aircraft control system may be composed of nonlinear and/or linear feedback controllers which are automatically invoked by methods such as the current gain scheduling [16] and its variants (e.g., [26]) or methods like the neural-network-based approach described in <ref> [29] </ref>. With an advanced set of such controllers, the control system itself will be able to detect and correct for low-level sensor or actuator anomalies.
Reference: [30] <author> M. J. Schoppers, </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year> <month> 88 </month>
Reference-contexts: This original planner used lookahead search to select actions and backtracked if the action did not ultimately help achieve a subgoal or avoid catastrophic failure (e.g., aircraft crash). Based on the assumption that it is infeasible to either build or schedule Universal Plans <ref> [30] </ref> to handle all states (as discussed in [10]), CIRCA minimized planner memory and time usage by expanding only states produced by transitions from initial states or their descendants.
Reference: [31] <author> J. M. Schreur, </author> <title> B737 Flight Management Computer Flight Plan Trajectory Computation and Analysis, </title> <booktitle> Proceedings of the American Control Conference, </booktitle> <pages> pp. 3419-3429, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Several basic functions are performed by the FMC: Flight planning, Navigation, Performance Optimization, Performance Prediction, and Guidance. Figure 5-1 shows the computation modules of the FMS and how they are connected. I briefly describe each below; more details are provided in [17] and <ref> [31] </ref>. Performance Prediction Guidance Control Flight Planning Pilot ATC Performance Optimization aircraft data r (t) Navigation Sensor data Nav Radio Tuning u (t) attitude, thrust sensor data plan descent profile x, x reference . wind .
Reference: [32] <author> R. A. Slattery, </author> <title> Terminal Area Trajectory Synthesis for Air Traffic Control Automation, </title> <booktitle> Proceedings of the American Control Conference, </booktitle> <pages> pp. 1206-1210, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Given this current capability, why is the pilot still around? In summary, airline pilots are around to enhance safety and to coordinate with air traffic controllers (a task which is in the process of being partially automated by others [4], <ref> [32] </ref>). Current FMS work fine under normal flight circumstances, but the pilots still must manually reprogram or override the FMS and fly manually when any of a great number of anomalies occur during flight.
Reference: [33] <author> J. Tash and S. Russell, </author> <title> Control Strategies for a Stochastic Planner, </title> <booktitle> Proceedings of AAAI, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1079-1085, </pages> <year> 1994. </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], [11], [12], [15], <ref> [33] </ref>, and [35]. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
Reference: [34] <author> D. Tilden, </author> <title> GPS and Air Traffic Control: Start with a Clean Sheet of Paper, </title> <journal> Proceedings of ION GPS, </journal> <volume> vol. 1, </volume> <pages> pp. 909-911, </pages> <year> 1994. </year>
Reference-contexts: As airspace becomes more crowded and corridors are not so clearly defined (e.g., free flight using GPS <ref> [34] </ref>), it may become prohibitive to store all possible flight plans in a preexisting database. Instead, it may become a better policy to build a set of flight plans (primary and backup) using a more general knowledge base, based on the specific departure and destination airports for the upcoming flight.
Reference: [35] <author> S. Zilberstein, </author> <title> "Real-Time Robot Deliberation by Compilation and Monitoring of Anytime Algorithms," </title> <booktitle> AAAI Conference, </booktitle> <pages> pp. 799-809, </pages> <year> 1994 </year>
Reference-contexts: For temporal aspect 1), I have no intentions of inventing a revolutionary algorithm to reason about deliberation time, particularly since many others are concentrating their research efforts in this area [3], [7], [11], [12], [15], [33], and <ref> [35] </ref>. Instead, I plan to use a combination of design-to-time [9] and anytime [7] strategies, modifying the planner such that it can dynamically alter planner parameters to control expanded statespace size and halt search if time expires.
References-found: 36

