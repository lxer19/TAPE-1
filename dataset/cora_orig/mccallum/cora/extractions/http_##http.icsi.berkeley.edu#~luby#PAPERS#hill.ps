URL: http://http.icsi.berkeley.edu/~luby/PAPERS/hill.ps
Refering-URL: http://http.icsi.berkeley.edu/~luby/crypto.html
Root-URL: http://http.icsi.berkeley.edu
Title: A PSEUDORANDOM GENERATOR FROM ANY ONE-WAY FUNCTION  
Author: JOHAN H ASTAD RUSSELL IMPAGLIAZZO LEONID A. LEVIN AND MICHAEL LUBY 
Keyword: Key words. one-way function, pseudorandom generator, cryptography, complexity theory  
Note: AMS subject classifications. 68P25, 68Q25, 68Q99  
Abstract: Pseudorandom generators are fundamental to many theoretical and applied aspects of computing. We show how to construct a pseudorandom generator from any one-way function. Since it is easy to construct a one-way function from a pseudorandom generator, this result shows that there is a pseudorandom generator if and only if there is a one-way function. 
Abstract-found: 1
Intro-found: 1
Reference: [ACGS88] <author> Alexi, W., Chor, B., Goldreich, O., Schnorr, </author> <title> C.P., RSA Rabin Functions: Certain Parts Are As Hard As the Whole, </title> <journal> SIAM J. on Comp., </journal> <volume> 17 (1988), </volume> <pages> pp. 194-209. </pages>
Reference-contexts: shown in [GL89].) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. [GMT82] and [Yao82] show how to construct a pseudorandom generator based on the difficulty of factoring, and this was substantially simplified in <ref> [ACGS88] </ref>. When f is a one-way permutation, the task of inverting f (x) is to find x. In the case when f is not a permutation, the natural extension of successful inversion to finding any x 0 such that f (x 0 ) = f (x).
Reference: [BFNW96] <author> Babai, B., Fortnow, L., Nisan, N., Wigderson, A., </author> <title> BPP has Subexponential Time Simulations unless EXPTIME has Publishable Proofs, </title> <journal> Complex. Th., </journal> <volume> 3 (1993), </volume> <pages> pp. 307-318. </pages>
Reference-contexts: The results on deterministic simulation were subsequently generalized in [BH89], <ref> [BFNW96] </ref>. Since the conditions are rather stringent, it is not easy to come up with a natural candidate for a pseudorandom generator. On the other hand, there seem to be a variety of natural examples of another basic primitive; the one-way function.
Reference: [BBR88] <author> Bennett, C., Brassard, G., Robert, J., </author> <title> Privacy Amplification by Public Discussion, </title> <journal> Siam J. on Comp., </journal> <volume> 17 (1988), No. 2, </volume> <pages> pp. 210-229. </pages>
Reference-contexts: There, D is the uniform distribution on a set S f0; 1g n with ]S = 2 m n . The papers [McIn87] and <ref> [BBR88] </ref> also proved similar lemmas. For the special case of linear hash functions, this lemma can be derived from [GL89] by considering unlimited adversaries. A generalization to a broader class of hash functions appears in [IZ89].
Reference: [Blum84] <author> Blum, M., </author> <title> Independent Unbiased Coin Flips From a Correlated Biased Source: A Finite State Markov Chain, </title> <booktitle> 25 th IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1984, </year> <pages> pp. 425-433. </pages>
Reference-contexts: various studies for extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See <ref> [Blum84] </ref>, [SV86], [V87], [VV85], [CG88], and [McIn87].) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random
Reference: [BM82] <author> Blum, M., and Micali, S., </author> <title> How to Generate Cryptographically Strong Sequences of Pseudo-Random Bits, </title> <journal> SIAM J. on Comp., </journal> <volume> 13 (1984), </volume> <pages> pp. 850-864. </pages>
Reference-contexts: The notion of randomness tests for a string evolved over time: from set-theoretic tests to enumerable [K65], recursive and finally limited time tests. Motivated by cryptographic applications, the seminal paper <ref> [BM82] </ref> introduces the idea of a generator which produces its output in polynomial time such that its output passes a general polynomial time test. The fundamental paper [Yao82] introduced the definition of a pseudorandom generator most commonly used today, and proves that this definition and the original of [BM82] are equivalent. <p> seminal paper <ref> [BM82] </ref> introduces the idea of a generator which produces its output in polynomial time such that its output passes a general polynomial time test. The fundamental paper [Yao82] introduced the definition of a pseudorandom generator most commonly used today, and proves that this definition and the original of [BM82] are equivalent. The robust notion of a pseudorandom generator, due to [BM82], [Yao82], should be contrasted with the classical methods of generating random looking bits as described in, e.g., [Knuth97]. <p> The fundamental paper [Yao82] introduced the definition of a pseudorandom generator most commonly used today, and proves that this definition and the original of <ref> [BM82] </ref> are equivalent. The robust notion of a pseudorandom generator, due to [BM82], [Yao82], should be contrasted with the classical methods of generating random looking bits as described in, e.g., [Knuth97]. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. <p> Research supported by NSERC grant A8092, and NSF grants CCR-9016468 and CCR-9304722. 2 A pseudorandom generator from any one-way function ticular statistical tests and the stronger requirement that it pass all feasible tests is particularly important in the context of many applications. As pointed out by <ref> [BM82] </ref>, in cryptographic applications the adversary must be assumed to be as malicious as possible, with the only restriction on tests being computation time. A pseudorandom generator can be directly used to design a private key cryptosystem secure against all such adversaries. <p> The paper <ref> [BM82] </ref> is the first to construct a pseudorandom generator based on a one-way function. They introduce an elegant construction that shows how to construct a pseudorandom generator based on the presumed difficulty of the discrete logarithm problem. <p> The current paper is a combination of the results announced in the conference papers [ILL89] and [H90]. 1.1. Concepts and tools. Previous methods, following <ref> [BM82] </ref>, rely on constructing a function that has an output bit that is computationally unpredictable given the other bits of the output, but is nevertheless statistically correlated with these other bits. [GL89] provide a simple and natural input bit which is hidden from (a padded version of) any one-way function. <p> This idea is used in the original construction of a pseudorandom generator from the discrete logarithm problem <ref> [BM82] </ref> and has been central to all such constructions since that time. Definition 3.10 (hidden bit). Let f : f0; 1g t n ! f0; 1g ` n and b : f0; 1g t n ! f0; 1g be P-time function ensembles.
Reference: [BH89] <author> Boppana, R., Hirschfeld, R., </author> <title> Pseudo-random generators and complexity classes in Advances in Comp. Research, </title> <editor> S. Micali, ed., </editor> <publisher> JAI Press, </publisher> <month> 5 </month> <year> (1989), </year> <pages> pp. 1-26. </pages>
Reference-contexts: The results on deterministic simulation were subsequently generalized in <ref> [BH89] </ref>, [BFNW96]. Since the conditions are rather stringent, it is not easy to come up with a natural candidate for a pseudorandom generator. On the other hand, there seem to be a variety of natural examples of another basic primitive; the one-way function. <p> The following proposition provides a general way to produce a pseudorandom generator that stretches by many bits from a pseudorandom generator that stretches by at least one bit. This proposition appears in <ref> [BH89] </ref> and is due to O. Goldreich and S. Micali. Proposition 3.6. Suppose g : f0; 1g n ! f0; 1g n+1 is a pseudorandom generator that stretches by one bit.
Reference: [Boyar89] <author> Boyar, J., </author> <title> Inferring Sequences Produced by Pseudo-Random Number Generators, </title> <journal> Jour. of ACM, </journal> <volume> 36 (1989), No. 1, </volume> <month> pp.129-141. </month>
Reference-contexts: In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests. However, <ref> [Boyar89] </ref> and [K92] show that there is a polynomial time statistical test which the output from this generator does not pass. The distinction between the weaker requirement that the output pass some par fl Department of Numerical Analysis and Computer Science, Royal Institute of Technology, S-100 44 Stockholm, Sweden Johanh@nada.kth.se.
Reference: [CW79] <author> Carter, L., and M. Wegman, </author> <title> Universal Classes of Hash Functions, </title> <journal> J. of Comp. and Sys. Sci., </journal> <volume> 18 (1979), </volume> <pages> pp. 143-154. </pages>
Reference-contexts: Universal hash functions. The concept of a universal hash function, introduced in <ref> [CW79] </ref>, has proved to have far reaching and a broad spectrum of applications in the theory of computation. Definition 4.6 (universal hash functions). Let h : f0; 1g ` n fi f0; 1g n ! f0; 1g m n be a P-time function ensemble. <p> In all of our constructions of function ensembles using universal hash functions, the description of the hash function y is viewed as a public input to the function ensemble, and thus is also part of the output. The following construction is a universal hash function is due to <ref> [CW79] </ref>. Definition 4.7 (matrix construction). Let h : f0; 1g (n+1)m n fi f0; 1g n ! f0; 1g m n be the following P-time function ensemble. For x 2 f0; 1g n and y 2 f0; 1g (n+1)fim n , h y (x) = hx; 1i fi y.
Reference: [CG88] <author> Chor, B., and O. Goldreich, </author> <title> Unbiased Bits from Sources of Weak Randomness and Probabilistic Communication Complex., </title> <journal> SIAM J. on Comp., </journal> <volume> 17 (1988), </volume> <pages> pp. 230-261. </pages>
Reference-contexts: good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [Blum84], [SV86], [V87], [VV85], <ref> [CG88] </ref>, and [McIn87].) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits as a catalyst.
Reference: [DH76] <author> Diffie, D., and Hellman, M., </author> <title> New directions in cryptography IEEE Trans. </title> <journal> Inform. Th., </journal> <volume> 22 (1976), </volume> <pages> pp. 644-654. </pages>
Reference-contexts: However, there are many examples of functions that seem to be one-way in practice and that are conjectured to be one-way. Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., <ref> [DH76] </ref>), factoring a number that is the product of two large randomly chosen primes (see, e.g., [RSA78]), problems from coding theory (see, e.g., [McEl78], [GKL93]), and the subset sum problem for appropriately chosen parameters (see, e.g., [IN96]).
Reference: [G89] <author> Goldreich, O., </author> <title> A Note on Computational Indistinguishability, </title> <journal> Infor. Proc. Letters, </journal> <volume> 34 (1990), </volume> <pages> pp. 277-281. </pages>
Reference-contexts: The paper [NY89] gives a signature scheme that can be based on any one-way permutation, and [R90], substantially improves this by basing such a scheme on any one-way function. Using the notion of a false entropy generator, <ref> [G89] </ref> shows that the existence of pseudorandom generators is equivalent to the existence of a pair of P-samplable distributions which are computationally indistinguishable but statistically very different.
Reference: [GGM86] <author> Goldreich, O., S. Goldwasser, and S. Micali, </author> <title> How to Construct Random Functions, </title> <journal> J. of ACM, </journal> <volume> 33 (1986), No. 4, </volume> <pages> pp. 792-807. </pages>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudorandom generator, e.g., the work of <ref> [GGM86] </ref>, [LR88], [GMR89], [Naor88], [GMW91], show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudorandom generator. The results presented in this paper show that these same protocols can be based on any one-way function.
Reference: [GKL93] <author> Goldreich, O., Krawczyk, H. and Luby, M., </author> <title> On the Existence of Pseudorandom Generators, </title> <journal> SIAM J. on Comp., </journal> <volume> 22 (1993), No. 6, </volume> <pages> pp. </pages> <month> 1163-1175. </month> <title> 32 A pseudorandom generator from any one-way function </title>
Reference-contexts: Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [DH76]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [RSA78]), problems from coding theory (see, e.g., [McEl78], <ref> [GKL93] </ref>), and the subset sum problem for appropriately chosen parameters (see, e.g., [IN96]). The paper [BM82] is the first to construct a pseudorandom generator based on a one-way function. <p> The paper [Levin87] introduces one-way functions which remain one-way after several iterations and shows them to be necessary and A pseudorandom generator from any one-way function 3 sufficient for the construction of a pseudorandom generator. The paper <ref> [GKL93] </ref> shows how to construct a pseudorandom generator from any one-way function with the property that each value in the range of the function has roughly the same number of preimages. <p> This approach has its roots in <ref> [GKL93] </ref>. In [GL89], it turns out that the easily computable bit that is hidden is the parity of a random subset of the input bits, i.e., the inner product of the input and a random string. <p> One-to-one one-way function to a pseudoentropy generator. We now describe a construction of a pseudoentropy generator from any one-to-one one-way function. This construction, together with Theorem 4.14, yields a pseudorandom generator from any one-to-one one-way function. The overall construction is different in spirit than the original construction of <ref> [GKL93] </ref>: it illustrates how to construct a pseudoentropy generator in a particularly simple way using [GL89]. Although the assumptions and the consequences are somewhat different, the construction is the same as described in Proposition 4.4. Proposition 4.5. <p> The reduction is weak-preserving. Proof. Combine Construction 5.1 with Construction 4.13, and use Corollary 5.3 and Theorem 4.14. The following theorem, an easy corollary of Theorem 5.4, was previously obtained by <ref> [GKL93] </ref> using a different construction and proof techniques. Theorem 5.5. Let f : f0; 1g n ! f0; 1g ` n be a oe n -regular one-way function, where oe n is a P-time polynomial parameter. Then, a pseudorandom generator can be constructed from f . The reduction is weak-preserving.
Reference: [GL89] <author> Goldreich, O., and L.A. Levin, </author> <title> A Hard-Core Predicate for any One-way Function 21 rst ACM Symp. </title> <booktitle> on Th. of Comp., </booktitle> <year> 1989, </year> <pages> pp. 25-32. </pages>
Reference-contexts: Also, [Levin87] conjectured that a much simpler construction would work for the case of one-way permutations, and this was eventually shown in <ref> [GL89] </ref>.) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. [GMT82] and [Yao82] show how to construct a pseudorandom generator based on the difficulty of factoring, and this was substantially simplified in [ACGS88]. <p> Concepts and tools. Previous methods, following [BM82], rely on constructing a function that has an output bit that is computationally unpredictable given the other bits of the output, but is nevertheless statistically correlated with these other bits. <ref> [GL89] </ref> provide a simple and natural input bit which is hidden from (a padded version of) any one-way function. Their result radically simplifies the previous constructions of pseudorandom generator from one-way permutations, and in addition makes all previous constructions substantially more efficient. We use their result in a fundamental way. <p> This approach has its roots in [GKL93]. In <ref> [GL89] </ref>, it turns out that the easily computable bit that is hidden is the parity of a random subset of the input bits, i.e., the inner product of the input and a random string. <p> Hidden bits, hash functions, and computational entropy. 4.1. Constructing a hidden bit. How do we go about constructing a function such that one of its output bits is computationally unpredictable yet statistically correlated with its other output bits? The following fundamental proposition of <ref> [GL89] </ref> (strengthened in [Levin93]) provides the answer. Proposition 4.1. Let f : f0; 1g n ! f0; 1g ` n be a one-way function. Then, X fiR is hidden given hf (X); Ri, where X; R 2 U f0; 1g n . <p> The reduction is linear-preserving with respect to the alternative definition of computationally indistinguishable. Proposition 4.1 presents an elegant, simple and general method of obtaining a hidden bit from a one-way function. We need the following stronger proposition of <ref> [GL89] </ref> (see also [Levin93]) in some of our proofs. Proposition 4.2. There is an oracle TM M with the following properties. Let A be any adversary that accepts as input n bits and outputs a single bit. <p> One-way permutation to a pseudorandom generator. We describe a way to construct a pseudorandom generator from any one-way permutation which is substantially simpler (and has stronger security preserving properties) than the original construction of [Yao82]. The construction and proof described here is due to <ref> [GL89] </ref>. Proposition 4.4. Let f : f0; 1g n ! f0; 1g n be a one-way permutation. Let x; r 2 f0; 1g n and define P-time function ensemble g (x; r) = hf (x); r; x fi ri. Then, g is a pseudorandom generator. <p> This construction, together with Theorem 4.14, yields a pseudorandom generator from any one-to-one one-way function. The overall construction is different in spirit than the original construction of [GKL93]: it illustrates how to construct a pseudoentropy generator in a particularly simple way using <ref> [GL89] </ref>. Although the assumptions and the consequences are somewhat different, the construction is the same as described in Proposition 4.4. Proposition 4.5. Let f : f0; 1g n ! f0; 1g ` n be a one-to-one one-way function. <p> However, any universal hash function that satisfies the required properties may be used. We note that there are more efficient hash functions in terms of number of bits used in specification. One such example is using Toeplitz matrices (see for example <ref> [GL89] </ref> or [Levin93]). <p> There, D is the uniform distribution on a set S f0; 1g n with ]S = 2 m n . The papers [McIn87] and [BBR88] also proved similar lemmas. For the special case of linear hash functions, this lemma can be derived from <ref> [GL89] </ref> by considering unlimited adversaries. A generalization to a broader class of hash functions appears in [IZ89]. The lemma can be interpreted as follows: The universal hash function smooths out the Renyi entropy of X to the almost uniform distribution on bit strings of length almost m n .
Reference: [GMW91] <author> Goldreich, O., Micali, S., and Wigderson, A., </author> <title> Proofs that Yield Nothing But their Validity or All Languages in NP have Zero-Knowledge Proofs, </title> <journal> J. of the ACM, </journal> <volume> 38 (1991), No. 3, </volume> <pages> pp. 691-729. </pages>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudorandom generator, e.g., the work of [GGM86], [LR88], [GMR89], [Naor88], <ref> [GMW91] </ref>, show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudorandom generator. The results presented in this paper show that these same protocols can be based on any one-way function.
Reference: [GM84] <author> Goldwasser, S. and Micali, S., </author> <title> Probabilistic Encryption, </title> <journal> J. of Comp. and Sys. Sci. </journal> <volume> 28 (1984), No. 2, </volume> <pages> pp. 270-299. </pages>
Reference-contexts: Our overall construction combines this parallel approach with a standard method for iteratively stretching the output of a pseudorandom generator. The notion of computational indistinguishability provides one of the main conceptual tools in our paper. Following <ref> [GM84] </ref> and [Yao82], we say that two probability distributions D and E are computationally indistinguishable if no feasible adversary can distinguish D from E . <p> Thus, the range of securities that can be hoped for fall between these two extremes. 3.3. Pseudorandom generator. The following definition can be thought of as the computationally restricted adversary definition of statistical distance. The original idea is from <ref> [GM84] </ref> and [Yao82]. Definition 3.3 (computationally indistinguishable). Let D : f0; 1g ` n and E : f0; 1g ` n be probability ensembles. <p> Let D and E be computationally indistinguishable. Then, f (D) and f (E) are computationally indistinguishable. The reduction is linear-preserving. The following proposition first appears in <ref> [GM84] </ref>. Proposition 4.12. Let k n be an integer-valued P-time polynomial parameter. Let D : f0; 1g ` n and E : f0; 1g ` n be P-samplable probability ensembles. Let D and E be computationally indistinguishable. Then, D k n and E k n are computationally indistinguishable.
Reference: [GMR89] <author> Goldwasser, S., Micali, S. and Rackoff, C., </author> <title> The Knowledge Complexity of Interactive Proof Systems, </title> <journal> SIAM J. on Comp., </journal> <volume> 18 (1989), No. 1, </volume> <pages> pp. 186-208. </pages>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudorandom generator, e.g., the work of [GGM86], [LR88], <ref> [GMR89] </ref>, [Naor88], [GMW91], show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudorandom generator. The results presented in this paper show that these same protocols can be based on any one-way function.
Reference: [GMT82] <author> Goldwasser, S., Micali, S. and Tong, P., </author> <title> Why and how to establish a private code on a public network, </title> <booktitle> 23 rd IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1982, </year> <pages> pp. 134-144. </pages>
Reference-contexts: Also, [Levin87] conjectured that a much simpler construction would work for the case of one-way permutations, and this was eventually shown in [GL89].) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. <ref> [GMT82] </ref> and [Yao82] show how to construct a pseudorandom generator based on the difficulty of factoring, and this was substantially simplified in [ACGS88]. When f is a one-way permutation, the task of inverting f (x) is to find x.
Reference: [H90] <author> H astad, J., </author> <title> Pseudo-Random Generators under Uniform Assumptions, </title> <booktitle> 22 nd ACM Symp. on Th. of Comp., </booktitle> <year> 1990, </year> <pages> pp. 395-404. </pages>
Reference-contexts: We give several successively more intricate constructions, starting with constructions for one-way functions with a lot of structure and finishing with the constructions for one-way functions with no required structural properties. The current paper is a combination of the results announced in the conference papers [ILL89] and <ref> [H90] </ref>. 1.1. Concepts and tools.
Reference: [HL92] <author> Herzberg, A., Luby, M., </author> <title> Public Randomness in Cryptography, </title> <booktitle> CRYPTO '92, </booktitle> <year> 1992. </year>
Reference-contexts: We make the following definitions to quantify the strength of reductions. The particular parameterization of security and the different quantitative measures of the security preserving properties of a reduction are derived from [Luby96], <ref> [HL92] </ref>. Intuitively, a reduction constructs from a first primitive f on inputs of length t n a second primitive g (f) on inputs of length t 0 n .
Reference: [IL89] <author> Impagliazzo, R. and Luby, M., </author> <title> One-way functions are essential for information based cryptography, </title> <booktitle> 30 th IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1989, </year> <pages> pp. 230-235. </pages>
Reference-contexts: Using the notion of a false entropy generator, [G89] shows that the existence of pseudorandom generators is equivalent to the existence of a pair of P-samplable distributions which are computationally indistinguishable but statistically very different. The paper <ref> [IL89] </ref> provides complementary results; a one-way function can be constructed from a secure protocol for any one of a variety of cryptographic applications, A pseudorandom generator from any one-way function 31 including private key encryption, identification/authentication, bit commitment and coin flipping by telephone.
Reference: [ILL89] <author> Impagliazzo, R., Levin, L. and Luby, M., </author> <title> Pseudo-random number generation from one-way functions, </title> <booktitle> 21 rst ACM Symp. on Th. of Comp., </booktitle> <year> 1989, </year> <pages> pp. 12-24. </pages>
Reference-contexts: We give several successively more intricate constructions, starting with constructions for one-way functions with a lot of structure and finishing with the constructions for one-way functions with no required structural properties. The current paper is a combination of the results announced in the conference papers <ref> [ILL89] </ref> and [H90]. 1.1. Concepts and tools. <p> Using this approach and a non-uniform version of Proposition 4.12, <ref> [ILL89] </ref> describe a non-uniform reduction from a one-way function to a pseudorandom generator. However, a uniform reduction using Proposition 4.12 requires that f 0 be P-time computable.
Reference: [IN96] <author> Impagliazzo, R., Naor, M., </author> <title> Efficient Cryptographic Schemes Provably as Secure as Subset Sum, </title> <journal> J. of Cryptology, </journal> <volume> 9 (1996), No. 4, </volume> <pages> pp. 192-216. </pages>
Reference-contexts: functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [DH76]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [RSA78]), problems from coding theory (see, e.g., [McEl78], [GKL93]), and the subset sum problem for appropriately chosen parameters (see, e.g., <ref> [IN96] </ref>). The paper [BM82] is the first to construct a pseudorandom generator based on a one-way function. They introduce an elegant construction that shows how to construct a pseudorandom generator based on the presumed difficulty of the discrete logarithm problem.
Reference: [IR89] <author> Impagliazzo, R. and Rudich, S., </author> <title> Limits on the Provable Consequences of One-way Functions, </title> <booktitle> 21 rst ACM Symp. on Th. of Comp., </booktitle> <year> 1989, </year> <pages> pp. 44-56. </pages>
Reference-contexts: The results described in this paper and the previous three paragraphs show that the existence of a one-way function is central to modern complexity based cryptography. Some applications seem unlikely to be shown possible based on any one-way function, e.g., <ref> [IR89] </ref> give strong evidence that exchanging secrets over a public channel is an application of this kind.
Reference: [IZ89] <author> Impagliazzo, R., and Zuckerman, D., </author> <title> How to recycle random bits, </title> <booktitle> 30 th IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1989, </year> <pages> pp. 248-253. </pages>
Reference-contexts: The papers [McIn87] and [BBR88] also proved similar lemmas. For the special case of linear hash functions, this lemma can be derived from [GL89] by considering unlimited adversaries. A generalization to a broader class of hash functions appears in <ref> [IZ89] </ref>. The lemma can be interpreted as follows: The universal hash function smooths out the Renyi entropy of X to the almost uniform distribution on bit strings of length almost m n .
Reference: [Knuth97] <author> Knuth, D. E., </author> <title> Seminumerical Algorithms, </title> <booktitle> The Art of Computer Programming, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Third Edition, </address> <month> 2 </month> <year> (1997), </year> <note> Chapter 3. </note>
Reference-contexts: The robust notion of a pseudorandom generator, due to [BM82], [Yao82], should be contrasted with the classical methods of generating random looking bits as described in, e.g., <ref> [Knuth97] </ref>. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests.
Reference: [K65] <author> Kolmogorov, A. N., </author> <title> Three Approaches to the Concept of the Amount of Information, Probl. </title> <journal> Inf. Transm., </journal> <volume> 1 (1965), No. 1, </volume> <pages> pp. 1-7. </pages>
Reference-contexts: Thus, a pseudorandom generator can be used to efficiently convert a small amount of true randomness into a much larger number of effectively random bits. The notion of randomness tests for a string evolved over time: from set-theoretic tests to enumerable <ref> [K65] </ref>, recursive and finally limited time tests. Motivated by cryptographic applications, the seminal paper [BM82] introduces the idea of a generator which produces its output in polynomial time such that its output passes a general polynomial time test.
Reference: [K92] <author> Krawczyk, H., </author> <title> How to Predict Congruential Generators, </title> <editor> J. </editor> <booktitle> of Algorithms, 13 (1992). </booktitle> <pages> pp. 527-545. </pages>
Reference-contexts: The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests. However, [Boyar89] and <ref> [K92] </ref> show that there is a polynomial time statistical test which the output from this generator does not pass. The distinction between the weaker requirement that the output pass some par fl Department of Numerical Analysis and Computer Science, Royal Institute of Technology, S-100 44 Stockholm, Sweden Johanh@nada.kth.se.
Reference: [Levin87] <author> Levin, L.A., </author> <title> One-way Function and Pseudorandom Generators, </title> <journal> Combinatorica, </journal> <volume> 7 (1987), No. 4, </volume> <pages> pp. 357-363. </pages>
Reference-contexts: The paper [Yao82] substantially generalizes this result by showing how to to construct a pseudorandom generator from any one-way permutation. (Some of the arguments needed in the proof were missing in [Yao82] and were later completed by <ref> [Levin87] </ref>. Also, [Levin87] conjectured that a much simpler construction would work for the case of one-way permutations, and this was eventually shown in [GL89].) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. [GMT82] and <p> The paper [Yao82] substantially generalizes this result by showing how to to construct a pseudorandom generator from any one-way permutation. (Some of the arguments needed in the proof were missing in [Yao82] and were later completed by <ref> [Levin87] </ref>. Also, [Levin87] conjectured that a much simpler construction would work for the case of one-way permutations, and this was eventually shown in [GL89].) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. [GMT82] and [Yao82] show <p> When f is a one-way permutation, the task of inverting f (x) is to find x. In the case when f is not a permutation, the natural extension of successful inversion to finding any x 0 such that f (x 0 ) = f (x). The paper <ref> [Levin87] </ref> introduces one-way functions which remain one-way after several iterations and shows them to be necessary and A pseudorandom generator from any one-way function 3 sufficient for the construction of a pseudorandom generator. <p> Before we turn to this, we state the main result of this paper based on Theorem 6.2. Theorem 6.3. There are one-way functions iff there are pseudorandom generators. Proof. That pseudorandom generators imply one-way functions follows from <ref> [Levin87] </ref>. The converse now follows from Theorem 6.2 and the results summarized in Subsection 4.9. 6.3. The Main Lemmas. Lemma 6.4. H (E ) H (D) + 10n 2 . Proof. The entropy of D and E excluding the first m n bits is exactly the same.
Reference: [Levin93] <author> Levin, L.A., </author> <title> Randomness and Non-determinism, </title> <journal> J. of Symb. Logic, </journal> <volume> 58 (1993), No. 3, </volume> <month> pp.1102-1103. </month>
Reference-contexts: Hidden bits, hash functions, and computational entropy. 4.1. Constructing a hidden bit. How do we go about constructing a function such that one of its output bits is computationally unpredictable yet statistically correlated with its other output bits? The following fundamental proposition of [GL89] (strengthened in <ref> [Levin93] </ref>) provides the answer. Proposition 4.1. Let f : f0; 1g n ! f0; 1g ` n be a one-way function. Then, X fiR is hidden given hf (X); Ri, where X; R 2 U f0; 1g n . <p> The reduction is linear-preserving with respect to the alternative definition of computationally indistinguishable. Proposition 4.1 presents an elegant, simple and general method of obtaining a hidden bit from a one-way function. We need the following stronger proposition of [GL89] (see also <ref> [Levin93] </ref>) in some of our proofs. Proposition 4.2. There is an oracle TM M with the following properties. Let A be any adversary that accepts as input n bits and outputs a single bit. <p> However, any universal hash function that satisfies the required properties may be used. We note that there are more efficient hash functions in terms of number of bits used in specification. One such example is using Toeplitz matrices (see for example [GL89] or <ref> [Levin93] </ref>).
Reference: [Luby96] <author> Luby, M., </author> <title> Pseudorandomness and Cryptographic Applications, </title> <publisher> Princeton Computer Science Notes, Princeton University Press, </publisher> <year> 1996. </year>
Reference-contexts: We make the following definitions to quantify the strength of reductions. The particular parameterization of security and the different quantitative measures of the security preserving properties of a reduction are derived from <ref> [Luby96] </ref>, [HL92]. Intuitively, a reduction constructs from a first primitive f on inputs of length t n a second primitive g (f) on inputs of length t 0 n . <p> It is important to design the strongest reduction possible. The techniques described in this paper can be directly used to yield poly-preserving reductions from regular or nearly regular (with polynomial time computable degree of regularity) one way functions to pseudorandom generators <ref> [Luby96] </ref>, and this covers almost all of the conjectured one-way functions. However, the reduction for general one-way functions is only weak-preserving. 4. Hidden bits, hash functions, and computational entropy. 4.1. Constructing a hidden bit. <p> Using this, and combining Construction 5.1 with Construction 4.13, and using Corollary 5.3 and Theorem 4.14 yields a mildly nonuniform pseudorandom generator. Then, Theorem 4.8 shows how to construct a pseudorandom generator from this. Based on the ideas presented above, <ref> [Luby96] </ref> (Theorem 10.1 and Theorem 9.3) gives versions of Theorem 5.4 and Theorem 5.5 where the reduction is poly-preserving when the security parameter is P-time computable. 6. Any one-way function to a false entropy generator. 22 A pseudorandom generator from any one-way function 6.1. Finding determined hidden bits. <p> could find using the ideas developed in this paper.) The result could only be considered practical if the pseudorandom generator had inputs of length n 2 , or perhaps even close to n. (However, in many special cases of one-way functions, the ideas from this paper are practical, see e.g., <ref> [Luby96] </ref>.) The improvement in the direct construction given here comes from the observation that more than one of the reductions involves a product distribution, whereas only one product distribution is needed for the overall proof.
Reference: [LR88] <author> Luby M., and Rackoff, C., </author> <title> How to Construct Pseudorandom Permutations From Pseudorandom Functions, </title> <journal> SIAM J. on Comp., </journal> <volume> 17 (1988), No. 2, </volume> <pages> pp. 373-386. </pages>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudorandom generator, e.g., the work of [GGM86], <ref> [LR88] </ref>, [GMR89], [Naor88], [GMW91], show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudorandom generator. The results presented in this paper show that these same protocols can be based on any one-way function.
Reference: [McEl78] <author> McEliece, R. J., </author> <title> A public key cryptosystem based on algebraic coding theory, </title> <type> DSN progress report, </type> <institution> Jet Propulsion Laboratory, California Instit. of Tech., </institution> <year> 1978. </year>
Reference-contexts: Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [DH76]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [RSA78]), problems from coding theory (see, e.g., <ref> [McEl78] </ref>, [GKL93]), and the subset sum problem for appropriately chosen parameters (see, e.g., [IN96]). The paper [BM82] is the first to construct a pseudorandom generator based on a one-way function.
Reference: [McIn87] <author> McInnes, J., </author> <title> Cryptography Using Weak Sources of Randomness, </title> <type> Tech. Report 194/87, </type> <institution> U. of Toronto, </institution> <year> 1987. </year>
Reference-contexts: bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [Blum84], [SV86], [V87], [VV85], [CG88], and <ref> [McIn87] </ref>.) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits as a catalyst. 1.2. <p> There, D is the uniform distribution on a set S f0; 1g n with ]S = 2 m n . The papers <ref> [McIn87] </ref> and [BBR88] also proved similar lemmas. For the special case of linear hash functions, this lemma can be derived from [GL89] by considering unlimited adversaries. A generalization to a broader class of hash functions appears in [IZ89].
Reference: [MR95] <author> Motwani, R. and Raghavan, P., </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: Thus, it suffices to prove (a) and (b) above. PROOF of (a) : Since Pr [c j = 1] = p n , applying Chernoff bounds (e.g., see <ref> [MR95] </ref>), we get that, with probability at least 1 2 n , X c j k n p n k 2=3 2=3 : 28 A pseudorandom generator from any one-way function The entropy of the input to h 0 conditional on the rest of the bits of D (k n )
Reference: [Naor88] <author> Naor, M., </author> <title> Bit Commitment using Pseudorandom Generators, </title> <journal> J. of Cryptology, </journal> <volume> 4 (1991), </volume> <pages> pp. 151-158. </pages>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudorandom generator, e.g., the work of [GGM86], [LR88], [GMR89], <ref> [Naor88] </ref>, [GMW91], show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudorandom generator. The results presented in this paper show that these same protocols can be based on any one-way function.
Reference: [NY89] <author> Naor, M. and Yung, M., </author> <title> Universal One-way Hash Functions and Their Applications, </title> <booktitle> 21 rst ACM Symp. on Th. of Comp., </booktitle> <year> 1989, </year> <pages> pp. 33-43. </pages>
Reference-contexts: The results presented in this paper show that these same protocols can be based on any one-way function. The paper <ref> [NY89] </ref> gives a signature scheme that can be based on any one-way permutation, and [R90], substantially improves this by basing such a scheme on any one-way function.
Reference: [OW93] <author> Ostrovsky, R and Wigderson, A., </author> <title> One-way Functions are Essential for Non-Trivial Zero-Knowledge, </title> <booktitle> 2 nd Israel Symp. on the Th. of Comp. and Systems, </booktitle> <year> 1993, </year> <pages> pp. 3-17. </pages>
Reference-contexts: The paper [IL89] provides complementary results; a one-way function can be constructed from a secure protocol for any one of a variety of cryptographic applications, A pseudorandom generator from any one-way function 31 including private key encryption, identification/authentication, bit commitment and coin flipping by telephone. The paper <ref> [OW93] </ref> shows that a one-way function can be constructed from any non-trivial zero-knowledge proof protocol. Thus, secure protocols for any of these applications is equivalent to the existence of one-way functions.
Reference: [Renyi70] <author> Renyi, A., </author> <title> Probability Th., </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1970. </year>
Reference-contexts: We sometimes refer to the conditional entropy H (X 1 jX 2 ) of X 1 conditioned on X 2 , which is equal to H (D 1 jD 2 ). The following variant definition of entropy is due to <ref> [Renyi70] </ref>. Definition 2.4 (Renyi entropy). Let D be a distribution on a set S. The Renyi entropy of D is H Ren (D) = log (Pr [X = Y ]); where X 2 D S and Y 2 D S are independent.
Reference: [RSA78] <author> Rivest, R., Shamir, A., and Adleman, L., </author> <title> A method for obtaining digital signatures and public-key cryptosystems, </title> <journal> Comm. of the ACM, </journal> <volume> 21 (1978), </volume> <pages> pp. 120-126. </pages>
Reference-contexts: Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [DH76]), factoring a number that is the product of two large randomly chosen primes (see, e.g., <ref> [RSA78] </ref>), problems from coding theory (see, e.g., [McEl78], [GKL93]), and the subset sum problem for appropriately chosen parameters (see, e.g., [IN96]). The paper [BM82] is the first to construct a pseudorandom generator based on a one-way function.
Reference: [R90] <author> Rompel, J., </author> <title> One-way Functions are Necessary and Sufficient for Secure Signatures, </title> <booktitle> 22 nd ACM Symp. on Th. of Comp., </booktitle> <year> 1990, </year> <pages> pp. 387-394. </pages>
Reference-contexts: The results presented in this paper show that these same protocols can be based on any one-way function. The paper [NY89] gives a signature scheme that can be based on any one-way permutation, and <ref> [R90] </ref>, substantially improves this by basing such a scheme on any one-way function. Using the notion of a false entropy generator, [G89] shows that the existence of pseudorandom generators is equivalent to the existence of a pair of P-samplable distributions which are computationally indistinguishable but statistically very different.
Reference: [SV86] <author> Santha, M. and Vazirani, U., </author> <title> Generating Quasi-random Sequences from Slightly-random Sources, </title> <journal> J. of Comp. and Sys. Sci., </journal> <volume> 33 (1986), No. 1, </volume> <pages> pp. 75-87. </pages>
Reference-contexts: studies for extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [Blum84], <ref> [SV86] </ref>, [V87], [VV85], [CG88], and [McIn87].) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits
Reference: [S48] <author> Shannon, C., </author> <title> A Mathematical Th. </title> <journal> of Communication, Bell Systems Technical Journal, </journal> <volume> 27 (1948), </volume> <pages> pp. 379-423 and pp. 623-656. </pages>
Reference-contexts: For any function f with domain S and for any pair of distri butions D and E on S, L 1 (f (D); f (E )) L 1 (D; E). 2.2. Entropy. The following definition of entropy is from <ref> [S48] </ref>. Definition 2.3 (information and entropy). Let D be a distribution on a set S. <p> In many of our applications, the distribution in question has at least Renyi entropy m n , and thus the lemma applies because of Proposition 2.5. For other applications, we need to work with Shannon entropy. The following technical result due to <ref> [S48] </ref> allows us to convert Shannon entropy to Renyi entropy by looking at product distributions. Proposition 4.9. Let k n be an integer-valued polynomial parameter. * Let D : f0; 1g n be a probability ensemble.
Reference: [S83] <author> Sipser, M., </author> <title> A Complexity Theoretic Approach to Randomness, </title> <booktitle> 15 th ACM Symp. on Th. of Comp., </booktitle> <year> 1983, </year> <pages> pp. </pages> <month> 330-335. </month> <title> A pseudorandom generator from any one-way function 33 </title>
Reference-contexts: Then L 1 (hh Y (X); Y i; hZ; Y i) 2 (e n +1) : This lemma is a generalization of a lemma that appears in <ref> [S83] </ref>. There, D is the uniform distribution on a set S f0; 1g n with ]S = 2 m n . The papers [McIn87] and [BBR88] also proved similar lemmas. For the special case of linear hash functions, this lemma can be derived from [GL89] by considering unlimited adversaries.
Reference: [V87] <author> Vazirani, U., </author> <title> Towards a Strong Communication Complexity Th. or Generating Quasi-random Sequences from Two Communicating Slightly-random Sources, </title> <booktitle> Combina-torica, 7 (1987), No.4, </booktitle> <pages> pp. 375-392. </pages>
Reference-contexts: for extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [Blum84], [SV86], <ref> [V87] </ref>, [VV85], [CG88], and [McIn87].) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits as
Reference: [VV85] <author> Vazirani, U. and Vazirani, V., </author> <title> Random Polynomial Time is Equal to Slightly-random Polynomial Time, </title> <booktitle> 26 th IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1985, </year> <pages> pp. 417-428. </pages>
Reference-contexts: extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [Blum84], [SV86], [V87], <ref> [VV85] </ref>, [CG88], and [McIn87].) One of our main technical lemmas, (Lemma 4.8), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits as a
Reference: [Yao82] <author> Yao, </author> <title> A.C., Theory and Applications of Trapdoor Functions, </title> <booktitle> 23 rd IEEE Symp. on Foun. of Comp. Sci., </booktitle> <year> 1982, </year> <pages> pp. 80-91. </pages>
Reference-contexts: Motivated by cryptographic applications, the seminal paper [BM82] introduces the idea of a generator which produces its output in polynomial time such that its output passes a general polynomial time test. The fundamental paper <ref> [Yao82] </ref> introduced the definition of a pseudorandom generator most commonly used today, and proves that this definition and the original of [BM82] are equivalent. The robust notion of a pseudorandom generator, due to [BM82], [Yao82], should be contrasted with the classical methods of generating random looking bits as described in, e.g., <p> The fundamental paper <ref> [Yao82] </ref> introduced the definition of a pseudorandom generator most commonly used today, and proves that this definition and the original of [BM82] are equivalent. The robust notion of a pseudorandom generator, due to [BM82], [Yao82], should be contrasted with the classical methods of generating random looking bits as described in, e.g., [Knuth97]. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. <p> In general, it is hard to directly analyze the simulation algorithm to prove that it produces the correct answer with high probability when the string it uses is produced using such a method. A pseudorandom generator provides a generic solution to this problem. For example, <ref> [Yao82] </ref> shows how pseudorandom generators can be used to reduce the number of random bits needed for any probabilistic polynomial time algorithm, and thus shows how to perform a deterministic simulation of any polynomial time probabilistic algorithm in subexponential time based on a pseudorandom generator. <p> The paper [BM82] is the first to construct a pseudorandom generator based on a one-way function. They introduce an elegant construction that shows how to construct a pseudorandom generator based on the presumed difficulty of the discrete logarithm problem. The paper <ref> [Yao82] </ref> substantially generalizes this result by showing how to to construct a pseudorandom generator from any one-way permutation. (Some of the arguments needed in the proof were missing in [Yao82] and were later completed by [Levin87]. <p> The paper <ref> [Yao82] </ref> substantially generalizes this result by showing how to to construct a pseudorandom generator from any one-way permutation. (Some of the arguments needed in the proof were missing in [Yao82] and were later completed by [Levin87]. <p> Also, [Levin87] conjectured that a much simpler construction would work for the case of one-way permutations, and this was eventually shown in [GL89].) There are several important works that have contributed to the expansion of the conditions on one-way functions under which a pseudorandom generator can be constructed. [GMT82] and <ref> [Yao82] </ref> show how to construct a pseudorandom generator based on the difficulty of factoring, and this was substantially simplified in [ACGS88]. When f is a one-way permutation, the task of inverting f (x) is to find x. <p> Our overall construction combines this parallel approach with a standard method for iteratively stretching the output of a pseudorandom generator. The notion of computational indistinguishability provides one of the main conceptual tools in our paper. Following [GM84] and <ref> [Yao82] </ref>, we say that two probability distributions D and E are computationally indistinguishable if no feasible adversary can distinguish D from E . <p> Thus, the range of securities that can be hoped for fall between these two extremes. 3.3. Pseudorandom generator. The following definition can be thought of as the computationally restricted adversary definition of statistical distance. The original idea is from [GM84] and <ref> [Yao82] </ref>. Definition 3.3 (computationally indistinguishable). Let D : f0; 1g ` n and E : f0; 1g ` n be probability ensembles. <p> In some circumstances, it is important that both D and E are P-samplable, e.g., this is the case for Proposition 4.12. The paper <ref> [Yao82] </ref> originally gave the definition of a pseudorandom generator as below, except that we parameterize security more precisely. Definition 3.5 (pseudorandom generator). Let g : f0; 1g t n ! f0; 1g ` n be a P-time function ensemble where ` n &gt; t n . <p> The reduction is linear-preserving with respect to the alternative definition of computationally indistinguishable. 4.2. One-way permutation to a pseudorandom generator. We describe a way to construct a pseudorandom generator from any one-way permutation which is substantially simpler (and has stronger security preserving properties) than the original construction of <ref> [Yao82] </ref>. The construction and proof described here is due to [GL89]. Proposition 4.4. Let f : f0; 1g n ! f0; 1g n be a one-way permutation. Let x; r 2 f0; 1g n and define P-time function ensemble g (x; r) = hf (x); r; x fi ri.
References-found: 47

