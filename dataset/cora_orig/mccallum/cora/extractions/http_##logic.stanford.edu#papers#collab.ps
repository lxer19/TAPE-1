URL: http://logic.stanford.edu/papers/collab.ps
Refering-URL: http://logic.stanford.edu/papers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: singh@cs.stanford.edu  gisi@hplabs.hp.com  
Phone: 2  
Title: Coordinating Distributed Objects with Declarative Interfaces  
Author: Narinder Singh and Mark A. Gisi 
Address: Stanford, California 94305, USA  Palo Alto, California 94305  
Affiliation: 1 Computer Science Department, Stanford University  Software Technology Lab Hewlett-Packard Laboratories  
Abstract: This paper presents an architecture that supports coordination among loosely coupled distributed objects. The architecture has two components: objects that provide a declarative specification of their interface, and system programs that reason with these specifications to provide sophisticated interoperation services. Traditional object-oriented interoperation technologies rely on procedural interface specifications, which do not address the semantics of the operations supported by the object. In addition, traditional approaches provide limited support for automatic interoperation in a dynamic environment. For instance, a resource that is available at compile time may not be available at runtime, or a better resource may become available at runtime. Interoperation based on machine-processable specification of object interfaces reduces the coupling (interdependence) between a client and server, and also shifts the burden of coordination from the programmer to the system.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Betz, M., </author> <title> "OMG's CORBA," </title> <journal> Dr. </journal> <note> Dobb's Special Report, Winter 1994/95. </note>
Reference-contexts: We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 3 2 Related Work Conventional object models, e.g., CORBA <ref> [1, 16, 17] </ref> and the OLE/COM [14, 15], provide object communication infrastructures. Objects define their interfaces using a language referred to as IDL (Interface Definition Language).
Reference: 2. <author> Cutkosky, M. et al., </author> <title> "PACT: An Experiment in Integrating Engineering Systems," </title> <journal> Computer 26, </journal> <volume> 1(1993), </volume> <pages> 28-37. </pages>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm <ref> [2] </ref>, and integrated CAD tools for civil engineering [12].
Reference: 3. <author> Deschrevel, J. P., </author> <title> "The ANSA Model of Trading and Federation," Architecture Projects Management, </title> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: In addition to supporting more expressive interface specification, ANSA also provides a system service called a trader <ref> [3] </ref>, that utilizes this information to facilitate interoperation. A server registers an interface specification (along with a collection of properties) with the trader, and clients make requests to the trader to help find a particular instance of a server.
Reference: 4. <author> Finin, T., and Wiederhold, G., et al., </author> <title> "Specification of the KQML Agent-Communication Language," </title> <note> available from the WWW with the URL http://www.cs.umbc.edu/kqml/kqmlspec/spec.ps, June, </note> <year> 1993. </year>
Reference-contexts: Intuitively, each message in KQML is one piece of a dialog between the sender and the receiver, and KQML provides support for a wide variety of such dialog types. As used in ACL, each KQML message is a list of components enclosed in matching parentheses <ref> [4] </ref>. The first word in the list indicates the type of communication (tell, ask-if, print, etc). The subsequent entries are KIF expressions appropriate to that communication, in effect the "arguments." 4 The expression shown below is the simplest possible KQML dialog. <p> The sender is conveying the enclosed sentence to the receiver. In general, there is no expectation on the sender's part about what use the receiver will make of this information. A to B: (tell (= (size (file "f2.tex" tex)) 12678)) 4 The current KQML manual <ref> [4] </ref> provides a procedural semantics for the various communication types. Developing a more formal semantics for KQML is an area of ongoing research [13]. 8 The following dialog is a little more interesting. <p> Describing the complete list and their semantics is beyond the scope of this paper. Additional information can be found in <ref> [4] </ref>. KQML defines a set of performatives whose meaning is fixed, e.g., ask-if, tell, etc. However, it is important to note that, similar to KIF, KQML is open ended, i.e., users are free to define the meanings of any new performatives that are not predefined.
Reference: 5. <author> Genesereth, M., "Designworld," </author> <booktitle> in the Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, California, </address> <month> April </month> <year> 1991, </year> <pages> pp. 2785-2788. </pages>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits <ref> [5] </ref>, a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering [12].
Reference: 6. <author> Genesereth, M. R., Fikes, R., et al., </author> <title> "Knowledge Interchange Format Version 3 Reference Manual" Logic92-1, </title> <institution> Stanford University Logic Group, </institution> <year> 1992. </year>
Reference-contexts: Such an environment requires support for a collection of vocabularies. We have developed a framework for partitioning vocabularies (and defining mappings between them) based on a Name-Space Context Graph [19]. KIF. In the collaboration architecture we use KIF <ref> [6] </ref> as the representation language to record facts and properties. This is similar to ANSA, where it is possible to record the properties of objects, however, the KIF language is much more expressive. KIF is a prefix version of first-order predicate calculus with various extensions to enhance its expressiveness. <p> It asserts that a printer is located in hplabs if it is building 460. 3 The semantics of KIF is based on the standard Tarski semantics for first-order logic. There are special semantics for the quote operator to prevent paradoxes <ref> [6] </ref>. 7 (&lt;= (location ?x hplabs) (building ?x 460)) One of the distinctive features of KIF is its ability to encode knowledge about knowledge, using the ^ and , operators and related vocabulary.
Reference: 7. <author> Genesereth, M. R., and Ketchpel, S. P., </author> <title> "Software Agents," </title> <journal> Communication of the ACM, </journal> <volume> Vol. 37, No. </volume> <month> 7 July </month> <year> 1994. </year>
Reference-contexts: and (2) a new system service, the facilitator, that utilizes simple inference to manage the intelligent coordination among client and server objects. 3.1 A Declarative Specification Language The language we use for describing a declarative interface, developed in the artificial intelligence (AI) community to support interoperation among distributed autonomous agents <ref> [7, 8] </ref>, is called Agent Communication Language (ACL). The use of ACL in the facilitator architecture is described in Sect. 3.2. An object provides the facilitator with a declarative description of its capabilities and properties at runtime by sending it a collection of ACL messages.
Reference: 8. <author> Genesereth, M., Singh, N., and Syed, M., </author> <title> "A Distributed Anonymous Knowledge Sharing Approach to Software Interoperation," </title> <booktitle> in the Proceedings of the International Symposium on Fifth Generation Computing Systems, </booktitle> <year> 1994, </year> <pages> pp. 125-139. </pages>
Reference-contexts: The ideas presented in this paper have been developed within a project focused on constructing distributed intelligent autonomous agents <ref> [8] </ref>. We believe a more restricted form of this work could be developed to extend existing distributed object models (e.g., CORBA and OLE). We describe the benefits of providing objects with a semantically rich declarative interface. <p> and (2) a new system service, the facilitator, that utilizes simple inference to manage the intelligent coordination among client and server objects. 3.1 A Declarative Specification Language The language we use for describing a declarative interface, developed in the artificial intelligence (AI) community to support interoperation among distributed autonomous agents <ref> [7, 8] </ref>, is called Agent Communication Language (ACL). The use of ACL in the facilitator architecture is described in Sect. 3.2. An object provides the facilitator with a declarative description of its capabilities and properties at runtime by sending it a collection of ACL messages.
Reference: 9. <author> Gruber, T., "Ontolingua: </author> <title> A Mechanism to Support Portable Ontologies," </title> <institution> KSL-91-66, Stanford Knowledge Systems Laboratory, </institution> <year> 1991. </year>
Reference-contexts: KQML is being evaluated by the Object Management Group (OMG). Vocabulary. The vocabulary of ACL is listed in a large and open-ended dictionary of words appropriate to common application areas (e.g., electronic commerce, medical industry, and so forth) <ref> [9] </ref>. Each word in the dictionary has an English description for use by humans in understanding the meaning of the word, and each word has formal annotations for use by programs.
Reference: 10. <author> Herbert, A., </author> <title> "An ANSA Overview," </title> <journal> IEEE Network, </journal> <month> January/February </month> <year> 1994, </year> <pages> pp. 18-23. </pages>
Reference-contexts: In order to provide system services that support coordination, a mechanism is needed by which an object can provide semantic information that describes its behavior. The ANSA project realized the limited expressive of IDL. They developed an architecture that supports interoperation among heterogeneous telecommunication services and distributed computer applications <ref> [10] </ref>. ANSA extended the expressiveness of IDL by enabling a server object to augment its specification with a collection of properties (name/value pairs). Properties provide semantic information that describe different instances of a service.
Reference: 11. <author> Keller, A., </author> <title> "Smart Catalogs and Virtual Catalogs," </title> <booktitle> in USENIX Workshop on Electronic Commerce, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering [12]. It is currently being used in the CommerceNet project <ref> [11] </ref>, which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5 Conclusion In this paper we have presented an interoperation architecture based on declarative specification of object interfaces.
Reference: 12. <author> Khedro, T., and Genesereth, M., </author> <title> "The Federation Architecture for Interoperable Agent-Based Concurrent Engineering Systems," </title> <journal> International Journal on Concurrent Engineering, Research and Applications, </journal> <pages> pp. 125-131, </pages> <year> 1994. </year>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering <ref> [12] </ref>. It is currently being used in the CommerceNet project [11], which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5 Conclusion In this paper we have presented an interoperation architecture based on declarative specification of object interfaces.
Reference: 13. <author> Labrou, Y., and Finin, T., </author> <title> "A Semantic Approach for KQML a general purpose communication language for software agents," </title> <booktitle> in Third International Conference on Information and Knowledge Management, </booktitle> <year> 1994. </year>
Reference-contexts: A to B: (tell (= (size (file "f2.tex" tex)) 12678)) 4 The current KQML manual [4] provides a procedural semantics for the various communication types. Developing a more formal semantics for KQML is an area of ongoing research <ref> [13] </ref>. 8 The following dialog is a little more interesting. In this case, the first message is a request for the receiver to execute the operation of printing a string to its standard i/o stream. The second message tells the sender that the request has been satisfied.
Reference: 14. <author> Microsoft Corporation, </author> <title> OLE 2 Programmer's Reference: Creating Programmable Applications with OLE Automation, Volume 2, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, Wash., </address> <year> 1994. </year>
Reference-contexts: 1 Introduction A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [16, 17, 14, 15] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 3 2 Related Work Conventional object models, e.g., CORBA [1, 16, 17] and the OLE/COM <ref> [14, 15] </ref>, provide object communication infrastructures. Objects define their interfaces using a language referred to as IDL (Interface Definition Language).
Reference: 15. <author> Microsoft Technical Backgrounder OLE 2.0, </author> <year> 1994. </year>
Reference-contexts: 1 Introduction A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [16, 17, 14, 15] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 3 2 Related Work Conventional object models, e.g., CORBA [1, 16, 17] and the OLE/COM <ref> [14, 15] </ref>, provide object communication infrastructures. Objects define their interfaces using a language referred to as IDL (Interface Definition Language).
Reference: 16. <author> The Object Management Group, </author> <title> "The Common Object Request Broker: Architecture and specification," Revision 1.1, Document Number 91.12.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: 1 Introduction A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [16, 17, 14, 15] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 3 2 Related Work Conventional object models, e.g., CORBA <ref> [1, 16, 17] </ref> and the OLE/COM [14, 15], provide object communication infrastructures. Objects define their interfaces using a language referred to as IDL (Interface Definition Language).
Reference: 17. <author> Mowbray, T., </author> <title> Essential CORBA: Systems Integration Using Distribute Objects, </title> <publisher> Wiley, John & Sons, Inc., </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [16, 17, 14, 15] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 3 2 Related Work Conventional object models, e.g., CORBA <ref> [1, 16, 17] </ref> and the OLE/COM [14, 15], provide object communication infrastructures. Objects define their interfaces using a language referred to as IDL (Interface Definition Language).
Reference: 18. <author> Raj, R., Tempero, E., Levy, H., Black, A., Hutchinson, N. and Jul, E., </author> <title> "Emerald: </title>
References-found: 18

