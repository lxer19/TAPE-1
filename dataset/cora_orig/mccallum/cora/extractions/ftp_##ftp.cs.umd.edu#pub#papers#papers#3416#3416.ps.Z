URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3416/3416.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fchialin, als, saltzg@cs.umd.edu  
Title: Support for Distributed Dynamic Data Structures in C++  
Author: Chialin Chang Alan Sussman Joel Saltz 
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Department of Computer Science University of Maryland,  
Abstract: Traditionally, applications executed on distributed memory architectures in single-program multiple-data (SPMD) mode use distributed (multi-dimensional) data arrays. Good performance has been achieved by applying runtime techniques to such applications executing in a loosely synchronous manner. However, many applications utilize language constructs such as pointers to synthesize dynamic complex data structures, such as linked lists, trees and graphs, with elements consisting of complex composite data types. Existing runtime systems that rely on global indices cannot be used for these applications, as no global names or indices are imposed upon the elements of these data structures. A portable object-oriented runtime library is presented to support applications that use dynamic distributed data structures, including both arrays and pointer-based data structures. In particular, CHAOS++ deals with complex data types and pointer-based data structures by providing mobile objects and globally addressable objects. Preprocessing techniques are used to analyze communication patterns, and data exchange primitives are provided to carry out efficient data transfer. Performance results for applications taken from three distinct classes are also included to demonstrate the wide applicability of the runtime library.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gagan Agrawal, Alan Sussman, and Joel Saltz. </author> <title> Compiler and runtime support for structured and block structured applications. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 578-587. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: The library assumes no special compiler support, and does not rely on any architecture-dependent parallel system features. Integration with the CHAOS runtime library, for array-based adaptive irregular applications has already been accomplished, and integration with the Multiblock PARTI runtime library <ref> [23, 1] </ref>, for multiple structured grid applications, is currently in progress. CHAOS++ is targeted as a prototype library that will be used to provide part of the runtime support needed for High Performance Fortran and High Performance C/C++ compilers.
Reference: [2] <author> Robert Bennett, Kelvin Bryant, Alan Sussman, Raja Das, and Joel Saltz. Jovian: </author> <title> A framework for optimizing parallel I/O. </title> <booktitle> In Proceedings of the 1994 Scalable Parallel Libraries Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year> <month> 11 </month>
Reference-contexts: We are in the process of integrating CHAOS++ into the runtime software being developed by the Parallel Compiler Runtime Consortium. Finally, we also plan to link CHAOS++ to the Jovian I/O library <ref> [2] </ref>, a library that aims at optimizing the I/O performance of multiprocessor architectures with multiple disks or disk arrays.
Reference: [3] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object oriented programming notation. </title> <type> Technical Report CS-TR-92-01, </type> <institution> Department of Computer Science, California Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: Thus, partitioning a pointer-based data structure may assign two elements connected via pointers to two different processors, and raises the need for global pointers. A global pointer, as supported by several language extensions including Split-C [11], CC++ <ref> [3] </ref>, and pC++ [13], may point to an object owned by another processor, and effectively 3 consists of a processor identifier and a local pointer (that is only valid on the named processor). 3 The CHAOS++ Runtime Library CHAOS++ is designed to effectively support applications that contain complex data types and <p> Roughly speaking, there are two types of systems that are relevant. The first type of system augments an existing language, usually C++, with parallel constructs. Parallelism is exploited by both a compiler and an associated runtime system. Examples of this type of system include Mentat [7], CC++ <ref> [3] </ref>, Charm++ [9], and pC++ [13]. However, all of these systems, except pC++, consider program execution as completely unstructured interactions among a set of objects, and thus only support asynchronous communication. pC++ uses a collection to represent a structured set of objects, but still provides only asynchronous communication.
Reference: [4] <author> R. Das, D. J. Mavriplis, J. Saltz, S. Gupta, and R. Ponnusamy. </author> <title> The design and implementation of a parallel unstructured Euler solver using software primitives. </title> <journal> AIAA Journal, </journal> <volume> 32(3) </volume> <pages> 489-496, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Good performance has been achieved by ap-plying such runtime techniques to various problems with unstructured data access patterns, such as molecular dynamics for computational chemistry [8], particle-in-cell (PIC) codes for computational aerodynamics [14], and computational fluid dynamics <ref> [4] </ref>. However, many applications, such as image processing, geographical information systems, and data mining, utilize constructs such as pointers to synthesize complex composite data types, and build dynamic complex data structures such as linked lists, trees, and graphs. We refer to these as pointer-based data structures.
Reference: [5] <author> Raja Das, Mustafa Uysal, Joel Saltz, and Yuan-Shin Hwang. </author> <title> Communication optimizations for irregular scientific computations on distributed memory architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 22(3) </volume> <pages> 462-479, </pages> <month> September </month> <year> 1994. </year> <note> Also available as University of Maryland Technical Report CS-TR-3163 and UMIACS-TR-93-109. </note>
Reference-contexts: CHAOS++ is a runtime library targeted at object-oriented applications with dynamic communication patterns. It subsumes CHAOS <ref> [5] </ref>, which is a runtime library developed to efficiently handle adaptive and irregular problems that use arrays as their main data structures. CHAOS provides interfaces for use by both C and Fortran programs. <p> [12, 15, 22]. 2 Runtime Support for Distributed Dynamic Data Structures In this section, we give an overview of the CHAOS runtime library, and discuss the additional issues that must be addressed to efficiently support distributed pointer-based data structures. 2.1 Overview of the CHAOS Runtime Library The CHAOS runtime library <ref> [5] </ref> has been developed to efficiently handle adaptive and irregular problems that use arrays as their main data structures. In these problems, arrays are frequently partitioned in an irregular manner for performance reasons, for example to reduce communication costs or to obtain better load balance.
Reference: [6] <author> G. Fox, M. Johnson, G. Lyzenga, S. Otto, J. Salmon, and D. Walker. </author> <title> Solving problems on concurrent processors, general techniques and regular problems, volume 1. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction A large class of applications execute on distributed memory parallel computers in single-program multiple-data (SPMD) mode in a loosely synchronous manner <ref> [6] </ref>. That is, collections of data objects are partitioned among processors, and the program executes a sequence of concurrent computational phases.
Reference: [7] <author> Andrew S. Grimshaw, Jon B. Weissman, and W. Timothy Stayer. </author> <title> Portable run-time support for dynamic object-oriented parallel processing. </title> <type> Technical Report CS-93-40, </type> <institution> Dept. of Computer Science, University of Virginia, </institution> <address> Charlottesville, Virginia 22903, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Roughly speaking, there are two types of systems that are relevant. The first type of system augments an existing language, usually C++, with parallel constructs. Parallelism is exploited by both a compiler and an associated runtime system. Examples of this type of system include Mentat <ref> [7] </ref>, CC++ [3], Charm++ [9], and pC++ [13]. However, all of these systems, except pC++, consider program execution as completely unstructured interactions among a set of objects, and thus only support asynchronous communication. pC++ uses a collection to represent a structured set of objects, but still provides only asynchronous communication.
Reference: [8] <author> Yuan-Shin Hwang, Raja Das, Joel Saltz, Bernard Brooks, and Milan Hodoscek. </author> <title> Parallelizing molecular dynamics programs for distributed memory machines: An application of the CHAOS runtime support library. </title> <institution> Technical Report CS-TR-3374 and UMIACS-TR-94-125, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> November </month> <year> 1994. </year> <note> Submitted to IEEE Computational Science and Engineering. </note>
Reference-contexts: Good performance has been achieved by ap-plying such runtime techniques to various problems with unstructured data access patterns, such as molecular dynamics for computational chemistry <ref> [8] </ref>, particle-in-cell (PIC) codes for computational aerodynamics [14], and computational fluid dynamics [4]. However, many applications, such as image processing, geographical information systems, and data mining, utilize constructs such as pointers to synthesize complex composite data types, and build dynamic complex data structures such as linked lists, trees, and graphs.
Reference: [9] <author> L.V. Kale and Sanjeev Krishnan. </author> <title> CHARM++ : A portable concurrent object oriented system based on C++. </title> <booktitle> In Proceedings of the 1993 Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 91-108, </pages> <address> Washington, DC, </address> <month> October </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Roughly speaking, there are two types of systems that are relevant. The first type of system augments an existing language, usually C++, with parallel constructs. Parallelism is exploited by both a compiler and an associated runtime system. Examples of this type of system include Mentat [7], CC++ [3], Charm++ <ref> [9] </ref>, and pC++ [13]. However, all of these systems, except pC++, consider program execution as completely unstructured interactions among a set of objects, and thus only support asynchronous communication. pC++ uses a collection to represent a structured set of objects, but still provides only asynchronous communication.
Reference: [10] <author> S.R. Kohn and S.B. Baden. </author> <title> A robust parallel programming model for dynamic non-uniform scientific computations. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-94), </booktitle> <pages> pages 509-517. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Collaborative work is now under way on incorporating CHAOS++ into the pC++ runtime system. The second type of system is a user-level class library that assumes no special support from the compiler, just like CHAOS++. Examples include P++ [16] and LPARX <ref> [10] </ref>. These libraries both 10 provide efficient management of dynamic arrays distributed across processors.
Reference: [11] <author> A. Krishnamurthy, D.E. Culler, A. Dusseau, S.C. Goldstein, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 262-273. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: Thus, partitioning a pointer-based data structure may assign two elements connected via pointers to two different processors, and raises the need for global pointers. A global pointer, as supported by several language extensions including Split-C <ref> [11] </ref>, CC++ [3], and pC++ [13], may point to an object owned by another processor, and effectively 3 consists of a processor identifier and a local pointer (that is only valid on the named processor). 3 The CHAOS++ Runtime Library CHAOS++ is designed to effectively support applications that contain complex data
Reference: [12] <author> Kai Li and Paul Hudak. </author> <title> Memory coherence in shared virtual memory systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: However, the techniques used in the library can also be applied to other environments that provide a standard C++ compiler and a mechanism for global data accesses, including various distributed shared memory architectures <ref> [12, 15, 22] </ref>. 2 Runtime Support for Distributed Dynamic Data Structures In this section, we give an overview of the CHAOS runtime library, and discuss the additional issues that must be addressed to efficiently support distributed pointer-based data structures. 2.1 Overview of the CHAOS Runtime Library The CHAOS runtime library [5]
Reference: [13] <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, F. Bodin, and S. Kesavan. </author> <title> Implementing a parallel C++ runtime system for scalable parallel systems. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 588-597. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: Thus, partitioning a pointer-based data structure may assign two elements connected via pointers to two different processors, and raises the need for global pointers. A global pointer, as supported by several language extensions including Split-C [11], CC++ [3], and pC++ <ref> [13] </ref>, may point to an object owned by another processor, and effectively 3 consists of a processor identifier and a local pointer (that is only valid on the named processor). 3 The CHAOS++ Runtime Library CHAOS++ is designed to effectively support applications that contain complex data types and pointer-based data structures. <p> The first type of system augments an existing language, usually C++, with parallel constructs. Parallelism is exploited by both a compiler and an associated runtime system. Examples of this type of system include Mentat [7], CC++ [3], Charm++ [9], and pC++ <ref> [13] </ref>. However, all of these systems, except pC++, consider program execution as completely unstructured interactions among a set of objects, and thus only support asynchronous communication. pC++ uses a collection to represent a structured set of objects, but still provides only asynchronous communication.
Reference: [14] <author> B. Moon and J. Saltz. </author> <title> Adaptive runtime support for direct simulation Monte Carlo methods on distributed memory architectures. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC-94), </booktitle> <pages> pages 176-183. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Good performance has been achieved by ap-plying such runtime techniques to various problems with unstructured data access patterns, such as molecular dynamics for computational chemistry [8], particle-in-cell (PIC) codes for computational aerodynamics <ref> [14] </ref>, and computational fluid dynamics [4]. However, many applications, such as image processing, geographical information systems, and data mining, utilize constructs such as pointers to synthesize complex composite data types, and build dynamic complex data structures such as linked lists, trees, and graphs. <p> Mesh cells are distributed among the processors to achieve a good load balance, and since particles move between mesh cells, the cells are redistributed across the processors occasionally (once every few time steps) to maintain a good load balance. Moon <ref> [14] </ref> describes a parallel implementation of the DSMC application that uses the CHAOS runtime library. In the CHAOS implementation, various physical quantities associated with each particle are stored in separate arrays, and the association between the Cartesian mesh cells and the particles is represented by indirection arrays. <p> Table 1 gives the performance for both the C++/CHAOS++ code and the Fortran/CHAOS code. The simulated space consists of 9,720 cells, and initially contains about 50,000 particles. 400 time steps are performed, and a chain partitioner <ref> [14] </ref> is used to partition the mesh cells at runtime. The Fortran code has been shown to be a reasonably good implementation, and is about 33% faster than the C++ version.
Reference: [15] <author> Bill Nitzberg and Virginia Lo. </author> <title> Distributed shared memory: A survey of issues and algorithms. </title> <journal> IEEE Computer, </journal> <volume> 24(8) </volume> <pages> 52-60, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: However, the techniques used in the library can also be applied to other environments that provide a standard C++ compiler and a mechanism for global data accesses, including various distributed shared memory architectures <ref> [12, 15, 22] </ref>. 2 Runtime Support for Distributed Dynamic Data Structures In this section, we give an overview of the CHAOS runtime library, and discuss the additional issues that must be addressed to efficiently support distributed pointer-based data structures. 2.1 Overview of the CHAOS Runtime Library The CHAOS runtime library [5]
Reference: [16] <author> Rebecca Parsons and Daniel Quinlan. </author> <title> Run-time recognition of task parallelism within the P++ parallel array class library. </title> <booktitle> In Proceedings of the 1993 Scalable Parallel Libraries Conference, </booktitle> <year> 1993. </year>
Reference-contexts: Collaborative work is now under way on incorporating CHAOS++ into the pC++ runtime system. The second type of system is a user-level class library that assumes no special support from the compiler, just like CHAOS++. Examples include P++ <ref> [16] </ref> and LPARX [10]. These libraries both 10 provide efficient management of dynamic arrays distributed across processors.
Reference: [17] <author> Rahul Parulekar, Larry Davis, Rama Chellappa, Joel Saltz, Alan Sussman, and John Towhshend. </author> <title> High performance computing for land cover dynamics. </title> <booktitle> In Proceedings of the International Joint Conference on Pattern Recognition, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: VIM is an application that computes a measure of the vegetation on the ground from a set of satellite sensor images. It has been developed as part of the on-going Grand Challenge project in Land Cover Dynamics at the University of Maryland <ref> [17] </ref>. The overall project involves developing scalable and portable parallel programs for a variety of image and map data processing applications, eventually integrated with new models for parallel I/O of large scale images and maps.
Reference: [18] <author> D.F.G. Rault and M.S. Woronowicz. </author> <title> Spacecraft contamination investigation by direct simulation Monte Carlo contamination on UARS/HALOE. </title> <booktitle> In Proceedings AIAA 31th Aerospace Sciences Meeting and Exhibit, </booktitle> <address> Reno, Nevada, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The first application is a Direct Simulation Monte Carlo (DSMC) method. DSMC is a technique for computer modeling of a real gas by a large number of simulated particles. It includes movement and collision handling of simulated particles on a spatial flow field domain overlaid by a Cartesian mesh <ref> [18] </ref>. Depending upon its current spatial location, each particle is associated with a mesh cell, and moves from cell to cell as it participates in collisions and various boundary interactions in the simulated physical space.
Reference: [19] <author> Claudia Rodrguez. </author> <title> An appearance-based approach to object recognition in aerial images. </title> <type> Master's thesis, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <year> 1994. </year>
Reference-contexts: Another application under development is image segmentation. This application segments a given image into a hierarchy of components, based on the border contrast between the components, and serves as a preprocessing phase of an appearance-based object recognition system developed at the University of Maryland <ref> [19] </ref>. The hierarchy this preprocessing generates is then used by a high-level vision phase to heuristically combine components from various levels of the hierarchy into possible instances of objects. Further analysis by shape delineation processes would select the combinations that correspond to the locally best instances of objects.
Reference: [20] <author> Joel H. Saltz, Ravi Mirchandaney, and Kay Crowley. </author> <title> Run-time parallelization and scheduling of loops. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(5) </volume> <pages> 603-612, </pages> <month> May </month> <year> 1991. </year> <month> 12 </month>
Reference-contexts: Optimizations that can be carried out by compilers fl This research was supported by the National Science Foundation under Grant #ASC 9318183, and NASA under Grant #NAG 11485 (ARPA Project #8874). 1 are thus limited, and runtime analysis is required <ref> [20] </ref>. Good performance has been achieved by ap-plying such runtime techniques to various problems with unstructured data access patterns, such as molecular dynamics for computational chemistry [8], particle-in-cell (PIC) codes for computational aerodynamics [14], and computational fluid dynamics [4]. <p> For loosely synchronous applications, the data access pattern of a computation phase is usually known before entering the computation phase and is repeated many times. CHAOS thus carries out optimization through two phases, the inspector phase and the executor phase <ref> [20] </ref>. During program execution, the CHAOS inspector routines examine the data references, given in global indices, and convert them into local indices by using the translation table. Duplicate references are then removed through simple software caching, and unique references are coalesced to reduce communication latency and startup costs.
Reference: [21] <author> Shamik D. Sharma, Ravi Ponnusamy, Bongki Moon, Yuan-Shin Hwang, Raja Das, and Joel Saltz. </author> <title> Run-time and compile-time support for adaptive irregular problems. </title> <booktitle> In Proceedings Supercomputing '94, </booktitle> <pages> pages 97-106. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: CHAOS also provides primitives to redistribute data arrays efficiently at runtime. Special attention has been devoted towards optimizing the inspector for adaptive applications, where communication patterns are not reused many times <ref> [21] </ref>. 2.2 Issues in Runtime Support for Pointer-Based Data Structures The CHAOS library has been successfully applied to irregular and adaptive problems that use distributed arrays of primitive data types (integers, double precisions, etc.).
Reference: [22] <author> J.P. Singh, T. Joe, J.L. Hennessy, and A. Gupta. </author> <title> An empirical comparison of the kendall square research KSR-1 and stanford DASH multiprocessors. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 214-225. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: However, the techniques used in the library can also be applied to other environments that provide a standard C++ compiler and a mechanism for global data accesses, including various distributed shared memory architectures <ref> [12, 15, 22] </ref>. 2 Runtime Support for Distributed Dynamic Data Structures In this section, we give an overview of the CHAOS runtime library, and discuss the additional issues that must be addressed to efficiently support distributed pointer-based data structures. 2.1 Overview of the CHAOS Runtime Library The CHAOS runtime library [5]
Reference: [23] <author> Alan Sussman, Gagan Agrawal, and Joel Saltz. </author> <title> A manual for the multiblock PARTI runtime primitives, revision 4.1. </title> <institution> Technical Report CS-TR-3070.1 and UMIACS-TR-93-36.1, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> December </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: The library assumes no special compiler support, and does not rely on any architecture-dependent parallel system features. Integration with the CHAOS runtime library, for array-based adaptive irregular applications has already been accomplished, and integration with the Multiblock PARTI runtime library <ref> [23, 1] </ref>, for multiple structured grid applications, is currently in progress. CHAOS++ is targeted as a prototype library that will be used to provide part of the runtime support needed for High Performance Fortran and High Performance C/C++ compilers.
References-found: 23

