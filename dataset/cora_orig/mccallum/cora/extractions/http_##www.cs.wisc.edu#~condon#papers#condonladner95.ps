URL: http://www.cs.wisc.edu/~condon/papers/condonladner95.ps
Refering-URL: http://www.cs.wisc.edu/~condon/condon.html
Root-URL: 
Email: condon@cs.wisc.edu  ladner@cs.washington.edu  
Title: Interactive Proof Systems with Polynomially Bounded Strategies  
Author: Anne Condon Richard Ladner 
Date: February 26, 1992  
Address: Madison, Wisconsin 53706  Seattle, Washington 98195  
Affiliation: Dept. of Computer Science University of Wisconsin  Dept. of Comp. Sci. and Eng. University of Washington  
Abstract: Interactive proof systems in which the Prover is restricted to have a polynomial size strategy are investigated. The restriction of polynomial size computation tree, visible to the Prover, or logarithmically bounded number of coin flips by the Verifier guarantee a polynomial size strategy. The additional restriction of logarithmic space is also investigated. A main result of the paper is that interactive proof systems in which the Prover is restricted to a polynomial size strategy are equivalent to MA, Merlin-Arthur games, defined by Babai and Moran [3]. Polynomial tree size is also equivalent to MA, but when logarithmic space is added as a restriction, the power of polynomial tree size reduces to NP. Logarithmically bounded number of coin flips are equivalent to NP, and when logarithmic space is added as a restriction, the power is not diminished. The proof that NP IP(log-space, log-random-bits) illustrates an interesting application of the new "fingerprinting" method of Lipton [18]. Public interactive proof systems which have polynomial size strategies are also investigated. fl Preliminary version of this paper appears in Seventh Annual Conference on Structure in Complexity Theory, June 1992 y Work supported by NSF, grant number CCR-9100886 z Work supported by NSF, grant number CCR-9108314 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy, </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> pp.14-23, </address> <year> 1992. </year>
Reference-contexts: Although this limits the strategy of the Prover, it does not seem to be closely related to our restrictions of poly-strategy or poly-tree-size. Interactive proof systems with the restriction log-random-bits have recently been studied by Arora and Safra [2] and Arora et al. <ref> [1] </ref>. They show that any language in NP has an interactive proof system in which the verifier uses O (log n) random bits and examines only O (1) bits sent by the prover. Strong new results on the nonapproximability of NP-hard problems follow from this characterization of NP. <p> (b) + log (m) + b 2 m where all numbers are b bit numbers and m = max (k; l) provided the prime p is selected randomly and uniformly from the interval [(bm) 2 ; 2 (bm) 2 ] and r is selected randomly and uniformly from the interval <ref> [1; p 1] </ref>. If n is the length of the formula then the triples (l; i; v) in each multiset can be represented as O (log n) bit numbers and the size of each set is O (n).
Reference: [2] <author> S. Arora and M. Safra, </author> <title> Probabilistic checking of proofs. </title> <booktitle> Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> pp.2-13, </address> <year> 1992. </year>
Reference-contexts: Although this limits the strategy of the Prover, it does not seem to be closely related to our restrictions of poly-strategy or poly-tree-size. Interactive proof systems with the restriction log-random-bits have recently been studied by Arora and Safra <ref> [2] </ref> and Arora et al. [1]. They show that any language in NP has an interactive proof system in which the verifier uses O (log n) random bits and examines only O (1) bits sent by the prover.
Reference: [3] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin games: A randomized proof system, and a hierarchy of complexity classes. </title> <journal> Journal of Computing and System Sciences, </journal> <volume> 36, </volume> <pages> pp. 254-276, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Interactive proof systems (IP) were introduced by Goldwasser, Micali, and Rackoff and independently by Babai as a formal model to investigate issues in cryptography and as a natural extension to NP, the class of problems solvable in nondeterministic polynomial time [16], <ref> [3] </ref>. The vision was that in an interactive proof system a Prover and a Verifier would interact in such way that the Prover could convince the Verifier with high probability of a true fact, but could only convince a Verifier with very low probability of a false fact. <p> It turns out that this class is exactly equivalent to the class of languages MA, defined by Babai and Moran <ref> [3] </ref>. The class MA stands for the languages recognized by so-called Merlin-Arthur games. Thus, we have the fundamental result: IP (poly-strategy) = MA. It turns out that some additional restrictions do not remove any more power. Thus we prove: MA = IP (poly-strategy) = IP (public, poly-strategy) = IP (poly-tree-size). <p> In the next two theorems, we show that three of the resulting complexity classes are equal to MA and three are equal to NP. The class MA was introduced by Babai and Moran <ref> [3] </ref>. In our notation, the class MA consists of those languages accepted by public interactive proof systems (P; V ), where every possible run of the system is restricted so that first P computes, then V computes, and the system halts. <p> For the most part we were able to classify fully what the effects of these restrictions are. 18 One important problem left is to identify problems which have the full power of IP (poly--strategy) which is identical to Babai and Moran's class MA <ref> [3] </ref>. Such problems could serve as a stronger cornerstone for cryptography than problems that are currently used such as factoring, quadratic residuosity, and discrete logarithms which in some sense are all "NP-like" problems. Another intriguing problem is to classify IP (public, log-space, log-random-bits) more fully.
Reference: [4] <author> M. Blum and S. Kannan. </author> <title> Designing programs that check their work. </title> <booktitle> Proceedings of the Twenty-first Annual Symposium on the Theory of Computing, </booktitle> <pages> pp. 86-97, </pages> <year> 1989. </year>
Reference-contexts: However, there are important differences between the two models, stemming from the fact that our model is a language acceptor, whereas the model of Feige, Fiat and Shamir is an interactive proof system of knowledge, not a language acceptor. In a different context, Blum and Kannan <ref> [4] </ref> studied restricted interactive proof systems, where the communication of the Verifier and Prover is restricted in the following way. The Verifier sends strings x to the Prover and receives the response f (x), for some fixed function f .
Reference: [5] <author> A. Condon. </author> <title> Computational Models of Games. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: A visible history is a sequence of visible configurations which P could have observed up to a particular moment in a computation. For more details on these definitions, see <ref> [5] </ref> or [6]. Thus, P 's strategy depends only on what has been visible to it, namely, a visible history.
Reference: [6] <author> A. Condon. </author> <title> Space Bounded Probabilistic Game Automata. </title> <journal> Journal of the ACM, </journal> <volume> 38(2) </volume> <pages> 472-494, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: A visible history is a sequence of visible configurations which P could have observed up to a particular moment in a computation. For more details on these definitions, see [5] or <ref> [6] </ref>. Thus, P 's strategy depends only on what has been visible to it, namely, a visible history. We say that P has a move in visible history h if the last visible configuration in the sequence h is one in which it is P 's turn to move. <p> A language L is a member of IP (log-space) if there is a log space bounded interactive proof system which accepts L. This definition of the log-space restriction is consistent with that of Condon and Ladner [8] and Condon <ref> [6] </ref>, where log space bounded interactive proof systems were first studied in depth. Alternative definitions of logarithmic space have also been considered (see for example [10] or [7]), where only the verifier is restricted to log space, but not the prover. All our results hold for this alternative definition also. <p> Thus each entry of M j can be written in the form p=q where p and q are integers of length polynomial in n, and these entries can be computed from Q and b in polynomial time. 2 In previous work, Condon <ref> [6] </ref> showed that NP IP (log-space), even when the Verifier runs in polynomial time. However, the Verifier could use polynomially many random bits. In the next lemma, we show how the number of bits is reduced to O (log n). Lemma 2 NP IP (log-space, log-random-bits).
Reference: [7] <author> A. Condon. </author> <title> The complexity of the max word problem and the power of one-way interactive proof systems. </title> <booktitle> Proceedings of 8th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pp. 456-465, </pages> <month> February, </month> <year> 1991. </year> <month> 19 </month>
Reference-contexts: Condon <ref> [7] </ref> previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction. <p> This definition of the log-space restriction is consistent with that of Condon and Ladner [8] and Condon [6], where log space bounded interactive proof systems were first studied in depth. Alternative definitions of logarithmic space have also been considered (see for example [10] or <ref> [7] </ref>), where only the verifier is restricted to log space, but not the prover. All our results hold for this alternative definition also. We may easily combine the log-space restriction with any of the restrictions public, log-random-bits, and poly-tree-size.
Reference: [8] <author> A. Condon and R. E. Ladner. </author> <title> Probabilistic game automata. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36(3), </volume> <pages> pp. 452-489, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Our definition follows the definition of so-called "game automata" given by Condon and Ladner <ref> [8] </ref>. An interactive proof system is a pair (P; V ) of communicating Turing machines, P for Prover and V for Verifier. P is a nondeterministic Turing machine and V is a probabilistic Turing machine. <p> A language L is a member of IP (log-space) if there is a log space bounded interactive proof system which accepts L. This definition of the log-space restriction is consistent with that of Condon and Ladner <ref> [8] </ref> and Condon [6], where log space bounded interactive proof systems were first studied in depth. Alternative definitions of logarithmic space have also been considered (see for example [10] or [7]), where only the verifier is restricted to log space, but not the prover.
Reference: [9] <author> A. Condon and R. E. Lipton. </author> <title> On the complexity of space bounded interactive proofs. </title> <booktitle> Proceedings of the 30th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pp. 462-467, </pages> <year> 1989. </year>
Reference-contexts: is an example of one where Prover and Verifier are severely restricted, yet an NP-complete problem can still be proved and verified. 1.2 Related Work Interactive proof systems with the log-space restriction have been studied in detail although not with the additional restrictions considered in this paper. (See for example <ref> [9] </ref>, [10], [12] or [13]). Condon [7] previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction.
Reference: [10] <author> C. Dwork and L. Stockmeyer. </author> <title> Finite state verifiers I: the power of interaction. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 800-828, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: an example of one where Prover and Verifier are severely restricted, yet an NP-complete problem can still be proved and verified. 1.2 Related Work Interactive proof systems with the log-space restriction have been studied in detail although not with the additional restrictions considered in this paper. (See for example [9], <ref> [10] </ref>, [12] or [13]). Condon [7] previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction. <p> This definition of the log-space restriction is consistent with that of Condon and Ladner [8] and Condon [6], where log space bounded interactive proof systems were first studied in depth. Alternative definitions of logarithmic space have also been considered (see for example <ref> [10] </ref> or [7]), where only the verifier is restricted to log space, but not the prover. All our results hold for this alternative definition also. We may easily combine the log-space restriction with any of the restrictions public, log-random-bits, and poly-tree-size.
Reference: [11] <author> U. Feige, A. Fiat and S. Shamir. </author> <title> Zero knowledge proofs of identity. </title> <journal> Journal of Cryptology, </journal> <volume> 1(2) </volume> <pages> 77-94, </pages> <year> 1988. </year>
Reference-contexts: Condon [7] previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction. Feige, Fiat and Shamir <ref> [11] </ref> introduced a notion of interactive proofs of knowledge, where the prover wishes to convince the verifier that it "knows some secret" S about an input x, that satisfies a polynomial time computable predicate P (x; S).
Reference: [12] <author> L. J. Fortnow. </author> <title> Complexity-theoretic aspects of interactive proof systems. </title> <type> Ph. D. Thesis, Technical Report Number TR-447, </type> <institution> Laboratory for Computer Science, MIT. </institution>
Reference-contexts: example of one where Prover and Verifier are severely restricted, yet an NP-complete problem can still be proved and verified. 1.2 Related Work Interactive proof systems with the log-space restriction have been studied in detail although not with the additional restrictions considered in this paper. (See for example [9], [10], <ref> [12] </ref> or [13]). Condon [7] previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction.
Reference: [13] <author> L. Fortnow and C. Lund. </author> <title> Interactive proof systems and alternating time-space complexity. </title> <booktitle> Proceedings of 8th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pp. 263-274, </pages> <month> February, </month> <year> 1991. </year>
Reference-contexts: one where Prover and Verifier are severely restricted, yet an NP-complete problem can still be proved and verified. 1.2 Related Work Interactive proof systems with the log-space restriction have been studied in detail although not with the additional restrictions considered in this paper. (See for example [9], [10], [12] or <ref> [13] </ref>). Condon [7] previously studied log-space, "one-way" interactive proof systems, in which the Verifier never writes on the communication cell. A one-way interactive proof system is a special case of a private interactive proof system with the poly-tree-size restriction. <p> Another intriguing problem is to classify IP (public, log-space, log-random-bits) more fully. Could this class be equal to LOGCFL? Fortnow and Lund have shown that NC is contained IP (public, log-space), but their simulations use log O (1) n coin flips <ref> [13] </ref>. When their simulation is adapted to LOGCFL, which is contained in NC 2 [20], then the number of coin flips is O (log 2 Reducing the number of coin flips to O (log n) appears to require a new technique.
Reference: [14] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6, No. 4, </volume> <pages> pp. 675-695, </pages> <year> 1977. </year>
Reference: [15] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that yield nothing but their validity or all languages in NP have zero-knowledge proof systems. </title> <journal> Journal of the ACM, </journal> <volume> 38(3), </volume> <pages> pp. 691-729, </pages> <month> July, </month> <year> 1991. </year>
Reference-contexts: The practical aspect of NP is that the Prover is not all-powerful, but relies on a polynomial size strategy to convince the Verifier. If one examines the early result of Goldreich, Micali, and Wigderson that graph nonisomorphism is in IP <ref> [15] </ref> one can intuitively see that the Prover, in proving that two graphs are not isomorphic, does not use a polynomial size strategy.
Reference: [16] <author> S. Goldwasser, S. Micali and C. Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18, </volume> <pages> pp. 186-208, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Interactive proof systems (IP) were introduced by Goldwasser, Micali, and Rackoff and independently by Babai as a formal model to investigate issues in cryptography and as a natural extension to NP, the class of problems solvable in nondeterministic polynomial time <ref> [16] </ref>, [3]. The vision was that in an interactive proof system a Prover and a Verifier would interact in such way that the Prover could convince the Verifier with high probability of a true fact, but could only convince a Verifier with very low probability of a false fact. <p> automata which use O (log n) storage and polynomial time [22]. and NP. 2 Definitions Because we are interested in limiting the power of the Prover in an interactive proof system we adopt a definition which facilitates the analysis of a weakened Prover, but is equivalent to the standard definition <ref> [16] </ref> when the Prover is unrestricted. Our definition follows the definition of so-called "game automata" given by Condon and Ladner [8]. An interactive proof system is a pair (P; V ) of communicating Turing machines, P for Prover and V for Verifier.
Reference: [17] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. </title> <booktitle> Advances in Computing Research 5: Randomness and Computation, </booktitle> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1989. </year>
Reference-contexts: Although public and private interactive proof systems have been shown to be equivalent <ref> [17] </ref>, this equivalence does not necessarily carry over to our restricted interactive proof systems. 1.1 Motivating Example To motivate our study of restricted interactive proof systems, we use as an example the set 3-SAT, which is the set of satisfiable Boolean formulas in conjunctive normal form with at most three literals <p> In particular, P 's strategy can be assumed to be Markov, that is, the strategy need only depend on the current configuration of the interactive proof system, not on the entire visible history. Goldwasser and Sipser have shown that IP = IP (public) <ref> [17] </ref>. However, as we pointed out earlier, when other restrictions are included this equiv alence may break down.
Reference: [18] <author> R. J. Lipton. </author> <title> Efficient checking of computations. </title> <booktitle> Proceedings of the 7th Symposium on Theoretical Aspects of Computer Science, </booktitle> <month> February, </month> <pages> pp. 207-215, </pages> <year> 1990. </year>
Reference-contexts: What remains to be checked is whether or not the information sent in the first phase is consistent with the information sent in the second phase. This third check is done in O (log n) space with O (log n) random bits, using a technique of Lipton <ref> [18] </ref> called "fingerprinting of multisets", which we describe in Section 4. Roughly, the idea is to reduce the problem of checking consistency of information sent in the two phases to that of checking if two multisets are equal. <p> We show that with either the poly-tree-size or log-random-bits restriction, such interactive proof systems accept the class NP. The principal results of Section 4 are: NP = IP (log-space, poly-tree-size) = IP (log-space, log-random-bits). Several of the proofs are notable. Lipton's fingerprinting of multisets <ref> [18] </ref> is used help show NP IP (log-space, log-random-bits). The proof that IP (log-space, poly-tree-size) NP requires a new and interesting technique of constructing and evaluating a computation tree of an interactive proof system. (3) Finally, we consider public, log-space interactive proof systems. <p> Lipton proved the following: Fingerprinting Lemma (Lipton <ref> [18] </ref>) The probability that fx 1 ; : : : ; x k g and fy 1 ; : : : ; y l g are unequal and get the same fingerprints is at most O log (b) + log (m) + b 2 m where all numbers are b bit
Reference: [19] <author> C. Lund, L. Fortnow, H. Karloff, N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 859-868, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: More emphatically, the recent results of Lund, Fortnow, Karloff, and Nisan <ref> [19] </ref> and Shamir's striking result that IP = PSPACE [21], demonstrate that the all-powerful Prover is actually using a polynomial space computable strategy to convince the Verifier. There is no evidence that polynomial space computations are at all practical.
Reference: [20] <author> W. L. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2), </volume> <pages> pp. 218-235, </pages> <year> 1980. </year>
Reference-contexts: Strong new results on the nonapproximability of NP-hard problems follow from this characterization of NP. Our notion of polynomial tree size was inspired by the Ruzzo's notion of polynomial tree size for alternating Turing machines <ref> [20] </ref>. The adaptation of polynomial tree size to interactive proof 3 systems is new to the best of our knowledge. 1.3 New Results In stating our results, we denote by IP (&lt;restriction 1&gt;,..., &lt;restriction k&gt;) the class of languages accepted by interactive proof systems with &lt;restriction 1&gt;,..., &lt;restriction k&gt;. <p> Could this class be equal to LOGCFL? Fortnow and Lund have shown that NC is contained IP (public, log-space), but their simulations use log O (1) n coin flips [13]. When their simulation is adapted to LOGCFL, which is contained in NC 2 <ref> [20] </ref>, then the number of coin flips is O (log 2 Reducing the number of coin flips to O (log n) appears to require a new technique.
Reference: [21] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 869-877, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: More emphatically, the recent results of Lund, Fortnow, Karloff, and Nisan [19] and Shamir's striking result that IP = PSPACE <ref> [21] </ref>, demonstrate that the all-powerful Prover is actually using a polynomial space computable strategy to convince the Verifier. There is no evidence that polynomial space computations are at all practical.
Reference: [22] <author> I.H. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> Journal of the ACM, </journal> <volume> 25(3), </volume> <pages> pp. 405-114, </pages> <year> 1978. </year> <month> 20 </month>
Reference-contexts: However, they are apparently much weaker than the corresponding private interactive proof systems, since the class of languages they accept is contained in LOGCFL, the class of languages which are logarithmic space reducible to context-free languages <ref> [22] </ref>. The principal results of Section 5 are: 4 IP (public, log-space, poly-tree-size) = IP (public, log-space, log-random-bits), and NLOG IP (public, log-space, poly-tree-size) LOGCFL. Again several of the proofs are notable. <p> The result that IP (public, log-space, poly-tree-size) LOGCFL uses the equivalence of LOGCFL to the class of languages accepted by auxiliary pushdown automata which use O (log n) storage and polynomial time <ref> [22] </ref>. and NP. 2 Definitions Because we are interested in limiting the power of the Prover in an interactive proof system we adopt a definition which facilitates the analysis of a weakened Prover, but is equivalent to the standard definition [16] when the Prover is unrestricted. <p> Let NLOG be the class of languages accepted by a nondeterministic O (log n)-space bounded Turing machine and let LOGCFL be the class of languages which are O (log n)-space reducible to context-free languages <ref> [22] </ref>. We have the following relationships. Theorem 4 NLOG IP (public, log-space, poly-tree-size) = IP (public, log-space, log-random-bits) LOGCFL. The inclusion NLOG IP (public, log-space, poly-tree-size) follows because NLOG can be modeled as a log-space interactive proof system with a deterministic Verifier. <p> Lemma 3 IP (public, log-space, log-random-bits) LOGCFL. 15 Proof: To argue that IP (public, log-space, log-random-bits) LOGCFL we use the equivalence of LOGCFL and the class of languages accepted by nondeterministic pushdown automata which have O (log n) auxiliary storage and run in polynomial time <ref> [22] </ref>. Suppose L 2 IP (public, log-space, log-random-bits) and let x be an input to a public, log-space, log-random-bits, interactive proof system (P; V ) which accepts L. We will construct an auxiliary (nondeterministic) PDA M which accepts L.
References-found: 22

