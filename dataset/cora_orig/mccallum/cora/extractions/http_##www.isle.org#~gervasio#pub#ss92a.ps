URL: http://www.isle.org/~gervasio/pub/ss92a.ps
Refering-URL: http://www.isle.org/~gervasio/compleat.html
Root-URL: 
Email: gervasio@cs.uiuc.edu dejong@cs.uiuc.edu  
Title: on Practical Approaches to Scheduling and Planning Completable Scheduling: An Integrated Approach to Planning and Scheduling  
Author: Melinda T. Gervasio and Gerald F. DeJong 
Address: 405 N. Mathews Ave., Urbana, IL 61801  
Affiliation: Beckman Institute for Advanced Science and Technology University of Illinois at Urbana-Champaign  
Note: Appears in the Working Notes of the 1992 Spring Symposium  
Abstract: The planning problem has traditionally been treated separately from the scheduling problem. However, as more realistic domains are tackled, it becomes evident that the problem of deciding on an ordered set of tasks to achieve a set of goals cannot be treated independently of the problem of actually allocating resources to the tasks. Doing so would result in losing the robustness and flexibility needed to deal with imperfectly modeled domains. Completable scheduling is an approach which integrates the two problems by allowing an a priori planning module to defer particular planning decisions, and consequently the associated scheduling decisions, until execution time. This allows a completable scheduling system to maximize plan flexibility by allowing runtime information to be taken into consideration when making planning and scheduling decisions. Furthermore, through the criterion of achievab-ility placed on deferred decisions, a completable scheduling system is able to retain much of the goal-directedness and guarantees of achievement afforded by a priori planning. The completable scheduling approach is further enhanced by the use of contingent explanation-based learning, which enables a completable scheduling system to learn general completable plans from example and improve its performance through experience. Initial experimental results show that completable scheduling outperforms classical scheduling as well as pure reactive scheduling in a simple scheduling domain. 
Abstract-found: 1
Intro-found: 1
Reference: [Agre87] <author> P. Agre and D. Chapman, Pengi: </author> <title> An Implementation of a Theory of Activity, </title> <booktitle> Proceedings of the National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <month> July </month> <year> 1987, </year> <pages> pp. 268-272. </pages>
Reference-contexts: The complexity of real-world domains makes perfect characterizations difficult to construct and often unwieldy. To this end, researchers in both planning and scheduling have investigated reactive approaches which allow for decision-making during execution <ref> [Agre87, Fir-by87, Kaelbling88, Muscettola90, Ow88, Prosser89] </ref>. However, the classical approach of first doing planning and then scheduling still remains a problem. Consider giving a classical system in a process planning domain the job of man ufacturing a particular part.
Reference: [Bennett90] <author> S. Bennett, </author> <title> Reducing Real-world Failures of Approximate Explanation-based Rules, </title> <booktitle> Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <address> Austin, TX, </address> <year> 1990, </year> <pages> pp. 226-234. </pages>
Reference-contexts: This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems <ref> [Bennett90, Chien89, Fikes72, Hammond86, Minton85] </ref>, and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Chien89] <author> S. A. Chien, </author> <title> Using and Refining Simplifications: Explanation-based Learning of Plans in Intractable Domains, </title> <booktitle> Proceedings of The Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, MI, </address> <month> August </month> <year> 1989, </year> <pages> pp. 590-595. </pages>
Reference-contexts: This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems <ref> [Bennett90, Chien89, Fikes72, Hammond86, Minton85] </ref>, and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [DeJong86] <author> G. F. DeJong and R. J. Mooney, </author> <title> Explanation-Based Learning: An Alternative View, </title> <booktitle> Machine Learning 1, </booktitle> <month> 2 (April </month> <year> 1986), </year> <pages> pp. 145-176. </pages> <note> (Also appears as Technical Report UILU-ENG-86-2208, </note> <institution> AI Research Group, Coordinated Science Laboratory, University of Illinois at Urbana-Champaign.) </institution>
Reference-contexts: However, another reason to integrate the two approaches, is to take advantage of the wealth of information which becomes available at runtime. This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning <ref> [DeJong86, Mitchell86] </ref> has been demonstrated to be useful in improving the performance of various planning systems [Bennett90, Chien89, Fikes72, Hammond86, Minton85], and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans.
Reference: [Drummond90] <author> M. Drummond and J. Bresina, </author> <title> Anytime Synthetic Projection: Maximizing the Probability of Goal Satisfaction, </title> <booktitle> Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA, </address> <month> August </month> <year> 1990, </year> <pages> pp. 138-144. </pages>
Reference-contexts: While replanning is a valuable tool which any real system will even tually need, our work first focuses on constructing plans which are as flexible as possible to minimize the need for failure recovery. In this sense, it is similar to ideas presented in <ref> [Drummond90, Martin90] </ref>. Drummond and Bresina present an algorithm for maximizing the probability of goal satisfaction in the case of actions with different possible outcomes, which is one of the problems the conditionals in completable scheduling address.
Reference: [Fikes72] <author> R. E. Fikes, P. E. Hart and N. J. Nilsson, </author> <title> Learning and Executing Generalized Robot Plans, </title> <booktitle> Artificial Intelligence 3, 4 (1972), </booktitle> <pages> pp. 251-288. </pages>
Reference-contexts: This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems <ref> [Bennett90, Chien89, Fikes72, Hammond86, Minton85] </ref>, and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Firby87] <author> R. J. Firby, </author> <title> An Investigation into Reactive Planning in Complex Domains, </title> <booktitle> Proceedings of the National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <month> July </month> <year> 1987, </year> <pages> pp. 202-206. </pages>
Reference: [Fox84] <author> M. S. Fox and S. F. Smith, </author> <title> ISIS--a knowledge-based system for factory scheduling, </title> <booktitle> Expert Systems 1, </booktitle> <month> 1 (July </month> <year> 1984),. </year>
Reference-contexts: Completable scheduling may also be viewed as a shallow hierarchical planner, where runtime decisions are at the lowest level. However, unlike other hierarchical planners and schedulers, such as ABSTRIPS [Sacerdoti74], MOLGEN [Stefik81], and ISIS <ref> [Fox84] </ref>, a completable scheduling system uses the achievability constraint to guarantee completability at lower levels. The ordered monotonic hierarchies of ALPINE [Knoblock90] are a similar idea.
Reference: [Gervasio90a] <author> M. T. Gervasio, </author> <title> Learning General Completable Reactive Plans, </title> <booktitle> Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA, </address> <month> August </month> <year> 1990, </year> <pages> pp. 1016-1021. </pages>
Reference-contexts: We will then discuss how completable schedules are learned through an explanation-based learning strategy called contingent EBL. Finally, we will briefly discuss the implementation, including some preliminary results and ongoing experiments. COMPLETABLE SCHEDULING Overview of Completable Planning In completable planning <ref> [Gervasio90a, Gervasio90b, Gerva-sio91] </ref>, a classical planner is augmented with a reactive component which provides it with the ability to defer planning decisions until execution time. As an augmented classical planning approach, completable planning retains the advantages of classical planning while buying into the advantages provided by reactivity. <p> By requiring that a deferred goal be proven achievable, completable scheduling enables the construction of incomplete yet provably-correct plans. Previous work on achievability involved finding proofs for the existence of plans to achieve deferred goals. Achievability proofs for deferred parameter settings and number of iterations are discussed in <ref> [Gervasio90a, Gerva-sio90b] </ref>, and for deferred operator choice in [Gervasio91]. In [Gervasio91], completable planning was also extended to probabilistic domains by relaxing the original criterion of absolute achievability to probable achievability. Scheduling domains give rise to further new issues in ach-ievability. <p> This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems [Bennett90, Chien89, Fikes72, Hammond86, Minton85], and in <ref> [Gervasio90a, Gervasio91] </ref> we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Gervasio90b] <author> M. T. Gervasio, </author> <title> Learning Completable Reactive Plans Through Achievability Proofs, </title> <type> Technical Report UIUCDCS-R-90-1605, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: We will then discuss how completable schedules are learned through an explanation-based learning strategy called contingent EBL. Finally, we will briefly discuss the implementation, including some preliminary results and ongoing experiments. COMPLETABLE SCHEDULING Overview of Completable Planning In completable planning <ref> [Gervasio90a, Gervasio90b, Gerva-sio91] </ref>, a classical planner is augmented with a reactive component which provides it with the ability to defer planning decisions until execution time. As an augmented classical planning approach, completable planning retains the advantages of classical planning while buying into the advantages provided by reactivity.
Reference: [Gervasio91] <author> M. T. Gervasio and G. F. DeJong, </author> <title> Learning Probably Completable Plans, </title> <type> Technical Report UIUCDCS-R-91-1686, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Previous work on achievability involved finding proofs for the existence of plans to achieve deferred goals. Achievability proofs for deferred parameter settings and number of iterations are discussed in [Gervasio90a, Gerva-sio90b], and for deferred operator choice in <ref> [Gervasio91] </ref>. In [Gervasio91], completable planning was also extended to probabilistic domains by relaxing the original criterion of absolute achievability to probable achievability. Scheduling domains give rise to further new issues in ach-ievability. <p> Previous work on achievability involved finding proofs for the existence of plans to achieve deferred goals. Achievability proofs for deferred parameter settings and number of iterations are discussed in [Gervasio90a, Gerva-sio90b], and for deferred operator choice in <ref> [Gervasio91] </ref>. In [Gervasio91], completable planning was also extended to probabilistic domains by relaxing the original criterion of absolute achievability to probable achievability. Scheduling domains give rise to further new issues in ach-ievability. <p> This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems [Bennett90, Chien89, Fikes72, Hammond86, Minton85], and in <ref> [Gervasio90a, Gervasio91] </ref> we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Hammond86] <author> K. Hammond, CHEF: </author> <title> A Model of Case-Based Planning, </title> <booktitle> Proceedings of the National Conference on Artificial Intelligence, </booktitle> <address> Philadelphia, PA, </address> <month> August </month> <year> 1986, </year> <pages> pp. 267-271. </pages>
Reference-contexts: This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems <ref> [Bennett90, Chien89, Fikes72, Hammond86, Minton85] </ref>, and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Kaelbling88] <author> L. P. Kaelbling, </author> <title> Goals as Parallel Program Specifications, </title> <booktitle> Proceedings of The Seventh National Conference on Artificial Intelligence, </booktitle> <address> Saint Paul, MN, </address> <month> August </month> <year> 1988, </year> <pages> pp. 60-65. </pages>
Reference-contexts: The complexity of real-world domains makes perfect characterizations difficult to construct and often unwieldy. To this end, researchers in both planning and scheduling have investigated reactive approaches which allow for decision-making during execution <ref> [Agre87, Fir-by87, Kaelbling88, Muscettola90, Ow88, Prosser89] </ref>. However, the classical approach of first doing planning and then scheduling still remains a problem. Consider giving a classical system in a process planning domain the job of man ufacturing a particular part.
Reference: [Knoblock90] <author> C. Knoblock, </author> <title> Learning Abstraction Hierarchies for Problem Solving, </title> <booktitle> Proceedings of the Eight National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA, </address> <year> 1990, </year> <pages> pp. 923-928. </pages>
Reference-contexts: However, unlike other hierarchical planners and schedulers, such as ABSTRIPS [Sacerdoti74], MOLGEN [Stefik81], and ISIS [Fox84], a completable scheduling system uses the achievability constraint to guarantee completability at lower levels. The ordered monotonic hierarchies of ALPINE <ref> [Knoblock90] </ref> are a similar idea. The difference is that ALPINE performs abstraction based on the deletion of literals, while in proving achievability complet-able scheduling uses explicitly more general or abstract knowledge regarding the deferred goals and their properties.
Reference: [Martin90] <author> N. G. Martin and J. F. Allen, </author> <title> Combining Reactive and Strategic Planning through Decomposition Abstraction, Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </title> <address> San Diego, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 137-143. </pages>
Reference-contexts: While replanning is a valuable tool which any real system will even tually need, our work first focuses on constructing plans which are as flexible as possible to minimize the need for failure recovery. In this sense, it is similar to ideas presented in <ref> [Drummond90, Martin90] </ref>. Drummond and Bresina present an algorithm for maximizing the probability of goal satisfaction in the case of actions with different possible outcomes, which is one of the problems the conditionals in completable scheduling address.
Reference: [Minton85] <author> S. Minton, </author> <title> Selectively Generalizing Plans for Problem-Solving, </title> <booktitle> Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Angeles, </address> <month> August </month> <year> 1985, </year> <pages> pp. 596-599. </pages>
Reference-contexts: This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning [DeJong86, Mitchell86] has been demonstrated to be useful in improving the performance of various planning systems <ref> [Bennett90, Chien89, Fikes72, Hammond86, Minton85] </ref>, and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans. Learning completable schedules basically involves learning to distinguish between a priori planning decisions and decisions which have to be made or are better made during execution.
Reference: [Mitchell86] <author> T. M. Mitchell, R. Keller and S. Kedar-Cabelli, </author> <title> Explanation-Based Generalization: A Unifying View, </title> <booktitle> Machine Learning 1, </booktitle> <month> 1 (January </month> <year> 1986), </year> <pages> pp. 47-80. </pages>
Reference-contexts: However, another reason to integrate the two approaches, is to take advantage of the wealth of information which becomes available at runtime. This additional information facilitates planning by helping to focus the search for an appropriate action. LEARNING COMPLETABLE SCHEDULES Explanation-based learning <ref> [DeJong86, Mitchell86] </ref> has been demonstrated to be useful in improving the performance of various planning systems [Bennett90, Chien89, Fikes72, Hammond86, Minton85], and in [Gervasio90a, Gervasio91] we present an explanation-based learning strategy called contingent EBL for learning completable plans.
Reference: [Muscettola90] <author> N. Muscettola and S. F. Smith, </author> <title> Integrating Planning and Scheduling To Solve Space Mission Scheduling Problems, Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </title> <address> San Diego, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 220-230. </pages>
Reference-contexts: The complexity of real-world domains makes perfect characterizations difficult to construct and often unwieldy. To this end, researchers in both planning and scheduling have investigated reactive approaches which allow for decision-making during execution <ref> [Agre87, Fir-by87, Kaelbling88, Muscettola90, Ow88, Prosser89] </ref>. However, the classical approach of first doing planning and then scheduling still remains a problem. Consider giving a classical system in a process planning domain the job of man ufacturing a particular part.
Reference: [Ow88] <author> P. S. Ow, S. Smith and A. Thiriez, </author> <title> Reactive Plan Revision, </title> <booktitle> Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <address> St. Paul, MN, </address> <month> August </month> <year> 1988, </year> <pages> pp. 77-82. </pages>
Reference-contexts: The complexity of real-world domains makes perfect characterizations difficult to construct and often unwieldy. To this end, researchers in both planning and scheduling have investigated reactive approaches which allow for decision-making during execution <ref> [Agre87, Fir-by87, Kaelbling88, Muscettola90, Ow88, Prosser89] </ref>. However, the classical approach of first doing planning and then scheduling still remains a problem. Consider giving a classical system in a process planning domain the job of man ufacturing a particular part. <p> Because com-pletable plans are incomplete, additional planning is necessary during execution, when scheduling has begun to dispatch the tasks. Thus, this work differs from reactive approaches, such as those discussed in <ref> [Ow88, Prosser89, Smith90, Zwe-ben90] </ref>, where planning is separated from scheduling, and the main approach to uncertainty in the environment is to replan when the constraints of the original plan are violated.
Reference: [Prosser89] <author> P. Prosser, </author> <title> A Reactive Scheduling Agent, </title> <booktitle> Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, MI, </address> <month> August </month> <year> 1989, </year> <pages> pp. 1004-1009. </pages>
Reference-contexts: The complexity of real-world domains makes perfect characterizations difficult to construct and often unwieldy. To this end, researchers in both planning and scheduling have investigated reactive approaches which allow for decision-making during execution <ref> [Agre87, Fir-by87, Kaelbling88, Muscettola90, Ow88, Prosser89] </ref>. However, the classical approach of first doing planning and then scheduling still remains a problem. Consider giving a classical system in a process planning domain the job of man ufacturing a particular part. <p> Because com-pletable plans are incomplete, additional planning is necessary during execution, when scheduling has begun to dispatch the tasks. Thus, this work differs from reactive approaches, such as those discussed in <ref> [Ow88, Prosser89, Smith90, Zwe-ben90] </ref>, where planning is separated from scheduling, and the main approach to uncertainty in the environment is to replan when the constraints of the original plan are violated.
Reference: [Sacerdoti74] <author> E. Sacerdoti, </author> <title> Planning in a Hierarchy of Abstraction Spaces, </title> <booktitle> Artificial Intelligence 5, </booktitle> <year> (1974), </year> <pages> pp. 115-135. </pages>
Reference-contexts: Completable scheduling may also be viewed as a shallow hierarchical planner, where runtime decisions are at the lowest level. However, unlike other hierarchical planners and schedulers, such as ABSTRIPS <ref> [Sacerdoti74] </ref>, MOLGEN [Stefik81], and ISIS [Fox84], a completable scheduling system uses the achievability constraint to guarantee completability at lower levels. The ordered monotonic hierarchies of ALPINE [Knoblock90] are a similar idea.
Reference: [Smith90] <author> S. F. Smith, P. S. Ow, N. Muscettola, J. Potvin and D. C. Matthys, OPIS: </author> <title> An Integrated Framework for Generating and Revising Factory Schedules, Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </title> <address> San Diego, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 497-507. </pages>
Reference-contexts: Because com-pletable plans are incomplete, additional planning is necessary during execution, when scheduling has begun to dispatch the tasks. Thus, this work differs from reactive approaches, such as those discussed in <ref> [Ow88, Prosser89, Smith90, Zwe-ben90] </ref>, where planning is separated from scheduling, and the main approach to uncertainty in the environment is to replan when the constraints of the original plan are violated.
Reference: [Stefik81] <author> M. Stefik, </author> <title> Planning and Metaplanning (MOLGEN: </title> <booktitle> Part 2), Artificial Intelligence 16, 2 (1981), </booktitle> <pages> pp. 141-170. </pages>
Reference-contexts: Completable scheduling may also be viewed as a shallow hierarchical planner, where runtime decisions are at the lowest level. However, unlike other hierarchical planners and schedulers, such as ABSTRIPS [Sacerdoti74], MOLGEN <ref> [Stefik81] </ref>, and ISIS [Fox84], a completable scheduling system uses the achievability constraint to guarantee completability at lower levels. The ordered monotonic hierarchies of ALPINE [Knoblock90] are a similar idea.
Reference: [Zweben90] <author> M. Zweben, M. Deal and R. Gargan, Anytime Rescheduling, </author> <title> Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </title> <address> San Diego, CA, </address> <month> No-vember </month> <year> 1990, </year> <pages> pp. 251-259. </pages>
References-found: 24

