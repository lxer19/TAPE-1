URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-285.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Title: Mobile agents for mobile computing  
Author: Robert Gray David Kotz Saurab Nog Daniela Rus George Cybenko 
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Note: Available at  
Pubnum: Technical Report PCS-TR96-285  
Email: frgray,dfk,saurab,rus,gvcg@cs.dartmouth.edu  
Date: May 2, 1996  
Web: URL ftp://ftp.cs.dartmouth.edu/TR/TR96-285.ps.Z  
Abstract: Mobile agents are programs that can move through a network under their own control, migrating from host to host and interacting with other agents and resources on each. We argue that these mobile, autonomous agents have the potential to provide a convenient, efficient and robust programming paradigm for distributed applications, particularly when partially connected computers are involved. Partially connected computers include mobile computers such as laptops and personal digital assistants as well as modem-connected home computers, all of which are often disconnected from the network. In this paper, we describe the design and implementation of our mobile-agent system, Agent Tcl, and the specific features that support mobile computers and disconnected operation. These features include network-sensing tools and a docking system that allows an agent to transparently move between mobile computers, regardless of when the computers connect to the network.
Abstract-found: 1
Intro-found: 1
Reference: [AD93] <author> Andrew Athan and Dan Duchamp. </author> <title> Agent-mediated message passing for constrained environments. </title> <booktitle> In Proceedings of the Mobile and Location-Independent Computing Symposium, </booktitle> <pages> pages 103-107, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: While such a system would simplify our laptop-docking scheme, since the laptop would never change address, it would not solve the primary problem of disconnection. Athan and Duchamp <ref> [AD93] </ref> go further in routing all of a laptop's communication through an "agent" that can filter data according to current network conditions, or store messages for delayed delivery. 3 Agent Tcl Agent Tcl [Gra95, Gra96] is a mobile-agent system that we are developing at Dartmouth College and using in several information-management
Reference: [BN84] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Remote procedure call (RPC) allows a client to invoke a server operation using the standard procedure call mechanism <ref> [BN84] </ref>. Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94].
Reference: [BP88] <author> Andrea J. Borr and Franco Putzolu. </author> <title> High performance SQL through low-level system integration. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 342-349, </pages> <year> 1988. </year>
Reference-contexts: Pitoura and Bhargava propose a framework for agents to interact with heterogeneous mobile databases, but they focus on database consistency issues more than communication and transport issues [PB95]. Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server <ref> [BP88] </ref>. The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected.
Reference: [BR] <author> N. S. Borenstein and M. Rose. </author> <title> Safe Tcl. </title> <note> Available at ftp://ftp.fv.com/pub/code/other/safe-tcl.tar.Z. </note>
Reference-contexts: The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java [Sun94], Safe Tcl <ref> [BR] </ref>, and Omniware [Col95] are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [BZCS96] <author> Mary Baker, Xinhua Zhao, Stuart Cheshire, and Jonathan Stone. </author> <title> Supporting mobility in MosquitoNet. </title> <booktitle> In Proceedings of the 1996 Winter USENIX Conference, </booktitle> <pages> pages 127-139, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: This feature enables applications on mobile computers to change their behavior according to their environment, and would be a helpful substrate for an agent system. There are of course many papers on mobile IP and packet forwarding. Perhaps the best background source is [Joh95]. Other examples include <ref> [BZCS96] </ref>, [IG93] and [WYOT93]. The idea is generally to allow a mobile computer to retain the same IP address regardless of location, so that applications on the laptop may continue to communicate with applications elsewhere.
Reference: [CBC96] <author> Kurt Cohen, Aditya Bhasin, and George Cybenko. </author> <title> Pattern recognition of 3D CAD objects: Towards an electronic yellow pages of mechanical parts. </title> <journal> International Journal of Intelligent Engineering Systems, </journal> <note> 1996. To appear. 3 http://www.cs.dartmouth.edu/~agent/. 14 </note>
Reference-contexts: The user interacts with the proceedings via this agent and can continue interacting even when disconnected. Agent Tcl has been used primarily in information-retrieval applications. One information-retrieval application involves searching distributed collections of technical reports; another, medical records [Wu95]; and a third, three-dimensional drawings of mechanical parts <ref> [CBC96] </ref>. The advantages of agents in these retrieval applications is that each distributed collection can provide low-level primitives rather than all possible search operations; an agent can combine the primitives into efficient, multi-step searches.
Reference: [CGH + 95] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant agents for mobile computing. </title> <type> Technical Report RC 20010, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Revised October 17, </note> <year> 1995. </year>
Reference-contexts: The Mobile Service Agent (MSA) system from ECRC [TLKC95] also supports mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents <ref> [CGH + 95] </ref>, Sodabot [Coe94], and ARA [Pei96]. As yet, however, none of these projects have considered mobile platforms. Others have specifically suggested using mobile agents in mobile-computing environments.
Reference: [CGN96] <author> Ting Cai, Peter A. Gloor, and Saurab Nog. Dartflow: </author> <title> A workflow management system on the web using transportable agents. </title> <type> Technical Report PCS-TR96-283, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Agent Tcl is also being used in workflow applications, in which an agent carries a multi-step task description from one site to another, interacting with the user at each site in order to carry out that user's part 3 of the task <ref> [CGN96] </ref>. In Section 4, we describe a workflow application that involves both fixed and mobile computers, and that is supported easily with our mobile computing infrastructure.
Reference: [Coe94] <author> Michael D. Coen. SodaBot: </author> <title> A software agent environment and construction system. </title> <editor> In Yannis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Management, </booktitle> <address> Gaithersburg, Maryland, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Mobile agents move the programmer away from the rigid client-server model to the more flexible peer-peer model in which programs communicate as peers and act as either clients or servers depending on their current needs <ref> [Coe94] </ref>. Mobile agents lead to more scalable applications since work can be easily moved to whichever network location is most appropriate. Mobile agents allow ad-hoc, on-the-fly applications that represent would be unreasonable investment of time if code had to be installed on each network site rather than dynamically dispatched. <p> There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot <ref> [Coe94] </ref>, and ARA [Pei96]. As yet, however, none of these projects have considered mobile platforms. Others have specifically suggested using mobile agents in mobile-computing environments.
Reference: [Col95] <institution> Omniware technical overview. </institution> <note> Colusa Software White Paper, 1995. Available from http://www.colusa.com. </note>
Reference-contexts: Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java [Sun94], Safe Tcl [BR], and Omniware <ref> [Col95] </ref> are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [Fal87] <author> Joseph R. Falcone. </author> <title> A programmable interface language for heterogeneous systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) <ref> [Fal87] </ref>, Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java [Sun94], Safe Tcl [BR], and Omniware [Col95] are concerned with the safe execution of untrusted code fragments.
Reference: [Gra95] <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <editor> In James Mayfield and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Fourth International Conference on Information and Knowledge Management (CIKM 95), </booktitle> <address> Baltimore, Maryland, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript [Whi94a, Whi94b], Tacoma [JvS95], Mobile service Agents (MSA) [TLKC95], and our own Agent Tcl <ref> [Gra95, Gra96] </ref>. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. In network management, a Telescript agent might carry a software upgrade onto a machine along with the code to perform the installation; the agent executes the installation code and disappears. <p> Athan and Duchamp [AD93] go further in routing all of a laptop's communication through an "agent" that can filter data according to current network conditions, or store messages for delayed delivery. 3 Agent Tcl Agent Tcl <ref> [Gra95, Gra96] </ref> is a mobile-agent system that we are developing at Dartmouth College and using in several information-management applications. <p> The server authenticates the agent and starts a Tcl interpreter. The Tcl interpreter restores the state image and resumes agent execution at the statement immediately after the agent jump. Further details about Agent Tcl can be found in <ref> [Gra95] </ref> and on our web page. 1 . Details about Agent Tcl's security mechanisms can be found in [Gra96]. 4 Mobile computing Mobile agents are an excellent paradigm for implementing distributed applications, particularly in the context of partially connected computers.
Reference: [Gra96] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <editor> In Mark Diekhans and Mark Roseman, editors, </editor> <booktitle> Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL '96), </booktitle> <address> Monterey, California, </address> <month> July </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript [Whi94a, Whi94b], Tacoma [JvS95], Mobile service Agents (MSA) [TLKC95], and our own Agent Tcl <ref> [Gra95, Gra96] </ref>. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. In network management, a Telescript agent might carry a software upgrade onto a machine along with the code to perform the installation; the agent executes the installation code and disappears. <p> Athan and Duchamp [AD93] go further in routing all of a laptop's communication through an "agent" that can filter data according to current network conditions, or store messages for delayed delivery. 3 Agent Tcl Agent Tcl <ref> [Gra95, Gra96] </ref> is a mobile-agent system that we are developing at Dartmouth College and using in several information-management applications. <p> The Tcl interpreter restores the state image and resumes agent execution at the statement immediately after the agent jump. Further details about Agent Tcl can be found in [Gra95] and on our web page. 1 . Details about Agent Tcl's security mechanisms can be found in <ref> [Gra96] </ref>. 4 Mobile computing Mobile agents are an excellent paradigm for implementing distributed applications, particularly in the context of partially connected computers.
Reference: [HCK95] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile agents: Are they a good idea? Technical report, </title> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Finally, our experience with agent programming suggests that mobile agents are easier to understand than many distributed computing paradigms. 1.2 Applications of mobile agents It can be argued that mobile agents are not an enabling technology since there are few applications (if any) that are impossible without mobile agents <ref> [HCK95] </ref>. However, the advantages of mobile agents lead to improved performance in many distributed applications, where performance is a matter of network utilization, completion time, programmer convenience, or just the ability to continue interacting with a user during network disconnection.
Reference: [HH95] <author> L. B. Huston and P. Honeyman. </author> <title> Partially connected operation. </title> <journal> Computing Systems, </journal> <volume> 8(4) </volume> <pages> 365-379, </pages> <month> Fall </month> <year> 1995. </year>
Reference-contexts: The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus [RHR + 94], and others <ref> [HH95] </ref>. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [IG93] <author> John Ioannidis and Gerald Q. Maguire, Jr. </author> <title> The design and implementation of a mobile internetworking architecture. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Conference, </booktitle> <pages> pages 491-502, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: This feature enables applications on mobile computers to change their behavior according to their environment, and would be a helpful substrate for an agent system. There are of course many papers on mobile IP and packet forwarding. Perhaps the best background source is [Joh95]. Other examples include [BZCS96], <ref> [IG93] </ref> and [WYOT93]. The idea is generally to allow a mobile computer to retain the same IP address regardless of location, so that applications on the laptop may continue to communicate with applications elsewhere.
Reference: [JdT + 95] <author> Anthony D. Joseph, Alan F. deLespinasse, Joshua A. Tauber, David K. Gifford, and M. Frans Kaashoek. </author> <title> Rover: A toolkit for mobile information access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 156-171, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Conversely, an application that lives in the network can send a mobile agent onto the laptop. The agent acts as the application's surrogate, interacting with the user efficiently and continuing to interact even in the event of long-term disconnection <ref> [TLKC95, JdT + 95] </ref>. <p> On reconnection, the file system reconciles any differences with the appropriate file servers. The Bayou file system [TTP + 95] internally uses a form of mobile code (but not agents) to handle reconciliation. The Rover system <ref> [JdT + 95] </ref> supports disconnected operation through queued RPC and relocat-able dynamic objects (RDO). Queued RPC allows asynchronous RPC requests to be queued and then sent when the laptop connects; an asynchronous reply is delivered later.
Reference: [Joh95] <author> D. B. Johnson. </author> <title> Scalable support for transparent mobile host internetworking. </title> <journal> Wireless Networks, </journal> <volume> 1 </volume> <pages> 311-321, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: This feature enables applications on mobile computers to change their behavior according to their environment, and would be a helpful substrate for an agent system. There are of course many papers on mobile IP and packet forwarding. Perhaps the best background source is <ref> [Joh95] </ref>. Other examples include [BZCS96], [IG93] and [WYOT93]. The idea is generally to allow a mobile computer to retain the same IP address regardless of location, so that applications on the laptop may continue to communicate with applications elsewhere.
Reference: [JvS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the Fifth Workshop Hot Topics in Operating Systems (HotOS), </booktitle> <pages> pages 42-45, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: By moving to the local machine, an applet can control the screen efficiently without the need for pre-installation. Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript [Whi94a, Whi94b], Tacoma <ref> [JvS95] </ref>, Mobile service Agents (MSA) [TLKC95], and our own Agent Tcl [Gra95, Gra96]. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. <p> The Mobile Service Agent (MSA) system from ECRC [TLKC95] also supports mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma <ref> [JvS95] </ref>, Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA [Pei96]. As yet, however, none of these projects have considered mobile platforms. Others have specifically suggested using mobile agents in mobile-computing environments.
Reference: [KS92] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda <ref> [KS92, MES95] </ref>, Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [MES95] <author> Lily B. Mummert, Maria R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting weak con-nectivity for mobile file access. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 143-155, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda <ref> [KS92, MES95] </ref>, Ficus [RHR + 94], and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [NCK96] <author> Saurab Nog, Sumit Chawla, and David Kotz. </author> <title> An RPC mechanism for transportable agents. </title> <type> Technical Report PCS-TR96-280, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: The low-level mechanisms allow agents to communicate through message passing or through a direct connection that is established when an agent issues the agent meet command and the receiving agent accepts the meeting. The higher-level Agent Remote Procedure Call (ARPC) <ref> [NCK96] </ref> mechanism builds on top of these primitives, adding structure as well as a higher-level abstraction to the communication. Server agents in the system register with the local "name-server" agent by specifying their interface in a 11 flexible definition language.
Reference: [NPS95] <author> Brian B. Noble, Morgan Price, and M. Satyanarayanan. </author> <title> A programming interface for application-aware adaptation in mobile computing. </title> <journal> Computing Systems, </journal> <volume> 8(4) </volume> <pages> 345-363, </pages> <month> Fall </month> <year> 1995. </year>
Reference-contexts: These RDOs are not true mobile agents because they do not move after they have begun execution. Noble et al. <ref> [NPS95] </ref> describe the Odyssey system, in which applications on mobile computers can request upcalls whenever a change in resource state, such as network bandwidth or battery power, exceeds some threshold. <p> If the laptop is connected for less time than the interval between pings, the dock-master will not detect the connection. A better solution is to obtain an interrupt directly from the operating system when the network connection changes <ref> [NPS95] </ref>. 4. Through a simple convention, it is easy to locate the dock for a given host: the dock for host named X.domain is the host named X dock.domain. There are some environments, however, that include nameless hosts, most commonly, personal computers assigned an IP address dynamically at boot time.
Reference: [PB95] <author> Evaggelia Pitoura and Bharat Bhargava. </author> <title> A framework for providing consistent and recoverable agent-based access to heterogeneous mobile databases. </title> <journal> ACM SIGMOD Record, </journal> <volume> 24(3) </volume> <pages> 44-49, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: As yet, however, none of these projects have considered mobile platforms. Others have specifically suggested using mobile agents in mobile-computing environments. Pitoura and Bhargava propose a framework for agents to interact with heterogeneous mobile databases, but they focus on database consistency issues more than communication and transport issues <ref> [PB95] </ref>. Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction.
Reference: [Pei96] <author> Holger Peine. </author> <title> The ARA project. WWW page http://www.uni-kl.edu/AG-Nehmer/Ara, Distributed Systems Group, </title> <institution> Department of Computer Science, University of Kaiserlautern, </institution> <year> 1996. </year>
Reference-contexts: There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA <ref> [Pei96] </ref>. As yet, however, none of these projects have considered mobile platforms. Others have specifically suggested using mobile agents in mobile-computing environments. Pitoura and Bhargava propose a framework for agents to interact with heterogeneous mobile databases, but they focus on database consistency issues more than communication and transport issues [PB95].
Reference: [RHR + 94] <author> Peter Reiher, John Heidemann, David Ratner, Greg Skinner, and Gerald Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In Proceedings of the 1994 Summer USENIX Conference, </booktitle> <pages> pages 183-195, </pages> <year> 1994. </year>
Reference-contexts: Some database systems allow "stored SQL procedures" where you can define complex SQL commands and store them on the server [BP88]. The stored commands are executed at the server end during a user transaction. Some distributed file systems support disconnected operation, including Coda [KS92, MES95], Ficus <ref> [RHR + 94] </ref>, and others [HH95]. In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers.
Reference: [SG90] <author> J. Stamos and D. Gifford. </author> <title> Remote evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) <ref> [SG90] </ref>, and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java [Sun94], Safe Tcl [BR], and Omniware [Col95] are concerned with the safe execution of untrusted code fragments.
Reference: [Sto94] <author> A. D. Stoyenko. SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls. </title> <journal> Software Practice and Experience, </journal> <volume> 24(1) </volume> <pages> 27-49, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Remote programming allows a client to send a subprogram to a server. The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC <ref> [Sto94] </ref>. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java [Sun94], Safe Tcl [BR], and Omniware [Col95] are concerned with the safe execution of untrusted code fragments.
Reference: [Sun94] <institution> The Java language: A white paper. Sun Microsystems White Paper, Sun Microsystems, </institution> <year> 1994. </year>
Reference-contexts: This view is reflected in the range of applications in which mobile agents are used. Perhaps the most common examples of mobile code are Java applets. Java applets are interactive applications that can be dynamically pulled across the network with a Java-enabled WWW browser <ref> [Sun94] </ref>. Java applets are not true mobile agents since they migrate only once, before they start executing, and then only when requested by a user. <p> The subprogram executes on the server and sends its result back to the client. Variants of remote programming include the Network Command Language (NCL) [Fal87], Remote Evaluation (REV) [SG90], and SUPRA-RPC [Sto94]. Agents generalize remote programming to allow arbitrary code movement. Systems such as Java <ref> [Sun94] </ref>, Safe Tcl [BR], and Omniware [Col95] are concerned with the safe execution of untrusted code fragments. Safe Tcl is limited to Tcl scripts but Java and Omniware can work with any program (as long as the program is compiled into the bytecodes of the appropriate virtual machine).
Reference: [TLKC95] <author> Bent Thomsen, Lone Leth, Frederick Knabe, and Pierre-Yves Chevalier. </author> <title> Mobile agents. </title> <type> ECRC external report, </type> <institution> European Computer-Industry Research Centre, </institution> <year> 1995. </year>
Reference-contexts: Conversely, an application that lives in the network can send a mobile agent onto the laptop. The agent acts as the application's surrogate, interacting with the user efficiently and continuing to interact even in the event of long-term disconnection <ref> [TLKC95, JdT + 95] </ref>. <p> Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript [Whi94a, Whi94b], Tacoma [JvS95], Mobile service Agents (MSA) <ref> [TLKC95] </ref>, and our own Agent Tcl [Gra95, Gra96]. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. <p> Tele-script supports mobile computers and is used primarily on Personal Digital Assistants (PDA) such as the Sony Magic Link. The details of how Telescript agents jump between mobile hosts and handle disconnected operation are unclear. The Mobile Service Agent (MSA) system from ECRC <ref> [TLKC95] </ref> also supports mobile computers, but it uses a less general mechanism than described in this paper. There are several other research projects that are building infrastructure for mobile agents. The most notable are Tacoma [JvS95], Itinerant Agents [CGH + 95], Sodabot [Coe94], and ARA [Pei96].
Reference: [TTP + 95] <author> Douglas B. Terry, Marvin M. Theimer, Karin Petersen, Alan J. Demers, Mike J. Spre-itzer, and Carl H. Hauser. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: In these systems, applications on the laptop access the local file cache while the laptop is disconnected. On reconnection, the file system reconciles any differences with the appropriate file servers. The Bayou file system <ref> [TTP + 95] </ref> internally uses a form of mobile code (but not agents) to handle reconciliation. The Rover system [JdT + 95] supports disconnected operation through queued RPC and relocat-able dynamic objects (RDO).
Reference: [Wel95] <author> Brent Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: The only language that we currently support is Tcl, although work on Java is underway. Tcl is a high-level scripting language that was developed in 1987 and has enjoyed enormous popularity <ref> [Wel95] </ref>. Tcl is an attractive agent language due to its simplicity, ease of use, and portability. A set of special commands was added to Tcl to create Agent Tcl. An agent uses these commands to migrate from machine to machine and to communicate with other agents.
Reference: [Whi94a] <author> James E. White. </author> <title> Mobile agents make a network an open platform for third-party developers. </title> <journal> IEEE Computer, </journal> <volume> 27(11) </volume> <pages> 89-90, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: By moving to the local machine, an applet can control the screen efficiently without the need for pre-installation. Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript <ref> [Whi94a, Whi94b] </ref>, Tacoma [JvS95], Mobile service Agents (MSA) [TLKC95], and our own Agent Tcl [Gra95, Gra96]. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. <p> These three systems do not directly support mobile agents, but they address the same security issues and can be used as components in a larger system. Safe Tcl, for example, is used in Agent Tcl. The best-known mobile-agent system is Telescript from General Magic <ref> [Whi94b, Whi94a] </ref>. Tele-script supports mobile computers and is used primarily on Personal Digital Assistants (PDA) such as the Sony Magic Link. The details of how Telescript agents jump between mobile hosts and handle disconnected operation are unclear.
Reference: [Whi94b] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, </title> <year> 1994. </year>
Reference-contexts: Mobile agents also ease the development, testing and deployment of distributed applications since they hide the communication channels but not the location of the computation <ref> [Whi94b] </ref>; they eliminate the need to detect and handle network failure except during migration; they do not require the preinstallation of application-specific software at each site (although the agent system must be present); and they can dynamically distribute and redistribute themselves throughout 2 the network. <p> By moving to the local machine, an applet can control the screen efficiently without the need for pre-installation. Applets represent a special case of mobile agents. Mobile agents are much more powerful since they migrate at will. True mobile-agent systems include Telescript <ref> [Whi94a, Whi94b] </ref>, Tacoma [JvS95], Mobile service Agents (MSA) [TLKC95], and our own Agent Tcl [Gra95, Gra96]. Telescript agents are currently used for network management, active e-mail, electronic commerce, and business process management. <p> These three systems do not directly support mobile agents, but they address the same security issues and can be used as components in a larger system. Safe Tcl, for example, is used in Agent Tcl. The best-known mobile-agent system is Telescript from General Magic <ref> [Whi94b, Whi94a] </ref>. Tele-script supports mobile computers and is used primarily on Personal Digital Assistants (PDA) such as the Sony Magic Link. The details of how Telescript agents jump between mobile hosts and handle disconnected operation are unclear. <p> Agent Tcl meets four main goals: * Reduce migration to a single instruction like the Telescript go instruction <ref> [Whi94b] </ref>, allow the instruction to appear at arbitrary points, and once the instruction is called, transparently capture the current state of the agent and transmit this state to the destination machine. The programmer should not have to explicitly collect state information.
Reference: [Wu95] <author> Yunxin Wu. </author> <title> Advanced algorithms of information organization and retrieval. </title> <type> Master's thesis, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <year> 1995. </year> <month> 16 </month>
Reference-contexts: The user interacts with the proceedings via this agent and can continue interacting even when disconnected. Agent Tcl has been used primarily in information-retrieval applications. One information-retrieval application involves searching distributed collections of technical reports; another, medical records <ref> [Wu95] </ref>; and a third, three-dimensional drawings of mechanical parts [CBC96]. The advantages of agents in these retrieval applications is that each distributed collection can provide low-level primitives rather than all possible search operations; an agent can combine the primitives into efficient, multi-step searches.
Reference: [WYOT93] <author> Hiromi Wada, Takashi Yozawa, Tatsuya Ohnishi, and Yasunori Tanaka. </author> <title> Mobile com-puting environment based on internet packet forwarding. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Conference, </booktitle> <pages> pages 503-517, </pages> <month> January </month> <year> 1993. </year> <month> 17 </month>
Reference-contexts: There are of course many papers on mobile IP and packet forwarding. Perhaps the best background source is [Joh95]. Other examples include [BZCS96], [IG93] and <ref> [WYOT93] </ref>. The idea is generally to allow a mobile computer to retain the same IP address regardless of location, so that applications on the laptop may continue to communicate with applications elsewhere.
References-found: 36

