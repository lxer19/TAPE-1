URL: http://www.cs.toronto.edu/~zilio/pub/IEEEPADS93.ps
Refering-URL: http://www.cs.toronto.edu/~zilio/
Root-URL: 
Title: Data reorganization in parallel database systems  
Author: Chaitanya Baru Daniel C. Zilio 
Address: North York, Ontario M3C 1W3 Toronto, Ontario M5S 1A4  
Affiliation: IBM Toronto Lab Department of Computer Science IBM Canada Ltd. University of Toronto  
Date: Oct. 1993.  
Note: Appears in Proc. of the IEEE Workshop on Advances in Parallel and Distributed Systems, Princeton, NJ, pp.102-107,  
Abstract: Parallel database systems are suitable for use in applications with high capacity and high performance and availability requirements. The trend in such systems is to provide efficient on-line capability for performing various system administration functions such as, index creation and maintenance, backup/restore, reorganization, and gathering of statistics. For some of these functions, the on-line capability can be efficiently supported by the use of "incremental algorithms", i.e., algorithms that achieve the function in several, relatively small (i.e., less time-consuming) steps, rather than in a single, large step. Incremental algorithms ensure that only small parts of the database become inaccessible for short durations as opposed to non-incremental algorithms which may lock large portions of the database or the entire database for a longer duration. In this paper, we discuss issues in providing concurrent data reorganization capability using incremental algorithms in parallel database systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Copeland, G., Alexander, W., Boughter, E., and Keller, T., </author> <title> "Data placement in BUBBA," </title> <booktitle> ACM SIGMOD-88, </booktitle> <address> Chicago, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: The initial data placement problem for parallel database systems has been addressed in <ref> [1, 2] </ref>. Here, we assume that a set of tables is partitioned into groups based on their affinity, i.e. frequency of inter-table operations. Each group is then mapped to a cluster of processors in the parallel system using techniques similar to those mentioned in [2].
Reference: [2] <author> Padmanabhan, S. and Baru, C., </author> <title> "Data placement in parallel database systems," </title> <booktitle> ACM Intl. Conf. on Information and Knowledge Management, </booktitle> <address> Nov. 1993, Baltimore, MD. </address>
Reference-contexts: The initial data placement problem for parallel database systems has been addressed in <ref> [1, 2] </ref>. Here, we assume that a set of tables is partitioned into groups based on their affinity, i.e. frequency of inter-table operations. Each group is then mapped to a cluster of processors in the parallel system using techniques similar to those mentioned in [2]. <p> Here, we assume that a set of tables is partitioned into groups based on their affinity, i.e. frequency of inter-table operations. Each group is then mapped to a cluster of processors in the parallel system using techniques similar to those mentioned in <ref> [2] </ref>. For example, Case 1 of figure 4 shows three groups with Group X containing tables R; S; T; U ; Group Y containing tables P; V ; and Group Z containing tables W; Q. The clustering and initial placement decisions are based on the input workload information.
Reference: [3] <author> Shivaratri, N. G., Krueger, P., Singhal, M., </author> <title> "Load distributing for locally distributed systems," </title> <booktitle> IEEE Computer, </booktitle> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Another issue that we plan to study is the gathering of relevant statistics to aid in reorganization. For example, it may be possible to characterize the response time performance using other system statistics that can be collected with lesser overheads. In <ref> [3] </ref>, they mention the use of a "load index" which could include CPU utilizations, CPU queue lengths, etc. as an indicator of response time behavior. We are interested in using a similar concept in the context of parallel database systems.
Reference: [4] <author> Sockut, G. H., Goldberg, R. P., </author> <title> "Database reorganization Principles and practice," </title> <journal> ACM Computing Surveys, </journal> <month> Dec., </month> <year> 1979. </year>
Reference-contexts: 1 Introduction Dynamic database reorganization algorithms have been studied in the past, in the context of single-node (or sequential) database systems. A survey of these issues is provided in <ref> [4, 6] </ref>. The focus of these studies has been on determining reorganization intervals for a database. More recently, some work has also been done on dynamic reorganization at the file level [5]. The advent of parallel database systems motivates us to study database reorganization in such systems.
Reference: [5] <author> Weikum, G., Zabback, P., Scheuermann, P., </author> <title> "Dynamic file allocation in disk arrays," </title> <booktitle> ACM SIGMOD-91, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: A survey of these issues is provided in [4, 6]. The focus of these studies has been on determining reorganization intervals for a database. More recently, some work has also been done on dynamic reorganization at the file level <ref> [5] </ref>. The advent of parallel database systems motivates us to study database reorganization in such systems. In this paper, we identify issues in dynamic database reorganization in shared-nothing parallel database systems.

References-found: 5

