URL: http://www.isi.edu/software-sciences/wile/Popart/icse-97.ps
Refering-URL: http://www.isi.edu/software-sciences/wile/Popart/popart.html
Root-URL: http://www.isi.edu
Title: Abstract Syntax from Concrete Syntax recent years, programming language design and implementation technology have evolved
Author: David S. Wile flflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflflfl 
Keyword: Abstract syntax, concrete syntax, domainspecific languages, program transformation, grammars, objectoriented models, reverse engineering.  
Note: REFERENCE $SSHDUHGfl LQfl WKHfl 3URFHHGLQJVfl RIfl WKHfl tWK ,QWHUQDWLRQDOfl &RQIHUHQFHfl RQfl 6RIWZDUH (QJLQHHULQJ* 0D" tt* %RVWRQ*  In  
Address: 4676 Admiralty Way Marina del Rey, CA USA  
Affiliation: University of Southern California Information Sciences Institute  
Pubnum: ffi 6SRQVRUHGfl E" WKHfl $GYDQFHGfl 5HVHDUFKfl 3URMHFWV  
Email: wile@isi.edu  
Phone: (310) 822-1511  
Date: $JHQF"flXQGHUflFRQWUDFWflQRfl)t&-  
Web: 0$*flSSfl--  
Abstract: Modern Software Engineering practice advocates the development of domainspecific specification languages to characterize formally the idioms of discourse and jargon of specific problem domains. With poorly-understood domains it is best to construct an abstract syntax to characterize the domain concepts and abstractions before developing a concrete syntax. Often, however, a good concrete syntax exists a priori: sometimes in sophisticated formal languages characterizing (often mathematical) domains but more often in miniature, legacy-code languages, sorely in need of reverse engineering. In such cases, it is necessary to derive an appropriate abstract syntax or its first cousin, an objectoriented model from the concrete syntax. This report describes a transformation process that produces a good abstract representation from a low-level concrete syntax specification. ABSTRACT MODELS + 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Balzer, R., Feather, M., Goldman, N., and Wile, D. </author> <title> Domain Specific Notations for Command and Control Message Passing, </title> <type> Internal report: </type> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA (1994). </address>
Reference: 2. <author> Batory, D. </author> <title> Scalable Software Libraries, </title> <booktitle> Proceedings of the First ACM SIGSOFT Symposium on the Foundations of Software Engineering (1993), </booktitle> <pages> pp. 191-197. </pages>
Reference: 3. <author> Booch, G.Object-Oriented Analysis and Design.Benjamin/Cummings Publishing. </author> <year> (1994) </year>
Reference: 4. <author> Goguen, J. A., Thatcher, J. W., Wagner, E. G., and Wright, J. B. </author> <title> Initial Algebra Semantics and Continuous Algebras, </title> <journal> Journal of the ACM 24:1(1977), </journal> <pages> pp. 68-95. </pages>
Reference-contexts: RELATED WORK Abstract syntax has been around for decades; one can easily argue that Lisp was the first instantiation! In the late 1970s the Mentor group proselytized the concept [6]. About the same time recognition that languages are algebras (with abstract syntax signatures) was recognized by the ADJ-group <ref> [4] </ref>. All syntax-directed tool suites are founded on abstract syntax: Gandalf [9] and the Cornell Synthesizer Generator [11], for example. Its analog in object classes has been recognized by Lieberherr [7]. He also shows how conversion between LL1 languages and abstract syntax is possible.
Reference: 5. <author> Kieburtz, R., Bellegarde, F., Bell, J. , Hook, J., Lewis, J., Oliva, D. Sheard, T., Walton, T, and Zhou, T. </author> <title> Calculating Software Generators from Solution Specifications, </title> <institution> Technical Report # CS/E-94-032B of the Oregon Graduate Center (1994). </institution>
Reference: 6. <author> Donzeau-Gouge, V., Kahn, G., Lang, B., and Mlse, B. </author> <title> Document Structure and Modularity in Mentor, </title> <booktitle> Proceedings of the ACM SIGSOFT/SIGPLAN Software Symposium on Practical Software Development Environments (1984), </booktitle> <pages> pp. 141-148. </pages>
Reference-contexts: RELATED WORK Abstract syntax has been around for decades; one can easily argue that Lisp was the first instantiation! In the late 1970s the Mentor group proselytized the concept <ref> [6] </ref>. About the same time recognition that languages are algebras (with abstract syntax signatures) was recognized by the ADJ-group [4]. All syntax-directed tool suites are founded on abstract syntax: Gandalf [9] and the Cornell Synthesizer Generator [11], for example. Its analog in object classes has been recognized by Lieberherr [7].
Reference: 7. <author> Lieberherr, K. </author> <title> Adaptive ObjectOriented Software: The Demeter Method with Propagation Patterns, </title> <publisher> PWS Publishing Company, </publisher> <address> Boston (1996) </address>
Reference-contexts: About the same time recognition that languages are algebras (with abstract syntax signatures) was recognized by the ADJ-group [4]. All syntax-directed tool suites are founded on abstract syntax: Gandalf [9] and the Cornell Synthesizer Generator [11], for example. Its analog in object classes has been recognized by Lieberherr <ref> [7] </ref>. He also shows how conversion between LL1 languages and abstract syntax is possible. However, the most effort relating the two has been spent on printing abstract syntax trees in concrete syntax (one of many possible such syntaxes).
Reference: 8. <author> Levy, L. S. </author> <title> Taming the Tiger: </title> <booktitle> Software Engineering and Software Economics, </booktitle> <publisher> Springer Verlag: </publisher> <address> New York (1987). </address> <note> 9 . Notkin, </note> <author> D., Ellison, R. J., Staudt, B. J., Kaiser, G. E., Kant, E., Habermann, A. N., Ambriola, V., and Montangero, C. </author> <title> Special issue on the GANDALF project, </title> <journal> Journal of Systems and Software 5, </journal> <month> 2(May </month> <year> 1985). </year>
Reference: 10. <author> The Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, OMG Document # 91.12.1 Digital Equipment, HP, Hyperdesk, NCR, Object Design, Sunsoft (1992). </title>
Reference: 11. <author> Reps, T. W., and Teitelbaum, T. </author> <title> The Synthesizer Generator. </title> <publisher> Springer-Verlag, </publisher> <address> New York (1988). </address>
Reference-contexts: About the same time recognition that languages are algebras (with abstract syntax signatures) was recognized by the ADJ-group [4]. All syntax-directed tool suites are founded on abstract syntax: Gandalf [9] and the Cornell Synthesizer Generator <ref> [11] </ref>, for example. Its analog in object classes has been recognized by Lieberherr [7]. He also shows how conversion between LL1 languages and abstract syntax is possible.
Reference: 12. <author> Wile, D. S. Popart: </author> <title> Producers of Parsers and Related Tools, Reference Manual. </title> <institution> USC/Information Sciences Institute, Marina del Rey, </institution> <address> CA (1993). </address>
Reference: 13. <author> Wile, D. S. </author> <title> Toward a Calculus for Abstract Syntax Trees, </title> <booktitle> in Proceedings of a Workshop on Algorithmic Languages and Calculi IFIPs TC2, </booktitle> <address> Strasbourg (Feb., </address> <year> 1997). </year> <note> (To appear.) </note>
Reference-contexts: Of course, methods could be introduced to protect the syntax, but if tools such as parsers and transformers manipulate it, this may be unnecessary. This heuristic process has been implemented in the Popart system, running in Common Lisp. Further details are available in <ref> [13] </ref>. The automatic conversion of Corbas IDL into abstract syntax was especially rewarding, since the grammar is sizable and previously, we had used ad hoc methods for accomplishing the translation.
References-found: 12

