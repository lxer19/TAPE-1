URL: http://www.cs.unc.edu/~walk/papers/luebke/postscript/portals.ps
Refering-URL: http://www.cs.unc.edu/~walk/papers/
Root-URL: http://www.cs.unc.edu
Title: cells boundaries will all be common operations in an interactive architectural design application. To take
Author: Mike Goslin, Hans Weber, Power P. Ponamgi, Peggy Wetzel, 
Keyword: Faster Dynamic PVS Evaluation Implementation  
Note: Ongoing and Future Work Acknowledgments The authors would like to  and Stump Brady. This work was supported by ARPA Contract DABT63-93-C-C048. References  
Abstract: Envisioning such an application as our final goal, we decided to focus on improving the dynamic visibility determination. Jones algorithm finds the exact intersection of 2D convex regions, requiring O(n lg n) time for portal sequences with n edges. Tellers linear programming approach computes only the existence of an intersection, and runs in time linear in the number of edges. We sought a dynamic solution that would also run in linear time and would integrate easily into existing systems. We use a variation of Jones approach that employs bounding boxes instead of general convex regions. Our scheme first projects the vertices of each portal into screen-space and takes the axial 2D bounding box of the resulting points. This 2D box, called the cull box, represents a conservative bound for the portal; that is, objects whose screenspace projection falls entirely outside the cull box are guaranteed not to be visible through the portal and may be safely culled away. As each successive portal is traversed, its box is intersected with the aggregate cull box using only a few comparisons. During traversal the contents of each cell are tested for visibility through the current portal sequence by comparing the screenspace projection of each objects bounding box against the intersected cull box of all portals in the sequence. If the projected bounding box intersects the aggregate cull box, the object is potentially visible through the portals and must be rendered. Since a single object may be visible through multiple portal sequences, we tag each object as we render it. This object-level culling lets us avoid rendering objects more than once per frame. Alternatively, we can render each object once for every portal sequence which admits a view of the object, but clip the actual primitives to the aggregate cull box of each sequence. Under this primitive-level clipping scheme objects may be visited more than once, but since the portal boundaries do not overlap, no portion of any primitive will be rendered twice. Typically object-level culling will prove more efficient, but for objects whose per-primitive rendering cost far exceeds their clipping cost, primitive-level clipping provides a viable option. We have implemented this approach on Pixel-Planes 5, the custom graphics multicomputer developed at the University of North Carolina. The traversal mechanism treats portals as primitives to be rendered. Each portal consists of a polygonal boundary and a pointer to the adjacent cell; when a portal is encountered during traversal we test its axial screenspace bounding box against the current aggregate cull box. If the intersection is non-empty, we use it as the new aggregate cull box and recursively traverse the connected cell. We feel that modeler integration is crucial to this problem of interactive model revision. If an architect wishes to move a wall or broaden a doorway, the modeling system should be able to make the change quickly and broadcast that change to the graphics system. In our system the spatial partitioning of the model into cells and portals is directly embedded in the modelers representation. Portals are treated as augmented polygons, each tagged with the name of the attached cell. Cells are simply logical groupings in the modelers hierarchy and need not necessarily be convex. We have found this quite convenient when constructing models; each room typically corresponds to a cell and it takes only seconds to add and move a portal, or to reshape a cell. We have already adapted two commercial modelers to our system, which speaks to the simplicity of the integration process. Results We have tested our system on a subset of the UNC Walk-through projects model of Professor Fred Brooks house, comprised of 367,000 radiositized triangles. The speedup obtained by this visibility algorithm, like the speedup obtained by similar schemes, is extremely view-and model-dependent. Over a 500-frame test path through the model, the frame rate using PVS evaluation ranged from just over 1 to almost 10 times the frame rate of the entire unculled model. For typical views the dynamic PVS evaluation culled away 20% to 50% of the model. It should be emphasized again that these numbers are specific to the model and view path, but they certainly indicate the promise of the algorithm as a simple, effective acceleration technique. Efficiency could be further increased by applying obscura-tion culling to portals [4]. This scheme tests potentially visible items against an almost complete Z-buffer before rendering. This would allow the detail objects in each cell as well as the occluding cell walls to block portals, potentially reducing the PVS. The Pixel-Planes architecture makes obscuration culling of portals feasible, and we are currently exploring this possibility. Teller mentions that the concept of portals may be extended to mirrors [3]. Under this scheme mirrors are treated as portals which transform the attached cell about the plane of the mirror; this has the advantage of automatically restricting the PVS seen through the mirror. Though conceptually simple, mirrors introduce many practical difficulties which require additional clipping by the rendering engine to resolve. For example, geometry behind the mirror must not appear in its reflected world, and reflected geometry must not appear in front or to the side of the mirror. A special case that avoids these problems can be constructed by embedding the mirror in an opaque cell boundary (for example, a wall-mounted mirror in a bathroom), and we have implemented such mirrors (Plate 1). The concept of an immovable mirror fits poorly with our goal of interactive, dynamic environments, however, so we have focused on the more general case. Clipping is complicated further by mirrors that overlap in screenspace, and further still by mirrors which recursively reflect other mirrors. At present our system allows static mirrors, which can reflect each other to arbitrary levels of recursion, or more general hand-held mirrors, (an example of free-moving portals), which permit one-bounce reflections. We are currently working on the dynamic, fully recursive case. [1] Jones, C.B. A New Approach to the Hidden Line Problem. The Computer Journal, vol. 14 no. 3 (August 1971), 232.. [2] Airey, John. Increasing Update Rates in the Building Walk-through System with Automatic Model-Space Subdivision and Potentially Visible Set Calculations. Ph.D. thesis, UNC-CH CS Department TR #90-027 (July 1990). [3] Teller, Seth. Visibility Computation in Densely Occluded Polyhedral Environments. Ph.D. thesis, UC Berkeley CS Department, TR #92/708 (1992). [4] Greene, Ned, Kass, Michael, and Miller, Gavin. Hierarchical Z-Buffer Visibility. Proceedings of SIGGRAPH 93 (Anaheim, California 1993). In Computer Graphics Proceedings, Annual Conference Series, 1993, ACM SIG-GRAPH, New York 1993, pp. 59-66. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jones, C.B. </author> <title> A New Approach to the Hidden Line Problem. </title> <journal> The Computer Journal, </journal> <volume> vol. 14 no. </volume> <month> 3 (August </month> <year> 1971), </year> <month> 232.. </month>
Reference: [2] <author> Airey, John. </author> <title> Increasing Update Rates in the Building Walk-through System with Automatic Model-Space Subdivision and Potentially Visible Set Calculations. </title> <type> Ph.D. thesis, </type> <note> UNC-CH CS Department TR #90-027 (July 1990). </note>
Reference: [3] <author> Teller, Seth. </author> <title> Visibility Computation in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. thesis, </type> <institution> UC Berkeley CS Department, </institution> <note> TR #92/708 (1992). </note>

References-found: 3

