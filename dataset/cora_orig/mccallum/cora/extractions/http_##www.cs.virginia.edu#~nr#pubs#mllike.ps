URL: http://www.cs.virginia.edu/~nr/pubs/mllike.ps
Refering-URL: http://www.cs.virginia.edu/~nr/pubs/mllike-abstract.html
Root-URL: http://www.cs.virginia.edu
Email: nr@cs.virginia.edu  
Title: Using an ML-Like Language to Specify the Semantics of Machine Instructions  
Author: Norman Ramsey 
Date: July 24, 1998  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: Languages in the Computer Systems Description Languages (CSDL) family describe properties of machines. The descriptions are used to generate machine-dependent components of systems software. CSDL specifies instruction semantics using register transfer lists. Much information that is implicit in other register-transfer frameworks is explicit in CSDL. So much detail is required that it would be unrealistic to expect people to write these register transfers directly; a metalanguage is needed. The metalanguage, called -RTL, is based on ML. ML types and type inference are extended to provide polymorphism in "widths" as well as types, enabling the -RTL translator to infer much of the detail needed. Higher-order functions enable exploration and discovery of idioms that will be useful for specifying the semantics of machine instructions. ML extended with subtyping enables -RTL programmers to leave fetches implicit, resulting in a notation that is familiar to compiler writers and machine designers. -RTL contains polymorphic primitives in which the width of the result is independent of the width of an argument. Applying such primitives may result in terms with free "width variables." It would be counterproductive to forbid such terms; they occur too frequently. -RTL typically constrains such variables, and it binds one by choosing the minimal integer satisfying the constraint.
Abstract-found: 1
Intro-found: 1
Reference: <author> Bailey, Mark W. and Jack W. Davidson. </author> <year> 1995 </year> <month> (January). </month> <title> A formal model and specification language for procedure calling conventions. </title> <booktitle> In Conference Record of the 22nd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 298-310, </pages> <address> San Francisco, CA. </address> . <year> 1996 </year> <month> (February). </month> <title> Reusable application-dependent machine descriptions. </title> <note> Presented at WCSSS'96. </note>
Reference-contexts: CSDL descriptions are composed from simple components, each one of which describes, as much as possible, a single property of the target machine. Different components may be written in different languages; the CSDL family currently includes four description languages, of which two are mature: CCL, which describes calling conventions <ref> (Bailey and Davidson 1995) </ref>, and SLED, which describes representations of machine instructions (Ramsey and Fernandez 1997). CSDL uses register transfer lists (RTLs) to specify the semantics of machine instructions.
Reference: <author> Bell, C. Gordon and Allen Newell. </author> <year> 1971. </year> <title> Computer Structures: Readings and Examples. </title> <address> New York: </address> <publisher> McGraw-Hill. </publisher>
Reference-contexts: As a notation for specification, the form given above is unrealistic|people can't be expected to write down all that detail. Compiler writers and machine designers have long used RTLs as informal notation <ref> (Bell and Newell 1971) </ref>. Compilers have used RTLs as intermediate forms (Davidson and Fraser 1984). The purpose of -RTL is to support the kinds of notations these users are already comfortable with, but to give the notations a precise meaning in terms of fully explicit RTLs.
Reference: <author> Benitez, Manuel E. and Jack W. Davidson. </author> <year> 1988 </year> <month> (July). </month> <title> A portable global optimizer and linker. </title> <booktitle> Proceedings of the ACM SIGPLAN '88 Conference on Programming Language Design and Implementation, in SIGPLAN Notices, </booktitle> <volume> 23(7) </volume> <pages> 329-338. </pages> <note> 16 Cardelli, </note> <author> Luca. </author> <year> 1997. </year> <title> Type systems. </title>
Reference-contexts: The algorithm used to insert fetches and aggregations is weaker than that of Mitchell (1991). Few of the type and width constraints have been implemented. A more awkward notation is used to define curried functions. The translator produces RTL-creation functions used in the VPO compiler <ref> (Benitez and Davidson 1988) </ref> and a "processor supplement" describing the instruction set. The translator is written in Standard ML.
Reference: <editor> In Allen B. Tucker, Jr., editor, </editor> <booktitle> The Computer Science and Engineering Handbook, chapter 103, </booktitle> <pages> pages 2208-2236. </pages> <address> Boca Raton, FL: </address> <publisher> CRC Press. </publisher>
Reference: <author> Damas, Luis and Robin Milner. </author> <year> 1982. </year> <title> Principal type-schemes for functional programs. </title> <booktitle> In Conference Record of the 9th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 207-12, </pages> <address> New York. </address>
Reference-contexts: The solution to this problem is a metalanguage, -RTL, which makes it possible to write register-transfer semantics without having to write all of the detail explicitly. The metalanguage is based on ML, primarily for two reasons: 2 * ML-style type inference <ref> (Damas and Milner 1982) </ref> and Mitchell's (1991) inference of coercions make it possible to infer much of the detail needed. <p> The same k could be used with different ns. set, and therefore without requiring change in underlying tools. Figure 2 shows some of the primitive RTL operators and their types. -RTL is translated into a second-order typed calculus. A variation on Algorithm W <ref> (Damas and Milner 1982) </ref> infers not only types, but also widths.
Reference: <author> Davidson, Jack W. and Christopher W. Fraser. </author> <year> 1984 </year> <month> (October). </month> <title> Code selection through object code optimization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4) </volume> <pages> 505-526. </pages> <publisher> Intel Corporation. </publisher> <year> 1993. </year> <title> Architecture and Programming Manual. Vol. 3 of Pentium Processor User's Manual. Mount Prospect, </title> <address> IL. </address>
Reference-contexts: As a notation for specification, the form given above is unrealistic|people can't be expected to write down all that detail. Compiler writers and machine designers have long used RTLs as informal notation (Bell and Newell 1971). Compilers have used RTLs as intermediate forms <ref> (Davidson and Fraser 1984) </ref>. The purpose of -RTL is to support the kinds of notations these users are already comfortable with, but to give the notations a precise meaning in terms of fully explicit RTLs.
Reference: <author> Milner, Robin. </author> <year> 1978 </year> <month> (December). </month> <title> A theory of type polymorphism in programming. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 </volume> <pages> 348-375. </pages>
Reference-contexts: Such constants fit into a generalization of the Hindley-Milner type system <ref> (Milner 1978) </ref>, as described below. 4 The need for a metalanguage For generating tools, the form of RTLs given above has significant advantages. Byte order and word size are explicit, so we can build tool generators that don't make assumptions about the target machine.
Reference: <author> Mitchell, John C. </author> <year> 1991 </year> <month> (July). </month> <title> Type inference with simple subtypes. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(3) </volume> <pages> 245-286. </pages>
Reference-contexts: To handle implicit fetches and aggregations, it attaches subtype constraints to type variables <ref> (Mitchell 1991) </ref>. It permits types to be parameterized by widths, which are natural numbers.
Reference: <author> Ramsey, Norman and Jack W. Davidson. </author> <year> 1997 </year> <month> (November). </month> <title> Specifying instructions' semantics using CSDL (preliminary report). </title> <type> Technical Report CS-97-31, </type> <institution> Department of Computer Science, University of Virginia. </institution> <note> Revised, </note> <month> May </month> <year> 1998. </year> <month> . </month> <year> 1998 </year> <month> (June). </month> <title> Machine descriptions to build tools for embedded systems. </title> <booktitle> In ACM SIGPLAN Workshop on Languages, Compilers, and Tools for Embedded Systems (LCTES'98), Vol. 1474 of LNCS, </booktitle> <pages> pages 172-188. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: Different components may be written in different languages; the CSDL family currently includes four description languages, of which two are mature: CCL, which describes calling conventions (Bailey and Davidson 1995), and SLED, which describes representations of machine instructions <ref> (Ramsey and Fernandez 1997) </ref>. CSDL uses register transfer lists (RTLs) to specify the semantics of machine instructions. The distinguishing feature of CSDL's RTLs is that they have a detailed, unambiguous semantics independent of any target machine (Ramsey and Davidson 1998). <p> This algorithm is therefore slated for replacement. 6 Examples The examples in this section are drawn from a complete description of the SPARC and a description covering some of the more interesting features of the Pentium <ref> (Ramsey and Davidson 1997) </ref>. Higher-order function for manipulating groups of registers -RTL has no iteration, looping, or recursive constructs, but it does provide Vector.foldr in the initial basis. <p> Experiments with describing the Pentium have covered registers and their aliases, effective addresses, and logical instructions. The preceding section gives the essence of these experiments. Both descriptions, as well as more lengthy expositions of RTLs and -RTL, are available in a technical report <ref> (Ramsey and Davidson 1997) </ref>. A prototype translator implements -RTL, but with a number of differences from the language presented in this paper. The algorithm used to insert fetches and aggregations is weaker than that of Mitchell (1991). Few of the type and width constraints have been implemented.
Reference: <author> Ramsey, Norman and Mary F. Fernandez. </author> <year> 1997 </year> <month> (May). </month> <title> Specifying representations of machine instructions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 19(3) </volume> <pages> 492-524. </pages>
Reference-contexts: Different components may be written in different languages; the CSDL family currently includes four description languages, of which two are mature: CCL, which describes calling conventions (Bailey and Davidson 1995), and SLED, which describes representations of machine instructions <ref> (Ramsey and Fernandez 1997) </ref>. CSDL uses register transfer lists (RTLs) to specify the semantics of machine instructions. The distinguishing feature of CSDL's RTLs is that they have a detailed, unambiguous semantics independent of any target machine (Ramsey and Davidson 1998). <p> This algorithm is therefore slated for replacement. 6 Examples The examples in this section are drawn from a complete description of the SPARC and a description covering some of the more interesting features of the Pentium <ref> (Ramsey and Davidson 1997) </ref>. Higher-order function for manipulating groups of registers -RTL has no iteration, looping, or recursive constructs, but it does provide Vector.foldr in the initial basis. <p> Experiments with describing the Pentium have covered registers and their aliases, effective addresses, and logical instructions. The preceding section gives the essence of these experiments. Both descriptions, as well as more lengthy expositions of RTLs and -RTL, are available in a technical report <ref> (Ramsey and Davidson 1997) </ref>. A prototype translator implements -RTL, but with a number of differences from the language presented in this paper. The algorithm used to insert fetches and aggregations is weaker than that of Mitchell (1991). Few of the type and width constraints have been implemented.
Reference: <author> Ramsey, Norman. </author> <year> 1998. </year> <title> Unparsing expressions with prefix and postfix operators. </title> <journal> Software|Practice & Experience. </journal> <note> To appear. 17 </note>
Reference-contexts: CSDL uses register transfer lists (RTLs) to specify the semantics of machine instructions. The distinguishing feature of CSDL's RTLs is that they have a detailed, unambiguous semantics independent of any target machine <ref> (Ramsey and Davidson 1998) </ref>. Previous register-transfer frameworks have left some machine-dependent information (e.g., byte order, word size) implicit. Detailed RTLs should make CSDL useful for building a variety of machine-level tools.
References-found: 11

