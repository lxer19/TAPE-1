URL: http://www.iro.umontreal.ca/labs/lasso/pdb/data/ps_files/1995/000007.ps.gz
Refering-URL: http://www.iro.umontreal.ca/people/zhouz/research/project_papers.html
Root-URL: http://www.iro.umontreal.ca
Title: State enumeration with abstract descriptions of state machines  
Author: F. Corella M. Langevin E. Cerny Z. Zhou X. Song k 
Date: August 19, 1995  
Abstract: We propose a theory of abstract descriptions of state machines in a many-sorted first-order logic with abstract and concrete sorts. State variables containing data values have abstract sorts while control state variables have concrete sorts. Data operations are represented by uninterpreted function symbols. The theory provides a foundation for automated state enumeration methods whose complexity is independent of the width of the data path, and in particular for methods based on Multiway Decision Grahps (MDGs). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bartsch, H. Eveking, H.-J. Faerber, M. Keletatchew, J. Pinder, and U. Schellin. </author> <title> LOVERT A logic verifier of register-transfer level description. </title> <editor> In L. Claesen, editor, </editor> <booktitle> Proc. of the Int. Work. of Applied Formal Methods for Correct VL SI Design, </booktitle> <address> Leuven, Belgium, </address> <month> November </month> <year> 1989. </year> <pages> North-Holland. </pages>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in [3, 19, 25, 26]. Methods based on special calculi, such as <ref> [1, 2] </ref>, were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level. Automated state enumeration techniques provide automation for behavioral comparison or model checking, without imposing restrictions on the circuit behaviors, but operate on descriptions at the logic (i.e. binary) level.
Reference: [2] <author> D. Borrione, P. Camurati, P. Prinetto, and J. L. Paillet. </author> <title> Functional approaches applied to micro-programmed architectures. </title> <journal> Int. Journal of Computer Aided VLSI Design, </journal> <volume> 2(4) </volume> <pages> 339-358, </pages> <year> 1990. </year>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in [3, 19, 25, 26]. Methods based on special calculi, such as <ref> [1, 2] </ref>, were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level. Automated state enumeration techniques provide automation for behavioral comparison or model checking, without imposing restrictions on the circuit behaviors, but operate on descriptions at the logic (i.e. binary) level.
Reference: [3] <author> A. Bronstein. </author> <title> MLP: String-Functional Semantics and Boyer-Moore Mechanization for t he Formal Verification of Synchronous Circuits. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1989. </year>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in <ref> [3, 19, 25, 26] </ref>. Methods based on special calculi, such as [1, 2], were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level.
Reference: [4] <author> Bryant, R. E., </author> <title> "Graph-Based Algorithms for Boolean Function Manipulation", </title> <journal> IEEE Trans. on Comp., </journal> <volume> Vol. 35, No. 8, </volume> <pages> pp. 677-691, </pages> <year> 1986. </year>
Reference-contexts: Automated state enumeration techniques provide automation for behavioral comparison or model checking, without imposing restrictions on the circuit behaviors, but operate on descriptions at the logic (i.e. binary) level. Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation <ref> [4] </ref> to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states [5, 8, 12, 13, 27]. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width.
Reference: [5] <author> Burch, J. R., Clarke, E. M., Long, D. E., McMillan, K. L., Dill, D. L., </author> <title> "Symbolic model checking for sequential circuit verification", </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 13, No. 4, </volume> <pages> pp. 401-424, </pages> <year> 1994. </year>
Reference-contexts: Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation [4] to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states <ref> [5, 8, 12, 13, 27] </ref>. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width. However, these methods are not adequate in general for verifying circuits with datapath because a logic level circuit description is required.
Reference: [6] <author> J. R. Burch and D. L. Dill. </author> <title> Automatic verification of pipelined microprocessor control. </title> <booktitle> In Proc. Work. on Computer-Aided Verification, </booktitle> <year> 1994. </year>
Reference-contexts: These algorithms are based on abstract implicit enumeration of the state space, and are a natural extension of the FSM verification methods that use OBDDs and implicit enumeration. Abstract types and uninterpreted function symbols have also been used in <ref> [6] </ref>, where a heuristic validity checker is used to verify a pipelined implementation against a non-pipelined specification. However this method is of limited scope because it does not allow any state enumeration, implicit or explicit.
Reference: [7] <author> E. M. Clarke, O. Grumberg, and D. E. </author> <title> Long. Model checking and abstraction. </title> <booktitle> In Proc. 19th ACM Symp. on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: Frankfurt, Germany, October, 1995. y IBM Research, corella@watson.ibm.com z GMD-SET, langevin@borneo.gmd.de x Univ. de Montreal, cerny@iro.umontreal.ca -Univ. de Montreal, zhouz@iro.umontreal.ca k Univ. de Montreal, song@iro.umontreal.ca 1 by FSM-based automated verification methods <ref> [28, 7] </ref>. However, the data independence assumption of [28] is highly restrictive, while the method of [7] places a considerable burden on the user of the verification program and does not completely eliminate the dependency on the width of the data path. <p> Frankfurt, Germany, October, 1995. y IBM Research, corella@watson.ibm.com z GMD-SET, langevin@borneo.gmd.de x Univ. de Montreal, cerny@iro.umontreal.ca -Univ. de Montreal, zhouz@iro.umontreal.ca k Univ. de Montreal, song@iro.umontreal.ca 1 by FSM-based automated verification methods [28, 7]. However, the data independence assumption of [28] is highly restrictive, while the method of <ref> [7] </ref> places a considerable burden on the user of the verification program and does not completely eliminate the dependency on the width of the data path.
Reference: [8] <author> Cho, H., Hachtel, G. D., Jeong, S.-W., Plessier, B., Schwarz, E., Somenzi, F., </author> <title> "ATPG Aspects of FSM Verification", </title> <booktitle> in Proc. of ICCAD, </booktitle> <pages> pp. 134-137, </pages> <year> 1990. </year>
Reference-contexts: Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation [4] to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states <ref> [5, 8, 12, 13, 27] </ref>. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width. However, these methods are not adequate in general for verifying circuits with datapath because a logic level circuit description is required.
Reference: [9] <author> Francisco Corella. </author> <title> Automated high-level verification against clocked algorithmic specifications. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Proceedings of the 11th Int. Conf. on Computer Hardware Description Languages and their Applications. </booktitle> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: This alternative approach was first investigated by Langevin and Cerny [20, 21, 22, 23] and Corella <ref> [9, 10] </ref>, who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> For details on all this see [10, 29, 30]. It is also possible to verify an implementation against an algorithmic specification <ref> [9] </ref>. However there are cases where the set of reachable states is not representable by a finite DF of type W ! Y , and in such cases the above verification procedures will not terminate. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> use different data operations, e.g. one that uses subtraction, and one that uses modulus. 3 We have not yet implemented a procedure for verification against an algorithmic specification with MDGs, but GCD has been verified in 1 second for any width of the datapath by the explicit enumeration method of <ref> [9] </ref>.
Reference: [10] <author> Francisco Corella. </author> <title> Automated verification of behavioral equivalence for microprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43(1) </volume> <pages> 115-117, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: This alternative approach was first investigated by Langevin and Cerny [20, 21, 22, 23] and Corella <ref> [9, 10] </ref>, who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> It is possible to verify a conventional (non-pipelined) microprocessor against its instruction set architecture, by forming the product of a state machine derived from the implementation and a state machine derived from the architecture and duly synchronized with the implementation. For details on all this see <ref> [10, 29, 30] </ref>. It is also possible to verify an implementation against an algorithmic specification [9]. However there are cases where the set of reachable states is not representable by a finite DF of type W ! Y , and in such cases the above verification procedures will not terminate. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> type ff containing no variables other than elements of U , * Along every path, every abstract variable in V appears exactly once as a node label and there are no duplicate node labels. 10 Additional well-formedness, analogous to the ordering and minimality conditions of OBDDs, can be found in <ref> [10] </ref>.
Reference: [11] <author> F. Corella, Z. Zhou, X. Song, M. Langevin, and E. Cerny. </author> <title> Multiway decision graphs for automated hardware verification. </title> <type> Technical Report RC19676, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> July </month> <year> 1994. </year> <month> 12 </month>
Reference-contexts: Recently, we have found a way of combining the strengths of abstract types and decision diagrams for state enumeration: we have conceived a class of decision graphs, called Multiway Decision Graphs (MDGs), that subsume BDDs and accommodate abstract types and uninterpreted function symbols while providing and exploiting structure sharing <ref> [11] </ref>. Using MDGs we have successfully developed algorithms for reachability analysis, equivalence checking and verification of a microprocessor against its instruction set architecture [29]. <p> If the empty disjunction P 0 = F is derivable from P by pruning w.r.t. Q, then P is subsumed by Q and Set (P ) Set (Q). We describe a pruning-by-subsumption algorithm in <ref> [11] </ref>. 4.4 Reachability analysis and related verification methods We have seen how to compute the image of a set by the transition relation, and how to check whether a set of states is a subset of another set of states. <p> This technique uses Multiway Decision Graphs (MDGs), a class of decision graphs that subsumes the class of OBDDs while accommodating abstract types and uninterpreted function symbols <ref> [11] </ref>. Structure sharing in MDGs makes it possible to combine many abstract state descriptions into a single compact graph in the same way as OBDDs can combine many binary state descriptions in a single graph, achieving exponential compaction factors. <p> An MDG of type U ! V is a representation of a DF of type U ! V , and the representation is canonical: it is shown in <ref> [11] </ref> that, if two MDGs represent logically equivalent formulas, then they are isomorphic.
Reference: [12] <author> Coudert, O., Berthet, C., Madre, J. C., </author> <title> "Verification of Sequential Machines Using Boolean Func--tional Vectors", </title> <booktitle> in Proc. of the Int. Work. of Applied Formal Methods for Correct VLSI Design, </booktitle> <editor> L. Claesen, ed., </editor> <publisher> North-Holland, </publisher> <pages> pp. 179-196, </pages> <year> 1989. </year>
Reference-contexts: Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation [4] to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states <ref> [5, 8, 12, 13, 27] </ref>. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width. However, these methods are not adequate in general for verifying circuits with datapath because a logic level circuit description is required.
Reference: [13] <author> Coudert, O., Madre, J. C., </author> <title> "A Unified Framework for the Formal Verification of Sequential Circuits", </title> <booktitle> in Proc. of ICCAD, </booktitle> <year> 1990. </year>
Reference-contexts: Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation [4] to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states <ref> [5, 8, 12, 13, 27] </ref>. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width. However, these methods are not adequate in general for verifying circuits with datapath because a logic level circuit description is required.
Reference: [14] <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivar. </author> <title> Effective theorem proving for hardware verification. </title> <booktitle> In Second International Conference on Theorem Provers in Circuit Design, </booktitle> <year> 1994. </year>
Reference-contexts: We have experimented with two processors previously used as verification benchmarks, the Tamarack-3 and CompAs; detailed experimental results can be found in [29, 30]. To our knowledge, the only successful verification of one of these processors by OBDD methods (the Tamarack) took 370 seconds <ref> [14] </ref>, while we have been able to verify it in just 6 seconds. 6 Conclusion We have proposed a notion of abstract descriptions of state machines as a theoretical foundation for a verification methodology that makes it possible to verify sequential circuits automatically at the RT level, using abstract types and
Reference: [15] <author> T. Filkorn, M. Payer, and P. Warkentin. </author> <title> Symbolic verification of high-level synthesis results from CALLAS. </title> <note> A short version of this paper was presented at the 1992 High-Level Synthesis Workshop, </note> <institution> Laguna Nigel, California, </institution> <year> 1993. </year>
Reference-contexts: By contrast, in the experiments reported in <ref> [15] </ref>, verification of a 4-bit version of GCD took 2200 seconds and verification of an 8-bit version was impossible. 11 While the scope may seem narrow, automated abstract verification is a key element of an overall verification strategy, because it makes it possible to automate tasks that might otherwise have to
Reference: [16] <author> M. J. C. Gordon and T. F. Melham. </author> <title> An Introduction to HOL. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: In the first kind of methods, design correctness is stated as a theorem to be proved using a theorem proving assistant. Theorem provers use powerful formalisms such as higher-order logic <ref> [16] </ref> that allow the verification problem to be stated at many levels of abstraction. This makes it possible to verify circuits such as a microprocessor [18] or a hierarchical shared memory subsystem [24] directly at the register-transfer level (RTL) without having to expand the description down to the logic level.
Reference: [17] <author> Gupta, A., </author> <title> "Formal Hardware Verification Methods: A Survey", Formal Methods in System Designs, </title> <journal> Vol. </journal> <volume> 1, </volume> <pages> pp. 151-238, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Formal verification methods for synchronous hardware can be classified in three categories: 1) verification with a theorem prover, 2) verification using a special calculus, and 3) FSM verification by automated state enumeration <ref> [17] </ref>. In the first kind of methods, design correctness is stated as a theorem to be proved using a theorem proving assistant. Theorem provers use powerful formalisms such as higher-order logic [16] that allow the verification problem to be stated at many levels of abstraction.
Reference: [18] <author> Jeffrey J. Joyce. </author> <title> Multi-level verification of microprocessor-based systems. </title> <type> Technical Report 195, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> May </month> <year> 1990. </year> <type> PhD thesis. </type>
Reference-contexts: Theorem provers use powerful formalisms such as higher-order logic [16] that allow the verification problem to be stated at many levels of abstraction. This makes it possible to verify circuits such as a microprocessor <ref> [18] </ref> or a hierarchical shared memory subsystem [24] directly at the register-transfer level (RTL) without having to expand the description down to the logic level.
Reference: [19] <author> R. Kumar, K. Schneider, and T. Kropf. </author> <title> Structuring and automating hardware proofs in a higher-order theorem -proving environment. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 2(2) </volume> <pages> 165-223, </pages> <year> 1993. </year>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in <ref> [3, 19, 25, 26] </ref>. Methods based on special calculi, such as [1, 2], were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level.
Reference: [20] <author> M. Langevin and E. Cerny. </author> <title> Verification of processor-like circuits. </title> <editor> In P. Prinetto and E. Camurati, editors, </editor> <booktitle> Proc. Work. on Correct Hardware Design Methodologies. </booktitle> <publisher> North-Holland, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: In a sense, this bridges the gap between theorem proving and automated verification methods: automated verification becomes possible at a high-level of abstraction, and could be embedded as a specialized decision procedure in a theorem prover if desired. This alternative approach was first investigated by Langevin and Cerny <ref> [20, 21, 22, 23] </ref> and Corella [9, 10], who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> In the early work on abstract state enumeration [9, 10, 20, 21, 22, 23], a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. In the work of Langevin and Cerny <ref> [20, 21, 22, 23] </ref>, the state descriptions are not necessarily complete, and the transition relation is structured as an EOBDD [23] with structure sharing; however no structure sharing is used for representing sets of states.
Reference: [21] <author> M. Langevin and E. Cerny. </author> <title> Comparing generic state machines. </title> <editor> In K. G. Larsen and A. Skou, editors, </editor> <booktitle> Proc. Work. on Computer-Aided Verification. </booktitle> <publisher> Springer-Verlag LNCS 575, </publisher> <month> July </month> <year> 1991. </year>
Reference-contexts: In a sense, this bridges the gap between theorem proving and automated verification methods: automated verification becomes possible at a high-level of abstraction, and could be embedded as a specialized decision procedure in a theorem prover if desired. This alternative approach was first investigated by Langevin and Cerny <ref> [20, 21, 22, 23] </ref> and Corella [9, 10], who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> In the early work on abstract state enumeration [9, 10, 20, 21, 22, 23], a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. In the work of Langevin and Cerny <ref> [20, 21, 22, 23] </ref>, the state descriptions are not necessarily complete, and the transition relation is structured as an EOBDD [23] with structure sharing; however no structure sharing is used for representing sets of states.
Reference: [22] <author> M. Langevin and E. Cerny. </author> <title> An approach for behavioral verification of circuit designs. </title> <booktitle> In Proc. Canadian Conf. on VLSI, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: In a sense, this bridges the gap between theorem proving and automated verification methods: automated verification becomes possible at a high-level of abstraction, and could be embedded as a specialized decision procedure in a theorem prover if desired. This alternative approach was first investigated by Langevin and Cerny <ref> [20, 21, 22, 23] </ref> and Corella [9, 10], who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> In the early work on abstract state enumeration [9, 10, 20, 21, 22, 23], a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. In the work of Langevin and Cerny <ref> [20, 21, 22, 23] </ref>, the state descriptions are not necessarily complete, and the transition relation is structured as an EOBDD [23] with structure sharing; however no structure sharing is used for representing sets of states.
Reference: [23] <author> M. Langevin and E. Cerny. </author> <title> An extended OBDD representation for extended FSMs. </title> <booktitle> In Proc. of EDAC-ETC-EUROASIC, </booktitle> <year> 1994. </year>
Reference-contexts: In a sense, this bridges the gap between theorem proving and automated verification methods: automated verification becomes possible at a high-level of abstraction, and could be embedded as a specialized decision procedure in a theorem prover if desired. This alternative approach was first investigated by Langevin and Cerny <ref> [20, 21, 22, 23] </ref> and Corella [9, 10], who independently developed similar verification methods based on abstract state enumeration (i.e. exploration of the state space using abstract types and uninterpreted function symbols). However, explicit enumeration was used, and this is not adequate for circuits with a complex controller. <p> For the automated verification of complex designs the computations must be done efficiently, using appropriate data structures to represent the various kinds of formulas. In the early work on abstract state enumeration <ref> [9, 10, 20, 21, 22, 23] </ref>, a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. <p> In the early work on abstract state enumeration [9, 10, 20, 21, 22, 23], a set of states was represented by a collection of state descriptions, while the transition relation was specified using "if-then-else" or "case" expressions. In the work of Langevin and Cerny <ref> [20, 21, 22, 23] </ref>, the state descriptions are not necessarily complete, and the transition relation is structured as an EOBDD [23] with structure sharing; however no structure sharing is used for representing sets of states. <p> In the work of Langevin and Cerny [20, 21, 22, 23], the state descriptions are not necessarily complete, and the transition relation is structured as an EOBDD <ref> [23] </ref> with structure sharing; however no structure sharing is used for representing sets of states.
Reference: [24] <author> P. N. Loewenstein and D. L. Dill. </author> <title> Verification of a multiprocessor cache protocol using simulation relations and higher-order logic. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 1 </volume> <pages> 355-383, </pages> <year> 1992. </year>
Reference-contexts: Theorem provers use powerful formalisms such as higher-order logic [16] that allow the verification problem to be stated at many levels of abstraction. This makes it possible to verify circuits such as a microprocessor [18] or a hierarchical shared memory subsystem <ref> [24] </ref> directly at the register-transfer level (RTL) without having to expand the description down to the logic level. Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in [3, 19, 25, 26].
Reference: [25] <author> L. Pierre. </author> <title> The formal proof of sequential circuits described in CASCADE using the Boyer-Moore theorem prover. </title> <editor> In L. Claesen, editor, </editor> <booktitle> Proc. of the Int. Work. of Applied Formal Methods for Correct VL SI Design, </booktitle> <address> Leuven, Belgium, </address> <month> November </month> <year> 1989. </year> <pages> North-Holland. </pages>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in <ref> [3, 19, 25, 26] </ref>. Methods based on special calculi, such as [1, 2], were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level.
Reference: [26] <author> J. Staunstrup, S. J. Garland, and J. V. Guttag. </author> <title> Mechanized verification of circuit descriptions using the Larch Pro ver. </title> <editor> In V. Stavridou, T. F. Melham, and R. T. Boute, editors, </editor> <booktitle> Proc. of the Int. Conf. on Theorem Provers in Circuit Design: Theory, Practice and Experience, </booktitle> <pages> pages 277-299, </pages> <address> Nijmegen, The Netherlands, June 1992. </address> <publisher> North-Holland, IFIP Trans. A-10. </publisher>
Reference-contexts: Although the user of the theorem prover has to assist in the proof, some parts can be automated for restricted verification problems, as in <ref> [3, 19, 25, 26] </ref>. Methods based on special calculi, such as [1, 2], were also proposed to automate the verification for a restricted class of circuit behaviors described above the logic level.
Reference: [27] <author> Touati, H. J., Savoj, H., Lin, B., Brayton, R. K., Sangiovanni-Vincentelli, A., </author> <title> "Implicit State Enumeration of Finite State Machines Using BDDs", </title> <booktitle> in Proc. of ICCAD, </booktitle> <pages> pp. 130-133, </pages> <year> 1990. </year>
Reference-contexts: Recent FSM-based methods exploit the ordered binary decision diagram (OBDD) representation [4] to encode sets of states and to perform an implicit enumeration of the state space, making it possible to verify FSMs with a large number of states <ref> [5, 8, 12, 13, 27] </ref>. For some specific circuits with datapath, these methods achieve linear complexity with respect to the data width. However, these methods are not adequate in general for verifying circuits with datapath because a logic level circuit description is required.
Reference: [28] <author> P. Wolper. </author> <title> Expressing interesting properties of programs in propositional temporal logic. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1986. </year> <month> 13 </month>
Reference-contexts: Frankfurt, Germany, October, 1995. y IBM Research, corella@watson.ibm.com z GMD-SET, langevin@borneo.gmd.de x Univ. de Montreal, cerny@iro.umontreal.ca -Univ. de Montreal, zhouz@iro.umontreal.ca k Univ. de Montreal, song@iro.umontreal.ca 1 by FSM-based automated verification methods <ref> [28, 7] </ref>. However, the data independence assumption of [28] is highly restrictive, while the method of [7] places a considerable burden on the user of the verification program and does not completely eliminate the dependency on the width of the data path. <p> Frankfurt, Germany, October, 1995. y IBM Research, corella@watson.ibm.com z GMD-SET, langevin@borneo.gmd.de x Univ. de Montreal, cerny@iro.umontreal.ca -Univ. de Montreal, zhouz@iro.umontreal.ca k Univ. de Montreal, song@iro.umontreal.ca 1 by FSM-based automated verification methods [28, 7]. However, the data independence assumption of <ref> [28] </ref> is highly restrictive, while the method of [7] places a considerable burden on the user of the verification program and does not completely eliminate the dependency on the width of the data path.
Reference: [29] <author> Z. Zhou, X. Song, F. Corella, E. Cerny, and M. Langevin. </author> <title> Description and verification of RTL designs using multiway decision graphs. </title> <type> Technical Report RC19822, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: Using MDGs we have successfully developed algorithms for reachability analysis, equivalence checking and verification of a microprocessor against its instruction set architecture <ref> [29] </ref>. These algorithms are based on abstract implicit enumeration of the state space, and are a natural extension of the FSM verification methods that use OBDDs and implicit enumeration. <p> It is possible to verify a conventional (non-pipelined) microprocessor against its instruction set architecture, by forming the product of a state machine derived from the implementation and a state machine derived from the architecture and duly synchronized with the implementation. For details on all this see <ref> [10, 29, 30] </ref>. It is also possible to verify an implementation against an algorithmic specification [9]. However there are cases where the set of reachable states is not representable by a finite DF of type W ! Y , and in such cases the above verification procedures will not terminate. <p> We have used these algorithms to implement reachability analysis, equivalence checking, and verification of a conventional microprocessor against its instruction set architecture. We have experimented with two processors previously used as verification benchmarks, the Tamarack-3 and CompAs; detailed experimental results can be found in <ref> [29, 30] </ref>.
Reference: [30] <author> Z. Zhou, X. Song, F. Corella, E. Cerny and M. Langevin. </author> <title> Partitioning transition relation automatically and efficiently. </title> <booktitle> in IEEE Proceedings of Fifth Great Lakes Symposium on VLSI, </booktitle> <year> 1995. </year> <month> 14 </month>
Reference-contexts: It is possible to verify a conventional (non-pipelined) microprocessor against its instruction set architecture, by forming the product of a state machine derived from the implementation and a state machine derived from the architecture and duly synchronized with the implementation. For details on all this see <ref> [10, 29, 30] </ref>. It is also possible to verify an implementation against an algorithmic specification [9]. However there are cases where the set of reachable states is not representable by a finite DF of type W ! Y , and in such cases the above verification procedures will not terminate. <p> We have used these algorithms to implement reachability analysis, equivalence checking, and verification of a conventional microprocessor against its instruction set architecture. We have experimented with two processors previously used as verification benchmarks, the Tamarack-3 and CompAs; detailed experimental results can be found in <ref> [29, 30] </ref>.
References-found: 30

