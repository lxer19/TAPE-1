URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-94-04.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Scalable Load Balancing by Diffusion Data aequatione quotcunque fluentes quantitae involvente fluxiones invenire et vice
Author: Alan Heirich versa." 
Date: 10 February 1994/Revised 18 October 1994  
Affiliation: California Institute of Technology  
Abstract: The research described in this report is sponsored by the Advanced Research Projects Agency, ARPA Order number 8176, and monitored by the Office of Naval Research under contract number N00014-91-J-1986. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amdahl, G. </author> <title> Validity of the single processor approach to achieving large scale computing capabilities. </title> <booktitle> Proc. AFIPS Comput. Conf. </booktitle> <month> 30 </month> <year> (1967) </year> <month> 483-485. </month>
Reference: [2] <author> Athas, W. C. & Seitz, C. L. </author> <title> Multicomputers: message passing concurrent computers. </title> <journal> IEEE Comp. </journal> <month> 21 </month> <year> (1988) </year> <month> 9-24. </month>
Reference: [3] <author> Baden, S. B. </author> <title> Programming abstractions for dynamically partitioning and coordinating localized scientific calculations running on multiprocessors. </title> <journal> SIAM J. Sci. Stat. Comp. </journal> <month> 12:1 </month> <year> (1991) </year> <month> 145-157. </month>
Reference-contexts: Such a mechanism can be implemented with indexing to have a fixed cost per transaction. Coarse grained versions of this approach have been shown effective in molecular dynamics and vortex calculations <ref> [3, 7, 9] </ref>. In some applications it may not be practical to transfer work in small quantities.
Reference: [4] <author> Barak, A. & Shiloh, A. </author> <title> A distributed load-balancing policy for a multicomputer. Software|Pract. </title> <type> Exp. </type> <month> 15:9 </month> <year> (1985) </year> <month> 901-913. </month>
Reference: [5] <author> Bertsekas, D. P. & Tsitsiklis, J. N. </author> <title> Parallel and Distributed Computation: Numerical Methods. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference: [6] <author> Boillat, J. E. </author> <title> Load balancing and Poisson equation in a graph. </title> <journal> Concurrency: Pract. Exp. </journal> <month> 2 </month> <year> (1990) </year> <month> 289-313. </month>
Reference-contexts: The algorithm terminates after d serial steps and scales with elapsed time O (log d N ). This article has been a precursor of several subsequent scalable and correct load balancing methods for distributed memory computers <ref> [6, 13, 21, 25, 43] </ref>. For example, implementations of this algorithm can bear a strong resemblance to algorithm DIFFUSION. <p> Cybenko's method also bears a strong resemblance to a proposal by Boillat <ref> [6] </ref>. This method is also formulated for an arbitrary interconnection graph.
Reference: [7] <author> Boillat, J. E., Bruge, F. & Kropf, P. G. </author> <title> A dynamic load balancing algorithm for molecular dynamics simulation on multiprocessor systems. </title> <journal> J. Comp. Phys. </journal> <month> 96:1 </month> <year> (1991) </year> <month> 1-14. </month>
Reference-contexts: Such a mechanism can be implemented with indexing to have a fixed cost per transaction. Coarse grained versions of this approach have been shown effective in molecular dynamics and vortex calculations <ref> [3, 7, 9] </ref>. In some applications it may not be practical to transfer work in small quantities. <p> It is unfortunate that this method has received little attention as it is one of the few which has been implemented in the context of real scientific calculations <ref> [7, 9] </ref>. This may be partly the result of an obscurity of notation and presentation. 5.2 Transfer function A novel formulation of the problem of calculating r~u is introduced by Conley [13].
Reference: [8] <author> Bokhari, S. H. </author> <title> On the Mapping Problem. </title> <journal> IEEE Trans. Comput. </journal> <volume> C-30:3, </volume> <pages> pp. </pages> <month> 550-557 </month> <year> (1981). </year>
Reference: [9] <author> Bruge, F. & Fornili, S. L. </author> <title> A distributed dynamic load balancer and it's implementation on multi-transputer systems for molecular dynamics simulation. </title> <journal> Comp. Phys. Comm. </journal> <note> 60 (1990) 39-45. 37 38 BIBLIOGRAPHY </note>
Reference-contexts: Such a mechanism can be implemented with indexing to have a fixed cost per transaction. Coarse grained versions of this approach have been shown effective in molecular dynamics and vortex calculations <ref> [3, 7, 9] </ref>. In some applications it may not be practical to transfer work in small quantities. <p> It is unfortunate that this method has received little attention as it is one of the few which has been implemented in the context of real scientific calculations <ref> [7, 9] </ref>. This may be partly the result of an obscurity of notation and presentation. 5.2 Transfer function A novel formulation of the problem of calculating r~u is introduced by Conley [13].
Reference: [10] <author> Bokhari, S. H. </author> <title> On the mapping problem. </title> <journal> IEEE Trans. Comp. </journal> <month> C-30:3 </month> <year> (1981) </year> <month> 207-214. </month>
Reference-contexts: As a result it is possible for these calculations to execute on multicomputers without contention for communication channels during a complete simultaneous exchange of data among adjacent elements. This type of exchange is the dominant form of communication for many scalable algorithms. Bhokari <ref> [10] </ref> noted that the load balancing problem in full generality is NP-complete by transformation from the graph isomorphism problem. The graph iso-morphism problem decides whether two arbitrary graphs are the same.
Reference: [11] <author> Chou, T. C. K. & Abraham, J. A. </author> <title> Load balancing in distributed systems. </title> <journal> IEEE Trans. Soft. Eng. </journal> <month> SE-8:4 </month> <year> (1982) </year> <month> 401-412. </month>
Reference-contexts: Very few methods consider the issues of scalability and adjacency. Some noteable approaches among this group of methods are gradient based models [29], bidding algorithms [31], a drafting algorithm [32] and a method based on queing theory <ref> [11] </ref>. Most recently a spectral bisection method has become popular for problems which involve complex geometries [38]. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko [14]. This work proposes a method to compute a balanced distribution of work in an arbitrarily connected graph.
Reference: [12] <author> Chow, Y. & Kohler, W. H. </author> <title> Models for dynamic load balancing in a heterogeneous multiple processor system. </title> <journal> IEEE Trans. Comp. </journal> <month> C-28:5 </month> <year> (1979) </year> <month> 354-361. </month>
Reference: [13] <author> Conley, A. J. </author> <title> Using a transfer function to describe the load balancing problem. </title> <note> Argonne National Laboratory report ANL-93/40 (1993). </note>
Reference-contexts: The algorithm terminates after d serial steps and scales with elapsed time O (log d N ). This article has been a precursor of several subsequent scalable and correct load balancing methods for distributed memory computers <ref> [6, 13, 21, 25, 43] </ref>. For example, implementations of this algorithm can bear a strong resemblance to algorithm DIFFUSION. <p> This may be partly the result of an obscurity of notation and presentation. 5.2 Transfer function A novel formulation of the problem of calculating r~u is introduced by Conley <ref> [13] </ref>. The formulation, which arose in part from discussions of the load balancing problem with this author, requires solution of an elliptic equation r 2 ~ T = r~u (5.3) 34 CHAPTER 5.
Reference: [14] <author> Cybenko, G. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> J. Par. Distrib. Comp. </journal> <month> 7 </month> <year> (1989) </year> <month> 279-301. </month>
Reference-contexts: Most recently a spectral bisection method has become popular for problems which involve complex geometries [38]. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko <ref> [14] </ref>. This work proposes a method to compute a balanced distribution of work in an arbitrarily connected graph. The method assigns a weighting factor ff i;j to every edge i; j of a graph where each vertex i is associated with a workload w i . <p> While this does not correspond directly to a finite difference expression it is obviously convergent by the same arguments presented in <ref> [14] </ref>. The article uses Markov techniques to demonstrate that the iteration (5.2) is acyclic and converges to equilibrium. It considers the rate of convergence and derives an upper bound for eigenvalues.
Reference: [15] <author> Eager, D. L., Lazowska, E. D. & Zahorjan, J. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Trans. Soft. Eng. </journal> <month> SE-12:5 </month> <year> (1986) </year> <month> 662-675. </month>
Reference: [16] <author> Efe, K. </author> <title> Heuristic models of task assignment scheduling in distributed systems. </title> <journal> IEEE Comp. </journal> <month> 18 </month> <year> (1982) </year> <month> 50-56. </month>
Reference: [17] <author> Gupta, A. & Kumar, V. </author> <title> Performance properties of large scale parallel systems. </title> <journal> J. Par. Distrib. Comp. </journal> <month> 19 </month> <year> (1993) </year> <month> 234-244. </month>
Reference: [18] <author> Gustafson, J. L. Reevaluating Amdahl's law. </author> <note> Comm. ACM 31 (1988) 532-533. </note>
Reference: [19] <author> Hac, A. </author> <title> Load balancing in distributed systems: a summary. </title> <type> Perf. Eval. Rev. </type> <month> 16 </month> <year> (1989) </year> <month> 17-19. </month>
Reference: [20] <author> Hanxleden, R. V. & Scott, L. R. </author> <title> Load balancing on message passing architectures. </title> <journal> J. Par. Dist. Comp. </journal> <month> 13 </month> <year> (1991) </year> <month> 312-324. </month>
Reference: [21] <author> Heirich, A. & Taylor, S. </author> <title> How to balance a million nodes. </title> <institution> Caltech Computer Science Department Technical Report (1993). </institution>
Reference-contexts: The algorithm terminates after d serial steps and scales with elapsed time O (log d N ). This article has been a precursor of several subsequent scalable and correct load balancing methods for distributed memory computers <ref> [6, 13, 21, 25, 43] </ref>. For example, implementations of this algorithm can bear a strong resemblance to algorithm DIFFUSION.
Reference: [22] <author> Hofstee, H. P., Lukkien, J. J. & van de Snepscheut, J. L. A. </author> <title> A distributed implementation of a task pool. In Research Directions in High Level Parallel Programming Languages, Banatre, </title> <editor> J. P. & Le Metayer, D. (eds.) </editor> <address> (1992) 338-348, </address> <publisher> Springer-Verlag. BIBLIOGRAPHY 39 </publisher>
Reference-contexts: On a hypercube architecture this algorithm is identical to Cybenko's dimension exchange. 5.4 A distributed task pool The task pool algorithm of Hofstee et al <ref> [22] </ref> is scalable and correct. This algorithm is concerned with distributing a pool of tasks to a set of computers in a way that ensures load balance. Processes are assumed to be independent and no assumptions are made regarding the order of execution or adjacency relationship among the processes.
Reference: [23] <author> Hong, J., Tan, X. & Chen, M. </author> <title> From local to global: an analysis of nearest neighbor balancing on hypercube. </title> <booktitle> Proc. ACM Sigmetric Conf. on Measurement and Modeling of Comp. Sys. </booktitle> <year> (1988) </year> <month> 73-82. </month>
Reference: [24] <author> Horn, R. A. & Johnson, C. R. </author> <title> Matrix Analysis. </title> <publisher> (1991) Cambridge University Press, </publisher> <address> New York. </address>
Reference-contexts: A similar expression for can be obtained by considering the convergence of the Jacobi iteration. From the Gersgorin disc theorem <ref> [24] </ref> the eigenvalues of the Jacobi iteration are bounded jj 6fl 1+6fl . Since the row and column sums are constant and the iteration matrix is nonnegative ([24], theorem 8.1.22) the spectral radius equals the row sum D 1 T = 1 + 6fl Define the error in a current value
Reference: [25] <author> Horton, G. </author> <title> A multi-level diffusion method for dynamic load balancing. Par. </title> <booktitle> Comp. </booktitle> <month> 19 </month> <year> (1993) </year> <month> 209-218. </month>
Reference-contexts: The algorithm terminates after d serial steps and scales with elapsed time O (log d N ). This article has been a precursor of several subsequent scalable and correct load balancing methods for distributed memory computers <ref> [6, 13, 21, 25, 43] </ref>. For example, implementations of this algorithm can bear a strong resemblance to algorithm DIFFUSION. <p> Diffusion methods do not suffer from this problem because they transfer work over many steps concurrently with the calculation of ~u 0 . 5.3 A multilevel method Multigrid methods [40] are a popular way to accelerate convergence of iterative solution methods for linear systems of equations. Horton <ref> [25] </ref> suggests that a similar approach can accelerate the convergence of diffusion methods. The article presents a "multilevel" algorithm for load balancing which has logarithmic elapsed time complexity. This algorithm requires that the aggregate workload among a subset of computers is known at each step.
Reference: [26] <author> Karp, R. M. </author> <title> Reducibility among combinatorial problems. In Complexity of Computer Computations, </title> <editor> Miller, R. E. & Thatcher, J. W. (eds). </editor> <address> (1972) New York: </address> <publisher> Plenum Press 85-104. </publisher>
Reference-contexts: If the interconnection structure is assumed to be a mesh then algorithms which solve problem 2.1 cannot solve the graph isomorphism problem. In this case NP-completeness of 2.1 still follows from 7 the balance requirement. The proof is by transformation from the partition problem <ref> [26] </ref>: Given a finite set of elements ! each with positive integer size (!). Does there exist a subset 0 such that X size (!) = X size (!) This proof can be invalidated by making a further assumption that elements ! have equal weight.
Reference: [27] <author> Keckler, S. W. & Dally, W. J. </author> <title> Processor coupling: integrating compile time and run time scheduling for parallelism. </title> <booktitle> Proc. ACM 19th Int. Symp. on Comp. Arch., </booktitle> <address> Queensland, Australia (1992) 202-213. </address>
Reference: [28] <author> Kumar, V., Ananth, G. Y. & Rao, V. N. </author> <title> Scalable load balancing techniques for parallel computers. </title> <type> Preprint 92-021. </type> <institution> (1992) Army High Performance Computing Research Center, Minneapolis, MN. </institution>
Reference: [29] <author> Lin, F. C. H. & Keller, R. M. </author> <title> The gradient model load balancing method. </title> <journal> IEEE Trans. Soft. Eng. </journal> <note> SE-13 (1987) 32-38. </note>
Reference-contexts: As a result it can be difficult to extrapolate their behavior to architectures other than those on which they were simulated. Very few methods consider the issues of scalability and adjacency. Some noteable approaches among this group of methods are gradient based models <ref> [29] </ref>, bidding algorithms [31], a drafting algorithm [32] and a method based on queing theory [11]. Most recently a spectral bisection method has become popular for problems which involve complex geometries [38]. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko [14].
Reference: [30] <author> Marinescu, D. C. & Rice, J. R. </author> <title> Synchronization and load imbalance effects in distributed memory multi-processor systems. </title> <journal> Concurrency: Pract. Exp. </journal> <month> 3 </month> <year> (1991) </year> <month> 593-625. </month>
Reference: [31] <author> Mirchandaney, R., Towsley, D. & Stankovic, J. A. </author> <title> Adaptive load sharing in heterogeneous distributed systems. </title> <journal> J. Par. Dist. Comp. </journal> <month> 9 </month> <year> (1990) </year> <month> 331-346. </month>
Reference-contexts: As a result it can be difficult to extrapolate their behavior to architectures other than those on which they were simulated. Very few methods consider the issues of scalability and adjacency. Some noteable approaches among this group of methods are gradient based models [29], bidding algorithms <ref> [31] </ref>, a drafting algorithm [32] and a method based on queing theory [11]. Most recently a spectral bisection method has become popular for problems which involve complex geometries [38]. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko [14].
Reference: [32] <author> Ni, L. M., Xu, C. & Gendreau, T. B. </author> <title> A distributed drafting algorithm for load balancing. </title> <journal> IEEE Trans. Soft. Eng. </journal> <note> SE-11 (1985). </note>
Reference-contexts: Very few methods consider the issues of scalability and adjacency. Some noteable approaches among this group of methods are gradient based models [29], bidding algorithms [31], a drafting algorithm <ref> [32] </ref> and a method based on queing theory [11]. Most recently a spectral bisection method has become popular for problems which involve complex geometries [38]. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko [14].
Reference: [33] <author> Nicol, D. M. & Saltz, J. H. </author> <title> Dynamic remapping of parallel computations with varying resource demands. </title> <journal> IEEE Trans. Comp. </journal> <month> 37 </month> <year> (1988). </year>
Reference: [34] <author> Noakes, M. & Dally, W. J. </author> <title> System design of the J-machine. </title> <booktitle> In Proc. 6th MIT Conf. on Advanced Research in VLSI. </booktitle> <editor> Dally, W. J. (ed.). </editor> <publisher> (1990) MIT Press, </publisher> <address> Cambridge, MA. 179-194. 40 BIBLIOGRAPHY </address>
Reference-contexts: As table 3.1 suggests lower times can be achieved by permitting fl; and* to vary with N . All timings are for a J-machine 1 <ref> [34] </ref> with 33 MHz processors. Spectral bisection [38] is a popular method to solve instances of the static problem. This method can require considerable cpu time for large problems. Algorithm DIFFUSION solved an instance with one million unknowns and 512 computers [41] in a few hundred milliseconds.
Reference: [35] <author> Rowell, J. </author> <title> Lessons Learned on the Delta. High Perf. </title> <journal> Comput. Rev. </journal> <month> 1 </month> <year> (1993) </year> <month> 21-24. </month>
Reference: [36] <author> Seitz, C. L. </author> <title> Mosaic C: an experimental fine-grain multicomputer. </title> <booktitle> Proc. International Conference Celebrating the 25th Anniversary of INRIA, </booktitle> <address> Paris, France, </address> <month> December </month> <year> 1992, </year> <note> Springer-Verlag. </note>
Reference: [37] <author> Shen, S. </author> <title> Cooperative Distributed Dynamic Load Balancing. </title> <note> Acta Informatica 25 (1988) 663-676. </note>
Reference: [38] <author> Pothen, A., Simon, H. D. & Liou, K. </author> <title> Partitioning Sparse Matrices with Eigen-vectors of Graphs. </title> <note> SIAM J. Matrix Anal. 11 (1990) 430-452. </note>
Reference-contexts: As table 3.1 suggests lower times can be achieved by permitting fl; and* to vary with N . All timings are for a J-machine 1 [34] with 33 MHz processors. Spectral bisection <ref> [38] </ref> is a popular method to solve instances of the static problem. This method can require considerable cpu time for large problems. Algorithm DIFFUSION solved an instance with one million unknowns and 512 computers [41] in a few hundred milliseconds. <p> Some noteable approaches among this group of methods are gradient based models [29], bidding algorithms [31], a drafting algorithm [32] and a method based on queing theory [11]. Most recently a spectral bisection method has become popular for problems which involve complex geometries <ref> [38] </ref>. 5.1 Diffusion The first published work on diffusion methods is due to Cybenko [14]. This work proposes a method to compute a balanced distribution of work in an arbitrarily connected graph.
Reference: [39] <author> Van Tilborg, A. M. & Wittie, L. D. </author> <title> Wave scheduling: decentralized scheduling of task forces in multicomputers. </title> <journal> IEEE Trans. Comp. </journal> <month> C-33:9 </month> <year> (1984) </year> <month> 835-844. </month>
Reference: [40] <author> Vandewalle, S. & Horton, G. </author> <title> Multicomputer-multigrid solution of parabolic partial differential equations. </title> <type> Report TW 196, </type> <institution> Department of Computing Science, Katholieke Universiteit Leuven, Leuven, </institution> <address> Belgium (1993). </address>
Reference-contexts: This dependency could be expensive for large disturbances. Diffusion methods do not suffer from this problem because they transfer work over many steps concurrently with the calculation of ~u 0 . 5.3 A multilevel method Multigrid methods <ref> [40] </ref> are a popular way to accelerate convergence of iterative solution methods for linear systems of equations. Horton [25] suggests that a similar approach can accelerate the convergence of diffusion methods. The article presents a "multilevel" algorithm for load balancing which has logarithmic elapsed time complexity.
Reference: [41] <author> Wang, J. C. T. & Taylor, S. </author> <title> A concurrent navier-stokes solver for implicit multi-body calculations. </title> <note> To appear in Proc. Parallel-CFD '93, </note> <institution> Paris, France, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: All timings are for a J-machine 1 [34] with 33 MHz processors. Spectral bisection [38] is a popular method to solve instances of the static problem. This method can require considerable cpu time for large problems. Algorithm DIFFUSION solved an instance with one million unknowns and 512 computers <ref> [41] </ref> in a few hundred milliseconds. Solution methods for problems in fluid dynamics and structural analysis often increase the density of a computational grid in response to properties of the solution.
Reference: [42] <author> Williams, R. D. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Pract. Exp. </journal> <volume> 3:5, </volume> <pages> pp. 457-481, </pages> <year> 1991. </year>
Reference: [43] <author> Xu, C. Z. & Lau, F. C. M. </author> <title> Analysis of the generalized dimension exchange method for dynamic load balancing. </title> <journal> J. Par. Dist. Comp. </journal> <month> 16 </month> <year> (1992) </year> <month> 385-393. </month>
Reference-contexts: The algorithm terminates after d serial steps and scales with elapsed time O (log d N ). This article has been a precursor of several subsequent scalable and correct load balancing methods for distributed memory computers <ref> [6, 13, 21, 25, 43] </ref>. For example, implementations of this algorithm can bear a strong resemblance to algorithm DIFFUSION.
References-found: 43

