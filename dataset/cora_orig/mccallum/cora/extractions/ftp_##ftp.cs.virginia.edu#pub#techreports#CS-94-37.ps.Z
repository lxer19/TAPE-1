URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-37.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Breaking the I/O Bottleneck at the National Radio Astronomy Observatory (NRAO)  
Phone: (804) 982-2200 FAX: (804) 982-2214  
Author: John F. Karpovich Andrew S. Grimshaw James C. French 
Note: Work partially sponsored by NSF, NASA, CESDIS and NRAO.  
Date: September, 1993  
Address: THORNTON HALL CHARLOTTESVILLE, VIRGINIA 22903-2442  
Affiliation: DEPARTMENT OF COMPUTER SCIENCE UNIVERSITY OF VIRGINIA  
Abstract: Available as University of Virginia, Department of Computer Science Technical Report CS-94-37 via the web @ ftp:// ftp.cs.virginia.edu/pub/techreports/README.html. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. S. Grimshaw and E. C. Loyot, Jr., </author> <title> ELFS: Object-Oriented Extensible File Systems, </title> <institution> University of Vir-ginia, Computer Science TR 91-14, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: The necessary file objects can then be incorporated in any application and easily extended by either deriving new application-specific file classes or extending the class interface of existing file classes. Figure 2 shows a sample file class hierarchy derived from a basic UNIX file object <ref> [1] </ref> 1 . 2.3 Improved File Interfaces Most file systems today fail to present an interface that reects the type of data in the file or the file organization. <p> Figure 2 is reproduced without permission from page 4 of <ref> [1] </ref> unix_file pfo 2D_matrix_file binary_tree_file variable_consistency_file read () write () lseek () open () close () creat () banded_matrix_file 7 ing accesses.
Reference: [2] <author> John F. Karpovich, Andrew S. Grimshaw, James C. </author> <title> French, Extensible File Systems (ELFS): An Object-Oriented Approach to High Performance File I/O, </title> <booktitle> to appear in the proceedings of OOPSLA94, </booktitle> <address> Portland OR, </address> <month> October, </month> <year> 1994. </year>
Reference: [3] <author> J.L. Bentley and J.H. Friedman, </author> <title> Data Structures for Range Searching, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 397-409, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees <ref> [3] </ref> and R-trees [4], partitioning-based structures like grid files [5] and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], primary files with secondary indexes, and many others. Each of these file layouts has advantages and disadvantages under different access requirements and data attributes. <p> Due to the drawbacks listed above and the availability of file structures that solve some of them, quadtrees were not considered the best file structure for our work. K-d and K-d-b Trees A close relative to the quadtree is the k-d tree <ref> [3] </ref> (and its balanced tree version the k-d-b tree [11]). Like the quadtree, the k-d tree is a hierarchical data structure that recursively partitions the data space.
Reference: [4] <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proceedings of Annual Meeting, ACM SIGMOD Record, </booktitle> <volume> Vol. 14, No. 2, </volume> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3] and R-trees <ref> [4] </ref>, partitioning-based structures like grid files [5] and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], primary files with secondary indexes, and many others. Each of these file layouts has advantages and disadvantages under different access requirements and data attributes. <p> Since NRAO applications often need to access data sorted in different ways, it is clear that although sorted indexed files can improve performance in certain cases, they are not exible enough to handle a large portion of NRAOs needs. R and R+-Trees R trees <ref> [4] </ref> are height-balanced trees that can be used as a file indexing scheme similar to B-trees [12]. The tree consists of leaf nodes containing k-dimensional data objects and intermediate nodes which define a bounding hyperrectangle for all of their child nodes and pointers to the child nodes.
Reference: [5] <author> J. Nievergelt and H. Hinterberger, </author> <title> The Grid File: An Adaptable, Symmetric Multikey File Structure, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 9, No. 1, </volume> <pages> pp. 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: The database literature contains many examples of creative file structures that are well suited for particular application needs or types of data. Examples include tree-based structures such as k-d trees [3] and R-trees [4], partitioning-based structures like grid files <ref> [5] </ref> and Piecewise Linear Order-Preserving-hashing (or PLOP) files [6,7], primary files with secondary indexes, and many others. Each of these file layouts has advantages and disadvantages under different access requirements and data attributes. <p> To improve NRAOs I/O performance we looked at several file structures and evaluated their suitability based on the criteria discussed in section 3.4. Structures evaluated include indexed sorted files, R [4]and R+ trees [9], quadtrees [10], k-d and k-d-b [11] trees, grid files <ref> [5] </ref> and PLOP-hashing files [6,7]. We 14 found that both grid and PLOP-hashing files are good candidates and chose PLOP files for our implementation. <p> a single item depends on the split strategy. 1.1 3.1 0 0 1 2 3 2 3 (b) 0.1 a b a b a b a b a b a b a c b Y a b d 0.1 a b d 22 Grid Files vs PLOP Files Grid files <ref> [5] </ref> and PLOP files [6,7] both eliminate the hierarchical index structure used in k-d trees and quadtrees by imposing more structure on the data.
Reference: [6] <author> H. Kriegel and B. Seeger, PLOP-Hashing: </author> <title> A Grid File without a Directory, </title> <booktitle> Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <pages> pp. 369-376, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: This means that PLOP files can achieve average bucket depths (the number of chained pages in a bucket) of less then two and can therefore potentially enjoy a performance advantage on average over grid files for point accesses and range queries. Kriegel and Seeger <ref> [6] </ref> compared the average relative performance of grid and PLOP files (measured as the number of I/O operations necessary to fulfill a request) for point queries and several types of range queries. <p> These different 23 approaches yield different relative storage utilizations under different circumstances. It appears that the insertion pattern is particularly important. In the same study where Kriegel and Seeger compared the performance of range and point accesses, they compared the relative storage requirements of grid and PLOP files <ref> [6] </ref>. They found that using random insertion of points in the test data sets resulted in PLOP files having better storage utilization in all of their test cases.
Reference: [7] <author> H. Kriegel and B. Seeger, </author> <title> Techniques for Design and Implementation of Efficient Spatial Access Methods, </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <pages> pp. 360-370, </pages> <year> 1988. </year>
Reference: [8] <author> Brian Pane, </author> <title> Efficient Manipulation of Out-of-Core Matrices, </title> <institution> University of Virginia, Department of Computer Science. </institution>
Reference-contexts: Unix also makes no attempt to provide an interface where the user can declare properties of the file or intended access patterns to help improve performance. An example of a better interface is presented by Pane for a two dimensional matrix file <ref> [8] </ref>. <p> Dense and sparse 2D matrix file classes have been implemented using this Application Program request result Worker 1 Worker n Worker 2 File Query Manager . . . File File 9 approach <ref> [8] </ref>. This work demonstrated good performance characteristics and we believe reduced the cognitive burden for application programmers. 3.0 NRAO Data Requirements and Factors For Success In order to effectively apply our approach to alleviate the I/O bottleneck at NRAO, we must first understand their environment.
Reference: [9] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <title> The R+-Tree: A Dynamic Index for Multi-Dimensional Objects, </title> <booktitle> Proceedings of the 13th VLDB Conference, </booktitle> <pages> pp. 507-518, </pages> <year> 1987. </year> <month> 43 </month>
Reference-contexts: However, on average head movement should be reduced). To improve NRAOs I/O performance we looked at several file structures and evaluated their suitability based on the criteria discussed in section 3.4. Structures evaluated include indexed sorted files, R [4]and R+ trees <ref> [9] </ref>, quadtrees [10], k-d and k-d-b [11] trees, grid files [5] and PLOP-hashing files [6,7]. We 14 found that both grid and PLOP-hashing files are good candidates and chose PLOP files for our implementation. <p> The tree consists of leaf nodes containing k-dimensional data objects and intermediate nodes which define a bounding hyperrectangle for all of their child nodes and pointers to the child nodes. Figure 6 shows a set of two dimensional data objects and the corresponding R-tree representation 2 . R+-trees <ref> [9] </ref> have the same basic structure, but improve retrieval performance by using different algorithms to insert, update and retrieve data objects. The main change is in allowing data objects to be split up to avoid overlap of intermediate nodes. <p> Both R and R+ trees work well for files that consist of 2. Figure 6 is reproduced without permission from Figures 3.1 and 3.2 on page 510 of <ref> [9] </ref>. Minor modifications have been made. (a) 2D objects (b) R-tree representation A F E G B J C M A B C . . . 15 spatial data objects, such as map regions in a geo-data application or two and three dimensional objects frequently found in CAD applications.
Reference: [10] <author> H. Samet, </author> <title> The Quadtree and Related Hierarchical Data Structures, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 16, No. 2, </volume> <pages> pp. 187-260, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: However, on average head movement should be reduced). To improve NRAOs I/O performance we looked at several file structures and evaluated their suitability based on the criteria discussed in section 3.4. Structures evaluated include indexed sorted files, R [4]and R+ trees [9], quadtrees <ref> [10] </ref>, k-d and k-d-b [11] trees, grid files [5] and PLOP-hashing files [6,7]. We 14 found that both grid and PLOP-hashing files are good candidates and chose PLOP files for our implementation. <p> However, NRAO does not use this type of data and therefore the R and R+-tree approaches are not appropriate for our work. If NRAO does collect spatial data in the future, this approach should be reevaluated. Quadtrees Quadtrees <ref> [10] </ref> are a class of hierarchical data structures that are based on the principle of recursive decomposition of space. Point quadtrees successively break up a k-dimensional data space into 2 k pieces surrounding data points in the database. <p> Range queries corresponding to 3. Figure 7 is reproduced without permission from Figure 2 on page 191 of <ref> [10] </ref>. <p> On the negative side: 1) accessing data still requires stepping through 4. Figure 8 is reproduced without permission from Figure 40 on page 231 of <ref> [10] </ref>.
Reference: [11] <author> J. T. Robinson, </author> <title> The K-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes, </title> <booktitle> ACM SIGMOD Proceedings of Annual Meeting, </booktitle> <pages> pp. 10-18, </pages> <year> 1981. </year>
Reference-contexts: However, on average head movement should be reduced). To improve NRAOs I/O performance we looked at several file structures and evaluated their suitability based on the criteria discussed in section 3.4. Structures evaluated include indexed sorted files, R [4]and R+ trees [9], quadtrees [10], k-d and k-d-b <ref> [11] </ref> trees, grid files [5] and PLOP-hashing files [6,7]. We 14 found that both grid and PLOP-hashing files are good candidates and chose PLOP files for our implementation. <p> K-d and K-d-b Trees A close relative to the quadtree is the k-d tree [3] (and its balanced tree version the k-d-b tree <ref> [11] </ref>). Like the quadtree, the k-d tree is a hierarchical data structure that recursively partitions the data space. Unlike the quadtree, the k-d tree is a binary tree and breaks the k-dimensional data space into two pieces during each split rather than 2 k pieces (Figure 8 4 ).
Reference: [12] <author> C. J. Date, </author> <title> An Introduction to Database Systems, </title> <booktitle> Vol. 1, Fourth Edition, </booktitle> <pages> pp. </pages> <address> 63-64,Addison-Wesley, </address> <year> 1986. </year>
Reference-contexts: R and R+-Trees R trees [4] are height-balanced trees that can be used as a file indexing scheme similar to B-trees <ref> [12] </ref>. The tree consists of leaf nodes containing k-dimensional data objects and intermediate nodes which define a bounding hyperrectangle for all of their child nodes and pointers to the child nodes. Figure 6 shows a set of two dimensional data objects and the corresponding R-tree representation 2 .
Reference: [13] <author> A. S. Grimshaw, </author> <title> Easy to Use Object-Oriented Parallel Programming with Mentat, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 39-51, </pages> <month> May, </month> <year> 1993. </year>
Reference-contexts: We are also working on a new parallel architecture (using the parallel object-oriented system Mentat <ref> [13, 14] </ref>) to allow us to take advantage of the distributed file layout by allowing separate I/O workers to access and process data in parallel.
Reference: [14] <institution> For more information about Mentat look at the Mentat home page on the WorldWide Web. </institution> <note> Use Mosaic to view http://uvacs.cs.virginia.edu/~mentat. </note>
Reference-contexts: We are also working on a new parallel architecture (using the parallel object-oriented system Mentat <ref> [13, 14] </ref>) to allow us to take advantage of the distributed file layout by allowing separate I/O workers to access and process data in parallel.
References-found: 14

