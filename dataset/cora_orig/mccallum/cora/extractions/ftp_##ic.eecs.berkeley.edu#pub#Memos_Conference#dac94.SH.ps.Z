URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/dac94.SH.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~shiple/publications/index.html
Root-URL: 
Title: Heuristic Minimization of BDDs Using Don't Cares  
Author: Thomas R. Shiple, Ramin Hojati, Alberto L. Sangiovanni-Vincentelli, Robert K. Brayton 
Date: 1994  
Note: Design Automation Conference,  
Address: Berkeley, CA 94720  
Affiliation: Department of EECS, University of California,  
Abstract: We present heuristic algorithms for finding a minimum BDD size cover of an incompletely specified function, assuming the variable ordering is fixed. In some algorithms based on BDDs, incompletely specified functions arise for which any cover of the function will suffice. Choosing a cover that has a small BDD representation may yield significant performance gains. We present a systematic study of this problem, establishing a unified framework for heuristic algorithms, proving optimality in some cases, and presenting experimental results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. S. Brace, R. L. Rudell, and R. E. Bryant. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In Proc. 27th Design Automat. Conf., </booktitle> <pages> pages 40-45, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The cofactor of f by the literal a, denoted by f a , is f evaluated at x i = 0 if a = x i , or f evaluated at x i = 1 if a = x i . We refer the reader to <ref> [1] </ref> for the definition of reduced ordered binary decision diagrams (BDDs). A binary decision tree for a function is the full binary decision tree, before any reductions are applied. <p> Two rules are applied to a binary decision tree to yield a BDD: merging, which shares two subfunctions that represent the same function, and deletion, which removes a node with equal children. Our BDD package is based on <ref> [1] </ref> and employs output complement pointers to reduce storage requirements. A fixed variable ordering of x 1 x 2 : : : x n , where x 1 is the topmost variable, is used for all BDDs. We use f to refer to both the function and its BDD representation.
Reference: [2] <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: 1 Introduction The problem addressed is, given an incompletely specified Boolean function F , find a cover for F whose reduced ordered binary decision diagram <ref> [2] </ref> (hereafter, BDD) representation is minimum. F is described by a pair of completely specified Boolean functions f and c, such that any cover of F must contain f c and must be contained by f + c.
Reference: [3] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of sequential machines using Boolean functional vectors. </title> <booktitle> In Proceedings of the IFIP International Workshop, Applied Formal Methods for Correct VLSI Design, </booktitle> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: For an incompletely specified circuit, heuristically minimizing the BDD can lead to a smaller implementation. Two heuristics have been reported for solving this problem: the restrict operator [4] and the constrain operator <ref> [3] </ref> (also known as the generalized cofactor [9]). 1 In this paper we present a general framework for heuristic solutions to finding minimum BDD size covers for incompletely specified functions. <p> The experiments are not intended to measure the impact of minimization on applications using the heuristics; other researchers have already demonstrated that mini mization (using constrain) can have a dramatic effect on the runtime of applications <ref> [3] </ref>, [9]. 4.1.1 Overview We tested the heuristics on the problem of checking equivalence between two FSMs. Specifically, the SIS [8] command verify fsm -m product checks equivalence using the approach described in [9], and makes heavy use of BDD minimization.
Reference: [4] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of synchronous sequential machines based on symbolic execution. </title> <editor> In J. Sifakis, editor, </editor> <booktitle> Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Figure 1c shows the binary decision tree for f . Finally, Figure 1d shows a suboptimal solution to this problem, and Figures 1e and 1f show two minimum solutions. Coudert et al. posed this problem in the context of checking the equivalence of two finite state machines (FSMs) <ref> [4] </ref>. The check is done by a breadth-first traversal of the state space of the product machine. At each iteration, the states on the frontier of the search are explored. <p> In particular, some FPGA mapping algorithms work from a BDD representation to map circuits to multiplexer-based FPGAs [7]. For an incompletely specified circuit, heuristically minimizing the BDD can lead to a smaller implementation. Two heuristics have been reported for solving this problem: the restrict operator <ref> [4] </ref> and the constrain operator [3] (also known as the generalized cofactor [9]). 1 In this paper we present a general framework for heuristic solutions to finding minimum BDD size covers for incompletely specified functions.
Reference: [5] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: By Lemma 14, for each set of matched functions in such a solution, we can create a clique. The set of these cliques covers H, and hence is a clique cover of size less that K, a contradiction. Since the clique partitioning problem is NP-complete <ref> [5] </ref>, heuristics are used. The following algorithm returns a clique cover of an undirected graph. 1. Start with some uncovered vertex v. Let cur set = v. 2.
Reference: [6] <author> J. C. </author> <title> Madre. </title> <type> Private communication, </type> <year> 1992. </year>
Reference-contexts: The intuition behind this rule, called no-new-vars, is that it seems detrimental to introduce a new variable into the support of f j . However, this is not always the case <ref> [6] </ref>: let f be a function independent of x with a large BDD, and let c = xf + x f . Then, by introducing x into the support, a cover for [f; c] of size two results, namely, the function x.
Reference: [7] <author> R. Murgai, Y. Nishizaki, N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Logic Synthesis for Programmable Gate Arrays. </title> <booktitle> In Proc. Design Automat. Conf., </booktitle> <pages> pages 620-625, </pages> <year> 1990. </year>
Reference-contexts: Another application is minimizing the transition relation of an FSM with respect to the unreachable states. Other applications are found where circuit realizations are related to the structure of BDDs. In particular, some FPGA mapping algorithms work from a BDD representation to map circuits to multiplexer-based FPGAs <ref> [7] </ref>. For an incompletely specified circuit, heuristically minimizing the BDD can lead to a smaller implementation.
Reference: [8] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Sequential circuit design using synthesis and optimization. </title> <booktitle> In Proc. Int'l Conf. on Computer Design, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Specifically, the SIS <ref> [8] </ref> command verify fsm -m product checks equivalence using the approach described in [9], and makes heavy use of BDD minimization. In this application, minimization on a function [f; c] is currently performed using constrain.
Reference: [9] <author> H. J. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Implicit state enumeration of finite state machines using BDDs. </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: For an incompletely specified circuit, heuristically minimizing the BDD can lead to a smaller implementation. Two heuristics have been reported for solving this problem: the restrict operator [4] and the constrain operator [3] (also known as the generalized cofactor <ref> [9] </ref>). 1 In this paper we present a general framework for heuristic solutions to finding minimum BDD size covers for incompletely specified functions. Our heuristics are based on the concept of making two BDD nodes equal by assigning values to some of their don't care (DC) points. <p> In fact, the result is found in the cache on subsequent calls. Thus, whatever sharing occurred before, still occurs. The theorem for the other heuristics can be argued similarly. As a side note, Touati, et al. <ref> [9] </ref> showed that constrain just reduces to the Shannon cofactor when c is a cube. 3.3 Minimizing at a Level The heuristics based on matching siblings take a local approach by just trying to match siblings. <p> Apply osm on siblings top-down in the window. 3. Apply tsm on siblings top-down in the window. 4. Apply osm on levels top-down in the window. 2 Based on the distance measure defined in <ref> [9] </ref>. 5. Apply tsm on levels top-down in the window. 6. If the number of remaining levels is less than stop top down, a given parameter, call constrain and stop. Otherwise, let ini tial level = initial level + window size. <p> The experiments are not intended to measure the impact of minimization on applications using the heuristics; other researchers have already demonstrated that mini mization (using constrain) can have a dramatic effect on the runtime of applications [3], <ref> [9] </ref>. 4.1.1 Overview We tested the heuristics on the problem of checking equivalence between two FSMs. Specifically, the SIS [8] command verify fsm -m product checks equivalence using the approach described in [9], and makes heavy use of BDD minimization. <p> already demonstrated that mini mization (using constrain) can have a dramatic effect on the runtime of applications [3], <ref> [9] </ref>. 4.1.1 Overview We tested the heuristics on the problem of checking equivalence between two FSMs. Specifically, the SIS [8] command verify fsm -m product checks equivalence using the approach described in [9], and makes heavy use of BDD minimization. In this application, minimization on a function [f; c] is currently performed using constrain.
References-found: 9

