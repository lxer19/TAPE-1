URL: http://www.daimi.aau.dk/~beta/Papers/sbrandt/meta95.ps.Z
Refering-URL: http://www.daimi.aau.dk/~beta/Papers/sbrandt/meta95.html
Root-URL: http://www.daimi.aau.dk
Email: email: fsbrandt,rwsg@daimi.aau.dk  
Title: The Design of a Meta-Level Architecture for the BETA Language meta-level interface is based on
Author: Soren Brandt and Rene W. Schmidt 
Note: The  
Address: DK-8000 Aarhus C, Denmark  
Affiliation: Department of Computer Science University of Aarhus  
Abstract: The design of a meta-level architecture for a compiled and statically typed object-oriented programming language is presented. The architecture provides compiled languages with sufficient runtime information to implement a full-blown typed meta-level interface, including both introspective and introces-sory capabilities. The central component of the meta-level architecture is the runtime system. It is viewed as a virtual machine implementing the functionality of the programming language, and therefore provides a natural entity to be extended with a meta-level interface. 
Abstract-found: 1
Intro-found: 1
Reference: [Brandt & Madsen 94] <author> S. Brandt and O. Mad-sen. </author> <title> Object-Oriented Distributed Programming in BETA. </title> <editor> In R. Guerraoui, O. Nierstrasz, and M. Riveill, editors, </editor> <booktitle> Lecture Notes in Computer Science 791, </booktitle> <pages> pages 185 - 212. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: language implementation has 2 been recognized in the design and implementation of a number of substrate systems for the Mjolner BETA system, including: * Type-orthogonal persistence [Brandt 94], including a simple persistent store, and a multiuser object-oriented database [Sloth & Hem 93, Gronbaek et al. 94]. * Distributed object system <ref> [Brandt & Madsen 94, Brandt 94] </ref>. * Source-level debugger. * Embedded interpreter for the BETA lan guage [Malhotra 94]. * Object- and class-browsers. During work with these systems, a number of problems concerning portability and expressibility have been recognized.
Reference: [Brandt 94] <author> S. Brandt. </author> <title> Implementing Shared and Persistent Objects in BETA | Progress Report. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <year> 1994. </year>
Reference-contexts: The need of an open language implementation has 2 been recognized in the design and implementation of a number of substrate systems for the Mjolner BETA system, including: * Type-orthogonal persistence <ref> [Brandt 94] </ref>, including a simple persistent store, and a multiuser object-oriented database [Sloth & Hem 93, Gronbaek et al. 94]. * Distributed object system [Brandt & Madsen 94, Brandt 94]. * Source-level debugger. * Embedded interpreter for the BETA lan guage [Malhotra 94]. * Object- and class-browsers. <p> language implementation has 2 been recognized in the design and implementation of a number of substrate systems for the Mjolner BETA system, including: * Type-orthogonal persistence [Brandt 94], including a simple persistent store, and a multiuser object-oriented database [Sloth & Hem 93, Gronbaek et al. 94]. * Distributed object system <ref> [Brandt & Madsen 94, Brandt 94] </ref>. * Source-level debugger. * Embedded interpreter for the BETA lan guage [Malhotra 94]. * Object- and class-browsers. During work with these systems, a number of problems concerning portability and expressibility have been recognized.
Reference: [Brandt 95] <author> S. Brandt. </author> <title> Reflection in a Statically Typed and Object Oriented Language A Meta-Level Interface for BETA. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <year> 1995. </year>
Reference-contexts: A detailed description of the MLI can be found in <ref> [Brandt 95] </ref>. The job of the MLI is to reify certain language and runtime system primitives to allow meta-level code to exploit the reified primitives. Section 4.1 describes the BETA language concept of pattern references, turning BETA patterns into first-class values. <p> Through the concept of full object qualifications, the reflector mechanism also supports reflection on the execution of single objects, as opposed to all instances of a specific pattern. Full object qualifications are introduced in <ref> [Brandt 95] </ref> as part of a generalization of the BETA qualification concept. As opposed to most other object-oriented programming languages, BETA allows an object to directly access attributes of other objects. This is known as remote attribute access.
Reference: [Chiba 93] <author> S. Chiba. </author> <title> Designing an Extensible Distributed Language with a Meta-Level Ar-chitechture. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> ECOOP'93 - Object-Oriented Programming, volume 707 of LNCS, </booktitle> <pages> pages 482 - 501. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: In both cases, the destination address is resolved at link time. In order to retain efficiency, the implementation of the BETA MLI therefore uses dynamic replacement of code objects and dynamic linking techniques. OpenC ++ 's <ref> [Chiba 93] </ref> concept of reflect methods was the direct inspiration for the reflector pattern of the BETA MLI. However, OpenC ++ does not have introspective capabilities, and reflect methods must be known at compile time.
Reference: [Farkas & Dearle 93] <author> A. Farkas and A. Dearle. Octopus: </author> <title> A Reflective Language Mechanism for Object Manipulation. </title> <booktitle> In Proceedings of the Fourth International Workshop on Database Programming Languages. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The C ++ concept of pointers to members may be considered a restricted version of attribute references. However, the absence of runtime type information and restriction to function members, renders C ++ pointers to members considerably less useful than attribute references. Octopus <ref> [Farkas & Dearle 93] </ref> provides a reflective language mechanism for generic manipulation of complex object structures. Like the BETA MLI, the Octopus mechanism enforces static typing constraints, but does not allow the meta-level programmer to express such constraints.
Reference: [Goldberg & Robson 83] <author> A. Goldberg and D. Rob-son. </author> <title> Smalltalk-80. The Language and its Implementation. </title> <publisher> Addison-Wesley, Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference: [Gronbaek et al. 94] <author> K. Gronbaek, J. Hem, O. Mad-sen, and L. Sloth. </author> <title> Hypermedia Systems: </title>
Reference-contexts: The need of an open language implementation has 2 been recognized in the design and implementation of a number of substrate systems for the Mjolner BETA system, including: * Type-orthogonal persistence [Brandt 94], including a simple persistent store, and a multiuser object-oriented database <ref> [Sloth & Hem 93, Gronbaek et al. 94] </ref>. * Distributed object system [Brandt & Madsen 94, Brandt 94]. * Source-level debugger. * Embedded interpreter for the BETA lan guage [Malhotra 94]. * Object- and class-browsers.
References-found: 7

