URL: http://www.eecs.umich.edu/~nelsonr/postscript-docs/ieeemm96.ps
Refering-URL: http://www.eecs.umich.edu/~nelsonr/publications.html
Root-URL: http://www.cs.umich.edu
Email: email: fnelsonr,aprakashg@eecs.umich.edu  
Title: A Flexible Architecture for Heterogeneous Replayable Workspaces  
Author: Nelson R. Manohar and Atul Prakash 
Address: Ann Arbor, MI 48109-2122 USA.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: This paper presents a novel and flexible architecture to support the asynchronous sharing of computer-supported workspaces (CSWs), or simply replayable workspaces. Such workspaces are composed of multiple, interacting tools. Through the capture, re-execution, and manipulation of a session with a CSW, it is possible to reuse valuable collaborative information, (e.g., the how-to process). The session is encapsulated into a session object | composed of heterogeneous media streams that represent input sequences to CSW tools. CSW tools are modeled as plug-in components to the CSW. A stream controller process extends temporal-awareness to a CSW tool and its media. A session manager coordinates the various stream controllers and their media. Our architecture provides flexible coordination of the various tools found on a CSW and fine-grained integration of their heterogeneous media. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Abdel-Wahab, S. Guan, and J. Nievergelt. </author> <title> Shared workspaces for group collaboration: An experiment using Internet and Unix inter-process communication. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 10-16, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The session manager remains unaware of stream-dependent details such as naming scheme, data locality, re-execution device, or layout of stream controller repositories. The session object is thus copied and moved as any other directory. 5. Related work Systems such as Xtv <ref> [1] </ref>, and Ceced [5], in principle, allow replay of unmodified applications. However, these systems lack media integration mechanisms and interacting with the underlying CSW is not possible. 5 | Otherwise, functionality is then limited by any of its tms.
Reference: [2] <author> D. Bulterman, G. van Rossum, and et. al. </author> <title> A structure for transportable, dynamic multimedia documents. </title> <booktitle> In Proc. of the Summer 1991 USENIX Conference, </booktitle> <pages> pages 137-154, </pages> <address> Nashville, TN, USA., </address> <month> June </month> <year> 1991. </year>
Reference-contexts: However, these systems lack media integration mechanisms and interacting with the underlying CSW is not possible. 5 | Otherwise, functionality is then limited by any of its tms. Although our research seems similar to multimedia authoring 6 <ref> [2, 3] </ref>, the problems are significantly different. Multimedia authoring 7 centers around the manual crafting of interactive documents (typically, through temporal scripts or flowcharts). On the other hand, our artifact generation centers around the user-transparent capture of CSW sessions.
Reference: [3] <author> M. Cecelia-Buchanan and P. Zellweger. </author> <title> Scheduling multimedia documents using temporal constraints. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on NOSDAV, </booktitle> <pages> pages 237-249, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: However, these systems lack media integration mechanisms and interacting with the underlying CSW is not possible. 5 | Otherwise, functionality is then limited by any of its tms. Although our research seems similar to multimedia authoring 6 <ref> [2, 3] </ref>, the problems are significantly different. Multimedia authoring 7 centers around the manual crafting of interactive documents (typically, through temporal scripts or flowcharts). On the other hand, our artifact generation centers around the user-transparent capture of CSW sessions.
Reference: [4] <author> C. Clauer and et. al. </author> <title> A new project to support scientific collaboration electronically. </title> <journal> EOS Transactions on American Geophysical Union, </journal> <volume> 75, </volume> <month> June 28 </month> <year> 1994. </year>
Reference-contexts: Finally, we make our concluding remarks. 2. Motivation Our long-term research focuses on the development of toolkits to support collaboration paradigms such as the asynchronous sharing of CSWs. This research is partially motivated by the needs of two projects at the University of Michigan: Uarc <ref> [4] </ref> and the Medical Col-lab (Mdc). Specifically, in the Mdc, our goal is the asynchronous sharing of the CSW of a radiologist. The 1 | although similar to the term shareable workspaces found in synchronous collaborative systems, the term replayable highlights the asynchronous (later-time use) nature of our research. application.
Reference: [5] <author> E. Craighill and et. al. CECED: </author> <title> A system for informal multimedia collaboration. </title> <booktitle> In Proc. of ACM Multimedia '93, </booktitle> <pages> pages 436-446, </pages> <address> CA, USA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The session manager remains unaware of stream-dependent details such as naming scheme, data locality, re-execution device, or layout of stream controller repositories. The session object is thus copied and moved as any other directory. 5. Related work Systems such as Xtv [1], and Ceced <ref> [5] </ref>, in principle, allow replay of unmodified applications. However, these systems lack media integration mechanisms and interacting with the underlying CSW is not possible. 5 | Otherwise, functionality is then limited by any of its tms.
Reference: [6] <author> R. Dannenberg, T. Neuendorffer, and et. al. Tactus: </author> <title> toolkit-level support for synchronized interactive multimedia. </title> <journal> Multimedia Systems, </journal> <volume> 1(1) </volume> <pages> 77-86, </pages> <month> 1 </month> <year> 1993. </year>
Reference-contexts: Multimedia authoring 7 centers around the manual crafting of interactive documents (typically, through temporal scripts or flowcharts). On the other hand, our artifact generation centers around the user-transparent capture of CSW sessions. Continuous media servers rely on a tighly-coupled media/synchronization server <ref> [6, 10] </ref> for fine-grained synchronization of pre-selected media. Such functionality coupling is inflexible since it results in a media-dependent approach to media-integration. Our approach, on the other hand, removes awareness of tms types from the synchronization server | by delegating media handling to stream controllers.
Reference: [7] <author> L. Li, A. Karmouch, and N. Georganas. </author> <title> Multimedia teleorchestra with independent sources: Part 1 | temporal modeling of collaborative multimedia scenarios. </title> <journal> Multimedia Systems, </journal> <volume> 1(2) </volume> <pages> 143-153, </pages> <month> 1 </month> <year> 1994. </year>
Reference-contexts: Such functionality coupling is inflexible since it results in a media-dependent approach to media-integration. Our approach, on the other hand, removes awareness of tms types from the synchronization server | by delegating media handling to stream controllers. Finally, as in <ref> [7] </ref>, network-orchestrated playback is also possible | by configuring the session manager to remotely control multiple synchronous CSW sessions on different workstations. However, our orchestration will incur negligible bandwidth requirements (i.e., after startup costs) since network traffic would consist of just commands messages (and not media). 6.
Reference: [8] <author> N. Manohar and et. al. </author> <title> Dealing with synchronization and timing variability in the playback of interactive session recordings. </title> <booktitle> In Proc. of ACM Multimedia '95, </booktitle> <pages> pages 45-56, </pages> <address> San Francisco, CA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: There are two basic approaches. In the first approach, the services of multiple tools are integrated into a monolithic-application | using carefully orchestrated, cooperating threads. Our previous prototype followed this approach <ref> [8] </ref>. This approach delivers complete control over the tool coordination and media integration problems since, at the thread level, fine-grained scheduling and synchronization control is possible. Unfortunately, this low-level control also limits the flexibility of the resulting infrastructure.
Reference: [9] <author> N. Manohar and A. Prakash. </author> <title> The Session Capture and Replay Paradigm for Asynchronous Collaboration. </title> <booktitle> In Proc. of ECSCW'95, </booktitle> <pages> pages 161-177, </pages> <address> Stockholm, Swe-den, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Others, capture these tasks with either analog or digital video. Both approaches are often inadequate for collaborative work due to the potential loss of collaboration content. Our approach addresses the above problem by supporting the asynchronous sharing of interactive application workspaces through the use of session objects <ref> [9] </ref> (see Fig. 1). In this paper, we extend this support to computer-supported workspaces (herein CSW) | composed of multiple tools as opposed to a monolithic application workspace. Such asynchronously-shared CSWs are referred herein as re-playable workspaces 1 . <p> It is desirable to reuse existing multimedia tools, such as audio, video, and interface tools. collaboration: support for collaborative features such as playback and annotation of session objects <ref> [9] </ref>. The rest of this short paper is organized as follows. First, we state our motivations for our research on re-playable workspaces. Second, we outline the problems that need to be addressed so as to support a replayable workspace. Then, we present an architecture to address those issues.
Reference: [10] <author> L. Rowe and B. Smith. </author> <title> A Continuous Media Player. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on NOSDAV, </booktitle> <pages> pages 376-386, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Multimedia authoring 7 centers around the manual crafting of interactive documents (typically, through temporal scripts or flowcharts). On the other hand, our artifact generation centers around the user-transparent capture of CSW sessions. Continuous media servers rely on a tighly-coupled media/synchronization server <ref> [6, 10] </ref> for fine-grained synchronization of pre-selected media. Such functionality coupling is inflexible since it results in a media-dependent approach to media-integration. Our approach, on the other hand, removes awareness of tms types from the synchronization server | by delegating media handling to stream controllers.
References-found: 10

