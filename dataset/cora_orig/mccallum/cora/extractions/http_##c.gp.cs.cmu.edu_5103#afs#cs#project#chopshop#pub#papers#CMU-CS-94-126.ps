URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/chopshop/pub/papers/CMU-CS-94-126.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/compose/www/paper_abstracts/dnj/CMU-CS-94-126.html
Root-URL: http://www.cs.cmu.edu
Title: Structuring Z Specifications with Views encouraging multiple representations of the programs state, view structuring lends
Author: Daniel Jackson 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Note: By  
Date: March 1994  
Pubnum: CMU-CS-94-126  
Abstract: A view is a partial specification of a program, consisting of a state space and a set of operations. A full specification is obtained by composing several views, linking them though their states (by asserting invariants across views) and through their operations (by defining external operations as combinations of operations from different views). This research was sponsored in part by a Research Initiation Award from the National Science Foundation (NSF), under grant CCR-9308726, by a grant from the TRW Corporation, and by the Wright Laboratory, Aeronautical Systems Center, Air Force Materiel Command, USAF, and the Advanced Research Projects Agency (ARPA), under grant F33615-93-1-1330. Views and conclusions contained in this document are those of the author and should not be interpreted as necessarily representing official policies or endorsements, either express or implied, of ARPA, NSF, TRW or the United States Government. 
Abstract-found: 1
Intro-found: 1
Reference: [A&93] <author> M. Ainsworth, A.H. Cruickshank, L.J. Groves and P .J.L. Wallis, </author> <title> Formal Specification via V iewpoints, </title> <booktitle> Proc. </booktitle> <institution> 13th New Zealand Computer Confer ence, New Zealand Computer Society , Auckland, </institution> <address> New Zealand, </address> <year> 1993. </year>
Reference-contexts: Viewpoint construction in this approach is a kind of cooperative work (with problems similar to the joint editing of any document) whose distributed nature is a fundamental assumption. For Wallis <ref> [Wal92, A&93] </ref>, viewpoints are partial specifications of functionality, written in Z but by different people, to be reconciled as soon as possible. First, any irreconcilable differences must be eradicated; then the viewpoints 23 must be amalgamated.
Reference: [BMR93] <author> Alex Borgida, John Mylopoulos and Raymond Reiter, </author> <title> And Nothing Else Changes: The F rame P roblem in P rocedure Specifications, </title> <booktitle> Proc. 15th International Conference on Software Engineering, </booktitle> <address> Baltimore, Maryland, </address> <publisher> IEEE Computer Society P ress, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: A better solution employs a frame condition, declaring the volume to be a local component of the Phone view 18 that cannot change ex cept by execution of local operations. This is a special case of a more general scheme developed by Borgida et al <ref> [BMR93] </ref>. Finally, many of the equalities asserted when views are composed could be dispensed with altogether if a more subtle kind of frame condition were expressible. Instead of saying only these components change, it would say only these are altered, allowing others to change only when necessary to maintain invariants.
Reference: [F&92] <author> A. F inkelstein, J. Kramer , B. Nuseibeh, L. F inkelstein and M. Goedicke, V iewpoints: </author> <title> A F ramework for Integrating Multiple Perspectives in System Development, </title> <booktitle> International Jour nal on Software Engineering and Knowledge Engineering , 2(1):3157, </booktitle> <publisher> World Scientific Publishing Company, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: The viewpoints of Finkelstein, Kramer et al <ref> [F&92] </ref> arise from the different domains of developers working together on a team. The developers of a lift system, for instance, will include user interface designers, mechanical engineers and real-time experts; some will be concerned with performance, some with functionality, some with safety, and so on.
Reference: [FS93] <author> Bill Flinn and Ib Holm Sorensen, Caviar: </author> <title> A Case Study in Specification, Chap. 5 of Specification Case Studies, Ian Hayes, </title> <publisher> Prentice Hall International, </publisher> <editor> 2nd ed., </editor> <year> 1993. </year> <month> 26 </month>
Reference-contexts: a program for allocating resources to users at various times includes in its state not only the full relation between resources, users and times, but also various projections, such as a relation between resources and times, appropriate for describing operations, like checking availability, that are not concerned with the users <ref> [FS93] </ref>. Sufrins specification of a text editor [Suf82] comes closest to full view-structuring.
Reference: [Gar87] <author> David Garlan, </author> <title> Views for Tools in Integrated Environments, </title> <institution> Technical R eport CMU-C S-87-147, School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Nevertheless, these ideas raise an interesting prospect of implementing viewstructured specifications without amalgamating them first. Multiple views have been also proposed for the state shared by the tools of a programming environment. In Garlans scheme <ref> [Gar87] </ref> for example, the relationships between representations are inferred from their type structure, and update algorithms are synthesized automatically.
Reference: [GHM90] <author> John V. Guttag, James J. Horning and Andres Modet, </author> <title> Report on the L arch Shar ed L anguage: V ersion 2.3 , Technical R eport 58, </title> <institution> Digital Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: But the elaboration has no natural home in Woodcocks specification, requiring ad hoc changes to the global state and operations. 22 7.2 Other Specification Languages Property-oriented specifications often support structuring mechanisms akin to views. In the Larch Shared Language <ref> [GHM90] </ref>, the basic unit of specification is a trait. Several traits can assert different properties of the same operators, and then be combined into a single trait. A queue, for example, can be specified in two traits: one that asserts basic container properties, and another expressing the fifo ordering.
Reference: [GHW85] <author> John Guttag, James Horning and Jeannette W ing, </author> <title> The Larch Family of Specification Languages, </title> <journal> IEEE Software, </journal> <month> Sept. </month> <year> 1985. </year>
Reference-contexts: Their consideration points to the difficulties that must be overcome to apply viewstructuring in other languages, such as Larch <ref> [GHW85] </ref> and VDM [Jon86]. 6.1 Frame Conditions In most specification languages the scope of an operation is given explicitly . Larch, for instance, has a modification clause in addition to pre and postconditions.
Reference: [H&88] <author> A.N. Habermann, Charles Krueger , Benjamin Pierce, Barbara Staudt and John W enn, </author> <title> Programming with V iews, </title> <institution> Technical R e-port CMU-C S-87-177, School of Computer Science, Carnegie Mellon University, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: A set in one view and a sequence in another, for example, would be assumed to contain the same elements if they had the same name. (In this works extension in the Janus project <ref> [H&88] </ref>, new mappings could be specified by the environments developer , but were still selected on the basis of type.) 7.5 Structuring Mechanisms Similar to Views: Descriptions Zave and Jackson propose a structuring mechanism for specifications whose units they call descriptions [ZJ93].
Reference: [Hal93] <author> Anthony Hall, </author> <title> A R esponse to Florence, </title> <booktitle> Dougal and Zebedee, FACS Europe (Newsletter of the British Computing Society Formal Aspects of Computing Science Special Inter est Group and F ormal Methods Europe), Series 1, </booktitle> <volume> Vol. 1, Num. 1, </volume> <month> Autumn </month> <year> 1993. </year>
Reference-contexts: This paper contains no radical novelties. Its intent is to articulate, by means of small illustrations, a style of specification based on views. It also attempts to explain why Z is especially well suited to view structuring, pointing to features that have not been stressed in recent comparisons <ref> [Hay92, HJN93, Hal93] </ref>. 2 Why Views? Views respond to a simple dilemma. The first step in writing a conventional model-based specification is to define the state space. How the states are represented largely determines how easy it is to define the operations, so finding a good representation can be hard.
Reference: [Hay92] <author> Ian Hayes, </author> <title> VDM and Z: A Comparative Case Study, </title> <journal> Formal Aspects of Computing, </journal> <volume> Vol. 4, No. </volume> <pages> 1, </pages> <address> 1992, </address> <publisher> Springer International. </publisher>
Reference-contexts: This paper contains no radical novelties. Its intent is to articulate, by means of small illustrations, a style of specification based on views. It also attempts to explain why Z is especially well suited to view structuring, pointing to features that have not been stressed in recent comparisons <ref> [Hay92, HJN93, Hal93] </ref>. 2 Why Views? Views respond to a simple dilemma. The first step in writing a conventional model-based specification is to define the state space. How the states are represented largely determines how easy it is to define the operations, so finding a good representation can be hard.
Reference: [HJN93] <author> I.J. Hayes, C.B. Jones and J.E. </author> <title> Nicholls, Understanding the Dif - ferences Between VDM and Z, </title> <booktitle> FACS Europe (Newsletter of the British Computing Society F ormal Aspects of Computing Science Special Interest Group and Formal Methods Europe), Series 1, </booktitle> <volume> Vol. 1, Num. 1, </volume> <month> Autumn </month> <year> 1993. </year>
Reference-contexts: This paper contains no radical novelties. Its intent is to articulate, by means of small illustrations, a style of specification based on views. It also attempts to explain why Z is especially well suited to view structuring, pointing to features that have not been stressed in recent comparisons <ref> [Hay92, HJN93, Hal93] </ref>. 2 Why Views? Views respond to a simple dilemma. The first step in writing a conventional model-based specification is to define the state space. How the states are represented largely determines how easy it is to define the operations, so finding a good representation can be hard.
Reference: [Hoa85] <author> C.A.R. Hoare, </author> <title> Programs are predicates, in Mathematical Logic and Programming Languages, C.A.R. Hoare and J.C. </title> <editor> Shepherdson (eds.), </editor> <booktitle> pp. 141154, Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: Whether or not they are specified separately , they can be viewed as a single logical formula pre post (as in Z) ; as the single formula pre post (as in Larch and in Hoares representation of programs as predicates <ref> [Hoa85] </ref>); or as two distinct formulas (as in VDM). Each interpretation has its benefits. Keep 19 ing them apart can simplify the treatment of infinite looping, with the precondition being regarded as a termination criterion.
Reference: [HPR89] <author> S. Horwitz, J. Prins and T. Reps, </author> <title> Integrating Non-interfering Versions of P rograms, </title> <journal> ACM Trans. on Programming L anguages and Systems, </journal> <volume> 11(3), </volume> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: By analogy to programming, view structuring is about a single program; Walliss concern is the problem of integrating different versions <ref> [HPR89] </ref>.
Reference: [Jac88] <author> Daniel Jackson, </author> <title> Composing Data and Process Descriptions in the Design of Software Systems, </title> <type> Technical Report MIT/LCS/TR-419, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: The preconditions of Larch and VDM are disclaimers; they assert that an operation is free to do anything when invoked in a bad state. A specification that uses firing conditions can more easily be interpreted as a process, and thus combined with other process formalisms <ref> [Jac88] </ref>, but becomes confusing if its firing conditions are simultaneously interpreted as preconditions. 7 Related Work 7.1 Views in Z View structuring can be detected in germinal form in many published Z specifications.
Reference: [Jac94] <author> Michael Jackson, </author> <title> Software Development Method, in A Classical Mind: Essays in Honour of C.A.R Hoare, </title> <editor> ed. A.W. Roscoe, </editor> <publisher> Prentice Hall International, </publisher> <year> 1994. </year> <month> 27 </month>
Reference-contexts: In two respects their work is more ambitious than mine. F irst, descriptions can separate more fundamental concerns than aspects of functionality, distinguishing the specification of the machine, 24 the specification of its domain, and the specification of the environment in which the machine operates <ref> [Jac94] </ref>. In contrast, the views of this paper are all descriptions of machines. Second, descriptions can be cast in different paradigms. A telephone specification might use Z to describe data aspects and JSP to describe the ordering of events [ZJ93].
Reference: [Jon86] <author> Cliff B. Jones, </author> <title> Systematic Softwar e Development Using VDM , Prentice Hall International, </title> <year> 1986. </year>
Reference-contexts: Their consideration points to the difficulties that must be overcome to apply viewstructuring in other languages, such as Larch [GHW85] and VDM <ref> [Jon86] </ref>. 6.1 Frame Conditions In most specification languages the scope of an operation is given explicitly . Larch, for instance, has a modification clause in addition to pre and postconditions.
Reference: [JZ93] <author> Michael Jackson and Pamela Zave, </author> <title> Domain Descriptions, </title> <booktitle> Proc. IEEE Inter national Confer ence on R equirements Engineering , IEEE Computer Society Press, </booktitle> <pages> pp. 5664, </pages> <year> 1993. </year>
Reference: [MS84] <author> C.C. Morgan and B.A. Sufrin, </author> <title> Specification of the UNIX F iling System, </title> <journal> IEEE Transactions on Softwar e Engineering, </journal> <volume> SE-10(2), </volume> <year> 1984. </year>
Reference-contexts: Furthermore, displaying is regarded as an operation called show whose specification is the invariant that would have related the two views. Nevertheless, Sufrin has views in mind; in discussing related work he mentions the possibility of multiple representations related implicitly by invariants, each with its own operations. Promotion <ref> [MS84] </ref>, a common Z structuring technique, may also be seen as a limited kind of view structuring. A library specification might define the state of a book with operations such as lend and return. The entire library might then be modelled as a mapping from identifiers to books.
Reference: [Nor92] <author> Robert L. Nord, </author> <title> Deriving and Manipulating Module Inter faces, </title> <type> Technical Report CMU-CS-92-126, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: favour initial separation of views militate against their amalgamation, and, in their present form, Walliss techniques do not seem strong enough to handle views whose state components are not matched in a fairly simple manner. 7.4 Views in Programming and Environments Nord treats a similar problem at the programming level <ref> [Nor92] </ref>. He argues (using the ubiquitous editor example) that implementing a type can be much easier if multiple representations are allowed. His scheme has the programmer code each operation in the most convenient representation, and assert invariants between the diverse representations.
Reference: [SP87] <author> S.A. Schuman and D.H. Pitt, </author> <title> ObjectOriented Subsystem Specification, in Program Specification and Transformation, </title> <editor> ed. L.G.L.T. Meertens, </editor> <publisher> North Holland, </publisher> <pages> pp. 313341, </pages> <year> 1987. </year>
Reference-contexts: Instead of saying only these components change, it would say only these are altered, allowing others to change only when necessary to maintain invariants. Schuman and Pitt <ref> [SP87] </ref> have shown how to express this kind of frame condition by defining completing assertions. Compositional-ity is retained, but at the expense of introducing metalevel notions. 6.2 Implicit Invariants The principal novelty of Z is its pervasive use of invariants as a specification mechanism.
Reference: [Suf82] <author> Bernard Sufrin, </author> <title> Formal Specification of a Display-Oriented Text Editor, </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 1, </volume> <pages> pp 157202. </pages>
Reference-contexts: The seeds of view structuring are evident in many Z published specifications. Redundant state components are often declared purely to ease the definition of certain operations. Multiple representations have been used on a larger scale too, as in Sufrins editor specification <ref> [Suf82] </ref>, which relates the appearance of a text buffer on the screen (given as a sequence of lines) to its internal representation (a sequence of characters). <p> Sometimes no single representation does the trick; some operations call for one, and some another. Take cursor motion in an editor buffer, for example. A nice representation <ref> [Suf82] </ref> of a buffer is two sequences of characters, one for the text preceding the cursor and the other for the text following it: File left, right: seq Char The operation that moves the cursor forward in the text can now be written as: csrRight File right = left = left^head <p> Sufrins specification of a text editor <ref> [Suf82] </ref> comes closest to full view-structuring. He sidesteps the problem of defining the effect of editing operations on the texts screen appearance by specifying all the operations over a simple representation, which is then related to the layout on the screen by an invariant. But these representations are not views.
Reference: [Wal92] <author> Peter J.L. Wallis, </author> <title> A New Approach to Modular Formal Description, </title> <type> Technical Report 92-57, </type> <institution> University of Bath, </institution> <year> 1992. </year>
Reference-contexts: Viewpoint construction in this approach is a kind of cooperative work (with problems similar to the joint editing of any document) whose distributed nature is a fundamental assumption. For Wallis <ref> [Wal92, A&93] </ref>, viewpoints are partial specifications of functionality, written in Z but by different people, to be reconciled as soon as possible. First, any irreconcilable differences must be eradicated; then the viewpoints 23 must be amalgamated.
Reference: [Woo89] <author> J.C.P W oodcock, </author> <title> Mathematics as a Management T ool: P roof Rules for Promotion, </title> <booktitle> Proc. of the Centre for Software Reliability Conference entitled L arge Software Systems, </booktitle> <address> Bristol, UK, </address> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Frequently, not only the structure of the specification, but also the structure of the development itself , is hierarchical. W oodcock talks about the onion skins of software development, in which a specification is developed from the inside out, with promotion at the interfaces between the layers <ref> [Woo89] </ref>. Not all systems are easily described in this fashion. While a file system may contain files, a telephone switch does not contain telephones in any sense. So telephone operations cannot be simply promoted.
Reference: [WL88] <author> Jim Woodcock and Martin Loomes, </author> <title> Case Study: A Telephone Exchange, </title> <booktitle> Chap. 9 of Software Engineering Mathematics, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: So telephone operations cannot be simply promoted. Without views, however, the behaviour of a single telephone cannot be separated from the behaviour of the switch, and the two become intertwined. Woodcocks telephone specification <ref> [WL88] </ref> embeds the states of the individual phones in the global state of the telephone system, so that every action of a subscriber becomes an action of the whole system, and the observable behaviour at a given phone is relegated to theorems. This structure is not easily maintained.
Reference: [ZJ91] <author> Pamela Zave and Michael Jackson, </author> <title> Techniques for Partial Specification of Switching Systems, </title> <booktitle> in VDM91: Formal Software Development Methods, Proc. 4th International Symposium of VDM Eu-rope, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 511525, </pages> <year> 1991. </year>
Reference-contexts: The entire specification can thus be translated, at least in principle, to a statement similar to a scientific claim that can be refuted by observation. The synchronization of operations in my telephone specification can be seen as a special case of event classification <ref> [ZJ91, ZJ94] </ref>. A description can partition an event class into subclasses; other descriptions may then refer to the names of the subclasses.
Reference: [ZJ93] <author> Pamela Zave and Michael Jackson, </author> <title> Conjunction as Composition, </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> 2(4), </volume> <pages> pp. 379411, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: name. (In this works extension in the Janus project [H&88], new mappings could be specified by the environments developer , but were still selected on the basis of type.) 7.5 Structuring Mechanisms Similar to Views: Descriptions Zave and Jackson propose a structuring mechanism for specifications whose units they call descriptions <ref> [ZJ93] </ref>. In two respects their work is more ambitious than mine. F irst, descriptions can separate more fundamental concerns than aspects of functionality, distinguishing the specification of the machine, 24 the specification of its domain, and the specification of the environment in which the machine operates [Jac94]. <p> In contrast, the views of this paper are all descriptions of machines. Second, descriptions can be cast in different paradigms. A telephone specification might use Z to describe data aspects and JSP to describe the ordering of events <ref> [ZJ93] </ref>. T o interpret these diverse descriptions as a single, coherent specification, Zave and Jackson abandon their standard semantics and propose instead a translation into a minimalist logical theory.
Reference: [ZJ94] <author> Pamela Zave and Michael Jackson, </author> <title> Where Do Operations Come From? A Multiparadigm Specification T echnique, </title> <note> submitted for publication, </note> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: The entire specification can thus be translated, at least in principle, to a statement similar to a scientific claim that can be refuted by observation. The synchronization of operations in my telephone specification can be seen as a special case of event classification <ref> [ZJ91, ZJ94] </ref>. A description can partition an event class into subclasses; other descriptions may then refer to the names of the subclasses.
References-found: 27

