URL: http://www.cs.jhu.edu/~kumar/papers/adapt.ps
Refering-URL: http://www.cs.jhu.edu/~kumar/
Root-URL: http://www.cs.jhu.edu
Email: goodrich@cs.jhu.edu orletsky@belvoir-arl-irisgt.army.mil kumar@cs.jhu.edu  
Phone: 110  
Title: Methods for Achieving Fast Query Times in Point Location Data Structures reasonably uniform spatially and
Author: Michael T. Goodrich Mark Orletsky Kumar Ramaiyer 
Note: sequences that are  This research supported by the NSF under Grant CCR-9300079, and by ARO under grant DAAH04-96-1-0013. Author's home page: http://www.cs.jhu.edu/goodrich/. This research supported by the NSF under Grant CCR-9300079, and by ARO under grant DAAH04-96-1-0013. Author's home page: http://www.cs.jhu.edu/grad/kumar/.  
Address: 10235 Burbeck Rd.  Suite  Baltimore, MD 21218 Fort Belvoir, VA 22060 Baltimore, MD 21218  
Affiliation: Center for Geometric Computing Army Research Laboratory Center for Geometric Computing Dept. of Computer Science  Dept. of Computer Science Johns Hopkins Univ.  Johns Hopkins Univ.  
Abstract: Given a collection S of n line segments in the plane, the planar point location problem is to construct a data structure that can efficiently determine for a given query point p the first segment(s) in S intersected by vertical rays emanating out from p. It is well known that linear-space data structures can be constructed so as to achieve O(log n) query times. But applications, such as those common in geographic information systems, motivate a re-examination of this problem with the goal of improving query times further while also simplifying the methods needed to achieve such query times. In this paper we perform such a re-examination, focusing on the issues that arise in three different classes of point-location query sequences: We present and analyze simple methods for adapting previous point location approaches to each of these environments. Our analysis consists of both a theoretical analysis of the constant factors in asymptotic query times as well as an experimental analysis over a range of subdivision and query domains. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Adel'son-Vel'skii and E. Landis. </author> <title> An algorithm for the organization of information. </title> <journal> Soviet Math. Dokl., </journal> <volume> 3 </volume> <pages> 1259-1262, </pages> <year> 1962. </year>
Reference-contexts: The sets in R are called ranges. Let Y be a subset of S, and let a parameter r 2 <ref> [1; n] </ref> be given. Further, let N Y (s; S) denote the number of ranges R in Rj Y such that s = jRj and Y " R = ; (we say such ranges are missed by Y ). <p> Splay trees are self-adjusting binary trees, and they form a simple and very interesting class of "balanced" binary search trees. We highlight the term balanced, because, unlike other binary search trees such as AVL trees <ref> [1] </ref> or red-black trees [21, 39], splay trees do not enforce explicit global structural constraints.
Reference: [2] <author> N. M. Amato, M. T. Goodrich, and E. A. Ramos. </author> <title> Parallel algorithms for higher-dimensional convex hulls. </title> <booktitle> In Proc. 35th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 683-694, </pages> <year> 1994. </year>
Reference-contexts: Our proof of this lemma is based upon the general theory of geometric range spaces <ref> [2, 9, 20, 26] </ref>. In the context of point location data structures a range space is defined by a set S of line segments and R, the set of all combinatorially distinct ways of intersecting segments of S with trapezoids that have vertical parallel edges.
Reference: [3] <author> M. J. Atallah, M. T. Goodrich, and K. Ramaiyer. </author> <title> Biased finger trees and three-dimensional layers of maxima. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 150-159, </pages> <year> 1994. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [4] <author> H. Baumgarten, H. Jung, and K. Mehlhorn. </author> <title> Dynamic point location in general subdivisions. </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 342-380, </pages> <year> 1994. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [5] <author> S. Bent, D. Sleator, and R. Tarjan. </author> <title> Biased search trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(3) </volume> <pages> 545-568, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: For building the persistent search structure we use the weights of the nodes to bias the depth of the nodes. As a result, the nodes of larger weights will be at smaller depth. Our persistent tree is therefore now a globally biased search tree <ref> [5] </ref> rather than a simple complete balanced binary tree, but we can still bound its height to be O (log n). This step takes O (n) time and space, which can be amortized by charging O (1) time to each of the previous n queries. 4.
Reference: [6] <author> T. Bernhardsen. </author> <title> Geographic Information Systems. VIAK IT AS./Norwegian Mapping Authority, </title> <year> 1992. </year>
Reference-contexts: We are interested in re-examining the point location problem, focusing on issues that arise in important application areas, such as geographic information systems (GIS) <ref> [7, 6, 18, 35, 40] </ref>.
Reference: [7] <author> J. K. Berry. </author> <title> Beyond Mapping: Concepts, Algorithms, and Issues in GIS. GIS World, </title> <address> Fort Collins, CO, </address> <year> 1993. </year>
Reference-contexts: We are interested in re-examining the point location problem, focusing on issues that arise in important application areas, such as geographic information systems (GIS) <ref> [7, 6, 18, 35, 40] </ref>.
Reference: [8] <author> B. Chazelle. </author> <title> An optimal convex hull algorithm in any fixed dimension. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 </volume> <pages> 377-409, </pages> <year> 1993. </year>
Reference-contexts: This step takes O (n log n) time with probability at least 1 1=n c . 4 This definition of a semi-net is similar to the (1=r)-semi-cutting notion introduced by Chazelle <ref> [8] </ref>, as well as proof techniques given in [9, 20, 26]. 4 2. Apply Lemma 2.1 to form a point-location data structure D for C of size O (r log r) = O (n= log n). 3.
Reference: [9] <author> B. Chazelle and J. Friedman. </author> <title> A deterministic view of random sampling and its use in geometry. </title> <journal> Combinatorica, </journal> <volume> 10(3) </volume> <pages> 229-249, </pages> <year> 1990. </year>
Reference-contexts: Our proof of this lemma is based upon the general theory of geometric range spaces <ref> [2, 9, 20, 26] </ref>. In the context of point location data structures a range space is defined by a set S of line segments and R, the set of all combinatorially distinct ways of intersecting segments of S with trapezoids that have vertical parallel edges. <p> Proof: The proof follows from applications of general proof techniques of Chazelle and Friedman <ref> [9] </ref> and Clarkson and Shor [12] for range spaces with finite VC-dimension (see also [27]). In our case, f 0 (r) is equal to the number of trapezoids defined by a trapezoidal decomposition of an r-segment subset S S; hence f 0 (r) is O (r). <p> We note, however, that the main challenge in establishing this lemma is proving the time and high-probability bounds, as the combinatorial part of the proof is based upon using a known double-sampling technique of Chazelle and Friedman <ref> [9] </ref> in conjunction with Lemma 2.3. Our method for constructing a point-location structure for S, then, is as follows: 1. <p> This step takes O (n log n) time with probability at least 1 1=n c . 4 This definition of a semi-net is similar to the (1=r)-semi-cutting notion introduced by Chazelle [8], as well as proof techniques given in <ref> [9, 20, 26] </ref>. 4 2. Apply Lemma 2.1 to form a point-location data structure D for C of size O (r log r) = O (n= log n). 3.
Reference: [10] <author> S. W. Cheng and R. Janardan. </author> <title> New results on dynamic planar point location. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 972-999, </pages> <year> 1992. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [11] <author> Y.-J. Chiang, F. P. Preparata, and R. Tamassia. </author> <title> A unified approach to dynamic point location, ray shooting, and shortest paths in planar maps. </title> <note> SIAM J. Comput., to appear. Preprint: Technical Report CS-92-07, </note> <institution> Comput. Sci. Dept., Brown Univ. </institution> <year> (1992). </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [12] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: Proof: The proof follows from applications of general proof techniques of Chazelle and Friedman [9] and Clarkson and Shor <ref> [12] </ref> for range spaces with finite VC-dimension (see also [27]). In our case, f 0 (r) is equal to the number of trapezoids defined by a trapezoidal decomposition of an r-segment subset S S; hence f 0 (r) is O (r).
Reference: [13] <author> R. Cole. </author> <title> Searching and storing similar lists. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 202-220, </pages> <year> 1986. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> Still, based upon their benchmarking tests, they argued that the best practical method at that time was the bucketing approach, with the trapezoid method being a close competitor. Following this, Cole <ref> [13] </ref>, Sarnak and Tarjan [36], and Edelsbrunner, Guibas, and Stolfi [17] independently showed how to improve the constant factor in the query time for point location while still achieving linear space. These three methods are described quite differently, but the resulting data structures are remarkably similar. <p> We can construct a planar point location data structure for S by applying the persistence [15] paradigm to a left-to-right plane sweep of S using a vertical line, L, as noted by Sarnak and Tarjan [36] (and Cole <ref> [13] </ref> as well, using a different terminology). Applying the persistence paradigm to a data structure D allows one to perform a sequence of updates to D and then look up the information stored in any previous version of D. <p> In this technique one simply copies the entire root-to-leaf path for a leaf-node change, keeping unchanged pointers pointing to their old neighbors. Following an observation of Cole <ref> [13] </ref>, we note that the segments in S form a partial order by the "above" relation. Moreover, this relation can easily be constructed in O (n log n) time, and then linearized via a topological sort in O (n) additional time.
Reference: [14] <author> D. P. Dobkin and R. J. Lipton. </author> <title> Multidimensional searching problems. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 181-186, </pages> <year> 1976. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> The first non-trivial solution to this problem is a method by Dobkin and Lipton <ref> [14] </ref>, based upon a simple, elegant slab method, that answers queries using at most 2dlog ne point-line comparisons 1 . <p> Thus, we can achieve a query time very close to that of the slab method <ref> [14] </ref> with just a linear amount of additional space.
Reference: [15] <author> J. R. Driscoll, N. Sarnak, D. D. Sleator, and R. E. Tarjan. </author> <title> Making data structures persistent. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 38 </volume> <pages> 86-124, </pages> <year> 1989. </year>
Reference-contexts: We can construct a planar point location data structure for S by applying the persistence <ref> [15] </ref> paradigm to a left-to-right plane sweep of S using a vertical line, L, as noted by Sarnak and Tarjan [36] (and Cole [13] as well, using a different terminology). <p> Applying the persistence paradigm to a data structure D allows one to perform a sequence of updates to D and then look up the information stored in any previous version of D. Driscoll et al. <ref> [15] </ref> show that any linked data structure D with fixed in- and out-degree can be made persistent, with the space bound being proportional to the total number of changes to D, while keeping the access time proportional to its previous value (but multiplying the time by a constant factor that is <p> The splay heuristic that realizes the above behaviors is blind to the properties of the access sequence and to the global structure of the tree. 3.2 Persistence of Splay Trees In this section we discuss how to apply the persistence paradigm of Driscoll et al. <ref> [15] </ref> to the splay operations that we later use in our algorithm for adaptive point location queries. The main idea is a variant of the path copying technique. We give the details in the full version.
Reference: [16] <author> M. Edahiro, I. Kokubo, and T. Asano. </author> <title> A new point-location algorithm and its practical efficiency: comparison with existing algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 3 </volume> <pages> 86-109, </pages> <year> 1984. </year>
Reference-contexts: His method is based upon a beautiful hierarchical subdivision method, but the constant factor in the running time is fairly large. Because of the questions of practicality raised by this method, Edahiro, Kokubo, and Asano <ref> [16] </ref> performed a series of empirical benchmarking tests between the trapezoid and hierarchical subdivision methods, as well as a simple "bucketing" approach, which is not entirely comparison-based and actually has a worst-case query bound of fi (n) and a worst-case space bound of fi (n 2 ). <p> of planar point location and give some discussion as to the results observed. 5.1 Experimental Setup The simple persistence method based on path copying, epsilon net methods of planar point location (which are simple variants of our *-cutting method), adaptive point location methods, as well as the Edahiro et al. <ref> [16] </ref> bucket method, were implemented and experiments were conducted to compare the query times of the various methods. <p> We summarize our conclusions here. For the bucket method experiments were conducted with linear sized grids with ff fl p n divisions along x and y axis, and we varied the constant ff to be 1, 2, and 3 <ref> [16] </ref>. We tested epsilon-net methods with net sizes p 8 For each experiment, we used subdivisions of sizes ranging from 1000 to 30,000 vertices. For each such size, five different subdivisions of that type were selected.
Reference: [17] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> Still, based upon their benchmarking tests, they argued that the best practical method at that time was the bucketing approach, with the trapezoid method being a close competitor. Following this, Cole [13], Sarnak and Tarjan [36], and Edelsbrunner, Guibas, and Stolfi <ref> [17] </ref> independently showed how to improve the constant factor in the query time for point location while still achieving linear space. These three methods are described quite differently, but the resulting data structures are remarkably similar.
Reference: [18] <author> W. R. Franklin. </author> <title> Computer systems and low level data structures for GIS. </title> <editor> In D. Maguire, D. Rhind, and M. Goodchild, editors, GIS: </editor> <booktitle> Principles and Practice, </booktitle> <volume> volume 1, </volume> <pages> pages 215-225. </pages> <publisher> Longman Higher Education and Reference, </publisher> <address> London UK, </address> <year> 1991. </year>
Reference-contexts: We are interested in re-examining the point location problem, focusing on issues that arise in important application areas, such as geographic information systems (GIS) <ref> [7, 6, 18, 35, 40] </ref>.
Reference: [19] <author> M. Goodrich and R. Tamassia. </author> <title> Dynamic trees and dynamic point location. </title> <booktitle> In Proc. 23rd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 523-533, </pages> <year> 1991. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [20] <author> M. T. Goodrich. </author> <title> Geometric partitioning made easier, even in parallel. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 73-82, </pages> <year> 1993. </year>
Reference-contexts: Our proof of this lemma is based upon the general theory of geometric range spaces <ref> [2, 9, 20, 26] </ref>. In the context of point location data structures a range space is defined by a set S of line segments and R, the set of all combinatorially distinct ways of intersecting segments of S with trapezoids that have vertical parallel edges. <p> This step takes O (n log n) time with probability at least 1 1=n c . 4 This definition of a semi-net is similar to the (1=r)-semi-cutting notion introduced by Chazelle [8], as well as proof techniques given in <ref> [9, 20, 26] </ref>. 4 2. Apply Lemma 2.1 to form a point-location data structure D for C of size O (r log r) = O (n= log n). 3.
Reference: [21] <author> L. J. Guibas and R. Sedgewick. </author> <title> A dichromatic framework for balanced trees. </title> <booktitle> In Proc. 19th Annu. IEEE Sympos. Found. Comput. Sci., Lecture Notes in Computer Science, </booktitle> <pages> pages 8-21, </pages> <year> 1978. </year> <month> 11 </month>
Reference-contexts: Splay trees are self-adjusting binary trees, and they form a simple and very interesting class of "balanced" binary search trees. We highlight the term balanced, because, unlike other binary search trees such as AVL trees [1] or red-black trees <ref> [21, 39] </ref>, splay trees do not enforce explicit global structural constraints.
Reference: [22] <author> T. Hagerup and C. Rub. </author> <title> A guided tour of Chernoff bounds. </title> <journal> Information Processing Letters, </journal> <volume> 33(10):305--308, </volume> <year> 1990. </year>
Reference-contexts: We have already noted that Steps 1, 2, and 4 can be implemented in O (n log n) time with probability at least 1 1=n c for any constant c 1. Likewise, by a simple Chernoff bound analysis <ref> [22] </ref>, we can show that Step 3 also runs in time O (n log n) with probability at least 1 1=n c for any constant c 1.
Reference: [23] <author> D. Haussler and E. Welzl. </author> <title> Epsilon-nets and simplex range queries. </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 127-151, </pages> <year> 1987. </year>
Reference-contexts: Y is a (1=r)-semi-net 4 of order ! 0 if X N Y (tn=r; S) maxft ! ; 1g = O (f 0 (r)); where the sum ranges over all values of t from 0 to r for which N Y (tn=r; X) is non-zero. (Y is simply an *-net <ref> [23] </ref> if N Y (tn=r; S) = 0 for t &gt; 1.) Lemma 2.3: Let (S; R) be a segment-trapezoid range space.
Reference: [24] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> We give here our best estimates for the constant factors in the worst-case point-line comparison counts of the previous methods. 1 O (n log n) space, and Kirkpatrick <ref> [24] </ref> was the first to show that one could in fact simultaneously achieve an O (log n) query time and O (n) space. His method is based upon a beautiful hierarchical subdivision method, but the constant factor in the running time is fairly large.
Reference: [25] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal.
Reference: [26] <author> J. Matousek. </author> <title> Cutting hyperplane arrangements. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 385-406, </pages> <year> 1991. </year>
Reference-contexts: Our proof of this lemma is based upon the general theory of geometric range spaces <ref> [2, 9, 20, 26] </ref>. In the context of point location data structures a range space is defined by a set S of line segments and R, the set of all combinatorially distinct ways of intersecting segments of S with trapezoids that have vertical parallel edges. <p> This step takes O (n log n) time with probability at least 1 1=n c . 4 This definition of a semi-net is similar to the (1=r)-semi-cutting notion introduced by Chazelle [8], as well as proof techniques given in <ref> [9, 20, 26] </ref>. 4 2. Apply Lemma 2.1 to form a point-location data structure D for C of size O (r log r) = O (n= log n). 3.
Reference: [27] <author> J. Matousek. </author> <title> Epsilon-nets and computational geometry. </title> <editor> In J. Pach, editor, </editor> <booktitle> New Trends in Discrete and Computational Geometry, volume 10 of Algorithms and Combinatorics, </booktitle> <pages> pages 69-89. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Proof: The proof follows from applications of general proof techniques of Chazelle and Friedman [9] and Clarkson and Shor [12] for range spaces with finite VC-dimension (see also <ref> [27] </ref>). In our case, f 0 (r) is equal to the number of trapezoids defined by a trapezoidal decomposition of an r-segment subset S S; hence f 0 (r) is O (r). We omit the details of the proof of Lemma 2.2 in this extended abstract.
Reference: [28] <author> K. Mehlhorn and S. Naher. Leda, </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Communications of the ACM, </journal> <volume> 38(1) </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: All algorithms were implemented in C++ using the LEDA <ref> [28, 30] </ref> library of data structures and algorithms (v3.2.1), and they were compiled on a SUN SPARC station ELC running SUN OS Release 4.1.1 with the g++ compiler (v4.2). Three different classes of input subdivisions were used to test the performance of the above algorithms.
Reference: [29] <author> E. Mucke, I. Saias, and B. Zhu. </author> <title> Fast randomized point location without preprocessing in two- and three-dimensional delaunay triangulations. </title> <booktitle> In Proc. 12th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 274-283, </pages> <year> 1996. </year>
Reference-contexts: In this case we examine an approach based on a simple "walk-through" technique often used in GIS applications, which can be used, for example, to achieve a sub-linear amount of additional space while still allowing for O (log n)-time queries. Recently Mucke et. al. <ref> [29] </ref> proposed a randomized point location method which is also based on "walk-through" idea, but their analysis was restricted to Delaunay triangulations.
Reference: [30] <author> S. Naher and C. Uhrig. </author> <title> The LEDA User Manual Version R 3.2. </title> <institution> Max-Planck-Institut fur Informatik, 66123, Saarbrucken, Germany. </institution>
Reference-contexts: All algorithms were implemented in C++ using the LEDA <ref> [28, 30] </ref> library of data structures and algorithms (v3.2.1), and they were compiled on a SUN SPARC station ELC running SUN OS Release 4.1.1 with the g++ compiler (v4.2). Three different classes of input subdivisions were used to test the performance of the above algorithms.
Reference: [31] <author> F. P. Preparata. </author> <title> A new approach to planar point location. </title> <journal> SIAM J. Comput., </journal> <volume> 10 </volume> <pages> 473-482, </pages> <year> 1981. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> A location query for a point p is easily answered by performing two binary searches|one to locate the slab containing p and another to locate the cell in that slab that contains p. Using an interesting trapezoid technique, Preparata <ref> [31] </ref> showed that one could achieve a query time of 4dlog ne using 1 Most of the previous papers we review do not actually report the constant factors in the number of point-line comparisons needed to answer a query. <p> We note that this simple method achieves the same space bound as that of the trapezoid method <ref> [31] </ref> but has a worst-case query time that is twice as fast.
Reference: [32] <author> F. P. Preparata and R. Tamassia. </author> <title> A fully dynamic planar point location technique. </title> <type> Report UILU-ENG-87-2266, </type> <institution> Coordinated Sci. Lab., Univ. Illinois, Urbana, IL, </institution> <year> 1987. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [33] <author> F. P. Preparata and R. Tamassia. </author> <title> Fully dynamic point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 811-830, </pages> <year> 1989. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [34] <author> F. P. Preparata and R. Tamassia. </author> <title> Dynamic planar point location with optimal query time. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 74 </volume> <pages> 95-114, </pages> <year> 1990. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [35] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: We are interested in re-examining the point location problem, focusing on issues that arise in important application areas, such as geographic information systems (GIS) <ref> [7, 6, 18, 35, 40] </ref>.
Reference: [36] <author> N. Sarnak and R. E. Tarjan. </author> <title> Planar point location using persistent search trees. </title> <journal> Commun. ACM, </journal> <volume> 29 </volume> <pages> 669-679, </pages> <year> 1986. </year>
Reference-contexts: This problem is very well-studied <ref> [13, 14, 17, 24, 25, 31, 36] </ref>, and there are a number of solutions that asymptotically achieve query times of O (log n) using O (n) space, which is optimal. <p> Still, based upon their benchmarking tests, they argued that the best practical method at that time was the bucketing approach, with the trapezoid method being a close competitor. Following this, Cole [13], Sarnak and Tarjan <ref> [36] </ref>, and Edelsbrunner, Guibas, and Stolfi [17] independently showed how to improve the constant factor in the query time for point location while still achieving linear space. These three methods are described quite differently, but the resulting data structures are remarkably similar. <p> We can construct a planar point location data structure for S by applying the persistence [15] paradigm to a left-to-right plane sweep of S using a vertical line, L, as noted by Sarnak and Tarjan <ref> [36] </ref> (and Cole [13] as well, using a different terminology). Applying the persistence paradigm to a data structure D allows one to perform a sequence of updates to D and then look up the information stored in any previous version of D. <p> Several researchers (e.g., see Sarnak and Tarjan <ref> [36] </ref> for a survey) have noted that a simple path copying technique can make any binary tree data structure persistent with an access time exactly what it was in its non-persistent version.
Reference: [37] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> J. ACM, </journal> <volume> 32(3) </volume> <pages> 652-686, </pages> <year> 1985. </year>
Reference-contexts: this section we show that in such environments one can achieve o (log n) (amortized) query times while still maintaining fast preprocessing bounds and linear space. 5 3.1 Splay Trees We achieve our results concerning adaptive point location queries by employing the splay tree data structure of Sleator and Tarjan <ref> [37] </ref>. Splay trees are self-adjusting binary trees, and they form a simple and very interesting class of "balanced" binary search trees. <p> Also Sleator and Tarjan prove a vast number of useful theorems regarding a sequence of m accesses in a splay tree, which we summarize below. Theorem 3.1 Balance Theorem <ref> [37] </ref>: The total access time is O ((m + n) log n). Theorem 3.2 Static Optimality Theorem [37]: If every item is accessed at least once, then the total access time is O P n f (i) , where f (i) is the access frequency of item i in m accesses. <p> Also Sleator and Tarjan prove a vast number of useful theorems regarding a sequence of m accesses in a splay tree, which we summarize below. Theorem 3.1 Balance Theorem <ref> [37] </ref>: The total access time is O ((m + n) log n). Theorem 3.2 Static Optimality Theorem [37]: If every item is accessed at least once, then the total access time is O P n f (i) , where f (i) is the access frequency of item i in m accesses. <p> Let t (j) denote the number of different queries before search j and since the last access of item i j or since the beginning of the sequence if j is the first access of the item i j . Theorem 3.3 Working Set Theorem <ref> [37] </ref>: The total access time is O (n log n + m + j=1 An important fact here is that splay trees achieve all the above behaviors automatically.
Reference: [38] <author> R. Tamassia. </author> <title> An incremental reconstruction method for dynamic planar point location. </title> <journal> Inform. Process. Lett., </journal> <volume> 37 </volume> <pages> 79-83, </pages> <year> 1991. </year>
Reference-contexts: All of our methods assume that the planar subdivision does not change over time, but environments allowing for dynamic changes to the subdivision over time are well-motivated and well-studied, as well <ref> [3, 4, 10, 11, 19, 32, 33, 34, 38] </ref>. Thus, another interesting open problem is whether one can, say, achieve the adaptive query bounds of Theorem 3.5 in such dynamic environments, where one allows insertions and deletions of vertices and edges in the subdivision S. 10
Reference: [39] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year>
Reference-contexts: Splay trees are self-adjusting binary trees, and they form a simple and very interesting class of "balanced" binary search trees. We highlight the term balanced, because, unlike other binary search trees such as AVL trees [1] or red-black trees <ref> [21, 39] </ref>, splay trees do not enforce explicit global structural constraints.

References-found: 39

