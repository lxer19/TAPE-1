URL: http://www.cs.cmu.edu/afs/cs/usr/andrewt/papers/grapho-book/fixed-post-submission-draw.ps.gz
Refering-URL: http://www.cs.cmu.edu/~andrewt/papers.html
Root-URL: 
Email: dpl@research.panasonic.com andrewt@cs.cmu.edu  
Title: Temporal-Domain Matching of Hand-Drawn Pictorial Queries  
Author: Daniel Lopresti Andrew Tomkins 
Keyword: pen computing, electronic ink, handwriting recognition, picture matching.  
Date: January 12, 1997  
Address: Way Princeton, NJ 08540  
Affiliation: Matsushita Information Technology Laboratory Panasonic Technologies, Inc. Two Research  
Abstract: In this chapter we discuss the problem of searching a database of hand-drawn documents for a particular hand-drawn query. We show how to break the problem into two parts. First, a matching algorithm must extract pieces of the query and pieces of the database that might be placed in correspondence. Second, the algorithm must examine the pieces in detail to determine how similar they are. We present a general framework that generates potential matches to be examined, and we give two candidate algorithms for the underlying comparison. The first underlying match algorithm is result of prior work in script matching; the second is a standard dynamic programming-based elastic match. We give experimental data based on 125 database pictures and 125 query pictures to show that our algorithms can effectively search handwritten data for pictures, even though stroke orders and overall page structure of queries and their intended hits in the database can differ substantially. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Aref, D. Barbara, D. Lopresti, and A. Tomkins. </author> <title> Ink as a first-class datatype in multimedia databases. </title> <editor> In S. Jajodia and V. S. Subrahmanian, editors, </editor> <title> Multimedia Databases. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance <ref> [7, 8, 1, 4, 13] </ref>. In one experiment we conducted, two subjects each wrote a reasonably large amount of English text drawn from Herman Melville's famous novel Moby-Dick . They then wrote 30 short words and 30 longer phrases (2-3 words), taken from the same passages.
Reference: [2] <author> D. Goldberg and A. Goodisman. </author> <title> Stylus user interfaces for manipulating text. </title> <booktitle> In ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 127-135, </pages> <address> Hilton Head, SC, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: To be fair, HWX is still a hard research problem. Some work has focused on techniques to make it easier for the user to correct the errors that inevitably arise during text entry <ref> [2] </ref>. Another recent approach is to make the HWX problem simpler for the computer by changing the input alphabet [3]. Forcing users to learn a new way of writing, however, is a fairly drastic solution that seems likely to meet with some resistance.
Reference: [3] <author> D. Goldberg and C. Richardson. </author> <title> Touch-typing with a stylus. </title> <booktitle> In Proceedings of the Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 80-87, </pages> <address> Amsterdam, The Netherlands, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Some work has focused on techniques to make it easier for the user to correct the errors that inevitably arise during text entry [2]. Another recent approach is to make the HWX problem simpler for the computer by changing the input alphabet <ref> [3] </ref>. Forcing users to learn a new way of writing, however, is a fairly drastic solution that seems likely to meet with some resistance.
Reference: [4] <author> R. Hull, D. Reynolds, and D. Gupta. </author> <title> Scribble matching. </title> <booktitle> In Proceedings of the Fourth International Workshop on Frontiers in Handwriting Recognition, </booktitle> <pages> pages 285-294, </pages> <address> Taipei, Taiwan, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance <ref> [7, 8, 1, 4, 13] </ref>. In one experiment we conducted, two subjects each wrote a reasonably large amount of English text drawn from Herman Melville's famous novel Moby-Dick . They then wrote 30 short words and 30 longer phrases (2-3 words), taken from the same passages.
Reference: [5] <author> Y. Linde, A. Buzo, and R. M. Gray. </author> <title> An algorithm for vector quantizer design. </title> <journal> IEEE Transactions on Communications, COM-28, </journal> <volume> No 1 </volume> <pages> 84-95, </pages> <year> 1980. </year>
Reference-contexts: From then on, we represent a feature by the index of the cluster to which it belongs. Thus, instead of having to maintain 13 real numbers, we need only keep six bits. This technique is common in speech recognition and other related domains <ref> [5] </ref>. Quantization makes the remaining processing much more efficient, and seeks to choose clusters so that useful semantic information about the strokes is retained by the index. We begin by collecting a small sample of handwriting from the user in advance.
Reference: [6] <author> R. J. Lipton and D. P. Lopresti. </author> <title> A systolic array for rapid string comparison. </title> <editor> In H. Fuchs, editor, </editor> <booktitle> Proceedings of the 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 363-376. </pages> <publisher> Computer Science Press, </publisher> <year> 1985. </year>
Reference-contexts: If the pattern and text are long, this can be appreciable. There exist, however, asymptotically faster algorithms for computing edit distance, as well as parallel versions that are orders of magnitude faster than the obvious sequential implementation <ref> [6] </ref>. For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance [7, 8, 1, 4, 13].
Reference: [7] <author> D. Lopresti and A. Tomkins. </author> <title> Pictographic naming. </title> <booktitle> In Adjunct Proceedings of the Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 77-78, </pages> <address> Amsterdam, The Netherlands, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Instead of taking a very expressive medium, ink, and immediately mapping it into a small, pre-defined set of alphanumeric symbols, we suggest that pen computers should support first-class computing in the ink domain <ref> [7, 8] </ref>. While traditional HWX is important for some applications, there are strong arguments for deferring or even eliminating HWX in many cases: 1. Many of a user's day-to-day tasks can be handled entirely in the ink domain using techniques more accurate and less intrusive than HWX. 2. <p> For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance <ref> [7, 8, 1, 4, 13] </ref>. In one experiment we conducted, two subjects each wrote a reasonably large amount of English text drawn from Herman Melville's famous novel Moby-Dick . They then wrote 30 short words and 30 longer phrases (2-3 words), taken from the same passages. <p> And of course, researchers have often studied the problem of finding linear-time variations of edit distance style algorithms such as elastic matching (see, for example, <ref> [7] </ref>) are there approaches to this problem that are particularly suitable for ink matching?
Reference: [8] <author> D. Lopresti and A. </author> <title> Tomkins. </title> <booktitle> On the searchability of electronic ink. In Proceedings of the Fourth International Workshop on Frontiers in Handwriting Recognition, </booktitle> <pages> pages 156-165, </pages> <address> Taipei, Taiwan, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Instead of taking a very expressive medium, ink, and immediately mapping it into a small, pre-defined set of alphanumeric symbols, we suggest that pen computers should support first-class computing in the ink domain <ref> [7, 8] </ref>. While traditional HWX is important for some applications, there are strong arguments for deferring or even eliminating HWX in many cases: 1. Many of a user's day-to-day tasks can be handled entirely in the ink domain using techniques more accurate and less intrusive than HWX. 2. <p> Here we present a methodology based on a model we have developed for string block editing. In Section 4, we give the results of a simple experiment we performed to test the new approach. Finally, Section 5 offers our conclusions. 2 Searching Handwritten Text In an earlier paper <ref> [8] </ref>, we describe an approach for searching handwriting text in which pen input from a digitizing tablet is segmented into strokes, a standard set of features is extracted (e.g., stroke length, total angle traversed), and the resulting vectors are clustered into a small number of basic stroke types. <p> For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance <ref> [7, 8, 1, 4, 13] </ref>. In one experiment we conducted, two subjects each wrote a reasonably large amount of English text drawn from Herman Melville's famous novel Moby-Dick . They then wrote 30 short words and 30 longer phrases (2-3 words), taken from the same passages.
Reference: [9] <author> D. Lopresti and A. Tomkins. </author> <title> Block edit models for approximate string matching. </title> <editor> In R. Baeza-Yates and U. Manber, editors, </editor> <booktitle> Proceedings of the Second Annual South American Workshop on String Processing, </booktitle> <pages> pages 11-26, </pages> <address> Valparaso, Chile, </address> <month> April </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: This phenomenon is illustrated in Figure 4 as well. Existing string matching algorithms are not flexible enough to capture these kinds of block motion. For this problem, we have developed new block edit algorithms for string matching <ref> [9] </ref>. <p> Equation 7 does not specify whether the particular substring families must be covers, disjoint, or both. In an earlier paper <ref> [9] </ref>, we examined the various cases, showed which are hard, and presented algorithms for those that are solvable in polynomial time.
Reference: [10] <author> I. S. MacKenzie, A. Sellen, and W. Buxton. </author> <title> A comparison of input devices in elemental pointing and dragging tasks. </title> <booktitle> In Proceedings of the Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 161-166, </pages> <address> New Orleans, LA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: For input and interaction, pens have many advantages: they are expressive, lightweight, and familiar. It has been shown, for example, that a pen is better than a mouse or trackball for pointing tasks <ref> [10] </ref>. But while pen-based computers have met with success in vertical markets, attempts to win mass-market acceptance (e.g., GO's PenPoint, the Apple Newton) 1 have not lived up to early expectations.
Reference: [11] <author> J. MacQueen. </author> <title> Some methods for classification and analysis of multivariate observations. </title> <booktitle> Proceedings of the Fifth Berkeley Symposium on Mathematics, Statistics and Probability, </booktitle> <volume> 1 </volume> <pages> 281-296, </pages> <year> 1967. </year>
Reference-contexts: We cluster the feature vectors of the ink sample into 64 groups using a technique from the literature known as the k-means algorithm <ref> [11] </ref>. The feature vectors of the sample are processed sequentially. Each vector in turn is placed in the appropriate cluster, which is represented by its centroid, the element-wise average of all the vectors it contains.
Reference: [12] <author> M. Nakagawa, K. Machii, N. Kato, and T. Souya. </author> <title> Lazy recognition as a principle of pen interfaces. </title> <booktitle> In Adjunct Proceedings of the Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 89-90, </pages> <address> Amsterdam, The Netherlands, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: The remainder of this chapter is organized as follows. In the next section, we describe a basic algorithm for searching handwritten text. Section 3 considers the more difficult 1 The concept of "lazy" recognition <ref> [12] </ref> delaying HWX so as not to interfere with the creative flow of ideas is quite similar. However, our proposal is for new functionality at the level of the "raw" ink, making it directly manipulable. 2 problem of matching hand-drawn pictures.
Reference: [13] <author> A. Poon, K. Weber, and T. Cass. Scribbler: </author> <title> A tool for searching digital ink. </title> <booktitle> In Human Factors in Computing Systems Conference Companion, </booktitle> <pages> pages 252-253, </pages> <address> Denver, CO, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: For handwritten text (English and Japanese, cursive and printed), empirical studies using this approach, as well as other, similar ones, have demonstrated good performance <ref> [7, 8, 1, 4, 13] </ref>. In one experiment we conducted, two subjects each wrote a reasonably large amount of English text drawn from Herman Melville's famous novel Moby-Dick . They then wrote 30 short words and 30 longer phrases (2-3 words), taken from the same passages.
Reference: [14] <author> F. S. Roberts. </author> <title> Graph Theory and Its Applications to Problems of Society. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1978. </year>
Reference-contexts: Enforcing or relaxing these constraints (all relative to string A) results in different versions of the block edit distance problem. It is clear from Figure 5 that W 1 induces a complete interval graph, a well-studied class for which most known problems have efficient solutions <ref> [14] </ref>. We define M (i) to be the best block match between a 1 : : : a i and B.
Reference: [15] <author> D. Rubine. </author> <title> The Automatic Recognition of Gestures. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: Stroke Segmentation. We have investigated several common stroke segmentation algorithms used in handwriting recognition. Currently we break strokes at local y-minima. lower half of the figure. Feature Extraction. Rather than propose another new feature set, we have adopted the one used by Rubine in the context of gesture recognition <ref> [15] </ref>. This particular feature set, which converts each stroke into a real-valued 13-dimensional vector, seems to do well at discriminating single strokes and can be updated efficiently as new points arrive.
Reference: [16] <author> R. Schalkoff. </author> <title> Pattern Recognition: Statistical, Structural and Neural Approaches. </title> <publisher> John Wiley & Sons, Inc, </publisher> <year> 1992. </year>
Reference-contexts: We employ Mahalanobis distance <ref> [16] </ref> defined on the space of feature vectors as follows: jj~v jj 2 d (~v; ~w) = jj (~v ~w)jj M (3) With a suitable distance measure for the feature space, we can now proceed to describe our vector quantization scheme.
Reference: [17] <author> R. A. Wagner and M. J. Fischer. </author> <title> The string-to-string correction problem. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 21 </volume> <pages> 168-173, </pages> <year> 1974. </year> <month> 16 </month>
Reference-contexts: In the last phase, we compute the similarity between the stroke sequence associated with the pattern ink and the pre-computed sequence for the text ink. We use a well-known dynamic programming algorithm to determine the edit distance between the sequences <ref> [17] </ref>. The cost of a deletion or insertion is a function of the "size" of the ink involved; this is defined as the length of the stroke type representing the ink, again using Mahalanobis distance. The cost of a substitution is the distance between the two stroke types in question.
References-found: 17

