URL: ftp://ftp.cs.washington.edu/tr/1994/01/UW-CSE-94-01-07b.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/salesin/cv.html
Root-URL: 
Title: Interactive Pen-and-Ink Illustration  
Author: Mike Salisbury, Sean Anderson, Ronen Barzel David Salesin 
Address: Seattle, Washington 98195 Pixar 1001 West Cutting Boulevard Richmond, California 94804  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report 94-01-07b April 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brian Cabral and Leith (Casey) Leedom. </author> <title> Imaging Vector Fields Using Line Integral Convolution. Proceedings of SIGGRAPH 93 (Anaheim, attempted to mimic the author's final result with our system, using only a mouse. The book includes a reproduction of the author's own reference photograph, which we scanned to use as a tone reference. </title> <address> California, </address> <month> August 1-6, </month> <year> 1993). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1993, </year> <pages> pages 263-272. </pages>
Reference: [2] <author> John Canny. </author> <title> A Computational Approach To Edge Detection. </title> <editor> In Ran-gachar Kasturi and Ramesh C. Jain, editors, </editor> <booktitle> Computer Vision: Principles, </booktitle> <pages> pages 112-131. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, </address> <year> 1991. </year> <journal> Reprinted from IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 8(6) </volume> <pages> 679-698, </pages> <month> November </month> <year> 1986. </year>
Reference: [3] <author> Tunde Cockshott, John Patterson, and David England. </author> <title> Modelling the Texture of Paint. </title> <booktitle> In Proceedings of EUROGRAPHICS '92, pages C-217 to C-226, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: Section 4 suggests directions for future research. The primary data structures and algorithms of our prototype implementa tion are outlined in appendix A. 2 The Illustration System Full-color paint systems often support direct simulations of traditional artist tools, such as brushes and paint <ref> [3, 17] </ref>.
Reference: [4] <author> Adam Finkelstein and David H. Salesin. </author> <title> Multiresolution Curves. </title> <booktitle> Proceedings of SIGGRAPH 94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1994. </year>
Reference-contexts: A second paper shows how principles of illustration can be incorporated into an automated system for rendering 3D models [20]. A third paper examines the issues involved in representing, editing, and rendering the individual strokes that are the building blocks of any line illustration sys tem <ref> [4] </ref>. ious amounts of curve and waviness. 1.3 Overview The next section discusses the overall design of our system, as well as its individual capabilities and features. Section 3 presents some example illustrations and describes our experience with using the system. Section 4 suggests directions for future research. <p> Therefore, the system also allows users to draw individual strokes and provides controls for modifying stroke character through smoothing and through the substitution of various stroke styles <ref> [4] </ref>. To further aid users in creating illustrations, the system allows scanned, rendered, or painted images to be used as a reference for tone and shape. The system also supports edge extraction from images, which is useful for outlining. <p> For example, the original reference photograph for the goose in Figure 9 does not show feathers in any great detail; the artist must choose textures and introduce tone variation to convey the sense of feathering. 2.4 Detail manipulation The illustration system supports multiresolution curves <ref> [4] </ref>, allowing users to add or remove detail from strokes and edges. For example, an illustration can be initially made using smooth strokes, which can later be adjusted in subtle or not so subtle ways, using a variety of wiggly or scribbly detail. <p> Our simple procedural and stored textures do not yet provide all of the subtlety and variety available to the pen. For example, we would like to include the ability to vary the thickness along a stroke, which is supported in other pen-and-ink work <ref> [4, 20] </ref>. * Resolution-independence. The user should be able to work at a convenient screen resolution, while the final output should have strokes drawn with the highest resolution the printer can support.
Reference: [5] <author> Michel Gangnet, Jean-Claude Herve, Thierry Pudet, and Jean-Manuel Van Thong. </author> <title> Incremental Computation of Planar Maps. </title> <booktitle> Proceedings of SIGGRAPH '89 (Boston, </booktitle> <address> Massachusetts, July 31-August 4, </address> <year> 1989). </year> <booktitle> In Computer Graphics 23, </booktitle> <month> 3 (August </month> <year> 1989), </year> <pages> pages 345-354. </pages>
Reference-contexts: Considerable work has also been done for creating black-and-white illustrations, generally for engineering or graphical design work. The earliest such system was Sutherland's "Sketchpad" [18]. Gangnet et al. <ref> [5] </ref> use planar decomposition to manipulate and clip geometric objects. Pavlidis [11] provides a method for "cleaning up" schematic drawings by removing hand-drawn irregularities.
Reference: [6] <author> Arthur L. Guptill. </author> <title> Rendering in Pen and Ink. </title> <publisher> Watson-Guptill Publications, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: For further discussion and instruction, interested readers should consult Guptill <ref> [6] </ref>, a comprehensive text on pen and ink illustration. In addition, Simmons [16] provides instruction on illustrating using a "technical pen," which draws strokes of constant width. Both books contain dozens of stunning examples.
Reference: [7] <author> Paul Haeberli. </author> <title> Paint by Numbers: Abstract Image Representations. </title> <booktitle> Proceedings of SIGGRAPH '90 (Dallas, </booktitle> <address> Texas, </address> <month> August 6-10, </month> <year> 1990). </year> <booktitle> In Computer Graphics 24, </booktitle> <month> 4 (August </month> <year> 1990), </year> <pages> pages 207-214. </pages>
Reference-contexts: Only a few of these works take an approach similar to ours of creating higher-level interactive tools that can produce the same results as their predecessors: Lewis [10] describes brushes that lay down textured paint; Haeberli <ref> [7] </ref> shows how scanned or rendered image information can be used as a starting point for "painting by numbers;" and Haeberli and Segal [8] use hardware texture-mapping for painting and also mention 3D halftoning effects.
Reference: [8] <author> Paul Haeberli and Mark Segal. </author> <title> Texture Mapping as a Fundamental Drawing Primitive. </title> <booktitle> In Proceedings of the Fourth Annual EURO-GRAPHICS Workshop on Rendering, </booktitle> <pages> pages 259-266, </pages> <address> Paris, </address> <month> June </month> <year> 1993. </year> <institution> Ecole Normale Superieure. </institution>
Reference-contexts: similar to ours of creating higher-level interactive tools that can produce the same results as their predecessors: Lewis [10] describes brushes that lay down textured paint; Haeberli [7] shows how scanned or rendered image information can be used as a starting point for "painting by numbers;" and Haeberli and Segal <ref> [8] </ref> use hardware texture-mapping for painting and also mention 3D halftoning effects. Considerable work has also been done for creating black-and-white illustrations, generally for engineering or graphical design work. The earliest such system was Sutherland's "Sketchpad" [18]. Gangnet et al. [5] use planar decomposition to manipulate and clip geometric objects.
Reference: [9] <editor> Douglas Kirkland. Icons. </editor> <address> Collins Publishers San Francisco, San Fran-cisco, California, </address> <year> 1993. </year>
Reference: [10] <author> John-Peter Lewis. </author> <title> Texture Synthesis for Digital Painting. </title> <booktitle> Proceedings of SIGGRAPH '84 (Minneapolis, </booktitle> <address> Minnesota, </address> <month> July 23-27, </month> <year> 1984). </year> <booktitle> In Computer Graphics 18, </booktitle> <month> 3 (July </month> <year> 1984), </year> <pages> pages 245-252. </pages>
Reference-contexts: Only a few of these works take an approach similar to ours of creating higher-level interactive tools that can produce the same results as their predecessors: Lewis <ref> [10] </ref> describes brushes that lay down textured paint; Haeberli [7] shows how scanned or rendered image information can be used as a starting point for "painting by numbers;" and Haeberli and Segal [8] use hardware texture-mapping for painting and also mention 3D halftoning effects.
Reference: [11] <author> Theo Pavlidis. </author> <title> An Automatic Beautifier for Drawings and Illustrations. </title> <booktitle> Proceedings of SIGGRAPH '85 (San Francisco, </booktitle> <address> California, </address> <month> July 22-26, </month> <year> 1985). </year> <booktitle> In Computer Graphics 19, </booktitle> <month> 3 (July </month> <year> 1985), </year> <pages> pages 225-230. </pages>
Reference-contexts: Considerable work has also been done for creating black-and-white illustrations, generally for engineering or graphical design work. The earliest such system was Sutherland's "Sketchpad" [18]. Gangnet et al. [5] use planar decomposition to manipulate and clip geometric objects. Pavlidis <ref> [11] </ref> provides a method for "cleaning up" schematic drawings by removing hand-drawn irregularities.
Reference: [12] <author> Henry C. Pitz. </author> <title> Ink Drawing Techniques. </title> <publisher> Watson-Guptill Publications, </publisher> <address> New York, </address> <year> 1957. </year>
Reference: [13] <institution> The Premisys Corporation, Chicago. Squiggle, </institution> <year> 1993. </year>
Reference-contexts: Gangnet et al. [5] use planar decomposition to manipulate and clip geometric objects. Pavlidis [11] provides a method for "cleaning up" schematic drawings by removing hand-drawn irregularities. Quite the opposite (and more along the lines of our work), the Premisys Corporation markets a commercial product, "Squiggle," <ref> [13] </ref> that adds waviness and irregularities to CAD output to augment lines with extra information and to make the results appear more hand-drawn. Saito and Takahashi [14] produce automated black-and white illustrations of 3D objects. Our research group is exploring several different aspects of the pen-and-ink illustration problem.
Reference: [14] <author> Takafumi Saito and Tokiichiro Takahashi. </author> <title> Comprehensible Rendering of 3D Shapes. </title> <booktitle> Proceedings of SIGGRAPH '90 (Dallas, </booktitle> <address> Texas, </address> <month> August 6-10, </month> <year> 1990). </year> <booktitle> In Computer Graphics 24, </booktitle> <month> 4 (August </month> <year> 1990), </year> <pages> pages 197-206. </pages>
Reference-contexts: Quite the opposite (and more along the lines of our work), the Premisys Corporation markets a commercial product, "Squiggle," [13] that adds waviness and irregularities to CAD output to augment lines with extra information and to make the results appear more hand-drawn. Saito and Takahashi <ref> [14] </ref> produce automated black-and white illustrations of 3D objects. Our research group is exploring several different aspects of the pen-and-ink illustration problem. This paper discusses the issues of interactively creating pen-and-ink illustrations, with an emphasis on using 2D greyscale images as a starting point.
Reference: [15] <author> Robert Sedgewick. </author> <title> Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference: [16] <author> Gary Simmons. </author> <title> The Technical Pen. </title> <publisher> Watson-Guptill Publications, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: For further discussion and instruction, interested readers should consult Guptill [6], a comprehensive text on pen and ink illustration. In addition, Simmons <ref> [16] </ref> provides instruction on illustrating using a "technical pen," which draws strokes of constant width. Both books contain dozens of stunning examples. A discussion of pen-and-ink principles as they relate to purely computer-generated imagery can be found in Winkenbach et al. [20]. <p> Section A.3 describes the stroke-drawing algorithm in greater detail. Currently, strokes in our system are each of constant width, as per a "technical pen" <ref> [16] </ref>. 2.2 Textures The user paints by rubbing a "brush" over the illustration; the strokes that appear in the region under the brush are generated based on a user-selected stroke texture (see Figure 2).
Reference: [17] <author> Steve Strassman. </author> <title> Hairy Brushes. </title> <booktitle> Proceedings of SIGGRAPH '86 (Dallas, </booktitle> <address> Texas, </address> <month> August 18-22, </month> <year> 1986). </year> <booktitle> In Computer Graphics 20, </booktitle> <month> 4 (August </month> <year> 1986), </year> <pages> pages 225-232. </pages>
Reference-contexts: Section 4 suggests directions for future research. The primary data structures and algorithms of our prototype implementa tion are outlined in appendix A. 2 The Illustration System Full-color paint systems often support direct simulations of traditional artist tools, such as brushes and paint <ref> [3, 17] </ref>.
Reference: [18] <author> Ivan E. Sutherland. </author> <title> Sketchpad: A Man-Machine Graphics Communication System. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> pages 329-346, </pages> <year> 1963. </year>
Reference-contexts: Considerable work has also been done for creating black-and-white illustrations, generally for engineering or graphical design work. The earliest such system was Sutherland's "Sketchpad" <ref> [18] </ref>. Gangnet et al. [5] use planar decomposition to manipulate and clip geometric objects. Pavlidis [11] provides a method for "cleaning up" schematic drawings by removing hand-drawn irregularities.
Reference: [19] <author> Robert Ulichney. </author> <title> Digital Halftoning. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, </address> <year> 1987. </year>
Reference-contexts: Uneven strokes make an illustration look softer, more natural, and hand-drawn, whereas regular strokes introduce mechanical-looking texture. The use of irregular strokes can be compared to the introduction of randomness in image dithering <ref> [19] </ref>. We cannot simply draw strokes in completely random directions, however|the stroke direction is one of the key elements in defining a texture.
Reference: [20] <author> Georges Winkenbach and David H. Salesin. </author> <title> Computer-Generated Pen-and-Ink Illustration. </title> <booktitle> Proceedings of SIGGRAPH 94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1994. </year>
Reference-contexts: In addition, Simmons [16] provides instruction on illustrating using a "technical pen," which draws strokes of constant width. Both books contain dozens of stunning examples. A discussion of pen-and-ink principles as they relate to purely computer-generated imagery can be found in Winkenbach et al. <ref> [20] </ref>. Because texture in an illustration is the collective result of many pen strokes, each individual stroke is not critical and need not be drawn precisely. Indeed, a certain amount of irregularity in each stroke is desirable to keep the resulting texture from appearing too rigid or mechanical. <p> This paper discusses the issues of interactively creating pen-and-ink illustrations, with an emphasis on using 2D greyscale images as a starting point. A second paper shows how principles of illustration can be incorporated into an automated system for rendering 3D models <ref> [20] </ref>. <p> To draw procedural stroke textures, the system simply generates appropriate candidate strokes under the region of the brush and tests them, as discussed in detail in Section A.3. More intricate prioritized procedural stroke textures, such as "brick," "wood," or "shingle" textures, can also be defined <ref> [20] </ref>, although they are not cur rently implemented in our interactive system. 2.3 Reference images A scanned, rendered, or digitally painted continuous-tone image can be underlaid "beneath" the illustration being drawn, and displayed faintly. <p> Our simple procedural and stored textures do not yet provide all of the subtlety and variety available to the pen. For example, we would like to include the ability to vary the thickness along a stroke, which is supported in other pen-and-ink work <ref> [4, 20] </ref>. * Resolution-independence. The user should be able to work at a convenient screen resolution, while the final output should have strokes drawn with the highest resolution the printer can support. <p> We would like to interface our interactive system with an automatic renderer for creating pen-and-ink illustrations from 3D models <ref> [20] </ref> to create an integrated interactive 2D and 3D illustration system. Acknowledgements We would like to thank Adam Finkelstein for helping us incorporate his stroke detail research into our editor, and Georges Winkenbach and Tony DeRose for their useful discussion of illustration principles.
References-found: 20

