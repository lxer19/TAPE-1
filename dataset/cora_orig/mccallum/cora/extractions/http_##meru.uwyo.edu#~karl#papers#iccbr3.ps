URL: http://meru.uwyo.edu/~karl/papers/iccbr3.ps
Refering-URL: http://meru.uwyo.edu/~karl/pubs.html
Root-URL: 
Email: karl@index.uwyo.edu  
Phone: (307) 766-4258 FAX: -4036  
Title: Stratified Case-Based Reasoning in Non-Refinable Abstraction Hierarchies  
Author: L. Karl Branting 
Address: P.O. Box 3682  82071  
Affiliation: Department of Computer Science University of Wyoming  Laramie, WY  
Abstract: Stratified case-based reasoning (Scbr) is a technique in which case abstractions are used to assist case retrieval, matching, and adaptation. Previous work showed that Scbr can significantly decrease the computational expense required for retrieval, matching, and adaptation in a route-finding domain characterized by abstraction hierarchies with the downward refinement property. This work explores the effectiveness of Scbr in hierarchies without the downward refinement property. In an experimental evaluation using such hierarchies (1) Scbr significantly decreased search cost in hierarchies without the downward refinement property, although the speedup over ground-level A fl was not as great as in refinable hierarchies, (2) little difference was observed in Scbr search costs between case libraries created top-down in the process of Refinement and those created bottom-up from a valid ground solution, and (3) the most important factor in determining speedup appeared to be a priori likelihood that a previous solution can be usefully applied to a new problem.
Abstract-found: 1
Intro-found: 1
Reference: [BA95] <author> K. Branting and D. Aha. </author> <title> Stratified case-based reasoning: Reusing hierarchical problem solving episodes. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence(IJCAI-95), </booktitle> <address> Montreal, Canada, </address> <month> August 20-25 </month> <year> 1995. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning [BW95, KH92], design of control software [SK94, SC92], and route planning <ref> [BA95] </ref> (See [BW96] for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval. <p> Stratified cases can be reused at the most specific level of abstraction at which they can be applied to the given problem without requiring adaptation of less abstract, non-matching facts. A systematic analysis set forth in <ref> [BA95] </ref> compared the performance of heuristic search (A fl ), Refinement (i.e., hierarchical problem solving), ground-level CBR, and Scbr as a function of (1) number of levels of abstraction, (2) the size of the case library, and (3) resemblance among cases. <p> This metric insures that the h fl value of every point off of the abstract path is higher than the h fl value of any point on the path but is still sensitive to the actual distance to the goal. The experimental evaluation in <ref> [BA95] </ref> showed that Refinement (called "hierarchical A fl " in [BA95]) was significantly more efficient than ground-level A fl given even a single abstraction level, and its performance improved with more levels of abstraction. 3.2 Stratified CBR Algorithms Stratified CBR algorithms can reuse case solutions stored at any abstraction level. <p> The experimental evaluation in <ref> [BA95] </ref> showed that Refinement (called "hierarchical A fl " in [BA95]) was significantly more efficient than ground-level A fl given even a single abstraction level, and its performance improved with more levels of abstraction. 3.2 Stratified CBR Algorithms Stratified CBR algorithms can reuse case solutions stored at any abstraction level. <p> The computational expense of this application of Refinement will typically be greater in nonrefinable hierarchies. The cost of adaptation will therefore be higher as well. The problems associated with nonrefinable hierarchies were not addressed in the experiments described in <ref> [BA95] </ref> because those experiments involved only fields satisfying the following conditions (referred to hereinafter as "field refin G Fig. 4.
Reference: [BW95] <author> R. Bergmann and W. Wilke. </author> <title> Building and refining abstract planning cases by change of representation language. </title> <journal> Journal of Artificial Intelligence Research, </journal> <pages> 3(53-118), </pages> <year> 1995. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning <ref> [BW95, KH92] </ref>, design of control software [SK94, SC92], and route planning [BA95] (See [BW96] for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval.
Reference: [BW96] <author> R. Bergmann and W. Wilke. </author> <title> On the role of abstraction in case-based reasoning. </title> <booktitle> In Proceedings of the Third European Workshop on Case-Based Reasoning (EWCR-96), </booktitle> <pages> pages 28-43, </pages> <address> Lausanne, Switzerland, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning [BW95, KH92], design of control software [SK94, SC92], and route planning [BA95] (See <ref> [BW96] </ref> for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval.
Reference: [BY94] <author> F. Bacchus and Q. Yang. </author> <title> Downward refinement and the efficiency of hierarchical problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 71 </volume> <pages> 43-100, </pages> <year> 1994. </year>
Reference-contexts: The comparison was in the context of a route-finding task restricted to fields for which a simple aggregation abstraction method produced hierarchies satisfying the downward refinement property <ref> [Kno94, BY94] </ref>, i.e., every abstract solution can be refined to a concrete solution, if a concrete solution exists). Under these conditions, the Scbr algorithms outperformed ground-level CBR and ground-level A fl under all conditions, and outperformed Refinement given 3 or more levels of abstraction. <p> However, these results were restricted to domains for which there are abstraction methods that can create hierarchies with the downward refinement property. Unfortunately, many abstraction hierarchies lack this property <ref> [BY94] </ref>. Determining the range of applicability of Scbr requires establishing whether it can lead to improvement in hierarchies without the downward refinement property (henceforth, "nonrefinable hierarchies"). This paper describes an experimental evaluation of the relative performance of Scbr in refinable and nonrefinable hierarchies. <p> However, there are many abstraction hierarchies where lack of refinability makes Refinement more expensive than ground-level search <ref> [BY94] </ref>. It is unclear from the empirical evaluation whether, or under what conditions, Scbr algorithms would outperform ground-level search in such domains. To clarify the range of applicability of Scbr, additional experiments are needed to test the sensitivity of Scbr to the following independent variables: (1) The degree of refinability.
Reference: [HMZM96] <author> R. Holte, T. Mkadmi, R. Zimmer, and A. MacDonald. </author> <title> Speeding up problem-solving by abstraction: A graph-oriented approach. </title> <journal> Artificial Intelligence, </journal> <volume> 85(1-2):321-362, </volume> <year> 1996. </year>
Reference-contexts: A B C FD E Fig. 1. The Set of Possible Traversal Operators Per Position 3 Search Using Abstraction Hierarchies 3.1 Refinement Refinement <ref> [HMZM96] </ref> is a form of hierarchical problem solving in which a solution at one level of abstraction is used to guide search at a lower level of abstraction. <p> We are currently investigating the utility of Scbr on other types of information-processing tasks, including a configuration task|constraint satisfaction|and an analytical task, analogical legal reasoning. In addition, we are attempting to apply Scbr to abstraction hierarchies created using the star abstraction method described in <ref> [HMZM96] </ref>. 7 Conclusion This paper has described the process of stratified CBR in the context of hierarchies without the downward refinement property.
Reference: [KH92] <author> S. Khambamppati and J. Hendler. </author> <title> A validation-structure-based theory of plan modification. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-258, </pages> <year> 1992. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning <ref> [BW95, KH92] </ref>, design of control software [SK94, SC92], and route planning [BA95] (See [BW96] for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval.
Reference: [Kno94] <author> C. Knoblock. </author> <title> Automatically generating abstractions for planning. </title> <journal> Artificial Intelligence, </journal> <volume> 64, </volume> <year> 1994. </year>
Reference-contexts: The comparison was in the context of a route-finding task restricted to fields for which a simple aggregation abstraction method produced hierarchies satisfying the downward refinement property <ref> [Kno94, BY94] </ref>, i.e., every abstract solution can be refined to a concrete solution, if a concrete solution exists). Under these conditions, the Scbr algorithms outperformed ground-level CBR and ground-level A fl under all conditions, and outperformed Refinement given 3 or more levels of abstraction.
Reference: [SC92] <author> B. Smyth and P. Cunningham. Deja vu: </author> <title> A hierarchical case-based reasoning system for software design. </title> <booktitle> In Proceedings of the 10th European Conference on Artificial Intelligence, </booktitle> <pages> pages 587-589, </pages> <address> Vienna, Austria, </address> <year> 1992. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning [BW95, KH92], design of control software <ref> [SK94, SC92] </ref>, and route planning [BA95] (See [BW96] for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval.
Reference: [SK94] <author> B. Smythe and M. Keane. </author> <title> Retrieving adaptable cases. </title> <editor> In S. Wess, K. Althogg, and M. Richter, editors, </editor> <booktitle> Topics in Case-Based Reasoning, </booktitle> <pages> pages 209-220. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: 1 Stratified Case-Based Reasoning Stratified Case-Based Reasoning is a technique under which case abstractions are used to assist case indexing, matching, and adaptation. This approach has been applied to case-based planning [BW95, KH92], design of control software <ref> [SK94, SC92] </ref>, and route planning [BA95] (See [BW96] for a comparative analysis of previous approaches). Use of case abstractions has the following potential benefits: Indexing and retrieval.
References-found: 9

