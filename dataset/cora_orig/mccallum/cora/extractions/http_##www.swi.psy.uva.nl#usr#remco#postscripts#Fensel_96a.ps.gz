URL: http://www.swi.psy.uva.nl/usr/remco/postscripts/Fensel:96a.ps.gz
Refering-URL: http://www.swi.psy.uva.nl/usr/remco/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: fensel@swi.psy.uva.nl  
Title: The Mincer Metaphor for Problem-Solving Methods: Making Assumptions for Reasons of Efficiency  
Author: Dieter Fensel Remco Straatman Frank van Harmelen 
Address: Roetersstraat 15 1018 WB Amsterdam the Netherlands  
Affiliation: University of Amsterdam Department of Social Science Informatics (SWI)  
Abstract: In this paper we present the following view on problem-solving methods: Problem-solving methods describe an efficient reasoning strategy to achieve a goal by introducing assumptions about the available domain knowledge and the functionality of the task. These assumptions characterize a problem-solving method.
Abstract-found: 1
Intro-found: 1
Reference: [Aben, 1993] <author> M. Aben. </author> <title> Formally specifying re-usable knowledge model components. </title> <journal> Knowledge Acquisition, </journal> <volume> 5 </volume> <pages> 119-141, </pages> <year> 1993. </year>
Reference-contexts: Related work is done by [Poeck & Puppe, 1992] who discuss efficient variants of problem-solving methods for assignment tasks; [Eriksson et al., 1995] who did a worst-case analysis for some problem-solving methods; and [Straatman & Beys, 1995] who developed a calculus to express computational properties of problem-solving methods. <ref> [Aben, 1993] </ref> presents a framework for describing primitive inferences which has parallels with our framework for PSMs. The inferences are described in terms of preconditions, body, and postconditions. The postcondition would correspond to our functional description, the precondition to our assumptions, and the body to our operational specification.
Reference: [Aben, 1995] <author> M. Aben. </author> <title> Formal Methods in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, Faculty of Psychology, </institution> <month> February </month> <year> 1995. </year> <note> ISBN 90-5470-028-9. </note>
Reference-contexts: In addition, modeling operators [Van de Velde, 1994] are provided which transform these schemes into more concrete description of problem-solving methods by introducing new assumptions. We aim on supporting the creative process of developing problem-solving methods by these modeling operators. <ref> [Aben, 1995] </ref> developed the same idea for a library of elementary inference actions. Instead of storing e.g. the inference action select or all its variants in a library [Aben, 1995] provides general schemas of such elementary inferences and operators which can be used to modify their precise definitions. <p> We aim on supporting the creative process of developing problem-solving methods by these modeling operators. <ref> [Aben, 1995] </ref> developed the same idea for a library of elementary inference actions. Instead of storing e.g. the inference action select or all its variants in a library [Aben, 1995] provides general schemas of such elementary inferences and operators which can be used to modify their precise definitions.
Reference: [Akkermans et al., 1993] <author> J. M. Akkermans, B. J. Wielinga, and A. Th. Schreiber. </author> <title> Steps in constructing problem-solving methods. </title> <editor> In N. Aussenac, G. Boy, B. Gaines, M. Linster, J.-G. Ganascia, and Y. Kodratoff, editors, </editor> <title> Knowledge Acquisition for Knowledge-Based Systems. </title> <booktitle> Proceedings of the 7th European Workshop EKAW'93, Toulouse and Caylus, France, number 723 in Lecture Notes in Computer Science, </booktitle> <pages> pages 45-65, </pages> <address> Berlin Heidelberg, Germany, </address> <month> September </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: Analysis of the context of the system has to determine whether the assumption actually holds. The role assumptions play in the efficient realization of functionality suggests that the process of designing PSMs must be based on them. <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> introduce a general approach that views the construction process of problem-solving methods for knowledge-based systems as an assumption-driven activity. A formal specification of a task is derived from informal requirements by introducing assumptions about the problem and the problem space. <p> The combinatorial explosion of inferences in unstructured knowledge bases is thus prevented [Wielinga et al., 1993]. Thus, the assumption is that epistemological role limitations as described by a knowledge-level model are connected to computational access limitations. This point was further worked out in <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref>. There, the construction process of problem-solving methods is also seen as an assumption driven activity, and a formal specification is derived from informal requirements by introducing assumptions about the problem and the problem space.
Reference: [Bauer et al., 1987] <author> F. L. Bauer, H. Ehler, R. Horsch, B. Muller, H. Partsch, O. Paukner, and P. Pepper. </author> <title> The Munich Project CIP, vol II: The Transformation System CIP-S. </title> <booktitle> Lecture Notes on Computer Science (LNCS) no 292. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: Therefore, we get efficiency not by algorithmic refinement but by introducing assumptions on powerful domain knowledge and by weakening the task. 11 The paper originally appeared in 1979. 26 The main issue in work on program transformation is the aspect of correctness (see e.g. <ref> [Bauer et al., 1987] </ref>). That is, one wants to ensure that an implementations fulfills a formal specification. We have already mentioned that this concept of correctness has to be changed in our approach as we do assume modifications (i.e., restrictions) of the functionality during the transformation process.
Reference: [Benjamins, 1993] <author> V. R. </author> <title> Benjamins. Problem Solving Methods for Diagnosis. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: In [Fensel, 1995] a number of assumptions were identified for an existing problem-solving method. In section 3 we will summarize some of this work. A survey on assumptions used by problem-solving methods in diagnosis can be found in <ref> [Benjamins, 1993] </ref>. As the assumptions describe properties of the domain knowledge, which is represented in first-order logic 5 Other work in the AI literature provides ample proposals for notations of the functional description of a reasoning system.
Reference: [Boehm, 1988] <author> B.W. Boehm. </author> <title> A spiral model of software development and enhancement. </title> <booktitle> IEEE Computer, </booktitle> <year> 1988. </year>
Reference-contexts: These violated requirements are input of the specify and construct steps in the next iteration of the process. As process model of these three sub-activities we get a cyclic iteration of the three activities which corresponds to process models in software engineering <ref> [Boehm, 1988, Floyd et al., 1989] </ref>, 17 knowledge engineering [Morik, 1987, Neubert & Studer, 1992], or component-based design [Breuker & Van de Velde, 1994].
Reference: [Bottcher & Dressler, 1993] <author> C. Bottcher and O. Dressler. </author> <title> Diagnosis process dynamics: </title> <booktitle> Holding the diagnostic trackhound in leash. In Proceedings IJCAI`93. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The ordering should be such that preference will be given to alternatives that, on average, will lead to success more often than the other alternatives. The addition of heuristic knowledge can change the average-case behavior of the method but not the complexity class. <ref> [Bottcher & Dressler, 1993] </ref> introduces a number of heuristics to improve the average search process for model-based diagnosis.
Reference: [Bredeweg, 1994] <author> B. Bredeweg. </author> <title> Model-based diagnosis and prediction of behaviour. </title> <editor> In J. Breuker and W. van de Velde, editors, </editor> <title> CommonKADS Library for Expertise Modelling (reusable problem solving components), </title> <address> pages 121-153. </address> <publisher> IOS Press, </publisher> <address> Amsterdam, Oxford, Washington, </address> <year> 1994. </year>
Reference-contexts: For example, [Rouveirol & Albert, 1994] define a knowledge level model of machine learning algorithms by applying the generate & test schema and in <ref> [Bredeweg, 1994] </ref> it is used to define a top-level view on the diagnostic task. 3.3 An Efficient Solution by Propose & Revise The three main advantages of generate & test as it is developed above are: 12 * It requires only the knowledge given by the functional specification. * The four
Reference: [Breuker & Van de Velde, 1994] <author> J. A. Breuker and W. Van de Velde, </author> <title> editors. The Com-monKADS Library for Expertise Modelling. </title> <publisher> IOS Press, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1994. </year>
Reference-contexts: As process model of these three sub-activities we get a cyclic iteration of the three activities which corresponds to process models in software engineering [Boehm, 1988, Floyd et al., 1989], 17 knowledge engineering [Morik, 1987, Neubert & Studer, 1992], or component-based design <ref> [Breuker & Van de Velde, 1994] </ref>. <p> In the knowledge engineering literature the problem of designing an appropriate problem-solving method for a given application is mostly viewed as a selection or hierarchical design problem. * Selecting an appropriate problem-solving method out of a library of problem-solving meth ods <ref> [Breuker & Van de Velde, 1994] </ref>. * Constructing a problem-solving method by hierarchical refinement of its inferences (i.e., subtasks) [Terpstra et al., 1993]. 21 Both approaches view the development process of an appropriate problem-solving method for a given application as a routine design problem.
Reference: [Bylander & Chandrasekaran, 1988] <author> T. Bylander and B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning: The right level of abstraction for knowledge acquisition. </title> <editor> In B. Gaines and J. Boose, editors, </editor> <title> Knowledge Acquisition for Knowledge Based Systems, </title> <booktitle> volume 1, </booktitle> <pages> pages 65-77. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1988. </year>
Reference-contexts: That is, the assumptions 3 define goals for the knowledge acquisition process. Making the assumptions of a problem-solving method over the domain knowledge explicit is a way to deal with the interaction problem. The interaction problem <ref> [Bylander & Chandrasekaran, 1988] </ref> states that domain knowledge cannot be represented independently of how it will be used in reasoning. Vice versa one could state that a problem-solving method and its specific variant cannot be constructed independently of assumptions about the available domain knowledge.
Reference: [Chandrasekaran, 1986] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge based reasoning: High level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1(3) </volume> <pages> 23-30, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks <ref> [Chandrasekaran, 1986] </ref>, Role-limiting Methods [Marcus, 1988, Puppe, 1993], kads [Schreiber et al., 1993], method-to-task approach [Musen, 1992], Components of expertise [Steels, 1990], gdm [Terpstra et al., 1993]). <p> Although not treated in the work of Newell, much of the work that is based on Newell's knowledge-level hypothesis does indeed take efficiency into account 10 . Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks <ref> [Chandrasekaran, 1986, Chandrasekaran et al., 1992] </ref>, the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another.
Reference: [Chandrasekaran et al., 1992] <author> B. Chandrasekaran, T. R. Johnson, and J. W. Smith. </author> <title> Task-structure analysis for knowledge modeling. </title> <journal> Communications of the ACM, </journal> <volume> 35(9) </volume> <pages> 124-137, </pages> <year> 1992. </year>
Reference-contexts: Although not treated in the work of Newell, much of the work that is based on Newell's knowledge-level hypothesis does indeed take efficiency into account 10 . Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks <ref> [Chandrasekaran, 1986, Chandrasekaran et al., 1992] </ref>, the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another.
Reference: [deKleer & Williams, 1987] <author> J. H. de Kleer and B. C. Williams. </author> <title> Diagnosing multiple faults. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 97-130, </pages> <year> 1987. </year> <month> 31 </month>
Reference-contexts: A well-known example from the problem area of model-based diagnosis is the single-fault assumption (cf. <ref> [deKleer & Williams, 1987] </ref>). It assumes that the symptoms of a device are caused by one fault. This can be used to improve the efficiency of the methods, but disables these methods to deal with situations where the device was suffering from several faults.
Reference: [(ed.), 1994] <author> M. Linster (ed.). </author> <title> Sisyphus 91/92: Models of problem solving. </title> <journal> International Journal of Human Computer Studies, </journal> <volume> 40(3), </volume> <year> 1994. </year> <note> (special issue). </note>
Reference: [Eriksson et al., 1995] <author> H. Eriksson, Y. Shahar, S. W. Tu, A. R. Puerta, and M. A. Musen. </author> <title> Task modeling with reusable problem-solving methods. </title> <journal> Artificial Intelligence, </journal> <note> 1995. To appear. </note>
Reference-contexts: We will illustrate the problem by an example given in <ref> [Eriksson et al., 1995] </ref>. [Eriksson et al., 1995] describe and compare different problem-solving methods. One of these methods is the board-game method which can be used to solve one-player board games but also assignment problems as the room-allocation problem of Sisyphus-I [(ed.), 1994]. <p> We will illustrate the problem by an example given in <ref> [Eriksson et al., 1995] </ref>. [Eriksson et al., 1995] describe and compare different problem-solving methods. One of these methods is the board-game method which can be used to solve one-player board games but also assignment problems as the room-allocation problem of Sisyphus-I [(ed.), 1994]. <p> following alternative: * The possible-move inference delivers only strictly legal moves. * The possible-move inference delivers potential -but not necessarily strictly legal- moves, and a second inference action contradiction prunes illegal states by having knowledge over illegal states. 9 This idea originates from Annette ten Teije and Joost Breuker. 18 <ref> [Eriksson et al., 1995] </ref> state the following dilemma: The latter configuration of the board-game method is computationally less efficient than the former, because an implementation must generate and reject contradicting states that are irrelevant for the goal. <p> A simpler obligation is to proof a statement about the expected efficiency of a chosen method. Related work is done by [Poeck & Puppe, 1992] who discuss efficient variants of problem-solving methods for assignment tasks; <ref> [Eriksson et al., 1995] </ref> who did a worst-case analysis for some problem-solving methods; and [Straatman & Beys, 1995] who developed a calculus to express computational properties of problem-solving methods. [Aben, 1993] presents a framework for describing primitive inferences which has parallels with our framework for PSMs.
Reference: [Fensel & Groenboom, 1995] <author> D. Fensel and R. Groenboom. </author> <title> A formal semantics for specifying the dynamic reasoning of knowledge-based systems. </title> <booktitle> In Proceedings of KEML'96, </booktitle> <year> 1995. </year>
Reference-contexts: Second, based on these formal notations a proof calculus is necessary which enables to prove relationships between the different parts of the specification of a method (see section 5). A first step into this direction is achieved by <ref> [Fensel & Groenboom, 1995] </ref> where proof rules are defined for languages like KARL and (M L) 2 . Based on these proof rules, automated support by theorem provers is necessary in order to shift proofs from a thing which is possible in principle to realistic enterprise.
Reference: [Fensel & vanHarmelen, 1994] <author> D. Fensel and F. van Harmelen. </author> <title> A comparison of languages which operationalize and formalize kads models of expertise. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(2), </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: This language must be able to express control over functional specified basic building blocks (i.e., inferences). We can build here on the work on formal languages for KADS (see <ref> [Fensel & vanHarmelen, 1994] </ref> for a comparison of these languages). * A formal notation for the assumptions is needed.
Reference: [Fensel, 1995] <author> D. Fensel. </author> <title> Assumptions and limitations of a problem-solving method: A case study. </title> <booktitle> In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW'95), </booktitle> <address> Banff, Canada, </address> <year> 1995. </year>
Reference-contexts: Example of assumptions on domain knowledge are the availability of heuristics that link violated constraints to possible repair actions, or that a preference relation must describe a complete ordering. In <ref> [Fensel, 1995] </ref> a number of assumptions were identified for an existing problem-solving method. In section 3 we will summarize some of this work. A survey on assumptions used by problem-solving methods in diagnosis can be found in [Benjamins, 1993]. <p> If we take a closer look at revise by distinguishing several sub-steps of it we would see that the test inference appears also as sub-step of revise (cf. <ref> [Fensel, 1995] </ref>). After applying some repair rules on an invalid design, revise has to check whether the given violations are overcome and whether no new violations are introduced by applying the repair rules. Again, test knowledge which was originally separated from the generation step appears now as sub-activity of it. <p> It makes stronger assumptions to achieve this functionality. Also, it is much harder to understand in detail than generate & test. Especially the revise step requires several levels of refinement to define it precisely (see <ref> [Fensel, 1995] </ref>) and "the non-monotonic nature of the Propose and Revise method is difficult to capture in intuitively understandable theories."[Wielinga et al., 1995]. Given this we must face the fact that the only reason why we still would prefer propose & revise is for reasons of efficiency. <p> For instance for propose & revise there exist many variants with slightly different assumptions and behavior (see <ref> [Fensel, 1995] </ref>). Putting all variants into a library would lead to non-manageable libraries. Therefore, we can provide only a general schema covering all these variants. In addition, modeling operators [Van de Velde, 1994] are provided which transform these schemes into more concrete description of problem-solving methods by introducing new assumptions.
Reference: [Floyd et al., 1989] <author> C. Floyd, F.-M. Reisin, and G. Schmidt. </author> <title> Steps to software development with user. </title> <booktitle> In Proceedings of the 2nd European Software Engineering Conference ESEC89, </booktitle> <month> September 11-15, </month> <title> Warwick, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> no 387, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: These violated requirements are input of the specify and construct steps in the next iteration of the process. As process model of these three sub-activities we get a cyclic iteration of the three activities which corresponds to process models in software engineering <ref> [Boehm, 1988, Floyd et al., 1989] </ref>, 17 knowledge engineering [Morik, 1987, Neubert & Studer, 1992], or component-based design [Breuker & Van de Velde, 1994].
Reference: [Harel, 1984] <author> D. Harel. </author> <title> Dynamic logic. </title> <editor> In D. Gabbay and F. Guenthner, editors, </editor> <booktitle> Handbook of Philosophical Logic, Vol. II: extensions of Classical Logic, </booktitle> <pages> pages 497-604. </pages> <publisher> Reidel, </publisher> <address> Dor-drecht, The Netherlands, </address> <year> 1984. </year>
Reference-contexts: The data-flow connects inputs and outputs of inferences to the roles. Finally, the control of a PSM describes the ordering of execution of the inferences. In this paper we will use a procedural representation for this, based on quantified dynamic logic <ref> [Harel, 1984, Kozen, 1990] </ref>. Therefore, the building blocks of our language are formulas and programs. Atomic formulas are formulas over the contents of roles, and complex formulas can be built in the usual manner.
Reference: [Heisel et al., 1990] <author> M. Heisel, W. Reif, and W. Stephan. </author> <title> Tactical theorem proving in program verification. </title> <editor> In M. E. Stickel, editor, </editor> <booktitle> 10th International Conference on Automated Deduction, </booktitle> <address> Kaiserslautern, </address> <month> July </month> <year> 1990, </year> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> no 449. </volume> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: As the description formalisms includes logic over states like dynamic logic we will investigate the possibility to use theorem provers like KIV <ref> [Heisel et al., 1990] </ref> developed for program verification based on dynamic logic. Third, methods and tools are necessary which support the cyclic development of appropriate problem-solving methods.
Reference: [Katz et al., 1989] <author> S. Katz, C. A. Richter, and K. </author> <title> The. Paris: A system for reusing partially interpreted schemas. volume I Concepts and Models of Frontier Series: Software Reusability. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: We take a more pessimistic point of view as what we want to provide as starting point are general schemes of problem-solving methods defining their functionality and an operational description with very weak assumptions (like partially interpreted schemes and their assertions in the PARIS system <ref> [Katz et al., 1989] </ref>). For instance for propose & revise there exist many variants with slightly different assumptions and behavior (see [Fensel, 1995]). Putting all variants into a library would lead to non-manageable libraries. Therefore, we can provide only a general schema covering all these variants.
Reference: [Kifer et al., 1993] <author> M. Kifer, G. Lausen, and J. Wu. </author> <title> Logical foundations of object oriented and frame-based languages. </title> <type> Technical Report 93/06, </type> <institution> Department of Computer Science, SUNY at Stony Brook, </institution> <address> NY, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: In the paper, we use syntactically extended first-order logic for this purpose. We 5 use syntactical extensions like sets but from a semantical point of view the usual model--theoretical semantics of first-order logic can be applied (see <ref> [Kifer et al., 1993] </ref> for more details). An example for a functional specification is given in section 3. We do not want to go into detail on this topic, as the operational description of PSM is the focus of our paper 5 .
Reference: [Kozen, 1990] <author> D. Kozen. </author> <title> Logics of programs. </title> <booktitle> In Handbook of Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publ., B. V., </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The data-flow connects inputs and outputs of inferences to the roles. Finally, the control of a PSM describes the ordering of execution of the inferences. In this paper we will use a procedural representation for this, based on quantified dynamic logic <ref> [Harel, 1984, Kozen, 1990] </ref>. Therefore, the building blocks of our language are formulas and programs. Atomic formulas are formulas over the contents of roles, and complex formulas can be built in the usual manner.
Reference: [Landes & Studer, 1995] <author> D. Landes and R. Studer. </author> <title> The treatment of non-functional requirements in mike. </title> <booktitle> In Proc. 5th European Software Engineering Conference ESEC'95, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. 25-28 </month> <year> 1995. </year>
Reference-contexts: As the development process of appropriate problem-solving methods is a modeling activity we do not assume a linear development process. Instead, we assume a cyclic process of introducing, modifying, and revising assumptions. By documenting this process, we also keep the rationale of the assumptions (see <ref> [Parnas & Clements, 1986, Landes & Studer, 1995] </ref>). The precise definition of the task heavily influences the computational complexity of the problem and the assumptions which have to be made in order to achieve some level of efficiency.
Reference: [Levesque, 1984] <author> H. J. Levesque. </author> <title> Foundations of a functional approach to knowledge representation. </title> <journal> Artificial Intelligence, </journal> <volume> 23(2) </volume> <pages> 155-212, </pages> <year> 1984. </year>
Reference-contexts: As the assumptions describe properties of the domain knowledge, which is represented in first-order logic 5 Other work in the AI literature provides ample proposals for notations of the functional description of a reasoning system. See e.g. <ref> [Levesque, 1984] </ref> for a generic example, and [tenTeije & vanHarmelen, 1994] for a specific notation for diagnostic reasoning. 6 (with some conservative extensions), meta-logic seems a good candidate language for formally specifying the assumptions.
Reference: [Lloyd, 1987] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, 2nd edition edition, </address> <year> 1987. </year> <month> 32 </month>
Reference-contexts: We model this constraint by the set of formulas C = fspace = halve (persons)g Desired designs, valid designs, and possible solution are defined by means of variable substitutions and models. As we apply the standard definition of a model we refer to <ref> [Lloyd, 1987] </ref> for its definition. Definition 3 (Possible designs, desired design, valid design, solution) The set of all possible ground substitutions defines the set of all possible designs. A desired design is a ground substitution for which holds I is a model of R.
Reference: [Marcus, 1988] <author> S. Marcus, </author> <title> editor. Automatic knowledge acquisition for expert systems. </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods <ref> [Marcus, 1988, Puppe, 1993] </ref>, kads [Schreiber et al., 1993], method-to-task approach [Musen, 1992], Components of expertise [Steels, 1990], gdm [Terpstra et al., 1993]). <p> Sisyphus-II defined the task of configuring a vertical transportation system (an elevator) which was originally described in <ref> [Marcus, 1988, Marcus et al., 1988] </ref>. [Marcus, 1988] and [Marcus et al., 1988] developed the problem-solving method propose & revise for parametric design to solve this configuration task. In the following, we formally define the task parametric design. <p> Sisyphus-II defined the task of configuring a vertical transportation system (an elevator) which was originally described in [Marcus, 1988, Marcus et al., 1988]. <ref> [Marcus, 1988] </ref> and [Marcus et al., 1988] developed the problem-solving method propose & revise for parametric design to solve this configuration task. In the following, we formally define the task parametric design. <p> In each propose step we can assign one or some parameters a value and then we can apply revise to these incomplete designs before we propose the next parameter values. This divide & conquer strategy with intermediate repairs requires that the constraints do not interact much (see <ref> [Marcus, 1988] </ref>). Otherwise, we always have to redo older repair activities when new constraints violations are reported for a further parameter. Actually it is the same assumption which underlies all approaches on hierarchical task decomposition. It is only useful if the subtasks in different steps to not interact heavily. <p> Although not treated in the work of Newell, much of the work that is based on Newell's knowledge-level hypothesis does indeed take efficiency into account 10 . Work on such theories about problem-solving methods as role-limiting methods <ref> [Marcus, 1988] </ref>, generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one
Reference: [Marcus et al., 1988] <author> S. Marcus, J. Stout, and J. McDermott. </author> <title> VT: An expert elevator designer that uses knowledge-based backtracking. </title> <journal> AI Magazine, </journal> <volume> Spring:95-111, </volume> <year> 1988. </year>
Reference-contexts: Sisyphus-II defined the task of configuring a vertical transportation system (an elevator) which was originally described in <ref> [Marcus, 1988, Marcus et al., 1988] </ref>. [Marcus, 1988] and [Marcus et al., 1988] developed the problem-solving method propose & revise for parametric design to solve this configuration task. In the following, we formally define the task parametric design. <p> Sisyphus-II defined the task of configuring a vertical transportation system (an elevator) which was originally described in [Marcus, 1988, Marcus et al., 1988]. [Marcus, 1988] and <ref> [Marcus et al., 1988] </ref> developed the problem-solving method propose & revise for parametric design to solve this configuration task. In the following, we formally define the task parametric design. Then, we define a problem-solving method generate & test which can be used to solve this task in principle. <p> Furthermore, this is only one possible transformation of propose & revise. We still have made the assumption, that propose and revise works with complete designs. But as discussed in <ref> [Marcus et al., 1988] </ref> it could also make sense to regard repair activities as soon as possible. That is, instead of proposing a complete design which then is repaired, we can also incrementally develop a design and repair at each step where a constraint violations occurs.
Reference: [Morik, 1987] <author> K. Morik. </author> <title> Sloppy modeling. </title> <editor> In K. Morik, editor, </editor> <booktitle> Knowledge Representation and Organisation in Machine Learning, Lecture Notes in Artificial Intelligence, </booktitle> <volume> no 347. </volume> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: As process model of these three sub-activities we get a cyclic iteration of the three activities which corresponds to process models in software engineering [Boehm, 1988, Floyd et al., 1989], 17 knowledge engineering <ref> [Morik, 1987, Neubert & Studer, 1992] </ref>, or component-based design [Breuker & Van de Velde, 1994].
Reference: [Musen, 1989] <author> M. A. Musen. </author> <title> An editor for the conceptual models of interactive knowledge-acquisition tools. </title> <journal> International Journal on Man-Machine Studies, </journal> <volume> 31, </volume> <year> 1989. </year>
Reference-contexts: Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach <ref> [Musen, 1989] </ref>, generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly.
Reference: [Musen, 1992] <author> M. A. Musen. </author> <title> Overcoming the limitations of role-limiting methods. </title> <journal> Knowledge Acquisition, </journal> <volume> 4, </volume> <year> 1992. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods [Marcus, 1988, Puppe, 1993], kads [Schreiber et al., 1993], method-to-task approach <ref> [Musen, 1992] </ref>, Components of expertise [Steels, 1990], gdm [Terpstra et al., 1993]). The actual form of problem-solving methods differs between frameworks, but in general a PSM describes which reasoning-steps have to be performed, and which type of domain-knowledge is needed to perform a task.
Reference: [Nebel, 1995] <author> B. Nebel. </author> <title> Artificial intelligence: A computational perspective. </title> <editor> In G. Brewka, editor, </editor> <booktitle> Essentials in Knowledge Representation. </booktitle> <year> 1995. </year>
Reference-contexts: The third approach assumes the existence of heuristic knowledge in the domain that enables efficient average case behavior. Studying these assumptions and restrictions and their influence on the efficiency defines a link to the work in complexity analysis. <ref> [Nebel, 1995] </ref> proposes different strategies to deal with highly complex problems. We have translated his proposals into our framework: 1. <p> Otherwise, heuristic or case-based diagnosis "work only if there exists experience with the technical device one wants to diagnose, which is not necessary for the consistency based approach." <ref> [Nebel, 1995] </ref> 5. Solving small instances: Finally one could accept combinatorial explosion and use heuris tics and search space structuring to prevent unnecessary effort.
Reference: [Neubert & Studer, 1992] <author> S. Neubert and R. Studer. </author> <title> The keep model. </title> <editor> In T. Wetter et al., editor, </editor> <title> Current Developments in Knowledge Acquisition. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: As process model of these three sub-activities we get a cyclic iteration of the three activities which corresponds to process models in software engineering [Boehm, 1988, Floyd et al., 1989], 17 knowledge engineering <ref> [Morik, 1987, Neubert & Studer, 1992] </ref>, or component-based design [Breuker & Van de Velde, 1994].
Reference: [Newell, 1982] <author> A. Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: A diagnostic method may require a fault model (i.e., a specific type of domain knowledge) but the method should be described independent from any application domain such as diagnosis of cars, electronic circuits etc. Furthermore problem-solving methods are described at the knowledge-level <ref> [Newell, 1982] </ref>. A knowledge-level description describes reasoning in terms of goals to be achieved, elementary reasoning operators, and knowledge needed to achieve these goals and abstracts from details concerned with implementing the system. <p> After this we will take a look at related work in software engineering and complexity theory. 6.1 Related work in Knowledge Engineering We briefly discuss the differences between our approach and other work on problem-solving methods in the literature. Relevant is first of all the work by Newell <ref> [Newell, 1982] </ref>, whose "knowledge level hypothesis" is the basis for much of the current work on problem-solving methods. The major difference between our work and the view of Newell is that Newell was concerned with ideal rationality as an idealized concept. <p> The main difference between our approach and generic tasks is that we have argued against the hierarchical nature of the 10 Actually, the introduction of efficiency aspects at the knowledge level can already be found as a side aspect in <ref> [Newell, 1982] </ref>. He discusses the case where several actions lead to the same goal or several goals have to be achieved. <p> In this context, he makes a short remark: "If the agent has general goals of minimizing effort, minimizing cost, or doing things in a simple way, these general goals select out a specific action from a set of otherwise equipotent task-specific actions." <ref> [Newell, 1982] </ref>. 24 decomposition process of tasks into subtasks. This same point (the lack of belief in hierarchical decomposition as a process to obtain realistic problem-solving methods) also characterizes the main difference with the work in the method-to task approach.
Reference: [Parnas & Clements, 1986] <author> D. L. Parnas and P. C. Clements. </author> <title> A rational design process: How and why to fake it. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12 </volume> <pages> 251-257, </pages> <year> 1986. </year>
Reference-contexts: As the development process of appropriate problem-solving methods is a modeling activity we do not assume a linear development process. Instead, we assume a cyclic process of introducing, modifying, and revising assumptions. By documenting this process, we also keep the rationale of the assumptions (see <ref> [Parnas & Clements, 1986, Landes & Studer, 1995] </ref>). The precise definition of the task heavily influences the computational complexity of the problem and the assumptions which have to be made in order to achieve some level of efficiency.
Reference: [Poeck & Gappa, 1993] <author> K. Poeck and U. Gappa. </author> <title> Making role limiting shells more flexible. In Knowledge Acquisition for Knowledge-Based Systems, </title> <booktitle> Proceedings of the 7th Euro-pean Workshop EKAW'93, Toulouse, France, number 723 in Lecture Notes in AI, </booktitle> <address> Berlin, September 6-10 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Originally, role-limiting methods were building blocks that solved an entire task. Currently, work is done to extend the application scope of role-limiting methods by breaking them down into components with smaller grain size <ref> [Poeck & Gappa, 1993] </ref>. A complete problem-solver for a given task can then be configured out of these elementary components. Therefore, the selection problem of appropriate components becomes much more serious. In addition, the complete problem solver is now the result of a configuration activity.
Reference: [Poeck & Puppe, 1992] <author> K. Poeck and F. Puppe. Coke: </author> <title> Efficient solving of complex assignment problems with the propose-and-exchange method. </title> <booktitle> In Proceedings of the 5th International Conference on Tools with Artificial Intelligence, </booktitle> <institution> Arlington, Virginia, US, </institution> <year> 1992. </year>
Reference-contexts: A simpler obligation is to proof a statement about the expected efficiency of a chosen method. Related work is done by <ref> [Poeck & Puppe, 1992] </ref> who discuss efficient variants of problem-solving methods for assignment tasks; [Eriksson et al., 1995] who did a worst-case analysis for some problem-solving methods; and [Straatman & Beys, 1995] who developed a calculus to express computational properties of problem-solving methods. [Aben, 1993] presents a framework for describing primitive
Reference: [Puppe, 1993] <author> F. Puppe. </author> <title> Systematic Introduction to Expert Systems: Knowledge Representation and Problem-Solving Methods. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods <ref> [Marcus, 1988, Puppe, 1993] </ref>, kads [Schreiber et al., 1993], method-to-task approach [Musen, 1992], Components of expertise [Steels, 1990], gdm [Terpstra et al., 1993]). <p> Unlike our approach, this concern is so strong that no separation is made between efficiency and functionality. In their terminology, a problem-solving method is "an algorithm which determines how domain-specific knowledge is used for solving problems." <ref> [Puppe, 1993] </ref>. From our point of view a problem-solving method defines a class of possible algorithms by describing their functionality, their common assumptions and their expected efficiency. Originally, role-limiting methods were building blocks that solved an entire task.
Reference: [Reiter, 1987] <author> R. Reiter. </author> <title> A theory of diagnosis from first principles. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 57-96, </pages> <year> 1987. </year>
Reference-contexts: Reconsidering the Problem: For example, heuristic or case-based diagnosis can behave much better from a computational point of view than consistency-based diagnosis <ref> [Reiter, 1987] </ref> which is NP-hard. Otherwise, heuristic or case-based diagnosis "work only if there exists experience with the technical device one wants to diagnose, which is not necessary for the consistency based approach." [Nebel, 1995] 5.
Reference: [Rich & Knight, 1991] <author> E. Rich and K. Knight. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, 2nd edition, </address> <year> 1991. </year>
Reference-contexts: A large part of the problem types tackled by problem-solving methods are at least NP-hard (e.g. scheduling, design, diagnosis). This means that there is no hope of finding a method that will solve all cases in polynomial time. <ref> [Rich & Knight, 1991] </ref> even define AI as "... the study of techniques for solving exponentially hard problems in polynomial time by exploiting knowledge about the problem domain." Most problem-solving method in knowledge engineering describe a heuristic strategy to tackle problems for which no polynomial algorithms are known.
Reference: [Rouveirol & Albert, 1994] <author> C. Rouveirol and P. Albert. </author> <title> Knowledge level model of a configurable learning system. </title> <booktitle> In Proceedings of the European Knowledge Acquisition Workshop (EKAW'94), Hoegaarden, Belgium, number no 867 in Lecture Notes in Aritificial Intelligence (LNAI), </booktitle> <address> Berlin, September 26-29 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Still, we have an operational description of achieving the goal. From a point of view where one does not want to care about efficiency, this could be a legal point to describe the essence of the reasoning process of a system which solves the task. For example, <ref> [Rouveirol & Albert, 1994] </ref> define a knowledge level model of machine learning algorithms by applying the generate & test schema and in [Bredeweg, 1994] it is used to define a top-level view on the diagnostic task. 3.3 An Efficient Solution by Propose & Revise The three main advantages of generate &
Reference: [Russell & Subramanian, 1995] <author> S. J. Russell and D. Subramanian. </author> <title> Provably bounded-optimal agents. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2, </volume> <year> 1995. </year> <month> 33 </month>
Reference-contexts: A refinement of Newell's work that does take efficiency into account is the work on bounded rationality (e.g. <ref> [Russell & Subramanian, 1995] </ref>). An important notion there is the utility of a reasoning process, where the benefit of reasoning is charged against its costs. Such notions also play a role in our framework (in particular the use of the cost model in section 2).
Reference: [Schreiber & Birmingham, 1996] <author> A. Th. Schreiber and W. P. </author> <title> Birmingham. The sisyphus VT initiative, </title> <journal> editorial special issue. International Journal on Human Computer Studies, </journal> <note> 1996. (in press). </note>
Reference: [Schreiber et al., 1991] <author> A. Th. Schreiber, J. M. Akkermans, and B. J. Wielinga. </author> <title> On problems with the knowledge level perspective. </title> <editor> In L. Steels and B. Smith, editors, AISB-91: </editor> <booktitle> Artificial Intelligence and Simulation of behaviour, </booktitle> <pages> pages 208-221, </pages> <address> London, </address> <year> 1991. </year> <note> Springer-Verlag. Also in: Proceedings Banff '90 Knowledge Acquisition Workshop, </note> <editor> J. H. Boose and B. R. Gaines (editors), </editor> <publisher> SRDG Publications, University of Calgary, </publisher> <pages> pages 30.1-30.14. </pages>
Reference-contexts: The difference is that we make explicit the role of assumptions in this process. In kads, the concern with the efficiency of problem-solving is less prominent than in components of expertise. The connection between problem-solving methods and computational efficiency is proposed as epistemological and computational adequacy <ref> [Schreiber et al., 1991] </ref>. A problem-solving method specifies role limitations in the use of knowledge. The combinatorial explosion of inferences in unstructured knowledge bases is thus prevented [Wielinga et al., 1993].
Reference: [Schreiber et al., 1993] <editor> A. Th. Schreiber, B. J. Wielinga, and J. A. Breuker, editors. KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development, volume 11 of Knowledge-Based Systems Book Series. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1993. </year> <note> ISBN 0-12-629040-7. </note>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods [Marcus, 1988, Puppe, 1993], kads <ref> [Schreiber et al., 1993] </ref>, method-to-task approach [Musen, 1992], Components of expertise [Steels, 1990], gdm [Terpstra et al., 1993]). The actual form of problem-solving methods differs between frameworks, but in general a PSM describes which reasoning-steps have to be performed, and which type of domain-knowledge is needed to perform a task. <p> We do not want to go into detail on this topic, as the operational description of PSM is the focus of our paper 5 . The operational specification consists of inferences and the data- and control-flow between them. Our operational specification is based on kads <ref> [Schreiber et al., 1993] </ref>. The inferences specify the reasoning steps that are used to accomplish the functionality of the method. They are described by their input/output relation and can be achieved by a method or a primitive inference.
Reference: [Schreiber et al., 1994] <author> A. Th. Schreiber, B. J. Wielinga, R. de Hoog, J. M. Akkermans, and W. Van de Velde. CommonKADS: </author> <title> A comprehensive methodology for KBS development. </title> <journal> IEEE Expert, </journal> <volume> 9(6) </volume> <pages> 28-37, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads <ref> [Wielinga et al., 1992, Schreiber et al., 1994] </ref> all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly. We will briefly sketch the differences between our approach and these works. role-limiting methods are clearly aimed at providing efficient problem solvers.
Reference: [Schreiber et al., 1995] <author> A. Th. Schreiber, B. J. Wielinga, and W. H. J. Jansweijer. </author> <title> The KAC-TUS view on the 'O' word. In IJCAI Workshop on Basic Ontological Issues in Knowledge Sharing, </title> <note> 1995. Also in: </note> <editor> J. C. Bioch and Y.-H. Tan (eds.). </editor> <booktitle> Proceedings 7th Dutch National Conference on Artificial Intelligence NAIC'95, </booktitle> <institution> EURIDIS, Erasmus University Rotterdam, </institution> <address> The Netherlands, </address> <pages> pp. 159-168, </pages> <year> 1995. </year>
Reference: [Simon, 1981] <editor> H. A. Simon. </editor> <booktitle> The Science of the Artificial. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, 2nd edition, </address> <year> 1981. </year>
Reference-contexts: The knowledge level is concerned with purely functional specifications, whereas we agree with Simon that "Rules of substantive 23 rationality that are not backed by executable algorithms are a worthless currency" <ref> [Simon, 1981] </ref>. A refinement of Newell's work that does take efficiency into account is the work on bounded rationality (e.g. [Russell & Subramanian, 1995]). An important notion there is the utility of a reasoning process, where the benefit of reasoning is charged against its costs.
Reference: [Smith & Parra, 1993] <author> D. R. Smith and E. A. </author> <title> Parra. Tranformational approach to transportation scheduling. </title> <booktitle> In Proceedings of the 8th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 60-68. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Sept. 14-17 </month> <year> 1993. </year> <note> (Best Paper Award). </note>
Reference-contexts: We have already mentioned that this concept of correctness has to be changed in our approach as we do assume modifications (i.e., restrictions) of the functionality during the transformation process. A very interesting approach in the area of program transformation is KIDS (Kestrel Interactive Development System, see <ref> [Smith, 1990, Smith & Parra, 1993] </ref>) which provides automated support for the development of correct and efficient programs from formal specifications. The program development is divided into six activities from which four of them are relevant in our context: * Development of a domain theory.
Reference: [Smith, 1990] <author> D. R. Smith. Kids: </author> <title> A semiautomatic program development system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(9), </volume> <year> 1990. </year>
Reference-contexts: We have already mentioned that this concept of correctness has to be changed in our approach as we do assume modifications (i.e., restrictions) of the functionality during the transformation process. A very interesting approach in the area of program transformation is KIDS (Kestrel Interactive Development System, see <ref> [Smith, 1990, Smith & Parra, 1993] </ref>) which provides automated support for the development of correct and efficient programs from formal specifications. The program development is divided into six activities from which four of them are relevant in our context: * Development of a domain theory.
Reference: [Steels, 1990] <author> L. Steels. </author> <title> Components of expertise. </title> <journal> AI Magazine, </journal> <month> Summer </month> <year> 1990. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods [Marcus, 1988, Puppe, 1993], kads [Schreiber et al., 1993], method-to-task approach [Musen, 1992], Components of expertise <ref> [Steels, 1990] </ref>, gdm [Terpstra et al., 1993]). The actual form of problem-solving methods differs between frameworks, but in general a PSM describes which reasoning-steps have to be performed, and which type of domain-knowledge is needed to perform a task. <p> Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise <ref> [Steels, 1990] </ref> and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly. <p> The components of expertise approach shares our concern with the pragmatics of problem-solving methods, and distinguishes a conceptual and a pragmatic viewpoint on methods (see <ref> [Steels, 1990] </ref>). At the conceptual level the general type of inference of the system is described. The pragmatic level can be used to express limitations as of time and space or of observation. Therefore, the pragmatic level introduces the idea of bounded rationality in the components of expertise framework. <p> In a first step knowledge is configured into a model of the actual task set to the agent (which is called knowledge use level in <ref> [Steels, 1990] </ref>). In the second step the principle of rationality can then be applied within the boundaries of the task model.
Reference: [Steels, 1993] <author> L. Steels. </author> <title> The componential framework and its role in reusability. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 273-298. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: As in role-limiting methods and in difference to our point of view a problem-solving method is viewed as an algorithm: "A method is an algorithm. It contains a series of activities and a control flow defined over these activities." <ref> [Steels, 1993] </ref>. [Van de Velde, 1991] refines the principle of rationality into a two-step procedure. In a first step knowledge is configured into a model of the actual task set to the agent (which is called knowledge use level in [Steels, 1990]).
Reference: [Straatman & Beys, 1995] <author> R. Straatman and P. Beys. </author> <title> A performance model for knowledge-based systems. </title> <editor> In M. Ayel and M. C. Rousset, editors, </editor> <booktitle> EUROVAV-95 European Symposium on the Validation and Verification of Knowledge Based Systems, </booktitle> <pages> pages 253-263. </pages> <institution> ADEIRAS, Universite de Sovoie, </institution> <address> Chambery, </address> <month> 26-28 June </month> <year> 1995. </year>
Reference-contexts: Further, a finite set of requirements is assumed to be input delivered by the user. These requirements must be fulfilled by a desired design artifact. A design which fulfills all 6 A cost model for kads conceptual models is explained in <ref> [Straatman & Beys, 1995] </ref>. 7 requirements is called a desired design. In addition to the case-specific user input, a finite set of constraints model additional conditions for a valid design artifact. These constraints are domain knowledge describing the regularities in the domain in which the design artifact is constructed. <p> A simpler obligation is to proof a statement about the expected efficiency of a chosen method. Related work is done by [Poeck & Puppe, 1992] who discuss efficient variants of problem-solving methods for assignment tasks; [Eriksson et al., 1995] who did a worst-case analysis for some problem-solving methods; and <ref> [Straatman & Beys, 1995] </ref> who developed a calculus to express computational properties of problem-solving methods. [Aben, 1993] presents a framework for describing primitive inferences which has parallels with our framework for PSMs. The inferences are described in terms of preconditions, body, and postconditions. <p> A variant of meta-logic could be used to specify the assumptions of the method. * Finally, a feasible calculus must be provided to specify the computational behavior of a method. <ref> [Straatman & Beys, 1995] </ref> describes a step in this direction. Second, based on these formal notations a proof calculus is necessary which enables to prove relationships between the different parts of the specification of a method (see section 5).
Reference: [Tank, 1992] <author> W. Tank. </author> <title> Modellierung von Expertise uber Konfigurierungsaufgaben. Infix, </title> <address> Sankt Augustin, Germany, </address> <year> 1992. </year> <note> ISBN 3-929037-05-X. </note>
Reference-contexts: We only use both to illustrate our ideas on problem-solving methods. 3.1 A Formal Description of Parametric Design A parametric design problem can be defined by a problem space, requirements, constraints, and a preference (see <ref> [Tank, 1992] </ref> for more details). The problem space describes the space which contains all possible designs. The definition of the problem space is domain-specific knowledge. Further, a finite set of requirements is assumed to be input delivered by the user. These requirements must be fulfilled by a desired design artifact.
Reference: [tenTeije & vanHarmelen, 1994] <author> A. ten Teije and F. van Harmelen. </author> <title> An extended spectrum of logical definitions for diagnostic systems. </title> <booktitle> In Proceedings of DX-94 Fifth International Workshop on Principles of Diagnosis, </booktitle> <year> 1994. </year> <month> 34 </month>
Reference-contexts: As the assumptions describe properties of the domain knowledge, which is represented in first-order logic 5 Other work in the AI literature provides ample proposals for notations of the functional description of a reasoning system. See e.g. [Levesque, 1984] for a generic example, and <ref> [tenTeije & vanHarmelen, 1994] </ref> for a specific notation for diagnostic reasoning. 6 (with some conservative extensions), meta-logic seems a good candidate language for formally specifying the assumptions. <p> First, an adequate framework for describing problem-solving methods has to be established: * A formal notation for the functionality of a method is required. A proposal for such a notation for diagnostic methods can be found in <ref> [tenTeije & vanHarmelen, 1994] </ref>. * A logic over states is needed to express the operational specification of a method. This language must be able to express control over functional specified basic building blocks (i.e., inferences).
Reference: [Terpstra et al., 1993] <author> P. Terpstra, G. van Heijst, B. Wielinga, and N. Shadtbolt. </author> <title> Knowledge acquisition support through generalised directive models. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 428-455. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction The concept of a problem-solving method (PPM) is present in a large part of current knowledge-engineering frameworks (e.g. generic tasks [Chandrasekaran, 1986], Role-limiting Methods [Marcus, 1988, Puppe, 1993], kads [Schreiber et al., 1993], method-to-task approach [Musen, 1992], Components of expertise [Steels, 1990], gdm <ref> [Terpstra et al., 1993] </ref>). The actual form of problem-solving methods differs between frameworks, but in general a PSM describes which reasoning-steps have to be performed, and which type of domain-knowledge is needed to perform a task. Still, a problem-solving method abstracts from implementation details and from a specific domain. <p> appropriate problem-solving method for a given application is mostly viewed as a selection or hierarchical design problem. * Selecting an appropriate problem-solving method out of a library of problem-solving meth ods [Breuker & Van de Velde, 1994]. * Constructing a problem-solving method by hierarchical refinement of its inferences (i.e., subtasks) <ref> [Terpstra et al., 1993] </ref>. 21 Both approaches view the development process of an appropriate problem-solving method for a given application as a routine design problem. <p> Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models <ref> [Terpstra et al., 1993, vanHeijst et al., 1992] </ref>, components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly.
Reference: [Top & Akkermans, 1994] <author> J. Top and H. Akkermans. </author> <title> Engineering modelling. </title> <editor> In J. Breuker and W. Van de Velde, editors, </editor> <title> CommonKADS Library for Expertise Modelling, </title> <booktitle> volume 21 of Frontiers in Artificial Intelligence and Applications, chapter 12, </booktitle> <pages> pages 265-303. </pages> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: We will examine this issue more deeply in a successor paper. 4 The Development Process of Problem-Solving Methods The development of problem-solving methods is a model construction process. As we aim on reusing generic model components we can apply a process model of component-based design (see <ref> [Top & Akkermans, 1994] </ref>). It consists of three main activities: * Specify: The intention of the user is translated into explicit (i.e., formally described) requirements. The outcome of this phase is a functional specification of the system or more specific a competence theory of the problem-solving method.
Reference: [Van de Velde, 1991] <author> W. Van de Velde. </author> <title> Tractable rationality at the knowledge-level. </title> <editor> In L. Steels and B. Smith, editors, </editor> <booktitle> Proceedings AISB'91: Artificial Intelligence and Simulation of Be-haviour, </booktitle> <pages> pages 196-207, </pages> <address> London, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As in role-limiting methods and in difference to our point of view a problem-solving method is viewed as an algorithm: "A method is an algorithm. It contains a series of activities and a control flow defined over these activities." [Steels, 1993]. <ref> [Van de Velde, 1991] </ref> refines the principle of rationality into a two-step procedure. In a first step knowledge is configured into a model of the actual task set to the agent (which is called knowledge use level in [Steels, 1990]).
Reference: [Van de Velde, 1994] <author> W. Van de Velde. </author> <title> A constructivist view on knowledge engineering. </title> <booktitle> In Proceedings of the 11th European Conference on Artificial Intelligence (ECAI'94), </booktitle> <address> Ams-terdam, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: For instance for propose & revise there exist many variants with slightly different assumptions and behavior (see [Fensel, 1995]). Putting all variants into a library would lead to non-manageable libraries. Therefore, we can provide only a general schema covering all these variants. In addition, modeling operators <ref> [Van de Velde, 1994] </ref> are provided which transform these schemes into more concrete description of problem-solving methods by introducing new assumptions. We aim on supporting the creative process of developing problem-solving methods by these modeling operators. [Aben, 1995] developed the same idea for a library of elementary inference actions. <p> Third, methods and tools are necessary which support the cyclic development of appropriate problem-solving methods. This includes a library with problem-solving methods schema indexed by their functionality, assumptions and cost, and operations which work on assumptions and derive problem-solving method instantiations. <ref> [Van de Velde, 1994] </ref> defines three components of a modeling library: Modeling components which are structures that are useful for the construction of complete models. Generic models that are frames representing a class of complete models. Modeling operators transform a model into another one.
Reference: [vanHarmelen & tenTeije, 1995] <author> F. van Harmelen and A. ten Teije. </author> <title> Approximations in diagnosis: motivations and techniques. </title> <editor> In C. Bioch and Y.H. Tan, editors, </editor> <booktitle> Proceedings of the Dutch Conference on AI (NAIC'95), </booktitle> <address> Rotterdam, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: In the case of KL-ONE the representation formalisms has to be restricted in order to guaranty polynomial behavior. 3. Approximations: Instead of looking for the optimal solution the functionality of the system is reduced to find an approximation. (See e.g. <ref> [vanHarmelen & tenTeije, 1995] </ref> for an example of such an approach in diagnostic reasoning). 4. Reconsidering the Problem: For example, heuristic or case-based diagnosis can behave much better from a computational point of view than consistency-based diagnosis [Reiter, 1987] which is NP-hard.
Reference: [vanHeijst et al., 1992] <author> G. van Heijst, P. Terpstra, B. J. Wielinga, and N. Shadbolt. </author> <title> Using gen-eralised directive models in knowledge acquisition. </title> <editor> In Th. Wetter, K. D. Althoff, J. Boose, B. Gaines, M. Linster, and F. Schmalhofer, editors, </editor> <booktitle> Current Developments in Knowledge Acquisition: </booktitle> <address> EKAW-92, Berlin, Germany, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models <ref> [Terpstra et al., 1993, vanHeijst et al., 1992] </ref>, components of expertise [Steels, 1990] and kads [Wielinga et al., 1992, Schreiber et al., 1994] all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly.
Reference: [Wielinga & Schreiber, 1994] <author> B. J. Wielinga and A. Th. Schreiber. </author> <title> Conceptual modelling of large reusable knowledge bases. </title> <editor> In K. von Luck and H. Marburger, editors, </editor> <booktitle> Management and Processing of Complex Data Structures, volume 777 of Lecture Notes in Computer Science, </booktitle> <pages> pages 181-200, </pages> <address> Berlin, Germany, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference: [Wielinga et al., 1992] <author> B. J. Wielinga, A. Th. Schreiber, and J. A. Breuker. KADS: </author> <title> A modelling approach to knowledge engineering. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(1) </volume> <pages> 5-53, </pages> <year> 1992. </year> <note> Special issue `The KADS approach to knowledge engineering'. Reprinted in: </note> <author> Buchanan, B. and Wilkins, D. </author> <title> editors (1992), Readings in Knowledge Acquisition and Learning, </title> <address> San Mateo, California, </address> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 92-116. </pages>
Reference-contexts: Work on such theories about problem-solving methods as role-limiting methods [Marcus, 1988], generic tasks [Chandrasekaran, 1986, Chandrasekaran et al., 1992], the method-to task approach [Musen, 1989], generalized directive models [Terpstra et al., 1993, vanHeijst et al., 1992], components of expertise [Steels, 1990] and kads <ref> [Wielinga et al., 1992, Schreiber et al., 1994] </ref> all deal with the matter of efficiency in one way or another. However, many of these approaches treat efficiency implicitly. We will briefly sketch the differences between our approach and these works. role-limiting methods are clearly aimed at providing efficient problem solvers.
Reference: [Wielinga et al., 1993] <author> B. J. Wielinga, W. Van de Velde, A. Th. Schreiber, and J. M. Akker-mans. </author> <title> Towards a unification of knowledge modelling approaches. </title> <editor> In Jean-Marc David, Jean-Paul Krivine, and Reid Simmons, editors, </editor> <booktitle> Second Generation Expert Systems, </booktitle> <pages> pages 299-335. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: The operational specification, P SM operational , describes how to realize the functionality in a reasoning system. The assumptions, P SM assumptions 4 "... when one searches the literature for a precise definition of problem-solving methods, it becomes clear that there are different views." <ref> [Wielinga et al., 1993] </ref> 4 describe conditions under which the structure described in the operational description will achieve the functionality. The relation between functional specification, operational specification, cost description, and assumptions is essential for understanding PSMs. <p> The connection between problem-solving methods and computational efficiency is proposed as epistemological and computational adequacy [Schreiber et al., 1991]. A problem-solving method specifies role limitations in the use of knowledge. The combinatorial explosion of inferences in unstructured knowledge bases is thus prevented <ref> [Wielinga et al., 1993] </ref>. Thus, the assumption is that epistemological role limitations as described by a knowledge-level model are connected to computational access limitations. This point was further worked out in [Akkermans et al., 1993, Wielinga et al., 1995].
Reference: [Wielinga et al., 1995] <author> B. J. Wielinga, J. M. Akkermans, and A. Th. Schreiber. </author> <title> A formal analysis of parametric design problem solving. </title> <editor> In B. R. Gaines and M. A. Musen, editors, </editor> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, volume II, pages 37.1-37.15, </booktitle> <address> Alberta, Canada, </address> <year> 1995. </year> <institution> SRDG Publications, University of Calgary. </institution> <month> 35 </month>
Reference-contexts: Analysis of the context of the system has to determine whether the assumption actually holds. The role assumptions play in the efficient realization of functionality suggests that the process of designing PSMs must be based on them. <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref> introduce a general approach that views the construction process of problem-solving methods for knowledge-based systems as an assumption-driven activity. A formal specification of a task is derived from informal requirements by introducing assumptions about the problem and the problem space. <p> The combinatorial explosion of inferences in unstructured knowledge bases is thus prevented [Wielinga et al., 1993]. Thus, the assumption is that epistemological role limitations as described by a knowledge-level model are connected to computational access limitations. This point was further worked out in <ref> [Akkermans et al., 1993, Wielinga et al., 1995] </ref>. There, the construction process of problem-solving methods is also seen as an assumption driven activity, and a formal specification is derived from informal requirements by introducing assumptions about the problem and the problem space. <p> There, the construction process of problem-solving methods is also seen as an assumption driven activity, and a formal specification is derived from informal requirements by introducing assumptions about the problem and the problem space. Our work is based on the work by <ref> [Wielinga et al., 1995] </ref>. In their work, PSM construction is seen as refinement of competence theories. A competence theory expresses the relation between input and output of a task. This process is seen as consisting of three steps: 1. Specification of the problem-space and of the requirements for the solution.
Reference: [Wirth, 1983] <author> N. Wirth. </author> <title> Program development by stepwise refinement. </title> <journal> Communications of the ACM, </journal> <volume> 26(1), </volume> <year> 1983. </year> <month> 36 </month>
Reference-contexts: In the case of KBS the efficiency aspect already is an important issue during the analysis and specification process. Therefore, ideas used for program development in software engineering can be applied for specifying efficient problem solver for computational hard problems. <ref> [Wirth, 1983] </ref> describes program development as a process of stepwise refinement. 11 He uses the development of a program for 8-Queens problem as example. As in our paper he starts with a variant of generate & test which can achieve the functionality in principle but not in practice. <p> As in our paper he starts with a variant of generate & test which can achieve the functionality in principle but not in practice. More efficient versions are achieved by stepwise refinement. "In each step a given task is broken up into a number of subtasks" <ref> [Wirth, 1983] </ref> or in other words: "In each step, one or several instructions of the given program are decomposed into more detailed instructions." [Wirth, 1983]. Having lots in common with this approach the main differences to our approach lie mainly in two aspects. <p> More efficient versions are achieved by stepwise refinement. "In each step a given task is broken up into a number of subtasks" <ref> [Wirth, 1983] </ref> or in other words: "In each step, one or several instructions of the given program are decomposed into more detailed instructions." [Wirth, 1983]. Having lots in common with this approach the main differences to our approach lie mainly in two aspects. First, we view the development process of efficient problem solvers not as a process of stepwise refinement of its sub-steps but of its assumptions.
References-found: 67

