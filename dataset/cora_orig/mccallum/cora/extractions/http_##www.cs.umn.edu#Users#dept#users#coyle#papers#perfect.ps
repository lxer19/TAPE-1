URL: http://www.cs.umn.edu/Users/dept/users/coyle/papers/perfect.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/coyle/papers/
Root-URL: http://www.cs.umn.edu
Title: Perfect Allocation Methods for Spatial Queries in Parallel Disk Systems.  
Author: Shashi Shekhar Mark Coyle 
Address: Minneapolis, MN 55414  
Affiliation: Computer Science Department University of Minnesota  
Abstract: A disk-allocation method assigns a disk-id to each unit of spatial data. Allocating spatial data over multiple disks to distribute the I/O cost of query processing uniformly over available disks can tremendously speed up the processing. An allocation method is called perfect for a query set if it balances the I/O load on each disk in processing any query in a query set. Some of the interesting query sets in spatial databases include path queries and orthogonal range queries. We provide a perfect allocation method for all path and orthogonal range queries for five and fewer disks. A non-intuitive result in this paper shows that there is no perfect allocation method for the set of orthogonal range queries for more than five disks. We examine the effectiveness of Latin Square and Linear allocation methods for the interesting query sets in this context. We show that Latin Square allocation methods can be perfect for a class of orthogonal range queries and linear allocation method can be perfect on a class of path queries as well as many classes of orthogonal range queries. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Kemper and M. Wallrath, </author> <title> An Analysis of Geometric Modelling in Databases, </title> <journal> Computing Surveys 19(1) pp. </journal> <month> 47-91 (March </month> <year> 1987). </year>
Reference-contexts: 1. Introduction Spatial databases are designed for a wide variety of observational spatial data such as cartography data <ref> [1] </ref>. The last decade has seen great progress in the design of spatial databases and access methods [2-10] for single disk systems. However, designing a multi-disk database to process general spatial queries is not well explored.
Reference: 2. <author> A. Buchmann, O. Guenther, T.R. Smith, and Y.-F. Wang (Eds),, </author> <title> Design and Implementation of Large Spatial Databases,, </title> <booktitle> Proc. 1st Symp. Design and Implementation of Large Spatial Database (SSD'90), </booktitle> <publisher> Springer-Verlag, </publisher> <address> (1990.). Santa Barbara, CA. </address>
Reference: 3. <author> R.A. Finkel and J.L. Bentley, </author> <title> Quad trees -- a data structure for retrieval on composite keys, </title> <journal> Acta Inf. </journal> <pages> 4 pp. 1-9. </pages> <year> (1974). </year>
Reference: 4. <author> O. Guenther, </author> <title> The design of the cell tree: An object-oriented index structure for geometric databases, </title> <booktitle> Proc. 5th Int. Conf. on Data Engineering, </booktitle> <month> (Feb. </month> <year> 1989). </year>
Reference: 5. <author> K. Hinrichs, </author> <title> The grid file system: implementation and case studies for applications, Dissertation No. </title> <type> 7734, </type> <institution> Eidgenossische Technische Hochschule (ETH), </institution> <address> Zurich, </address> <year> (1985). </year>
Reference: 6. <author> D.B. Lomet and B. Salzberg, </author> <title> The hB-Tree: A multiattribute Indexing Method with good guaranteed performance, </title> <journal> ACM Transactions on Database Systems 15(4)(Dec. 1990.). </journal>
Reference: 7. <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proc. SIGMOD International Conf on Management of Data, </booktitle> <pages> pp. 47-57 ACM, </pages> <year> (1984). </year>
Reference: 8. <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <title> The R+-Tree: A Dynamic Index for Multi-Dimensional Objects, </title> <booktitle> Proc 13th International Conf on Very Large Data Bases, </booktitle> <pages> pp. 507-518. </pages> <year> (1987). </year>
Reference: 9. <author> J.T. Robinson, </author> <title> The K-D-B-tree: a Search Structure for large multidimensional dynamic indexes, </title> <booktitle> Proc. SIG-MOD, </booktitle> <pages> pp. 10-18. </pages> <publisher> ACM, </publisher> <year> (1981). </year> <month> - 21 </month> - 
Reference: 10. <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik, </author> <title> The Grid File: An Adaptable, Symmetric Multi-Key File Structure, </title> <journal> ACM Transactions on Database Systems 9(1) pp. </journal> <pages> 38-71. </pages> <year> (1984). </year>
Reference-contexts: Cell size may be chosen on the basis of the capacity of disk blocks and the data contained in each cell may be mapped to distinct disk blocks. For nonuniform distributions, multiple cells may share a disk block <ref> [10] </ref>. - 5 - Queries on multi-dimensional data represent various subsets of the data. To process a query, the database manager has to retrieve the data points continued inside each cell which intersects with the query. Two queries are similar if these intersect the same set of cells.
Reference: 11. <author> I. Kamel and C. Faloutsos, </author> <title> Parallel R-Trees, </title> <booktitle> Intl. Conf. on Management of Data, ACM SIGMOD, </booktitle> <year> (1992). </year>
Reference-contexts: The allocation method should be designed to satisfy the goals of a database manager in processing various queries. One of the important goals of the database is to maximize throughput. This imposes two constraints on the allocation methods, namely, fairness and efficiency <ref> [11] </ref>. A fair allocation method distributes the cells qualifying under the same query as uniformly among the various disks as possible. An efficient allocation method imposes a light load on the database system by activating as few disks as possible for small queries. <p> The allocation method should be designed to satisfy the goals of a database manager in processing various queries. One of the important goals of the database is to maximize throughput, which imposes two constraints on the allocation methods, namely, fairness and efficiency <ref> [11] </ref>. A fair allocation method distributes the cells qualifying under the same query as uniformly among the various disks as possible. An efficient allocation method imposes a light load on the database system by activating as few disks as possible for small queries.
Reference: 12. <author> K. Salem and H. Garcia-Molina, </author> <title> Disk Atriping, </title> <booktitle> IEEE Conference on Data Engineering, </booktitle> <year> (1986). </year>
Reference-contexts: Disk striping [12-14] has been studied extensively as a declustering method in the context of disk interleaving and improving I/O bandwidth. Disk striping is a general purpose facility for achieving parallel data I/O and as a fault tolerance method <ref> [12] </ref>. Given a striping unit (e.g. the number of consecutive units of data allocated to each disk) the data is partioned among the disks. <p> Range queries over this dimension may be processed efficiently, but many range query over the other dimension may exhibit poor speed-ups. We note that the allocation methods of disk striping at bit or byte level <ref> [12] </ref> is fair but not efficient for one-dimensional data. Furthermore, the choice of data unit imposes a hard limit on the maximum possible parallelism via striping. Multi-disk systems with N disks provide an opportunity of N-way parallelism in disk operations. <p> Therefore, it is important to classify the interesting query sets in an application domain to determine if an allocation method is perfect for the interesting query set. Interesting query sets on traditional 1-dimensional data has been explored in <ref> [12] </ref>. We examining interesting query sets on 2-dimensional data typical of geographical applications. The queries on Multi dimensional data can be classified into three classes: point query, range query and path query.
Reference: 13. <author> M. Y. Kim, </author> <title> Synchronized disk interleaving, </title> <journal> Trans. on COmputers 35(11)IEEE, </journal> <year> (1986). </year>
Reference-contexts: This parallelism can provide up to N-times speedups in processing large spatial queries. Several methods of declustering data over multiple disks have been proposed using the values of the key attributes or coordinate space of embedding <ref> [13, 15-17] </ref>. The declustering based on key-values include hashed-declustering, round-robin, and parallel R-Trees11, 18]. The coordinate space partioning techniques include the Disk Modulo method [16] and the Coordinate Modulo Declustering Method (CMD)[15].
Reference: 14. <author> P.M. Chen and D.A. Patterson, </author> <title> Maximizing performance in a Striped Disk Array, </title> <booktitle> IEEE Conference on Computer Architecture, </booktitle> <year> (1990). </year>
Reference: 15. <author> J. Li, J. Srivastava, and D. Rotem, CMD: </author> <title> A Multidimensional Declustering Method for Parallel Database Systems, </title> <type> Tech. Report, </type> <institution> Univ. of Minnesota, </institution> <year> (1991). </year>
Reference: 16. <author> H. C. Du, </author> <title> Disk allocation for product files on multiple disk systems, </title> <journal> Trans. on Database Systems 7ACM, </journal> <month> (March </month> <year> 1982). </year>
Reference-contexts: Several methods of declustering data over multiple disks have been proposed using the values of the key attributes or coordinate space of embedding [13, 15-17]. The declustering based on key-values include hashed-declustering, round-robin, and parallel R-Trees11, 18]. The coordinate space partioning techniques include the Disk Modulo method <ref> [16] </ref> and the Coordinate Modulo Declustering Method (CMD)[15]. In CMD, data along the two dimensions is distributed to the multiple disks by the formula Disk-Id (x,y) = (x + y) Mod N, where N is the number of disks.
Reference: 17. <author> C. T. Wu and W. A. Burkmard, </author> <title> Associative Searching in Multiple Storage Units, </title> <journal> Trans. on Database Systems 12ACM, </journal> <month> (January </month> <year> 1987). </year>
Reference: 18. <author> Teradata Corporation, </author> <title> DBC/1012 Data Base Computer Concepts and Facilities, Terradata Document c02-001-05, </title> <year> (1988). </year>
References-found: 18

