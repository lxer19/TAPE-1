URL: http://www.cis.ohio-state.edu/~kurzion/papers/graphicon96.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~kurzion/resume.html
Root-URL: 
Author: Yair Kurzion and Roni Yagel 
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Since we submit this paper electronically, we made our color images and MPEG animations available on the web at http://www.cis.ohio-state.edu/~kurzion/graficon or via FTP from ftp.cis.ohio-state.edu under /pub/yagel/Images/Deectors. Continuous and Discontinuous Deformation using Ray Deectors Abstract. In this paper we introduce a new approach to the deformation of surface and raster models in two and three dimensions. Rather then deforming the objects in the model, we deform the rays used to render the scene. We introduce ray deectors: a new set of operators for modelling both continuous and discontinuous deformations. These operators bend rays traveling through their field of gravity in a view-independent fashion. Images generated by these curved rays give the impression of a deformed space. Our approach provides an intuitive modelling tool for deformation. Unlike previous methods that deform all the objects in the scene, our approach deforms only those parts of the model that contribute to the final image. When deforming volumes we avoid resampling the volume during the deformation process. In addition, using deectors, our approach can deform any object type that can be rendered by a ray casting algorithm, providing a unified solution to space deformation of both surface and volume primitives.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Barr A., </author> <title> Global and Local Deformations of Solid Primitives, </title> <booktitle> Proceedings of SIGGRAPH 84, Computer Graphics, </booktitle> <volume> 18(3) </volume> <pages> 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Intersecting these curves with the scene objects creates an illusion of a deformed scene. The objects residing in the deformed space now appear to have changed their shape, although they have not been modified in any way. Barr <ref> [1] </ref> introduced the deformation of sight rays as a way to achieve the deformation of solid primitives. He used the inverse of one global deformation transformation in order to deform sight rays. Expressing a complex deformation, such as sculpting, in global terms is almost impossible computationally.
Reference: 2. <author> Barr A., </author> <title> Ray Tracing Deformed Surfaces, </title> <booktitle> Proceedings of SIGGRAPH 86, Computer Graphics, </booktitle> <volume> 20(4) </volume> <pages> 287-296, </pages> <month> August </month> <year> 1986. </year>
Reference: 3. <author> Bier T. and Neely S., </author> <title> Feature Based Image Metamorphosis, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 35-42, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) [5]. Although existing methods for specifying object deformations (e.g., grids [15], vectors <ref> [3] </ref>) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> In two dimensions we can use ray deectors as a modeling primitive for image warping. Unlike existing methods, deector based deformation is much more intuitive as a modeling tool. Existing methods deform the space somewhat indirectly by moving grid points [15] or vectors <ref> [3] </ref>, an extremely laborious operation in 3D. Our approach, on the other hand, simulates the process of creating a sculpture by deforming an initial set of objects in space using a sequence of local deformations. Our technique makes it very easy to compose deformations.
Reference: 4. <author> Cabral B., Cam N., and Foran J., </author> <title> Accelerated Volume Rendering and Tomographic Reconstruction Using Texture Mapping Hardware, </title> <booktitle> Proceedings of 1994 Symposium on Volume Visualization, </booktitle> <month> October </month> <year> 1994, </year> <pages> pp. 91-98 </pages>
Reference-contexts: In volume graphics, we wish to improve our sampling technique by using a mip-mapped version of the volume [14]. The ray deection scheme we have described lends itself very well to hardware volume rendering using 3D texture maps <ref> [4] </ref>. Texture mapping hardware allows mapping of 3D rasters on polygons. These 3D rasters (called 3D texture maps) are mapped on polygons in 3D space using either zero order or first order interpolation.
Reference: 5. <author> Glassner, A. S. (ed.), </author> <title> An Introduction to Ray Tracing, </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: After computing the mapping of all the control points, one is free to render the new model with the most appropriate rendering algorithm. For example, if one employs a ray casting (or ray tracing) algorithm <ref> [5] </ref>, then a collection of rays is cast, from the eye, through each screen pixel, into the scene. Traditionally, one develops an algorithm to compute the deformation operation for each object type. Obviously, one cannot use a volume deformation algorithm [7], for example, to deform parametric surfaces. <p> This approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) <ref> [5] </ref>. Although existing methods for specifying object deformations (e.g., grids [15], vectors [3]) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> When deforming geometric primitives, we compute the intersection of the deformed ray with the geometry as in traditional ray tracing <ref> [5] </ref>, when deforming 2D rasters we sample at points along the deformed scan lines, and when deforming 3D rasters, we sample along rays as in traditional volume rendering [9]. 8.1 Determining Ray Trajectory When shooting rays we have to distinguish between two cases: either a ray does not intersect any field
Reference: 6. <author> He T., Wang S., and Kaufman A., </author> <title> Wavelet-Based Volume Morphing, </title> <booktitle> Proceedings of Visualization94, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994, </year> <pages> pp. 85-92. </pages>
Reference: 7. <author> Hughes J.F., </author> <title> Scheduled Fourier Volume Morphing, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 43-46, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Traditionally, one develops an algorithm to compute the deformation operation for each object type. Obviously, one cannot use a volume deformation algorithm <ref> [7] </ref>, for example, to deform parametric surfaces. The separation between the modeling phase and rendering phase requires one to deform the whole model even those parts that do not contribute to the final image. Our approach is based on the idea of space deformation.
Reference: 8. <author> Isaacs P.M. and Cohen M.F., </author> <title> Controlling Dynamic Simulation with Kinematic Constrains, Behavior Functions and Inverse Dynamics, </title> <booktitle> Proceedings of SIGGRAPH 87, Computer Graphics, </booktitle> <volume> 21(4) </volume> <pages> 215-224, </pages> <month> July </month> <year> 1987. </year>
Reference: 9. <author> Kaufman A. (ed.), </author> <title> Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: When deforming geometric primitives, we compute the intersection of the deformed ray with the geometry as in traditional ray tracing [5], when deforming 2D rasters we sample at points along the deformed scan lines, and when deforming 3D rasters, we sample along rays as in traditional volume rendering <ref> [9] </ref>. 8.1 Determining Ray Trajectory When shooting rays we have to distinguish between two cases: either a ray does not intersect any field of gravity, or it intersects at least one such field of gravity.
Reference: 10. <author> Kent J.R., Carlson W.E., and Parent R., </author> <title> Shape Transformations for Polyhedral Objects, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 47-54, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: P 0 P 2 c 1 G 3 Fig. 8. Activating a discontinuous deector on the MRI head scan to the left we can sepa rate the lips and peek into the mouth. deformation algorithms <ref> [10] </ref>. The smaller the pieces are, the smoother the resulting deformation is. In volume graphics, we take equidistant steps along each sight ray and sample the volume contents at each step. When stepping along linear segments of a ray, we use standard volume ray tracing techniques. <p> The consecutive activation of two deectors with identical gravity fields and opposite direction vectors does not result in an identity transform. On the other hand, our approach exhibits attractive characteristics. When deforming polygons, traditional techniques break them down into a mesh of smaller polygons and deform their vertices <ref> [10] </ref>. Many of the smaller polygons may not contribute to the final image because they are hidden by other polygons in space. Moreover, polygons that lie farther away from the eye need not be subdivided into as many polygons as the closer polygons.
Reference: 11. <author> Kurzion Y., and Yagel R., </author> <title> Space Deformation using Ray Deectors, </title> <booktitle> 6th Eurographics Workshop on Rendering 95, </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 21-32. </pages>
Reference: 12. <author> Sederberg, T.W. and Greenwood E., </author> <title> A Physically Based Approach to 2-D Shape Blending, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 25-34, </pages> <month> July </month> <year> 1992. </year>
Reference: 13. <author> Terzopoulos D., Platt J., Barr A., and Fleischer K., </author> <title> Elastically Deformable Models, </title> <booktitle> Proceedings of SIGGRAPH 87, Computer Graphics, </booktitle> <volume> 21(4) </volume> <pages> 205-214, </pages> <month> July </month> <year> 1987. </year>
Reference: 14. <editor> Williams L., Pyramidal Parametrics, </editor> <booktitle> Proceedings of SIGGRAPH 83, Computer Graphics, </booktitle> <volume> 17(3) </volume> <pages> 1-10, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: In volume graphics, we wish to improve our sampling technique by using a mip-mapped version of the volume <ref> [14] </ref>. The ray deection scheme we have described lends itself very well to hardware volume rendering using 3D texture maps [4]. Texture mapping hardware allows mapping of 3D rasters on polygons.
Reference: 15. <author> Wolberg G., </author> <title> Digital Image Warping, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: This approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) [5]. Although existing methods for specifying object deformations (e.g., grids <ref> [15] </ref>, vectors [3]) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> In two dimensions we can use ray deectors as a modeling primitive for image warping. Unlike existing methods, deector based deformation is much more intuitive as a modeling tool. Existing methods deform the space somewhat indirectly by moving grid points <ref> [15] </ref> or vectors [3], an extremely laborious operation in 3D. Our approach, on the other hand, simulates the process of creating a sculpture by deforming an initial set of objects in space using a sequence of local deformations. Our technique makes it very easy to compose deformations.
References-found: 15

