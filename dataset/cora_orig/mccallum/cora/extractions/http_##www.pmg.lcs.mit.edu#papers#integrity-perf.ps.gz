URL: http://www.pmg.lcs.mit.edu/papers/integrity-perf.ps.gz
Refering-URL: http://www.pmg.lcs.mit.edu/Thor-papers.html
Root-URL: 
Email: andru@lcs.mit.edu  
Title: Resolving the Integrity/Performance Conflict  
Author: Andrew C. Myers 
Affiliation: MIT Laboratory for Computer Science  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Atkinson, F. Bancilhon, D. DeWitt, K. Dit-trich, D. Maier, and S. Zdonik. </author> <title> The object-oriented database system manifesto. </title> <editor> In J. Kim, J.M Nicholas, and S. Nishio, editors, </editor> <booktitle> Proc. of the First International DOOD Conference, </booktitle> <address> Ky-oto, Japan, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: The limitation of most current databases lies in another domain the simplicity of the data model. In a relational database system, there is no satisfactory way to encapsulate objects and control the ways that they can be accessed or modified <ref> [1] </ref>. This means that object integrity cannot be provided at a sufficiently rich semantic level to allow arbitrary and fine-grained sharing of data with other users. 2 Synthesis: Thor Thor unifies these three approaches to persistent data.
Reference: [2] <author> Paul Butterworth, Allen Otis, and Jacob Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Other work in progress will minimize the impact of these features when in use. Thor is similar in goals to other object-oriented databases, and is perhaps most like GemStone in overall design <ref> [2] </ref>. However, Thor's internal language has a static (though flexible) type system that supports high-performance computation. Because the internal language is fast, the safe-computation model is workable.
Reference: [3] <author> C. Chambers and D. Ungar. </author> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented language. </title> <booktitle> In Proceedings of the SIGPLAN '89 Conference on Programming Languages and Implementation, </booktitle> <pages> pages 146-160. </pages> <publisher> ACM, </publisher> <month> July </month> <year> 1989. </year>
Reference-contexts: Slowness kills: application programmers are notorious in their distaste for slow programming languages. Making Theta fast is critical to this computational model. Speed will be achieved partly by using an extension of the specialized compilation techniques pioneered by SELF <ref> [3] </ref>. General-case code is compiled into fast, specialized versions that are selected dynamically, based on the state of the Theta run-time. Language features like object-oriented dispatch, transactions, persistent objects, and schema evolution exact a minimal penalty when they are not being used.
Reference: [4] <author> Charles Lamb, Gordon Landis, Jack Oren-stein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: However, Thor's internal language has a static (though flexible) type system that supports high-performance computation. Because the internal language is fast, the safe-computation model is workable. Object-oriented databases such as ObjectStore <ref> [4] </ref> sacrifice some data integrity and schema evolution flexibility to provide high performance and orthogonal persistence. 3 Summary Future applications will require integrity of complex, persistent data in the face of hardware and program failures. Thor offers a computational model that ensures data integrity without sacrificing expressiveness or performance.
Reference: [5] <author> B.W. Lampson. </author> <title> Hints for computer system design. </title> <journal> IEEE Software, </journal> <month> January </month> <year> 1984. </year>
Reference-contexts: By contrast, ordinary operating systems only allow extension of the kernel by recompiling and rebooting the system and no guarantees are made about the comprehensibility of the old persistent data in the new kernel. Spy <ref> [5] </ref>, a system-monitoring facility, allowed code to be placed into the kernel, but for safety reasons the code could only observe and could not change any behavior. Like operating systems, Thor has a protection boundary that is potentially expensive to cross.
Reference: [6] <author> Barbara Liskov, Mark Day, and Liuba Shrira. </author> <title> Distributed object management in Thor. </title> <editor> In M. Tamer Ozsu, Umesh Dayal, and Patrick Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Califor-nia, </address> <year> 1993. </year>
References-found: 6

