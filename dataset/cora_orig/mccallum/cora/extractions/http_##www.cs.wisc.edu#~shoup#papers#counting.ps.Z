URL: http://www.cs.wisc.edu/~shoup/papers/counting.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Email: email: vmueller@cs.uni-sb.de  
Title: Counting the number of points on elliptic curves over finite fields of characteristic greater than three  
Author: Frank Lehmann, Markus Maurer Volker Muller, Victor Shoup 
Address: Postfach 1150 D-66041 Saarbrucken Germany  
Affiliation: FB 14 Informatik Universitat des Saarlandes  
Abstract: We present a variant of an algorithm of Oliver Atkin for counting the number of points on an elliptic curve over a finite field. We describe an implementation of this algorithm for prime fields. We report on the use of this implementation to count the the number points on a curve over F p , where p is a 210-digit prime. 
Abstract-found: 1
Intro-found: 1
Reference: [At91] <author> A.O.L. Atkin: </author> <title> The number of points on an elliptic curve modulo a prime, </title> <type> unpublished manuscript 9 </type>
Reference-contexts: We present a short description of an variant of an algorithm of Oliver Atkin for counting points on elliptic curves over finite prime fields <ref> [At91] </ref>. We also describe an implementation of this algorithm and report on its effectiveness. With this implementation we were able to compute the group order of a curve defined over F p , where p is a 210-digit prime.
Reference: [BuMu91] <author> J. Buchmann, V. Muller: </author> <title> Computing the number of points on an elliptic curve over finite fields, </title> <booktitle> Proceedings of ISSAC 1991, </booktitle> <pages> 179-182 </pages>
Reference-contexts: The set E (K) has a group structure given by the well-known "tangent and chord method," with O acting as the identity element. The sum of two given points can be computed by simple formulas (see, e.g., <ref> [BuMu91] </ref>). We will describe an algorithm that takes as input elements a and b defining an elliptic curve E as in (1), and produces as output the order of the group E (F q ). An important tool for solving this problem is the Frobenius Endomorphism for E. <p> For 1 j &lt; l we have to check whether x q 2 j (X) j1 (X) j+1 (X) mod f l (X) 4 (X 3 + aX + b) (q+1)=2 3 j1 (X) j2 (X) 2 holds, where j (X) is the reduced j-th division polynomial (compare <ref> [BuMu91] </ref>). For j = ff both equations are true and we have found ff.
Reference: [Ko86] <author> N. Koblitz: </author> <title> Elliptic curve cryptosystems, </title> <journal> Mathematics of Computation, </journal> <volume> 48 (1987), </volume> <pages> 203-209 </pages>
Reference-contexts: This problem is not only very interesting for number theorists but has recently gained a lot of attention among cryptographers. The use of elliptic curves in public key cryptography was suggested by Koblitz <ref> [Ko86] </ref> and Miller [Mi86]. The security of their elliptic curve cryptosystems is based on the intractability of the problem of computing discrete logarithms in the elliptic curve group.
Reference: [Mi86] <author> V. Miller: </author> <title> Uses of elliptic curves in cryptography, </title> <booktitle> Advances in Cryptology: Proceedings of Crypto '85, Lecture Notes in Computer Science, 218 (1986), </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 417-426 </pages>
Reference-contexts: This problem is not only very interesting for number theorists but has recently gained a lot of attention among cryptographers. The use of elliptic curves in public key cryptography was suggested by Koblitz [Ko86] and Miller <ref> [Mi86] </ref>. The security of their elliptic curve cryptosystems is based on the intractability of the problem of computing discrete logarithms in the elliptic curve group.
Reference: [Mu94] <author> V. Muller: </author> <title> Die Berechnung der Punktanzahl elliptischer Kurven uber endlichen Korpern der Charakteristik groer 3, </title> <type> Thesis, </type> <note> to be published </note>
Reference-contexts: Background on the theory of elliptic curves can be found in [Si86]; a detailed description of the algorithm (including proofs of the theorems used) is given in <ref> [Mu94] </ref>. The implementation makes use of a library of routines for efficient computations with large polynomials over finite fields described in [Sho94]. 2 Elliptic Curves and the Frobenius Endomorphism Let F q be the finite field with q elements, and let p be its characteristic. <p> More details can be found in <ref> [Mu94] </ref>. Thus we can assume that the assumptions of Theorem 3 are fulfilled. So to compute d i , we have to find minimal extensions of F q which contain the j-invariants j=C i . <p> Let s 2 N be minimal such that v = (s (l 1))=12 2 N and define f (t ) = (t ) 2s Using the function f (t ) we can prove the following theorem (see <ref> [Mu94] </ref>). Theorem 5 There exist coefficients a r;k 2 Z such that P l+1 P v elliptic curve E over F q the polynomial G l (X) = r=0 k=0 has the same splitting type as the l-th modular polynomial l (X; j (E)) for F q . <p> We can efficiently compute f l (X) with the help of one root of the modular equation. This computation is somewhat complicated; a detailed description can be found in <ref> [Mu94] </ref>. Assume that we know f l (X). <p> In practice the result is equal to the desired group order, which can be probabilistically checked by using a few more random points. Moreover there is an algorithm which really proves the correctness of the group order (see <ref> [Mu94] </ref>). 7 Computational results and implementation details We have recently implemented this algorithm and used it to compute the group order of a curve defined over F p , where p is a 210-digit prime.
Reference: [Mo87] <author> P. L. Montgomery: </author> <title> Speeding the Pollard and Elliptic Curve Methods for Factorization, </title> <journal> Mathematics of Computation, </journal> <volume> 48 (1987), 243 - 264 </volume>
Reference-contexts: The most time consuming part of point addition is the inversion of some field element. We are doing several steps in this part in parallel so that we can use a trick of Montgomery which reduces the number of inversions on the cost of a few multiplications (see <ref> [Mo87] </ref>).
Reference: [Od86] <author> A. Odlyzko: </author> <title> Discrete logarithms and their cryptographic significance, </title> <booktitle> Advances in Cryptology: Proceedings of Eurocrypt '84, Lecture Notes in Computer Science, 209 (1985), </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 224-314 </pages>
Reference-contexts: The security of their elliptic curve cryptosystems is based on the intractability of the problem of computing discrete logarithms in the elliptic curve group. The best algorithms known for solving this problem for arbitrary elliptic curves are the exponential square root attacks <ref> [Od86] </ref> which have running time proportional to the largest prime factor dividing the group order. Consequently, in order to guarantee the security of the system it is necessary to find this group order and its prime factorization.
Reference: [Li93] <author> R. Roth, Th. Setz: </author> <title> LiPS: a system for distributed processing on workstations, </title> <institution> University of Saarland, </institution> <year> 1993 </year>
Reference-contexts: Individual modular equations are relatively expensive to compute. For example, in our implementation, we used 155 MIPS-days to compute the modular polynomial for l = 503. It is fairly easy to distribute much of the computation over a network of workstations. We have done so using LiPS <ref> [Li93] </ref>. This proved quite effective. We now give some details of the implementation. 7.1 Computing Modular Polynomials To compute the l-th modular polynomial, we compute it modulo several small primes, and then use Chinese remaindering to get the coefficients over Z.
Reference: [Scho85] <author> R. Schoof: </author> <title> Elliptic curves over finite fields and the computation of square roots mod p, </title> <journal> Mathematics of Computation, </journal> <volume> 44 (1985), </volume> <pages> 483-494 </pages>
Reference-contexts: Consequently, in order to guarantee the security of the system it is necessary to find this group order and its prime factorization. Although Schoof <ref> [Scho85] </ref> proved that the cardinality of an elliptic curve group over a finite field can be computed in polynomial time, his algorithm is extremely inefficient in practice. <p> Schoof showed in <ref> [Scho85] </ref> how to compute c mod l exactly with the help of (l 2 1)=2-degree polynomials. We will make use of a polynomial of degree l + 1, but in general we are not able to compute c mod l exactly.
Reference: [Sho94] <author> V. Shoup: </author> <title> Practical computations with large polynomials over finite fields, </title> <note> in preparation (1994). </note>
Reference-contexts: Background on the theory of elliptic curves can be found in [Si86]; a detailed description of the algorithm (including proofs of the theorems used) is given in [Mu94]. The implementation makes use of a library of routines for efficient computations with large polynomials over finite fields described in <ref> [Sho94] </ref>. 2 Elliptic Curves and the Frobenius Endomorphism Let F q be the finite field with q elements, and let p be its characteristic. We shall assume that p &gt; 3. <p> We also remark that very good performance for these algorithms was obtained, despite the fact that the algorithms were implemented in C and are very portable. Details on these algorithms and their implementation can be found in <ref> [Sho94] </ref>. The computation for different primes l was distributed over a network of workstations. 7.3 Baby step/giant step computation Several tricks were used to speed up the baby step/giant step computation in section 6. 1.
Reference: [Si86] <author> J. Silverman: </author> <title> The arithmetic of elliptic curves, </title> <publisher> Springer-Verlag, </publisher> <year> 1986 </year> <month> 10 </month>
Reference-contexts: The total time used was fl Appeared in Proc. 1st Algorithmic Number Theory Symposium (ANTS), pp. 60-70, 1994. 1 approximately 186 MIPS-days (this time does not include the time for precomputations that are independent of the input). Background on the theory of elliptic curves can be found in <ref> [Si86] </ref>; a detailed description of the algorithm (including proofs of the theorems used) is given in [Mu94]. <p> There is also a notion of modular polynomials for elliptic curves defined over C, the field of complex numbers (see <ref> [Si86] </ref>). We recall this briefly, and mention how it is related to the notion of modular polynomials over finite fields. An elliptic curve defined over C is isomorphic to C=L, where L = Z + Z t (=(t ) &gt; 0) is a two-dimensional lattice in C.
References-found: 11

