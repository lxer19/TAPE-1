URL: http://ftp.cs.yale.edu/pub/marios/realistic.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/marios/
Root-URL: http://www.cs.yale.edu
Title: Efficient Retiming With Realistic Delay Models  
Author: Kumar N. Lalgudi Marios C. Papaefthymiou 
Address: New Haven, CT 06520  
Affiliation: Department of Electrical Engineering Yale University  
Abstract: The existing retiming algorithms have limited practicality because they rely on simple delay models that neglect several timing issues that arise in logic design. In this paper, we consider the problem of retiming edge-triggered circuits with realistic delay models that handle load-dependent gate delays, register delays, interconnect delays, and clock skew. We show that the retiming problem can be formulated as a set of integer monotonic programming constraints, and we present a polynomial-time algorithm for solving these constraints. Our algorithm retimes any given edge-triggered circuit to achieve a specified clock period in O(V 3 F ) steps, where V is the number of logic gates in the circuit and F is bounded by the number of registers in the circuit. A straightforward extension of our algorithm determines a minimum clock period retiming in O(V 3 F lg V ) steps. For more general delay models that handle variable register delays, we show that the retiming problem can be formulated as an integer linear program that can be solved using general ILP techniques. Previous retiming algorithms for such comprehensive delay models relied on non-linear formulations and ran in worst-case exponential time using branch-and-bound techniques.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Dey, M. Potkonjak, and R. Roy. </author> <title> Exploiting hardware sharing in high-level synthesis for partial scan optimization. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE International Conference on CAD, </booktitle> <pages> pages 20-25, </pages> <month> November </month> <year> 1993. </year> <month> 12 </month>
Reference-contexts: Let us describe our experimental results in more detail. The circuit we experimented with was the 4 th order IIR cascade filter shown in Figure 7 (a). The graph representation of this circuit was obtained from the Control Data Flow Graph in <ref> [1] </ref>. For this circuit, we assumed that multipliers by a constant have smaller delay than adders, since they can be efficiently implemented by hardwired shifts. The original circuit in Figure 7 (a) can be clocked with a period of 15 units.
Reference: [2] <author> J. P. Fishburn. </author> <title> Clock skew optimization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(7) </volume> <pages> 945-951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Clock skew has been investigated in the context of synchronous circuits optimization in <ref> [2] </ref>. In that paper, it has been suggested that clock skew could be linked to retiming. The integration of clock skew in the retiming process has been considered for edge-triggered circuits in [14] and for level-clocked circuits in [5].
Reference: [3] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: The retiming transformation optimizes synchronous circuits by relocating their storage elements without affecting their functionality. Retiming has been extensively applied to optimize circuits for maximum speed of operation <ref> [3, 6, 7, 8, 12] </ref>. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models [4, 9]. <p> Moreover, our algorithm is guaranteed to run in polynomial time and to find a solution that minimally changes the original circuit. For our experiments we used Tim [10], a timing package that performs retiming under the simple delay model in <ref> [3] </ref>. The component delays in circuit were obtained using a few reasonable assumptions. Specifically, we assumed that bigger blocks have greater delays than smaller blocks. We also assumed that bigger blocks have a greater driving resistance, and they consequently lead to larger values of t left on their fanout edges. <p> The original circuit in Figure 7 (a) can be clocked with a period of 15 units. When we optimally retime the original circuit for minimum clock period using the simple delay model from <ref> [3] </ref>, we obtain the circuit shown in Figure 7 (b). In the simple delay model, this circuit can be clocked with a period of 11 units. The actual clock period of this circuit is 17 units, however.
Reference: [4] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: Retiming has been extensively applied to optimize circuits for maximum speed of operation [3, 6, 7, 8, 12]. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models <ref> [4, 9] </ref>. Although these delay models are sufficiently accurate for system-level timing optimization, they are inaccurate when applied at the gate level, because they do not take into account the effects of varying gate loads and clock skew on correct circuit timing. <p> Then the minimum clock period min (G r ) that can be achieved by retiming G equals D total (i; j) for some i; j 2 E. Proof. From Corollary 5 in <ref> [4] </ref>, we know that the clock period of a retimed synchronous circuit G 0 r with the simplistic delay model is given by D (u; v) for some vertex pair (u; v) in G 0 . <p> For every edge u e ! v 2 E, Inequality (8) can be written as r (v) + w (e) r (u) (14) which has the desired form since both sides of the inequality are monotonic. From the definition of W r in <ref> [4] </ref>, Inequality (11) can be written as r (v j ) r (v) + w (j) F (r (v) r (u) + W (u; v)) By moving the r (v) terms to the same side of the inequality we obtain F r (u) + r (v j ) + w (j)
Reference: [5] <author> B. Lockyear and C. Ebeling. </author> <title> The practical application of retiming to the design of high performance systems'. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE International Conference on CAD, </booktitle> <pages> pages 288-295, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: In that paper, it has been suggested that clock skew could be linked to retiming. The integration of clock skew in the retiming process has been considered for edge-triggered circuits in [14] and for level-clocked circuits in <ref> [5] </ref>. A comprehensive delay model for edge-triggered circuits which includes clock skew, variable register delays and setup times, and interconnect delays has been recently presented in [13]. In that paper, retiming is formulated as a non-linear problem that can be solved using branch-and-bound techniques which run in worst-case exponential time.
Reference: [6] <author> S. Malik, E. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and resynthesis: Optimizing sequential networks with combinational techniques. </title> <booktitle> In Proc. of the Hawaii International Conference on System Sciences, </booktitle> <year> 1990. </year>
Reference-contexts: The retiming transformation optimizes synchronous circuits by relocating their storage elements without affecting their functionality. Retiming has been extensively applied to optimize circuits for maximum speed of operation <ref> [3, 6, 7, 8, 12] </ref>. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models [4, 9].
Reference: [7] <author> G. D. </author> <title> Micheli. Synchronous logic synthesis: algorithms for cycle-time minimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10 </volume> <pages> 63-73, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The retiming transformation optimizes synchronous circuits by relocating their storage elements without affecting their functionality. Retiming has been extensively applied to optimize circuits for maximum speed of operation <ref> [3, 6, 7, 8, 12] </ref>. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models [4, 9].
Reference: [8] <author> M. C. Papaefthymiou. </author> <title> A Timing Analysis and Optimization System for Level-Clocked Circuitry. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1993. </year> <note> Available as MIT/LCS/TR-605. </note>
Reference-contexts: The retiming transformation optimizes synchronous circuits by relocating their storage elements without affecting their functionality. Retiming has been extensively applied to optimize circuits for maximum speed of operation <ref> [3, 6, 7, 8, 12] </ref>. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models [4, 9]. <p> We first describe the simple integer monotonic programming problem, an integer programming problem from <ref> [8] </ref>. <p> The simple integer monotonic programming problem admits a unique minimum solution x which can be determined by the generic procedure MonoRelax shown in Figure 4 <ref> [8] </ref>. We cast the retiming problem in the form of a simple integer monotonic programming problem and determine a provable upper bound on retiming values which constitute the minimum solution.
Reference: [9] <author> M. C. Papaefthymiou. </author> <title> Understanding retiming through maximum average-delay cycles. </title> <journal> Mathematical Systems Theory, </journal> <volume> 27 </volume> <pages> 65-84, </pages> <year> 1994. </year>
Reference-contexts: Retiming has been extensively applied to optimize circuits for maximum speed of operation [3, 6, 7, 8, 12]. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models <ref> [4, 9] </ref>. Although these delay models are sufficiently accurate for system-level timing optimization, they are inaccurate when applied at the gate level, because they do not take into account the effects of varying gate loads and clock skew on correct circuit timing.
Reference: [10] <author> M. C. Papaefthymiou and K. H. Randall. Tim: </author> <title> a timing package for two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1993. </year> <note> Also available as an MIT VLSI Memo 92-693, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: Our algorithm, however, is guaranteed to find the optimal circuit. Moreover, our algorithm is guaranteed to run in polynomial time and to find a solution that minimally changes the original circuit. For our experiments we used Tim <ref> [10] </ref>, a timing package that performs retiming under the simple delay model in [3]. The component delays in circuit were obtained using a few reasonable assumptions. Specifically, we assumed that bigger blocks have greater delays than smaller blocks.
Reference: [11] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Thus we expect our formulation to yield solutions faster than the branch-and-bound technique presented in [13]. It is also important to note that there exist many algorithms for integer linear programming, like Lenstra's algorithm <ref> [11] </ref>, whose worst-case running time is polynomial in the number of constraints and potentially exponential only in the number of variables.
Reference: [12] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming of circuits with single phase level-sensitive latches. </title> <booktitle> In International Conference on Computer Design, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: The retiming transformation optimizes synchronous circuits by relocating their storage elements without affecting their functionality. Retiming has been extensively applied to optimize circuits for maximum speed of operation <ref> [3, 6, 7, 8, 12] </ref>. For circuits with edge-triggered storage elements, researchers have presented polynomial-time retiming algorithms that assume relatively simple circuit delay models [4, 9].
Reference: [13] <author> T. Soyata and E. Friedman. </author> <title> Retiming with non-zero clock skew, variable register and interconnect delay. </title> <booktitle> In Digest of Technical Papers of the 1993 IEEE International Conference on CAD, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: The integration of clock skew in the retiming process has been considered for edge-triggered circuits in [14] and for level-clocked circuits in [5]. A comprehensive delay model for edge-triggered circuits which includes clock skew, variable register delays and setup times, and interconnect delays has been recently presented in <ref> [13] </ref>. In that paper, retiming is formulated as a non-linear problem that can be solved using branch-and-bound techniques which run in worst-case exponential time. Our novel polynomial-time algorithm employs a circuit delay model that accounts for variable register setup times, interconnect delays and clock skew. <p> However, it brings the problem into a linear form which is a significant improvement over the non-linear formulation given in <ref> [13] </ref>. Even though integer linear programming is N P-complete, in many cases, linear programming techniques can be applied which are very fast in practice. Thus we expect our formulation to yield solutions faster than the branch-and-bound technique presented in [13]. <p> which is a significant improvement over the non-linear formulation given in <ref> [13] </ref>. Even though integer linear programming is N P-complete, in many cases, linear programming techniques can be applied which are very fast in practice. Thus we expect our formulation to yield solutions faster than the branch-and-bound technique presented in [13]. It is also important to note that there exist many algorithms for integer linear programming, like Lenstra's algorithm [11], whose worst-case running time is polynomial in the number of constraints and potentially exponential only in the number of variables.
Reference: [14] <author> T. Soyata, E. Friedman, and J. Mulligan. </author> <title> Integration of clock skew and register delays into a retiming algorithm. </title> <booktitle> In Proceedings of International Symposium on Circuits and Systems, </booktitle> <pages> pages 1483-1486, </pages> <month> May </month> <year> 1993. </year> <title> 13 circuit obtained by taking the realistic delay model into account. </title> <type> 14 </type>
Reference-contexts: Clock skew has been investigated in the context of synchronous circuits optimization in [2]. In that paper, it has been suggested that clock skew could be linked to retiming. The integration of clock skew in the retiming process has been considered for edge-triggered circuits in <ref> [14] </ref> and for level-clocked circuits in [5]. A comprehensive delay model for edge-triggered circuits which includes clock skew, variable register delays and setup times, and interconnect delays has been recently presented in [13]. <p> retiming, and we show how to compute an O (E 2 )-size set that is guaranteed to include the optimal clock period achievable by retiming a given circuit. 2.1 Delay model The delay model we employ adheres to the basics of the Register Electric Characteristics model that was proposed in <ref> [14] </ref>. Our model takes into account load-dependent gate delays, register setup times and propagation delays, clock skew, and interconnect delays.
References-found: 14

