URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p11final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: kjx@mri.mq.edu.au  
Title: Basic Relationship Patterns  
Author: James Noble 
Address: Sydney.  
Affiliation: MRI, School of MPCE, Macquarie University,  
Abstract: Relationships between objects are almost as important to designs as objects themselves. Most programming languages do not support relationships well, so programmers must implement relationships in terms of more primitive constructs. This paper presents five basic patterns which describe how objects can be used to model relationships within programs. By using these patterns, programs and designs can be made smaller, more flexible, and easier to understand and maintain.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kent Beck. </author> <title> Smalltalk Best Practice Patterns. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: Most collections implement one-to-many one-way relationships, although some, such as Smalltalk's Dictionaries, can implement many-to-many relationships. Related Patterns Pattern-Oriented Software Architecture [4] describes the collection-members variant of the Whole-Part pattern. Smalltalk Best Practice Patterns <ref> [1] </ref> includes a number of patterns about using Smalltalk's Collection Objects. 4 Active Value How do you design an important one-to-one relationship? Some one-to-one relationships are important in themselves, rather than simply connecting two objects. <p> Similarly, Smalltalk views and controllers are Mutual Friends, as are VisualWorks' VisualPart and CompositePart [19]. Related Patterns If the control flow across a relationship is primarily in one direction, you may be able to model the relationships as if it were a one-way relationship, and use Self Delegation <ref> [1] </ref> for access in the other direction. Composite [8] can use Mutual Friends to maintain a two-way relationship between containers and leaves.
Reference: [2] <author> Grady Booch. </author> <title> Object Oriented Analysis and Design with Applications. </title> <publisher> Benjamin Cummings, </publisher> <address> second edition, </address> <year> 1994. </year>
Reference-contexts: The following three patterns describe how one-to-one, one-to-many and two-way relationships can be modelled. The elementary content of these patterns should not surprise any object oriented software practitioner, and they can all be found in the general OO literature <ref> [25, 2, 21, 22] </ref>. Rather, these patterns attempt to record well known design and programming folklore, describing techniques to new programmers, and, for more experienced programmers, illustrating when particular techniques are appropriate. <p> These kinds of relationships embody important concepts and constraints from the programs' domain, and can require complex state or behaviour to implement. Complex relationships can be implemented directly using features of programming languages such as attributes (see Relationship As Attribute (1)), but this has several disadvantages <ref> [2, 21] </ref>. The relationship is dispersed among its participating objects | it cannot be easily identified within the program, and thus cannot be easily located or maintained. Participating objects are tightly coupled, so a change to the relationship necessitates a change to several of the participating objects. <p> Known Uses Collections are ubiquitous throughout object oriented programming. They are the most common kind of Relationship Object (2), and they form the core of many class libraries <ref> [2, 9, 16] </ref>. Most collections implement one-to-many one-way relationships, although some, such as Smalltalk's Dictionaries, can implement many-to-many relationships. Related Patterns Pattern-Oriented Software Architecture [4] describes the collection-members variant of the Whole-Part pattern.
Reference: [3] <author> Lorrie Boyd. </author> <title> Patterns of association objects in large scale business systems. </title> <booktitle> In Pattern Languages of Program Design, </booktitle> <volume> volume 3. </volume> <publisher> aw, </publisher> <year> 1997. </year>
Reference-contexts: Observer and Mediator [8] and Director [5] describe how Relationship Objects can coordinate or control the behaviour of their participating objects. Relationship Objects can also record supplementary information, such as the time span of the relationship <ref> [3] </ref>. Martin Fowler has described Relationship Objects in detail [6]. 3 Collection Object How do you design a one-to-many relationship? One-way one-to-many relationships are almost as common as one-way one-to-one relationships. For example, a standard insurance policy can be endorsed to deal with special situations.
Reference: [4] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture. </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference-contexts: They are the most common kind of Relationship Object (2), and they form the core of many class libraries [2, 9, 16]. Most collections implement one-to-many one-way relationships, although some, such as Smalltalk's Dictionaries, can implement many-to-many relationships. Related Patterns Pattern-Oriented Software Architecture <ref> [4] </ref> describes the collection-members variant of the Whole-Part pattern. Smalltalk Best Practice Patterns [1] includes a number of patterns about using Smalltalk's Collection Objects. 4 Active Value How do you design an important one-to-one relationship? Some one-to-one relationships are important in themselves, rather than simply connecting two objects.
Reference: [5] <author> Jens Coldewey. </author> <title> Decoupling of object-oriented systems: A collection of patterns. </title> <type> Technical report, </type> <institution> sd&m | software design & management GmbH, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: Related Patterns Relationship As Attribute (1) is a complementary pattern which describes how to represent simple one-to-one relationships efficiently. Observer and Mediator [8] and Director <ref> [5] </ref> describe how Relationship Objects can coordinate or control the behaviour of their participating objects. Relationship Objects can also record supplementary information, such as the time span of the relationship [3].
Reference: [6] <author> Martin Fowler. </author> <title> Analysis Patterns. </title> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: Observer and Mediator [8] and Director [5] describe how Relationship Objects can coordinate or control the behaviour of their participating objects. Relationship Objects can also record supplementary information, such as the time span of the relationship [3]. Martin Fowler has described Relationship Objects in detail <ref> [6] </ref>. 3 Collection Object How do you design a one-to-many relationship? One-way one-to-many relationships are almost as common as one-way one-to-one relationships. For example, a standard insurance policy can be endorsed to deal with special situations. <p> A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects [12, 18]. James Rumbaugh [22] and Martin Fowler <ref> [6] </ref>, amongst others, have described how two-way relationships can be split into mutual one-way relationships. Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker [15].
Reference: [7] <author> Bjorn N. Freeman-Benson. </author> <title> Converting an existing user interface to use constraints. </title> <booktitle> In Proc. ACM Symposium on User Interface Software and Technology (UIST), </booktitle> <year> 1993. </year>
Reference-contexts: Known Uses Active values were first provided as part of the language in LOOPS [23]. VisualWorks's ValueModel framework is based on this pattern [19]. In particular, the ValueHolder object is a generic Active Value. The Cooldraw <ref> [7] </ref>, Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8]. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks.
Reference: [8] <author> Erich Gamma, Richard Helm, Ralph E. Johnson, and John Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Related Patterns Relationship As Attribute (1) is a complementary pattern which describes how to represent simple one-to-one relationships efficiently. Observer and Mediator <ref> [8] </ref> and Director [5] describe how Relationship Objects can coordinate or control the behaviour of their participating objects. Relationship Objects can also record supplementary information, such as the time span of the relationship [3]. <p> A one-to-one relationship can be implemented using Relationship As Attribute (1). This requires that code to detect and handle changes in the relationship (i.e. assignments to the attribute) must be included in the object containing the attribute, and must be invoked whenever the attribute could have changed. Observer <ref> [8] </ref> can be used to notify dependent objects of any changes, but this requires code which detects and signals changes to be written especially for each attribute. This reduces the cohesion of the class containing the attributes, and increases that class's complexity. <p> The Active Value can detect when its value changes, and then act as the Subject in Observer <ref> [8] </ref> to update any dependent objects. Example The PolicyWindow can use Active Values to store the values of the entry fields | see Figure 6. Business rules for data validation can access the Active Values directly, rather than via the Policy Window. <p> VisualWorks's ValueModel framework is based on this pattern [19]. In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns <ref> [8] </ref>. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks. Observer [8] is often used to link Active Values to the objects which depend on the relationship. <p> The Cooldraw [7], Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns <ref> [8] </ref>. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks. Observer [8] is often used to link Active Values to the objects which depend on the relationship. <p> Related Patterns If the control flow across a relationship is primarily in one direction, you may be able to model the relationships as if it were a one-way relationship, and use Self Delegation [1] for access in the other direction. Composite <ref> [8] </ref> can use Mutual Friends to maintain a two-way relationship between containers and leaves. A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects [12, 18]. <p> Composite <ref> [8] </ref> can use Mutual Friends to maintain a two-way relationship between containers and leaves. A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects [12, 18]. James Rumbaugh [22] and Martin Fowler [6], amongst others, have described how two-way relationships can be split into mutual one-way relationships.
Reference: [9] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Collections and ValueHold-ers are specialised kinds of Relationship Objects (Active Value (4) and Collection Object (3) respectively). ObjectWorks introduced DependentsCollection objects to record and manage the relationship between an object and its dependents [19], where the earlier Smalltalk-80 implemented this relationship using a global dictionary <ref> [9] </ref>. Related Patterns Relationship As Attribute (1) is a complementary pattern which describes how to represent simple one-to-one relationships efficiently. Observer and Mediator [8] and Director [5] describe how Relationship Objects can coordinate or control the behaviour of their participating objects. <p> Known Uses Collections are ubiquitous throughout object oriented programming. They are the most common kind of Relationship Object (2), and they form the core of many class libraries <ref> [2, 9, 16] </ref>. Most collections implement one-to-many one-way relationships, although some, such as Smalltalk's Dictionaries, can implement many-to-many relationships. Related Patterns Pattern-Oriented Software Architecture [4] describes the collection-members variant of the Whole-Part pattern. <p> Known Uses The Smalltalk class hierarchy uses a two-way relationship between subclasses and superclasses. A class and its subclasses are Mutual Friends, with the superclass as the leader. Each class keeps a collection of it subclasses, and each subclass has a pointer to its class <ref> [9] </ref>. Similarly, Smalltalk views and controllers are Mutual Friends, as are VisualWorks' VisualPart and CompositePart [19].
Reference: [10] <author> Ian Graham, Julia Bischof, and Brian Henderson-Sellers. </author> <title> Associations considered a bad thing. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 9(9), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: Introducing Relationship Objects increases the number of objects in the program, which can increase memory footprint, and accessing objects indirectly via Relationship Objects can reduce execution efficiency. Relationship Objects are currently under discussion in the literature on object oriented design <ref> [10, 18] </ref>. Known Uses ParcPlace Smalltalk provides several examples of Relationship Objects. Collections and ValueHold-ers are specialised kinds of Relationship Objects (Active Value (4) and Collection Object (3) respectively). <p> Steve Metsker subsequently described how concurrent two-way relationships can be managed by a Judge [14]. Databases often provide support for two-way relationships. For example, all relationships in relational databases can be traversed in either direction, and ODMG-93 object oriented databases automatically maintain the consistency of inverse relationships <ref> [10] </ref>. Acknowledgements This paper is a revised version of a paper presented at TOOLS Pacific 1996 [17].
Reference: [11] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Third Eurographics Workshop on Object-Oriented Graphics, </booktitle> <year> 1992. </year>
Reference-contexts: Known Uses Active values were first provided as part of the language in LOOPS [23]. VisualWorks's ValueModel framework is based on this pattern [19]. In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw [24], and QOCA <ref> [11] </ref> constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8]. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks.
Reference: [12] <author> Wolfgang Keller. </author> <title> Mapping associations from OODBs to RDBMs. </title> <type> Technical report, </type> <institution> sd&m | software design & management GmbH, </institution> <year> 1995. </year>
Reference-contexts: Composite [8] can use Mutual Friends to maintain a two-way relationship between containers and leaves. A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects <ref> [12, 18] </ref>. James Rumbaugh [22] and Martin Fowler [6], amongst others, have described how two-way relationships can be split into mutual one-way relationships. Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker [15].
Reference: [13] <author> Jairong Li. </author> <title> Connected group, </title> <note> 1996. Reviewed at EuroPLOP. </note>
Reference-contexts: Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks. Observer [8] is often used to link Active Values to the objects which depend on the relationship. Several Active Values can form a Connected Group <ref> [13] </ref>. 5 Mutual Friends How do you design a two-way relationship? You have a two-way relationship (also known as a bidirectional or mutual relationship) where all participating objects are equally important.
Reference: [14] <author> Steve Metsker. </author> <title> The judge pattern. </title> <note> Submitted to the Journal of Object Oriented Programming, </note> <month> April </month> <year> 1997. </year>
Reference-contexts: Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker [15]. Steve Metsker subsequently described how concurrent two-way relationships can be managed by a Judge <ref> [14] </ref>. Databases often provide support for two-way relationships. For example, all relationships in relational databases can be traversed in either direction, and ODMG-93 object oriented databases automatically maintain the consistency of inverse relationships [10]. Acknowledgements This paper is a revised version of a paper presented at TOOLS Pacific 1996 [17].
Reference: [15] <author> Steve Metsker, Ward Cunningham, and Ralph Johnston. </author> <title> Symmetrical reference. </title> <address> http://c2.com/cgi/wiki?SymmetricalReference. </address>
Reference-contexts: James Rumbaugh [22] and Martin Fowler [6], amongst others, have described how two-way relationships can be split into mutual one-way relationships. Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker <ref> [15] </ref>. Steve Metsker subsequently described how concurrent two-way relationships can be managed by a Judge [14]. Databases often provide support for two-way relationships. For example, all relationships in relational databases can be traversed in either direction, and ODMG-93 object oriented databases automatically maintain the consistency of inverse relationships [10].
Reference: [16] <author> Bertrand Meyer. </author> <title> Reusable Software: The Base Object-Oriented Component Libraries. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Known Uses Collections are ubiquitous throughout object oriented programming. They are the most common kind of Relationship Object (2), and they form the core of many class libraries <ref> [2, 9, 16] </ref>. Most collections implement one-to-many one-way relationships, although some, such as Smalltalk's Dictionaries, can implement many-to-many relationships. Related Patterns Pattern-Oriented Software Architecture [4] describes the collection-members variant of the Whole-Part pattern.
Reference: [17] <author> James Noble. </author> <title> Some patterns for relationships. </title> <booktitle> In TOOLS 21, </booktitle> <address> Melbourne, </address> <year> 1996. </year>
Reference-contexts: Databases often provide support for two-way relationships. For example, all relationships in relational databases can be traversed in either direction, and ODMG-93 object oriented databases automatically maintain the consistency of inverse relationships [10]. Acknowledgements This paper is a revised version of a paper presented at TOOLS Pacific 1996 <ref> [17] </ref>. Thanks are due to Wolfgang Keller, the EuroPLOP'97 shepherd for this paper, to John Grundy for his collaboration on Explicit Relationships in Object Oriented Design [18], and to Michael Richmond, Jonathan Tidswell, John Potter and David Holmes for their comments on drafts.
Reference: [18] <author> James Noble and John Grundy. </author> <title> Explicit relationships in object-oriented development. </title> <booktitle> In TOOLS 18, </booktitle> <address> Melbourne, 1995. </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Introducing Relationship Objects increases the number of objects in the program, which can increase memory footprint, and accessing objects indirectly via Relationship Objects can reduce execution efficiency. Relationship Objects are currently under discussion in the literature on object oriented design <ref> [10, 18] </ref>. Known Uses ParcPlace Smalltalk provides several examples of Relationship Objects. Collections and ValueHold-ers are specialised kinds of Relationship Objects (Active Value (4) and Collection Object (3) respectively). <p> Composite [8] can use Mutual Friends to maintain a two-way relationship between containers and leaves. A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects <ref> [12, 18] </ref>. James Rumbaugh [22] and Martin Fowler [6], amongst others, have described how two-way relationships can be split into mutual one-way relationships. Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker [15]. <p> Acknowledgements This paper is a revised version of a paper presented at TOOLS Pacific 1996 [17]. Thanks are due to Wolfgang Keller, the EuroPLOP'97 shepherd for this paper, to John Grundy for his collaboration on Explicit Relationships in Object Oriented Design <ref> [18] </ref>, and to Michael Richmond, Jonathan Tidswell, John Potter and David Holmes for their comments on drafts.
Reference: [19] <author> ParcPlace Systems. </author> <title> VisualWorks Smalltalk User's Guide, </title> <address> 2.0 edition, </address> <year> 1994. </year>
Reference-contexts: Known Uses ParcPlace Smalltalk provides several examples of Relationship Objects. Collections and ValueHold-ers are specialised kinds of Relationship Objects (Active Value (4) and Collection Object (3) respectively). ObjectWorks introduced DependentsCollection objects to record and manage the relationship between an object and its dependents <ref> [19] </ref>, where the earlier Smalltalk-80 implemented this relationship using a global dictionary [9]. Related Patterns Relationship As Attribute (1) is a complementary pattern which describes how to represent simple one-to-one relationships efficiently. <p> Active Values also reduce the clarity of program text, since otherwise simple variable accesses and assignment statements must be replaced by messages sent to Active Values. Known Uses Active values were first provided as part of the language in LOOPS [23]. VisualWorks's ValueModel framework is based on this pattern <ref> [19] </ref>. In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8]. <p> A class and its subclasses are Mutual Friends, with the superclass as the leader. Each class keeps a collection of it subclasses, and each subclass has a pointer to its class [9]. Similarly, Smalltalk views and controllers are Mutual Friends, as are VisualWorks' VisualPart and CompositePart <ref> [19] </ref>. Related Patterns If the control flow across a relationship is primarily in one direction, you may be able to model the relationships as if it were a one-way relationship, and use Self Delegation [1] for access in the other direction.
Reference: [20] <author> James Rumbaugh. </author> <title> Relations as semantic constructs in an object-oriented language. </title> <booktitle> In OOPSLA Proceedings, </booktitle> <year> 1987. </year>
Reference-contexts: Introduction Relationships, also known as collaborations or associations, are very important in object oriented design. For example, collaborations make up one third of the CRC (Class Responsibility Collaboration) design technique [25], and Rumbaugh has claimed that relationships are complementary to (and as important as) objects themselves <ref> [20] </ref>. Unfortunately, most object oriented programming languages do not support relationships well.
Reference: [21] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1991. </year>
Reference-contexts: The following three patterns describe how one-to-one, one-to-many and two-way relationships can be modelled. The elementary content of these patterns should not surprise any object oriented software practitioner, and they can all be found in the general OO literature <ref> [25, 2, 21, 22] </ref>. Rather, these patterns attempt to record well known design and programming folklore, describing techniques to new programmers, and, for more experienced programmers, illustrating when particular techniques are appropriate. <p> These kinds of relationships embody important concepts and constraints from the programs' domain, and can require complex state or behaviour to implement. Complex relationships can be implemented directly using features of programming languages such as attributes (see Relationship As Attribute (1)), but this has several disadvantages <ref> [2, 21] </ref>. The relationship is dispersed among its participating objects | it cannot be easily identified within the program, and thus cannot be easily located or maintained. Participating objects are tightly coupled, so a change to the relationship necessitates a change to several of the participating objects.
Reference: [22] <author> James E. Rumbaugh. </author> <title> Models for design: Generating code for associations. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 8(9), </volume> <month> February </month> <year> 1996. </year>
Reference-contexts: Programming languages support relationships mainly through attributes (also known as variables, slots, or data members), which are one-way links from one object to one other object. This means that programmers must somehow build up other relationships using the raw materials the languages provide | objects, messages, and attributes <ref> [22] </ref>. This paper presents five basic patterns for implementing relationships between objects. The patterns address the most basic kind of relationships where one object needs to be able to refer to another object at runtime. <p> The following three patterns describe how one-to-one, one-to-many and two-way relationships can be modelled. The elementary content of these patterns should not surprise any object oriented software practitioner, and they can all be found in the general OO literature <ref> [25, 2, 21, 22] </ref>. Rather, these patterns attempt to record well known design and programming folklore, describing techniques to new programmers, and, for more experienced programmers, illustrating when particular techniques are appropriate. <p> Composite [8] can use Mutual Friends to maintain a two-way relationship between containers and leaves. A Relationship Object (2) can model an entire complex relationship, and one or more Observers [8] can be used to maintain two-way links between the participating objects [12, 18]. James Rumbaugh <ref> [22] </ref> and Martin Fowler [6], amongst others, have described how two-way relationships can be split into mutual one-way relationships. Ward Cunningham wrote a version of Mutual Friends on the WikiWikiWeb, and it was discussed by Ralph Johnston and Steve Metsker [15].
Reference: [23] <author> M. J. Stefik, D. G. Bobrow, and K. M. Kahn. </author> <title> Integrating access-oriented programming into a multiparadigm environment. </title> <journal> IEEE Software, </journal> <volume> 3(1), </volume> <month> January </month> <year> 1986. </year>
Reference-contexts: Active Values also reduce the clarity of program text, since otherwise simple variable accesses and assignment statements must be replaced by messages sent to Active Values. Known Uses Active values were first provided as part of the language in LOOPS <ref> [23] </ref>. VisualWorks's ValueModel framework is based on this pattern [19]. In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8].
Reference: [24] <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> A framework for building domain-specific graphical editors. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3), </volume> <year> 1990. </year>
Reference-contexts: Known Uses Active values were first provided as part of the language in LOOPS [23]. VisualWorks's ValueModel framework is based on this pattern [19]. In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw <ref> [24] </ref>, and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8]. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk [26] describes how to use Active Values in VisualWorks.
Reference: [25] <author> Nancy M. Wilkerson. </author> <title> Using CRC Cards: An Informal Approach to Object-Oriented Design. </title> <publisher> SIGS Books, </publisher> <year> 1995. </year>
Reference-contexts: Introduction Relationships, also known as collaborations or associations, are very important in object oriented design. For example, collaborations make up one third of the CRC (Class Responsibility Collaboration) design technique <ref> [25] </ref>, and Rumbaugh has claimed that relationships are complementary to (and as important as) objects themselves [20]. Unfortunately, most object oriented programming languages do not support relationships well. <p> The following three patterns describe how one-to-one, one-to-many and two-way relationships can be modelled. The elementary content of these patterns should not surprise any object oriented software practitioner, and they can all be found in the general OO literature <ref> [25, 2, 21, 22] </ref>. Rather, these patterns attempt to record well known design and programming folklore, describing techniques to new programmers, and, for more experienced programmers, illustrating when particular techniques are appropriate.
Reference: [26] <author> Bobby Woolf. </author> <title> Understanding and using the ValueModel framework in VisualWorks Smalltalk. In Pattern Languages of Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: In particular, the ValueHolder object is a generic Active Value. The Cooldraw [7], Unidraw [24], and QOCA [11] constraint solvers all use Active Values to represent variables explicitly: the last two uses are mentioned in Design Patterns [8]. Related Patterns Understanding and Using the ValueModel Framework in VisualWorks Smalltalk <ref> [26] </ref> describes how to use Active Values in VisualWorks. Observer [8] is often used to link Active Values to the objects which depend on the relationship.
References-found: 26

