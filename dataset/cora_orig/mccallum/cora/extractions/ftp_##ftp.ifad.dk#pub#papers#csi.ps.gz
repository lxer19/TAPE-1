URL: ftp://ftp.ifad.dk/pub/papers/csi.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: The Formal Semantics of ISO VDM-SL  
Author: Peter Gorm Larsen Wies law Paw lowski 
Date: March 14, 1995  
Address: Forskerparken 10  Denmark  ul. Abrahama 18 81-825 Sopot Poland  
Affiliation: Institute of Applied Computer Science (IFAD)  Odense M  Institute of Computer Science Polish Academy of Sciences  
Pubnum: DK-5230  
Abstract: This paper provides an overview of the formal semantics of VDM-SL which currently is being standardised by ISO. This is a specification language used in the formal method known as the Vienna Development Method (or simply VDM). In this paper we will focus on the foundations and the semantics of a rather unique combination of looseness and recursion.
Abstract-found: 1
Intro-found: 1
Reference: [Andrews&88] <author> Derek Andrews. </author> <title> Report from the BSI Panel for the Standardization of VDM. </title> <editor> In R. Bloomfield, L. Marshall and R. Jones, editors, </editor> <booktitle> VDM '88 VDM The Way Ahead, </booktitle> <pages> pages 74-78, </pages> <address> VDM-Europe, </address> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1988. </year>
Reference-contexts: For quite a long time the VDM specification language was used in a number of different dialects. In the mid-eighties, in order to harmonise these, British Standards Institution (BSI) decided to standardise it <ref> [Sen87, Andrews&88, Plat&92, Parkin94] </ref>. In the early nineties this was taken up by the International Organisation for Standardisation (ISO) [ISOVDM93]. In this paper we provide an overview of the formal semantics of the standardised specification language VDM-SL.
Reference: [Arentoft&88] <author> Michael Meincke Arentoft and Peter Gorm Larsen. </author> <title> The Dynamic Semantics of the BSI/VDM Specification Language. </title> <type> Master's thesis, </type> <institution> Technical University of Denmark, DK-2800 Lyngby, Denmark, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: mechanism which allows certain design decisions to be postponed till a later stage of development. fl Accepted for Publication by a special issue on formal methods and standards of the "Computer Standards and Interfaces" journal (to be published September 1995). 1 The dynamic semantics of VDM-SL was first presented in <ref> [Arentoft&88] </ref> which was based on work by Brian Monahan [Monahan85]. An overview of this was published in [Larsen&89] and the dynamic semantics was checked by two different review boards chaired by Andrzej Blikle and Kees Middelburg, respectively. <p> In VDM-SL such an ordering is not defined and in general there can be mutual dependencies between definitions in different syntactic categories. The presence of looseness also makes definitions formulated with the explicit style more difficult to read <ref> [Arentoft&88] </ref>. <p> Therefore one could think that the type of the evaluation function for expressions (as used in [Monahan85]) should be: EvalExpr : Expr ! ENV ! VAL However, because expressions can be loose, an expression may possibly yield more than one value. A next attempt (used in <ref> [Arentoft&88] </ref> and [Larsen&89]) could be: EvalExpr : Expr ! ENV ! IP (VAL) Unfortunately this leads to very serious problems with the least-fixed-point semantics for recursive loose definitions.
Reference: [BSIZ92] <editor> (editors) Stephen Brien and John Nicholls. </editor> <title> Z Base Standard. </title> <type> Version 1.0, </type> <institution> Oxford University, Computer Laboratory, Programming Research Group, </institution> <month> November </month> <year> 1992. </year> <month> 16 </month>
Reference-contexts: Therefore all expression evaluators will yield the same result and we will only have one least fixed point in this case. 11 Concluding Remarks From a standards point of view it is interesting how the VDM-SL standard (and also the forthcoming Z standard <ref> [BSIZ92] </ref>), focusing on semantic issues, have become more precise than standards normally have been in the past. We believe that specifications languages like these will be a valuable tool to enhance the quality and preciseness of future standards.
Reference: [Hayes&89] <author> I.J. Hayes, C.B. Jones. </author> <title> Specifications are not (necessarily) executable. </title> <journal> Software Engineering Journal, </journal> <pages> 330-338, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The kind of looseness presented in the examples above is known as external looseness <ref> [Hayes&89] </ref> because the external behaviour of these expressions is not fully determined. This kind of external looseness is commonly used when the external behaviour in some cases simply need to satisfy certain conditions which not necessarily restrict the result to a unique value.
Reference: [ISO/Modula2] <author> JCT1/SC22/WG13 ISO/IEC DIS 10514. </author> <title> Information technology Programming languages - Modula-2. </title>
Reference-contexts: We believe that specifications languages like these will be a valuable tool to enhance the quality and preciseness of future standards. This has already been shown for a few programming language standards (e.g. <ref> [ISO/Modula2] </ref>). This formal definition is now complete, and the final version in the ISO standard is not expected to change very much. It is worth noting however, that the VDM-SL language is large and complex and therefore the size of the dynamic semantics is over 100 pages.
Reference: [ISOVDM93] <institution> Information Technology Programming Languages - VDM-SL. </institution> <note> First Committee Draft Standard: CD 13817-1, </note> <month> November </month> <year> 1993. </year> <note> ISO/IEC JTC1/SC22/WG19 N-20. </note>
Reference-contexts: In the mid-eighties, in order to harmonise these, British Standards Institution (BSI) decided to standardise it [Sen87, Andrews&88, Plat&92, Parkin94]. In the early nineties this was taken up by the International Organisation for Standardisation (ISO) <ref> [ISOVDM93] </ref>. In this paper we provide an overview of the formal semantics of the standardised specification language VDM-SL. This formal semantics is also known as the dynamic semantics since it describes a possible behaviour of specified systems. VDM-SL is a non-executable model-oriented specification language. <p> An overview of this was published in [Larsen&89] and the dynamic semantics was checked by two different review boards chaired by Andrzej Blikle and Kees Middelburg, respectively. The latest version of the dynamic semantics is presented in the VDM-SL standard <ref> [ISOVDM93] </ref>. In this paper we limit ourselves to explain those parts where a novel approach has been taken. Thus, we focus on the foundations of the semantic definition, and in particular on an interesting combination of looseness and recursion which is given a least fixed point semantics. <p> In the process of construction this universe all values become tagged with information about what kind of value it is (e.g. a set, a map or whatever). The detailed construction of this universe is presented in [Tarlecki&90] and in <ref> [ISOVDM93] </ref>. 2 Some of these cpo operators have specifically been introduced with limitations in the way the type constructors can be used. Elements of sets and domains of maps must be flat values (i.e. may not contain any function values or values with functions as components). <p> This corresponds exactly to lambda expressions from (typed) lambda calculus except that the formal parameter can be a general pattern 7 instead of a simple identifier. A simplified version (assuming that types are well-defined, values are not tagged, etc.) of the formal definition from <ref> [ISOVDM93] </ref> can be presented as: EvalLambda : Lambda ! LEEval EvalLambda (MkTag (`Lambda', (MkTag (`Par', (id, tp)), body))) 4 = let quasi eval = env . let d = EvalType (tp)(env ) in ob 2 jd j . f if ob 2 kd k then ev (overwrite (env, f id 7!
Reference: [Larsen&89] <author> Peter Gorm Larsen, Michael Meincke Arentoft, Brian Monahan and Stephen Bear. </author> <title> Towards a Formal Semantics of The BSI/VDM Specification Language. </title> <editor> In Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 95-100, </pages> <publisher> North-Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: An overview of this was published in <ref> [Larsen&89] </ref> and the dynamic semantics was checked by two different review boards chaired by Andrzej Blikle and Kees Middelburg, respectively. The latest version of the dynamic semantics is presented in the VDM-SL standard [ISOVDM93]. <p> Therefore one could think that the type of the evaluation function for expressions (as used in [Monahan85]) should be: EvalExpr : Expr ! ENV ! VAL However, because expressions can be loose, an expression may possibly yield more than one value. A next attempt (used in [Arentoft&88] and <ref> [Larsen&89] </ref>) could be: EvalExpr : Expr ! ENV ! IP (VAL) Unfortunately this leads to very serious problems with the least-fixed-point semantics for recursive loose definitions.
Reference: [Larsen94a] <author> Peter Gorm Larsen. </author> <title> Evaluation of Underdetermined Explicet Expressions. </title> <editor> In M. Naftalin, T. Denvir, M. Bertran, editor, FME'94: </editor> <booktitle> Industrial Benefit of Formal Methods, </booktitle> <pages> pages 233-250, </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: It has focused in particular on the semantics for the combination of under-determinedness and recursion in specifications. This combination seems to be particularly interesting since it turns out that it is possible to automate the analysis of such specifications <ref> [Larsen94a] </ref> and to find corresponding proof rules [Larsen&94b]. Acknowledgements We would like to acknowledge all the input received from the standardisation panel and from the review boards. We would also like to thank John Fitzgerald, Paul Mukherjee, Stren Prehn and Andrzej Tarlecki for constructive comments on the contents of this paper.
Reference: [Larsen&94b] <author> Peter Gorm Larsen and Bo Stig Hansen. </author> <title> Semantics for Underdetermined Expressions. </title> <note> Accepted for publication by "Formal Aspects of Computing", </note> <month> January </month> <year> 1995. </year>
Reference-contexts: It has focused in particular on the semantics for the combination of under-determinedness and recursion in specifications. This combination seems to be particularly interesting since it turns out that it is possible to automate the analysis of such specifications [Larsen94a] and to find corresponding proof rules <ref> [Larsen&94b] </ref>. Acknowledgements We would like to acknowledge all the input received from the standardisation panel and from the review boards. We would also like to thank John Fitzgerald, Paul Mukherjee, Stren Prehn and Andrzej Tarlecki for constructive comments on the contents of this paper.
Reference: [Leisenring69] <author> A.C. Leisenring. </author> <title> Mathematical Logic and Hilbert's "-Symbol. </title> <publisher> Gordon and Breach Science Publishers, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: In VDM-SL, functions are given an under-determined semantics, whereas operations are given a non-deterministic semantics 4 . The complexity of an arbitrary combination of these can be found in [Wieth89]. The difference between using the classical Hilbert epsilon operator <ref> [Leisenring69] </ref>, the under-determinedness semantics and the non-deterministic semantics can be illustrated by a few examples.
Reference: [Monahan85] <author> Brian Q. Monahan. </author> <title> A Semantic Definition of the STC VDM Reference Language. </title> <month> November </month> <year> 1985. </year> <pages> 176 pages. </pages> <note> Doc. no. 9. </note>
Reference-contexts: till a later stage of development. fl Accepted for Publication by a special issue on formal methods and standards of the "Computer Standards and Interfaces" journal (to be published September 1995). 1 The dynamic semantics of VDM-SL was first presented in [Arentoft&88] which was based on work by Brian Monahan <ref> [Monahan85] </ref>. An overview of this was published in [Larsen&89] and the dynamic semantics was checked by two different review boards chaired by Andrzej Blikle and Kees Middelburg, respectively. The latest version of the dynamic semantics is presented in the VDM-SL standard [ISOVDM93]. <p> Thus, the value of an expression is dependent on the environment in which it is being evaluated. Therefore one could think that the type of the evaluation function for expressions (as used in <ref> [Monahan85] </ref>) should be: EvalExpr : Expr ! ENV ! VAL However, because expressions can be loose, an expression may possibly yield more than one value.
Reference: [Parkin94] <author> Graeme I. Parkin. </author> <title> Vienna Development Method Specification Language (VDM-SL). Computer Standard & Interfaces, </title> <booktitle> 16 </booktitle> <pages> 527-530, </pages> <year> 1994. </year> <title> Special issue with the general title: The programming language standards scene, ten years on. </title>
Reference-contexts: For quite a long time the VDM specification language was used in a number of different dialects. In the mid-eighties, in order to harmonise these, British Standards Institution (BSI) decided to standardise it <ref> [Sen87, Andrews&88, Plat&92, Parkin94] </ref>. In the early nineties this was taken up by the International Organisation for Standardisation (ISO) [ISOVDM93]. In this paper we provide an overview of the formal semantics of the standardised specification language VDM-SL.
Reference: [Plat&92] <author> Nico Plat and Peter Gorm Larsen. </author> <title> An Overview of the ISO/VDM-SL Standard. </title> <journal> Sigplan Notices, </journal> <volume> 27(8) </volume> <pages> 76-82, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: For quite a long time the VDM specification language was used in a number of different dialects. In the mid-eighties, in order to harmonise these, British Standards Institution (BSI) decided to standardise it <ref> [Sen87, Andrews&88, Plat&92, Parkin94] </ref>. In the early nineties this was taken up by the International Organisation for Standardisation (ISO) [ISOVDM93]. In this paper we provide an overview of the formal semantics of the standardised specification language VDM-SL.
Reference: [Schmidt86] <author> David A. Schmidt. </author> <title> Denotational Semantics A Methodology for Language Development. </title> <publisher> Allyn and Bacon, Inc. </publisher> <year> 1986. </year>
Reference-contexts: Finally a few examples illustrating this kind of combination of looseness and recursion are given, followed by concluding remarks. To fully understand the formal parts of this paper the reader is assumed to have some knowledge of traditional denotational semantics (e.g. from <ref> [Schmidt86] </ref>). 2 Mathematical Notation This section introduces the mathematical notation that will be the "meta-language" employed to define the dynamic semantics of VDM-SL.
Reference: [Sen87] <author> Dev Sen. </author> <title> Objectives of the British Standardization of a Language to Support the VDM. </title> <editor> In Bjtrner, Jones, Airchinnigh and Neuhold, editors, </editor> <title> VDM '87 VDM </title> - 
Reference-contexts: For quite a long time the VDM specification language was used in a number of different dialects. In the mid-eighties, in order to harmonise these, British Standards Institution (BSI) decided to standardise it <ref> [Sen87, Andrews&88, Plat&92, Parkin94] </ref>. In the early nineties this was taken up by the International Organisation for Standardisation (ISO) [ISOVDM93]. In this paper we provide an overview of the formal semantics of the standardised specification language VDM-SL.
References-found: 15

