URL: http://glen.lcs.mit.edu/~devadas/pubs/asyncp.ps
Refering-URL: http://glen.lcs.mit.edu/~devadas/pubs/async.html
Root-URL: 
Title: Performance-driven Synthesis of Asynchronous Controllers  
Author: Kenneth Y. Yun Bill Lin David L. Dill Srinivas Devadas 
Address: San Diego, CA 92093  Kapeldreef 75, B-3001 Leuven, Belgium  Stanford, CA 94305  Cambridge, MA 02139  
Affiliation: Department of ECE, University of California,  IMEC,  Computer Systems Laboratory, Stanford University,  Department of EECS, MIT,  
Abstract: We examine the implications of a new hazard-free combinational logic synthesis method [10], which generates multiplexor-based networks from binary decision diagrams (BDDs) | representations of logic functions factored recursively with respect to input variables | on extended burst-mode asynchronous synthesis. First, the use of the BDD-based synthesis reduces the constraints on state minimization and assignment, which reduces the number of additional state variables required in many cases. Second, in cases where conditional signals are sampled, it eliminates the need for state variable changes preceding output changes, which reduces overall input to output latency. Third, selection variables can easily be ordered to minimize the latency on a user-specified path, which is important for optimizing the performance of systems that use asynchronous components. We present extensive evaluations showing that, with only minimal optimization, the BDD-based synthesis gives results comparable in area to previous exact two-level synthesis method. We also give a detailed example of the specified path optimization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Akella and G. Gopalakrishnan. SHILPA: </author> <title> A high-level synthesis system for self-timed circuits. </title> <booktitle> In Proceedings of the 1992 IEEE/ACM International Conference on Computer Aided Design, </booktitle> <pages> pages 587-591, </pages> <month> November </month> <year> 1992. </year>
Reference: [2] <author> P. Beerel and T. H.-Y. Meng. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In Proceedings of the 1992 IEEE/ACM International Conference on Computer Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference: [3] <author> E. Brunvand. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 428-435. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [4] <author> E. Brunvand and R. F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proceedings of the 1989 IEEE International Conference on Computer Aided Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference: [5] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(8) </volume> <pages> 677-691, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The combinational circuit is derived from a Binary Decision Diagram <ref> [5] </ref> using a recently developed hazard-free combinational synthesis method [10]. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods [18, 17, 26, 25], which implement the combinational logic as two-level AND-OR circuits. <p> We do not rely on inertial delays, that is, we assume a pure gate delay model, and allow for arbitrary wire delays. 3.1 Multiplexer Networks derived from BDDs The following definition of a Binary Decision Diagram is from <ref> [5] </ref>. Definition 3.1 A Binary Decision Diagram is a rooted, directed graph with vertex set V containing two types of vertices. A non-terminal vertex v has as attributes an argument index index (v) 2 f1; : : : ; ng and two children low (v); high (v) 2 V .
Reference: [6] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1987. </year> <note> Technical Report MIT-LCS-TR-393. </note>
Reference: [7] <author> W. S. Coates, A. L. Davis, and K. S. Stevens. </author> <title> The Post Office experience: Designing a large asynchronous chip. INTEGRATION, </title> <journal> the VLSI Journal, </journal> <volume> 15(4) </volume> <pages> 341-366, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [8] <author> S. B. Furber. </author> <title> AMULET1 an asynchronous ARM processor. In Symposium Record of Hot Chips V, </title> <publisher> Stanford, </publisher> <address> CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [9] <author> L. Lavagno and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for Synthesis and Testing of Asynchronous Circuits. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year> <month> 18 </month>
Reference: [10] <author> B. Lin and S. Devadas. </author> <title> Synthesis of hazard-free multi-level logic implementations under multiple-input changes from binary decision diagrams. </title> <booktitle> In Proceedings of the 1994 IEEE/ACM International Conference on Computer Aided Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The combinational circuit is derived from a Binary Decision Diagram [5] using a recently developed hazard-free combinational synthesis method <ref> [10] </ref>. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods [18, 17, 26, 25], which implement the combinational logic as two-level AND-OR circuits. <p> Unfortunately, the early state burst between the input burst and output burst increased the input/output latency significantly, and also tended to increase the circuit area. 3 BDD-based Combinational Synthesis In this paper, we use a new BDD based combinational synthesis technique from <ref> [10] </ref>. <p> This constant propagation is carried out topologically from inputs to outputs. Figure 4c shows an equivalent network after the constant propagation. 3.2 Hazard-free Combinational Synthesis We use the approach from <ref> [10] </ref> to synthesize hazard-free combinational circuits under extended-burst-mode transitions. This method is based on building a BDD for a specified function and deriving a multi-level circuit from it. To ensure that the resulting multi-level circuit is hazard-free, a requirement called the trigger signal ordering (TSO) must be satisfied. <p> To ensure that the resulting multi-level circuit is hazard-free, a requirement called the trigger signal ordering (TSO) must be satisfied. This requirement imposes constraints on the variable ordering of the BDD. It was shown in <ref> [10] </ref> that if this variable ordering is satisfied, then the resulting multi-level circuit is free of logic hazards for a set of specified transitions. Note that every input change in [10] was assumed to be monotonic during each transition. <p> This requirement imposes constraints on the variable ordering of the BDD. It was shown in <ref> [10] </ref> that if this variable ordering is satisfied, then the resulting multi-level circuit is free of logic hazards for a set of specified transitions. Note that every input change in [10] was assumed to be monotonic during each transition. We will prove that the resulting circuit is free of logic hazards for 8 a set of specified extended-burst-mode transitions, in which some inputs may change non-monotonically, as long as the TSO requirement is satisfied. <p> Therefore, we can impose a set of ordering requirements, which do not conflict, as a sufficient condition for hazard freedom per generalized transition cube, although the TSO requirement in <ref> [10] </ref> is an imposition on each trigger state in the transition cube. <p> We used this modified tool in conjunction with the combinational synthesis tool <ref> [10] </ref> to perform experiments (see table 1) on many examples previously synthesized by the method described in [26].
Reference: [11] <author> A. J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive VLSI circuits. </title> <editor> In C. A. R. Hoare, editor, </editor> <booktitle> UT Year of Programming Institute on Concurrent Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [12] <author> A. J. Martin, S. M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <editor> In C. L. Seitz, editor, </editor> <booktitle> Proceedings of the Decennial Caltech Conference on Very Large Scale Integration, </booktitle> <pages> pages 351-373. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [13] <author> T. H. Meng. </author> <title> Synchronization Design for Digital Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [14] <author> C. E. Molnar, T.-P. Fang, and F. U. Rosenberger. </author> <title> Synthesis of delay-insensitive modules. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 67-86. </pages> <publisher> Computer Science Press, Inc., </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [15] <author> C. W. Moon. </author> <title> Synthesis and Verification of Asynchronous Circuits from Graph Specifications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1992. </year>
Reference: [16] <author> C. Myers and T. H.-Y. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(2) </volume> <pages> 106-119, </pages> <month> June </month> <year> 1993. </year>
Reference: [17] <author> S. M. Nowick. </author> <title> Automatic Synthesis of Burst-mode Asynchronous Controllers. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1993. </year>
Reference-contexts: The combinational circuit is derived from a Binary Decision Diagram [5] using a recently developed hazard-free combinational synthesis method [10]. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods <ref> [18, 17, 26, 25] </ref>, which implement the combinational logic as two-level AND-OR circuits. In many cases, the circuits synthesized using this new method have considerably lower output latencies than the circuits synthesized by the method in [26]. <p> In a dynamic extended-burst-mode transition, the output is enabled to change only after all of the terminating edges appear. In order for a 2-level AND-OR implementation of an output or a state variable function to be hazard-free, a set of covering requirements <ref> [26, 17] </ref> must be satisfied for each burst, i.e., extended-burst-mode transition. <p> The algorithm then collapses the primitive next-state table into a reduced next-state table by merging compatible specification states without violating TSO requirements. In order to describe the primitive next-state table construction formally, a formal definition of the extended-burst-mode specification, adapted from the definition of the burst-mode specification in <ref> [17] </ref>, is needed.
Reference: [18] <author> S. M. Nowick and B. Coates. </author> <title> Automated design of high-performance unclocked state machines. </title> <booktitle> In Proceedings of the 1994 IEEE International Conference on Computer Design: VLSI in Computers and Processors. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The combinational circuit is derived from a Binary Decision Diagram [5] using a recently developed hazard-free combinational synthesis method [10]. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods <ref> [18, 17, 26, 25] </ref>, which implement the combinational logic as two-level AND-OR circuits. In many cases, the circuits synthesized using this new method have considerably lower output latencies than the circuits synthesized by the method in [26].
Reference: [19] <author> S. M. Nowick, M. E. Dean, D. L. Dill, and M. Horowitz. </author> <title> The design of a high-performance cache controller: a case study in asynchronous synthesis. Integration, </title> <journal> The VLSI Journal, </journal> <volume> 15(3) </volume> <pages> 241-262, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [20] <author> S. M. Nowick, K. Y. Yun, and D. L. Dill. </author> <title> Practical asynchronous controller design. </title> <booktitle> In Proceedings of the 1992 IEEE International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 341-345. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction There have been many recent advances in asynchronous circuits and systems, both in tool design [1, 2, 4, 6, 9, 11, 13, 15, 16, 17, 18, 23, 24, 25] and actual systems design <ref> [3, 7, 8, 12, 13, 14, 19, 20] </ref>. However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode [26, 27].
Reference: [21] <author> I. E. Sutherland, </author> <year> 1994. </year> <title> Private Communication. </title>
Reference-contexts: To illustrate this point and also provide a nice circuit example, we consider a hypothetical problem posed by Ivan Sutherland <ref> [21] </ref>.
Reference: [22] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1969. </year>
Reference-contexts: It was shown in [26] that it is not always possible to satisfy the covering requirements for all of the specified bursts under the presence of non-monotonically changing (undefined) conditionals, if the single transition time (STT) state assignment <ref> [22] </ref> is used. The approach taken in [26] was to insert a state burst between a conditional input burst and the corresponding output burst in order to guarantee that the covering requirements can be satisfied for all of the specified bursts.
Reference: [23] <author> P. Vanbekbergen. </author> <title> Synthesis of asynchronous controllers from graph-theoretic specifications. </title> <type> PhD thesis, </type> <institution> Interuniversitair Micro-Elektronica Centrum, </institution> <year> 1993. </year>
Reference: [24] <author> C. Ykman-Couvreur, B. Lin, G. Goossens, and H. De Man. </author> <title> Synthesis and optimization of asynchronous controllers based on extended lock graph theory. </title> <booktitle> In Proceedings of The European Conference on Design 19 Automation with The European Event in ASIC Design, </booktitle> <pages> pages 512-517. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference: [25] <author> K. Y. Yun and D. L. Dill. </author> <title> Automatic synthesis of 3D asynchronous finite-state machines. </title> <booktitle> In Proceedings of the 1992 IEEE/ACM International Conference on Computer Aided Design, </booktitle> <pages> pages 576-580. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: The combinational circuit is derived from a Binary Decision Diagram [5] using a recently developed hazard-free combinational synthesis method [10]. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods <ref> [18, 17, 26, 25] </ref>, which implement the combinational logic as two-level AND-OR circuits. In many cases, the circuits synthesized using this new method have considerably lower output latencies than the circuits synthesized by the method in [26]. <p> These topics have been discussed in more detail in previous publications <ref> [26, 25] </ref>. 0 2 4 ok- frin- / faout 6 frin+ dackn+ / faout+ frin- / dreq+ faout-ok+ frin* / dreq+ &lt;cntgt1+&gt; frin* dackn- / dreq &lt;cntgt1+&gt; frin* dackn- / dreq-ok* frin+ dackn+ / faout+ &lt;cntgt1-&gt; frin* dackn- / dreq &lt;cntgt1-&gt; frin* dackn- / dreq brackets and ending with + or <p> Informally, the third criterion states that no input burst from u has conflicting ordering requirements with an input burst in v that has identical values of fed-back outputs. The state minimization and encoding to complete the sequential synthesis are described in <ref> [25] </ref>. 5 Path Optimization Example In synchronous designs, one of the important design objectives is to carefully balance the computation blocks so that no part of the circuits are idle while other parts are busy because the clock period is determined by the worst-case delay of all the computation blocks.
Reference: [26] <author> K. Y. Yun and D. L. Dill. </author> <title> Unifying synchronous/asynchronous state machine synthesis. </title> <booktitle> In Proceedings of the 1993 IEEE/ACM International Conference on Computer Aided Design, </booktitle> <pages> pages 255-260. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode <ref> [26, 27] </ref>. This paper describes a new synthesis algorithm for asynchronous controllers specified in extended-burst-mode [26, 27]. <p> However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode <ref> [26, 27] </ref>. This paper describes a new synthesis algorithm for asynchronous controllers specified in extended-burst-mode [26, 27]. <p> The combinational circuit is derived from a Binary Decision Diagram [5] using a recently developed hazard-free combinational synthesis method [10]. This algorithm is designed, first and foremost, to minimize output latency. This new approach has many advantages over other synthesis methods <ref> [18, 17, 26, 25] </ref>, which implement the combinational logic as two-level AND-OR circuits. In many cases, the circuits synthesized using this new method have considerably lower output latencies than the circuits synthesized by the method in [26]. <p> This new approach has many advantages over other synthesis methods [18, 17, 26, 25], which implement the combinational logic as two-level AND-OR circuits. In many cases, the circuits synthesized using this new method have considerably lower output latencies than the circuits synthesized by the method in <ref> [26] </ref>. <p> These topics have been discussed in more detail in previous publications <ref> [26, 25] </ref>. 0 2 4 ok- frin- / faout 6 frin+ dackn+ / faout+ frin- / dreq+ faout-ok+ frin* / dreq+ &lt;cntgt1+&gt; frin* dackn- / dreq &lt;cntgt1+&gt; frin* dackn- / dreq-ok* frin+ dackn+ / faout+ &lt;cntgt1-&gt; frin* dackn- / dreq &lt;cntgt1-&gt; frin* dackn- / dreq brackets and ending with + or <p> If a level signal is not mentioned on a particular state transition, it may change freely. If an edge signal is not mentioned, it is not allowed to change. More generally, an extended-burst-mode asynchronous finite state machine <ref> [26, 27] </ref> is specified by a state diagram which consists of a finite number of states, a set of labeled state transitions connecting pairs of states, and a start state. <p> In a dynamic extended-burst-mode transition, the output is enabled to change only after all of the terminating edges appear. In order for a 2-level AND-OR implementation of an output or a state variable function to be hazard-free, a set of covering requirements <ref> [26, 17] </ref> must be satisfied for each burst, i.e., extended-burst-mode transition. <p> In order for a 2-level AND-OR implementation of an output or a state variable function to be hazard-free, a set of covering requirements [26, 17] must be satisfied for each burst, i.e., extended-burst-mode transition. It was shown in <ref> [26] </ref> that it is not always possible to satisfy the covering requirements for all of the specified bursts under the presence of non-monotonically changing (undefined) conditionals, if the single transition time (STT) state assignment [22] is used. The approach taken in [26] was to insert a state burst between a conditional <p> It was shown in <ref> [26] </ref> that it is not always possible to satisfy the covering requirements for all of the specified bursts under the presence of non-monotonically changing (undefined) conditionals, if the single transition time (STT) state assignment [22] is used. The approach taken in [26] was to insert a state burst between a conditional input burst and the corresponding output burst in order to guarantee that the covering requirements can be satisfied for all of the specified bursts. <p> This approach imposes a different set of requirements to guarantee freedom from all hazards, but we will show that it is always possible to meet these requirements without the multiple transition time state assignment that was required in the method of <ref> [26] </ref>, resulting in greatly reduced latency in many cases. Combinational networks that describe next-state functions are constructed from a BDD (binary decision diagram) description. The basic gates that comprise combinational networks are ANDs, ORs, NANDs, NORs, inverters, and MUXes. <p> In contrast, the previous algorithm for extended-burst-mode <ref> [26] </ref> use a multiple-transition-time assignment: a state variable change was required before an output change, increasing latency significantly. Indeed, it can be shown that multiple transitions are necessary for extended-burst-mode when implemented with 2-level AND-OR logic, so the use of BDDs has an inherent performance benefit. <p> When C finishes the computation, it toggles r 2 ; the controller then toggles a (acknowledge). However, if sel is sampled low when r toggles, then the controller toggles a directly. The result of applying our synthesis method from <ref> [26] </ref> turned out to be remarkably similar to the naive design at the top of figure 5, which we found disappointing. Our hand designs were better, but also unsatisfactory. <p> 3 3 2 2 1 1 16 14 scsi-targ-send* 7 8 4 2 3 3 53 57 scsi-init-send* 7 8 4 2 2 2 31 43 scsi-init-rcv-sync 4 5 3 1 1 1 20 21 Table 1: Experimental Results. 17 6 Experiments We modified the 3D synthesis tool described in <ref> [26] </ref>, in particular, the hazard-free state assignment and combinational synthesis steps. We used this modified tool in conjunction with the combinational synthesis tool [10] to perform experiments (see table 1) on many examples previously synthesized by the method described in [26]. <p> 6 Experiments We modified the 3D synthesis tool described in <ref> [26] </ref>, in particular, the hazard-free state assignment and combinational synthesis steps. We used this modified tool in conjunction with the combinational synthesis tool [10] to perform experiments (see table 1) on many examples previously synthesized by the method described in [26]. With very modest efforts to find the optimal variable order (we tried a few random orderings and picked the best result), most of the examples required less area than the previous method, primarily because of the reduction in the number of state variables due to simpler state assignment.
Reference: [27] <author> Kenneth Y. Yun. </author> <title> Synthesis of Asynchronous Controllers for Heterogeneous Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1994. </year> <note> Technical Report CSL-TR-94-644. 20 </note>
Reference-contexts: However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode <ref> [26, 27] </ref>. This paper describes a new synthesis algorithm for asynchronous controllers specified in extended-burst-mode [26, 27]. <p> However, for maximum acceptability, it is imperative to be able to synthesize circuits that work with existing systems, which are largely made out of synchronous components. One particularly promising design style is the extended-burst-mode <ref> [26, 27] </ref>. This paper describes a new synthesis algorithm for asynchronous controllers specified in extended-burst-mode [26, 27]. <p> If a level signal is not mentioned on a particular state transition, it may change freely. If an edge signal is not mentioned, it is not allowed to change. More generally, an extended-burst-mode asynchronous finite state machine <ref> [26, 27] </ref> is specified by a state diagram which consists of a finite number of states, a set of labeled state transitions connecting pairs of states, and a start state.
References-found: 27

