URL: http://www.cs.umn.edu/Users/dept/users/kencham/otcl/otcl-paper.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kencham/otcl/
Root-URL: http://www.cs.umn.edu
Title: Extending Tcl for Dynamic Object-Oriented Programming Proceedings of the Tcl/Tk Workshop 95, Toronto, Ontario, July
Author: David Wetherall and Christopher J. Lindblad 
Keyword: object-oriented programming, Tcl, programming languages, [incr Tcl]  
Affiliation: Telemedia Networks and Systems Group Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: Object Tcl is an extension to the Tool Command Language (Tcl) for the management of complicated data types and dynamic object-oriented programming in general. We believe it is a worthy alternative to other object-oriented programming extensions (including [incr Tcl]) because it may be used dynamically, allows for per object specialization, has an economy of design and implementation, and provides a metaobject-based class system. Its design was driven by our VuSystem application needs to create a foundation with powerful abstraction and introspection capabilities, yet we sought to retain both the spirit and benefits of Tcl. This paper presents Object Tcl, emphasizing language design and implementation issues by comparing it with alternative systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Micheal S. Braverman. CASTE: </author> <title> A class system for Tcl. </title> <booktitle> In Proceedings of Tcl/Tk Workshop 1993, </booktitle> <address> Berkeley, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A version embedded in the VuSystem [8] has been in use for two years, and its success has prompted us to make a separate distribution. The many Tcl extensions for object-oriented programming (including [incr Tcl] [9], CASTE <ref> [1] </ref> and fl This research was supported by the Advanced Research Projects Agency of the Department of Defense, monitored by the United States Air Force (AFSC, Rome Laboratory) under contract No.
Reference: [2] <author> Wayne A. Christopher. </author> <title> Writing Object-oriented Tcl-based Systems using Objectify. </title> <booktitle> In Proceedings of Tcl/Tk Workshop 1993, </booktitle> <address> Berke-ley, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: F30602-92-C-0019, and by the University of Western Australia under a Hackett Studentship. y The authors can be reached at: MIT Laboratory for Computer Science, Room 505, 545 Technology Square, Cambridge, MA 02139; Tel: +1 617 253 7341; Email: djw@lcs.mit.edu. Objectify <ref> [2] </ref>) attest to the popularity of the object approach. We present Object Tcl in light of them, as an alternative resulting from a different design philosophy, and as a summary of our input towards a minimum set of object extensions for Tcl.
Reference: [3] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: b set msg Button ... public msg Button ... protected msg Button set msg Button ... common msg reference upvar msg b instvar msg introspection info &lt;option&gt; b info &lt;option&gt; B info &lt;option&gt; Button info &lt;option&gt; itcl info &lt;option&gt; Table 2: Usage Analogies modeled after Flavors [11] rather than C++ <ref> [3] </ref>. As with other extensions, we use a message-passing style to be consistent with Tk [12]. However, unlike other extensions Object Tcl allows each object to be specialized, a capability seen in languages such as Self [13].
Reference: [4] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: the language and its implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference: [5] <author> Apple Computer Inc. </author> <title> Dylan: an object-oriented dynamic language. </title> <institution> Apple Computer Inc., </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: We believe it is well suited to Tcl/Tk since it directly supports the grouping of each widget object with its behaviors and related data. Our approach also shares goals with languages such as Dylan <ref> [5] </ref>, which attempt to be practical on small machines while providing many of the language features found in CLOS and other advanced object systems. This paper presents Object Tcl, emphasizing the language design and implementation issues that we encountered.
Reference: [6] <author> G. Kiczales, J. des Rivieres, and D. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Further, new classes may be manufactured by grouping existing objects. This is analogous to the mega-widgets of [incr Tk] [10]. 8 Future Work We plan to extend Object Tcl in three directions to make it more configurable, efficient, and usable. Meta-object protocols (MOPs) <ref> [6] </ref> let the language user incrementally modify and extend the language definition. The language then occupies a region of design space, rather than a point, and consequently 8 is more widely applicable.
Reference: [7] <author> C. J. Lindblad. </author> <title> Using Tcl to Control a Computer-Participative Multimedia Programming Environment. </title> <booktitle> In Proceedings of 1994 USENIX Symposium on Very High Level Languages, </booktitle> <address> Santa Fe, NM, </address> <month> October </month> <year> 1994. </year>
Reference: [8] <author> C. J. Lindblad, D. Wetherall, and D. Tennen-house. </author> <title> The VuSystem: A Programming System for Visual Processing of Digital Video. </title> <booktitle> In Proceedings of ACM Multimedia 94. ACM, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Object Tcl is an object-oriented extension to the Tool command Language (Tcl) [12] that we created to meet the programming needs of our multimedia applications. A version embedded in the VuSystem <ref> [8] </ref> has been in use for two years, and its success has prompted us to make a separate distribution. <p> New class meta-objects may be manufactured too, and in conjunction with customizing Object, this allows the behavior of classes to be widely changed. 6 Implementation Object Tcl is available as a Tcl/Tk extension implemented in C. Originally, it was embedded in the VuSystem toolkit <ref> [8] </ref>, but we have recently developed a standalone version for evaluation. It is available via anonymous ftp from ftp.tns.lcs.mit.edu in /pub/otcl. Our implementation goal was to form a compact extension by leveraging the Tcl implementation without changing its core. Methods are implemented in the same manner as Tcl procedures. <p> This allows objects and classes to be created and deleted from C, as well as methods whose bodies are implemented in C to be added to objects. 7 A Visual Programming Example The VuSystem <ref> [8] </ref> multimedia application of Figure 6 demonstrates the use of Object Tcl. It shows a visual programming interface of a video motion segmentation program. The interface is used to manipulate the program as it runs [14].
Reference: [9] <author> Michael J. McLennan. </author> <booktitle> [incr Tcl] Object-Oriented Programming in TCL. In Proceedings of Tcl/Tk Workshop 1993, </booktitle> <address> Berkeley, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A version embedded in the VuSystem [8] has been in use for two years, and its success has prompted us to make a separate distribution. The many Tcl extensions for object-oriented programming (including [incr Tcl] <ref> [9] </ref>, CASTE [1] and fl This research was supported by the Advanced Research Projects Agency of the Department of Defense, monitored by the United States Air Force (AFSC, Rome Laboratory) under contract No.
Reference: [10] <author> Michael J. McLennan. </author> <title> [incr Tk] : Building Extensible Widgets with [incr Tcl]. </title> <booktitle> In Proceedings of Tcl/Tk Workshop 1994, </booktitle> <address> New Orleans, LA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Video processing modules may be deleted and new ones created, or their pattern of processing changed. Further, new classes may be manufactured by grouping existing objects. This is analogous to the mega-widgets of [incr Tk] <ref> [10] </ref>. 8 Future Work We plan to extend Object Tcl in three directions to make it more configurable, efficient, and usable. Meta-object protocols (MOPs) [6] let the language user incrementally modify and extend the language definition.
Reference: [11] <author> David A. Moon. </author> <title> Object-Oriented Programming with Flavors. </title> <booktitle> In Proceedings of ACM Conference on Object-Oriented Systems, Languages, and Applications (OOPSLA) 1986. ACM, </booktitle> <month> September </month> <year> 1986. </year>
Reference-contexts: variable creation set msg b set msg Button ... public msg Button ... protected msg Button set msg Button ... common msg reference upvar msg b instvar msg introspection info &lt;option&gt; b info &lt;option&gt; B info &lt;option&gt; Button info &lt;option&gt; itcl info &lt;option&gt; Table 2: Usage Analogies modeled after Flavors <ref> [11] </ref> rather than C++ [3]. As with other extensions, we use a message-passing style to be consistent with Tk [12]. However, unlike other extensions Object Tcl allows each object to be specialized, a capability seen in languages such as Self [13].
Reference: [12] <author> John Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Object Tcl is an object-oriented extension to the Tool command Language (Tcl) <ref> [12] </ref> that we created to meet the programming needs of our multimedia applications. A version embedded in the VuSystem [8] has been in use for two years, and its success has prompted us to make a separate distribution. <p> As with other extensions, we use a message-passing style to be consistent with Tk <ref> [12] </ref>. However, unlike other extensions Object Tcl allows each object to be specialized, a capability seen in languages such as Self [13]. This is an outgrowth of a strategy that we refer to as the object command approach.
Reference: [13] <author> D. Ungar and R. B. Smith. </author> <title> SELF: The Power of Simplicity. </title> <booktitle> In OOPSLA '87 Conference Proceedings, </booktitle> <year> 1987. </year>
Reference-contexts: As with other extensions, we use a message-passing style to be consistent with Tk [12]. However, unlike other extensions Object Tcl allows each object to be specialized, a capability seen in languages such as Self <ref> [13] </ref>. This is an outgrowth of a strategy that we refer to as the object command approach. We believe it is well suited to Tcl/Tk since it directly supports the grouping of each widget object with its behaviors and related data.
Reference: [14] <author> David Wetherall. </author> <title> An Interactive Programming system for Media Computation. </title> <type> Technical Report MIT/LCS/TR-640, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: It shows a visual programming interface of a video motion segmentation program. The interface is used to manipulate the program as it runs <ref> [14] </ref>. The video program is written as an Object Tcl script (using an older embedded version of the language). Code that manipulates the video frames is written in C, while code that controls the user interface is written in Tcl.
References-found: 14

