URL: http://www.isi.edu/sims/papers/90-hanoi.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: cak@cs.cmu.edu  
Title: Abstracting the Tower of Hanoi  Automatic Generation of Approximations and  
Author: Craig A. Knoblock 
Note: To appear in Proceedings of the Workshop on  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: This paper describes an automated approach to generating abstractions for the Tower of Hanoi and analyzes the use of these abstractions for problem solving. The analysis shows that the learned abstractions produce an exponential reduction in the size of the search space. Since few problem solvers actually explore the entire search space, the paper also presents an empirical analysis of the speedup provided by abstraction when a heuristic search is employed. The empirical analysis shows that the benefit of abstraction is largely determined by the portion of the base-level search space explored. Thus, using breadth-first search, which searches the entire space, abstraction provides an exponential reduction in search. However, using a depth-first search, the search reduction is smaller and depends on the amount of backtracking required to solve the problem. Abstractions, 1990 
Abstract-found: 1
Intro-found: 1
Reference: [ Amarel, 1984 ] <author> Saul Amarel. </author> <title> Expert behaviour and problem representations. </title> <booktitle> In Artificial and Human Intelligence, </booktitle> <pages> pages 1-41. </pages> <publisher> North-Holland, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference-contexts: If we impose some additional structure on the domain the difference will be much greater. Consider a variation of the Tower of Hanoi problem that has the additional restriction that no disk can be moved twice in a row <ref> [ Amarel, 1984, VanLehn, 1989 ] </ref> . This constrains the problem considerably since the suboptimal plans in the previous graph were caused by moving disks to the wrong peg. Figure 9 compares the nodes searched and the solution lengths for the two configurations with this additional restriction on the domain.
Reference: [ Benjamin et al., 1990 ] <author> Paul Benjamin, Leo Dorst, Indur Mandhyan, and Madeleine Rosar. </author> <title> An introduction to the decomposition of task representations in autonomous systems. </title> <editor> In D. Paul Benjamin, editor, </editor> <booktitle> Change of Representation and Inductive Bias, </booktitle> <pages> pages 125-146. </pages> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1990. </year>
Reference: [ Carbonell et al., 1991 ] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> PRODIGY: An integrated architecture for planning and learning. </title> <editor> In Kurt VanLehn, editor, </editor> <booktitle> Architectures for Intelligence, </booktitle> <pages> pages 241-278. </pages> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1991. </year>
Reference-contexts: This papers reviews an approach that generates abstractions for the Tower of Hanoi, shows that the abstractions provide an exponential reduction in the size of the search space, and then analyzes the use of the abstractions in the prodigy problem solver <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> . fl The author is supported by an Air Force Laboratory Graduate Fellowship through the Human Resources Laboratory at Brooks AFB. <p> The abstractions are generated by the alpine abstraction learner [ Knoblock, 1990a, Knoblock, 1991 ] and then used in a hierarchical version of prodigy <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> , a means-ends analysis problem solver. To evaluate the abstractions empirically, prodigy was run both with and without the abstractions using breadth-first search, depth-first search, and depth-first search with an additional restriction on how the problem is solved.
Reference: [ Christensen, 1990 ] <author> Jens Christensen. </author> <title> A hierarchical planner that creates its own hierarchies. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1004-1009, </pages> <address> Boston, MA, </address> <year> 1990. </year> <month> 10 </month>
Reference: [ Eavarone, 1969 ] <author> Daniel S. Eavarone. </author> <title> A program that generates difference orderings for GPS. </title> <type> Technical Report SRC-69-6, </type> <institution> Systems Research Center, Case Western Reserve University, </institution> <year> 1969. </year>
Reference-contexts: Thus, the three-disk problem can be transformed into the two-disk problem by combining the two smallest disks. This abstraction is analogous to the one described in this paper, but it is generated by forming aggregate objects instead of ignoring details. The work on difference ordering in gps <ref> [ Ernst, 1969, Eavarone, 1969, Ernst and Gold-stein, 1982 ] </ref> is closely related to the algorithm for generating abstractions described in this paper. Their work focuses on producing a triangular table of connections for solving a problem in gps. <p> The techniques for producing good difference orders for gps is only able to identify the disks as good differences, but cannot produce a useful ordering of the disks. For example, <ref> [ Eavarone, 1969 ] </ref> presents a program that produces 24 triangular tables of connections for the four-disk problem without any preference for which table provides the best difference ordering. Christensen [ 1990 ] describes a system called pablo that automatically generates abstractions for this domain.
Reference: [ Ernst and Goldstein, 1982 ] <author> George W. Ernst and Michael M. Goldstein. </author> <title> Mechanical discovery of classes of problem-solving strategies. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 29(1) </volume> <pages> 1-23, </pages> <year> 1982. </year>
Reference: [ Ernst, 1969 ] <author> George W. Ernst. </author> <title> Sufficient conditions for the success of GPS. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 16(4) </volume> <pages> 517-533, </pages> <year> 1969. </year>
Reference-contexts: Thus, the three-disk problem can be transformed into the two-disk problem by combining the two smallest disks. This abstraction is analogous to the one described in this paper, but it is generated by forming aggregate objects instead of ignoring details. The work on difference ordering in gps <ref> [ Ernst, 1969, Eavarone, 1969, Ernst and Gold-stein, 1982 ] </ref> is closely related to the algorithm for generating abstractions described in this paper. Their work focuses on producing a triangular table of connections for solving a problem in gps.
Reference: [ Knoblock, 1990a ] <author> Craig A. Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 923-928, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: A hierarchy of abstraction spaces is formed by removing successive classes of literals, such that each abstraction space is an approximation of the original problem space. The hierarchy is ordered such that the highest level is the most abstract. The final hierarchy has the ordered monotonicity property <ref> [ Knoblock, 1990a ] </ref> , which requires that the literals are partitioned in such a way that the achievement of a literal introduced at one level cannot change the truth value of a literal in a more abstract level. <p> The abstractions are generated by the alpine abstraction learner <ref> [ Knoblock, 1990a, Knoblock, 1991 ] </ref> and then used in a hierarchical version of prodigy [ Minton et al., 1989, Carbonell et al., 1991 ] , a means-ends analysis problem solver.
Reference: [ Knoblock, 1990b ] <author> Craig A. Knoblock. </author> <title> A theory of abstraction for hierarchical planning. </title> <editor> In D. Paul Benjamin, editor, </editor> <booktitle> Change of Representation and Inductive Bias, </booktitle> <pages> pages 81-104. </pages> <publisher> Kluwer, </publisher> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: The shortest solution follows the path along the diagonal between the initial and goal states. 3 Automatically Generating Abstractions This section reviews an algorithm for generating abstraction hierarchies <ref> [ Knoblock, 1990b ] </ref> and describes the hierarchy produced for the three-disk Tower of Hanoi problem. The algorithm is given a set of operators, which describe a domain, and it produces an abstraction hierarchy by partitioning and ordering the literals in the domain. <p> The use of the abstraction hierarchy described in the previous section provides an exponential reduction in the size of the search space <ref> [ Knoblock, 1990b ] </ref> .
Reference: [ Knoblock, 1991 ] <author> Craig A. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year> <note> Available as Technical Report CMU-CS-91-120. </note>
Reference-contexts: The abstractions are generated by the alpine abstraction learner <ref> [ Knoblock, 1990a, Knoblock, 1991 ] </ref> and then used in a hierarchical version of prodigy [ Minton et al., 1989, Carbonell et al., 1991 ] , a means-ends analysis problem solver.
Reference: [ Korf, 1980 ] <author> Richard E. Korf. </author> <title> Toward a model of representation changes. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 41-78, </pages> <year> 1980. </year>
Reference: [ Minton et al., 1989 ] <author> Steven Minton, Craig A. Knoblock, Daniel R. Kuokka, Yolanda Gil, Robert L. Joseph, and Jaime G. Carbonell. </author> <title> PRODIGY 2.0: The manual and tutorial. </title> <type> Technical Report CMU-CS-89-146, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1989. </year>
Reference-contexts: This papers reviews an approach that generates abstractions for the Tower of Hanoi, shows that the abstractions provide an exponential reduction in the size of the search space, and then analyzes the use of the abstractions in the prodigy problem solver <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> . fl The author is supported by an Air Force Laboratory Graduate Fellowship through the Human Resources Laboratory at Brooks AFB. <p> The abstractions are generated by the alpine abstraction learner [ Knoblock, 1990a, Knoblock, 1991 ] and then used in a hierarchical version of prodigy <ref> [ Minton et al., 1989, Carbonell et al., 1991 ] </ref> , a means-ends analysis problem solver. To evaluate the abstractions empirically, prodigy was run both with and without the abstractions using breadth-first search, depth-first search, and depth-first search with an additional restriction on how the problem is solved.
Reference: [ Nilsson, 1971 ] <author> Nils J. Nilsson. </author> <booktitle> Problem-Solving Methods in Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1971. </year>
Reference-contexts: The number of possible states for a given puzzle with n disks is 3 n since each disk can be on 2 one of the three pegs. The state space for the three-disk puzzle is shown in Figure 2 <ref> [ Nilsson, 1971 ] </ref> . Each node represents a state and is labeled with the a picture of the state, and each arrow represents an operator that can be applied to reach the adjacent state.
Reference: [ VanLehn, 1989 ] <author> Kurt VanLehn. </author> <title> Discovering problem solving strategies: What humans do and machines don't (yet). </title> <booktitle> In Proceedings of the Sixth International Workshop on Machine Learning, </booktitle> <pages> pages 215-217, </pages> <address> Ithaca, NY, </address> <year> 1989. </year> <month> 11 </month>
Reference-contexts: If we impose some additional structure on the domain the difference will be much greater. Consider a variation of the Tower of Hanoi problem that has the additional restriction that no disk can be moved twice in a row <ref> [ Amarel, 1984, VanLehn, 1989 ] </ref> . This constrains the problem considerably since the suboptimal plans in the previous graph were caused by moving disks to the wrong peg. Figure 9 compares the nodes searched and the solution lengths for the two configurations with this additional restriction on the domain.
References-found: 14

