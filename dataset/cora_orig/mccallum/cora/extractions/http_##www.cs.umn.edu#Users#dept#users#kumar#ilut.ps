URL: http://www.cs.umn.edu/Users/dept/users/kumar/ilut.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kumar/
Root-URL: http://www.cs.umn.edu
Email: fkarypis, kumarg@cs.umn.edu  
Title: Parallel Threshold-based ILU Factorization  
Author: George Karypis and Vipin Kumar 
Note: Last updated on November 4, 1996 at 3:48pm  
Address: Minneapolis, MN 55455,  
Affiliation: University of Minnesota, Department of Computer Science  
Pubnum: Technical Report #96-061  
Abstract: Factorization algorithms based on threshold incomplete LU factorization have been found to be quite effective in preconditioning iterative system solvers. However, their parallel formulations have not been well understood and they have been considered to be unsuitable for distributed memory parallel computers. In this paper we present a highly parallel formulation of such factorization algorithms. Our algorithm utilizes parallel multilevel k-way partitioning and independent set computation algorithms to effectively parallelize both the factorization as well as the solution of the resulting triangular systems, used in the application of the preconditioner. Our experiments on Cray T3D show that significant speedup can be achieved in both operations; thus, allowing threshold incomplete factorizations to be successfully used as preconditioners in parallel iterative solvers for sparse linear systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Owe Axelsson. </author> <title> Iterative Solution Methods. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: processors of the parallel computer so that the amount of communication required by each of the above computational kernels is significantly decreased. 2 Preconditioners Based on Incomplete LU Factorizations It is well known that the rate of convergence of iterative methods depends on the spectral properties of the coefficient matrix <ref> [1, 14] </ref>. This convergence rate can be greatly improved by transforming the original system Ax D b to an equivalent one (i.e., one that has the same solution), that has more favorable spectral properties. A preconditioner is a matrix M, that attempts to perform such a transformation.
Reference: [2] <author> E. F. D'Azevedo, F. A. Forsyth, and W. P. Tang. </author> <title> Towards a cost effective ilu preconditioner with high level fill. </title> <journal> BIT, </journal> <year> 1992. </year>
Reference-contexts: For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> This can cause preconditioners to be ineffective for matrices arising in many realistic applications [14]. To strike a balance between reduced computation requirements and increased effectiveness, threshold-based incomplete LU factorizations have been developed <ref> [16, 3, 2, 12] </ref>. In these factorization schemes, a fill element is dropped during the Gaussian elimination processes based only on the magnitude of the element rather than its location.
Reference: [3] <author> K. A. Gallivan, A. Sameh, and Z. Slatev. </author> <title> A parallel hybrid sparse linear system solver. </title> <journal> Computing Systems in Engineering, </journal> <volume> 1 </volume> <pages> 183-195, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> This can cause preconditioners to be ineffective for matrices arising in many realistic applications [14]. To strike a balance between reduced computation requirements and increased effectiveness, threshold-based incomplete LU factorizations have been developed <ref> [16, 3, 2, 12] </ref>. In these factorization schemes, a fill element is dropped during the Gaussian elimination processes based only on the magnitude of the element rather than its location.
Reference: [4] <author> Anshul Gupta, George Karypis, and Vipin Kumar. </author> <title> Highly scalable parallel algorithms for sparse matrix factorization. </title> <type> Technical Report 94-63, </type> <institution> Department of Computer Science, University of Minnesota, Minneapolis, MN, </institution> <year> 1994. </year> <note> To appear in IEEE Transactions on Parallel and Distributed Computing. Available on WWW at URL http://www.cs.umn.edu/karypis/papers/sparse-cholesky.ps. </note>
Reference-contexts: In complete factorization algorithms, the sets S l are constructed using graph partitioning (i.e., separators in nested dissection orderings) prior to the numerical factorization and a careful mapping of A I on to processors leads to a highly scalable factorization algorithm <ref> [4] </ref>. In incomplete factorization algorithms, the sets S l are often computed as independent set of nodes of the successively reduced matrices A I l [5, 9, 14, 11].
Reference: [5] <author> Mark T. Jones and Paul E. Plassmann. </author> <title> Scalable iterative solution of sparse linear systems. </title> <journal> Parallel Computing, </journal> <volume> 20 </volume> <pages> 753-773, </pages> <year> 1994. </year>
Reference-contexts: In incomplete factorization algorithms, the sets S l are often computed as independent set of nodes of the successively reduced matrices A I l <ref> [5, 9, 14, 11] </ref>. Since nodes in S l are independent (i.e., there is no direct connection between them), all of them can be factored concurrently.
Reference: [6] <author> G. Karypis and V. Kumar. </author> <title> Parallel multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 96-036, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1996. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel kparallel.ps. A short version appears in Supercomputing 96. </note>
Reference-contexts: The algorithm terminates when the rows in the reduced matrix are independent, in which case all of them can be eliminated in parallel. This parallel ILUT algorithm uses our parallel multilevel k-way partitioning algorithm <ref> [6] </ref> to produce a very good initial domain decomposition with a small number of interface nodes. <p> Note that our matrix-vector multiplication algorithm achieves almost linear speedup indicating that the communication overhead (caused by nodes on the partition boundary) is very small. This demonstrates that our parallel multilevel k-way partitioning algorithm <ref> [6] </ref> produces high quality partitions in a real application.
Reference: [7] <author> R. N. Klepfer, C.R. Jhonson, </author> <title> and R.S. MaxLeod. The effects of inhomogeneities and anisotropies on electrocardiographic fields: A three-dimensional finite element study. </title> <booktitle> In IEEE Engineering in Medice and Biology Society, 17th Annual International Conference, </booktitle> <year> 1995. </year>
Reference-contexts: a PDE discretized with centered differences on a 40 fi 40 fi 40 grid, leading to a system with 54,872 equations and 164616 non-zeros, whereas TORSO is a finite element matrix with 201,142 equations and 1479989 non-zeros arising in computing the ECG fields of the human thorax using Laplace's equation <ref> [7] </ref>. Performance of the Factorization Table 1 shows the run time of our parallel ILUT and ILUT* algorithms. For each one of the ILUT and ILUT* algorithms, nine different factorizations are shown that correspond to the different choices for m and t.
Reference: [8] <author> Michael Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: Consequently, the distributed phase (i.e., second phase) of the algorithm factors only a small number of nodes. 4.1 Computing Maximal Independent Sets The independent sets of the successively reduced matrices A I l are computed using a parallel formulation of Luby's <ref> [8] </ref> algorithm. A maximal independent set I of a set of vertices S is computed via Luby's algorithm in an incremental fashion as follows. <p> Now this process is repeated for the vertices in S that are neither in I nor adjacent to vertices in I , and I is augmented similarly. This incremental augmentation of I ends when no more vertices can be inserted in I . It is shown in <ref> [8] </ref> that one iteration of Luby's algorithm requires a total 7 of O.log jSj/ such augmentation steps to find a maximal independent set of a S.
Reference: [9] <author> S. Ma and Y. Saad. </author> <title> Distributed ILU(0) and SOR preconditioners for unstructured sparse linear systems. </title> <type> Technical Report 94-027, </type> <institution> Army High Performance Computing Research Center, University of Minnesota, Minneapolis, MN, </institution> <year> 1994. </year>
Reference-contexts: In incomplete factorization algorithms, the sets S l are often computed as independent set of nodes of the successively reduced matrices A I l <ref> [5, 9, 14, 11] </ref>. Since nodes in S l are independent (i.e., there is no direct connection between them), all of them can be factored concurrently.
Reference: [10] <author> J. A. Meijerink and H. A. van der Vorst. </author> <title> An iterative solution method for linear systems fo which the coefficient matrix is a symmetric m-matrix. </title> <journal> Math. Comp., </journal> <volume> 31(137) </volume> <pages> 148-162, </pages> <year> 1977. </year>
Reference-contexts: For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> Alternatively, the set S can be determined dynamically as the factorization progresses as in threshold-based incomplete factorizations. Static-sparsity-pattern incomplete LU factorizations based on levels of fill <ref> [10, 15] </ref> are used extensively. In these schemes, the set S is constructed by allowing fill entries to propagate up to k levels, for some constant k. These factorizations are referred to as ILU (k).
Reference: [11] <author> Y. Saad. ILUM: </author> <title> A parallel multielimination ilu preconditioner for general sparse matrices. </title> <type> Technical Report CS-92-241, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1992. </year>
Reference-contexts: Threshold-based incomplete LU factorization have been found to be quite effective in preconditioning iterative system solvers [12]. However, because these factorizations allow the fill elements to be created dynamically, their parallel formulations had not been well understood, and they have been considered to be unsuitable for distributed-memory parallel computers <ref> [11] </ref>. <p> In incomplete factorization algorithms, the sets S l are often computed as independent set of nodes of the successively reduced matrices A I l <ref> [5, 9, 14, 11] </ref>. Since nodes in S l are independent (i.e., there is no direct connection between them), all of them can be factored concurrently. <p> As a result, interface nodes that have the same color are not any more independent. Thus, the sets of nodes to be factored concurrently (i.e., the sets S l ) need to be computed dynamically as the factorization progresses <ref> [11] </ref>. does not change, a coloring (shown in (a)) of the interface vertices is sufficient to extract concurrency during their factorization. However, ILUT factorization allows fill (shown in (b)) making impossible to use this coloring to determine independent set of nodes and extract concurrency.
Reference: [12] <author> Y. Saad. ILUT: </author> <title> a dual threshold incomplete ILU factorization. Numerical Linear Algebra with Applications, </title> <booktitle> 1 </booktitle> <pages> 387-402, </pages> <year> 1994. </year>
Reference-contexts: The major computational kernels of an iterative method are (i) computation of preconditioner, (ii) multiplication of a sparse matrix with a vector, and (iii) application of the preconditioner. Threshold-based incomplete LU factorization have been found to be quite effective in preconditioning iterative system solvers <ref> [12] </ref>. However, because these factorizations allow the fill elements to be created dynamically, their parallel formulations had not been well understood, and they have been considered to be unsuitable for distributed-memory parallel computers [11]. <p> For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> This can cause preconditioners to be ineffective for matrices arising in many realistic applications [14]. To strike a balance between reduced computation requirements and increased effectiveness, threshold-based incomplete LU factorizations have been developed <ref> [16, 3, 2, 12] </ref>. In these factorization schemes, a fill element is dropped during the Gaussian elimination processes based only on the magnitude of the element rather than its location. <p> These schemes usually lead to preconditioners that have moderate computational requirements and are generally more robust than static sparsity pattern incomplete factorizations. 2.1 ILUT Factorization Algorithm One example of threshold based factorizations is the ILUT (m, t) incomplete factorization algorithm <ref> [12] </ref>. ILUT employs a dual dropping strategy that is able to control the computational requirements during the factorization as well as during the application of the preconditioner. <p> The ILUT algorithm can be implemented quite efficiently by using appropriate data structures <ref> [12, 14] </ref>. A common implementation is to use a full vector for w and a companion pointer which points to the positions of its non-zero elements.
Reference: [13] <author> Y. Saad and M. H. Schultz. </author> <title> GMRES: a generalized minimal residual algorithm for solving nonsymmetric linear systems. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 7 </volume> <pages> 856-869, </pages> <year> 1986. </year>
Reference-contexts: Nevertheless, our parallel algorithms for solving the triangular systems are still able to achieve very good speedups. Preconditioning Performance To compare the quality of the factorizations produced by the parallel ILUT and ILUT* algorithms we used them as preconditioners in a GMRES iterative solver <ref> [13] </ref>. Table 3 shows the amount of time and the total number of matrix-vector products required to solve our two test matrices on 128 processors.
Reference: [14] <author> Yousef Saad. </author> <title> Iterative Methods for Sparse Linear Systems. </title> <publisher> PWS Publishing, </publisher> <address> Boston, MA, </address> <year> 1996. </year>
Reference-contexts: processors of the parallel computer so that the amount of communication required by each of the above computational kernels is significantly decreased. 2 Preconditioners Based on Incomplete LU Factorizations It is well known that the rate of convergence of iterative methods depends on the spectral properties of the coefficient matrix <ref> [1, 14] </ref>. This convergence rate can be greatly improved by transforming the original system Ax D b to an equivalent one (i.e., one that has the same solution), that has more favorable spectral properties. A preconditioner is a matrix M, that attempts to perform such a transformation. <p> Furthermore, ILU (k) factorizations are insensitive to the magnitude of the elements, since fill elements are dropped only based upon the structure of the original matrix. This can cause preconditioners to be ineffective for matrices arising in many realistic applications <ref> [14] </ref>. To strike a balance between reduced computation requirements and increased effectiveness, threshold-based incomplete LU factorizations have been developed [16, 3, 2, 12]. In these factorization schemes, a fill element is dropped during the Gaussian elimination processes based only on the magnitude of the element rather than its location. <p> The ILUT algorithm can be implemented quite efficiently by using appropriate data structures <ref> [12, 14] </ref>. A common implementation is to use a full vector for w and a companion pointer which points to the positions of its non-zero elements. <p> In incomplete factorization algorithms, the sets S l are often computed as independent set of nodes of the successively reduced matrices A I l <ref> [5, 9, 14, 11] </ref>. Since nodes in S l are independent (i.e., there is no direct connection between them), all of them can be factored concurrently.
Reference: [15] <author> J. W. Watts-III. </author> <title> A conjugate gradient truncated direct method for the iterative solution of the reservoir pressure equation. </title> <journal> Society of Petroleum Engineer Journal, </journal> <volume> 21 </volume> <pages> 345-353, </pages> <year> 1981. </year>
Reference-contexts: For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> Alternatively, the set S can be determined dynamically as the factorization progresses as in threshold-based incomplete factorizations. Static-sparsity-pattern incomplete LU factorizations based on levels of fill <ref> [10, 15] </ref> are used extensively. In these schemes, the set S is constructed by allowing fill entries to propagate up to k levels, for some constant k. These factorizations are referred to as ILU (k).
Reference: [16] <author> D. P. Young, R. G. Melvin, F. T. Johnson, J. E. Bussoletti, L. B. Wigton, and S. S. Samant. </author> <title> Application of sparse matrix solvers as effective preconditioners. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 10 </volume> <pages> 1186-1199, </pages> <year> 1989. </year> <month> 18 </month>
Reference-contexts: For efficient implementation, the matrix M must be such that it is relatively inexpensive to solve linear systems of the form M y D c. A broad class of widely used preconditioners is based on incomplete factorizations of the coefficient matrix (ILU) <ref> [10, 15, 16, 3, 2, 12] </ref>. A factorization is called incomplete if during the factorization process certain fill elements are ignored. Such preconditioners are given in the form M D LU where L and U are the lower- and upper-triangular matrices of the incomplete factorization. <p> This can cause preconditioners to be ineffective for matrices arising in many realistic applications [14]. To strike a balance between reduced computation requirements and increased effectiveness, threshold-based incomplete LU factorizations have been developed <ref> [16, 3, 2, 12] </ref>. In these factorization schemes, a fill element is dropped during the Gaussian elimination processes based only on the magnitude of the element rather than its location.
References-found: 16

