URL: http://www.almaden.ibm.com/cs/exotica/exotica_overview_sigois95.ps
Refering-URL: http://ccs-www.cs.umass.edu/db/wf.html
Root-URL: 
Email: kamathg@almaden.ibm.com  
Title: Exotica: A Project on Advanced Transaction Management and Workflow Systems  
Author: C. Mohan D. Agrawal G. Alonso A. El Abbadi R. Gunthor M. Kamath fmohan, agrawal, gustavoa, amr, rgunther, 
Address: 650 Harry Road, San Jose, CA 95120, USA  
Affiliation: IBM Almaden Research Center,  
Date: 1, August 1995 1  
Note: To appear in ACM SIGOIS Bulletin, Vol. 16, No.  
Abstract: This paper is an overview of the Exotica project, currently in progress at the IBM Almaden Research Center. The project aims at exploring several research areas from advanced transaction management concepts to client/server architectures and mobile computing within the context of business processes and workflow management. The ultimate goal is to incorporate these ideas into IBM's products and prototypes. The project involves IBM groups in Almaden (U.S.A.), Hursley (U.K.), Boblingen (Germany), and Vienna (Austria). In this paper we briefly describe two IBM products, FlowMark, a workflow management system, and MQSeries, a messaging system, as the environments in which we are focusing our research. We also discuss some of our results in the areas of availability, replication, distribution, and advanced transaction models, as well as describe our future research directions. 
Abstract-found: 1
Intro-found: 1
Reference: [AAE + 94] <author> G. Alonso, D. Agrawal, A. El Abbadi, C. Mohan, R. Gunthor, and M. Kamath. Exotica/FMQM: </author> <title> A Persistent Message-Based Architecture for Distributed Workflow Management. </title> <type> Research Report RJ 9912, </type> <institution> IBM Almaden Research Center, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: We have proposed architectures for enhancing FlowMark's availability and scalability characteristics by using MQSeries and multiple ObjectStore servers <ref> [AAE + 94, AKA + 94] </ref>. 3.1 Message-Based Workflow Management In designing workflow management systems there is a trend, as we have seen in the case of FlowMark, towards client server architectures in which a dedicated server provides most of the functionality of the system while the computing potential at the <p> This is because the database needs to be accessed to determine what activities are then eligible to execute (i.e., to navigate the process graphs). Even activities that are ready to execute cannot be executed until the ObjectStore server recovers. Unfortunately, ObjectStore does not have support for hot standbys. In <ref> [AAE + 94] </ref>, we explore the possibility of implementing a fully distributed FlowMark system and discuss the trade-offs of our approach with respect to the current centralized architecture of FlowMark.
Reference: [AKA + 94] <author> G. Alonso, M. Kamath, D. Agrawal, A. El Abbadi, R. Gunthor, and C. Mohan. </author> <title> Failure Handling in Large Scale Workflow Management Systems. </title> <type> Research Report RJ 9913, </type> <institution> IBM Almaden Research Center, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: We have proposed architectures for enhancing FlowMark's availability and scalability characteristics by using MQSeries and multiple ObjectStore servers <ref> [AAE + 94, AKA + 94] </ref>. 3.1 Message-Based Workflow Management In designing workflow management systems there is a trend, as we have seen in the case of FlowMark, towards client server architectures in which a dedicated server provides most of the functionality of the system while the computing potential at the <p> centralized database, today FlowMark supports such functionality very easily. 3.2 Another Approach to Fault-Tolerance and Scalability In contrast to the more radical approach taken in Exotica/FMQM which involved replacing ObjectStore completely with an MQSeries-based implementation, we also studied the implications of a more evolutionary approach to improving availability and scalability <ref> [AKA + 94] </ref>. The latter approach is to have multiple clusters of FlowMark servers where all the FlowMark servers in a given cluster are all connected to the same ObjectStore server but the different clusters connect to different ObjectStore servers. <p> the remaining clusters and also continue executing activities belonging to instances managed by the surviving clusters. 3.3 Mapping Advanced Transaction Models to FlowMark In the Exotica project, we have also proposed a way to take user specifications of Sagas or Flexible Transactions and mapping them automatically into FlowMark process schemas <ref> [AKA + 94] </ref>. We believe that this is very useful functionality for workflow modelers using FlowMark. It also shows the modeling power of FlowMark's features.
Reference: [ELLR90] <author> A.K. Elmagarmid, Y. Leu, W. Litwin, and M.E. Rusinkiewicz. </author> <title> A Multidatabase Transaction Model for Interbase. </title> <booktitle> In Proc. of the 16th VLDB Conference, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: editing for which the traditional transaction model is not adequate, and also those related to modeling business processes, i.e., workflows, which involve executing multiple interrelated transactions, potentially on behalf of multiple users, several advanced transaction models have been proposed: Nested Transactions [Mos81], Sagas [GMS87], ConTract model [WR92], Flex Transaction model <ref> [ELLR90] </ref>, and Split-Transactions [PKH88], among others. These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications [Elm92, Moh94].
Reference: [Elm92] <editor> A.K. Elmagarmid, editor. </editor> <title> Transaction Models for Advanced Database Applications. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications <ref> [Elm92, Moh94] </ref>. While much of this work has been done in academic research projects, some industrial groups are also actively working on these topics, with a few of the models having been implemented as prototypes. Unfortunately, currently commercially available products incorporate very few of these results.
Reference: [Fry94] <author> C. Frye. </author> <title> Move to Workflow Provokes Business Process Scrutiny. </title> <journal> Software Magazine, </journal> <pages> pages 77-89, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction During the past few years, there has been a growing interest in workflow applications as a way of supporting complex business processes in modern corporations <ref> [Fry94] </ref>. The current popularity of business process reengi-neering has served as an added incentive to further this trend. <p> This leaves to the application programmer the task of dealing with recovery, transactional dependencies, coordination, and other correctness issues. In contrast to this situation, there are already many workflow products in the market <ref> [Fry94] </ref> that are being widely used for the same applications targeted by advanced transaction models. Some of the issues we cover in this paper are availability, distributed execution and replication.
Reference: [GMS87] <author> H. Garc ia-Molina and K. Salem. Sagas. </author> <booktitle> In Proc. 1987 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year> <note> To appear in ACM SIGOIS Bulletin, Vol. 16, No. 1, </note> <month> August </month> <year> 1995 </year> <month> 7 </month>
Reference-contexts: applications such as CAD/CAM, CASE, or collaborative editing for which the traditional transaction model is not adequate, and also those related to modeling business processes, i.e., workflows, which involve executing multiple interrelated transactions, potentially on behalf of multiple users, several advanced transaction models have been proposed: Nested Transactions [Mos81], Sagas <ref> [GMS87] </ref>, ConTract model [WR92], Flex Transaction model [ELLR90], and Split-Transactions [PKH88], among others. These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications [Elm92, Moh94].
Reference: [Hsu93] <author> M. Hsu. </author> <title> Special Issue on Workflow and Extended Transaction Systems. </title> <journal> Bulletin of the Technical Committee on Data Engineering, IEEE, </journal> <volume> 16(2), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: California at Santa Barbara, CA 93106, USA. z Currently visiting IBM Almaden from the Computer Science Department at the University of Massachusetts, Amherst, MA 01003, USA. 2 To appear in ACM SIGOIS Bulletin, Vol. 16, No. 1, August 1995 advanced transaction management concepts in the context of real user needs <ref> [Hsu93] </ref>. This work is part of the Exotica project, recently initiated at the IBM Almaden Research Center.
Reference: [IBM93] <author> IBM. </author> <title> Message Queue Interface: </title> <type> Technical Reference. </type> <institution> IBM, </institution> <month> April </month> <year> 1993. </year> <note> Document No. SC33-0850-01. </note>
Reference-contexts: They shield the complexities of the underlying multivendor, multiprotocol networks, allowing a more user-friendly programming environment in an open, distributed world where interoperability is essential. For this purpose, IBM has defined an application programming interface (API) standard for messaging called Message Queue Interface (MQI) <ref> [IBM93] </ref>. In addition, IBM has also released a family of products called MQSeries that supports MQI [MD94]. MQSeries products operate on IBM and non-IBM platforms and they support the architected MQI.
Reference: [LA94] <author> F. Leymann and W. Altenhuber. </author> <title> Managing Business Processes as an Information Resource. </title> <journal> IBM Systems Journal, </journal> <volume> 33(2) </volume> <pages> 326-348, </pages> <year> 1994. </year>
Reference-contexts: It follows a layered client/server architecture <ref> [LA94, LR94] </ref> that supports the concepts of buildtime and runtime, implemented as clients of a FlowMark server. The server, in turn, acts as a client of a centralized database, ObjectStore, where both runtime and buildtime workflow information is stored.
Reference: [Ley95] <author> Frank Leymann. </author> <title> Supporting business transactions via partial backward recovery in workflow management systems. In GI-Fachtagung Datenbanken in Buro Technik und Wissenschaft - BTW'95, </title> <address> Dresden, Germany, March 1995. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: This capability is important if we want to perform replication only in a few cases due to the cost involved. Recently, a proposal, called Spheres of Joint Compensation (SJCs), for providing backward recovery in FlowMark has been made <ref> [Ley95] </ref>. We are studying the implications of this proposal on the externals and internals of FlowMark. An SJC can be thought of as a business transaction (e.g., like a saga). It consists of a collection of FlowMark activities (simple and/or non-simple).
Reference: [LR94] <author> F. Leymann and D. </author> <title> Roller. Business Processes Management with FlowMark. </title> <booktitle> In Proc. 39th IEEE Computer Society Int'l Conference (CompCon), Digest of Papers, </booktitle> <pages> pages 230-233, </pages> <address> San Francisco, California, </address> <month> February 28 March 4 </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: It follows a layered client/server architecture <ref> [LA94, LR94] </ref> that supports the concepts of buildtime and runtime, implemented as clients of a FlowMark server. The server, in turn, acts as a client of a centralized database, ObjectStore, where both runtime and buildtime workflow information is stored.
Reference: [MD94] <author> C. Mohan and R. Dievendorff. </author> <title> Recent Work on Distributed Commit Protocols, and Recoverable Messaging and Queuing. </title> <journal> Bulletin of the Technical Committee on Data Engineering, </journal> <volume> 17(1) </volume> <pages> 22-28, </pages> <address> March 1994. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: For this purpose, IBM has defined an application programming interface (API) standard for messaging called Message Queue Interface (MQI) [IBM93]. In addition, IBM has also released a family of products called MQSeries that supports MQI <ref> [MD94] </ref>. MQSeries products operate on IBM and non-IBM platforms and they support the architected MQI. Communication takes place through named queues that do not require all participating programs to be available, i.e., up and running, simultaneously. Moreover, MQI is not sensitive to network transport protocol differences. <p> We call this the gap problem. The gap problem is not unique to FlowMark. Problems like this exist with most of the proposals in the research literature. As was pointed out in <ref> [MD94] </ref>, the problems are severe when pre-existing applications have to be accommodated. Some of these applications may even execute more than one ACID transaction in a single invocation of an application. As we mentioned before, the FlowMark client has amnesia when a failure occurs.
Reference: [Moh94] <author> C. Mohan. </author> <title> Advanced Transaction Models Survey and Critique, </title> <booktitle> 1994. Tutorial presented at ACM SIGMOD International Conference on Management of Data. </booktitle>
Reference-contexts: These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications <ref> [Elm92, Moh94] </ref>. While much of this work has been done in academic research projects, some industrial groups are also actively working on these topics, with a few of the models having been implemented as prototypes. Unfortunately, currently commercially available products incorporate very few of these results.
Reference: [Mos81] <author> J.E.B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> M.I.T. Laboratory for Computer Science, </institution> <address> Cambridge, Massachusetts, </address> <publisher> MIT Press, </publisher> <year> 1981. </year>
Reference-contexts: of new applications such as CAD/CAM, CASE, or collaborative editing for which the traditional transaction model is not adequate, and also those related to modeling business processes, i.e., workflows, which involve executing multiple interrelated transactions, potentially on behalf of multiple users, several advanced transaction models have been proposed: Nested Transactions <ref> [Mos81] </ref>, Sagas [GMS87], ConTract model [WR92], Flex Transaction model [ELLR90], and Split-Transactions [PKH88], among others. These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications [Elm92, Moh94].
Reference: [MTO93] <author> C. Mohan, Kent Treiber, and Ron Obermarck. </author> <title> Algorithms for the management of remote backup data bases for disaster recovery. </title> <booktitle> In Proceedings 9th International Conference on Data Engineering, </booktitle> <address> Vienna, Austria, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: One possibility is to send to the backup node what is contained in the TelePath messages sent by FlowMark clients to FlowMark servers on the termination of an activity or when a user tries to execute a ready activity. Approaches like the one in <ref> [MTO93] </ref> in which log records are used to maintain a backup copy of a database are probably not easy to follow here since they would require changes to the internals of ObjectStore. Also, the logging done in ObjectStore is very physical in nature (i.e., there is no operation logging).
Reference: [PKH88] <author> Calton Pu, Gail E. Kaiser, and Norman Hutchinson. </author> <title> Split-Transactions for Open-Ended Activities. </title> <booktitle> In Proceedings 14th Conference on Very Large Data Bases (VLDB), </booktitle> <pages> pages 26-37, </pages> <address> Los Angeles, California, </address> <year> 1988. </year>
Reference-contexts: the traditional transaction model is not adequate, and also those related to modeling business processes, i.e., workflows, which involve executing multiple interrelated transactions, potentially on behalf of multiple users, several advanced transaction models have been proposed: Nested Transactions [Mos81], Sagas [GMS87], ConTract model [WR92], Flex Transaction model [ELLR90], and Split-Transactions <ref> [PKH88] </ref>, among others. These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications [Elm92, Moh94].
Reference: [WR92] <author> H. Waechter and A. Reuter. </author> <title> The ConTract Model. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <booktitle> chapter 7, </booktitle> <pages> pages 219-263. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, </address> <year> 1992. </year>
Reference-contexts: CAD/CAM, CASE, or collaborative editing for which the traditional transaction model is not adequate, and also those related to modeling business processes, i.e., workflows, which involve executing multiple interrelated transactions, potentially on behalf of multiple users, several advanced transaction models have been proposed: Nested Transactions [Mos81], Sagas [GMS87], ConTract model <ref> [WR92] </ref>, Flex Transaction model [ELLR90], and Split-Transactions [PKH88], among others. These models aim at relaxing some of the restrictions imposed by the classical ACID transaction model, thus making it more appropriate for the new applications [Elm92, Moh94].
References-found: 17

