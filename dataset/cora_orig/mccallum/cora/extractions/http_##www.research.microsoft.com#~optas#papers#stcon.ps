URL: http://www.research.microsoft.com/~optas/papers/stcon.ps
Refering-URL: http://www.research.microsoft.com/~optas/work.html
Root-URL: http://www.research.microsoft.com
Email: (jeff@cs.yorku.ca)  (ckpoon@cs.cityu.edu.hk)  (optas@cs.toronto.edu)  
Title: Tight Lower Bounds for st-Connectivity on the NNJAG Model  
Author: Jeff Edmonds Chung Keung Poon Dimitris Achlioptas 
Keyword: S log log n) fi (nS= log  
Note: n) 1=2 was  
Abstract: Directed st-connectivity is the problem of deciding whether or not there exists a path from a distinguished node s to a distinguished node t in a directed graph. We prove a time-space lower bound on the probabilistic NNJAG model of Poon [Poo93]. Let n be the number of nodes in the input graph and S, T be the space and time used by the NNJAG, respectively. We show that for any ffi &gt; 0 if an NNJAG uses space S 2 O(n 1ffi ) then T 2 2 (log 2 (n=S)) , otherwise T 2 2 (log 2 ( n log n S )= log log n) fi (nS= log n) 1=2 . (In a preliminary version of this paper by Edmonds and Poon [EP95], a lower bound of T 2 2 (log 2 ( n log n proved.) Our result greatly improves the previous lower bound of ST 2 (n 2 = log n) on the JAG model by Barnes and Edmonds [BE93] and that of S 1=3 T 2 (n 4=3 ) on the NNJAG model by Edmonds [Edm93a]. Our lower bound is tight for S 2 O(n 1ffi ), for any ffi &gt; 0, matching the upper bound of Barnes et al. [BBRS92]. As a corollary of this improved lower bound we obtain the first tight space lower bound of (log 2 n) on the NNJAG model. No tight space lower bound was previously known even for the more restricted JAG model. 
Abstract-found: 1
Intro-found: 1
Reference: [AKL + 79] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> October </month> <year> 1979. </year> <note> IEEE. </note>
Reference-contexts: Although the JAG model is structured, it is powerful enough to simulate most known algorithms for stcon and related problems. For example, depth-first and breadth-first search, random walks <ref> [AKL + 79] </ref> and the algorithms of Savitch and Barnes et al. can all be simulated on a JAG, see [CR80] and [Poo96]. To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. <p> For example, Nisan et al. [NSW92] showed that ustcon can be solved in O (log 1:5 n) space on a deterministic Turing machine. There is also a randomized O (log n) space, polynomial time algorithm (by Aleliunas et al. <ref> [AKL + 79] </ref>) and a deterministic O (log 2 n) space, polynomial time algorithm (by Nisan [Nis92]) for this problem. <p> Although it is not known whether the algorithms in [NSW92, Nis92] can be simulated on a JAG or NNJAG, ustcon can indeed be solved in O (log n) space and polynomial time on a JAG due to the existence of polynomial length universal traversal sequences <ref> [AKL + 79] </ref>. Thus one cannot hope to get super-polynomial time lower bounds for stcon by establishing similar bounds for ustcon. The first nontrivial lower bound explicitly for stcon was given by Barnes and Edmonds [BE93]. They showed that ST 2 (n 2 = log n) on the JAG model. <p> Within a polynomial factor of time and constant factor of space, so does allowing it to move pebble backwards along any directed edge [BBR + 90]. The idea is that one can treat the graph as undirected and using a universal traversal sequence <ref> [AKL + 79] </ref>, visit any vertex in polynomial 32 time. Hence whenever the branching program queries the out-edges of a node v, the enchanced NNJAG can place a pebble on node v (by the universal traversal sequence) and perform the same query on v.
Reference: [AN72] <author> K. B. Athreya and P. E. Ney, </author> <title> editors. Branching Processes. </title> <publisher> Springer-verlag, </publisher> <address> Berlin, </address> <year> 1972. </year>
Reference-contexts: If Z i denotes the number of alive vertices at level i then the sequence Z 0 = 1; Z 1 ; : : : ; Z i ; : : : forms a branching process <ref> [AN72] </ref>. We will be interested in the distribution of the number of alive vertices with depth d, i.e. the random variable Z d . The expected number of alive children for an alive node is (1 ff)f and the expected value of Z d is ((1 ff)f ) d .
Reference: [BBR + 90] <author> P. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph connectivity. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 429-438, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year> <note> IEEE. Full version submitted for journal publication. </note>
Reference-contexts: Regarding the time-space tradeoff, there are many lower bounds proved for ustcon on various weaker variants of the JAG model <ref> [BBR + 90, BRT92, CR80] </ref>. Edmonds [Edm93b] was the first to prove a time-space lower bound for ustcon on the regular JAG model (with bounded space). All these results apply to (directed) stcon, which contains ustcon as a special case. <p> Within a polynomial factor of time and constant factor of space, so does allowing it to move pebble backwards along any directed edge <ref> [BBR + 90] </ref>. The idea is that one can treat the graph as undirected and using a universal traversal sequence [AKL + 79], visit any vertex in polynomial 32 time.
Reference: [BBRS92] <author> Greg Barnes, Jonathan F. Buss, Walter L. Ruzzo, and Baruch Schieber. </author> <title> A sublinear space, polynomial time algorithm for directed s-t connectivity. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 27-33, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: Tompa [Tom82] showed that stcon cannot be solved in polynomial time and sub-linear space simultaneously by the repeated squaring method. However, Barnes et al. <ref> [BBRS92] </ref> gave a polynomial time algorithm for stcon that uses space S 2 n=2 fi ( p log n) , providing the first polynomial time, sub-linear space algorithm. This shows that the repeated squaring method is too restricted. <p> The bound also nearly matches the upper bound of T 2 2 O (log 2 ( n log n S )) fi n 3 (which is super polynomial for S 2 (n log n)=2 !( p log n) ) by Barnes et al. <ref> [BBRS92] </ref>. Here, by a more careful choice of parameters and a tighter analysis, we prove that for any ffi &gt; 0, a probabilistic NNJAG with 2-sided error, using space S 2 O (n 1ffi ), requires expected time T 2 2 (log 2 (n=S)) , matching the upper bound of [BBRS92]. <p> <ref> [BBRS92] </ref>. Here, by a more careful choice of parameters and a tighter analysis, we prove that for any ffi &gt; 0, a probabilistic NNJAG with 2-sided error, using space S 2 O (n 1ffi ), requires expected time T 2 2 (log 2 (n=S)) , matching the upper bound of [BBRS92]. In this paper, we define an S-space probabilistic NNJAG as a distribution of S-space deterministic NNJAGs. Hence the probabilistic NNJAG must use time T 2 2 O (S) or else it will cycle.
Reference: [BC82] <author> A. Borodin and S. A. Cook. </author> <title> A time-space tradeoff for sorting on a general sequential model of computation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 287-297, </pages> <month> May </month> <year> 1982. </year>
Reference-contexts: The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. [BFK + 81] and also used in many proofs of time-space tradeoff lower bounds, including <ref> [BC82, Bea91, BFMadH + 87, Yao88] </ref>. <p> Moreover, it uses no more time than J. To be able to discuss subcomputations of the NNJAG better it is convenient to recast the NNJAG as an r-way branching program <ref> [BC82] </ref> (defined below). While, though, an r-way branching 1 Note that in general, a standard NNJAG cannot be made pebble location redundant because if the move taken from an id (Q 1 ; 1 ) is a walk, the new pebble location, 2 , will depend on the input graph.
Reference: [BE93] <author> Greg Barnes and Jeff Edmonds. </author> <title> Time-space lower bounds for directed s-t connectivity on JAG models. </title> <booktitle> In 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 228-237, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Thus one cannot hope to get super-polynomial time lower bounds for stcon by establishing similar bounds for ustcon. The first nontrivial lower bound explicitly for stcon was given by Barnes and Edmonds <ref> [BE93] </ref>. They showed that ST 2 (n 2 = log n) on the JAG model. In fact their result was proved on a more powerful variant of JAG called many states, big step JAG which, unlike an ordinary JAG, is capable of traversing trees in O (log n) space. <p> In fact their result was proved on a more powerful variant of JAG called many states, big step JAG which, unlike an ordinary JAG, is capable of traversing trees in O (log n) space. Using a proof technique completely different from <ref> [BE93] </ref>, Edmonds [Edm93a] showed that S 1=3 T 2 (n 4=3 ) on the NNJAG model. These results still do not yield super-polynomial lower bounds on time no matter how small S is. <p> A (d; x; f )-layered graph, first defined in <ref> [BE93] </ref>, is a graph consisting of d layers, each containing x nodes. <p> This greatly improves the previous bounds of ST 2 (n 2 = log n) by Barnes and Edmonds <ref> [BE93] </ref> and S 1=3 T 2 (n 4=3 ) by Edmonds [Edm93a]. Moreover, the bound is tight for S 2 n 1 (1) . As a corollary, we also obtained a space lower bound of (log 2 n) on a probabilistic NNJAG.
Reference: [Bea91] <author> P. Beame. </author> <title> A general time-space tradeoff for finding unique elements. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(2) </volume> <pages> 270-277, </pages> <year> 1991. </year> <month> 33 </month>
Reference-contexts: The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. [BFK + 81] and also used in many proofs of time-space tradeoff lower bounds, including <ref> [BC82, Bea91, BFMadH + 87, Yao88] </ref>.
Reference: [BFK + 81] <author> A. Borodin, M. J. Fischer, D. G. Kirkpatrick, N. A. Lynch, and M. Tompa. </author> <title> A time-space tradeoff for sorting on non-oblivious machines. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 351-364, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: This paper borrows a lot of techniques from [Edm93a]. The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. <ref> [BFK + 81] </ref> and also used in many proofs of time-space tradeoff lower bounds, including [BC82, Bea91, BFMadH + 87, Yao88].
Reference: [BFMadH + 87] <author> A. Borodin, F. Fich, F. Meyer auf der Heide, E. Upfal, and A. Wigderson. </author> <title> A time-space tradeoff for element distinctness. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16(1) </volume> <pages> 97-99, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. [BFK + 81] and also used in many proofs of time-space tradeoff lower bounds, including <ref> [BC82, Bea91, BFMadH + 87, Yao88] </ref>.
Reference: [Bor82] <author> Allan Borodin. </author> <title> Structured vs. general models in computational complexity. </title> <booktitle> L'Enseignement Mathematique, XXVIII(3-4):171-190, July-December 1982. Also in [L'E82, </booktitle> <pages> pages 47-65]. </pages>
Reference-contexts: Unfortunately, proving non-trivial lower bounds for natural decision problems on any general model of computation, such as Turing machines and branching programs appears to be beyond the reach of current techniques. Thus, it is natural to consider structured computational models <ref> [Bor82] </ref> whose basic operations are based on the structure of the input, as opposed to being based on the bits in the input's encoding. A natural structured model for stcon is the "jumping automaton for graphs", or JAG, introduced by Cook and Rackoff [CR80].
Reference: [BRT92] <author> A. Borodin, W. L. Ruzzo, and M. Tompa. </author> <title> Lower bounds on the length of universal traversal sequences. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 45(2) </volume> <pages> 180-203, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Regarding the time-space tradeoff, there are many lower bounds proved for ustcon on various weaker variants of the JAG model <ref> [BBR + 90, BRT92, CR80] </ref>. Edmonds [Edm93b] was the first to prove a time-space lower bound for ustcon on the regular JAG model (with bounded space). All these results apply to (directed) stcon, which contains ustcon as a special case.
Reference: [BS83] <author> Piotr Berman and Janos Simon. </author> <title> Lower bounds on graph threading by probabilistic machines. </title> <booktitle> In 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 304-311, </pages> <address> Tucson, AZ, </address> <month> November </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: Cook and Rackoff [CR80] proved a lower bound of (log 2 n= log log n) on the space required for a JAG to compute stcon. Within the log log n factor, this is tight with Savitch's algorithm. Berman and Simon <ref> [BS83] </ref> extended this result to the probabilistic JAG model. More precisely, they showed that any probabilistic JAG that solves stcon within 2 log O (1) n expected time requires (log 2 n= log log n) space. <p> No tight space lower bound was previously known even for the more restricted JAG model. On the other hand, a coin-flipping probabilistic JAG or NNJAG (as defined in <ref> [BS83, Poo93] </ref>) can run usefully for up to 2 2 O (S) expected time. As mentioned before, it can solve stcon with O (log n) space and O (n n ) expected time. Thus, one can only prove a time-space lower bound on this coin-flipping model. <p> In addition, the argument is applied recursively yielding a substantially greater lower bound than what would be possible without recursion. We note that similar recursive techniques have also been used in <ref> [CR80, BS83, Yao88, Edm93b, Poo93] </ref>. 4 1.3 Organization of this paper We first define the NNJAG model in Section 2. In Section 3, we give the statement of our main result and its corollaries. In Sections 4 and 5, we describe the families of graphs used to defeat the NNJAG. <p> A major complaint to a JAG or NNJAG is its restricted access to the inputs. As pointed out in Etessami and Immerman [EI94], the space lower bounds of <ref> [CR80, BS83, Poo93] </ref> are proven on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. All it needs to do is to walk a "pebble" from node t backward and see if it hits node s.
Reference: [CR80] <author> S. A. Cook and C. W. Rackoff. </author> <title> Space lower bounds for maze threadability on restricted machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9(3) </volume> <pages> 636-652, </pages> <month> August </month> <year> 1980. </year>
Reference-contexts: A natural structured model for stcon is the "jumping automaton for graphs", or JAG, introduced by Cook and Rackoff <ref> [CR80] </ref>. A JAG moves a set of pebbles on the graph. There are two basic operations | moving a pebble along a directed edge in the graph, and jumping a pebble from its current location to the node occupied by another pebble. <p> Although the JAG model is structured, it is powerful enough to simulate most known algorithms for stcon and related problems. For example, depth-first and breadth-first search, random walks [AKL + 79] and the algorithms of Savitch and Barnes et al. can all be simulated on a JAG, see <ref> [CR80] </ref> and [Poo96]. To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. However, it is not clear how a nondeterministic JAG can simulate Immerman's and Szelepcsenyi's O (log n)-space algorithm for directed st-nonconnectivity 2 (stcon) [Imm88, Sze88]. <p> Using this added power, Poon [Poo93] showed how to simulate the Immerman / Szelepcsenyi algorithm on a nondeterministic NNJAG. Cook and Rackoff <ref> [CR80] </ref> proved a lower bound of (log 2 n= log log n) on the space required for a JAG to compute stcon. Within the log log n factor, this is tight with Savitch's algorithm. Berman and Simon [BS83] extended this result to the probabilistic JAG model. <p> Regarding the time-space tradeoff, there are many lower bounds proved for ustcon on various weaker variants of the JAG model <ref> [BBR + 90, BRT92, CR80] </ref>. Edmonds [Edm93b] was the first to prove a time-space lower bound for ustcon on the regular JAG model (with bounded space). All these results apply to (directed) stcon, which contains ustcon as a special case. <p> In addition, the argument is applied recursively yielding a substantially greater lower bound than what would be possible without recursion. We note that similar recursive techniques have also been used in <ref> [CR80, BS83, Yao88, Edm93b, Poo93] </ref>. 4 1.3 Organization of this paper We first define the NNJAG model in Section 2. In Section 3, we give the statement of our main result and its corollaries. In Sections 4 and 5, we describe the families of graphs used to defeat the NNJAG. <p> A major complaint to a JAG or NNJAG is its restricted access to the inputs. As pointed out in Etessami and Immerman [EI94], the space lower bounds of <ref> [CR80, BS83, Poo93] </ref> are proven on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. All it needs to do is to walk a "pebble" from node t backward and see if it hits node s.
Reference: [Edm93a] <author> Jeff Edmonds. </author> <title> Time-Space Lower Bounds for Undirected and Directed ST-Connectivity on JAG Models. </title> <type> PhD thesis, </type> <institution> University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: In fact their result was proved on a more powerful variant of JAG called many states, big step JAG which, unlike an ordinary JAG, is capable of traversing trees in O (log n) space. Using a proof technique completely different from [BE93], Edmonds <ref> [Edm93a] </ref> showed that S 1=3 T 2 (n 4=3 ) on the NNJAG model. These results still do not yield super-polynomial lower bounds on time no matter how small S is. <p> For example, when S 2 O (log n), his result implies that T 2 2 n c , for some constant c &gt; 0. This paper borrows a lot of techniques from <ref> [Edm93a] </ref>. The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. [BFK + 81] and also used in many proofs of time-space tradeoff lower bounds, including [BC82, Bea91, BFMadH + 87, Yao88]. <p> However, there are indeed dependencies among different roots. Fortunately if each event has a low probability of success no matter what outcomes of the other events have, then by the following lemma from Edmonds <ref> [Edm93a] </ref> the Chernoff bound still holds. Lemma 12.1 (Lemma 14 of [Edm93a]) Let R be the set of roots. For each r 2 R, let ^x r 2 f 0; 1 g be the random variable indicating the success of the r th trial. <p> However, there are indeed dependencies among different roots. Fortunately if each event has a low probability of success no matter what outcomes of the other events have, then by the following lemma from Edmonds <ref> [Edm93a] </ref> the Chernoff bound still holds. Lemma 12.1 (Lemma 14 of [Edm93a]) Let R be the set of roots. For each r 2 R, let ^x r 2 f 0; 1 g be the random variable indicating the success of the r th trial. <p> This greatly improves the previous bounds of ST 2 (n 2 = log n) by Barnes and Edmonds [BE93] and S 1=3 T 2 (n 4=3 ) by Edmonds <ref> [Edm93a] </ref>. Moreover, the bound is tight for S 2 n 1 (1) . As a corollary, we also obtained a space lower bound of (log 2 n) on a probabilistic NNJAG.
Reference: [Edm93b] <author> Jeff Edmonds. </author> <title> Time-space trade-offs for undirected st-connectivity on a JAG. </title> <booktitle> In Proceedings of the Twenty Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 718-727, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Regarding the time-space tradeoff, there are many lower bounds proved for ustcon on various weaker variants of the JAG model [BBR + 90, BRT92, CR80]. Edmonds <ref> [Edm93b] </ref> was the first to prove a time-space lower bound for ustcon on the regular JAG model (with bounded space). All these results apply to (directed) stcon, which contains ustcon as a special case. However, ustcon appears to be easier than stcon both in terms of space and time-space complexity. <p> In addition, the argument is applied recursively yielding a substantially greater lower bound than what would be possible without recursion. We note that similar recursive techniques have also been used in <ref> [CR80, BS83, Yao88, Edm93b, Poo93] </ref>. 4 1.3 Organization of this paper We first define the NNJAG model in Section 2. In Section 3, we give the statement of our main result and its corollaries. In Sections 4 and 5, we describe the families of graphs used to defeat the NNJAG.
Reference: [EI94] <author> Kousha Etessami and Neil Immerman. </author> <title> Reachability and the power of local ordering. </title> <booktitle> In 11th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 123-135, </pages> <month> February </month> <year> 1994. </year> <note> Springer-Verlag LNCS 775. </note>
Reference-contexts: A major complaint to a JAG or NNJAG is its restricted access to the inputs. As pointed out in Etessami and Immerman <ref> [EI94] </ref>, the space lower bounds of [CR80, BS83, Poo93] are proven on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space.
Reference: [EP95] <author> Jeff Edmonds and Chung Keung Poon. </author> <title> A nearly optimal time-space lower bound for directed st-connectivity on the NNJAG model. </title> <booktitle> In Proceedings of the Twenty Seventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-156, </pages> <address> Las Vegas, NV, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: upper and lower bounds and the fact that the Barnes et al. algorithm was obtained by combining several rather simple ideas, it seemed that further improvements to the upper bound were quite possible. 3 1.2 New results Rather surprisingly, in a preliminary version of this paper by Edmonds and Poon <ref> [EP95] </ref>, a lower bound of T 2 2 (log 2 ( n log n S )= log log n) fi (nS= log n) 1=2 is obtained.
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <month> December </month> <year> 1977. </year> <month> 34 </month>
Reference-contexts: Their probabilistic JAG is allowed to flip a coin in each step and is able to solve stcon with 1-sided error using O (log n) space and O (n n ) expected time, see Gill <ref> [Gil77] </ref>. In the following, we will refer to such a probabilistic machine as a coin-flipping machine. Poon [Poo93] further generalized the bound showing that S 2 ( log 2 n log log n+log log T ) for any coin-flipping probabilistic NNJAG with space S and expected time T .
Reference: [Imm88] <author> Neil Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. However, it is not clear how a nondeterministic JAG can simulate Immerman's and Szelepcsenyi's O (log n)-space algorithm for directed st-nonconnectivity 2 (stcon) <ref> [Imm88, Sze88] </ref>. This motivated Poon [Poo93] to introduce the more general Node-Named JAG (NNJAG) model, an extension of the JAG where the computation is allowed to depend on the names of the nodes on which the pebbles are located.
Reference: [Joh90] <author> David S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In Jan van Leeuwan, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity, chapter 2, </booktitle> <pages> pages 67-161. </pages> <publisher> M.I.T. </publisher> <address> Press/Elsevier, </address> <year> 1990. </year>
Reference-contexts: Stcon is also a candidate problem for separating the classes of SC and NC <ref> [Joh90] </ref>. Below we mention the previous works that are most relevant to our paper.
Reference: [L'E82] <editor> Logic and Algorithmic, </editor> <booktitle> An International Symposium Held in Honor of Ernst Specker, </booktitle> <address> Zurich, </address> <month> February 5-11, </month> <year> 1980. </year> <note> Monographie No. </note> <institution> 30 de L'Enseignement Mathematique, Universite de Geneve, </institution> <year> 1982. </year>
Reference: [LP82] <author> H. R. Lewis and C. H. Papadimitriou. </author> <title> Symmetric space-bounded computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 19(2) </volume> <pages> 161-187, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: Both stcon and the correspond-ing problem for undirected graphs, ustcon, are hard for DSPACE (log n) as any problem solvable deterministically in logarithmic space can be reduced to either problem. (See Lewis and Papadim-itriou <ref> [LP82] </ref> and Savitch [Sav70].) Thus, showing that there is no deterministic logarithmic space algorithm for stcon would separate the classes DSPACE (log n) and NSPACE (log n), while devising such an algorithm would prove that DSPACE (f (n)) = NSPACE (f (n)) for any space-constructible function f (n) 2 (log n)
Reference: [Nis92] <author> Noam Nisan. </author> <booktitle> RL SC . In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 619-623, </pages> <address> Victoria, B.C., Canada, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: There is also a randomized O (log n) space, polynomial time algorithm (by Aleliunas et al. [AKL + 79]) and a deterministic O (log 2 n) space, polynomial time algorithm (by Nisan <ref> [Nis92] </ref>) for this problem. <p> There is also a randomized O (log n) space, polynomial time algorithm (by Aleliunas et al. [AKL + 79]) and a deterministic O (log 2 n) space, polynomial time algorithm (by Nisan [Nis92]) for this problem. Although it is not known whether the algorithms in <ref> [NSW92, Nis92] </ref> can be simulated on a JAG or NNJAG, ustcon can indeed be solved in O (log n) space and polynomial time on a JAG due to the existence of polynomial length universal traversal sequences [AKL + 79].
Reference: [NSW92] <author> Noam Nisan, Endre Szemeredi, and Avi Wigderson. </author> <title> Undirected connectivity in O(log 1:5 n) space. </title> <booktitle> In 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: All these results apply to (directed) stcon, which contains ustcon as a special case. However, ustcon appears to be easier than stcon both in terms of space and time-space complexity. For example, Nisan et al. <ref> [NSW92] </ref> showed that ustcon can be solved in O (log 1:5 n) space on a deterministic Turing machine. <p> There is also a randomized O (log n) space, polynomial time algorithm (by Aleliunas et al. [AKL + 79]) and a deterministic O (log 2 n) space, polynomial time algorithm (by Nisan [Nis92]) for this problem. Although it is not known whether the algorithms in <ref> [NSW92, Nis92] </ref> can be simulated on a JAG or NNJAG, ustcon can indeed be solved in O (log n) space and polynomial time on a JAG due to the existence of polynomial length universal traversal sequences [AKL + 79].
Reference: [Pip92] <author> Nicholas Pippenger. </author> <title> The asymptotic optimality of spider-web networks. </title> <journal> Discrete Applied Mathematics, </journal> 37/38:437-450, 1992. 
Reference-contexts: Moreover = g 0 (~) &lt; 1. The following lemma states that the probability that Z d is much smaller than its expected value is not much greater than the probability it is zero. Lemma 11.1 <ref> [Pip92] </ref> If (1 ff)f &gt; 1 then for ~ d 2 [1; : : :; d] such that d ~ d ! 1 and d ! 1, Pr Z d ((1 ff)f ) i In the branching process game we will consider a variant of the above trees, as defined in
Reference: [Poo93] <author> Chung Keung Poon. </author> <title> Space bounds for graph connectivity problems on node-named JAGs and node-ordered JAGs. </title> <booktitle> In 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-227, </pages> <address> Palo Alto, CA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. However, it is not clear how a nondeterministic JAG can simulate Immerman's and Szelepcsenyi's O (log n)-space algorithm for directed st-nonconnectivity 2 (stcon) [Imm88, Sze88]. This motivated Poon <ref> [Poo93] </ref> to introduce the more general Node-Named JAG (NNJAG) model, an extension of the JAG where the computation is allowed to depend on the names of the nodes on which the pebbles are located. Using this added power, Poon [Poo93] showed how to simulate the Immerman / Szelepcsenyi algorithm on a <p> This motivated Poon <ref> [Poo93] </ref> to introduce the more general Node-Named JAG (NNJAG) model, an extension of the JAG where the computation is allowed to depend on the names of the nodes on which the pebbles are located. Using this added power, Poon [Poo93] showed how to simulate the Immerman / Szelepcsenyi algorithm on a nondeterministic NNJAG. Cook and Rackoff [CR80] proved a lower bound of (log 2 n= log log n) on the space required for a JAG to compute stcon. <p> In the following, we will refer to such a probabilistic machine as a coin-flipping machine. Poon <ref> [Poo93] </ref> further generalized the bound showing that S 2 ( log 2 n log log n+log log T ) for any coin-flipping probabilistic NNJAG with space S and expected time T . <p> No tight space lower bound was previously known even for the more restricted JAG model. On the other hand, a coin-flipping probabilistic JAG or NNJAG (as defined in <ref> [BS83, Poo93] </ref>) can run usefully for up to 2 2 O (S) expected time. As mentioned before, it can solve stcon with O (log n) space and O (n n ) expected time. Thus, one can only prove a time-space lower bound on this coin-flipping model. <p> For space S 2 O (log 2 n), our result still implies a lower bound of T 2 2 (log 2 n) on the coin-flipping model. However, for S 2 O ( log 2 n log log n ), Poon <ref> [Poo93] </ref> gives a stronger lower bound of T 2 2 (2 (log 2 n=S) ) . For example, when S 2 O (log n), his result implies that T 2 2 n c , for some constant c &gt; 0. This paper borrows a lot of techniques from [Edm93a]. <p> In addition, the argument is applied recursively yielding a substantially greater lower bound than what would be possible without recursion. We note that similar recursive techniques have also been used in <ref> [CR80, BS83, Yao88, Edm93b, Poo93] </ref>. 4 1.3 Organization of this paper We first define the NNJAG model in Section 2. In Section 3, we give the statement of our main result and its corollaries. In Sections 4 and 5, we describe the families of graphs used to defeat the NNJAG. <p> The proof makes forward references to Lemma 8.1 and Lemma 8.2 which are proved in Sections 10 to 12, and in Section 9 respectively. Section 13 gives the conclusion and some open problems. 2 The NNJAG model A (deterministic) NNJAG <ref> [Poo93] </ref> J is a finite state automaton with p distinguishable pebbles, q states and a transition function . The transition function can depend non-uniformly on the size, n, of the input graph and the values of p; q can be functions of n. <p> A major complaint to a JAG or NNJAG is its restricted access to the inputs. As pointed out in Etessami and Immerman [EI94], the space lower bounds of <ref> [CR80, BS83, Poo93] </ref> are proven on a tree. However, it is easy for a RAM to solve stcon on trees in O (log n) space. All it needs to do is to walk a "pebble" from node t backward and see if it hits node s.
Reference: [Poo96] <author> Chung Keung Poon. </author> <title> On the Complexity of the ST-Connectivity Problem. </title> <type> PhD thesis, </type> <institution> University of Toronto, </institution> <year> 1996. </year>
Reference-contexts: For example, depth-first and breadth-first search, random walks [AKL + 79] and the algorithms of Savitch and Barnes et al. can all be simulated on a JAG, see [CR80] and <ref> [Poo96] </ref>. To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. However, it is not clear how a nondeterministic JAG can simulate Immerman's and Szelepcsenyi's O (log n)-space algorithm for directed st-nonconnectivity 2 (stcon) [Imm88, Sze88].
Reference: [Sav70] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: Both stcon and the correspond-ing problem for undirected graphs, ustcon, are hard for DSPACE (log n) as any problem solvable deterministically in logarithmic space can be reduced to either problem. (See Lewis and Papadim-itriou [LP82] and Savitch <ref> [Sav70] </ref>.) Thus, showing that there is no deterministic logarithmic space algorithm for stcon would separate the classes DSPACE (log n) and NSPACE (log n), while devising such an algorithm would prove that DSPACE (f (n)) = NSPACE (f (n)) for any space-constructible function f (n) 2 (log n) [Sav70]. <p> and Savitch <ref> [Sav70] </ref>.) Thus, showing that there is no deterministic logarithmic space algorithm for stcon would separate the classes DSPACE (log n) and NSPACE (log n), while devising such an algorithm would prove that DSPACE (f (n)) = NSPACE (f (n)) for any space-constructible function f (n) 2 (log n) [Sav70]. Stcon is also a candidate problem for separating the classes of SC and NC [Joh90]. Below we mention the previous works that are most relevant to our paper. <p> At the other extreme, Savitch <ref> [Sav70] </ref> provided an algorithm that uses O (log 2 n) space and requires time exponential in its space bound (i.e., time n O (log n) ). Tompa [Tom82] showed that stcon cannot be solved in polynomial time and sub-linear space simultaneously by the repeated squaring method.
Reference: [Sze88] <author> Robert Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: To the authors' knowledge, all known deterministic or probabilistic algorithms for directed stcon are implementable on a JAG. However, it is not clear how a nondeterministic JAG can simulate Immerman's and Szelepcsenyi's O (log n)-space algorithm for directed st-nonconnectivity 2 (stcon) <ref> [Imm88, Sze88] </ref>. This motivated Poon [Poo93] to introduce the more general Node-Named JAG (NNJAG) model, an extension of the JAG where the computation is allowed to depend on the names of the nodes on which the pebbles are located.
Reference: [Tom82] <author> Martin Tompa. </author> <title> Two familiar transitive closure algorithms which admit no polynomial time, sublinear space implementations. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 130-137, </pages> <month> February </month> <year> 1982. </year> <month> 35 </month>
Reference-contexts: At the other extreme, Savitch [Sav70] provided an algorithm that uses O (log 2 n) space and requires time exponential in its space bound (i.e., time n O (log n) ). Tompa <ref> [Tom82] </ref> showed that stcon cannot be solved in polynomial time and sub-linear space simultaneously by the repeated squaring method.
Reference: [Wig92] <author> Avi Wigderson. </author> <title> The complexity of graph connectivity. </title> <editor> In I. M. Havel and V. Koubek, editors, </editor> <booktitle> 17th Symp. Mathematical Foundations of Computer Science, </booktitle> <pages> pages 112-132. </pages> <publisher> Springer-Verlag LNCS 629, </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: Stcon is also a candidate problem for separating the classes of SC and NC [Joh90]. Below we mention the previous works that are most relevant to our paper. For more information on graph connectivity, we refer the reader to the beautiful survey paper by Wigderson <ref> [Wig92] </ref>. 1.1 Previous works The most common algorithms for st-connectivity, breadth- and depth-first search run in optimal time O (m + n) and use O (n log n) space.
Reference: [Yao77] <author> A. C. Yao. </author> <title> Probabilistic computations: Toward a unified measure of complexity. </title> <booktitle> In 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 222-227, </pages> <address> Providence, RI, </address> <month> October </month> <year> 1977. </year> <note> IEEE. </note>
Reference-contexts: The proof of Theorem 3.1 follows by applying "Yao's lemma" <ref> [Yao77] </ref> to the following theorem. Theorem 3.2 For any ffi, * &gt; 0 there is a distribution D on n-node graphs such that 1. <p> 1ffi ) and (worst case) time T 62 2 (log 2 (n=S)) , or S 2 !(n 1ffi ) and T =2 2 (log 2 ( n log n Pr G2D [ J is correct on input G ] &lt; 1 + 2*: Proof of Theorem 3.1: Theorem 3 of <ref> [Yao77] </ref> states that for any randomized algorithm J that has probability of error at most and any input distribution D, the expected time of J on the worst case input is at least half of the average time of the best deterministic algorithm that errs with probability at most 2 on
Reference: [Yao88] <author> A. C. Yao. </author> <title> Near-optimal time-space tradeoff for element distinctness. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 91-97, </pages> <address> White Plains, NY, </address> <month> October </month> <year> 1988. </year> <journal> IEEE. </journal> <volume> 36 </volume>
Reference-contexts: The bound is proved for the probabilistic NNJAG model by transforming the machine into a structured branching program, and applying a progress argument introduced by Borodin et al. [BFK + 81] and also used in many proofs of time-space tradeoff lower bounds, including <ref> [BC82, Bea91, BFMadH + 87, Yao88] </ref>. <p> In addition, the argument is applied recursively yielding a substantially greater lower bound than what would be possible without recursion. We note that similar recursive techniques have also been used in <ref> [CR80, BS83, Yao88, Edm93b, Poo93] </ref>. 4 1.3 Organization of this paper We first define the NNJAG model in Section 2. In Section 3, we give the statement of our main result and its corollaries. In Sections 4 and 5, we describe the families of graphs used to defeat the NNJAG.
References-found: 33

