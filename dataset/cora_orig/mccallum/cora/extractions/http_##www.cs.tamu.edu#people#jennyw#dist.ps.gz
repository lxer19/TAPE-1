URL: http://www.cs.tamu.edu/people/jennyw/dist.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/jennyw/
Root-URL: http://www.cs.tamu.edu
Email: E-mail: fjennyw, skinig@cs.tamu.edu  
Title: Distributed Algorithms in the Mobile Computing Environment  
Author: Jennifer Walter Savita Kini 
Date: October 6, 1997  
Address: College Station, TX 77843-3112  
Affiliation: Mobile Computing Texas A&M University  
Note: CPSC689 Special Topics in  
Abstract: Currently, researchers are attempting to modify existing distributed applications for use in the nomadic computing environment. Many distributed algorithms, developed for execution on distributed systems with static hosts, cannot be directly applied to mobile systems due to the dynamic connectivity of mobile networks. In addition, a number of distributed algorithms have been created to suit the demands of the mobile setting. This paper examines the problems posed by host mobility and some of the solutions that have been developed to allow distributed algorithms to enter the sphere of mobile computation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Acharya and B. R. Badrinath. </author> <title> "Delivering multicast messages in networks with mobile hosts". </title> <booktitle> In Proc. of 13th IEEE ICDCS, </booktitle> <pages> pages 292-299, </pages> <year> 1993. </year>
Reference-contexts: In causal ordering, events are ordered according to Lamport's "happened before" relation [26]. Causal ordering of messages has also been proposed for mobile computing environments. In [30], a static distributed algorithm for causal ordering is combined with an algorithm for multicasting in mobile systems from <ref> [1] </ref>. This produces an algorithm for causally ordered broadcast or multicast in the mobile setting. This algorithm restricts the majority of the computation to the static network, following the two-tier principle mentioned in section 3.2. Alagar and Venkatesan [5] present three algorithms for causally ordered message delivery in mobile systems.
Reference: [2] <author> A. Acharya and B. R. Badrinath. </author> <title> "Checkpointing distributed applications on mobile computers". </title> <booktitle> In Proc. of 3rd Intl. Conf. on Parallel and Distributed Information Systems, </booktitle> <pages> pages 73-80, </pages> <year> 1994. </year>
Reference-contexts: Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing <ref> [29, 31, 2, 32] </ref>, mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> Recording a consistent global checkpoint or snapshot of a distributed application designed for a static system, but executing in a mobile computing environment, presents some problems, including <ref> [2] </ref>: * Establishing the location of an MH before sending control messages, since a mobile host changes location with time. 9 * Storing volatile checkpoints or message logs on an MH is not acceptable due to the inherent vulnerability of mobile units. * Disconnection of one or more MHs should not <p> To address the consistent global checkpoint problem in the mobile setting, a two-phase rule (algorithm) is described in <ref> [2] </ref>.
Reference: [3] <author> A. Acharya and B. R. Badrinath. </author> <title> "A framework for delivering multicast messages in networks with mobile hosts". </title> <journal> ACM - Baltzer Journal on Mobile Networks and Applications, </journal> <volume> 1(II):199-219, </volume> <year> 1996. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting <ref> [4, 15, 36, 35, 3] </ref>, broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> However, since the MHs can move during the multicast transmission, MH3 receives duplicate messages and MH2 receives no message at all. The challenge to distributed algorithm designers is to devise algorithms in which messages are delivered exactly once <ref> [3] </ref>. Acharya and Badrinath [3] present multicast protocols for at-least-once, at-most-once, and exactly-once message delivery. <p> However, since the MHs can move during the multicast transmission, MH3 receives duplicate messages and MH2 receives no message at all. The challenge to distributed algorithm designers is to devise algorithms in which messages are delivered exactly once <ref> [3] </ref>. Acharya and Badrinath [3] present multicast protocols for at-least-once, at-most-once, and exactly-once message delivery.
Reference: [4] <author> A. Acharya, A. Bakre, and B. R. Badrinath. </author> <title> "IP multicast extensions for mobile internet-working". </title> <booktitle> In Proc. of IEEE INFOCOM '96, </booktitle> <pages> pages 67-74, </pages> <year> 1996. </year> <month> 19 </month>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting <ref> [4, 15, 36, 35, 3] </ref>, broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> However, IP multicast expects all routers on the same subnet to be connected at the link-level. Acharya, et.al. <ref> [4] </ref> discuss solutions to circumvent this problem. They consider providing an abstraction of link-layer connectivity (called a multicast tunnel) between the MSRs and their local MHs.
Reference: [5] <author> S. Alagar and S. Venkatesan. </author> <title> "Causal ordering in distributed mobile systems". </title> <journal> IEEE Trans--action on Computers, </journal> <volume> 46(3) </volume> <pages> 353-361, </pages> <year> 1997. </year>
Reference-contexts: Mobile units are generally less secure than their static counterparts. Perils which are more likely to befall mobile units include damage resulting from physical causes (e.g., dropping or crushing the unit), and malicious or Byzantine subversion (e.g., theft and corruption of data) <ref> [5, 21] </ref>. Unreliable connectivity plagues mobile units. Connectivity varies, depending on the unit's location, velocity, and available bandwidth (e.g. bandwidth may be higher indoors than outdoors and certain remote areas may not be covered by any broadcast facilities) [5, 20, 33]. <p> Unreliable connectivity plagues mobile units. Connectivity varies, depending on the unit's location, velocity, and available bandwidth (e.g. bandwidth may be higher indoors than outdoors and certain remote areas may not be covered by any broadcast facilities) <ref> [5, 20, 33] </ref>. Also, the nature of the wireless communication medium makes it subject to forms of interference not experienced by static wired networks. Connectivity and bandwidth availability in these settings is inherently unstable. * Possibility of disconnection: For mobile units, disconnection does not equate to a host failure. <p> as readily in these situations and algorithms may be based on a view in which all nodes are considered to be peers. * Algorithms should scale so that the overhead does not increase with the number of MHs, since the number of possible MHs may not be known in advance <ref> [5] </ref> and this number may be much larger than the number of MSSs. * The wireless communication medium actually lowers the complexity of communication involved in certain distributed algorithms [8]. <p> Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering <ref> [30, 5] </ref>, management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> This produces an algorithm for causally ordered broadcast or multicast in the mobile setting. This algorithm restricts the majority of the computation to the static network, following the two-tier principle mentioned in section 3.2. Alagar and Venkatesan <ref> [5] </ref> present three algorithms for causally ordered message delivery in mobile systems. Each of these algorithms attempts to place responsibility for the majority of the communication and computation on the MSSs in the wired network. In the first algorithm, causal ordering for each MH is maintained by its MSS.
Reference: [6] <author> H. Attiya and J. Welch. </author> <title> "Sequential consistency versus linearizability". </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(2) </volume> <pages> 91-122, </pages> <year> 1994. </year>
Reference-contexts: Problems maintaining consistency of data copies arise when multiple shared copies of data are maintained, read and updated on mobile units. As stated in <ref> [6] </ref>, the two conflicting goals of a consistency condition are to be strong enough to satisfy the demands of an application and yet weak enough to allow efficient implementation. The consistency models normally considered for replicated data are strong consistency, or serializability, and weak consistency.
Reference: [7] <author> B. Awerbuch and D. Peleg. </author> <title> "Online tracking of mobile users". </title> <journal> Journal of the ACM, </journal> <volume> 42(5) </volume> <pages> 1021-1058, </pages> <year> 1995. </year>
Reference-contexts: focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts <ref> [7, 25, 24] </ref>. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> Location management functions include two main operations: update and search <ref> [7] </ref>. Updates are used for local tracking of MHs and refer to the modifications made to location directories. Search operations enable a host to contact another host at its current address. These operations can be either calculated statically, prior to execution based on MH movement patterns, or dynamically during execution. <p> These authors found that a strategy in which no update messages are sent, but in which search-update with path compression is utilized, performs well in most situations. Awerbuch and Peleg <ref> [7] </ref> also use forwarding pointers to track MHs. They compose a theoretical model consisting of a hierarchy of m-regional directories which are based on the concept of sparse graph covers.
Reference: [8] <author> B. R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> "Impact of mobility on distributed computations". </title> <journal> Operating Systems Review, </journal> <volume> 27(2), </volume> <year> 1993. </year>
Reference-contexts: overhead does not increase with the number of MHs, since the number of possible MHs may not be known in advance [5] and this number may be much larger than the number of MSSs. * The wireless communication medium actually lowers the complexity of communication involved in certain distributed algorithms <ref> [8] </ref>. For example, the broadcast messages sent between an MSS and all the MHs inside its cell do not require special algorithmic constructs, because the medium physically supports broadcast communication.
Reference: [9] <author> B. R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> "Structuring distributed algorithms for mobile hosts". </title> <booktitle> In 14th IEEE Intl. Conf. on Distributed Computing, </booktitle> <pages> pages 21-28, </pages> <year> 1994. </year>
Reference-contexts: In the first case, guarantees are placed on the eventual re-entry of that MH into the system, and in the second case, no guarantees can be provided on the time which may elapse between the MH leaving and rejoining the system. For example, in <ref> [9] </ref>, the MH issues a leave () message when it will eventually reconnect and a disconnect () when no guarantees can be made about the time at which it will reconnect to the system. These are fundamentally guarantees on the eventual delivery of messages to the MHs. <p> These are fundamentally guarantees on the eventual delivery of messages to the MHs. Generally, communication over the wireless network is modeled as being FIFO but unreliable <ref> [9] </ref>, since the error rate can be much higher in wireless communication than on a wired network. Also, since MHs may move out of range or disconnect at any time, eventual delivery of messages may not be guaranteed in mobile system models. <p> Connectivity and bandwidth availability in these settings is inherently unstable. * Possibility of disconnection: For mobile units, disconnection does not equate to a host failure. In this environment, disconnection is elective <ref> [21, 9] </ref>, often planned and prepared for in advance. <p> Failure and even recovery after failure has been considered in distributed system models, but not frequent disconnections with subsequent reconnections at various points in the network. Therefore, traditional distributed systems require modifications to be useful in describing the behavior of processors and executions in a mobile setting <ref> [9] </ref>. The constraints inherent to a mobile system, outlined in section 3.1, impose modifications on existing distributed algorithms. The implications for distributed systems and algorithms in the mobile setting include: * A search component for every message to be delivered to an MH. <p> The implications for distributed systems and algorithms in the mobile setting include: * A search component for every message to be delivered to an MH. This search is necessary because the present position of an MH in the network may not always be known <ref> [9, 10] </ref>. 7 * Increased algorithmic complexity to maintain logical structures such as rings or trees. <p> As we saw in section 2.2.1, these "planned for" MH movements can be incorporated into the mobile distributed system model <ref> [9] </ref>. * Mobile distributed algorithms are often structured using a two-tier approach, confining the majority of the communication to be between FHs and MSSs [10]. <p> This two-tier technique results in minimized use of the low bandwidth wireless link connecting MSSs to MHs, reducing communication overhead across these links. Confining the majority of the communication and computation to the static portion of the network is desirable since MHs often run in doze mode <ref> [9] </ref> to conserve power. In ad-hoc networks there is no fixed wired backbone, i.e., the servers as well as the clients can change positions dynamically. <p> Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion <ref> [10, 9] </ref>, causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> Mutual exclusion requires that only one process at a time gets access to a shared common resource among a set of processes (the critical section). Lamport's mutual exclusion algorithm from [26] is modified in <ref> [9] </ref> to provide mutual exclusion in a mobile distributed setting. When Lamport's algorithm is applied to a mobile environment without any modifications, the mobile hosts are required to send request messages to each of the other hosts to gain access to the shared resource and wait for reply messages. <p> Also, Lamport's algorithm requires FIFO logical channels between participating MHs, a non-trivial issue when hosts are mobile. To overcome these drawbacks, messages are passed between the MSSs on behalf of the MHs. The modified algorithm of <ref> [9] </ref> starts with the MH sending a message to its local MSS and then executing Lamport's algorithm between the MSSs. Logical ring structures are a classic solution to providing mutual exclusion. <p> Each host gains access to the critical section only when it has the token. An algorithm designed for a static distributed system, when directly applied to a logical ring among the MHs, incurs a communication cost proportional to the number of MHs on the ring <ref> [9] </ref>. Also, maintaining the ring is a problem, since the physical connectivity of the ring changes with every move of an MH, thereby increasing the cost of the search component of the algorithm. A modification used in [9] entails maintaining a logical ring among the MSSs and circulating a token among <p> incurs a communication cost proportional to the number of MHs on the ring <ref> [9] </ref>. Also, maintaining the ring is a problem, since the physical connectivity of the ring changes with every move of an MH, thereby increasing the cost of the search component of the algorithm. A modification used in [9] entails maintaining a logical ring among the MSSs and circulating a token among the MSSs in the unidirectional ring.
Reference: [10] <author> B. R. Badrinath, A. Acharya, and T. Imielinski. </author> <title> "Designing distributed algorithms for mobile computing networks". </title> <journal> CWI Quarterly, </journal> <volume> 19(4) </volume> <pages> 309-320, </pages> <year> 1996. </year>
Reference-contexts: Distributed algorithms thus assume a model comprised of processes running on a set of static, disjoint nodes and communicating via message passing over point-to-point logical channels <ref> [10] </ref>. Distributed algorithms in the mobile environment include all the above characteristics except item 5. 3 2.2 Mobile Distributed System Models and Assumptions 2.2.1 Single Hop Mobile Networks processors), consisting of a fixed network with FHs and mobile support stations (MSSs) directly connected via wired medium to the fixed network. <p> The implications for distributed systems and algorithms in the mobile setting include: * A search component for every message to be delivered to an MH. This search is necessary because the present position of an MH in the network may not always be known <ref> [9, 10] </ref>. 7 * Increased algorithmic complexity to maintain logical structures such as rings or trees. <p> Since many distributed algorithms rely on static logical structures both for correctness and efficiency, their unmodified performance in the mobile setting cannot be predicted with accuracy <ref> [10] </ref>. * Because disconnection of MHs is frequently voluntary, as mentioned in section 3.1, host movements can often be planned for in advance, prior to actual MH movement. <p> As we saw in section 2.2.1, these "planned for" MH movements can be incorporated into the mobile distributed system model [9]. * Mobile distributed algorithms are often structured using a two-tier approach, confining the majority of the communication to be between FHs and MSSs <ref> [10] </ref>. The MSS can then act as a proxy for the local MHs by providing an interface between the MHs and the rest of the fixed network, performing all the outgoing communication on behalf of the MHs in its cell, as well as the majority of the computation. <p> Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion <ref> [10, 9] </ref>, causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> The search cost is independent of the number of MHs in the system and is directly proportional to the number of mutual exclusion requests. In <ref> [10] </ref>, alternative strategies are presented for maintaining a logical ring in a mobile network. One strategy maintains the logical ring among the MSSs, as described above. Another strategy partitions the MSSs into sections, each with its designated proxy.
Reference: [11] <author> B. R. Badrinath, T. Imielinski, and A. Virmani. </author> <title> "Locating strategies for personal communication networks". </title> <booktitle> In Proc. of Workshop on Networking of Pers. Comm. Apps., </booktitle> <year> 1992. </year>
Reference-contexts: This scheme is used to enable localized updates and searches, making the cost of these operations polylogarithmic in the size and diameter of the network. User profiles, patterns of mobility of MHs, are used in <ref> [11] </ref> to reduce the search cost and the volume of location updates. These profiles are used to form partitions in a hierarchy of wired location servers. Updates are needed only when hosts cross partition boundaries and large branches of the location server hierarchy can be pruned quickly during searches.
Reference: [12] <author> B. R. Badrinath and S. Phatak. </author> <title> "Database server organization for handling mobile clients". </title> <note> Submitted for publication, </note> <month> May </month> <year> 1997. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data <ref> [21, 23, 18, 37, 12] </ref>, group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> For example, the Coda system [23] allows mobile users to hoard critical files in anticipation of disconnection. Coda relies on low frequency of write-sharing and logging all updates while disconnected to ensure correctness. Similarly, "hoard keys" <ref> [12] </ref> are used in mobile distributed database systems to allow faster access to data based on the typical access patterns of mobile clients. These hoarding approaches to disconnected operation require a reintegration step to propagate changes and to resolve data conflicts.
Reference: [13] <author> K. Birman and T. Joseph. </author> <title> "Reliable communications in presence of failures". </title> <journal> ACM Trans. Computing Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <year> 1987. </year>
Reference-contexts: Rollback recovery may be necessitated if these conflicts cannot be reconciled. 4.4 Causal Ordering Providing guarantees on the order of message deliveries is fundamental to ensuring the consistency and correctness of distributed algorithms in message passing systems. Causal ordering for message delivery was first proposed in <ref> [13] </ref> to support distributed computation in the ISIS system. In causal ordering, events are ordered according to Lamport's "happened before" relation [26]. Causal ordering of messages has also been proposed for mobile computing environments.
Reference: [14] <author> K. M. Chandy and L. Lamport. </author> <title> "Distributed snapshots: determining global states of distributed systems". </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <year> 1985. </year>
Reference-contexts: Likewise, in an inconsistent system state there exists some message which has been recorded as received in the state of the receiver but is not recorded as being sent in the state of the sender. Chandy and Lamport <ref> [14] </ref> define a consistent global snapshot as a set of N local snapshots, one for each of the N processors, which combine to form a consistent snapshot of the entire system state. A consistent global checkpoint has a similar definition. which combine to form a global system checkpoint. <p> Sato, et.al. [32] developed an asynchronous snapshot algorithm for the mobile environment. These authors show that the Chandy and Lamport <ref> [14] </ref> distributed snapshot algorithm cannot be applied directly to mobile hosts because topological consistency may be violated due to mobility. <p> Both MSSs and MHs can initiate the snapshot algorithm. The IPH information is used to determine whether the MH must record its local state prior to disconnect or when it is isolated. In [28], the Chandy-Lamport <ref> [14] </ref> algorithm is adapted to ensure message delivery to MHs in a mobile environment. A snapshot algorithm is presented in which the nodes in the distributed system correspond to the MSSs and the messages in transit correspond to MHs.
Reference: [15] <author> C. Chiang and M. Gerla. </author> <title> "Routing and multicast in multihop, mobile wireless networks". </title> <note> In Proc. of ICUPC '97-to appear, </note> <year> 1997. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting <ref> [4, 15, 36, 35, 3] </ref>, broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> However, in multi-hop mobile networks, a fixed topology cannot be assumed to exist in any part of the network. The dynamic nature of the network makes routing algorithms complicated, since loops and partitions must constantly be avoided. Chiang and Gerla <ref> [15] </ref> present a distributed protocol for multicasting in a multi-hop, mobile wireless network. In this protocol, the multicast address identifies the set of MHs that should 17 receive a particular multicast packet. The multicast protocol is based on the core based tree (CBT) architecture.
Reference: [16] <author> D. E. Comer. </author> <title> Internetworking with TCP/IP Vol. I. </title> <publisher> Prentice Hall, Inc., Purdue University, </publisher> <address> Indiana, </address> <year> 1995. </year>
Reference-contexts: The IP multicast group is based on dynamic membership, i.e, hosts may join or leave the group at any time <ref> [16] </ref>. The two main motivations for using multicast are [35, 36]: 1. to conserve resources and economize on bandwidth utilization.
Reference: [17] <author> G. Coulouris, J. Dollimore, and T. Kindberg. </author> <title> Distributed Systems: Concepts and Designs. </title> <publisher> Addison-Wesley, </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Distributed computing has become widespread since its origin in the first multi-user computers and networks nearly three decades ago <ref> [17] </ref>. This new branch of computer science brought with it problems related to concurrent program execution which had not previously been encountered in the era of sequential computation.
Reference: [18] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and B. Welch. </author> <title> "The Bayou Architecture: Support for Data Sharing Among Mobile Users". </title> <booktitle> In Proc.of Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 2-7, </pages> <year> 1994. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data <ref> [21, 23, 18, 37, 12] </ref>, group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> In such a situation, a stronger consistency model may be desired. 13 In mobile systems, where disconnections may be frequent and extended, weakened consis-tency is tolerated in some systems in order to provide shared access to data during periods of disconnection <ref> [18, 23] </ref>. For example, the Bayou system [18] allows applications to specify the consistency condition required based on the observation that there are many applications where weak consistency can be tolerated, thereby maximizing data availability. <p> In such a situation, a stronger consistency model may be desired. 13 In mobile systems, where disconnections may be frequent and extended, weakened consis-tency is tolerated in some systems in order to provide shared access to data during periods of disconnection [18, 23]. For example, the Bayou system <ref> [18] </ref> allows applications to specify the consistency condition required based on the observation that there are many applications where weak consistency can be tolerated, thereby maximizing data availability.
Reference: [19] <author> A. Ephremides and T. V. Truong. </author> <title> "Scheduling broadcasts in multihop radio networks". </title> <journal> IEEE Trans. on Communications, </journal> <volume> 38(4) </volume> <pages> 456-460, </pages> <year> 1990. </year>
Reference-contexts: software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling <ref> [19] </ref>, and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> The protocol adjusts to dynamic movement of all nodes, including the clusterheads, which are selected by some priority scheme. 4.7.2 Scheduling Broadcasts in Multi-hop Mobile Networks In multi-hop mobile networks, overlapping cells must avoid transmitting messages on the same channel, since doing so creates interference. In <ref> [19] </ref>, it is shown that devising an optimal broadcast schedule in multi-hop radio networks is an NP-complete problem.
Reference: [20] <author> G. Forman and J. Zahorjan. </author> <title> "The challenges of mobile computing". </title> <journal> IEEE Computer, </journal> <volume> 27(4) </volume> <pages> 38-47, </pages> <year> 1994. </year>
Reference-contexts: Mobile computing is a relatively recent development which has consequences for system and algorithm designers comparable to that brought on by the advent of distributed systems [21]. The terms mobile computer, mobile host, or mobile unit are generally used to denote portable computers which are capable of wireless networking <ref> [20] </ref> 1 The explosive growth in demand for portable, personal computing devices has moved "tetherless" computing out of the realm of science fiction and into the forefront of computer science research. As networked computers become mobile, the expectations on mobile technology increase. <p> As a result of necessary size and weight restrictions, these units generally have limited battery life and, compared to stationary computers, slower processor speeds, smaller memory size, and lower disk capacity <ref> [20, 22, 33] </ref>. Mobile units are generally less secure than their static counterparts. Perils which are more likely to befall mobile units include damage resulting from physical causes (e.g., dropping or crushing the unit), and malicious or Byzantine subversion (e.g., theft and corruption of data) [5, 21]. <p> Unreliable connectivity plagues mobile units. Connectivity varies, depending on the unit's location, velocity, and available bandwidth (e.g. bandwidth may be higher indoors than outdoors and certain remote areas may not be covered by any broadcast facilities) <ref> [5, 20, 33] </ref>. Also, the nature of the wireless communication medium makes it subject to forms of interference not experienced by static wired networks. Connectivity and bandwidth availability in these settings is inherently unstable. * Possibility of disconnection: For mobile units, disconnection does not equate to a host failure.
Reference: [21] <author> T. Imielinski and B. R. Badrinath. </author> <title> "Mobile wireless computing: challenges in data manage-ment". </title> <journal> Communications of the ACM, </journal> <volume> 37(10) </volume> <pages> 19-28, </pages> <year> 1994. </year>
Reference-contexts: These applications capitalize on the efficient use of workstations linked via networks spanning both large and small geographic areas. Mobile computing is a relatively recent development which has consequences for system and algorithm designers comparable to that brought on by the advent of distributed systems <ref> [21] </ref>. <p> Next, we will discuss how the constraints imposed by mobility affect distributed computation. 3.1 Mobile Computing: Features and Constraints Mobile computing promises many benefits not currently realizable with static networked computer systems. These include <ref> [21] </ref>: * Versatile, continuously accessible, or "ubiquitous" [34] communication and information ser vices, not limited by the boundaries of wired media. * Expedient notification of events through devices which offer greater flexibility and utility than traditional cellular phones or pagers. * Location dependent applications (e.g., encorporating GPS data) to guide people <p> Mobile units are generally less secure than their static counterparts. Perils which are more likely to befall mobile units include damage resulting from physical causes (e.g., dropping or crushing the unit), and malicious or Byzantine subversion (e.g., theft and corruption of data) <ref> [5, 21] </ref>. Unreliable connectivity plagues mobile units. Connectivity varies, depending on the unit's location, velocity, and available bandwidth (e.g. bandwidth may be higher indoors than outdoors and certain remote areas may not be covered by any broadcast facilities) [5, 20, 33]. <p> Connectivity and bandwidth availability in these settings is inherently unstable. * Possibility of disconnection: For mobile units, disconnection does not equate to a host failure. In this environment, disconnection is elective <ref> [21, 9] </ref>, often planned and prepared for in advance. <p> Furthermore, disconnection can vary by degree, with connectivity degrading over a spectrum, while computation proceeds despite plummeting bandwidth availability. * Scalability, resource limitations, and diversity of data: The projected ubiquity of mobile units presents problems of data access on a scale never before seen in existing networks <ref> [21] </ref>. Distribution of resources and services will be of increasing concern as the number of units grows. Asymmetric communication capabilities and costs may exist between MHs and fixed servers. Often, a producer-consumer relationship is necessitated, with data being "pushed" to the resource-poor MHs. <p> Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data <ref> [21, 23, 18, 37, 12] </ref>, group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> Data replication is the key to the effectiveness of distributed databases and distributed shared memory implementations. The issues of data management are dependent on the kind of data maintained by MHs <ref> [21] </ref>, including: 1) private data, where the reader is the sole writer, 2) public data that can be requested and filtered by MHs, with one writer and multiple readers, and 3) shared data residing on both FHs and MHs, with multiple readers and writers.
Reference: [22] <author> T. Imielinski and B. R. Badrinath. </author> <title> "Querying in highly mobile distributed environments". </title> <booktitle> In Proc. of 18th VLDB, </booktitle> <month> Aug </month> <year> 1992. </year>
Reference-contexts: As a result of necessary size and weight restrictions, these units generally have limited battery life and, compared to stationary computers, slower processor speeds, smaller memory size, and lower disk capacity <ref> [20, 22, 33] </ref>. Mobile units are generally less secure than their static counterparts. Perils which are more likely to befall mobile units include damage resulting from physical causes (e.g., dropping or crushing the unit), and malicious or Byzantine subversion (e.g., theft and corruption of data) [5, 21].
Reference: [23] <author> J. Kistler and M. Satyanarayanan. </author> <title> "Disconnected operation in the CODA file system". </title> <journal> ACM Trans. Computing Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data <ref> [21, 23, 18, 37, 12] </ref>, group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> In such a situation, a stronger consistency model may be desired. 13 In mobile systems, where disconnections may be frequent and extended, weakened consis-tency is tolerated in some systems in order to provide shared access to data during periods of disconnection <ref> [18, 23] </ref>. For example, the Bayou system [18] allows applications to specify the consistency condition required based on the observation that there are many applications where weak consistency can be tolerated, thereby maximizing data availability. <p> In addition to weakening the allowable consistency conditions, some mobile distributed file and database systems allow MHs to hoard data prior to impending periods of disconnection. For example, the Coda system <ref> [23] </ref> allows mobile users to hoard critical files in anticipation of disconnection. Coda relies on low frequency of write-sharing and logging all updates while disconnected to ensure correctness.
Reference: [24] <author> P. Krishna, N. Vaidya, and D. Pradhan. </author> <title> "Location management in distributed mobile environments". </title> <booktitle> In Proc. of 3rd Int. Conf. on Parallel and Dist. Info. Sys., </booktitle> <pages> pages 81-88, </pages> <year> 1994. </year>
Reference-contexts: focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts <ref> [7, 25, 24] </ref>. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> Search operations enable a host to contact another host at its current address. These operations can be either calculated statically, prior to execution based on MH movement patterns, or dynamically during execution. All the strategies covered in this section are static. In <ref> [24] </ref>, a location management strategy is devised which includes the two basic operations mentioned above, plus a search-update operation, in which updates also occur after a successful search. They use path compression to update all MSSs on the search path with forwarding pointers to the current position of an MH.
Reference: [25] <author> D. Lam, J. Jannink, D. Cox, and J. Widom. </author> <title> "Modeling location management in personal communication services". </title> <booktitle> In Proc. of 5th ICUPC, </booktitle> <pages> pages 596-601, </pages> <year> 1996. </year>
Reference-contexts: focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts <ref> [7, 25, 24] </ref>. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting.
Reference: [26] <author> L. Lamport. </author> <title> "Time, clocks and the ordering of events in a distributed system". </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <year> 1978. </year>
Reference-contexts: Mutual exclusion requires that only one process at a time gets access to a shared common resource among a set of processes (the critical section). Lamport's mutual exclusion algorithm from <ref> [26] </ref> is modified in [9] to provide mutual exclusion in a mobile distributed setting. <p> Causal ordering for message delivery was first proposed in [13] to support distributed computation in the ISIS system. In causal ordering, events are ordered according to Lamport's "happened before" relation <ref> [26] </ref>. Causal ordering of messages has also been proposed for mobile computing environments. In [30], a static distributed algorithm for causal ordering is combined with an algorithm for multicasting in mobile systems from [1]. This produces an algorithm for causally ordered broadcast or multicast in the mobile setting.
Reference: [27] <author> N. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: The three types of events normally included in the specification of the static distributed message passing system model are send, receive, and internal [32]. In general, the term distributed algorithm encompasses a broad variety of concurrent algorithms, spanning a range of applications. Notable characteristics of these algorithms include <ref> [27] </ref>: 1. Interprocessor communication via shared memory or message passing. The abstraction of distributed shared memory is implemented on top of a message passing system. 2. <p> A variety of possible system event timing assumptions, from completely synchronous, lock-step, to completely asynchronous computation and communication (i.e., with no bounds on the time for processor events or message delivery in the system). Hybrid timing notions such as the timed asynchronous <ref> [27] </ref> model, may bear a stronger resemblance to reality (particularly on WANs). In timed asynchronous systems, there is generally no known bound on message delay in the network, so that processors rely on timers to ensure eventual termination. 3.
Reference: [28] <author> A. Murphy, G. Roman, and G. Varghese. </author> <title> "An algorithm for message delivery in a micromo-bility environment". </title> <type> Technical report WUCS-97-22, </type> <year> 1997. </year>
Reference-contexts: Both MSSs and MHs can initiate the snapshot algorithm. The IPH information is used to determine whether the MH must record its local state prior to disconnect or when it is isolated. In <ref> [28] </ref>, the Chandy-Lamport [14] algorithm is adapted to ensure message delivery to MHs in a mobile environment. A snapshot algorithm is presented in which the nodes in the distributed system correspond to the MSSs and the messages in transit correspond to MHs.
Reference: [29] <author> D. K. Pradhan, P. Krishna, and N. H. Vaidya. </author> <title> "Recovery in mobile wireless environment: design and trade-off analysis". </title> <booktitle> In Proc. of 26th FTCS, </booktitle> <pages> pages 16-25, </pages> <year> 1996. </year>
Reference-contexts: Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing <ref> [29, 31, 2, 32] </ref>, mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> The issue of handling node failures which occur during checkpoints and a recovery algorithm where only a minimal set of nodes are made to roll back computation is also considered in this paper. Adaptation of recovery schemes in <ref> [29] </ref> shows how existing distributed checkpointing schemes can be modified to accommodate mobility and limited bandwidth.
Reference: [30] <author> R. Prakash, M. Raynal, and M. Singhal. </author> <title> "An efficient causal ordering algorithm for mobile computing environments". </title> <booktitle> In Proc. of 16th ICDCS, </booktitle> <pages> pages 744-751, </pages> <year> 1996. </year>
Reference-contexts: We will see that handoffs require greater complexity in distributed algorithms when these handoffs may occur during the execution. Each MH within a cell communicates with other processors through the MSS which is local to that cell <ref> [30] </ref>. In effect, the mobile distributed system adds an "outer layer" to the static distributed system model consisting of a single hop wireless connection to the MHs attached to the MSS augmented network. <p> Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering <ref> [30, 5] </ref>, management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> Causal ordering for message delivery was first proposed in [13] to support distributed computation in the ISIS system. In causal ordering, events are ordered according to Lamport's "happened before" relation [26]. Causal ordering of messages has also been proposed for mobile computing environments. In <ref> [30] </ref>, a static distributed algorithm for causal ordering is combined with an algorithm for multicasting in mobile systems from [1]. This produces an algorithm for causally ordered broadcast or multicast in the mobile setting.
Reference: [31] <author> R. Prakesh and M. Singhal. </author> <title> "Low-cost checkpointing and failure recovery in mobile computing systems". </title> <booktitle> IEEE Transaction on Parallel and Distributed Services, </booktitle> <pages> pages 1035-1048, </pages> <note> 1997 to appear. </note>
Reference-contexts: Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing <ref> [29, 31, 2, 32] </ref>, mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> Piggybacking control information with every application message reduces search cost and storing checkpoints at the MSS helps avoid storage problems at the MH in this algorithm. Prakesh and Singhal <ref> [31] </ref> show that sending a boolean vector of inter-checkpoint dependency information with every message reduces the effort required to collect a global checkpoint. <p> This is 10 because not all nodes are required to participate in the global checkpoint (i.e., only nodes on which the checkpoint initiator is directly or transitively dependent are required to participate). Node mobility is handled in the algorithm of <ref> [31] </ref> by having the MHs take a local disconnect-snapshot prior to actually disconnecting. During the disconnect interval, all the computation messages arriving for the disconnected MH are buffered at its MSS along with the disconnect-snapshot.
Reference: [32] <author> Y. Sato, M. Inoue, T. Masuzawa, and H. Fujiwara. </author> <title> "A snapshot algorithm for distributed mobile systems". </title> <booktitle> In Proc. of 16th ICDCS, </booktitle> <pages> pages 734-743, </pages> <year> 1996. </year>
Reference-contexts: A configuration of a distributed system changes on the occurrence of an event. An execution is a series of system states alternating with intervening events. The three types of events normally included in the specification of the static distributed message passing system model are send, receive, and internal <ref> [32] </ref>. In general, the term distributed algorithm encompasses a broad variety of concurrent algorithms, spanning a range of applications. Notable characteristics of these algorithms include [27]: 1. Interprocessor communication via shared memory or message passing. <p> Also, since MHs may move out of range or disconnect at any time, eventual delivery of messages may not be guaranteed in mobile system models. According to <ref> [32] </ref>, there are two typical models of a mobile system. In one model the handoff procedure is left as an implementation issue and must be included as a part of each distributed algorithm designed for the system. <p> Modification and development of these algorithms has been sparked by the interest in providing collaborative applications to the wireless, mobile community. Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing <ref> [29, 31, 2, 32] </ref>, mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. <p> The strategies to save process state are combined with each of the handoff schemes and performance results are obtained for each combination under variable bandwidth conditions and with varying rates of host mobility and failure. Sato, et.al. <ref> [32] </ref> developed an asynchronous snapshot algorithm for the mobile environment. These authors show that the Chandy and Lamport [14] distributed snapshot algorithm cannot be applied directly to mobile hosts because topological consistency may be violated due to mobility. <p> Similarly, it is a violation of topological consistency for M H i to be included in the local connection state of M SS j while M SS j is not included in the local connection state of M H i for a particular snapshot. The distributed algorithm developed by <ref> [32] </ref> for mobile systems records the states of hosts, channels (in-transit messages), and Information Piggybacked with a Handoff (IPH) messages. Both MSSs and MHs can initiate the snapshot algorithm.
Reference: [33] <author> M. Satyanarayanan. </author> <title> "Accessing information on demand at any location. Mobile information access". </title> <journal> IEEE Personal Communications, </journal> <volume> 3(1) </volume> <pages> 26-33, </pages> <year> 1996. </year>
Reference-contexts: As a result of necessary size and weight restrictions, these units generally have limited battery life and, compared to stationary computers, slower processor speeds, smaller memory size, and lower disk capacity <ref> [20, 22, 33] </ref>. Mobile units are generally less secure than their static counterparts. Perils which are more likely to befall mobile units include damage resulting from physical causes (e.g., dropping or crushing the unit), and malicious or Byzantine subversion (e.g., theft and corruption of data) [5, 21]. <p> Unreliable connectivity plagues mobile units. Connectivity varies, depending on the unit's location, velocity, and available bandwidth (e.g. bandwidth may be higher indoors than outdoors and certain remote areas may not be covered by any broadcast facilities) <ref> [5, 20, 33] </ref>. Also, the nature of the wireless communication medium makes it subject to forms of interference not experienced by static wired networks. Connectivity and bandwidth availability in these settings is inherently unstable. * Possibility of disconnection: For mobile units, disconnection does not equate to a host failure.
Reference: [34] <author> M. Weiser. </author> <title> "The computer for the twenty-first century". </title> <journal> Scientific American, </journal> <volume> 265(3) </volume> <pages> 94-104, </pages> <year> 1991. </year>
Reference-contexts: Likewise, a mobile network will denote a network which includes mobile computers. 1 computation at their fingertips, whatever their location. While truly widespread "ubiquitous" computing is still a futuristic scenario <ref> [34] </ref>, some strides have been made in adapting existing distributed applications to suit the demands of mobile settings. Adaptation of distributed algorithms is necessitated by the dynamic nature of the mobile network, where mobile hosts (MHs) change points of connection frequently. <p> Next, we will discuss how the constraints imposed by mobility affect distributed computation. 3.1 Mobile Computing: Features and Constraints Mobile computing promises many benefits not currently realizable with static networked computer systems. These include [21]: * Versatile, continuously accessible, or "ubiquitous" <ref> [34] </ref> communication and information ser vices, not limited by the boundaries of wired media. * Expedient notification of events through devices which offer greater flexibility and utility than traditional cellular phones or pagers. * Location dependent applications (e.g., encorporating GPS data) to guide people to nearby sites and services of interest. <p> These benefits are predicted to transform computing into an integral part of our everyday lives <ref> [34] </ref> so that it becomes a natural part of the human environment. However, many challenges remain to be solved before computing, as we know it, blends into the fabric of our day to day existence, i.e., before portable, wireless computing realizes its forecasted potential. <p> As the number of mobile units grows, it will become necessary to provide ever more efficient, scalable, fault tolerant, and "mobility tolerant" distributed applications to the mobile community. If current projections are accurate <ref> [34] </ref>, mobile, wireless computing represents the "next generation" in the evolution of computing. We have presented the challenges inherent to the mobile distributed environment, and have described algorithmic strategies which have been proposed to address these challenges.
Reference: [35] <author> G. Xylomenos and G. C. Polyzos. </author> <title> "IP multicast for mobile hosts". </title> <journal> IEEE Communications, </journal> <volume> 35(1) </volume> <pages> 54-58, </pages> <year> 1997. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting <ref> [4, 15, 36, 35, 3] </ref>, broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> The IP multicast group is based on dynamic membership, i.e, hosts may join or leave the group at any time [16]. The two main motivations for using multicast are <ref> [35, 36] </ref>: 1. to conserve resources and economize on bandwidth utilization. <p> The main components of IP multicast are local and global mechanisms to track group membership and to route datagrams to the group members <ref> [35] </ref>. Local Mechanisms The Internet Group Management Protocol (IGMP), a query or polling based protocol, helps to deal with local group membership tracking. The multicast router periodically sends queries to all the hosts on the network to determine their group memberships.
Reference: [36] <author> G. Xylomenos and G. C. Polyzos. </author> <title> "IP multicasting for wireless mobile hosts". </title> <booktitle> In Proc. of MILCOM `96 IEEE Military Comm. Conf., </booktitle> <pages> pages 933-937, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data [21, 23, 18, 37, 12], group communication algorithms and multicasting <ref> [4, 15, 36, 35, 3] </ref>, broadcast scheduling [19], and locating mobile hosts [7, 25, 24]. We will briefly describe the adaptations which have been developed to allow distributed algorithms to work correctly and/or efficiently for each of these areas in the mobile setting. <p> The IP multicast group is based on dynamic membership, i.e, hosts may join or leave the group at any time [16]. The two main motivations for using multicast are <ref> [35, 36] </ref>: 1. to conserve resources and economize on bandwidth utilization.
Reference: [37] <author> A. Zaslavsky, M. Faiz, B. Srinivasan, A. Rasheed, and S. Lai. </author> <title> "Primary copy method and its modifications for database replication in distributed mobile computing environment". </title> <booktitle> In Proc. of 15th Symp. on Reliable Dist. Systems, </booktitle> <pages> pages 178-187, </pages> <month> Oct. </month> <year> 1996. </year> <month> 21 </month>
Reference-contexts: Current research on software support for mobility has focused on many aspects of distributed computing, including: distributed snapshots and checkpointing [29, 31, 2, 32], mutual exclusion [10, 9], causal ordering [30, 5], management of replicated data <ref> [21, 23, 18, 37, 12] </ref>, group communication algorithms and multicasting [4, 15, 36, 35, 3], broadcast scheduling [19], and locating mobile hosts [7, 25, 24].
References-found: 37

