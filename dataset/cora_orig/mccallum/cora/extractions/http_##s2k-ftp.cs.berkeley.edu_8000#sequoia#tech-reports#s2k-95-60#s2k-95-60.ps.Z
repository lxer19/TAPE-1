URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-95-60/s2k-95-60.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-95-60/
Root-URL: http://www.cs.berkeley.edu
Email: email: tioga@postgres.berkeley.edu  
Title: In the Tioga programming model, boxes represent user-defined database queries or browsers which display data,
Author: Allison Woodruff and Michael Stonebraker 
Note: 1: Introduction  has currently been Figure 1 A Sample Tioga Recipe  
Date: Abstract  
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at Berkeley  
Abstract: Buffering of Intermediate Results in Dataflow Diagrams Buffering of intermediate results in dataflow diagrams can significantly reduce latency when a user browses these results or re-executes a diagram with slightly different inputs. We define the optimal buffer allocation problem of determining the buffer contents which minimize the average response time to such user requests. We show that this problem has several characteristics which render traditional latency reduction techniques ineffective. Since optimal buffer allocation is NP-hard, we propose heuristic methods for buffer management of intermediate results. We present a simulation of the behavior of these heuristics under a variety of conditions, varying graph structure and access pattern. We argue that history mechanisms which track user access patterns can be used to improve performance. We further show that graph structure and access pattern determine the factor of improvement which is possible. The performance enhancements we describe can be applied to minimize query response time in visual dataflow languages. Dataflow languages apply a sequence of operations to specified inputs. In many cases, the final output of a dataflow diagram is the only result examined by a user. However, when performing tasks such as debugging or tuning, a user may wish to view intermediate results. In a naive implementation, intermediate results are not saved when a dataflow diagram executed. As a consequence, if a user asks to view intermediate results, these results need to be recalculated. Since computation costs may be extremely high, the delay in response time can be substantial. A more sophisticated implementation can support buffering of intermediate results. Because blindly buffering all intermediate results may not be feasible, such a system must attempt to select for buffering those intermediate results which most significantly minimize latency. We examine strategies for buffering of intermediate results in dataflow diagrams in the context of Tioga [1], a graphical application development tool which uses the boxes and arrows notation popularized by scientific visualization systems such as AVS [2], Data Explorer [3], and Khoros [4]. Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) [5]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stonebraker, M., Chen, J., Nathan, N., Paxson, C., and Wu, J., </author> <title> Tioga: Providing Data Management for Scientific Visualization Applications, </title> <booktitle> Proceedings of the 1993 VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Because blindly buffering all intermediate results may not be feasible, such a system must attempt to select for buffering those intermediate results which most significantly minimize latency. We examine strategies for buffering of intermediate results in dataflow diagrams in the context of Tioga <ref> [1] </ref>, a graphical application development tool which uses the boxes and arrows notation popularized by scientific visualization systems such as AVS [2], Data Explorer [3], and Khoros [4]. Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) [5].
Reference: [2] <author> Upson, C., Faulhaber Jr., T, Kamins, D., Laidlaw, D., Schlegel, D.,. Vroom, J., Gurwitz, R., and VanDam, A., </author> <title> The Application Visualization System: A Computational Environment for Scientific Visualization, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9:4, </volume> <month> July </month> <year> 1989, </year> <pages> pp. 32-40. </pages>
Reference-contexts: We examine strategies for buffering of intermediate results in dataflow diagrams in the context of Tioga [1], a graphical application development tool which uses the boxes and arrows notation popularized by scientific visualization systems such as AVS <ref> [2] </ref>, Data Explorer [3], and Khoros [4]. Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) [5]. In the Tioga programming model, boxes represent user-defined database queries or browsers which display data, and edges between boxes represent flow of data.
Reference: [3] <author> Lucas, B., Abram, G., Collins, N., Epstein, D., et al., </author> <title> An Architecture for a Scientific Visualization System, </title> <booktitle> Proceedings of the 1992 IEEE Visualization Conference, </booktitle> <address> Boston, Massachusetts, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: We examine strategies for buffering of intermediate results in dataflow diagrams in the context of Tioga [1], a graphical application development tool which uses the boxes and arrows notation popularized by scientific visualization systems such as AVS [2], Data Explorer <ref> [3] </ref>, and Khoros [4]. Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) [5]. In the Tioga programming model, boxes represent user-defined database queries or browsers which display data, and edges between boxes represent flow of data.
Reference: [4] <author> Rasure, J. and Young, M., </author> <title> An Open Environment for Image Processing Software Development, </title> <booktitle> Proceedings of the 1992 SPIE Symposium on Electronic Image Processing, </booktitle> <address> San Jose, California, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: We examine strategies for buffering of intermediate results in dataflow diagrams in the context of Tioga [1], a graphical application development tool which uses the boxes and arrows notation popularized by scientific visualization systems such as AVS [2], Data Explorer [3], and Khoros <ref> [4] </ref>. Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) [5]. In the Tioga programming model, boxes represent user-defined database queries or browsers which display data, and edges between boxes represent flow of data.
Reference: [5] <author> Stonebraker, M. and Kemnitz, G., </author> <title> The POSTGRES Next-Generation Database Management System, </title> <journal> Communications of the ACM, </journal> <volume> 4:10, </volume> <month> October </month> <year> 1991, </year> <pages> pp. 78-92. </pages>
Reference-contexts: Tioga improves upon these systems by providing sophisticated data management using the POSTGRES database management system (DBMS) <ref> [5] </ref>. In the Tioga programming model, boxes represent user-defined database queries or browsers which display data, and edges between boxes represent flow of data. Although a limited number of boxes has currently been A Sample Tioga Recipe implemented, additional boxes may be programmed by users.
Reference: [6] <author> Stonebraker, M. and Dozier, J., </author> <title> SEQUOIA 2000: Large Capacity Object Servers to Support Global Change Research, </title> <type> SEQUOIA 2000 Technical Report 91/1, </type> <institution> University of California, Berkeley, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Objects are displayed in a latitude/longitude viewing space that contains California. One object, a digitized 35mm slide, has been selected and displayed. Tioga was motivated by the needs of scientific users in the SEQUOIA 2000 project <ref> [6] </ref>. In a typical task, these users will construct a recipe, run it on a specified set of inputs, and view the final result. If this result contains an anomaly or some unintuitive or unwanted result, users might want to perform the following types of actions: search query.
Reference: [7] <author> Gorlick, M., and Razouk, R., </author> <title> Using Weaves for Software Construction and Analysis, </title> <booktitle> Proceedings of the 13th International Conference on Software Engineering, </booktitle> <address> Austin, Texas, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Alternatively, they may wish to modify the code of a particular box and rerun the entire recipe with the new box. Finally, they may incrementally develop an application, as supported by systems such as Weaves <ref> [7] </ref>. Searching and modification may be performed individually or in combination. For example, debugging may entail a sequence of search and modification queries to locate and correct a faulty processing step or data. Attempts to reduce the latency of these types of queries raise several interesting issues.
Reference: [8] <author> Garey, M. and Johnson, D., </author> <title> Computers and Intractability: </title>
Reference-contexts: As a result of the complications listed above, calculating the optimal buffer allocation is in fact NP-hard. This can be shown by a polynomial reduction from the Knapsack problem <ref> [8] </ref> to our problem of optimal buffer allocation. In such a reduction, compute times and buffer space requirements correspond to the value and size of objects to be placed in the knapsack.
References-found: 8

