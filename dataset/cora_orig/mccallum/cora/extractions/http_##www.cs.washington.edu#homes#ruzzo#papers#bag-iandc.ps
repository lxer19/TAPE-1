URL: http://www.cs.washington.edu/homes/ruzzo/papers/bag-iandc.ps
Refering-URL: http://www.cs.washington.edu/homes/ruzzo/
Root-URL: 
Title: Time-Space Tradeoffs for Undirected Graph Traversal by Graph Automata  
Author: Paul Beame Allan Borodin Prabhakar Raghavan Walter L. Ruzzo Martin Tompa 
Address: Box 352350, Seattle, WA, U.S.A. 98195  Toronto, Toronto, Ontario, Canada M5S 1A4  650 Harry Road, San Jose, CA, U.S.A.. 95120  
Affiliation: Department of Computer Science and Engineering, University of Washington,  Department of Computer Science, University of  IBM Research Division, Almaden Research Center,  
Note: This material is based upon work supported in part by the Natural Sciences and Engineering Research Council of Canada, by the National Science Foundation under Grants CCR-8703196, CCR-8858799, CCR-8907960, CCR-9002891, and CCR-9301186, and by IBM under Research Contract 16980043. A portion of this work was performed while the fourth author was visiting the University of Toronto, whose hospitality is gratefully acknowledged.  
Date: May 10, 1997  
Abstract: We investigate time-space tradeoffs for traversing undirected graphs, using a variety of structured models that are all variants of Cook and Rackoff's "Jumping Automata for Graphs". Our strongest tradeoff is a quadratic lower bound on the product of time and space for graph traversal. For example, achieving linear time requires linear space, implying that depth-first search is optimal. Since our bound in fact applies to nondeterministic algorithms for nonconnectivity, it also implies that closure under complementation of nondeterministic space-bounded complexity classes is achieved only at the expense of increased time. To demonstrate that these structured models are realistic, we also investigate their power. In addition to admitting well known algorithms such as depth-first search and random walk, we show that one simple variant of this model is nearly as powerful as a Turing machine. Specifically, for general undirected graph problems, it can simulate a Turing machine with only a constant factor increase in space and a polynomial factor increase in time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. M. Adleman. </author> <title> Two theorems on random polynomial time. </title> <booktitle> In 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 75-83, </pages> <address> Ann Arbor, MI, </address> <month> Oct. </month> <year> 1978. </year> <note> IEEE. </note>
Reference-contexts: More interestingly, they also prove a lower bound of (log 2 n= log log n) on the space required by JAGs solving this problem, nearly matching the upper bound. Standard techniques (Adleman <ref> [1] </ref>, Aleli-unas et al. [2]) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon [11] extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in (log n) O (1) .
Reference: [2] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. W. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> Oct. </month> <year> 1979. </year> <note> IEEE. </note>
Reference-contexts: deterministically in polynomial time and small space simultaneously. (See Tompa [48] and Edmonds and Poon [27] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. <ref> [2] </ref>, Borodin et al. [17]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]). <p> lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. <ref> [2] </ref>, Borodin et al. [17]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]). <p> Depth-first or breadth-first search can traverse any n vertex, m edge undirected graph in O (m + n) time, but requires (n) space. Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. <ref> [2] </ref>). <p> More interestingly, they also prove a lower bound of (log 2 n= log log n) on the space required by JAGs solving this problem, nearly matching the upper bound. Standard techniques (Adleman [1], Aleli-unas et al. <ref> [2] </ref>) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon [11] extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in (log n) O (1) . <p> Several authors have considered traversal of undirected regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. <ref> [2] </ref>, Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). <p> This is embodied in Lemma 5 below. One key idea in the proof of Lemma 5 is that a WAG can use a universal traversal sequence (Aleliunas et al. <ref> [2] </ref>) to explore its input. Recall that a universal traversal sequence is guaranteed to visit all vertices of a graph. The following simple extension is more useful for our purposes. <p> Let F be a family of edge-labeled graphs, and define C V (F ) to be the maximum cover time of any graph in F , and similarly for H V (F ). A basic result of Aleliunas et al. <ref> [2] </ref> is that any family F of d-regular graphs has a (vertex) universal traversal sequence of length O (C V (F ) log (n 2 jFj)). <p> Zuckerman [50] observes that H E (G) H V (G) + 2m for all graphs G. Aleliunas et al. <ref> [2] </ref> show that H V (G) 2m, where is the diameter of G (maximum distance between two vertices). It is well known (cf. Lemma 13) that the diameter of d-regular graphs is O (n=d). <p> there are at most n dn labeled d-regular n-vertex graphs, and at most n 4m labeled nonregular m-edge, n-vertex graphs. 2 We remark that Lemma 4 implies the same bounds for lengths of vertex universal traversal sequences, asymptotically matching the best known upper bounds for both regular (Aleliunas et al. <ref> [2] </ref>, Kahn et al. [36]) and nonregular graphs. The main technical result of this section is the following lemma.
Reference: [3] <author> N. Alon, Y. Azar, and Y. Ravid. </author> <title> Universal sequences for complete graphs. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 27 </volume> <pages> 25-28, </pages> <year> 1990. </year>
Reference-contexts: Several authors have considered traversal of undirected regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. <ref> [3] </ref>, Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). <p> A basic result of Aleliunas et al. [2] is that any family F of d-regular graphs has a (vertex) universal traversal sequence of length O (C V (F ) log (n 2 jFj)). Alon et al. <ref> [3] </ref> and Chandra et al. [22] observe that C V (F ) can be replaced by H V (F ) in this expression.
Reference: [4] <author> A. Bar-Noy, A. Borodin, M. Karchmer, N. Linial, and M. Werman. </author> <title> Bounds on universal sequences. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(2) </volume> <pages> 268-277, </pages> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: Several authors have considered traversal of undirected regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. <ref> [4] </ref>, Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [5] <author> G. Barnes, J. F. Buss, W. L. Ruzzo, and B. Schieber. </author> <title> A sublinear space, polynomial time al gorithm for directed s-t connectivity. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 27-33, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. To appear, SIAM Journal on Computing. </note>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa [48] and Edmonds and Poon [27] for lower bounds, and Barnes et al. <ref> [5] </ref> for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [17]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]).
Reference: [6] <author> G. Barnes and J. A. Edmonds. </author> <title> Time-space lower bounds for directed s-t connectivity on JAG models. </title> <booktitle> In Proceedings 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 228-237, </pages> <address> Palo Alto, CA, </address> <month> Nov. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs". 4 Following the preliminary appearance of some of these results [10], Edmonds [26] proved a much stronger result for traversing undirected graphs than that proved in [9], and Barnes and Edmonds <ref> [6] </ref> and Edmonds and Poon [27] proved even more dramatic tradeoffs for traversing directed graphs. The results described above have the strength that they hold independent of the magnitude of Q, the number of states. Presumably the bounds can be strengthened by also accounting for Q.
Reference: [7] <author> G. Barnes and U. Feige. </author> <title> Short random walks on graphs. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 728-737, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige [28], based on earlier work of Broder et al. [20] and Barnes and Feige <ref> [7] </ref>, has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1) =d min and d min is the minimum degree of any vertex. <p> The upper bound of ST mn (log n) O (1) =d min by Feige [28], and the preceding upper bounds of Broder et al. [20] and Barnes and Feige <ref> [7] </ref>, are established on a model that is actually a restricted variant of the JAG. In their algorithms, the JAG initially drops P 1 pebbles on random vertices, after which they are never moved. <p> This paradigm motivates our study of JAGs with unmovable pebbles. Depth- and breadth-first search are examples of algorithms where vertices are permanently marked. The undirected st-connectivity algorithms of Broder et al. [20], Barnes and Feige <ref> [7] </ref>, and Feige [28] are more complex examples of this paradigm. In outline they operate as follows. First, s and t are marked by pebbles. <p> Since our bound applies to nondeterministic algorithms for nonconnectivity, it also implies that closure under complementation of nondeterministic space-bounded complexity classes is achieved only at the expense of increased time, and that the algorithm of Feige [28] (based on Broder et al. [20] and Barnes and Feige <ref> [7] </ref>) cannot be made both errorless and substantially faster. We also showed that our lower bound is tight. The obvious important problem is to strengthen and generalize these lower bounds.
Reference: [8] <author> G. Barnes and W. L. Ruzzo. </author> <title> Deterministic algorithms for undirected s-t connectivity us ing polynomial time and sublinear space. </title> <booktitle> In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 43-53, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year> <note> To appear, Computational Complexity. </note>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo <ref> [8] </ref>), and even O (log 2 n) space (Nisan [41]), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. [42]). In this paper we concentrate on the undirected case.
Reference: [9] <author> P. W. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> A time-space tradeoff for undirected graph traversal by walking automata. </title> <journal> SIAM Journal on Computing. </journal> <note> To appear. </note>
Reference-contexts: In fact, our proof does extend to give a nonlinear lower bound when some motion of the pebbles is allowed, but the bound degenerates when the pebbles are allowed to move with complete freedom. Such models are surprisingly powerful; see Section 3. Nevertheless, in a companion paper <ref> [9] </ref> we prove a lower bound on a model with freely moving pebbles, but without the ability to jump one pebble to another. This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen [12] and Hemmerling [30]. <p> We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs". 4 Following the preliminary appearance of some of these results [10], Edmonds [26] proved a much stronger result for traversing undirected graphs than that proved in <ref> [9] </ref>, and Barnes and Edmonds [6] and Edmonds and Poon [27] proved even more dramatic tradeoffs for traversing directed graphs. The results described above have the strength that they hold independent of the magnitude of Q, the number of states. <p> Thus, stronger proof techniques are necessary for freely moving pebbles; see our companion paper <ref> [9] </ref> for one such technique. 4.2. Preplacement of Unmovable Pebbles As we have noted earlier, the JAG is a powerful yet restricted model. It is conceivable that there is certain useful information about graphs that is intuitively "easy to compute," yet hard for JAGs to compute.
Reference: [10] <author> P. W. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph traversal. </title> <booktitle> In Proceedings 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 429-438, </pages> <address> St. Louis, MO, </address> <month> Oct. </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen [12] and Hemmerling [30]. We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs". 4 Following the preliminary appearance of some of these results <ref> [10] </ref>, Edmonds [26] proved a much stronger result for traversing undirected graphs than that proved in [9], and Barnes and Edmonds [6] and Edmonds and Poon [27] proved even more dramatic tradeoffs for traversing directed graphs. <p> We also showed that our lower bound is tight. The obvious important problem is to strengthen and generalize these lower bounds. Following an earlier version of this paper <ref> [10] </ref>, Edmonds [26] proved a time-space tradeoff on general JAGs: for every z 2, a JAG with at most 1 28z log log n pebbles and at most 2 log z n states requires time n 2 ((log n)=(log log n)) to traverse 3-regular graphs.
Reference: [11] <author> P. Berman and J. Simon. </author> <title> Lower bounds on graph threading by probabilistic machines. </title> <booktitle> In 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 304-311, </pages> <address> Tucson, AZ, </address> <month> Nov. </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: Standard techniques (Adleman [1], Aleli-unas et al. [2]) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon <ref> [11] </ref> extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in (log n) O (1) . In this paper we use variants of the JAG to study the tradeoff between time and space for the problem of undirected graph traversal.
Reference: [12] <author> M. Blum and D. C. Kozen. </author> <title> On the power of the compass (or, why mazes are easier to search than graphs). </title> <booktitle> In 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 132-142, </pages> <address> Ann Arbor, MI, </address> <month> Oct. </month> <year> 1978. </year> <journal> IEEE. </journal> <volume> 26 </volume>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [24]), Savitch [45], Blum and Sakoda [13], Blum and Kozen <ref> [12] </ref>, Hemmerling [30] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography 2 (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. The JAG is a structured model, but not a weak one. <p> Nevertheless, in a companion paper [9] we prove a lower bound on a model with freely moving pebbles, but without the ability to jump one pebble to another. This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen <ref> [12] </ref> and Hemmerling [30].
Reference: [13] <author> M. Blum and W. J. Sakoda. </author> <title> On the capability of finite automata in 2 and 3 dimensional space. </title> <booktitle> In 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 147-161, </pages> <address> Providence, RI, </address> <month> Oct. </month> <year> 1977. </year> <note> IEEE. </note>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [24]), Savitch [45], Blum and Sakoda <ref> [13] </ref>, Blum and Kozen [12], Hemmerling [30] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography 2 (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. The JAG is a structured model, but not a weak one. <p> Such models are surprisingly powerful; see Section 3. Nevertheless, in a companion paper [9] we prove a lower bound on a model with freely moving pebbles, but without the ability to jump one pebble to another. This nonjumping model is closer to the one studied by Blum and Sakoda <ref> [13] </ref>, Blum and Kozen [12] and Hemmerling [30].
Reference: [14] <author> B. Bollobas. </author> <title> Extremal Graph Theory with Emphasis on Probabilistic Methods, </title> <booktitle> volume 62 of Regional Conference Series in Mathematics. Published for the Conference Board of the Mathematical Sciences by the American Mathematical Society, </booktitle> <year> 1986. </year>
Reference-contexts: This is done by choosing a d-regular bipartite graph R whose girth (minimum cycle length) is at least 2 + 2 and whose size jRj is d O () (Bollobas <ref> [14, Chapter 3] </ref>), and then constructing the half-size graph H by connecting c = bn=(2jRj)c copies of R in a cycle.
Reference: [15] <author> J. A. Bondy and U. S. R. Murty. </author> <title> Graph Theory with Applications. </title> <publisher> MacMillan, </publisher> <year> 1976. </year> <note> Revised paperback edition, </note> <year> 1977. </year>
Reference-contexts: Any bipartite graph of maximum degree d can be d-edge-colored using matching techniques (see Bondy and Murty <ref> [15, Theorem 6.1] </ref>). The color of the edge (u; v) becomes the label u;v of the corresponding half edge in G. <p> Proof: With the given constraints on n and d, there is a d-regular, n-vertex, symmetrically labeled graph having its vertices and edges evenly divided between two connected components, one containing s, the other containing t (see <ref> [15, Exercise 6.2.1] </ref>). Fix a minimal length accepting computation of JAG J on this disconnected graph. Suppose for some a 2 f0; 1; : : : ; d 1g that pebbles in this computation walk across fewer than bm=(2d)c edges labeled a.
Reference: [16] <author> A. Borodin. </author> <title> Structured vs. general models in computational complexity. </title> <editor> L'Enseignement Mathematique, XXVIII(3-4):171-190, July-Dec. </editor> <booktitle> 1982. Also in [39, </booktitle> <pages> pages 47-65]. </pages>
Reference-contexts: Although it would be desirable to show a tradeoff for a general model of computation such as a random access machine, obtaining such a tradeoff is beyond the reach of current techniques. Thus it is natural to consider a "structured" model (Borodin <ref> [16] </ref>), that is, one whose basic move is based on the adjacencies of the graph, as opposed to one whose basic move is based on the bits in the graph's encoding.
Reference: [17] <author> A. Borodin, S. A. Cook, P. W. Dymond, W. L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <month> June </month> <year> 1989. </year> <note> See also 18(6): 1283, </note> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: and small space simultaneously. (See Tompa [48] and Edmonds and Poon [27] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. <ref> [17] </ref>); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]).
Reference: [18] <author> A. Borodin, W. L. Ruzzo, and M. Tompa. </author> <title> Lower bounds on the length of universal traversal sequences. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 45(2) </volume> <pages> 180-203, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: authors have considered traversal of undirected regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa <ref> [18] </ref>, Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n). <p> (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa <ref> [18] </ref>, Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n). Thus, for the particularly weak version of logarithmic space corresponding to the case P = 1, a quadratic lower bound on time is known. <p> Proposition 2: d-regular, n vertex graphs exist if and only if dn is even and d n 1. (See <ref> [18, Proposition 1] </ref>, for example, for a proof.) To allow use of -notation in expressing our lower bounds, however, the "time" used by a JAG must be defined for all sufficiently large n. <p> If M determines st-nonconnectivity for all 3-regular symmetrically labeled graphs, then M requires time (n 2 =P ). Proof: The proof generalizes the main lower bound technique introduced by Borodin et al. <ref> [18] </ref>. <p> Fix any numbering of the vertices and any symmetric labeling of the edges of H. Take as the set of "switchable" edges any r = n=4 1 of the rungs. As in Borodin et al. <ref> [18] </ref>, for each x 2 f0; 1g r the graph G x is formed from two copies H 0 and H 1 of H by "switching" the edges corresponding to the 1's in x.
Reference: [19] <author> M. F. Bridgland. </author> <title> Universal traversal sequences for paths and cycles. </title> <journal> Journal of Algorithms, </journal> <volume> 8(3) </volume> <pages> 395-404, </pages> <year> 1987. </year>
Reference-contexts: considered traversal of undirected regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland <ref> [19] </ref>, Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [20] <author> A. Z. Broder, A. R. Karlin, P. Raghavan, and E. Upfal. </author> <title> Trading space for time in undirected s-t connectivity. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(2) </volume> <pages> 324-334, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige [28], based on earlier work of Broder et al. <ref> [20] </ref> and Barnes and Feige [7], has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1) =d min and d min is the minimum degree <p> The upper bound of ST mn (log n) O (1) =d min by Feige [28], and the preceding upper bounds of Broder et al. <ref> [20] </ref> and Barnes and Feige [7], are established on a model that is actually a restricted variant of the JAG. In their algorithms, the JAG initially drops P 1 pebbles on random vertices, after which they are never moved. <p> This paradigm motivates our study of JAGs with unmovable pebbles. Depth- and breadth-first search are examples of algorithms where vertices are permanently marked. The undirected st-connectivity algorithms of Broder et al. <ref> [20] </ref>, Barnes and Feige [7], and Feige [28] are more complex examples of this paradigm. In outline they operate as follows. First, s and t are marked by pebbles. <p> Since our bound applies to nondeterministic algorithms for nonconnectivity, it also implies that closure under complementation of nondeterministic space-bounded complexity classes is achieved only at the expense of increased time, and that the algorithm of Feige [28] (based on Broder et al. <ref> [20] </ref> and Barnes and Feige [7]) cannot be made both errorless and substantially faster. We also showed that our lower bound is tight. The obvious important problem is to strengthen and generalize these lower bounds.
Reference: [21] <author> J. Buss and M. Tompa. </author> <title> Lower bounds on universal traversal sequences based on chains of length five. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 326-329, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: regular graphs by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa <ref> [21] </ref>, Istrail [34], Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n). <p> For instance, it holds for any ff whose length is even and O (n 1:43 ) (Buss and Tompa <ref> [21] </ref>). Theorem 19: For any ff 2 f0; 1g fl of even length, any even integer n, and any integer k, if ff is not a universal traversal sequence for all labeled (n=2)-cycles, then ff k is not a universal traversal sequence for all labeled n-cycles.
Reference: [22] <author> A. K. Chandra, P. Raghavan, W. L. Ruzzo, R. Smolensky, and P. Tiwari. </author> <title> The electrical resistance of a graph captures its commute and cover times. Computational Complexity. </title> <note> To Appear. </note>
Reference-contexts: A basic result of Aleliunas et al. [2] is that any family F of d-regular graphs has a (vertex) universal traversal sequence of length O (C V (F ) log (n 2 jFj)). Alon et al. [3] and Chandra et al. <ref> [22] </ref> observe that C V (F ) can be replaced by H V (F ) in this expression.
Reference: [23] <author> A. Cobham. </author> <title> The recognition problem for the set of perfect squares. </title> <institution> Research Paper RC-1704, IBM Watson Research Center, </institution> <year> 1966. </year>
Reference-contexts: Acceptance is defined as it is for the corresponding types of Turing machines. Time is defined as the number of moves, and space as log 2 Q, where Q is the number of states. General machines are almost identical to the "recognition machines" defined by Cobham <ref> [23] </ref>, except that recognition machines require the input to be accessed sequentially, whereas general machines allow completely random access to the input.
Reference: [24] <author> S. A. Cook and C. W. Rackoff. </author> <title> Space lower bounds for maze threadability on restricted machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9(3) </volume> <pages> 636-652, </pages> <month> Aug. </month> <year> 1980. </year>
Reference-contexts: An appropriate structured model for proving such a tradeoff is some variant of the JAG ("jumping automaton for graphs") of Cook and Rackoff <ref> [24] </ref>. Such an automaton has a set of states, and a limited supply of pebbles that it can move from vertex to adjacent vertex ("walk") or directly to a vertex containing another pebble ("jump"). <p> The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see <ref> [24] </ref>), Savitch [45], Blum and Sakoda [13], Blum and Kozen [12], Hemmerling [30] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography 2 (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. <p> The results described above have the strength that they hold independent of the magnitude of Q, the number of states. Presumably the bounds can be strengthened by also accounting for Q. It is tempting to tackle first the case in which Q is constant; indeed, Cook and Rackoff <ref> [24] </ref> investigate JAGs on undirected graphs in this case, showing for example that P Q = O (1) is impossible. For a nonjumping variant of JAGs, in Section 5 we prove the stronger bound P Q = (n) for 2-regular graphs, no matter how much time the automaton is allowed. <p> Following Cook and Rackoff <ref> [24] </ref>, a JAG is an automaton with Q states and P distinguishable pebbles, where both P and Q may depend on n and d. For the st-connectivity problem, two vertices s and t of its input graph are distinguished. The P pebbles are initially placed on s. <p> Now after moving the leading pebble along label 0 it is a simple matter to advance both pebbles one vertex while maintaining the invariant. A similar construction works with only one passive pebble, if the automaton can jump. 23 Cook and Rackoff <ref> [24, Theorem 4.14] </ref> present a family of 3-regular graphs that cannot be traversed using a constant number of states and pebbles, even if jumping is allowed and the edge labels are disclosed.
Reference: [25] <author> D. L. Dill, A. J. Drexler, A. J. Hu, and C. H. Yang. </author> <title> Protocol verification as a hardware design aid. </title> <booktitle> In IEEE International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 522-525. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: 1. The Complexity of Graph Traversal Graph traversal is a fundamental problem in computing, since it is the natural abstraction of many search processes, with applications as diverse as Internet searching (Mauldin and Leavitt [40], Selberg and Etzioni [46]) and computer-aided verification (Dill, et al. <ref> [25] </ref>, Kurshan [38]). In computational complexity theory, graph traversal (or more precisely, st-connectivity) is a fundamental problem for an additional reason: understanding the complexity of directed versus undirected graph traversal seems to be the key to understanding the relationships among deterministic, probabilistic, and nondeterministic space-bounded algorithms.
Reference: [26] <author> J. A. Edmonds. </author> <title> Time-space trade-offs for undirected ST -connectivity on a JAG. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 718-727, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs". 4 Following the preliminary appearance of some of these results [10], Edmonds <ref> [26] </ref> proved a much stronger result for traversing undirected graphs than that proved in [9], and Barnes and Edmonds [6] and Edmonds and Poon [27] proved even more dramatic tradeoffs for traversing directed graphs. <p> We also showed that our lower bound is tight. The obvious important problem is to strengthen and generalize these lower bounds. Following an earlier version of this paper [10], Edmonds <ref> [26] </ref> proved a time-space tradeoff on general JAGs: for every z 2, a JAG with at most 1 28z log log n pebbles and at most 2 log z n states requires time n 2 ((log n)=(log log n)) to traverse 3-regular graphs.
Reference: [27] <author> J. A. Edmonds and C. K. Poon. </author> <title> A nearly optimal time-space lower bound for directed st connectivity on the NNJAG model. </title> <booktitle> In Proceedings of the Twenty-Seventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-156, </pages> <address> Las Vegas, NV, </address> <month> May </month> <year> 1995. </year> <month> 27 </month>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa [48] and Edmonds and Poon <ref> [27] </ref> for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [17]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et <p> nonjumping variant by referring to it as a WAG | "walking automaton for graphs". 4 Following the preliminary appearance of some of these results [10], Edmonds [26] proved a much stronger result for traversing undirected graphs than that proved in [9], and Barnes and Edmonds [6] and Edmonds and Poon <ref> [27] </ref> proved even more dramatic tradeoffs for traversing directed graphs. The results described above have the strength that they hold independent of the magnitude of Q, the number of states. Presumably the bounds can be strengthened by also accounting for Q.
Reference: [28] <author> U. Feige. </author> <title> A randomized time-space tradeoff of ~ O(m ^ R) for USTCON. </title> <booktitle> In Proceedings 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 238-246, </pages> <address> Palo Alto, CA, </address> <month> Nov. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige <ref> [28] </ref>, based on earlier work of Broder et al. [20] and Barnes and Feige [7], has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1) <p> The upper bound of ST mn (log n) O (1) =d min by Feige <ref> [28] </ref>, and the preceding upper bounds of Broder et al. [20] and Barnes and Feige [7], are established on a model that is actually a restricted variant of the JAG. In their algorithms, the JAG initially drops P 1 pebbles on random vertices, after which they are never moved. <p> This paradigm motivates our study of JAGs with unmovable pebbles. Depth- and breadth-first search are examples of algorithms where vertices are permanently marked. The undirected st-connectivity algorithms of Broder et al. [20], Barnes and Feige [7], and Feige <ref> [28] </ref> are more complex examples of this paradigm. In outline they operate as follows. First, s and t are marked by pebbles. <p> Since our bound applies to nondeterministic algorithms for nonconnectivity, it also implies that closure under complementation of nondeterministic space-bounded complexity classes is achieved only at the expense of increased time, and that the algorithm of Feige <ref> [28] </ref> (based on Broder et al. [20] and Barnes and Feige [7]) cannot be made both errorless and substantially faster. We also showed that our lower bound is tight. The obvious important problem is to strengthen and generalize these lower bounds.
Reference: [29] <author> P. Hall. </author> <title> On representatives of subsets. </title> <journal> J. London Math. Soc., </journal> <volume> 10 </volume> <pages> 26-30, </pages> <year> 1935. </year>
Reference-contexts: This last sum is minimized when the O (P ) marks are equidistantly distributed around the cycle, in which case the sum is (rn=P ) = (n 2 =P ). 2 Using Hall's Theorem <ref> [29] </ref>, one can in fact prove somewhat more about the w walks: each switchable edge in S can be assigned a unique walk that contains it. Next, we will sketch several promised generalizations to the theorem. <p> Note that, for every cycle in G x , there is a corresponding cycle in G 0 r that is no longer, so all graphs in G have girth at least 2 + 2. Furthermore, note by Hall's Theorem <ref> [29] </ref> that R can be symmetrically labeled since it is regular and bipartite, hence so can G 0 r .
Reference: [30] <author> A. Hemmerling. </author> <title> Labyrinth Problems: Labyrinth-Searching Abilities of Automata, volume 114 of Teubner-Texte zur Mathematik. </title> <editor> B. G. </editor> <publisher> Teubner Verlagsgesellschaft, </publisher> <address> Leipzig, </address> <year> 1989. </year>
Reference-contexts: Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [24]), Savitch [45], Blum and Sakoda [13], Blum and Kozen [12], Hemmerling <ref> [30] </ref> and others have considered similar models; see Hemmerling's monograph for an extensive bibliography 2 (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. The JAG is a structured model, but not a weak one. <p> Nevertheless, in a companion paper [9] we prove a lower bound on a model with freely moving pebbles, but without the ability to jump one pebble to another. This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen [12] and Hemmerling <ref> [30] </ref>.
Reference: [31] <author> I. N. Herstein. </author> <title> Topics in Algebra. </title> <publisher> John Wiley & Sons, </publisher> <address> second edition, </address> <year> 1975. </year>
Reference-contexts: Set the variables corresponding to the other r jS d j switchable edges to 0, and these jS d j to some nonzero solution, which must exist in a homogeneous system with fewer equations than unknowns (Herstein <ref> [31, Corollary to Theorem 4.3.3] </ref>). Since such a nonzero solution cannot occur, we have a contradiction. 15 Thus, at least r m of the w walks each have length at least m, an additional r m1 each have length at least m 1, etc.
Reference: [32] <author> S. Hoory and A. Wigderson. </author> <title> Universal traversal sequences for expander graphs. </title> <journal> Information Processing Letters, </journal> <volume> 46(2) </volume> <pages> 67-69, </pages> <month> 17 May </month> <year> 1993. </year>
Reference-contexts: A special case of bijective labelings are the symmetric labelings, where all edges have the same label in each direction, i.e., u;v = v;u for all u; v. (Universal traversal sequences for regular graphs with bijective and symmetric labelings have been considered previously by Hoory and Wigderson <ref> [32] </ref> and Istrail [35], respectively, although under different names. Both papers used the term "consistent" for these two different classes of restricted labelings.) Not all graphs have symmetric labelings, and while every graph does have a bijective labeling, such labelings are not known to be computable in logarithmic space. <p> Since the graph is bijectively labeled, these vertex numbers will be unique. (This idea is used by Hoory and Wigderson <ref> [32] </ref>.) For 1 i jU j + 1, let v i be the vertex reached from the fixed pebble by walking according to the length i 1 prefix of U .
Reference: [33] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: For nondeterministic or one-sided error probabilistic algorithms, however, the complexities may differ. In particular, if a problem L is solvable nondeterministi-cally in O (log n) space, then the complement of L is, too, by the result of Immerman <ref> [33] </ref> and Szelepcsenyi [47]. (For the problem of undirected st-connectivity, this also follows from the result of Nisan and Ta-Shma [43].) However, their algorithms are rather slow. <p> In fact this is also possible, by the following corollary to Theorem 7 and Immerman and Szelepcsenyi's Theorem <ref> [33, 47] </ref>. Corollary 10: Let H be an undirected graph problem, and let S (n) = (log n). If H is solvable using space O (S (n)) by a nondeterministic JAG or WAG J , then so is its complement G H. <p> If H is solvable using space O (S (n)) by a nondeterministic JAG or WAG J , then so is its complement G H. Proof: Simulate J by a nondeterministic, S (n) space-bounded general machine M . By a straightforward adaptation of Immerman and Szelepcsenyi's Theorem <ref> [33, 47] </ref>, there is a nondeterministic, S (n) space-bounded general machine M 0 that accepts the complement G H. Simulate M 0 by a nondeterministic, S (n) space-bounded WAG. 2 We know no substantially simpler method for recognizing bipartite graphs.
Reference: [34] <author> S. Istrail. </author> <title> Polynomial universal traversing sequences for cycles are constructible. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 491-503, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: by a JAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail <ref> [34] </ref>, Karloff et al. [37], Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [35] <author> S. Istrail. </author> <title> Constructing generalized universal traversing sequences of polynomial size for graphs with small diameter. </title> <booktitle> In Proceedings 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 439-448, </pages> <address> St. Louis, MO, </address> <month> Oct. </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: A special case of bijective labelings are the symmetric labelings, where all edges have the same label in each direction, i.e., u;v = v;u for all u; v. (Universal traversal sequences for regular graphs with bijective and symmetric labelings have been considered previously by Hoory and Wigderson [32] and Istrail <ref> [35] </ref>, respectively, although under different names. Both papers used the term "consistent" for these two different classes of restricted labelings.) Not all graphs have symmetric labelings, and while every graph does have a bijective labeling, such labelings are not known to be computable in logarithmic space.
Reference: [36] <author> J. D. Kahn, N. Linial, N. Nisan, and M. E. Saks. </author> <title> On the cover time of random walks on graphs. </title> <journal> Journal of Theoretical Probability, </journal> <volume> 2(1) </volume> <pages> 121-128, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: n dn labeled d-regular n-vertex graphs, and at most n 4m labeled nonregular m-edge, n-vertex graphs. 2 We remark that Lemma 4 implies the same bounds for lengths of vertex universal traversal sequences, asymptotically matching the best known upper bounds for both regular (Aleliunas et al. [2], Kahn et al. <ref> [36] </ref>) and nonregular graphs. The main technical result of this section is the following lemma.
Reference: [37] <author> H. J. Karloff, R. Paturi, and J. Simon. </author> <title> Universal traversal sequences of length n O(log n) for cliques. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 241-243, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. <ref> [37] </ref>, Tompa [49]). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [38] <author> R. P. Kurshan. </author> <title> The complexity of verification. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 365-371, </pages> <address> Montreal, Quebec, Canada, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: 1. The Complexity of Graph Traversal Graph traversal is a fundamental problem in computing, since it is the natural abstraction of many search processes, with applications as diverse as Internet searching (Mauldin and Leavitt [40], Selberg and Etzioni [46]) and computer-aided verification (Dill, et al. [25], Kurshan <ref> [38] </ref>). In computational complexity theory, graph traversal (or more precisely, st-connectivity) is a fundamental problem for an additional reason: understanding the complexity of directed versus undirected graph traversal seems to be the key to understanding the relationships among deterministic, probabilistic, and nondeterministic space-bounded algorithms.
Reference: [39] <editor> Logic and Algorithmic, </editor> <booktitle> An International Symposium Held in Honor of Ernst Specker, </booktitle> <address> Zurich, </address> <month> Feb. </month> <pages> 5-11, </pages> <year> 1980. </year> <note> Monographie No. </note> <institution> 30 de L'Enseignement Mathematique, Universite de Geneve, </institution> <year> 1982. </year>
Reference: [40] <author> M. L. Mauldin and J. R. R. Leavitt. </author> <title> Web-agent related research at the Center for Machine Translation. </title> <booktitle> In Proceedings of the ACM Special Interest Group on Networked Information Discovery and Retrieval (SIGNIDR-94), </booktitle> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: 1. The Complexity of Graph Traversal Graph traversal is a fundamental problem in computing, since it is the natural abstraction of many search processes, with applications as diverse as Internet searching (Mauldin and Leavitt <ref> [40] </ref>, Selberg and Etzioni [46]) and computer-aided verification (Dill, et al. [25], Kurshan [38]).
Reference: [41] <author> N. </author> <title> Nisan. </title> <journal> RL SC . Computational Complexity, </journal> <volume> 4(1) </volume> <pages> 1-11, </pages> <year> 1994. </year>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo [8]), and even O (log 2 n) space (Nisan <ref> [41] </ref>), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. [42]). In this paper we concentrate on the undirected case. The simultaneous time and space requirements of the best known algorithms for undirected graph traversal are as follows.
Reference: [42] <author> N. Nisan, E. Szemeredi, and A. Wigderson. </author> <title> Undirected connectivity in O(log 1:5 n) space. </title> <booktitle> In Proceedings 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 24-29, </pages> <address> Pittsburgh, PA, </address> <month> Oct. </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo [8]), and even O (log 2 n) space (Nisan [41]), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. <ref> [42] </ref>). In this paper we concentrate on the undirected case. The simultaneous time and space requirements of the best known algorithms for undirected graph traversal are as follows.
Reference: [43] <author> N. Nisan and A. Ta-Shma. </author> <title> Symmetric Logspace is closed under complement. </title> <journal> Chicago Journal of Theoretical Computer Science, </journal> <volume> 1995(1), </volume> <month> June </month> <year> 1995. </year> <month> 28 </month>
Reference-contexts: In particular, if a problem L is solvable nondeterministi-cally in O (log n) space, then the complement of L is, too, by the result of Immerman [33] and Szelepcsenyi [47]. (For the problem of undirected st-connectivity, this also follows from the result of Nisan and Ta-Shma <ref> [43] </ref>.) However, their algorithms are rather slow. For example, a logarithmic space nondeterministic RAM can solve st-connectivity in time O (n), but to solve the complementary st-nonconnectivity problem by the Immerman or Szelepcsenyi algorithms requires time (n 4 ).
Reference: [44] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: of the location of each pebble requires log 2 n bits of memory, and keeping track of the state requires log 2 Q.) It is well known that st-connectivity for directed graphs can be solved by a deterministic Turing machine in O (log 2 n) space, by applying Savitch's Theorem <ref> [44] </ref> to the obvious O (log n) space nondeterministic algorithm for the problem. Cook and Rackoff show that the same O (log 2 n) space upper bound holds for deterministic JAGs by direct construction of an O (log n) pebble, n O (1) state deterministic JAG for directed st-connectivity.
Reference: [45] <author> W. J. Savitch. </author> <title> Maze recognizing automata and nondeterministic tape complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7(4) </volume> <pages> 389-403, </pages> <year> 1973. </year>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [24]), Savitch <ref> [45] </ref>, Blum and Sakoda [13], Blum and Kozen [12], Hemmerling [30] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography 2 (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. <p> For instance, a JAG can execute a depth-first or breadth-first search, provided it has one pebble for each vertex, by leaving a pebble on each visited vertex in order to avoid revisiting it, and keeping the stack or queue of pebble names in its state. Furthermore, as Savitch <ref> [45] </ref> shows, a JAG with the additional power to move a pebble from vertex i to vertex i + 1 can simulate an arbitrary Turing machine on directed graphs.
Reference: [46] <author> E. Selberg and O. Etzioni. </author> <title> Multi-engine search and comparison using the Metacrawler. In World Wide Web Journal: </title> <booktitle> Fourth International World Wide Web Conference Proceedings, </booktitle> <pages> pages 195-208, </pages> <month> 11-14 Dec. </month> <year> 1995. </year>
Reference-contexts: 1. The Complexity of Graph Traversal Graph traversal is a fundamental problem in computing, since it is the natural abstraction of many search processes, with applications as diverse as Internet searching (Mauldin and Leavitt [40], Selberg and Etzioni <ref> [46] </ref>) and computer-aided verification (Dill, et al. [25], Kurshan [38]).
Reference: [47] <author> R. Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: For nondeterministic or one-sided error probabilistic algorithms, however, the complexities may differ. In particular, if a problem L is solvable nondeterministi-cally in O (log n) space, then the complement of L is, too, by the result of Immerman [33] and Szelepcsenyi <ref> [47] </ref>. (For the problem of undirected st-connectivity, this also follows from the result of Nisan and Ta-Shma [43].) However, their algorithms are rather slow. <p> In fact this is also possible, by the following corollary to Theorem 7 and Immerman and Szelepcsenyi's Theorem <ref> [33, 47] </ref>. Corollary 10: Let H be an undirected graph problem, and let S (n) = (log n). If H is solvable using space O (S (n)) by a nondeterministic JAG or WAG J , then so is its complement G H. <p> If H is solvable using space O (S (n)) by a nondeterministic JAG or WAG J , then so is its complement G H. Proof: Simulate J by a nondeterministic, S (n) space-bounded general machine M . By a straightforward adaptation of Immerman and Szelepcsenyi's Theorem <ref> [33, 47] </ref>, there is a nondeterministic, S (n) space-bounded general machine M 0 that accepts the complement G H. Simulate M 0 by a nondeterministic, S (n) space-bounded WAG. 2 We know no substantially simpler method for recognizing bipartite graphs.
Reference: [48] <author> M. Tompa. </author> <title> Two familiar transitive closure algorithms which admit no polynomial time, sub linear space implementations. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 130-137, </pages> <month> Feb. </month> <year> 1982. </year>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa <ref> [48] </ref> and Edmonds and Poon [27] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [17]); this implies similar resource bounds on
Reference: [49] <author> M. Tompa. </author> <title> Lower bounds on universal traversal sequences for cycles and other low degree graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(6) </volume> <pages> 1153-1160, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [18], Bridgland [19], Buss and Tompa [21], Istrail [34], Karloff et al. [37], Tompa <ref> [49] </ref>). A result of Borodin, Ruzzo, and Tompa [18] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [50] <author> D. I. Zuckerman. </author> <title> On the time to traverse all edges of a graph. </title> <journal> Information Processing Letters, </journal> <volume> 38(6) </volume> <pages> 335-337, </pages> <month> 28 June </month> <year> 1991. </year> <title> (Last RCS Revision: </title> <note> 1.143 (Short) Date: 1997/01/16 16:27:57 :) 29 </note>
Reference-contexts: Furthermore, for both regular and nonregular graphs, the technique yields an analogous expression bounding the length of half edge universal traversal sequences, using H E in place of H V . Zuckerman <ref> [50] </ref> observes that H E (G) H V (G) + 2m for all graphs G. Aleliunas et al. [2] show that H V (G) 2m, where is the diameter of G (maximum distance between two vertices). It is well known (cf.
References-found: 50

