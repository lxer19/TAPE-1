URL: http://dimacs.rutgers.edu/~mahaney/logrank.ps
Refering-URL: http://dimacs.rutgers.edu/~mahaney/
Root-URL: http://www.cs.rutgers.edu
Title: L-Printable Sets (Extended Abstract)  
Author: Lance Fortnow Judy Goldsmith Matthew A. Levy Stephen Mahaney 
Affiliation: Dept. of Computer Science University of Chicago  Computer Science Dept. University of Kentucky  DIMACS Center Rutgers University  
Abstract: Properties of L-printable sets are considered, and it is shown that two sets A and B that are L-printable and have similar density are L-isomorphic. L-printable sets are characterized as those sets L-isomorphic to tally sets in L, and as subsets of KS[k log n; k log n]. Several classes of L-printable sets are given, including sparse regular and context-free sets; a characterization of sparse regular sets is given. The relationship of the sparse sets in L to the sparse L-rankable and L-printable sets is considered, and strong indications are given that these classes are all different. An oracle is constructed relative to which there are sparse L-rankable sets that are in L and not L-printable, and L-rankable sets of similar density that are not L-isomorphic. 
Abstract-found: 1
Intro-found: 1
Reference: [AR88] <author> E. Allender and R. Rubinstein. </author> <title> P-Printable Sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(6) </volume> <pages> 1193-1202, </pages> <year> 1988. </year>
Reference-contexts: Any P-printable set must lie in P and be sparse, i.e., have at most a fixed polynomial number of strings of any length. Al-lender and Rubinstein <ref> [AR88] </ref> give an in-depth analysis of the complexity of the P-printable sets. fl Supported in part by NSF grant CCR-9253582. y Supported in part by NSF grant CCR-9315354. z Supported by NSF cooperative agreement CCR-9119999 and a grant from the New Jersey Commission on Science and Technology. <p> In analogy to P-printability, every L-printable set must be sparse and lie in L. In this paper we give the first in-depth analysis of the complexity of L-printable sets. (Jenner and Kirsig's primary focus is on NL-printable sets.) Allender and Rubinstein <ref> [AR88] </ref> give three other equivalent characterizations of P-printable sets in terms of sparse P-rankable sets, P-isomorphisms to tally sets and P-sets of low time-bounded Kolmogorov complexity. We analyze these equivalences for the L-printable sets. <p> A set is P-rankable [GS91] if its ranking function is polynomial-time computable. One can similarly define L-rankability. A set is P-printable only if it is P-rankable only if it is P-decidable. The same holds for logarithmic space computation. Allender and Rubinstein <ref> [AR88] </ref> show that every sparse P-rankable set is P-printable. Their proof uses binary search, a technique that appears to require much more than a logarithmic amount of memory. <p> However, we find a way to avoid the binary search in a proof that all L-printable sets of similar density are L-isomorphic. From this result we derive that each L-printable set is L-isomorphic to some tally set in L. Several researchers <ref> [AR88, BB86, HH88] </ref> have shown that P-printable sets are exactly the sets A in P where for some k, A is a subset of the strings whose n k -time bounded Kolmogorov complexity is bounded by k log n. <p> We use the theory of bounded context-free languages [G66, IR86] to show that every sparse context-free language is L-printable. We exhibit L-printable sets that are not regular or context-free. Are all sparse L-sets L-printable or L-rankable? Al-lender and Rubinstein <ref> [AR88] </ref> show that every sparse set in P is P-printable if and only if there are no sparse sets in FewP - P. <p> Lemma 27.1 Let A be sparse and L-rankable. Then there exists a tally set T 2 L such that A and T have similar density. Proof: Omitted. 2 The following proof of Theorem 27 is very similar to the proof of the analogous theorem in <ref> [AR88] </ref>. Proof: [1 ) 2] Let S be L-printable. Then it is sparse and L-rankable. Let T be the tally set guaranteed by Lemma 27.1. By Theorem 14, T is L-printable. Thus, T and S are L-printable, and T and S have similar density. <p> Proposition 29 For any nondeterministic machine M , P M is in L. Allender and Rubinstein <ref> [AR88] </ref> showed the following about P-printable sets. Theorem 30 ([AR88]) Every sparse set in P is P-printable if and only if there are no sparse sets in FewP - P. Allender [A86] also relates this question to inverting functions. <p> We will extend the techniques of Allender [A86] and Allender and Rubinstein <ref> [AR88] </ref> to show the following. Theorem 32 The following are equivalent. 1. There are no sparse sets in FewP - L. 2. Every sparse set in L is L-printable. 3. Every sparse set in L is L-rankable. 4. Every L-computable, polynomial-to-one, length-preserving function is strongly L-invertible on f1g fl .
Reference: [A86] <author> E. Allender. </author> <title> The Complexity of Sparse Sets in P. </title> <booktitle> Proceedings 1st Conf. on Structural Complexity Theory, </booktitle> <pages> pages 1-11, </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Proposition 29 For any nondeterministic machine M , P M is in L. Allender and Rubinstein [AR88] showed the following about P-printable sets. Theorem 30 ([AR88]) Every sparse set in P is P-printable if and only if there are no sparse sets in FewP - P. Allender <ref> [A86] </ref> also relates this question to inverting functions. Definition 31 A function f is strongly L-invertible on a set S if there exists a logspace computable function g such that for every x 2 S, g (x) prints out all of the strings y such that f (y) = x. <p> Definition 31 A function f is strongly L-invertible on a set S if there exists a logspace computable function g such that for every x 2 S, g (x) prints out all of the strings y such that f (y) = x. We will extend the techniques of Allender <ref> [A86] </ref> and Allender and Rubinstein [AR88] to show the following. Theorem 32 The following are equivalent. 1. There are no sparse sets in FewP - L. 2. Every sparse set in L is L-printable. 3. Every sparse set in L is L-rankable. 4.
Reference: [BB86] <author> J. Balcazar and R. </author> <title> Book. Sets with Small Generalized Kolmogorov Complexity. </title> <journal> Acta Informatica, </journal> <volume> 23 </volume> <pages> 679-688, </pages> <year> 1986. </year>
Reference-contexts: However, we find a way to avoid the binary search in a proof that all L-printable sets of similar density are L-isomorphic. From this result we derive that each L-printable set is L-isomorphic to some tally set in L. Several researchers <ref> [AR88, BB86, HH88] </ref> have shown that P-printable sets are exactly the sets A in P where for some k, A is a subset of the strings whose n k -time bounded Kolmogorov complexity is bounded by k log n.
Reference: [BDG88] <author> J. Balcazar, J. Daz and J. Gabarro. </author> <title> Structural Complexity I, </title> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: We show that every set in L is L-rankable if and only if every #P function is computable in logarithmic space. 2 Definitions We assume a basic familiarity with Turing machines and Turing machine complexity. For more information on complexity theory, we suggest either <ref> [BDG88] </ref> or [P94]. We also assume a familiarity with regular languages and expressions and context-free languages as found in [M91].
Reference: [BEGO71] <author> R. Book, S. Even, S. Greibach and G. Ott. </author> <title> Ambiguity in Graphs and Expressions. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-20, No. 2, </volume> <year> 1971. </year>
Reference: [G66] <author> S. Ginsburg. </author> <title> The Mathematical Theory of Context-Free Languages. </title> <address> Mc-Graw Hill, </address> <year> 1966. </year>
Reference-contexts: We also examine the relationships between regular, context-free and L-printable sets. We show that every sparse regular set is L-printable. In our proof we give a restricted form of regular expressions that characterize the sparse regular languages. We use the theory of bounded context-free languages <ref> [G66, IR86] </ref> to show that every sparse context-free language is L-printable. We exhibit L-printable sets that are not regular or context-free. <p> Ibarra and Ravikumar [IR86] prove the following. Theorem 23 ([IR86]) If A is a context-free language then A is sparse if and only if A is bounded. Ginsburg <ref> [G66, p. 158] </ref> gives the following characterization of bounded context-free languages. Theorem 24 ([G66]) The class of bounded context-free languages is the smallest class consisting of the finite sets and fulfilling the following properties. 1.
Reference: [GS91] <author> A. Goldberg and M. Sipser. </author> <title> Compression and Ranking. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(3) </volume> <pages> 524-536, </pages> <year> 1991. </year>
Reference-contexts: We analyze these equivalences for the L-printable sets. The rank of a string x in a set A is the number of strings in A lexicographically less than or equal to x. A set is P-rankable <ref> [GS91] </ref> if its ranking function is polynomial-time computable. One can similarly define L-rankability. A set is P-printable only if it is P-rankable only if it is P-decidable. The same holds for logarithmic space computation. Allender and Rubinstein [AR88] show that every sparse P-rankable set is P-printable. <p> We similarly show that every sparse set in L is L-printable if and only if every sparse set in L is L-rankable if and only if there are no sparse sets in FewP - L. Unlike L-printable sets, L-rankable sets may have exponential density. Blum (see <ref> [GS91] </ref>) shows that every set in P is P-rankable if and only if every #P function is computable in polynomial time. <p> We show that this is equivalent to the (extremely unlikely) collapse of PP and L. Theorem 33 The following are equivalent. 1. Every #P function is computable in logarithmic space. 2. L = PP. 3. Every set in L is L-rankable. Our proof uses ideas from Blum (see <ref> [GS91] </ref>), who shows that every set in P is P-rankable if and only if every #P function is computable in polynomial time.
Reference: [GHR95] <author> R. Greenlaw, H.J. Hoover, and W. Ruzzo. </author> <title> Limits to Parallel Computation: P-Completeness Theory, </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Since i n, we can store and increment the current value of i in log n space. [1 ) 2] Let T 2 P be a tally set. Since the monotone circuit value problem is P-complete (see <ref> [GHR95] </ref>), there exists a logspace-computable function f and a monotone increasing polynomial p such that f (n) produces a circuit C n with the following properties. 1. C n is monotone (i.e., C n uses only AND and OR gates). 2. C n has p (n) gates. 3.
Reference: [Ha83] <author> J. Hartmanis. </author> <title> Generalized Kolmogorov Complexity and the Structure of Feasible Computations. </title> <booktitle> IEEE Proceedings of 24th Symposium Foundations of Computer Science, </booktitle> <pages> 439-445, </pages> <year> 1983. </year>
Reference-contexts: Another approach to compression is found in the study of Kolmogorov complexity; a string is said to have "low information content" if it it has low Kolmogorov complexity. We are interested in the space-bounded Kolmogorov complexity class defined by Hartmanis <ref> [Ha83] </ref>.
Reference: [HH88] <author> J. Hartmanis and L. Hemachandra. </author> <title> On Sparse Oracles Separating Feasible Complexity Classes. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 291-295, </pages> <year> 1988. </year>
Reference-contexts: However, we find a way to avoid the binary search in a proof that all L-printable sets of similar density are L-isomorphic. From this result we derive that each L-printable set is L-isomorphic to some tally set in L. Several researchers <ref> [AR88, BB86, HH88] </ref> have shown that P-printable sets are exactly the sets A in P where for some k, A is a subset of the strings whose n k -time bounded Kolmogorov complexity is bounded by k log n.
Reference: [HIS85] <author> J. Hartmanis, N. Immerman, and V. Sewelson. </author> <title> Sparse Sets in N P P : EX-PTIME versus NEXPTIME. </title> <journal> Information and Control, </journal> <volume> 65 </volume> <pages> 158-181, </pages> <year> 1985. </year>
Reference-contexts: Every sparse L-rankable set is L-printable. 2. There are no tally sets in P - L. One can show that there are no tally sets in P - L if and only if E = LinearSPACE by using padding techniques similar to those used by Hartmanis, Immerman and Sewelson <ref> [HIS85] </ref>. Proof: [2 ) 1] Suppose A is a sparse L-rankable set. Note that A 2 L.
Reference: [HY84] <author> J. Hartmanis and Y. Yesha. </author> <title> Computation Times of NP Sets of Different Densities. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 17-32, </pages> <year> 1984. </year>
Reference-contexts: In such a case, it would be convenient to have an algorithm that prints out all the elements in the set. If one wants to understand the complexity of "easy sets" one should study both easily decidable and "printable" sets. Hartmanis and Yesha first defined P-printable sets in 1984 <ref> [HY84] </ref>. A set A is P-printable if there is a polynomial-time algorithm that on input 1 n outputs all of the elements of A of length n. Any P-printable set must lie in P and be sparse, i.e., have at most a fixed polynomial number of strings of any length.
Reference: [IR86] <author> O. Ibarra and B. Ravikumar. </author> <title> On Sparseness, Ambiguity and Other Decision Problems for Acceptors and Transducers. </title> <booktitle> In Proceedings of the 3rd Symposium on Theoretical Aspects of Computer Science, volume 210 of Lecture Notes in Computer Science, </booktitle> <pages> pages 171-179, </pages> <year> 1986. </year>
Reference-contexts: We also examine the relationships between regular, context-free and L-printable sets. We show that every sparse regular set is L-printable. In our proof we give a restricted form of regular expressions that characterize the sparse regular languages. We use the theory of bounded context-free languages <ref> [G66, IR86] </ref> to show that every sparse context-free language is L-printable. We exhibit L-printable sets that are not regular or context-free. <p> Definition 22 A set A is bounded if there exist strings w 1 ; : : :; w k such that A (w 1 ) fl (w k ) fl Note that every bounded language is sparse. Ibarra and Ravikumar <ref> [IR86] </ref> prove the following. Theorem 23 ([IR86]) If A is a context-free language then A is sparse if and only if A is bounded. Ginsburg [G66, p. 158] gives the following characterization of bounded context-free languages.
Reference: [JK89] <author> B. Jenner and B. Kirsig, </author> <title> Alternierung und Logarithmischer Platz. </title> <type> PhD Thesis, </type> <institution> Universitat Hamburg, </institution> <year> 1989. </year>
Reference-contexts: Often one has limited memory to use for computation. In order to capture this restriction we look at Turing machines that use space bounded by a logarithm in the input size, and, in this paper, at the complexity of sets printable by logspace machines. Jenner and Kirsig <ref> [JK89] </ref> define L-printability as the logspace computable analog of P-printability. In analogy to P-printability, every L-printable set must be sparse and lie in L.
Reference: [M91] <author> J. Martin. </author> <title> Introduction to Languages and the Theory of Computation, </title> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: For more information on complexity theory, we suggest either [BDG88] or [P94]. We also assume a familiarity with regular languages and expressions and context-free languages as found in <ref> [M91] </ref>. The class P is deterministic polynomial time, and L is deterministic logarithmic space; remember that in calculating space complexity, the machine is assumed to have separate tapes for input, computation, and output. The space restriction applies only to the work tape.
Reference: [P94] <author> C. Papadimitriou. </author> <title> Computational Complexity, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: We show that every set in L is L-rankable if and only if every #P function is computable in logarithmic space. 2 Definitions We assume a basic familiarity with Turing machines and Turing machine complexity. For more information on complexity theory, we suggest either [BDG88] or <ref> [P94] </ref>. We also assume a familiarity with regular languages and expressions and context-free languages as found in [M91]. The class P is deterministic polynomial time, and L is deterministic logarithmic space; remember that in calculating space complexity, the machine is assumed to have separate tapes for input, computation, and output.
Reference: [SH85] <author> R.E. Stearns and H.B. Hunt III. </author> <title> On the Equivalence and Containment Problems for Unambiguous Regular Expressions, Regular Grammars and Finite Automata. </title> <journal> SIAM J. Comput. </journal> <volume> 14(3) </volume> <pages> 598-611, </pages> <year> 1985. </year>
Reference-contexts: Theorem 17 ([BEGO71]) For every regular language L, there exists an unambiguous regular expression r such that L (r) = L. We should note that even though removal of ambiguity from a regular expression is, in general, PSPACE-complete <ref> [SH85] </ref>, this does not concern us. Theorem 17 guarantees the existence of an unambiguous regular expression corresponding to every regular language, which is sufficient for our needs. We now define a restricted form of regular expression, which will generate precisely the sparse regular languages.
References-found: 17

