URL: http://www.cs.indiana.edu/l/www/ftp/pierce/delegation.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: A Model of Delegation Based on Existential Types conventions of the F compiler used to
Author: Benjamin C. Pierce Inria-Roquencourt 
Date: April 3, 1993  
Note: Working draft of  and the notational  setC: R-&gt;Color->R, getC: R-&gt;Color|-;  cannot be inherited, since they are overly specific in two crucial ways:  
Abstract: Type-theoretic models based on recursive types have been given for both class-based [Bru92, Bru93, Car92, Wan87, CCH + 89] and delegation-based [Aba93, Mit90, MHF93] object-oriented languages. [PT93] proposes an alternative encoding of a class-based language, in which existential types rather than recursive types are used to achieve the encapsulation of object states with their methods. We sketch here a similar construction for a delegation-based language. We assume that the reader is familiar with the encoding of objects presented in [PT93], to which we also defer for the definition of the underlying lambda-calculus F ! maps an interface type M of objects into the type Object M, whose elements are objects with the interface M. For example, if we have the interfaces # PointM = Fun(R) -|setX: R-&gt;Int->R, getX: R-&gt;Int, bump: R-&gt;R|-; PointM : *-&gt;* # CPointM = Fun(R) -|setX: R-&gt;Int->R, getX: R-&gt;Int, bump: R-&gt;R, 
Abstract-found: 1
Intro-found: 1
Reference: [Aba93] <author> Martn Abadi. </author> <title> Baby Modula-3 and a theory of objects. </title> <type> Research Report 95, </type> <institution> Digital Equipment Corporation, Systems Research Center, Palo Alto, California, </institution> <month> February </month> <year> 1993. </year>
Reference: [Bru92] <author> Kim B. Bruce. </author> <title> A paradigmatic object-oriented language: Design, static typing and semantics. </title> <type> Technical Report CS-92-01, </type> <institution> Williams College, </institution> <month> January </month> <year> 1992. </year>
Reference: [Bru93] <author> Kim B. Bruce. </author> <title> Safe type checking in a statically typed object-oriented programming language. </title> <booktitle> In Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [Car92] <author> Luca Cardelli. </author> <title> Extensible records in a pure calculus of subtyping. </title> <note> Research report 81, DEC Systems Research Center, January 1992. To appear in [GM93]. </note>
Reference: [CCH + 89] <author> Peter Canning, William Cook, Walter Hill, Walter Olthoff, and John Mitchell. </author> <title> F-bounded quantification for object-oriented programming. </title> <booktitle> In Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273-280, </pages> <month> September </month> <year> 1989. </year>
Reference: [GM93] <author> Carl A. Gunter and John C. Mitchell. </author> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year> <note> To appear. </note>
Reference: [MHF93] <author> John C. Mitchell, Furio Honsell, and Kathleen Fisher. </author> <title> A lambda calculus of objects and method specialization. </title> <booktitle> In 1993 IEEE Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1993. </year> <note> To appear. </note>
Reference: [Mit90] <author> John C. Mitchell. </author> <title> Toward a typed foundation for method specialization and inheritance. </title> <booktitle> In Proceedings of the 17th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 109-124, </pages> <month> January </month> <year> 1990. </year> <note> To appear in [GM93]. </note>
Reference: [PT93] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming, </journal> <note> 1993. To appear; a preliminary version appeared in Principles of Programming Languages, </note> <year> 1993, </year> <title> and as University of Edinburgh technical report ECS-LFCS-92-225, under the title "Object-Oriented Programming Without Recursive Types". </title>
Reference-contexts: In the object model of <ref> [PT93] </ref>, sending messages to objects could be accomplished simply by opening the existential quantifier, extracting the implementations of the methods, applying the appropriate one ot the internal state, and repackaging the result as a new object if necessary. <p> Programs that manipulate points by sending them messages have exactly the same form as in <ref> [PT93] </ref>: # Point'getX PointM (Point'bump PointM (Point'setX PointM p 3)); 4 : Int Note that the variation in object model is visible only inside the parts of the code concerned with building objects and implementing the low-level details of sending them messages; the parts of the code that use objects cannot
Reference: [Wan87] <author> Mitchell Wand. </author> <title> Complete type inference for simple objects. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <month> June </month> <year> 1987. </year> <month> 7 </month>
References-found: 10

