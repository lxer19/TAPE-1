URL: http://american.cs.ucdavis.edu/publications/HICSS91.ps
Refering-URL: http://american.cs.ucdavis.edu/ArchLabPersonnel/Farrens/PubList.html
Root-URL: http://www.cs.ucdavis.edu
Email: (arp@tosca.colorado.edu)  
Title: d d OVERVIEW OF THE PIPE PROCESSOR IMPLEMENTATION Architectural I/O queues that lie between the
Author: Matthew K. Farrens Andrew R. Pleszkun 
Note: (1)  However, it was felt that this combination of architectural features was sufficiently unique to justify an actual implementation of the processor, to investigate whether they would work as well in practice as in theory.  
Address: Davis, CA 95616  (farrens@american.ucdavis.edu) Boulder, CO 80309-0425  
Affiliation: Computer Science Division Department of Electrical and University of California, Davis Computer Engineering  University of Colorado-Boulder  
Abstract: The processor was fabricated by MOSIS in 1.5 micron nMOS, and is 2-3 times faster than the 1.5 micron nMOS versions of the RISC and MIPS chips. This improved performance is due in large part to the presence of the I/O queues, which allow the processor internals to run at a clock rate completely independent of the external memory speed. Many other valuable lessons were learned from the implementation, and a number of new questions have been generated whose resolution is still under investigation. We feel that the benefits from implementing the processor have definitely been worth the effort. 
Abstract-found: 1
Intro-found: 1
Reference: [DeLe87] <author> J. A. DeRosa and H. M. Levy, </author> <title> ``An Evaluation of Branch Architectures'', </title> <booktitle> Proceedings of the Fourteenth Annual International Symposium on Computer Architecture, </booktitle> <address> Pittsburgh, Pennsylvania (June 1987), </address> <pages> pp. 10-16. </pages>
Reference-contexts: Prepare to Branch Branch instructions are notorious for causing performance degradation in heavily pipelined machines. This is due to the difficulty of keeping the pipeline full of useful instructions while the branch condition is being evaluated. This problem has been extensively studied, <ref> [DeLe87, McHe86, Smit81] </ref>, and a number of methods for minimizing the impact of branches have been developed. The method used in the PIPE architecture is a generalized form of the delayed branch [HJBG82].
Reference: [FaPl89] <author> M. K. Farrens and A. R. Pleszkun, </author> <title> ``Improving the Performance of Small On-Chip Instruction Caches'', </title> <booktitle> Proceedings of the Sixteenth Annual International Symposium on Computer Architecture, </booktitle> <volume> vol. 17, no. </volume> <month> 3 (June </month> <year> 1989), </year> <pages> pp. 234-241. </pages> <address> d d </address>
Reference-contexts: In either case, the degree of effective prefetching depends on the number of pipeline stages and the amount of blocking that occurs due to dependencies between instructions. The instruction fetch and cache logic have been explained in detail elsewhere <ref> [FaPl89, Farr89] </ref>. 4.2. The Issue Logic The issue logic is responsible for a number of tasks. It schedules the use of the result bus and blocks instruction issue if any hazards are detected.
Reference: [Farr89] <author> M. K. Farrens, </author> <title> The Design and Analysis of a High Performance Single Chip Processor, </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical and Computer Engineering,, Madison, Wisconsin, </institution> <month> (August </month> <year> 1989). </year>
Reference-contexts: The intent of separating a program this way is to allow the Access processor to get ahead of the Execute processor, thereby reducing or eliminating the delays due to accessing external memory. A much more detailed d d description of the PIPE project is available in <ref> [Farr89, GHLP85] </ref>. 3. The PIPE Processor Since in the PIPE machine both the Access and the Execute processors are identical, throughout the rest of this paper these processors will be referred to as PIPE processors. A PIPE processor has much in common with other "RISC" processors. <p> In either case, the degree of effective prefetching depends on the number of pipeline stages and the amount of blocking that occurs due to dependencies between instructions. The instruction fetch and cache logic have been explained in detail elsewhere <ref> [FaPl89, Farr89] </ref>. 4.2. The Issue Logic The issue logic is responsible for a number of tasks. It schedules the use of the result bus and blocks instruction issue if any hazards are detected. <p> The potential of architectural queues has been shown again and again by simulation results demonstrating the performance improvements that can be achieved through the use of queues <ref> [Farr89, YoGo84, Youn85] </ref>. The building of the PIPE processor has demonstrated that from an implementation perspective, there is no reason not to equip a single-chip processor with I/O queues. <p> However, we decided to stick to the original specifications of a single cycle shifter, and left out some of the functionality. This question of pipelining the barrel shifter led us to a totally unexpected discovery, however. As presented in detail in <ref> [Farr89] </ref>, simulation studies of how pipelining the barrel shifter would affect processor performance led us to the surprising conclusion that when a processor employs I/O queues, the difference between having all functional units of length 1 and all of length 2 causes less than a 2% degradation in performance over the
Reference: [GHLP85] <author> J. R. Goodman, J. T. Hsieh, K. Liou, A. R. Pleszkun, P. B. Schechter and H. C. Young, </author> <title> ``PIPE: a VLSI Decoupled Architecture'', </title> <booktitle> Proceedings of the Twelveth Annual International Symposium on Computer Architecture(June 1985), </booktitle> <pages> pp. 20-27. </pages>
Reference-contexts: The intent of separating a program this way is to allow the Access processor to get ahead of the Execute processor, thereby reducing or eliminating the delays due to accessing external memory. A much more detailed d d description of the PIPE project is available in <ref> [Farr89, GHLP85] </ref>. 3. The PIPE Processor Since in the PIPE machine both the Access and the Execute processors are identical, throughout the rest of this paper these processors will be referred to as PIPE processors. A PIPE processor has much in common with other "RISC" processors.
Reference: [HJBG82] <author> J. Hennessy, N. Jouppi, F. Baskett, T. Gross and J. Gill, </author> <title> ``Hardware/Software Tradeoffs for Increased Performance'', </title> <booktitle> Proceedings of the First International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Palo Alto, California (March 1982), </address> <pages> pp. 2-11. </pages>
Reference-contexts: This problem has been extensively studied, [DeLe87, McHe86, Smit81], and a number of methods for minimizing the impact of branches have been developed. The method used in the PIPE architecture is a generalized form of the delayed branch <ref> [HJBG82] </ref>. In the delayed branch scheme, there are a fixed number of delay slots following a branch that are filled with instructions that are guaranteed to execute.
Reference: [HJPR83] <author> J. Hennessy, N. Jouppi, S. Przybylski, C. Rowen and T. Gross, </author> <title> ``Design of a High Performance VLSI Processor'', </title> <booktitle> Proceedings of the Third Caltech Conference on VLSI(March 1983), </booktitle> <pages> pp. 2-11. </pages>
Reference-contexts: Therefore, PIPE should be compared to processors designed in the same restrictive technology. PIPE was fabricated in 3mm nMOS with a single level of metal. A more accurate comparison for PIPE would be the 3mm nMOS versions of the RISC-II [Henn84] or MIPS <ref> [HJPR83] </ref> chips; PIPE has a clock rate that is is 2-3 times higher than either of these machines. <p> While this number is not as impressive as the performance numbers quoted by several other existing processors, it is important to remember that PIPE was fabricated in a very restrictive technology. A better comparison for PIPE would be the 3mm nMOS versions of the RISC-II [Henn84] or MIPS <ref> [HJPR83] </ref> chips; PIPE has a clock rate that is is 2-3 times faster than either of these machines.
Reference: [Henn84] <author> J. L. Hennessy, </author> <title> ``VLSI Processor Architecture'', </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-33, no. </volume> <month> 12 (December </month> <year> 1984), </year> <pages> pp. 1221-1246. </pages>
Reference-contexts: Therefore, PIPE should be compared to processors designed in the same restrictive technology. PIPE was fabricated in 3mm nMOS with a single level of metal. A more accurate comparison for PIPE would be the 3mm nMOS versions of the RISC-II <ref> [Henn84] </ref> or MIPS [HJPR83] chips; PIPE has a clock rate that is is 2-3 times higher than either of these machines. <p> While this number is not as impressive as the performance numbers quoted by several other existing processors, it is important to remember that PIPE was fabricated in a very restrictive technology. A better comparison for PIPE would be the 3mm nMOS versions of the RISC-II <ref> [Henn84] </ref> or MIPS [HJPR83] chips; PIPE has a clock rate that is is 2-3 times faster than either of these machines.
Reference: [McHe86] <author> S. McFarling and J. Hennessy, </author> <title> ``Reducing the Cost of Branches'', </title> <booktitle> Proceedings of the Thirteenth Annual International Symposium on Computer Architecture, </booktitle> <address> Tokyo, Japan (June 1986), </address> <pages> pp. 396-403. </pages>
Reference-contexts: Prepare to Branch Branch instructions are notorious for causing performance degradation in heavily pipelined machines. This is due to the difficulty of keeping the pipeline full of useful instructions while the branch condition is being evaluated. This problem has been extensively studied, <ref> [DeLe87, McHe86, Smit81] </ref>, and a number of methods for minimizing the impact of branches have been developed. The method used in the PIPE architecture is a generalized form of the delayed branch [HJBG82].
Reference: [PlDa83] <author> A. R. Pleszkun and E. Davidson,, </author> <title> ``A Structured Memory Access Architecture'', </title> <booktitle> International Conference on Parallel Processing, </booktitle> <address> Bellaire, MI (1983). </address>
Reference-contexts: The PIPE Machine It is important to differentiate between the PIPE machine and the PIPE processor. The PIPE machine is composed of an intelligent memory and two identical processors, which provide support for a decoupled access and execute mode of execution <ref> [PlDa83, Smit82] </ref> (see As mentioned in the introduction, a decoupled architecture is one in which a program to be executed is divided into two or more instruction streams, and a number of processors cooperate in the execution of the program.
Reference: [Smit81] <author> J. E. Smith, </author> <title> ``A Study of Branch Prediction Strategies'', </title> <booktitle> Proceedings of the Eighth Annual International Symposium on Computer Architecture, </booktitle> <address> Minneapolis, Minnesota (May 1981), </address> <pages> pp. 135-148. </pages>
Reference-contexts: Prepare to Branch Branch instructions are notorious for causing performance degradation in heavily pipelined machines. This is due to the difficulty of keeping the pipeline full of useful instructions while the branch condition is being evaluated. This problem has been extensively studied, <ref> [DeLe87, McHe86, Smit81] </ref>, and a number of methods for minimizing the impact of branches have been developed. The method used in the PIPE architecture is a generalized form of the delayed branch [HJBG82].
Reference: [Smit82] <author> J. E. Smith, </author> <title> ``Decoupled Access/Execute Computer Architectures'', </title> <booktitle> Proceedings of the Ninth Annual International Symposium on Computer Architecture, </booktitle> <address> Austin, Texas (April 26-29, </address> <year> 1982), </year> <pages> pp. 112-119. </pages>
Reference-contexts: The PIPE Machine It is important to differentiate between the PIPE machine and the PIPE processor. The PIPE machine is composed of an intelligent memory and two identical processors, which provide support for a decoupled access and execute mode of execution <ref> [PlDa83, Smit82] </ref> (see As mentioned in the introduction, a decoupled architecture is one in which a program to be executed is divided into two or more instruction streams, and a number of processors cooperate in the execution of the program.
Reference: [WeSm84] <author> S. Weiss and J. E. Smith, </author> <title> ``Instruction Issue Logic for Pipelined Supercomputers'', </title> <booktitle> Proceedings of the Eleventh Annual Symposium on Computer Architecture, </booktitle> <volume> vol. 12, no. </volume> <month> 3 (June </month> <year> 1984), </year> <pages> pp. 110-118. </pages>
Reference-contexts: Studies of the effect of this restriction on the performance of the processor indicate that very little performance improvement would occur if the CRAY instruction fetch logic was modified to allow two parcels to move into the IR each clock <ref> [WeSm84] </ref>. In order to analyze the affect such a restriction would have on the PIPE processor, a number of simulations were performed on the PIPE simulator in which the loading of the IR was restricted in this manner.
Reference: [YoGo84] <author> H. C. Young and J. R. Goodman, </author> <title> ``A Simulation Study of Architectural Data Queues and Prepare-to-Branch Instruction'', </title> <booktitle> Proceedings of the IEEE INT Conference on Computer Design: VLSI in Computers, Port Chester, </booktitle> <address> New York (October 1984), </address> <pages> pp. 544-549. </pages>
Reference-contexts: Our experience with numeric programs is slightly different. We have found that a compiler can easily generate code with an average of four instructions that can be unconditionally executed after a branch <ref> [YoGo84] </ref>. The PIPE processor uses an instruction called the Prepare-to-Branch (PBR) instruction which allows the compiler to specify the number of delay slots after a branch instruction (between 0 and 7). <p> The potential of architectural queues has been shown again and again by simulation results demonstrating the performance improvements that can be achieved through the use of queues <ref> [Farr89, YoGo84, Youn85] </ref>. The building of the PIPE processor has demonstrated that from an implementation perspective, there is no reason not to equip a single-chip processor with I/O queues.
Reference: [Youn85] <author> H. C. Young, </author> <title> Evaluation of a Decoupled Computer Architecture and the Design of a Vector Extension, </title> <type> Ph.D Thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> (July </month> <year> 1985). </year> <title> d d </title>
Reference-contexts: The architecture also features I/O queues, visible to the programmer, that provide a means of buffering external memory accesses. In addition, the PIPE processor has a unique way of handling branches, as well as providing support for subroutine calls. Extensive analysis and simulation studies of the architecture <ref> [Youn85] </ref> have shown d d that a single PIPE processor, without running in a decou-pled mode, is still capable of significant performance improvements over more conventional processors. <p> The potential of architectural queues has been shown again and again by simulation results demonstrating the performance improvements that can be achieved through the use of queues <ref> [Farr89, YoGo84, Youn85] </ref>. The building of the PIPE processor has demonstrated that from an implementation perspective, there is no reason not to equip a single-chip processor with I/O queues.
References-found: 14

