URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-688.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Email: E-mail: mihir@watson.ibm.com  mail: shafi@theory.lcs.mit.edu  
Title: Key Escrow  
Author: Mihir Bellare Shafi Goldwasser 
Web: http://www-cse.ucsd.edu/users/mihir  
Address: Diego, 9500 Gilman Drive, La Jolla, California 92093, USA.  545 Technology Square, Cambridge, MA 02139, USA. E  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at San  MIT Laboratory of Computer Science,  
Date: April 1996  
Note: Encapsulated  Web page:  
Abstract: Appears as MIT Laboratory for Computer Science Technical Report 688, April 1996. Abstract The widespread need for encryption for private communication and stored information poses a problem when there exists an authority, such as the governement or business employer, who under some predetermined set of circumstances, needs to be able to obtain access to information and communication of selected users. Key-escrow is the main solution considered to ensure the ability of an authority to wiretap communictaion. The main objection to all current Key-escrow proposals is that they assume complete faith in the authority and its trustees. If the authorities do not follow the rules, or are replaced by an un-trustworthy authority tomorrow, they can immediately recover the secret keys of all users, and embark on massive wiretapping automatically scanning everyone's e-mail and computer files. We introduce a new approach to key escrow called verifiable encapsulated key escrow (VEKE), applicable to any encryption algorithm, which makes it verifiably computationally possible for an authority to only selectively wiretap a small number of individual users, and computationally prohibitive to launch large scale wiretapping. This is achieved by imposing a time delay between the obtaining the escrowed information of a user and obtaining the user secret key. We achieve VEKE by a new cryptographic tool called verifiable cryptographic time capsules (VCTC). The capsules are ways of strongly encoding information, which allow an authority to verify that it can obtain the contents of the capsule after (and only after) a specified amount of time delay. When applied to key-escrow, the content of the capsules are secret-keys of users, and the amount of time it takes to open these capsules is a parameter which is set such that it is computationally possible to open a few of them, but computationally hard to open large numbers of them. When several trustees are available, the time capsule is split amongst them via a secret sharing scheme. When trustees pull their pieces together, they can recover the capsule and start computing toward opening it. VCTC's can be constructed under the general assumption that claw-free trapdoor functions exist. For the purpose of key-escrow for the RSA cryptosystem (and the Diffie and Hellman cryptosystem), we give very efficient implementations of VCTC based on the particular assumption that factoring integers is hard (respectively, the assumption that the discrete logarithm is hard to compute). Although conceived for the purpose of wiretapping and in the context of key-escrow, VCTC can be used for "sending information into the future" [May] with applications to auctions with closed bids, deferred electronic payments, and the sealing of documents for limited time periods. 
Abstract-found: 1
Intro-found: 1
Reference: [BeGw] <author> M. Bellare and S. Goldwasser. </author> <title> Verifiable partial key escrow. </title> <type> Technical Report number CS95-447, </type> <institution> Dept of CS and Engineering, UCSD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: The key might be quite structured, and in general it is hard to isolate a set of bits having the property that one is forced to find all of them to recover the key. Accordingly, further partial key escrow proposals <ref> [Mi2, BeGw] </ref> have exploited the structure of the crypto-system to find ways to "break up" sk into two parts such that the desired properties can be guaranteed. This has several disadvantages. <p> The property of verifiability is especially attractive in some of these applications domains. 1.5 Related Work Since Shamir [Sh2] suggested the idea of partial key escrow, it has been investigated by several researchers, including [Mi2, MiSh] and a pre-cursor of this work described in <ref> [BeGw] </ref>. In [Mi2] verifiable methods for partial-key-escrow are proposed, for the Diffie-Hellman public key cryptosystem and for an extended version of the RSA cryptosystem where the composite modulus has as many prime factors as the number of trustees. We show however that these methods however suffer from the early-recovery problem. <p> We show however that these methods however suffer from the early-recovery problem. Namely, it is possible to recover the unescrowed portion of the key, prior to recovering the escrowed portion of the key. See Appendix A for description of attacks. 4 In an earlier work <ref> [BeGw] </ref> we proposed a verifiable partial key-escrow method for the Diffie and Hellman public-key escrow system which is provably secure against early recovery and guarantee that recovering the unescrowed portion of the key can take place only after the escrowed portion of the key has been recovered.
Reference: [BeRo] <author> M.Bellare and P. Rogaway. </author> <title> Random oracles are practical: a paradigm for designing efficient protocols. </title> <booktitle> Proceedings of the First Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1993. </year>
Reference-contexts: This is a heuristic transformation, but one that seems secure in practice. It is typically justified under the assumption that the hash function behaves like a random oracle. We refer the reader to <ref> [BeRo] </ref> for discussions of the random oracle setting in which this can be modeled, definitions of zero-knowledge in this setting, and discussions of the meaningfulness of instantiating random oracles via hash functions. 5 VCTC and VEKE Basic encapsulated key escrow. The basic paradigm is like this. <p> The analysis applies to this protocol. As we noted in Section 4, however, in practice interaction can be eliminated by specifying the challenges as a hash of other quantities, a heuristic but seemingly sound approach justified in a random oracle model <ref> [BeRo] </ref>. This is suggested for an implementation. The same applies to the following protocols and we won't mention it again. 7 A VTDKE scheme for RSA Many popular cryptosystems are based on factoring. <p> Specifically, in these systems, the public key of the user is a composite modulus N product of two primes, and the secret key of the user is the prime factorization of N <ref> [RSA, BlGo, BeRo] </ref>. It is important to be able to accomplish VTDKE for such systems as well. In the solution for DH provided in Section 6 we seemed to use the properties of the discrete logarithm function quite strongly in the way we generated s 0 and s 1 .
Reference: [BeRo] <author> M. Bellare and P. Rogaway. </author> <title> Optimal asymmetric encryption. </title> <booktitle> Advances in Cryptology - Eurocrypt 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 950, </volume> <editor> A. De Santis ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This is a heuristic transformation, but one that seems secure in practice. It is typically justified under the assumption that the hash function behaves like a random oracle. We refer the reader to <ref> [BeRo] </ref> for discussions of the random oracle setting in which this can be modeled, definitions of zero-knowledge in this setting, and discussions of the meaningfulness of instantiating random oracles via hash functions. 5 VCTC and VEKE Basic encapsulated key escrow. The basic paradigm is like this. <p> The analysis applies to this protocol. As we noted in Section 4, however, in practice interaction can be eliminated by specifying the challenges as a hash of other quantities, a heuristic but seemingly sound approach justified in a random oracle model <ref> [BeRo] </ref>. This is suggested for an implementation. The same applies to the following protocols and we won't mention it again. 7 A VTDKE scheme for RSA Many popular cryptosystems are based on factoring. <p> Specifically, in these systems, the public key of the user is a composite modulus N product of two primes, and the secret key of the user is the prime factorization of N <ref> [RSA, BlGo, BeRo] </ref>. It is important to be able to accomplish VTDKE for such systems as well. In the solution for DH provided in Section 6 we seemed to use the properties of the discrete logarithm function quite strongly in the way we generated s 0 and s 1 .
Reference: [Blk] <author> G. Blakley. </author> <title> Safeguarding cryptographic keys. </title> <booktitle> AFIPS Conference Proceedings, </booktitle> <month> June </month> <year> 1979. </year>
Reference: [Blz] <author> M. </author> <title> Blaze. Protocol failure in the escrowed encryption standard. </title> <booktitle> Proceedings of the Second Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1994. </year>
Reference: [BlGo] <author> M. Blum and S. Goldwasser. </author> <title> An efficient probabilistic public-key encryption that hides all partial information. </title> <booktitle> Advances in Cryptology - Crypto 84 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 196, </volume> <editor> R. Blakely ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Specifically, in these systems, the public key of the user is a composite modulus N product of two primes, and the secret key of the user is the prime factorization of N <ref> [RSA, BlGo, BeRo] </ref>. It is important to be able to accomplish VTDKE for such systems as well. In the solution for DH provided in Section 6 we seemed to use the properties of the discrete logarithm function quite strongly in the way we generated s 0 and s 1 .
Reference: [CGMA] <author> B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch. </author> <title> Verifiable secret sharing and achieving simultaneity in the presence of faults. </title> <booktitle> Proceedings of the 27th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1986. </year>
Reference: [Den] <author> D. Denning. </author> <title> To tap or not to tap. </title> <journal> CACM 1993. </journal>
Reference: [DeSm] <author> D. Denning and M. Smid. </author> <title> Key escrowing now. </title> <journal> IEEE Communications Magazine, </journal> <month> Sep. </month> <year> 1994. </year>
Reference: [Des] <author> Y. Desmedt. </author> <title> Securing traceability of ciphertexts: towards a secure software key escrow system. </title> <booktitle> Advances in Cryptology - Eurocrypt 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 921, </volume> <editor> L. Guillou and J. Quisquater ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [DiHe] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <pages> pp. 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference: [Fel] <author> P. Feldman. </author> <title> A practical scheme for non-interactive verifiable secret sharing. </title> <booktitle> Proceedings of the 28th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1987. </year>
Reference: [FrYu] <author> Y. Frankel and M. Yung. </author> <title> Escrow encryption systems visited: attacks, analysis and designs. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [GMW] <author> O. Goldreich, S. Micali and A. Wigderson. </author> <title> Proofs that yield nothing but their validity, or all languages in NP have zero-knowledge proof systems. </title> <journal> JACM , Vol. </journal> <volume> 38, No. 1, </volume> <month> July </month> <year> 1991. </year>
Reference: [GM] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic encryption. </title> <journal> J. of Computer and System Sciences 28, </journal> <pages> 270-299, </pages> <month> April </month> <year> 1984. </year> <month> 17 </month>
Reference-contexts: Another user, given pk, can encrypt a message M via M 0 = E pk (M ), and the user can decrypt this via M = D sk (M 0 ). Security is in the usual sense of probabilistic encryption <ref> [GM] </ref>. The VTDKE system has several parameters. There is the number t &lt; n of trustees that are not trusted. There are two security parameters, k 1 and k 2 . The first governs the size of keys (pk; sk), and hence the security of the underlying cryptosystem. <p> The most straightforward definition of breaking a capsule C would be obtaining the information s. But an effective capsule ought to meet a stronger requirement. Namely, partial information about s should also be hidden, just like in an encryption scheme. Our approach to formalizing this follows <ref> [GM] </ref>. A capsule-cracker is an algorithm A that takes 1 k ; C and a pair m 0 ; m 1 of plaintexts, and outputs a bit.
Reference: [GMRa] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of in-teractive proofs. </title> <journal> SIAM J. Comput. </journal> <volume> Vol. 18, No. 1, </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference: [GMRi] <author> S. Goldwasser, S. Micali and R. Rivest, </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: this. 8 A general transformation We generalize the protocols of Section 6 and Section 7 to work with any cryptosystem for which we can define a way to split the secret key via "certifiable claws." (This notion of claws is weaker than the notion of a claw-free pair of permutations <ref> [GMRi] </ref>.) Certifiable claws can actually be defined for any cryptosystem so the method is general, but the efficiency depends on how we define 14 Parameters and ingredients| Number of trustees n (say n = 5); Assumed bound t on number of bad trustees (say t = 3); Security parameter k 1
Reference: [KiLe] <author> J. Kilian and T. Leighton. </author> <title> Fair cryptosystems revisited. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The goal of enabling the trustees to recover sk is to enable them to decrypt information sent to the user. As long as the users in question use the cryptosystem in the prescribed way, sk indeed enables decryption. But they may not. In particular, as pointed out by <ref> [KiLe] </ref>, it may be possible to set up "subliminal channels." However, [KiLe] also show some simple and quite general ways in which this can be avoided so that we may effectively assume the user does use the prescribed system. (The idea is that the choice of keys is not left to <p> As long as the users in question use the cryptosystem in the prescribed way, sk indeed enables decryption. But they may not. In particular, as pointed out by <ref> [KiLe] </ref>, it may be possible to set up "subliminal channels." However, [KiLe] also show some simple and quite general ways in which this can be avoided so that we may effectively assume the user does use the prescribed system. (The idea is that the choice of keys is not left to the user alone, but is done jointly by both parties in <p> A full and formal definition of time delayed key escrow would follow and extend the definition of <ref> [KiLe] </ref> to the time delayed setting. 3 Time Capsules: Definitions and Construction We build verifiable time capsules, our main primitive, on top of basic time capsules. Here we provide definitions and sketch a few constructions for the latter.
Reference: [LWY] <author> A. Lenstra, P. Winkler and Y. Yacobi. </author> <title> A key escrow system with warrant bounds. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [May] <author> T. </author> <month> May. </month> <note> Timed-release crypto. http://www.hks.net/cpunks/cpunks-0/ 1460.html. </note>
Reference-contexts: The result is that in the United States, developers sell only the weaker cryptography software. Our system allows achieving both levels of security at the same time with the same underlying encryption algorithm, and thus seems especially attractive for export. 1.4 VCTC: Wider Usages Sending information into future. May <ref> [May] </ref> points out that it would be extremely useful to be able to send encrypted messages into the future.
Reference: [Mi1] <author> S. Micali. </author> <title> Fair public key cryptosystems. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <editor> E. Brickell ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: In case of authorized wiretapping (and only in such case), the trustees should hand over to the authority their pieces, which can immediately can reconstruct the user's secret key. The pioneering proposals were Micali's fair cryptosystems <ref> [Mi1] </ref> and the Clipper chip. The objection to key-escrow is in all key-escrow proposals the individual's privacy relies entirely on trusting the authority and its trustees to follow the rules. <p> this can be avoided so that we may effectively assume the user does use the prescribed system. (The idea is that the choice of keys is not left to the user alone, but is done jointly by both parties in the protocol.) So we stick to the simpler setting of <ref> [Mi1] </ref>. A full and formal definition of time delayed key escrow would follow and extend the definition of [KiLe] to the time delayed setting. 3 Time Capsules: Definitions and Construction We build verifiable time capsules, our main primitive, on top of basic time capsules.
Reference: [Mi2] <author> S. Micali. </author> <title> Guaranteed partial key escrow. </title> <address> MIT/LCS TM-537, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Indeed some suggested extensions <ref> [Mi2] </ref> to Shamir's partial key escrow idea addressing verifiability, suffer from this attack as we point out in Section 1.5. Thirdly and most fundamentally, for partial-key escrow to work, it should be the case that the fastest way to recover the unescrowed bits of the secret-key is essentially exhaustive search. <p> The key might be quite structured, and in general it is hard to isolate a set of bits having the property that one is forced to find all of them to recover the key. Accordingly, further partial key escrow proposals <ref> [Mi2, BeGw] </ref> have exploited the structure of the crypto-system to find ways to "break up" sk into two parts such that the desired properties can be guaranteed. This has several disadvantages. <p> time capsules are verifiable (VCTC) in that it is possible to verify that the capsule can be opened within the claimed computational effort, without giving any information about the contents, or shortening the computational effort required to open this time capsule. 1 For example the solution for Diffie-Hellman used in <ref> [Mi2] </ref> relies on a relatively untested cryptographic assumption (that finding the discrete logarithm of an element of Z fl p which lies in a small subgroup is essentially proportional to the size of the subgroup). <p> Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 1.5 Related Work Since Shamir [Sh2] suggested the idea of partial key escrow, it has been investigated by several researchers, including <ref> [Mi2, MiSh] </ref> and a pre-cursor of this work described in [BeGw]. In [Mi2] verifiable methods for partial-key-escrow are proposed, for the Diffie-Hellman public key cryptosystem and for an extended version of the RSA cryptosystem where the composite modulus has as many prime factors as the number of trustees. <p> The property of verifiability is especially attractive in some of these applications domains. 1.5 Related Work Since Shamir [Sh2] suggested the idea of partial key escrow, it has been investigated by several researchers, including [Mi2, MiSh] and a pre-cursor of this work described in [BeGw]. In <ref> [Mi2] </ref> verifiable methods for partial-key-escrow are proposed, for the Diffie-Hellman public key cryptosystem and for an extended version of the RSA cryptosystem where the composite modulus has as many prime factors as the number of trustees. We show however that these methods however suffer from the early-recovery problem.
Reference: [MiSh] <author> S. Micali and A. Shamir. </author> <title> Partial key escrow. </title>
Reference-contexts: Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 1.5 Related Work Since Shamir [Sh2] suggested the idea of partial key escrow, it has been investigated by several researchers, including <ref> [Mi2, MiSh] </ref> and a pre-cursor of this work described in [BeGw]. In [Mi2] verifiable methods for partial-key-escrow are proposed, for the Diffie-Hellman public key cryptosystem and for an extended version of the RSA cryptosystem where the composite modulus has as many prime factors as the number of trustees.
Reference: [Pe1] <author> T. Pederson. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> Advances in Cryptology - Eurocrypt 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 547, </volume> <editor> D. Davies ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [Ri1] <author> R. Rivest. </author> <title> The RC5 encryption algorithm. </title> <type> Manuscript. </type>
Reference-contexts: To get a better understanding and also to see what kinds of encapsulation schemes are available, let's look at a few examples. Encapsulation by ciphers. Let F be a variable key length cipher, like RC5 <ref> [Ri1] </ref>. A key describes the function F used to encrypt and its inverse F 1 used to decrypt, and there is some associated input length l = Il (k). We let Kl (k) = k + l.
Reference: [Ri2] <author> R. Rivest. </author> <title> Multi-grade cryptography. </title> <type> Manuscript. </type>
Reference-contexts: In particular, VCTCs yield the first solution for the RSA encryption scheme that achieves delayed recovery, and an alternative solution for DH encryption. In <ref> [Ri2] </ref> , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows.
Reference: [RSW] <author> R. Rivest, A. Shamir and D. Wagner. </author> <note> Time-lock puzzles and timed-release crypto. Manuscript available at http://theory.lcs.mit.edu:80/~rivest. </note>
Reference-contexts: In all his proposals, the secret keys depend on each other and no verifiability is provided. In the key escrow context, this yields similar problems to those discussed for partial key escrow. The work of Rivest, Shamir, and Wagner <ref> [RSW] </ref> proposes the concept and two implementations of time-lock puzzles, any of which can be used as a cryptographic time capsule. [RSW] do not address verifiability, but as our construction of VCTC takes any time-capsule as a starting point and makes it verifiable, it can be used to make any of <p> In the key escrow context, this yields similar problems to those discussed for partial key escrow. The work of Rivest, Shamir, and Wagner <ref> [RSW] </ref> proposes the concept and two implementations of time-lock puzzles, any of which can be used as a cryptographic time capsule. [RSW] do not address verifiability, but as our construction of VCTC takes any time-capsule as a starting point and makes it verifiable, it can be used to make any of the time-lock puzzles which they propose, into verifiable time-lock puzzles. 1.6 Road map Definitions for verifiable time delayed key escrow are <p> The quality of the scheme is the extent to which this is true. This is the most basic version of the definition. One can further classify capsules according to various features. One such is the extent to which parallelism helps reduce the decapsulation time. This is considered in <ref> [RSW] </ref> whose "time locks" try to ensure not only that a certain amount of time must be invested but also that this be sequential time. To get a better understanding and also to see what kinds of encapsulation schemes are available, let's look at a few examples. Encapsulation by ciphers. <p> One can compute that roughly S (k; t ) = 2 m if t is 2 km steps, where a step is a computation of F or F 1 . The squaring puzzle. This is a scheme due to <ref> [RSW] </ref> for constructing "time locks." Its advantage is that parallelism does not seem to speed up opening process. (There is no formal definition or proof of security in [RSW], but the scheme they design is conjectured to be a good time lock.) 4 Verifiable Cryptographic Time Capsules (VCTC) In the previous <p> The squaring puzzle. This is a scheme due to <ref> [RSW] </ref> for constructing "time locks." Its advantage is that parallelism does not seem to speed up opening process. (There is no formal definition or proof of security in [RSW], but the scheme they design is conjectured to be a good time lock.) 4 Verifiable Cryptographic Time Capsules (VCTC) In the previous section we in essence were trusting the user (or encapsulator) to put a secret s into a capsule and seal it for a specified delay.
Reference: [RSA] <author> R. Rivest, A. Shamir, L. Adleman. </author> <title> Methods for Obtaining Digital Signatures and Public Key Cryptosystems. </title> <journal> CACM 1978, </journal> <volume> vol 21. </volume>
Reference-contexts: Specifically, in these systems, the public key of the user is a composite modulus N product of two primes, and the secret key of the user is the prime factorization of N <ref> [RSA, BlGo, BeRo] </ref>. It is important to be able to accomplish VTDKE for such systems as well. In the solution for DH provided in Section 6 we seemed to use the properties of the discrete logarithm function quite strongly in the way we generated s 0 and s 1 .
Reference: [Sh1] <author> A. Shamir. </author> <title> How to share a secret. </title> <journal> CACM, </journal> <volume> Vol. 22, No. 11, </volume> <year> 1979. </year>
Reference-contexts: The capsule C is not provided to the trustees; were we to do this, early recovery would be possible. Instead, C (not s 1 !) is shared amongst the trustees via Shamir's secret sharing scheme <ref> [Sh1] </ref>: C is made the constant term of an otherwise random degree t polynomial f (x), and f (j) is sent privately to Trustee j . (We work here over a finite field F chosen so that lg (jF j) exceeds max (jCj; n).) Now the trustees (jointly) issue a challenge
Reference: [Sh2] <author> A. Shamir. </author> <title> Private communication made at Crypto 95. </title> <month> August </month> <year> 1995. </year>
Reference-contexts: Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 1.5 Related Work Since Shamir <ref> [Sh2] </ref> suggested the idea of partial key escrow, it has been investigated by several researchers, including [Mi2, MiSh] and a pre-cursor of this work described in [BeGw].
Reference: [VW] <author> P. Van Oorschot and M. Wiener. </author> <title> On Diffie-Hellman key agreement with short exponents. </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> ??, <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 18 </month>
Reference-contexts: Indeed, new attacks <ref> [VW] </ref> call this assumption into question. 2 We implement VCTCs as protocols between the person encapsulating information and those that should eventually recover it.
References-found: 31

