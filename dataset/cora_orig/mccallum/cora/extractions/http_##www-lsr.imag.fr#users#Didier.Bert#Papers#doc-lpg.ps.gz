URL: http://www-lsr.imag.fr/users/Didier.Bert/Papers/doc-lpg.ps.gz
Refering-URL: http://www-lsr.imag.fr/Les.Groupes/scop/f-logiciel.html
Root-URL: http://www.imag.fr
Title: Reference Manual of the LPG Specification Language and Environment Release with disequations  
Author: Didier Bert, Rachid Echahed, Jean-Claude Reynaud 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Bernot, M. Bidoit, and C. Choppy. </author> <title> Algebraic semantics of exception handling. </title> <booktitle> In Proc. of ESOP-86, </booktitle> <volume> LNCS 213, </volume> <pages> pages 173-186. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Hoare assertions. 2. The propagation mechanism and the exceptions recovery is the same as the one of the ADA language in the sequential case. 3. A good approach for the semantics of the exceptions is proposed in <ref> [1] </ref>. 4.12.4 Clauses Specification of predicates is given in the clauses rubric, by Horn clauses, generalized with equalities and disequalities. <p> A constant may be written as : <ref> [1, 2, 3] </ref> instead of -- 1 &lt;+ (2 &lt;+ (3 &lt;+ nil:seq [nat])) 60 type Seq requires Formal_Sort [elem] sorts seq constructors nil : -&gt; seq [elem] &lt;+ : (elem, seq [elem]) -&gt; seq [elem] models FS_seq : Formal_Sort [seq [elem]] end Seq enrichment Seq_Ops requires Formal_Sort [elem] operators head
Reference: [2] <author> D. Bert and P. Drabik. LPG: </author> <title> structuration des specifications et validation semantique automatisee. In Les langages de specification, </title> <booktitle> Journees AFCET-GROPLAN, </booktitle> <pages> pages 32-45. </pages> <publisher> IRISA, </publisher> <year> 1987. </year>
Reference-contexts: For example, a monoid specification contains the associativity property, with moreover a neutral element; equivalently, the associativity property is included in the monoid property. These relationships are called inclusions of properties. The set of the properties, together with their relations, forms an acyclic graph. Following the definitions made in <ref> [5, 11, 2] </ref> under the name of "signature morphisms", an inclusion from P 1 to P 2 is determined by a correspondence of the sorts of P 1 with (possibly a subset of) the sorts of P 2, and a correspondence of the operators and predicates of P 1 with respectively <p> Generation 24 of "proof obligations" will be performed by an lpg command and verification of their obligations should be made by a theorem prover in a forthcoming version <ref> [2] </ref>. The relation "inherits P1 [: : : ]" written after the axiomatization of a property P2 says that P2 contains, in addition to its own equations, the equations (or clauses) of P1, through the renaming of sorts, operators and predicates given by the positional correspondence of the declaration. <p> A constant may be written as : <ref> [1, 2, 3] </ref> instead of -- 1 &lt;+ (2 &lt;+ (3 &lt;+ nil:seq [nat])) 60 type Seq requires Formal_Sort [elem] sorts seq constructors nil : -&gt; seq [elem] &lt;+ : (elem, seq [elem]) -&gt; seq [elem] models FS_seq : Formal_Sort [seq [elem]] end Seq enrichment Seq_Ops requires Formal_Sort [elem] operators head
Reference: [3] <author> D. Bert, P. Drabik, and R. Echahed. LPG: </author> <title> A generic, </title> <booktitle> logic and functional programming language. In Proc. of the 4th Symposium on Theoretical Aspects of Computing Science (STACS 87), </booktitle> <publisher> LNCS 247. Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This work is reported in [5] <ref> [3] </ref>. A release of this version (the implementation for worstations using the Unix operating system) has been done by Olivier Decler-fayt, Brigitte Demeuse, Pierre-Yves Schobbens and Francois Wautier, at the University of Louvain-La-Neuve (Belgium) [7]. <p> Semantical errors are pointed out if lpg does not find a suitable model or if it finds more than one. This kind of instantiation makes the writing of complex instantiations very easy, like in the following expression : [[[1,2], <ref> [3] </ref>], [[4]]] = [[[1,2], [3]], [[4]]] where = is the operator on sequences of sequences of sequences of natural numbers, implicitly instantiated by an operator = on sequences of sequences of natural numbers, itself implicitly instantiated by an operator = on sequences of natural numbers, and at last itself implicitly instantiated <p> Semantical errors are pointed out if lpg does not find a suitable model or if it finds more than one. This kind of instantiation makes the writing of complex instantiations very easy, like in the following expression : [[[1,2], <ref> [3] </ref>], [[4]]] = [[[1,2], [3]], [[4]]] where = is the operator on sequences of sequences of sequences of natural numbers, implicitly instantiated by an operator = on sequences of sequences of natural numbers, itself implicitly instantiated by an operator = on sequences of natural numbers, and at last itself implicitly instantiated by the operator = <p> A constant may be written as : <ref> [1, 2, 3] </ref> instead of -- 1 &lt;+ (2 &lt;+ (3 &lt;+ nil:seq [nat])) 60 type Seq requires Formal_Sort [elem] sorts seq constructors nil : -&gt; seq [elem] &lt;+ : (elem, seq [elem]) -&gt; seq [elem] models FS_seq : Formal_Sort [seq [elem]] end Seq enrichment Seq_Ops requires Formal_Sort [elem] operators head
Reference: [4] <author> D. Bert, P. Drabik, R. Echahed, and J.-M. Hu*en. </author> <title> Examples of LPG specifications. </title> <type> Technical Report 58, </type> <institution> IMAG-LIFIA, </institution> <year> 1990. </year>
Reference-contexts: We have attempted to present the language with a simple example, which we have generalized. This also shows an ascending approach for writing generic entities. More examples written in lpg can be found in <ref> [4] </ref>. 20 Chapter 4 The Language Definition 4.1 Type unit declaration An abstract data type is a data type defined by the set of the operations which can be applied to the elements of this type.
Reference: [5] <author> D. Bert and R. Echahed. </author> <title> Design and implementation of a generic, </title> <booktitle> logic and functional programming language. In Proc. of ESOP-86, </booktitle> <volume> LNCS 213, </volume> <pages> pages 119-132. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: This distinctive feature of lpg makes specification writing more easy, and supplies in some sense a second order programming facility. In lpg, the specification method relies upon the Horn clause logic with equality <ref> [5] </ref>. Thus, operators are defined by equational or conditional axioms, while predicates are defined by means of Horn clauses. A logical expression in lpg may be a "literal" like in PROLOG, and also a term equality. Moreover, operators can be used without restriction inside literals. <p> This work is reported in <ref> [5] </ref> [3]. A release of this version (the implementation for worstations using the Unix operating system) has been done by Olivier Decler-fayt, Brigitte Demeuse, Pierre-Yves Schobbens and Francois Wautier, at the University of Louvain-La-Neuve (Belgium) [7]. <p> In this case, you can stop the lpg solver by "^C" (i.e. Control C) and the prompt of the evaluate session appears again allowing you to type another expression. Semantical framework and syntactical inference rules of the lpg resolution are defined in <ref> [5, 9, 6] </ref>. Two strategies are implemented in the solver, the depth-first and the breadth-first strategy. The first one is often more efficient to find a solution of a given goal. The second one is sometimes better to find all the solutions. <p> For example, a monoid specification contains the associativity property, with moreover a neutral element; equivalently, the associativity property is included in the monoid property. These relationships are called inclusions of properties. The set of the properties, together with their relations, forms an acyclic graph. Following the definitions made in <ref> [5, 11, 2] </ref> under the name of "signature morphisms", an inclusion from P 1 to P 2 is determined by a correspondence of the sorts of P 1 with (possibly a subset of) the sorts of P 2, and a correspondence of the operators and predicates of P 1 with respectively <p> For resolution (section 2.5 : solver), the sequence of axioms is examined in the same order, until the actual parameters are unifiable with the left hand side. When the unification succeeds, the process go on to satisfy the goal <ref> [5] </ref>. If the unification fails, the solver backtracks to search another solution.
Reference: [6] <author> D. Bert and R. Echahed. </author> <title> Integrating disequations in the algebraic and logic language LPG. </title> <type> Research report, </type> <institution> IMAG, LGI, </institution> <year> 1994. </year>
Reference-contexts: In this case, you can stop the lpg solver by "^C" (i.e. Control C) and the prompt of the evaluate session appears again allowing you to type another expression. Semantical framework and syntactical inference rules of the lpg resolution are defined in <ref> [5, 9, 6] </ref>. Two strategies are implemented in the solver, the depth-first and the breadth-first strategy. The first one is often more efficient to find a solution of a given goal. The second one is sometimes better to find all the solutions.
Reference: [7] <author> O. Declerfayt, B. Demeuse, F. Wautier, P.-Y. Schobbens, and E. Milgrom. </author> <title> Precise standards through formal specifications: a case study: the UNIX file system. </title> <booktitle> In Proceedings of the Autumn'88 EUUG Conference, </booktitle> <address> Cascais, Portugal, </address> <year> 1988. </year>
Reference-contexts: This work is reported in [5] [3]. A release of this version (the implementation for worstations using the Unix operating system) has been done by Olivier Decler-fayt, Brigitte Demeuse, Pierre-Yves Schobbens and Francois Wautier, at the University of Louvain-La-Neuve (Belgium) <ref> [7] </ref>. Resolution of disequations and change of resolution strategies for the solver has been added by Rachid Echahed and Peter Habermehl in 1993 [14]. Other persons who have contributed to the design and/or development of lpg are : Pascal Drabik, Jean-Claude Reynaud, Jean-Michel Hu*en, Paul Jacquet, Jean-Christophe Corre, Sadek Bensalem.
Reference: [8] <author> N. Dershowitz and J. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: We do not recall here the theoretical foundations about algebraic specification, terms and term rewriting systems, generic and logic programming | interested readers will find them in <ref> [12, 13, 10, 16, 8] </ref> |, but we present the broad outlines of lpg with examples.
Reference: [9] <author> R. Echahed. </author> <title> Sur l'integration des langages algebriques et logiques. </title> <type> PhD thesis, </type> <institution> INPG, Grenoble, </institution> <year> 1990. </year>
Reference-contexts: In this case, you can stop the lpg solver by "^C" (i.e. Control C) and the prompt of the evaluate session appears again allowing you to type another expression. Semantical framework and syntactical inference rules of the lpg resolution are defined in <ref> [5, 9, 6] </ref>. Two strategies are implemented in the solver, the depth-first and the breadth-first strategy. The first one is often more efficient to find a solution of a given goal. The second one is sometimes better to find all the solutions.
Reference: [10] <author> H. Ehrig and B. Mahr. </author> <title> Fundamentals of algebraic specification 1. Equations and initial semantics, </title> <booktitle> volume 6 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: We do not recall here the theoretical foundations about algebraic specification, terms and term rewriting systems, generic and logic programming | interested readers will find them in <ref> [12, 13, 10, 16, 8] </ref> |, but we present the broad outlines of lpg with examples.
Reference: [11] <author> J. A. Goguen and R. M. Burstall. </author> <title> Introducing Institutions. </title> <booktitle> In Proc. of Logics and Programming Workshop, </booktitle> <pages> pages 221-256, </pages> <year> 1984. </year> <month> 67 </month>
Reference-contexts: For example, a monoid specification contains the associativity property, with moreover a neutral element; equivalently, the associativity property is included in the monoid property. These relationships are called inclusions of properties. The set of the properties, together with their relations, forms an acyclic graph. Following the definitions made in <ref> [5, 11, 2] </ref> under the name of "signature morphisms", an inclusion from P 1 to P 2 is determined by a correspondence of the sorts of P 1 with (possibly a subset of) the sorts of P 2, and a correspondence of the operators and predicates of P 1 with respectively
Reference: [12] <author> J. A. Goguen, J. W. Thatcher, and E. W. Wagner. </author> <title> An initial algebra approach to the specification, correctness, and implementation of abstract data types. In Current Trends in Programming Methodology, volume 4, chapter 5: Data Structuring. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: We do not recall here the theoretical foundations about algebraic specification, terms and term rewriting systems, generic and logic programming | interested readers will find them in <ref> [12, 13, 10, 16, 8] </ref> |, but we present the broad outlines of lpg with examples.
Reference: [13] <author> J. V. Guttag and J. J. Horning. </author> <title> The algebraic specification of abstract data types. </title> <journal> Acta Informatica, </journal> <volume> 10 </volume> <pages> 27-52, </pages> <year> 1978. </year>
Reference-contexts: We do not recall here the theoretical foundations about algebraic specification, terms and term rewriting systems, generic and logic programming | interested readers will find them in <ref> [12, 13, 10, 16, 8] </ref> |, but we present the broad outlines of lpg with examples.
Reference: [14] <author> P. Habermehl. </author> <title> Conception et realisation d'un interprete pour un langage logico-fonctionnel avec disequations. </title> <type> Technical report, </type> <institution> dea informatique, University of Grenoble, </institution> <month> june </month> <year> 1993. </year>
Reference-contexts: Resolution of disequations and change of resolution strategies for the solver has been added by Rachid Echahed and Peter Habermehl in 1993 <ref> [14] </ref>. Other persons who have contributed to the design and/or development of lpg are : Pascal Drabik, Jean-Claude Reynaud, Jean-Michel Hu*en, Paul Jacquet, Jean-Christophe Corre, Sadek Bensalem.
Reference: [15] <author> J.-C. Reynaud. Semantique de LPG. </author> <note> Research Report 651 I IMAG, IMAG-LIFIA, </note> <year> 1987. </year>
Reference-contexts: Precise notions on the lpg semantics are given in <ref> [15] </ref>.
Reference: [16] <author> M. Wirsing. </author> <title> Algebraic Specification. </title> <institution> Mip-8914, Universitat Passau, </institution> <month> June </month> <year> 1989. </year> <month> 68 </month>
Reference-contexts: We do not recall here the theoretical foundations about algebraic specification, terms and term rewriting systems, generic and logic programming | interested readers will find them in <ref> [12, 13, 10, 16, 8] </ref> |, but we present the broad outlines of lpg with examples.
References-found: 16

