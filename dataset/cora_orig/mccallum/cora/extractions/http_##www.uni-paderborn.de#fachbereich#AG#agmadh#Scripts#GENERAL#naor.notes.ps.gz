URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/Scripts/GENERAL/naor.notes.ps.gz
Refering-URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/WWW/english/scripts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Probabilistic Methods in Computer Science  
Author: Instructor: Seffi Naor TA: Erez Petrank 
Abstract-found: 0
Intro-found: 0
Reference: [Ab] <author> H. L. </author> <title> Abbot, "A note on Ramsey's theorem", </title> <journal> Canadian Math. Bull., </journal> <volume> Vol. 15, </volume> <year> 1972, </year> <pages> pp. 9-10. </pages>
Reference-contexts: There is an edge between nodes i and j iff i j is a quadratic residue mod p. An interesting consequence of the construction here is that a closely related graph can be shown to be a (weak) Ramsey graph. The basic technique is due to Abbot <ref> [Ab] </ref>. Let G 1 = (V 1 ; E 1 ) and G 2 = (V 2 ; E 2 ) be graphs on n 1 and n 2 nodes respectively that do not contain a clique or independent set of size k 1 and k 2 respectively.
Reference: [Ad] <author> L. Adleman, </author> <title> "Two theorems on random polynomial time", </title> <booktitle> 19th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1978, </year> <pages> pp. 75-83. </pages>
Reference-contexts: An advantage of the reduction in size of the sample space is that it is especially suited for parallel algorithms because each point in can be checked independently of the other points. We first present a result of Adleman <ref> [Ad] </ref> showing that the sample space associated with a randomized algorithm always contains a polynomial-sized subspace which has a good point for each possible input instance. (In fact, it shows that RP P/poly). However, this result is highly non-constructive and it cannot be used to actually derandomize algorithms.
Reference: [Aj] <author> M. Ajtai, </author> <title> "Recursive construction for 3-regular expanders", </title> <booktitle> Proceedings of the 28th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1987, </year> <pages> pp. 295-304. </pages>
Reference-contexts: By merely constructive we mean that there exists an algorithm that given the parameters of the problem, generates the object in time that is bounded by a polynomial in the input size. A good example is Ajtai's <ref> [Aj] </ref> construction, where a polynomial time algorithm (in the number of vertices) for constructing a 3-regular expander is given.
Reference: [AKS] <author> M. Ajtai, J. Komlos and E. Szemeredi, </author> <title> "Deterministic simulation in LOGSPACE," </title> <booktitle> Proceedings of the 19th ACM Annual Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 132-140. </pages>
Reference-contexts: Thus, we can achieve an exponentially small error probability, while paying only an additive (instead of multiplicative) increase in the number of random bits. This result is due to Ajtai, Komlos and Szemeredi <ref> [AKS] </ref>. (See also [CW, IZ]). Let G = (V; E) be an expander such that each vertex in V corresponds to a (different) string over f0; 1g n . (j V j = 2 n ). We choose G to be an expander of fixed degree.
Reference: [Al1] <author> N. Alon, </author> <title> "Explicit constructions of exponential sized families of k-independent sets", </title> <journal> Discrete Math, </journal> <volume> 58, </volume> <year> 1986, </year> <pages> pp. 191-193. </pages>
Reference-contexts: APPLICATIONS OF SMALL BIAS PROBABILITY SPACES 153 testing of a circuit where each component relies on at most k inputs. The best known bounds for constructing (n; k) universal sets are given in [SB] and <ref> [Al1] </ref>. The trivial solution for this problem is ofcourse to generate all 2 n possibilities. A less trivial solution is to choose as the (n; k) universal set the sample space of n random variables that are k-wise independent. <p> This provides the first explicit construction of an (n; k)-universal set of polynomial size for k which is fi (log n). It is also better than the best explicit construction given in [SB] for k &lt;< n, and matches the lower bound given there up to constant factors. Alon <ref> [Al1] </ref> has shown an explicit construction of size log n 2 O (k 2 ) which is optimal for constant k. It is interesting to note that the construction for a (k; n) universal set can be phrased in coding theory terminology.
Reference: [Al2] <author> N. Alon, </author> <title> "A parallel algorithmic version of the local lemma", Random Structures and Algorithms, </title> <journal> Vol. </journal> <volume> 2, </volume> <year> 1991, </year> <pages> pp. 367-378. </pages>
Reference-contexts: However, the probability of success of such an algorithm might be exponentially small, and for many years, an intriguing open problem was to construct a randomized algorithm which has a high probability of success. This problem was solved in the affirmative in 1991 by J. Beck [Bec], (see also <ref> [Al2] </ref>), who gave a randomized algorithm that finds a coloring of a hypergraph with property B, where the probability of success is polynomially small.
Reference: [ABI] <author> N. Alon, L. Babai and A. Itai, </author> <title> "A fast and simple randomized algorithm for the maximal independent set problem", </title> <journal> J. of Algorithms, </journal> <volume> Vol. 7, </volume> <year> 1986, </year> <pages> pp. 567-583. </pages>
Reference-contexts: We demonstrate the idea of using limited independence in the problem of computing in parallel a maximal independent set in a graph. 127 CHAPTER 16. LIMITED INDEPENDENCE 128 16.1 Constructing k-wise independent uniform random vari ables This construction was suggested by <ref> [ABI] </ref>. Assume we are given m vectors, L 1 ; L 2 ; : : : ; L m 2 f0; 1g l such that any k vectors are linearly independent over GF (2). <p> The first NC algorithm was given in 1983 by Karp and Wigderson [KW]. A simpler algorithm was proposed by Luby in 1985 [Lu1] and a similar algorithm was also given by Alon et al. <ref> [ABI] </ref>. Our exposition follows Alon et al.
Reference: [ABNNR] <author> N. Alon, J. Bruck, J. Naor, M. Naor and R. Roth, </author> <title> "Construction of Asymptotically Good Low-Rate Error-Correcting Codes through Pseudo-Random Graphs", </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> Vol. 38, </volume> <year> 1992, </year> <pages> pp. 509-516. BIBLIOGRAPHY 165 </pages>
Reference-contexts: It is shown in [AGHP] (and also in <ref> [ABNNR] </ref>) that the following bound holds: m (n; *) min n ; 2 n It follows that our upper bound constructions are pretty tight with this bound. 17.7 Further results We have seen so far how to construct an *-bias probability space with respect to the uniform distribution.
Reference: [AGHP] <author> N. Alon, O. Goldreich, J. Hastad and R. Peralta, </author> <title> "Simple constructions of almost k-wise independent random variables", Random Structures and Algorithms, </title> <journal> Vol. </journal> <volume> 3, </volume> <year> 1992, </year> <pages> pp. 289-304. </pages>
Reference-contexts: It is shown in <ref> [AGHP] </ref> (and also in [ABNNR]) that the following bound holds: m (n; *) min n ; 2 n It follows that our upper bound constructions are pretty tight with this bound. 17.7 Further results We have seen so far how to construct an *-bias probability space with respect to the uniform <p> The first construction is due to Naor and Naor [NN] who gave an efficient construction of an *-bias probability space for random variables that are uniform on f0; 1g. Simpler constructions of the same probability space were given by Alon, Goldreich, Hastad and Peralta <ref> [AGHP] </ref>. In particular, the construction based on quadratic residues is taken from [AGHP]. Azar, Motwani and Naor [AMN] constructed a probability space for *-bias random variables over any integral domain [0 : : :d1], d 2. <p> Simpler constructions of the same probability space were given by Alon, Goldreich, Hastad and Peralta <ref> [AGHP] </ref>. In particular, the construction based on quadratic residues is taken from [AGHP]. Azar, Motwani and Naor [AMN] constructed a probability space for *-bias random variables over any integral domain [0 : : :d1], d 2.
Reference: [ALMSS] <author> S. Arora, C. Lund, R. Motwani, M. Sudan and M. Szegedy, </author> <title> "Proof verification and hardness of approximation problems", </title> <booktitle> Proceedings of 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1992, </year> <pages> pp. 14-23. </pages>
Reference-contexts: of the algorithm is O (m n N ) = O (m 2 n ln ( 2 ffi ) 1 Open Question : Is there an ("; 0) approximation scheme for the number of assignments satisfying a DNF formula. 13.3 Approximating a monotone 2-CNF formula is hard Recently, [AS2] and <ref> [ALMSS] </ref> showed that approximating the MAX-CLIQUE problem below a factor of n " is NP-complete for some " &gt; 0: We will show a reduction of the problem of approximating the cardinality of the maximal clique size of a graph G to the problem of counting satisfying assignments of a monotone
Reference: [AMN] <author> Y. Azar, R. Motwani and J. Naor, </author> <title> "Approximating probability distributions using small sample spaces", </title> <type> Unpublished manuscript. </type>
Reference-contexts: We wish to construct a distribution D 0 such that, 8S f1 : : :ng; j b D 0 * jD 0 j = poly (n; 1=*) Azar, Motwani and Naor <ref> [AMN] </ref> showed (using the probabilistic method) that for every distribution D, there exists a distribution D 0 that satisfies the above conditions. CHAPTER 17. <p> Simpler constructions of the same probability space were given by Alon, Goldreich, Hastad and Peralta [AGHP]. In particular, the construction based on quadratic residues is taken from [AGHP]. Azar, Motwani and Naor <ref> [AMN] </ref> constructed a probability space for *-bias random variables over any integral domain [0 : : :d1], d 2. A recent result [EGLNV], is a polynomial construction for k-wise, ffi-dependent general random variables over any integral domain, where k = log n; ffi = 1 poly (n) . CHAPTER 17.
Reference: [AS1] <author> N. Alon and J. Spencer, </author> <title> The probabilistic method, </title> <publisher> John Wiley and Sons Inc., </publisher> <year> 1992. </year>
Reference-contexts: But, wt (v) = l &lt; d 1 which is a contradiction. The aforementioned construction of k-wise independent random variables can be achieved using any linear error correcting code. We now describe a construction based on the binary BCH codes. (See <ref> [AS1, MS] </ref>). Suppose n = 2 d 1 and k = 2t + 1. Let y 1 ; : : : ; y n be the n nonzero elements of the field GF (2 d ) represented as column vectors of length d over GF (2).
Reference: [AS2] <author> S. Arora and S. Safra, </author> <title> "Probabilistic checking of proofs: a new characterization of NP", </title> <booktitle> Proceedings of 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1992, </year> <pages> pp. 2-13. </pages>
Reference-contexts: total complexity of the algorithm is O (m n N ) = O (m 2 n ln ( 2 ffi ) 1 Open Question : Is there an ("; 0) approximation scheme for the number of assignments satisfying a DNF formula. 13.3 Approximating a monotone 2-CNF formula is hard Recently, <ref> [AS2] </ref> and [ALMSS] showed that approximating the MAX-CLIQUE problem below a factor of n " is NP-complete for some " &gt; 0: We will show a reduction of the problem of approximating the cardinality of the maximal clique size of a graph G to the problem of counting satisfying assignments of
Reference: [Be] <author> S. J. Berkowitz, </author> <title> "On computing the determinant in small parallel time using a small number of processors", </title> <journal> Information Processing Letters, </journal> <volume> Vol. 18, </volume> <year> 1984, </year> <pages> pp. 147-150. </pages>
Reference-contexts: A problem is said to be in RNC, if there is a randomized PRAM algorithm, that uses a polynomial number of processors, and works in poly-log time. It was shown in <ref> [Be] </ref>, [Ch], [CoWi], [Cs] that problems in Linear Algebra such as matrix multiplication, computing a determinant, matrix inversion, etc., are all in the class NC.
Reference: [Bec] <author> J. Beck, </author> <title> "An algorithmic Approach to the Lovasz local lemma", Random Structures and Algorithms, </title> <journal> Vol. </journal> <volume> 2, </volume> <year> 1991, </year> <pages> pp. 343-365. </pages>
Reference-contexts: However, the probability of success of such an algorithm might be exponentially small, and for many years, an intriguing open problem was to construct a randomized algorithm which has a high probability of success. This problem was solved in the affirmative in 1991 by J. Beck <ref> [Bec] </ref>, (see also [Al2]), who gave a randomized algorithm that finds a coloring of a hypergraph with property B, where the probability of success is polynomially small.
Reference: [BR] <author> B. Berger and J. Rompel, </author> <title> "Simulating (log c n)-wise independence in NC", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 38, </volume> <year> 1991, </year> <pages> pp. 1026-1046. </pages>
Reference-contexts: In other words, what is the speedup achievable when many processors are available. (We note that the set balancing problem (and lattice approximation) can be solved efficiently in parallel by combining the method of conditional probabilities with limited independence. See <ref> [Lu2, BR, MNN] </ref> for more details). To answer this question, we consider the following concrete complexity type scenario. We are given a discrete space in which the points are each labeled either good or bad. <p> Let T i deonte the sum of the random variables in the subset S i . 151 CHAPTER 18. APPLICATIONS OF SMALL BIAS PROBABILITY SPACES 152 If the variables x 1 ; : : : ; x n are k-wise independent, then we have the following lemma proved by <ref> [BR, MNN] </ref>. Lemma 18.1.1 Let k = a log n log ffi where a &gt; 1 * . Let x 1 ; : : :; x n be k-wise independent random variables over f1; 1g and let disc def = ffi 0:5+* .
Reference: [Bi] <author> N. Biggs, </author> <title> Algebraic graph theory, </title> <publisher> Cambridge University Press, </publisher> <year> 1974. </year>
Reference-contexts: For more details the reader is referred to any standard textbook on Linear Algebra, and to the book by Biggs <ref> [Bi] </ref>. Let ~a be a vector in &lt; n (we let &lt; denote the real numbers, and an arrow over a variable 45 CHAPTER 8. EXPANDERS 46 to denote it is is a vector). The ith coordinate of ~a is denoted by a i .
Reference: [Ch] <author> H. Chernoff, </author> <title> "A measure of asymptotic efficiency for tests based on the sum of observations", </title> <journal> Annals of Mathematical Statistics, </journal> <volume> Vol. 23, </volume> <year> 1952, </year> <pages> pp. 492-509. </pages>
Reference-contexts: A problem is said to be in RNC, if there is a randomized PRAM algorithm, that uses a polynomial number of processors, and works in poly-log time. It was shown in [Be], <ref> [Ch] </ref>, [CoWi], [Cs] that problems in Linear Algebra such as matrix multiplication, computing a determinant, matrix inversion, etc., are all in the class NC.
Reference: [Ch] <author> A.L. Chistov, </author> <title> "Fast parallel calculation on the rank of matrices over a field of arbitrary characteristic", </title> <booktitle> Proc. Intl. Conf. Foundations of Computation Theory, Springer Lecture Notes in Computer Science, </booktitle> <volume> Vol. 199, </volume> <year> 1985, </year> <pages> pp. 63-79. BIBLIOGRAPHY 166 </pages>
Reference-contexts: A problem is said to be in RNC, if there is a randomized PRAM algorithm, that uses a polynomial number of processors, and works in poly-log time. It was shown in [Be], <ref> [Ch] </ref>, [CoWi], [Cs] that problems in Linear Algebra such as matrix multiplication, computing a determinant, matrix inversion, etc., are all in the class NC.
Reference: [Cl] <author> Kenneth L. Clarkson, </author> <title> "Las vegas algorithms for linear and integer programming when the dimension is small", </title> <booktitle> Proceedings of the 4th Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1988, </year> <pages> pp. 1-11. </pages>
Reference-contexts: In Section 12.2.3 the Duality Theorem is presented. Then, we demonstrate its use in proving Konig's Theorem. A few deterministic algorithms are briefly mentioned in section 12.2.4. Finally, In section 12.3 we demonstrate two randomized algorithms ([Se], <ref> [Cl] </ref>) for the fixed dimension case. 12.2 Linear programming Linear programming is the process of minimizing a linear objective function subject to a finite number of linear equality and inequality constraints.
Reference: [CGHFRS] <author> B. Chor, O. Goldreich, J. Hastad, J. Friedman, S. Rudich and R. Smolensky, </author> <title> "t-Resilient functions", </title> <booktitle> Proceedings of the 26th Annual Symposium on the Foundations of Computer Science, </booktitle> <year> 1985, </year> <pages> pp. 396-407. </pages>
Reference-contexts: Our approach is different from the one taken in the previous chapter, i.e., reducing the size of the sample space by requiring only limited independence among the random variables (as opposed to full independence). It is based on the equivalence of the following two conditions: (See <ref> [CGHFRS] </ref> and [Vaz]). Let x 1 ; : : : ; x n be f0; 1g Bernoulli random variables. 1. The random variables are independent and for all i, Prob [x i = 0] = Prob [x i = 1]. 2.
Reference: [CoWi] <author> D. Coppersmith, S. Winograd, </author> <title> "Matrix multiplication via arithmetic progressions", </title> <booktitle> Proceedings of 28th Annual ACM Sympium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 1-6. </pages>
Reference-contexts: A problem is said to be in RNC, if there is a randomized PRAM algorithm, that uses a polynomial number of processors, and works in poly-log time. It was shown in [Be], [Ch], <ref> [CoWi] </ref>, [Cs] that problems in Linear Algebra such as matrix multiplication, computing a determinant, matrix inversion, etc., are all in the class NC.
Reference: [Cs] <author> L. Csanky, </author> <title> "Fast parallel matrix invertion algorithms", </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 5, </volume> <year> 1976, </year> <month> pp.618-623. </month>
Reference-contexts: A problem is said to be in RNC, if there is a randomized PRAM algorithm, that uses a polynomial number of processors, and works in poly-log time. It was shown in [Be], [Ch], [CoWi], <ref> [Cs] </ref> that problems in Linear Algebra such as matrix multiplication, computing a determinant, matrix inversion, etc., are all in the class NC.
Reference: [CW] <author> A. Cohen and A. Wigderson, "Dispersers, </author> <title> deterministic amplification and weak random sources", </title> <booktitle> Proceedings of the 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 14-19. </pages>
Reference-contexts: Thus, we can achieve an exponentially small error probability, while paying only an additive (instead of multiplicative) increase in the number of random bits. This result is due to Ajtai, Komlos and Szemeredi [AKS]. (See also <ref> [CW, IZ] </ref>). Let G = (V; E) be an expander such that each vertex in V corresponds to a (different) string over f0; 1g n . (j V j = 2 n ). We choose G to be an expander of fixed degree.
Reference: [Di] <author> P. Diaconis, </author> <title> Group representations in probability and statistics, </title> <institution> Institute of Mathematical Statistics, </institution> <address> Hayward, CA, </address> <year> 1988. </year>
Reference-contexts: This method is useful for giving a tight upper bound on the rate of convergence of a random walk in an important class of graphs called expanders. For more details on the first two techniques, the reader is referred to <ref> [Di, Li] </ref>. 10.1 Preliminaries Recall that the variation distance between two probability distributions, P and Q, on a set I of states is: kP Qk = max I 0 I jP (I 0 ) Q (I 0 )j: Lemma 10.1.1 Let P and Q be two probability distributions over a set
Reference: [Er] <author> P. Erdos, </author> <title> "Some remarks on the theory of graphs," </title> <journal> Bulletin of the American Mathematics Society, </journal> <volume> Vol. 53, </volume> <year> 1947, </year> <pages> pp. 292-294. </pages>
Reference-contexts: CHAPTER 18. APPLICATIONS OF SMALL BIAS PROBABILITY SPACES 155 18.4 Constructing Ramsey graphs A graph that does not contain a clique or an independent set of size k is called a k-Ramsey graph. Erdos <ref> [Er] </ref> proved in 1947 that most of the graphs on N vertices do not contain a clique or an independent set of size 2 log N . We consider here the problem of constructing Ramsey graphs.
Reference: [EGLNV] <author> G. Even, O. Goldreich, M. Luby, N. Nissan and B. Velickovic, </author> <title> "Approximations of general independent distributions", </title> <booktitle> Proceedings of 24th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1992, </year> <pages> pp. 10-16. </pages>
Reference-contexts: In particular, the construction based on quadratic residues is taken from [AGHP]. Azar, Motwani and Naor [AMN] constructed a probability space for *-bias random variables over any integral domain [0 : : :d1], d 2. A recent result <ref> [EGLNV] </ref>, is a polynomial construction for k-wise, ffi-dependent general random variables over any integral domain, where k = log n; ffi = 1 poly (n) . CHAPTER 17.
Reference: [Fe] <author> W. Feller, </author> <title> An introduction to the theory of probability and its applications, </title> <publisher> John Wiley and Sons, </publisher> <year> 1967. </year>
Reference: [Fr] <author> R. Freivalds, </author> <title> "Fast probabilistic algorithms", </title> <booktitle> Springer Verlag Lecture Notes in CS Mathematical Foundations of CS, </booktitle> <volume> Vol. 74, </volume> <year> 1979, </year> <pages> pp. 57-69. </pages>
Reference-contexts: In the matrix multiplication verification problem we are given three n fi n matrices A; B and C and we want to verify that A B = C. This problem was introduced by Freivalds <ref> [Fr] </ref> who also gave an O (n 2 ) randomized algorithm that required O (n) random bits. <p> Let N denote the number of vertices in this graph. Ideally, we would like to find a graph of exponential size. Erdos posed as a challenge the problem of constructing a graph whose size is superpolynomial in t. The challenge was answered by Frankl <ref> [Fr] </ref> and Frankl and Wilson [FW] who showed an explicit way of constructing graphs where N = t log t We show a simpler construction, though not as good as [FW], by Moni Naor [Na] which is of size N = t c log log t log log log t for
Reference: [FW] <author> P. Frankl and R.M. Wilson, </author> <title> "Intersecting theorems with geometric consequences," </title> <journal> Combinatorica, </journal> <volume> Vol. 1, </volume> <pages> pp. 357-368. BIBLIOGRAPHY 167 </pages>
Reference-contexts: Let N denote the number of vertices in this graph. Ideally, we would like to find a graph of exponential size. Erdos posed as a challenge the problem of constructing a graph whose size is superpolynomial in t. The challenge was answered by Frankl [Fr] and Frankl and Wilson <ref> [FW] </ref> who showed an explicit way of constructing graphs where N = t log t We show a simpler construction, though not as good as [FW], by Moni Naor [Na] which is of size N = t c log log t log log log t for some fixed c. <p> The challenge was answered by Frankl [Fr] and Frankl and Wilson <ref> [FW] </ref> who showed an explicit way of constructing graphs where N = t log t We show a simpler construction, though not as good as [FW], by Moni Naor [Na] which is of size N = t c log log t log log log t for some fixed c. When discussing constructive methods of generating combinatorial objects with certain properties, we make a distinction between methods that are merely constructive versus those that are explicit.
Reference: [GG] <author> O. Gaber and Z. Galil, </author> <title> "Explicit construction of linear size superconcentra-tors", </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol. 22, </volume> <year> 1981, </year> <pages> pp. 407-420. </pages>
Reference-contexts: Using the probabilistic method, it is quite easy to show that an expander containing a linear number of edges indeed exists. The first explicit construction of an expander was given by Gaber and Galil <ref> [GG] </ref>, and the best construction to date is by Lubotzky, Phillips and Sarnak [LPS], and [Ma]. We note that all known constructions of expanders use a characterization of the expansion property via the separation between the first and second eigenvalues of the adjacency matrix of the graph.
Reference: [IZ] <author> R. Impagliazzo and D. Zuckerman, </author> <title> "Recycling random bits", </title> <booktitle> Proceedings of the 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 248-253. </pages>
Reference-contexts: Thus, we can achieve an exponentially small error probability, while paying only an additive (instead of multiplicative) increase in the number of random bits. This result is due to Ajtai, Komlos and Szemeredi [AKS]. (See also <ref> [CW, IZ] </ref>). Let G = (V; E) be an expander such that each vertex in V corresponds to a (different) string over f0; 1g n . (j V j = 2 n ). We choose G to be an expander of fixed degree.
Reference: [Ka] <author> Howard J. Karloff, </author> <title> Linear programming, </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference: [KLM] <author> R.M. Karp, M. Luby, N. </author> <title> Madras, "Monte-Carlo approximation for enumeration problems", </title> <journal> J. of Algorithms, </journal> <volume> Vol. </volume> <pages> 10 , 1989 , pp. 429-448. </pages>
Reference-contexts: It means that if the actual number of satisfying assignments is small, N would have to be very large. For example, if the number of satisfying assignment is exponentially small, N must be O (2 n ). Karp, Luby, and Madras <ref> [KLM] </ref> suggested a method for counting the number of satisfying assignments such that a polynomial number of samples will suffices. Given a clause C i , let D i be the set of all of its satisfying assignments, and let D be S m i=1 D i .
Reference: [KLNS] <author> J. Kahn, N. Linial, N. Nisan and M. Saks, </author> <title> "On the cover time of random walks in graphs", </title> <journal> Journal of Theoretical Probability, </journal> <volume> Vol. 2, </volume> <year> 1989, </year> <pages> pp. 121-128. </pages>
Reference-contexts: Proof : The whole graph can be generated by adding edges to the subgraph that corre sponds to the diameter. Let G be a k-regular graph on n vertices. Theorem 9.2.6 C G O (n 2 log n). (Remark: <ref> [KLNS] </ref> proved a tighter bound, i. e., C G O (n 2 ).) CHAPTER 9. RANDOM WALKS 64 Proof : Let us first prove that diam (G) 3n : Consider the shortest path L (u; v) between vertices u and v, corresponding to the diameter.
Reference: [KUW1] <author> R. M. Karp, E. Upfal and A. Wigderson, </author> <title> "Constructing a perfect matching is in random NC", </title> <journal> Combinatorica, </journal> <volume> Vol. 6, </volume> <year> 1986, </year> <pages> pp 35-48. </pages>
Reference-contexts: The algorithm is by [MVV] and it is based on the following lemma, called "The Isolating Lemma". (We note that the first RNC algorithm for computing a perfect matching in a graph was given by <ref> [KUW1] </ref>. CHAPTER 11.
Reference: [KUW2] <author> R. M. Karp, E. Upfal and A. Wigderson, </author> <title> "The complexity of parallel search", </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol 36, </volume> <year> 1988, </year> <pages> pp. 225-253. </pages>
Reference-contexts: Theorem 15.4.1 For all q, the number of rounds required to find a good point in using q processors is at least log jj The proof of the theorem follows immediately from an adversary argument similar to the one given in Theorem 1 of <ref> [KUW2] </ref>. Notice, however, that when the conditional probability of finding a good point in a subset 0 is computed, we are in fact computing the number of good points in 0 .
Reference: [KW] <author> R. M. Karp and A. Wigderson, </author> <title> "A fast parallel algorithm for the maximal independent set problem", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 32, </volume> <year> 1985, </year> <pages> pp. 762-773. </pages>
Reference-contexts: This algorithm seems to be inherently sequential and therefore a different approach is needed for computing an M IS in NC. The first NC algorithm was given in 1983 by Karp and Wigderson <ref> [KW] </ref>. A simpler algorithm was proposed by Luby in 1985 [Lu1] and a similar algorithm was also given by Alon et al. [ABI]. Our exposition follows Alon et al.
Reference: [Li] <author> T. Lindvall, </author> <title> Lecture notes on the coupling method, </title> <publisher> John Wiley & sons, Inc., </publisher> <year> 1992. </year>
Reference-contexts: This method is useful for giving a tight upper bound on the rate of convergence of a random walk in an important class of graphs called expanders. For more details on the first two techniques, the reader is referred to <ref> [Di, Li] </ref>. 10.1 Preliminaries Recall that the variation distance between two probability distributions, P and Q, on a set I of states is: kP Qk = max I 0 I jP (I 0 ) Q (I 0 )j: Lemma 10.1.1 Let P and Q be two probability distributions over a set <p> Clearly, each assignment in the sample space can be checked (independently of the others) by a linear number of processors. Therefore, the algorithm for computing a maximal independent set can be derandomized in NC. 16.3.5 Open Problems The following distributed model was defined by Linial <ref> [Li] </ref>. Each vertex of an undirected graph is occupied by a processor. At each time unit a processor may send messages to each of its neighbors, where the message size is unbounded. Any other computation is free, e.g., computations carried out by individual processors. The computation is completely synchronous. <p> The question is which "global" functions can be computed faster than the diameter of the graph. Two examples of "global" problems that were considered in this model are coloring and computing a maximal independent set. Linial <ref> [Li] </ref> gave an O (log fl n) algorithm for coloring a graph using 2 colors, where is the maximum degree. This bound is tight; any improvement in the number of colors would require the cost to be equal to the diameter. CHAPTER 16.
Reference: [LPS] <author> A. Lubotzky, R. Phillips and P. Sarnak, </author> <title> "Explicit expanders and the Ramanu-jan conjecture", </title> <booktitle> Proceedings of the 18th annual ACM Symposium on Theory of Computing, </booktitle> <year> 1986, </year> <pages> pp. 240-246. </pages>
Reference-contexts: Using the probabilistic method, it is quite easy to show that an expander containing a linear number of edges indeed exists. The first explicit construction of an expander was given by Gaber and Galil [GG], and the best construction to date is by Lubotzky, Phillips and Sarnak <ref> [LPS] </ref>, and [Ma]. We note that all known constructions of expanders use a characterization of the expansion property via the separation between the first and second eigenvalues of the adjacency matrix of the graph. <p> All known constructions of expanders are not hard to describe; however, the proofs that these constructions indeed yield the expansion property, is far beyond the scope of this course, in particular the proof of <ref> [LPS] </ref>. It is an outstanding open question to find an expander construction that has a "simple" proof. <p> EXPANDERS 53 8.3 An explicit construction We now give an explicit construction of an expander. The analysis of the construction is rather complicated and is beyond the scope of the course. The construction is due to Lubotzky, Phillips, and Sarnak <ref> [LPS] </ref>, and Margulis [Ma]. <p> A good example is the expander construction of <ref> [LPS] </ref> where the running time of the algorithm for testing whether two vertices are adjacent is bounded by a polynomial in the logarithm of n, the number of vertices. The constructions that we shall henceforth exhibit will be explicit in the strong sense, i.e., locally explicit.
Reference: [Li] <author> N. Linial, </author> <title> "Locality in distributed computing", </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 21, </volume> <year> 1992, </year> <pages> pp. 193-201. </pages>
Reference-contexts: This method is useful for giving a tight upper bound on the rate of convergence of a random walk in an important class of graphs called expanders. For more details on the first two techniques, the reader is referred to <ref> [Di, Li] </ref>. 10.1 Preliminaries Recall that the variation distance between two probability distributions, P and Q, on a set I of states is: kP Qk = max I 0 I jP (I 0 ) Q (I 0 )j: Lemma 10.1.1 Let P and Q be two probability distributions over a set <p> Clearly, each assignment in the sample space can be checked (independently of the others) by a linear number of processors. Therefore, the algorithm for computing a maximal independent set can be derandomized in NC. 16.3.5 Open Problems The following distributed model was defined by Linial <ref> [Li] </ref>. Each vertex of an undirected graph is occupied by a processor. At each time unit a processor may send messages to each of its neighbors, where the message size is unbounded. Any other computation is free, e.g., computations carried out by individual processors. The computation is completely synchronous. <p> The question is which "global" functions can be computed faster than the diameter of the graph. Two examples of "global" problems that were considered in this model are coloring and computing a maximal independent set. Linial <ref> [Li] </ref> gave an O (log fl n) algorithm for coloring a graph using 2 colors, where is the maximum degree. This bound is tight; any improvement in the number of colors would require the cost to be equal to the diameter. CHAPTER 16.
Reference: [Lo] <author> L. Lovasz, </author> <title> "On the ratio of optimal integral and fractional covers", </title> <journal> Discrete Math, </journal> <volume> Vol. 13, </volume> <year> 1975, </year> <pages> pp. 383-390. </pages>
Reference-contexts: It is not very hard to see that this problem is related to that of solving a linear programming relaxation of an integer program (see Lovasz <ref> [Lo] </ref>), and then "rounding" the solution to obtain a near-optimum solution to the original integer program.
Reference: [Lu1] <author> M. Luby, </author> <title> "A simple parallel algorithm for the maximal independent set", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 15, </volume> <year> 1986, </year> <pages> pp. 1036-1053. BIBLIOGRAPHY 168 </pages>
Reference-contexts: This algorithm seems to be inherently sequential and therefore a different approach is needed for computing an M IS in NC. The first NC algorithm was given in 1983 by Karp and Wigderson [KW]. A simpler algorithm was proposed by Luby in 1985 <ref> [Lu1] </ref> and a similar algorithm was also given by Alon et al. [ABI]. Our exposition follows Alon et al.
Reference: [Lu2] <author> M. Luby, </author> <title> "Removing randomness in parallel computation without a processor penalty", </title> <booktitle> Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 162-173. </pages>
Reference-contexts: In other words, what is the speedup achievable when many processors are available. (We note that the set balancing problem (and lattice approximation) can be solved efficiently in parallel by combining the method of conditional probabilities with limited independence. See <ref> [Lu2, BR, MNN] </ref> for more details). To answer this question, we consider the following concrete complexity type scenario. We are given a discrete space in which the points are each labeled either good or bad.
Reference: [Ma] <author> G. A. Margulis, </author> <title> "Explicit group-theoretical constructions of combinatorial schemes and their applications to the design of expanders and super concentrators", </title> <journal> Problemy Peredachi Informatsii, </journal> <volume> Vol. 24, </volume> <year> (1988), </year> <pages> pp. 51-60. </pages> <booktitle> (English translation in Problems of Information Transmission, </booktitle> <volume> Vol. 24, </volume> <pages> pp. 39-46). </pages>
Reference-contexts: Using the probabilistic method, it is quite easy to show that an expander containing a linear number of edges indeed exists. The first explicit construction of an expander was given by Gaber and Galil [GG], and the best construction to date is by Lubotzky, Phillips and Sarnak [LPS], and <ref> [Ma] </ref>. We note that all known constructions of expanders use a characterization of the expansion property via the separation between the first and second eigenvalues of the adjacency matrix of the graph. <p> EXPANDERS 53 8.3 An explicit construction We now give an explicit construction of an expander. The analysis of the construction is rather complicated and is beyond the scope of the course. The construction is due to Lubotzky, Phillips, and Sarnak [LPS], and Margulis <ref> [Ma] </ref>.
Reference: [Mu] <author> K. Mulmuley, </author> <title> "A fast parallel algorithm to compute the rank of a matrix over an arbitrary field", </title> <journal> Combinatorica, </journal> <volume> Vol. 7, </volume> <year> 1987, </year> <pages> pp. 101-104. </pages>
Reference: [MNN] <author> R. Motwani, J. Naor and M. Naor, </author> <title> "The probabilistic method yields deterministic parallel algorithms", </title> <booktitle> Proceedings of the 30th Annual Symposium on the Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 8-13. </pages> <note> To appear, Journal of Computer and System Sciences. </note>
Reference-contexts: In other words, what is the speedup achievable when many processors are available. (We note that the set balancing problem (and lattice approximation) can be solved efficiently in parallel by combining the method of conditional probabilities with limited independence. See <ref> [Lu2, BR, MNN] </ref> for more details). To answer this question, we consider the following concrete complexity type scenario. We are given a discrete space in which the points are each labeled either good or bad. <p> Let T i deonte the sum of the random variables in the subset S i . 151 CHAPTER 18. APPLICATIONS OF SMALL BIAS PROBABILITY SPACES 152 If the variables x 1 ; : : : ; x n are k-wise independent, then we have the following lemma proved by <ref> [BR, MNN] </ref>. Lemma 18.1.1 Let k = a log n log ffi where a &gt; 1 * . Let x 1 ; : : :; x n be k-wise independent random variables over f1; 1g and let disc def = ffi 0:5+* . <p> What is the threshold function in G n;p for subgraph H in Figure 19.1. CHAPTER 19. HOMEWORK 163 16. The following questions refer to the paper "The probabilistic method yields deterministic parallel algorithms" by R. Motwani, J. Naor & M. Naor <ref> [MNN] </ref>. Let C = C 1 ; C 2 ; : : : ; C n be k-wise independent random variables generated as follows. Let H be an h fi n matrix where h = k log n=2 and the rows of H are linearly k-wise independent.
Reference: [MR] <author> R. Motwani and P. Raghavan, </author> <title> Randomized algorithms, </title> <publisher> Cambridge University Press, 1994 (in press). </publisher>
Reference-contexts: Our aim is to show that a random variable Z, that counts the number of empty boxes, (after all balls are dropped), is highly concentrated around its expectation. The proof presented here follows <ref> [MR] </ref>. CHAPTER 7. MARTINGALES 43 Define a martingale Z 0 ; Z 1 ; : : : ; Z m .
Reference: [MS] <author> F. J. MacWilliams and N. J. A. Sloane, </author> <title> The theory of error correcting codes, </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: But, wt (v) = l &lt; d 1 which is a contradiction. The aforementioned construction of k-wise independent random variables can be achieved using any linear error correcting code. We now describe a construction based on the binary BCH codes. (See <ref> [AS1, MS] </ref>). Suppose n = 2 d 1 and k = 2t + 1. Let y 1 ; : : : ; y n be the n nonzero elements of the field GF (2 d ) represented as column vectors of length d over GF (2).
Reference: [MVV] <author> K. Mulmuley, U.V. Vazirani, V.V. Vazirani, </author> <title> "Matching is as easy as matrix inversion", </title> <journal> Combinatorica, </journal> <volume> Vol. 7, </volume> <year> 1987, </year> <pages> pp. 105-114. </pages>
Reference-contexts: We proceed to show a randomized algorithm that computes a perfect matching in a graph G if it exists. The algorithm is by <ref> [MVV] </ref> and it is based on the following lemma, called "The Isolating Lemma". (We note that the first RNC algorithm for computing a perfect matching in a graph was given by [KUW1]. CHAPTER 11.
Reference: [Na] <author> M. Naor, </author> <title> "Constructing Ramsey graphs from small probability spaces", </title> <type> IBM Research Report RJ 8810, </type> <year> 1992. </year>
Reference-contexts: The challenge was answered by Frankl [Fr] and Frankl and Wilson [FW] who showed an explicit way of constructing graphs where N = t log t We show a simpler construction, though not as good as [FW], by Moni Naor <ref> [Na] </ref> which is of size N = t c log log t log log log t for some fixed c. When discussing constructive methods of generating combinatorial objects with certain properties, we make a distinction between methods that are merely constructive versus those that are explicit.
Reference: [NN] <author> J. Naor and M. Naor, </author> <title> "Small-bias probability spaces: efficient constructions and applications", </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 22, No. 4, </volume> <year> 1993, </year> <pages> pp. 838-856. </pages>
Reference-contexts: Notice, however, that the converse is not true: a k-wise ffi-dependent distribution is not necessarily a k-wise *-bias distribution. In the following we survey the results related to constructions of small bias probability spaces. The first construction is due to Naor and Naor <ref> [NN] </ref> who gave an efficient construction of an *-bias probability space for random variables that are uniform on f0; 1g. Simpler constructions of the same probability space were given by Alon, Goldreich, Hastad and Peralta [AGHP]. In particular, the construction based on quadratic residues is taken from [AGHP].
Reference: [Pf] <author> P. E. Pfeiffer, </author> <title> Probability for applications, </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Definition 1.1.7 The k th moment of a random variable X is defined to be E h i Please refer to <ref> [Pf, pp. 326-330] </ref> for more properties of expectations and higher moments. CHAPTER 1.
Reference: [PY] <author> C.H. Papadimitriou, M. Yannakakis, </author> <title> "The complexity of restricted spanning tree problem", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 29, </volume> <year> 1982, </year> <pages> pp. 285-309. BIBLIOGRAPHY 169 </pages>
Reference-contexts: By the Isolating Lemma, this happens with probability of at most jEj Open research problem: Find a deterministic NC algorithm for computing a perfect matching in a graph. 11.6 The exact matching problem Definition 11.6.1 The exact matching problem defined in <ref> [PY] </ref>, is the following: * Input : An undirected graph G = (V; E), a coloring of the edges of G in red and blue, and an integer k. * Problem : Find a perfect matching in G that contains exactly k red edges. CHAPTER 11.
Reference: [Ra] <author> P. Raghavan, </author> <title> "Probabilistic construction of deterministic algorithms: approximating packing integer programs", </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol. 37, </volume> <year> 1988, </year> <pages> pp. 130-143. </pages>
Reference-contexts: The problem faced in searching the sample space is that it is generally exponential in size. Two general methods for searching the sample space have emerged in recent years and will be described in forthcoming lectures. The first approach is that of the method of conditional probabilities <ref> [Sp, Ra] </ref>. This method was introduced by Spencer [Sp] with the aim of converting probabilistic proofs of existence of combinatorial structures into efficient deterministic algorithms for actually constructing these structures. <p> The set balancing problem is a special case of the lattice approximation problem where each p i = 1 2 and the matrix A is the incidence matrix of subsets and elements. 15.3.1 Randomized rounding Raghavan <ref> [Ra] </ref> used the randomized rounding technique to obtain a vector ~q such that i , the i th component of the error vector , is bounded by p The vector ~p is rounded to ~q as follows: q i = &lt; 1 with probability p i 0 with probability 1 p
Reference: [RS] <author> J. H. Reif and S. Sen, </author> <title> "Optimal randomized parallel algorithms for computational geometry", </title> <booktitle> Proceedings 16th International Conference on Parallel Processing, </booktitle> <address> St. Charles, IL, </address> <year> 1987. </year> <note> Full version: </note> <institution> Duke University Tech. </institution> <type> Report, </type> <institution> CS-88-01, </institution> <year> 1988. </year>
Reference: [SB] <author> G. Seroussi and N.H. Bshouty, </author> <title> "Vector sets for exhaustive testing of logic circuits", </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> Vol. 34, </volume> <year> 1988, </year> <pages> pp. 513-522. </pages>
Reference-contexts: See <ref> [SB] </ref> for a bibliography on the problem. Such a set of vectors is called (n; k)-universal. The motivation for this problem is that such a test set allows exhaustive CHAPTER 18. <p> The motivation for this problem is that such a test set allows exhaustive CHAPTER 18. APPLICATIONS OF SMALL BIAS PROBABILITY SPACES 153 testing of a circuit where each component relies on at most k inputs. The best known bounds for constructing (n; k) universal sets are given in <ref> [SB] </ref> and [Al1]. The trivial solution for this problem is ofcourse to generate all 2 n possibilities. A less trivial solution is to choose as the (n; k) universal set the sample space of n random variables that are k-wise independent. <p> This provides the first explicit construction of an (n; k)-universal set of polynomial size for k which is fi (log n). It is also better than the best explicit construction given in <ref> [SB] </ref> for k &lt;< n, and matches the lower bound given there up to constant factors. Alon [Al1] has shown an explicit construction of size log n 2 O (k 2 ) which is optimal for constant k.
Reference: [Sc] <author> J.T. Schwartz, </author> <title> "Fast probabilistic algorithms for verification of polynomial identities", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 27, </volume> <year> 1980, </year> <pages> pp. 701-717. </pages>
Reference-contexts: Trying to compute the determinant explicitly may not be possible, since it might take exponential time even to write down the output. A possible solution to this problem may be to choose random substitutions for x, check whether P (x) = 0. The following theorem (by <ref> [Sc] </ref>) asserts that if we make enough tries, with high probability we get the correct answer.
Reference: [Se] <author> Raimund Seidel, </author> <title> "Small-dimensional linear programming and convex hulls made easy", </title> <journal> Discrete Comput. Geom., </journal> <volume> Vol. 6, </volume> <year> 1991, </year> <pages> pp. 423-434. </pages>
Reference-contexts: We will present two randomized algorithms that have expected running time which is linear or almost linear in m. 12.3.1 Seidel's algorithm The first algorithm is due to Raimund Seidel <ref> [Se] </ref>. In this algorithm, the dependence of the time bound on d is of the form d!. The main virtue of this algorithm lies in the simplicity of the algorithm and its analysis.
Reference: [SS] <author> E. Shamir and J. Spencer, </author> <title> "Sharp concentration of the chromatic number in random graphs G n;p ", Combinatorica, </title> <journal> Vol. </journal> <volume> 7, </volume> <year> (1987), </year> <pages> pp. 121-130. </pages>
Reference-contexts: Therefore, we get E [ i+1 j i ] = i CHAPTER 7. MARTINGALES 42 The following is due to Shamir and Spencer <ref> [SS] </ref>. Theorem 7.3.2 Given H, a random graph in G np , define C 4 = E [(G) : G 2 G np ]. Then Pr j (H) Cj &gt; n &lt; e 2 =2 Proof : By definition 1 = E [(G)].
Reference: [Sp] <author> J. Spencer, </author> <title> Ten lectures on the probabilistic method, </title> <publisher> SIAM (Philadel-phia), </publisher> <year> 1987. </year>
Reference-contexts: The problem faced in searching the sample space is that it is generally exponential in size. Two general methods for searching the sample space have emerged in recent years and will be described in forthcoming lectures. The first approach is that of the method of conditional probabilities <ref> [Sp, Ra] </ref>. This method was introduced by Spencer [Sp] with the aim of converting probabilistic proofs of existence of combinatorial structures into efficient deterministic algorithms for actually constructing these structures. <p> Two general methods for searching the sample space have emerged in recent years and will be described in forthcoming lectures. The first approach is that of the method of conditional probabilities [Sp, Ra]. This method was introduced by Spencer <ref> [Sp] </ref> with the aim of converting probabilistic proofs of existence of combinatorial structures into efficient deterministic algorithms for actually constructing these structures.
Reference: [Sp1] <author> J. Spencer, </author> <title> "Six standard deviations suffice", </title> <journal> Trans. American Mathematical Society, </journal> <volume> Vol. 289, </volume> <year> 1985, </year> <pages> pp 679-706. </pages>
Reference-contexts: THE METHOD OF CONDITIONAL PROBABILITIES 121 Definition 15.2.4 The family discrepancy of S with respect to a 2-coloring ~ C is given by (S; ~ C) = max (S i ; ~ C) Spencer <ref> [Sp1] </ref> has shown that for each family S there exists a 2-coloring ~ C such that (S; ~ C) 6 n. This result is the best possible up to constant factors but it has the drawback of being non-constructive, i.e. does not even imply a randomized algorithm.
Reference: [Ta] <author> R. M. Tanner, </author> <title> "Explicit construction of concentrators from generalized N-gons", </title> <journal> SIAM J. of Alg. Disc. Methods, </journal> <volume> Vol. 5, </volume> <pages> 1984 pp. 287-293. </pages>
Reference-contexts: If 2 = is small, then S has many neighbors in V S. Another bound is given by the following theorem, due to Tanner <ref> [Ta] </ref>. Theorem 8.2.2 Let S be a set of vertices, and let (S) be the set of vertices that are either in S or have a neighbor in S. Then j (S)j ( 2 2 jSj 2 Let ~x be the characteristic vector of S.
Reference: [Va1] <author> L. </author> <title> Valiant , "The complexity of enumeration and reliability problems" , SIAM J. </title> <journal> Comput. </journal> <volume> Vol. 8, </volume> <pages> 1979 , pp. 410-421. </pages>
Reference-contexts: For example, even if satisfiability could be solved in polynomial time, it does not mean that counting the number of satisfying truth assignments can be done in polynomial time. Valiant <ref> [Va1] </ref> defined a new class of polynomial time equivalent problems called #P - complete problems. It is defined in terms of polynomial time relations: R f0; 1g fl fif0; 1g fl , such that membership in R can be decided in polynomial time, i.e., R 2 P . <p> Given a DNF formula F , we want to count the number of assignments that satisfy F . This quantity is denoted by #F . The DNF counting problem is known to be a #P-complete problem <ref> [Va1] </ref>. Therefore, the best we can hope for in polynomial time is to approximate the number of satisfying assignments.
Reference: [Va2] <author> L. Valiant, </author> <title> "Short monotone formulae for the majority function", </title> <journal> Journal of Algorithms, </journal> <volume> Vol. 5, </volume> <year> 1984, </year> <pages> pp. 363-366. </pages>
Reference-contexts: Let X = fx 1 ; : : : ; x n g be a set of n = 2m Boolean variables. Definition 5.0.1 The majority function is defined as follows: M AJ (X) = &lt; 1 i=1 x i m 0 otherwise Valiant <ref> [Va2] </ref> considered monotone formulae for computing majority. Theorem 5.0.2 (Valiant) There is a monotone formula of size O (n 5:3 ) and of depth O (log n) that calculates MAJ (X).
Reference: [Vaz] <author> U. Vazirani, </author> <title> Randomness, adversaries and computation, </title> <type> Ph.D. Thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1986. </year> <note> BIBLIOGRAPHY 170 </note>
Reference-contexts: Our approach is different from the one taken in the previous chapter, i.e., reducing the size of the sample space by requiring only limited independence among the random variables (as opposed to full independence). It is based on the equivalence of the following two conditions: (See [CGHFRS] and <ref> [Vaz] </ref>). Let x 1 ; : : : ; x n be f0; 1g Bernoulli random variables. 1. The random variables are independent and for all i, Prob [x i = 0] = Prob [x i = 1]. 2. <p> To be more precise, we require that for every subset S, fi fi fi Prob [ X x i = 0] Prob [ X x i = 1] fi fi * This quantity was called by Vazirani <ref> [Vaz] </ref> the bias of the subset S. In this chapter we describe efficient constructions of random variables that have small bias. We first introduce the Fourier transform of Z 2 n . CHAPTER 17.
Reference: [Zu] <author> D. Zuckerman, </author> <title> "NP-Complete problems have a version that is hard to approximate", </title> <type> unpublished manuscript, </type> <year> 1992. </year>
Reference-contexts: A monotone formula is a formula that does not contain negated variables. This is work of D. Zuckerman <ref> [Zu] </ref>.
Reference: [ZG] <author> Y. Zalcstein, M. Garzon, </author> <title> "An NC 2 algorithm for testing similarity of matrices", </title> <journal> Information Processing Letters, </journal> <volume> Vol. 30, </volume> <year> 1989, </year> <pages> pp. 253-254. </pages>
Reference-contexts: We begin by arbitrarily orienting the edges of G, say fl We note that a deterministic NC algorithm for this problem was recently given by <ref> [ZG] </ref> CHAPTER 11. ALGEBRAIC METHODS 84 v i ! v j , iff i &lt; j and (v i ; v j ) 2 E.
References-found: 68

