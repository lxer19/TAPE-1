URL: http://www.cs.utexas.edu/users/hudson/iclp94a.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Email: vl@cs.utexas.edu  hudson@cs.utexas.edu  
Title: Splitting a Logic Program  
Author: Vladimir Lifschitz Hudson Turner 
Address: Austin, TX 78712  Austin, TX 78712  
Affiliation: Department of Computer Sciences and Department of Philosophy University of Texas at Austin  Department of Computer Sciences University of Texas at Austin  
Abstract: In many cases, a logic program can be divided into two parts, so that one of them, the "bottom" part, does not refer to the predicates defined in the "top" part. The "bottom" rules can be used then for the evaluation of the predicates that they define, and the computed values can be used to simplify the "top" definitions. We discuss this idea of splitting a program in the context of the answer set semantics. The main theorem shows how computing the answer sets for a program can be simplified when the program is split into parts. The programs covered by the theorem may use both negation as failure and classical negation, and their rules may have disjunctive heads. The usefulness of the concept of splitting for the investigation of answer sets is illustrated by several applications. First, we show that a conservative extension theorem by Gelfond and Przymusinska and a theorem on the closed world assumption by Gelfond and Lifschitz are easy consequences of the splitting theorem. Second, (locally) stratified programs are shown to have a simple characterization in terms of splitting. The existence and uniqueness of an answer set for such a program can be easily derived from this characterization. Third, we relate the idea of splitting to the notion of order-consistency. 
Abstract-found: 1
Intro-found: 1
Reference: [ Apt et al., 1988 ] <author> Krzysztof Apt, Howard Blair, and Adrian Walker. </author> <title> Towards a theory of declarative knowledge. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: This idea of splitting a logic program into parts has a rather long history. Although it is applicable even to positive programs, it turned out to be particularly useful when negation as failure is involved. The best known application of splitting is found in the notion of a stratification <ref> [ Apt et al., 1988 ] </ref> . In a stratified program P , the first stratum is a bottom part that does not contain negation as failure.
Reference: [ Dix, 1992 ] <author> Jurgen Dix. </author> <title> Classifying semantics of disjunctive logic programs (extended abstract). </title> <editor> In Krzysztof Apt, editor, </editor> <booktitle> Proc. Joint Int'l Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 798-812, </pages> <year> 1992. </year>
Reference: [ Fages, 1994 ] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <journal> Journal of Methods of Logic in Computer Science, </journal> <volume> 1(1) </volume> <pages> 51-60, </pages> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Third, we relate the idea of splitting to the syntactic property of programs called "order-consistency"; that property is important in view of the fact that it implies the existence of at least one answer set <ref> [ Fages, 1994 ] </ref> . Order-consistent programs can be characterized in terms of splitting also. <p> This sequence splits P 6 , and the U - components of P 6 are the signed programs f a g and ;. Using Proposition 5 and the Splitting Sequence Theorem, we can derive Fages's theorem <ref> [ Fages, 1994 ] </ref> on the existence of an answer set for an order-consistent program from a similar|and easier|theorem for signed programs. Proof of Proposition 5 (sketch).
Reference: [ Gelfond and Lifschitz, 1988 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In Robert Kowalski and Kenneth Bowen, editors, </editor> <booktitle> Logic Programming: Proc. of the Fifth Int'l Conf. and Symp., </booktitle> <pages> pages 1070-1080, </pages> <year> 1988. </year>
Reference-contexts: Proposition 3 leads to a new proof of a familiar property of stratified nondisjunctive programs without classical negation ( <ref> [ Gelfond and Lifschitz, 1988 ] </ref> , Corollary 1): Proposition 4. Every stratified, nondisjunctive program without classical negation has a unique answer set. Proof.
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: This idea has led Schlipf [1992] to the definition of a "stratified pair," and Dix [1992] to the definitions of "relevance" and "modularity." In this paper, we discuss splitting in the context of the "answer set semantics" of <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . The main theorem shows how computing the answer sets for a program can be simplified when the program is split into parts. <p> The usefulness of the concept of splitting for the investigation of answer sets is illustrated by several applications. First, we generalize a conservative extension theorem from [ Gelfond and Przymusinska, 1991 ] and the theorem on the closed world assumption from <ref> [ Gelfond and Lifschitz, 1991 ] </ref> , and show that these generalizations can be easily proved as consequences of the splitting theorem. Second, (locally) stratified programs are shown to have a simple characterization in terms of splitting. <p> Rules of this kind play an important part in knowledge representation ( <ref> [ Gelfond and Lifschitz, 1991 ] </ref> , Section 3). The following theorem describes the effect of adding a set of closed world assumption rules to a program: Proposition 2. <p> Since the only answer set for P 4 is fp (1); :q (2)g, Proposition 2 shows that the only answer set for P 0 4 is Proposition 4 from <ref> [ Gelfond and Lifschitz, 1991 ] </ref> is the special case of Proposition 2 in which P is a nondisjunctive program without classical negation, and C is the set of all negative literals. Proof of Proposition 2. Let U = lit (P ).
Reference: [ Gelfond and Przymusinska, 1991 ] <author> Michael Gelfond and Halina Przymusin-ska. </author> <title> Definitions in epistemic specifications. </title> <editor> In Anil Nerode, Wiktor Marek, and V. S. Subramanian, editors, </editor> <booktitle> Logic Programming and Non-monotonic Reasoning: Proceedings of the First International Workshop, </booktitle> <pages> pages 245-259, </pages> <year> 1991. </year>
Reference-contexts: The programs covered by the theorem may use both negation as failure and classical negation, and their rules may have disjunctive heads. The usefulness of the concept of splitting for the investigation of answer sets is illustrated by several applications. First, we generalize a conservative extension theorem from <ref> [ Gelfond and Przymusinska, 1991 ] </ref> and the theorem on the closed world assumption from [ Gelfond and Lifschitz, 1991 ] , and show that these generalizations can be easily proved as consequences of the splitting theorem. <p> For instance, after we extend a program by the contradictory rules a and :a , every literal in the language will become its consequence. One case when the conservative extension property does hold is described in <ref> [ Gelfond and Przymusinska, 1991 ] </ref> , Proposition 2.1. In this section, we state a slightly more general fact and prove it as a corollary to the Splitting Set Theorem. A program is nondisjunctive if the head of each of its rules is a singleton. Proposition 1.
Reference: [ Kunen, 1989 ] <author> Kenneth Kunen. </author> <title> Signed data dependencies in logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 7(3) </volume> <pages> 231-245, </pages> <year> 1989. </year>
Reference-contexts: Consequently, there is exactly one sequence satisfying these conditions. Every element of every member of this sequence is an atom, so that the last con dition is satisfied also. 8 Splitting and Order-Consistency The notions of a "signed" program (program with a signing) <ref> [ Kunen, 1989 ] </ref> and an "order-consistent" program [ Sato, 1990 ] can be defined as follows. In the definitions, P is assumed to be a nondisjunctive program without classical negation.
Reference: [ McCain and Turner, 1993 ] <author> Norman McCain and Hudson Turner. </author> <title> Language independence and language tolerance in logic programs. </title> <note> Submitted for publication, </note> <year> 1993. </year>
Reference-contexts: For this sequence U , all U -components of P are signed. 9 Conclusion The usefulness of splitting is illustrated in this paper by several applications. The Splitting Set Theorem is also employed in the paper "Language Independence and Language Tolerance in Logic Programs" <ref> [ McCain and Turner, 1993 ] </ref> , which appears in this volume. It is used there to prove one of the central results|Theorem 6.1, which shows that, under some conditions, one can ignore the fact that the language of a logic program is many-sorted.
Reference: [ Przymusinska and Przymusinski, 1988 ] <author> Halina Przymusinska and Teodor Przymusinski. </author> <title> Weakly perfect model semantics for logic programs. </title> <editor> In Robert Kowalski and Kenneth Bowen, editors, </editor> <booktitle> Logic Programming: Proc. of the Fifth Int'l Conf. and Symp., </booktitle> <pages> pages 1106-1120, </pages> <year> 1988. </year>
Reference-contexts: In fact, this step-by-step reduction to a series of positive programs is sometimes applicable even when P is not stratified. This observation leads to the notion of a weakly stratified program <ref> [ Przymusinska and Przymusinski, 1988 ] </ref> . The notion of a stratification has been also extended in two other directions. First, it may be possible to split a program into an infinite|or even transfinite|sequence of parts, instead of a finite number.
Reference: [ Przymusinski, 1988 ] <author> Teodor Przymusinski. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 193-216. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: The notion of a stratification has been also extended in two other directions. First, it may be possible to split a program into an infinite|or even transfinite|sequence of parts, instead of a finite number. This is what happens in locally stratified programs <ref> [ Przymusinski, 1988 ] </ref> . (As observed above, splitting a program into finitely many parts can be achieved by repeatedly splitting into two; introducing infinite splittings is a nontrivial generalization.) Second, the bottom does not need to be a positive program. <p> Program P 5 is a stratified program: take f (p (S n (0))) = n. Programs P 1 and P 2 are not stratified. The definition given above is equivalent to the usual definition of a "locally stratified" program <ref> [ Przymusinski, 1988 ] </ref> when the set of atoms is defined as the set of ground atoms of a first-order language, and there is no classical negation. (A "nonlocal stratification" does not make sense in the context of the abstract view of atoms accepted here.) A rule r is a constraint
Reference: [ Sato, 1990 ] <author> Taisuke Sato. </author> <title> Completed logic programs and their consistency. </title> <journal> Journal of Logic Programming, </journal> <volume> 9 </volume> <pages> 33-44, </pages> <year> 1990. </year>
Reference-contexts: Every element of every member of this sequence is an atom, so that the last con dition is satisfied also. 8 Splitting and Order-Consistency The notions of a "signed" program (program with a signing) [ Kunen, 1989 ] and an "order-consistent" program <ref> [ Sato, 1990 ] </ref> can be defined as follows. In the definitions, P is assumed to be a nondisjunctive program without classical negation.
Reference: [ Schlipf, 1992 ] <author> John Schlipf. </author> <title> Formalizing a logic for logic programming. </title> <journal> An--nals of Mathematics and Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 279-302, </pages> <year> 1992. </year>
References-found: 12

