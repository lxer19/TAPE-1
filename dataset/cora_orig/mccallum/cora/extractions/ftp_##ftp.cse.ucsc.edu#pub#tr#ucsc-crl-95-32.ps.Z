URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-32.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Email: avg@cs.ucsc.edu  
Title: Linear Time Unit Resolution for Propositional Formulas|in Prolog, yet  
Author: Allen Van Gelder 
Date: April 19, 1995  
Address: Santa Cruz 95064 UCSC-CRL-95-32  
Affiliation: Baskin Center for Computer Engineering and Information Sciences University of California,  
Abstract: A procedure to analyze a propositional formula in clause form by unit resolution is described and illustrated with a Prolog implementation. It runs in worst-case time that is linear in the length of the formula. The main idea has been independently rediscovered by several implementers. Apparently, its first journal appearance was a sketch by Dalal and Etherington in 1992. However, there also had arisen a folkloric belief that unit resolution requires quadratic time. This report shows that the implementation sketched for imperative languages, such as C, consumes quadratic time if translated to Prolog. This degradation occurs even if clause indexing permits the retrieval of an asserted clause in constant time. It is rather due to the way Prolog handles assertions involving data structures, such as lists. A modified Prolog implementation that restores linear time is described. The time remains linear even if the procedure is run "on-line", meaning that new clauses appear in the input as processing proceeds. This property is useful in applications that have several mechanisms for deriving new clauses. The technique may have application in other problems that can be described as inductive closures on finite domains. Ad hoc solutions to such problems are error-prone and often inefficient. Keywords: Propositional logic, satisfiability, validity, boolean formula, unit resolution, Prolog internals, algorithms, inductive closure. 
Abstract-found: 1
Intro-found: 1
Reference: [AI91] <author> G. </author> <title> Ausiello and G.F. Italiano. Online algorithms for polynomially solvable satisfiability problems. </title> <journal> Journal of Logic Programming, </journal> <volume> 10(1) </volume> <pages> 69-90, </pages> <year> 1991. </year>
Reference-contexts: More recently, Ausiello and Italiano showed how to make Dowling and Gallier's bottom-up algorithm run on-line without a loss of performance <ref> [AI91] </ref>. They also described another version, which also delivers additional information, and requires time kn, for k propositional variables and n atoms in the formula. The paper assumes k is known in advance for both versions; this assumption can be relaxed, as shown in this paper. <p> This paper describes that algorithm in detail for an imperative language, such as C, and then shows what modifications are needed to achieve linear time performance in Prolog. The basic algorithm may be regarded as a generalization of widely known bottom-up algorithm mentioned <ref> [Har78, BB79, DG84, AI91] </ref>. Nevertheless, there are some aspects of it that might make a detailed presentation worthwhile: 1. It dispels the folkloric belief that unit resolution requires quadratic time.
Reference: [APT79] <author> B. Aspvall, M. Plass, and R. Tarjan. </author> <title> A Linear-time Algorithm for Testing the Truth of Certain Quantified Boolean Formulas. </title> <journal> Information Processing Letters, </journal> <volume> 8(3) </volume> <pages> 121-123, </pages> <month> March </month> <year> 1979. </year>
Reference-contexts: However, he overlooked (and rediscovered) Lewis' elegant original solution [Lew78], which required quadratic time in the presence of long clauses. 1 Aspvall's extension was to convert the formula to 3-CNF first, then apply Lewis' transformation (which is linear-time on 3-CNF), and finally apply the recently discovered linear-time 2-SAT algorithm <ref> [APT79] </ref>. I hope the numerous later researchers who have published on Horn Renameability will forgive me for not citing them, and will forgive Aspvall for not giving his paper a better title.
Reference: [Asp80] <author> B. Aspvall. </author> <title> Recognizing Disguised NR(1) Instances of the Satisfiability Problem. </title> <journal> Journal of Algorithms, </journal> <volume> 1 </volume> <pages> 97-103, </pages> <year> 1980. </year>
Reference-contexts: Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella [Scu90]. Horn Renameability has been resolved since 1980 by Aspvall, in a much overlooked (but accessible) paper <ref> [Asp80] </ref>.
Reference: [BB79] <author> C. Beeri and P. A. Bernstein. </author> <title> Computational problems related to the design of normal form relational schemas. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(1) </volume> <pages> 30-59, </pages> <year> 1979. </year>
Reference-contexts: A partial list is: identification of nullable (or eraseable) symbols of a context free grammar [Har78], emptiness of a context free grammar, and implication of functional dependencies <ref> [BB79] </ref>. This correspondence was observed by Dowling and Gallier [DG84], who adopted a bottom-up algorithm from Harrison [Har78], who in turn credited A. Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella [Scu90]. <p> This paper describes that algorithm in detail for an imperative language, such as C, and then shows what modifications are needed to achieve linear time performance in Prolog. The basic algorithm may be regarded as a generalization of widely known bottom-up algorithm mentioned <ref> [Har78, BB79, DG84, AI91] </ref>. Nevertheless, there are some aspects of it that might make a detailed presentation worthwhile: 1. It dispels the folkloric belief that unit resolution requires quadratic time.
Reference: [DE92] <author> M. Dalal and D. Etherington. </author> <title> A hierarchy of tractable satisfiability problems. </title> <journal> Information Processing Letters, </journal> <volume> 44 </volume> <pages> 173-180, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The paper assumes k is known in advance for both versions; this assumption can be relaxed, as shown in this paper. The on-line property is useful in applications that have several mechanisms for deriving new clauses. Dalal and Etherington sketched a linear-time algorithm for unit resolution <ref> [DE92, Sect. 4] </ref>, which appears to have been independently rediscovered by several implementers. This paper describes that algorithm in detail for an imperative language, such as C, and then shows what modifications are needed to achieve linear time performance in Prolog.
Reference: [DG84] <author> W. Dowling and J. Gallier. </author> <title> Linear-time Algorithms for Testing the Satisfiability of Propositional Horn Formulae. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 267-284, </pages> <year> 1984. </year>
Reference-contexts: A partial list is: identification of nullable (or eraseable) symbols of a context free grammar [Har78], emptiness of a context free grammar, and implication of functional dependencies [BB79]. This correspondence was observed by Dowling and Gallier <ref> [DG84] </ref>, who adopted a bottom-up algorithm from Harrison [Har78], who in turn credited A. Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella [Scu90]. <p> This paper describes that algorithm in detail for an imperative language, such as C, and then shows what modifications are needed to achieve linear time performance in Prolog. The basic algorithm may be regarded as a generalization of widely known bottom-up algorithm mentioned <ref> [Har78, BB79, DG84, AI91] </ref>. Nevertheless, there are some aspects of it that might make a detailed presentation worthwhile: 1. It dispels the folkloric belief that unit resolution requires quadratic time.
Reference: [DLL62] <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A Machine Program for Theorem-Proving. </title> <journal> Communications of the ACM, </journal> <volume> 5 </volume> <pages> 394-397, </pages> <year> 1962. </year>
Reference-contexts: The reason is that asserta is used, and there is no retract in the basic on-line algorithm. Backtracking in an imperative language is a more difficult task, but the task can be guided by the Prolog method. The famous satisfiability algorithm of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref> relies heavily on a combination of unit resolution and backtracking. <p> The groundwork for simple and efficient backtracking in the Prolog implementation has been laid by the consistent use of asserta () and the avoidance of retract (). The idea has yielded faster implementations of model searching algorithms, such as that of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref>. 9 Acknowledgements This work was supported in part by NSF grant CCR-8958590, by equipment donations from Sun Microsys tems, Inc., and software donations from Quintus Computer Systems, Inc.
Reference: [DP60] <author> M. Davis and H. Putnam. </author> <title> A Computing Procedure for Quantification Theory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: The reason is that asserta is used, and there is no retract in the basic on-line algorithm. Backtracking in an imperative language is a more difficult task, but the task can be guided by the Prolog method. The famous satisfiability algorithm of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref> relies heavily on a combination of unit resolution and backtracking. <p> The groundwork for simple and efficient backtracking in the Prolog implementation has been laid by the consistent use of asserta () and the avoidance of retract (). The idea has yielded faster implementations of model searching algorithms, such as that of Davis, Putnam, Logemann and Loveland <ref> [DP60, DLL62] </ref>. 9 Acknowledgements This work was supported in part by NSF grant CCR-8958590, by equipment donations from Sun Microsys tems, Inc., and software donations from Quintus Computer Systems, Inc.
Reference: [GU89] <author> G. Gallo and G. Urbani. </author> <title> Algorithms for testing the satisfiability of propositional formulae. </title> <journal> Journal of Logic Programming, </journal> <volume> 7(1) </volume> <pages> 45-61, </pages> <year> 1989. </year>
Reference-contexts: As early examples, Gallo and Urbani embedded Horn SAT as a subroutine in a full-blown satisfiability checker <ref> [GU89] </ref>, and Larrabee embedded 2-SAT [Lar92]. <p> Nevertheless, there are some aspects of it that might make a detailed presentation worthwhile: 1. It dispels the folkloric belief that unit resolution requires quadratic time. Dowling and Gallier mention that unit resolution takes quadratic time, and Gallo and Urbani make quite a point of it, including empirical evidence <ref> [GU89] </ref>. These remarks were not incorrect, being based on a particular implementation of unit resolution, but they gave the impression that improvement was not possible. 2. Unit resolution is a complete decision method for Horn clauses.
Reference: [Har78] <author> M. A. Harrison. </author> <title> Introduction to Formal Language Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1978. </year>
Reference-contexts: Horn SAT is easily seen to be equivalent to several problems in formal language theory and database theory for which linear time algorithms were known in the 1970s. A partial list is: identification of nullable (or eraseable) symbols of a context free grammar <ref> [Har78] </ref>, emptiness of a context free grammar, and implication of functional dependencies [BB79]. This correspondence was observed by Dowling and Gallier [DG84], who adopted a bottom-up algorithm from Harrison [Har78], who in turn credited A. Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. <p> A partial list is: identification of nullable (or eraseable) symbols of a context free grammar <ref> [Har78] </ref>, emptiness of a context free grammar, and implication of functional dependencies [BB79]. This correspondence was observed by Dowling and Gallier [DG84], who adopted a bottom-up algorithm from Harrison [Har78], who in turn credited A. Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella [Scu90]. Horn Renameability has been resolved since 1980 by Aspvall, in a much overlooked (but accessible) paper [Asp80]. <p> This paper describes that algorithm in detail for an imperative language, such as C, and then shows what modifications are needed to achieve linear time performance in Prolog. The basic algorithm may be regarded as a generalization of widely known bottom-up algorithm mentioned <ref> [Har78, BB79, DG84, AI91] </ref>. Nevertheless, there are some aspects of it that might make a detailed presentation worthwhile: 1. It dispels the folkloric belief that unit resolution requires quadratic time.
Reference: [Lar92] <author> T. Larrabee. </author> <title> Test Pattern Generation Using Boolean Satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(1) </volume> <pages> 6-22, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: As early examples, Gallo and Urbani embedded Horn SAT as a subroutine in a full-blown satisfiability checker [GU89], and Larrabee embedded 2-SAT <ref> [Lar92] </ref>.
Reference: [Lew78] <author> H. R. Lewis. </author> <title> Renaming a Set of Clauses as a Horn Set. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 25(1) </volume> <pages> 134-135, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella [Scu90]. Horn Renameability has been resolved since 1980 by Aspvall, in a much overlooked (but accessible) paper [Asp80]. However, he overlooked (and rediscovered) Lewis' elegant original solution <ref> [Lew78] </ref>, which required quadratic time in the presence of long clauses. 1 Aspvall's extension was to convert the formula to 3-CNF first, then apply Lewis' transformation (which is linear-time on 3-CNF), and finally apply the recently discovered linear-time 2-SAT algorithm [APT79].
Reference: [Scu90] <author> M. G. Scutella. </author> <title> A note on Dowling and Gallier's top-down algorithm for propositional Horn satisfiability. </title> <journal> Journal of Logic Programming, </journal> <volume> 8(3) </volume> <pages> 265-273, </pages> <year> 1990. </year> <month> 10 </month>
Reference-contexts: This correspondence was observed by Dowling and Gallier [DG84], who adopted a bottom-up algorithm from Harrison [Har78], who in turn credited A. Yehudai. Dowling and Gallier also introduced a top-down linear-time algorithm. A correction to the latter was offered by Scutella <ref> [Scu90] </ref>. Horn Renameability has been resolved since 1980 by Aspvall, in a much overlooked (but accessible) paper [Asp80].
References-found: 13

