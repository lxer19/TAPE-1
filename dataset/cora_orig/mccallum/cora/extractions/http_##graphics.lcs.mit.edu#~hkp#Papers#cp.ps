URL: http://graphics.lcs.mit.edu/~hkp/Papers/cp.ps
Refering-URL: http://graphics.lcs.mit.edu/visual_simulation/gallery.html
Root-URL: 
Title: A Framework for Interactive Texturing on Curved Surfaces  
Author: Hans Kthling Pedersen 
Affiliation: Computer Science Department Stanford University  
Abstract: Existing techniques for texturing curved surfaces are either only applicable for a limited subset of surface representations (3d painting of parametric patches or dense polygonal meshes for example), or do not lend themselves naturally to interactive texture editing (e.g. procedural and solid textures). Although such methods have been used to produce stunning effects, there is a lack of flexible and general purpose tools, such as those provided by 2d image processing applications. This work argues that interactive texturing could benefit from a more cohesive paradigm built around a kernel of powerful and general operations. Using an analogy to the evolution of 2d painting algorithms, the paper motivates a framework for interactive texturing operations on curved surfaces and describes an approach for translating, rotating, and warping regions of texture (patchinos) on a surface. These ideas have been implemented for parametric and implicit surfaces. As an interesting side effect, this more unified framework also opens the door to a number of new interactive 3d texturing techniques that have no natural counterparts in two dimensions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Catmull. </author> <title> A hidden-surface algorithm with anti-aliasing. </title> <booktitle> In Computer Graphics (SIGGRAPH '78 Proceedings), </booktitle> <volume> volume 12, </volume> <pages> pages 6-11, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: However, underneath this diversity is an underlying framework consisting of a few general and powerful algorithms, most prominently the concepts of digital compositing <ref> [1] </ref> and copy and paste [2]. The idea behind compositing is to reduce the complexity of rendering by separating the image into a number of layers, generate an image for each layer, and subsequently synthesize the layers into one composite image using mat-tes and alpha blending [3].
Reference: [2] <author> Richard Shoup. SuperPaint. </author> <note> Xerox PARC, </note> <year> 1974. </year>
Reference-contexts: However, underneath this diversity is an underlying framework consisting of a few general and powerful algorithms, most prominently the concepts of digital compositing [1] and copy and paste <ref> [2] </ref>. The idea behind compositing is to reduce the complexity of rendering by separating the image into a number of layers, generate an image for each layer, and subsequently synthesize the layers into one composite image using mat-tes and alpha blending [3].
Reference: [3] <author> Thomas Porter and Tom Duff. </author> <title> Compositing digital images. </title> <editor> In Hank Christiansen, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <volume> volume 18, </volume> <pages> pages 253-259, </pages> <month> July </month> <year> 1984. </year> <booktitle> [4] 1990 computer graphics achievement award. Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> 24 </volume> <pages> 17-18, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The idea behind compositing is to reduce the complexity of rendering by separating the image into a number of layers, generate an image for each layer, and subsequently synthesize the layers into one composite image using mat-tes and alpha blending <ref> [3] </ref>. Copy and paste operations allow portions of an image to be extracted, moved, warped and repositioned interactively. <p> Aside from the special case of mappings between a texture patch and the surface as described in section 3.1, textures can also be mapped between arbitrary combinations of patchinos and the surface (see figure 9e). This facilitates general image processing operations between sets of patches equivalent to <ref> [3] </ref> and thus the entire digital compositing paradigm to be applied on curved surfaces.
Reference: [5] <author> Pat Hanrahan and Paul E. Haeberli. </author> <title> Direct WYSIWYG painting and texturing on 3D shapes. In Forest Baskett, editor, </title> <booktitle> Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> volume 24, </volume> <pages> pages 215-223, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: which can be attributed to a convenient and intuitive user interface, simplicity and elegance of the underlying theoretical model, and computational efficiency that makes the idea practical. 1.1 Interactive 3d texturing Compared to traditional framebuffer systems, which date back to the early 1970s [4], 3d painting is a new discipline <ref> [5] </ref>. Recently, however, the market for these products has experienced an explosive growth that rivals that of 2d systems a decade ago. Unfortunately, the literature on 3d painting algorithms exhibits a tendency to focus on one particular type of surface representation, such as parametric patches [5], scanned polygonal meshes [6], parameterized <p> painting is a new discipline <ref> [5] </ref>. Recently, however, the market for these products has experienced an explosive growth that rivals that of 2d systems a decade ago. Unfortunately, the literature on 3d painting algorithms exhibits a tendency to focus on one particular type of surface representation, such as parametric patches [5], scanned polygonal meshes [6], parameterized meshes [7], or implicit surfaces [8], thus polarizing the spectrum of painting algorithms rather than moving towards a unifying standard.
Reference: [6] <author> Maneesh Agrawala, Andrew C. Beers, and Marc Levoy. </author> <title> 3d painting on scanned surfaces. </title> <booktitle> In Proceedings 1995 Symposium on Interactive 3D Graphics (Monterey, </booktitle> <address> California, </address> <month> April 9-12, </month> <year> 1995), </year> <pages> pages 145-152. </pages>
Reference-contexts: Recently, however, the market for these products has experienced an explosive growth that rivals that of 2d systems a decade ago. Unfortunately, the literature on 3d painting algorithms exhibits a tendency to focus on one particular type of surface representation, such as parametric patches [5], scanned polygonal meshes <ref> [6] </ref>, parameterized meshes [7], or implicit surfaces [8], thus polarizing the spectrum of painting algorithms rather than moving towards a unifying standard.
Reference: [7] <author> Jerome Maillot, Hussein Yahia, and Anne Verroust. </author> <title> Interactive texture mapping. </title> <editor> In James T. Kajiya, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <volume> volume 27, </volume> <pages> pages 27-34, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Unfortunately, the literature on 3d painting algorithms exhibits a tendency to focus on one particular type of surface representation, such as parametric patches [5], scanned polygonal meshes [6], parameterized meshes <ref> [7] </ref>, or implicit surfaces [8], thus polarizing the spectrum of painting algorithms rather than moving towards a unifying standard. <p> For our study, we will assume that both representations are readily available. This assumption is reasonable because such techniques exist for widely used surface representations, such as spline patches (the trivial case), implicit surfaces [8], polyhedral surfaces <ref> [7, 11] </ref> and dense uniform point clouds [12]. <p> Finding a reparameterization such that the metric distortion E (U ) = U Error ( u ; v )dudv is minimal, where u and v denote the partial derivatives and Error is some objective function measuring the distortion within the patch, is a standard problem in graphics research <ref> [15, 7, 16, 11] </ref>. Various functionals have been proposed, weighting the preservation of angles and distances in different ways.
Reference: [8] <author> Hans K. Pedersen. </author> <title> Decorating implicit surfaces. </title> <editor> In Robert Cook, editor, </editor> <booktitle> Proceedings of SIGGRAPH '95 (Los Angeles, </booktitle> <address> California, </address> <month> August 6-11, </month> <year> 1995), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 291-300. </pages> <publisher> ACM SIGGRAPH, ACM Press, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Unfortunately, the literature on 3d painting algorithms exhibits a tendency to focus on one particular type of surface representation, such as parametric patches [5], scanned polygonal meshes [6], parameterized meshes [7], or implicit surfaces <ref> [8] </ref>, thus polarizing the spectrum of painting algorithms rather than moving towards a unifying standard. <p> Section 4 discusses more advanced high level operations, followed by a conclusion and ideas for future work. Page 1 2 Architecture Before moving on to texture compositing on surfaces, we will start by developing an architecture that will allow such operations to be applied on general smooth models. Ped-ersen <ref> [8] </ref> took a step towards this goal with an approach for placing images arbitrarily on implicit surfaces in lieu of extending the method to other types of surfaces. <p> For our study, we will assume that both representations are readily available. This assumption is reasonable because such techniques exist for widely used surface representations, such as spline patches (the trivial case), implicit surfaces <ref> [8] </ref>, polyhedral surfaces [7, 11] and dense uniform point clouds [12]. <p> We choose to sample the texture signal in texture maps corresponding to parameterized polygonal patches (see <ref> [8] </ref> for a motivation of this representation). Similar to image compositing, our approach consists of three simple steps: 1. Copy a region of texture. 2. Move it. 3. Paste it back. <p> From now on, such a patch will be referred to as a patchino to distinguish it from the patches that constitute the polygonal mesh. After the patchino has been parameterized (see section 4 of <ref> [8] </ref> for details), the closed curves are projected to it ([8], section 5.1) and a matte is computed by performing an inside-outside test for each texel (in practice, we tessellate the closed regions and scan-convert the resulting triangles directly into the alpha channel). <p> Finally, a coordinate transformation between the surface patches and the patchino is computed and used to copy the texels from the surface into the texture space of the latter. In section 5.2.1 of <ref> [8] </ref>, an algorithm for pasting textures from a patchino to a surface was outlined (see also figure 9a), and the corresponding cut operation can be implemented similarly using the GetTextureCoordinates primitive (figure 9b). <p> Cylindrical patchinos are defined by three boundary curves: two cyclic geodesic curvature minimizing in-terpolants and one geodesic arranged in the shape of an oldfashioned pair of eye-glasses (see figures 9d and 11) and parameterized using a straightforward extension of the techniques described in <ref> [8] </ref> and [11]. <p> The optimization procedure from rectangular patchinos generalizes almost directly, except that the order in which the nodes are visited is specified by circular curves, emanating from middle of Page 5 Class Sample Vector3 x; n; v ; Position, normal and velocity Vector3 u , v ; Derivatives Sample neighbors <ref> [8] </ref> ; Spring coordinates Vector2 k [8] Class Patchino private: DifferentiableSurface surface ; Pointer to surface Sample grid [DIM U][DIM V] ; Grid of samples public: Freeze () ; Set = Translate (Vector3 v) ; Slide in direction v Rotate (Real !) ;Rotate by angle ! around center ReduceDistortion () ; <p> patchinos generalizes almost directly, except that the order in which the nodes are visited is specified by circular curves, emanating from middle of Page 5 Class Sample Vector3 x; n; v ; Position, normal and velocity Vector3 u , v ; Derivatives Sample neighbors <ref> [8] </ref> ; Spring coordinates Vector2 k [8] Class Patchino private: DifferentiableSurface surface ; Pointer to surface Sample grid [DIM U][DIM V] ; Grid of samples public: Freeze () ; Set = Translate (Vector3 v) ; Slide in direction v Rotate (Real !) ;Rotate by angle ! around center ReduceDistortion () ; Minimize E fl (U ) Patchino
Reference: [9] <author> Kurt Fleisher, David H. Laidlaw, Bena L. Currin, and Alan H. Barr. </author> <title> Cellular texture generation. </title> <editor> In Robert Cook, editor, </editor> <booktitle> Proceedings of SIGGRAPH '95 (Los Angeles, Cal ifornia, </booktitle> <month> August 6-11, </month> <year> 1995), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 239-248. </pages> <publisher> ACM SIG-GRAPH, ACM Press, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: In order to design such an architecture, we need to identify a suitable core of generic operations. Fleisher et al. <ref> [9] </ref> introduced a novel framework for cellular texturing compatible with all standard surface representations. However, since our focus is on more general operations supported by an intuitive interface, the proven concept of image compositing forms an even better source of inspiration.
Reference: [10] <author> Julie Daily and Kenneth Kiss. </author> <title> 3d painting: Paradigms for painting in a new dimension, </title> <booktitle> chi '95 conference proceedings (denver colorado, </booktitle> <month> may 7-11, </month> <year> 1995). </year>
Reference-contexts: Fleisher et al. [9] introduced a novel framework for cellular texturing compatible with all standard surface representations. However, since our focus is on more general operations supported by an intuitive interface, the proven concept of image compositing forms an even better source of inspiration. Furthermore, Daily and Kiss's <ref> [10] </ref> recent study of users of painting systems concluded that artists are more likely to embrace a 3d application if its interface resembles that of the well known 2d packages.
Reference: [11] <author> Venkat Krishnamurthy and Marc Levoy. </author> <title> Fitting smooth surfaces to dense polygonal meshes for computer animation. </title> <booktitle> In Proceedings of SIGGRAPH '96 (New Orleans, </booktitle> <address> Louisiana, </address> <month> August 4-9, </month> <year> 1996), </year> <month> august </month> <year> 1996. </year>
Reference-contexts: For our study, we will assume that both representations are readily available. This assumption is reasonable because such techniques exist for widely used surface representations, such as spline patches (the trivial case), implicit surfaces [8], polyhedral surfaces <ref> [7, 11] </ref> and dense uniform point clouds [12]. <p> Finding a reparameterization such that the metric distortion E (U ) = U Error ( u ; v )dudv is minimal, where u and v denote the partial derivatives and Error is some objective function measuring the distortion within the patch, is a standard problem in graphics research <ref> [15, 7, 16, 11] </ref>. Various functionals have been proposed, weighting the preservation of angles and distances in different ways. <p> Cylindrical patchinos are defined by three boundary curves: two cyclic geodesic curvature minimizing in-terpolants and one geodesic arranged in the shape of an oldfashioned pair of eye-glasses (see figures 9d and 11) and parameterized using a straightforward extension of the techniques described in [8] and <ref> [11] </ref>. <p> This might be accomplished by drawing feature curves around the base of a branch and constraining a surrounding patchino not to move within these. Page 6 Copy and paste of surface geometry. Recent progress in 3d data acquisition and surface fitting techniques ([17] and <ref> [11] </ref>, [12]), present an interesting challenge in how to texture models of a hitherto unseen level of complexity. This problem might be alleviated by a new range of interactive applications between traditional modeling and painting systems. <p> potentially help point towards new interesting directions of research and thus accelerate the development of exciting new interactive tools. 8 Acknowledgments Thanks to Pat Hanrahan for a fun year in California, to Venkat Krishnamurthy for many helpful and enjoyable discussions and for allowing me to use his excellent parameterization package <ref> [11] </ref>, to Julie Dorsey for lots of inspiration and cool ideas, to Tamara Munzner for kindly helping with an important video tape in the last minutes before a challenging deadline, to Brian Curless for allowing me to use his friendly 3d scanning software [17], and to all of the reviewers for
Reference: [12] <author> Matthias Eck and Hugues Hoppe. </author> <title> Automatic reconstruction of b-spline surfaces of arbitrary topological type. </title> <booktitle> In Proceedings of SIGGRAPH '96 (New Orleans, </booktitle> <address> Louisiana, </address> <month> August 4-9, </month> <year> 1996), </year> <month> august </month> <year> 1996. </year>
Reference-contexts: For our study, we will assume that both representations are readily available. This assumption is reasonable because such techniques exist for widely used surface representations, such as spline patches (the trivial case), implicit surfaces [8], polyhedral surfaces [7, 11] and dense uniform point clouds <ref> [12] </ref>. <p> This might be accomplished by drawing feature curves around the base of a branch and constraining a surrounding patchino not to move within these. Page 6 Copy and paste of surface geometry. Recent progress in 3d data acquisition and surface fitting techniques ([17] and [11], <ref> [12] </ref>), present an interesting challenge in how to texture models of a hitherto unseen level of complexity. This problem might be alleviated by a new range of interactive applications between traditional modeling and painting systems.
Reference: [13] <author> Andrew P. Witkin and Paul S. Heckbert. </author> <title> Using particles to sample and control implicit surfaces. </title> <editor> In Andrew Glassner, editor, </editor> <booktitle> Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 269-278. </pages> <publisher> ACM SIGGRAPH, ACM Press, </publisher> <month> July </month> <year> 1994. </year> <note> ISBN 0-89791-667-0. </note>
Reference-contexts: v) Class Parametric : public DifferentiableSurface private: Patch patches [MAX SIZE] ; Parameterizations for individual patches public: ComputeNormal (Sample p) 7! Vector3 Slide (Sample p,Vector3 v) Class Implicit : public DifferentiableSurface private: Gradient (Vector3 x) 7! Vector3 AttractPoint (Vector3 x) 7! Vector3 ; Prevents points from drifting away. ; See <ref> [13] </ref> for details. public: ComputeNormal (Sample p) 7! Vector3 Slide (Sample p,Vector3 v) further comments. More specifically, surfaces are represented by the data structure shown in figure 1.
Reference: [14] <author> R. Dietz, J. Hoschek, and B. Juttler. </author> <title> An algebraic approach to curves and surfaces on the sphere and on other quadrics. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 10(3) </volume> <pages> 211-230, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: In differential geometry, the literature on curves and surfaces in surfaces present various approaches to the problem of describing regions of curved surfaces independently of the surface representation. In some cases, such as cubic spline patches on low degree implicit surfaces <ref> [14] </ref>, it is possible to derive expressions for regions of a surface analytically, but, unfortunately, the range of mathematical tools for analyzing this problem is limited, and existing results are too special case to be practical for our problem: to slide patches freely across general surfaces reliably and at interactive speed.
Reference: [15] <author> Chakib Bennis, Jean-Marc Vezien, Gerard Iglesias, and Andre Gagalowicz. </author> <title> Piecewise surface flattening for non-distorted texture mapping. </title> <editor> In Thomas W. Sederberg, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> volume 25, </volume> <pages> pages 237-246, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Finding a reparameterization such that the metric distortion E (U ) = U Error ( u ; v )dudv is minimal, where u and v denote the partial derivatives and Error is some objective function measuring the distortion within the patch, is a standard problem in graphics research <ref> [15, 7, 16, 11] </ref>. Various functionals have been proposed, weighting the preservation of angles and distances in different ways.
Reference: [16] <author> Matthias Eck et al. </author> <title> Multiresolution analysis of arbitrary meshes. </title> <editor> In Robert Cook, editor, </editor> <booktitle> Proceedings of SIG-GRAPH '95 (Los Angeles, </booktitle> <address> California, </address> <month> August 6-11, </month> <year> 1995), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 173-182. </pages> <publisher> ACM SIGGRAPH, ACM Press, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Finding a reparameterization such that the metric distortion E (U ) = U Error ( u ; v )dudv is minimal, where u and v denote the partial derivatives and Error is some objective function measuring the distortion within the patch, is a standard problem in graphics research <ref> [15, 7, 16, 11] </ref>. Various functionals have been proposed, weighting the preservation of angles and distances in different ways.
Reference: [17] <author> Brian Curless and Marc Levoy. </author> <title> A volumetric method for building complex models from range images. </title> <booktitle> In Proceedings of SIGGRAPH '96 (New Orleans, </booktitle> <address> Louisiana, </address> <month> August 4-9, </month> <year> 1996), </year> <month> august </month> <year> 1996. </year> <title> Page 7 texture. b) Copied texture. c) Interactive handle for rotations. d) Cylindrical patchino. e) Layered operations: texture mapped from one patchino to another. f ) This and the other patchinos were dragged from the back of the dog in less than 10 seconds. g) Warped texture. patchino has been pasted onto the surface at four different locations. </title> <note> Page 8 </note>
Reference-contexts: me to use his excellent parameterization package [11], to Julie Dorsey for lots of inspiration and cool ideas, to Tamara Munzner for kindly helping with an important video tape in the last minutes before a challenging deadline, to Brian Curless for allowing me to use his friendly 3d scanning software <ref> [17] </ref>, and to all of the reviewers for their much appreciated advise.
References-found: 16

