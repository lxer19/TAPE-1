URL: http://www.cs.duke.edu/~jsv/Papers/AGM96.bsp-fat-rectangles.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node64.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: pankaj@cs.duke.edu.  Email: efg@cs.duke.edu.  Email: tmax@cs.duke.edu.  Email: jsv@cs.duke.edu.  
Phone: 27708-0129.  
Title: Binary Space Partitions for Fat Rectangles  
Author: Pankaj K. Agarwal Edward F. Grove T. M. Murali Jeffrey Scott Vitter 
Affiliation: Department of Computer Science, Duke University,  at Duke University.  Department of Computer Science, Duke University,  Department of Computer Science, Duke University,  
Address: Address: Box 90129,  Durham, NC  Address: 946, Tamarack Lane #13, Sunnyvale, CA 94086.  DAAH04-96-1-0013. Address: Box 90129,  Durham, NC 27708-0129.  DAAH04-96-1-0013. Address: Box 90129,  Durham, NC 27708-0129.  
Note: Support was provided by National Science Foundation research grant CCR-93-01259, by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by a National Science Foundation NYI award and matching funds from Xerox Corp, and by a grant from the U.S.-Israeli Binational Science Foundation.  Support was provided by Army Research Office grant DAAH04-93-G-0076. This work was partially done when the author was  This author is affiliated with Brown University. Support was provided in part by National Science Foundation research grant CCR-9522047 and by Army Research Office MURI grant  Support was provided in part by National Science Foundation research grant CCR-9522047, by Army Research Office grant DAAH04-93-G-0076, and by Army Research Office MURI grant  
Abstract: We consider the practical problem of constructing binary space partitions (BSPs) for a set S of n orthogonal, non-intersecting, two-dimensional rectangles in R 3 such that the aspect ratio of each rectangle in S is at most ff, for some constant ff 1. We present an n2 O( p log n ) -time algorithm to build a binary space partition of size n2 O( p log n ) for S. We also show that if m of the n rectangles in S have aspect ratios greater than ff, we can construct a BSP of size n p p p p log n ) time. The constants of proportionality in the big-oh terms are linear in log ff. We extend these results to cases in which the input contains non-orthogonal or intersecting objects. fl A preliminary version of this paper appeared in the Proceedings of the 37th Annual Symposium on Foundations of Computer Science, 1996. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J. Erickson, and L. J. Guibas, </author> <title> Kinetic binary space partitions for intersecting segments and disjoint triangles, </title> <booktitle> Proc. 9th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1998, </year> <pages> pp. 107-116. </pages>
Reference-contexts: Because of its importance, the hidden-surface removal problem has been studied extensively in both the computer graphics and the computational geometry communities <ref> [1, 15, 16] </ref>. One of the conceptually simplest solutions to this problem is the z-buffer algorithm [9, 16]. This algorithm sequentially processes the objects; for each object, it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer.
Reference: [2] <author> P. K. Agarwal, L. J. Guibas, T. M. Murali, and J. S. Vitter, </author> <title> Cylindrical static and kinetic binary space partitions, </title> <booktitle> Proc. 13th ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1997, </year> <pages> pp. 39-48. </pages>
Reference-contexts: Algorithms have also been developed to construct BSPs for moving objects <ref> [2, 13, 23, 31] </ref>. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree. Each node v of B is associated with a convex region R v . <p> In Step 3, if the number of triangles at a node is greater than the number of fat rectangles, we use the algorithm of Agarwal et al. for triangles in R 3 to construct a BSP of size quadratic in the number of triangles in near-quadratic time <ref> [2] </ref>.
Reference: [3] <author> P. K. Agarwal, T. M. Murali, and J. S. Vitter, </author> <title> Practical methods for constructing binary space partitions for orthogonal objects, </title> <booktitle> Proc. 13th ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1997, </year> <pages> pp. 382-384. </pages>
Reference-contexts: Experiments demonstrate that our algorithms work well in practice and construct BSPs of near-linear size when most of the rectangles are fat, and perform better than most known algorithms for constructing BSPs for orthogonal rectangles <ref> [3] </ref>. <p> Our algorithm constructs a BSP for any set of orthogonal rectangles; it is only the analysis of the algorithm that depends on the fatness of the input rectangles. We have implemented a variant of our algorithm and compared its performance to that of other known algorithms <ref> [3] </ref>. Our algorithm is indeed practical: it constructs a BSP of near-linear size on real data sets. It performs better than not only Paterson and Yao's algorithm [26] but also most heuristics described in the literature [5, 17, 30]. We now briefly mention another extension to our algorithms.
Reference: [4] <author> P. K. Agarwal and S. Suri, </author> <title> Surface approximation and geometric partitions, </title> <booktitle> Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 24-33. </pages>
Reference-contexts: The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification <ref> [4] </ref>. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree. Each node v of B is associated with a convex region R v .
Reference: [5] <author> J. M. Airey, </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-space Subdivision and Potentially Visible Set Calculations, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems <ref> [5, 29] </ref>, solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. <p> As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao. <p> Our algorithm is indeed practical: it constructs a BSP of near-linear size on real data sets. It performs better than not only Paterson and Yao's algorithm [26] but also most heuristics described in the literature <ref> [5, 17, 30] </ref>. We now briefly mention another extension to our algorithms.
Reference: [6] <author> C. Ballieux, </author> <title> Motion planning using binary space partitions, </title> <type> Tech. Rep. </type> <institution> inf/src/93-25, Utrecht University, </institution> <year> 1993. </year>
Reference-contexts: The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics <ref> [6] </ref>, and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree.
Reference: [7] <author> A. T. Campbell, </author> <title> Modeling Global Diffuse Illumination for Image Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Sciences, University of Texas, Austin, </institution> <year> 1991. </year>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination <ref> [7] </ref>, shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31].
Reference: [8] <author> T. Cassen, K. R. Subramanian, and Z. Michalewicz, </author> <title> Near-optimal construction of partitioning trees by evolutionary techniques, </title> <booktitle> Proc. of Graphics Interface '95, </booktitle> <year> 1995, </year> <pages> pp. 263-271. </pages>
Reference-contexts: As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao.
Reference: [9] <author> E. Catmull, </author> <title> A Subdivision Algorithm for Computer Display of Curved Surfaces, </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Dept., University of Utah, </institution> <address> Salt Lake City, </address> <year> 1974. </year>
Reference-contexts: Because of its importance, the hidden-surface removal problem has been studied extensively in both the computer graphics and the computational geometry communities [1, 15, 16]. One of the conceptually simplest solutions to this problem is the z-buffer algorithm <ref> [9, 16] </ref>. This algorithm sequentially processes the objects; for each object, it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. A very fast hidden-surface removal algorithm can be obtained by implementing the z-buffer in hardware.
Reference: [10] <author> B. Chazelle, </author> <title> Convex partitions of polyhedra: a lower bound and worst-case optimal algorithm, </title> <journal> SIAM J. Comput., </journal> <volume> 13 (1984), </volume> <pages> 488-507. </pages>
Reference-contexts: More specifically, we can show that there exists a set of n fat triangles in R 3 such that any BSP for these triangles has (n 2 ) size by modifying Chazelle's construction for proving a quadratic lower bound on the size of convex decompositions of polyhedra in R 3 <ref> [10] </ref>. 7 Conclusions In this paper, we have studied the problem of constructing BSPs for orthogonal rectangles under the natural assumption that most rectangles are fat. Our result shows that this assumption allows smaller worst-case size of BSPs.
Reference: [11] <author> N. Chin and S. Feiner, </author> <title> Near real-time shadow generation using BSP trees, </title> <booktitle> Proc. SIG-GRAPH 89, Comput. Graph., </booktitle> <volume> Vol. 23, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1989, </year> <pages> pp. 99-106. </pages>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation <ref> [11, 12] </ref>, visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31].
Reference: [12] <author> N. Chin and S. Feiner, </author> <title> Fast object-precision shadow generation for areal light sources using BSP trees, </title> <booktitle> Proc. 1992 Symp. on Interactive 3D Graphics, </booktitle> <year> 1992, </year> <pages> pp. 21-30. </pages>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation <ref> [11, 12] </ref>, visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31].
Reference: [13] <author> Y. Chrysanthou, </author> <title> Shadow Computation for 3D Interaction and Animation, </title> <type> Ph.D. Thesis, </type> <institution> Queen Mary and Westfield College, University of London, </institution> <year> 1996. </year> <month> 25 </month>
Reference-contexts: Algorithms have also been developed to construct BSPs for moving objects <ref> [2, 13, 23, 31] </ref>. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree. Each node v of B is associated with a convex region R v .
Reference: [14] <author> M. de Berg, </author> <title> Linear size binary space partitions for fat objects, </title> <booktitle> Proc. 3rd Annu. Euro--pean Sympos. Algorithms, Lecture Notes Comput. Sci., </booktitle> <volume> Vol. 979, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 252-263. </pages>
Reference-contexts: R 3 . de Berg considers a weaker model, the case of (three-dimensional) fat polyhedra in R 3 (a polyhedron is said to be fat if its volume is at least a constant fraction of the volume of the smallest sphere enclosing it), although his results extend to higher dimensions <ref> [14] </ref>. One of the main ingredients of our algorithm is the construction of an O (n log n)-size BSP for a set of n fat rectangles that are "long" with respect to a box B, i.e., none of the vertices of the rectangles lie in the interior of B.
Reference: [15] <author> S. E. Dorward, </author> <title> A survey of object-space hidden surface removal, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 (1994), </volume> <pages> 325-362. </pages>
Reference-contexts: Because of its importance, the hidden-surface removal problem has been studied extensively in both the computer graphics and the computational geometry communities <ref> [1, 15, 16] </ref>. One of the conceptually simplest solutions to this problem is the z-buffer algorithm [9, 16]. This algorithm sequentially processes the objects; for each object, it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer.
Reference: [16] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes, </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction How to render a set of opaque or partially transparent objects in R 3 quickly and in a visually realistic way is a fundamental problem in computer graphics <ref> [16, 28] </ref>. A central component of this problem is hidden-surface removal : given a set of objects, a viewpoint, and an image plane, compute the scene visible from the viewpoint as projected onto the image plane. <p> Because of its importance, the hidden-surface removal problem has been studied extensively in both the computer graphics and the computational geometry communities <ref> [1, 15, 16] </ref>. One of the conceptually simplest solutions to this problem is the z-buffer algorithm [9, 16]. This algorithm sequentially processes the objects; for each object, it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. <p> Because of its importance, the hidden-surface removal problem has been studied extensively in both the computer graphics and the computational geometry communities [1, 15, 16]. One of the conceptually simplest solutions to this problem is the z-buffer algorithm <ref> [9, 16] </ref>. This algorithm sequentially processes the objects; for each object, it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. A very fast hidden-surface removal algorithm can be obtained by implementing the z-buffer in hardware. <p> But in graphics-related applications, many common environments like buildings are composed largely of orthogonal rectangles, and non-orthogonal objects are approximated by their orthogonal bounding boxes <ref> [16] </ref>. Paterson and Yao [26] prove that a BSP of size O (n) exists for n non-intersecting, orthogonal segments in R 2 and of size O (n p n) for n non-intersecting, orthogonal rectangles in R 3 .
Reference: [17] <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, </title> <booktitle> Proc. SIGGRAPH 80, Comput. Graph., </booktitle> <volume> Vol. 14, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1980, </year> <pages> pp. 124-133. </pages>
Reference-contexts: One technique to handle both of these problems is the binary space partition (BSP), a data structure introduced by Fuchs et al. <ref> [17] </ref> that is based on work by Schumacker et al. [27]. <p> In general, it is not possible to find a back-to-front order from a given viewpoint for an arbitrary set of objects. By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments <ref> [17] </ref>. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. <p> As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao. <p> Our algorithm is indeed practical: it constructs a BSP of near-linear size on real data sets. It performs better than not only Paterson and Yao's algorithm [26] but also most heuristics described in the literature <ref> [5, 17, 30] </ref>. We now briefly mention another extension to our algorithms.
Reference: [18] <author> C. Mata and J. S. B. Mitchell, </author> <title> Approximation algorithms for geometric tour and network design problems, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 360-369. </pages>
Reference-contexts: The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design <ref> [18] </ref> and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree.
Reference: [19] <author> T. M. Murali and T. A. Funkhouser, </author> <title> Consistent solid and boundary representations from arbitrary polygonal data, </title> <booktitle> Proc. 1997 Symp. on Interactive 3D Graphics, </booktitle> <year> 1997, </year> <pages> pp. 155-162. </pages>
Reference-contexts: The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair <ref> [19] </ref>, ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree.
Reference: [20] <author> B. Naylor, </author> <title> Constructing good partition trees, </title> <booktitle> Proc. Graphics Interface '93, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 181-191. </pages>
Reference-contexts: As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao.
Reference: [21] <author> B. Naylor and W. Thibault, </author> <title> Application of BSP trees to ray-tracing and CSG evaluation, </title> <type> Technical Report GIT-ICS 86/03, </type> <institution> Georgia Institute of Tech., School of Information and Computer Science, </institution> <year> 1986. </year>
Reference-contexts: The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling [22, 24, 30], geometric data repair [19], ray tracing <ref> [21] </ref>, robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree.
Reference: [22] <author> B. F. Naylor, SCULPT: </author> <title> an interactive solid modeling tool, </title> <booktitle> Proc. Graphics Interface '90, </booktitle> <year> 1990, </year> <pages> pp. 138-148. </pages>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling <ref> [22, 24, 30] </ref>, geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31].
Reference: [23] <author> B. F. Naylor, </author> <title> Interactive solid geometry via partitioning trees, </title> <booktitle> Proc. Graphics Interface '92, </booktitle> <year> 1992, </year> <pages> pp. 11-18. </pages>
Reference-contexts: Algorithms have also been developed to construct BSPs for moving objects <ref> [2, 13, 23, 31] </ref>. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree. Each node v of B is associated with a convex region R v .
Reference: [24] <author> B. F. Naylor, J. Amanatides, and W. C. Thibault, </author> <title> Merging BSP trees yields polyhedral set operations, </title> <booktitle> Proc. SIGGRAPH 90, Comput. Graph., </booktitle> <volume> Vol. 24, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1990, </year> <pages> pp. 115-124. </pages>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling <ref> [22, 24, 30] </ref>, geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31].
Reference: [25] <author> M. S. Paterson and F. F. Yao, </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 485-503. </pages>
Reference-contexts: that a BSP of size O (n log n) can be constructed for n disjoint segments in R 2 ; they also show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in R 3 , which is optimal in the worst case <ref> [25] </ref>. But in graphics-related applications, many common environments like buildings are composed largely of orthogonal rectangles, and non-orthogonal objects are approximated by their orthogonal bounding boxes [16]. <p> At each leaf v of the tree T C , recursive invocations of Steps 1 and 3 build a BSP of size O (jS v j log jS v j) in O (jS v j log jS v j) time (see <ref> [25] </ref> for details). Since P v S v jS C j, where the sum is taken over all leaves v of T C , the total size of the BSP constructed inside C is O (jS C j log jS C j). <p> We leave the details to the reader. Paterson and Yao <ref> [25] </ref> use a similar idea to bound the height of BSP they construct for segments in the plane. 6 Extensions In this section we extend the algorithm of Section 4 to the following two cases: (i) some of the input rectangles are thin and (ii) some of the input polygons are
Reference: [26] <author> M. S. Paterson and F. F. Yao, </author> <title> Optimal binary space partitions for orthogonal objects, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 99-113. </pages>
Reference-contexts: But in graphics-related applications, many common environments like buildings are composed largely of orthogonal rectangles, and non-orthogonal objects are approximated by their orthogonal bounding boxes [16]. Paterson and Yao <ref> [26] </ref> prove that a BSP of size O (n) exists for n non-intersecting, orthogonal segments in R 2 and of size O (n p n) for n non-intersecting, orthogonal rectangles in R 3 . <p> If the rectangles in C belong to one class, we use the algorithm of Paterson and Yao for constructing BSPs for orthogonal segments in the plane <ref> [26] </ref> to construct a BSP of linear size for S C . <p> If t (f + k), we use the algorithm by Paterson and Yao for orthogonal rectangles in R 3 to construct a BSP for S B <ref> [26] </ref>. 4. If (f + k) &gt; t, we perform one round of the algorithm described in Section 4, with the difference that we also use thin rectangles to make free cuts. This algorithm is recursively invoked on all the resulting sub-boxes. <p> Recall that there exists a set of m thin rectangles in R 3 for which any BSP has size (m p m) <ref> [26] </ref>. <p> We have implemented a variant of our algorithm and compared its performance to that of other known algorithms [3]. Our algorithm is indeed practical: it constructs a BSP of near-linear size on real data sets. It performs better than not only Paterson and Yao's algorithm <ref> [26] </ref> but also most heuristics described in the literature [5, 17, 30]. We now briefly mention another extension to our algorithms.
Reference: [27] <author> R. A. Schumacker, R. Brand, M. Gilliland, and W. Sharp, </author> <title> Study for applying computer-generated images to visual simulation, </title> <type> Tech. Rep. </type> <institution> AFHRL-TR-69-14, U.S. Air Force Human Resources Laboratory, </institution> <year> 1969. </year> <month> 26 </month>
Reference-contexts: One technique to handle both of these problems is the binary space partition (BSP), a data structure introduced by Fuchs et al. [17] that is based on work by Schumacker et al. <ref> [27] </ref>. Fuchs et al. use the BSP to implement the so-called "painter's algorithm" for hidden-surface removal; the painter's algorithm draws the objects to be displayed on the screen in a back-to-front order (in which no object is occluded by any object earlier in the order).
Reference: [28] <author> I. E. Sutherland, R. F. Sproull, and R. A. Schumacker, </author> <title> A characterization of ten hidden-surface algorithms, </title> <journal> ACM Comput. Surv., </journal> <volume> 6 (1974), </volume> <pages> 1-55. </pages>
Reference-contexts: 1 Introduction How to render a set of opaque or partially transparent objects in R 3 quickly and in a visually realistic way is a fundamental problem in computer graphics <ref> [16, 28] </ref>. A central component of this problem is hidden-surface removal : given a set of objects, a viewpoint, and an image plane, compute the scene visible from the viewpoint as projected onto the image plane.
Reference: [29] <author> S. J. Teller, </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: As a result, other methods have to be developed either to "cull away" a large subset of invisible polygons so as to decrease the rendering load on the graphics pipeline (when models are large; e.g., see <ref> [29] </ref>) or to completely solve the hidden-surface removal problem (when there are very slow or no z-buffers). One technique to handle both of these problems is the binary space partition (BSP), a data structure introduced by Fuchs et al. [17] that is based on work by Schumacker et al. [27]. <p> By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems <ref> [5, 29] </ref>, solid modeling [22, 24, 30], geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. <p> As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao.
Reference: [30] <author> W. C. Thibault and B. F. Naylor, </author> <title> Set operations on polyhedra using binary space partitioning trees, </title> <booktitle> Proc. SIGGRAPH 87, Comput. Graph., </booktitle> <volume> Vol. 21, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1987, </year> <pages> pp. 153-162. </pages>
Reference-contexts: By fragmenting the objects, the BSP ensures that a back-to-front order from any viewpoint can be determined for the fragments [17]. The BSPs has subsequently proven to be versatile, with applications in many other problems|global illumination [7], shadow generation [11, 12], visibility problems [5, 29], solid modeling <ref> [22, 24, 30] </ref>, geometric data repair [19], ray tracing [21], robotics [6], and approximation algorithms for network design [18] and surface simplification [4]. Algorithms have also been developed to construct BSPs for moving objects [2, 13, 23, 31]. <p> As a result, there has been a lot of effort to construct BSPs of small size. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [5, 8, 17, 20, 29, 30] </ref>, provable bounds were first obtained by Paterson and Yao. <p> Our algorithm is indeed practical: it constructs a BSP of near-linear size on real data sets. It performs better than not only Paterson and Yao's algorithm [26] but also most heuristics described in the literature <ref> [5, 17, 30] </ref>. We now briefly mention another extension to our algorithms.
Reference: [31] <author> E. Torres, </author> <title> Optimization of the binary space partition algorithm (BSP) for the visualization of dynamic scenes, Eurographics '90, </title> <publisher> North-Holland, </publisher> <year> 1990, </year> <pages> pp. 507-518. 27 </pages>
Reference-contexts: Algorithms have also been developed to construct BSPs for moving objects <ref> [2, 13, 23, 31] </ref>. Informally, a BSP B for a set of (d 1)-dimensional objects in R d is a binary tree. Each node v of B is associated with a convex region R v .
References-found: 31

