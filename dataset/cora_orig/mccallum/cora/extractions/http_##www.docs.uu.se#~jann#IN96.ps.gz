URL: http://www.docs.uu.se/~jann/IN96.ps.gz
Refering-URL: http://www.csd.uu.se/~jann/
Root-URL: 
Email: jann@DoCS.UU.SE bengt@DoCS.UU.SE  
Title: A Formalization of Service Independent Building Blocks ITU-T standard as procedural blocks, that process a
Author: Jan Nystrom and Bengt Jonsson 
Note: SIBs are presented in the  
Abstract: The objective of this paper is to present an effort to formalize the Service independent building blocks (SIBs) standardized by the ITU-T. The SIBs as an abstraction, but also as concrete building elements, are used today to provide the designers with a coherent framework for building services and service features. This approach also simplifies the implementation, by limiting the number of constructs that must be realize. We hope that by a formalization of the SIBs, we can simplify the analysis of services and service features needed to determine correctness properties and possible feature interactions. The analysis may well be performed through the analysis of the properties of the SIBs and compositions of these, irrespective of the services and service feature they take part in. Furthermore by giving the SIBs a formal interpretation one can achieve a better and more unified understanding of them, thus aiding both designers and implementors. Should one wish to evaluate the SIBs, and perchance compare them with proposed modified versions, a formal description of some sort is very helpful. This paper reports on a work in progress and so far we have seen that the graphical representation together with the parameterization gives a simple, yet clear view of the service. 
Abstract-found: 1
Intro-found: 1
Reference: [Bowen88] <author> Bowen, T.F., </author> <year> 1988: </year> <title> Views on the feature interaction problem, </title> <type> Technical Report TM-ARH-012849, </type> <institution> Bellcore Inc., </institution> <year> 1988. </year>
Reference-contexts: Section 4 presents our understanding of how to formalize SIBs, and Section 5 gives an overview of their formalization in Z, and to some extend in coloured petri nets. Section 6, finally contains conclusions and directions for future work. 1 See [Duran92] for an overlook of IN. 2 See <ref> [Bowen88] </ref> on feature interactions. 3 See [Mauw91] for more information on PSF. 2 Intelligent Networks The ITU-T standard for Intelligent Networks (IN) 4 is intended as an architectural model for the creation and provision of telecommunication services.
Reference: [Duke91] <author> Duke, R., King, P., Rose, G., Smith, G., </author> <title> 1991:The Object-Z Specification Language: </title> <type> Version 1, Technical report No.91-1, </type> <institution> Software Verification Center, Department of Computer Science, University of Queensland, Australia, </institution> <year> 1991. </year>
Reference-contexts: !=error 2 ] Below in Figure 4 is shown a version of Figure 2 of Automatic alternative billing service, where only the Verify SIBs are presented and the names of the control defined above is written out. 5.3 Other formalisms Had we but found Objective-Z, an object-oriented extension to Z <ref> [Smith94, Duke91] </ref>, to be mature enough it would have been the formal language of our choice rather than Z. An interesting alternative to Z would be the formalism presented by Van Hee [Hee94], which combines Coloured Petri nets and Z (really a subset of Z).
Reference: [Duran92] <author> Duran, J.M., Visser, J., </author> <title> 1992:International Starndards for Intelligent Networks, </title> <journal> IEEE Communications Magazine, </journal> <month> Feb </month> <year> 1992. </year>
Reference-contexts: Section 4 presents our understanding of how to formalize SIBs, and Section 5 gives an overview of their formalization in Z, and to some extend in coloured petri nets. Section 6, finally contains conclusions and directions for future work. 1 See <ref> [Duran92] </ref> for an overlook of IN. 2 See [Bowen88] on feature interactions. 3 See [Mauw91] for more information on PSF. 2 Intelligent Networks The ITU-T standard for Intelligent Networks (IN) 4 is intended as an architectural model for the creation and provision of telecommunication services.
Reference: [Hee94] <author> Van Hee, K.M., </author> <title> 1994:Information systems engineering: A formal approach, </title> <publisher> Press Syndicate of the University of Cambridge, </publisher> <address> The Pitt Building, Trumping Street, Cambridge CB2 1RP. </address>
Reference-contexts: An interesting alternative to Z would be the formalism presented by Van Hee <ref> [Hee94] </ref>, which combines Coloured Petri nets and Z (really a subset of Z). In this formalism the design of services could be made graphically with a given semantics. Furthermore the object and agent frameworks supports better structuring of the specifications, in particular the specification of the environment.
Reference: [Klusener91] <author> Klusener, A.S., Van Vlijmen, B., Van Waveren, A., </author> <year> 1991: </year> <title> Service Independent Building Blocks-I; Concepts, Examples and Formal Specifications, </title> <type> Report CS-R9326, </type> <institution> Stichting Mathematisch Centrum, </institution> <address> P.O. Box 4079, 1009 AB Amsterdam, The Netherlands, </address> <month> Apr </month> <year> 1993. </year>
Reference-contexts: We have chosen Z which gives a good well known formal base, but this paper also gives some indication of how coloured petri nets could be used for that purpose. We have looked into the work of Klusener & al <ref> [Klusener91, Verweij93] </ref> which formalizes the SIBs using PSF 3 . This gave an excellent starting point, but their work is process oriented and much more concrete, whereas we strive to get a declarative reading at a more abstract level.
Reference: [Mauw91] <author> Mauw, S., </author> <year> 1991: </year> <title> PSF, A Process Specification Formalism, </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: Section 6, finally contains conclusions and directions for future work. 1 See [Duran92] for an overlook of IN. 2 See [Bowen88] on feature interactions. 3 See <ref> [Mauw91] </ref> for more information on PSF. 2 Intelligent Networks The ITU-T standard for Intelligent Networks (IN) 4 is intended as an architectural model for the creation and provision of telecommunication services.
Reference: [Nicholls95] <author> Nicholls, J. </author> <year> 1995: </year> <title> Z base standard: </title> <type> Version 1.2, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <month> Sep </month> <year> 1995. </year>
Reference-contexts: The SIB chains executed in response to the IN calls may cause the BCSM to change state or the queue to be rearranged. 5 Formalization As formalism we have chosen Z <ref> [Nicholls95, Spivey87] </ref>, which we found afforded sufficient structure.
Reference: [Q.1204] <author> ITU-T, </author> <year> 1993: </year> <title> Intelligent network Distributed functional plane architecture, General recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference: [Q.1211] <author> ITU-T, </author> <year> 1993: </year> <title> Introduction to Intelligent network Capability set 1, Gen--eral recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference: [Q.1213] <author> ITU-T, </author> <year> 1993: </year> <title> Global functional plane for intelligent network CS-1, General recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference-contexts: In order that the CS-1 description should not hem in further development it has been made deliberately vague; this is of course a problem when trying to formalize the notions therein. One example of underspecification is the Charge SIB which is defined in <ref> [Q.1213] </ref> as: Determine special charging treatment for the call, where special refers to any charging in addition to that normally performed by the basic process. <p> In the example above one has to identify some typical cases and yet try to be general enough in the description to handle most sensible cases that may arise. But it is obviously impossible to capture the <ref> [Q.1213] </ref> definition entirely. Some help to identify typical cases has been gained by studying the description of the Charge SIB at the level of the distributed functional plane in [Q.1214]. As an example of overspecification with respect to analysis, we find that the definition of the Verify SIB given in [Q.1213] <p> <ref> [Q.1213] </ref> definition entirely. Some help to identify typical cases has been gained by studying the description of the Charge SIB at the level of the distributed functional plane in [Q.1214]. As an example of overspecification with respect to analysis, we find that the definition of the Verify SIB given in [Q.1213] gives an explicit coding of the format to be checked against. For purposes of analysis, such an explicit coding is unnecessary and even a source of complication. We have in this case chosen to limit the model of SIBs to their essential functionality. <p> This model is rather coarse since the intentions are according to <ref> [Q.1213] </ref>: It is not necessary or intended to fully model the Basic Call Process on the Global Functional Plane in CS-1, but rather to insure that the functionality of the Basic Call Process that is required on the Global Functional Plane in conjunction with SIBs be available to fully support CS-1
Reference: [Q.1214] <author> ITU-T, </author> <year> 1993: </year> <title> Distributed functional plane for intelligent network CS-1, General recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference-contexts: But it is obviously impossible to capture the [Q.1213] definition entirely. Some help to identify typical cases has been gained by studying the description of the Charge SIB at the level of the distributed functional plane in <ref> [Q.1214] </ref>. As an example of overspecification with respect to analysis, we find that the definition of the Verify SIB given in [Q.1213] gives an explicit coding of the format to be checked against. For purposes of analysis, such an explicit coding is unnecessary and even a source of complication. <p> An example of the interpretation of the Verify SIB is given in Section 3.4 below, and of the use in the Figure 2. Modeling the environment we have looked at the Distributed functional plane <ref> [Q.1214] </ref> wherein is described many of the underlying functionalities that the SIBs rely on. Much of the material found in [Q.1214] is far too detailed and concerns the issue of distribution which we have chosen to ignore altogether. <p> Modeling the environment we have looked at the Distributed functional plane <ref> [Q.1214] </ref> wherein is described many of the underlying functionalities that the SIBs rely on. Much of the material found in [Q.1214] is far too detailed and concerns the issue of distribution which we have chosen to ignore altogether. <p> This rather limited view of the BCP SIB is not sufficient when trying to model the SIBs. We have used as a starting point the Basic call state model BCSM found in <ref> [Q.1214] </ref>. The model is partitioned into a originating and terminating depending on what part of the call that is modeled. A picture of the originating BCSM is given in Figure 3. The BCSM consists of Points in call (PICs) which reflects normal call handling. <p> This environment contains the BCP SIB, which embodies all the non-IN call control, as well as other underlying functionalities such as voice mail boxes and global databases, which interact with the SIBs. The BCP SIB is formalized as two transition models from <ref> [Q.1214] </ref>: the originating and terminating Basic Call State Models (BCSMs, of which the originating part may be seen above in Figure 3). These transition models have so called Detection points (DPs) which are points in the execution of a call at which the need for IN functionality may be detected.
Reference: [Q.1215] <author> ITU-T, </author> <year> 1993: </year> <title> Physical plane for intelligent network CS-1, General recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference: [Q.1218] <author> ITU-T, </author> <year> 1993: </year> <title> Interface recommendation for intelligent network CS-1, General recommendations on telephone switching and signaling, Intelligent network, </title> <month> Mar </month> <year> 1993. </year>
Reference: [Smith94] <author> Smith, G., </author> <year> 1994: </year> <title> The Object-Z Specification Language: </title> <type> Version 1, Technical report No.94-8, </type> <institution> Software Verification Center, Department of Computer Science, University of Queensland, Australia, </institution> <month> Dec </month> <year> 1994. </year>
Reference-contexts: !=error 2 ] Below in Figure 4 is shown a version of Figure 2 of Automatic alternative billing service, where only the Verify SIBs are presented and the names of the control defined above is written out. 5.3 Other formalisms Had we but found Objective-Z, an object-oriented extension to Z <ref> [Smith94, Duke91] </ref>, to be mature enough it would have been the formal language of our choice rather than Z. An interesting alternative to Z would be the formalism presented by Van Hee [Hee94], which combines Coloured Petri nets and Z (really a subset of Z).
Reference: [Spivey87] <author> Spivey, J.M., </author> <year> 1987: </year> <title> The Z Notation : a reference manual, </title> <publisher> Prentice Hall International Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hampstead, Hertfordshire, HP2 4RG, </address> <year> 1989. </year>
Reference-contexts: The SIB chains executed in response to the IN calls may cause the BCSM to change state or the queue to be rearranged. 5 Formalization As formalism we have chosen Z <ref> [Nicholls95, Spivey87] </ref>, which we found afforded sufficient structure.
Reference: [Verweij93] <author> Verweij, H., </author> <year> 1993: </year> <title> Service Independent Building Blocks II (DRAFT), </title> <note> Unpublished report|private communications, </note> <institution> University of Amsterdam, Programming Research Group, </institution> <address> P.O. Box 41882, 1009 DB Amsterdam, The Netherlands, </address> <month> Jun </month> <year> 1993. </year>
Reference-contexts: We have chosen Z which gives a good well known formal base, but this paper also gives some indication of how coloured petri nets could be used for that purpose. We have looked into the work of Klusener & al <ref> [Klusener91, Verweij93] </ref> which formalizes the SIBs using PSF 3 . This gave an excellent starting point, but their work is process oriented and much more concrete, whereas we strive to get a declarative reading at a more abstract level.
References-found: 16

