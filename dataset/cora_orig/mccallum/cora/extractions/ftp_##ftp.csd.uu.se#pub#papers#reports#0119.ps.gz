URL: ftp://ftp.csd.uu.se/pub/papers/reports/0119.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Title: Confluence A Fixpoint Semantics for Concurrent Constraint Programming  
Author: Sven-Olof Nystrom 
Address: 311, S-751 05 Uppsala, Sweden  
Affiliation: Box  
Note: Oracles and  
Abstract: UPMAIL Technical Report No. 119 November 13, 1995 ISSN 1100-0686 Abstract We consider the problem of giving a fixpoint semantics for a parallel and non-deterministic programming language with fairness and arbitrary recursion, in which both finite and infinite computations are taken into account. We first define an operational semantics based on oracles (finite and infinite strings over a countable alphabet), in which the non-deterministic choices are determined by the oracle. The oracle-based operational semantics associates an oracle with each computation, conversely there is for each oracle a set (possibly empty) of computations. We show that the oracle semantics satisfies certain confluence properties, which are to be later used in the correctness proof of the fixpoint semantics. We give a fixpoint semantics for the language in which the semantics of an agent is given as a function from oracles to a pair consisting of a closure operator over the domain of constraints and a set of conditions which describe when it is legal to select a particular branch. It is shown that this semantic model is sufficient to precisely determine the set of fair traces of an agent. The fixpoint semantics is, however, not fully abstract since the different behaviours of an agent are related to different oracles in a way that has nothing to do with the external behaviour of the agent. Also, the oracle-based fixpoint semantics dissects the behaviour of an agent into different branches in a way that depends on the syntactic structure of the program. Finally we give a category-theoretic fixpoint semantics. This semantics is obtained from the oracle-based fixpoint semantic by removing information about the relationship between behaviour and oracles.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Samson Abramsky. </author> <title> Semantic foundations of applicative multiprogramming. </title> <booktitle> In Proc. ICALP '83, volume 154 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-14. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Thus the resulting computation is 1 Apt and Plotkin [2], and Abramsky <ref> [1] </ref> presented results which both imply that a continuous fully abstract fixpoint semantics is not possible for concurrent constraint programming. <p> If the formulas of our language are inequalities such as the ones mentioned above, and we have one variable, X, the resulting constraint system will contain the elements in the 6 diagram below, in which the elements are totally ordered by v. &gt; F <ref> [X &gt; 1] </ref> ? This is of course closely related to the construction of non-standard models of arithmetic. t u Example 3.4 Consider the term model mentioned in a previous example. <p> Thus this negative result is of a different nature than other published negative results on the existence of fully abstract fix-point semantics <ref> [1, 2] </ref> since they considered non-deterministic languages. 7.1 Hiding Because of the negative result above we turn to a less abstract domain in which the local state of a computation is included in the semantics. <p> This powerdomain construction has previously been used by Abram-sky <ref> [1] </ref>, Panangaden and Russel [17], and Nystrom and Jonsson [15] to give the fixpoint semantics of various forms of nondeterministic programming languages. Lehmann's construction relies on a special type of categories called !-categories.
Reference: [2] <author> K. R. Apt and G. D. Plotkin. </author> <title> Coutable nondeterminism and random assignment. </title> <journal> Journal of the ACM, </journal> <volume> 33(4) </volume> <pages> 724-767, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: Thus the resulting computation is 1 Apt and Plotkin <ref> [2] </ref>, and Abramsky [1] presented results which both imply that a continuous fully abstract fixpoint semantics is not possible for concurrent constraint programming. <p> Thus this negative result is of a different nature than other published negative results on the existence of fully abstract fix-point semantics <ref> [1, 2] </ref> since they considered non-deterministic languages. 7.1 Hiding Because of the negative result above we turn to a less abstract domain in which the local state of a computation is included in the semantics.
Reference: [3] <author> J. M. Cadiou and J. J. Levy. </author> <title> Mechanizable proofs about parallel processes. </title> <booktitle> In Switching and Automata Theory Symposium, </booktitle> <volume> volume 14, </volume> <pages> pages 34-48. </pages> <publisher> IEEE, </publisher> <year> 1973. </year>
Reference-contexts: One of the languages under consideration is a non-deterministic language which allows arbitrary recursion. However, only finite computations are considered. The use of oracles to give the semantics of a non-deterministic concurrent language has been considered by a number of authors. For example, Cadiou and Levy <ref> [3] </ref> gave the operational semantics of a parallel imperative language in which the scheduling of processes was determined by an oracle. Milner [12] gave an operational model of a non-deterministic language in which oracles were used to determine non-deterministic choices.
Reference: [4] <editor> Leon Henkin, J. Donald Monk, and Alfred Tarski. Cylindric Algebras, </editor> <volume> volume 1. </volume> <publisher> North-Holland, </publisher> <year> 1971. </year>
Reference-contexts: Given this, we use ideal completion to derive the desired domain. The resulting structure satisfies all axioms of cylindric algebra <ref> [4] </ref> that do not involve negation. 4 In contrast, Saraswat et al. [19] choose an axiomatic approach, based on axioms from cylindric algebra and techniques from Scott's information systems [20] to specify the properties of a constraint system. <p> It should not come as a surprise that the operations defined over the domain of constraints (existential quantification, equality, and least upper bound, i.e., conjunction) satisfy a number of algebraic properties. These properties corresponds largely to the axioms of cylindric algebra <ref> [4] </ref>. Saraswat et al. [19] use the axioms of cylindric algebra to give an axiomatic definition of constraint systems. Proposition 3.5 Suppose we have a pre-constraint system hF; Var; j=; Ci, and that hU; vi is the corresponding domain of constraints.
Reference: [5] <author> Radha Jagadeesan, Keshav Pingali, and Prakash Panangaden. </author> <title> A fully abstract semantics for a functional programming language with logic variables. </title> <journal> ACM 50 Trans. on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 577-625, </pages> <month> October </month> <year> 1991. </year> <note> Also in Proceedings of the IEEE Symposium on Logic in Computer Science 1989 </note> . 
Reference-contexts: In this section we introduce the concept and show some of its properties. The closure operators capture important aspects of computations in constraint programming languages. One early definition of the concept of closure operators is by Moore [13, pages 53-80]. Jagadeesan, Panangaden and Pingali <ref> [5] </ref> showed how a concurrent process operating over a domain that allows `logic variables', i.e., place holders for values that are to be defined later, could be viewed as a closure operator. This idea was explored in a concurrent constraint programming setting by Saraswat, Rinard, and Panangaden [19].
Reference: [6] <author> Peter Kearney and John Staples. </author> <title> An extensional fixed-point semantics for nondeterministic data flow. </title> <journal> Theoretical Computer Science, </journal> <volume> 91 </volume> <pages> 129-179, </pages> <year> 1991. </year>
Reference-contexts: Milner [12] gave an operational model of a non-deterministic language in which oracles were used to determine non-deterministic choices. Keller [7], Kearney and Staples <ref> [6] </ref> and Russel [18] have presented fixpoint semantics of various non-deterministic languages in which choices are determined by an oracle.
Reference: [7] <author> Robert M. Keller. </author> <title> Denotational models for parallel programs with indeterminate operators. </title> <editor> In Neuhold, editor, </editor> <booktitle> Formal Descriptions of Programming Concepts, </booktitle> <pages> pages 337-366. </pages> <publisher> North-Holland, </publisher> <year> 1978. </year>
Reference-contexts: For example, Cadiou and Levy [3] gave the operational semantics of a parallel imperative language in which the scheduling of processes was determined by an oracle. Milner [12] gave an operational model of a non-deterministic language in which oracles were used to determine non-deterministic choices. Keller <ref> [7] </ref>, Kearney and Staples [6] and Russel [18] have presented fixpoint semantics of various non-deterministic languages in which choices are determined by an oracle.
Reference: [8] <author> Marta Kwiatkowska. </author> <title> Infinite behaviour and fairness in concurrent constraint programming. In Semantics: </title> <booktitle> Foundations and Applications, volume 666 of Lecture Notes in Computer Science, </booktitle> <pages> pages 348-383. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: There is some similarity between our approach and Kwiatkowska's construction <ref> [8] </ref>, which also uses ideal completion to obtain a constraint system that is closed under infinite limits.
Reference: [9] <author> Daniel J. Lehmann. </author> <title> Categories for fixed-point semantics. </title> <booktitle> In 17th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 122-126, </pages> <year> 1976. </year>
Reference-contexts: By Theorem 6.11 the two computations can be combined into a fair computation with functionality at least as strong as fn t and limit equal to lim t. t u 9 Category-theoretic semantics In this section, we will use a powerdomain construction by Lehmann <ref> [9, 10] </ref> to devise a fixpoint semantics which is more abstract than the oracle-based fixpoint semantics. This powerdomain construction has previously been used by Abram-sky [1], Panangaden and Russel [17], and Nystrom and Jonsson [15] to give the fixpoint semantics of various forms of nondeterministic programming languages.
Reference: [10] <author> Daniel J. Lehmann. </author> <title> Categories for Fixed-point Semantics. </title> <type> PhD thesis, </type> <institution> Hebrew University of Jerusalem, </institution> <year> 1976. </year>
Reference-contexts: By Theorem 6.11 the two computations can be combined into a fair computation with functionality at least as strong as fn t and limit equal to lim t. t u 9 Category-theoretic semantics In this section, we will use a powerdomain construction by Lehmann <ref> [9, 10] </ref> to devise a fixpoint semantics which is more abstract than the oracle-based fixpoint semantics. This powerdomain construction has previously been used by Abram-sky [1], Panangaden and Russel [17], and Nystrom and Jonsson [15] to give the fixpoint semantics of various forms of nondeterministic programming languages. <p> We will also need the following result regarding the construction of !-functors, which is by Lehmann <ref> [10] </ref>. Given a continuous function f : D 1 ! D 2 , define the operation ^ f as follows.
Reference: [11] <author> M. J. Maher. </author> <title> Logic semantics for a class of committed-choice programs. </title> <booktitle> In 4th International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Concurrent constraint programming (ccp) <ref> [11, 19] </ref> can be seen as a generalised model of asynchronous concurrent computation. In ccp, the processes record information in a store. No information is ever removed from the store, and the store will thus grow monotonously throughout the computation.
Reference: [12] <author> Robin Milner. </author> <title> Processes: A mathematical model of computing agents. </title> <booktitle> In in Logic Colloquium 1973, </booktitle> <pages> pages 157-173. </pages> <publisher> North-Holland, </publisher> <year> 1973. </year>
Reference-contexts: The use of oracles to give the semantics of a non-deterministic concurrent language has been considered by a number of authors. For example, Cadiou and Levy [3] gave the operational semantics of a parallel imperative language in which the scheduling of processes was determined by an oracle. Milner <ref> [12] </ref> gave an operational model of a non-deterministic language in which oracles were used to determine non-deterministic choices. Keller [7], Kearney and Staples [6] and Russel [18] have presented fixpoint semantics of various non-deterministic languages in which choices are determined by an oracle.
Reference: [13] <author> Eliakim Hastings Moore. </author> <title> Introduction to a form of general analysis. </title> <booktitle> In The New Haven Mathematical Colloquium, </booktitle> <pages> pages 1-150. </pages> <publisher> Yale University Press, </publisher> <year> 1910. </year>
Reference-contexts: In this section we introduce the concept and show some of its properties. The closure operators capture important aspects of computations in constraint programming languages. One early definition of the concept of closure operators is by Moore <ref> [13, pages 53-80] </ref>. Jagadeesan, Panangaden and Pingali [5] showed how a concurrent process operating over a domain that allows `logic variables', i.e., place holders for values that are to be defined later, could be viewed as a closure operator.
Reference: [14] <author> Sven-Olof Nystrom. </author> <title> On non-determinism, infinite computations, fixpoint semantics and full abstraction. </title> <type> Technical Report 103, </type> <institution> Uppsala University, Comp. Sci. Dept., </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Thus the resulting computation is 1 Apt and Plotkin [2], and Abramsky [1] presented results which both imply that a continuous fully abstract fixpoint semantics is not possible for concurrent constraint programming. The author <ref> [14] </ref> showed that it is not possible to give a fully abstract fixpoint semantics for a programming language which allows recursion, non-determinism and infinite output streams even if the semantics is not required to be continuous. 2 essentially deterministic and can be seen as a closure operator over the domain of
Reference: [15] <author> Sven-Olof Nystrom and Bengt Jonsson. </author> <title> Indeterminate concurrent constraint programming: a fixpoint semantics for non-terminating computations. </title> <booktitle> In Proceedings of the 1993 International Logic Programming Symposium, </booktitle> <pages> pages 335-352. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: This powerdomain construction has previously been used by Abram-sky [1], Panangaden and Russel [17], and Nystrom and Jonsson <ref> [15] </ref> to give the fixpoint semantics of various forms of nondeterministic programming languages. Lehmann's construction relies on a special type of categories called !-categories. Definition 9.1 An !-category is a category which has an initial object and in which all !-chains have colimits.
Reference: [16] <author> Sven-Olof Nystrom and Bengt Jonsson. </author> <title> A fully abstract compositional semantics for concurrent constraint programming with infinite computations. </title> <note> Submitted for publication, </note> <month> January </month> <year> 1995. </year>
Reference-contexts: Each trace is an infinite sequence of environments together with information on which steps in the computation are computation steps and which 13 are input steps. Since the trace semantics records interaction between processes one would expect the trace semantics to be compositional, and this is indeed the case <ref> [16] </ref>. The third semantics, the abstract semantics, is based on the trace semantics. Note that the trace semantics is not fully abstract, since, for example, the trace semantics records the number of steps that is required for an agent to produce a result. <p> The abstract semantics is defined through a simple closure operation over sets of traces, and has been shown to be fully abstract and compositional <ref> [16] </ref>. 5.1 Results The result semantics is given by a function R : AGENT fi ORACLE ! K (U ) ! -(U ) which gives the set of all possible results that can be computed given a program , an agent A, and an initial environment c.
Reference: [17] <author> Prakash Panangaden and James R. Russell. </author> <title> A category-theoretic semantics for unbounded nondeterminacy. </title> <booktitle> In Mathematical Foundations of Programming Semantics, volume 442 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: This powerdomain construction has previously been used by Abram-sky [1], Panangaden and Russel <ref> [17] </ref>, and Nystrom and Jonsson [15] to give the fixpoint semantics of various forms of nondeterministic programming languages. Lehmann's construction relies on a special type of categories called !-categories. Definition 9.1 An !-category is a category which has an initial object and in which all !-chains have colimits.
Reference: [18] <author> James R. Russell. </author> <title> On oraclizable networks and Kahn's principle. </title> <booktitle> In Proc. 17 th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 320-328, </pages> <year> 1990. </year> <month> 51 </month>
Reference-contexts: Milner [12] gave an operational model of a non-deterministic language in which oracles were used to determine non-deterministic choices. Keller [7], Kearney and Staples [6] and Russel <ref> [18] </ref> have presented fixpoint semantics of various non-deterministic languages in which choices are determined by an oracle.
Reference: [19] <author> Vijay A. Saraswat, Martin Rinard, and Prakash Panangaden. </author> <title> Semantic foun-dations of concurrent constraint programming. </title> <booktitle> In Proc. 18 th ACM Symp. on Principles of Programming Languages, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Concurrent constraint programming (ccp) <ref> [11, 19] </ref> can be seen as a generalised model of asynchronous concurrent computation. In ccp, the processes record information in a store. No information is ever removed from the store, and the store will thus grow monotonously throughout the computation. <p> So one component of the semantics of an agent, for a given oracle, is a set of conditions, i.e., a window. Since an agent with a given oracle is essentially deterministic it follows that we can use the techniques described by Saraswat, Rinard and Panangaden <ref> [19] </ref> and give computational behaviour as a closure operator (a function over constraints which satisfies some additional properties). The fixpoint semantics becomes quite simple, even though both fairness and infinite computations are taken into account. 1.1 Related Work Saraswat, Rinard and Panangaden [19] give fully abstract fixpoint semantics for various types <p> the techniques described by Saraswat, Rinard and Panangaden <ref> [19] </ref> and give computational behaviour as a closure operator (a function over constraints which satisfies some additional properties). The fixpoint semantics becomes quite simple, even though both fairness and infinite computations are taken into account. 1.1 Related Work Saraswat, Rinard and Panangaden [19] give fully abstract fixpoint semantics for various types of concurrent constraint programming languages. One of the languages under consideration is a non-deterministic language which allows arbitrary recursion. However, only finite computations are considered. <p> fully abstract fixpoint semantics for a programming language which allows recursion, non-determinism and infinite output streams even if the semantics is not required to be continuous. 2 essentially deterministic and can be seen as a closure operator over the domain of constraints, in the manner described by Saraswat et al. <ref> [19] </ref>. However, this is not sufficient. Consider an agent (X = 1 ) Z = 3 [] Y = 2 ) W = 5); The agent cannot select the first branch unless we know that the constraint X = 1 will hold eventually. <p> Given this, we use ideal completion to derive the desired domain. The resulting structure satisfies all axioms of cylindric algebra [4] that do not involve negation. 4 In contrast, Saraswat et al. <ref> [19] </ref> choose an axiomatic approach, based on axioms from cylindric algebra and techniques from Scott's information systems [20] to specify the properties of a constraint system. <p> It should not come as a surprise that the operations defined over the domain of constraints (existential quantification, equality, and least upper bound, i.e., conjunction) satisfy a number of algebraic properties. These properties corresponds largely to the axioms of cylindric algebra [4]. Saraswat et al. <ref> [19] </ref> use the axioms of cylindric algebra to give an axiomatic definition of constraint systems. Proposition 3.5 Suppose we have a pre-constraint system hF; Var; j=; Ci, and that hU; vi is the corresponding domain of constraints. <p> This idea was explored in a concurrent constraint programming setting by Saraswat, Rinard, and Panangaden <ref> [19] </ref>.
Reference: [20] <author> Dana S. Scott. </author> <title> Domains for denotational semantics. </title> <booktitle> In ICALP'82, number 140 in Lecture Notes in Computer Science, </booktitle> <pages> pages 577-613. </pages> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Given this, we use ideal completion to derive the desired domain. The resulting structure satisfies all axioms of cylindric algebra [4] that do not involve negation. 4 In contrast, Saraswat et al. [19] choose an axiomatic approach, based on axioms from cylindric algebra and techniques from Scott's information systems <ref> [20] </ref> to specify the properties of a constraint system. There is some similarity between our approach and Kwiatkowska's construction [8], which also uses ideal completion to obtain a constraint system that is closed under infinite limits.
References-found: 20

