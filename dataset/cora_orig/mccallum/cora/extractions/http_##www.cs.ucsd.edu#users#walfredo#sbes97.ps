URL: http://www.cs.ucsd.edu/users/walfredo/sbes97.ps
Refering-URL: http://www.cs.ucsd.edu/users/walfredo/resume.html
Root-URL: http://www.cs.ucsd.edu
Title: Bouncer: A Robust and Flexible License Management Service for Avoiding Illegal Use of Software  
Author:  Francisco Vilar Brasileiro , Trcio Rodrigues Bezerra Walfredo Costa Cirne Filho J. Anto Beltro Moura Laboratrio de Sistemas Distribudos LSD Av. Aprgio Veloso, Escola Tcnica Federal de Alagoas ETEFAL Coordenadoria de Eletrnica e Processamento de Dados Av. Baro de Atalaia, S/N, Poo .-, Macei, Alagoas 
Keyword: and phrases license management, fault-tolerance, commercial applications production process, software developing tools.  
Note: On leave at University of California at San Diego developing a PhD program supported by CAPES (grant BEX2428/95-4)  
Address: Paraba  
Affiliation: Universidade Federal da Paraba UFPB/Campus II Centro de Cincias e Tecnologia CCT Departamento de Sistemas e Computao DSC  58.109-970, Campina Grande,  
Email: fubica@dsc.ufpb.br trb@fapeal.br  walfredo@dsc.ufpb.br antao@dsc.ufpb.br  
Phone: 1  
Web: http://www.dsc.ufpb.br/~lsd  
Abstract: The phases of getting a software ready and introducing it into a target-market are seldom emphasised on traditional software engineering process models. Nevertheless, these phases are of the utmost importance in the production process of many commercial applications. Within a number of activities carried out on these phases, protection of intellectual property is a key issue that must be tackled. In this paper we present a license management service that can be used to avoid illegal utilisation of applications, specially those executed over a network. The unique architectural model of our license management tool confers on it important characteristics such as robustness and flexibility, not present on other solutions currently available. We compare our approach with others and show that ours is more suitable for a wider range of applications. 
Abstract-found: 1
Intro-found: 1
Reference: [Alladin 97] <institution> Alladin Knowledge Systems, Inc. HASP Home Page, </institution> <note> http://www.aks.com/, 1997. </note>
Reference-contexts: Thus, there are those which use software signatures, commonly found protecting applications executing on workstation-based systems (e.g. FlexLM [FlexLM 96, FlexTO 96], lanLM [lanLM 95], iFOR/LS [Gradient 95]), and those normally used to protect applications executing on PC-based systems, which adopt hardware devices (e.g. HASP <ref> [Alladin 97] </ref>, SentinelLM [Rainbow 97]). In the discussion that follows we use the term software LMSs to refer to LMSs using software signature schemes, and hardware LMS to refer to LMSs using the hardware device approach. Functionality The main functionality of an LMS is to protect software against illegal utilisation.
Reference: [Aoyama 93] <author> M. Aoyama, </author> <title> Concurrent Development Process Model, </title> <journal> IEEE Software, </journal> <volume> Vol. 10, </volume> <editor> N. </editor> <volume> 4, </volume> <pages> pp. 46-55, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: 1. Introduction Software engineering has evolved immensely throughout the past two decades and there are a number of software developing models that have been used successfully to produce high quality reliable applications <ref> [Aoyama 93, Basili et al. 95] </ref>. However, it has also been observed that a large number of systems has not been able to attain the same level of success using these models [MMM 95].
Reference: [Basili et al. 91] <author> V. Basili et al., </author> <title> SELs Software Process-Improvement Program, </title> <journal> IEEE Software, </journal> <volume> Vol. 12, </volume> <editor> N. </editor> <volume> 6, </volume> <pages> pp 83-87, </pages> <month> November </month> <year> 1995. </year>
Reference: [BBC 97] <editor> T.R. Bezerra, F.V. Brasileiro, and W.C. Cirne Filho, Bouncer Um Servio Distribudo e Tolerante a Faltas para Controle de Licenas de Software, </editor> <booktitle> (in Portuguese), submitted to the VII Symposium on Fault-Tolerant Computers, </booktitle> <month> March </month> <year> 1997. </year>
Reference-contexts: A more detailed description of the protocol executed by clients and servers implementing a Bouncer LMS can be found in <ref> [BBC 97] </ref>. Several licensing policies can be implemented depending on the way servers are tied up to hosts. In its simplest protection form no ties are enforced. Applications and servers can execute on any host in the network, however only a limited number of applications can execute concurrently. <p> The group of local servers that collectively implements the license server executes a membership control protocol whose main objective is to atomically detect server failures <ref> [BBC 97] </ref>. Thus, when the server fails, two possibilities may arise. In the first situation, all other functioning servers will detect that a server has failed. The only action that they take is to release any license held by applications executing at the host where the faulty server was executing.
Reference: [BMJH 97] <author> T. Bruckhaus, N.H. Madhavji, I. Janssen, and J. Henshaw, </author> <title> The Impact of Tools on Software Productivity, </title> <journal> IEEE Software, </journal> <volume> Vol. 13, </volume> <editor> N. </editor> <volume> 5, </volume> <pages> pp. 29-38, </pages> <month> September </month> <year> 1996. </year>
Reference: [Casey 97] <author> L. Casey, </author> <title> Network License management Solutions, Rainbow Technologies, http://www.rnbo.com/SENTINELLM/Article.html, 1997. [lan 95] lan Computer Group. Executive Brief of License Management, http://www.elan.com/ebintro.html, 1995. [lanLM 95] lan Computer Group. lan License Manager Technical Overview, </title> <note> http://www.elan.com/elanlm.html, 1995. </note>
Reference-contexts: The facility with which resources can be shared within a LAN, makes software piracy not only easy to be achieved by dishonest users, but also difficult to be avoided by honest ones. Within this framework license management services (LMS) emerged as a solution for software protection <ref> [Casey 97] </ref>. Software licenses represent the rights and the utilisation rules for a software product, as they have been agreed by a particular software publisher and a customer that acquires its product. An LMS guaranties that software utilisation complies with the agreement represented by its license. <p> executing, a new server is restarted and a license revalidation request is issued; B_Monit () : this function requests information about applications being protected by the license server (e.g. host where they execute, number of licenses used, number of licenses available, etc.); it is used to implement license metering tools <ref> [Casey 97] </ref>. Alternatively, it is possible for software developers (or even publishers, in this case) to use a wrapper to make the software protection scheme transparent to the application.
Reference: [FlexLM 96] <author> GLOBEtrotter Software, Inc. </author> <title> FlexLM End User Manual, </title> <note> http://www.globes.com/manual.html, 1996. </note>
Reference-contexts: However, they can be divided into two different classes, depending on the method used to node-lock servers to specific hosts. Thus, there are those which use software signatures, commonly found protecting applications executing on workstation-based systems (e.g. FlexLM <ref> [FlexLM 96, FlexTO 96] </ref>, lanLM [lanLM 95], iFOR/LS [Gradient 95]), and those normally used to protect applications executing on PC-based systems, which adopt hardware devices (e.g. HASP [Alladin 97], SentinelLM [Rainbow 97]).
Reference: [FlexTO 96] <institution> GLOBEtrotter Software, Inc. </institution> <note> FlexLM Technical Overview, http://www.globes.com/flexto.html, 1996. </note>
Reference-contexts: However, they can be divided into two different classes, depending on the method used to node-lock servers to specific hosts. Thus, there are those which use software signatures, commonly found protecting applications executing on workstation-based systems (e.g. FlexLM <ref> [FlexLM 96, FlexTO 96] </ref>, lanLM [lanLM 95], iFOR/LS [Gradient 95]), and those normally used to protect applications executing on PC-based systems, which adopt hardware devices (e.g. HASP [Alladin 97], SentinelLM [Rainbow 97]).
Reference: [Gradient 95] <institution> Gradient Technologies, Inc., </institution> <note> iFOR/LS Quick Start Guide, Version 2, http://www.gradient.com/, 1996. </note>
Reference-contexts: However, they can be divided into two different classes, depending on the method used to node-lock servers to specific hosts. Thus, there are those which use software signatures, commonly found protecting applications executing on workstation-based systems (e.g. FlexLM [FlexLM 96, FlexTO 96], lanLM [lanLM 95], iFOR/LS <ref> [Gradient 95] </ref>), and those normally used to protect applications executing on PC-based systems, which adopt hardware devices (e.g. HASP [Alladin 97], SentinelLM [Rainbow 97]).
Reference: [ISO9126] <institution> Information Technology - Software Product Evaluation - Quality Characteristics and Guidelines for their Use, ISO-9126, </institution> <year> 1991. </year>
Reference-contexts: In order to assess the quality and suitability of a tool, software publishers normally follow well defined evaluation guidelines. For example, the ISO 9126 standard proposes a set of characteristics such as functionality and usability, among others, that may be used in estimating the quality of a software product <ref> [ISO9126] </ref>. We will follow the criteria listed below, to develop our comparison between the Bouncer LMS and other LMSs available.
Reference: [MMM 95] <author> L.M.F. Martins, J.A.B. Moura, </author> <title> and A.F.C. </title> <editor> Medeiros, R-Cycle: Um Molde para o Processo de Produo, </editor> <booktitle> Disponibilizao e Evoluao de Software, (in Portuguese), Proceedings of the IX Brazilian Symposium on Software Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: However, it has also been observed that a large number of systems has not been able to attain the same level of success using these models <ref> [MMM 95] </ref>. More specifically, software engineering for most of the small and medium size commercial application projects does not seem to follow the same patterns that have been used in large ad hoc systems. <p> Common activities that have to be carried out in these often underestimated phases are: packaging, alpha and beta testing, distribution, technical support and marketing of the product. Only recently some models have been proposed that take these aspects into consideration <ref> [Yeh et al. 91, Potts 93, MMM 95] </ref>. Within the highly competitive market of commercial software applications, lowering development costs, enhancing product quality and customers satisfaction, are important factors that must always be sought after by developers.
Reference: [NSTL 95] <institution> National Software Testing Laboratories. NSTL Dongle Security Comparative Evaluation, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Using the mechanisms described above, the Bouncer LMS as well as all LMSs currently available, if properly used by software publishers, can provide very good software protection <ref> [NSTL 95] </ref>. Usability Nearly all LMSs available offer a similar API and provision for the utilisation of a wrapper to make the incorporation of the protection mechanism easier and programming language independent. When the wrapper is not used, applications must incorporate calls to the functions provided by the LMS API.
Reference: [Poligene 97] <institution> Ncleo Poligene. Home Page, </institution> <note> http://www.dsc.ufpb.br/~genesis. </note>
Reference-contexts: Currently an implementation of the Bouncer LMS is under development. The enterprise receives financial support from the Brazilian program Softex 2000, through one of its Genesis consortium <ref> [Poligene 97] </ref>. Acknowledgements Authors would like to thank financial support provided by CNPq (grants 380.076/94-2, 300.646/96-8), CAPES (grant BEX2428/95-4), and CNPq/PNUD (grant 680071/94).
Reference: [Potts 93] <author> C. Potts, </author> <title> Software Engineering Research Revisited, </title> <journal> IEEE Software, </journal> <volume> Vol. 10, </volume> <editor> N. </editor> <volume> 5, </volume> <pages> pp. 19-28, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Common activities that have to be carried out in these often underestimated phases are: packaging, alpha and beta testing, distribution, technical support and marketing of the product. Only recently some models have been proposed that take these aspects into consideration <ref> [Yeh et al. 91, Potts 93, MMM 95] </ref>. Within the highly competitive market of commercial software applications, lowering development costs, enhancing product quality and customers satisfaction, are important factors that must always be sought after by developers.
Reference: [Rainbow 97] <institution> Rainbow Technologies, SentinelLM Home Page, </institution> <note> http://www.rnbo.com/SENTINELLM/home.html, 1997. </note>
Reference-contexts: Thus, there are those which use software signatures, commonly found protecting applications executing on workstation-based systems (e.g. FlexLM [FlexLM 96, FlexTO 96], lanLM [lanLM 95], iFOR/LS [Gradient 95]), and those normally used to protect applications executing on PC-based systems, which adopt hardware devices (e.g. HASP [Alladin 97], SentinelLM <ref> [Rainbow 97] </ref>). In the discussion that follows we use the term software LMSs to refer to LMSs using software signature schemes, and hardware LMS to refer to LMSs using the hardware device approach. Functionality The main functionality of an LMS is to protect software against illegal utilisation.
Reference: [RS 87] <author> D. Remer and E. Stephen, </author> <title> Legal Care for your Software - a Step by Step Guide for Computer Software Rights and Publishers, </title> <address> 3 rd edition, </address> <year> 1987. </year>
Reference-contexts: Protecting Software against Illegal Use Protecting intellectual property is a rather controversial issue that has been discussed for quite a long time. Legal protection such those supported by copyright and patent regulations is the main resource used by those interested in preserving their intellectual property <ref> [RS 87] </ref>. However, for the software industry, legal protection alone does not seem to have the effect its users would like to achieve.
Reference: [Schneier 96] <author> B. Schneier, </author> <title> Applied Cryptography, 2 nd edition, </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: To eliminate this problem, all messages exchanged by client and servers are signed at their origin and authenticated at the destiny. There are well known cryptography techniques that can be used to implement such service <ref> [Schneier 96] </ref>. Client Failure Unlike server failures, treatment of client failures are normally postponed until the point where a license request may be denied (e.g. because the maximum number of concurrent licenses granted, for a particular application, has been reached). <p> Since cryptography is the heart of the security mechanisms used by all LMSs, they use cryptography algorithms that are virtually impossible to break <ref> [Schneier 96] </ref>. In software LMSs, like Bouncer, the information describing which host (or hosts) may execute the server is included into the signature file, which also contains licensing information.
Reference: [Yeh et al. 91] <author> R.T. Yeh et al., </author> <title> A Commonsense Management Model, </title> <journal> IEEE Software, </journal> <volume> Vol. 8, </volume> <editor> N. </editor> <volume> 6, </volume> <pages> pp. 23-33, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Common activities that have to be carried out in these often underestimated phases are: packaging, alpha and beta testing, distribution, technical support and marketing of the product. Only recently some models have been proposed that take these aspects into consideration <ref> [Yeh et al. 91, Potts 93, MMM 95] </ref>. Within the highly competitive market of commercial software applications, lowering development costs, enhancing product quality and customers satisfaction, are important factors that must always be sought after by developers.
References-found: 18

