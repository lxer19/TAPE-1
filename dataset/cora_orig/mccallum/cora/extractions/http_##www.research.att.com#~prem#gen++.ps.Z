URL: http://www.research.att.com/~prem/gen++.ps.Z
Refering-URL: http://www.research.att.com/~prem/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: prem@research.att.com  laurae@mozart.att.com  
Title: GEN++ an analyzer generator for C++ programs  
Author: Prem Devanbu Laura Eaves 
Affiliation: Articifial Intelligence Principles Research Department  Object Oriented and Artificial Intelligence Technologies Group,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Coplien, J. O., </author> <title> "Looking over one's shoulder at a C++ program" 11265-921030-01TM </title>
Reference-contexts: Create a default output operator "&lt;<" for a given class. 4. Generate control flow and data usage reports. 5. Generate C++ metrics: ratio of derived to base classes, ratio of number of public members to total number of classes, etc. (See Coplien <ref> [1] </ref> for a more complete list). 6. Check to see that destructors for base classes are always declared to be virtual. 7. Check to see that Constructors and Destructors are never declared virtual. 8. No member function should be both virtual and inline.
Reference: [2] <author> Devanbu, P., </author> <title> "genoa/genii A customizable, language- and front-end- independent code analyzer", </title> <booktitle> Fourteenth International Conference on Software Engineering, </booktitle> <address> Melbourne, Australia, </address> <year> 1992. </year>
Reference-contexts: In addition, introducing additional functionality into C++ tools, or tracking the evolution of the C++ language, involves major effort. In this paper, we describe gen++, a tool generator for C++ 3.0. gen++ was implemented by attaching the GENOA/GENII <ref> [2] </ref> portable parse tree querying mechanism to the Cfront 3.0 compiler. gen++ is designed to reduce the difficulty of building C++ tools in 3 ways: first, tools are implemented by writing a specification in a compact domain specific language; second, all tools generated by gen++ use the Cfront compiler to do
Reference: [3] <author> Grass J., and Chen, Y-H., </author> <title> "The C++ Information Abstractor", </title> <booktitle> Proceedings, The Second USENIX C++ Conference, </booktitle> <address> San Fransisco, USA, </address> <year> 1992. </year>
Reference-contexts: Because of the increasing value of C++ software assets, it is important for developers and managers to have access to tools that extract information, generate metrics, check coding standards, etc. Tools such as CIA++ <ref> [3] </ref> make a significant contribution in this area, but more tools are needed. Unfortunately, tools for C++ are hard to build, primarily because of the complexity of processing the source|parsing, type checking, and symbol resolution for C++ are difficult tasks.
Reference: [4] <author> Murray, R.B., </author> <title> "Statically Typed Abstract Representation for C++ Programs", </title> <booktitle> Second USENIX C++ Conference, </booktitle> <year> 1992. </year>
Reference-contexts: We have already discussed CIA++. The ALF/GRAIL system <ref> [4] </ref> includes a statically typed, rationalized, C++ source representation with a well defined application programmer interface.
References-found: 4

