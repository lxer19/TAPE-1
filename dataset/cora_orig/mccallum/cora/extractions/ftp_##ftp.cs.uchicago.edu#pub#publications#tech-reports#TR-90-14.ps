URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-14.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: BPP HAS SUBEXPONENTIAL TIME SIMULATIONS UNLESS EXPTIME HAS PUBLISHABLE PROOFS proofs are based on the
Author: L aszl o Babai, Lance Fortnow, Noam Nisan and Avi Wigderson 
Note: ffi has polynomial-size circuits and ffi has publishable proofs (EXPTIME=MA). The  this proof is that it does not relativize.  
Abstract: We show that BPP can be simulated in subexponential time for infinitely many input lengths unless exponential time We also show that BP P is contained in subexponential time unless exponential time has publishable proofs for infinitely many input lengths. In addition, we show BP P can be simulated in subexponential time for infinitely many input lengths unless there exist unary languages in MA P . One of the ingredients of our proof is a lemma that states that if EXP T IME has polynomial size circuits then EXP T IM E=M A. This extends previous work by Albert Meyer. ffi collapses to the second level of the polynomial-time hierarchy,
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Adleman, </author> <title> Two theorems on random polynomial time, </title> <booktitle> In Proceedings of the 19th IEEE Symposium on Foundations of Computer Science, IEEE, </booktitle> <address> New York, </address> <year> 1978, </year> <pages> 75-83. </pages>
Reference-contexts: The probability that the random self-reduction queries one of the strings that D n fails to compute correctly is bounded by (n + 1)=3n &lt; 2=5 for almost every n. Using techniques of <ref> [1, 8] </ref> we can replace the randomness with non-uniformity: We can use the usual amplification techniques to reduce the error to less than 2 n . Then there must be a single random sequence that gives a correct answer for all inputs. We encode this string into the advice.
Reference: [2] <author> L. Babai, </author> <title> Trading group theory for randomness, </title> <booktitle> In Proceedings of the 17th ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1985, </year> <pages> 421-429. </pages>
Reference-contexts: Since MA is known to lie within P 2 " P 2 <ref> [2] </ref>, we deduce that subexponential simulations for BP P exist unless EXP T IM E lies within the second level of the polynomial time hierarchy. Thus the main theorems of our paper are the following: Theorem 1.1. 1. <p> We use the notation EXP T IM E for [ k&gt;0 DTIME [2 n k ] and the notation E for [ c&gt;0 DTIME [2 cn ]. We define EH, the exponential-time hierarchy, as [ k&gt;0 E P The class MA, defined by Babai <ref> [2] </ref> (cf. [5]), denotes the Merlin-Arthur class, the class of languages accepted by an interactive proof system consisting of a single message from the prover followed by probabilistic verification. <p> Arguably this represents the class of languages with publishable proofs of membership (not requiring direct interaction between prover and verifier; the verifier can flip coins at any later date). Babai <ref> [2] </ref> has shown that P 2 " P 2 contains M A. Let = f0; 1g. Let f be a function mapping fl to . <p> To extend these theorems we will use some of the recent work by Babai, Fortnow and Lund [4] on multiple prover interactive proof systems. Interactive proof systems were introduced by Babai <ref> [2] </ref> and Goldwasser, Micali and Rackoff [15] as a probabilistic extension of NP. The model consists of an infinitely powerful but untrustworthy prover that tries to convince a probabilistic polynomial-time verifier that a string is in a certain language.
Reference: [3] <author> L. Babai and L. Fortnow, Arithmetization: </author> <title> A new method in structural complexity theory, Computational Complexity, </title> <booktitle> 1:1(1991), </booktitle> <pages> 41-66. </pages>
Reference-contexts: Conclusions Our proof makes use of the powerful new technique in complexity theory to use multilinear functions in simulation of certain complexity classes. One should study the applications and the limits of this technique (cf. <ref> [23, 25, 3, 4] </ref>). If BP P has a weak subexponential simulation then EXP T IM E properly contains BP P since one can easily create languages in EXP T IM E that do not have a weak subexponential or even weak DTIME [2 cn ] simulation.
Reference: [4] <author> L. Babai, L. Fortnow, and C. Lund, </author> <title> Non-deterministic exponential time has two-prover interactive protocols, Computational Complexity, </title> <booktitle> 1:1(1991), </booktitle> <pages> 3-40. </pages>
Reference-contexts: If EXP T IME cannot be weakly approximated by polynomial-size cir cuits then BP P " *&gt;0 DTIME [2 n * ]. To extend these theorems we will use some of the recent work by Babai, Fortnow and Lund <ref> [4] </ref> on multiple prover interactive proof systems. Interactive proof systems were introduced by Babai [2] and Goldwasser, Micali and Rackoff [15] as a probabilistic extension of NP. <p> BP P and Subexponential Time 5 Ben-Or, Goldwasser, Kilian and Wigderson [7] generalize this model to have many provers, that cannot communicate with each other or see the communication of the others with the verifier. Babai, Fortnow and Lund <ref> [4] </ref> show that this model accepts exactly the languages recognizable in nondeterministic exponential time. We will use the following theorem from [4] regarding the power of EXPTIME provers: Theorem 2.2. <p> Babai, Fortnow and Lund <ref> [4] </ref> show that this model accepts exactly the languages recognizable in nondeterministic exponential time. We will use the following theorem from [4] regarding the power of EXPTIME provers: Theorem 2.2. Any language in EXPTIME has a multi-prover interactive proof system where the honest provers are limited to computing within deterministic exponential time. <p> Any language in EXPTIME has a multi-prover interactive proof system where the honest provers are limited to computing within deterministic exponential time. We note that this result implies that EXPTIME admits instance checking in the sense of Blum and Kannan [9], cf. <ref> [4] </ref>. 3. <p> A similar idea works for arbitrary polynomials of low degree. In particular, by extending a Boolean function f to a multilinear function g over Z p , we obtain a random self-reducible f-hard and P SP ACE f -easy function g. We prove the following lemmas from <ref> [4] </ref> for completeness: Lemma 3.1. Let A : f0; 1g s ! Q be a function. Then A has a unique multi linear extension e A : Q s ! Q. Proof. <p> This observation, inspired by [6] and spelled out simultaneously by the authors of [6] and <ref> [4] </ref>, has significant consequences, as we shall see below. 4. Deterministic Simulation of BP P In this section we complete the proof of Theorem 1.1. The proof consists of two steps: Lemma 4.1. BP P and Subexponential Time 7 1. <p> We use entirely different techniques to prove this stronger lemma. This lemma is also an extension of a corollary in [23]. Proof. By Theorem 2.2 <ref> [4] </ref> we know that to prove a language L 2 EXP T IM E with multiple provers, we only need EXP T IM E-strong provers. Now the M A protocol proceeds as follows. <p> Conclusions Our proof makes use of the powerful new technique in complexity theory to use multilinear functions in simulation of certain complexity classes. One should study the applications and the limits of this technique (cf. <ref> [23, 25, 3, 4] </ref>). If BP P has a weak subexponential simulation then EXP T IM E properly contains BP P since one can easily create languages in EXP T IM E that do not have a weak subexponential or even weak DTIME [2 cn ] simulation.
Reference: [5] <author> L. Babai and S. Moran, </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36:2(1988), </volume> <pages> 254-276. </pages>
Reference-contexts: We use the notation EXP T IM E for [ k&gt;0 DTIME [2 n k ] and the notation E for [ c&gt;0 DTIME [2 cn ]. We define EH, the exponential-time hierarchy, as [ k&gt;0 E P The class MA, defined by Babai [2] (cf. <ref> [5] </ref>), denotes the Merlin-Arthur class, the class of languages accepted by an interactive proof system consisting of a single message from the prover followed by probabilistic verification.
Reference: [6] <author> D. Beaver and J. Feigenbaum, </author> <title> Hiding instances in multioracle queries, </title> <booktitle> In Proceedings of the 7th Symposium on Theoretical Aspects of Computer Science, volume 415 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1990, </year> <pages> 37-48. </pages>
Reference-contexts: We note that this result implies that EXPTIME admits instance checking in the sense of Blum and Kannan [9], cf. [4]. 3. Random Self-Reducibility in High Complexity Classes Following an idea of Beaver and Feigenbaum <ref> [6] </ref>, Lipton [22] observed that the permanent function has the following random self-reducibility property: if p is a prime greater than n and an oracle tells the value of n fi n permanents over Z p correctly for a 1 1 3n portion of the set of inputs, then one can <p> Since a P SP ACE machine can simulate an alternating polynomial-time Turing machine, if L is P SP ACE-robust then g is Turing-reducible to L. 2 In particular, we have random self-reducible P SP ACE-complete functions, EXP T IM E-complete functions, etc. This observation, inspired by <ref> [6] </ref> and spelled out simultaneously by the authors of [6] and [4], has significant consequences, as we shall see below. 4. Deterministic Simulation of BP P In this section we complete the proof of Theorem 1.1. The proof consists of two steps: Lemma 4.1. <p> This observation, inspired by <ref> [6] </ref> and spelled out simultaneously by the authors of [6] and [4], has significant consequences, as we shall see below. 4. Deterministic Simulation of BP P In this section we complete the proof of Theorem 1.1. The proof consists of two steps: Lemma 4.1. BP P and Subexponential Time 7 1.
Reference: [7] <author> M. Ben-Or, S. Goldwasser, J. Kilian, and A. Wigderson, </author> <title> Multi-prover interactive proofs: How to remove intractability assumptions, </title> <booktitle> In Proceedings of the 20th ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1988, </year> <pages> 113-131. </pages>
Reference-contexts: A recent series of results by Lund, Fortnow, Karloff and Nisan [23] and Shamir [25] show that this model accepts exactly those languages recognizable in polynomial space. BP P and Subexponential Time 5 Ben-Or, Goldwasser, Kilian and Wigderson <ref> [7] </ref> generalize this model to have many provers, that cannot communicate with each other or see the communication of the others with the verifier. Babai, Fortnow and Lund [4] show that this model accepts exactly the languages recognizable in nondeterministic exponential time.
Reference: [8] <author> C. Bennet and J. Gill, </author> <title> Relative to a random oracle, P A 6= NP A 6= co N P A with probability one, </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(1981), </volume> <pages> 96-113. </pages>
Reference-contexts: The probability that the random self-reduction queries one of the strings that D n fails to compute correctly is bounded by (n + 1)=3n &lt; 2=5 for almost every n. Using techniques of <ref> [1, 8] </ref> we can replace the randomness with non-uniformity: We can use the usual amplification techniques to reduce the error to less than 2 n . Then there must be a single random sequence that gives a correct answer for all inputs. We encode this string into the advice.
Reference: [9] <author> M. Blum and S. Kannan, </author> <title> Designing programs that check their work, </title> <booktitle> In Proceedings of the 21st ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1989, </year> <pages> 86-97. </pages>
Reference-contexts: Any language in EXPTIME has a multi-prover interactive proof system where the honest provers are limited to computing within deterministic exponential time. We note that this result implies that EXPTIME admits instance checking in the sense of Blum and Kannan <ref> [9] </ref>, cf. [4]. 3.
Reference: [10] <author> M. Blum, M. Luby, and R. Rubinfeld, </author> <title> Self-testing and self-correcting programs, with applications to numerical programs, </title> <booktitle> In Proceedings of the 22nd ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1990, </year> <month> 73-83. </month> <title> BP P and Subexponential Time 11 </title>
Reference-contexts: Blum, Luby and Rubinfeld <ref> [10] </ref> used similar ideas. The idea of the proof is that the value of per (A) can be computed, using interpolation, from any n + 1 values per (A + ff i B) where B is a random matrix and ff i 2 Z p .
Reference: [11] <author> M. Blum and S. Micali, </author> <title> How to generate cryptographically strong sequences of pseudo-random bits, </title> <journal> SIAM Journal on Computing, </journal> <volume> 13(1984), </volume> <pages> 850-864. </pages>
Reference-contexts: One could use a pseudorandom number generator to reduce the number of random bits needed for a probabilistic algorithm to accept a certain language and thus to reduce the number of computation paths to simulate. Blum and Micali <ref> [11] </ref> described the first secure pseudorandom generator based on the assumption of the hardness of the discrete log function. These ideas are generalized by Yao [26, 12] who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations.
Reference: [12] <author> R. Boppana and R. </author> <title> Hirschfeld, Pseudorandom generators and complexity classes, </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <publisher> JAI Press, </publisher> <address> Greenwich, </address> <year> 1989, </year> <pages> 1-26. </pages>
Reference-contexts: Blum and Micali [11] described the first secure pseudorandom generator based on the assumption of the hardness of the discrete log function. These ideas are generalized by Yao <ref> [26, 12] </ref> who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations.
Reference: [13] <author> O. Goldreich, H. Krawczyk, and M. Luby, </author> <title> On the existence of pseudo-random generators, </title> <booktitle> In Proceedings of the 29th IEEE Symposium on Foundations of Computer Science, IEEE, </booktitle> <address> New York, </address> <year> 1988, </year> <pages> 12-24. </pages>
Reference-contexts: These ideas are generalized by Yao [26, 12] who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations. A series of results <ref> [21, 13, 19, 16] </ref> show that any one-way function is enough to create a pseudorandom generator that could be used to show that BPP is in subexponential time. Rather than making hardness assumptions on certain types of functions, in this paper we shall consider the effect of complexity theoretic assumptions.
Reference: [14] <author> O. Goldreich and L. Levin, </author> <title> A hard-core predicate for all one-way functions, </title> <booktitle> In Proceedings of the 21st ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1989, </year> <pages> 25-32. </pages>
Reference-contexts: Proof. Assume there is no polynomial-size circuit family computing g for all but a 1 3n fraction of the inputs. Goldreich and Levin <ref> [14] </ref> show how to construct from g a one-bit function h that is computable in exponential time but cannot be approximated by polynomial-size circuits.
Reference: [15] <author> S. Goldwasser, S. Micali, and C. Rackoff, </author> <title> The knowledge complexity of interactive proof-systems, </title> <journal> SIAM Journal on Computing, </journal> <volume> 18:1(1989), </volume> <pages> 186-208. </pages>
Reference-contexts: To extend these theorems we will use some of the recent work by Babai, Fortnow and Lund [4] on multiple prover interactive proof systems. Interactive proof systems were introduced by Babai [2] and Goldwasser, Micali and Rackoff <ref> [15] </ref> as a probabilistic extension of NP. The model consists of an infinitely powerful but untrustworthy prover that tries to convince a probabilistic polynomial-time verifier that a string is in a certain language.
Reference: [16] <author> J. H -astad, </author> <title> Pseudo-random generators under uniform assumptions, </title> <booktitle> In Proceedings of the 22nd ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1990, </year> <pages> 395-404. </pages>
Reference-contexts: These ideas are generalized by Yao [26, 12] who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations. A series of results <ref> [21, 13, 19, 16] </ref> show that any one-way function is enough to create a pseudorandom generator that could be used to show that BPP is in subexponential time. Rather than making hardness assumptions on certain types of functions, in this paper we shall consider the effect of complexity theoretic assumptions.
Reference: [17] <author> J. Hartmanis, N. Immerman, and V. Sewelson, </author> <title> Sparse sets in NP P : EXPTIME versus NEXPTIME, </title> <journal> Information and Control, </journal> <volume> 65(1985), </volume> <pages> 158-181. </pages>
Reference-contexts: The lemma now follows from Theorem 5.1. 2 Corollary 1.3 follows from this lemma by noticing that a simple padding argument (see <ref> [17] </ref>) shows that EH = E if and only if all unary languages in the polynomial-time hierarchy are decidable in polynomial time. Corollary 1.3 has the interesting property of showing that a collapse of two higher complexity classes imply a collapse at a lower level. <p> Corollary 1.3 has the interesting property of showing that a collapse of two higher complexity classes imply a collapse at a lower level. Usually one sees the other direction, for example P = NP implies E = N E (see <ref> [17] </ref>). Proof. Suppose BP P does not have a weak subexponential time simulation. By Theorem 1.1 we have that EXP T IM E = M A and thus P H = M A since M A P 2 .
Reference: [18] <author> H. Heller, </author> <title> On relativized exponential and probabilistic complexity classes, </title> <journal> Information and Compuation, </journal> <volume> 71(1986), </volume> <pages> 231-243. </pages>
Reference-contexts: Ideally, we would like to prove that EXP T IME properly contains BP P without any assumptions. While an oracle making these two classes equal is known to exist (see <ref> [18] </ref>), the new methods indicated do not relativize and therefore a relativized collapse no longer seems as intimidating as it used to be. Acknowledgments The first author was partially supported by NSF Grant CCR-8710078. The second author was partially supported by NSF Grant CCR-9009936.
Reference: [19] <author> R. Impagliazzo, L. Levin, and M. Luby, </author> <title> Pseudo-random number generation from one-way functions, </title> <booktitle> In Proceedings of the 21st ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1989, </year> <pages> 12-24. </pages>
Reference-contexts: These ideas are generalized by Yao [26, 12] who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations. A series of results <ref> [21, 13, 19, 16] </ref> show that any one-way function is enough to create a pseudorandom generator that could be used to show that BPP is in subexponential time. Rather than making hardness assumptions on certain types of functions, in this paper we shall consider the effect of complexity theoretic assumptions.
Reference: [20] <author> R. Karp and R. Lipton, </author> <title> Some connections between nonuniform and uniform complexity classes, </title> <booktitle> In Proceedings of the 12th ACM Symposium on the Theory of Computing, ACM, </booktitle> <address> New York, </address> <year> 1980, </year> <pages> 302-309. </pages>
Reference-contexts: Lemma 4.2. 1. If EXP T IM E 2 P=poly then EXP T IM E = M A. 2. If EXP T IME is weakly simulated by polynomial-size circuits then M A weakly simulates EXP T IM E. Lemma 4.2 extends a result of Albert Meyer (see <ref> [20] </ref>): If EXP T IM E 2 P=poly then EXP T IM E = P 2 . We use entirely different techniques to prove this stronger lemma. This lemma is also an extension of a corollary in [23]. Proof.
Reference: [21] <author> L. Levin, </author> <title> One-way functions and pseudo-random generators, </title> <journal> Combina-torica, </journal> <volume> 7(1987), </volume> <pages> 357-363. </pages> <note> 12 Babai et al. </note>
Reference-contexts: These ideas are generalized by Yao [26, 12] who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations. A series of results <ref> [21, 13, 19, 16] </ref> show that any one-way function is enough to create a pseudorandom generator that could be used to show that BPP is in subexponential time. Rather than making hardness assumptions on certain types of functions, in this paper we shall consider the effect of complexity theoretic assumptions.
Reference: [22] <author> R. Lipton, </author> <title> New directions in testing, </title> <editor> In J. Feigenbaum and M. Merritt, editors, </editor> <booktitle> Distributed Computing and Cryptography, volume 2 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <publisher> American Mathematical Society, </publisher> <address> Providence, </address> <year> 1991, </year> <pages> 191 - 202. </pages>
Reference-contexts: We note that this result implies that EXPTIME admits instance checking in the sense of Blum and Kannan [9], cf. [4]. 3. Random Self-Reducibility in High Complexity Classes Following an idea of Beaver and Feigenbaum [6], Lipton <ref> [22] </ref> observed that the permanent function has the following random self-reducibility property: if p is a prime greater than n and an oracle tells the value of n fi n permanents over Z p correctly for a 1 1 3n portion of the set of inputs, then one can use this
Reference: [23] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan, </author> <title> Algebraic methods for interactive proof systems, </title> <journal> Journal of the ACM, </journal> <volume> 39:4(1992), </volume> <pages> 859-868. </pages>
Reference-contexts: The model consists of an infinitely powerful but untrustworthy prover that tries to convince a probabilistic polynomial-time verifier that a string is in a certain language. A recent series of results by Lund, Fortnow, Karloff and Nisan <ref> [23] </ref> and Shamir [25] show that this model accepts exactly those languages recognizable in polynomial space. <p> Lemma 4.2 extends a result of Albert Meyer (see [20]): If EXP T IM E 2 P=poly then EXP T IM E = P 2 . We use entirely different techniques to prove this stronger lemma. This lemma is also an extension of a corollary in <ref> [23] </ref>. Proof. By Theorem 2.2 [4] we know that to prove a language L 2 EXP T IM E with multiple provers, we only need EXP T IM E-strong provers. Now the M A protocol proceeds as follows. <p> Conclusions Our proof makes use of the powerful new technique in complexity theory to use multilinear functions in simulation of certain complexity classes. One should study the applications and the limits of this technique (cf. <ref> [23, 25, 3, 4] </ref>). If BP P has a weak subexponential simulation then EXP T IM E properly contains BP P since one can easily create languages in EXP T IM E that do not have a weak subexponential or even weak DTIME [2 cn ] simulation.
Reference: [24] <author> N. Nisan and A. Wigderson, </author> <title> Hardness vs. randomness, </title> <booktitle> In Proceedings of the 29th IEEE Symposium on Foundations of Computer Science, IEEE, </booktitle> <address> New York, </address> <year> 1988, </year> <pages> 2-11. </pages>
Reference-contexts: Rather than making hardness assumptions on certain types of functions, in this paper we shall consider the effect of complexity theoretic assumptions. Nisan and Wigderson <ref> [24] </ref> show that if there exists a function computable in exponential time that cannot be approximated by a polynomial-size circuit then there exists a pseudorandom number generator computable in subexponential time that looks random to polynomial-size circuits for infinitely many input lengths. <p> If EH = E then P = BP P . Corollary 1.3 is a rare instance of a collapse at the exponential-time level implying a collapse at the polynomial-time level. 2. Background and Definitions Nisan and Wigderson <ref> [24] </ref> showed a general theorem on how certain hard functions could be used to create various pseudorandom number generators. We will use a specific corollary of their work. <p> We say that f is weakly t (n)-approximated by circuits of size s (n) if the above statement holds for infinitely many n. Nisan and Wigderson <ref> [24] </ref> use "approximated by circuits of size s (n)" to mean "weakly n j -approximated by circuits of size s (n) for any fixed j" in our terminology. <p> A class D weakly simulates a class C if for every language in C there is a language in D that agrees with C for infinitely many input lengths. We will use and significantly extend the following theorems due to Nisan and Wigderson <ref> [24] </ref>: Theorem 2.1. 1. If EXP T IME cannot be approximated by polynomial-size circuits then BP P admits weak subexponential simulations. 2. If EXP T IME cannot be weakly approximated by polynomial-size cir cuits then BP P " *&gt;0 DTIME [2 n * ]. <p> We encode this string into the advice. This proves the first part of Lemma 4.1. The second part has virtually the same proof. Theorem 1.1 follows. 2 5. Unary Languages In this section we will prove Theorem 1.2. We will use the following theorem due to Nisan and Wigderson <ref> [24] </ref>: Theorem 5.1. If there exists a function f computable in exponential time such that f cannot be weakly 2 n * -approximated by 2 n * -size circuits for some * &gt; 0 then P = BP P . First we prove the following lemma: Lemma 5.2.
Reference: [25] <author> A. Shamir, </author> <title> IP = PSPACE, </title> <journal> Journal of the ACM, </journal> <volume> 39:4(1992), </volume> <pages> 869-877. </pages>
Reference-contexts: The model consists of an infinitely powerful but untrustworthy prover that tries to convince a probabilistic polynomial-time verifier that a string is in a certain language. A recent series of results by Lund, Fortnow, Karloff and Nisan [23] and Shamir <ref> [25] </ref> show that this model accepts exactly those languages recognizable in polynomial space. BP P and Subexponential Time 5 Ben-Or, Goldwasser, Kilian and Wigderson [7] generalize this model to have many provers, that cannot communicate with each other or see the communication of the others with the verifier. <p> Conclusions Our proof makes use of the powerful new technique in complexity theory to use multilinear functions in simulation of certain complexity classes. One should study the applications and the limits of this technique (cf. <ref> [23, 25, 3, 4] </ref>). If BP P has a weak subexponential simulation then EXP T IM E properly contains BP P since one can easily create languages in EXP T IM E that do not have a weak subexponential or even weak DTIME [2 cn ] simulation.
Reference: [26] <author> A. Yao, </author> <title> Theory and applications of trapdoor functions, </title> <booktitle> In Proceedings of the 23rd IEEE Symposium on Foundations of Computer Science, IEEE, </booktitle> <address> New York, </address> <year> 1982, </year> <pages> 80-91. </pages>
Reference-contexts: Blum and Micali [11] described the first secure pseudorandom generator based on the assumption of the hardness of the discrete log function. These ideas are generalized by Yao <ref> [26, 12] </ref> who showed that one can convert any one-way permutation into a pseudorandom number generator to show that BPP has subexponential time simulations.
References-found: 26

