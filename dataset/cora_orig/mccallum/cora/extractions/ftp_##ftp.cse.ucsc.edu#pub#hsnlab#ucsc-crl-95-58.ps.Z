URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-58.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Title: Rate-Proportional Servers: A Design Methodology for Fair Queueing Algorithms  
Author: Dimitrios Stiliadis Anujan Varma 
Keyword: Packet scheduling, ATM switch scheduling, fair queueing, delay bounds, fairness.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: December 1995  
Pubnum: UCSC-CRL-95-58  
Abstract: Weighted Fair Queueing is considered as the ideal traffic scheduling algorithm in terms of its delay and fairness properties. Timestamp computations in a Weighted Fair Queueing scheduler serving N sessions have a time complexity of O(N ) per packet-transmission time, making its implementation difficult. Efforts in the past to simplify the implementation of Weighted Fair Queueing, such as Self-Clocked Fair Queueing, have resulted in degrading its isolation properties, thus affecting the delay bound. In this paper we present a class of scheduling algorithms | called Rate-Proportional Servers (RPS) | with bounds on end-to-end delays, buffer requirements and internal traffic burstiness equal to those of Weighted Fair Queueing. This class of algorithms is based on the notion of the potential associated with each connection sharing the same outgoing link, as well as, the system potential that tracks the progress of work in the system. We show that, depending on the implementation, different algorithms in the RPS class may have significantly different fairness properties. Network designers can use this methodology to implement efficient fair-queueing algorithms, balancing their fairness with implementation complexity. This work is completed in the sequel of this paper, where we present detailed implementations of two novel traffic scheduling algorithms with O(1) timestamp computations, that exhibit the same delay and fairness properties as those of Weighted Fair Queueing. This research is supported by the NSF Young Investigator Award No. MIP-9257103. A part of this paper will appear in the Proceedings of ACM SIGMETRICS '96. 
Abstract-found: 1
Intro-found: 1
Reference: <editor> gives rise to two algorithms with the same delay bound, </editor> <title> but with slightly different fairness properties. Both algorithms, however, provided bounded unfairness and O(1) timestamp computations. It is hoped that the RPS framework will lead to the development of other algorithms in the future. Further work will include the analysis of rate-proportional servers under probabilistic input traffic models, such as the exponentially-bounded-burstiness model [17]. References </title>
Reference: [1] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control | the single node case," </title> <booktitle> in Proc. IEEE INFOCOM '92, </booktitle> <volume> vol. 2, </volume> <pages> pp. 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In general, schedulers can be characterized as work-conserving or non-work-conserving. A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) <ref> [1] </ref>, Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. <p> Scalability: The algorithm must perform well in switches with a large number of connections, as well as over a wide range of link speeds. Based only on the delay and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline <ref> [1] </ref>. GPS multiplexing is defined with respect to a fluid-model, where packets are considered to be infinitely divisible. The share of bandwidth reserved by session i is represented by a real number i . <p> A backlogged session in the VirtualClock server can be starved for an arbitrary period of time as a result of excess bandwidth it received from the server when other sessions were idle <ref> [1] </ref>. A scheduling algorithm that combines the delay and burstiness behavior of Weighted Fair Queueing, simple timestamp computations, and bounded unfairness, has so far remained elusive. <p> However, WFQ also has the highest implementation complexity. VirtualClock has the same latency as WFQ, but is not a fair algorithm <ref> [3, 1] </ref>. Notice, however, that none of the other algorithms suffers from such a high level of unfairness. In Self-Clocked Fair Queueing as well as the round-robin schedulers, latency is a function of the number of connections that share the output link. <p> Let us assume that the kth packet leaves the system under the PRPS service discipline at time t P k . The same packet leaves the RPS server at time t F k . Using a similar approach as the one used for GPS servers <ref> [1] </ref>, we can prove the following lemma: Lemma 3: For all packets in a packet-by-packet rate-proportional server, t P k + r 3. Rate-Proportional Servers 17 Proof: The proof is very similar to that of a GPS server [1] and is given in Appendix A. <p> Using a similar approach as the one used for GPS servers <ref> [1] </ref>, we can prove the following lemma: Lemma 3: For all packets in a packet-by-packet rate-proportional server, t P k + r 3. Rate-Proportional Servers 17 Proof: The proof is very similar to that of a GPS server [1] and is given in Appendix A. If we include the partial service received by packets in transmission, the maximum lag in service for a session i in the packet-by-packet server occurs at the instant when a packet starts service.
Reference: [2] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," Internetworking: </title> <journal> Research and Experience, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year>
Reference-contexts: In general, schedulers can be characterized as work-conserving or non-work-conserving. A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing <ref> [2] </ref>, VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. <p> This results in perfect isolation, ideal fairness, and low end-to-end session delays. A packet-by-packet version of the algorithm, known as PGPS or Weighted Fair Queueing <ref> [2] </ref>, was defined in terms of a virtual clock that is increased with rate equal to 1 i2B (t;t) i A GPS system is simulated in parallel with the packet-by-packet system in order to identify the set of connections that are backlogged at each time.
Reference: [3] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In general, schedulers can be characterized as work-conserving or non-work-conserving. A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock <ref> [3] </ref>, Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. <p> However, WFQ also has the highest implementation complexity. VirtualClock has the same latency as WFQ, but is not a fair algorithm <ref> [3, 1] </ref>. Notice, however, that none of the other algorithms suffers from such a high level of unfairness. In Self-Clocked Fair Queueing as well as the round-robin schedulers, latency is a function of the number of connections that share the output link.
Reference: [4] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: In general, schedulers can be characterized as work-conserving or non-work-conserving. A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) <ref> [4] </ref>, Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [5] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin <ref> [5] </ref>, and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [6] <author> M. Shreedhar and G. Varghese, </author> <title> "Efficient fair queueing using deficit round robin," </title> <booktitle> in Proc. ACM SIGCOMM '95, </booktitle> <pages> pp. 231-242, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: A scheduler is work-conserving if the server is never idle when a packet is buffered in the system. Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin <ref> [6] </ref>. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [7] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate-controlled servers for very high-speed networks," </title> <booktitle> in Proc. IEEE Global Telecommunications Conference, </booktitle> <pages> pp. </pages> <address> 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) <ref> [7] </ref>, Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [8] <author> S. Golestani, </author> <title> "A framing strategy for congestion management," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1064-1077, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing <ref> [8] </ref>, and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [9] <author> D. Verma, D. Ferrari, and H. Zhang, </author> <title> "Guaranteeing delay jitter bounds in packet switching networks," </title> <booktitle> in Proc. Tricomm 91, </booktitle> <pages> pp. 35-43, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Examples of work-conserving schedulers include Generalized Processor Sharing (GPS) [1], Weighted Fair Queueing [2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5], and Deficit Round Robin [6]. On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date <ref> [9] </ref> are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure [10]. According to this classification there are two main architectures: sorted-priority and frame-based.
Reference: [10] <author> H. Zhang and S. Keshav, </author> <title> "Comparison of rate-based service disciplines," </title> <booktitle> in Proc. ACM SIG-COMM '91, </booktitle> <pages> pp. 113-122, </pages> <year> 1991. </year>
Reference-contexts: On the other hand, Hierarchical-Round-Robin (HRR) [7], Stop-and-Go queueing [8], and Jitter-Earliest-Due-Date [9] are non-work-conserving schedulers. Another classification of schedulers is based on their internal structure <ref> [10] </ref>. According to this classification there are two main architectures: sorted-priority and frame-based. In a sorted-priority scheduler, there is a global variable | usually referred to as the virtual time | associated with each outgoing link of the switch.
Reference: [11] <author> J. Davin and A. Heybey, </author> <title> "A simulation study of fair queueing and policy enforcement," </title> <journal> Computer Communication Review, </journal> <volume> vol. 20, </volume> <pages> pp. 23-29, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: A maximum of V events may be triggered in the GPS simulator during the transmission of one packet. Thus, the process overhead for completing a scheduling decision is O (V ). In order to reduce this complexity, an approximate implementation of GPS multiplexing was proposed in <ref> [11] </ref> and was 2. Preliminaries 5 later analyzed in [12] under the name Self-Clocked Fair Queueing (SCFQ). In this implementation, the timestamp of an arriving packet is computed based on the packet currently in service.
Reference: [12] <author> S. Golestani, </author> <title> "A self-clocked fair queueing scheme for broadband applications," </title> <booktitle> in Proc. IEEE INFOCOM '94, </booktitle> <pages> pp. 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Thus, the process overhead for completing a scheduling decision is O (V ). In order to reduce this complexity, an approximate implementation of GPS multiplexing was proposed in [11] and was 2. Preliminaries 5 later analyzed in <ref> [12] </ref> under the name Self-Clocked Fair Queueing (SCFQ). In this implementation, the timestamp of an arriving packet is computed based on the packet currently in service. <p> Thus, if we represent the total amount of service received by each session by a function, then these functions can be seen to grow at the same rate for each backlogged session. Golestani <ref> [12] </ref> introduced such a function and called it virtual time. Virtual time of a backlogged session is a function whose rate of growth at each instant is exactly the rate of normalized service provided to it by the scheduler at that instant. <p> In general, we would like the system to always serve connections proportional to their reservations and never penalize connections for bandwidth they received earlier, The measure of fairness that we will use is an extension of the definition presented for SCFQ <ref> [12] </ref>. Let us assume that at time t two connections i; j become greedy, requesting an infinite amount of bandwidth. Thus, the two connections will be continuously backlogged in the system after time t .
Reference: [13] <author> D. Stiliadis and A. Varma, </author> <title> "Latency-Rate servers: A general model for analysis of traffic scheduling algorithms," </title> <booktitle> in Proc. IEEE INFOCOM '96, </booktitle> <pages> pp. 111-119, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: However, the price paid is the reduced level of isolation among the sessions, causing the end-to-end delay bounds to grow linearly with the number of sessions that share the outgoing link <ref> [13] </ref>. Thus, the worst-case delay of a session can no longer be controlled just by controlling its reservation, as is possible in Weighted Fair Queueing (WFQ). The higher end-to-end delay also affects the burstiness of sessions within the network, increasing the buffer requirements. <p> The rest of this paper is organized as follows: In Section 2, we present some definitions and a brief summary of the concept of Latency-Rate Servers (or LR-servers) <ref> [13] </ref>, which provides us the necessary tools for analysis of the RPS framework. In Section 3, we define the class of rate-proportional servers and derive bounds on the end-to-end delay and burstiness in a network of rate-proportional servers. <p> Thus, the busy period serves as an invariant for evaluating the worst-case behavior of different scheduling algorithms under the same arrival pattern. For a more detailed explanation of the busy period, the reader is referred to <ref> [13] </ref>. In [13], we introduced a general model for traffic scheduling algorithms, called Latency-Rate (LR) servers. Any server in this class is characterized by two parameters: latency fi i and minimum allocated rate i . <p> Thus, the busy period serves as an invariant for evaluating the worst-case behavior of different scheduling algorithms under the same arrival pattern. For a more detailed explanation of the busy period, the reader is referred to <ref> [13] </ref>. In [13], we introduced a general model for traffic scheduling algorithms, called Latency-Rate (LR) servers. Any server in this class is characterized by two parameters: latency fi i and minimum allocated rate i . Let us assume that the jth busy period of connection i starts at time t . <p> Only in the case of a fluid-server packets can be arbitrarily small and thus W S i;j (t; t) may be continuous. The following upper bounds on the behavior of a LR-server were shown in <ref> [13] </ref> when the arrivals or session i are shaped by a leaky bucket with parameters ( i ; i ). <p> Furthermore, all known work-conserving schedulers | such 8 2. Preliminaries as GPS, Weighted Fair Queueing, Weighted Round Robin, Self-Clocked Fair Queueing, VirtualClock and Deficit-Round-Robin | have been shown to be LR-servers <ref> [13] </ref>. In Table 2.1 we summarize the latencies of many well-known work-conserving schedulers, along with bounds on their fairness and implementation complexity.
Reference: [14] <author> D. Stiliadis and A. Varma, </author> <title> "Efficient fair-queueing algorithms for ATM and packet networks," </title> <journal> submitted to IEEE/ACM Transactions on Networking, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: It is shown that both GPS, an algorithm with ideal fairness, and a fluid-model equivalent of VirtualClock, an unfair algorithm, are members of the RPS class. This work is completed in the sequel to this paper <ref> [14] </ref>, where two novel traffic scheduling algorithms in the RPS class, called Frame-based fair queueing (FFQ) and Starting Potential-based Fair Queueing (SPFQ) are defined and analyzed [14]. <p> This work is completed in the sequel to this paper <ref> [14] </ref>, where two novel traffic scheduling algorithms in the RPS class, called Frame-based fair queueing (FFQ) and Starting Potential-based Fair Queueing (SPFQ) are defined and analyzed [14]. Both algorithms require only O (1) time for the timestamp calculation, independent of the number of sessions sharing the server, and provide bounded unfairness. <p> The above definition specifies the properties of the system potential function for constructing a zero-latency server, but does not define it precisely. In practice, the system potential function must be chosen such that the scheduler can be implemented efficiently. In a following paper <ref> [14] </ref>, we will demonstrate two specific system-potential functions that lead to practical scheduling algorithms. GPS multiplexing is a rate-proportional server where the system potential is always equal to the potential of the backlogged connections. <p> Besides providing valuable insight into the behavior of scheduling algorithms, the RPS model is useful in the design of practical scheduling algorithms. This fact is illustrated in the sequel to this paper <ref> [14] </ref>, where we present two practical algorithms belonging to the RPS class, with application in both general packet networks and in ATM networks. Note that the fundamental difficulty in designing a practical rate-proportional server is the need to maintain the system potential function. <p> Note that the fundamental difficulty in designing a practical rate-proportional server is the need to maintain the system potential function. Tracking the global state of the system precisely requires simulating the corresponding fluid-model RPS in parallel with the packet-by-packet system. The algorithms in <ref> [14] </ref>, however, avoid this need by maintaining the system potential only as an approximation of the actual global state in the fluid model, and re-calibrating the system potential periodically to correct any discrepancies.
Reference: [15] <author> J. Turner, </author> <title> "New directions in communications (or which way to the information age?)," </title> <journal> IEEE Communications, </journal> <volume> vol. 24, </volume> <pages> pp. 8-15, </pages> <month> October </month> <year> 1986. </year>
Reference: [16] <author> J. Rexford, A. Greenberg, and F. Bonomi, </author> <title> "A fair leaky-bucket shaper for ATM networks." </title> <type> unpublished report, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1995. </year>
Reference-contexts: Therefore, ^ W F j (0; t ) (3.29) By adding eq.(3.28) and eq.(3.29), ^ W F j (0; t) (3.30) We will now use the above lemma and a method similar to the one presented in <ref> [16] </ref> for the WFQ server to find an upper bound for the amount of service a session may receive in PRPS as compared to that in the fluid server.
Reference: [17] <author> O. Yaron and M. Sidi, </author> <title> "Performance and stability of communication networks via robust exponential bounds," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 1, </volume> <pages> pp. 372-385, </pages> <month> June </month> <year> 1993. </year> <note> References A.1 </note>
References-found: 18

