URL: http://www.cs.ucsd.edu/users/hamilton/paper1.ps
Refering-URL: http://www.cs.ucsd.edu/users/hamilton/
Root-URL: http://www.cs.ucsd.edu
Title: Microarchitectural Synthesis of ICs with Embedded Concurrent Fault Isolation  
Author: Samuel Norman Hamilton and Alex Orailoglu 
Address: La Jolla, CA 92093-0114  
Affiliation: Department of Computer Science and Engineering University of California, San Diego  
Abstract: In an increasing number of applications, reliability is essential. On-line resiliency when confronted with permanent faults is a difficult and important aspect of providing reliability. Particularly vexing is the problem of fault identification. Current methods are either domain specific or expensive. We have developed an approach to permanent fault isolation in high-level synthesis that enables isolation through algorithmic duplication without necessitating complete functional unit replication. Fault identification is achieved through a unique binding methodology based on an extension of parity-like error correction equations in the domain of functional units. The result is an automated chip level approach with extremely low area and cost overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [ABF90] <author> M. Abramovici, M. A. Breuer, and A. D. Friedman. </author> <title> Digital Systems Testing and Testable Design. </title> <publisher> Computer Science Press, </publisher> <year> 1990. </year>
Reference-contexts: We adopt a functional fault model, wherein faults are not assumed to produce consistently erroneous behavior. This fits with data from testing literature, which indicates that many faults are neither catastrophic, nor covered by limited fault models <ref> [ABF90] </ref>. 4. A unit delay model is assumed for all functional units. This precludes chaining, or other methods of tailoring individual units. Efficient utilization of these techniques is still under development in current high-level synthesis literature, and is con sidered orthogonal to our approach. 5. <p> Thus, error masking does not result in incor-rect behavior. Error masking is not the only way a faulty unit can remain undetected. Since many faults only produce incorrect results under a limited set of circumstances, they cannot always be detected through calculation duplication <ref> [ABF90] </ref>. This is particularly true with hard to test faults, where the fault only rarely produces erroneous behavior. Scenarios such as these are referred to as false negatives, since tracks are incorrectly indicating the absence of an erroneous unit.
Reference: [CB96] <author> R. A. Chowdhury and P. Banerjee. </author> <title> Compiler Assisted Generation of Error-Detecting Parallel Programs. </title> <booktitle> In Proceedings of International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 360-369, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques [LR93] [OY93] [RJ94] <ref> [CB96] </ref>. The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication.
Reference: [CF90] <author> M. Chean and J. A. B. Fortes. </author> <title> The Full-Use-of-Suitable-Spares (FUSS) Approach to Hardware Reconfiguration for Fault-Tolerant Processor Arrays. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 564-571, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback [OK94] [OBK96] [OK96] has been explored, as has recovery from permanent faults through spares <ref> [CF90] </ref>, or graceful degradation [CO96] [Ora96]. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted.
Reference: [CO96] <author> W. Chan and A. Orailoglu. </author> <title> High-Level Synthesis of Gracefully Degradable ASICs. </title> <booktitle> In Proceedings of European Design and Test Conference, </booktitle> <pages> pages 50-54, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The consequent hardware required for fault identification entails additional complexity. To avoid the cost associated with complete hardware duplication, there has been an increasing focus in the fault tolerance literature on high-level synthesis [OK94] <ref> [CO96] </ref> [IK96] [OBK96] [Ora96] [OK96]. Tailoring high-level synthesis routines for compatibility with efficient hardware solutions facilitates the production of more compact, reliable designs. In this paper, we propose an algorithmic approach to error identification which introduces error encoding schemes into high-level synthesis. <p> Though our scheme is compatible with a variety of fault tolerance techniques, the capacity to adjust to varying numbers of functional units inherent in high-level synthesis approaches makes our scheme particularly compatible with dynamic reconfiguration techniques such as graceful degradation <ref> [CO96] </ref> [Ora96]. While reconfiguration with detection through strict duplication is possible by discarding both the erro-neous unit and the unit that checks its calculation [NNM91], our system only requires the faulty unit to be discarded, thereby avoiding unnecessary reductions in resource utilization. <p> Since our approach is compatible with a broad range of reconfiguration schemes, adaptation of our system to particular methods of graceful degradation is not addressed here. Such reconfiguration approaches are presented in <ref> [CO96] </ref> and [Ora96] and are complementary to the work described herein. The remainder of the paper is organized as follows: section 2 supplies a short summary of previous work in the area. Section 3 outlines the proposed scheme, and the assumptions on which it is based. <p> Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback [OK94] [OBK96] [OK96] has been explored, as has recovery from permanent faults through spares [CF90], or graceful degradation <ref> [CO96] </ref> [Ora96]. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques [LR93] [OY93] [RJ94] [CB96].
Reference: [DSH89] <author> A.T. Dahbura, K.K. Sabnami, and W.J. Hery. </author> <title> Spare Capacity as a Means of Fault Dectection and Diagnosis in Multiprocessor Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(6) </volume> <pages> 881-891, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed <ref> [DSH89] </ref> [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication. If a unit and the checking unit disagree, both units are discarded. This has the advantage of avoiding functional unit triplication for identification, but has the disadvantage of discarding one healthy unit for every faulty unit removed. [DSH89] suggested <p> proposed <ref> [DSH89] </ref> [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication. If a unit and the checking unit disagree, both units are discarded. This has the advantage of avoiding functional unit triplication for identification, but has the disadvantage of discarding one healthy unit for every faulty unit removed. [DSH89] suggested inactive functional units be used to execute redundant operations, thereby achieving error detection while avoiding full functional unit duplication. In [IK96] this theme was developed into a binding technique which implements triplication of each operation, thereby achieving complete identifi cation.

Reference: [LR93] <author> L. Lin and G. R. Redinbo. </author> <title> Block Implementation of Fault-Tolerant LMS Adaptive FIR Filters. </title> <booktitle> In Proceedings of IEEE International Workshop on Defect and Fault Tolerance in VLSI Systems, </booktitle> <pages> pages 17-24, </pages> <month> Oc-tober </month> <year> 1993. </year>
Reference-contexts: To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques <ref> [LR93] </ref> [OY93] [RJ94] [CB96]. The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication.
Reference: [NNM91] <author> A. Noore, H. Nariman, and M.A. Manzoul. </author> <title> Design of Reconfigurable Fault-Tolerant VLSI/WSI Processor Array Structures. Microelectronics and Reliability, </title> <address> 31(2-3):481-489, </address> <year> 1991. </year>
Reference-contexts: While reconfiguration with detection through strict duplication is possible by discarding both the erro-neous unit and the unit that checks its calculation <ref> [NNM91] </ref>, our system only requires the faulty unit to be discarded, thereby avoiding unnecessary reductions in resource utilization. Since our approach is compatible with a broad range of reconfiguration schemes, adaptation of our system to particular methods of graceful degradation is not addressed here. <p> The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] <ref> [NNM91] </ref> [IK96]. In [NNM91], detection was achieved through complete hardware duplication. If a unit and the checking unit disagree, both units are discarded. <p> The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] <ref> [NNM91] </ref> [IK96]. In [NNM91], detection was achieved through complete hardware duplication. If a unit and the checking unit disagree, both units are discarded.
Reference: [OBK96] <author> S.Y. Ohm, D.M. Blough, and F.J. Kur-dahi. </author> <title> High-Level Synthesis of Recoverable Microarchitectures. </title> <booktitle> In Proceedings of Eu-ropean Design and Test Conference, </booktitle> <pages> pages 55-62, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The consequent hardware required for fault identification entails additional complexity. To avoid the cost associated with complete hardware duplication, there has been an increasing focus in the fault tolerance literature on high-level synthesis [OK94] [CO96] [IK96] <ref> [OBK96] </ref> [Ora96] [OK96]. Tailoring high-level synthesis routines for compatibility with efficient hardware solutions facilitates the production of more compact, reliable designs. In this paper, we propose an algorithmic approach to error identification which introduces error encoding schemes into high-level synthesis. <p> Section 6 addresses integration of our methodology into high-level synthesis. Section 7 describes our implementation, and section 8 presents experimental results. Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback [OK94] <ref> [OBK96] </ref> [OK96] has been explored, as has recovery from permanent faults through spares [CF90], or graceful degradation [CO96] [Ora96]. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted.
Reference: [OK94] <author> A. Orailoglu and R. Karri. </author> <title> Coac-tive Scheduling and Checkpoint Determination during High-Level Synthesis of Self-Recovering Microarchitectures. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 2(3) </volume> <pages> 304-311, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: The consequent hardware required for fault identification entails additional complexity. To avoid the cost associated with complete hardware duplication, there has been an increasing focus in the fault tolerance literature on high-level synthesis <ref> [OK94] </ref> [CO96] [IK96] [OBK96] [Ora96] [OK96]. Tailoring high-level synthesis routines for compatibility with efficient hardware solutions facilitates the production of more compact, reliable designs. In this paper, we propose an algorithmic approach to error identification which introduces error encoding schemes into high-level synthesis. <p> Section 6 addresses integration of our methodology into high-level synthesis. Section 7 describes our implementation, and section 8 presents experimental results. Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback <ref> [OK94] </ref> [OBK96] [OK96] has been explored, as has recovery from permanent faults through spares [CF90], or graceful degradation [CO96] [Ora96]. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted.
Reference: [OK96] <author> A. Orailoglu and R. Karri. </author> <title> Automatic Synthesis of Self-Recovering VLSI Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 45(2) </volume> <pages> 131-142, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: The consequent hardware required for fault identification entails additional complexity. To avoid the cost associated with complete hardware duplication, there has been an increasing focus in the fault tolerance literature on high-level synthesis [OK94] [CO96] [IK96] [OBK96] [Ora96] <ref> [OK96] </ref>. Tailoring high-level synthesis routines for compatibility with efficient hardware solutions facilitates the production of more compact, reliable designs. In this paper, we propose an algorithmic approach to error identification which introduces error encoding schemes into high-level synthesis. <p> Section 7 describes our implementation, and section 8 presents experimental results. Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback [OK94] [OBK96] <ref> [OK96] </ref> has been explored, as has recovery from permanent faults through spares [CF90], or graceful degradation [CO96] [Ora96]. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. <p> When identification has occurred, the system is reconfigured to remove the faulty unit, and rollback to the last saved state is initiated. In this paper, we do not address rollback insertion or reconfiguration methodology but concentrate on fault identification. For efficient check point insertion and reconfiguration techniques refer to <ref> [OK96] </ref> and [Ora96] respectively. Our fault identification methods adopt the following assumptions: 1. As in most fault models in this domain, during error isolation we assume only a single functional unit is faulty.
Reference: [Ora96] <author> A. Orailoglu. </author> <title> Microarchitectural Synthesis of Gracefully Degradable, Dynamically Reconfigurable ASICs for Multiple Faults. </title> <booktitle> In Proceedings of International Conference on Computer Design, </booktitle> <pages> pages 112-117, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: The consequent hardware required for fault identification entails additional complexity. To avoid the cost associated with complete hardware duplication, there has been an increasing focus in the fault tolerance literature on high-level synthesis [OK94] [CO96] [IK96] [OBK96] <ref> [Ora96] </ref> [OK96]. Tailoring high-level synthesis routines for compatibility with efficient hardware solutions facilitates the production of more compact, reliable designs. In this paper, we propose an algorithmic approach to error identification which introduces error encoding schemes into high-level synthesis. <p> Though our scheme is compatible with a variety of fault tolerance techniques, the capacity to adjust to varying numbers of functional units inherent in high-level synthesis approaches makes our scheme particularly compatible with dynamic reconfiguration techniques such as graceful degradation [CO96] <ref> [Ora96] </ref>. While reconfiguration with detection through strict duplication is possible by discarding both the erro-neous unit and the unit that checks its calculation [NNM91], our system only requires the faulty unit to be discarded, thereby avoiding unnecessary reductions in resource utilization. <p> Since our approach is compatible with a broad range of reconfiguration schemes, adaptation of our system to particular methods of graceful degradation is not addressed here. Such reconfiguration approaches are presented in [CO96] and <ref> [Ora96] </ref> and are complementary to the work described herein. The remainder of the paper is organized as follows: section 2 supplies a short summary of previous work in the area. Section 3 outlines the proposed scheme, and the assumptions on which it is based. <p> Section 9 summarizes our work and results. 2 Previous Work Previous research has addressed fault tolerance from numerous perspectives. Recovery from transient errors through checkpointing and rollback [OK94] [OBK96] [OK96] has been explored, as has recovery from permanent faults through spares [CF90], or graceful degradation [CO96] <ref> [Ora96] </ref>. To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques [LR93] [OY93] [RJ94] [CB96]. <p> In this paper, we do not address rollback insertion or reconfiguration methodology but concentrate on fault identification. For efficient check point insertion and reconfiguration techniques refer to [OK96] and <ref> [Ora96] </ref> respectively. Our fault identification methods adopt the following assumptions: 1. As in most fault models in this domain, during error isolation we assume only a single functional unit is faulty.
Reference: [OY93] <author> C. G. Oh and H. Y. Youn. </author> <title> On Concurrent Error Detection, Location, and Correction in FFT Networks. </title> <booktitle> In Proceedings of International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 596-605, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques [LR93] <ref> [OY93] </ref> [RJ94] [CB96]. The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication.
Reference: [RJ94] <author> J. Rexford and N. K. Jha. </author> <title> Partitioned Encoding Schemes for Algorithm-Based Fault Tolerance in Massively Parallel Systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(6) </volume> <pages> 649-653, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: To facilitate utilization of these reconfiguration and recovery schemes, a variety of approaches to fault identification have been attempted. In general, these works have relied on the introduction of domain specific properties, which are later exploited through check-sum or similar techniques [LR93] [OY93] <ref> [RJ94] </ref> [CB96]. The introduction of generic error encoding techniques that are not based on the interjection of such properties has not been tried. Several alternatives to error isolation through error codes have been proposed [DSH89] [NNM91] [IK96]. In [NNM91], detection was achieved through complete hardware duplication.
Reference: [SS82] <author> D. P. Siewiorek and R. S. Swarz. </author> <title> The Theory and Practice of Reliable System Design. </title> <publisher> Digital Press, </publisher> <year> 1982. </year>
Reference-contexts: More and more pilots, surgical patients, and even everyday motorists bet their lives daily on the reliability of their electronics. Thus, the need for reliable computational equipment is both immediate and increasing. Arguably the most desirable solution to this expanding need for reliability is graceful degradation <ref> [SS82] </ref>. When one portion of a critical application is compromised, it is crucial for its contribution to be covered by other units. Such is the case currently for multiple engine airplanes. When one engine fails, the remaining engines are utilized to facilitate continued functionality until the journey can be completed.
Reference: [Ver89] <author> P. Vera. </author> <title> Introduction to the Theory of Error-Correction Codes. </title> <publisher> Wiley, </publisher> <year> 1989. </year>
Reference-contexts: Thus, while unit B in table 3 is differentiated from unit F by track 1, the tracks of F are still a subset of the tracks of B. 4 Encoding Error Identification Prop erties in Sets of Tracks A common error encoding technique for error isolation is Hamming code <ref> [Ver89] </ref>. There are some subtle differences, however, between the application of Hamming code to bit correction, and to functional unit error identification. Below is an analysis of the properties of Hamming code, followed by methods to extend it that enable complete identification.
References-found: 15

