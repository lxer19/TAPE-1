URL: http://www.cs.rpi.edu/~scorec/papers/97/jpdc/jpdc.ps
Refering-URL: http://www.cs.rpi.edu/~scorec/papers/97/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Adaptive Local Refinement with Octree Load-Balancing for the Parallel Solution of Three-Dimensional Conservation Laws  
Author: J. E. Flaherty, R. M. Loy, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz 
Address: Troy, New York 12180-3590, USA  
Affiliation: Scientific Computation Research Center Rensselaer Polytechnic Institute  
Abstract: Conservation laws are solved by a local Galerkin finite element procedure with adaptive space-time mesh refinement and explicit time integration. The Courant stability condition is used to select smaller time steps on smaller elements of the mesh, thereby greatly increasing efficiency relative to methods having a single global time step. Processor load imbalances, introduced at adaptive enrichment steps, are corrected by using traversals of an octree representing a spatial decomposition of the domain. To accommodate the variable time steps, octree partitioning is extended to use weights derived from element size. Partition boundary smoothing reduces the communications volume of partitioning procedures for a modest cost. Computational results comparing parallel octree and inertial partitioning procedures are presented for the three-dimensional Euler equations of compressible flow solved on an IBM SP2 computer. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Adjerid, J. E. Flaherty, P. Moore, and Y. Wang. </author> <title> High-order adaptive methods for parabolic systems. </title> <journal> Physica-D, </journal> <volume> 60 </volume> <pages> 94-111, </pages> <year> 1992. </year>
Reference-contexts: Adaptivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 2, 22, 33, 34] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- or p-refinement.
Reference: [2] <editor> C. G. Armstrong, ed. </editor> <booktitle> Advances in Engng. Software, vol. 13:5/6. Computational Mechanics Publ., </booktitle> <address> Southhampton, </address> <year> 1991. </year>
Reference-contexts: Adaptivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 2, 22, 33, 34] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- or p-refinement.
Reference: [3] <author> M. J. Berger. </author> <title> On conservation at grid interfaces. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 24(5) </volume> <pages> 967-984, </pages> <year> 1987. </year>
Reference-contexts: However, the maximum globally stable time 1 step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [3, 5, 7, 15] </ref> and unstructured [26] meshes. In Section 3, we introduce an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size.
Reference: [4] <author> M. J. Berger and S. H. Bokhari. </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Trans. Computers, </journal> <volume> 36(5) </volume> <pages> 570-580, </pages> <year> 1987. </year>
Reference-contexts: Although this method complicates load balancing, it leads to a large improvement in overall efficiency. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [4, 19, 32] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [35] performs recursive bisections of domains in directions normal to their principal axes of inertia. A parallel sort enables its parallel execution; however, it is still costly relative to solution time.
Reference: [5] <author> M. J. Berger and J. Oliger. </author> <title> Adaptive mesh refinement for hyperbolic partial differential equations. </title> <journal> J. Comput. Phys., </journal> <volume> 53 </volume> <pages> 484-512, </pages> <year> 1984. </year> <month> 15 </month>
Reference-contexts: However, the maximum globally stable time 1 step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [3, 5, 7, 15] </ref> and unstructured [26] meshes. In Section 3, we introduce an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size.
Reference: [6] <author> K. S. Bey, A. Patra, and J. T. Oden. </author> <title> hp-version discontinuous Galerkin methods for hyperbolic conservation laws: a parallel adaptive strategy. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 38(22) </volume> <pages> 3889-3907, </pages> <year> 1995. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. <p> If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 7. However, discretization error estimates <ref> [6, 11, 16] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [7] <author> R. Biswas. </author> <title> Parallel and Adaptive Methods for Hyperbolic Partial Differential Systems. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Rensselaer Polytechnic Institutue, Troy, </institution> <year> 1991. </year>
Reference-contexts: However, the maximum globally stable time 1 step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [3, 5, 7, 15] </ref> and unstructured [26] meshes. In Section 3, we introduce an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size.
Reference: [8] <author> R. Biswas, K. D. Devine, and J. E. Flaherty. </author> <title> Parallel, adaptive finite element methods for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 14 </volume> <pages> 255-283, </pages> <year> 1994. </year>
Reference-contexts: Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 12, 13] </ref>.
Reference: [9] <author> C. L. Bottasso, H. L. de Cougny, M. Dindar, J. E. Flaherty, C. Ozturan, Z. Rusak, and M. S. Shephard. </author> <title> Compressible aerodynamics using a parallel adaptive time-discontinuous Galerkin least-squares finite element method. </title> <booktitle> In Proc. 12th AIAA Applied Aerodynamics Conference, </booktitle> <volume> no. </volume> <pages> 94-1888, </pages> <address> Colorado Springs, </address> <year> 1994. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement.
Reference: [10] <author> C. L. Bottasso, J. E. Flaherty, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> The quality of partitions produced by an iterative load balancer. </title> <editor> In B. K. Szymanski and B. Sinharoy, eds., </editor> <booktitle> Proc. Third Workshop on Languages, Compilers, and Runtime Systems, Troy, </booktitle> <pages> pp. 265-277, </pages> <year> 1996. </year>
Reference-contexts: The mean relative percent improvement of OCTPART compared to PSIRB for each run is 17-26%. 7.4 Partition Smoothing We evaluate the performance of partition smoothing by its effect on the cost of interprocessor communication. We appraise this cost using a global surface index (GSI) <ref> [10] </ref> which is the percentage of all element faces on interprocessor boundaries. For the discontinuous Galerkin method used herein, the GSI is equivalent to the number of edge "cuts" in the communication graph induced by a partitioning [23, 24, 38] normalized by the total number of these edges.
Reference: [11] <author> B. Cockburn and P.-A. Gremaud. </author> <title> Error estimates for finite element methods for scalar conservation laws. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 33 </volume> <pages> 522-554, </pages> <year> 1996. </year>
Reference-contexts: If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 7. However, discretization error estimates <ref> [6, 11, 16] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [12] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems. </title> <journal> J. Comput. Phys., </journal> <volume> 84 </volume> <pages> 90-113, </pages> <year> 1989. </year>
Reference-contexts: Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 12, 13] </ref>.
Reference: [13] <author> B. Cockburn and C.-W. Shu. </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework. </title> <journal> Math. Comp., </journal> <volume> 52 </volume> <pages> 411-435, </pages> <year> 1989. </year>
Reference-contexts: Finite element methods, however, have stencils that are invariant with method order, allowing them to model problems with complicated geometries more easily and to be efficiently parallelized. We discretize (1) using a discontinuous Galerkin finite element method <ref> [8, 12, 13] </ref>. <p> We specify it using a "numerical flux" function h (U + j ; U j ) dependent on solution states U + j j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible <ref> [13, 37] </ref>; we use van Leer's flux vector splitting [17, 42, 28]. 3 The Local Refinement Method Our LRM selects spatially-dependent time steps based upon the Courant stability condition for explicit time integration.
Reference: [14] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 7 </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement.
Reference: [15] <author> H. L. de Cougny, K. D. Devine, J. E. Flaherty, R. M. Loy, C. Ozturan, and M. S. Shep-hard. </author> <title> Load balancing for the parallel adaptive solution of partial differential equations. </title> <journal> Appl. Numer. Math., </journal> <volume> 16 </volume> <pages> 157-182, </pages> <year> 1994. </year>
Reference-contexts: However, the maximum globally stable time 1 step depends on the size of the smallest element of the mesh. Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform <ref> [3, 5, 7, 15] </ref> and unstructured [26] meshes. In Section 3, we introduce an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size. <p> A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. <p> Partition boundary smoothing reduced the GSI of a partitioned mesh by at least 22% for OCTPART and 18% for PSIRB. Additional smoothing opportunities may provide even greater improvements. Incremental migration strategies for use with adaptivity are being developed <ref> [15, 17] </ref>. If cost or locality of data movement is more important than global load balance, another approach with OCTPART may be taken. The processors may shift partition boundaries, thus, migrating subtrees from a processor p i to its neighbors p i1 and p i+1 .
Reference: [16] <author> K. D. Devine and J. E. Flaherty. </author> <title> Parallel adaptive hp-refinement techniques for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <volume> 20 </volume> <pages> 367-386, </pages> <year> 1996. </year>
Reference-contexts: projection as Z V T (U j u 0 ) do = 0; t = 0; 8V 2 S j ; j = 1; 2; : : : ; J: (3b) Results of Section 7 use piecewise constant (p=0) approximations and explicit Euler inte gration; however, p-refinement may be incorporated <ref> [16] </ref>. The normal component of the flux f n (u) = i=1 remains unspecified on @ j since the approximate solution is discontinuous there. <p> If desired, they may be combined to form element-based indicators. Experience suggests that a density gradient scaled by element volume is most informative, and this indicator was used for the problem presented in Section 7. However, discretization error estimates <ref> [6, 11, 16] </ref> must be developed for compressible flow applications. The rejection threshold is selected so that accepted steps provide acceptable solution resolution. Refinement and coarsening thresholds, respectively, are the error indicator values above and below which an element will be scheduled for refinement or coarsening.
Reference: [17] <author> K. D. Devine, J. E. Flaherty, R. Loy, and S. Wheat. </author> <title> Parallel partitioning strategies for the adaptive solution of conservation laws. </title> <editor> In I. Babuska, J. E. Flaherty, W. D. Henshaw, J. E. Hopcroft, J. E. Oliger, and T. Tezduyar, eds., </editor> <title> Modeling, Mesh Generation, and Adaptive Numerical Methods for Partial Differential Equations, </title> <journal> vol. </journal> <volume> 75, </volume> <pages> pp. 215-242, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg, </address> <year> 1995. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. <p> We describe a dynamic partitioning technique that exploits the properties of octree-structured meshes. Since such trees are easily constructed from arbitrary meshes, the procedure is independent of octree mesh generation. Partitioning may be done serially (Section 4) or in parallel (Section 5) <ref> [17] </ref>. In either case, it is inexpensive; hence, it may be used with adaptive procedures. Partitioning requires tree traversals that (i) calculate the processing costs of subtrees and (ii) form the partitions. <p> We specify it using a "numerical flux" function h (U + j ; U j ) dependent on solution states U + j j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [13, 37]; we use van Leer's flux vector splitting <ref> [17, 42, 28] </ref>. 3 The Local Refinement Method Our LRM selects spatially-dependent time steps based upon the Courant stability condition for explicit time integration. <p> This linear communication pattern is possible due to the unidimensionality of the partitioning traversal. 10 6 Partition Smoothing Application of the octree-based partitioning method to octree-generated meshes yields communications volumes similar to recursive spectral bisection <ref> [17] </ref>. However, since mesh refinement and coarsening are independent of the octree, elements are not necessarily aligned with octant boundaries. Thus, choosing partition boundaries based on octants yields partitions with bumpy surfaces, which increase communication costs. This effect may be reduced by smoothing the partition boundaries [20, 29]. <p> visited per element time step, a measure of the overhead involved with finding candidate elements to step, was reduced from 5.88-7.05 to 3.73-4.25. 7.2 Size-Weighted Balancing Let the time-step imbalance be the maximum number of elements time stepped on a processor relative to the average number stepped on all processors <ref> [17] </ref>. Likewise, let the flux imbalance be the maximum number of fluxes computed on a processor relative to the average number computed on all processors. In either case, let the average imbalance at simulation time t be a weighted average of all imbalances to time t. <p> Partition boundary smoothing reduced the GSI of a partitioned mesh by at least 22% for OCTPART and 18% for PSIRB. Additional smoothing opportunities may provide even greater improvements. Incremental migration strategies for use with adaptivity are being developed <ref> [15, 17] </ref>. If cost or locality of data movement is more important than global load balance, another approach with OCTPART may be taken. The processors may shift partition boundaries, thus, migrating subtrees from a processor p i to its neighbors p i1 and p i+1 .
Reference: [18] <author> R. E. Dillon Jr. </author> <title> A parametric study of perforated muzzle brakes. </title> <type> ARDC Technical Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: In practice, the number of boundary faces on a processor may be reduced from 0-25%. 7 Results Consider the three-dimensional unsteady compressible flow in a cylinder containing a cylindrical vent. This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [18] </ref>. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. [30]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders. <p> This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [18] </ref>. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. [30]. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders.
Reference: [19] <author> C. Farhat and M. Lesoinne. </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 36 </volume> <pages> 745-764, </pages> <year> 1993. </year>
Reference-contexts: Although this method complicates load balancing, it leads to a large improvement in overall efficiency. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [4, 19, 32] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [35] performs recursive bisections of domains in directions normal to their principal axes of inertia. A parallel sort enables its parallel execution; however, it is still costly relative to solution time.
Reference: [20] <author> C. Farhat, N. Maman, and G. W. Brown. </author> <title> Mesh partitioning for implicit computations via iterative domain decomposition: impact and optimization of the subdomain aspect ratio. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 38 </volume> <pages> 989-1000, </pages> <year> 1995. </year>
Reference-contexts: However, since mesh refinement and coarsening are independent of the octree, elements are not necessarily aligned with octant boundaries. Thus, choosing partition boundaries based on octants yields partitions with bumpy surfaces, which increase communication costs. This effect may be reduced by smoothing the partition boundaries <ref> [20, 29] </ref>. To do this, each processor traverses its boundary looking for elements that satisfy the following criteria: (i) Four faces adjacent to four other processors. This is an isolated element that is migrated to any processor sharing a face.
Reference: [21] <author> J. E. Flaherty, R. M. Loy, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz. </author> <title> Parallel structures and dynamic load balancing for adaptive finite element computation. </title> <type> SCOREC Report 22-1996, </type> <institution> Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, </institution> <year> 1996. </year>
Reference-contexts: These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. A Parallel Mesh Database <ref> [21, 35] </ref> provides operators to create and manipulate distributed mesh data, and a parallel octree library supports the creation and distribution of octree structures. We describe a dynamic partitioning technique that exploits the properties of octree-structured meshes.
Reference: [22] <author> P. L. George. </author> <title> Automatic Mesh Generation. </title> <publisher> John Wiley and Sons, Ltd., </publisher> <address> Chichester, </address> <year> 1991. </year>
Reference-contexts: Adaptivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 2, 22, 33, 34] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- or p-refinement.
Reference: [23] <author> B. Hendrickson and R. Leland. </author> <title> The Chaco user's guide, version 1.0. </title> <type> Technical Report SAND93-2339, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, </address> <year> 1993. </year>
Reference-contexts: We appraise this cost using a global surface index (GSI) [10] which is the percentage of all element faces on interprocessor boundaries. For the discontinuous Galerkin method used herein, the GSI is equivalent to the number of edge "cuts" in the communication graph induced by a partitioning <ref> [23, 24, 38] </ref> normalized by the total number of these edges. Normalization makes the metric independent of problem size. The effect of partition boundary smoothing on the GSI is shown for a run of 16 rebalanc-ings for OCTPART and PSIRB in Figure 8.
Reference: [24] <author> B. Hendrickson and R. Leland. </author> <title> Multidimensional spectral load balancing. </title> <type> Technical Report SAND93-0074, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, </address> <year> 1993. </year>
Reference-contexts: We appraise this cost using a global surface index (GSI) [10] which is the percentage of all element faces on interprocessor boundaries. For the discontinuous Galerkin method used herein, the GSI is equivalent to the number of edge "cuts" in the communication graph induced by a partitioning <ref> [23, 24, 38] </ref> normalized by the total number of these edges. Normalization makes the metric independent of problem size. The effect of partition boundary smoothing on the GSI is shown for a run of 16 rebalanc-ings for OCTPART and PSIRB in Figure 8.
Reference: [25] <author> Z. Johan, K. Mathur, and S. L. Johnsson. </author> <title> An efficient communication strategy for finite element methods on the Connection Machine CM-5 system. </title> <type> Technical Report 256, </type> <institution> Thinking Machines Corporation, </institution> <year> 1993. </year>
Reference-contexts: In Section 6, we describe a partition boundary smoothing operation which is used to reduce the number of faces lying on partition boundaries. The resulting partitions have approximately the same communications volume as other more expensive strategies <ref> [25, 32] </ref>. Using an IBM SP2 computer, we apply the LRM and the parallel octree-based partitioning technique to three-dimensional compressible flow problems involving the Euler equations.
Reference: [26] <author> W. L. Kleb and J. T. Batina. </author> <title> Temporal adaptive Euler/Navier-Stokes algorithm involving unstructured dynamic meshes. </title> <journal> AIAA J., </journal> <volume> 30(8) </volume> <pages> 1980-1985, </pages> <year> 1992. </year>
Reference-contexts: Therefore, an unintended side effect of h-refinement is a reduction of computational efficiency on larger elements. In order to increase efficiency, temporal adaptivity has been applied to overlapping two-dimensional uniform [3, 5, 7, 15] and unstructured <ref> [26] </ref> meshes. In Section 3, we introduce an explicit Local Refinement Method (LRM) for the solution of time-dependent conservation laws on three-dimensional unstructured meshes. It permits time steps on elements to be proportional to their size. Larger elements take larger time steps, so work is concentrated on the smaller ones. <p> Since flux calculations are typically the most expensive part of the integration, this savings outweighs 5 any possible losses due to using reduced time steps. Choosing time steps that are fractional powers of two also helps to organize the computation <ref> [26] </ref>. 3.1 Error Control Error control is accomplished through backtracking. Time steps are either accepted or rejected based on whether or not elemental error indicators exceed a prescribed tolerance. Rejected time steps are repeated subsequent to adaptive space-time h-refinement and rebal-ancing. <p> In a cannon, this helps to reduce recoil. These flow features compare favorably with experimental and numerical results of Nagamatsu et al. [30]. The superior numerical properties of the LRM <ref> [26] </ref> allowed the same solution to be computed with greater accuracy using only 8 mesh enrichments, as opposed to the 61 needed with a global time step.
Reference: [27] <author> E. Leiss and H. Reddy. </author> <title> Distributed load balancing: design and performance analysis. </title> <editor> W. M. </editor> <booktitle> Kuck Research Computation Laboratory, </booktitle> <volume> 5 </volume> <pages> 205-270, </pages> <year> 1989. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement.
Reference: [28] <author> R. A. Ludwig, J. E. Flaherty, F. Guerinoni, P. L. Baehmann, and M. S. Shephard. </author> <title> Adaptive solutions of the Euler equations using finite quadtree and octree grids. </title> <journal> Computers and Structures, </journal> <volume> 30 </volume> <pages> 327-336, </pages> <year> 1988. </year>
Reference-contexts: We specify it using a "numerical flux" function h (U + j ; U j ) dependent on solution states U + j j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [13, 37]; we use van Leer's flux vector splitting <ref> [17, 42, 28] </ref>. 3 The Local Refinement Method Our LRM selects spatially-dependent time steps based upon the Courant stability condition for explicit time integration.
Reference: [29] <author> T. Minyard, Y. Kallinderis, and K. Schulz. </author> <title> Parallel load balancing for dynamic execution environments. </title> <booktitle> In Proc. 34th Aerospace Sciences Meeting and Exhibit, Reno, </booktitle> <volume> no. </volume> <pages> 96-0295, </pages> <year> 1996. </year>
Reference-contexts: However, since mesh refinement and coarsening are independent of the octree, elements are not necessarily aligned with octant boundaries. Thus, choosing partition boundaries based on octants yields partitions with bumpy surfaces, which increase communication costs. This effect may be reduced by smoothing the partition boundaries <ref> [20, 29] </ref>. To do this, each processor traverses its boundary looking for elements that satisfy the following criteria: (i) Four faces adjacent to four other processors. This is an isolated element that is migrated to any processor sharing a face. <p> The coloring may be done using subphases where a processor first sends elements to higher-numbered processors and then sends them to lower-numbered ones. When three processors are involved, three subphases are necessary based on their relative order. Minyard et al. <ref> [29] </ref> perform processor boundary smoothing by a similar iterative method. They identify elements on interprocessor boundaries whose vertices are all shared by two processors. These correspond to cases (ii), (iii), and (v). Patterns involving more than two processors (case (i)) are not considered.
Reference: [30] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano. </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake. </title> <type> ARDEC Technical Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1987. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [18]. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. <ref> [30] </ref>. Our focus is on the quasi-steady flow that exists behind the contact surface for a short time; thus, we initiate the problem by rupturing a hypothetical diaphragm between the two cylinders. <p> In a cannon, this helps to reduce recoil. These flow features compare favorably with experimental and numerical results of Nagamatsu et al. <ref> [30] </ref>. The superior numerical properties of the LRM [26] allowed the same solution to be computed with greater accuracy using only 8 mesh enrichments, as opposed to the 61 needed with a global time step.
Reference: [31] <author> L. Oliker, R. Biswas, and R. C. Strawn. </author> <title> Parallel implementaion of an adaptive scheme for 3D unstructured grids on the SP2. </title> <booktitle> In Proc. 3rd International Workshop on Parallel Algorithms for Irregularly Structured Problems, </booktitle> <address> Santa Barbara, </address> <year> 1996. </year>
Reference-contexts: If the error is unacceptable, the solution is rolled back to the beginning of the major step, h-refinement is performed, and the process repeated. 3.2 h-Refinement Mesh refinement and coarsening utilize edge-based error indicators to determine where to perform enrichment <ref> [31, 35] </ref>. An element may be subdivided isotropically or anisotropically depending on the number of its edges selected for refinement. Forty-two templates are employed to accomplish this efficiently. Interprocessor communication is required to update shared vertices, edges, and faces; however, element migration is not necessary.
Reference: [32] <author> A. Pothen, H. Simon, and K.-P. Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: Although this method complicates load balancing, it leads to a large improvement in overall efficiency. Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed <ref> [4, 19, 32] </ref>; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) [35] performs recursive bisections of domains in directions normal to their principal axes of inertia. A parallel sort enables its parallel execution; however, it is still costly relative to solution time. <p> In Section 6, we describe a partition boundary smoothing operation which is used to reduce the number of faces lying on partition boundaries. The resulting partitions have approximately the same communications volume as other more expensive strategies <ref> [25, 32] </ref>. Using an IBM SP2 computer, we apply the LRM and the parallel octree-based partitioning technique to three-dimensional compressible flow problems involving the Euler equations.
Reference: [33] <author> M. S. Shephard. </author> <title> Approaches to the automatic generation and control of finite element meshes. </title> <journal> Applied Mechanics Review, </journal> <volume> 41(4) </volume> <pages> 169-185, </pages> <year> 1988. </year>
Reference-contexts: Adaptivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 2, 22, 33, 34] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- or p-refinement.
Reference: [34] <author> M. S. Shephard. </author> <title> Update to: Approaches to the automatic generation and control of finite element meshes. </title> <journal> Applied Mechanics Reviews, </journal> <volume> 49(10, part 2):S5-S14, </volume> <year> 1996. </year> <month> 17 </month>
Reference-contexts: Adaptivity on parallel computers, however, introduces complications that do not arise with simpler solution strategies. Adaptive algorithms that utilize unstructured meshes <ref> [1, 2, 22, 33, 34] </ref> make the task of balancing processor computational load more difficult than with uniform structures. Furthermore, a balanced loading will become unbalanced as degrees of freedom are introduced or removed by adaptive h- or p-refinement.
Reference: [35] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bottasso, and M. W. Beall. </author> <title> Parallel automated adaptive procedures for unstructured meshes. </title> <booktitle> In Parallel Computing in CFD, </booktitle> <volume> no. R-807, </volume> <pages> pp. </pages> <address> 6.1-6.49. Agard, Neuilly-Sur-Seine, </address> <year> 1995. </year>
Reference-contexts: Poor partitioning of data across the processors of a parallel computer leads to high communication costs. Several static partitioning algorithms have been developed [4, 19, 32]; however, these may be inefficient in an adaptive computational environment. Parallel Sort Inertial Recursive Bisection (PSIRB) <ref> [35] </ref> performs recursive bisections of domains in directions normal to their principal axes of inertia. A parallel sort enables its parallel execution; however, it is still costly relative to solution time. <p> A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. <p> These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. A Parallel Mesh Database <ref> [21, 35] </ref> provides operators to create and manipulate distributed mesh data, and a parallel octree library supports the creation and distribution of octree structures. We describe a dynamic partitioning technique that exploits the properties of octree-structured meshes. <p> If the error is unacceptable, the solution is rolled back to the beginning of the major step, h-refinement is performed, and the process repeated. 3.2 h-Refinement Mesh refinement and coarsening utilize edge-based error indicators to determine where to perform enrichment <ref> [31, 35] </ref>. An element may be subdivided isotropically or anisotropically depending on the number of its edges selected for refinement. Forty-two templates are employed to accomplish this efficiently. Interprocessor communication is required to update shared vertices, edges, and faces; however, element migration is not necessary. <p> Rebalancings 1, 4, 7, : : :, 13 are performed after mesh coarsening while 2, 5, 8, : : :, 14 follow mesh refinement. The other rebalancing indices follow "snapping," which is an operation to assure mesh validity with respect to geometry that generally involves element migration <ref> [35] </ref>. OCTPART tends to move fewer elements than PSIRB after the coarsening and snapping 13 phases, and is generally comparable to or slightly better than PSIRB after refinement. between the two techniques.
Reference: [36] <author> M. S. Shephard and M. K. Georges. </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique. </title> <journal> Int. J. Numer. Meth. Engng., </journal> <volume> 32(4) </volume> <pages> 709-749, </pages> <year> 1991. </year>
Reference-contexts: These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes <ref> [36] </ref>. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement. A Parallel Mesh Database [21, 35] provides operators to create and manipulate distributed mesh data, and a parallel octree library supports the creation and distribution of octree structures. <p> After the enrichment procedure, elements average their four vertex solutions to restore the original element-oriented solution. To reduce diffusion, this process is avoided, where possible, by allowing newly created elements to inherit solution values from the previous elements occupying their space. 4 Octree Partitioning An octree-based mesh generator <ref> [36] </ref> recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required. Octant subdivision is initially based on geometric features of the domain, but solution-based criteria are introduced during adaptive h-refinement. <p> introduce additional storage and synchronization requirements, the demonstrated factor of at least 7 in flux computation and at least 14 in time step computation more than justifies these costs. 14 Octree-based partitioning is an effective and efficient partitioning strategy that may ei-ther be used in conjunction with octree mesh generation <ref> [36] </ref> or on its own. It provides a suitable means of controlling communication volumes based solely on a geometric decomposition of space. The amount of data movement performed by OCTPART is superior to to that of PSIRB by approximately 24%. OCTPART is also faster than PSIRB by 17-26%.
Reference: [37] <author> C.-W. Shu and S. Osher. </author> <title> Efficient implementation of essentially non-oscillatory shock-capturing schemes, II. </title> <journal> J. Comput. Phys., </journal> <volume> 27 </volume> <pages> 1-31, </pages> <year> 1978. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) [40, 41] and Essentially Non-Oscillatory (ENO) <ref> [37] </ref> methods, usually achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers. <p> We specify it using a "numerical flux" function h (U + j ; U j ) dependent on solution states U + j j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible <ref> [13, 37] </ref>; we use van Leer's flux vector splitting [17, 42, 28]. 3 The Local Refinement Method Our LRM selects spatially-dependent time steps based upon the Courant stability condition for explicit time integration.
Reference: [38] <author> H. D. Simon. </author> <title> Partitioning of unstructured problems for parallel processing. </title> <journal> Comp. Sys. Engng., </journal> <volume> 2 </volume> <pages> 135-148, </pages> <year> 1991. </year>
Reference-contexts: We appraise this cost using a global surface index (GSI) [10] which is the percentage of all element faces on interprocessor boundaries. For the discontinuous Galerkin method used herein, the GSI is equivalent to the number of edge "cuts" in the communication graph induced by a partitioning <ref> [23, 24, 38] </ref> normalized by the total number of these edges. Normalization makes the metric independent of problem size. The effect of partition boundary smoothing on the GSI is shown for a run of 16 rebalanc-ings for OCTPART and PSIRB in Figure 8.
Reference: [39] <author> M. L. Simone, M. S. Shephard, J. E. Flaherty, and R. M. Loy. </author> <title> A distributed octree and neighbor-finding algorithms for parallel mesh generation. </title> <type> Technical Report 23-1996, </type> <institution> Rensselaer Polytechnic Institute, Scientific Computation Research Center, Troy, </institution> <year> 1996. </year>
Reference-contexts: The distributed octree is still defined by octants with parent and child links; however, some links are off-processor. In the design of the parallel octree library, all parent 7 and child queries return a pointer to a structure in the local processor's memory <ref> [39] </ref>. This is queried to determine if an object is local or not. If it is local, it is processed in the normal fashion. If not, the processor number and remote address are available. <p> However, remote links require one level of indirection and storage of the intermediate structure. Since most links will be local, there is an overall space savings <ref> [39] </ref>. A generalized concept of an octree root must be adopted with a distributed octree structure. An octant's parent may not exist on the local processor, and, in this case, we call the octant a local root.
Reference: [40] <author> P. K. Sweby. </author> <title> High resolution schemes using flux limiters for hyperbolic conservation laws. </title> <journal> SIAM J. Numer. Anal, </journal> <volume> 21 </volume> <pages> 995-1011, </pages> <year> 1984. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) <ref> [40, 41] </ref> and Essentially Non-Oscillatory (ENO) [37] methods, usually achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers.
Reference: [41] <author> B. Van Leer. </author> <title> Towards the ultimate conservative difference scheme. IV. A new approach to numerical convection. </title> <journal> J. Comput. Phys., </journal> <volume> 23 </volume> <pages> 276-299, </pages> <year> 1977. </year>
Reference-contexts: The subscripts t and x i , i = 1; 2; 3, denote partial differentiation with respect to time and the spatial coordinates. Finite difference schemes for (1), such as the Total Variation Diminishing (TVD) <ref> [40, 41] </ref> and Essentially Non-Oscillatory (ENO) [37] methods, usually achieve high-order accuracy by using a computational stencil that enlarges with order. A wide stencil makes the methods difficult to implement on unstructured meshes and limits efficient implementation on parallel computers.
Reference: [42] <author> B. Van Leer. </author> <title> Flux vector splitting for the Euler equations. </title> <type> ICASE Report 82-30, </type> <institution> ICASE, NASA Langley Research Center, Hampton, </institution> <year> 1982. </year>
Reference-contexts: We specify it using a "numerical flux" function h (U + j ; U j ) dependent on solution states U + j j on the inside and outside, respectively, of @ j : Several numerical flux functions are possible [13, 37]; we use van Leer's flux vector splitting <ref> [17, 42, 28] </ref>. 3 The Local Refinement Method Our LRM selects spatially-dependent time steps based upon the Courant stability condition for explicit time integration.
Reference: [43] <author> V. Vidwans, Y. Kallinderis, and V. Venkatakrishnan. </author> <title> Parallel dynamic load-balancing algorithm for three-dimensional adaptive unstructured grids. </title> <journal> AIAA J., </journal> <volume> 32(3) </volume> <pages> 497-505, </pages> <year> 1994. </year>
Reference-contexts: A parallel sort enables its parallel execution; however, it is still costly relative to solution time. This has led to the use of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors <ref> [6, 9, 14, 15, 17, 27, 35, 43, 44] </ref>. These methods provide inexpensive balancings, but may not reduce communication costs. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes [36]. We use a hierarchical representation of finite element meshes that is appropriate for h- or p-refinement.

References-found: 43

