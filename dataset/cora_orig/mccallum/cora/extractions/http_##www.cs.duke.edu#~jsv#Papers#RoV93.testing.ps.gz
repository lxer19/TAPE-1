URL: http://www.cs.duke.edu/~jsv/Papers/RoV93.testing.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node51.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Using Vapnik-Chervonenkis Dimension to Analyze the Testing Complexity of Program Segments  
Author: Kathleen Romanik Jeffrey Scott Vitter 
Note: Part of this research was done while the first author was a graduate student at the  The research was supported in part by NSF Grant CCR-9112976, ONR Grant N00014-92 J-1254, NSERC, and IRIS National Network of Centres of Excellence. Supported in part by NSF Grant CCR-9007851.  
Address: 3480 University Street Montreal, Quebec, Canada H3A 2A7  Durham, NC 27708-0129  College Park.  
Affiliation: School of Computer Science McGill University  Department of Computer Science Duke University  University of Maryland at  
Abstract-found: 0
Intro-found: 1
Reference: [Baa88] <author> Baase, S. </author> <year> (1988), </year> <title> "Computer Algorithms: Introduction to Design and Analysis," chapter 7, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: For a class P of polynomials to have VCP-dimension k, it must contain a program p that changes sign at least k 1 times. Therefore, p must compute a polynomial of degree at least k 1 that has at least k 1 distinct real zeros. Using Horner's method <ref> [Baa88] </ref> it is known that any degree k polynomial can be computed with 2k elementary operations (addition, subtraction, multiplication). Therefore VCP-dimension (P n ) is at least b n 2 c + 1.
Reference: [BBK77] <author> Barzdin, J.M, Bicevskis, J.J. and Kalninsh, A.A. </author> <year> (1977), </year> <title> Automatic Construction of Complete Sample System for Program Testing in "Proc. </title> <booktitle> IFIP Congress 1977," </booktitle> <editor> (B. Gilchrist, </editor> <publisher> Ed.), </publisher> <pages> pp. 57-62, </pages> <address> Toronto, </address> <month> August 8-12 </month> <year> 1977, </year> <booktitle> International Federation for Information Processing, </booktitle> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: Although this may seem like a contrived program since the boolean expression is obviously always true and one branch is never executed, real programs with more complicated branching structures can contain unexecutable paths that are not easily detected. Barzdin, Bicevskis and Kalninsh <ref> [BBK77] </ref> proved that the problem of determining which branches of a program are realizable (a branch is realizable if some input causes the branch to be taken during execution of the program) is undecidable. Proposition 2.3.
Reference: [BC76] <author> Borodin, A. and Cook, S. </author> <year> (1976), </year> <title> On the Number of Additions to Compute Specific Polynomials, </title> <journal> SIAM J. Comput., </journal> <volume> 5(1) </volume> <pages> 146-157. </pages>
Reference-contexts: Other work has been done [RS72] to get the number of operations for evaluating a degree k polynomial down to 3k 2 , which means that VCP-dimension (P n ) is even higher. On the other hand, Borodin and Cook <ref> [BC76] </ref> have demonstrated a polynomial with 3 bn=3c real, distinct zeros that can be computed with n operations, so just examining the largest number of real, distinct zeros that can occur in a polynomial computed by a program in P n is not sufficient to obtain a good bound on the <p> Since Borodin and Cook <ref> [BC76] </ref> have also proven that "most" polynomials of degree greater than or equal to (n + 2) 2 cannot be computed with n operations, even when an unbounded number of multiplication operations are allowed, it appears that VCP-dimension (P n ) is no more than O (n 2 ).
Reference: [BEHW89] <author> Blumer, A., Ehrenfeucht, A., Haussler, D., and Warmuth, M. </author> <year> (1989), </year> <title> Learn-ability and the Vapnik-Chervonenkis Dimension, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 36(4) </volume> <pages> 929-965. </pages>
Reference-contexts: For this reason we introduce another measure of testing complexity. In the field of computational learning theory <ref> [VC71, BEHW89] </ref> Vapnik-Chervonenkis dimension (or VC-dimension) characterizes the complexity of a class of objects to be learned. We define a similar notion of dimension for program classes that will give an indication of the testing complexity of these classes. <p> Since our model for random approximate testing is similar to the model of <ref> [BEHW89] </ref> for PAC learning, we introduce a notion of dimension similar to VC-dimension for program classes that gives an indication of the testing complexity of these classes.
Reference: [BK89] <author> Blum, M. and Kannan, S. </author> <year> (1989), </year> <title> Designing Programs That Check Their Work in "Proc. </title> <booktitle> 21 st ACM Sympos. on Theory of Comput.," </booktitle> <pages> pp. 86-97. </pages>
Reference-contexts: We emphasize that we are not proposing random testing as an effective testing methodology, but rather we are using it as a basis for comparing the testing complexity of different program constructs and combinations of constructs. However, other work has been done recently <ref> [BK89, BLR90, Lip91, GLR + 91] </ref> to make random testing a viable approach to testing software.
Reference: [BLR90] <author> Blum, M., Luby, M. and Rubinfeld, R. </author> <year> (1990), </year> <title> Self-Testing/Correcting with Applications to Numerical Problems in "Proc. </title> <booktitle> 22 nd ACM Sympos. on Theory of Comput.," </booktitle> <pages> pp. 73-83. </pages>
Reference-contexts: We emphasize that we are not proposing random testing as an effective testing methodology, but rather we are using it as a basis for comparing the testing complexity of different program constructs and combinations of constructs. However, other work has been done recently <ref> [BK89, BLR90, Lip91, GLR + 91] </ref> to make random testing a viable approach to testing software.
Reference: [BS87] <author> Basili, V.R. and Selby, R.W. </author> <year> (1987), </year> <title> Comparing the Effectiveness of Software Testing Strategies, </title> <journal> IEEE Trans. Software Engrg., SE-13(12):1278-1296. </journal>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data [GG75, MH81, DMMP87] and in evaluating different testing methodologies <ref> [Bud81, DN84, BS87, Ham89] </ref>. A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness [Wey88, Tia92, TZ92].
Reference: [Bud81] <author> Budd, T.A. </author> <year> (1981), </year> <title> Mutation Analysis: Ideas, Examples, Problems and Prospects in "Computer Program Testing" (B. </title> <editor> Chandrasekaran and S. Radicchi, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 129-148, </pages> <publisher> North-Holland Publishing Company. </publisher>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data [GG75, MH81, DMMP87] and in evaluating different testing methodologies <ref> [Bud81, DN84, BS87, Ham89] </ref>. A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness [Wey88, Tia92, TZ92].
Reference: [DMMP87] <author> DeMillo, R.A., McCracken, W.M., Martin, R.J. and Passafiume, J.F. </author> <year> (1987), </year> <title> "Software Testing and Evaluation", </title> <publisher> chapters 1,2,3.1,3.3, The Ben-jamin/Cummings Publishing Company, </publisher> <address> Menlo Park, CA. </address> <month> 41 </month>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data <ref> [GG75, MH81, DMMP87] </ref> and in evaluating different testing methodologies [Bud81, DN84, BS87, Ham89]. A related area of software engineering is the study of software complexity.
Reference: [DN84] <author> Duran, J.W. and Ntafos, S.C. </author> <year> (1984), </year> <title> An Evaluation of Random Testing, </title> <journal> IEEE Trans. Software Engrg., SE-10(4):438-444. </journal>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data [GG75, MH81, DMMP87] and in evaluating different testing methodologies <ref> [Bud81, DN84, BS87, Ham89] </ref>. A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness [Wey88, Tia92, TZ92].
Reference: [GG75] <author> Goodenough, J.B. and Gerhart, S.L. </author> <year> (1975), </year> <title> Toward a Theory of Test Data Selection, </title> <journal> IEEE Trans. Software Engrg., SE-1(2):156-173. </journal>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data <ref> [GG75, MH81, DMMP87] </ref> and in evaluating different testing methodologies [Bud81, DN84, BS87, Ham89]. A related area of software engineering is the study of software complexity.
Reference: [GJ93] <author> Goldberg, P. and Jerrum, M. </author> <year> (1993), </year> <title> Bounding the Vapnik-Chervonenkis Dimension of Concept Classes Parameterized by Real Numbers in "Proc. </title> <booktitle> 6 th ACM Workshop on Computational Learning Theory", </booktitle> <address> July 26-28, </address> <publisher> ACM Press. </publisher>
Reference-contexts: To obtain better upper bounds we use recent results by Goldberg and Jerrum <ref> [GJ93] </ref> in computational learning theory on bounding the VCP-dimension of classes parameterized by real numbers. We use the following theorem from their work. Theorem 4.3. [GJ93] Let C be a concept class where concepts and instances are represented by k and n real values, respectively. <p> To obtain better upper bounds we use recent results by Goldberg and Jerrum <ref> [GJ93] </ref> in computational learning theory on bounding the VCP-dimension of classes parameterized by real numbers. We use the following theorem from their work. Theorem 4.3. [GJ93] Let C be a concept class where concepts and instances are represented by k and n real values, respectively. <p> The operands permitted are constants, the input x, or a previous expression. 24 Theorem 4.5. For n 8, VCP-dimension (P fl n ) is infinite. Proof. We use techniques from <ref> [GJ93] </ref> for proving lower bounds to demonstrate a subclass of P fl 8 that can shatter the set f1; 2; : : :; dg for any d &gt; 0.
Reference: [GLR + 91] <author> Gemmell, P., Lipton, R., Rubinfeld, R., Sudan, M. and Wigderson, A. </author> <year> (1991), </year> <title> Self-Testing/Correcting for Polynomials and for Approximate Functions in "Proc. </title> <booktitle> 23 rd ACM Sympos. on Theory of Comput." </booktitle>
Reference-contexts: We emphasize that we are not proposing random testing as an effective testing methodology, but rather we are using it as a basis for comparing the testing complexity of different program constructs and combinations of constructs. However, other work has been done recently <ref> [BK89, BLR90, Lip91, GLR + 91] </ref> to make random testing a viable approach to testing software.
Reference: [Hal77] <author> Halstead, M.H. </author> <year> (1977), </year> <title> "Elements of Software Science," </title> <publisher> Elsevier-North Holland, </publisher> <address> New York. </address>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures <ref> [Hal77, McC76, WHH79] </ref> and to compare various measures for their effectiveness [Wey88, Tia92, TZ92]. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
Reference: [Ham89] <author> Hamlet, R. </author> <year> (1989), </year> <title> Theoretical Comparison of Testing Methods in "Proc. </title> <booktitle> ACM SIGSOFT 3 rd Sympos. on Software Testing, Analysis, </booktitle> <editor> and Verification" (R.A. Kemmerer, Ed.), </editor> <month> December 13-15, </month> <pages> pp. 28-37. </pages>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data [GG75, MH81, DMMP87] and in evaluating different testing methodologies <ref> [Bud81, DN84, BS87, Ham89] </ref>. A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness [Wey88, Tia92, TZ92].
Reference: [Hau92] <author> Haussler, D. </author> <year> (1992), </year> <title> Decision Theoretic Generalizations of the PAC Model for Neural Net and Other Learning Applications, </title> <journal> Inform. and Comput. </journal> <volume> 100(1) </volume> <pages> 78-150. </pages>
Reference-contexts: If no such k exists, the VCP-dimension of P is infinite. 3.2 VCP versus Pseudo Dimension A similar measure to VCP-dimension, called pseudo dimension, has been defined by Haussler <ref> [Hau92] </ref>. He has shown that if this dimension is "small" for a set of functions, then the set of functions can be PAC learned. We define this measure now and compare it to VCP-dimension. Definition. ([Hau92]) For a family of functions F from a set S into R the pseudo dimension <p> Therefore, the results of Haussler using pseudo dimension that we employ next to bound the number of test points needed to randomly approximately test a program are valid for the classes we consider. Haussler <ref> [Hau92] </ref> has used the notion of pseudo dimension to get a bound on the number of random examples needed to PAC learn a function from a class of functions. <p> Since the programs we examine only use rational constants, they compute countable classes of functions, so we do not need to be concerned with this notion. Theorem 3.1. <ref> [Hau92] </ref> Let F be a permissible family of functions from S = R fiR into [0; K] with dim (F ) = d &lt; 1. Let M be a probability measure on S. <p> The family F has a nonnegative envelope f if f (x) jf (x)j for all f 2 F . Theorem 3.2. <ref> [Hau92] </ref> Let F be a family of functions with envelope f. <p> Theorem 3.2. [Hau92] Let F be a family of functions with envelope f. Then for any * &gt; 0, M (2*; F ) N (*; F ) M (*; F ): Theorem 3.3. <ref> [Pol84, Hau92] </ref> Let F be a family of functions from a set S into [0; K], where dim (F ) = d &lt; 1. Let M be a probability measure on S.
Reference: [HW87] <author> Haussler, D. and Welzl, E. </author> <year> (1987), </year> <title> "-Nets and Simplex Range Queries, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 127-151. </pages>
Reference-contexts: Repeat steps 1-4 several times to find the average number of distinct subsets obtainable by a large set of programs on an input sequence of length m. The number of different subsets obtained gives a lower bound on the VCP-dimension of the class, using a result in <ref> [HW87] </ref>. This result states that if the VCP-dimension of a class is d, then for an input sequence S of length m, where m d, the class will obtain no more than P d i ) m d + 1 different subsets of S.
Reference: [Lip91] <author> Lipton, R.J. </author> <year> (1991), </year> <title> New Directions in Testing in "Distributed Computing and Cryptography", </title> <journal> volume 2, DIMACS Ser. on Discrete Math. and Theoret. Comput. Sci., </journal> <pages> pp. 191-202. </pages>
Reference-contexts: We emphasize that we are not proposing random testing as an effective testing methodology, but rather we are using it as a basis for comparing the testing complexity of different program constructs and combinations of constructs. However, other work has been done recently <ref> [BK89, BLR90, Lip91, GLR + 91] </ref> to make random testing a viable approach to testing software.
Reference: [McC76] <author> McCabe, T.J. </author> <year> (1976), </year> <title> A Complexity Measure, </title> <journal> IEEE Trans. Software Engrg., SE-2(4):308-320. </journal>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures <ref> [Hal77, McC76, WHH79] </ref> and to compare various measures for their effectiveness [Wey88, Tia92, TZ92]. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
Reference: [MH81] <author> Miller, E. and Howden W.E., Eds. </author> <year> (1981), </year> <title> "Tutorial: Software Testing and Validation Techniques," </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction Program testing is an important subfield of the field of software engineering. Much work has been done in finding methods for selecting test data <ref> [GG75, MH81, DMMP87] </ref> and in evaluating different testing methodologies [Bud81, DN84, BS87, Ham89]. A related area of software engineering is the study of software complexity.
Reference: [MS93] <author> Macintyre, A. and Sontag, E.D. </author> <year> (1993), </year> <title> Finiteness Results for Sigmoidal Neural Networks in "Proc. </title> <booktitle> 25 th ACM Sympos. on Theory of Comput.," </booktitle> <pages> pp. 325-334. </pages>
Reference-contexts: That is, there are classes of functions with finite VCP-dimension and infinite pseudo dimension. For example, the class of all positive functions has VCP-dimension 0, but it has infinite pseudo dimension. Although pseudo dimension can be arbitrarily greater than VCP-dimension, Macintyre and Sontag <ref> [MS93] </ref> have observed that given a class of functions F : S ! R, a new class of functions F 0 : S fiR ! R can be created with the property that dim (F ) VCP-dimension (F 0 ) (in fact, equality holds).
Reference: [NP87] <author> Nolan, D. and Pollard, D. </author> <year> (1987), </year> <title> U-Processes: Rates of Convergence, </title> <journal> The Ann. of Statist. </journal> <volume> 15(2) </volume> <pages> 780-799. </pages>
Reference-contexts: Theorem 3.5. <ref> [NP87] </ref> If F and G are families of functions with envelopes f and g, then the class F + G := ff + g j f 2 F; g 2 Gg; with envelope f + g, satisfies N (2* 1 + 2* 2 ; F + G) N (* 1 ;
Reference: [Pol84] <author> Pollard, D. </author> <year> (1984), </year> <title> "Convergence of Stochastic Processes," </title> <publisher> Springer Ser. Statist., Springer-Verlag, </publisher> <address> New York. </address> <month> 42 </month>
Reference-contexts: Theorem 3.2. [Hau92] Let F be a family of functions with envelope f. Then for any * &gt; 0, M (2*; F ) N (*; F ) M (*; F ): Theorem 3.3. <ref> [Pol84, Hau92] </ref> Let F be a family of functions from a set S into [0; K], where dim (F ) = d &lt; 1. Let M be a probability measure on S.
Reference: [Pol86] <author> Pollard, D. </author> <year> (1986), </year> <title> Rates of Uniform Almost-Sure Convergence for Empirical Processes Indexed by Unbounded Classes of Functions, </title> <type> manuscript. </type>
Reference-contexts: Let M be a probability measure on S. Then for all 0 &lt; * K, M (*; F ) &lt; 2 2eK ln * : Theorem 3.4. <ref> [Pol86] </ref> Let F be a permissible family of functions from a set S into [0; K], and let M be a probability measure on S. Assume - &gt; 0; 0 &lt; ff &lt; 1, and m 1.
Reference: [RS72] <author> Reingold, E.M. and Stocks, A.I. </author> <year> (1972), </year> <title> Simple Proofs of Lower Bounds for Polynomial Evaluation in "Complexity of Computer Computations" (R.E. </title> <editor> Miller and J.W. Thatcher, </editor> <booktitle> Eds.), </booktitle> <pages> pp. 21-30, </pages> <publisher> Plenum Press. </publisher>
Reference-contexts: Using Horner's method [Baa88] it is known that any degree k polynomial can be computed with 2k elementary operations (addition, subtraction, multiplication). Therefore VCP-dimension (P n ) is at least b n 2 c + 1. Other work has been done <ref> [RS72] </ref> to get the number of operations for evaluating a degree k polynomial down to 3k 2 , which means that VCP-dimension (P n ) is even higher.
Reference: [Tia92] <author> Tian, J. </author> <year> (1992), </year> <title> Understanding and Using Program Complexity to Improve Software Development, </title> <type> PhD thesis, </type> <institution> University of Maryland at College Park, College Park, MD, </institution> <note> Technical Report CS-TR-2921/UMIACS-TR-92-72. </note>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness <ref> [Wey88, Tia92, TZ92] </ref>. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
Reference: [TZ92] <author> Tian, J. and Zelkowitz, M.V. </author> <year> (1992), </year> <title> A Formal Program Complexity Model and Its Application, </title> <journal> J. Systems Software, </journal> <volume> 17(3) </volume> <pages> 253-266. </pages>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness <ref> [Wey88, Tia92, TZ92] </ref>. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
Reference: [VC71] <author> Vapnik, V.N. and Chervonenkis, Y.A. </author> <year> (1971), </year> <title> On the Uniform Convergence of Relative Frequencies of Events to Their Probabilities, </title> <journal> Theory Probab. Appl., </journal> <volume> 16(2) </volume> <pages> 264-280. </pages>
Reference-contexts: For this reason we introduce another measure of testing complexity. In the field of computational learning theory <ref> [VC71, BEHW89] </ref> Vapnik-Chervonenkis dimension (or VC-dimension) characterizes the complexity of a class of objects to be learned. We define a similar notion of dimension for program classes that will give an indication of the testing complexity of these classes.
Reference: [WD81] <author> Wenocur, R.S. and Dudley, R.M. </author> <year> (1981), </year> <title> Some Special Vapnik-Chervonenkis Classes, </title> <journal> Discrete Math., </journal> <volume> 33 </volume> <pages> 313-318. </pages>
Reference-contexts: Proof. We show this in three steps. First, by a result of Wenocur and Dudley <ref> [WD81] </ref>, for any p 2 P , if we define a new class of functions L p := fq p j q 2 P g, then dim (L p ) = dim (P ). This is easy to see.
Reference: [Wey88] <author> Weyuker, E.J. </author> <year> (1988), </year> <title> Evaluating Software Complexity Measures, </title> <journal> IEEE Trans. Software Engrg., SE-14(9):1357-1365. </journal>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures [Hal77, McC76, WHH79] and to compare various measures for their effectiveness <ref> [Wey88, Tia92, TZ92] </ref>. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
Reference: [WHH79] <author> Woodward, M.R., Hennell, M.A. and Hedley, D. </author> <year> (1979), </year> <title> A Measure of Control Flow Complexity in Program Text, </title> <journal> IEEE Trans. Software Engrg., SE-5(1):45-50. </journal> <volume> 43 </volume>
Reference-contexts: A related area of software engineering is the study of software complexity. Considerable research has been done in this area as well to devise software complexity measures <ref> [Hal77, McC76, WHH79] </ref> and to compare various measures for their effectiveness [Wey88, Tia92, TZ92]. Our work combines these two areas by looking at the "testing complexity" of different classes of programs.
References-found: 31

