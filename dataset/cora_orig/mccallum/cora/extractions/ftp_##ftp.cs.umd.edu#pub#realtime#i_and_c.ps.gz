URL: ftp://ftp.cs.umd.edu/pub/realtime/i_and_c.ps.gz
Refering-URL: http://www.cs.umd.edu/projects/TimeWare/TimeWare-index-no-abs.html
Root-URL: 
Email: rich@cs.umd.edu lee@cis.upenn.edu  
Title: A Resource-Based Prioritized Bisimulation for Real-Time Systems  
Author: Richard Gerber Insup Lee 
Note: This research was supported in part by ONR N00014-89-J-1131, DARPA/NSF CCR-9014621 and NSF CCR-9209333.  
Date: April 1, 1992  
Address: College Park, MD 20742 Philadelphia, PA 19104  
Affiliation: Dept. of Computer Science Dept. of Computer and Info. Science University of Maryland University of Pennsylvania  
Abstract-found: 0
Intro-found: 1
Reference: <author> Arnold, A. </author> <year> (1982), </year> <title> Synchronized behaviours of processes and rational relations, </title> <journal> Acta Infor-matica 17, </journal> <pages> 21-29. </pages>
Reference: <author> Baeten, J., Bergstra, J., and Klop, J. </author> <year> (1987), </year> <title> Ready-trace semantics for concrete process algebra with a priority operator, </title> <journal> Computer Journal 30, </journal> <volume> 6, </volume> <pages> 498-506. </pages>
Reference: <author> Barrett, G. </author> <year> (1990), </year> <title> The semantics of priority and fairness in occam, </title> <booktitle> in "Proc. of 5th Int. Conf. Math. Foundations of Programming Semantics," Lecture Notes in Comput. Sci. </booktitle> <volume> Vol. 442, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Best, E., and Koutny, M. </author> <year> (1992), </year> <title> Petri net semantics of priority systems, </title> <note> Theoretical Computer Science (to appear). </note>
Reference: <author> Camilleri, J., and Winskel, G. </author> <year> (1991), </year> <title> CCS with priority choice, </title> <booktitle> in "Proc. of IEEE Symposium on Logic in Computer Science," </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos. </publisher>
Reference: <author> Cleaveland, R., and Hennessy, M. </author> <year> (1990), </year> <title> Priorities in process algebras, </title> <booktitle> Information and Computation 87, </booktitle> <pages> 58-77. </pages>
Reference-contexts: After presenting "!", we use it to define a prioritized transition system hE; ! ; Di, which is sensitive to preemption. This two-phased approach greatly simplifies the definition of "! "; similar tactics have been used in the treatment of CCS priority <ref> (Cleaveland and Hennessy, 1990) </ref>, and the definition of a maximum parallel semantics for Occam (Huizing, Gerth, and de Roever, 1987). Throughout, we use the following notation. For a given set of resources I R, we let I represent the set S i2I i .
Reference: <author> Francez, N., Lehmann, D., and Pnueli, A. </author> <year> (1984), </year> <title> A linear history semantics for distributed programming, </title> <booktitle> Theoretical Computer Science 32, </booktitle> <pages> 25-46. </pages>
Reference: <author> Gerber, R. </author> <year> (1991), </year> <title> "Communicating Shared Resources: A Model for Distributed Real-Time Systems," </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsylvania. </institution>
Reference: <author> Hoare, C. </author> <year> (1978), </year> <title> Communicating sequential processes, </title> <journal> Communications of the ACM 21, </journal> <volume> No. 8, </volume> <pages> 666-676. </pages>
Reference-contexts: A connection set is a set of events that exhibits the "all or none" property of event synchronization: At time t, if any of the events in a given connection set wish to execute, they all must execute. A familiar example of this concept can be drawn from CSP <ref> (Hoare, 1978) </ref>, where the alphabet of events is fc 1 !; c 1 ?; c 2 !; c 2 ?; c 3 !; c 3 ?; : : :g, where "c i " is a channel, "c i !" is interpreted as a write action, and "c i ?" is interpreted
Reference: <author> Hoare, C. </author> <year> (1985), </year> <title> "Communicating Sequential Processes," </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs. </address>
Reference-contexts: In the CCSR language, the process P is rendered as follows: P = fa?g : P 1 + fb?g : P 2 + ; : P Also, assume a synchronization paradigm similar to that of CSP <ref> (Hoare, 1985) </ref>; i.e., a? or b? may execute if and only if there is a simultaneous occurrence of a! or b!, respectively. The actual first execution of P depends heavily on the context in which it is placed. <p> We overload notation and extend such functions to sets in the usual way, where (A) = f (a) j a 2 Ag. Termination. The termination event, or " p ", has the unique property that it is not "owned" by any particular resource. In the spirit of CSP <ref> (Hoare, 1985) </ref>, if p 2 A for some action A, this means that the system executing A is capable of terminating. Also, p is a fixed point of all event renaming functions 2 ! ; i.e., for all such , ( p p April 1, 1992 5 Resources and Actions.
Reference: <author> Hooman, J. </author> <year> (1991), </year> <title> "Specification and Compositional Verification of Real-Time Systems," </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology. </institution>
Reference: <author> Huizing, C., Gerth, R., and de Roever, W. </author> <year> (1987), </year> <title> Full abstraction of a denotational semantics for real-time concurrency, </title> <booktitle> in "Proc. 14 th ACM Symposium on Principles of Programming Languages," </booktitle> <pages> pp. 223-237, </pages> <publisher> ACM Press, </publisher> <address> New York. </address>
Reference-contexts: This two-phased approach greatly simplifies the definition of "! "; similar tactics have been used in the treatment of CCS priority (Cleaveland and Hennessy, 1990), and the definition of a maximum parallel semantics for Occam <ref> (Huizing, Gerth, and de Roever, 1987) </ref>. Throughout, we use the following notation. For a given set of resources I R, we let I represent the set S i2I i .
Reference: <author> Janicki, R. </author> <year> (1987), </year> <title> A formal semantics of concurrent systems with a priority relation, </title> <journal> Acta Informatica 24, </journal> <pages> 33-55. </pages> <month> April 1, </month> <note> 1992 44 Janicki, </note> <author> R., Lauer, P., Koutny, M., and Devillers, R. </author> <year> (1986), </year> <title> Concurrent and maximally concurrent evolution of nonsequential systems, </title> <booktitle> Theoretical Computer Science 43, </booktitle> <pages> 213-238. </pages>
Reference: <author> Koymans, R., Shyamasundar, R., de Roever, W., Gerth, R., and Arun-Kumar, S. </author> <year> (1988), </year> <title> Compositional semantics for real-time distributed computing, </title> <booktitle> Information and Computation 70, </booktitle> <pages> 210-256. </pages>
Reference: <author> Lamport, L. </author> <year> (1984), </year> <title> What it means for a concurrent program to satisfy a specification: why no one has specified priority, </title> <booktitle> in "3rd ACM Symposium on Principles of Distributed Computing," </booktitle> <publisher> ACM Press, </publisher> <address> New York. </address>
Reference: <author> Lee, I., and Gehlot, V. </author> <year> (1985), </year> <title> Language constructs for distributed real-time programming, </title> <booktitle> in "Proc. IEEE Real-Time Systems Symposium," </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos. </publisher>
Reference-contexts: In the case where I " J 6= ;, E and F may be able to share certain resources. But as we have stated, such resource-sharing must be interleaved. The Scope construct E 4 B t (F; G; H) binds the term E by a temporal scope <ref> (Lee and Gehlot, 1985) </ref>, and it incorporates both the features of timeouts and interrupts.
Reference: <author> Lynch, N., and Tuttle, M. </author> <year> (1988), </year> <title> "An Introduction to Input/Output Automata," </title> <type> Tech. Rep. </type> <institution> MIT/LCS/TM-373, Laboratory for Computer Science, Massachusetts Institute of Technology. </institution>
Reference-contexts: For all i in R we denote i as the collection of events exclusively "owned" by resource i: 8i 2 R; 8j 2 R : i 6= j; i " j = ; This type of alphabet partitioning is similar to that found in the I/O Automata model <ref> (Lynch and Tuttle, 1988) </ref>, where it is used to define a notion of fairness. However, here it is used to help mandate our resource-induced mutual exclusion condition. As we have stated, a single resource is capable of executing actions that consist of at most one event.
Reference: <author> Milner, R. </author> <year> (1980), </year> <title> "A Calculus for Communicating Systems," </title> <booktitle> Lecture Notes in Comput. Sci. </booktitle> <volume> Vol. 92, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Milner, R. </author> <year> (1983), </year> <title> Calculi for synchrony and asynchrony, </title> <booktitle> Theoretical Computer Science 25, </booktitle> <pages> 267-310. </pages>
Reference-contexts: This constraint quite naturally leads to an interleaving notion of concurrency at the resource level of the system. A priority ordering is used to arbitrate between simultaneous resource requests. At the system level, lock-step parallelism occurs when a group of resources are executed simultaneously. Strongly influenced by SCCS <ref> (Milner, 1983) </ref>, CCSR is a process algebra that uses a synchronous form of concurrency, and possesses a term equivalence based on a prioritized version of strong bisimulation (Park, 1981). <p> We let represent the universal set of events. Since a system potentially consists of many resources, multiple events may occur at any time throughout the course of its execution. We call such occurrences actions, and they are represented by sets in PP (). As in SCCS <ref> (Milner, 1983) </ref>, the passage of time is implicitly captured by a sequence of actions, where one clock "tick" corresponds to the execution of a single action. <p> A j f ullsync (B)g unres (A) = A res (A) Again using the CSP-like notation, if A = fa!; a?; b!; b?; c!; d?g, we have res (A) = fa!; a?; b!; b?g and unres (A) = fc!; d?g. 2.3 Priority-Canonical Events In an unprioritized calculus such as SCCS <ref> (Milner, 1983) </ref>, the idle action serves two distinctly different functions. One is to denote pure idling; for example, the SCCS term 1 : (P fi Q) represents a process that idles for one time unit, and subsequently executes the term P fi Q.
Reference: <author> Milner, R. </author> <title> (1989) "Communication and Concurrency," </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs. </address>
Reference-contexts: Perhaps there are weaker notions of equivalence that can also adequately characterize both resource constraints and priority. While observational congruence <ref> (Milner, 1989) </ref> suggests itself as a candidate, it fails to quantify the passage of time in an appropriate manner. Of more help may be a semantics based on a testing preorder (DeNicola and Hennessy, 1983), which would also result in a notion of process containment.
Reference: <author> Milner, R. </author> <title> (1989a) A complete axiomatisation for observational congruence of finite-state behaviors, </title> <booktitle> Information and Computation 81, </booktitle> <pages> 227-247. </pages>
Reference-contexts: Yet it is not immediately clear how a testing equivalence can be extended to accommodate the interaction between priority, resource utilization and synchronization. Also of interest is a more general axiomatization of the operators; in particular, perhaps A can be extended to accommodate a limited class of recursion. In <ref> (Milner, 1989a) </ref>, observational congruence is axiomatized for finite state, CCS terms. If a similar technique could be used for CCSR terms, it would significantly enhance the applicability of the proof system. Acknowledgements We gratefully acknowledge the anonymous referees, whose comments significantly contributed to the quality of this paper.
Reference: <author> DeNicola, R., and Hennessy, M. </author> <year> (1983), </year> <title> Testing equivalences for processes, </title> <booktitle> in "Proc. of Int. Conf. on Automata, Languages and Programming," Lecture Notes in Comput. Sci. </booktitle> <volume> Vol. 154, </volume> <pages> pp. 548-560, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: While observational congruence (Milner, 1989) suggests itself as a candidate, it fails to quantify the passage of time in an appropriate manner. Of more help may be a semantics based on a testing preorder <ref> (DeNicola and Hennessy, 1983) </ref>, which would also result in a notion of process containment. Yet it is not immediately clear how a testing equivalence can be extended to accommodate the interaction between priority, resource utilization and synchronization.
Reference: <author> Okulicka, F. </author> <year> (1990), </year> <title> On priority in cosy, </title> <booktitle> Theoretical Computer Science 74, </booktitle> <pages> 199-216. </pages>
Reference: <author> Park, D. </author> <year> (1981), </year> <title> Concurrency and automata on infinite sequences, </title> <booktitle> in "Proceedings, 5th GI Conference," Lecture Notes in Comput. Sci. </booktitle> <volume> Vol. 104, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: At the system level, lock-step parallelism occurs when a group of resources are executed simultaneously. Strongly influenced by SCCS (Milner, 1983), CCSR is a process algebra that uses a synchronous form of concurrency, and possesses a term equivalence based on a prioritized version of strong bisimulation <ref> (Park, 1981) </ref>. The development of the equivalence relation mandates a treatment of preemption based not only on priority, but also on resource utilization and inter-resource synchronization. The challenge of suitably defining preemption can be illustrated by a small example. <p> Thus there are finitely many distinct priorities on sets using the resources in (res (A)): (mp + 1) j (res (A))j to be exact. So such infinite, strictly increasing chains cannot exist. 5.4 Bisimulation and Priority Equivalence Equivalence between processes is based on the concept of strong bisimulation <ref> (Park, 1981) </ref>, which is defined as follows: Definition 5.3 For a given transition system hE; ~~&gt;; Di, the symmetric relation r P fi P is a strong bisimulation if, for (P; Q) 2 r and A 2 D, 1. if P ~~&gt; P 0 then, for some Q 0 , Q
Reference: <author> Plotkin, G. </author> <year> (1981), </year> <title> "A Structural Approach to Operational Semantics," </title> <type> Tech. Rep. DAIMI FN-19, </type> <institution> Computer Science Dept., Aarhus University. </institution> <note> April 1, 1992 45 Salwicki, </note> <author> A., and M uldner, T. </author> <year> (1981), </year> <title> On the algorithmic properties of concurrent programs, </title> <booktitle> in "Proceedings of Logic of Programs," Lecture Notes in Comput. Sci. </booktitle> <volume> Vol. 125, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
References-found: 25

