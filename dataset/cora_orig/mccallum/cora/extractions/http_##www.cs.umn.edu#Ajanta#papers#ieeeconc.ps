URL: http://www.cs.umn.edu/Ajanta/papers/ieeeconc.ps
Refering-URL: http://www.cs.umn.edu/Ajanta/
Root-URL: http://www.cs.umn.edu
Title: Design Issues in Mobile Agent Programming Systems  
Author: Neeran M. Karnik Anand R. Tripathi 
Keyword: Mobile agents, Mobile code, Distributed objects, Distributed computing.  
Date: June 24, 1998  
Address: Minneapolis, MN 55455, USA  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract: We describe the mobile agent paradigm which is becoming increasingly popular for network-centric programming, and compare it with earlier paradigms for distributed computing from which it has evolved. The design of mobile agent systems requires the resolution of several system-level issues, such as the provision of code mobility, object naming, portability, scalability, and a range of security issues that go hand-in-hand with mobile code. Agent programming requires suitable languages and programming models that can support code mobility, and runtime systems that provide some fundamental primitives for the creation, migration and management of agents. We discuss these requirements and describe several mobile agent systems that illustrate different approaches taken by designers to address the problems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.S. Banino. </author> <title> Parallelism and Fault Tolerance in Chorus. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 205-211, </pages> <year> 1986. </year>
Reference-contexts: In REV, the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 [14] and Chorus <ref> [1] </ref> introduced the concept of active messages that could migrate from node to node, carrying program code to be executed at these nodes.
Reference: [2] <author> Mitsubishi Electric. </author> <title> Concordia: An Infrastructure for Collaborating Mobile Agents. </title> <booktitle> In Proceedings of the 1st International Workshop on Mobile Agents (MA '97), </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: It was followed by several research systems such as Tacoma [6] and Agent Tcl [4], in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets [8], Voyager [10], Concordia <ref> [2] </ref> and Ajanta [9] are examples of Java-based mobile agent systems.
Reference: [3] <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Issues and Requirements. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <pages> pages 591-597, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: For example, a shopping agent may solicit quotations from various vendors. To ensure fairness, one vendor's quotation must not be readable or modifiable by others. A security breach could result in the modification of the agent's code as it traverses the network. As Farmer et al. argue <ref> [3] </ref>, it is generally considered impossible to prevent such modification (especially by hostile servers), but it is possible to detect it. Thus we need some means of verifying that an agent's code is unaltered during transit across an untrusted network or after visiting an untrusted server.
Reference: [4] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the 4th Annual Tcl/Tk Workshop (TCL '96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: It thus has more autonomy than a simple procedure call. Telescript [15], which was developed by General Magic in the early 1990s, was the first system expressly designed to support mobile agents in commercial applications. It was followed by several research systems such as Tacoma [6] and Agent Tcl <ref> [4] </ref>, in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets [8], Voyager [10], Concordia [2] and Ajanta [9] are examples of Java-based mobile agent systems.
Reference: [5] <author> Colin G. Harrison, David M. Chess, and Aaron Kershenbaum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at URL http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: http://aglets.trl.ibm.co.jp/ Ajanta http://www.cs.umn.edu/Ajanta/ Ara http://www.uni-kl.de/AG-Nehmer/Projekte/Ara/index e.html Concordia http://www.meitca.com/HSL/Projects/Concordia/ Knowbots http://www.cnri.reston.va.us/home/koe/ Messengers http://www.ics.uci.edu/~bic/messengers/ MOA http://www.camb.opengroup.org/RI/java/moa/ Mole http://www.informatik.uni-stuttgart.de/ipvr/vs/projekte/mole.html Odyssey http://www.genmagic.com/technology/odyssey.html Tacoma http://www.cs.uit.no/DOS/Tacoma/ Voyager http://www.objectspace.com/voyager/ SIDEBAR: Web References for Mobile Agent Research 1.2 Applications of Mobile Agents Several advantages of the mobile agent paradigm, in comparison with RPC and message-passing, have been identified <ref> [5] </ref>. These stem from the capability of the paradigm to reduce network usage, increase asynchrony between clients and servers, to add client-specified functionality to servers, and to introduce concurrency. We now discuss these capabilities and identify several applications that can exploit them. <p> A client can decompose its task among multiple agents for providing parallelism or fault tolerance. The mobile agent paradigm can be exploited in a variety of ways, ranging from low-level system administration tasks to middleware to user-level applications. An example of a system-level application is in real-time control <ref> [5] </ref>. If the application uses RPCs to control a device, it may be difficult (if not impossible) to guarantee that it will meet the real-time deadlines associated with the device. This is because communication delays are not accurately predictable, unless the underlying network provides quality of service guarantees.
Reference: [6] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating System Support for Mobile Agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <pages> pages 42-45, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: It thus has more autonomy than a simple procedure call. Telescript [15], which was developed by General Magic in the early 1990s, was the first system expressly designed to support mobile agents in commercial applications. It was followed by several research systems such as Tacoma <ref> [6] </ref> and Agent Tcl [4], in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets [8], Voyager [10], Concordia [2] and Ajanta [9] are examples of Java-based mobile agent systems.
Reference: [7] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A more generic concept is a mobile object, which encapsulates data along with the set of operations on that data, and which can be transported from one network node to another. Emerald <ref> [7] </ref> was an early example of a system that provided object mobility, but it was limited to homogeneous local area networks. The mobile agent paradigm has evolved from these antecedents. Figure 1 illustrates how it differs from RPC and REV.
Reference: [8] <author> Gunter Karjoth, Danny Lange, and Mitsuru Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 68-77, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: It was followed by several research systems such as Tacoma [6] and Agent Tcl [4], in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets <ref> [8] </ref>, Voyager [10], Concordia [2] and Ajanta [9] are examples of Java-based mobile agent systems. <p> Messages are tagged objects, and can be synchronous, one-way, or future-reply. The system provides a retract primitive that recalls an aglet to the caller's server. There is, however, no access control on this primitive. Aglets currently have limited security support; however a more comprehensive authorization framework is being developed <ref> [8] </ref>. 4.5 Voyager This is a Java-based agent system developed by ObjectSpace. A novel feature of Voyager is a utility called vcc which takes any Java class and creates a remotely-accessible equivalent, called a virtual class.
Reference: [9] <author> Neeran Karnik and Anand Tripathi. </author> <title> Agent Server Architecture for the Ajanta Mobile-Agent System. </title> <booktitle> In Proceedings of the 1998 International Conference on Parallel and Distributed Processing Techniques and Applications (PDPTA'98), </booktitle> <month> July </month> <year> 1998. </year>
Reference-contexts: It was followed by several research systems such as Tacoma [6] and Agent Tcl [4], in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets [8], Voyager [10], Concordia [2] and Ajanta <ref> [9] </ref> are examples of Java-based mobile agent systems.
Reference: [10] <author> ObjectSpace. </author> <title> ObjectSpace Voyager Core Package Technical Overview. </title> <type> Technical report, ObjectSpace, </type> <institution> Inc., </institution> <month> July </month> <year> 1997. </year> <note> Available at http://www.objectspace.com/. 15 </note>
Reference-contexts: It was followed by several research systems such as Tacoma [6] and Agent Tcl [4], in which agents are written using script languages. The emergence of Java, with its support for mobile code, led to heightened research activity in this area. Aglets [8], Voyager <ref> [10] </ref>, Concordia [2] and Ajanta [9] are examples of Java-based mobile agent systems.
Reference: [11] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley, </publisher> <address> 2nd edition, </address> <year> 1996. </year>
Reference-contexts: Conversely, when an agent migrates to a server, it needs some assurance of the identity of the server itself before it reveals any of its sensitive data to that server. Digital signature systems have been used to develop mutual authentication schemes <ref> [11] </ref>. These need to be adapted to the mobile agent domain and integrated into agent transport protocols. In order to verify signatures, agents and servers need to reliably know the signing entity's public key. This requires a key certification infrastructure.
Reference: [12] <author> James W. Stamos and David K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: This communications model is usually synchronous, i.e., the client suspends itself after sending a request to the server, waiting for the results of the call. An alternative architecture called Remote Evaluation (REV) was proposed fl Email: karnikjtripathi@cs.umn.edu 1 by Stamos and Gifford <ref> [12] </ref> in 1990. In REV, the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results.
Reference: [13] <author> Tommy Thorn. </author> <title> Programming Languages for Mobile Code. </title> <journal> ACM Computing Surveys, </journal> <volume> 29(3) </volume> <pages> 213-239, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Therefore, most agent systems are based on interpreted programming languages <ref> [13] </ref>, which provide portable virtual machines for executing agent code. Another important criterion in selecting an agent language is safety. Languages that support type checking, encapsulation, and restricted memory access are particularly suitable for implementing protected servers. <p> They have mature interpreter environments which permit efficient, high-level access to local resources and operating system facilities. However, script programs often suffer from poor modularization, encapsulation, and performance. Some agent systems therefore use object-oriented languages such as Java, Telescript or Obliq <ref> [13] </ref>. Agents are defined as first-class objects which encapsulate their state as well as code, and the system provides support for object migration in the network. Such systems offer the natural advantages of object-orientation in building agent-based applications. Complex agent programs are easier to write and maintain using object-oriented languages.
Reference: [14] <author> John Vittal. </author> <title> Active Message Processing: Messages as Messengers. In R.P. Uhlig, editor, </title> <booktitle> Computer Message System, </booktitle> <pages> pages 175-195. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: In REV, the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 <ref> [14] </ref> and Chorus [1] introduced the concept of active messages that could migrate from node to node, carrying program code to be executed at these nodes.
Reference: [15] <author> James E. White. </author> <title> Mobile Agents. </title> <type> Technical report, </type> <institution> General Magic, </institution> <month> October </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: Unlike a procedure call, it does not have to return its results to the client. It could migrate to other servers, transmit information back to its origin, or migrate back to the client if appropriate. It thus has more autonomy than a simple procedure call. Telescript <ref> [15] </ref>, which was developed by General Magic in the early 1990s, was the first system expressly designed to support mobile agents in commercial applications. It was followed by several research systems such as Tacoma [6] and Agent Tcl [4], in which agents are written using script languages.
References-found: 15

