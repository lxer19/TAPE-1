URL: http://theory.lcs.mit.edu/tds/papers/Lynch/LSVW.ps
Refering-URL: http://theory.lcs.mit.edu/tds/papers/Lynch/LSVW.html
Root-URL: 
Email: flynch,hbwg@theory.lcs.mit.edu  segala@cs.unibo.it  fritsv@cwi.nl  
Phone: 2  3  
Title: Hybrid I/O Automata (extended abstract)  
Author: Nancy Lynch ? Roberto Segala Frits Vaandrager ?? H.B. Weinberg ??? 
Address: Cambridge, MA 02139, USA  Piazza di Porta San Donato 5, 40127 Bologna, Italy  P.O. Box 94079, 1090 GB Amsterdam, The Netherlands  
Affiliation: 1 MIT Laboratory for Computer Science  Dipartimento di Matematica, Universita' di Bologna  CWI  
Abstract: We propose a new hybrid I/O automaton model that is capable of describing both continuous and discrete behavior. The model, which extends the timed I/O automaton model of [12, 7] and the phase transition system models of [15, 2], allows communication among components using both shared variables and shared actions. The main contributions of this paper are: (1) the definition of hybrid I/O automata and of an implementation relation based on hybrid traces, (2) the definition of a simulation between hybrid I/O automata and a proof that existence of a simulation implies the implementation relation, (3) a definition of composition of hybrid I/O automata and a proof that it respects the implementation relation, and (4) a definition of receptiveness for hybrid I/O automata and a proof that, assuming certain compatibility conditions, receptiveness is preserved by composition.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abadi and L. Lamport. </author> <title> Composing specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 1(15) </volume> <pages> 73-132, </pages> <year> 1993. </year>
Reference-contexts: Therefore we only accept receptive HIOA's as implementations, i.e., HIOA's in which time can advance to infinity independently of the input provided by the environment. Inspired by earlier work of <ref> [6, 1, 7] </ref> on (timed) discrete event systems, we define receptivity in terms of a game between system and environment in which the goal of the system is to construct an infinite, nonZeno execution, and the goal of the environment is to prevent this. <p> In <ref> [6, 1, 7] </ref> various notions of receptivity have been defined in terms of games. Below, we extend these ideas to the setting of HIOA's.
Reference: 2. <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J.Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: More structure will have to be added in order to deal with applications, but the general model that we propose allows us to answer questions 2-4. HIOA's are inspired by the timed I/O automata of [12, 7] and the phase transition system models of <ref> [15, 2] </ref>. The main difference between HIOA's and timed I/O automata is that, as in phase transition systems, trajectories are primitive in our model and not a derived notion. In the work on phase transition systems the main emphasis thus far has been on temporal logics and model checking. <p> For instance, A might produce an output at an arbitrary time before noon, whereas B produces an output sometime between 10 and 11AM. Or A might allow any smooth trajectory for output variable y with : y 2 <ref> [0; 2] </ref>, whereas B only allows trajectories with : Within computer science, simulation relations provide a major technical tool to prove inclusion of behaviors between systems (see [13] for an overview). <p> In linear hybrid automata <ref> [3, 2] </ref>, for instance, there is no continuous processing of inputs and all underlying processes are autistic. Less trivial examples of classes of I/O behaviors for which strong compatibility reduces to compatibility can be found in the literature on control theory [19].
Reference: 3. <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. </title> <editor> In Grossman et al. </editor> <volume> [8], </volume> <pages> pages 209-229. </pages>
Reference-contexts: In linear hybrid automata <ref> [3, 2] </ref>, for instance, there is no continuous processing of inputs and all underlying processes are autistic. Less trivial examples of classes of I/O behaviors for which strong compatibility reduces to compatibility can be found in the literature on control theory [19].
Reference: 4. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance <ref> [11, 4, 9] </ref>). A system is then defined to be correct iff the abstract machine for the system implements the abstract machine for the specification in the sense that the set of behaviors of the first is included in that of the second.
Reference: 5. <author> D.J.B. Bosscher, I. Polak, and F.W. Vaandrager. </author> <title> Verification of an audio control protocol. </title> <booktitle> In Proc. FTRTFT'94, </booktitle> <volume> LNCS 863, </volume> <pages> pages 170-192. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Box 9010, 9500 GL Nijmegen, The Netherlands, Frits.Vaandrager@cs.kun.nl. ??? Research partially supported by a National Science Foundation Graduate Fellowship. of hybrid systems. We are applying our results in a number of projects in the areas of personal rapid transit [14, 10, 20], intelligent vehicle highway systems, and consumer electronics <ref> [5] </ref>. Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance [11, 4, 9]).
Reference: 6. <author> D. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> ACM Distinguished Dissertations. MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Therefore we only accept receptive HIOA's as implementations, i.e., HIOA's in which time can advance to infinity independently of the input provided by the environment. Inspired by earlier work of <ref> [6, 1, 7] </ref> on (timed) discrete event systems, we define receptivity in terms of a game between system and environment in which the goal of the system is to construct an infinite, nonZeno execution, and the goal of the environment is to prevent this. <p> In <ref> [6, 1, 7] </ref> various notions of receptivity have been defined in terms of games. Below, we extend these ideas to the setting of HIOA's.
Reference: 7. <author> R. Gawlick, R. Segala, J.F. Stgaard-Andersen, and N. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <booktitle> In Proceedings 21 th ICALP, </booktitle> <publisher> LNCS 820. Springer-Verlag, </publisher> <year> 1994. </year> <note> A full version appears as MIT Technical Report number MIT/LCS/TR-587. </note>
Reference-contexts: Our model is very general and contains no finiteness restrictions. More structure will have to be added in order to deal with applications, but the general model that we propose allows us to answer questions 2-4. HIOA's are inspired by the timed I/O automata of <ref> [12, 7] </ref> and the phase transition system models of [15, 2]. The main difference between HIOA's and timed I/O automata is that, as in phase transition systems, trajectories are primitive in our model and not a derived notion. <p> Therefore we only accept receptive HIOA's as implementations, i.e., HIOA's in which time can advance to infinity independently of the input provided by the environment. Inspired by earlier work of <ref> [6, 1, 7] </ref> on (timed) discrete event systems, we define receptivity in terms of a game between system and environment in which the goal of the system is to construct an infinite, nonZeno execution, and the goal of the environment is to prevent this. <p> In <ref> [6, 1, 7] </ref> various notions of receptivity have been defined in terms of games. Below, we extend these ideas to the setting of HIOA's. <p> As in <ref> [7] </ref>, our game starts after a finite execution ff. The outcome of the game is described formally in the following definition.
Reference: 8. <editor> R.L. Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors. </editor> <title> Hybrid Systems, </title> <publisher> LNCS 736. Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction In recent years, there has been a fast growing interest in hybrid systems <ref> [8, 18] </ref> | systems that contain both discrete and continuous components, typically computers interacting with the physical world. Because of the rapid development of processor and circuit technology, hybrid systems are becoming common in many application domains, including avionics, process control, robotics and consumer electronics.
Reference: 9. <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance <ref> [11, 4, 9] </ref>). A system is then defined to be correct iff the abstract machine for the system implements the abstract machine for the specification in the sense that the set of behaviors of the first is included in that of the second. <p> One popular approach is to use the product construction from classical automata theory and to synchronize on common transition labels ("actions") [11]. In other approaches there are no transition labels to synchronize on, and communication between system components is achieved via shared variables <ref> [16, 9] </ref>. Shared action and shared variable communication are equally expressive, and the relationships between the two mechanisms are well understood: it depends on the application which of the two is more convenient to use.
Reference: 10. <author> N.A. Lynch. </author> <title> Modelling and verification of automated transit systems, using timed automata, invariants and simulations, </title> <booktitle> 1996. This volume. </booktitle>
Reference-contexts: Box 9010, 9500 GL Nijmegen, The Netherlands, Frits.Vaandrager@cs.kun.nl. ??? Research partially supported by a National Science Foundation Graduate Fellowship. of hybrid systems. We are applying our results in a number of projects in the areas of personal rapid transit <ref> [14, 10, 20] </ref>, intelligent vehicle highway systems, and consumer electronics [5]. Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance [11, 4, 9]).
Reference: 11. <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings 6 th PODC, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance <ref> [11, 4, 9] </ref>). A system is then defined to be correct iff the abstract machine for the system implements the abstract machine for the specification in the sense that the set of behaviors of the first is included in that of the second. <p> Composition. Within computer science various notions of composition have been proposed for models based on transition systems. One popular approach is to use the product construction from classical automata theory and to synchronize on common transition labels ("actions") <ref> [11] </ref>. In other approaches there are no transition labels to synchronize on, and communication between system components is achieved via shared variables [16, 9].
Reference: 12. <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations part II: Timing-based systems. </title> <type> Report CS-R9314, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <month> March </month> <year> 1993. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: Our model is very general and contains no finiteness restrictions. More structure will have to be added in order to deal with applications, but the general model that we propose allows us to answer questions 2-4. HIOA's are inspired by the timed I/O automata of <ref> [12, 7] </ref> and the phase transition system models of [15, 2]. The main difference between HIOA's and timed I/O automata is that, as in phase transition systems, trajectories are primitive in our model and not a derived notion.
Reference: 13. <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations. part I: </title> <journal> Untimed systems. Information and Computation, </journal> <volume> 121(2) </volume> <pages> 214-233, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Or A might allow any smooth trajectory for output variable y with : y 2 [0; 2], whereas B only allows trajectories with : Within computer science, simulation relations provide a major technical tool to prove inclusion of behaviors between systems (see <ref> [13] </ref> for an overview). In this paper we propose a definition of a simulation between HIOA's and show that existence of a simulation implies the implementation relation. Composition. Within computer science various notions of composition have been proposed for models based on transition systems.
Reference: 14. <author> N.A. Lynch and H.B. Weinberg. </author> <title> Proving correctness of a vehicle maneuver: </title> <booktitle> Deceleration. In Proceedings Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <address> Grenoble, France, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Box 9010, 9500 GL Nijmegen, The Netherlands, Frits.Vaandrager@cs.kun.nl. ??? Research partially supported by a National Science Foundation Graduate Fellowship. of hybrid systems. We are applying our results in a number of projects in the areas of personal rapid transit <ref> [14, 10, 20] </ref>, intelligent vehicle highway systems, and consumer electronics [5]. Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance [11, 4, 9]).
Reference: 15. <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <booktitle> In Proceedings REX Workshop, </booktitle> <volume> LNCS 600, </volume> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: More structure will have to be added in order to deal with applications, but the general model that we propose allows us to answer questions 2-4. HIOA's are inspired by the timed I/O automata of [12, 7] and the phase transition system models of <ref> [15, 2] </ref>. The main difference between HIOA's and timed I/O automata is that, as in phase transition systems, trajectories are primitive in our model and not a derived notion. In the work on phase transition systems the main emphasis thus far has been on temporal logics and model checking. <p> For instance, if T = R and v has domain R, then F v will be the set of all continuous or smooth functions, or the set of all measurable locally essentially bounded functions [19]. If v is a "discrete" variable (in the sense of <ref> [15] </ref>), then F v is the set of all the constant functions. If Z V then we write F-trajs (Z ) for the set of trajectories w over Z with the property that for all z 2 Z, w # z 2 F z ddom (w ).
Reference: 16. <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: One popular approach is to use the product construction from classical automata theory and to synchronize on common transition labels ("actions") [11]. In other approaches there are no transition labels to synchronize on, and communication between system components is achieved via shared variables <ref> [16, 9] </ref>. Shared action and shared variable communication are equally expressive, and the relationships between the two mechanisms are well understood: it depends on the application which of the two is more convenient to use.
Reference: 17. <author> A. Nerode and A. Yakhnis. </author> <title> Concurrent programs as strategies in games. </title> <editor> In Y. Moschovakis, editor, </editor> <booktitle> Logic from Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: It is interesting to compare our games with the games of Nerode and Yakhnis <ref> [17] </ref>. Since the purpose of the latter games is the extraction of digital control to meet performance specifications, the environment player may choose all disturbances. Irrespective of the disturbances the system should realize a given performance specification.
Reference: 18. <author> A. Pnueli and J. Sifakis, </author> <title> editors. </title> <journal> Special Issue on Hybrid Systems of Theoretical Computer Science, </journal> <volume> 138(1). </volume> <publisher> Elsevier Science Publishers, </publisher> <month> February </month> <year> 1995. </year>
Reference-contexts: 1 Introduction In recent years, there has been a fast growing interest in hybrid systems <ref> [8, 18] </ref> | systems that contain both discrete and continuous components, typically computers interacting with the physical world. Because of the rapid development of processor and circuit technology, hybrid systems are becoming common in many application domains, including avionics, process control, robotics and consumer electronics.
Reference: 19. <author> E.D. Sontag. </author> <title> Mathematical Control Theory | Deterministic Finite Dimensional Systems, TAM 6. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In control theory studies of dynamic feedback, communication between components is typically achieved via a connection map, which specifies how outputs and inputs of components are wired <ref> [19] </ref>. This communication mechanism can be expressed naturally using shared variables. Since we find it convenient to use communication via shared actions in the applications that we work on, our model supports both shared action and shared variable communication. <p> Intuitively, the dynamic type F v gives the collection of allowed trajectories for v. For instance, if T = R and v has domain R, then F v will be the set of all continuous or smooth functions, or the set of all measurable locally essentially bounded functions <ref> [19] </ref>. If v is a "discrete" variable (in the sense of [15]), then F v is the set of all the constant functions. <p> Note that for any I/O behavior P there is an output state s 2 Y such that all trajectories w in B begin with s, i.e., w (0)dY = s. Our I/O behaviors can be viewed as a special case of the I/O behaviors of Sontag <ref> [19] </ref>. Sontag defines I/O behaviors in terms of a response map from input signals up to time t to the output at time t, but this presentation is equivalent to our definition in terms of trajectories over both inputs and outputs. <p> Technically, we found it a bit easier to use trajectories in this paper. In <ref> [19] </ref>, no assumptions are made about possible input signals and the length of maximal trajectories (our axioms B2 and B3). However, [19] singles out the so-called V-complete I/O behaviors, which are I/O behaviors that accept any input of type V. <p> Technically, we found it a bit easier to use trajectories in this paper. In <ref> [19] </ref>, no assumptions are made about possible input signals and the length of maximal trajectories (our axioms B2 and B3). However, [19] singles out the so-called V-complete I/O behaviors, which are I/O behaviors that accept any input of type V. In the sequel, the components of an I/O behavior P will be denoted by V P , U P , Y P and B P . <p> In linear hybrid automata [3, 2], for instance, there is no continuous processing of inputs and all underlying processes are autistic. Less trivial examples of classes of I/O behaviors for which strong compatibility reduces to compatibility can be found in the literature on control theory <ref> [19] </ref>. In control theory it is common to express the continuous behavior of a system by means of differential equations; thus, to be sure that a system is well described, the differential equations need to admit a unique solution for each possible starting condition of the system.
Reference: 20. <author> H.B. Weinberg, N.A. Lynch, and N. Delisle. </author> <title> Verification of automated vehicle protection systems, 1996. This volume. This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Box 9010, 9500 GL Nijmegen, The Netherlands, Frits.Vaandrager@cs.kun.nl. ??? Research partially supported by a National Science Foundation Graduate Fellowship. of hybrid systems. We are applying our results in a number of projects in the areas of personal rapid transit <ref> [14, 10, 20] </ref>, intelligent vehicle highway systems, and consumer electronics [5]. Within the theory of reactive systems, which has been developed in computer science during the last 20 years, it is common to represent both a system and its properties as abstract machines (see, for instance [11, 4, 9]).
References-found: 20

