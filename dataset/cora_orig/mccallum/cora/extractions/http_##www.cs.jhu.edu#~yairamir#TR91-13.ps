URL: http://www.cs.jhu.edu/~yairamir/TR91-13.ps
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: Transis: A Communication Sub-System for High Availability  
Author: Yair Amir, Danny Dolev, Shlomo Kramer, Dalia Malki 
Date: April 30, 1992  
Address: Jerusalem, Israel  
Affiliation: Computer Science department The Hebrew University of Jerusalem  
Pubnum: Technical Report CS91-13  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms in broadcast domains. </title> <type> Technical Report CS92-10, </type> <institution> dept. of comp. sci.., the Hebrew University of Jerusalem, </institution> <year> 1992. </year>
Reference-contexts: A full description of all of the Transis' services is beyond the scope of this paper. In this paper, we give an overview of the system structure and its basic protocols. The interested reader is referred to <ref> [1, 2] </ref> for more details. Melliar-Smith et al. suggest in [16, 17] a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([19]). <p> Consequently, the membership algorithm never allows blocking, and operates within the regular flow of messages. The sections bellow give the essentials of the algorithm and an intuitive claim of its correctness. A full description of the membership algorithm and its proof is provided in <ref> [1] </ref>. 5.1 The Faults Handling Algorithm This section focuses on a membership algorithm for handling departure of processors from the set of active ones. Throughout this section, we assume the existence of a starting `current' membership, Members, which is the agreed set of connected members.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Total ordering of messages in broadcast domains. </title> <type> Technical Report CS92-9, </type> <institution> dept. of comp. sci.., the Hebrew University of Jerusalem, </institution> <year> 1992. </year>
Reference-contexts: A full description of all of the Transis' services is beyond the scope of this paper. In this paper, we give an overview of the system structure and its basic protocols. The interested reader is referred to <ref> [1, 2] </ref> for more details. Melliar-Smith et al. suggest in [16, 17] a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([19]). <p> Therefore A "generated" B. 9 The delivery criteria are as follows: 1. Atomic: Immediate delivery. 2. Causal: When all direct dependents in the DAG have been delivered. 3. Agreed: We have developed a novel delivery criterion called ToTo that achieves best case delay of n 2 + 1 messages <ref> [2] </ref>. The ToTo criterion is strictly better than the `all-ack' criterion i.e. at extreme cases, it always delivers messages that have n ACKs, but typically it requires less than n ACKs. <p> It is true that in some extreme cases, processors may wrongly decide that another processor has failed, but when this is found out, the system recovers. By maintaining membership at the lowest level, we simplify the implementation of all the other services. For example, in <ref> [2] </ref> we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions.
Reference: [3] <author> A. Bhide and S. P. Morgan. </author> <title> A highly available network file server. </title> <type> RC 16161, </type> <institution> IBM Research, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: The update operations are immediately propagated to all the replicas, and the query operations are serviced locally by each replica, giving the most up-to-date values. In most system implementations (e.g. <ref> [3] </ref>), each update operation involves contacting with each replica via point-to-point communication and transmitting the update message to it (in addition to ordering-messages sent by the coordinator in order to set a total order of the update messages).
Reference: [4] <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with process groups: Group and mul-ticast semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell Uni., </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Configuration-change events are delivered within the regular flow of messages. Transis guarantees to deliver configuration-change events in a consistent order with messages at all sites. More formally, each processor receives the same set of messages between every pair of configuration-change events. Birman et al. describe this concept in <ref> [4, 8] </ref> as virtual synchrony: It allows distributed applications to observe all the events in the system in a single order. In this way, it creates the illusion of synchronous events.
Reference: [5] <author> K. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. </month>
Reference-contexts: As Melliar Smith et al. noted ([17]), this may be implemented by using an incarnation number as part of the message identifier; The last incarnation number is saved on a nonvolatile storage. One of the leading projects in this area is the ISIS system <ref> [5] </ref>. ISIS provides services for constructing distributed applications in a heterogeneous network of Unix machines. The services are provided for enhancing both performance and availability of applications in a distributed environment. ISIS provides reliable communication for process-groups and various group control operations.
Reference: [6] <author> K. Birman and T. Joseph. </author> <title> Realiable communication in the presence of failures. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference: [7] <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference: [8] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <type> TR 91-1192, </type> <institution> dept. of comp. sci., Conrell University, </institution> <note> 91. revised version of `fast causal multicast'. </note>
Reference-contexts: Configuration-change events are delivered within the regular flow of messages. Transis guarantees to deliver configuration-change events in a consistent order with messages at all sites. More formally, each processor receives the same set of messages between every pair of configuration-change events. Birman et al. describe this concept in <ref> [4, 8] </ref> as virtual synchrony: It allows distributed applications to observe all the events in the system in a single order. In this way, it creates the illusion of synchronous events. <p> For every xlink l 2 outlinks, increment v [l]. 3. Stamp m with v and send it on all outlinks. It can easily be verified that this protocol extends the causal order across BDs. 4 n can be reduced by applying considerations similar to those described in <ref> [8] </ref> 13 Agreed and Safe Multicast in the CD The intra-BD agreed multicast extends the agreed multicast in the CD. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [17, 18, 10, 8] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur. 21
Reference: [9] <author> J. M. Chang and N. Maxemchuck. </author> <title> Realiable broadcast protocols. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference: [10] <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <type> Research Report RJ 5964, </type> <institution> IBM Almaden Research Center, </institution> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: However, it differs from the upper level membership and message-ordering services they provide. The problem of maintaining processor-set membership in the face of processor faults and joins is described in <ref> [10] </ref>. As noted by others ([12, 11, 16]), solving the membership problem (or the equivalent problem of total ordering of messages) in an asynchronous environment with faults is impossible. Transis contains a new membership algorithm that handles any form of detachment and re-connection of processors, based on causally ordered messages. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [17, 18, 10, 8] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur. 21
Reference: [11] <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchrony needed for distributed consensus. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Our preliminary implementation over a heterogeneous network of Sun-4 and Sun-3 machines shows promising results. Over more than three machines, performance is already better than standard point to point protocols. Fischer, Lynch and Paterson ([12], and later Dolev, Dwork and Stockmeyer, <ref> [11] </ref>) have shown that without some sort of synchronization no agreement is possible. Our membership algorithm circumvents these results by introducing a dynamic local group upon which agreement is based.
Reference: [12] <author> M. J. Fischer, N. A. Lynch, and M. S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty processor. </title> <journal> J. ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <year> 1985. </year>
Reference: [13] <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Lazy replication: Exploiting the semantics of distributed services. </title> <booktitle> In Ann. Symp. Principles of Distributed Computing, </booktitle> <volume> number 9, </volume> <pages> pages 43-58, </pages> <month> August 90. </month>
Reference-contexts: Another system providing high availability services is described in <ref> [13, 15] </ref>. They show how to replicate a service efficiently using a `lazy' asynchronous form of updating. However, the information required for the ordering of updates is carried by the user requests. Our service definitions are greatly influenced by the ISIS experience and the virtual synchrony concept.
Reference: [14] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Comm. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference: [15] <author> B. Liskov and R. Ladin. </author> <title> Highly-available distributed services and fault-tolerant distributed garbage collection. </title> <booktitle> In Ann. Symp. Principles of Distributed Computing, </booktitle> <volume> number 5, </volume> <month> August 86. </month>
Reference-contexts: Another system providing high availability services is described in <ref> [13, 15] </ref>. They show how to replicate a service efficiently using a `lazy' asynchronous form of updating. However, the information required for the ordering of updates is carried by the user requests. Our service definitions are greatly influenced by the ISIS experience and the virtual synchrony concept.
Reference: [16] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year> <month> 22 </month>
Reference-contexts: A full description of all of the Transis' services is beyond the scope of this paper. In this paper, we give an overview of the system structure and its basic protocols. The interested reader is referred to [1, 2] for more details. Melliar-Smith et al. suggest in <ref> [16, 17] </ref> a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([19]). These protocols use the hardware broadcast capability for message dissemination and a combined system of ACKs and NACKs to detect message losses and recover them. <p> Lansis uses a combined systems of piggybacked ACKs and NACKs in order to deliver messages to all the processors. This principle idea of Lansis is motivated by the Trans algorithm <ref> [16] </ref> and the Psync protocol [19]. However, it varies considerably in its implementation considerations, in the variety of services it provides, and in the membership control. Every processor transmits messages with increasing serial numbers, serving as message-ids. <p> Therefore, they reflect the user-oriented cause and effect relation directly. In Trans, on the other hand, the partial order does not correspond to the user order of events and is obtained by applying the OPD predicate on the acknowledgements <ref> [16] </ref>. It is easy to see that this difference does not introduce deadlocks (a message will not be delayed forever) nor does it render its correctness (atomicity and causality are preserved).
Reference: [17] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Intl. Conf. Distributed Computing Systems, </booktitle> <month> May 91. </month>
Reference-contexts: A full description of all of the Transis' services is beyond the scope of this paper. In this paper, we give an overview of the system structure and its basic protocols. The interested reader is referred to [1, 2] for more details. Melliar-Smith et al. suggest in <ref> [16, 17] </ref> a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([19]). These protocols use the hardware broadcast capability for message dissemination and a combined system of ACKs and NACKs to detect message losses and recover them. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [17, 18, 10, 8] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur. 21
Reference: [18] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [17, 18, 10, 8] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur. 21
Reference: [19] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: Lansis uses a combined systems of piggybacked ACKs and NACKs in order to deliver messages to all the processors. This principle idea of Lansis is motivated by the Trans algorithm [16] and the Psync protocol <ref> [19] </ref>. However, it varies considerably in its implementation considerations, in the variety of services it provides, and in the membership control. Every processor transmits messages with increasing serial numbers, serving as message-ids.
References-found: 19

