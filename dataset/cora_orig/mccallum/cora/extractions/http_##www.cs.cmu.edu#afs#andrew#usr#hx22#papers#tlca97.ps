URL: http://www.cs.cmu.edu/afs/andrew/usr/hx22/papers/tlca97.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/hwxi/www/publications.html
Root-URL: 
Title: Weak and Strong Beta Normalisations in Typed -Calculi  
Author: Hongwei Xi 
Address: Pittsburgh, PA 15213, USA  
Affiliation: Department of Mathematical Sciences Carnegie Mellon University  
Abstract: We present a technique to study relations between weak and strong fi-normalisations in various typed -calculi. We first introduce a translation which translates a -term into a I-term, and show that a -term is strongly fi-normalisable if and only if its translation is weakly fi-normalisable. We then prove that the translation preserves typability of -terms in various typed -calculi. This enables us to establish the equivalence between weak and strong fi-normalisations in these typed -calculi. This translation can deal with Curry typing as well as Church typing, strengthening some recent closely related results. This may bring some insights into answering whether weak and strong fi-normalisations in all pure type systems are equivalent.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> H.P. </author> <title> Barendregt (1984), The Lambda Calculus: Its Syntax and Semantics, </title> <publisher> North-Holland publishing company, Amsterdam. </publisher>
Reference-contexts: Finally, we mention some related work and draw some conclusions on our technique. 2 Preliminaries We give a brief explanation on the notions and terminology used in this paper. Most details can be found in <ref> [1] </ref>, [19] and [2]. Definition 1. <p> Now let us state the conservation theorem for I-calculus, upon which this paper is established. Theorem Church For every I-term M , WN fi (M ) if and only if SN fi (M ). Proof. See the proof of Theorem 11.3.4 in <ref> [1] </ref> or the proof of Theorem 21 in [33]. 3 Translations Translations j j and k k translate -terms into I-terms. kxk = x (*) kM 1 M 2 k = kM 1 k (jM 2 j) Note that * and h; i are two distinct fresh variables and hx; *i
Reference: 2. <author> H.P. </author> <title> Barendregt (1992), Lambda calculi with types, </title> <booktitle> Handbook of Logic in Computer Science edited by S. </booktitle> <editor> Abramsky, Dov M. Gabbay and T.S.E. Maibaum, </editor> <publisher> Clarendon Press, Oxford, </publisher> <pages> pp. 117-414. </pages>
Reference-contexts: A conjecture presented by Barendregt at The Second International Conference on Typed Lambda Calculi and Applications states that S j= WN fi implies S j= SN fi for every pure type system S <ref> [2] </ref>. One can certainly strengthen the conjecture by asking whether it is provable in the first-order Peano arithmetic. We will argue that this is the case for various typed -calculi including all systems in -cube [2]. <p> S j= WN fi implies S j= SN fi for every pure type system S <ref> [2] </ref>. One can certainly strengthen the conjecture by asking whether it is provable in the first-order Peano arithmetic. We will argue that this is the case for various typed -calculi including all systems in -cube [2]. We achieve this via introducing a translation k k which translates a -term M into a I-term kM k. We then show that WN fi (kM k) implies SN fi (M ) for every -term M and k k preserves the typability of -terms in various typed -calculi. <p> Finally, we mention some related work and draw some conclusions on our technique. 2 Preliminaries We give a brief explanation on the notions and terminology used in this paper. Most details can be found in [1], [19] and <ref> [2] </ref>. Definition 1. <p> Proof. It suffices to prove this when (M N ) &lt; 1 and (N 2 ) &lt; 1. Please see the proof of Lemma 4.3.3 (1) in <ref> [2] </ref>. Now let us state the conservation theorem for I-calculus, upon which this paper is established. Theorem Church For every I-term M , WN fi (M ) if and only if SN fi (M ). Proof. <p> A proof in [11] shows that ! j= SN fi implies C j= SN fi , where C stands for the construction of calculus. Following this example, we can verify that S j= WN fi if and only if S j= SN fi for every system S in -cube <ref> [2] </ref>. Again we point out that this is a result which can be formulated in the first-order Peano arithmetic. 5 Related Work The research on deriving strong normalisation (SN) from weak normalisation (WN) has lasted for at least thirty years.
Reference: 3. <author> J.A. Bergstra and J.W. </author> <title> Klop (1982), Strong normalization and perpetual reductions in the lambda calculus, </title> <journal> J. Inform. Process. Cybernet. </journal> <volume> 18 (718), </volume> <pages> pp. 403-417. </pages>
Reference-contexts: Given a !-term e and kek ; fl fi e fl ; it is easy to note that every fi-redex r in e fl is either a fi I -redex or of form (t : k:e 0 )t . Hence, r can always be regarded as a perpetual fi-redex <ref> [3] </ref> since one can only substitute constructors for the variables in t . Therefore, WN fi (kek) implies SN fi (kek). The rest is straightforward.
Reference: 4. <author> A. Church, </author> <year> (1941), </year> <title> The calculi of lambda conversion, </title> <publisher> Princeton University Press, Princeton. </publisher>
Reference: 5. <author> M.Coppo and M.Dezani-Ciancaglini (1980), </author> <title> An Extension of Basic Functionality Theory for the Lambda-calculus, </title> <journal> Notre Dame Journal of Formal Logic, </journal> <volume> 21(4), </volume> <pages> pp. 685-693. </pages>
Reference: 6. <author> M.Coppo, </author> <title> M.Dezani-Ciancaglini and B.Venneri (1981), Functional Characters of Solvable Terms, </title> <journal> Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik, </journal> <volume> 27(1), </volume> <pages> pp. 45-58. </pages>
Reference: 7. <author> P. </author> <title> de Groote (1993), The conservation theorem revisited, </title> <booktitle> Int'l conf. Typed lambda calculi and applications, vol. 664 of LNCS, </booktitle> <pages> pp. 163-178. </pages>
Reference-contexts: Again we point out that this is a result which can be formulated in the first-order Peano arithmetic. 5 Related Work The research on deriving strong normalisation (SN) from weak normalisation (WN) has lasted for at least thirty years. Nederpelt [21], Klop [17], Karr [16], de Groot <ref> [7] </ref>, and Kfoury and Wells [20] have all invented techniques to infer SN from WN. Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction.
Reference: 8. <author> R.O. </author> <title> Gandy (1980), An early proof of normalisation by A.M. Turing, To: </title> <booktitle> H.B. Curry: Essays on combinatory logic, lambda calculus and formalism, </booktitle> <publisher> Academic press, </publisher> <pages> pp. 453-456. </pages>
Reference-contexts: Proof. Note that h; i's are given types of form A ! ([] ! []), and they are different variables if their types are different. A structural induction on M yields the results. By a method invented by Turing <ref> [8] </ref> and, independently, by Prawitz [25], it can be readily proven that every term M in ! -Curry ( ! -Church) is WN fi , and therefore SN fi (M ) by Corollary 7 since Lemma 8 yields WN fi (kM k). This is clearly an arithmetisable proof.
Reference: 9. <author> R.O. </author> <title> Gandy (1980), Proofs of Strong Normalisation, To: </title> <booktitle> H.B. Curry: Essays on Combinatory logic, lambda calculus and formalism, </booktitle> <publisher> Academic press, </publisher> <pages> pp. 457-478. </pages>
Reference-contexts: Since kM k is a ! I-term, (kM k) &lt; 2 2k+1 (5n) by Theorem 9. Therefore, (M ) (kM k) &lt; 2 2k+1 (5n) by Lemma 6. A result of a similar form is mentioned in <ref> [9] </ref>, and is proven in [28]. <p> In addition, these techniques does not help much on establishing the equivalence between WN fi and SN fi in various typed -calculi. Gandy <ref> [9] </ref> interprets simply typed -terms as strictly increasing functionals. His method, now called functional interpretations, can yield an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In this direction further work can be found in [23] and [24] and [15].
Reference: 10. <institution> J.-Y. Girard (1972), Interpretation fonctionnelle et elimination des coupures de l'arithmetique d'ordre superieur, These de doctorat d'etat, Universite Paris VII. </institution>
Reference-contexts: For the reader who is interested in this subject, we point out that our technique can also be applied to the typed -calculus with let-polymorphism. 4.3 2 with Curry Typing The second-order polymorphic typed -calculus 2 is originally introduced in <ref> [10] </ref> and [27], where Church typing is involved. 2 with Curry typing can be formulated as follows.
Reference: 11. <author> H. Geuvers and M.J. </author> <title> Nederhof (1991), A modular proof of strong normalisa-tion for the calculus of constructions, </title> <journal> Journal of Functional Programming. </journal>
Reference-contexts: Fortunately, there exist some methods in [12] and <ref> [11] </ref> to remove type de-pendencies on terms for certain typed -calculi. A proof in [11] shows that ! j= SN fi implies C j= SN fi , where C stands for the construction of calculus. <p> Fortunately, there exist some methods in [12] and <ref> [11] </ref> to remove type de-pendencies on terms for certain typed -calculi. A proof in [11] shows that ! j= SN fi implies C j= SN fi , where C stands for the construction of calculus. Following this example, we can verify that S j= WN fi if and only if S j= SN fi for every system S in -cube [2].
Reference: 12. <author> R. Harper, F. Honsell and G. </author> <title> Plotkin (1987), A framework for defining logics. </title> <booktitle> In Proc. Second Symposium of Logic in Computer Science, </booktitle> <pages> pages 194-204, </pages> <address> Ithaca, N.Y. </address>
Reference-contexts: Fortunately, there exist some methods in <ref> [12] </ref> and [11] to remove type de-pendencies on terms for certain typed -calculi. A proof in [11] shows that ! j= SN fi implies C j= SN fi , where C stands for the construction of calculus. <p> In his proof, he uses a translation closely related to translation , which translates simply typed -terms into simply typed I-terms. This translation can only work with ! -terms. Translating P -terms into ! -terms <ref> [12] </ref>, Springintveld [30] then uses Schwichtenberg's upper bound to establish an upper bound for the lengths of fi-reduction sequences from P - terms.
Reference: 13. <author> R. Harper and M. </author> <title> Lillibridge (1993), Explicit polymorphism and CPS conversion, </title> <booktitle> In Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 206-209 </pages>
Reference-contexts: Some explanation can be found in <ref> [13] </ref> and [14]. Also [] has trouble working with " -terms. Reasoning with [] is usually more difficult than with k k since one has to deal with a lot of administrative fi-redexes introduced by CPS-transformation [22]. 6 Conclusion and Future Work We have demonstrated some applications of our technique.
Reference: 14. <author> R. Harper and M. </author> <title> Lillibridge (1993), Polymorphic type assignment and CPS conversion, </title> <journal> LISP and Symbolic Computation, </journal> <volume> vol. 6, 3(4), </volume> <pages> pp. 361-380. </pages>
Reference-contexts: Some explanation can be found in [13] and <ref> [14] </ref>. Also [] has trouble working with " -terms. Reasoning with [] is usually more difficult than with k k since one has to deal with a lot of administrative fi-redexes introduced by CPS-transformation [22]. 6 Conclusion and Future Work We have demonstrated some applications of our technique.
Reference: 15. <author> Stefan Kahrs (1995), </author> <title> Towards a Domain Theory for Termination Proofs, </title> <institution> Laboratory for Foundation of Computer Science, 95-314, Department of Computer Science, The University of Edinburgh. </institution>
Reference-contexts: Gandy [9] interprets simply typed -terms as strictly increasing functionals. His method, now called functional interpretations, can yield an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In this direction further work can be found in [23] and [24] and <ref> [15] </ref>. One can somewhat view our technique as a syntactic realisation of Gandy's idea. Schwichtenberg [28] shows an upper bound for the lengths of fi-reduction sequences from simply typed -terms.
Reference: 16. <author> M. </author> <title> Karr (1985), "Delayability" in proofs of strong normalisabilities in the typed lambda-calculus. </title> <editor> In H. Ehrig, C. Floyd, M. Nvat and J. Thatcher, editors, </editor> <booktitle> Mathematical Foundation of Computer Software, vol. 185 of LNCS, </booktitle> <pages> pp. 208-222. </pages>
Reference-contexts: Again we point out that this is a result which can be formulated in the first-order Peano arithmetic. 5 Related Work The research on deriving strong normalisation (SN) from weak normalisation (WN) has lasted for at least thirty years. Nederpelt [21], Klop [17], Karr <ref> [16] </ref>, de Groot [7], and Kfoury and Wells [20] have all invented techniques to infer SN from WN. Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction.
Reference: 17. <author> J.W. </author> <title> Klop (1980), Combinatory Reduction Systems, </title> <type> Ph.D. thesis, </type> <institution> CWI, Amsterdam, Mathematical center tracts, </institution> <note> No. 127. </note>
Reference-contexts: Again we point out that this is a result which can be formulated in the first-order Peano arithmetic. 5 Related Work The research on deriving strong normalisation (SN) from weak normalisation (WN) has lasted for at least thirty years. Nederpelt [21], Klop <ref> [17] </ref>, Karr [16], de Groot [7], and Kfoury and Wells [20] have all invented techniques to infer SN from WN. Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction.
Reference: 18. <author> J.W. Klop, </author> <year> (1992), </year> <title> Term Rewriting Systems, </title> <booktitle> Handbook of Logic in Computer Science edited by S. </booktitle> <editor> Abramsky, Dov M. Gabbay and T.S.E. Maibaum, </editor> <publisher> Clarendon Press, Oxford, </publisher> <pages> pp. 1-116. </pages>
Reference: 19. <author> J.L. </author> <month> Krivine </month> <year> (1990), </year> <title> Lambda-calcul, Types et Modeles, </title> <publisher> Masson, </publisher> <address> Paris. </address>
Reference-contexts: Finally, we mention some related work and draw some conclusions on our technique. 2 Preliminaries We give a brief explanation on the notions and terminology used in this paper. Most details can be found in [1], <ref> [19] </ref> and [2]. Definition 1. <p> The reader is encouraged to verify that this technique also works on " with Curry typing <ref> [19] </ref>, " with Church typing [20] and the -calculi with positive recursive types [31]. On the other hand, translation [], which exploits continuations, has troubles handling Curry typing [29], and is less robust than translation k k.
Reference: 20. <author> A.J. Kfoury and J.B. </author> <title> Wells (1994), New notions of reduction and non-semantic proofs of fi-strong normalisation in typed -calculi, </title> <type> Tech. Rep. 94-104, </type> <institution> Computer Science Department, Boston University. </institution>
Reference-contexts: Nederpelt [21], Klop [17], Karr [16], de Groot [7], and Kfoury and Wells <ref> [20] </ref> have all invented techniques to infer SN from WN. Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction. <p> The reader is encouraged to verify that this technique also works on " with Curry typing [19], " with Church typing <ref> [20] </ref> and the -calculi with positive recursive types [31]. On the other hand, translation [], which exploits continuations, has troubles handling Curry typing [29], and is less robust than translation k k. Besides, k k | in the author's opinion | leads to much more straightforward reasoning than [] does.
Reference: 21. <author> R.P. </author> <title> Nederpelt (1973), Strong normalization in a typed lambda calculus with lambda structured types, </title> <type> Ph.D. thesis, </type> <institution> Technische Hogeschool Eind-hoven. </institution>
Reference-contexts: Again we point out that this is a result which can be formulated in the first-order Peano arithmetic. 5 Related Work The research on deriving strong normalisation (SN) from weak normalisation (WN) has lasted for at least thirty years. Nederpelt <ref> [21] </ref>, Klop [17], Karr [16], de Groot [7], and Kfoury and Wells [20] have all invented techniques to infer SN from WN. Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction.
Reference: 22. <author> G. </author> <title> Plotkin (1975), Call-by-name, call-by-value, and the lambda calculus, </title> <journal> Theoretical Computer Science, </journal> <volume> vol 1, </volume> <pages> pp. 125-159. </pages>
Reference-contexts: Some explanation can be found in [13] and [14]. Also [] has trouble working with " -terms. Reasoning with [] is usually more difficult than with k k since one has to deal with a lot of administrative fi-redexes introduced by CPS-transformation <ref> [22] </ref>. 6 Conclusion and Future Work We have demonstrated some applications of our technique. The reader is encouraged to verify that this technique also works on " with Curry typing [19], " with Church typing [20] and the -calculi with positive recursive types [31].
Reference: 23. <author> J. van de Pol (1994), </author> <title> Termination proofs for higher-order rewrite systems. </title> <editor> In J. Heering, K. Meinke, B. Moller and T. Nipkow, editors, </editor> <title> Higher Order Algebra, Logic and Term Rewriting, </title> <booktitle> vol. 816 of LNCS, </booktitle> <pages> pp. 305-325. </pages>
Reference-contexts: Gandy [9] interprets simply typed -terms as strictly increasing functionals. His method, now called functional interpretations, can yield an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In this direction further work can be found in <ref> [23] </ref> and [24] and [15]. One can somewhat view our technique as a syntactic realisation of Gandy's idea. Schwichtenberg [28] shows an upper bound for the lengths of fi-reduction sequences from simply typed -terms.
Reference: 24. <author> J. van de Pol and H. </author> <title> Schwichtenberg (1995), Strict functionals for termination proofs, </title> <booktitle> Int'l conf. Typed lambda calculi and applications, vol. 902 of LNCS, </booktitle> <pages> pp. 350-364. </pages>
Reference-contexts: Gandy [9] interprets simply typed -terms as strictly increasing functionals. His method, now called functional interpretations, can yield an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In this direction further work can be found in [23] and <ref> [24] </ref> and [15]. One can somewhat view our technique as a syntactic realisation of Gandy's idea. Schwichtenberg [28] shows an upper bound for the lengths of fi-reduction sequences from simply typed -terms.
Reference: 25. <author> D. </author> <title> Prawitz (1965), Natural Deduction: A proof theoretical study, </title> <publisher> Almquist & Wiksell publishing company. </publisher>
Reference-contexts: Proof. Note that h; i's are given types of form A ! ([] ! []), and they are different variables if their types are different. A structural induction on M yields the results. By a method invented by Turing [8] and, independently, by Prawitz <ref> [25] </ref>, it can be readily proven that every term M in ! -Curry ( ! -Church) is WN fi , and therefore SN fi (M ) by Corollary 7 since Lemma 8 yields WN fi (kM k). This is clearly an arithmetisable proof.
Reference: 26. <author> D. </author> <title> Prawitz (1971), Ideas and results of proof theory, </title> <booktitle> Proceedings of the 2nd scandinavian logic symposium, </booktitle> <editor> editor J.E. Fenstad, </editor> <publisher> North-Holland Publishing Company, Amsterdam. </publisher>
Reference: 27. <author> J. </author> <title> Reynolds (1974), Towards a theory of type structure, </title> <booktitle> Colloquium sur la Progrmmation, vol. 19 of LNCS, </booktitle> <pages> pp. 408-423. </pages>
Reference-contexts: For the reader who is interested in this subject, we point out that our technique can also be applied to the typed -calculus with let-polymorphism. 4.3 2 with Curry Typing The second-order polymorphic typed -calculus 2 is originally introduced in [10] and <ref> [27] </ref>, where Church typing is involved. 2 with Curry typing can be formulated as follows.
Reference: 28. <author> H. </author> <title> Schwichtenberg (1991), An upper bound for reduction sequences in the typed lambda-calculus, </title> <journal> Archive for Mathematical Logic, </journal> <volume> 30 </volume> <pages> 405-408. </pages>
Reference-contexts: Theorem 9. (M ) &lt; 2 k+1 (n) for every ! I-term M , where k = ^(M ) and n = size [M ]. Proof. Please see [33] for a proof using the standardisation theorem in the un-typed -calculus. A similar result can also be found in <ref> [28] </ref>. Corollary 10. (M ) &lt; 2 2k+1 (5n) for every ! -term M , where k = ^(M ) and n = size [M ]. Proof. It can be readily verified that (jAj) 2 (A) for every simple type A, yielding ^(kM k) 2 ^(M ). <p> Since kM k is a ! I-term, (kM k) &lt; 2 2k+1 (5n) by Theorem 9. Therefore, (M ) (kM k) &lt; 2 2k+1 (5n) by Lemma 6. A result of a similar form is mentioned in [9], and is proven in <ref> [28] </ref>. <p> It is interesting to know that (M ) ([jM ]j) for every ! -term M . This is intimately related to the translation used in <ref> [28] </ref>. [j]j is far less flexible than k k since it can only translate ! -terms. <p> His method, now called functional interpretations, can yield an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In this direction further work can be found in [23] and [24] and [15]. One can somewhat view our technique as a syntactic realisation of Gandy's idea. Schwichtenberg <ref> [28] </ref> shows an upper bound for the lengths of fi-reduction sequences from simply typed -terms. In his proof, he uses a translation closely related to translation , which translates simply typed -terms into simply typed I-terms. This translation can only work with ! -terms.
Reference: 29. <author> M.H. </author> <month> Strensen </month> <year> (1996), </year> <title> Strong Normalization from Weak Normalization by A-Translation in Typed lambda-Calculi, Manuscript announced on the types mailing list, </title> <month> February. </month>
Reference-contexts: Their techniques all require introducing some notions of reduction different from fi-reduction, deriving strong fi-normalisation from weak normali-sation of these newly introduced notions of reduction. For example, Klop's technique amounts to introducing a pairing constant [; ], a -reduction ; and a -reduction ; as follows <ref> [29] </ref>. [M 1 ; M 2 ]N ; [M 1 N; M 2 ] [M 1 ; M 2 ] ; M 1 These techniques are successful when applied to -calculi S for which there exist syntactic proofs of S j= WN fi . <p> Strenson <ref> [29] </ref> then proved the equivalence between WN fi and SN fi in various typed -calculi including the simply typed -calculus, the simply typed -calculus with positive recursive types, and !. <p> The reader is encouraged to verify that this technique also works on " with Curry typing [19], " with Church typing [20] and the -calculi with positive recursive types [31]. On the other hand, translation [], which exploits continuations, has troubles handling Curry typing <ref> [29] </ref>, and is less robust than translation k k. Besides, k k | in the author's opinion | leads to much more straightforward reasoning than [] does.
Reference: 30. <author> J. </author> <month> Springintveld </month> <year> (1993), </year> <title> Lower and upper bounds for reductions of types in ! and P . Int'l conf. Typed lambda calculi and applications, </title> <booktitle> vol. 664 of LNCS, </booktitle> <pages> pp. 391-405. </pages>
Reference-contexts: In his proof, he uses a translation closely related to translation , which translates simply typed -terms into simply typed I-terms. This translation can only work with ! -terms. Translating P -terms into ! -terms [12], Springintveld <ref> [30] </ref> then uses Schwichtenberg's upper bound to establish an upper bound for the lengths of fi-reduction sequences from P - terms.
Reference: 31. <author> P. </author> <title> Urzyczyn (1995), Positive recursive type assignment, </title> <booktitle> Mathematical Foundations of Computer Science, vol. 969 of LNCS, </booktitle> <pages> pp. 382-391. </pages>
Reference-contexts: The reader is encouraged to verify that this technique also works on " with Curry typing [19], " with Church typing [20] and the -calculi with positive recursive types <ref> [31] </ref>. On the other hand, translation [], which exploits continuations, has troubles handling Curry typing [29], and is less robust than translation k k. Besides, k k | in the author's opinion | leads to much more straightforward reasoning than [] does.
Reference: 32. <author> H. </author> <title> Xi (1996), On weak and strong normalisations, </title> <type> Research Report 96-187, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pitts-burgh. </institution>
Reference-contexts: Strenson [29] then proved the equivalence between WN fi and SN fi in various typed -calculi including the simply typed -calculus, the simply typed -calculus with positive recursive types, and !. The author <ref> [32] </ref> showed the equivalence between WN fi and SN fi in ! and 2 with Church-typing, and mentioned that [] can also be applied to !. [] cannot be applied to terms in 2 with Curry typing since [M ] may not be a well-typed 2-term for some M 2 fl2.
Reference: 33. <author> H. </author> <title> Xi (1996), Upper bounds for standardisations and an application, </title> <type> Research Report 96-189, </type> <institution> Department of Mathematical Sciences, Carnegie Mel-lon University, Pittsburgh. </institution>
Reference-contexts: Theorem Church For every I-term M , WN fi (M ) if and only if SN fi (M ). Proof. See the proof of Theorem 11.3.4 in [1] or the proof of Theorem 21 in <ref> [33] </ref>. 3 Translations Translations j j and k k translate -terms into I-terms. kxk = x (*) kM 1 M 2 k = kM 1 k (jM 2 j) Note that * and h; i are two distinct fresh variables and hx; *i stands for h; i (x)(*). <p> Theorem 9. (M ) &lt; 2 k+1 (n) for every ! I-term M , where k = ^(M ) and n = size [M ]. Proof. Please see <ref> [33] </ref> for a proof using the standardisation theorem in the un-typed -calculus. A similar result can also be found in [28]. Corollary 10. (M ) &lt; 2 2k+1 (5n) for every ! -term M , where k = ^(M ) and n = size [M ]. Proof.
Reference: 34. <author> H. </author> <title> Xi (1996), An induction measure on -terms and its applications, </title> <type> Research Report 96-192, </type> <institution> Department of Mathematical Sciences, Carnegie Mel-lon University, </institution> <month> Pittsburgh. </month> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 34

