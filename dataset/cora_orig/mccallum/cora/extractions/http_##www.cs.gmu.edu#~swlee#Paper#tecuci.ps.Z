URL: http://www.cs.gmu.edu/~swlee/Paper/tecuci.ps.Z
Refering-URL: http://www.cs.gmu.edu/~swlee/publication~.html
Root-URL: 
Email: mbowman3-@gmu.edu  
Title: A Learning Agent Shell and Methodology for Developing Intelligent Agents  
Author: G. Tecuci, K. Wright, S.W. Lee, M. Boicu, and M. Bowman -tecuci, kwright, swlee, mboicu, 
Address: Fairfax, VA 22030  
Affiliation: Department of Computer Science, MSN 4A5, George Mason University,  
Abstract: Disciple is a learning agent shell and methodology for efficient development of personal agents. The process of developing an agent with Disciple relies on importing ontologies from existing repositories of knowledge and on teaching the agent to perform various tasks in a way that resembles how an expert would teach an apprentice, by giving the agent examples and explanations, and by supervising and correcting its behavior. The paper presents briefly the architecture of Disciple, the process of developing a Disciple agent, and various agents developed with Disciple. Then it discusses several general issues in the design and development of intelligent agents, and how they are dealt with in Disciple. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bradshaw, J. M. ed. </author> <year> 1997. </year> <title> Software Agents . Menlo Park, </title> <address> CA.: </address> <publisher> AAAI Press. </publisher>
Reference: <author> Buchanan, B. G. and Wilkins, D. C. eds. </author> <year> 1993. </year> <title> Readings in Knowledge Acquisition and Learning: Automating the Construction and Improvement of Expert Systems, </title> <address> Sa n Mateo, CA.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Ceranowicz, A. </author> <year> 1994. </year> <title> ModSAF Capabilities. </title> <booktitle> In Proceedings of the 4th Conference on Computer Generated Forces and Behavior Representation. </booktitle> <address> May. Orlando, FL. </address>
Reference-contexts: The virtual military environment is the ModSAF (Modular Semi-Automated Forces) distributed interactive simulation that enables human participants at various locations to enter a synthetic world containing the essential elements of a military operation <ref> (Ceranowicz, 1994) </ref>. ModSAF is a very complex real-time application which simulates military operations. In the ModSAF environment, human participants may cooperate with, command or compete against virtual agents. The agent was trained to perform defensive missions using the graphical interface of ModSAF.
Reference: <author> Chaudhri, V. K., Farquhar, A., Fikes, R., Karp, P., and Rice, J. </author> <year> 1997. </year> <title> Open Knowledge Base Connectivity 2.0. </title> <type> Technical Report, </type> <institution> Artificial Intelligence Center of SRI International and Knowledge Systems Laboratory of Stanford University. </institution>
Reference-contexts: acquisition and learning component for developing and improving the knowledge base, with a general graphical user interface to enable the expert to interact with the shell for the purpose of developing the knowledge base; a knowledge import/export component for accessing remote ontologies located on servers supporting the OKBC protocol suite <ref> (Chaudhri et al, 1997) </ref>; a basic problem solving component which serves both to provide the various facilities used by the knowledge acquisition and learning component and to support basic agent operations; a knowledge base manager which controls access and updates to the knowledge base; and an initial domain-independent knowledge base to <p> Recently, however, the Open Knowledge Base Connectivity (OKBC) protocol (formerly called Generic Frame Protocol) has been developed. OKBC is a standard for accessing knowledge bases stored in different frame representation systems <ref> (Chaudhri et al, 1997) </ref>. It provides a set of operations for a generic interface to such systems. There is also an ongoing effort of developing OKBC servers, such as the Cyc (Lenat, 1995), Loom (MacGregor, 1995), and Ontolingua ( Farquhar et al., 1996) servers.
Reference: <author> DeJong, G. and Mooney, R. </author> <year> 1986. </year> <title> Explanation-Based Learning: An Alternative View. </title> <booktitle> Machine Learning 1 :145-176. </booktitle>
Reference: <author> Dybala, T., Tecuci, G. and Rezazad, H., </author> <year> 1996. </year> <title> The Shared Expertise Model for Teachin g Interactive Design Assistants. </title> <journal> Journal of Engineering Applications of Artificial Intelligence 9(6) </journal> <pages> 611-626. </pages>
Reference-contexts: Finally, it can be used as an assistant by the students as they work through their assignments. An early agent was developed by an expert to act as an assistant in an engineering design domain by supporting computer configuration tasks <ref> (Dybala et al., 1996) </ref>. This type of agent has to be continuously supervised and customized by the user according to the changing practices in the user's domain, as well as the needs and the preferences of the user .
Reference: <author> Farquhar, A., Fikes, R., and Rice, J. </author> <year> 1996. </year> <title> The Ontolingua Server: a Tool for Collaborative Ontology Construction. </title> <booktitle> In Proceedings of the Tenth Knowledge Acquisition for Knowledge-Based Systems Workshop (KAW 96), </booktitle> <address> Banff, Alberta, Canada. </address>
Reference-contexts: It provides a set of operations for a generic interface to such systems. There is also an ongoing effort of developing OKBC servers, such as the Cyc (Lenat, 1995), Loom (MacGregor, 1995), and Ontolingua <ref> ( Farquhar et al., 1996) </ref> servers. These servers are becoming repositories of reusable ontologies and domain theories, and can be accessed using the OKBC protocol.
Reference: <author> Gruber, T. R. </author> <year> 1993. </year> <title> Toward principles for the design of ontologies used for knowledge sharing. </title> <editor> In Guarino, N. and Poli, R. eds. </editor> <title> Formal Ontology in Conceptual Analysis and Knowledge Representation.: </title> <publisher> Kluwer Academic. </publisher>
Reference-contexts: These servers are becoming repositories of reusable ontologies and domain theories, and can be accessed using the OKBC protocol. The knowledge base of a Disciple agent consists of an ontology <ref> ( Gruber, 1993) </ref> that defines and organizes the concepts from the application domain, and a set of problem solving rules expressed in terms of these concepts.
Reference: <author> Lenat, D. B. and Guha, R. V. </author> <year> 1990. </year> <title> Building Large Knowledge-Based Systems: Representation and Inference in the CYC Project. </title> <booktitle> Readings, </booktitle> <address> Mass.: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Lenat, D. B. </author> <year> 1995. </year> <title> CYC: </title> <booktitle> A Large-scale investment in knowledge infrastructure Communications of the ACM 38(11) </booktitle> <pages> 33-38. </pages>
Reference-contexts: OKBC is a standard for accessing knowledge bases stored in different frame representation systems (Chaudhri et al, 1997). It provides a set of operations for a generic interface to such systems. There is also an ongoing effort of developing OKBC servers, such as the Cyc <ref> (Lenat, 1995) </ref>, Loom (MacGregor, 1995), and Ontolingua ( Farquhar et al., 1996) servers. These servers are becoming repositories of reusable ontologies and domain theories, and can be accessed using the OKBC protocol.
Reference: <author> MacGregor R. et al. </author> <year> 1995. </year> <title> The LOOM Tutorial, </title> <editor> http://www.isi.edu/isd/LOOM/documentation/tutorial2.1.ps Michalski, R. S. and Tecuci, G., eds. </editor> <year> 1994. </year> <title> Machine Learning: A Multistrategy Approach Volume 4. </title> <address> San Mateo, CA.: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: OKBC is a standard for accessing knowledge bases stored in different frame representation systems (Chaudhri et al, 1997). It provides a set of operations for a generic interface to such systems. There is also an ongoing effort of developing OKBC servers, such as the Cyc (Lenat, 1995), Loom <ref> (MacGregor, 1995) </ref>, and Ontolingua ( Farquhar et al., 1996) servers. These servers are becoming repositories of reusable ontologies and domain theories, and can be accessed using the OKBC protocol.
Reference: <author> Mitchell, T. M., Keller, T., and Kedar-Cabelli, S. </author> <year> 1986. </year> <title> Explanation-Based G eneralization: A Unifying View. </title> <booktitle> Machine Learning 1 </booktitle> <pages> 47-80. </pages>
Reference: <editor> Tecuci, G. and Kodratoff, Y. eds . 1995. </editor> <title> Machine Learning and Knowledge Acq uisition: Integrated Approaches.: </title> <publisher> Academic Press. </publisher>
Reference: <author> Tecuci, G. and Hieb, M. H. </author> <year> 1996. </year> <title> Teaching Intelligent Agents: The Disciple Approach. </title> <journal> International Journal of Human-Computer Interaction 8(3) </journal> <pages> 259-285. </pages>
Reference-contexts: As a result of learning, designs that were innovative for the assistant became routine, and designs that were creative became first innovative and later routine ones. Another early agent is an agent trained to behave as a military commander in a virtual environment <ref> (Tecuci and Hieb, 1996) </ref>. This is a type of agent that is trained by a user to perform tasks on user's behalf. <p> The first is the use of an advanced model of interaction between the expert and the agent that allows the expert to guide the agent in building a large knowledge base. The second is the use of efficient multistrategy learning methods based on the plausible version space representation <ref> (Tecuci and Hieb, 1996) </ref>. Balance between using general tools and developing domain specific modules In designing an agent building tool, it is also important to find a suitable balance between using general (and therefore reusable) modules and specific (and therefore powerful) modules.
Reference: <author> Tecuci G. and Keeling H. </author> <year> 1998. </year> <title> Teaching an Agent to Test Students. </title> <booktitle> In Proceedings of ICML98.: </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Introduction For several years we have been developing the Disciple apprenticeship, multistrategy learning approach for building intelligent agents <ref> (Tecuci, 1998) </ref>. The defining feature of the Disciple approach to building agents is that a person teaches the agent how to perform domainspecific tasks. <p> Architecture of the Disciple Shell The current version of the Disciple approach is implemented in the Disciple Learning Agent Shell <ref> (Tecuci, 1998) </ref>. We define a learning agent shell as consisting of a learning engine and an inference engine that support a representation formalism in which a knowledge base can be encoded, as well as a methodology for building the knowledge base. <p> Application domains We have experimentally applied the Disciple methodology and shell to the development of five different agents. Two of the agents generate history tests to assist in the assessment of students' understanding and use of higher-order thinking skills <ref> (Tecuci and Keeling, 1998) </ref>. These two assessment agents are representative of the class of agents built by an expert (in education and history, in this case) to assist other users (history teachers and students).
Reference: <author> Tecuci, G. </author> <year> 1998. </year> <title> Building Intelligent Agents: An Apprenticeship Multistrategy Learning Theory, Methodology, Tool and Case Studies. </title> <address> London, England.: </address> <publisher> Academic Press. </publisher>
Reference-contexts: Introduction For several years we have been developing the Disciple apprenticeship, multistrategy learning approach for building intelligent agents <ref> (Tecuci, 1998) </ref>. The defining feature of the Disciple approach to building agents is that a person teaches the agent how to perform domainspecific tasks. <p> Architecture of the Disciple Shell The current version of the Disciple approach is implemented in the Disciple Learning Agent Shell <ref> (Tecuci, 1998) </ref>. We define a learning agent shell as consisting of a learning engine and an inference engine that support a representation formalism in which a knowledge base can be encoded, as well as a methodology for building the knowledge base. <p> Application domains We have experimentally applied the Disciple methodology and shell to the development of five different agents. Two of the agents generate history tests to assist in the assessment of students' understanding and use of higher-order thinking skills <ref> (Tecuci and Keeling, 1998) </ref>. These two assessment agents are representative of the class of agents built by an expert (in education and history, in this case) to assist other users (history teachers and students).
References-found: 16

