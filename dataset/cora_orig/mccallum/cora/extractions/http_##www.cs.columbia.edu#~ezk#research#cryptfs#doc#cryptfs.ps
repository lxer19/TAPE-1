URL: http://www.cs.columbia.edu/~ezk/research/cryptfs/doc/cryptfs.ps
Refering-URL: http://www.cs.columbia.edu/~ezk/research/wip.html
Root-URL: http://www.cs.columbia.edu
Email: fezk,ion,alexg@cs.columbia.edu  
Title: Cryptfs: A Stackable Vnode Level Encryption File System  
Author: Erez Zadok, Ion Badulescu, and Alex Shender 
Affiliation: Computer Science Department, Columbia University  
Abstract: Data encryption has become an increasingly important factor in everyday work. Users seek a method of securing their data with maximum comfort and minimum additional requirements on their part; they want a security system that protects any files used by any of their applications, without resorting to application-specific encryption methods. Performance is an important factor to users since encryption can be time consuming. Operating system vendors want to provide this functionality but without incurring the large costs of developing a new file system. This paper describes the design and implementation of Cryptfs a file system that was designed as a stackable Vnode layer loadable kernel module[5, 15, 19]. Cryptfs operates by encapsulating a client file system with a layer of encryption transparent to the user. Being kernel resident, Cryptfs performs better than user-level or NFS based file servers such as CFS[2] and TCFS[3]. It is 2 to 37 times faster on micro-benchmarks such as read and write; this translates to 12-52% application speedup, as exemplified by a large build. Cryptfs offers stronger security by basing its keys on process session IDs as well as user IDs, and by the fact that kernel memory is harder to access. Working at and above the vnode level, Cryptfs is more portable than a file system which works directly with native media such as disks and networks. Cryptfs can operate on top of any other native file system such as UFS/FFS[8] and NFS[11, 16]. Finally, Cryptfs requires no changes to client file systems or remote servers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> USENIX Conference Proceedings (Atlanta, </booktitle> <address> GA), </address> <pages> pages 93 112. </pages> <publisher> USENIX, </publisher> <month> Summer </month> <year> 1986. </year>
Reference-contexts: Also, new operating systems with new file system interfaces are not likely to perform as well as ones that are several years older. The Herd of Unix-Replacing Daemons (HURD) from the Free Software Foundation (FSF) is a set of servers running on the Mach 3.0 microkernel <ref> [1] </ref> that collectively provide a Unix-like environment. HURD file systems are implemented at user level. The novel concept introduced by HURD is that of the translator. A translator is a program 12 that can be attached to a pathname and perform specialized services when that pathname is accessed.
Reference: [2] <author> M. </author> <title> Blaze. A Cryptographic File System for Unix. </title> <booktitle> Proceedings of the first ACM Conference on Computer and Communications Security (Fairfax, </booktitle> <address> VA). </address> <publisher> ACM, </publisher> <month> November, </month> <year> 1993. </year>
Reference-contexts: A file system that transparently allows access to encrypted data is an appealing idea. The idea has long been in existence and was implemented first by Blaze <ref> [2] </ref> (CFS) and later by Cattaneo and Persiano [3] (TCFS). However, these prior realizations have suffered from poor performance and they are harder to use; TCFS also suffers from limited availability. Consequently, transparent cryptographic file systems have not received wide use. We have remedied these problems in Cryptfs. <p> putpages using read and write, respectively, because calling the lower-level's page functions resulted in a UFS pager error. (When we chose the latest snapshot of FreeBSD 3.0, we knew we were dealing with unstable code, and expected to face bugs.) 4 Evaluation When evaluating Cryptfs, we compared it to CFS <ref> [2] </ref> (also using Blowfish) on all three systems and TCFS [3] on Linux ones. 3 The purpose of our work was primarily to create a practical and portable stackable file system. <p> In comparison, we were able to complete the Linux port in under 3 weeks, and took one week to port to FreeBSD. 5 Related Work There are two popular Cryptographic file systems in existence: Matt Blaze's CFS <ref> [2] </ref> and Cattaneo and Persiano's TCFS [3]. Both are compared to Cryptfs in Section 4. The other works mentioned below suffer from one of two problems: their performance is poor, or they are not portable enough to be readily available on systems used these days. 5.1 CFS CFS [2] is a <p> Blaze's CFS <ref> [2] </ref> and Cattaneo and Persiano's TCFS [3]. Both are compared to Cryptfs in Section 4. The other works mentioned below suffer from one of two problems: their performance is poor, or they are not portable enough to be readily available on systems used these days. 5.1 CFS CFS [2] is a portable user-level cryptographic file system based on NFS. It is used to encrypt any local or remote directory on a system, accessible via a different mount point and a user-attached directory. Users first create a secure directory and choose the encryption algorithm and key to use.
Reference: [3] <author> G. Cattaneo and G. Persiano. </author> <title> Design and Implementation of a Transparent Cryptographic File System for Unix. </title> <type> Unpublished Technical Report. </type> <institution> Dip. Informatica ed Appl, Universita di Salerno, </institution> <month> 8 July </month> <year> 1997. </year> <note> Available via ftp in ftp://edu-gw.dia.unisa.it/pub/tcfs/docs/tcfs.ps.gz. </note>
Reference-contexts: A file system that transparently allows access to encrypted data is an appealing idea. The idea has long been in existence and was implemented first by Blaze [2] (CFS) and later by Cattaneo and Persiano <ref> [3] </ref> (TCFS). However, these prior realizations have suffered from poor performance and they are harder to use; TCFS also suffers from limited availability. Consequently, transparent cryptographic file systems have not received wide use. We have remedied these problems in Cryptfs. <p> page functions resulted in a UFS pager error. (When we chose the latest snapshot of FreeBSD 3.0, we knew we were dealing with unstable code, and expected to face bugs.) 4 Evaluation When evaluating Cryptfs, we compared it to CFS [2] (also using Blowfish) on all three systems and TCFS <ref> [3] </ref> on Linux ones. 3 The purpose of our work was primarily to create a practical and portable stackable file system. Performance and portability were more important to us than security because the design was such that stronger or weaker security measures could be put in place with relative ease. <p> In comparison, we were able to complete the Linux port in under 3 weeks, and took one week to port to FreeBSD. 5 Related Work There are two popular Cryptographic file systems in existence: Matt Blaze's CFS [2] and Cattaneo and Persiano's TCFS <ref> [3] </ref>. Both are compared to Cryptfs in Section 4. <p> A single CFS server can manage multiple directories as well as several users using different keys and ciphers per directory. CFS' performance is limited by the number of context switches that must be performed and the encryption algorithm used. 5.2 TCFS TCFS <ref> [3] </ref> is a modified client-side NFS that communicates with a remote NFS server as well as a special RPC based attributes server. TCFS requires the installation of modules and tools on the client, as well as a special attributes daemon on the server.
Reference: [4] <author> R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page Jr., G. J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> USENIX Conference Proceedings, </booktitle> <pages> pages 6371. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: This provides finer grained control over which files should or should not be encrypted. 5.3 Truffles Truffles [13] is a distributed file system that uses the Fi-cus system developed at UCLA to offer replication and file sharing <ref> [4, 6] </ref>. Truffles uses Privacy Enhanced Mail (PEM) as the method of securely communicating file data over a network. PEM provides authentication and encryption of the data. Truffles was designed to allow users to securely share files without special setup and with minimal system administrator intervention.
Reference: [5] <author> J. S. Heidemann and G. J. Popek. </author> <title> File System Development with Stackable Layers. </title> <booktitle> Transactions on Computing Systems, </booktitle> <address> 12(1):5889. (New York, New York), </address> <publisher> ACM, </publisher> <month> February, </month> <year> 1994. </year> <month> 13 </month>
Reference: [6] <author> J. S. Heidemann and G. J. Popek. </author> <title> A layered ap-proach to file system development. </title> <type> Technical report CSD-910007. </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: This provides finer grained control over which files should or should not be encrypted. 5.3 Truffles Truffles [13] is a distributed file system that uses the Fi-cus system developed at UCLA to offer replication and file sharing <ref> [4, 6] </ref>. Truffles uses Privacy Enhanced Mail (PEM) as the method of securely communicating file data over a network. PEM provides authentication and encryption of the data. Truffles was designed to allow users to securely share files without special setup and with minimal system administrator intervention.
Reference: [7] <author> V. Matena, Y. A. Khalidi, and K. Shirriff. </author> <title> So-laris MC File System Framework. </title> <type> Technical Reports TR-96-57. </type> <institution> Sun Labs, </institution> <month> October </month> <year> 1996. </year> <note> Available http://www.sunlabs.com/technical-reports/1996/abstract-57.html. </note>
Reference-contexts: Writing a file system for Spring requires defining the operations to be applied on the file objects. Operations not defined are inherited from their parent object. One work that has resulted from Spring is the Solaris MC (Multi-Computer) File System <ref> [7] </ref>. It borrowed the object oriented interfaces from Spring and integrated them with the existing Solaris vnode interface to provide a distributed file system infrastructure through a special file system called the pxfs the Proxy File System.
Reference: [8] <author> M. K. McKusick, W. N. Joy, S. J. Leffler, and R. S. Fabry. </author> <title> A fast file system for UNIX. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3):18197, </volume> <month> August </month> <year> 1984. </year>
Reference: [9] <author> D. McNett. </author> <title> Secure Encryption Challenged by Internet-Linked Computers. </title> <note> Press Release. distributed.net, 23 February 1998. Available http://www.distributed.net/pressroom/DESII-1-PR.html. </note>
Reference-contexts: x86 using asynchronous operations, the performance as reported in Table 4 improved by less than 6%. 4.2 Security and Ease-of-Use We used the Blowfish [18] encryption algorithm with the default 128 bit key length. 56 bit encryption had already been broken and efforts are underway to break 64 bit encryption <ref> [9] </ref>.
Reference: [10] <author> J. G. Mitchel, J. J. Giobbons, G. Hamilton, P. B. Kessler, Y. A. Khalidi, P. Kougiouris, P. W. Madany, M. N. Nelson, M. L. Powell, and S. R. Radia. </author> <title> An Overview of the Spring System. </title> <booktitle> CompCon Conference Proceedings (San Francisco, </booktitle> <address> California). Com-pCon, </address> <year> 1994. </year>
Reference-contexts: Writing a new translator is a matter of implementing a well defined file access interface and filling in such operations as opening files, looking up file names, creating directories, etc. Spring is an object-oriented research operating system built by Sun Microsystems Laboratories <ref> [10] </ref>. It was designed as a set of cooperating servers on top of a micro-kernel. Spring provides several generic modules that offer services useful for a file system: caching, coherency, I/O, memory mapping, object naming, and security. <p> We believe that a truly stackable file system interface could significantly improve portability, especially if adopted by the main Unix vendors and developers. We think that the interface available in Spring <ref> [10] </ref> is very suitable. If that interface becomes popular, it might result in many more practical file systems developed. We hope through Cryptfs to have proven the usefulness and practicality of non-trivial stackable file systems. 6.1 Future We plan to add Cryptfs support for other ciphers, especially DES.
Reference: [11] <author> B. Pawlowski, C. Juszczak, P. Staubach, C. Smith, D. Lebel, and D. Hitz. </author> <title> NFS Version 3 Design and Implementation. </title> <booktitle> USENIX Conference Proceedings (Boston, </booktitle> <address> Massachusetts), </address> <pages> pages 13752. </pages> <publisher> USENIX, </publisher> <month> 6-10 June </month> <year> 1994. </year>
Reference-contexts: Attackers who break the user's account or can become that UID will not be able to easily decrypt that user's data because they could not join the same session. Cryptfs also achieves greater performance by running in the kernel and by avoiding the NFS (V.2) protocol overheads <ref> [11] </ref> such as asynchronous writes. 1.1 The Stackable Vnode Interface Cryptfs is implemented as a stackable vnode interface.
Reference: [12] <author> J.-S. Pendry and M. K. McKusick. </author> <title> Union mounts in 4.4BSD-Lite. </title> <booktitle> Conference Proceedings of the USENIX 1995 Technical Conference on UNIX and Advanced Computing Systems (New Orleans), </booktitle> <pages> pages 2533. </pages> <publisher> Usenix Association, </publisher> <month> 1620 January </month> <year> 1995. </year>
Reference-contexts: We chose it as the third port because it represents another major section of Unix operating systems the BSD ones. FreeBSD's vn-ode interface is very similar to Solaris' and the port was straightforward. FreeBSD's version of a loopback file system is called nullfs <ref> [12] </ref> a useful template for writing stackable file systems. Two major deficiencies (bugs) in nullfs required attention. First, writing large files resulted in some data pages getting zero-filled on disk; this forced us to perform all writes synchronously.
Reference: [13] <author> P. Reiner, T. Page, G. Popek, J. Cook, and S. Crocker. </author> <title> Truffles A Secure Service For Widespread File Sharing. </title> <booktitle> Proceedings of the Privacy and Security Research Group Workshop on Network and Distributed System Security. </booktitle> <address> PSRG, </address> <year> 1994. </year> <note> Available via ftp in ftp://ftp.cs.ucla.edu/pub/ficus/psrg93.ps.gz. </note>
Reference-contexts: TCFS allows individual files or directories to be encrypted by turning on or off a new and special flag 'X' on the file or directory in question. This provides finer grained control over which files should or should not be encrypted. 5.3 Truffles Truffles <ref> [13] </ref> is a distributed file system that uses the Fi-cus system developed at UCLA to offer replication and file sharing [4, 6]. Truffles uses Privacy Enhanced Mail (PEM) as the method of securely communicating file data over a network. PEM provides authentication and encryption of the data.
Reference: [14] <author> R. L. Rivest. </author> <title> The MD5 Message-Digest Algorithm. </title> <type> RFC 1321. </type> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Users authenticate themselves by using a tool that prompts them for a passphrase which is cryptographically hashed using MD5 <ref> [14] </ref> to form a key which is then passed to and stored in memory by Cryptfs. No information related to encryption is stored permanently, making Cryptfs both easier to use and more secure. Cryptfs uses the Blowfish [18] encryption algorithm and determines key access in one of two modes. <p> Secondly, if users find it too inconvenient, Cryptfs can be mounted with processing of keys based on UIDs alone (though we do not recommend it.) We designed a user tool which prompts users for passphrases that are at least 16 characters long. The tool hashes passphrases using MD5 <ref> [14] </ref> and passes them to Cryptfs using a special ioctl (2). The tool can also instruct Cryptfs to delete or reset keys. Our design decouples key possession from file ownership.
Reference: [15] <author> D. S. H. Rosenthal. </author> <title> Requirements for a Stacking Vnode/VFS Interface. Unix International document SD-01-02-N014. </title> <booktitle> UNIX International, </booktitle> <year> 1992. </year>
Reference: [16] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network Filesystem. </title> <booktitle> USENIX Association Summer Conference Proceedings of 1985 (11-14 June 1985, </booktitle> <address> Port-land, OR), </address> <pages> pages 11930. </pages> <publisher> USENIX Association, </publisher> <address> El Cerrito, CA, </address> <year> 1985. </year>
Reference: [17] <author> B. Schneier. </author> <title> Algorithm Types and Modes. </title> <booktitle> In Applied Cryptography, Second Edition, </booktitle> <pages> pages 18997. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference: [18] <author> B. Schneier. Blowfish. </author> <booktitle> In Applied Cryptography, Second Edition, </booktitle> <pages> pages 3369. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference-contexts: No information related to encryption is stored permanently, making Cryptfs both easier to use and more secure. Cryptfs uses the Blowfish <ref> [18] </ref> encryption algorithm and determines key access in one of two modes. <p> We rejected patented or licensed ones, and also rejected DES [20] because it is too big and slow. We picked Blowfish <ref> [18] </ref> a 64 bit block cipher that was designed to be fast, compact, and simple. Blowfish is suitable in applications where the keys do not change often such as in automatic file decryptors. It can use variable length keys as long as 448 bits. <p> Indeed, when we ran a full build of Am-utils with Solaris x86 using asynchronous operations, the performance as reported in Table 4 improved by less than 6%. 4.2 Security and Ease-of-Use We used the Blowfish <ref> [18] </ref> encryption algorithm with the default 128 bit key length. 56 bit encryption had already been broken and efforts are underway to break 64 bit encryption [9]. <p> they were not too large to require excessive CPU power. (Increasing the key size would be a simple matter of recompilation.) Blowfish is a newer cipher than DES [20], and as such has not survived the test of time that DES had, but Blowfish is believed to be very secure <ref> [18] </ref>. At this time, Cryptfs can only use Blowfish. CFS offers the widest choice of ciphers, including DES. Cryptfs requires a session ID to use keys after they were supplied, to ensure that only processes in that session group get access to the key and thus to the unencrypted data.
Reference: [19] <author> G. C. Skinner and T. K. Wong. </author> <note> Stacking Vnodes: </note>
References-found: 19

