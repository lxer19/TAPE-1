URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/packet-filter.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Title: The Packet Filter: An Efficient Mechanism for User-level Network Code  d i g i t a  
Author: Jeffrey C. Mogul Richard F. Rashid Michael J. Accetta l 
Address: 100 Hamilton Avenue Palo Alto, California 94301 USA  
Date: November, 1987  
Affiliation: Digital Equipment Corporation Western Research Lab  Department of Computer Science Carnegie-Mellon University  Western Research Laboratory  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ed Basart. </author> <title> The Ridge Operating System: High performance through message-passing and virtual memory. </title> <booktitle> In Proceedings of the 1st International Conference on Computer Workstations, </booktitle> <pages> pages 134-143. </pages> <publisher> IEEE, </publisher> <month> November, </month> <year> 1985. </year>
Reference-contexts: Ports have been made to the Sun Microsystems Inc. operating system, which is internally quite similar to 4.2BSD, and to the Ridge Operating System (ROS) of Ridge Computers, Inc. ROS is a message-based operating system with inexpensive processes <ref> [1] </ref>; its internal structure is distinctly different from that of Unix. The packet filter has also been ported to Pyramid Technology's Unix system, with minor modification for use in a multi-processor.
Reference: [2] <author> David R. Boggs, John F. Shoch, Edward A. Taft, and Robert M. Metcalfe. Pup: </author> <title> An internetwork architecture. </title> <journal> IEEE Transactions on Communications COM-28(4):612-624, </journal> <month> April, </month> <year> 1980. </year>
Reference-contexts: Two processes implementing different communication streams under the same protocol must specify slightly different predicates so that packets are delivered appropriately. For example, a program implementing a Pup <ref> [2] </ref> protocol would include a test on the Pup destination socket number as part of its predicate. The layering in a protocol architecture is not necessarily reflected in a filter predicate, which may well examine packet fields from several layers. <p> The filter language therefore includes four ``short-circuit'' binary logical operations, that when evaluated either push a result and allow the program to continue, or terminate the program and return an appropriate boolean. program using short-circuit operations. Both are used with Pup <ref> [2] </ref> packets on a 3Mbit/sec. <p> if result is COR TRUE TRUE CAND FALSE FALSE CNOR FALSE TRUE CNAND TRUE FALSE 9 THE PACKET FILTER Ethernet header EtherType 12 Data 11 10 SrcSocket 9SrcNet SrcHost 8 DstSocket DstNet PupTypeHopCount PupLength EtherSrc 16 bits 7 6DstHost PupIdentifier 5 3 1 Pup header EtherDst on 3Mb Ethernet (after <ref> [2] </ref>) This filter accepts all Pup packets with Pup Types between 1 and 100. <p> Similarly, since operating systems are continually changing, decoupling network code from the rest of the system reduces the risk of ``software rot.'' The remainder of this section describes examples demonstrating how the packet filter has been of practical use. 5.1. Pup protocols The Pup <ref> [2] </ref> protocol suite includes a variety of applications using both datagram (request- response) and stream transport protocols. At Stanford, almost all of the Pup protocols were implemented for Unix, based entirely on the packet filter.
Reference: [3] <author> David Boggs and Edward Taft. </author> <title> Private communication. </title> <year> 1987. </year>
Reference-contexts: It places few constraints on the protocols that may be implemented, but in spite of this flexibility it performs well enough for many uses. 2.1. Historical background As far as we are aware, the idea (and name) of the packet filter first arose in 1976, in the Xerox Alto <ref> [3] </ref>. Because the Alto operating system shared a single address space with all processes, and because security was not important, the filters were simply procedures in the user- level programs; these procedures were called by the packet demultiplexing mechanism.
Reference: [4] <author> David R. Cheriton. </author> <title> The V Kernel: A software base for distributed systems. </title> <booktitle> IEEE Software 1(2) </booktitle> <pages> 19-42, </pages> <month> April, </month> <year> 1984. </year>
Reference-contexts: The sheer bulk of this software is an indication that it may be overwhelming our ability to create reliable, efficient code: for example, 30% of the 4.3BSD Unix [8, 21] kernel source, 25% of the TOPS-20 [10] (Version 6.1) kernel source, and 32% of the V-system <ref> [4] </ref> kernel source are devoted to networking. Development of network software is slow and seldom yields finished systems; debugging may continue long after the software is put into operation.
Reference: [5] <author> David R. Cheriton. VMTP: </author> <title> A Transport Protocol for the Next Generation of Communication Systems. </title> <booktitle> In Proceedings of SIGCOMM '86 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 406-415. </pages> <publisher> ACM SIGCOMM, </publisher> <address> Stowe, Vt., </address> <month> August, </month> <year> 1986. </year>
Reference-contexts: Instead, they were able to devote their attention to research on the topics that interested them. One result of this research was the VMTP protocol <ref> [5] </ref>, a replacement for the V IKP. Although there is a kernel-resident implementation of VMTP for 4.3BSD, the first implementation used the packet filter. <p> VMTP performance The only interesting protocol for which there is both a packet-filter based implementation and a kernel-resident implementation is VMTP <ref> [5] </ref>. This provides a basis for a direct measurement of the cost of user-level implementation; while there are minor differences in the actual protocols implemented, and the two implementations are not of precisely equal quality, they follow essentially the same pattern of packet transport.
Reference: [6] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Transactions on Computer Systems 3(2) </journal> <pages> 77-107, </pages> <month> May, </month> <year> 1985. </year>
Reference-contexts: As an ongoing research project, it is under continual development and revision. The architects of the V-system have chosen to design their own protocols, to obtain high performance and so that they could make use of the multicast feature of Ethernet hardware <ref> [6] </ref>. Although the V-system is primarily a collection of workstations and servers running the V kernel, Unix hosts were integrated into the distributed system to provide disk storage, compute cycles, mail service, and other amenities not available in a new operating system.
Reference: [7] <institution> Communications Machinery Corporation. </institution> <note> DRN-1700 LanScan Ethernet Monitor User's Guide 4th edition, </note> <institution> Communications Machinery Corporation, Santa Barbara, California, </institution> <year> 1986. </year>
Reference-contexts: Most commercially-available network monitors (including the Excelan LANalyzer [11], the Network General Sniffer [18], and the Communications Machinery Corp. LanScan <ref> [7] </ref>) are stand-alone units dedicated to monitoring specific protocols. A network monitor closely integrated with a general-purpose operating system, running on a workstation, has several important advantages over a dedicated monitor: All the tools of the workstation are available for manipulating and analyzing packet traces.
Reference: [8] <institution> Computer Systems Research Group. Unix Programmer's Reference Manual, 4.3 Berkeley Software Distribution, Virtual VAX-11 Version Computer Science Division, University of California at Berkeley, </institution> <year> 1986. </year>
Reference-contexts: Motivation Software to support networking protocols has become tremendously important as a result of use of LAN technology and workstations. The sheer bulk of this software is an indication that it may be overwhelming our ability to create reliable, efficient code: for example, 30% of the 4.3BSD Unix <ref> [8, 21] </ref> kernel source, 25% of the TOPS-20 [10] (Version 6.1) kernel source, and 32% of the V-system [4] kernel source are devoted to networking. Development of network software is slow and seldom yields finished systems; debugging may continue long after the software is put into operation.
Reference: [9] <author> The Ethernet, </author> <title> A Local Area Network: Data Link Layer and Physical Layer Specifications (Version 1.0) Digital Equipment Corporation, Intel, </title> <note> Xerox, </note> <year> 1980. </year>
Reference-contexts: Since the kernel does not know the structure of higher-layer protocol headers, the discriminant field must be in the lowest layer, such as an Ethernet <ref> [9] </ref> ``type'' field. This is not always a good solution. For example, in most environments the Ethernet type field serves only to identify one of a small set of protocol families; almost all packets must be further discriminated by some protocol-specific field.
Reference: [10] <institution> TOPS-20 User's Guide Digital Equipment Corporation, Maynard, </institution> <address> MA., </address> <year> 1980. </year> <title> Form No. </title> <publisher> AA-4179C-TM. </publisher>
Reference-contexts: The sheer bulk of this software is an indication that it may be overwhelming our ability to create reliable, efficient code: for example, 30% of the 4.3BSD Unix [8, 21] kernel source, 25% of the TOPS-20 <ref> [10] </ref> (Version 6.1) kernel source, and 32% of the V-system [4] kernel source are devoted to networking. Development of network software is slow and seldom yields finished systems; debugging may continue long after the software is put into operation.
Reference: [11] <institution> LANalyzer EX 5000E Ethernet Network Analyzer User Manual Revision A edition, Excelan, Inc., </institution> <address> San Jose, California, </address> <year> 1986. </year>
Reference-contexts: A network monitor captures and displays traces of the packets flowing among hosts; a packet trace makes it much easier to understand why two hosts are unable to communicate, or why performance is not up to par. Most commercially-available network monitors (including the Excelan LANalyzer <ref> [11] </ref>, the Network General Sniffer [18], and the Communications Machinery Corp. LanScan [7]) are stand-alone units dedicated to monitoring specific protocols.
Reference: [12] <author> Ross Finlayson, Timothy Mann, Jeffrey Mogul, </author> <type> Marvin Theimer. </type>
Reference-contexts: The user-level implementation allowed rapid development of the protocol specification through experimentation with easily-modified code. (Section 6.3 contrasts the performance differences between the two VMTP implementations.) 5.3. RARP The Reverse Address Resolution Protocol (RARP) <ref> [12] </ref> was designed to allow workstations to determine their Internet Protocol (IP) addresses without relying on any local stable storage. One issue in the definition of this protocol was whether it should be a layer above IP, or a parallel layer.
References-found: 12

