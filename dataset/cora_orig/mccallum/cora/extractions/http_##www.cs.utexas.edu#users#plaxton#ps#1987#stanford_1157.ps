URL: http://www.cs.utexas.edu/users/plaxton/ps/1987/stanford_1157.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: Network Implementations of the DTEP Algorithm  
Author: Ernst W. Mayr C. Greg Plaxton 
Affiliation: Sciences and Engineering Research Council of Canada.  
Note: This work was supported in part by a grant from the AT&T Foundation, ONR contract N00014-85 C-0731, and NSF grant DCR-8351757. Primarily supported by a 1967 Science and Engineering Scholarship from the Natural  
Date: May 15, 1987  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AL78] <author> T. Agerwala and B. </author> <title> Lint. Communication in parallel algorithms for Boolean matrix multiplication. </title> <booktitle> In Proc. 1978 IEEE International Conference on Parallel Processing, </booktitle> <pages> pages 146-153, </pages> <year> 1978. </year> <month> 20 </month>
Reference-contexts: For the special case of Boolean matrix multiplication, Agerwala and Lint have given a parallel implementation of the four Rus-sians' algorithm which runs in O (log n) time using n 3 =(log n log log n) processors <ref> [AL78] </ref>. Since the diagonal entries of the matrix [P ij ] are always true, any variable which becomes true at any time during the course of the computation will remain so.
Reference: [DNS81] <author> E. Dekel, D. Nassimi and S. Sahni. </author> <title> Parallel matrix and graph algorithms. </title> <journal> SIAM J. Comp., </journal> <volume> 10 </volume> <pages> 657-675, </pages> <year> 1981. </year>
Reference-contexts: The problem of implementing general matrix multiplication on the hypercube and perfect shu*e was studied extensively by Dekel, Nassimi and Sahni <ref> [DNS81] </ref>. For the special case of Boolean matrix multiplication, Agerwala and Lint have given a parallel implementation of the four Rus-sians' algorithm which runs in O (log n) time using n 3 =(log n log log n) processors [AL78]. <p> There is an interesting trick which can be used to decrease the number of steps per iteration by 2 log n. As observed by Dekel et al., the perfect shu*e can compute the transpose of the product of two matrices more rapidly than the actual product <ref> [DNS81] </ref>. This fact may be used to essentially get rid of the calls to Replicate on lines 20 and 21.
Reference: [DS83] <author> E. Dekel, S. Sahni. </author> <title> Binary trees and parallel scheduling algorithms. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 32(3) </volume> <pages> 307-315, </pages> <year> 1983. </year>
Reference-contexts: For all of the networks we have considered except the perfect shu*e, this can be done without increasing the coefficient on the leading term of the running time. For the same set of networks, an extension of an idea due to Dekel & Sahni <ref> [DS83] </ref> allows the processor requirements to be lowered by an additional factor of log n. However, this reduction increases the running time by a constant factor and requires a MIMD model for the butterfly and multi-dimensional mesh of trees [Pl87].
Reference: [Fl66] <author> M. Flynn. </author> <title> Very high speed computing systems. </title> <journal> Proc. IEEE, </journal> <volume> 54 </volume> <pages> 1901-1909, </pages> <year> 1966. </year>
Reference-contexts: In Section 4 these primitives are used to produce implementations of the DTEP algorithm and an analysis of their time and communication requirements is performed. We will be primarily concerned with implementations for single instruction stream, multiple data stream (SIMD) parallel computers, a well-known class first defined by Flynn <ref> [Fl66] </ref>. There is a list of symbols in the appendix which should serve to clarify the programming notation. 2 The DTEP Algorithm A DTEP instance is a triple (P; I; Z) where 1.
Reference: [GMU87] <author> L. Goldschlager, E. Mayr and J. Ullman. </author> <note> Theory of Parallel Computation. To appear. </note>
Reference-contexts: For a formal definition, see <ref> [GMU87] </ref>. 5 procedure Replicate (p, start , width, select ) (1) for i 0 to width 1 (2) if z [start+i;start+width) = select [i;width) then (3) flp (start+i) (= flp (4) end if end Replicate procedure Collect (p, start , width) (6) for i 0 to width 1 (7) if z
Reference: [Go80] <author> L. Goldschlager. </author> <title> A space efficient algorithm for the monotone planar circuit value problem. </title> <journal> Information Processing Letters, </journal> <volume> 10 </volume> <pages> 25-27, </pages> <year> 1980. </year>
Reference-contexts: An important consequence of this is that any problem which can be transformed, within N C, to a derivation system with expolylog bounded derivation trees is itself in N C. The planar monotone circuit value problem <ref> [Go80] </ref>, known to be in N C, is an example of a problem which admits such a transformation. 2 3 Network Primitives: Replicate and Collect Our first goal is to develop, in a systematic manner, "efficient" implementations of the DTEP algorithm for several well-known networks.
Reference: [Ma87] <author> E. Mayr. </author> <title> The dynamic tree expression problem. </title> <institution> Stanford University Department of Computer Science Technical Report No. STAN-CS-87-1156. </institution>
Reference-contexts: 1 Introduction The dynamic tree expression problem (DTEP) was introduced by Mayr <ref> [Ma87] </ref> and is based upon previous work by Ruzzo [Ru80], Miller & Reif [MR85] and Ullman & Van Gelder [UV85]. This paper develops efficient implementations of the DTEP algorithm for the hypercube, butterfly, perfect shu*e and multi-dimensional mesh of trees families of networks.
Reference: [MR85] <author> G. Miller and J. Reif. </author> <title> Parallel tree contraction and its applications. </title> <booktitle> In Proc. 26th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 478-489, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction The dynamic tree expression problem (DTEP) was introduced by Mayr [Ma87] and is based upon previous work by Ruzzo [Ru80], Miller & Reif <ref> [MR85] </ref> and Ullman & Van Gelder [UV85]. This paper develops efficient implementations of the DTEP algorithm for the hypercube, butterfly, perfect shu*e and multi-dimensional mesh of trees families of networks. <p> Using the method of Miller & Reif it can be proven that if p i 2 M has a derivation tree T in (P; I; Z) then P i becomes true within at most (log 4=3 2) log jT j iterations of the loop <ref> [MR85] </ref>. The correctness of the terminating condition used above is easy to establish using a proof by contradiction. The parallel running time for a single iteration depends upon the model of computation.
Reference: [Pl87] <author> G. Plaxton. </author> <note> Research notes. </note>
Reference-contexts: Note that this requires data dependent conditions for enabling/disabling processors. It is possible to use bit compression techniques to reduce the processor requirements of every one of our implementations by a factor of log n <ref> [Pl87] </ref>. For all of the networks we have considered except the perfect shu*e, this can be done without increasing the coefficient on the leading term of the running time. <p> However, this reduction increases the running time by a constant factor and requires a MIMD model for the butterfly and multi-dimensional mesh of trees <ref> [Pl87] </ref>.
Reference: [Ru80] <author> W. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <booktitle> In Proc. 11th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 352-359, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction The dynamic tree expression problem (DTEP) was introduced by Mayr [Ma87] and is based upon previous work by Ruzzo <ref> [Ru80] </ref>, Miller & Reif [MR85] and Ullman & Van Gelder [UV85]. This paper develops efficient implementations of the DTEP algorithm for the hypercube, butterfly, perfect shu*e and multi-dimensional mesh of trees families of networks.
Reference: [St71] <author> H. Stone. </author> <title> Parallel processing with the perfect shu*e. </title> <journal> IEEE Transactions on Computing, </journal> <volume> C-20:153-161, </volume> <year> 1971. </year>
Reference-contexts: It was first introduced by Stone <ref> [St71] </ref>. A base b, degree d perfect shu*e has b d processors with ids [0; b d ).
Reference: [Ul84] <author> J. Ullman. </author> <title> Computational Aspects of VLSI, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, </address> <year> 1984. </year>
Reference-contexts: obviously wasteful; in Section 4.2 we will see that it is possible to do without most of the calls to Adjust which are implied by a naive translation of the hypercube implementation of the 3 Note that our convention for numbering the ranks is the opposite of that chosen in <ref> [Ul84] </ref>. 6 DTEP algorithm. The complexity of Adjust is shift steps and N shift messages, where we refer to the value of shift after line 13 has been executed.
Reference: [UV85] <author> J. Ullman and A. Van Gelder. </author> <title> Parallel complexity of logical query programs. </title> <institution> Stanford University Department of Computer Science Technical Report No. STAN-CS-85-1089. </institution> <month> 21 </month>
Reference-contexts: 1 Introduction The dynamic tree expression problem (DTEP) was introduced by Mayr [Ma87] and is based upon previous work by Ruzzo [Ru80], Miller & Reif [MR85] and Ullman & Van Gelder <ref> [UV85] </ref>. This paper develops efficient implementations of the DTEP algorithm for the hypercube, butterfly, perfect shu*e and multi-dimensional mesh of trees families of networks. In Section 2 we give the formal definition of DTEP and an algorithm for solving it, which will be referred to as the DTEP algorithm.
References-found: 13

