URL: http://www.ius.cs.cmu.edu/IUS/clash_usr0/aej/www/papers/TR-96-20.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/garland/www/multires/bib.html
Root-URL: 
Title: Control of Polygonal Mesh Resolution for 3-D Computer Vision  
Author: Andrew E. Johnson and Martial Hebert 
Note: c 1997 Carnegie Mellon University  
Date: April 1997  
Address: Pittsburgh, Pennsylvania 15213  
Affiliation: Robotics Institute Carnegie Mellon University  
Pubnum: CMU-RI-TR-96-20  
Abstract: This research was supported by the Department of Energy under contract DE-AC21-92MC29104. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Chua and R. Jarvis. </author> <title> 3-D free-form surface registration and object recognition. </title> <booktitle> Intl Jour. Computer Vision, </booktitle> <volume> vol. 17, </volume> <pages> pp. 77-99, </pages> <year> 1996. </year>
Reference-contexts: An edge can be shared by two adjacent polygons and a vertex is shared by at least two edges. (Foley et al.[3]) 2 tion. Some applications of mesh simplification include: removal of coplanar and adjacent faces from existing models [7] [11], creation of mesh hierarchies for level-of-detail rendering <ref> [1] </ref>, and geometric compression [9] for storage and transmission of polygonal mesh models. Heckbert and Garland [6] have written a comprehensive overview of mesh simplification algorithms for computer graphics.
Reference: [2] <author> M. Eck, T. DeRose, T. Duchamp, H. Hoppe, M. Lounsbery and W. Stuetzle, </author> <title> Multiresolution analysis of arbitrary meshes, </title> <booktitle> Proc. Computer Graphics 1995 (SIGGRAPH 95), </booktitle> <pages> pp. 173-182, </pages> <year> 1995. </year>
Reference: [3] <author> J. Foley, A. van Dam, S. Feiner and J. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: [4] <author> P. Flynn and A. Jain. </author> <title> BONSAI: 3D object recognition using constrained search. </title> <journal> vol. </journal> <volume> 13, no. 10, </volume> <pages> pp. 1066-1075, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Examples of situations where well defined locality is needed in 3-D computer vision are point based registration of surface meshes [1][10], establishment of control points for computation of spline surfaces on a surface mesh [12], clustering of points for segmentation of range images <ref> [4] </ref>, and calculation of surface normal [17]. A computationally efficient way to define locality is through the connectivity of vertices in the mesh.
Reference: [5] <author> A. Guziec, </author> <title> Surface simplification with variable tolerance, </title> <booktitle> Proc. Medical Robotics and Computer Assisted Surgery (MRCAS 95), </booktitle> <pages> pp. 132-139, </pages> <month> November, </month> <year> 1995. </year> <month> 30 </month>
Reference-contexts: Finally, the re-triangulation step in point removal is time consuming and complicated, Guziecs <ref> [5] </ref> mesh simplification algorithm improved on Schroeders algorithm in many ways. Guziec uses edges as the mesh primitive and edge-collapse to eliminate re-triangulation from the mesh simplification algorithm. The edges are ordered based on edge length and a single pass through the edges is performed.
Reference: [6] <author> P. Heckbert and M. </author> <title> Garland, Survey of polygonal surface simplification algorithms, </title> <institution> Car-negie Mellon University School of Computer Science Tech. Report (CMU-CS-97-194), </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Some applications of mesh simplification include: removal of coplanar and adjacent faces from existing models [7] [11], creation of mesh hierarchies for level-of-detail rendering [1], and geometric compression [9] for storage and transmission of polygonal mesh models. Heckbert and Garland <ref> [6] </ref> have written a comprehensive overview of mesh simplification algorithms for computer graphics. <p> Some examples of mesh operations are edge-collapse, edge-split, edge flip and point removal followed by re-triangulation. There exist many published mesh simplification algorithms; below, we describe three prominent and representative algorithms. For a more comprehensive overview, see <ref> [6] </ref>. 6 The general flow of iterative simplification algorithms is as follows: First, order mesh primitives (vertices, edges or faces) for simplification. Next, select the best mesh primitive for simplification and apply a mesh operation to that primitive.
Reference: [7] <author> P. Hinker and C. Hansen, </author> <title> Geometric optimization, </title> <booktitle> Proc. Visualization 93, </booktitle> <pages> pp. 189-195, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: An edge can be shared by two adjacent polygons and a vertex is shared by at least two edges. (Foley et al.[3]) 2 tion. Some applications of mesh simplification include: removal of coplanar and adjacent faces from existing models <ref> [7] </ref> [11], creation of mesh hierarchies for level-of-detail rendering [1], and geometric compression [9] for storage and transmission of polygonal mesh models. Heckbert and Garland [6] have written a comprehensive overview of mesh simplification algorithms for computer graphics.
Reference: [8] <author> H. Hoppe, T. DeRose, T. Duchamp, J. McDonald and W. Stuetzle, </author> <title> Mesh optimization, </title> <booktitle> Proc. Computer Graphics 1993 (SIGGRAPH 93), </booktitle> <pages> pp. 19-26, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, there is no explicit handling of the vertices along the boundary of a mesh to prevent shrinking while ensuring simplification. Hoppe et al. <ref> [8] </ref> use edge-collapse, edge-swap and edge-split to iteratively refine an initial mesh that is close to a set of 3-D data points.
Reference: [9] <author> H. Hoppe, </author> <title> Progressive Meshes, </title> <booktitle> Proc. Computer Graphics 1996 (SIGGRAPH 96), </booktitle> <pages> pp. 99-108, </pages> <year> 1996. </year>
Reference-contexts: Some applications of mesh simplification include: removal of coplanar and adjacent faces from existing models [7] [11], creation of mesh hierarchies for level-of-detail rendering [1], and geometric compression <ref> [9] </ref> for storage and transmission of polygonal mesh models. Heckbert and Garland [6] have written a comprehensive overview of mesh simplification algorithms for computer graphics.
Reference: [10] <author> A. Johnson and M. Hebert. </author> <title> Surface registration by matching oriented points. </title> <booktitle> Proc. Intl Conf. on 3-D Digital Imaging and Modeling, </booktitle> <month> May </month> <year> 1997. </year>
Reference: [11] <author> A. Kalvin and R. Taylor, Superfaces: </author> <title> polyhedral approximation with bounded error, </title> <booktitle> SPIE Medical Imaging, </booktitle> <volume> vol. 2164, </volume> <pages> pp. 2-13, </pages> <year> 1994. </year>
Reference-contexts: An edge can be shared by two adjacent polygons and a vertex is shared by at least two edges. (Foley et al.[3]) 2 tion. Some applications of mesh simplification include: removal of coplanar and adjacent faces from existing models [7] <ref> [11] </ref>, creation of mesh hierarchies for level-of-detail rendering [1], and geometric compression [9] for storage and transmission of polygonal mesh models. Heckbert and Garland [6] have written a comprehensive overview of mesh simplification algorithms for computer graphics.
Reference: [12] <author> V. Koivunen and R. </author> <title> Bajcsy. Spline Representations in 3-D Vision. in Object Representation in Computer Vision, </title> <editor> M. Hebert, J. Ponce, T. Boult and A. Gross, eds. </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 177-190, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Examples of situations where well defined locality is needed in 3-D computer vision are point based registration of surface meshes [1][10], establishment of control points for computation of spline surfaces on a surface mesh <ref> [12] </ref>, clustering of points for segmentation of range images [4], and calculation of surface normal [17]. A computationally efficient way to define locality is through the connectivity of vertices in the mesh.
Reference: [13] <author> S. Nher and Christian Urhig. </author> <title> The LEDA User Manual: Version R 3.3, </title> <institution> Max-Planck-Institut fr Informatik, </institution> <year> 1996. </year>
Reference-contexts: The priority queue is implemented efficiently as a Fibonacci heap <ref> [13] </ref>, so each insertion takes O (logN) time. During normalization, each edge operation requires the re-insertion of a roughly fixed number of edges back into the priority-queue. If M edge operations are applied to the mesh, mesh normalization will take O (MlogN).
Reference: [14] <author> W. Schroeder, J. Zarge and W. Lorensen, </author> <title> Decimation of triangular meshes, </title> <booktitle> Proc. Computer Graphics 1992 (SIGGRAPH 92), </booktitle> <pages> pp. 65-70, </pages> <year> 1992. </year>
Reference-contexts: One of the first iterative mesh simplification algorithms was proposed by Schroeder et al. <ref> [14] </ref>. In this algorithm, vertices are the primitives used for decimation; they are removed from the mesh, and the local neighborhood surrounding the point is re-triangulated in the local plane of the vertex. <p> Operating on ridges and corners is not possible with most mesh simplification algorithms because the shape change measures used (e.g., distance to local tangent plane in <ref> [14] </ref>) are over cautious and prevent simplification along surface shape discontinuities even when simplification will not change the shape of the mesh. In the general case of comparing two meshes, computing the D (M 1 ,M 2 ) is computationally expensive. <p> This is in contrast to more conservative measures of shape change, such as distance to best fit plane <ref> [14] </ref>. Along ridges, the distance to best Boundary Edge-collapseBoundary Edge-split mesh.
Reference: [15] <author> W. Schroeder, </author> <title> A global error bound for triangle decimation, </title> <address> WWW download. </address>
Reference-contexts: The primitives are not ordered; all vertices with a planar fit error that are less than a threshold and meet topology preserving checks are removed. In a later version of the algorithm <ref> [15] </ref>, the shape change in the mesh is limited by placing a global bound on the maximum allowable change in mesh shape. By using the point removal mesh operation, Schroeders algorithm must shrink convex regions in the mesh and expand concave regions in the mesh. <p> In other words, edges that have an accumulated shape change greater than a specified bound can be prevented from being collapsed. The idea of accumulating shape change is attributable to Schroeder <ref> [15] </ref>. However, his measure of shape change (distance to local best fit plane) is less accurate and therefore more conservative than ours.
Reference: [16] <author> K. Shimada. </author> <title> Physically-based automatic mesh generation. </title> <journal> Jour. Japan Society for Simulation Technology, </journal> <volume> vol. 12, no. 1, </volume> <pages> pp. 11-20, </pages> <year> 1993. </year>
Reference-contexts: However, their algorithm relies on an underlying implicit surface and does not address the issue of mesh generation. Shimada <ref> [16] </ref> presents an algorithm for controlling the sampling of 2-D and 3-D meshes using a physically-based triangulation method called the bubble mesh. His algorithm creates uniformly spaced vertices, but, when triangulating 3-D surfaces, requires that the surface have a 2-D parameterization.
Reference: [17] <author> F. Stein and G. Medioni. </author> <title> Structural Indexing: efficient 3-D object recognition. </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> vol. 14, no. 2, </volume> <pages> pp. 125-145, </pages> <year> 1992. </year>
Reference-contexts: Examples of situations where well defined locality is needed in 3-D computer vision are point based registration of surface meshes [1][10], establishment of control points for computation of spline surfaces on a surface mesh [12], clustering of points for segmentation of range images [4], and calculation of surface normal <ref> [17] </ref>. A computationally efficient way to define locality is through the connectivity of vertices in the mesh.
Reference: [18] <author> D. Terzopoulos and M. Vasilescu, </author> <title> Sampling and reconstruction with adaptive meshes, </title> <booktitle> Proc. Computer Vision and Pattern Recognition (CVPR 91), </booktitle> <pages> pp. 70 - 75, </pages> <year> 1991. </year>
Reference: [19] <author> G. Turk, </author> <title> Re-tiling polygonal surfaces, </title> <booktitle> Proc. Computer Graphics 1992 (SIGGRAPH 92), </booktitle> <pages> pp. 55-64, </pages> <year> 1992. </year>
Reference-contexts: The inclusion of a term that penalizes long edges in the optimization is a step toward controlling the overall distribution of vertices in the surface mesh. There exist some alternative particle-based approaches to generating a regular sampling of points on a surface. Turk <ref> [19] </ref> presents an algorithm that simplifies an initial mesh as follows. A small number of points are placed on the surface mesh and then pushed around the faces of the surface mesh by repulsive forces until they are evenly distributed.
Reference: [20] <author> M. Vasilescu and D. Terzopoulos, </author> <title> Adaptive Meshes and Shells: Irregular triangulation, dis-continuities and hierarchical subdivision, </title> <booktitle> Proc. Computer Vision and Pattern Recognition (CVPR 92), </booktitle> <pages> pp. 829-832, </pages> <year> 1992. </year>
Reference: [21] <author> M. Wheeler. </author> <title> Automatic modeling and localization for object recognition. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Thesis Carnegie Mellon University School of Computer Science CMU-CS-96-188, </institution> <month> October, </month> <year> 1996. </year>
Reference: [22] <author> A. Witkin and P. Heckbert, </author> <title> Using particles to sample and control implicit surfaces. </title> <booktitle> Proc. SIGGRAPH 94 (SIGGRAPH 94), </booktitle> <pages> pp. 269-277, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: The end result is an even sampling of the original surface mesh. This algorithm will work best for smoothly varying surfaces and is quite complicated. Witkin and Heckbert <ref> [22] </ref> present an algorithm for obtaining a regular sampling of an implicit surface using a particle-based approach.
References-found: 22

