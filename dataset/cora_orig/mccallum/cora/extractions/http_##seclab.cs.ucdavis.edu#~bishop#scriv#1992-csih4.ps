URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/1992-csih4.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/index.html
Root-URL: http://www.cs.ucdavis.edu
Title: Proactive Password Checking  
Author: Matt Bishop 
Address: Hanover, NH 03755  
Affiliation: Department of Mathematics and Computer Science Dartmouth College  
Note: Page 1 of 9  
Abstract: This paper presents generic requirements for proactive password changer. It then examines two of the most popular, publicly-available programs to see how well they meet the requirements. Future directions are examined, as well as alternatives to such checkers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bishop, M., </author> <title> An Application of a Fast Data Encryption Standard Implementation, </title> <booktitle> Computing Systems 1(3) (Summer 1988) pp. </booktitle> <pages> 221-256. </pages>
Reference-contexts: Unfortunately, rigorous password checking was not one of them; the precise reasons for this are not clear. After the completion of a rather powerful password cracking program deszip <ref> [1] </ref>, the author of that program decided to develop and distribute a countermeasure, so that sites which obtained deszip would be able to insulate their system against attacks from other password cracking programs.
Reference: [2] <author> Bishop, M., </author> <title> A Proactive Password Checker, </title> <booktitle> in Information Security: Proceedings of the IFIP TC11 Seventh International Conference on Information Security: Creating Confidence in Information Processing, </booktitle> <editor> D. T. Lindsay and W. L. Price (eds.), </editor> <publisher> North-Holland, </publisher> <address> New York, NY (1991) pp. </address> <pages> 169-180. </pages>
Reference-contexts: The failure to meet requirement 8 exacerbates this, as dictionaries must be stored either as word lists or as UNIX-style database files; they cannot be compressed without modifying the program. Page 7 of 9 3.5. The Program passwd+ (beta) This program has been available since 1987 <ref> [2] </ref> in alpha test form; like the standard UNIX utility passwd, and the previously-mentioned npasswd program, it is both a password changer and a password checker. The password test mechanisms cannot be overridden or bypassed, so requirement 1 is met.
Reference: [3] <author> Hoover, C., </author> <note> npasswd version 1.7 (Jan. 28, 1992). Available from ftp.cc.utexas.edu using anonymous ftp. Page 9 of 9 </note>
Reference-contexts: But currently, unless considerable care is spent in developing the dictionary, OPUS may well miss some of the classes of obvious passwords, and unless the sets of filter outputs are changed on a per-user and per-site basis, it is too inexible. 3.4. The Program npasswd This program <ref> [3] </ref> allows several types of tests for easily guessed passwords. Users may specify a set of dictionaries to be checked and a minimum length requirement; they may also ban passwords with single case characters.
Reference: [4] <author> Klein, D. V., </author> <title> Foiling the Cracker: A Survey Of, and Improvements to, Password Security, </title> <booktitle> Proceedings of the UNIX Security Workshop II (Aug. 1990) pp. </booktitle> <pages> 5-14. </pages>
Reference-contexts: Hence some care must be applied in selecting which passwords are unacceptably easy to guess. Turning from the mathematics to the engineering aspect, certain facilities must be present to provide the degree of exibility in the tests that will eliminate passwords as easily guessed. Previous studies, notably <ref> [4] </ref> and [6], have described common classes of passwords found experimentally and what types of passwords should be avoided (see table 1); in addition, specific words or character sequences may be meaningful to particular sites or users and hence good guesses for attackers.
Reference: [5] <author> McIlroy, M. D., </author> <title> Development of a Spelling List, </title> <journal> IEEE Transactions on Communications COM-30(1) (Jan. 1982) pp. </journal> <pages> 91-99. </pages>
Reference: [6] <author> Morris, R., and Thompson, K., </author> <title> Password Security: A Case History, </title> <journal> Communications of the ACM 22(11) (Nov. 1979) pp. </journal> <pages> 594-597. </pages>
Reference-contexts: Hence some care must be applied in selecting which passwords are unacceptably easy to guess. Turning from the mathematics to the engineering aspect, certain facilities must be present to provide the degree of exibility in the tests that will eliminate passwords as easily guessed. Previous studies, notably [4] and <ref> [6] </ref>, have described common classes of passwords found experimentally and what types of passwords should be avoided (see table 1); in addition, specific words or character sequences may be meaningful to particular sites or users and hence good guesses for attackers.
Reference: [7] <author> Nagle, J. B., </author> <title> An Obvious Password Detector, </title> <address> comp.sources.unix 16(60) (Nov. </address> <year> 1988). </year> <title> USENET message 1175@fig.bbn.com. </title>
Reference-contexts: It should be noted that on other UNIX systems (such as those based on System V) [13], password aging mechanisms are provided. However, the other requirements are not met. 3.2. An Obvious Password Detector This program <ref> [7] </ref> works by detecting probable English words based on the number of occurrences of common triples. For example, in the word hello, three triples occur hel, ell, and llo.
Reference: [8] <institution> Password Management Guideline, Department of Defense report CSC-STD-002-85 (Apr. </institution> <year> 1985). </year>
Reference-contexts: 1. Introduction The problems inherent in allowing users to choose passwords without restriction have been widely discussed [4][6]; countermeasures include random generation of passwords <ref> [8] </ref> and techniques to test the strength of the proposed password the user selects. The latter falls into two classes: reactive password checking, in which the password is reset and later tested, and proactive password checking, in which the proposed password is first tested and then made the password.
Reference: [9] <author> Peterson, J. L., </author> <title> Computer Programs for Detecting and Correcting Spelling Errors, </title> <note> Communications of the ACM 23(12) (Dec. 1980) pp. 676-687. </note>
Reference: [10] <author> Raleigh, T. M. and Underwood, R. W., </author> <title> CRACK: A Distributed Password Advisor, </title> <booktitle> Proceedings of the UNIX Security Workshop (1988) pp. </booktitle> <pages> 12-13. </pages>
Reference-contexts: For example, one can send the hashed password over the network to a password cracker, which will then reply with 1 for guessable and 0 for not guessable (much as was done in CRACK <ref> [10] </ref>). But with this power comes complexity, and in some sense passwd+ suffers from the inverse problem of npasswd: setting up the tests can be quite simple if the tests are simple, or quite complex if the tests are complex.
Reference: [11] <author> Saltzer, J. H. and Schroeder, M. D., </author> <title> The Protection of Information in Computer Systems, </title> <booktitle> Proceedings of the IEEE 63(9) (Sep. 1975) pp. </booktitle> <pages> 1278-1308. </pages>
Reference-contexts: This allows a password cracker to be used if desired; it also allows programs such as the spelling checker to determine if a proposed password is a word. Finally, the issue of user friendliness must be addressed. By the principle of psychological acceptability <ref> [11] </ref>, the proactive password checker must not make changing the password more difficult than changing the password without using the checker.
Reference: [12] <author> Spafford, E., </author> <title> Preventing Weak Password Choices, </title> <booktitle> Proceedings of the Fourteenth National Computer Security Conference (Oct. 1991) pp. </booktitle> <pages> 446-455. </pages>
Reference-contexts: This package was not intended to be used as a general-purpose proactive mechanism. 3.3. The OPUS Project This project <ref> [12] </ref> is similar to the Obvious Password Detector in purpose; the difference is that the implementation of OPUS uses multiple Bloom filters rather than triples. Page 6 of 9 When a word is given to OPUS, it is first transformed into a hashed form.
Reference: [13] <author> System V Interface Definition, </author> <title> Volume II, </title> <journal> AT&T (1986). </journal>
Reference-contexts: It should be noted that on other UNIX systems (such as those based on System V) <ref> [13] </ref>, password aging mechanisms are provided. However, the other requirements are not met. 3.2. An Obvious Password Detector This program [7] works by detecting probable English words based on the number of occurrences of common triples. For example, in the word hello, three triples occur hel, ell, and llo.
Reference: [14] <author> UNIX Users Reference Manual, </author> <title> 4.3 Berkeley Software Distribution, Virtual VAX-11 Version, </title> <institution> Computer Science Research Group, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA (April 1986). </address> <note> Reprinted by the USENIX Association (June 1987). </note>
Reference-contexts: We shall not examine psychological acceptability, because that is more closely related to external inuences such as the users environment; we want to look at the proactive testing mechanisms only. 3.1. The 4.3 BSD UNIX System Password Changing Program passwd This program <ref> [14] </ref> is similar to the password changing programs distributed by many vendors, so we use it as an example. Its proactive checking is confined to advising users that passwords should be at least 5 characters long, or at least 6 if they consist of monocase letters.
References-found: 14

