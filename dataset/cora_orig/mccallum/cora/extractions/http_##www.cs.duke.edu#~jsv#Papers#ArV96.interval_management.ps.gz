URL: http://www.cs.duke.edu/~jsv/Papers/ArV96.interval_management.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node16.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Optimal Dynamic Interval Management in External Memory (extended abstract)  
Author: Lars Arge Jeffrey Scott Vitter 
Address: Durham, NC 277080129  
Affiliation: Department of Computer Science Duke University  
Abstract: We present a space- and I/O-optimal external-memory data structure for answering stabbing queries on a set of dynamically maintained intervals. Our data structure settles an open problem in databases and I/O algorithms by providing the first optimal external-memory solution to the dynamic interval management problem, which is a special case of 2-dimensional range searching and a central problem for object-oriented and temporal databases and for constraint logic programming. Our data structure simultaneously uses optimal linear space (that is, O(N=B) blocks of disk space) and achieves the optimal O(log B N + T =B) I/O query bound and O(log B N ) I/O update bound, where B is the I/O block size and T the number of elements in the answer to a query. Our structure is also the first optimal external data structure for a 2-dimensional range searching problem that has worst-case as opposed to amortized update bounds. Part of the data structure uses a novel balancing technique for efficient worst-case manipulation of balanced trees, which is of independent interest. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal and J. S. Vitter. </author> <title> The Input/Output complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31(9):11161127, </volume> <year> 1988. </year>
Reference-contexts: In this paper we develop such an optimal structure. 1.1. Memory model and previous results We will be working in the standard model for external memory with one (logical) disk <ref> [1, 24] </ref>. We assume that in one I/O operation each external-memory access transmits one page of B units of data. We measure the efficiency of an algorithm in terms of the number of I/O operations that it performs.
Reference: [2] <author> L. Arge. </author> <title> The buffer tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 334345, </pages> <year> 1995. </year>
Reference-contexts: The starting idea behind our successful externalization of the structure, as compared with previous attempts [8, 35], is that the nodes in our structure have fan-out p B instead of B, following ideas from <ref> [2, 3, 4] </ref>.
Reference: [3] <author> L. Arge. </author> <title> Efficient External-Memory Data Structures and Applications. </title> <type> PhD thesis, </type> <institution> University of Aarhus, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The starting idea behind our successful externalization of the structure, as compared with previous attempts [8, 35], is that the nodes in our structure have fan-out p B instead of B, following ideas from <ref> [2, 3, 4] </ref>.
Reference: [4] <author> L. Arge, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory algorithms for processing line segments in geographic information systems. </title> <booktitle> In Proc. Annual European Symposium on Algorithms, </booktitle> <volume> LNCS 979, </volume> <pages> pages 295310, </pages> <year> 1995. </year> <note> A full version is to appear in special issue of Algorithmica. </note>
Reference-contexts: The starting idea behind our successful externalization of the structure, as compared with previous attempts [8, 35], is that the nodes in our structure have fan-out p B instead of B, following ideas from <ref> [2, 3, 4] </ref>.
Reference: [5] <author> R. Bayer and E. McCreight. </author> <title> Organization and maintenance of large ordered indizes. </title> <journal> Acta Informatica, </journal> <volume> 1:173189, </volume> <year> 1972. </year>
Reference-contexts: The assumption is often made that main memory is capable of holding O (B 2 ) units, but we can do without that assumption in this paper. While B-trees and their variants <ref> [5, 12] </ref> have been an unqualified success in supporting external dynamic 1-dimensional range searching, they are inefficient at 3-sided query2-sided querydiagonal corner query general 2-dimensional query handling more general problems like 2-dimensional or higher-dimensional range searching. <p> Again we believe that our way of removing the amortization is simpler than a possible complicated use of the techniques in [44]. 2. External-memory interval tree with fixed endpoint set Our external-memory interval tree makes use of two kinds of secondary structures: the B-tree and a corner structure. B-trees <ref> [5, 12] </ref> or more generally (a; b)-trees [20] are search tree structures suitable for external memory: Lemma 1 A set of N elements can be stored in a B-tree structure using O (N=B) blocks of external memory such that updates and queries can be performed in O (log B N ) <p> Weight-balanced B-tree In a normal B-tree <ref> [5, 12] </ref> all leaves have the same depth, and each internal node has at least a and at most 2a 1 children, where a is some constant. In weak B-trees or (a; b)-trees [20] a wider range in the number of children is allowed.
Reference: [6] <author> J. L. Bentley. </author> <title> Algorithms for klee's rectangle problems. </title> <institution> Dept. of Computer Science, Carnegie Mellon Univ., </institution> <note> unpublished notes, </note> <year> 1977. </year>
Reference-contexts: The problem of 2-dimensional range searching in both main and external memory has been the subject of much research. Many elegant data structures like the range tree [7], the priority search tree [27], the segment tree <ref> [6] </ref>, and the interval tree [14, 15] have been proposed for use in main memory for 2-dimensional range searching and its special cases (see [11] for a detailed survey). Most of these structures are not efficient when mapped to external memory. <p> It should be mentioned that the p-range tree can be extended to answer general 2-dimensional queries, and that very recently a static structure for 3-dimensional queries has been developed in [43]. The segment tree <ref> [6] </ref> can also be used to solve the stabbing query problem, but even in internal memory it uses more than linear space.
Reference: [7] <author> J. L. Bentley. </author> <title> Multidimensional divide and conquer. </title> <journal> Communications of the ACM, </journal> <volume> 23(6):214229, </volume> <year> 1980. </year>
Reference-contexts: The problem of 2-dimensional range searching in both main and external memory has been the subject of much research. Many elegant data structures like the range tree <ref> [7] </ref>, the priority search tree [27], the segment tree [6], and the interval tree [14, 15] have been proposed for use in main memory for 2-dimensional range searching and its special cases (see [11] for a detailed survey). Most of these structures are not efficient when mapped to external memory.
Reference: [8] <author> G. Blankenagel and R. Guting. </author> <title> XP-trees External priority search trees. </title> <type> Technical report, </type> <institution> FernUniversitat Hagen, </institution> <note> Informatik-Bericht Nr. 92, </note> <year> 1990. </year>
Reference-contexts: The priority search tree [27] for example can be used to answer slightly more general queries than diagonal corner queries, namely 3-sided range queries (Figure 1), in optimal query and update time using optimal space. A number of attempts have been made to externalize this structure, including <ref> [8, 21, 35] </ref>, but they are all non-optimal. The structure in [21] uses optimal space but answers queries in O (log 2 N + T =B) I/Os. The structure in [8] also uses optimal space but answers queries in O (log B N + T ) I/Os. <p> A number of attempts have been made to externalize this structure, including [8, 21, 35], but they are all non-optimal. The structure in [21] uses optimal space but answers queries in O (log 2 N + T =B) I/Os. The structure in <ref> [8] </ref> also uses optimal space but answers queries in O (log B N + T ) I/Os. In both papers a number of non-optimal dynamic versions of the structures are also developed. <p> Some attempts have been Space (blocks) Query I/O bound Update I/O bound Priority search tree [21] O (N=B) O (log 2 N + T =B) XP-tree <ref> [8] </ref> O (N=B) O (log B N + T ) Metablock tree [23] O (N=B) O (log B N + T =B) O (log B N + (log B N ) 2 =B) amortized (inserts only) P-range tree [41] O (N=B) O (log B N + T =B + IL fl <p> This creates a number of problems when we want to store segments in secondary structures such that queries can be answered efficiently. The starting idea behind our successful externalization of the structure, as compared with previous attempts <ref> [8, 35] </ref>, is that the nodes in our structure have fan-out p B instead of B, following ideas from [2, 3, 4].
Reference: [9] <author> G. Blankenagel and R. Guting. </author> <title> External segment trees. </title> <address> Al-gorithmica, 12:498532, </address> <year> 1994. </year>
Reference-contexts: B N ) 2 =B) amortized Path Caching [35] O ((N=B) log 2 log 2 B) O (log B N + T =B) O (log B N ) amortized Our Result O (N=B) O (log B N + T =B) O (log B N ) made to externalizing this structure <ref> [9, 35] </ref> and they all use O ((N=B) log 2 N ) blocks of external memory. The best of them [35] is static and answers queries in the optimal O (log B N + T =B) I/Os. 1.2. <p> Finally, in Section 4 we discuss how to use the ideas behind our external interval tree to develop an external version of the segment tree with space bound O ((N=B) log B N ). This improves upon previously known data structures <ref> [9, 35] </ref>, which use O ((N=B) log 2 N ) blocks of external memory. Our structure has worst-case optimal query and update I/O bounds, whereas the other known structures are only query optimal in the static case. <p> All bounds are worst case. 4. External-memory segment tree The ideas behind our external-memory interval tree can also be used to develop an external-memory segment treelike structure with optimal update and query I/O bounds and a better space bound than all previous known such structures <ref> [9, 35] </ref>. In internal memory a segment tree consists of a binary base tree over the endpoints of segments stored in the tree, and a given segment is stored in the secondary structure of up to two nodes on each level of the tree.
Reference: [10] <author> N. Blum and K. Mehlhorn. </author> <title> On the average number of re-balancing operations in weight-balanced trees. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 11:303320, </address> <year> 1980. </year>
Reference-contexts: In internal memory a natural choice of dynamic base tree is therefore the BB [ff]- tree [30], because in this structure a node with w items below it (with weight w) can only be involved in a rebal-ancing operation for every (w) updates that access (pass through) the node <ref> [10, 28] </ref>. This leads to an O (1) amortized bound on performing a rebalancing operation. Unfortunately BB [ff]-trees are not suitable for implementation in external memory.
Reference: [11] <author> Y.-J. Chiang and R. Tamassia. </author> <title> Dynamic algorithms in com-putational geometry. </title> <journal> Proceedings of IEEE, Special Issue on Computational Geometry, </journal> <volume> 80(9):362381, </volume> <year> 1992. </year>
Reference-contexts: Many elegant data structures like the range tree [7], the priority search tree [27], the segment tree [6], and the interval tree [14, 15] have been proposed for use in main memory for 2-dimensional range searching and its special cases (see <ref> [11] </ref> for a detailed survey). Most of these structures are not efficient when mapped to external memory.
Reference: [12] <author> D. Cormer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(2):121137, </volume> <year> 1979. </year>
Reference-contexts: The assumption is often made that main memory is capable of holding O (B 2 ) units, but we can do without that assumption in this paper. While B-trees and their variants <ref> [5, 12] </ref> have been an unqualified success in supporting external dynamic 1-dimensional range searching, they are inefficient at 3-sided query2-sided querydiagonal corner query general 2-dimensional query handling more general problems like 2-dimensional or higher-dimensional range searching. <p> Again we believe that our way of removing the amortization is simpler than a possible complicated use of the techniques in [44]. 2. External-memory interval tree with fixed endpoint set Our external-memory interval tree makes use of two kinds of secondary structures: the B-tree and a corner structure. B-trees <ref> [5, 12] </ref> or more generally (a; b)-trees [20] are search tree structures suitable for external memory: Lemma 1 A set of N elements can be stored in a B-tree structure using O (N=B) blocks of external memory such that updates and queries can be performed in O (log B N ) <p> Weight-balanced B-tree In a normal B-tree <ref> [5, 12] </ref> all leaves have the same depth, and each internal node has at least a and at most 2a 1 children, where a is some constant. In weak B-trees or (a; b)-trees [20] a wider range in the number of children is allowed.
Reference: [13] <author> R. F. Cromp. </author> <title> An intellegent information fusion system for handling the archiving and querying of terabyte-sized spatial databases. </title> <editor> In S. R. Tate ed., </editor> <title> Report on the Workshop on Data and Image Compression Needs and Uses in the Scientific Community, </title> <type> CESDIS Technical Report Series, TR93 99, </type> <pages> pages 7584, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [13, 19, 25, 38, 42] </ref>, graphics [16], fl Supported in part by the U.S. Army Research Office under grant DAAH049610013. <p> Often the amount of data manipulated in such applications are too large to fit in main memory and must reside on disk, and in such cases the Input/Output (I/O) communication can become a bottleneck. NASA's EOS project GIS system <ref> [13] </ref> is an example of such an application, as it is expected to manipulate petabytes (thousands of terabytes, or millions of gigabytes) of data! The effect of the I/O bottleneck is getting more pronounced as internal computation gets faster, and especially as parallel computing gains popularity [33].
Reference: [14] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part I. </title> <journal> Int. J. Computer Mathematics, </journal> <volume> 13:209219, </volume> <year> 1983. </year>
Reference-contexts: The problem of 2-dimensional range searching in both main and external memory has been the subject of much research. Many elegant data structures like the range tree [7], the priority search tree [27], the segment tree [6], and the interval tree <ref> [14, 15] </ref> have been proposed for use in main memory for 2-dimensional range searching and its special cases (see [11] for a detailed survey). Most of these structures are not efficient when mapped to external memory. <p> Also, as mentioned, our structure works without the assumption often made that the internal memory is capable of holding O (B 2 ) items. Our solution to the stabbing query problem is an external-memory version of the interval tree <ref> [14, 15] </ref>. In Section 2 we present the basic structure where the endpoints of the intervals stored in the structure belong to a fixed set of points. In Section 3 we then remove the fixed endpoint-set assumption. <p> The structure can be constructed in O (k=B) I/Os. 2.1. The structure An internal-memory interval tree consists of a binary tree over the endpoints of the segments stored in the structure, with the segments stored in secondary structure in the internal nodes of this tree <ref> [14] </ref>. We associate an interval X v with every node v consisting of all the endpoints below v.
Reference: [15] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part II. </title> <journal> Int. J. Computer Mathematics, </journal> <volume> 13:221229, </volume> <year> 1983. </year>
Reference-contexts: The problem of 2-dimensional range searching in both main and external memory has been the subject of much research. Many elegant data structures like the range tree [7], the priority search tree [27], the segment tree [6], and the interval tree <ref> [14, 15] </ref> have been proposed for use in main memory for 2-dimensional range searching and its special cases (see [11] for a detailed survey). Most of these structures are not efficient when mapped to external memory. <p> Also, as mentioned, our structure works without the assumption often made that the internal memory is capable of holding O (B 2 ) items. Our solution to the stabbing query problem is an external-memory version of the interval tree <ref> [14, 15] </ref>. In Section 2 we present the basic structure where the endpoints of the intervals stored in the structure belong to a fixed set of points. In Section 3 we then remove the fixed endpoint-set assumption.
Reference: [16] <author> J. Foley, A. van Dam, S. Feiner, and J. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) [13, 19, 25, 38, 42], graphics <ref> [16] </ref>, fl Supported in part by the U.S. Army Research Office under grant DAAH049610013. Part of this work was done while at BRICS, Department of Computer Science, University of Aarhus, Den-mark, and supported in part by the ESPRIT Long Term Research Pro-gramme of the EU under project number 20244 (ALCOMIT).
Reference: [17] <author> O. Gunther. </author> <title> The design of the cell tree: An object-oriented index structure for geometric databases. </title> <booktitle> In Proc. of the fifth Int. Conf. on Data Engineering, </booktitle> <pages> pages 598605, </pages> <year> 1989. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees <ref> [17] </ref>, and various R-trees [18, 40]. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [18] <author> A. Guttman. R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM Conf. on Management of Data, </booktitle> <pages> pages 4757, </pages> <year> 1985. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees <ref> [18, 40] </ref>. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [19] <author> L. M. Haas and W. F. Cody. </author> <title> Exploiting extensible dbms in integrated geographic information systems. </title> <booktitle> In Proc. of Advances in Spatial Databases, LNCS 525, </booktitle> <year> 1991. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [13, 19, 25, 38, 42] </ref>, graphics [16], fl Supported in part by the U.S. Army Research Office under grant DAAH049610013.
Reference: [20] <author> S. Huddleston and K. Mehlhorn. </author> <title> A new data structure for representing sorted lists. </title> <journal> Acta Informatica, </journal> <volume> 17:157184, </volume> <year> 1982. </year>
Reference-contexts: External-memory interval tree with fixed endpoint set Our external-memory interval tree makes use of two kinds of secondary structures: the B-tree and a corner structure. B-trees [5, 12] or more generally (a; b)-trees <ref> [20] </ref> are search tree structures suitable for external memory: Lemma 1 A set of N elements can be stored in a B-tree structure using O (N=B) blocks of external memory such that updates and queries can be performed in O (log B N ) I/Os. <p> Weight-balanced B-tree In a normal B-tree [5, 12] all leaves have the same depth, and each internal node has at least a and at most 2a 1 children, where a is some constant. In weak B-trees or (a; b)-trees <ref> [20] </ref> a wider range in the number of children is allowed. Here we define the weight-balanced B-tree by imposing constraints on the weight of subtrees rather than on the number of children.
Reference: [21] <author> C. Icking, R. Klein, and T. Ottmann. </author> <title> Priority search trees in secondary memory. </title> <booktitle> In Proc. Graph-Theoretic Concepts in Computer Science, </booktitle> <volume> LNCS 314, </volume> <pages> pages 8493, </pages> <year> 1987. </year>
Reference-contexts: The priority search tree [27] for example can be used to answer slightly more general queries than diagonal corner queries, namely 3-sided range queries (Figure 1), in optimal query and update time using optimal space. A number of attempts have been made to externalize this structure, including <ref> [8, 21, 35] </ref>, but they are all non-optimal. The structure in [21] uses optimal space but answers queries in O (log 2 N + T =B) I/Os. The structure in [8] also uses optimal space but answers queries in O (log B N + T ) I/Os. <p> A number of attempts have been made to externalize this structure, including [8, 21, 35], but they are all non-optimal. The structure in <ref> [21] </ref> uses optimal space but answers queries in O (log 2 N + T =B) I/Os. The structure in [8] also uses optimal space but answers queries in O (log B N + T ) I/Os. <p> The segment tree [6] can also be used to solve the stabbing query problem, but even in internal memory it uses more than linear space. Some attempts have been Space (blocks) Query I/O bound Update I/O bound Priority search tree <ref> [21] </ref> O (N=B) O (log 2 N + T =B) XP-tree [8] O (N=B) O (log B N + T ) Metablock tree [23] O (N=B) O (log B N + T =B) O (log B N + (log B N ) 2 =B) amortized (inserts only) P-range tree [41] O
Reference: [22] <author> P. C. Kanellakis, G. Kuper, and P. Revesz. </author> <title> Constraint query languages. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 299313, </pages> <year> 1990. </year>
Reference-contexts: Email: large@cs.duke.edu y Supported in part by the National Science Foundation under grant CCR9522047 and by the U.S. Army Research Office under grants DAAH0493G0076 and DAAH049610013. Email: jsv@cs.duke.edu indexing in object-oriented and temporal databases [23, 34], and constraint logic programming <ref> [22, 23] </ref>. Often the amount of data manipulated in such applications are too large to fit in main memory and must reside on disk, and in such cases the Input/Output (I/O) communication can become a bottleneck. <p> Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually [37]. In this paper we consider the special case of external 2-dimensional range searching called dynamic interval management, which is highlighted in <ref> [22, 23, 35, 41] </ref> as one of the important special cases of external range searching because of its applications in object-oriented databases and constraint logic programming. <p> In [23] the dynamic interval management problem is considered, in which intervals can be inserted and deleted, and given a query interval all current intervals that intersect the query interval must be reported. This problem is crucial for indexing constraints in constraint databases and in temporal databases <ref> [22, 23, 34] </ref>. A key component of external dynamic interval management is answering stabbing queries. Given a set of intervals, to answer a stabbing query with a point q one has to report all intervals that contain q.
Reference: [23] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <year> 1993. </year> <note> Invited to special issue of JCSS on Principles of Database Systems (to appear). A complete version appears as technical report 90-31, </note> <institution> Brown University. </institution>
Reference-contexts: Email: large@cs.duke.edu y Supported in part by the National Science Foundation under grant CCR9522047 and by the U.S. Army Research Office under grants DAAH0493G0076 and DAAH049610013. Email: jsv@cs.duke.edu indexing in object-oriented and temporal databases <ref> [23, 34] </ref>, and constraint logic programming [22, 23]. Often the amount of data manipulated in such applications are too large to fit in main memory and must reside on disk, and in such cases the Input/Output (I/O) communication can become a bottleneck. <p> Email: large@cs.duke.edu y Supported in part by the National Science Foundation under grant CCR9522047 and by the U.S. Army Research Office under grants DAAH0493G0076 and DAAH049610013. Email: jsv@cs.duke.edu indexing in object-oriented and temporal databases [23, 34], and constraint logic programming <ref> [22, 23] </ref>. Often the amount of data manipulated in such applications are too large to fit in main memory and must reside on disk, and in such cases the Input/Output (I/O) communication can become a bottleneck. <p> Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually [37]. In this paper we consider the special case of external 2-dimensional range searching called dynamic interval management, which is highlighted in <ref> [22, 23, 35, 41] </ref> as one of the important special cases of external range searching because of its applications in object-oriented databases and constraint logic programming. <p> The problem of developing a space and I/O-time optimal external data structure for the problem is mentioned in [35] as one of the major theoretical open problems in the area, and in <ref> [23] </ref> it is even called the most elegant open question. In this paper we develop such an optimal structure. 1.1. Memory model and previous results We will be working in the standard model for external memory with one (logical) disk [1, 24]. <p> The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see <ref> [23] </ref> for a complete reference on the field). Recently some progress has been made on the construction of external 2-dimensional range searching structures with provably good performance. In [23] the dynamic interval management problem is considered, in which intervals can be inserted and deleted, and given a query interval all current <p> performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see <ref> [23] </ref> for a complete reference on the field). Recently some progress has been made on the construction of external 2-dimensional range searching structures with provably good performance. In [23] the dynamic interval management problem is considered, in which intervals can be inserted and deleted, and given a query interval all current intervals that intersect the query interval must be reported. This problem is crucial for indexing constraints in constraint databases and in temporal databases [22, 23, 34]. <p> In [23] the dynamic interval management problem is considered, in which intervals can be inserted and deleted, and given a query interval all current intervals that intersect the query interval must be reported. This problem is crucial for indexing constraints in constraint databases and in temporal databases <ref> [22, 23, 34] </ref>. A key component of external dynamic interval management is answering stabbing queries. Given a set of intervals, to answer a stabbing query with a point q one has to report all intervals that contain q. <p> The metablock tree developed in <ref> [23] </ref> answers diagonal corner queries in optimal O (log B N + T =B) I/Os using optimal O (N=B) blocks of external memory, where T denotes the number of points re ported. <p> Various other external data structures for answering 3-sided queries are also developed in <ref> [23] </ref> and in [35]. In [41] another attempt is made on designing a structure for answering 3-sided queries and a dynamic structure called the p-range tree is developed. <p> Some attempts have been Space (blocks) Query I/O bound Update I/O bound Priority search tree [21] O (N=B) O (log 2 N + T =B) XP-tree [8] O (N=B) O (log B N + T ) Metablock tree <ref> [23] </ref> O (N=B) O (log B N + T =B) O (log B N + (log B N ) 2 =B) amortized (inserts only) P-range tree [41] O (N=B) O (log B N + T =B + IL fl (B)) O (log B N + (log B N ) 2 =B) <p> Overview of our results Our main results in this paper is an optimal external-memory data structure for the stabbing query problem. As mentioned, this result leads to the first known optimal solution to the interval management problem, and thus it settles an open problem highlighted in <ref> [23, 35, 41] </ref>. <p> A B-tree on N sorted elements can be built in O (N=B) I/Os and the T smallest (largest) elements can be reported in O (T =B + 1) I/Os. A corner structure <ref> [23] </ref> is a static external stabbing query data structure that is efficient when the number of segments stored in it is less than B 2 . In [23] it is shown how the structure can be made dynamic with amortized update I/O bounds, basically by loading the whole structure into internal <p> A corner structure <ref> [23] </ref> is a static external stabbing query data structure that is efficient when the number of segments stored in it is less than B 2 . In [23] it is shown how the structure can be made dynamic with amortized update I/O bounds, basically by loading the whole structure into internal memory, rebuilding it, and outputting it again once B updates have been done.
Reference: [24] <author> D. Knuth. </author> <title> The Art of Computer Programming, Vol. 3 Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: In this paper we develop such an optimal structure. 1.1. Memory model and previous results We will be working in the standard model for external memory with one (logical) disk <ref> [1, 24] </ref>. We assume that in one I/O operation each external-memory access transmits one page of B units of data. We measure the efficiency of an algorithm in terms of the number of I/O operations that it performs.
Reference: [25] <author> R. Laurini and A. D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. A.P.I.C. Series, </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [13, 19, 25, 38, 42] </ref>, graphics [16], fl Supported in part by the U.S. Army Research Office under grant DAAH049610013.
Reference: [26] <author> D. Lomet and B. Salzberg. </author> <title> The hB-tree: A multiattribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4):625658, </volume> <year> 1990. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees <ref> [26] </ref>, cell-trees [17], and various R-trees [18, 40]. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [27] <author> E. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2):257276, </volume> <year> 1985. </year>
Reference-contexts: The problem of 2-dimensional range searching in both main and external memory has been the subject of much research. Many elegant data structures like the range tree [7], the priority search tree <ref> [27] </ref>, the segment tree [6], and the interval tree [14, 15] have been proposed for use in main memory for 2-dimensional range searching and its special cases (see [11] for a detailed survey). Most of these structures are not efficient when mapped to external memory. <p> The structure is fairly involved and supports only insertions (not deletions) in O (log B N + (log B N ) 2 =B) I/Os amortized. As mentioned a number of elegant internal-memory solutions exist for 2-dimensional range searching. The priority search tree <ref> [27] </ref> for example can be used to answer slightly more general queries than diagonal corner queries, namely 3-sided range queries (Figure 1), in optimal query and update time using optimal space.
Reference: [28] <author> K. Mehlhorn. </author> <title> Data Structures and Algorithms 3: Multi-dimensional Searching and Computational Geometry. </title> <note> Springer-Verlag, EATCS Monographs on Theoretical Computer Science, </note> <year> 1984. </year>
Reference-contexts: In Section 3 we then remove the fixed endpoint-set assumption. In internal memory the assumption is normally removed by using a BB [ff]-tree [30] as base search tree structure <ref> [28] </ref>, and this leads to amortized update bounds. But as BB [ff]-trees are not very suitable for implementation in external memory, we develop a special weight-balanced B-tree for use in our external interval tree structure. <p> In internal memory a natural choice of dynamic base tree is therefore the BB [ff]- tree [30], because in this structure a node with w items below it (with weight w) can only be involved in a rebal-ancing operation for every (w) updates that access (pass through) the node <ref> [10, 28] </ref>. This leads to an O (1) amortized bound on performing a rebalancing operation. Unfortunately BB [ff]-trees are not suitable for implementation in external memory.
Reference: [29] <author> J. Nievergelt, H. Hinterberger, and K. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1):257276, </volume> <year> 1984. </year>
Reference-contexts: However, the practical need for I/O support has led to the development of a large number of external data structures that do not have good theoretical worst-case update and query I/O bounds, but do have good average-case behavior for common problems. Such methods include the grid file <ref> [29] </ref>, various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees [18, 40].
Reference: [30] <author> J. Nievergelt and E. M. Reingold. </author> <title> Binary search tree of bounded balance. </title> <journal> SIAM Journal of Computing, </journal> <volume> 2(1), </volume> <year> 1973. </year>
Reference-contexts: In Section 2 we present the basic structure where the endpoints of the intervals stored in the structure belong to a fixed set of points. In Section 3 we then remove the fixed endpoint-set assumption. In internal memory the assumption is normally removed by using a BB [ff]-tree <ref> [30] </ref> as base search tree structure [28], and this leads to amortized update bounds. But as BB [ff]-trees are not very suitable for implementation in external memory, we develop a special weight-balanced B-tree for use in our external interval tree structure. <p> In internal memory a natural choice of dynamic base tree is therefore the BB [ff]- tree <ref> [30] </ref>, because in this structure a node with w items below it (with weight w) can only be involved in a rebal-ancing operation for every (w) updates that access (pass through) the node [10, 28]. This leads to an O (1) amortized bound on performing a rebalancing operation.
Reference: [31] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> In Proc. ACM Conf. on Management of Data, </booktitle> <pages> pages 326336, </pages> <year> 1986. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders <ref> [31] </ref> and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees [18, 40]. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [32] <author> M. H. Overmars. </author> <title> The Design of Dynamic Data Structures. </title> <publisher> Springer-Verlag, LNCS 156, </publisher> <year> 1983. </year>
Reference-contexts: The lazy split is done using ideas similar to the global rebuilding technique <ref> [32] </ref>, and in such a way that we can still perform queries in the optimal number of I/Os. <p> In total a split can now be done in O (( B) l+1 ) accesses, which according to the above dis cussion still results in an O (log B N ) I/O insert boundbut now the bound is worst-case. Deletions can be handled by a global rebuilding technique <ref> [32] </ref> described in the full paper and we obtain the following theorem.
Reference: [33] <author> Y. N. Patt. </author> <title> The I/O subsystem a candidate for improvement. Guest Editor's Introduction in IEEE Computer, </title> <address> 27(3):1516, </address> <year> 1994. </year>
Reference-contexts: EOS project GIS system [13] is an example of such an application, as it is expected to manipulate petabytes (thousands of terabytes, or millions of gigabytes) of data! The effect of the I/O bottleneck is getting more pronounced as internal computation gets faster, and especially as parallel computing gains popularity <ref> [33] </ref>. Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually [37].
Reference: [34] <author> S. Ramaswamy and P. Kanellakis. </author> <title> OOBD indexing by class division. </title> <booktitle> In A.P.I.C. Series, </booktitle> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Email: large@cs.duke.edu y Supported in part by the National Science Foundation under grant CCR9522047 and by the U.S. Army Research Office under grants DAAH0493G0076 and DAAH049610013. Email: jsv@cs.duke.edu indexing in object-oriented and temporal databases <ref> [23, 34] </ref>, and constraint logic programming [22, 23]. Often the amount of data manipulated in such applications are too large to fit in main memory and must reside on disk, and in such cases the Input/Output (I/O) communication can become a bottleneck. <p> In [23] the dynamic interval management problem is considered, in which intervals can be inserted and deleted, and given a query interval all current intervals that intersect the query interval must be reported. This problem is crucial for indexing constraints in constraint databases and in temporal databases <ref> [22, 23, 34] </ref>. A key component of external dynamic interval management is answering stabbing queries. Given a set of intervals, to answer a stabbing query with a point q one has to report all intervals that contain q.
Reference: [35] <author> S. Ramaswamy and S. Subramanian. </author> <title> Path caching: A technique for optimal external searching. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually [37]. In this paper we consider the special case of external 2-dimensional range searching called dynamic interval management, which is highlighted in <ref> [22, 23, 35, 41] </ref> as one of the important special cases of external range searching because of its applications in object-oriented databases and constraint logic programming. <p> The problem of developing a space and I/O-time optimal external data structure for the problem is mentioned in <ref> [35] </ref> as one of the major theoretical open problems in the area, and in [23] it is even called the most elegant open question. In this paper we develop such an optimal structure. 1.1. <p> The priority search tree [27] for example can be used to answer slightly more general queries than diagonal corner queries, namely 3-sided range queries (Figure 1), in optimal query and update time using optimal space. A number of attempts have been made to externalize this structure, including <ref> [8, 21, 35] </ref>, but they are all non-optimal. The structure in [21] uses optimal space but answers queries in O (log 2 N + T =B) I/Os. The structure in [8] also uses optimal space but answers queries in O (log B N + T ) I/Os. <p> The structure in [8] also uses optimal space but answers queries in O (log B N + T ) I/Os. In both papers a number of non-optimal dynamic versions of the structures are also developed. In <ref> [35] </ref> a technique called path caching for transforming an efficient internal-memory data structure into an I/O efficient one is developed. <p> Various other external data structures for answering 3-sided queries are also developed in [23] and in <ref> [35] </ref>. In [41] another attempt is made on designing a structure for answering 3-sided queries and a dynamic structure called the p-range tree is developed. <p> (log B N + T =B) O (log B N + (log B N ) 2 =B) amortized (inserts only) P-range tree [41] O (N=B) O (log B N + T =B + IL fl (B)) O (log B N + (log B N ) 2 =B) amortized Path Caching <ref> [35] </ref> O ((N=B) log 2 log 2 B) O (log B N + T =B) O (log B N ) amortized Our Result O (N=B) O (log B N + T =B) O (log B N ) made to externalizing this structure [9, 35] and they all use O ((N=B) log <p> B N ) 2 =B) amortized Path Caching [35] O ((N=B) log 2 log 2 B) O (log B N + T =B) O (log B N ) amortized Our Result O (N=B) O (log B N + T =B) O (log B N ) made to externalizing this structure <ref> [9, 35] </ref> and they all use O ((N=B) log 2 N ) blocks of external memory. The best of them [35] is static and answers queries in the optimal O (log B N + T =B) I/Os. 1.2. <p> The best of them <ref> [35] </ref> is static and answers queries in the optimal O (log B N + T =B) I/Os. 1.2. Overview of our results Our main results in this paper is an optimal external-memory data structure for the stabbing query problem. <p> Overview of our results Our main results in this paper is an optimal external-memory data structure for the stabbing query problem. As mentioned, this result leads to the first known optimal solution to the interval management problem, and thus it settles an open problem highlighted in <ref> [23, 35, 41] </ref>. <p> Finally, in Section 4 we discuss how to use the ideas behind our external interval tree to develop an external version of the segment tree with space bound O ((N=B) log B N ). This improves upon previously known data structures <ref> [9, 35] </ref>, which use O ((N=B) log 2 N ) blocks of external memory. Our structure has worst-case optimal query and update I/O bounds, whereas the other known structures are only query optimal in the static case. <p> This creates a number of problems when we want to store segments in secondary structures such that queries can be answered efficiently. The starting idea behind our successful externalization of the structure, as compared with previous attempts <ref> [8, 35] </ref>, is that the nodes in our structure have fan-out p B instead of B, following ideas from [2, 3, 4]. <p> All bounds are worst case. 4. External-memory segment tree The ideas behind our external-memory interval tree can also be used to develop an external-memory segment treelike structure with optimal update and query I/O bounds and a better space bound than all previous known such structures <ref> [9, 35] </ref>. In internal memory a segment tree consists of a binary base tree over the endpoints of segments stored in the tree, and a given segment is stored in the secondary structure of up to two nodes on each level of the tree.
Reference: [36] <author> J. Robinson. </author> <title> The K-D-B tree: A search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. ACM Conf. on Management of Data, </booktitle> <pages> pages 1018, </pages> <year> 1984. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress <ref> [36] </ref>, hB-trees [26], cell-trees [17], and various R-trees [18, 40]. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [37] <author> C. Ruemmler and J. Wilkes. </author> <title> An introduction to disk drive modeling. </title> <journal> IEEE Computer, </journal> <volume> 27(3):1728, </volume> <year> 1994. </year>
Reference-contexts: Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually <ref> [37] </ref>. In this paper we consider the special case of external 2-dimensional range searching called dynamic interval management, which is highlighted in [22, 23, 35, 41] as one of the important special cases of external range searching because of its applications in object-oriented databases and constraint logic programming.
Reference: [38] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison Wes-ley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [13, 19, 25, 38, 42] </ref>, graphics [16], fl Supported in part by the U.S. Army Research Office under grant DAAH049610013. <p> Such methods include the grid file [29], various quad-trees <ref> [38, 39] </ref>, z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees [18, 40].
Reference: [39] <author> H. Samet. </author> <title> The Design and Analyses of Spatial Data Structures. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees <ref> [38, 39] </ref>, z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees [18, 40].
Reference: [40] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + -tree: A dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. IEEE International Conf. on Very Large Databases, </booktitle> <year> 1987. </year>
Reference-contexts: Such methods include the grid file [29], various quad-trees [38, 39], z-orders [31] and other space filling curves, k-d-B-tress [36], hB-trees [26], cell-trees [17], and various R-trees <ref> [18, 40] </ref>. The worst-case performance of these data structures is much worse than the optimal bounds achievable for dynamic external 1-dimensional range searching using B-trees (see [23] for a complete reference on the field).
Reference: [41] <author> S. Subramanian and S. Ramaswamy. </author> <title> The p-range tree: A new data structure for range searching in secondary memory. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 378387, </pages> <year> 1995. </year>
Reference-contexts: Currently, technological advances are increasing CPU speeds at an annual rate of 4060% while disk transfer rates are only increasing by 710% annually [37]. In this paper we consider the special case of external 2-dimensional range searching called dynamic interval management, which is highlighted in <ref> [22, 23, 35, 41] </ref> as one of the important special cases of external range searching because of its applications in object-oriented databases and constraint logic programming. <p> Various other external data structures for answering 3-sided queries are also developed in [23] and in [35]. In <ref> [41] </ref> another attempt is made on designing a structure for answering 3-sided queries and a dynamic structure called the p-range tree is developed. <p> tree [21] O (N=B) O (log 2 N + T =B) XP-tree [8] O (N=B) O (log B N + T ) Metablock tree [23] O (N=B) O (log B N + T =B) O (log B N + (log B N ) 2 =B) amortized (inserts only) P-range tree <ref> [41] </ref> O (N=B) O (log B N + T =B + IL fl (B)) O (log B N + (log B N ) 2 =B) amortized Path Caching [35] O ((N=B) log 2 log 2 B) O (log B N + T =B) O (log B N ) amortized Our Result <p> Overview of our results Our main results in this paper is an optimal external-memory data structure for the stabbing query problem. As mentioned, this result leads to the first known optimal solution to the interval management problem, and thus it settles an open problem highlighted in <ref> [23, 35, 41] </ref>.
Reference: [42] <author> M. van Kreveld. </author> <title> Geographic information systems. </title> <institution> Utrecht University, INF/DOC9501, </institution> <year> 1995. </year>
Reference-contexts: 1. Introduction In recent years there has been much effort in developing efficient external-memory data structures for range searching, which is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [13, 19, 25, 38, 42] </ref>, graphics [16], fl Supported in part by the U.S. Army Research Office under grant DAAH049610013.
Reference: [43] <author> D. E. Vengroff and J. S. Vitter. </author> <title> Efficient 3-d range searching in external memory. </title> <booktitle> In Proc. ACM Symp. on Theory of Computation, </booktitle> <year> 1996. </year>
Reference-contexts: It should be mentioned that the p-range tree can be extended to answer general 2-dimensional queries, and that very recently a static structure for 3-dimensional queries has been developed in <ref> [43] </ref>. The segment tree [6] can also be used to solve the stabbing query problem, but even in internal memory it uses more than linear space.
Reference: [44] <author> D. Willard and G. Lueker. </author> <title> Adding range restriction capability to dynamic data structures. </title> <journal> Journal of the ACM, </journal> <volume> 32(3):597617, </volume> <year> 1985. </year>
Reference-contexts: For example fixing B to a constant in our result yields an internal-memory interval tree with worst-case update bounds. Our B-tree structure can also be used as a (simpler) alternative to the rather complicated structure developed in <ref> [44] </ref> in order to add range restriction capabilities to internal-memory dynamic data structures. It seems possible to use the techniques in [44] to remove the amortization from the update bound of the internal interval tree, but our method is much simpler. <p> Our B-tree structure can also be used as a (simpler) alternative to the rather complicated structure developed in <ref> [44] </ref> in order to add range restriction capabilities to internal-memory dynamic data structures. It seems possible to use the techniques in [44] to remove the amortization from the update bound of the internal interval tree, but our method is much simpler. <p> Fixing B to a constant yields an internal-memory segment tree (without the fixed endpoint set assumption) with worst case update bounds. Again we believe that our way of removing the amortization is simpler than a possible complicated use of the techniques in <ref> [44] </ref>. 2. External-memory interval tree with fixed endpoint set Our external-memory interval tree makes use of two kinds of secondary structures: the B-tree and a corner structure. <p> It will not split before it has weight 2a l k &gt; 2 4a l1 k = 4N . As mentioned in the introduction the weight-balanced B-tree can now be used as an alternative structure to the rather complicated structure developed in <ref> [44] </ref> in order to add range restriction capabilities to internal-memory dynamic data structures. Details will appear in the full paper.
References-found: 44

