URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/icse-compressed.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: hartman@cs.utexas.edu  
Title: Understanding Natural Programs Using Proper Decomposition  
Author: John Hartman 
Address: Austin, TX, 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We present a practical method for automatic control concept recognition in large, unstructured imperative programs. Control concepts are abstract notions about interactions between control flow, data flow, and computation, eg. "read-process loop". They are recognized by comparing a language independent abstract program representation against standard implementation plans. Recognition is efficient and scalable because the program representation is hierarchically decomposed by propers (single entry/exit control flow sub-graphs). A recognition experiment using the UNPROG program understander shows the method's performance, the role of proper decomposition, and planfulness in a sample of programs. As an example of the method's applications, we describe how recognized control concepts are used to perform Cobol restructuring with quality not possible with existing syntactic methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Charles Babcock and John Gallant. </author> <title> IBM reveals tool to restructure VM, MVS Cobol code. </title> <booktitle> Computerworld, </booktitle> <pages> page 10, </pages> <month> November 25 </month> <year> 1985. </year>
Reference: [2] <author> Brenda S. Baker. </author> <title> An algorithm for structuring flowgraphs. </title> <journal> Journal of the ACM, </journal> <volume> 24(1), </volume> <month> Jan-uary </month> <year> 1977. </year>
Reference: [3] <author> Victor Basili and Harlan Mills. </author> <title> Understanding and documenting programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 8(3), </volume> <month> May </month> <year> 1982. </year>
Reference: [4] <author> Ted Biggerstaff. </author> <title> Design recovery for maintenance and reuse. </title> <booktitle> IEEE Computer, </booktitle> <month> July </month> <year> 1989. </year>
Reference: [5] <author> C. Bohm and G. Jacopini. </author> <title> Flow diagrams, Tur-ing machines and languages with only two formation rules. </title> <journal> Communications of the ACM, </journal> <volume> 9 </volume> <pages> 366-371, </pages> <month> May </month> <year> 1966. </year>
Reference: [6] <author> Eric Bush. </author> <title> The automatic restructuring of Cobol. </title> <booktitle> In Proceedings of the Conference on Software Maintenance, </booktitle> <pages> pages 35-41. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <month> November 11-13 </month> <year> 1985. </year>
Reference: [7] <author> R. Emmett Carlyle. </author> <title> Can AI save COBOL? Datamation, </title> <month> September 15 </month> <year> 1985. </year>
Reference: [8] <author> Federal Software Management Support Center. </author> <title> Parallel test and evaluation of a COBOL restructuring tool. </title> <type> Technical report, U.S. </type> <institution> General Services Administration, </institution> <month> September </month> <year> 1987. </year>
Reference: [9] <author> Thomas A. Corbi. </author> <title> Program understanding: Challenge for the 1990's. </title> <type> Technical Report RC 14370, </type> <institution> IBM Research Division, T.J. Watson Research Center, </institution> <month> January 30 </month> <year> 1989. </year>
Reference: [10] <author> E.W. Dijsktra. </author> <title> GO TO Statement considered harmful. </title> <journal> Communications of the ACM, </journal> <volume> 11(3) </volume> <pages> 147-148, </pages> <month> March </month> <year> 1968. </year>
Reference: [11] <author> Mehdi T. Harandi and Jim Q. Ning. </author> <title> Knowledge-Based program analysis. </title> <journal> IEEE Software, </journal> <pages> pages 75-81, </pages> <month> January </month> <year> 1990. </year>
Reference: [12] <author> John Hartman. </author> <title> Automatic control understanding for natural programs. </title> <type> Ph.D. Thesis AI 91-161, </type> <institution> Artificial Intelligence Laboratory, Dept. of Computer Sciences, The University of Texas at Austin, Austin, </institution> <address> TX 78712-1188., </address> <month> May </month> <year> 1991. </year> <title> To order send $20 to: AI Lab Publications, </title> <type> (512) 471-7316, Phuong Hai Pham, </type> <institution> phuong@cs.utexas.edu. </institution>
Reference-contexts: Existing work assumes the theory of program understanding:[29] Plan instances can be recognized in exist ing programs to recover the programmer's abstract concepts and intentions. 2.1 Existing Understanders Program understanding systems attempt to recognize plan instances by comparing program rep 1 See <ref> [12] </ref> for a complete description of the method and its implementation, evaluation, applications and implications. resentations with plan representations.
Reference: [13] <author> Philip A. Hausler, Mark G. Pleszkoch, Richard C. Linger, and Alan R. Hevner. </author> <title> Using function abstraction to understand program behavior. </title> <journal> IEEE Software, </journal> <pages> pages 55-83, </pages> <month> Jan-uary </month> <year> 1990. </year>
Reference: [14] <author> IBM. </author> <title> Cobol structuring facility Re-Engineering concepts. </title> <type> Technical Report SC34-4079-0, </type> <month> January </month> <year> 1986. </year>
Reference: [15] <author> Stanislaw Jarzabek and Kelly Tham. </author> <title> Towards automating software maintenance. </title> <institution> CSA Research and The National University of Singa-pore, </institution> <year> 1990. </year>
Reference: [16] <author> W. Lewis Johnson. </author> <title> INTENTION-BASED DIAGNOSIS OF NOVICE PROGRAMMING ERRORS. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference: [17] <author> Capers Jones. </author> <title> PROGRAMMING PRODUCTIVITY. </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference: [18] <author> S. Letovsky and E. Soloway. </author> <title> Delocalized plans and program comprehension. </title> <journal> IEEE Software, </journal> <volume> 3(3) </volume> <pages> 41-49, </pages> <year> 1986. </year>
Reference: [19] <author> Stanley Ian Letovsky. </author> <title> PLAN ANALYSIS OF PROGRAMS. </title> <type> PhD thesis, </type> <institution> Yale University, Dept. of Computer Science, </institution> <month> December </month> <year> 1988. </year> <note> YALEU/CSD/RR 662. </note>
Reference: [20] <author> Richard C. Linger, Harlan D. Mills, and Bernard I. </author> <title> Witt. STRUCTURED PROGRAMMING: THEORY AND PRACTICE. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year> <month> 11 </month>
Reference-contexts: See Section 4 and <ref> [20] </ref>. 2 MOVE zero to n. COMPUTE deduct = pay * .2 Loop. GO TO print-ded. ACCEPT ssn. ded2. ACCEPT job. COMPUTE deduct = pay * p15. ACCEPT pay. print-ded. DISPLAY ssn, job, pay. DISPLAY deduct. ADD 1 TO n. print-pay. DISPLAY pay IF ssn &lt; zero GO TO Done.
Reference: [21] <author> David H. Longstreet. </author> <title> SOFTWARE MAINTE--NANCE and COMPUTERS. </title> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1990. </year>
Reference: [22] <author> William R. Murray. </author> <title> AUTOMATIC PROGRAM DEBUGGING FOR INTELLIGENT TUTORING SYSTEMS. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [23] <author> Jim Q. Ning. </author> <title> A KNOWLEDGE-BASED APPROACH TO AUTOMATIC PROGRAM ANALYSIS. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1989. </year>
Reference: [24] <author> Wilma M. Osborne and Eliot J. Chikofsky. </author> <title> Fitting pieces to the maintenance puzzle. </title> <journal> IEEE Software, </journal> <month> January </month> <year> 1990. </year> <title> Theme issue on software maintenance and re-engineering. </title>
Reference: [25] <author> Bobbie Ann Fredsall Othmer. </author> <title> RESTRUCTURING COBOL PROGRAMS TO IMPROVE READABILITY. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <year> 1981. </year>
Reference: [26] <author> Michael R. Paige. </author> <title> On partitioning program graphs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 3(6), </volume> <month> November </month> <year> 1977. </year>
Reference: [27] <author> Girish Parikh. </author> <title> Restructuring engines clean up spaghetti code. </title> <type> Computerworld, </type> <month> March 31 </month> <year> 1986. </year> <note> See also Special Section on Software Maintenance, Computerworld, </note> <month> Feb. 19, </month> <year> 1986. </year>
Reference: [28] <author> Lyle Ramshaw. </author> <title> Eliminating GOTO's while preserving program structure. </title> <journal> Journal of the ACM, </journal> <volume> 35(4), </volume> <month> October </month> <year> 1988. </year>
Reference: [29] <author> Charles Rich. </author> <title> Inspection methods in programming. </title> <type> Technical Report MIT/AI/TR-604, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> June </month> <year> 1981. </year> <type> PhD Thesis. </type>
Reference: [30] <author> Charles Rich and Linda M. Wills. </author> <title> Recognizing a program's design: A graph-parsing approach. </title> <journal> IEEE Software, </journal> <pages> pages 83-90, </pages> <month> January </month> <year> 1990. </year>
Reference: [31] <author> Frank Rubin. </author> <title> "GOTO considered harmful" considered harmful. </title> <journal> Communications of the ACM, </journal> <volume> 30(3) </volume> <pages> 197-196, </pages> <month> March </month> <year> 1987. </year> <note> ACM Forum, and correspondence in 30:5, 30:6, 30:7, 30:8, 30:10, 30:11. </note>
Reference-contexts: This experiment also shows how a program understander can be used for empirical studies of programs at the conceptual level. For example, recognition results give a quantitative measure of planfulness. We investigated recognition of "bounded linear search" (BLS) in 20 programs for a double nested search problem. 9 <ref> [31] </ref> The programs were in various languages including C, Pascal, PL/I, Lisp and pseudocode.
Reference: [32] <author> Elliot Soloway, Kate Ehrlich, and Jeffrey Bonar. </author> <title> Cognitive strategies and looping concepts: An empirical study. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <month> November </month> <year> 1983. </year>
Reference: [33] <author> Elliot Soloway, Jeanne Pinto, Stan Letovsky, David Littman, and Robin Lampert. </author> <title> Designing documentation to compensate for delo-calized plans. </title> <journal> Communications of the ACM, </journal> <volume> 31(11) </volume> <pages> 1259-1267, </pages> <month> November </month> <year> 1988. </year>
Reference: [34] <author> G. Urschler. </author> <title> Automatic structuring of programs. </title> <journal> IBM Journal of Research and Development, </journal> <month> March </month> <year> 1975. </year>
Reference: [35] <author> Richard C. Waters. </author> <title> A method for automatically analyzing programs. </title> <booktitle> In International Joint Conference on Artificial Intelligence, </booktitle> <year> 1979. </year>
Reference: [36] <author> Richard C. Waters. </author> <title> Program translation via abstraction and reimplementation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(8) </volume> <pages> 1207-1228, </pages> <month> August </month> <year> 1988. </year>
Reference: [37] <author> Mark Weiser. </author> <title> Program slicing. </title> <booktitle> In 5th Int. Conf. on Software Engineering, </booktitle> <month> March </month> <year> 1981. </year>
Reference: [38] <author> Linda M Wills. </author> <title> Automated program recognition. </title> <type> Technical Report AI-TR-904, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> February </month> <year> 1987. </year> <title> M.S. </title> <type> Thesis. </type>
Reference: [39] <author> Linda M. Wills. </author> <title> Automated program recognition: A feasibility demonstration. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 45(1-2), </pages> <month> September </month> <year> 1990. </year> <month> 12 </month>
References-found: 39

