URL: http://www.cs.berkeley.edu/~vandervn/compsac_final.ps
Refering-URL: http://www.cs.berkeley.edu/~vandervn/compsac.html
Root-URL: http://www.cs.berkeley.edu
Title: Partial Instantiation Theorem Proving for Distributed Resource Location  
Author: Keith Vanderveen C.V. Ramamoorthy 
Address: Berkeley, CA 94024  
Affiliation: Department of Electrical Engineering and Computer Science University of California  
Abstract: In this paper, we present a partial instantiation theorem prover (INSTANT) which handles sentences in first-order logic in clausal or non-clausal form. INSTANT uses a variant of the GSAT algorithm for determining the satisfiabil-ity of a propositional sentence to increase its speed. The algorithm used in INSTANT can be parallelized with good speedup to improve performance. INSTANT is designed for matching requests for resources with available resources over a network. Environments in which distributed resource location takes place through matching of requests and advertisements include CORBA's Object Trading Service and communication between agents using KIF and KQML. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. S. </author> <title> A.M. Segre. Using hundreds of workstations to solve first-order logic problems. </title> <booktitle> In Twelfth National Conference on Artifical Intelligence, </booktitle> <address> Cambridge, Massachussets, </address> <month> July-August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Theorem provers are used today in a variety of applications such as verification of hardware and software, solving resource allocation and scheduling problems <ref> [1] </ref>, and answering queries posed to knowledge bases. All of these applications could benefit from improvements in theorem prover speed, but for applications which require real-time or near real-time response, the need for a faster theorem prover is crucial. <p> However, it is worth noting that several of the parallel theorem provers described in the literature are parallel versions of techniques that have inferior search properties, e.g. resolution or model elimination <ref> [1] </ref>. 3.2 GSAT We use a variant of GSAT to determine the satisfiability of the propositional sentence in step 1).
Reference: [2] <author> S.-J. L. C.-H. Wu. </author> <title> On parallelism of hyper-linking theorem proving: a preliminary report. </title> <booktitle> In 1996 International Conference on Parallel and Distributed Systems, </booktitle> <address> Tokyo, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Step 3, dissolving blockages, can also be parallelized since new formulas (clauses in the case of clausal input) can be produced independently by a plurality of processors and then conjoined to the original formula at a single processor or in shared memory. For details on parallelizing hyper-linking, please see <ref> [2] </ref>. Many parallel theorem provers have been described in the literature. A comparison of parallel partial instantia-tion with these theorem provers is not possible at this time because a parallel implementation of INSTANT isn't complete.
Reference: [3] <author> J. Frank. </author> <title> Weighting for godot: Learning heuristics for gsat. </title> <booktitle> In Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, Oregon, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Frank has observed that the performance of GSAT in terms of speed and likelihood of finding an answer can be significantly improved by weighting each clause according to how many different assignments have been evaluated while the clause remains unsatisfied <ref> [3] </ref>. We have incorporated these weightings into the non-clausal algorithm for GSAT by modifying Sebastiani's score-keeping algorithm to keep track of a weighted score (see [16]).
Reference: [4] <author> M. Genesereth and R. Fikes. </author> <title> Knowledge Interchange Format Version 3.0 Reference Manual, </title> <year> 1992. </year>
Reference-contexts: KIF carries the actual logical content of the message, and it has the full expressive power of first-order predicate logic <ref> [4] </ref>. Another content language which has been used with KQML is CycL, the knowledge representation and exchange language used by the Cyc project [10]. CycL is similar to KIF in that both have the full expressiveness of first-order logic.
Reference: [5] <author> J. Hooker. </author> <title> New methods for computing inferences in first order logic. </title> <journal> In Annals of Operations Research, </journal> <volume> volume 43, </volume> <pages> pages 47992, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: INSTANT adds a fourth step, unit simplification, to reduce the size of the sentence stored in the working memory for sentences in clausal form. These steps are repeated until the sentence is proved satisfiable or unsatisfiable, as illustrated in Figure 2. Please see [20] and <ref> [5] </ref>) for a complete description. Partial instantiation bears some similarity to hyper-linking [14]. In hyper-linking, the satisfiability of a ground version of the first-order sentence is checked to determine if the first-order sentence is unsatisfiable, which is similar to step 1) above.
Reference: [6] <author> R. G. Jeroslow. </author> <title> Computation-oriented reductions of predicate to propositional logic. Decision Support Systems, </title> <address> 4:183197, </address> <year> 1988. </year>
Reference-contexts: We describe these algorithms first, then we discuss the implementation of these algorithms in INSTANT. 3.1 Partial Instantiation Partial instantiation is a technique for determining the satisfiability of sentences in first-order logic which was proposed by Jeroslow in 1988 <ref> [6] </ref>. Yamamoto showed that a refutation-complete theorem prover could be built using partial instantiation [20], and he describes such a theorem prover.
Reference: [7] <author> S.-J. Lee and D. Plaisted. </author> <title> Problem solving by searching for models with a theorem prover. </title> <journal> Artificial Intelligence, </journal> <volume> 69(1-2):20533, </volume> <month> Sept </month> <year> 1994. </year>
Reference: [8] <author> S.-J. Lee and C.-H. Wu. </author> <title> Improving the efficiency of a hyperlinking-based theorem prover by incremental evaluation with network structures. Automated Reasoning, </title> <address> 12:359388, </address> <year> 1994. </year>
Reference-contexts: These two steps eliminate the pos-sibility of generating redundant clauses (i.e. clauses already in the working memory) <ref> [8] </ref>. Partial instantiation shares both these traits for the case of inputs in clausal form, so partial instantiation also avoids what Lee and Plaisted call clause duplication. Yamamoto has reported a partial instan-tiation theorem prover that exhibits better performance than the resolution-based theorem prover Otter [20]. <p> Partial instantiation is less flexible than hyper-linking in that it can only search in one fashion, by eliminating blockages, while hyper-linking can simulate forward or backward (goal-directed) search <ref> [8] </ref>. However, partial instantiation can work with sentences in non-clausal form. <p> Unit simplification eliminates clauses which contain unit clauses, and also removes from clauses literals which are complementary to unit clauses. Unit simplification was found to improve the performance of hyper-linking <ref> [8] </ref>.
Reference: [9] <author> J. Mayfield, T. Finin, R. Narayanaswamy, C. Shah, W. Mac-Cartney, and K. Goolsbey. </author> <title> The cycic friends network: getting cyc agents to reason together. </title> <booktitle> In CIKM '95 Workshop on Intelligent Agents, </booktitle> <year> 1995. </year>
Reference-contexts: Lee and Wu reported that the analogous duplicated effort in hyper-linking (which they called interround redundancy) amounted to 40% of the work done in eachround <ref> [9] </ref>. Partial instantiation is less flexible than hyper-linking in that it can only search in one fashion, by eliminating blockages, while hyper-linking can simulate forward or backward (goal-directed) search [8]. However, partial instantiation can work with sentences in non-clausal form. <p> Partial instantiation has another advantage over hyper-linking in that it doesn't suffer from interclause redundancy, which is the checking of the same pair of literals multiple times during a round. Interclause redundancy can be eliminated in hyper-linking at the expense of large amounts of memory. <ref> [9] </ref>. Partial instantiation and hyper-linking are attractive methods of theorem proving because they can be paral-lelized in a straightforward way.
Reference: [10] <author> M. S. </author> <title> M.R. Genesereth, N.P. Singh. A distributed and anonymous knowledge sharing approach to software inter-operation. </title> <booktitle> In International Symposium on Fifth Generation Compution Systems, </booktitle> <pages> pages 125139, </pages> <year> 1994. </year>
Reference-contexts: KIF carries the actual logical content of the message, and it has the full expressive power of first-order predicate logic [4]. Another content language which has been used with KQML is CycL, the knowledge representation and exchange language used by the Cyc project <ref> [10] </ref>. CycL is similar to KIF in that both have the full expressiveness of first-order logic.
Reference: [11] <author> OMG. </author> <note> Omg web page. www.omg.org. </note>
Reference-contexts: Two of the most successful of these efforts have led to the distributed object programming framework known as CORBA [12], developed by system software researchers, and the software agents framework, developed by artificial intelligence researchers <ref> [11] </ref>. While these two environments differ in terminology and technology, they have converged to surprisingly similar solutions to the common problem of distributed resource location, which is known as trad ing in CORBA and matchmaking or facilitation in software agents. <p> This works because the list of properties for a service type is fixed. In contrast to the CORBA trading service, the software agents framework uses a very expressive language to describe resources to be offered or requested. The Agent Communication Language (ACL) proposed in <ref> [11] </ref> for communication between offerors, requestors, and facilitators is actually made up of two languages: Knowledge Query and Manipulation Language (KQML) and Knowledge Interchange Format (KIF). <p> Because of the expressive power of KIF, a facilitator needs to reason in first-order logic to determine when resource descriptions in service offers and service requests match. To date, a facilitator has been described which does this reasoning using a model elimination theorem prover <ref> [11] </ref>. No performance data for this theorem prover was provided. We have built a theorem prover based on the partial in-stantiation technique which we believe is ideally suited for use in a facilitator.
Reference: [12] <author> OMG. </author> <title> Trading Object Service, </title> <month> May </month> <year> 1996. </year> <note> OMG RFP5 Submission, OMG document orbos/96-05-06. </note>
Reference-contexts: Two of the most successful of these efforts have led to the distributed object programming framework known as CORBA <ref> [12] </ref>, developed by system software researchers, and the software agents framework, developed by artificial intelligence researchers [11].
Reference: [13] <author> D. Plaisted. </author> <title> The search efficiency of theorem proving strategies. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Twelfth International Conference on Automated Deduction, pages 192206, </booktitle> <address> Nancy, France, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A service offer specifies a service type and property values for the service, and a request specifies a service type as well as constraints and preferences on some or all of the properties of the service (see <ref> [13] </ref> for more details). The primary drawback to CORBA's mechanism for describing services is that requesters need to know the type of a service in order to use it. CORBA's system doesn't allow a new service to be described in terms of more basic or familiar services. <p> The CORBA trading service specification leaves open the possibility of using other languages to describe services by allowing constraints or preferences to be expressed in other than the standard constraint language <ref> [13] </ref>. Thus, KIF strings could be property values of CORBA service types, and constraints and preferences could be expressed to the trader in KIF so as to allow the trader to operate entirely in KIF.
Reference: [14] <author> R. Sebastiani. </author> <title> Applying gsat to non-clausal formulas. </title> <journal> Artificial Intelligence Research, </journal> <volume> 1:30914, </volume> <year> 1994. </year>
Reference-contexts: These steps are repeated until the sentence is proved satisfiable or unsatisfiable, as illustrated in Figure 2. Please see [20] and [5]) for a complete description. Partial instantiation bears some similarity to hyper-linking <ref> [14] </ref>. In hyper-linking, the satisfiability of a ground version of the first-order sentence is checked to determine if the first-order sentence is unsatisfiable, which is similar to step 1) above. <p> Plaisted has shown that hyper-linking exhibits better search properties than resolution, model elimination, and many other theorem-proving techniques on a wide class of problems <ref> [14] </ref>. Hyper-linking avoids unnecessarily expanding the search space because 1) no more than one non-ground clause is combined to generate a new clause, and 2) it reduces a sentence in first-order logic to a sentence in propositional logic and then applies a propositional calcu lus decision procedure.
Reference: [15] <author> R. Sebastiani. </author> <title> Applying gsat to non-clausal formulas. </title> <type> Technical Report 94-0018, </type> <institution> University of Genova, Italy, </institution> <year> 1994. </year> <note> available by ftp from mrg.dist.unige.it in /pub/mrg-ftp/. </note>
Reference-contexts: INSTANT can be used, however, in any application requiring a theorem prover. Among INSTANT's advantages are that it can handle input formulas in non-clausal form, which is more compact for applications such as vision and planning <ref> [15] </ref>. INSTANT avoids wasteful search, so its per-formance degrades less with problem size than that of resolution or model elimination theorem provers. Also, the algorithm INSTANT uses can be parallelized efficiently so that INSTANT's problem solving power can be scaled up with problem size.
Reference: [16] <author> B. Selman, H. Levesque, and D. Mitchell. </author> <title> A new method for solving hard satisfiability problems. </title> <booktitle> In Tenth National Conference on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 440 446, </pages> <address> San Jose, California, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Such algorithms also reduce the number of possible satisfying truth assignments (in the propositional case). Furthermore, these conversion algorithms expand the number of literals of the resulting clausal formula exponentially if /iff occurs in the original formula <ref> [16] </ref>. Partial instantiation has another advantage over hyper-linking in that it doesn't suffer from interclause redundancy, which is the checking of the same pair of literals multiple times during a round. Interclause redundancy can be eliminated in hyper-linking at the expense of large amounts of memory. [9]. <p> This metric is calculated with the same computational complexity for clausal formulas as is the regular GSAT metric <ref> [16] </ref>. Frank has observed that the performance of GSAT in terms of speed and likelihood of finding an answer can be significantly improved by weighting each clause according to how many different assignments have been evaluated while the clause remains unsatisfied [3]. <p> We have incorporated these weightings into the non-clausal algorithm for GSAT by modifying Sebastiani's score-keeping algorithm to keep track of a weighted score (see <ref> [16] </ref>). While GSAT is considerably faster than the Davis-Putnam algorithm, it is incomplete because there is no way to tell with certainty that a propositional sentence is unsat-isfiable [17]. INSTANT simply assumes that if GSAT can't find a satisfying solution in a preset time limit, then the problem is unsatisfiable.
Reference: [17] <author> N. Singh and M. Gisi. </author> <title> Coordinating distributed objects with declarative interfaces. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> First International Conference COORDINATION '96, </booktitle> <pages> pages 36885, </pages> <address> Cesena,Italy, April 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: GSAT is a hill-climbing algorithm which starts with an assignment of truth values to propositions and attempts to improve it to a satisfying assignment by changing the values of variables which appear in clauses which are not satisfied by the current assignment <ref> [17] </ref>. The number of unsatisfied clauses in the sentence is the metric by which GSAT measures its progress towards the goal of satisfiability. <p> While GSAT is considerably faster than the Davis-Putnam algorithm, it is incomplete because there is no way to tell with certainty that a propositional sentence is unsat-isfiable <ref> [17] </ref>. INSTANT simply assumes that if GSAT can't find a satisfying solution in a preset time limit, then the problem is unsatisfiable. <p> In the original GSAT algorithm, the starting assignment for the truth values of the propositions is chosen randomly, greedy local search proceeds through a certain number of assignments, and if no solution has been found, a new assignment is chosen randomly <ref> [17] </ref>. The rationale for restarting the local search phase periodically is that the algorithm may get stuck at a local minimum. This suggests that a straightforward way to parallelize GSAT is to N searches at random locations on N processors.
Reference: [18] <author> C. Suttner and G. Sutcliffe. </author> <title> Atp system results for the tptp problem library. </title> <type> Technical Report AR-96-02,96/09, </type> <institution> Insti-tut fur Informatik,Munchen and Dept. of Computer Science, James Cook University, Australia, </institution> <year> 1996. </year>
Reference-contexts: CORBA's system doesn't allow a new service to be described in terms of more basic or familiar services. That is to say, CORBA's trading service lacks declarative semantics <ref> [18] </ref>. Another drawback to CORBA's trading service is that the trader is unable to compose two or more services to satisfy a request. <p> KQML serves as a wrapper or envelope for a KIF message, conveying the purpose of the message, the receiver, the sender, the time it was sent, and other contextual information <ref> [18] </ref>. KIF carries the actual logical content of the message, and it has the full expressive power of first-order predicate logic [4]. Another content language which has been used with KQML is CycL, the knowledge representation and exchange language used by the Cyc project [10]. <p> KIF also allows the facilitator to compose resource offers to satisfy a request. To return to the example given above (which was borrowed from <ref> [18] </ref>), if agent latex2dvi offers to translate latex files to dvi format, and agent dvi2ps offers to translate dvi files to postscript, then the facilitator is able to satisfy a request to translate a latex file to postscript by using the offered services in turn. In [18], the problem is decomposed <p> (which was borrowed from <ref> [18] </ref>), if agent latex2dvi offers to translate latex files to dvi format, and agent dvi2ps offers to translate dvi files to postscript, then the facilitator is able to satisfy a request to translate a latex file to postscript by using the offered services in turn. In [18], the problem is decomposed by the theorem prover in such a way that the facilitator uses latex2dvi's service first and then dvi2ps' service afterward in the course of solving the problem.
Reference: [19] <author> M. Yamamoto, T. Ohyanagi, and A. Ohuchi. </author> <title> Theorem proving based on the partial instantiation technique. </title> <journal> Transactions of the Institute of Electronics, Information and Communication Engineers A, </journal> <volume> J78-A(7):86471, </volume> <month> July </month> <year> 1995. </year>
Reference-contexts: INSTANT was written in Java and accepts input formulas in KIF. 4 Results INSTANT was tested on problems in the TPTP library, version v1.2.1 <ref> [19] </ref>. INSTANT was run on one 196 MHz R10000 processor of an SGI Power Challenge running Irix 6.4. The version of the Java interpreter was 1.0. <p> The authors of the TPTP caution against comparing results from different theorem provers because of the differences in platforms, languages in which the theorem provers are implemented, and other factors which affect performance <ref> [19] </ref>. The most significant result of the testing is that INSTANT did not misclassify a single problem instance as to whether it was satisfiable or unsatisfiable. This demonstrates that the incompleteness of the GSAT algorithm for determining propositional satisfiability did not lead to errors on the TPTP problem set.
References-found: 19

