URL: http://www.cs.rpi.edu/tr/91-11.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: http://www.cs.rpi.edu
Title: Complexity of the Closest Vector Problem in a Lattice Generated by (0,1)-Matrix  
Author: Boleslaw K. Szymanski and Balaram Sinharoy 
Keyword: NP-completeness, closest vector, lattice, satisfiability.  
Address: Troy, N.Y. 12180-3590, USA  
Affiliation: Department of Computer Science Rensselaer Polytechnic Institute  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Kannan, </author> <title> "Minkowski's Convex Body Theorem and Integer Programming," </title> <journal> Math. Operations Res. </journal> <volume> Vol. 12, No. 3, </volume> <month> August </month> <year> 1987, </year> <pages> pp. 415-440 </pages>
Reference-contexts: 1 Introduction The closest vector problem, often referred to as CVP, is to find a vector in a lattice that is closest to a given (input) vector. The problem, well-known in mathematical programming, was proven NP-hard for an arbitrary lattice and norm <ref> [1, 6] </ref>. This general result does not apply, however, to problems in which a lattice is generated by a matrix whose elements belong to some proper subset of integers. <p> Complexity of (0,1)- CVP in infinity norm is analyzed in Section 4. If the input vector elements are in f1; 0; 1g then (0,1)-CVP has a (trivial) polynomial-time solution. In all other cases it is NP-hard. Unlike the previously published proofs for the general CVP (Kannan <ref> [1] </ref> used three dimensional matching whereas van Emde Boas [6] used partition), reductions in both sections use 3SAT problem or its variant NOT-ALL-EQUAL [3]. <p> If all elements of the input vector are in f1; 0; 1g then (0,1)-CVP has a polynomial-time solution. First step of this solution is to use a polynomial-time algorithm for linear equation integer feasibility problem <ref> [1] </ref> to find the vector with a zero distance to the input vector or to show that such vector does not exist. In the latter case, the second step simply produces the zero vector as an answer.
Reference: [2] <author> R. Kannan and A. Bachem, </author> <title> "Polynomial Time Algorithms for Computing the Smith and Hermite Normal Forms of an Integer Matrix", </title> <journal> SIAM J. Comput. </journal> <volume> Vol. 8, </volume> <year> 1979, </year> <pages> pp. 499-507. </pages>
Reference: [3] <author> R. M. Karp, </author> <title> "Reducibility among Combinatorial Problems" in R. </title> <editor> E. Miller and J. W. Thatcher (Eds.), </editor> <title> Complexity of Computer Computations., </title> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1972, </year> <pages> pp. 85-103. </pages>
Reference-contexts: In all other cases it is NP-hard. Unlike the previously published proofs for the general CVP (Kannan [1] used three dimensional matching whereas van Emde Boas [6] used partition), reductions in both sections use 3SAT problem or its variant NOT-ALL-EQUAL <ref> [3] </ref>. Both sections use the same method of reducing a propositional logic problem to a satisfiability of inequality over integers, which in turn is reduced to the relevant minimization problem. This method might be useful in analyzing complexity of other minimization problems. <p> The variant of CVP in which a lattice is based on a matrix with elements in f0; 1g is referred to here as (0,1)-CVP. Two NP-hard problems in propositional logic used in reductions below are 3SAT and its variant NOT-ALL-EQUAL <ref> [3] </ref>. Let U be a set of boolean variables, and CL be a collection of clauses over U such that each clause is a disjunction of exactly three literals. Each literal is either a variable x 2 U or the boolean negation x of such a variable.
Reference: [4] <author> G. L. Nemhauser and L. A. Wolsey, </author> <title> Integer and Combinatorial Optimization, </title> <publisher> John-Wiley and Sons, </publisher> <year> 1988. </year>
Reference-contexts: (A) = fY 2 &lt; p : Y = AX; X 2 Z q g, where A is a p fi q matrix with elements in &lt; and linearly independent columns, is called a lattice generated by the columns of A or, in short, a lattice based on matrix A <ref> [4] </ref>. In other words, a lattice L in &lt; p is the set of all integer linear combinations of a set of linearly independent vectors (i.e. columns of A) in &lt; p . The independent vectors are called a basis of the lattice.
Reference: [5] <author> B. Sinharoy and B. K. Szymanski, </author> <title> "Data Alignment in SIMD Machines," </title> <note> submitted to IEEE Trans. on Parallel and Distributed Systems, also Technical Report 91-10, </note> <institution> Department of Computer Science, RPI, </institution> <month> May, </month> <year> 1991. </year> <note> REFERENCES 9 </note>
Reference-contexts: In this paper we investigate complexity of the CVP in a lattice generated by the matrix whose elements are in f0; 1g. We refer to this problem as (0,1)-CVP. Our interest in (0,1)- CVP was motivated by the data alignment problem for SIMD architectures <ref> [5] </ref>. In a Single Instruction stream Multiple Data stream (SIMD) computer, a significant speedup can be achieved by distributing (or mapping) data structures in a program to individual processors. One processor is allocated (at least conceptually) per data item of an array or other composite data structures. <p> The cost of communication depends on network locations of the communicating processors and the network interconnection pattern. One of the major challenges in programming SIMD computers is to distribute data structures among the processors in such a way that the interprocessor communication is minimized. The data alignment problem <ref> [5] </ref> is to determine the relative shifts of the distributed data structures' dimensions so that the required interprocessor communication is at minimum. The alignment problem is equivalent to finding the closest vector in a lattice generated by a matrix with elements in f-1,0,1g [5]. <p> The data alignment problem <ref> [5] </ref> is to determine the relative shifts of the distributed data structures' dimensions so that the required interprocessor communication is at minimum. The alignment problem is equivalent to finding the closest vector in a lattice generated by a matrix with elements in f-1,0,1g [5]. For hypercubes and the four nearest neighbor mesh, the two networks often used in practice, the distance between processors is measured in the first norm. In the eight nearest neighbor interconnection the corresponding norm is infinity.
Reference: [6] <author> P. van Emde Boas, </author> <title> Another NP-complete Problem and the Complexity of Computing Short Vectors in a Lattice, </title> <type> Rep. 81-04, </type> <institution> Math. Inst. Univ. </institution> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: 1 Introduction The closest vector problem, often referred to as CVP, is to find a vector in a lattice that is closest to a given (input) vector. The problem, well-known in mathematical programming, was proven NP-hard for an arbitrary lattice and norm <ref> [1, 6] </ref>. This general result does not apply, however, to problems in which a lattice is generated by a matrix whose elements belong to some proper subset of integers. <p> If the input vector elements are in f1; 0; 1g then (0,1)-CVP has a (trivial) polynomial-time solution. In all other cases it is NP-hard. Unlike the previously published proofs for the general CVP (Kannan [1] used three dimensional matching whereas van Emde Boas <ref> [6] </ref> used partition), reductions in both sections use 3SAT problem or its variant NOT-ALL-EQUAL [3]. Both sections use the same method of reducing a propositional logic problem to a satisfiability of inequality over integers, which in turn is reduced to the relevant minimization problem.
References-found: 6

