URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/imacs.97.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Email: e-mail: pancer@cs.toronto.edu, krj@cs.toronto.edu  
Title: The Parallel Solution of Almost Block Diagonal Systems Arising in Numerical Methods for BVPs for ODEs  
Author: R.N. Pancer and K.R. Jackson 
Keyword: Two-point BVP, ODE, ABD linear system, parallel numerical method  
Address: Toronto, Toronto, Canada  
Affiliation: Department of Computer Science, University of  
Abstract: Three parallel algorithms are presented for solving the Almost Block Diagonal (ABD) systems of linear algebraic equations that arise during the numerical solution of Boundary Value Problems (BVPs) for Ordinary Differential Equations (ODEs). Until recently, the solution of these systems has proven to be the execution-time bottleneck in the parallel implementation of most BVP codes. Several numerical examples are given comparing the three algorithms with respect to accuracy and speed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U.M. Ascher, R.M.M. Mattheij, R.D. Russell, </author> <title> Numerical Solution of Boundary Value Problems for Ordinary Differential Equations, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1988. </year>
Reference-contexts: J may be re-evaluated and re-factored at each iteration, or may be held fixed for several iterations if the rate of convergence is acceptable. These issues and several others that need to be addressed in the numerical solution of BVPs are discussed further in <ref> [1] </ref>. Much parallelism is inherent in the approach outlined above. For example, the residual components of (Y (q) ) can be evaluated independently, and the block-pairs [S i ; T i ] of J (Y (q) ) can be constructed independently each time J is re-evaluated. <p> ABD systems of this form arise naturally, for example, if (2) is based on multiple shooting or a standard Runge-Kutta method <ref> [1] </ref>. The performance of SLF-LU is somewhat dependent on its pivoting strategy. On problems where few cross-block pivots are made, the local flop count may be slightly less than stated above. Unfortunately, SLF-LU is often unstable on these problems. <p> NUMERICAL RESULTS The timing and accuracy of the three algorithms run on a sequential machine is illustrated in Figure 2. Eight linear problems are solved using a trapezoidal finite-difference discretization <ref> [1] </ref>. The graph on the left shows absolute and relative execution times, and the bar graph on the right gives the accuracy of the computed solutions ~ Y . <p> The criteria used to detect instability is discussed in [9]. The bar graph on the right shows the accuracy of the three algorithms when used to fully-solve a sample problem selected from each mesh. generated class 1 ([@f =@y] ij 2 (1; 0] S <ref> [1] </ref>), class 2 ([@f =@y] ij 2 [0; 1]) and class 3 ([@f =@y] ij 2 (1; 1]) linear problems. The accuracy of RSCALE (r), SLF-LU (u) and SLF-QR (q) on selected class 3 problems is shown in the graph on the right. <p> The bar graph on the right shows the accuracy of the three algorithms when used to fully-solve a sample problem selected from each mesh. generated class 1 ([@f =@y] ij 2 (1; 0] S [1]), class 2 ([@f =@y] ij 2 <ref> [0; 1] </ref>) and class 3 ([@f =@y] ij 2 (1; 1]) linear problems. The accuracy of RSCALE (r), SLF-LU (u) and SLF-QR (q) on selected class 3 problems is shown in the graph on the right.
Reference: [2] <author> U.M. Ascher, S.Y.P. Chan, </author> <title> On parallel methods for boundary value ODEs, </title> <booktitle> Computing 46/1 (1991), </booktitle> <pages> pp. 1-17. </pages>
Reference: [3] <author> K.R. Bennett, G. Fairweather, PCOLNEW: </author> <title> A parallel boundary-value ODE code for shared-memory machines, </title> <institution> Univ. of Kentucky, Center for Comp. Sciences, </institution> <type> T.R. </type> <institution> CCS-90-8, </institution> <year> 1990. </year>
Reference-contexts: Much parallelism is inherent in the approach outlined above. For example, the residual components of (Y (q) ) can be evaluated independently, and the block-pairs [S i ; T i ] of J (Y (q) ) can be constructed independently each time J is re-evaluated. Analysis in <ref> [3] </ref> and [7] shows that the sequential solution of (3) can easily become the execution-time bottleneck in a BVP code once the residual evaluation and Jacobian construction phases have been parallelized, emphasizing the importance of developing a parallel ABD solver.
Reference: [4] <author> J.C. Diaz, G. Fairweather, P. Keast, </author> <title> Algorithm 603. COLROW and ARCECO: FORTRAN packages for solving certain almost block diagonal linear systems by modified alternate row and column elimination, </title> <journal> ACM Trans. Math. </journal> <volume> Software 9/3 (1983), </volume> <pages> pp. 376-380. </pages>
Reference-contexts: The timing and speed-up of the three algorithms run on a parallel machine is illustrated in Figure 4. The execution time of COLROW <ref> [4] </ref>, a commonly-used fast sequential ABD system-solver, is included to provide some indication of how many processors are required before the speed-up achieved from parallelism begins to pay-off.
Reference: [5] <author> W.H. Enright, P.H. Muir, </author> <title> Runge-Kutta software with defect control for boundary value ODEs, </title> <journal> SIAM J. Sci. Comput. </journal> <volume> 17/2 (1996), </volume> <pages> pp. 479-497. </pages>
Reference-contexts: Further analysis in [9] shows that instability can occur frequently when solving linear problems with larger stepsize h, even when the correct number of pivots is used, and that this instability can adversely affect the performance of parallel algorithms for solving non-linear problems <ref> [5] </ref>. The timing and speed-up of the three algorithms run on a parallel machine is illustrated in Figure 4.
Reference: [6] <author> M. Lentini, </author> <title> Parallel solution of special block tridiagonal systems: TPBVP, manuscript (1989). solved on an SGI Challenge L with eight 150 MHZ R4400 processors. The timing of COLROW, a commonly-used fast sequential ABD system-solver, is included for reference. </title>
Reference: [7] <author> P. Muir, </author> <title> Private communication. </title>
Reference-contexts: Much parallelism is inherent in the approach outlined above. For example, the residual components of (Y (q) ) can be evaluated independently, and the block-pairs [S i ; T i ] of J (Y (q) ) can be constructed independently each time J is re-evaluated. Analysis in [3] and <ref> [7] </ref> shows that the sequential solution of (3) can easily become the execution-time bottleneck in a BVP code once the residual evaluation and Jacobian construction phases have been parallelized, emphasizing the importance of developing a parallel ABD solver.
Reference: [8] <author> R.N. Pancer, K.R. Jackson, </author> <title> The parallel solution of ABD systems arising in numerical methods for BVPs for ODEs, </title> <institution> Univ. of Toronto, Dept. of Computer Science, </institution> <type> T.R. 255/91, </type> <year> 1992. </year>
Reference-contexts: A faster but less stable version of his algorithm is presented in [13]. The SLF-QR and SLF-LU algorithms described in the next section of this paper were discovered independently by us <ref> [8] </ref> and are similar to those of Wright. Also presented in the next section is RSCALE, a third algorithm developed by us which requires fewer local operations than either SLF-QR or SLF-LU and has better stability properties than SLF-LU. <p> The three algorithms are compared with respect to accuracy and speed in the Numerical Results section. OUTLINE OF THE ALGORITHMS Several variations of SLF-QR, SLF-LU and RSCALE are discussed in <ref> [8] </ref> and [9]. Probably the most suitable variation for architectures with a modest number of processors is a two-level factorization. <p> Further details on this two-level factorization scheme are given in <ref> [8] </ref>, [9], [12] and [13]. In SLF-QR, E is orthogonal. As pointed out in [12], SLF-QR is essentially QR-factorization applied to a row and column-permutation of the original ABD matrix, and hence is stable.
Reference: [9] <author> R.N. Pancer, </author> <title> The parallel solution of ABD systems arising in numerical methods for BVPs for ODEs, </title> <type> Ph.D. thesis, </type> <institution> Univ. of Toronto, Dept. of Computer Science (in progress). </institution>
Reference-contexts: The three algorithms are compared with respect to accuracy and speed in the Numerical Results section. OUTLINE OF THE ALGORITHMS Several variations of SLF-QR, SLF-LU and RSCALE are discussed in [8] and <ref> [9] </ref>. Probably the most suitable variation for architectures with a modest number of processors is a two-level factorization. <p> Further details on this two-level factorization scheme are given in [8], <ref> [9] </ref>, [12] and [13]. In SLF-QR, E is orthogonal. As pointed out in [12], SLF-QR is essentially QR-factorization applied to a row and column-permutation of the original ABD matrix, and hence is stable. <p> This is discussed further in <ref> [9] </ref>, [13], and in the next section of this paper. In RSCALE (Figure 1), local transformation starts at the bottom of each partition and moves upward. Steps (a) and (d) each involve a change of mesh variable which is later reversed. <p> RSCALE controls the growth by rescaling the eigenvalues j of ~ S i1 in step (f) so that max j j j j 2 (0; 1 + *) where * can be made arbitrarily small. A stability proof for certain classes of ABD matrices is given in <ref> [9] </ref>. Local operation counts for SLF-QR, SLF-LU and RSCALE are 7 2 3 n 3 + O (n 2 ); 3 5 3 1 3 n 3 + O (n 2 ) flops per block-row, respectively. <p> The performance of SLF-LU is somewhat dependent on its pivoting strategy. On problems where few cross-block pivots are made, the local flop count may be slightly less than stated above. Unfortunately, SLF-LU is often unstable on these problems. See <ref> [9] </ref> for further discussion of these issues and a description of the FORTRAN implementation of the three problems are solved on a 167MHz Sun SPARCstation Ultra 2. algorithms. <p> Each algorithm is acceptably accurate on all problems in this figure, given that the algebraic errors are all several orders of magnitude less than the discretization error. Many more numerical examples comparing the timing and accuracy of the three algorithms may be found in <ref> [9] </ref>. The potential for instability in SLF-LU is illustrated in Figure 3. In the graph on the left, 300 randomly-generated linear problems are discretized on each mesh with stepsize h using the trapezoidal finite difference scheme. <p> Each of the resulting ABD matrices is partially factored with SLF-LU, and the number of times SLF-LU exhibits instability is recorded. The criteria used to detect instability is discussed in <ref> [9] </ref>. <p> Wright [14] has done similar random testingshowing SLF-LU instability can occur when there is too little or too much pivotingbut found relatively few problems where SLF-LU breaks down. Further analysis in <ref> [9] </ref> shows that instability can occur frequently when solving linear problems with larger stepsize h, even when the correct number of pivots is used, and that this instability can adversely affect the performance of parallel algorithms for solving non-linear problems [5].
Reference: [10] <author> M. Paprzycki, I. Gladwell, </author> <title> Solving almost block diagonal systems on parallel computers, </title> <journal> Parallel Comput. </journal> <volume> 17/2 (1991), </volume> <pages> pp. 133-153. </pages>
Reference-contexts: Suppressing the dependence on n, the theoretically best parallel complexity is O (log M ) block-steps. Most parallel algorithms proposed in the past, however, either do not achieve the optimal speed-up ([6], [11]) or suffer from poor stability properties ([2], <ref> [10] </ref>). Unstable algorithms either fail to control the growth of the underlying exponentially increasing fundamental solution modes in (1), which is usually required for a stable numerical solution, or perform a transformation that adversely affects the condition of the ABD matrix.
Reference: [11] <author> S.J. Wright, V. Pereyra, </author> <title> Adaptation of a two-point boundary value problem solver to a vector-multiprocessor environment, </title> <journal> SIAM J. Sci. Stat. Comput. </journal> <volume> 11/3 (1990), </volume> <pages> pp. 425-449. </pages>
Reference-contexts: Suppressing the dependence on n, the theoretically best parallel complexity is O (log M ) block-steps. Most parallel algorithms proposed in the past, however, either do not achieve the optimal speed-up ([6], <ref> [11] </ref>) or suffer from poor stability properties ([2], [10]). Unstable algorithms either fail to control the growth of the underlying exponentially increasing fundamental solution modes in (1), which is usually required for a stable numerical solution, or perform a transformation that adversely affects the condition of the ABD matrix.
Reference: [12] <author> S.J. Wright, </author> <title> Stable parallel algorithms for two-point boundary value problems, </title> <journal> SIAM J. Sci. Stat. Comput. </journal> <volume> 13/3 (1992), </volume> <pages> pp. 742-764. </pages>
Reference-contexts: Unstable algorithms either fail to control the growth of the underlying exponentially increasing fundamental solution modes in (1), which is usually required for a stable numerical solution, or perform a transformation that adversely affects the condition of the ABD matrix. Wright <ref> [12] </ref> was the first to present a stable parallel algorithm that attains the theoretically optimal speed-up for this problem. A faster but less stable version of his algorithm is presented in [13]. <p> Further details on this two-level factorization scheme are given in [8], [9], <ref> [12] </ref> and [13]. In SLF-QR, E is orthogonal. As pointed out in [12], SLF-QR is essentially QR-factorization applied to a row and column-permutation of the original ABD matrix, and hence is stable. <p> Further details on this two-level factorization scheme are given in [8], [9], <ref> [12] </ref> and [13]. In SLF-QR, E is orthogonal. As pointed out in [12], SLF-QR is essentially QR-factorization applied to a row and column-permutation of the original ABD matrix, and hence is stable.
Reference: [13] <author> S.J. Wright, </author> <title> Stable parallel elimination for boundary value ODEs, </title> <journal> Numer. Math. </journal> <volume> 67/4 (1994), </volume> <pages> pp. 521-535. </pages>
Reference-contexts: Wright [12] was the first to present a stable parallel algorithm that attains the theoretically optimal speed-up for this problem. A faster but less stable version of his algorithm is presented in <ref> [13] </ref>. The SLF-QR and SLF-LU algorithms described in the next section of this paper were discovered independently by us [8] and are similar to those of Wright. <p> Further details on this two-level factorization scheme are given in [8], [9], [12] and <ref> [13] </ref>. In SLF-QR, E is orthogonal. As pointed out in [12], SLF-QR is essentially QR-factorization applied to a row and column-permutation of the original ABD matrix, and hence is stable. <p> This is discussed further in [9], <ref> [13] </ref>, and in the next section of this paper. In RSCALE (Figure 1), local transformation starts at the bottom of each partition and moves upward. Steps (a) and (d) each involve a change of mesh variable which is later reversed.
Reference: [14] <author> S.J. Wright, </author> <title> A collection of problems for which Gaussian elimination with partial pivoting is unstable, </title> <journal> SIAM J. Sci. Comput. </journal> <volume> 14/1 (1993), </volume> <pages> pp. 231-238. </pages>
Reference-contexts: The accuracy of RSCALE (r), SLF-LU (u) and SLF-QR (q) on selected class 3 problems is shown in the graph on the right. Wright <ref> [14] </ref> has done similar random testingshowing SLF-LU instability can occur when there is too little or too much pivotingbut found relatively few problems where SLF-LU breaks down.
References-found: 14

