URL: http://www.ai.mit.edu/projects/transit/dpga/entropy-fpga96.ps.Z
Refering-URL: http://www.ai.mit.edu/projects/transit/dpga_prototype_documents.html
Root-URL: 
Email: andre@mit.edu  
Phone: Phone: (617) 253-5868 FAX: (617) 253-5060  
Title: Entropy, Counting, and Programmable Interconnect  
Author: Andr e DeHon 
Address: NE43-791, 545 Technology Sq., Cambridge, MA 02139  
Affiliation: MIT Artificial Intelligence Laboratory  
Date: February 11-13, 1996, Monterey, CA  
Note: Copyright (c) 1996 by the Association for Computing Machinery, Inc. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that new copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request Permissions from Publications Dept, ACM Inc., Fax +1 (212) 869-0481, or &lt;permissions@acm.org&gt;. FPGA '96 ACM/SIGDA Fourth International Symposium on FPGAs  
Abstract: Conventional reconfigurable components have substantially more interconnect configuration bits than they strictly need. Using counting arguments we can establish loose bounds on the number of programmable bits actually required to describe an interconnect. We apply these bounds in crude form to some existing devices, demonstrating the large redundancy in their programmable bit streams. In this process we review and demonstrate basic counting techniques for identifying the information required to specify an interconnect. We examine several common interconnect building blocks and look at how efficiently they use the information present in their programming bits. We also discuss the impact of this redundancy on important device aspects such as area, routing, and reconfiguration time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Altera Corporation, </institution> <address> 2610 Orchard Parkway, San Jose, CA 95134-2020. </address> <note> FLEX 8000 Handbook, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: bits n blocks (5) FPGA '96 -- ACM/SIGDA Fourth International Symposium on FPGAs February 11-13, 1996, Monterey, CA Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [9] Xilinx xc5210 324 CLBs 196 IOs 160K [10] Altera EPF81188 1008 LEs 184 IOEs 192K [2] <ref> [1] </ref> Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE 4 1 1 1 2 4 = 16 Reference
Reference: [2] <institution> Altera Corporation, </institution> <address> 2610 Orchard Parkway, San Jose, CA 95134-2020. </address> <publisher> Data Book, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: logic bits n blocks (5) FPGA '96 -- ACM/SIGDA Fourth International Symposium on FPGAs February 11-13, 1996, Monterey, CA Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [9] Xilinx xc5210 324 CLBs 196 IOs 160K [10] Altera EPF81188 1008 LEs 184 IOEs 192K <ref> [2] </ref> [1] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE 4 1 1 1 2 4 = 16
Reference: [3] <author> Stephen D. Brown, Robert J. Francis, Jonathan Rose, and Zvonko G. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 101 Philip Drive, Assinippi Park, Norwell, Massachusetts, 02061 USA, </address> <year> 1992. </year>
Reference-contexts: It is worthwhile to note that interconnect flexibility as used here can be applied to any interconnection network or family of graphs. As such it is very different from the interconnect flexibility defined in [6] <ref> [3] </ref> which is used to describe the level of population of switches in a particular interconnect family. Interconnection Patterns It is important that we look at the interconnection patterns as a whole to understand which patterns are functionally identical.
Reference: [4] <author> Richard Guo, Hung Nguyen, Adi Srinivasan, Quaid Nasir, Hong Cai, Steve Law, and Amar Mohsen. </author> <title> A Novel Re-programmable Interconnect Architecture with Decoded RAM Storage. </title> <booktitle> In Proceedings of the IEEE 1994 Custom Integrated Circuits Conference, </booktitle> <pages> pages 193-196. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Since one input may also be used in a control capacity, the reduction is slightly lower for the Altera 8K part. 8 Impact of Configuration Density Area The total, on-chip configuration memory can be one of the major contributors to chip area (e.g. <ref> [4] </ref>). As such, redundancy in the configuration space may cost additional die area. The effect, however, is technology and design point dependent. When the design is active silicon area limited, the configuration size can play a large factor in determining design size.
Reference: [5] <author> Chris Jones, John Oswald, Brian Schoner, and John Vil-lasenor. </author> <title> Issues in Wireless Video Coding using Run-time-reconfigurable FPGAs. </title> <editor> In Peter Athanas and Ken Pocek, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <address> Los Alamitos, California, April 1995. </address> <publisher> IEEE Computer Society, IEEE Computer Society Press. </publisher>
Reference-contexts: As we have seen in Section 7, contemporary reconfigurable devices have very large configuration bit streams. Due to physical i/o limitations, changing bit streams is an expensive operation. In cases of heavy device reuse this reload time can have a significant effect on system performance (e.g. <ref> [5] </ref> [8]). Of course, the real problem associated with reconfiguration time is the i/o bandwidth limitation. It is certainly not necessary for the bits stored in the configuration memories to be identical to the off-chip interconnect specification or the specification transmitted across the chip boundary.
Reference: [6] <author> Jonathan Rose and Stephen Brown. </author> <title> Flexibility of Interconnection Structures for Field-Programmable Gate Arrays. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(3) </volume> <pages> 277-282, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: It is worthwhile to note that interconnect flexibility as used here can be applied to any interconnection network or family of graphs. As such it is very different from the interconnect flexibility defined in <ref> [6] </ref> [3] which is used to describe the level of population of switches in a particular interconnect family. Interconnection Patterns It is important that we look at the interconnection patterns as a whole to understand which patterns are functionally identical.
Reference: [7] <author> Edward Tau, Ian Eslick, Derrick Chen, Jeremy Brown, and Andre DeHon. </author> <title> A First Generation DPGA Implementation. </title> <booktitle> In Proceedings of the Third Canadian Workshop on Field-Programmable Devices, </booktitle> <pages> pages 138-143, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We discuss the implications and impact of this redundancy in more detail in Section 8 before concluding in Section 9. 2 Motivational Example Consider a case where we wish to drive any of n sources onto each of m sinks. In our DPGA prototype <ref> [7] </ref>, for example, we needed to drive the 4 inputs to the 4-LUT from the 15 lines which physically converged upon the LUT cell (m = 4, n = 15, See Figure 1). This kind of structure is typical when connecting logic block inputs to a routing channel. <p> In these cases the chip needs to hold many configurations worth of memory simultaneously. If one is not careful about the density of the interconnect configuration encoding, the configuration memory stores can dominate chip area. In the aforementioned DPGA Prototype <ref> [7] </ref>, for example, even with four on-chip contexts, wiring and switching accounted for over half of the die area. Network configuration memory made up about one fourth of the area.
Reference: [8] <author> Michael J. Wirthlin and Brad L. Hutchings. </author> <title> A Dynamic Instruction Set Computer. </title> <editor> In Peter Athanas and Ken Pocek, editors, </editor> <booktitle> Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <address> Los Alamitos, California, April 1995. </address> <publisher> IEEE Computer Society, IEEE Computer Society Press. </publisher>
Reference-contexts: As we have seen in Section 7, contemporary reconfigurable devices have very large configuration bit streams. Due to physical i/o limitations, changing bit streams is an expensive operation. In cases of heavy device reuse this reload time can have a significant effect on system performance (e.g. [5] <ref> [8] </ref>). Of course, the real problem associated with reconfiguration time is the i/o bandwidth limitation. It is certainly not necessary for the bits stored in the configuration memories to be identical to the off-chip interconnect specification or the specification transmitted across the chip boundary.
Reference: [9] <author> Xilinx, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, CA 95124. </address> <booktitle> The Programmable Logic Data Book, </booktitle> <year> 1994. </year>
Reference-contexts: to specify the logic block functions in the obvious manner: N logic bits = n block logic bits n blocks (5) FPGA '96 -- ACM/SIGDA Fourth International Symposium on FPGAs February 11-13, 1996, Monterey, CA Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K <ref> [9] </ref> Xilinx xc5210 324 CLBs 196 IOs 160K [10] Altera EPF81188 1008 LEs 184 IOEs 192K [2] [1] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4
Reference: [10] <author> Xilinx, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, CA 95124. </address> <note> XC5200 Logic Cell array Family Technical Data, preliminary (v1.0) edition, </note> <month> April </month> <year> 1995. </year>
Reference-contexts: obvious manner: N logic bits = n block logic bits n blocks (5) FPGA '96 -- ACM/SIGDA Fourth International Symposium on FPGAs February 11-13, 1996, Monterey, CA Part n blocks n io Programming Bits Reference Xilinx xc4013 578 CLBs 192 IOBs 240K [9] Xilinx xc5210 324 CLBs 196 IOs 160K <ref> [10] </ref> Altera EPF81188 1008 LEs 184 IOEs 192K [2] [1] Pedagogical Reference 1024 4-LUTs 200 - Family n block ins n block ous n io ins n io outs n block logic bits XC4K CLB 13 4 4 2 2 fi 2 4 + 2 3 = 40 Altera 8K LE
References-found: 10

