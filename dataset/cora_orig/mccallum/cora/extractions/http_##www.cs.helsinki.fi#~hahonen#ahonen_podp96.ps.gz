URL: http://www.cs.helsinki.fi/~hahonen/ahonen_podp96.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~hahonen/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: helena.ahonen@helsinki.fi  
Phone: Tel. +358-0-70844218  
Title: Disambiguation of SGML content models  
Author: Helena Ahonen 
Address: P.O. Box 26 (Teollisuuskatu 23) FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science University of Helsinki  
Abstract: A Standard Generalized Markup Language (SGML) document has a document type definition (DTD) that specifies the allowed structures for the document. The basic components of a DTD are element declarations that contain for each element a content model, i.e., a regular expression that defines the allowed content for this element. The SGML standard requires that the content models of element declarations are unambiguous in the following sense: a content model is ambiguous if an element or character string occurring in the document instance can satisfy more than one primitive token in the content model without look-ahead. Bruggemann-Klein and Wood have studied the unambiguity of content models, and they have presented an algorithm that decides whether a content model is unambiguous. In this paper we present a disambiguation algorithm that, based on the work of Bruggemann-Klein and Wood, transform an ambiguous content model into an unambiguous one by generalizing the language. We also present some experimental results obtained by our implementation of the algorithm in connection to an automatic DTD generation tool. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Information Processing Text and Office Systems Standard Generalized Markup Language (SGML). </institution> <type> Technical Report ISO/IEC 8879, </type> <institution> International Organization for Standardization ISO/IEC, </institution> <address> Geneva/New York, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction A Standard Generalized Markup Language (SGML) <ref> [1] </ref> document type definition (DTD) specifies the elements that are allowed in a document of this type, and for each element, its content model , i.e., either the structure of its content in terms of the other elements, or, for the unstructured parts of text, the type of data that can
Reference: [2] <author> Anne Bruggemann-Klein and Derick Wood. </author> <title> Deterministic regular languages. </title> <editor> In A. Finkel and M. Jantzen, editors, </editor> <booktitle> STACS '92, Proceedings of the 9th Annual Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 577, </booktitle> <pages> pages 173-184. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: &lt;Headword&gt;tact</Headword&gt; &lt;Example&gt;Phil had the tact to leave a moment's respectful silence.&lt;/Example&gt; &lt;/Entry&gt; Iterations are still another cause of ambiguity: &lt;!ELEMENT Senses - ((Sense, Example)*, Sense) &gt; &lt;Senses&gt; &lt;Sense&gt;Extremely unpleasant.&lt;/Sense&gt; &lt;Example&gt;She would never harm an insect, however noxious&lt;/Example&gt; &lt;Sense&gt;A noxious gas or substance is harmful or poisonous.&lt;/Sense&gt; &lt;/Senses&gt; Bruggemann-Klein and Wood <ref> [2, 3] </ref> have presented an algorithm that can decide whether a content model is unambiguous. We have developed their ideas further and present in this paper a disambiguation algorithm that transforms an ambiguous content model into an unambiguous one.
Reference: [3] <author> Anne Bruggemann-Klein and Derick Wood. </author> <title> One-unambiguous regular languages. </title> <type> Technical report, </type> <institution> Institut fur Informatik, Universitat Freiburg, </institution> <month> May </month> <year> 1994. </year> <note> Accessible at URL: http://www.informatik.uni-freiburg.de/Personalia/Brueggemann-Klein.html. </note>
Reference-contexts: &lt;Headword&gt;tact</Headword&gt; &lt;Example&gt;Phil had the tact to leave a moment's respectful silence.&lt;/Example&gt; &lt;/Entry&gt; Iterations are still another cause of ambiguity: &lt;!ELEMENT Senses - ((Sense, Example)*, Sense) &gt; &lt;Senses&gt; &lt;Sense&gt;Extremely unpleasant.&lt;/Sense&gt; &lt;Example&gt;She would never harm an insect, however noxious&lt;/Example&gt; &lt;Sense&gt;A noxious gas or substance is harmful or poisonous.&lt;/Sense&gt; &lt;/Senses&gt; Bruggemann-Klein and Wood <ref> [2, 3] </ref> have presented an algorithm that can decide whether a content model is unambiguous. We have developed their ideas further and present in this paper a disambiguation algorithm that transforms an ambiguous content model into an unambiguous one. <p> The next section outlines the decision algorithm of Bruggemann-Klein and Wood and the basic concepts needed. In Section 3 we present the disambiguation algorithm for automata, and in Section 4 the conversion into a content model. Section 5 gives some experimental results. 2 1-unambiguity Bruggemann-Klein and Wood <ref> [3] </ref> call the unambiguity required in the SGML standard 1-unambiguity and give a definition for it in terms of the pairs of positions that follow each other in a word. Here a `word' denotes a string of elements, and a `language' is a set of `words'. <p> Now we can construct the expression for the automaton M by constructing the expression for the reduced automaton. Bruggemann-Klein and Wood <ref> [3] </ref> give the following method. First we assume that the 1-unambiguous regular expressions for the orbits can be constructed. We assume that M has more than one orbit and consider the orbit O (q 0 ) of the initial state q 0 .
Reference: [4] <author> Helena Ahonen, Heikki Mannila, and Erja Nikunen. </author> <title> Generating grammars for SGML tagged texts lacking DTD. </title> <editor> In M. Murata and H. Gallaire, editors, </editor> <booktitle> Proceedings of the Workshop on Principles of Document Processing '94. Also to appear in Mathematical and Computer Modelling., </booktitle> <year> 1994. </year>
Reference-contexts: The resulting content model generalizes the original, i.e., accepts more element structures. We have implemented the disambiguation algorithm as a part of our automatic DTD generation tool <ref> [4, 5] </ref>. The tool generates DTDs by generalizing tagged document instances. For each element it forms a deterministic finite automaton that first accepts the sample instances only. The automaton is then generalized until it fulfills certain constraints.
Reference: [5] <author> Helena Ahonen. </author> <title> Generating grammars for structured documents using grammatical inference methods. </title> <type> PhD Thesis, </type> <institution> Department of Computer Science, University of Helsinki, </institution> <year> 1996. </year> <note> In preparation. 10 </note>
Reference-contexts: The resulting content model generalizes the original, i.e., accepts more element structures. We have implemented the disambiguation algorithm as a part of our automatic DTD generation tool <ref> [4, 5] </ref>. The tool generates DTDs by generalizing tagged document instances. For each element it forms a deterministic finite automaton that first accepts the sample instances only. The automaton is then generalized until it fulfills certain constraints.
References-found: 5

