URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-51.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Email: allender@cs.rutgers.edu.  
Title: Large Uniform Threshold Circuits 1  
Author: by Eric Allender ; 
Address: P.O. Box 1179 Piscataway, NJ 08855-1179  
Affiliation: Department of Computer Science Rutgers University  
Note: The Permanent Requires  torics Conference (COCOON '96). 2 Permanent Member 3 Supported in part by NSF grant CCR-9509603. DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 97-51 September 1997 
Abstract-found: 1
Intro-found: 1
Reference: [ABHH93] <author> E. Allender, R. Beigel, U. Hertrampf, and S. Homer. </author> <title> Almost-everywhere complexity hierarchies for nondeterministic time. </title> <journal> Theoretical Computer Science, </journal> <volume> 115 </volume> <pages> 225-242, </pages> <year> 1993. </year>
Reference-contexts: Then: ACC 0 is properly contained in ACC 0 (2 n * ). TC 0 is properly contained in TC 0 (2 n * ). But now we will use the technique of <ref> [ABHH93] </ref> to get a better separation. Lemma 6.4 Let S be a constructible function, S (n) n. If ACC 0 = ACC 0 (S (n)), then ACC 0 = ACC 0 (S (S (n))). Proof: Let A be any set in time (O (log S (S (n)))).
Reference: [AG94] <author> E. Allender and V. Gore. </author> <title> A uniform circuit lower bound for the permanent. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23 </volume> <pages> 1026-1049, </pages> <year> 1994. </year>
Reference-contexts: In this algebraic setting, ACC 0 is the most important subclass of NC 1 . Although, as mentioned above, it is unknown if small ACC 0 circuits suffice to compute all problems in NEXPTIME, lower bounds for uniform ACC 0 circuits were presented in <ref> [AG94] </ref>. Since our results, like those of [CMTV96] and [AG94], concern uniform circuits, it is necessary to briefly discuss uniformity. A circuit family fC n g consists of a circuit for each input length n. <p> Although, as mentioned above, it is unknown if small ACC 0 circuits suffice to compute all problems in NEXPTIME, lower bounds for uniform ACC 0 circuits were presented in <ref> [AG94] </ref>. Since our results, like those of [CMTV96] and [AG94], concern uniform circuits, it is necessary to briefly discuss uniformity. A circuit family fC n g consists of a circuit for each input length n. If C n is "sufficiently easy" to construct from n, then the family fC n g is said to be uniform. <p> ACC 0 denotes ACC 0 (n O (1) ). In contrast to our lack of lower bounds for nonuniform ACC 0 circuits for sets in NTIME (2 n O (1) ), it was shown in <ref> [AG94] </ref> that exponential size (i.e., size at least 2 n * ) is required to compute the permanent (and other problems complete for #P) on uniform ACC 0 circuits. Thus there are sets in P #P that require exponential-sized uniform ACC 0 circuits. <p> C = P contains coNP but is not known to contain NP; PP is contained in NP C = P [Tor91]. One might expect that similar exponential lower bounds would hold for PP or C = P as hold for #P, but <ref> [AG94] </ref> was able only to show that sets complete for these classes require more than "sub-subexponential" size ACC 0 circuits, where a function t is said to be sub-subexponential if t (t (n)) = 2 n o (1) . (Note that for all "natural" and interesting size bounds t, t is <p> Similarly, as was shown in [Zan91] (see also comments in <ref> [AG94] </ref>), the set f (x; i; b) j the ith bit of Permanent (x) is equal to bg is hard - 4 - for C = P under AC 0 reducibility (with only one query), and hence uniform threshold circuits for the permanent must also satisfy this lower bound. <p> The appropriate model of computation was defined in <ref> [AG94] </ref> as a variant of alternating Turing machines. We refer the reader to that [AG94] for detailed definitions; for the purposes of this paper it will suffice for the reader who is familiar with alternating Turing machines to consider the most natural way of augmenting the usual existential and universal states <p> The appropriate model of computation was defined in <ref> [AG94] </ref> as a variant of alternating Turing machines. We refer the reader to that [AG94] for detailed definitions; for the purposes of this paper it will suffice for the reader who is familiar with alternating Turing machines to consider the most natural way of augmenting the usual existential and universal states of an alternating Turing machine with Mod m states. <p> Let time (t (n)) denote the class of languages accepted by machines running in time t (n). The technical lemmas in <ref> [AG94] </ref> essentially prove the following proposition. Definition 1 Let us call a function f constructible if f (n) = 2 g (n) , where g (n) can be computed from n (in binary) in time O (g (n)). <p> note that a "tape reduction theorem" holds for machines; if a set is accepted in time t (n) by a machine with k worktapes, then it is also accepted in time O (t (n)) by a machine with two worktapes. (Proof sketch: Given a k-tape machine, follow the construction in <ref> [AG94] </ref> and build an ACC circuit, such that is the sequence of types of gates encountered in a root-to-leaf path. In the construction given in [AG94], the deterministic linear-time machine that checks the uniformity condition needs k tapes. (Roughly, the gates of the circuit are labeled with configurations of the -machine <p> it is also accepted in time O (t (n)) by a machine with two worktapes. (Proof sketch: Given a k-tape machine, follow the construction in <ref> [AG94] </ref> and build an ACC circuit, such that is the sequence of types of gates encountered in a root-to-leaf path. In the construction given in [AG94], the deterministic linear-time machine that checks the uniformity condition needs k tapes. (Roughly, the gates of the circuit are labeled with configurations of the -machine at points in the computation when an alternation is made, (the output gate of the circuit is labelled with the start configuration of the machine) <p> and hence the circuit has depth O (1), the size of the labels is still O (t (n)) bits, and thus the circuit size is still 2 O (t (n)) .) Now given a uniform -circuit family where the uniformity condition is checked by a 2-tape machine, the construction in <ref> [AG94] </ref> yields a two-tape -machine accepting the original language.) Similarly, we will find it very convenient to have a single model of computation that is sufficient for describing both TC 0 and the counting hierarchy. Such a model was described in [PS88]. <p> Then TC 0 is properly contained in TC 0 (T (n)). 7 Conclusions and Open Problems It is often harder to ask the right question than to answer that question. In <ref> [AG94] </ref> we presented lower bounds on the uniform circuit complexity of certain problems in PSPACE, and did not see any way to prove lower bounds on the ACC 0 circuit complexity of any given problem in ModPH. <p> This same technique, taken one step further, provides explicit lower bounds for many specific problems in the counting hierarchy, including the complete sets for C = P, PP, and several functions complete for #P. An obvious question is whether the sub-subexponential lower bounds given here and in <ref> [AG94] </ref> can be improved to exponential lower bounds. The lower bounds presented here for C = P, PP, and the permanent are incomparable with the bounds presented in [AG94]; the bounds presented here are for more powerful circuits (threshold circuits as opposed to ACC 0 circuits), but the size bounds presented <p> An obvious question is whether the sub-subexponential lower bounds given here and in <ref> [AG94] </ref> can be improved to exponential lower bounds. The lower bounds presented here for C = P, PP, and the permanent are incomparable with the bounds presented in [AG94]; the bounds presented here are for more powerful circuits (threshold circuits as opposed to ACC 0 circuits), but the size bounds presented here are not as large as in [AG94]. <p> The lower bounds presented here for C = P, PP, and the permanent are incomparable with the bounds presented in <ref> [AG94] </ref>; the bounds presented here are for more powerful circuits (threshold circuits as opposed to ACC 0 circuits), but the size bounds presented here are not as large as in [AG94]. It seems unlikely that the bounds presented here are optimal; probably exponential size is required for all of these problems.
Reference: [Bar89] <author> D. A. </author> <title> Mix Barrington. Bounded-width polynomial-size branching programs recognize exactly those languages in NC 1 . Journal of Computer and System Sciences, </title> <booktitle> 38 </booktitle> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: The lovely result of <ref> [Bar89] </ref> characterizing NC 1 (log-depth fan-in two circuits) in terms of constant-width branching programs relies heavily on algebraic techniques, and shows that NC 1 corresponds to computation over non-solvable algebras. <p> Barrington also defined the corresponding notion of computation over solvable algebras, and it is shown in [BT88] that this notion corresponds exactly to ACC 0 circuits. To restate these two points: 1. The results of <ref> [Bar89] </ref> establish intimate connections between circuit complexity and algebraic structure. 2. In this algebraic setting, ACC 0 is the most important subclass of NC 1 .
Reference: [BG70] <author> R. Book and S. </author> <title> Greibach. </title> <journal> Quasi-realtime languages. Mathematical Systems Theory, </journal> <volume> 4 </volume> <pages> 97-111, </pages> <year> 1970. </year>
Reference-contexts: only to simulate the -Turing along that path; if the -machine has k tapes, then the uniformity machine will have k tapes, too.) However, by changing the naming convention for the gates in the circuit in a way that makes use of the ideas in the original tape-reduction proof of <ref> [BG70] </ref> for nondeterministic machines, we can make do with a two-tape deterministic machine checking the uniformity condition. (That is, if M 1 is the k-tape uniformity machine for the original circuit family, and the original circuit has gates g and h, where there is an edge in the circuit from h
Reference: [BIS90] <author> D. A. Mix Barrington, N. Immerman, and H. </author> <title> Straubing. </title> <journal> On uniformity within NC 1 . Journal of Computer and System Sciences, </journal> <volume> 41 </volume> <pages> 274-306, </pages> <year> 1990. </year>
Reference-contexts: Different notions of "sufficiently easy" give rise to different notions of uniformity, and the question of which notion of uniformity is the "right" one to use when studying classes of circuits is not always clear. For the circuit classes considered here, convincing arguments are presented in <ref> [BIS90] </ref>, arguing that a very restrictive notion of uniformity called Dlogtime-uniformity is the correct notion to use. <p> the input n; g; h is logarithmic in the size of the circuit C n . (Dlogtime-uniformity is essentially equivalent to what Ruzzo called U E uniformity in - 2 - [Ruz81]; although he considered only circuits of fan-in two, and not the unbounded fan-in circuits considered here and in <ref> [BIS90] </ref>.) Throughout the rest of this paper, all mention of uniform circuits refers to Dlogtime-uniform circuits. In this paper, ACC 0 (S (n)) will denote the class of languages with uniform ACC 0 circuits of size S (n). ACC 0 denotes ACC 0 (n O (1) ). <p> The characterization of the counting hierarchy in terms of threshold Turing machines is given in [PS88], but the corresponding characterization of TC 0 is not presented there (since [PS88] predates the uniformity considerations of <ref> [BIS90] </ref>), and it also does not seem to have been published anywhere else. Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. <p> The characterization of the counting hierarchy in terms of threshold Turing machines is given in [PS88], but the corresponding characterization of TC 0 is not presented there (since [PS88] predates the uniformity considerations of <ref> [BIS90] </ref>), and it also does not seem to have been published anywhere else. Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. <p> the corresponding characterization of TC 0 is not presented there (since [PS88] predates the uniformity considerations of <ref> [BIS90] </ref>), and it also does not seem to have been published anywhere else. Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. Nonetheless, the proof of the following proposition is quite standard and follows along the lines of related results in [PS88, BIS90]: - 6 - Proposition 2.2 Let t (n) be a constructible function, t (n) = (log n). <p> Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. Nonetheless, the proof of the following proposition is quite standard and follows along the lines of related results in <ref> [PS88, BIS90] </ref>: - 6 - Proposition 2.2 Let t (n) be a constructible function, t (n) = (log n). Then Uniform threshold circuit depth (O (1)), size (2 O (t (n)) ) = Threshold Turing machine time (O (t (n))), thresholds (O (1)).
Reference: [BT88] <author> D. A. Mix Barrington and D. Therien. </author> <title> Finite monoids and the fine structure of NC 1 . Journal of the ACM, </title> <booktitle> 35 </booktitle> <pages> 941-952, </pages> <year> 1988. </year>
Reference-contexts: Barrington also defined the corresponding notion of computation over solvable algebras, and it is shown in <ref> [BT88] </ref> that this notion corresponds exactly to ACC 0 circuits. To restate these two points: 1. The results of [Bar89] establish intimate connections between circuit complexity and algebraic structure. 2. In this algebraic setting, ACC 0 is the most important subclass of NC 1 .
Reference: [CMTV96] <author> H. Caussinus, P. McKenzie, D. Therien, and H. Vollmer. </author> <title> Nondeterministic NC 1 computation. </title> <booktitle> In Proceedings, 11th Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 12-21, </pages> <year> 1996. </year>
Reference-contexts: Although, as mentioned above, it is unknown if small ACC 0 circuits suffice to compute all problems in NEXPTIME, lower bounds for uniform ACC 0 circuits were presented in [AG94]. Since our results, like those of <ref> [CMTV96] </ref> and [AG94], concern uniform circuits, it is necessary to briefly discuss uniformity. A circuit family fC n g consists of a circuit for each input length n. If C n is "sufficiently easy" to construct from n, then the family fC n g is said to be uniform. <p> 2, we present models of computation (similar to alternating Turing machines) such that polynomial time on this model characterizes ModPH (or the counting hierarchy) while logarithmic time characterizes ACC 0 (or TC 0 , respectively). 1.2 Statement of the Main Results A recent paper by Caussinus, McKenzie, Therien, and Vollmer <ref> [CMTV96] </ref> shows that ACC 0 is properly contained in ModPH, and TC 0 is properly contained in the counting hierarchy. The proof given by [CMTV96] uses "leaf languages" as a tool, and does not explicitly present a lower bound for any language in ModPH or in the counting hierarchy. <p> while logarithmic time characterizes ACC 0 (or TC 0 , respectively). 1.2 Statement of the Main Results A recent paper by Caussinus, McKenzie, Therien, and Vollmer <ref> [CMTV96] </ref> shows that ACC 0 is properly contained in ModPH, and TC 0 is properly contained in the counting hierarchy. The proof given by [CMTV96] uses "leaf languages" as a tool, and does not explicitly present a lower bound for any language in ModPH or in the counting hierarchy. The present work began as an attempt to discover if these techniques could be used to present an explicit lower bound. <p> This attempt was only partially successful. For each given language A in ModPH, it is still an open question if A has polynomial size uniform ACC 0 circuits. The proof in <ref> [CMTV96] </ref> shows only that there exists a set in ModPH that requires superpolynomial size ACC 0 circuits; the present work gives a very simple direct proof of this same separation, but with the improvement that "superpolynomial" is replaced by "sub-subexponential". <p> * ) [ TC 0 (n O (log fl n) ). (By essentially the same argument, we obtain that TC 0 is properly contained in NC 1 [TC 0 (n O (log fl n) ).) We immediately get the following corollaries, which seem only marginally better than the results of <ref> [CMTV96] </ref> showing proper inclusion in ModPH and the counting hierarchy: Corollary 6.3 Let * be greater than 0. Then: ACC 0 is properly contained in ACC 0 (2 n * ). TC 0 is properly contained in TC 0 (2 n * ). <p> In [AG94] we presented lower bounds on the uniform circuit complexity of certain problems in PSPACE, and did not see any way to prove lower bounds on the ACC 0 circuit complexity of any given problem in ModPH. Given the inspiration of <ref> [CMTV96] </ref>, it is easy to give a direct proof showing that there exist sets in ModPH having large ACC 0 circuit complexity, without giving lower bounds on any specific set in ModPH. <p> 0 is a very limited class in many respects (and in particular it is not clear that one should expect pseudorandom generators to be computable in ACC 0 ), it it not clear that lower bounds for ACC 0 should be hard to obtain.) Acknowledgments I thank the authors of <ref> [CMTV96] </ref> for making their manuscript available to me. I thank Dieter van Melkebeek for helpful discussions.
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits, and the polynomial-time hierarchy. </title> <journal> Mathematical Systems Theory, </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year>
Reference-contexts: There are well-studied subclasses of PSPACE that correspond in a natural way to the complexity classes AC 0 , ACC 0 , and TC 0 . The relationship between the polynomial hierarchy and AC 0 is well-known and was established by <ref> [FSS84] </ref>. One way to present this correspondence is to observe that, when one considers alternating Turing machines that make only O (1) alternations, a polynomial running time yields the polynomial hierarchy, while a logarithmic running time yields uniform AC 0 .
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6 </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: PP contains both NP and coNP <ref> [Gil77] </ref>.
Reference: [GKR + 95] <author> F. Green, J. Kobler, K. Regan, T. Schwentick, and J. Toran. </author> <title> The power of the middle bit of a #P function. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 50 </volume> <pages> 456-467, </pages> <year> 1995. </year>
Reference-contexts: Then the class ModPH is defined to be the smallest class of languages containing P and with the property that if A is in ModPH, then so are NP A and Mod m P A for every natural m. ModPH has been studied by several authors. (See, for example, <ref> [GKR + 95] </ref>.) It is useful to have a model of computation characterizing ACC 0 and ModPH, in the same way that alternating Turing machines characterize both AC 0 and the polynomial hierarchy. The appropriate model of computation was defined in [AG94] as a variant of alternating Turing machines.
Reference: [H-as87] <author> J. H-astad. </author> <title> Computational Limitations for Small Depth Circuits. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year> <month> - 12 </month> - 
Reference-contexts: It is known that constant-depth circuits of AND, OR, and NOT gates (so-called AC 0 circuits) require exponential size even to compute the parity of n input bits <ref> [H-as87, Yao85] </ref>, and similar lower bounds are known for constant-depth circuits of AND, OR, NOT, and MODp gates where p is prime [Raz87, Smo87]. When MODm gates are allowed for composite m, however, almost nothing is known.
Reference: [Par90] <author> I. Parberry. </author> <title> A primer on the complexity theory of neural networks. </title> <editor> In R. Banerji, editor, </editor> <booktitle> Formal Techniques in Artificial Intelligence: A Sourcebook, volume 6 of Studies in Computer Science and Artificial Intelligence, </booktitle> <pages> pages 217-268. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: TC 0 captures the complexity of important natural computational problems such as sorting, counting, and integer multiplication. It is also a good complexity-theoretic model for the "neural net" model of computation <ref> [Par90] </ref>. It is easy to observe that ACC 0 TC 0 , and thus we have even fewer lower bounds for the threshold circuit model than for ACC 0 circuits.
Reference: [PS88] <author> I. Parberry and G. Schnitger. </author> <title> Parallel computation with threshold functions. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 278-302, </pages> <year> 1988. </year>
Reference-contexts: Such a model was described in <ref> [PS88] </ref>. In their model, which they call a "threshold Turing machine", TC 0 corresponds to O (log n) time and O (1) uses of the "threshold" operation, and the counting hierarchy corresponds to polynomial time and O (1) uses of the threshold operation. <p> The characterization of the counting hierarchy in terms of threshold Turing machines is given in <ref> [PS88] </ref>, but the corresponding characterization of TC 0 is not presented there (since [PS88] predates the uniformity considerations of [BIS90]), and it also does not seem to have been published anywhere else. <p> The characterization of the counting hierarchy in terms of threshold Turing machines is given in <ref> [PS88] </ref>, but the corresponding characterization of TC 0 is not presented there (since [PS88] predates the uniformity considerations of [BIS90]), and it also does not seem to have been published anywhere else. Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. <p> Although [BIS90] does give many equivalent characterizations of TC 0 , the threshold Turing machine model is not mentioned in [BIS90]. Nonetheless, the proof of the following proposition is quite standard and follows along the lines of related results in <ref> [PS88, BIS90] </ref>: - 6 - Proposition 2.2 Let t (n) be a constructible function, t (n) = (log n). Then Uniform threshold circuit depth (O (1)), size (2 O (t (n)) ) = Threshold Turing machine time (O (t (n))), thresholds (O (1)).
Reference: [Raz87] <author> A. A. Razborov. </author> <title> Lower bounds on the size of bounded depth networks over a complete basis with logical addition. </title> <journal> Mathematicheskie Zametki, </journal> <volume> 41 </volume> <pages> 598-607, </pages> <year> 1987. </year> <booktitle> English translation in Mathematical Notes of the Academy of Sciences of the USSR 41:4, </booktitle> <pages> 333-338. </pages>
Reference-contexts: It is known that constant-depth circuits of AND, OR, and NOT gates (so-called AC 0 circuits) require exponential size even to compute the parity of n input bits [H-as87, Yao85], and similar lower bounds are known for constant-depth circuits of AND, OR, NOT, and MODp gates where p is prime <ref> [Raz87, Smo87] </ref>. When MODm gates are allowed for composite m, however, almost nothing is known. It remains an open question if there is any problem in NTIME (2 n O (1) ) that cannot be done with polynomial size and constant depth with AND and MOD6 gates.
Reference: [RR94] <author> A. Razborov and S. Rudich. </author> <title> Natural proofs. </title> <booktitle> In Proceedings, 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 204-213, </pages> <year> 1994. </year>
Reference-contexts: It seems unlikely that the bounds presented here are optimal; probably exponential size is required for all of these problems. Of course, an even more desirable step would be to prove directly that MAJORITY requires exponential size for ACC 0 circuits. (The "natural proofs" framework of <ref> [RR94] </ref> indicates that many lower bound proofs may be quite difficult to obtain.
Reference: [Ruz81] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21 </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference-contexts: The name "Dlogtime-uniformity" comes from the fact that the length of the input n; g; h is logarithmic in the size of the circuit C n . (Dlogtime-uniformity is essentially equivalent to what Ruzzo called U E uniformity in - 2 - <ref> [Ruz81] </ref>; although he considered only circuits of fan-in two, and not the unbounded fan-in circuits considered here and in [BIS90].) Throughout the rest of this paper, all mention of uniform circuits refers to Dlogtime-uniform circuits.
Reference: [SFM78] <author> J. Seiferas, M. Fischer, and A. Meyer. </author> <title> Separating nondeterministic time complexity classes. </title> <journal> Journal of the ACM, </journal> <volume> 25 </volume> <pages> 146-167, </pages> <year> 1978. </year>
Reference-contexts: The lower bounds presented in this paper do not depend on this tape reduction, but the statement of Theorem 3.1 is simplified by taking advantage of the tape reduction. 3 Diagonalization It is important to note that the techniques used to prove the nondeterministic time hierarchy (originally proved in <ref> [SFM78] </ref>, although we will use the very simple and general version proved by Zak [ Z83]) can be used to prove analogous hierarchies for other computational models defined in terms of nondeterministic Turing machines (with a fixed bound on the number of worktapes).
Reference: [Smo87] <author> R. Smolensky. </author> <title> Algebraic methods in the theory of lower bounds for Boolean circuit complexity. </title> <booktitle> In Proceedings, 19th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-82, </pages> <year> 1987. </year>
Reference-contexts: It is known that constant-depth circuits of AND, OR, and NOT gates (so-called AC 0 circuits) require exponential size even to compute the parity of n input bits [H-as87, Yao85], and similar lower bounds are known for constant-depth circuits of AND, OR, NOT, and MODp gates where p is prime <ref> [Raz87, Smo87] </ref>. When MODm gates are allowed for composite m, however, almost nothing is known. It remains an open question if there is any problem in NTIME (2 n O (1) ) that cannot be done with polynomial size and constant depth with AND and MOD6 gates.
Reference: [Tod94] <author> S. </author> <title> Toda. Simple characterizations of p(#p) and complete problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 49 </volume> <pages> 1-17, </pages> <year> 1994. </year>
Reference-contexts: Similarly, the functions that are shown by Toda in <ref> [Tod94] </ref> to be complete for FP #P are not immediately known to require large threshold circuits; it would first need to be established that they are hard for C = P under TC 0 reductions. 2 Machine Models We assume the reader is familiar with nondeterministic oracle Turing machines.
Reference: [Tor91] <author> J. Toran. </author> <title> Complexity classes defined by counting quantifiers. </title> <journal> Journal of the ACM, </journal> <volume> 38 </volume> <pages> 753-774, </pages> <year> 1991. </year>
Reference-contexts: C = P contains coNP but is not known to contain NP; PP is contained in NP C = P <ref> [Tor91] </ref>.
Reference: [Val79] <author> L. Valiant. </author> <title> The complexity of enumeration and reliability problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8 </volume> <pages> 410-421, </pages> <year> 1979. </year>
Reference-contexts: In contrast, some of the functions that are shown to be #P-complete in <ref> [Val79] </ref> are shown only to be complete under poly-time Turing reducibility; for example, we have not checked to see if the problem of counting the number of (possibly imperfect) matchings in a bipartite graph is hard for C = P under truth-table reducibility (although we suspect that this is the case)
Reference: [ Z83] <author> S. Zak. </author> <title> A Turing machine hierarchy. </title> <journal> Theoretical Computer Science, </journal> <volume> 26 </volume> <pages> 327-333, </pages> <year> 1983. </year>
Reference-contexts: reduction, but the statement of Theorem 3.1 is simplified by taking advantage of the tape reduction. 3 Diagonalization It is important to note that the techniques used to prove the nondeterministic time hierarchy (originally proved in [SFM78], although we will use the very simple and general version proved by Zak <ref> [ Z83] </ref>) can be used to prove analogous hierarchies for other computational models defined in terms of nondeterministic Turing machines (with a fixed bound on the number of worktapes). In particular, an essentially word-for-word translation of the proof in [ Z83] shows the following. <p> will use the very simple and general version proved by Zak <ref> [ Z83] </ref>) can be used to prove analogous hierarchies for other computational models defined in terms of nondeterministic Turing machines (with a fixed bound on the number of worktapes). In particular, an essentially word-for-word translation of the proof in [ Z83] shows the following. Theorem 3.1 Let 2 T be constructible. Then there is a set B in time (T (n)) such that, for all t with t (n + 1) = o (T (n)), B is not in time (t (n)).
Reference: [Wag86] <author> K. W. Wagner. </author> <title> The complexity of combinatorial problems with succinct input representation. </title> <journal> Acta Informatica, </journal> <volume> 23 </volume> <pages> 325-356, </pages> <year> 1986. </year>
Reference-contexts: The analogous subclasses of PSPACE corresponding to ACC 0 and TC 0 are ModPH, and the counting hierarchy, respectively. - 3 - ModPH is in some sense a generalization of the polynomial hierarchy and of P (formal definitions appear in Section 2). The counting hierarchy (defined in <ref> [Wag86] </ref> and studied by several authors) consists of the union of the complexity classes PP, PP PP , PP PP PP , : : : (Note that this is equal to the union of the classes C = P, C = P C = P , PP C = P C
Reference: [Wil90] <author> C. Wilson. </author> <title> Decomposing NC and AC. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19 </volume> <pages> 384-396, </pages> <year> 1990. </year>
Reference-contexts: Then A TC 0 T B if there is a uniform family of polynomial-size constant depth circuits with MAJORITY gates and oracle gates for B, accepting A. (This is a natural adaptation of the notion of AC 0 reducibility studied in <ref> [Wil90] </ref> and elsewhere.) In particular, all sets that are currently known to be complete for PP require threshold circuits of this size, because all such sets currently known are in fact complete under many-one reductions computable in uniform AC 0 .
Reference: [Yao85] <author> A. C. Yao. </author> <title> Separating the polynomial-time hierarchy by oracles. </title> <booktitle> In Proc. 26th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-10, </pages> <year> 1985. </year> <month> - 13 </month> - 
Reference-contexts: It is known that constant-depth circuits of AND, OR, and NOT gates (so-called AC 0 circuits) require exponential size even to compute the parity of n input bits <ref> [H-as87, Yao85] </ref>, and similar lower bounds are known for constant-depth circuits of AND, OR, NOT, and MODp gates where p is prime [Raz87, Smo87]. When MODm gates are allowed for composite m, however, almost nothing is known.
Reference: [Zan91] <author> V. Zanko. </author> <title> #P-completeness via many-one reductions. </title> <journal> International Journal of Foundations of Computer Science, </journal> <volume> 2 </volume> <pages> 77-82, </pages> <year> 1991. </year>
Reference-contexts: Similarly, as was shown in <ref> [Zan91] </ref> (see also comments in [AG94]), the set f (x; i; b) j the ith bit of Permanent (x) is equal to bg is hard - 4 - for C = P under AC 0 reducibility (with only one query), and hence uniform threshold circuits for the permanent must also satisfy
References-found: 26

