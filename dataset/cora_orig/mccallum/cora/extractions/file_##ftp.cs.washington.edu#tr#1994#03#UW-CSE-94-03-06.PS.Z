URL: file://ftp.cs.washington.edu/tr/1994/03/UW-CSE-94-03-06.PS.Z
Refering-URL: http://www.cs.washington.edu/research/projects/lis/oetools/www/publications.html
Root-URL: http://www.cs.washington.edu
Title: Testing Asynchronous Circuits: A Survey  
Author: Henrik Hulgaard, Steven M. Burns, and Gaetano Borriello 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Abstract: Technical Report 94-03-06 March 6, 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Miron Abromovici, Melvin A. Breuer, and Arthur D. Friedman. </author> <title> Digital Systems Testing and Testable Design. </title> <publisher> Computer Science Press, </publisher> <year> 1990. </year>
Reference-contexts: However, the goal is to find a (preferably small) set of vectors that test for most of the faults in the circuit. Clearly, we can apply the above techniques for each fault, but it is more efficient to use a fault simulator in the test generation <ref> [1] </ref>. A fault simulator determines the effect of a fault by simulation. It can be used to determine the fault coverage of a set of test vectors, and also to determine which faults in a circuit a given test vector detects.
Reference: [2] <author> V. D. Agrawal, K.-T. Cheng, and P. Agrawal. </author> <title> A directed search method for test generation using a concurrent simulator. </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 8(2) </volume> <pages> 131-138, </pages> <month> February </month> <year> 1989. </year> <month> 19 </month>
Reference-contexts: No fault simulation in necessary in this phase. The two phases can be merged by combining the fault simulator with an appropriate cost function <ref> [2] </ref>. The cost function incorporates testability measures and guides the search for a test vector.
Reference: [3] <author> Peter A. Beerel and Teresa H.-Y. Meng. </author> <title> Semi-modularity and self-diagnostic asynchronous control circuits. </title> <booktitle> In Advanced Research in VLSI, Proceedings of the 1991 University of Cali-fornia/Santa Cruz Conference. </booktitle> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: If the circuit does not, then it has halted and is thus faulty. The time bound o can be determined given the fabrication technology and the circuit specification 3 . Circuits that have the property that they halt for all faults are called self-checking [4, 44] (or self-diagnostic <ref> [3, 8] </ref>). Thus, self-checking circuits are fully testable (i.e., 100% fault coverage). A test for a self-checking circuit attempts to toggle all nodes at least once, that is, during a test all nodes are driven both high and low. <p> Because a transition on the input to the fork still has to be acknowledged by at least one of the recipients, a speed-independent circuit is self-checking under this simple fault model <ref> [3, 4] </ref>. Unfortunately, it's questionable whether the output stuck-at fault 4 A Muller C-element (or rendezvous element) is a stateholding element that waits for the inputs to be equal, and then changes the output to be the same as the inputs. 5 model reflects a reasonable number of physical faults.
Reference: [4] <author> Peter A. Beerel and Teresa H.-Y. Meng. </author> <title> Semi-modularity and testability of speed-independent circuits. Integration, </title> <journal> the VLSI journal, </journal> <volume> 13(3) </volume> <pages> 301-322, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: If the circuit does not, then it has halted and is thus faulty. The time bound o can be determined given the fabrication technology and the circuit specification 3 . Circuits that have the property that they halt for all faults are called self-checking <ref> [4, 44] </ref> (or self-diagnostic [3, 8]). Thus, self-checking circuits are fully testable (i.e., 100% fault coverage). A test for a self-checking circuit attempts to toggle all nodes at least once, that is, during a test all nodes are driven both high and low. <p> Because a transition on the input to the fork still has to be acknowledged by at least one of the recipients, a speed-independent circuit is self-checking under this simple fault model <ref> [3, 4] </ref>. Unfortunately, it's questionable whether the output stuck-at fault 4 A Muller C-element (or rendezvous element) is a stateholding element that waits for the inputs to be equal, and then changes the output to be the same as the inputs. 5 model reflects a reasonable number of physical faults.
Reference: [5] <author> Erik Brunvand and Robert F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD), </booktitle> <pages> pages 262-265. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1989. </year>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3. <p> The area increase is reported to be only approximately 6%. This approach seems appropriate if the cells are reasonable large. This is often the case for syntax-directed synthesis methods where each cell corresponds to a language construct in a high-level specification language (e.g., <ref> [5] </ref>). The feasibility of the scan approach for asynchronous circuits has been demonstrated in [33] with a 144-bit scan-path in a systolic array. Asynchronous dual-rail combinational logic, implemented as PLAs, can be made fully testable by introducing a dual-rail scan path [12].
Reference: [6] <author> J. A. Brzozowski and C.-J. Seger. </author> <title> A unified framework for race analysis of asynchronous networks. </title> <journal> Journal of the ACM, </journal> <volume> 36(1) </volume> <pages> 20-45, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Thus the circuit must be analyzed under all possible delay assignments. If both gates and wires can take arbitrary (but bounded) delays, i.e., the delay-insensitive model, the analysis can be done by ternary simulation using a third logic value, X, denoting a unknown or changing signal <ref> [6] </ref>. For other delay models, this analysis becomes computationally much harder [39]. Assuming that a few test vectors can generally test for most faults, we can use the fault simulator to efficiently generate test vectors with a high fault coverage. The approach is illustrated in Figure 9.
Reference: [7] <author> Gerald R. Carson and Gaetano Borriello. </author> <title> A testable CMOS asynchronous counter. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 25(4), </volume> <month> August </month> <year> 1990. </year>
Reference-contexts: Using the scan-approach, the counter can be tested in linear time. For a particular implementation <ref> [7] </ref>, the extension of the toggle elements to scan elements increases the area of the counter by only 6% and the speed is reduced by about 7%. A comparable synchronous implementation of the counter has a 15% area increase to implement the scan-path and the test time is quadratic [16].
Reference: [8] <author> Ilana David, Ran Ginosar, and Michael Yoeli. </author> <title> Self-timed is self-diagnostic. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1990. </year>
Reference-contexts: If the circuit does not, then it has halted and is thus faulty. The time bound o can be determined given the fabrication technology and the circuit specification 3 . Circuits that have the property that they halt for all faults are called self-checking [4, 44] (or self-diagnostic <ref> [3, 8] </ref>). Thus, self-checking circuits are fully testable (i.e., 100% fault coverage). A test for a self-checking circuit attempts to toggle all nodes at least once, that is, during a test all nodes are driven both high and low.
Reference: [9] <author> Jo C. Ebergen. </author> <title> Translating Programs into Delay-Insensitive Circuits. </title> <type> Ph.D. thesis, </type> <institution> Technische Universiteit Eindhoven, </institution> <year> 1987. </year>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3.
Reference: [10] <author> H. Fujiwara and T. Shimono. </author> <title> On the acceleration of test generation algorithms. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1137-1144, </volume> <year> 1983. </year>
Reference-contexts: That is achieved by assigning 0 to c. Thus, the final test vector is (1; 1; 0). If F = 0 for this input vector, the circuit is faulty. Efficient algorithms exists to generate test vectors for combinational circuits, e.g., the D-algorithm [35], PODEM [11] and FAN <ref> [10] </ref>. Test generation for sequential circuits is a much harder problem, and it does not have a general solution [28].
Reference: [11] <author> P. Goel. </author> <title> An implicit enumeration algorithm to generate tests for combinational logic circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(3):215-222, </volume> <year> 1981. </year>
Reference-contexts: That is achieved by assigning 0 to c. Thus, the final test vector is (1; 1; 0). If F = 0 for this input vector, the circuit is faulty. Efficient algorithms exists to generate test vectors for combinational circuits, e.g., the D-algorithm [35], PODEM <ref> [11] </ref> and FAN [10]. Test generation for sequential circuits is a much harder problem, and it does not have a general solution [28].
Reference: [12] <author> Dong S. Ha and Sudhaker M. Reddy. </author> <title> On testable self-timed logic circuits. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD), </booktitle> <pages> pages 296-301. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1984. </year>
Reference-contexts: The feasibility of the scan approach for asynchronous circuits has been demonstrated in [33] with a 144-bit scan-path in a systolic array. Asynchronous dual-rail combinational logic, implemented as PLAs, can be made fully testable by introducing a dual-rail scan path <ref> [12] </ref>. However, [14] shows that dual-rail combinational logic can be tested using standard test generation techniques, e.g., the D-algorithm. An alternative approach to design for testability, which also addresses the problem of efficiently testing a circuit with low controllability, is described in [34].
Reference: [13] <author> T. Hayashi, K. Hatayama, S. Ishiyama, and M. Takakura. </author> <title> Two test generation methods for sequential circuits. </title> <booktitle> In Proc. International Symposium on Circuits and Systems (ISCAS), </booktitle> <volume> volume 3, </volume> <pages> pages 1942-1945, </pages> <year> 1989. </year>
Reference-contexts: When using this technique for asynchronous circuits, special care must be taken that hazards and critical races are not introduced during the test. Hazard and race-free tests can be derived for asynchronous circuits using a 9-valued logic combined with the D-algorithm <ref> [13] </ref>. Figure 8 8 shows an iterative array of size three for the D-element. The C-element is changed into a combinational three-input majority gate, the third input being the present state input.
Reference: [14] <author> Pieter J. Hazewindus. </author> <title> Testing Delay-Insensitive Circuits. </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: For example if the request signal is stuck-at-0, the passive end will wait on req" and the active end will wait on ack" after issuing req". A transition that is supposed to occur but doesn't because of a stuck-at fault is called inhibited <ref> [25, 14] </ref>. A fault that causes an inhibited transition will always eventually cause the circuit to halt, a situation which is easily detected during the test. <p> Another approach is to base the test generation on an analysis of the fault being considered. Stuck-at faults in non-redundant circuits will either cause the circuit to halt or generate a premature firing. We can derive the conditions for these two behaviors <ref> [14] </ref>. Consider the AND-gate in the D-element with l1 and u as inputs (Figure 6). The specification of the AND-gate can be written as 6 :l1 ^ u ! ro" (2) Consider the fault l1-stuck-at-0. This fault can inhibit ro#, and cause a premature firing of ro". <p> A control point is used to set the value of an internal node from a primary input. A test point can also be both an observation and a control point, see Some heuristics are given in <ref> [14] </ref>. C l1i C r2i l2o u1 u2 Two D-elements in series. An example of the use of test points is shown in Figure 11. A premature firing that isn't testable exists when two D-elements are connected in series. <p> This shift register can be implemented synchronously or asynchronously. A testable queue containing the values of the test points can be built from the FIFO element shown in Figure 5 <ref> [14] </ref>. This scheme requires only a few extra I/O pins independent of the number of test points. Generalizing this idea leads to a popular method of simplifying test generation by introducing a scan-path. <p> The feasibility of the scan approach for asynchronous circuits has been demonstrated in [33] with a 144-bit scan-path in a systolic array. Asynchronous dual-rail combinational logic, implemented as PLAs, can be made fully testable by introducing a dual-rail scan path [12]. However, <ref> [14] </ref> shows that dual-rail combinational logic can be tested using standard test generation techniques, e.g., the D-algorithm. An alternative approach to design for testability, which also addresses the problem of efficiently testing a circuit with low controllability, is described in [34].
Reference: [15] <author> Lee A. Hollaar. </author> <title> Direct implementation of asynchronous control units. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(12):1133-1141, </volume> <month> December </month> <year> 1982. </year>
Reference-contexts: Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists [37, 29]. However, designing asynchronous circuits using the classical state machines approach [43, 18] and related approaches <ref> [15, 32] </ref> has turned out to be problematic for larger systems. The state machines have timing constraints that must be met to ensure correct operation (such as fundamental mode assumptions) and these constraints are hard to satisfy when composing multiple machines.
Reference: [16] <author> Mehdi Katoozi and Mani Soma. </author> <title> A testable CMOS synchronous counter. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 5(23) </volume> <pages> 1241-1248, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: A comparable synchronous implementation of the counter has a 15% area increase to implement the scan-path and the test time is quadratic <ref> [16] </ref>. This example illustrates that even though generating the test sequences for a self-checking circuit is simple, it may take a long time to perform the test because the controllability is too low. A scan approach for cell-based designs that may also apply to asynchronous circuits is proposed in [36].
Reference: [17] <author> Kurt Keutzer, Luciano Lavagno, and Alberto Sangiovanni-Vincentelli. </author> <title> Synthesis for testability techniques for asynchronous circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD), </booktitle> <pages> pages 326-329. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: In order to test this path, the outputs of the two AND-gates not on the path must be kept low and without hazards, but this is not possible because one of these will be (a least momentarily) enabled when switching b. In <ref> [17] </ref>, a technique to make any Boolean (possibly redundant) function delay fault testable is presented. Let x be an input variable associated with a path that cannot be delay fault tested in the function F . <p> This method is then applied recursively on the logic blocks G, H, and R. Clearly, this transformation increases the circuit area, decreases the operation speed, and increases the test time, but it turns out that most functions are robust path delay fault testable without any modifications (see <ref> [17, Table 1] </ref>). 17 Consider the example from Figure 16 where the path associated with b is not robust path delay fault testable. F can be rewritten as F = bc + b (a + c).
Reference: [18] <author> Z. Kohavi. </author> <title> Switching and Finite Automata Theory. </title> <booktitle> Computer Science Series. </booktitle> <publisher> Tata McGraw--Hill Publishing, </publisher> <year> 1978. </year>
Reference-contexts: The lack of global synchronization in asynchronous circuits means that synchronization must be achieved by other means. Two general approaches have been taken. One approach, used in the design of classical asynchronous state machines <ref> [18, 43] </ref>, is to make timing assumptions about the delays of the gates and wires. In order to avoid critical races and hazards it is often necessary to add extra (functionally redundant) circuitry and appropriate delays. This makes it very difficult to fully test this class of circuits. <p> Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists [37, 29]. However, designing asynchronous circuits using the classical state machines approach <ref> [43, 18] </ref> and related approaches [15, 32] has turned out to be problematic for larger systems. The state machines have timing constraints that must be met to ensure correct operation (such as fundamental mode assumptions) and these constraints are hard to satisfy when composing multiple machines. <p> This sequence is used to verify that the state machine has the correct number of stable states for a given input and can perform the transitions specified by the flow table. This process is called state machine identification <ref> [18] </ref>. Some care must be taken that a race-free state assignment is used. Different trade-offs between the length of the distinguishing sequences and the increase in number of states of the machine is exploited in [38].
Reference: [19] <author> Luciano Lavagno, Kurt Keutzer, and Alberto L. Sangiovanni-Vincentelli. </author> <title> Synthesis of verifi-ably hazard-free asynchronous control circuits. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Advanced Research in VLSI, Proceedings of the 1991 University of California/Santa Cruz Conference, </booktitle> <pages> pages 87-102. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: In fact, the only timing assumption introduced is that some forks are isochronic. However, by designing circuits under absolute delay assumptions (for example that the delay of an inverter is between .5 and 2 ns), presumably the circuits can be made smaller and faster <ref> [31, 19] </ref>. In terms of testing the circuits, the consequence is that it must now be determined whether a fabricated circuit has the assumed delay properties. In order to do so a fault model that models delays must be used, therefore the stuck-at fault model is not appropriate.
Reference: [20] <author> Luciano Lavagno, Michael Kishinevsky, and Antonio Lioy. </author> <title> Testing redundant asynchronous circuits. </title> <type> Technical Report ID-TR:1993-124, </type> <institution> Department of Computer Science, Technical University of Denmark, </institution> <year> 1993. </year>
Reference-contexts: An alternative approach to make all paths delay testable is called variable phase splitting <ref> [20] </ref>. The idea is to make both phases of the variables controllable. If both a variable, x, and its negated, x, are used in a block of combinational logic, the variable is split into two independent variables, x 0 and x 00 .
Reference: [21] <author> Chin J. Lin and Sudhakar M. Reddy. </author> <title> On delay fault testing in logic circuits. </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 6(5), </volume> <month> September </month> <year> 1987. </year>
Reference-contexts: A robust test is a test for a path delay fault which is independent of delays in gates not on 16 the path under test. Test vector generation for robust path delay tests is described in <ref> [21] </ref>. A circuit can be made path delay fault testable by changing all state holding elements to scan elements.
Reference: [22] <author> Alain J. Martin. </author> <title> From communicating processes to delay-insensitive circuits. </title> <type> Technical report, </type> <institution> Department of Computer Science, California Institute of Technology, </institution> <year> 1989. </year> <month> Caltech-CS-TR-89-1. </month>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3. <p> The rest of this section discusses the classes of asynchronous circuits and fault models under which a faulty circuit always halts. Delay-insensitive asynchronous circuits work correctly independently of the delays of both 2 This is a handshake expansion <ref> [22] </ref>. [e] indicates waiting on the Boolean expression e to become true, and s" and s# indicate driving the signal s high and low, respectively. 3 A subtle point: if the circuit contains an arbiter, the arbiter may take an unbounded amount of time to leave a meta-stable state. 4 the <p> The queue is tested by propagating a true-value, an empty-value, and a false-value through the queue. If they all get through, the queue is fault-free under the input stuck-at fault model. The class of quasi-delay-insensitive circuits <ref> [22] </ref> is "in between" delay-insensitive and speed-independent circuits; only some of the forks are assumed to be isochronic. This is a interesting class because it is possible to construct basic elements that have delay-insensitive interfaces, and only use isochronic forks within the elements.
Reference: [23] <author> Alain J. Martin. </author> <title> The limitations to delay-insensitivity in asynchronous circuits. </title> <editor> In William J. Dally, editor, </editor> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 263-278. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: By assuming wire delays to be zero, a transition on the input to a fork needs only be acknowledged by one of the recipients, not all of them. The assumption is equivalent to assuming all forks are isochronic <ref> [23] </ref>. The isochronic fork assumption states that a transition on the input to a fork arrives at the ends of the fork at the same time. The implementation must satisfy this constraint.
Reference: [24] <author> Alain J. Martin et al. </author> <title> The design of an asynchronous microprocessor. </title> <editor> In Charles L. Seitz, editor, </editor> <booktitle> Decennial Caltech Conference on VLSI, </booktitle> <pages> pages 351-373. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: Therefore, the focus of research in the area has been primarily directed to synthesis and verification techniques, while little attention has been paid to techniques to efficiently verify whether a fabricated asynchronous circuit has any physical faults. However, as asynchronous circuits become larger <ref> [24, 45] </ref> and start to be used in commercial products [40], testing concerns become critical. This paper reviews recently developed approaches for testing digital asynchronous circuits and systems for fabrication defects. Several aspects of asynchronous circuits make them harder to test than synchronous circuits.
Reference: [25] <author> Alain J. Martin and Pieter J. Hazewindus. </author> <title> Testing delay-insensitive circuits. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the 1991 UC Santa Cruz Conference, </booktitle> <pages> pages 118-132. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: For example if the request signal is stuck-at-0, the passive end will wait on req" and the active end will wait on ack" after issuing req". A transition that is supposed to occur but doesn't because of a stuck-at fault is called inhibited <ref> [25, 14] </ref>. A fault that causes an inhibited transition will always eventually cause the circuit to halt, a situation which is easily detected during the test. <p> Consequently, every transition in the circuit must be acknowledged by the receiver of the transition. This property is called the acknowledgment property in <ref> [25] </ref>. Specifically, if a wire fans out to multiple gates (a fork ), each gate at the destinations of the fork must acknowledge the receipt of a signal transition before a new transition can occur on the input to the fork. <p> For example, quasi-delay-insensitive and speed-independent circuits are not generally self-checking under the input stuck-at fault model. A circuit that is not self 6 checking will either contain redundant logic, in which case it may not be possible to test for all faults, or it may have premature firings <ref> [25] </ref> for some faults. A premature firing is a signal that changes too early according to the specification. To illustrate a premature firing in the presence of a stuck-at fault, consider the circuit in Figure 6 (from [25]). The circuit (called a D-element) sequences two four-phase handshakes. <p> be possible to test for all faults, or it may have premature firings <ref> [25] </ref> for some faults. A premature firing is a signal that changes too early according to the specification. To illustrate a premature firing in the presence of a stuck-at fault, consider the circuit in Figure 6 (from [25]). The circuit (called a D-element) sequences two four-phase handshakes. Ahandshake is started on li and lo, and before completing this handshake another full handshake is performed on ri and ro.
Reference: [26] <author> Teresa H.-Y. Meng, Robert W. Brodersen, and David G. Messerschmitt. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 8(11) </volume> <pages> 1185-1205, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3.
Reference: [27] <author> Charles E. Molnar et al. </author> <title> Synthesis of delay-insensitive modules. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 67-86. </pages> <publisher> Computer Science Press, </publisher> <year> 1985. </year>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3.
Reference: [28] <author> S. Mourad. </author> <title> Sequential circuit testing. </title> <booktitle> In Proceedings COMPCON Spring, </booktitle> <pages> pages 449-454. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: If F = 0 for this input vector, the circuit is faulty. Efficient algorithms exists to generate test vectors for combinational circuits, e.g., the D-algorithm [35], PODEM [11] and FAN [10]. Test generation for sequential circuits is a much harder problem, and it does not have a general solution <ref> [28] </ref>. Because the output of a sequential circuit not only depends on the inputs but also on the present state, a test for a given fault must first put the circuit into a known state before applying a test pattern that will exercise the fault.
Reference: [29] <author> Yuzo Mukai and Yoshihiro Tohma. </author> <title> A method for the realization of fail-safe asynchronous sequential circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23(7):736-739, </volume> <month> July </month> <year> 1974. </year>
Reference-contexts: The overhead in terms of area is quite large, often as much as a factor of two. Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists <ref> [37, 29] </ref>. However, designing asynchronous circuits using the classical state machines approach [43, 18] and related approaches [15, 32] has turned out to be problematic for larger systems.
Reference: [30] <author> David E. Muller and W.S. Bartky. </author> <title> A theory of asynchronous circuits. </title> <booktitle> In The Annals of the Computation Laboratory of Harvard University. Volume XXIX: Proceedings of an International Symposium on the Theory of Switching, Part I., </booktitle> <pages> pages 204-243, </pages> <year> 1959. </year> <month> 21 </month>
Reference-contexts: Here we will focus on the alternative, which is to use explicit handshake signals for local synchronization. Because no absolute timing assumptions are made on the handshake, circuits are robust and easily composable, a property that has made this design approach popular <ref> [5, 9, 22, 26, 27, 30] </ref>. While the lack of global synchronization decreases the controllability of the circuit and thus makes an asynchronous circuit harder to test, the local synchronization tends to increase the observability. Consider the popular four-phase handshake protocol, see Figure 3.
Reference: [31] <author> C. Myers and T. H.-Y. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In 1992 IEEE International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: In fact, the only timing assumption introduced is that some forks are isochronic. However, by designing circuits under absolute delay assumptions (for example that the delay of an inverter is between .5 and 2 ns), presumably the circuits can be made smaller and faster <ref> [31, 19] </ref>. In terms of testing the circuits, the consequence is that it must now be determined whether a fabricated circuit has the assumed delay properties. In order to do so a fault model that models delays must be used, therefore the stuck-at fault model is not appropriate.
Reference: [32] <author> Steven M. Nowick and David L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD), </booktitle> <pages> pages 318-321. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists [37, 29]. However, designing asynchronous circuits using the classical state machines approach [43, 18] and related approaches <ref> [15, 32] </ref> has turned out to be problematic for larger systems. The state machines have timing constraints that must be met to ensure correct operation (such as fundamental mode assumptions) and these constraints are hard to satisfy when composing multiple machines.
Reference: [33] <author> Deepak Rana, Steven P. Levitan, David A. Carlson, and Charles E. Hutchinson. </author> <title> A testable asynchronous systolic array implementation of an IIR filter. </title> <booktitle> In Proceedings of the IEEE 1986 Custom Integrated Circuits Conference, </booktitle> <pages> pages 90-93. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1986. </year>
Reference-contexts: This approach seems appropriate if the cells are reasonable large. This is often the case for syntax-directed synthesis methods where each cell corresponds to a language construct in a high-level specification language (e.g., [5]). The feasibility of the scan approach for asynchronous circuits has been demonstrated in <ref> [33] </ref> with a 144-bit scan-path in a systolic array. Asynchronous dual-rail combinational logic, implemented as PLAs, can be made fully testable by introducing a dual-rail scan path [12]. However, [14] shows that dual-rail combinational logic can be tested using standard test generation techniques, e.g., the D-algorithm.
Reference: [34] <author> Marly Roncken and Ronald Saeijs. </author> <title> Linear test times for delay-insensitive circuits: a compilation strategy. </title> <editor> In S. Furber and M. Edwards, editors, </editor> <booktitle> Proceedings of IFIP Working Conference on Asynchronous Design Methodologies, </booktitle> <pages> pages 13-27, </pages> <address> Manchester, UK, 31 March - 2 April, 1993. </address> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: We can introduce a fault model that models faults on forks differently depending on whether a fork is isochronic, called the isochronic transition fault model <ref> [34] </ref>. The fault model is a combination of the input and output stuck-at fault models. It considers input stuck-at faults for non-isochronic forks and output stuck-at faults for isochronic forks. Under this fault model, every quasi-delay-insensitive circuit is self-checking. <p> However, [14] shows that dual-rail combinational logic can be tested using standard test generation techniques, e.g., the D-algorithm. An alternative approach to design for testability, which also addresses the problem of efficiently testing a circuit with low controllability, is described in <ref> [34] </ref>. Quasi-delay-insensitive circuits are synthesized from a CSP-like specification by translating the specification in a syntax-directed manner. Under the isochronic transition fault model, the synthesized circuits are self-checking by construction. Instead of adding a scan-path to the circuit to make it efficiently testable, a single test signal is added.
Reference: [35] <author> J.P. Roth, W.G. Bouricious, and P.R. Schneider. </author> <title> Programmed algorithms to compute tests to detect and distinguish between failures in logic circuits. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-16(5):567-579, </volume> <year> 1967. </year>
Reference-contexts: That is achieved by assigning 0 to c. Thus, the final test vector is (1; 1; 0). If F = 0 for this input vector, the circuit is faulty. Efficient algorithms exists to generate test vectors for combinational circuits, e.g., the D-algorithm <ref> [35] </ref>, PODEM [11] and FAN [10]. Test generation for sequential circuits is a much harder problem, and it does not have a general solution [28].
Reference: [36] <author> K. Sakashita, T. Hashizume, and T. Ohya. </author> <title> Cell-based test design method. </title> <booktitle> In Proc. International Test Conference, </booktitle> <pages> pages 909-916. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: This example illustrates that even though generating the test sequences for a self-checking circuit is simple, it may take a long time to perform the test because the controllability is too low. A scan approach for cell-based designs that may also apply to asynchronous circuits is proposed in <ref> [36] </ref>. Each cell is extended with test circuitry that implements a scan-path through the cell. To reduce the test time, a test bus is introduced, which allows for multiple separate scan paths. The area increase is reported to be only approximately 6%.
Reference: [37] <author> D. H. Sawin and G. K. Maki. </author> <title> Asynchronous sequential machines designed for fault detection. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(3):239-249, </volume> <month> March </month> <year> 1974. </year>
Reference-contexts: The overhead in terms of area is quite large, often as much as a factor of two. Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists <ref> [37, 29] </ref>. However, designing asynchronous circuits using the classical state machines approach [43, 18] and related approaches [15, 32] has turned out to be problematic for larger systems.
Reference: [38] <author> J. Saxena and D. K. Pradhan. </author> <title> Design for testability of asynchronous sequential circuits. </title> <booktitle> In Proceedings 1993 IEEE International Conference on Computer Design: VLSI in Computers & Processors (ICCD '93), </booktitle> <pages> pages 518-522. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: This process is called state machine identification [18]. Some care must be taken that a race-free state assignment is used. Different trade-offs between the length of the distinguishing sequences and the increase in number of states of the machine is exploited in <ref> [38] </ref>. The area overhead is minimal, but the state machine identification is a functional oriented test that takes time proportional to the number of states in the machine. 15 This limits the approach to small state machines. Also, the inputs must be controllable and the test-output must be observable.
Reference: [39] <author> C.-J. Seger. </author> <title> The complexity of race detection in VLSI circuits. </title> <editor> In Charles L. Seitz, editor, </editor> <booktitle> Decennial Caltech Conference on VLSI, </booktitle> <pages> pages 335-350. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: If both gates and wires can take arbitrary (but bounded) delays, i.e., the delay-insensitive model, the analysis can be done by ternary simulation using a third logic value, X, denoting a unknown or changing signal [6]. For other delay models, this analysis becomes computationally much harder <ref> [39] </ref>. Assuming that a few test vectors can generally test for most faults, we can use the fault simulator to efficiently generate test vectors with a high fault coverage. The approach is illustrated in Figure 9.
Reference: [40] <author> Charles L. Seitz and Wen-King Su. </author> <title> A family of routing and communication chips based on the Mosaic. </title> <booktitle> In Proceedings of the 1993 Symposium on Research on Integrated Systems, </booktitle> <pages> pages 320-337. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: However, as asynchronous circuits become larger [24, 45] and start to be used in commercial products <ref> [40] </ref>, testing concerns become critical. This paper reviews recently developed approaches for testing digital asynchronous circuits and systems for fabrication defects. Several aspects of asynchronous circuits make them harder to test than synchronous circuits. Asynchronous circuits by definition have no global synchronization signals.
Reference: [41] <author> Jorgen Staunstrup and Mark R. Greenstreet. </author> <title> Synchronized Transitions. In Jorgen Staunstrup, editor, Formal Methods for VLSI Design. </title> <address> North-Holland/Elsevier, </address> <year> 1990. </year>
Reference-contexts: However, some speed-independent circuits turn out to be self-checking under the more general input stuck-at fault model. The FIFO element in Figure 5 <ref> [41] </ref> is an example of a speed-independent circuit that is self-checking under the input stuck-at fault model. Data values in a FIFO queue built from these elements are coded using the dual-rail code that consists of three values: true (10), false (01), and empty (00).
Reference: [42] <author> A. K. Susskind. </author> <title> A technique for making asynchronous sequential circuits readily testable. </title> <booktitle> In Proc. International Test Conference, </booktitle> <pages> pages 842-846, </pages> <year> 1984. </year>
Reference-contexts: The cost is a considerable increase in area caused by the extra logic added to the basic circuit elements. However, one can trade off circuit area with test time by adding the test mode only to a subset of the sequencing elements. Finally, <ref> [42] </ref> proposes a way to make an asynchronous state machine easily testable. The technique is a combination of the scan-technique with a clever state assignment. The flow table for an asynchronous state machine is extended with at most two extra state bits and a test input signal.
Reference: [43] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1969. </year> <month> 22 </month>
Reference-contexts: The lack of global synchronization in asynchronous circuits means that synchronization must be achieved by other means. Two general approaches have been taken. One approach, used in the design of classical asynchronous state machines <ref> [18, 43] </ref>, is to make timing assumptions about the delays of the gates and wires. In order to avoid critical races and hazards it is often necessary to add extra (functionally redundant) circuitry and appropriate delays. This makes it very difficult to fully test this class of circuits. <p> Similar self-checking approaches have been applied to classical asynchronous state machines by using a state assignment that brings the circuit into a special state when a fault exists [37, 29]. However, designing asynchronous circuits using the classical state machines approach <ref> [43, 18] </ref> and related approaches [15, 32] has turned out to be problematic for larger systems. The state machines have timing constraints that must be met to ensure correct operation (such as fundamental mode assumptions) and these constraints are hard to satisfy when composing multiple machines.
Reference: [44] <author> V. I. Varshavsky, M. A. Kishinevsky, V. B. Marakhovsky, V. A. Peschansky, L. Y. Rosenblum, A. R. Taubin, and B. S. Tzirlin. </author> <title> Self-timed Control of Concurrent Processes. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1990. </year> <note> (Russian edition: </note> <year> 1986). </year>
Reference-contexts: If the circuit does not, then it has halted and is thus faulty. The time bound o can be determined given the fabrication technology and the circuit specification 3 . Circuits that have the property that they halt for all faults are called self-checking <ref> [4, 44] </ref> (or self-diagnostic [3, 8]). Thus, self-checking circuits are fully testable (i.e., 100% fault coverage). A test for a self-checking circuit attempts to toggle all nodes at least once, that is, during a test all nodes are driven both high and low.
Reference: [45] <author> Ted E. Williams, M. Horowitz, R.L. Alverson, and T.S. Yang. </author> <title> A self-timed chip for division. </title> <editor> In Paul Losleben, editor, </editor> <booktitle> Proceedings of the Conference on Advanced Research in VLSI, </booktitle> <pages> pages 75-95. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <month> March </month> <year> 1987. </year> <month> 23 </month>
Reference-contexts: Therefore, the focus of research in the area has been primarily directed to synthesis and verification techniques, while little attention has been paid to techniques to efficiently verify whether a fabricated asynchronous circuit has any physical faults. However, as asynchronous circuits become larger <ref> [24, 45] </ref> and start to be used in commercial products [40], testing concerns become critical. This paper reviews recently developed approaches for testing digital asynchronous circuits and systems for fabrication defects. Several aspects of asynchronous circuits make them harder to test than synchronous circuits.
References-found: 45

