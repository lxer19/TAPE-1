URL: http://www-cs-students.stanford.edu/~csilvers/papers/expkin-cg.ps
Refering-URL: http://www-cs-students.stanford.edu/~csilvers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fjbasch,guibas,csilvers,lizhangg@cs.stanford.edu  
Title: A Practical Evaluation of Kinetic Data Structures  
Author: Julien Basch Leonidas J. Guibas Craig D. Silverstein Li Zhang 
Address: Stanford, CA94305  
Affiliation: Computer Science Department Stanford University  
Abstract-found: 0
Intro-found: 1
Reference: [BDIZ] <author> J. Basch, H. Devarajan, P. Indyk, and L. Zhang. </author> <title> Probabilistic analysis for combinatorial functions of moving points. This volume. </title>
Reference-contexts: Several other kinetic data structures can be imagined for maintaining the convex hull. As mentioned above, it is enough to maintain any triangulation, not just the De-launay one. These alternative data structures can be evaluated both in the theoretical framework of [BGH97], in a probabilistic setting <ref> [BDIZ] </ref>, and in the experimental framework of this paper. We will report in a forthcoming paper on experiments with kinetic data structures for maintaining other configuration functions, such as the closest pair and the maximum. A program demonstrating kinetic data structures is available at http://graphics.stanford.edu/~jbasch/demokin.
Reference: [BGH97] <author> J. Basch, L. J. Guibas, and J. Hershberger. </author> <title> Data structures for mobile data. </title> <booktitle> In 8th Symposium on Discrete Algorithms, </booktitle> <pages> pages 747-756, </pages> <year> 1997. </year>
Reference-contexts: Motion is the most ubiquitous kind of continuous transformation but others, such as shape deformation, are also possible. In a recent paper, Basch, Guibas, and Hershberger <ref> [BGH97] </ref> proposed the framework of kinetic data structures (KDSs) as a way to maintain, in a completely on-line fashion, desirable information about the state of a geometric system in continuous motion or change. <p> The KDS framework allows each object to change its motion at will according to interactions with other moving objects, the environment, etc. We implemented the KDSs described in <ref> [BGH97] </ref>, as well as some alternative methods serving the same purpose, as a way to validate the kinetic data structures framework in practice. <p> In this note, we report some preliminary results on the maintenance of the convex hull, describe the experimental setup, compare three alternative methods, discuss the value of the measures of quality for KDSs proposed by <ref> [BGH97] </ref>, and highlight some important numerical issues. 2 Kinetic Data Structures Given a set of continuously moving points in the plane, we wish to maintain some configuration function of interest, dependent on the positions of the points. <p> Precise ways to make these criteria quantitative are discussed in <ref> [BGH97] </ref>. <p> Note that in this definition of efficiency, as originally proposed in <ref> [BGH97] </ref>, we are comparing two worst-case scenarios, even though these may arise for different configurations of moving points. <p> When a point changes motion, the failure times of all certificates dependent on that point must be updated. The locality condition ensures that this operation can be performed within reasonable time bounds. 3 Three ways to maintain a convex hull Along with the method proposed in <ref> [BGH97] </ref>, we implemented two other methods for comparison: the Delaunay triangulation and a less sophisticated method, dubbed "brute force." All these methods share the traits that they are event driven and exact. bgh97-ch : The principle of the kinetic data structure proposed in [BGH97] for the maintenance of the convex hull <p> hull Along with the method proposed in <ref> [BGH97] </ref>, we implemented two other methods for comparison: the Delaunay triangulation and a less sophisticated method, dubbed "brute force." All these methods share the traits that they are event driven and exact. bgh97-ch : The principle of the kinetic data structure proposed in [BGH97] for the maintenance of the convex hull is the following: the set of points is divided arbitrarily into a red half and a blue half, and the convex hull of each half is computed and maintained recursively. <p> If the motion is algebraic of degree k, it is possible to compute the time at which two edges become parallel, and the time at which a triangle becomes degenerate, by solving in each case an equation of degree 2k. In <ref> [BGH97] </ref>, it is shown that, with some small adaptation, this kinetic data structure is both local and efficient. delaunay : An alternate way to maintain the convex hull of moving points is to maintain their Delaunay triangulation, whose edges form a superset of the convex hull. <p> The code was written in C++ and compiled with the SGI CC compiler with the -O2 -mips2 optimization options. 6 Results This study allowed us a close examination of the practical value of the quality measures for KDSs proposed by <ref> [BGH97] </ref> and highlighted some important issues that did not arise in 1 Alternative distributions, such as the uniform unit disk and the Gaussian, gave qualitatively similar results. 2 Table 1: Cost (weighted sum of the number of equations solved) of the three different methods that maintain the convex hull, when the <p> Finally, bgh97-ch handles bouncing gracefully as expected (Figure 2). There is one particular aspect of a KDS that is not taken into account in the framework of <ref> [BGH97] </ref>: it is the cost of solving a single equation. The huge cost of solving degree 4 equations for delaunay is the only reason why this method performs so poorly for n up to a hundred. <p> Several other kinetic data structures can be imagined for maintaining the convex hull. As mentioned above, it is enough to maintain any triangulation, not just the De-launay one. These alternative data structures can be evaluated both in the theoretical framework of <ref> [BGH97] </ref>, in a probabilistic setting [BDIZ], and in the experimental framework of this paper. We will report in a forthcoming paper on experiments with kinetic data structures for maintaining other configuration functions, such as the closest pair and the maximum. A program demonstrating kinetic data structures is available at http://graphics.stanford.edu/~jbasch/demokin.
Reference: [GMR91] <author> L. Guibas, J. S. B. Mitchell, and T. Roos. </author> <title> Voronoi diagrams of moving points in the plane. </title> <booktitle> In Proc. 17th Internat. Workshop Graph-Theoret. Concepts Comput. Sci., volume 570 of Lecture Notes in Computer Science, </booktitle> <pages> pages 113-125. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 3 </month>
Reference-contexts: This configuration is especially straightforward to kinetize, as its set of edges, together with "InCircle" tests that certify "local Delaunayhood," is a correct certificate structure <ref> [GMR91] </ref>.
References-found: 3

