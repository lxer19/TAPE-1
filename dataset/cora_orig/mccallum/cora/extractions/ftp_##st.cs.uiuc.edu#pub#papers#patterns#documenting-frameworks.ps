URL: ftp://st.cs.uiuc.edu/pub/papers/patterns/documenting-frameworks.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/johnson/cs497/notes98/online-course.html
Root-URL: http://www.cs.uiuc.edu
Title: Documenting Frameworks using Patterns the idea of a pattern language to enable people to design
Author: Ralph E. Johnson 
Note: Christopher Alexander, an architect, developed  To be presented at OOPSLA92.  
Address: 1304 W. Springfield Ave. Urbana IL 61801  
Affiliation: University of Illinois at Urbana-Champaign Department of Computer Science  
Abstract: The documentation for a framework must meet several requirements. These requirements can all be met by structuring the documentation as a set of patterns, sometimes called a pattern language. Patterns can describe the purpose of a framework, can let application programmers use a framework without having to understand in detail how it works, and can teach many of the design details embodied in the framework. This paper shows how to use patterns to document a framework, and includes a set of patterns for HotDraw as an example. Although Alexander uses the term pattern language to describe his document, it is not a formal language like a context-free language, for example. A pattern language is a structured essay, not a mathematical object. Therefore, we will replace that term with the term patterns. A framework is a reusable design of a program or a part of a program expressed as a set of classes [Deutsch][Johnson and Foote]. Like all software, it is a mixture of the concrete and the abstract. Since frameworks are reusable designs, not just code, they are more abstract than most software, which makes documenting them difficult. Frameworks are designed by experts in a particular domain and then used by nonexperts. The principal audience of framework documentation is someone who wants to use the framework to solve typical problems, not someone building a software cathedral. Patterns seem to be well suited for this audience. This paper shows one way to document frameworks with patterns. It is essentially an experiment to see how well patterns work to describe a framework. The result is a set of patterns that are included in the appendix. The main purpose of a set of patterns is to show how to use a framework, not to show how it works, but patterns can also describe a great deal of the theory of its design. 
Abstract-found: 1
Intro-found: 1
Reference: [Alexander et. al.] <author> Christopher Alexander, Sara Ishikawa and Murray Silverstein, with Max Jacobson, Ingrid Fiksdahl-King and Shlomo Angel. </author> <title> A Pattern Language. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: This paper shows how to use patterns to document a framework, and includes a set of patterns for HotDraw as an example. Christopher Alexander, an architect, developed the idea of a pattern language to enable people to design their own homes and communities <ref> [Alexander et. al.] </ref>. A pattern language is a set of patterns, each of which describes how to solve a particular kind of problem.
Reference: [Apple] <institution> MacApp Programmers Guide. Apple Computer, </institution> <year> 1986. </year>
Reference-contexts: Thus, we need to explain how to use a framework without explaining how it works. This is not a new idea; the documentation for MacApp has long contained a cookbook <ref> [Apple] </ref> and the first documentation for Model-View-Controller (MVC) was called a Cookbook for Model-View-Controller [Krasner and Pope]. Patterns are more like the MacApp cookbook than the MVC cookbook. The MCV cookbook is a collection of examples, but is still a tutorial designed to be read as a unit. <p> The Role of Examples Examples play a key role in the documentation of frameworks. The documentation for MVC [Krasner and Pope], MacApp <ref> [Apple] </ref>, and Uni-draw [Vlissides] all include many large examples. Examples make frameworks more concrete, make it easier to understand the flow of control, and help the reader to determine whether he or she understands the rest of the documentation. Examples are also important in documentation based on patterns.
Reference: [Carroll] <author> John M. Carroll. </author> <title> The Nurnberg Funnel: Designing Minimalist Instruction for Practical Computer Skill. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference: [Deutsch] <author> L. Peter Deutsch, </author> <booktitle> Design Reuse and Frameworks in the Smalltalk-80 Programming System, </booktitle> <pages> pages 55-71, </pages> <booktitle> Software Reusability, </booktitle> <volume> Vol II, </volume> <editor> ed. Ted J. Biggerstaff and Alan J. Perlis, </editor> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference: [Jacobson] <author> Ivar Jacobson, </author> <title> Object Oriented Development in an Industrial Environment, </title> <booktitle> Proceedings of OOPSLA 87, </booktitle> <pages> pages 183-191, </pages> <month> October, </month> <year> 1987. </year>
Reference-contexts: Studying working examples is a time-honored way of learning a framework, and patterns are a way of reinforcing, encouraging, and systematizing this method, not a replacement for it. It is interesting to note that examples also play a key role in design (c.f. use cases <ref> [Jacobson] </ref> or walk-throughs [Wirfs-Brock et. al.]). This is just another example of the general rule that concrete examples are easier to understand than abstractions. 4. Patterns for HotDraw Most of this paper is an appendix that contains an example of patterns for a framework.
Reference: [Johnson and Foote] <author> Ralph E. Johnson and Brian Foote, </author> <title> Designing Reusable Classes Journal of ObjectOriented Programming, </title> <booktitle> 1(2) </booktitle> <pages> 22-25, </pages> <year> 1988. </year>
Reference: [Krasner and Pope] <author> Glenn E. Krasner and Stephen T. Pope, </author> <title> A Cookbook for Using the Model-View Controller User Interface Paradigm in Smalltalk-80, </title> <journal> Journal of ObjectOriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <year> 1988. </year>
Reference-contexts: Thus, we need to explain how to use a framework without explaining how it works. This is not a new idea; the documentation for MacApp has long contained a cookbook [Apple] and the first documentation for Model-View-Controller (MVC) was called a Cookbook for Model-View-Controller <ref> [Krasner and Pope] </ref>. Patterns are more like the MacApp cookbook than the MVC cookbook. The MCV cookbook is a collection of examples, but is still a tutorial designed to be read as a unit. <p> Thus, a cookbook is insufficient to describe every use of the framework. This is probably why the MVC cookbook also includes an informal description of the design of the framework, as well as instructions on how to use it <ref> [ Krasner and Pope] </ref>. On the other hand, someone's first use of a framework usually fits the stereotype of the framework's designer, and using a framework helps provide the intuition needed to read a more formal specification. <p> The Role of Examples Examples play a key role in the documentation of frameworks. The documentation for MVC <ref> [Krasner and Pope] </ref>, MacApp [Apple], and Uni-draw [Vlissides] all include many large examples. Examples make frameworks more concrete, make it easier to understand the flow of control, and help the reader to determine whether he or she understands the rest of the documentation.
Reference: [Helm et. al.] <author> Richard Helm and Ian M. Holland and Dipayan Gangopadhyay, </author> <title> Contracts: Specifying Behavioral Compositions in Object-Oriented Systems, </title> <booktitle> Proceedings of OOPSLA '90, </booktitle> <pages> pages 169-180, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: On the other hand, someone's first use of a framework usually fits the stereotype of the framework's designer, and using a framework helps provide the intuition needed to read a more formal specification. In contrast to formal specifications like contracts <ref> [Helm et. al.] </ref>, patterns are an informal technique aimed primarily at describing how to use a framework, not describing its algorithms, patterns of collaboration, or shared invariants.
Reference: [ParcPlace] <institution> User's Guide to Objectworks" Smalltalk Release 4. ParcPlace Systems, </institution> <year> 1990. </year>
Reference: [Rosson et. al.] <author> Mary Beth Rosson, John M. Carroll, and Rachel K.E. Bellamy, </author> <title> Smalltalk Scaffolding: A Case Study of Minimalist Instruction, </title> <booktitle> In Proceedings of CHI90, </booktitle> <pages> pages 423-429, </pages> <month> May </month> <year> 1990. </year>
Reference: [Veltman and Riksen] <author> B.W.J. Veltman and A.J.O.M. Riksen, DRAW_Master, </author> <title> a new branch of the GUI_Master class tree, </title> <journal> Journal of Software Research, </journal> <note> special issue, 14-23, Vleermuis Software Research, </note> <month> December, </month> <year> 1991 </year>
Reference-contexts: Unidraw is a similar framework for the C++/X windows environment that is built upon the InterViews user interface framework [Vlissides]. DRAW_Master is a graphics editor framework for the C++/OS 2 and Windows environment that is built upon the GUI_Master application framework <ref> [Veltman and Riksen] </ref>. HotDraw is simpler and less powerful than the others, but this simplicity makes it a better example for a paper like this. The first pattern describes the purpose of HotDraw. The patterns form a directed graph, with the first pattern as the entry point.
Reference: [Vlissides] <author> John M. Vlissides, </author> <title> Gene rali zed Graphical Object Editing, </title> <type> PhD Thesis, </type> <institution> Stanford University, </institution> <year> 1990. </year> <note> Also technical report CSL-TR-90-427. </note>
Reference-contexts: The Role of Examples Examples play a key role in the documentation of frameworks. The documentation for MVC [Krasner and Pope], MacApp [Apple], and Uni-draw <ref> [Vlissides] </ref> all include many large examples. Examples make frameworks more concrete, make it easier to understand the flow of control, and help the reader to determine whether he or she understands the rest of the documentation. Examples are also important in documentation based on patterns. <p> HotDraw is not unique as a graphics editor framework. Unidraw is a similar framework for the C++/X windows environment that is built upon the InterViews user interface framework <ref> [Vlissides] </ref>. DRAW_Master is a graphics editor framework for the C++/OS 2 and Windows environment that is built upon the GUI_Master application framework [Veltman and Riksen]. HotDraw is simpler and less powerful than the others, but this simplicity makes it a better example for a paper like this.
Reference: [Wirfs-Brock et. al.] <author> Rebecca J. Wirfs-Brock, Brian Wilkerson, and Lauren Wiener, </author> <title> Designing ObjectOriented Software, </title> <publisher> Prentice Hall, </publisher> <address> Englewood CLiffs, NJ, </address> <year> 1990. </year>
Reference-contexts: Studying working examples is a time-honored way of learning a framework, and patterns are a way of reinforcing, encouraging, and systematizing this method, not a replacement for it. It is interesting to note that examples also play a key role in design (c.f. use cases [Jacobson] or walk-throughs <ref> [Wirfs-Brock et. al.] </ref>). This is just another example of the general rule that concrete examples are easier to understand than abstractions. 4. Patterns for HotDraw Most of this paper is an appendix that contains an example of patterns for a framework.
References-found: 13

