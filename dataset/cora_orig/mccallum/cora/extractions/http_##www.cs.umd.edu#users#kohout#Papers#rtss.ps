URL: http://www.cs.umd.edu/users/kohout/Papers/rtss.ps
Refering-URL: http://www.cs.umd.edu/users/kohout/
Root-URL: 
Email: fkohout,hendler,musliner,agrawalag@cs.umd.edu  
Title: Supporting Intelligent Real-Time Control: Dynamic Reaction on the Maruti Operating System  
Author: Robert C. Kohout, James A. Hendler, David J. Musliner, and Ashok K. Agrawala 
Address: College Park, MD 20742  
Affiliation: Department of Computer Science The University of Maryland  
Abstract: AI Planning researchers have addressed the need for timely response to unanticipated and/or unpredictable events in dynamic environments by developing "reactive" systems, which are characterized generally by their environmentally-driven response characteristics. The Dynamic Reaction (DR) Model offers a paradigm of reactive program development that addresses many of the requirements of such systems. In this paper, we show how the Maruti hard real-time operating system supports the development of DR systems, and thereby provides the basis for the development of intelligent reactive systems with guaranteed performance characteristics, suitable for mission-critical applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, "Pengi: </author> <title> An Implementation of a Theory of Activity," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 268-272. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference: [2] <author> R. A. Brooks, </author> <title> "A Robust Layered Control System for a Mobile Robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-22, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: As we will discuss below, this simple capability can be used as the basis for a hierarchical system of control, such as those advocated by Brooks <ref> [2] </ref> and Spector [13]. In the current implementation, there are times when the Dodger control program projects a collision with a ray that it will not be able to avoid.
Reference: [3] <author> J. Feldman and R. Sproull, </author> <booktitle> "Decision Theory and Artificial Intelligence II: the Hungry Monkey," Cognitive Science, </booktitle> <volume> vol. 1, no. 2, </volume> <pages> pp. 158-192, </pages> <year> 1977. </year>
Reference-contexts: The controller then decides whether to go back to the base or to pursue the next goal that appears on the screen. In order to make this decision quickly, we have used decision theory <ref> [3] </ref> to allow the controller to make this determination. The system knows where it is, where the next goal is and where the base is. It uses this information, along with the number of shields it has remaining, to rapidly decide what it should do next.
Reference: [4] <author> R. J. Firby, </author> <title> "An Investigation into Reactive Planning in Complex Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 202-206, </pages> <year> 1987. </year>
Reference: [5] <author> L. P. Kaelbling, </author> <title> "Goals as Parallel Program Specifications," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 60-65, </pages> <year> 1988. </year>
Reference-contexts: Most research into reactive system design suffers from at least one of two serious shortcomings. Efforts to pre-compute and rapidly retrieve the results of classical planners (e.g., <ref> [5, 12] </ref>), retain the need for strong, causal models of the problem domain, which are difficult to engineer for complex, real-world environments. This difficulty has led to work (e.g.,[1, 2, 4, 11]) which abandons the deductive correctness of classical AI for a more pragmatic, engineering-oriented approach.
Reference: [6] <author> R. Kohout, J. Hendler, A. Agrawala, and D. Musliner, </author> <title> "Grounding Dynamic Reaction on the Maruti Operating System," </title> <type> Technical Report CS-TR-3231, </type> <institution> University of Maryland Department of Computer Science, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Although the entire Dodger system runs in hard real-time on Maruti, we have investigated using unbounded computations in conjunction with a set of real-time DR monitors elsewhere <ref> [6] </ref>. The controller has been designed to be isolated from the generation of its goals.
Reference: [7] <author> D. Mosse, O. Gudmundsson, and A. K. Agrawala, </author> <title> "The Maruti System and its Implementation," </title> <journal> IEEE TCOS Newsletter, </journal> <volume> vol. 5, no. 3, </volume> , <month> September </month> <year> 1991. </year>
Reference-contexts: We show how the Dynamic Reaction (DR) model [11] of reactive system design can be used to solve fundamental problems in the design of highly dynamic, guaranteed response system, by using features of the Maruti <ref> [7, 10] </ref> hard real-time operating system. This paper is organized into four additional sections. In Section 2, we introduce the DR model of reactive system design. In Section 3, we briefly describe Maruti and show how it directly supports the DR model. <p> Integrating planning and reaction is an important part of this project, but we have thus far focused upon the development of the base-level reactive components, and upon showing that they are capable of maintaining safety conditions in a highly dynamic world. 3 The Maruti operating system <ref> [7, 10] </ref> is designed to support hard real-time applications on a variety of distributed systems while providing fault tolerant operation. <p> This allows us to leave the problems of feasibility analysis, scheduling, and execution to Maruti, and focus upon engineering a 2 There have been two implementations of Maruti. The first proof-of-concept implementation (described in <ref> [7] </ref>) was used to develop the Dodger system discussed below.
Reference: [8] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1561-1574, </pages> <year> 1993. </year>
Reference-contexts: However, these "purely reactive" systems do not consider the problem of explicitly reasoning about (and guaranteeing) the timeliness of their response. The only work in intelligent reaction that does attempt to ensure timeliness (see <ref> [8, 9] </ref>) falls into the classical paradigm: it requires a robust formal model of the domain, which can be difficult, if not impossible, to derive.
Reference: [9] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans," </title> <note> to appear in Artificial Intelligence, </note> <year> 1994. </year>
Reference-contexts: However, these "purely reactive" systems do not consider the problem of explicitly reasoning about (and guaranteeing) the timeliness of their response. The only work in intelligent reaction that does attempt to ensure timeliness (see <ref> [8, 9] </ref>) falls into the classical paradigm: it requires a robust formal model of the domain, which can be difficult, if not impossible, to derive.
Reference: [10] <author> M. Saksena, J. da Silva, and A. Agrawala, </author> <title> "Design and Implementation of Maruti," </title> <type> Technical Report CS-TR-3181, </type> <institution> University of Maryland Department of Computer Science, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: We show how the Dynamic Reaction (DR) model [11] of reactive system design can be used to solve fundamental problems in the design of highly dynamic, guaranteed response system, by using features of the Maruti <ref> [7, 10] </ref> hard real-time operating system. This paper is organized into four additional sections. In Section 2, we introduce the DR model of reactive system design. In Section 3, we briefly describe Maruti and show how it directly supports the DR model. <p> Integrating planning and reaction is an important part of this project, but we have thus far focused upon the development of the base-level reactive components, and upon showing that they are capable of maintaining safety conditions in a highly dynamic world. 3 The Maruti operating system <ref> [7, 10] </ref> is designed to support hard real-time applications on a variety of distributed systems while providing fault tolerant operation. <p> The first proof-of-concept implementation (described in [7]) was used to develop the Dodger system discussed below. Dodger has since been ported to the new implementation of Maruti (described in <ref> [10] </ref>), and while the mapping between the two versions of Maruti is straightforward, we use the old terminology in this paper. 4 reactive control system that could function intelligently in a highly dynamic and complex problem domain. 4 Dodger : An Implementation of a Dynamic Reaction System on Maruti We developed
Reference: [11] <author> J. C. Sanborn and J. A. Hendler, </author> <title> "A Model of Reaction for Planning in Dynamic Environ--ments," </title> <journal> Int'l Journal for Artificial Intelligence in Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 95-102, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: To produce reactive systems that can be proven to meet deadlines, we must have explicit mechanisms for controlling their timing. In this paper, we advocate the use of a real-time operating system to support the engineering of intelligent, mission-critical systems. We show how the Dynamic Reaction (DR) model <ref> [11] </ref> of reactive system design can be used to solve fundamental problems in the design of highly dynamic, guaranteed response system, by using features of the Maruti [7, 10] hard real-time operating system. This paper is organized into four additional sections. <p> We illustrate the straightforward mapping between DR concepts and Maruti constructs, using examples from Dodger. Section 5 summarizes this work, and discusses open issues for future research. 2 2 Dynamic Reaction The concept of Dynamic Reaction was introduced by Sanborn and Hendler in <ref> [11] </ref>. DR was designed to solve problems in dynamic worlds by separating the need to respond appropriately to frequent and potentially threatening change in the world from the rest of the planning process.
Reference: [12] <author> M. J. Schoppers, </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: Most research into reactive system design suffers from at least one of two serious shortcomings. Efforts to pre-compute and rapidly retrieve the results of classical planners (e.g., <ref> [5, 12] </ref>), retain the need for strong, causal models of the problem domain, which are difficult to engineer for complex, real-world environments. This difficulty has led to work (e.g.,[1, 2, 4, 11]) which abandons the deductive correctness of classical AI for a more pragmatic, engineering-oriented approach.
Reference: [13] <author> L. Spector, </author> <title> Supervenience in Dynamic World Planning, </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD, </institution> <month> May </month> <year> 1992. </year> <note> Also available as CS-TR-2899 and UMIACS-TR-92-55. </note>
Reference-contexts: As we will discuss below, this simple capability can be used as the basis for a hierarchical system of control, such as those advocated by Brooks [2] and Spector <ref> [13] </ref>. In the current implementation, there are times when the Dodger control program projects a collision with a ray that it will not be able to avoid. <p> The Command Monitor is responsible for making sense out of all of these "outside influences", and for deciding whether or not a message telling the controller to change its goal is warranted. In more complex systems, we envision a hierarchical system of controllers, much like that described in <ref> [13] </ref>. At each level of the hierarchy, a separate control system would be responsible for achieving a goal that is provided to it by a higher level, while (if needed) using a set of monitors to ensure that safety conditions are maintained.
Reference: [14] <author> J. A. Stankovic, </author> <title> "Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 10-19, </pages> <month> October </month> <year> 1988. </year> <month> 13 </month>
Reference-contexts: Since missing a deadline in mission-critical systems can result in catastrophe, it is imperative that proposed solutions are known to have correct temporal behavior before they are deployed. Correctness cannot be established by testing (see <ref> [14] </ref>). To produce reactive systems that can be proven to meet deadlines, we must have explicit mechanisms for controlling their timing. In this paper, we advocate the use of a real-time operating system to support the engineering of intelligent, mission-critical systems.
References-found: 14

