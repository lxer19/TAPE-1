URL: http://www.cs.washington.edu/homes/rex/papers/wrm-jamia-97.ps
Refering-URL: http://www.cs.washington.edu/homes/rex/papers/
Root-URL: 
Title: Managing Medical Research Data with a Web-Interfacing Repository Manager  
Author: R.M. Jakobovits and J.F. Brinkley 
Address: Seattle, WA  
Affiliation: Departments of Computer Science and Biological Structure University of Washington,  
Abstract: This paper describes the Web-Interfacing Repository Manager (WIRM), a perl toolkit for manag ing and deploying multimedia data, which is built entirely from free, platform-independent components. The WIRM consists of an object-relational API layered over a relational database, with built-in support for file management and CGI programming. The basic underlying data structure for all WIRM data is the repository object, a perl associative array whose values are bound to a row of a table in the relational database. Based on our experience implementing a target application (the Brain Mapper Console), we describe five stages through which a system passes as it evolves from a primitive file hierarchy to a full-fledged repository console. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Shapiro, S. Tanimoto, J. Brinkley, J. Ahrens, R. Jakobovits, and L. Lewis. </author> <title> A visual database system for data and experiment management in model-based computer vision. </title> <booktitle> In Proceedings of the Second CAD-Based Vision Workshop, </booktitle> <pages> pages 64-72, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: INTRODUCTION Medical research tends to be characterized by experiments which produce large collections of multimedia files <ref> [1] </ref>. These data files may consist of a wide range of image types, custom-formatted binary data, and ASCII dumps of alphanumeric tables.
Reference: 2. <author> B. R. Modayur, J. Prothero, C. Rosse, R. Jakobovits, and J.F. Brinkley. </author> <title> Visualization and mapping of neurosurgical functional brain data onto a 3-D MR-based model of the brain surface. </title> <booktitle> In AMIA Fall Symposium, </booktitle> <pages> pages 304-308, </pages> <year> 1996. </year>
Reference-contexts: For example, functional brain mapping data consists of thousands of ordered MRI slices grouped into exams, 3-D rendered brain images, digitized intra-operative photographs, lists of identified site coordinates, and alphanumeric ta bles of patient demographics <ref> [2] </ref>.
Reference: 3. <author> W. F. Ticy. </author> <title> RCS a system for version control. </title> <journal> IEEE Software Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <year> 1985. </year>
Reference-contexts: Each of these requirements can be addressed by a number of popular technologies. Metadata management can be aided by enforcing strict directory maintenance through a revision control system <ref> [3] </ref>. Queries can be supported by relegating tabular data to a relational database. User interfaces can be constructed as CGI or Java applications. Files can be interfaced to applications by perl scripts, the language of choice for managing processes and handling files [4].
Reference: 4. <author> L. Wall and R.L. Schwartz. </author> <title> Programming perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1991. </year>
Reference-contexts: Queries can be supported by relegating tabular data to a relational database. User interfaces can be constructed as CGI or Java applications. Files can be interfaced to applications by perl scripts, the language of choice for managing processes and handling files <ref> [4] </ref>. A number of competing off-the-shelf products attempt to provide more complete solutions by integrating these features within a single tool. The drawbacks of these commercial systems are that they require a significant investment in monetary and personnel resources.
Reference: 5. <author> P.A. Bernstein and U. Dayal. </author> <title> An overview of repository technology. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: In a repository system, meta-data about each file object are maintained in a database, and access to all data is regulated by a layer of control services called a repository manager <ref> [5] </ref>. The WIRM is essentially an object-relational API [6] layered over a relational database (MiniSQL) [7], with built-in support for file management and CGI programming.
Reference: 6. <author> M. Stonebraker. </author> <title> Object-Relational DBMSs: The Next Great Wave. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: In a repository system, meta-data about each file object are maintained in a database, and access to all data is regulated by a layer of control services called a repository manager [5]. The WIRM is essentially an object-relational API <ref> [6] </ref> layered over a relational database (MiniSQL) [7], with built-in support for file management and CGI programming. The basic underlying data structure for all WIRM data is the repository object, which is a perl associative array whose values are bound to a row of a table in the relational database. <p> features: * a more sophisticated transaction model, in which updates are performed automatically when a transaction commits, rather than requiring the programmer to explicitly update the objects. * better support for aggregate types at the Repository Object API level. * making tables orthogonal to type, as sug gested by Stonebraker <ref> [6] </ref>. The WIRM has evolved from being a custom tool for the Brain Mapper project, to being a general tool for supporting a wide range of multimedia applications.
Reference: 7. <author> D. Hugues. </author> <title> Mini SQL: A lightweight database server. </title> <address> http://bond.edu.au/People/bambi/- mSQL/. </address>
Reference-contexts: In a repository system, meta-data about each file object are maintained in a database, and access to all data is regulated by a layer of control services called a repository manager [5]. The WIRM is essentially an object-relational API [6] layered over a relational database (MiniSQL) <ref> [7] </ref>, with built-in support for file management and CGI programming. The basic underlying data structure for all WIRM data is the repository object, which is a perl associative array whose values are bound to a row of a table in the relational database.
Reference: 8. <author> R. Jakobovits, B. Modayur, and J.F. Brink-ley. </author> <title> A web-based repository manager for brain mapping data. </title> <booktitle> In AMIA Fall Symposium, </booktitle> <pages> pages 309-314, </pages> <year> 1996. </year>
Reference-contexts: The basic underlying data structure for all WIRM data is the repository object, which is a perl associative array whose values are bound to a row of a table in the relational database. The WIRM architecture, shown in Figure 1, is described in in greater detail in <ref> [8] </ref>.
Reference: 9. <author> L. Stein. </author> <title> CGI.pm a perl5 CGI library. </title> <address> http://www-genome.wi.mit.edu/ftp/pub /software/www/cgi docs.html. </address>
Reference-contexts: The Web API The Web API is a toolkit for the rapid building of Web-based consoles. It provides a suite of functions for creating and parsing form elements (e.g. popup menus, scrollable lists, etc.), based on the free perl module CGI.pm <ref> [9] </ref>. It also provides many shortcuts for generating HTML syntax (e.g. turning a perl array into a formatted table, handling document layout, displaying a thumbnail image, etc.), and a high-level interface for displaying query results.
Reference: 10. <author> A. Koenig. </author> <title> The Msql perl adaptor. </title> <publisher> ftp://Bond.edu.au/pub/- Minerva/msql/Contrib/MsqlPerl.README. </publisher>
Reference-contexts: The DB API The DB API contains functions for issuing SQL select, join, update, and delete statements, and for managing database connections and logging. The select statements return statement handles, which are 2D arrays of table data. The API uses the free Msql-Perl Adaptor <ref> [10] </ref>.
Reference: 11. <institution> The university of washington internet racquetball ladder. </institution> <note> http://www4.biostr.washington.edu/UWIRL. </note>
Reference-contexts: In addition to the Brain Mapper console, the WIRM was used to implement an image archiving system and a sports tournament database <ref> [11] </ref>. The WIRM is proving to be a valuable tool for rapid Web development, and the ease at which we are able to implement multimedia database applications is remarkable.
Reference: 12. <institution> The digital anatomist home page. </institution> <note> http://- www1.biostr.washington.edu/- DigitalAnatomist.html. </note>
Reference-contexts: Now that the API definitions have stabilized, we plan to package the WIRM as a portable perl module, develop a user manual and tutorial, and release it for beta testing on the Web. The UW Digital Anatomist Home Page <ref> [12] </ref> will have information regarding the release. Acknowledgments This work was funded by Human Brain project grant DC/LM02310, co-funded by the National Institute for Deafness and Other Communication Disorders, and the National Library of Medicine.
References-found: 12

