URL: ftp://ftp.win.tue.nl/pub/techreports/sjouke/iwsdlforum.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/michelr/msc.html
Root-URL: http://www.win.tue.nl
Title: A formal semantics of synchronous interworkings  
Author: S. Mauw a M. van Wijk b and T. Winter c 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  P.O. Box 80000, 5600 JA Eindhoven, The Netherlands  
Affiliation: a Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  b Programming Research Group, University of Amsterdam,  c Philips Research Laboratories,  
Abstract: Interworkings can be considered as a synchronous variant of Message Sequence Charts. In this paper we present the formal semantics of interworkings in an algebraic framework. We concentrate on the main operators for combining interworkings: the interworking sequencing and the interworking merge. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.C.M. </author> <title> Baeten & W.P. Weijland, Process algebra, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18, </booktitle> <publisher> Cambridge University Press, </publisher> <address> ISBN 0 521 40043 0, </address> <year> 1990. </year>
Reference-contexts: Because in practice, this does not seem to be a restriction, we concentrate ourselves in this document on the simpler model of synchronous communication and keep the asynchronous variant for further study. For the formal definition of interworkings and the composition operators we explore techniques from process algebra <ref> [1] </ref>. Process algebra is a commonly accepted technique for the description of communicating systems. Algebraic reasoning is very suitable for formal verification activities which concern in our case the consistency checking of interworkings. <p> Then we define the two interworking operators and the class of interworkings. Finally we give some useful properties of interworkings. 3.1. Basic Process Algebra BP A (Basic Process Algebra) is an algebraic theory for the description of process behaviour <ref> [1, 2] </ref>. We consider two basic notions: atomic actions and processes. An atomic action is an indivisible unit of behaviour, such as the insertion of a coin in a coffee dispenser or the communication of some piece of information between two agents. <p> First we define the set of actions generated by the entities of a given process. ff E (x) = fa 2 AjE (a) " E (x) 6= ;g The definition of the interworking sequencing in table 4 resembles the definition of the communication free merge from <ref> [1] </ref>. We use the auxiliary operators left sequencing ( Lffi iw ) and right sequencing ( Rffi iw ) which have the following intuitive meaning. The left sequencing of two processes means that the left operand is forced to do the first step. <p> S (x + y)k iw z = xk iw z + yk iw z axj S iw y) 8 : ffi otherwise (x + y)j S iw z + yj S xj S iw y + xj S definition of the parallel composition in ACP (the algebra of communicating processes, <ref> [1] </ref>) we need two auxiliary operators: the left interworking merge (k S iw ) and the synchro nisation interworking merge (j S iw ). <p> Proposition 1 (Elimination) (1) Every process in BP A iw is equal to a process which has one of the following forms: ffi; a; a x; x + y (2) BP A iw is a conservative extension of BP A. Proof Term rewrite analysis as in <ref> [1] </ref>. 2 The operators k S iw and k iw are commutative, while the arguments of the ffi iw operator may only be interchanged if they have no entities in common.
Reference: 2. <author> J.A. Bergstra & J.W. Klop, </author> <title> Process algebra for synchronous communication, </title> <journal> Inf. & Control 60, </journal> <pages> pp. 109-137, </pages> <year> 1984. </year>
Reference-contexts: Then we define the two interworking operators and the class of interworkings. Finally we give some useful properties of interworkings. 3.1. Basic Process Algebra BP A (Basic Process Algebra) is an algebraic theory for the description of process behaviour <ref> [1, 2] </ref>. We consider two basic notions: atomic actions and processes. An atomic action is an indivisible unit of behaviour, such as the insertion of a coin in a coffee dispenser or the communication of some piece of information between two agents.
Reference: 3. <author> V. Encontre, </author> <title> e.a., Combining Services, Message Sequence Charts and SDL: Formalism, Method and Tools, SDL '91, Evolving Methods, </title> <publisher> Elsevier Science Publishers, </publisher> <address> ISBN 0 444 88976 0, </address> <year> 1991. </year>
Reference-contexts: In [8] the syntax of message sequence charts is enhanced with the concept of "conditions" providing the means to combine message sequence charts sequentially. The sequential composition operation is only described implicitly in this document. No other composition operations on message sequence charts are defined. In <ref> [3] </ref> a system is described as a hierarchy of services increasing in detail. The lowest level of services in the hierarchy is described in terms of message sequence charts. For the services several composition operations are defined (e.g. sequential-, parallel-composition, choice-operator).
Reference: 4. <author> J. Engelfriet, </author> <title> Determinacy ! (observation equivalence = trace equivalence), </title> <type> TCS 36(1), </type> <institution> pp.21-25, </institution> <year> 1985. </year>
Reference-contexts: It follows directly from the definitions of the interworking operators that every interworking is deterministic. This implies that every interworking is completely determined by its trace set. See <ref> [4] </ref> for a proof that this proposition holds for all deterministic processes.
Reference: 5. <author> I. Jacobson, </author> <title> a.o., Object-Oriented Software Engineering, A Use Case Driven Approach, </title> <editor> Addison Wesley, </editor> <volume> ISBN 0 201 54435 0, </volume> <year> 1992. </year>
Reference-contexts: Interworkings also play an important role in other areas than the telecommunication industry. Several object-oriented methods have absorbed Message Sequence Charts (ObjectOry <ref> [5] </ref>, Rumbaugh [9]). Compared to other trace languages interworkings have the advantage of a clear graphical layout and structuring. However, interworkings are only suitable for the description of relatively small parts of the system behaviour.
Reference: 6. <author> S. Mauw, M. van Wijk & T. Winter, </author> <title> Syntax and semantics of synchronous interwork-ings, </title> <type> Philips IST technical report RWB-508-RE-92436, </type> <year> 1992. </year>
Reference-contexts: In this paper we first give an introduction to interworking diagrams and operators. After that we present the formal semantics and some useful properties. We will not explain the whole interworking language but we restrict ourselves to the main operators. In <ref> [6] </ref> syntax and semantics of the complete language is given. Acknowledgements Thanks are due to many people for giving fruitful comments on the documents. <p> Apart from the clear semantics, the algebraic approach shows some more advantages. The main point is that it enables the formal algebraic verification of useful properties such as consistency and refinement (which is the implementation relation between two interworking specifications as described in <ref> [6] </ref>). The second point is that, when interpreted as a term rewriting system, the equations provide a straightforward prototyping strategy for tool builders. This easy prototyping has helped in evaluating the use of interworkings in the aforementioned Interworking project. In [6] we give a semantics of the full Interworking language, which <p> the implementation relation between two interworking specifications as described in <ref> [6] </ref>). The second point is that, when interpreted as a term rewriting system, the equations provide a straightforward prototyping strategy for tool builders. This easy prototyping has helped in evaluating the use of interworkings in the aforementioned Interworking project. In [6] we give a semantics of the full Interworking language, which also includes macros, timers and refinement. Research is going on to provide other features from the field of MSCs with algebraic semantics. These are asynchronous communication, message overtaking and conditions.
Reference: 7. <author> E. Rudolph, </author> <title> Syntax and Semantics of Basic Sequence Charts, Contribution to the Study Group X, WP X/3, </title> <booktitle> Q8, CCITT meeting, </booktitle> <address> Geneva 1992. </address>
Reference-contexts: INTERWORKINGS 2.1. Interworking diagrams The basic graphical language of interworking diagrams is very simple and resembles the syntax for basic sequence charts <ref> [7] </ref>. Vertical lines are used to represent entities within a system and horizontal arrows are used to represent communications between two entities. No global time axis is assumed for one interworking. Along each vertical entity-line the time runs from top to bottom, however, no proper time scale is assumed.
Reference: 8. <author> E. Rudolph, P. Graubmann, J. Grabowski, </author> <title> Towards an SDL-Design-Methodology Using Sequence Charts Segments, </title> <booktitle> SDL '91, Evolving Methods, </booktitle> <pages> page 237-252, </pages> <publisher> Elsevier Science Publishers, </publisher> <address> ISBN 0 444 88976 0, </address> <year> 1991. </year>
Reference-contexts: Therefore, in order to describe the behaviour of a system more completely, composition operations on interworkings similar to the composition operations in for example LOTOS are required. In the literature several solutions have already been proposed in this area. In <ref> [8] </ref> the syntax of message sequence charts is enhanced with the concept of "conditions" providing the means to combine message sequence charts sequentially. The sequential composition operation is only described implicitly in this document. No other composition operations on message sequence charts are defined.
Reference: 9. <author> J. Rumbaugh, </author> <title> a.o., Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall International, </publisher> <address> ISBN 13 630054 5, </address> <year> 1991. </year>
Reference-contexts: Interworkings also play an important role in other areas than the telecommunication industry. Several object-oriented methods have absorbed Message Sequence Charts (ObjectOry [5], Rumbaugh <ref> [9] </ref>). Compared to other trace languages interworkings have the advantage of a clear graphical layout and structuring. However, interworkings are only suitable for the description of relatively small parts of the system behaviour.
Reference: 10. <author> P.A.J. Tilanus, </author> <title> A formalisation of Message Sequence Charts, </title> <booktitle> SDL '91, Evolving Methods, </booktitle> <pages> page 273-288, </pages> <publisher> Elsevier Science Publishers, </publisher> <address> ISBN 0 444 88976 0, </address> <year> 1991. </year>
Reference-contexts: The lowest level of services in the hierarchy is described in terms of message sequence charts. For the services several composition operations are defined (e.g. sequential-, parallel-composition, choice-operator). Although services can be combined the document does not discuss the related composition of the message sequence charts. In <ref> [10] </ref>, a formalisation of message sequence charts is given in terms of set theory. This for-malisation has the advantage that it only uses basic constructs but has the disadvantage that the parallel composition operator can not be easily expressed in the formalism.
References-found: 10

