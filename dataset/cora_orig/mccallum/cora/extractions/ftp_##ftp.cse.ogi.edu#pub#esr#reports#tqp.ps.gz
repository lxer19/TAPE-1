URL: ftp://ftp.cse.ogi.edu/pub/esr/reports/tqp.ps.gz
Refering-URL: http://www.cse.ogi.edu/~calton/publication.html
Root-URL: http://www.cse.ogi.edu
Title: Autonomous Transaction Execution with Epsilon Serializability  
Author: Calton Pu and Avraham Leff 
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: We study the feasibility of autonomous transaction execution in systems with asynchronous transaction processing based on epsilon serializability (ESR). The abstract correctness criteria defined by ESR are implemented by techniques such as asynchronous divergence control and asynchronous consistency restoration. Concrete application examples in a distributed environment, such as banking, illustrate the advantages of using ESR to support execution autonomy. The ability for asynchronous transaction processing also supports efficient concurrent transaction and query processing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Eventual consistency and ESR both provide asynchronous processing with an adjustable inconsistency tolerance. The difference is that ESR is defined for general asynchronous TP with families of ADC and ACR methods. An example of asynchronous replication methods is Quasi-Copies <ref> [1] </ref>. Different inconsistency constraints such as time delay can be specified by the user and the system will propagate updates to maintain copy consistency accordingly. ESR can be used to model ETs reading quasi-copies, since the inconsistency specifications are similar.
Reference: [2] <author> N. Barghouti and G.E. Kaiser. </author> <title> Concurrency control in advanced database applications. </title> <journal> ACM Computing Surveys, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: Another example is using the Escrow Method [22] to improve system performance. The Escrow Method requires the programmers to accommodate the whole-data-item uncertainty explicitly, which may interact with degree 2 (in)consistency in subtle ways. As we move into more advanced applications <ref> [2] </ref> and heterogeneous databases [8], the integration of different kinds of concurrency control becomes increasingly important. In contrast to degree 2 consistency, ESR |by definition| provides a smooth integration between SR and any degree of inconsistency.
Reference: [3] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> first edition, </address> <year> 1987. </year>
Reference-contexts: Transactions may be updates that contain at least one Write or queries that are read-only. Our terminology follows the standard model of conflict-based serializability <ref> [3] </ref>. Two operations are said to conflict if at least one of them is a Write, so we have read-write (R/W) and write-write (W/W) conflicts. Each pair of conflicting operations establishes a dependency. A history is a sequence of operations such as Reads and Writes. <p> The rules of rearrangement are given by concrete concurrency control methods. A more formal way to specify concurrency control uses a serialization graph (SG), in which each arc represents the precede relation <ref> [3] </ref>. Transaction T 1 precedes T 2 when one of T 1 's operations precedes and conflicts (R/W or W/W) with T 2 's operations. Since the Seri-alizability Theorem [3] says that a history H is SR if and only if its serialization graph SG (H) is acyclic, an acyclic SG <p> A more formal way to specify concurrency control uses a serialization graph (SG), in which each arc represents the precede relation <ref> [3] </ref>. Transaction T 1 precedes T 2 when one of T 1 's operations precedes and conflicts (R/W or W/W) with T 2 's operations. Since the Seri-alizability Theorem [3] says that a history H is SR if and only if its serialization graph SG (H) is acyclic, an acyclic SG implies an SR-history. 3.2 Epsilon-Transaction (ET) An epsilon-transaction, denoted by ET, is a sequence of operations that maintains database consistency when executed atomically. <p> T 1 is called a compensated-for transaction and T 2 a dependent transaction with respect to T 1 . The goal of their recovery paradigm is to undo the compensated-for transaction but leave the effects of the dependent transactions intact. An important definition is that of soundness. (As usual <ref> [3] </ref>, a history is a sequence of database operations.) If X is the history of transactions T , CT , and their set of dependent transactions dep (T ), and Y is some history of only the dependent transactions dep (T ), then X is said to be sound if for
Reference: [4] <author> P.A. Bernstein, M. Hsu, and B. Mann. </author> <title> Implementing recoverable requests using queues. </title> <booktitle> In Proceedings of 1990 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 112-122, </pages> <month> May </month> <year> 1990. </year> <pages> Page 9 </pages>
Reference-contexts: One way to use independent updates is to emulate the bank practice. An update is made locally and immediately, but the update is sent to the central site in a reliable message <ref> [4] </ref>. The update in the central site satisfies the necessary rigor in consistency constraints, for example, serializability. Periodically the central site propagates the official updates known to be consistent to the local sites.
Reference: [5] <author> A.D. Birrell, R. Levin, R.M. Needham, and M.D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: In these cases, an independent source of consistent data is available. From time to time the consistent data is used to overwrite potentially inconsistent data. The first important example of this method is the propagation of replica updates in primary copy methods, such as Grapevine <ref> [5] </ref>. Since all the updates are performed first in the primary copy, the secondary copies may be allowed to diverge (within bounds specified by each distributed ET). A similar situation occurs with bank accounts.
Reference: [6] <author> Y. Breitbart, A. Silberschatz, and G. Thomp-son. </author> <title> Reliable transaction management in a mul-tidatabase system. </title> <booktitle> In Proceedings of 1990 SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy.
Reference: [7] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializabil-ity: a correctness criterion for global concur-rency control in InterBase. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 347-355, </pages> <address> Amsterdam, The Nether-lands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> Since our focus is on the useful properties of ESR for autonomous TP systems, we omit implementation and usage issues such as the distribution and negotiation of *-spec among sites. This simplification brings ESR closer to QSR <ref> [7] </ref>, since both assume local databases to maintain SR. <p> Second, because no bounds are set on the total amount of inconsistency, degree 2 queries will become less accurate as a system grows larger. Finally, ESR offers a much finer granularity control than the degrees of consistency. Quasi-serializability (QSR) has been proposed <ref> [7] </ref> as an abstract correctness criterion for a multidatabase environment. QSR specifies that local databases and global schedulers should maintain SR, but isolates a global scheduler from the local schedulers. QSR is well-defined and easy to implement.
Reference: [8] <editor> A.K. Elmagarmid and C. Pu, editors. </editor> <title> Special Issue on Heterogeneous Databases, </title> <journal> volume 22:3 of ACM Computing Surveys. ACM, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: Another example is using the Escrow Method [22] to improve system performance. The Escrow Method requires the programmers to accommodate the whole-data-item uncertainty explicitly, which may interact with degree 2 (in)consistency in subtle ways. As we move into more advanced applications [2] and heterogeneous databases <ref> [8] </ref>, the integration of different kinds of concurrency control becomes increasingly important. In contrast to degree 2 consistency, ESR |by definition| provides a smooth integration between SR and any degree of inconsistency.
Reference: [9] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transactions processing in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: However, its applicability is limited in the trade-off between consistency and performance its global serializability requirement. Page 8 At the same time, unbounded inconsistency may be found when we consider the global history and the local histories together. Garcia-Molina et al. [10] proposed sagas that use semantic atomicity <ref> [9] </ref> which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al [18] defined relaxed atomic-ity to model non-atomic transactions similar to sagas.
Reference: [10] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: However, if we take into account higher levels of abstraction for the operations (e.g., increment and decrement), compensation actions may be used to roll back sophisticated updates more cheaply. This is especially relevant at the transaction level. Sagas <ref> [10] </ref> and Compensating Transactions [16] are good examples. The most important property in operation semantics to reduce rollback overhead is com-mutativity. 4.2 Semantics-Based Compensation As mentioned above, Sagas [10] and Compensating Transactions [16] rely on commutativity to reduce the rollback overhead in compensations. <p> This is especially relevant at the transaction level. Sagas <ref> [10] </ref> and Compensating Transactions [16] are good examples. The most important property in operation semantics to reduce rollback overhead is com-mutativity. 4.2 Semantics-Based Compensation As mentioned above, Sagas [10] and Compensating Transactions [16] rely on commutativity to reduce the rollback overhead in compensations. The idea is that if we are applying only commutative transactions then we can shu*e them all the way back to the original transaction introducing the inconsistency, thus avoiding the rollback. <p> Note that we have identified the places where potential inconsistency may arise and made explicit the references to these situations. This type of analysis is facilitated by ESR because it is semantics-independent. This does not prevent ESR from incorporating the explicit specification of semantics-dependent inconsistency. In contrast, sagas <ref> [10] </ref> as proposed are implicitly dependent on application semantics for the maintenance of database consistency. Page 6 4.4 Independent Updates Besides compensations, a second method of consistency restoration is independent updates. In these cases, an independent source of consistent data is available. <p> QSR is well-defined and easy to implement. However, its applicability is limited in the trade-off between consistency and performance its global serializability requirement. Page 8 At the same time, unbounded inconsistency may be found when we consider the global history and the local histories together. Garcia-Molina et al. <ref> [10] </ref> proposed sagas that use semantic atomicity [9] which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database.
Reference: [11] <author> J.N. Gray, R.A. Lorie, </author> <title> G.R. Putzolu, and I.L. Traiger. Granularity of locks and degrees of consistency in a shared data base. </title> <booktitle> In Proceedings of the IFIP Working Conference on Modeling of Data Base Management Systems, </booktitle> <pages> pages 1-29, </pages> <year> 1979. </year>
Reference-contexts: In an ESR-based TP system, the Escrow Method and Data-value Partitioning may be introduced as optimization techniques that are transparent to the application programs. 6 Related Work Besides ESR, notions of correctness weaker than SR have been proposed. Gray's different degrees of consistency <ref> [11] </ref>, offers an example of a coarse spectrum of consistency. Degree 3 consistency is equivalent to SR, but degree 2 consistency offers higher concurrency for queries| at the cost of reduced consistency| since updates are allowed to "dirty" data already read by queries.
Reference: [12] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: Once information on disk may differ from the main memory, we need to maintain enough information for resynchro-nization at recovery time. Remember that in classic TP, we have Read/Write operations without sophisticated semantics. The model of inconsistency repair based on Read/Write compensations using REDO and UNDO <ref> [12] </ref> consists of three steps. First is the inconsistency detection where a specific operation is found to have introduced inconsistency. Second is the undoing of the effects of the offending operation. Third is the REDO of the other operations that have been undone as a side-effect during UNDO.
Reference: [13] <author> P.M. Herlihy and J.M. Wing. </author> <title> Linearizability: A correctness condition for concurrent objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 463-492, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: We want efficient algorithms that guarantee some correctness criteria. One important observation is that a global property such as serializability will always require some global validation, since the union of locally serializable asETs do not make a globally serializable distributed ET. In contrast, local properties such as linearizability <ref> [13] </ref> do not need global validation. ESR spans the spectrum between global and local properties. On the one hand, ESR is compatible with SR, so that ESR is a global property when * = 0.
Reference: [14] <author> M. Hsu and A. Silberschatz. </author> <title> Unilateral commit: A new paradigm for reliable distributed transaction processing. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> Another example is the unnecessary synchronization imposed by two-phase commit and its prevention of independent local com fl This work was partially supported by NSF, IBM, DEC, AT&T, and Oki Electric Ind. mit <ref> [21, 14] </ref>. Supporting autonomous operations can potentially improve both performance and availability. Before discussing the issues posed by "autonomy" we note that the definition itself is in a state of flux [21]. Some researchers distinguish between "design autonomy" and "execution autonomy". <p> ESR also allows a larger number of execution histories. The Polarized Protocol, for example, does not allow global state from an incomplete transaction to be seen by other transactions. An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit <ref> [14] </ref> is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit [17] is a protocol that uses Compensating Transactions [16] to undo the effects of partial results to reach a uniform decision.
Reference: [15] <author> D.R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: When * &gt; 0, the need for roll back is lessened by an amount roughly proportional to the *-spec. This is explained in more detail in Section 4.3 using commutativity. For operation-level compensation such as Time Warp <ref> [15] </ref> and classic TP crash recovery, the overhead of undoing the entire history is accepted as inevitable for the Read/Write model. The transaction-level equivalent of undoing the entire history is called cascaded aborts.
Reference: [16] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> A formal approach to recovery by compensating transactions. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> For example, two-phase commit becomes less desirable as the diameter of the network increases, since both the response time and the probability of failure become higher <ref> [16] </ref>. Another example is the unnecessary synchronization imposed by two-phase commit and its prevention of independent local com fl This work was partially supported by NSF, IBM, DEC, AT&T, and Oki Electric Ind. mit [21, 14]. Supporting autonomous operations can potentially improve both performance and availability. <p> However, if we take into account higher levels of abstraction for the operations (e.g., increment and decrement), compensation actions may be used to roll back sophisticated updates more cheaply. This is especially relevant at the transaction level. Sagas [10] and Compensating Transactions <ref> [16] </ref> are good examples. The most important property in operation semantics to reduce rollback overhead is com-mutativity. 4.2 Semantics-Based Compensation As mentioned above, Sagas [10] and Compensating Transactions [16] rely on commutativity to reduce the rollback overhead in compensations. <p> This is especially relevant at the transaction level. Sagas [10] and Compensating Transactions <ref> [16] </ref> are good examples. The most important property in operation semantics to reduce rollback overhead is com-mutativity. 4.2 Semantics-Based Compensation As mentioned above, Sagas [10] and Compensating Transactions [16] rely on commutativity to reduce the rollback overhead in compensations. The idea is that if we are applying only commutative transactions then we can shu*e them all the way back to the original transaction introducing the inconsistency, thus avoiding the rollback. <p> They depend on general "application semantics", which include commutativity, as the underlying assumptions that allow compensations without rolling back the entire history. To simplify the presentation we use the notation of Korth et al. <ref> [16] </ref> in the description of Compensating Transactions. When the updates of transaction T 1 are read by some other transaction T 2 , T 1 is said to have been externalized . If we want to undo the effects of T 1 , a Compensating Transaction CT 1 is run. <p> We think that alternative (1) is a viable choice, even though most researchers (including Korth et al <ref> [16] </ref>) define a Compensating Transaction as non-abortable. The main reason they do not consider the possibility of aborting a Compensating Transaction is because the abort would introduce some inconsistency into the database, which is not tractable in the classic TP theory. <p> An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit [14] is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit [17] is a protocol that uses Compensating Transactions <ref> [16] </ref> to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al [25] use the notion of eventual consistency to define current copy serializability (CPSR) for replicated data.
Reference: [17] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> An optimistic commit protocol for distributed transaction management. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit [14] is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit <ref> [17] </ref> is a protocol that uses Compensating Transactions [16] to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al [25] use the notion of eventual consistency to define current copy serializability (CPSR) for replicated data.
Reference: [18] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> A theory of relaxed atomicity. </title> <booktitle> In Proceedings of the 1991 ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> Garcia-Molina et al. [10] proposed sagas that use semantic atomicity [9] which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al <ref> [18] </ref> defined relaxed atomic-ity to model non-atomic transactions similar to sagas. Non-atomic transactions are composed of steps, which may be a forward step or a recovery step. They also describe the Polarized Protocol to implement Relaxed Atomicity.
Reference: [19] <author> B. Lindsay, L.M. Haas, C. Mohan, P.F. Wilms, and R.A. Yost. </author> <title> Computation and communication in R fl : a distributed database manager. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 24-38, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: 1 Introduction A key assumption made by techniques that provide global recovery and concurrency atomicity distributed databases such as R fl <ref> [19] </ref>, is that system components want to cooperate in providing global transaction properties. However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. <p> However, the non-SR interleavings result in a difference of 200 from an SR-history, which is within the specified limits for both U ET 1 and Q ET 2 , so history (1) qualifies as an ESR-history. 3.3 Distributed ETs In a traditional TP system such as R fl <ref> [19] </ref>, a distributed transaction is subdivided into subtransac-tions, each executing at one site. We adopt a similar model. When a distributed ET is submitted, it is divided into sub-ETs, called asynchronous sub-ETs (asET) for emphasis.
Reference: [20] <author> W. Litwin, L. Mark, and N. Roussopoulos. </author> <title> Interoperability of multiple autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 267-293, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Our goal is to maximize database consistency, either through serializable transactions or ETs that limit the amount of inconsistency. This is in contrast to multidatabases <ref> [20] </ref> in which global inconsistency is tolerated. Because our focus in this paper is on the interaction between sites, we assume that each site is capable of handling its own asETs.
Reference: [21] <author> H. G. Molina and Kogan B. </author> <title> Node autonomy in distributed systems. </title> <booktitle> In International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 158-166, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Because of this concern, much on-going effort (e.g., [6, 7, 14, 16, 17, 18, 25, 26]) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. In addition to motivations such as heterogeneity <ref> [21] </ref>, autonomy per se is increasingly important because of the change in the cost/benefit ratio of intersite cooperation in large systems. For example, two-phase commit becomes less desirable as the diameter of the network increases, since both the response time and the probability of failure become higher [16]. <p> Another example is the unnecessary synchronization imposed by two-phase commit and its prevention of independent local com fl This work was partially supported by NSF, IBM, DEC, AT&T, and Oki Electric Ind. mit <ref> [21, 14] </ref>. Supporting autonomous operations can potentially improve both performance and availability. Before discussing the issues posed by "autonomy" we note that the definition itself is in a state of flux [21]. Some researchers distinguish between "design autonomy" and "execution autonomy". <p> Supporting autonomous operations can potentially improve both performance and availability. Before discussing the issues posed by "autonomy" we note that the definition itself is in a state of flux <ref> [21] </ref>. Some researchers distinguish between "design autonomy" and "execution autonomy". Design autonomy involves the question of who controls the design and maintenance of data schema. Although design autonomy poses many difficult problems, we will not pursue it here.
Reference: [22] <author> P. E. O'Neil. </author> <title> The escrow transactional method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 405-430, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: If update values also increase then the fortuitous bound on inconsistency may quickly become meaningless and degree 2 no longer useful. Therefore, for scalability reasons we need a more abstract and precise integration with classic TP. Another example is using the Escrow Method <ref> [22] </ref> to improve system performance. The Escrow Method requires the programmers to accommodate the whole-data-item uncertainty explicitly, which may interact with degree 2 (in)consistency in subtle ways. As we move into more advanced applications [2] and heterogeneous databases [8], the integration of different kinds of concurrency control becomes increasingly important. <p> Furthermore, because ESR guarantees a bound on inconsistency, applications will not produce increasingly inconsistent results when more processing power or nodes are added to the system. 5.4 Network Partitions Another advantage of ESR-based distributed TP is the transparency of the ET interface. For example, the Escrow Method <ref> [22] </ref> increases the TP system throughput by implicitly reserving part of an aggregate field (e.g., a numerical value) for processing. The reason the Escrow Method obtains more concurrency is its ability to release the lock on the data item once the partial value has been put in "escrow". <p> For both the Escrow Method and the Data-value Partitioning, this uncertainty is inevitable. ESR can capture this uncertainty. For example, instead of having the application programmer look at the maximum and minimum possible values (as suggested in <ref> [22] </ref>), an *-spec in a read ET is enforced by the system, so the ET programmer will not have to deal with the data value uncertainty explicitly. The same way the transaction interface hides details of concurrency control and crash recovery, the ET interface hides details of uncertainty.
Reference: [23] <author> C. Pu and A. Leff. </author> <title> Autonomous transaction execution with epsilon-serializability. </title> <type> Technical Report CUCS-024-91, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The design of asynchronous DC methods is an extension of designing divergence control methods [27]. We omit the discussion here due to the lack of space. Interested readers may consult <ref> [23] </ref>. 4 Asynchronous Consistency Restoration (ACR) DC methods preserve database consistency, since the database converges to SR when all the asETs arrive and are processed. However, the situation becomes more complicated with the introduction of G ET , in which both ImpLimit&gt; 0 and ExpLimit&gt; 0.
Reference: [24] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Different inconsistency constraints such as time delay can be specified by the user and the system will propagate updates to maintain copy consistency accordingly. ESR can be used to model ETs reading quasi-copies, since the inconsistency specifications are similar. Beyond ESR's usefulness in asynchronous replication <ref> [24] </ref>, we can ESR in asynchronous TP. Data-value Partitioning [26] has been proposed as a method to for increasing distributed TP system availability and autonomy by explicitly separating parts of the value of a data item into different sites. <p> The work based on ESR is called Generalized Transaction Processing, several aspects of which are currently under development. One application of ESR is an asynchronous approach for replication <ref> [24] </ref>. An important part of ESR implementation is the divergence control methods [27]. We are now evaluating the performance benefits of divergence control methods resulting from added concurrency and decreased deadlock frequency.
Reference: [25] <author> A. Sheth, Yungho Leu, and Ahmed Elmagarmid. </author> <title> Maintaining consistency of interdependent data in multidatabase systems. </title> <type> Technical Report CSD-TR-91-016, </type> <institution> Computer Science Department, Pur-due University, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> Optimistic Commit [17] is a protocol that uses Compensating Transactions [16] to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al <ref> [25] </ref> use the notion of eventual consistency to define current copy serializability (CPSR) for replicated data. Each update is done on a current copy and asynchronously propagated to the other replicas.
Reference: [26] <author> N. Soparkar and A. Silberschatz. </author> <title> Data-value partitioning and virtual messages. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Database Systems, </booktitle> <address> Nashville, Tennessee, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: However, there are many areas (e.g., performance and availability) where participation in a classic distributed transaction will infringe on a local transaction system's capabilities. Because of this concern, much on-going effort (e.g., <ref> [6, 7, 14, 16, 17, 18, 25, 26] </ref>) is devoted to providing global transaction capabilities, while at the same time allowing local systems to maintain individual autonomy. <p> ESR can be used to model ETs reading quasi-copies, since the inconsistency specifications are similar. Beyond ESR's usefulness in asynchronous replication [24], we can ESR in asynchronous TP. Data-value Partitioning <ref> [26] </ref> has been proposed as a method to for increasing distributed TP system availability and autonomy by explicitly separating parts of the value of a data item into different sites. Since the different parts may operate asynchronously even during network partitions, Data-value Partitioning increases autonomy because of its non-blocking character.
Reference: [27] <author> K.L. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <booktitle> In Proceedings of Eighth International Conference on Data Engineering, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal> <pages> Page 10 </pages>
Reference-contexts: Abstractly, an *-spec is divided into two parts: a limit on imported inconsistency and a limit on exported inconsistency. Of course, many kinds of inconsistency can exist. An *-spec can therefore take several forms, as long as it is defined using a monotonic distance metric <ref> [27] </ref>. In the airline example, the number of seats is ImpLimit = 0 ImpLimit &gt; 0 ExpLimit = 0 Transaction Q ET ExpLimit &gt; 0 U ET G ET Table 1: Four Kinds of ETs a linear distance metric (therefore monotonic). <p> In this paper, we use a concrete example for illustration. Our example is the number of seats in an airline reservation system. This distance metric, as well as other examples such as banking, is linear. The ADC methods can be generalized to other inconsistency specifications using techniques described in <ref> [27] </ref>. One important observation is that when ImpLimit = 0 and ExpLimit = 0, the ET is serializable, so ETs include the standard Ts as a boundary case. We continue to use T as a short notation for ETs that are serializable. <p> In the airline example, the bound is a small number of seats. As a result, the divergence control methods described here have a strong global flavor; i.e., they resemble classic concurrency control methods. The design of asynchronous DC methods is an extension of designing divergence control methods <ref> [27] </ref>. We omit the discussion here due to the lack of space. Interested readers may consult [23]. 4 Asynchronous Consistency Restoration (ACR) DC methods preserve database consistency, since the database converges to SR when all the asETs arrive and are processed. <p> Each asET and compensation asET is a single operation and we have an asynchronous DC method derived from two-phase locking. Table 2 shows the lock compatibility matrix for dirty objects. ACR uses the usual two-phase locking compatibility table <ref> [27] </ref> to handle clean objects. The main difference is in squares marked LOK-1 (reading uncommitted data), LOK-2 (overwriting data read by uncommitted query -degree 2), and Commu-1 (if operations commute). <p> The work based on ESR is called Generalized Transaction Processing, several aspects of which are currently under development. One application of ESR is an asynchronous approach for replication [24]. An important part of ESR implementation is the divergence control methods <ref> [27] </ref>. We are now evaluating the performance benefits of divergence control methods resulting from added concurrency and decreased deadlock frequency.
References-found: 27

