URL: http://www.cs.ucla.edu/~stott/ifs/WUSENIX93.Eggert.Parker.IFS.ps
Refering-URL: http://www.cs.ucla.edu/~stott/ifs/
Root-URL: http://www.cs.ucla.edu
Title: File Systems in User Space  
Author: Paul R. Eggert Twin Sun, Inc. D. Stott Parker 
Affiliation: UCLA Computer Science Dept.  
Abstract: Current methods for interfacing file systems to user programs suffer two major drawbacks: they require kernel modifications or root privileges, and they are too complicated to be given to ordinary users. In this paper we show alternative methods are possible. The recent rise of dynamic linking provides a new way for users to develop their own file systems: by interposing a layer of user code between a program and the system call interface, a user can alter or extend a file system's behavior. For greatest power and reliability, such changes to file system behavior must be managed systematically. We present two user-extensible file systems that are loosely modeled on intensional logic. IFS0 is simple, and supports only extended pathname interpretation for files: it permits certain shell-like expressions as pathnames. To this, IFS1 adds directory lookup and an escape mechanism for interpreting pathnames that can be modified by the user at any point. These file systems operate by modifying the semantics of UNIX system calls that take pathname arguments. With IFS1 a user can develop a wide range of useful file systems without writing a line of C code. We have developed a variety of sample file systems with IFS1, including tar image navigation and a software development file system resembling 3DFS. IFS1 can thus be thought of as a simple user-programmable file system toolkit. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Proceedings of the First USENIX File Systems Workshop, </institution> <address> Ann Arbor, MI, </address> <month> May </month> <year> 1992. </year> <title> P. Honeyman (program chair). </title>
Reference-contexts: Related Work in File Systems There has been an enormous amount of interest recently in extending file systems to support new functionality, as indicated by the recent USENIX workshop on file systems <ref> [1] </ref>. New approaches strike a compromise between flexibility, performance, and completeness. For example, operating systems like Mach permit the entire file system to reside outside the kernel, yet few users would be capable of writing a new Mach file system or even making ad hoc file system modifications.
Reference: 2. <author> AT&T, </author> <title> UNIX System V Release 3.2 Streams Programmers Guide, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: For example, operating systems like Mach permit the entire file system to reside outside the kernel, yet few users would be capable of writing a new Mach file system or even making ad hoc file system modifications. UNIX System V Streams <ref> [2] </ref> are much less flexible, providing a service that is user-programmable but not really user-extensible. (An extensible variant [10] has been proposed, however.) Stackable file systems like Ficus [6, 9] are a promising way to implement new file system concepts atop traditional systems.
Reference: 3. <author> Bershad, Brian N. and C. Brian Pinkerton, </author> <title> ``Watchdogs Extending the UNIX File System,'' </title> <journal> Computing Systems, </journal> <volume> vol. 1, no. 2, </volume> <pages> pp. 169-188, </pages> <year> 1988. </year>
Reference-contexts: One approach for file system interface mapping allows users to associate a process with a given file that implements the appropriate mapping. The kernel is modified to route system calls for the file to this process. Bershad and Pinkerton <ref> [3] </ref> describe watchdogs, which are user-defined processes that the user can attach to a file. Watchdogs are notified about each system call affecting the file. They have been used to implement access control, file compaction, mail biffing, directory views, transparent remote file access, etc.
Reference: 4. <author> Eggert, Paul R. and D. Stott Parker, </author> <title> ``An Intensional File System,'' </title> <booktitle> Proc. First USENIX File Systems Workshop, </booktitle> <pages> pp. 145-146, </pages> <address> Ann Arbor, </address> <month> May </month> <year> 1992. </year>
Reference: 5. <author> Gifford, D.K., P. Jouvelot, M.A. Sheldon, and J.W. O'Toole Jr, </author> <title> ``Semantic File Systems,'' </title> <booktitle> Proc. of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 16-25, </pages> <month> October </month> <year> 1991. </year>
Reference: 6. <author> Heidemann, J.S. and G.J. Popek, </author> <title> ``An Extensible, Stackable Interface for File System Development,'' </title> <type> Technical Report CSD-900044, </type> <institution> UCLA Computer Science Department, </institution> <address> Los Angeles CA 90024-1596, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: UNIX System V Streams [2] are much less flexible, providing a service that is user-programmable but not really user-extensible. (An extensible variant [10] has been proposed, however.) Stackable file systems like Ficus <ref> [6, 9] </ref> are a promising way to implement new file system concepts atop traditional systems. They provide a disciplined scheme for incorporating features into a file system by modeling the file system design as a protocol stack, and letting one insert new protocols onto the stack.
Reference: 7. <author> Hendricks, D., </author> <title> ``A Filesystem for Software Development,'' </title> <booktitle> Proc. USENIX Summer Conference, </booktitle> <pages> pp. 333-340, </pages> <address> Anaheim, </address> <month> June </month> <year> 1990. </year>
Reference: 8. <author> Korn, D. and E. Krell, </author> <title> ``The 3-D File System,'' </title> <booktitle> Proc. USENIX Summer Conference, </booktitle> <pages> pp. 147-156, </pages> <address> Baltimore, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Another general approach is to encourage user redefinition of the basic system call interface in libc. Any such redefinitions are automatically adopted by all dynamically linked programs. This approach requires no kernel modifications, and works entirely in user space. COLA <ref> [8] </ref> is a system call interception scheme developed at Bell Labs. Basically, COLA is to system calls at the user level as Ficus is to file system protocols at the kernel level.
Reference: 9. <author> Page, T. and R. Guy, </author> <title> ``The Ficus Scalable File System,'' </title> <journal> IEEE TCOS Newsletter, </journal> <volume> vol. 5, no. 3, </volume> <pages> pp. 19-20, </pages> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments, </booktitle> <month> Fall </month> <year> 1991. </year>
Reference-contexts: UNIX System V Streams [2] are much less flexible, providing a service that is user-programmable but not really user-extensible. (An extensible variant [10] has been proposed, however.) Stackable file systems like Ficus <ref> [6, 9] </ref> are a promising way to implement new file system concepts atop traditional systems. They provide a disciplined scheme for incorporating features into a file system by modeling the file system design as a protocol stack, and letting one insert new protocols onto the stack.
Reference: 10. <author> Rees, Jim, Margaret Olson, and J. Sasidhar, </author> <title> ``A Dynamically Extensible Streams Implementation,'' </title> <booktitle> USENIX Conference Proceedings, </booktitle> <pages> pp. 199-207, </pages> <address> Phoenix, AZ, </address> <month> Summer </month> <year> 1987. </year>
Reference-contexts: UNIX System V Streams [2] are much less flexible, providing a service that is user-programmable but not really user-extensible. (An extensible variant <ref> [10] </ref> has been proposed, however.) Stackable file systems like Ficus [6, 9] are a promising way to implement new file system concepts atop traditional systems.
Reference: 11. <author> Rivest, R., </author> <title> ``The MD4 message digest algorithm,'' </title> <type> RFC 1186, </type> <institution> Network Working Group, </institution> <month> October </month> <year> 1990. </year>
Reference: 12. <author> Satyanarayanan, M., </author> <title> ``The Influence of Scale on Distributed File System Design,'' </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 18, no. 1, </volume> <pages> pp. 1-8, </pages> <month> January </month> <year> 1992. </year>
Reference: 13. <author> Tichy, Walter F., </author> <title> ``RCS a system for version control,'' </title> <journal> SoftwarePractice & Experience, </journal> <volume> vol. 15, no. 7, </volume> <pages> pp. 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference: 14. <author> Welch, Brent B. and John K. Ousterhout, ``Pseudo-Devices: </author> <title> User-Level Extensions to the Sprite File System,'' </title> <booktitle> USENIX Conference Proceedings, </booktitle> <pages> pp. 37-49, </pages> <address> San Francisco, </address> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Watchdogs are notified about each system call affecting the file. They have been used to implement access control, file compaction, mail biffing, directory views, transparent remote file access, etc. Welch and Ousterhout <ref> [14] </ref> propose pseudo-devices, basically processes that can be treated like files, again by interface mapping. Various sticky programming jobs such as interacting with device drivers, X servers, and TCP/IP services can be simplified by treating them as pseudo-devices.

References-found: 14

