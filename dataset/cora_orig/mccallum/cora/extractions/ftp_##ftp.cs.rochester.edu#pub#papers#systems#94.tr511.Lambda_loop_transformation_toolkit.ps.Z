URL: ftp://ftp.cs.rochester.edu/pub/papers/systems/94.tr511.Lambda_loop_transformation_toolkit.ps.Z
Refering-URL: http://www.cs.rochester.edu/trs/systems-trs.html
Root-URL: 
Title: The Lambda Loop Transformation Toolkit (User's Reference Manual) becoming critical to exploiting parallelism and data
Author: Wei Li Keshav Pingali 
Keyword: Loop transformations  Keywords: Parallel programming, parallelizing compilers, loop transformations, linear transformations, nonsingular transformations.  
Note: are  This document describes the Lambda  machines.  0 This work was partly supported by Cornell University, by a grant from the Hewlett-Packard Corporation, and by the University of Rochester.  
Affiliation: Department of Computer Science University of Rochester  Department of Computer Science Cornell University  
Abstract: May 1994 University of Rochester Technical Report 511 Cornell University Technical Report 94-1431 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Ayguade and J. Torres. </author> <title> Partitioning the statement per iteration space using non singular matrices. </title> <booktitle> In Proceedings of The 1993 ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment <ref> [1] </ref>. Other research on compound transformations can be found in recent publications [4, 9, 10, 11]. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines [5].
Reference: [2] <author> U. Banerjee. </author> <title> Unimodular transformations of double loops. </title> <booktitle> In Proceedings of the Work shop on Advances in Languages and Compilers for Parallel Processing, </booktitle> <pages> pages 192-219, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The loop transformation theory, generalizing the unimodular matrix approach <ref> [2, 12] </ref>, provides a framework to represent compound transformations of these primitive transformations. In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1].
Reference: [3] <author> D. Bergmark and D. Presberg. </author> <title> Initial experiments in the integration of Parascope and Lambda. </title> <type> Technical Report CTC93TR136, </type> <institution> Cornell Theory Center, </institution> <year> 1993. </year>
Reference-contexts: This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications [4, 9, 10, 11]. This toolkit has been used in parallelizing compilers for multiprocessor machines <ref> [3, 7] </ref> as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler. There are four modules: the data dependence module, the transformation module, the code restructuring module, and the utility module.
Reference: [4] <author> W. Kelly and W. Pugh. </author> <title> Generating schedules and code within a unified reordering transformation framework. </title> <type> Technical Report CS-TR-2995, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications <ref> [4, 9, 10, 11] </ref>. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler.
Reference: [5] <author> W. Li. </author> <title> Compiler optimizations for cache locality and coherence. </title> <type> Technical Report 504, </type> <institution> Department of Computer Science, University of Rochester, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications [4, 9, 10, 11]. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines <ref> [5] </ref>. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler. There are four modules: the data dependence module, the transformation module, the code restructuring module, and the utility module.
Reference: [6] <author> W. Li and K. Pingali. </author> <title> A singular loop transformation framework based on non-singular matrices. </title> <booktitle> In Proc. 5th Annual Workshop on Languages and Compilers for Parallelism, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Loop transformations are becoming critical to exploiting parallelims and data locality in parallelizing and optimizing compilers. This document describes the Lambda loop transformation toolkit. The toolkit is an implementation of the non-singular matrix transformation theory described in <ref> [6, 8] </ref>.
Reference: [7] <author> W. Li and K. Pingali. </author> <title> Access Normalization: Loop restructuring for NUMA compilers. </title> <journal> ACM Transactions on Computer Systems, </journal> <year> 1993. </year>
Reference-contexts: This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications [4, 9, 10, 11]. This toolkit has been used in parallelizing compilers for multiprocessor machines <ref> [3, 7] </ref> as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler. There are four modules: the data dependence module, the transformation module, the code restructuring module, and the utility module.
Reference: [8] <author> W. Li and K. Pingali. </author> <title> A singular loop transformation framework based on non singular matrices. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallelism, Lecture Notes in Computer Science 757. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 27 </month>
Reference-contexts: 1 Introduction Loop transformations are becoming critical to exploiting parallelims and data locality in parallelizing and optimizing compilers. This document describes the Lambda loop transformation toolkit. The toolkit is an implementation of the non-singular matrix transformation theory described in <ref> [6, 8] </ref>. <p> The main benefit of this loop transformation theory is that it provides an approach to tackling the so-called `phase-ordering problem', i.e. for many problems it is difficult to decide the sequence of the primitive transformations such as loop interchange, loop skewing, loop reversal [13], and loop scaling <ref> [8] </ref> should be performed. The loop transformation theory, generalizing the unimodular matrix approach [2, 12], provides a framework to represent compound transformations of these primitive transformations. In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. <p> Some examples of using these routines are given in Section 7. We summarize in Section 8. 2 A Linear Loop Transformation Theory In this section, we briefly review the linear transformation framework developed in <ref> [8] </ref>. This transformation theory is based on the use of integer lattices as the model of loop nests and the use of non-singular matrices as the model of loop transformations. <p> Fortunately, we have shown that the Hermite normal form of the transformation matrix can be used to solve this problem. The details of code generation may be found in a related paper <ref> [8] </ref>. This paper also gives a completion procedure which, given some initial rows of a desired transformation matrix, produces a complete transformation matrix that represents a legal restructuring of the original loop nest. <p> Both the lower bound and the upper bound are multiplied by the step size as well. 1 The offset is always one single expression. 26 8 Summary This document describes the Lambda loop transformation toolkit, an implementation of the non-singular matrix transformation theory described in <ref> [8] </ref> that can represent any linear one-to-one transformation.
Reference: [9] <author> L. Lu. </author> <title> A unified framework for systematic loop transformations. </title> <booktitle> In 3rd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 28-38, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications <ref> [4, 9, 10, 11] </ref>. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler.
Reference: [10] <author> J. Ramanujam. </author> <title> Non-unimodular transformations of nested loops. </title> <booktitle> In Proc. of Super computing, </booktitle> <year> 1992. </year>
Reference-contexts: In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications <ref> [4, 9, 10, 11] </ref>. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler.
Reference: [11] <author> V. Sarkar and R. Thekkath. </author> <title> A general framework for iteration-reordering loop trans formations. </title> <booktitle> In SIGPLAN'92 Programming Language and Implementation Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1]. Other research on compound transformations can be found in recent publications <ref> [4, 9, 10, 11] </ref>. This toolkit has been used in parallelizing compilers for multiprocessor machines [3, 7] as well as optimizing compilers for uniprocessor machines [5]. Lambda has a simple interface, and is independent of the intermediate representation used in the compiler.
Reference: [12] <author> M. Wolf and M. Lam. </author> <title> A loop transformation theory and an algorithm to maximize parallelism. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: The loop transformation theory, generalizing the unimodular matrix approach <ref> [2, 12] </ref>, provides a framework to represent compound transformations of these primitive transformations. In fact, this theory can represent any linear one-to-one transformation, of which the primitive transformations mentioned above are special instances. This linear transformation theory has been extended to handle loop aligment [1].

References-found: 12

