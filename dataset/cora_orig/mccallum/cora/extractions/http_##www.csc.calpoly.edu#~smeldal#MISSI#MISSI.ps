URL: http://www.csc.calpoly.edu/~smeldal/MISSI/MISSI.ps
Refering-URL: http://www.csc.calpoly.edu/~smeldal/tidbits.html
Root-URL: http://www.csc.calpoly.edu
Title: Defining a Security Reference Architecture  Program Analysis and Verification Group  
Author: Sigurd Meldal David C. Luckham 
Keyword: Key Words and Phrases: Software architectures, security, reference architecture, software engineer ing, specification, testing, conformance.  
Note: This project was funded by TRW under contract 23679HYL6M, DARPA under F3060295C0277 (subcontract C-Q0097), and by NFR under contract 100426/410.  
Address: Stanford, CA 943059040  
Affiliation: Computer Systems Laboratory Department of Electrical Egineering Stanford University  
Date: June 1997  
Pubnum: Technical Report CSL97728  Report No. 76  
Abstract: This report discusses the definition and modeling of reference architectures that specify the security aspects of distributed systems. NSAs MISSI ( Multilevel Information System Security Initiative) security reference a r-chitecture is used as an illustrative example. We show how one would define such a reference architecture, and how one could use such a definition to model as well as check implementations for compliance with the reference. We demonstrate that an ADL should have not only the capability to specify interfaces, connections and operational constraints, but also to specify how it is related to other architectures or to implementations. A reference architecture such as MISSI is defined in Rapide [10] as a set of hierarchical interface co n-nection architectures [9]. Each Rapide interface connection architecture is a reference architecture an a b-stract architecture that allows a number of different implementations, but which enforces common structure and communication rules. The hierarchical reference architecture defines the MISSI policies at diffe rent levels at the level of enclaves communicating through a network, at the level of each enclave being a local area network with firewalls and workstations and at the level of the individual workstations. The reference architecture defines standard components, communication patterns and policies common to MISSI compliant networks of computer systems. A network of computers may be checked for conformance against the reference architecture. The report also shows how one can generate architecture scenarios of networks of communicating computers. The scenarios are constructed as Rapide executable models, and the behaviors of the models can be checked for conformance with the reference architecture in these scenarios. The executable models demonstrate how the structure and security policies in the reference architecture may apply to networks of computers. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Allen, R., Garlan, D.: </author> <title> Formalizing architectural connection. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference: 2. <author> Boehm, B. W.: </author> <title> Software Process Architectures. </title> <booktitle> In Proceedings of the First International Workshop on Architectures for Software Systems. </booktitle> <address> Seattle, WA, </address> <year> 1995. </year> <note> Published as CMU CSTR95151. </note>
Reference: 3. <author> Garlan, D.: </author> <title> Research directions in software architectures. </title> <journal> ACM Computing Surveys, </journal> <volume> 27(2): 257261. </volume> <year> 1995. </year>
Reference: 4. <author> Garlan, D., Shaw, M.: </author> <title> An Introduction to Software Architecture . Volume I. </title> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference: 5. <author> Ellis, W.J. et al.: </author> <title> Toward a Recommended Practive for Architectural Description. </title> <booktitle> In Pro ceedings 2nd IEEE International Conference on Engineering of Complex Computer Systems, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: We prefer the notion that an architecture description conveys a set of views, each of which depicts the system by describing domain concerns. <ref> [ 5] </ref> The distinction between different architectures descriptions then becomes one of a difference of conformance requirements. In moving from (say) a module decomposition architecture to an implementation, conformance would require disjoint sets of modules implementing distinct components of the architecture.
Reference: 6. <author> Gennart, B. A., Luckham, D. C.: </author> <title> Validating Discrete Event Simulations Using Pattern Mappings. </title> <booktitle> In Proceedings of the 29th Design Automation Conference (DAC) , IEEE Computer Society Press, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 414419. </pages>
Reference-contexts: An interface also identifies the semantics of a conforming component by giving event based constraints, specifying whether particular protocols are to be adhered to, identifying causal relationships between events, etc. Such constraints form the basis for analysis and testing tools, such as runtime checking for conformance violations <ref> [6, 17] </ref>. A successful ADL requires a high degree of flexibility in how an architecture can be refined. Naturally one wants to be able to refine interface definitions, making use of subtype substitutivity when extending an interface with new capabilities or by adding further constraints.
Reference: 7. <author> Johnson, D. R., Saydjari, F. F., Van Tassel, J. P.: </author> <title> MISSI security Policy: A Formal A p proach. </title> <type> R2SPO Technical Report R2SPOTR00195, </type> <institution> NSA/Central Security Service, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: 1. Introduction This report investigates the use of the Rapide ADL in the definition of elements of NSAs MISSI reference architecture <ref> [7] </ref>. Everybody knows what an architecture is it is a set of components and connections between them. However, that is as far as agreement goes. <p> In particular, in this document we shall address two aspects of the MISSI reference architecture: Structures: That the secure architecture has a certain structure, requiring the existence of certain components (such as certificate authorities, or enclaves <ref> [ 7] </ref>). The structure may be d e-fined at different levels of abstraction, with different conformance requirements. We deal with 1. a global level, focusing on the main components and the overall constraints on their i n teraction. <p> The Architecting Process The MISSI reference architecture is defined in a series of prose documents, some with first order predicate logic definitions of MISSI policies. In this exposition we shall stay with the overview document, given in full in <ref> [ 7] </ref>. The overview is an executive summary of the reference archite c-ture, but contains enough detail to evaluate the utility of Rapide to specify the architecture. We find the process of constraints capture in itself very useful. <p> We shall not enumerate all the component types of the conops architecture. However, the MISSI document <ref> [ 7] </ref> does give us an example of a no n-trivial decision we face when formalizing the definitions of the component types. It says: 2 (a) An authorized releaser for a particular enclave must be a MISSI certificate holder and reside within the enclave. <p> One can either view the requirements as related to state, i.e., every piece of (administrative) data has some state attribute indicating whether it is in storage, in transit or in (possibly) other modes. In which case the natural mode of expression is one of first order logic (as in <ref> [ 7] </ref>), but at the cost of reduced checkability and increased complexity of expression data and other basic types would acquire an ever-growing set of more or less obvious attributes, an attribute collection which may become intractable as the abstract notion of data becomes refined.
Reference: 8. <author> Luckham, D. C.: </author> <title> Programming with Specifications: An Introduction to ANNA, A Language for Specifying Ada Programs , Springer-Verlag, </title> <booktitle> Texts and Monographs in Computer Science, </booktitle> <month> October, </month> <year> 1990. </year>
Reference: 9. <author> Luckham, D. C., Vera, J., Meldal, S.: </author> <title> Key Concepts in Architecture Definition Languages. </title> <note> Submitted to the CACM. Also published as technical report CSL-TR-95-674, </note> <institution> Stanford University, </institution> <year> 1996. </year>
Reference-contexts: An interface connection architecture <ref> [9] </ref> is defined by giving its 2 Components: the primary elements of the architecture, and their means of interaction with other components. Components are considered black boxes constrained only by the defin i tions of their interfaces. Connections: the lines of interaction between components. <p> The service declaration of wan_conn states that every enclave interface contains a Flow entity which (as we shall see) defines the minimum communication capabilities of enclaves. Architecture component interfaces can be highly structured. It may be helpful to think in terms of plugs and sockets <ref> [ 9] </ref>: a components interface offers a set of distinguishable means of connecting it to its environment, similarly to what one expects in the hardware world.
Reference: 10. <author> Luckham, D.C., Vera, J.: </author> <title> An event-based architecture definition language. </title> <journal> IEEE Transa c tions on Software Engineering, </journal> <volume> 21(3):253265, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: In claiming that a particular implement a-tion satisfies both perspectives the implementor would explicitly give the two maps, from the implementation to each of the reference architectures, showing the conformance argument. The vocabulary of the Rapide ADL <ref> [ 10] </ref> incorporates and extends the basic vocabulary of interface connection architectures: Components: The computational entities of an architecture. Connections: The means by which components interact. Connections have a limited comput a tional power, invoked when determining where a particular interaction is routed. Events: Representing that something happened.
Reference: 11. <author> Luckham, </author> <title> D.C.: Rapide: A Language and Toolset for Simulation of Distributed Systems by Partial Orderings of Events, DIMACS Partial Order Methods Workshop IV, </title> <institution> Princeton University, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: For a full exposition of the Rapide pattern and constraint languages, see <ref> [11, 18, 19, 20] </ref> 2.5 Repeat as needed the concept of operations level The next level of architecture is a concept of operations (conops) architecture.
Reference: 12. <author> Meldal, S.: </author> <title> Supporting architecture mappings in concurrent systems design. </title> <booktitle> In Proceed ings of the Australian Software Engineering Conference. </booktitle> <address> IREE Australia, </address> <month> May </month> <year> 1990. </year> <month> 23 </month>
Reference: 13. <author> Meszaros, G.: </author> <booktitle> Software Architecture in BNR. In Proceedings of the First International Wor k-shop on Architectures for Software Systems. </booktitle> <address> Seattle, WA. </address> <year> 1995. </year> <note> Published as CMUCSTR 95151. </note>
Reference: 14. <author> Moriconi, M., Qian, X.: </author> <title> Correctness and composition of software architectures. </title> <booktitle> In Proceedings of ACM SIGSOFT94: Symposium on Foundations of Software Engineering. </booktitle> <address> New Or leans, LA. </address> <month> December </month> <year> 1994. </year>
Reference: 15. <author> Mitchell, J.C., Meldal, S., Madhav, N.: </author> <title> An Extension of Standard ML Modules with Su b-typing and Inheritance. </title> <booktitle> In Proceedings of the 18th ACM Symp. on the Principles of Progra m-ming Languages, ACM, </booktitle> <address> ACMPress. </address> <year> 1991, </year> <pages> pp. 270-278. </pages> <note> Also published as Technical R e port CSL-TR-91-472, </note> <institution> Computer Systems Laboratory, Stanford University. </institution>
Reference-contexts: Part of this definition may ide n-tify how one type is a refinement or subtype of another <ref> [ 15] </ref>. Of course the interface definitions themselves rely on other types (such as security classifications and security tokens) already having been defined. A very first approximation of an enclave type is given in Figure 1. It identifies two key characteristics of an enclave: 1.
Reference: 16. <author> PAVG: </author> <title> The Rapide Architecture Description Language Reference Manual. </title> <publisher> &lt;http://anna.stanford.edu/rapide/lrms/architectures.ps&gt; </publisher>
Reference: 17. <author> PAVG: </author> <title> Rapide toolset information. </title> <publisher> &lt;http://anna.stanford.edu/rapide/tools.html&gt; </publisher>
Reference-contexts: An interface also identifies the semantics of a conforming component by giving event based constraints, specifying whether particular protocols are to be adhered to, identifying causal relationships between events, etc. Such constraints form the basis for analysis and testing tools, such as runtime checking for conformance violations <ref> [6, 17] </ref>. A successful ADL requires a high degree of flexibility in how an architecture can be refined. Naturally one wants to be able to refine interface definitions, making use of subtype substitutivity when extending an interface with new capabilities or by adding further constraints.
Reference: 18. <author> PAVG: </author> <title> Rapide Examples. </title> <note> In preparation. </note>
Reference-contexts: For a full exposition of the Rapide pattern and constraint languages, see <ref> [11, 18, 19, 20] </ref> 2.5 Repeat as needed the concept of operations level The next level of architecture is a concept of operations (conops) architecture.
Reference: 19. <author> PAVG: </author> <title> The Rapide Pattern Language Reference Manual. </title> <publisher> &lt;http://anna.stanford.edu/rapide/lrms/patterns.ps&gt; </publisher>
Reference-contexts: For a full exposition of the Rapide pattern and constraint languages, see <ref> [11, 18, 19, 20] </ref> 2.5 Repeat as needed the concept of operations level The next level of architecture is a concept of operations (conops) architecture.
Reference: 20. <author> PAVG: </author> <title> The Rapide Constraint Language Reference Manual. </title> <note> In preparation. </note>
Reference-contexts: For a full exposition of the Rapide pattern and constraint languages, see <ref> [11, 18, 19, 20] </ref> 2.5 Repeat as needed the concept of operations level The next level of architecture is a concept of operations (conops) architecture.
Reference: 21. <author> PAVG: </author> <title> POVa partial order browser. </title> <publisher> &lt;http://anna.stanford.edu/rapide/tools-release.html&gt; </publisher>
Reference-contexts: Since Rapide is supported by a growing toolkit of visualization and testing modules <ref> [ 21, 22] </ref>, the reference architecture can be the target for conformance testing by implementations pu r-porting to satisfy the architectures requirements. <p> Combined with the Raptor [ 22] animator this makes it possible to watch an animation of a running system at a chosen level of abstraction. Then, if interesting events (such as protocol violations) are detected, the user can move to the POV (poset visualizer) <ref> [21] </ref> and use it to investigate the causal patterns leading up to the events that piqued her interest. In particular, the POV allows the efficient removal of extraneous information, to ease the identif i-cation of interesting events among the clutter of all the events of the system.
Reference: 22. <author> PAVG: </author> <title> Raptoranimating architecture models. </title> <publisher> &lt;http://anna.stanford.edu/rapide/tools release.html&gt; </publisher>
Reference-contexts: Since Rapide is supported by a growing toolkit of visualization and testing modules <ref> [ 21, 22] </ref>, the reference architecture can be the target for conformance testing by implementations pu r-porting to satisfy the architectures requirements. <p> The second is the visualization toolset of Rapide. This part of the toolset allows the user to apply various patterns of events to a given execution, displaying only those events fitting patterns of interest. Combined with the Raptor <ref> [ 22] </ref> animator this makes it possible to watch an animation of a running system at a chosen level of abstraction.
Reference: 23. <author> Santoro, A., Park, W.: </author> <title> SPARC-V9 architecture specification with Rapide. </title> <type> Technical report CSL, </type> <note> Stanford University (to appear). </note>
Reference: 24. <editor> Soni, D., Nord, R.L., Hofmeister, C.: </editor> <booktitle> Software Architecture in Industrial Applications. In Proceedings of the 17th International Conference in Software Engineering. ACM, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: The literature presents a number of distinct ways of distingushing kinds of architectures (e.g., Soni et al. <ref> [ 24] </ref> makes a distinction between object and function decomposition architectures, among others).
References-found: 24

