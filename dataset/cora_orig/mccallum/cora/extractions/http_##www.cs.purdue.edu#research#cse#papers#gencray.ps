URL: http://www.cs.purdue.edu/research/cse/papers/gencray.ps
Refering-URL: http://www.cs.purdue.edu/research/cse/pdelab/hrefs.html
Root-URL: http://www.cs.purdue.edu
Title: A Portable Code Generator for CRAY FORTRAN language for portability. GENCRAY defines a LISP-style input
Author: Sanjiva Weerawarana and Paul S. Wang 
Note: (DRAFT) in the C  that can be made to work with any  are discussed and illustrated by a substantial example contained in the Appendix.  
Date: March 20, 1991  
Address: 44242-0001  
Affiliation: Department of Mathematics and Computer Science Kent State University Kent, Ohio  
Abstract: One way to combine the powers of symbolic computing with numeric computing is to automatically derive and produce numeric code. This approach has important applications in science and engineering. Once the desired formulas and procedures are derived in a symbolic manipulation system, they can be translated into a target numeric language by a code generator. GENCRAY is a code generator written fl Current address: Department of Computer Sciences, Purdue University, West Lafayette, IN 47907. y Work reported herein has been supported in part by the Army Research Office under Grant DAAL03-91-G-0149 and in part by the National Science Foundation under Grants CCR-8714836 and EET-8714628. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> CRAY Computer Systems, </institution> <note> CFT77 Reference Manual, </note> <institution> Cray Research Inc., Publication SR-0018A, Min-nesota, </institution> <year> 1987. </year>
Reference-contexts: This is the function of GENTRAN which can translate Maxima representations into FORTRAN 77 (F77), ratfor, or C. Based on our experience with GENTRAN, we have designed and implemented a new code generator called GENCRAY. The output of GENCRAY is F77 or CRAY FORTRAN 77 (CFT77) <ref> [1] </ref> code with vectorization and parallel features. CFT77 is a superset of F77 and is the standard FORTRAN available on CRAY supercomputers. Features, applications, usage, design, and implementation of GENCRAY are described. The translation steps and the generation of vectorizable and parallel code are discussed in detail.
Reference: [2] <author> CRAY Computer Systems, </author> <title> CRAY X-MP Multitasking Programmer's Reference Manual, </title> <institution> Cray Research Inc., Publication SR-0222D, Minnesota, </institution> <year> 1987. </year>
Reference-contexts: (where the proper type depends on the type of the expression being substituted for) and, a declaration statement is inserted at the proper place. 7 Generating Parallel Code In addition to sequential codes, GENCRAY can can generate parallel code for the CRAY X-MP and Y-MP families of shared-memory parallel computers <ref> [2] </ref>. In these machines, each CPU is basically a vector processor of the CRAY-1 type. For instance, the CRAY Y-MP8/864 that we used at the Ohio Supercomputer Center is an eight-processor system.
Reference: [3] <institution> CRAY Computer Systems, </institution> <note> Programmer's Library Reference Manual, </note> <institution> Cray Research Inc., Publication SR-0113C, Minnesota, </institution> <year> 1988. </year>
Reference-contexts: When p processors are available, we allow processor i to produce columns (i 1) fl n p + 1 to i fl n p of the resulting matrix (where n is the order of the matrices). The answer was verified using the CRAY Programmer's Library <ref> [3] </ref> mxma () routine. The wall clock running times were obtained by using the UNICOS timef () system call. Speedup for k processors is defined by speedup = time f or 1 processor time f or k processors : The input to GENCRAY is given in Appendix A.
Reference: [4] <author> Gates, B. L., </author> <title> "A Numerical Code Generation Facility for Reduce", </title> <booktitle> Proceedings, ACM SYMSAC '86, </booktitle> <month> July 21-23, </month> <year> 1986, </year> <pages> pp. 94-99. </pages>
Reference-contexts: We have applied these concepts to the problem of finite element analysis. Joint research at Kent State University and the University of Akron resulted in the software systems FINGER [15, 13] and GENTRAN <ref> [4, 5] </ref> both written in Franz LISP. FINGER, runing under Maxima 1 , derives element strain-displacement matrices and stiffness matrices based on user-supplied parameters such as element type, number of nodes and degrees of freedom. The derived codes involve declarations, expressions, arrays, functions and subroutines.
Reference: [5] <author> Gates, B. L., </author> <title> GENTRAN Design and Implementation, </title> <institution> Department of Informatics, Twente University of Technology, </institution> <address> The Netherlands, </address> <month> August, </month> <year> 1985. </year>
Reference-contexts: We have applied these concepts to the problem of finite element analysis. Joint research at Kent State University and the University of Akron resulted in the software systems FINGER [15, 13] and GENTRAN <ref> [4, 5] </ref> both written in Franz LISP. FINGER, runing under Maxima 1 , derives element strain-displacement matrices and stiffness matrices based on user-supplied parameters such as element type, number of nodes and degrees of freedom. The derived codes involve declarations, expressions, arrays, functions and subroutines.
Reference: [6] <author> Houstis, E. N., Rice, J. R., Chrisochoides, N. P., Karanthanasis, H. C., Papachiou, P. N., Samartzis, M. K., Vavalis, E. A., Wang, Ko Yang, and Weerawarana, S., </author> <title> "//ELLPACK: A Numerical Simulation Pro 10 gramming Environment for Parallel MIMD Machines", </title> <booktitle> Proceeding of the 1990 International Conference on Supercomputing, </booktitle> <publisher> ACM Press, </publisher> <address> New York, USA, </address> <year> 1990. </year>
Reference-contexts: It is available from Kent State University along with user's and programmer's manuals. 2 An Application of GENCRAY To illustrate the use of GENCRAY let us describe some on-going work with code generation for the //ELLPACK 2 system <ref> [6] </ref>, a problem solving environment developed at Purdue University for partial differential equations (PDEs) on parallel computers. The //ELLPACK package solves boundary value problems involving linear second order elliptic PDEs.
Reference: [7] <author> Johnson, Stephen C., </author> <title> Yacc: Yet Another Compiler Compiler, </title> <note> Computing Science Technical Report No. 32, </note> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1975. </year>
Reference-contexts: This allows GENCRAY to provide a numeric code generation capability independent of any particular symbolic mathematical system (e.g. Maxima, Reduce, or Maple). The C language is used to implement GENCRAY so it is readily portable to any computer systems with a standard C compiler. Lex and Yacc <ref> [9, 7] </ref> are used to generate the input parser for GENCRAY, eliminating ad-hoc parsing and allowing easy redefinition of the input syntax. GENCRAY also runs as an independent process by taking input from either a file or another process through a UNIX pipe.
Reference: [8] <editor> Le*er, Samuel J., et. al., </editor> <title> An Advanced 4.3BSD Interprocess Communication Tutorial, </title> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1986. </year>
Reference-contexts: GENCRAY also runs as an independent process by taking input from either a file or another process through a UNIX pipe. On systems that support Berkeley UNIX networking, GENCRAY can perform I/O through sockets <ref> [16, 8] </ref> as well. 4 The GENCRAY Language As a free-standing code translator, GENCRAY defines its own input language, a Lisp-like, fully-parenthesized prefix language. Some language constructs are shown here to characterize the nature of GENCRAY input. 1.
Reference: [9] <author> Lesk, </author> <title> M.E., Lex A Lexical Analyzer Generator, </title> <note> Computer Science Technical Report No. 39, </note> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> October </month> <year> 1975. </year>
Reference-contexts: This allows GENCRAY to provide a numeric code generation capability independent of any particular symbolic mathematical system (e.g. Maxima, Reduce, or Maple). The C language is used to implement GENCRAY so it is readily portable to any computer systems with a standard C compiler. Lex and Yacc <ref> [9, 7] </ref> are used to generate the input parser for GENCRAY, eliminating ad-hoc parsing and allowing easy redefinition of the input syntax. GENCRAY also runs as an independent process by taking input from either a file or another process through a UNIX pipe.
Reference: [10] <author> Macsyma Reference Manual, </author> <title> Version Nine, The MATHLAB Group, </title> <institution> Laboratory for Computer Science, M.I.T., </institution> <address> Cambridge, Mass., </address> <year> 1977. </year>
Reference-contexts: The interaction between GENCRAY and //ELLPACK is depicted in Figure 1. To derive a linear approximation to the nonlinear PDE problem, we view the PDE as an operator equation F (u) = 0 1 An AKCL [21] based version of Macsyma <ref> [10, 11] </ref> 2 //ELLPACK stands for parallel ELLPACK. 2 MAXIMA GENCRAY Code Derivation System Symbolic Tool //ELLPACK PROGRAMMING ENVIRONMENT //ELLPACK code and messages and expand F about a point u 0 to obtain a linear approximation F (u) F (u 0 ) + F 0 (u 0 )(u u 0 )
Reference: [11] <author> Pavelle, Richard and Wang, Paul S., </author> <title> "Macsyma from F to G", </title> <journal> Journal of Symbolic Computation, Academic Press, </journal> <volume> vol. 1, </volume> <year> 1985, </year> <pages> pp 69-100. </pages>
Reference-contexts: The interaction between GENCRAY and //ELLPACK is depicted in Figure 1. To derive a linear approximation to the nonlinear PDE problem, we view the PDE as an operator equation F (u) = 0 1 An AKCL [21] based version of Macsyma <ref> [10, 11] </ref> 2 //ELLPACK stands for parallel ELLPACK. 2 MAXIMA GENCRAY Code Derivation System Symbolic Tool //ELLPACK PROGRAMMING ENVIRONMENT //ELLPACK code and messages and expand F about a point u 0 to obtain a linear approximation F (u) F (u 0 ) + F 0 (u 0 )(u u 0 )
Reference: [12] <author> Rice, John R., and Boisvert, Ronald F., </author> <title> Solving Elliptic Problems Using ELLPACK, </title> <booktitle> Springer Series in Computational Mathematics 2, </booktitle> <publisher> Springer-Verlag, New York, </publisher> <editor> N. Y., </editor> <year> 1985. </year>
Reference-contexts: To illustrate the advantage of GENCRAY, we show how easily the problem domain of //ELLPACK can be extended to nonlinear initial and boundary value problems. Basically, we use symbolic computations to reduce the nonlinear PDEs to a sequence of linear elliptic PDEs <ref> [12, 20] </ref> and use GENCRAY to produce the required numeric code for //ELLPACK. The interaction between GENCRAY and //ELLPACK is depicted in Figure 1.
Reference: [13] <author> Sharma, N. and Wang, Paul S., </author> <title> "Symbolic Derivation and Automatic Generation of Parallel Routines for Finite Element Analysis", </title> <booktitle> Proceedings, 1988 International Symposium on Symbolic and Algebraic Computation, </booktitle> <publisher> ACM Press, </publisher> <address> New York, N.Y., </address> <year> 1988. </year>
Reference-contexts: Similarly, generated programs can be combined with existing computer graphics engines to provide easy visualization of computational results. We have applied these concepts to the problem of finite element analysis. Joint research at Kent State University and the University of Akron resulted in the software systems FINGER <ref> [15, 13] </ref> and GENTRAN [4, 5] both written in Franz LISP. FINGER, runing under Maxima 1 , derives element strain-displacement matrices and stiffness matrices based on user-supplied parameters such as element type, number of nodes and degrees of freedom. The derived codes involve declarations, expressions, arrays, functions and subroutines.
Reference: [14] <author> Tan, Trevor and Wang, Paul S., </author> <title> "Automatic Generation of Parallel Code for the Warp Computer", </title> <booktitle> Proceedings, 1st International Workshop on Computer Algebra and Parallelism, </booktitle> <month> June </month> <year> 1988, </year> <title> Gronoble, France, (to appear, </title> <publisher> Academic Press). </publisher>
Reference-contexts: Obviously, GENCRAY is not intended as a conventional language that one writes programs in. 3 GENCRAY Features The design of GENCRAY benefited significantly from our experiences in constructing GENTRAN and GENW2 <ref> [14] </ref>; code generators with ad-hoc input parsing, complete dependence on the host symbolic system, and relatively slow speed.
Reference: [15] <author> Wang, Paul S., </author> <title> "FINGER: A Symbolic System for Automatic Generation of Numerical Programs in Finite Element Analysis", </title> <journal> Journal of Symbolic Computation, Academic Press, </journal> <volume> vol. 2, </volume> <year> 1986, </year> <pages> pp. 305-316. </pages>
Reference-contexts: Similarly, generated programs can be combined with existing computer graphics engines to provide easy visualization of computational results. We have applied these concepts to the problem of finite element analysis. Joint research at Kent State University and the University of Akron resulted in the software systems FINGER <ref> [15, 13] </ref> and GENTRAN [4, 5] both written in Franz LISP. FINGER, runing under Maxima 1 , derives element strain-displacement matrices and stiffness matrices based on user-supplied parameters such as element type, number of nodes and degrees of freedom. The derived codes involve declarations, expressions, arrays, functions and subroutines.
Reference: [16] <author> Wang, Paul S., </author> <title> An Introduction to Berkeley UNIX, </title> <publisher> Wadsworth Publishing Co., </publisher> <address> Belmont, California, </address> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: GENCRAY also runs as an independent process by taking input from either a file or another process through a UNIX pipe. On systems that support Berkeley UNIX networking, GENCRAY can perform I/O through sockets <ref> [16, 8] </ref> as well. 4 The GENCRAY Language As a free-standing code translator, GENCRAY defines its own input language, a Lisp-like, fully-parenthesized prefix language. Some language constructs are shown here to characterize the nature of GENCRAY input. 1.
Reference: [17] <author> Weerawarana, Sanjiva, GENCRAY: </author> <title> An Automatic Code Generator for CRAY Fortran, </title> <type> Master's Thesis, </type> <institution> Department of Mathematical Sciences, Kent State University, Kent, Ohio, </institution> <year> 1989. </year>
Reference: [18] <author> Weerawarana, Sanjiva, and Wang, Paul S., "GENCRAY: </author> <title> An Automatic Code Generator for CRAY Fortran", </title> <booktitle> Proceedings, 1989 International Symposium on Symbolic and Algebraic Computation, </booktitle> <publisher> ACM Press, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference: [19] <author> Weerawarana, Sanjiva, and Wang, Paul S., </author> <title> "User's Guide to GENCRAY", </title> <institution> Department of Mathematics and Computer Science, Kent State University, Kent, Ohio, </institution> <year> 1989. </year>
Reference-contexts: More information on some of these constructs will be given later. For complete information, refer to <ref> [19] </ref>. 5 GENCRAY Implementation GENCRAY has three major modules written in C: the scanner/parser, the intermediate code producer, and the output code generator. Translation of code from the GENCRAY language to FORTRAN is done in several phases, as shown in Figure 2.
Reference: [20] <author> Weerawarana, S., Houstis, E. N., and Rice, J. R., </author> <title> "An Interactive Symbolic-Numeric Interface to Parallel ELLPACK for Building General PDE Solvers", Proceedings of the Saratoga-Springs Workshop on the Integration of Symbolic and Numeric Computing, </title> <note> to appear. Also available as CAPO Technical Report CER-90-49, </note> <institution> Department of Computer Sciences, Purdue University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: To illustrate the advantage of GENCRAY, we show how easily the problem domain of //ELLPACK can be extended to nonlinear initial and boundary value problems. Basically, we use symbolic computations to reduce the nonlinear PDEs to a sequence of linear elliptic PDEs <ref> [12, 20] </ref> and use GENCRAY to produce the required numeric code for //ELLPACK. The interaction between GENCRAY and //ELLPACK is depicted in Figure 1.
Reference: [21] <author> Yuasa, Taiichi, and Hagiya, Masami, </author> <title> "Kyoto Common Lisp Dictionary, </title> <type> Version 01.25", </type> <institution> Research Institute for Mathematical Sciences, Kyoto University, </institution> <address> Kyoto, Japan, </address> <year> 1986. </year> <month> 11 </month>
Reference-contexts: The interaction between GENCRAY and //ELLPACK is depicted in Figure 1. To derive a linear approximation to the nonlinear PDE problem, we view the PDE as an operator equation F (u) = 0 1 An AKCL <ref> [21] </ref> based version of Macsyma [10, 11] 2 //ELLPACK stands for parallel ELLPACK. 2 MAXIMA GENCRAY Code Derivation System Symbolic Tool //ELLPACK PROGRAMMING ENVIRONMENT //ELLPACK code and messages and expand F about a point u 0 to obtain a linear approximation F (u) F (u 0 ) + F 0 (u
References-found: 21

