URL: http://www.cs.wisc.edu/~shoup/papers/macs.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Email: shoup@bellcore.com  
Title: On Fast and Provably Secure Message Authentication Based on Universal Hashing  
Author: Victor Shoup 
Date: December 4, 1996  
Address: 445 South St., Morristown, NJ 07960  
Affiliation: Bellcore,  
Abstract: There are well-known techniques for message authentication using universal hash functions. This approach seems very promising, as it provides schemes that are both efficient and provably secure under reasonable assumptions. This paper contributes to this line of research in two ways. First, it analyzes the basic construction and some variants under more realistic and practical assumptions. Second, it shows how these schemes can be efficiently implemented, and it reports on the results of empirical performance tests that demonstrate that these schemes are competitive with other commonly employed schemes whose security is less well-established.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Aiello and R. Venkatesan. </author> <title> Foiling birthday attacks in output-doubling transformations. </title> <booktitle> In Advances in Cryptology|Eurocrypt '96, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: This is because with close to 2 32 queries to a test function, we can already distinguish DES from a random function, since DES will not yield any collisions, unlike a random function. There are several cryptographic constructions in the literature (e.g., <ref> [3, 1] </ref>) that suffer from the same problem. In x2, we analyze the security of the universal-hash construction using pseudo-random permutations, and show that it is in fact more secure than implied by the above theorem. <p> However, we then need a pseudo-random function from 2l to l bits. If we want to base the security on DES, with l = 64, we could use the general construction of Aiello and Venkatesan <ref> [1] </ref> to build a pseudo-random function from 2l to l bits. However, that would require 6 DES applications. For the particular situation at hand, it turns out that two DES applications are sufficient. We outline this construction.
Reference: [2] <author> M. Bellare, R. Canetti, and H. Krawczyk. </author> <title> Keying hash functions for message authentication. </title> <booktitle> In Advances in Cryptology|Crypto '96, </booktitle> <year> 1996. </year>
Reference-contexts: Crypto '96, pp. 313-328, 1996. 1 assume a good deal more about the properties of h than seems warranted (but see <ref> [2] </ref> for some progress in this area). The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. [7], and later by Wegman and Carter [18].
Reference: [3] <author> M. Bellare, R. Guerin, and P. Rogaway. </author> <title> XOR MACs: New methods for message authentication using finite pseudorandom functions. </title> <booktitle> In Advances in Cryptology|Crypto '95, </booktitle> <pages> pages 15-28, </pages> <year> 1995. </year>
Reference-contexts: This is because with close to 2 32 queries to a test function, we can already distinguish DES from a random function, since DES will not yield any collisions, unlike a random function. There are several cryptographic constructions in the literature (e.g., <ref> [3, 1] </ref>) that suffer from the same problem. In x2, we analyze the security of the universal-hash construction using pseudo-random permutations, and show that it is in fact more secure than implied by the above theorem.
Reference: [4] <author> M. Bellare, J. Kilian, and P. Rogaway. </author> <title> On the security of cipher block chaining. </title> <booktitle> In Advances in Cryptology|Crypto '94, </booktitle> <pages> pages 341-358, </pages> <year> 1994. </year>
Reference-contexts: When B receives a pair (x; ff), B evaluates V a (x; ff), which returns 1 if the MAC is valid, and 0 otherwise. Security for message authentication schemes can be formally defined, as in Bellare et al. <ref> [4] </ref>, essentially along the same lines as for digital signatures [8]: we say that an adversary forges a MAC if, when given oracle access to S a and V a , it obtains V a (x; ff) = 1 for some message x that was never given to the oracle for <p> Common Approaches to Message Authentication. One of the most widely used message authentication schemes is built using a block cipher, typically the Data Encryption Standard (DES), and applying it to the message in Cipher Block Chaining (CBC) mode. Only recently has this scheme been shown to be secure <ref> [4] </ref>, under a reasonable assumption about DES, although the level of security provided by this scheme degrades quite quickly as the number of queries or the message length increases. Moreover, as DES is applied to every block of the message, this scheme is quite slow, especially in software.
Reference: [5] <author> A. Bosselaers, R. Govaerts, and J. Vandewalle. </author> <title> Fast hashing on the Pentium. </title> <booktitle> In Advances in Cryptology|Crypto '96, </booktitle> <year> 1996. </year>
Reference-contexts: The set-up time was was 220s, and the hash function runs at 85-100Mbps. We compare this to the hand-optimized assembly implementation of MD5 by Bosselaers, Govaerts, and Vandewalle <ref> [5] </ref>. This runs at 113Mbps. Also, How's implementation of DES on our Pentium has a set-up time of 94s, and one application takes 11.5s.
Reference: [6] <author> G. Brassard. </author> <title> On computationally secure authentication tags requiring short secret shared keys. </title> <booktitle> In Advances in Cryptology-Crypto '82, </booktitle> <pages> pages 79-86, </pages> <year> 1982. </year>
Reference-contexts: The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. [7], and later by Wegman and Carter [18]. Wegman and Carter's universal-hash construction was later placed in a cryptographic setting by Brassard <ref> [6] </ref>, Krawczyk [12], and Rogaway [17]. This construction uses a 2-universal family H of hash functions, and a pseudorandom family F of functions. Assume that the outputs of both types of functions are bit strings of the same length, say l.
Reference: [7] <author> E. Gilbert, F. M. Williams, and N. Sloane. </author> <title> Codes which detect deception. </title> <journal> Bell System Technical Journal, </journal> <volume> 53(3) </volume> <pages> 405-424, </pages> <year> 1974. </year>
Reference-contexts: Crypto '96, pp. 313-328, 1996. 1 assume a good deal more about the properties of h than seems warranted (but see [2] for some progress in this area). The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. <ref> [7] </ref>, and later by Wegman and Carter [18]. Wegman and Carter's universal-hash construction was later placed in a cryptographic setting by Brassard [6], Krawczyk [12], and Rogaway [17]. This construction uses a 2-universal family H of hash functions, and a pseudorandom family F of functions.
Reference: [8] <author> S. Goldwasser, S. Micali, and R. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Comput., </journal> <volume> 17 </volume> <pages> 281-308, </pages> <year> 1988. </year>
Reference-contexts: When B receives a pair (x; ff), B evaluates V a (x; ff), which returns 1 if the MAC is valid, and 0 otherwise. Security for message authentication schemes can be formally defined, as in Bellare et al. [4], essentially along the same lines as for digital signatures <ref> [8] </ref>: we say that an adversary forges a MAC if, when given oracle access to S a and V a , it obtains V a (x; ff) = 1 for some message x that was never given to the oracle for S a ; a message authentication scheme is secure if
Reference: [9] <author> J. Gordon. </author> <title> Very simple method to find the minimal polynomial of an arbitrary non-zero element of a finite field. </title> <journal> Electronic Letters, </journal> <volume> 12 </volume> <pages> 663-664, </pages> <year> 1976. </year>
Reference-contexts: Timing results. In our Sparc-10 implementation, this method requires about 570s: 30s to build the multiplication look-up table; 125s to compute the powers of g (x); and 415s to perform the Parkinson-Wunderlich algorithm. Method 2. This method, due to Gordon <ref> [9] </ref>, applies only to a finite field K = GF (q). We compute the sequence of polynomials g (x) q i mod f (x) for 0 i m, where m is the smallest positive integer such that g (x) q m g (x) mod f (x).
Reference: [10] <author> D. </author> <title> How. Fast and portable DES encryption and decryption, </title> <note> 1992. Available from how@isl.stanford.edu. </note>
Reference-contexts: Note the much smaller variance in running time due to cache effects. We have not included in the above the cost of the pseudo-random function. Using one of the faster DES implementations, built by How <ref> [10] </ref>, the set-up time is about 75s, and the time for one DES operation is about 10.5s. We compare the above with a standard C implementation of MD5 on our machine, for which gcc produces quite good code. MD5 achieves a top speed of 41Mbps.
Reference: [11] <author> E. Kaltofen and B. Saunders. </author> <title> On Wiedeman's method of solving sparse linear systems. </title> <booktitle> In Symp. Applied Algebra, Algebraic Algorithms, Error-Correcting Codes (Lecture Notes in Computer Science no. </booktitle> <volume> 539), </volume> <pages> pages 29-38, </pages> <year> 1991. </year>
Reference-contexts: The first 2d elements of this sequence fully determine its minimal polynomial, and this can be very efficiently computed using the Berlekamp-Massey algorithm (see Massey [14] and also Kaltofen and Saunders <ref> [11] </ref>), which uses O (d 2 ) arithmetic operations in K. Consider now the situation where K = GF (2) and d = 64. We compute the powers of g (x) as in method 1, and pack the constant-term bits into 4 machine words.
Reference: [12] <author> H. Krawczyk. </author> <title> LFSR-based hashing and authentication. </title> <booktitle> In Advances in Cryptology|Crypto '94, </booktitle> <pages> pages 129-139, </pages> <year> 1994. </year>
Reference-contexts: The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. [7], and later by Wegman and Carter [18]. Wegman and Carter's universal-hash construction was later placed in a cryptographic setting by Brassard [6], Krawczyk <ref> [12] </ref>, and Rogaway [17]. This construction uses a 2-universal family H of hash functions, and a pseudorandom family F of functions. Assume that the outputs of both types of functions are bit strings of the same length, say l. <p> In this case, we say H is an *-AXU (almost exclusive-or universal) family of hash functions. The main theorem concerning the security of the basic universal-hash construction is the following (see [17] and <ref> [12] </ref> for more details and references). Theorem 1 Assume H is *-AXU, and that F is replaced by the truly random family R of functions. <p> The hash value is m (x)x l=k mod p (x). It is easy to show that this is *-AXU with * nl=k2 l . The division hash was first suggested for use in message authentication by Krawczyk <ref> [12] </ref>. The other two are obvious variants, but have somewhat different performance and security properties. An output length of l = 64 should provide an adequate level of security for the above three hash functions.
Reference: [13] <author> A. K. Lenstra and M. S. Manasse. </author> <title> Compact incremental Gaussian elimination over Z/2Z. </title> <type> Technical Report 88-16, </type> <institution> University of Chicago|Dept. of Computer Science, </institution> <year> 1988. </year>
Reference-contexts: Converting this matrix to a form that makes Gaussian elimination efficient is quite time consuming. A much better approach is that of Parkinson and Wunderlich [15] (see also Lenstra and Manasse <ref> [13] </ref>) which finds a solution using row operations. Timing results. In our Sparc-10 implementation, this method requires about 570s: 30s to build the multiplication look-up table; 125s to compute the powers of g (x); and 415s to perform the Parkinson-Wunderlich algorithm. Method 2.
Reference: [14] <author> J. Massey. </author> <title> Shift-register synthesis and BCH coding. </title> <journal> IEEE Trans. Inf. Theory, </journal> <volume> IT-15:122-127, </volume> <year> 1969. </year> <month> 11 </month>
Reference-contexts: The first 2d elements of this sequence fully determine its minimal polynomial, and this can be very efficiently computed using the Berlekamp-Massey algorithm (see Massey <ref> [14] </ref> and also Kaltofen and Saunders [11]), which uses O (d 2 ) arithmetic operations in K. Consider now the situation where K = GF (2) and d = 64. We compute the powers of g (x) as in method 1, and pack the constant-term bits into 4 machine words.
Reference: [15] <author> D. Parkinson and M. Wunderlich. </author> <title> A compact algorithm for Gaussian elimination over GF(2) imple-mented on highly parallel computers. </title> <booktitle> Parallel Computing, </booktitle> <pages> pages 65-73, </pages> <year> 1984. </year>
Reference-contexts: Converting this matrix to a form that makes Gaussian elimination efficient is quite time consuming. A much better approach is that of Parkinson and Wunderlich <ref> [15] </ref> (see also Lenstra and Manasse [13]) which finds a solution using row operations. Timing results. In our Sparc-10 implementation, this method requires about 570s: 30s to build the multiplication look-up table; 125s to compute the powers of g (x); and 415s to perform the Parkinson-Wunderlich algorithm. Method 2.
Reference: [16] <author> B. Preneel and P. van Oorschot. </author> <title> MDx-MAC and building fast MACs from hash functions. </title> <booktitle> In Advances in Cryptology-Crypto '95, </booktitle> <pages> pages 1-14, </pages> <year> 1995. </year>
Reference-contexts: Another common practice today is to use a cryptographic hash function h, such as MD5, and set S a (x) = h (a x a), where "" denotes concatenation. Many variations on this scheme have been proposed as well (see <ref> [16] </ref>)). These schemes are typically much faster than the CBC-DES scheme; unfortunately, the security of these schemes is not well-established; to obtain much confidence in the security of this approach, one must fl A preliminary version of this paper appears in Proc.
Reference: [17] <author> P. Rogaway. </author> <title> Bucket hashing and its application to fast message authentication. </title> <booktitle> In Advances in Cryptology-Crypto '95, </booktitle> <pages> pages 29-42, </pages> <year> 1995. </year>
Reference-contexts: The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. [7], and later by Wegman and Carter [18]. Wegman and Carter's universal-hash construction was later placed in a cryptographic setting by Brassard [6], Krawczyk [12], and Rogaway <ref> [17] </ref>. This construction uses a 2-universal family H of hash functions, and a pseudorandom family F of functions. Assume that the outputs of both types of functions are bit strings of the same length, say l. <p> In this case, we say H is an *-AXU (almost exclusive-or universal) family of hash functions. The main theorem concerning the security of the basic universal-hash construction is the following (see <ref> [17] </ref> and [12] for more details and references). Theorem 1 Assume H is *-AXU, and that F is replaced by the truly random family R of functions. <p> CBC-DES has a set-up time of 75s on the Sparc-10, and 94s on the Pentium. The storage requirements are not significant. It runs at about 6Mbps on both machines. We note that our hash techniques complement the bucket-hash technique developed by Rogaway <ref> [17] </ref> very nicely. For high-speed authentication of very large files, one would reduce the input size by a factor of, say, 10 using a bucket hash, and then apply, say, a generalized division hash to this shorter string.
Reference: [18] <author> M. Wegman and L. Carter. </author> <title> New hash functions and their use in authentication and set equality. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 22 </volume> <pages> 265-279, </pages> <year> 1981. </year>
Reference-contexts: The Universal-Hash Construction. The problem of message authentication was studied early on in an information-theoretic setting, first by Gilbert et al. [7], and later by Wegman and Carter <ref> [18] </ref>. Wegman and Carter's universal-hash construction was later placed in a cryptographic setting by Brassard [6], Krawczyk [12], and Rogaway [17]. This construction uses a 2-universal family H of hash functions, and a pseudorandom family F of functions.
Reference: [19] <author> D. </author> <title> Wiedemann. Solving sparse linear systems over finite fields. </title> <journal> IEEE Trans. Inf. Theory, </journal> <volume> IT-32:54-62, </volume> <year> 1986. </year>
Reference-contexts: This is a linearly generated sequence over K with minimal polynomial h (x), i.e., it satisfies a linear recurrence whose coefficients are those of h (x). Borrowing a simple idea from Wiedemann <ref> [19] </ref>, we consider the projected 7 sequence a 0 = g 0 (0); a 1 = g 1 (0); : : :, i.e., we simply take the constant terms of the polynomial sequence to get a sequence over K.
References-found: 19

