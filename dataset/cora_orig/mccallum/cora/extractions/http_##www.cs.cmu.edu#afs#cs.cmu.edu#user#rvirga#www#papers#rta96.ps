URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rvirga/www/papers/rta96.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rvirga/www/Resume.html
Root-URL: 
Title: Higher-Order Superposition for Dependent Types  
Author: Roberto Virga 
Address: Pittsburgh PA 15213, USA  
Affiliation: Carnegie Mellon University,  
Abstract: We describe a proof of the Critical Pair Lemma for Plotkin's LF calculus [4]. Our approach basically follows the one used by Nipkow [12] for the simply-typed case, though substantial modifications and some additional theoretical machinery are needed to ensure well-typedness of rewriting in this richer type system. We conclude the paper presenting some significant applications of the theory.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Coquand, T. </author> <title> An algorithm for Testing Conversion in Type Theory. Logical Frameworks, </title> <publisher> Cambridge University Press, </publisher> <year> 1991, </year> <pages> pages 155-279 </pages>
Reference-contexts: If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. These facts can be proved for generic LF expressions, i.e. when ` instead of ` is considered; see <ref> [1, 3, 20] </ref>. In [21] it is shown that they relativize to dependencies. Given a well-typed term M or a type family A, we will denote their canonical form by M + and A + , respectively. Definition 12.
Reference: 2. <author> Gehrke, W., </author> <title> Decidability Results For Categorical Notions Related to Monads by Rewriting Techniques Ph.D. </title> <type> Thesis, </type> <institution> Johannes Kepler Universitat, Linz, </institution> <year> 1995 </year>
Reference-contexts: x); w : (object x); z : (object x); f : (morph x u v); g : (morph x v w); h : (morph x w z): More complex notions of category theory can be similarly represented: terminating and confluent HTRSs for natural transformations, adjunctions, and monads are presented in <ref> [2] </ref>. Cut Elimination Theorem In [16], F. Pfenning gives a LF representation of the cut elimination theorem for both intuitionistic and classical sequent calculi. It turns out that is possible to transform all the cases in this proof into rewrite rules, yielding a (terminating) HTRS.
Reference: 3. <author> Geuvers, H. </author> <title> The Church-Rosser Property for fi-Reduction in Typed -Calculi. </title> <booktitle> Proceedings of the 7th Annual IEEE Symposium on Logic in Computer Science (LICS), </booktitle> <year> 1992, </year> <pages> pages 453-460 </pages>
Reference-contexts: If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. These facts can be proved for generic LF expressions, i.e. when ` instead of ` is considered; see <ref> [1, 3, 20] </ref>. In [21] it is shown that they relativize to dependencies. Given a well-typed term M or a type family A, we will denote their canonical form by M + and A + , respectively. Definition 12.
Reference: 4. <author> Harper, R., Honsell F., Plotkin, G. </author> <title> A framework for Defining Logics. </title> <journal> Journal of the Association for Computing Machinery, </journal> <month> January </month> <year> 1993, </year> <pages> pages 143-184 </pages>
Reference: 5. <author> Huet, G.P., Lang, B. </author> <title> Proving and Applying Program Transformations Expressed with Second-Order Patterns Acta Informatica 11, </title> <booktitle> 1978, </booktitle> <pages> pages 31-55 </pages>
Reference-contexts: 1 Overview Higher-order rewriting has always attracted considerable interest for the potentially wide range of application it has on several fields of theoretical computer science, ranging from program transformation <ref> [5] </ref> to automated theorem proving [13]. Until recently, however, undecidability of higher-order unification discouraged any attempt to lift at least some the most interesting results of the first-order theory to the higher-order setting.
Reference: 6. <author> Kahrs, D. </author> <title> Towards a Domain Theory for Termination Proofs. </title> <booktitle> Proceedings of the 6th International Conference on Rewriting Techniques and Applications (RTA), </booktitle> <year> 1995, </year> <pages> pages 241-255 </pages>
Reference-contexts: Two methods have been recently proposed <ref> [6, 17] </ref>, and it is our hope that they can be adapted to dependent types.
Reference: 7. <author> Knuth, D.E., Bendix, P.B. </author> <title> Simple Word Problems in Universal Algebra. Compu--tational Problems in Abstract Algebra, </title> <publisher> Pergamon Press, </publisher> <year> 1972, </year> <pages> pages 263-297 </pages>
Reference: 8. <author> Lora-Saenz, C. A. </author> <title> A Theoretical Framework for Reasoning about Program Construction Based on Extensions of Rewrite Systems Ph.D. </title> <type> Thesis, </type> <institution> Universitat Kaiserslautern, </institution> <year> 1993 </year>
Reference-contexts: Nipkow's work has inspired a lot of activity the area of higher-order rewriting, and contributed to a series of important results, such as Prehofer's work on higher-order narrowing [18], or Loria's study of conditional higher-order rewriting <ref> [8] </ref>. In this paper we extend Nipkow's proof to the LF calculus; here the possibility of indexing types by terms, while providing enormous flexibility of representation, it also creates considerable problems.
Reference: 9. <author> Mayr, R., Nipkow, T. </author> <title> Higher-Order Rewrite Systems and their Confluence. </title> <type> Technical Report TUM-I9433, </type> <institution> Technische Universitat Munchen, </institution> <year> 1994 </year>
Reference-contexts: As expected, when the hole is replaced by an expression of compatible type, environments always produce well-typed expressions: Lemma 9. If ` E [[ ffi ` ffi : A ffi ]] : A, and ` M : A ffi with ffi , then ` In <ref> [9] </ref>, the definition of substitution makes use of the existence and uniqueness of long fi normal forms. In the LF calculus, these find an analogue in the concept of canonical form: Definition 10. <p> Given any well-typed term ` M : A and substitution = fx 7! N g : + , define M to be the (unique) canonical form of ` (x : B:M ) N : [N =x]A Note that here, in analogy to <ref> [9] </ref>, we define the result of a substitution ap plication to be a canonical term. Definition 14. 1. <p> Another interesting direction of research would be to define, on the same line of <ref> [9] </ref>, rewriting modulo an equational theory. This might allow to circumvent the restrictions imposed by the dependencies: a single HTRS could be decomposed into several ones, each involving disjoint sets of base types.
Reference: 10. <author> Miller, D. </author> <title> A Logic Programming Language With Lambda abstraction, Function Variables, and Simple Unification. </title> <type> LFCS Report Series, </type> <institution> University of Edinburgh, </institution> <year> 1991, </year> <pages> pages 253-281 </pages>
Reference-contexts: If ` M : A and = fx 7! N g : + then ` M : Corollary 16. If 1 : 1 + 3 , then 2 ffi 1 : 1 One particular class of terms for which unification is decidable are patterns <ref> [10] </ref>; the definition derives, almost unchanged, from the simply-typed case [15]. Definition 17. A canonical term ` M + A is said to be a pattern if each x 2 dom can appear in M and A only applied to terms -equivalent to distinct bound variables. Theorem 18.
Reference: 11. <author> Newman, M.H.A. </author> <title> On theories with a combinatorial definition of `equivalence' Annals of Mathematics, </title> <type> 43(2), </type> <year> 1942, </year> <pages> pages 223-243 </pages>
Reference-contexts: Since it is also known to be terminating, we conclude by Newman's Lemma <ref> [11] </ref> that it is confluent.
Reference: 12. <author> Nipkow, T. </author> <title> Higher-Order Critical Pairs. </title> <booktitle> Proceedings of the 5th IEEE Conference of Logic In Computer Science (LICS), </booktitle> <year> 1990, </year> <pages> pages 342-348 </pages>
Reference-contexts: However, no indication is given as what additional restrictions it is necessary to impose to overcome the undecidability results and to make these notions of practical interest. The most important result, from a computational standpoint, may be considered a paper by Nipkow, published the same year <ref> [12] </ref>: by imposing some restrictions to the form of rules, he was is able to prove an analogue of the Critical Pair Lemma.
Reference: 13. <author> Paulson, </author> <title> L.C. The Foundation of a Generic Theorem Prover Journal of Automated Reasoning, </title> <journal> vol. </journal> <volume> 5, </volume> <year> 1989, </year> <pages> pages 363-397 </pages>
Reference-contexts: 1 Overview Higher-order rewriting has always attracted considerable interest for the potentially wide range of application it has on several fields of theoretical computer science, ranging from program transformation [5] to automated theorem proving <ref> [13] </ref>. Until recently, however, undecidability of higher-order unification discouraged any attempt to lift at least some the most interesting results of the first-order theory to the higher-order setting.
Reference: 14. <author> Pfenning, F. </author> <title> Logic Programming in the LF Logical Framework. </title> <editor> G. Huet, G. Plotkin ed., </editor> <title> Logical Frameworks, </title> <publisher> Cambridge University Press, </publisher> <year> 1991, </year> <pages> pages 149-181 </pages>
Reference-contexts: to the excessive complexity, as well as lack of space, proofs will be omitted in most cases; the results presented are however proved in full detail in [21]. 2 Preliminaries In order to make this paper more self-contained, we briefly introduce Plotkin's LF calculus; an interested reader may refer to <ref> [14] </ref> for a more exhaustive presentation. Definition 1.
Reference: 15. <author> Pfenning, F. </author> <title> Unification and anti-unification in the Calculus of Constructions., </title> <booktitle> Proceedings of the 6th IEEE Conference of Logic In Computer Science (LICS), </booktitle> <year> 1991, </year> <pages> pages 149-181 </pages>
Reference-contexts: If 1 : 1 + 3 , then 2 ffi 1 : 1 One particular class of terms for which unification is decidable are patterns [10]; the definition derives, almost unchanged, from the simply-typed case <ref> [15] </ref>. Definition 17. A canonical term ` M + A is said to be a pattern if each x 2 dom can appear in M and A only applied to terms -equivalent to distinct bound variables. Theorem 18. <p> Theorem 18. Unification of patterns is decidable; if two patterns unify, there is a unique (up to conversion) most general unifier. Proof. See <ref> [15] </ref>. 3 Higher-Order Term Rewriting In this section we extend the notion of term rewriting system and rewriting relation to a higher-order setting with dependent types. Definition 19.
Reference: 16. <author> Pfenning, F. </author> <title> A Structural Proof of Cut Elimination and Its Representation in a Logic Framework Technical Report CMU-CS-94-218, </title> <institution> Carnegie Mellon University, </institution> <year> 1994 </year>
Reference-contexts: Cut Elimination Theorem In <ref> [16] </ref>, F. Pfenning gives a LF representation of the cut elimination theorem for both intuitionistic and classical sequent calculi. It turns out that is possible to transform all the cases in this proof into rewrite rules, yielding a (terminating) HTRS.
Reference: 17. <author> Pol, J. </author> <title> Termination Proofs for Higher-Order Rewrite Systems, </title> <editor> J. Heering, K. Meinke, B. Moller, T. Nipkow ed., </editor> <title> Higher Order Algebra, </title> <booktitle> Logic and Term Rewriting (HOA),Lecture Notes in Computer Science, </booktitle> <volume> vol 816, </volume> <year> 1994, </year> <pages> pages 305-325 </pages>
Reference-contexts: Two methods have been recently proposed <ref> [6, 17] </ref>, and it is our hope that they can be adapted to dependent types.
Reference: 18. <author> Prehofer, C. </author> <title> Solving Higher-Order Equations., </title> <type> Technical Report, </type> <institution> Technische Uni-versitat Munchen, </institution> <year> 1994 </year>
Reference-contexts: Nipkow's work has inspired a lot of activity the area of higher-order rewriting, and contributed to a series of important results, such as Prehofer's work on higher-order narrowing <ref> [18] </ref>, or Loria's study of conditional higher-order rewriting [8]. In this paper we extend Nipkow's proof to the LF calculus; here the possibility of indexing types by terms, while providing enormous flexibility of representation, it also creates considerable problems.
Reference: 19. <author> Rohwedder, E. , Pfenning, F. </author> <title> Mode and Termination Analysis for Higher-Order Logic., </title> <note> to appear at the 1996 European Symposium on Programming (ESOP) </note>
Reference-contexts: Two methods have been recently proposed [6, 17], and it is our hope that they can be adapted to dependent types. Also, the same notion of dependency relation has been used to prove well foundedness of proofs by structural induction in LF <ref> [19] </ref>; this suggests that it might be useful in proving termination of HTRSs as well. Another interesting direction of research would be to define, on the same line of [9], rewriting modulo an equational theory.
Reference: 20. <author> Salvesen, A. </author> <title> The Church-Rosser Property for Pure Systems with fi-Reduction. </title> <type> Technical Report, </type> <institution> University of Oslo, </institution> <year> 1992 </year>
Reference-contexts: If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. These facts can be proved for generic LF expressions, i.e. when ` instead of ` is considered; see <ref> [1, 3, 20] </ref>. In [21] it is shown that they relativize to dependencies. Given a well-typed term M or a type family A, we will denote their canonical form by M + and A + , respectively. Definition 12.
Reference: 21. <author> Virga, R. </author> <title> Higher-Order Superposition for Dependent Types, </title> <type> Technical Report CMU-CS-95-150, </type> <institution> Carnegie Mellon University, </institution> <note> 1995 (http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rvirga/Web/dep-rel.ps) </note>
Reference-contexts: Due to the excessive complexity, as well as lack of space, proofs will be omitted in most cases; the results presented are however proved in full detail in <ref> [21] </ref>. 2 Preliminaries In order to make this paper more self-contained, we briefly introduce Plotkin's LF calculus; an interested reader may refer to [14] for a more exhaustive presentation. Definition 1. <p> If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. These facts can be proved for generic LF expressions, i.e. when ` instead of ` is considered; see [1, 3, 20]. In <ref> [21] </ref> it is shown that they relativize to dependencies. Given a well-typed term M or a type family A, we will denote their canonical form by M + and A + , respectively. Definition 12.
Reference: 22. <author> Wolfram, </author> <title> D.A Rewriting, and Equational Unification: </title> <booktitle> the Higher-Order Cases Proceedings of the 4th International Conference on Rewriting Techniques and Applications (RTA), </booktitle> <year> 1991, </year> <title> pages 25-36 This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Until recently, however, undecidability of higher-order unification discouraged any attempt to lift at least some the most interesting results of the first-order theory to the higher-order setting. One of the first steps in this direction, to the author's knowledge, is due to Wolfram, who in <ref> [22] </ref> offers a first definition of rewriting in the simply-typed lambda calculus, and suggests how other related concepts can also be similarly generalized to this framework.
References-found: 22

