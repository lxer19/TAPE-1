URL: http://www.cs.utexas.edu/users/cpg/mawl/doc/lunchbot.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/mawl/papers.html
Root-URL: 
Email: jcr@research.att.com  email: tjball@bell-labs.com  
Title: Lunchbot: A Tale of Two Ways to Program Web Services  
Author: Kenneth C. Cox, Thomas Ball J. Christopher Ramming fkcc,tjballg@bell-labs.com 
Keyword: Categories and Subject Descriptors: D.1.0 [Programming Techniques]: General; D.2.7 [Software Engineering]: Distribution and Maintenance-enhancement, extensibility; D.3.2 [Programming Languages]: Language Classifications-specialized application languages Additional Key Words and Phrases: World Wide Web, web ser vices, Common Gateway Interface  
Note: Correspondence Contact: Bell Laboratories|Rm 1G-359, 1000  
Date: April 16, 1996  
Address: Lucent Technologies  East Warrenville Road, Naperville, IL 60566, 708-979-4291,  
Affiliation: Bell Laboratories AT&T Research  
Abstract: The "Lunchbot" is a Web-based service that supports ordering carry-out lunches for large groups. The Lunchbot was originally developed with a standard mix of UNIX tools and has recently been reimplemented in MAWL, a language explicitly designed for programming interactive Web services. We describe the design of the Lunchbot and then compare and contrast our two implementations, highlighting the differences between tools-based and language-based approaches to Web programming. We also present a visual analysis of the Lunchbot service and its interactions. 
Abstract-found: 1
Intro-found: 1
Reference: [AKW86] <author> A. V. Aho, B. W. Kernighan, and P. J. Weinberger. </author> <title> The AWK Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: This original Web version of the Lunchbot was implemented in what might be called a "tools-based" manner: a program is developed by apportioning the task amongst common utilities such as AWK <ref> [AKW86] </ref>, PERL [WS90], and those found in /bin; the interaction between these tools is then controlled by a shell, often using character I/O and pipes for communication. The shell programs are invoked remotely by Web browsers using the Common Gateway Interface (CGI), a component of the Web HTTP protocol [BL95].
Reference: [BL95] <author> T. Berners-Lee. </author> <title> Hypertext transfer protocol (HTTP/1.0). Working Group of the Internet Engineering Task Force, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: The shell programs are invoked remotely by Web browsers using the Common Gateway Interface (CGI), a component of the Web HTTP protocol <ref> [BL95] </ref>. The principal advantages of this "tools-based" approach are low overhead (much functionality can be found in pre-existing tools) and flexibility.
Reference: [BLC95] <author> T. Berners-Lee and D. Connolly. </author> <title> Hypertext markup language (HTML 2.0). </title> <institution> Working Group of the Internet Engineering Task Force, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: This client-server communication protocol provides a minimal set of constructs whereby the client (typically a Web browser) can obtain documents or "pages" containing hypertext (typically written in the Hypertext Markup Language, or HTML <ref> [BLC95] </ref>) from a server. This protocol is explicitly stateless; each client request is handled independently of any previous requests. Unfortunately, interactive services normally require the preservation of state information across a series of documents.
Reference: [LMB92] <author> J. Levine, T. Mason, and D. Brown. </author> <title> Lex & Yacc. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1992. </year>
Reference-contexts: A second implementation using a language-based approach has recently been implemented by Ken Cox. A "language-based approach" to a software engineering problem involves using a programming language specifically designed for the class of programming problems at hand. A classic example of such a language is YACC <ref> [LMB92] </ref> for parser construction. The essential idea is to design syntax and related semantics that solve specific software engineering problems. <p> MAWL 10 service logic and HTML creation. Diamonds are AWK programs and ovals are shell programs. provides standard imperative control-flow constructs, including loops and conditionals. In the spirit of YACC <ref> [LMB92] </ref>, MAWL makes use of a "host language" for operations not provided by the MAWL language, such as arithmetic computation and file I/O. The compiler currently supports two host languages, ML and C++. The host-language fragments are embedded in the MAWL code and delimited by parentheses.
Reference: [LR95] <author> D. A. Ladd and J. C. Ramming. </author> <title> Programming the web: An application-oriented language for hypermedia service programming. </title> <booktitle> In 4th International World Wide Web Conference, </booktitle> <year> 1995. </year>
Reference-contexts: architecture to be defined, documented, and enforced (e.g., YACC defines external interfaces as well as an internal structure based on a shift/reduce parsing and the use of reduction-time actions to perform side-effects; users of the language must operate within certain parameters of the defined framework). 3 The programming language MAWL <ref> [LR95] </ref> provides the building blocks appropriate to interactive Web service programming, offering such advantages as one would expect of an application-oriented language in the Web domain.
Reference: [WS90] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming PERL. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1990. </year> <title> 23 constructs are in italics. 24 each link represents a dynamic transition between pages. Color and size encode frequency. 25 (a) (c) 26 (a) (b) 27 </title>
Reference-contexts: This original Web version of the Lunchbot was implemented in what might be called a "tools-based" manner: a program is developed by apportioning the task amongst common utilities such as AWK [AKW86], PERL <ref> [WS90] </ref>, and those found in /bin; the interaction between these tools is then controlled by a shell, often using character I/O and pipes for communication. The shell programs are invoked remotely by Web browsers using the Common Gateway Interface (CGI), a component of the Web HTTP protocol [BL95].
References-found: 6

