URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/ilps95.ps.gz
Refering-URL: http://www.cs.concordia.ca/~special/bibdb/orlog.html
Root-URL: http://www.cs.concordia.ca
Email: e-mail: fjamil,laksg@cs.concordia.ca  
Title: A Declarative Semantics for Behavioral Inheritance and Conflict Resolution  
Author: Hasan M. Jamil Laks V. S. Lakshmanan 
Keyword: Key Words: object-orientation, behavioral inheritance, overriding, conflict resolution, deductive databases, declarative semantics, sound and complete proof theory.  
Address: Montreal, Canada H3G 1M8  
Affiliation: Department of Computer Science Concordia University,  
Abstract: We propose a novel semantics for object-oriented deductive databases in the direction of F-logic to logically account for behavioral inheritance, conflict resolution in multiple inheritance hierarchies, and overriding. We introduce the ideas of withdrawal, locality, and inheritability of properties (i.e., methods and signatures). Exploiting these ideas, we develop a declarative semantics of behavioral inheritance and overriding without having to resort to non-monotonic reasoning. Conflict resolution in our model can be achieved both via specification and by detection. The possibility of specification based conflict resolution through withdrawal allows users to define inheritance preference. We present a formal account of the semantics of our language by defining a model theory, proof theory and a fixpoint theory. We also show that the different characterizations of our language are equivalent. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Ait-Kaci and A. </author> <title> Podelski. Towards a Meaning of LIFE. </title> <type> Technical Report 11, </type> <institution> Digital Paris Research Labs, </institution> <year> 1991. </year>
Reference-contexts: These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. Behavioral inheritance has been studied in deductive formalisms such as Ordered Theories [14], in logic languages such as LIFE <ref> [1] </ref>, and several others. L&O [16] on the other hand relies on translating object-oriented logic programs into value-based conventional logic programs.
Reference: [2] <author> C. Beeri and R. Ramakrishnan. </author> <title> On the power of magic. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 269-283, </pages> <year> 1987. </year>
Reference-contexts: More precisely, it may be possible to compute only a small and relevant subset of the closure in order to prove a given goal. Similarly, the bottom-up fixpoint computation can be made more efficient, by incorporating ideas similar to the well-known magic sets method <ref> [2] </ref>. We are currently investigating these and other optimization opportunities. We have completed a prototype implementation [11, 12] based on translation to coral [19], and are working on a direct implementation.
Reference: [3] <author> M. Bugliesi. </author> <title> A declarative view of inheritance in logic programming. </title> <editor> In K. Apt, editor, </editor> <booktitle> Proc. Joint Int. Conference and Symposium on Logic Programming, </booktitle> <pages> pages 113-130. </pages> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: We are then required to deal with inheritance conflicts and as a consequence may have to settle for multiple minimal models at the declarative level, e.g., as in [13]. Current solutions that are proposed in the literature are based on non-monotonic reasoning [20], program composition <ref> [3] </ref>, etc. These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. Behavioral inheritance has been studied in deductive formalisms such as Ordered Theories [14], in logic languages such as LIFE [1], and several others.
Reference: [4] <author> M. Bugliesi and H. M. Jamil. </author> <title> A stable model semantics for behavioral inheritance in deductive object oriented languages. </title> <editor> In G. Gottlob and M. Y. Vardi, editors, </editor> <booktitle> Proceedings of the 5th International Conference on Database Theory (ICDT), </booktitle> <pages> pages 222-237, </pages> <address> Prague, Czech Republic, 1995. </address> <publisher> Springer-Verlag. LNCS 893. </publisher>
Reference-contexts: The above features were first introduced in the context of ORLog (for Object Relationship Logic) [9]. In [9], we developed a declarative semantics for the higher-order features of ORLog, not including inheritance. In <ref> [4] </ref>, a stable model semantics for behavioral inheritance was proposed using notions of locality and inheritability similar to those proposed in [9]. By contrast, in the present paper, we account for behavioral inheritance within the logic, by capturing it within a sound and complete proof theory.
Reference: [5] <author> G. Dobbie and R. Topor. </author> <title> A Model for Inheritance and Overriding in Deductive Object-Oriented Systems. </title> <booktitle> In Sixteen Australian Computer Science Conference, </booktitle> <month> Jan-uary </month> <year> 1988. </year>
Reference-contexts: Code inheritance is left outside the language and has to be simulated by the programmer using higher-order features of the language and F-logic's pointwise overriding in a clever manner. Dobbie and Topor <ref> [5, 6] </ref> have developed a language called Gulog, inspired by a restricted fragment of F-logic. Gulog is function-free.
Reference: [6] <author> G. Dobbie and R. Topor. </author> <title> A Model for Sets and Multiple Inheritance in Deductive Object-Oriented Systems. </title> <booktitle> In Proc. 3rd Intl. DOOD Conf., </booktitle> <pages> pages 473-488, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Code inheritance is left outside the language and has to be simulated by the programmer using higher-order features of the language and F-logic's pointwise overriding in a clever manner. Dobbie and Topor <ref> [5, 6] </ref> have developed a language called Gulog, inspired by a restricted fragment of F-logic. Gulog is function-free.
Reference: [7] <author> M. </author> <title> Fitting. The family of stable models. </title> <journal> Journal of Logic Programming, </journal> <volume> 17(2/4):197, </volume> <month> November </month> <year> 1993. </year>
Reference-contexts: By contrast, in ORLog we have only one model in which we inherit neither. By analogy with the literature on negation <ref> [7] </ref>, we can say that F-logic's approach to multiple inheritance is brave while ours is cautious. Rather than debate on which is better, we would like to remark that a brave semantics for multiple inheritance destroys any hopes of a complete proof theory 9 .
Reference: [8] <author> H. M. Jamil. </author> <title> Semantics of Behavioral Inheritance in Deductive Object-Oriented Databases. </title> <type> PhD Thesis (in preparation), </type> <institution> Department of Computer Science, Con-cordia University, Canada, </institution> <year> 1995. </year>
Reference-contexts: In fact, it is local to only p and q. If we change P : o to P :: o in the body, then (10) becomes local to all four objects in P 1 since :: is a partial order <ref> [8] </ref>. Clause (14) is clearly local to all four objects. This is simply because the descriptor of (14) is a variable and is not constrained by any is-a literal in the body.
Reference: [9] <author> H. M. Jamil and L. V. S. Lakshmanan. ORLog: </author> <title> A Logic for Semantic Object-Oriented Models. </title> <booktitle> In Proc. 1st Int. Conference on Knowledge and Information Management, </booktitle> <pages> pages 584-592, </pages> <year> 1992. </year>
Reference-contexts: A special aspect of this latter feature is that it allows the programmer to influence the logic's inheritance mechanism to suit her prefered needs. The above features were first introduced in the context of ORLog (for Object Relationship Logic) <ref> [9] </ref>. In [9], we developed a declarative semantics for the higher-order features of ORLog, not including inheritance. In [4], a stable model semantics for behavioral inheritance was proposed using notions of locality and inheritability similar to those proposed in [9]. <p> A special aspect of this latter feature is that it allows the programmer to influence the logic's inheritance mechanism to suit her prefered needs. The above features were first introduced in the context of ORLog (for Object Relationship Logic) <ref> [9] </ref>. In [9], we developed a declarative semantics for the higher-order features of ORLog, not including inheritance. In [4], a stable model semantics for behavioral inheritance was proposed using notions of locality and inheritability similar to those proposed in [9]. <p> first introduced in the context of ORLog (for Object Relationship Logic) <ref> [9] </ref>. In [9], we developed a declarative semantics for the higher-order features of ORLog, not including inheritance. In [4], a stable model semantics for behavioral inheritance was proposed using notions of locality and inheritability similar to those proposed in [9]. By contrast, in the present paper, we account for behavioral inheritance within the logic, by capturing it within a sound and complete proof theory. We also develop a model-theoretic and fixpoint semantics and establish the equivalence of all three semantics. The rest of our paper is organized as follows.
Reference: [10] <author> H. M. Jamil and L. V. S. Lakshmanan. </author> <title> A declarative semantics for behavioral inheritance and conflict resolution. </title> <type> Technical report, </type> <institution> Department of Computer Science, Concordia University, Montreal, Canada, </institution> <month> April </month> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: We do not include a discussion on the fixpoint semantics in this paper for the want of space. Hence we only state the main results of our work in section 5. However, a complete discussion on the fixpoint theory as well as the general semantics may be found in <ref> [10] </ref>. In [10] we prove that (i) the fixpoint semantics and the model-theoretic semantics are equivalent, and (ii) the proof theory is sound and complete with respect to this semantics. We compare our language with previous works in section 6, and finally give our conclusions in section 7. <p> Hence we only state the main results of our work in section 5. However, a complete discussion on the fixpoint theory as well as the general semantics may be found in <ref> [10] </ref>. In [10] we prove that (i) the fixpoint semantics and the model-theoretic semantics are equivalent, and (ii) the proof theory is sound and complete with respect to this semantics. We compare our language with previous works in section 6, and finally give our conclusions in section 7. <p> We compare our language with previous works in section 6, and finally give our conclusions in section 7. A more elaborate comparison with related works can be found in <ref> [10] </ref>. 2 Overview of ORLog In this section we discuss the salient features of ORLog, its syntax and inheritance semantics using an example. <p> Details may be found in <ref> [10] </ref>. m k 7! at p. Then we apply a clause-wise term replacement fp==og and prove the body of the clause. Note that, the term replacement fp==og captures the idea of context switching which is central to the realization of code reuse in ORLog. This is the basic idea. <p> Due to lack of space, we only state the main points and the soundness and completeness theorems. We suppress proofs of all our results in this paper. The complete details may be found in <ref> [10] </ref>. We have established (Theorem 4.1) that a program P is logically equivalent to its closure P c . <p> A more detailed comparison may again be found in <ref> [10] </ref>. F-logic does not directly capture behavioral inheritance as in code reuse. The only way to realize it is by simulating it via F-logic's pointwise overriding and deduction. But then, this makes it the programmer's responsibility. Consider Example 2.1.
Reference: [11] <author> H. M. Jamil and L. V. S. Lakshmanan. </author> <title> An object-oriented front-end for deductive databases. </title> <editor> In V. S. Alagar and M. Nivat, editors, </editor> <booktitle> Proceedings of the 4th International Conference on Algebraic Methodology and Software Technology (AMAST), </booktitle> <pages> pages 581-584, </pages> <address> Montreal, Canada, </address> <month> July </month> <year> 1995. </year> <note> Springer-Verlag. LNCS 936. </note>
Reference-contexts: Similarly, the bottom-up fixpoint computation can be made more efficient, by incorporating ideas similar to the well-known magic sets method [2]. We are currently investigating these and other optimization opportunities. We have completed a prototype implementation <ref> [11, 12] </ref> based on translation to coral [19], and are working on a direct implementation. We are also investigating relaxations to the present restrictions on ORLog programs while still capturing behavioral inheritance within the logic. Acknowledgements Hasan M.
Reference: [12] <author> H. M. Jamil and L. V. S. Lakshmanan. </author> <title> Reducing inheritance to deduction by completion. </title> <type> Technical report, </type> <institution> Department of Computer Science, Concordia University, Montreal, Canada, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Similarly, the bottom-up fixpoint computation can be made more efficient, by incorporating ideas similar to the well-known magic sets method [2]. We are currently investigating these and other optimization opportunities. We have completed a prototype implementation <ref> [11, 12] </ref> based on translation to coral [19], and are working on a direct implementation. We are also investigating relaxations to the present restrictions on ORLog programs while still capturing behavioral inheritance within the logic. Acknowledgements Hasan M.
Reference: [13] <author> M. Kifer, G. Lausen, and J. Wu. </author> <title> Logical Foundations for Object-Oriented and Frame-Based Languages. </title> <journal> Journal of the Association of Computing Machinery, </journal> <month> May </month> <year> 1995. </year>
Reference-contexts: The issue gets further complicated when we allow multiple inheritance. We are then required to deal with inheritance conflicts and as a consequence may have to settle for multiple minimal models at the declarative level, e.g., as in <ref> [13] </ref>. Current solutions that are proposed in the literature are based on non-monotonic reasoning [20], program composition [3], etc. These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. <p> L&O [16] on the other hand relies on translating object-oriented logic programs into value-based conventional logic programs. However, the framework in which they accomplish this is quite narrow compared to the needs of object-oriented databases and languages. 1 Interested readers are referred to <ref> [13] </ref> for a detailed survey. Kifer et. al. [13] proposed an elegant logic, called F-logic, as a logical founda-tion for object-oriented databases. Only structural inheritance is captured in its semantics and proof theory, and for this component of the language it was shown to be sound and complete. <p> However, the framework in which they accomplish this is quite narrow compared to the needs of object-oriented databases and languages. 1 Interested readers are referred to <ref> [13] </ref> for a detailed survey. Kifer et. al. [13] proposed an elegant logic, called F-logic, as a logical founda-tion for object-oriented databases. Only structural inheritance is captured in its semantics and proof theory, and for this component of the language it was shown to be sound and complete. <p> This notion of "well-typing" is left outside the proof theory again as in F-logic, but can be dealt with using an approach similar to that adopted in <ref> [13] </ref>. We do not elaborate on this issue further here, as our main interest here is in inheritance. <p> proof tree of height k for P c ` A 0 such that A 2 [A 0 ]. 2 6 Related Research Although our language has several important differences with many of the previous works, we compare our results only with one of the best known contemporary languages, the F-logic <ref> [13] </ref> of Kifer et. al. for brevity. A more detailed comparison may again be found in [10]. F-logic does not directly capture behavioral inheritance as in code reuse. The only way to realize it is by simulating it via F-logic's pointwise overriding and deduction.
Reference: [14] <author> E. Laesen and D. Vermeir. </author> <title> A Fixpoint Semantics for Ordered Logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1(2) </volume> <pages> 159-185, </pages> <year> 1990. </year>
Reference-contexts: Current solutions that are proposed in the literature are based on non-monotonic reasoning [20], program composition [3], etc. These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. Behavioral inheritance has been studied in deductive formalisms such as Ordered Theories <ref> [14] </ref>, in logic languages such as LIFE [1], and several others. L&O [16] on the other hand relies on translating object-oriented logic programs into value-based conventional logic programs.
Reference: [15] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Thus oe must be applied to A after we apply since was incurred first. This explains our convention of right composing the substitutions in the proof rules. We denote by oe the composition of substitutions with oe as defined in <ref> [15] </ref>. Finally, the rule inheritance below is unique to ORLog. This rule accounts for the structural and behavioral inheritance in our language.
Reference: [16] <author> F.G. McCabe. </author> <title> Logic and Objects. </title> <publisher> Prentice Hall International, </publisher> <address> London, </address> <year> 1992. </year>
Reference-contexts: These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. Behavioral inheritance has been studied in deductive formalisms such as Ordered Theories [14], in logic languages such as LIFE [1], and several others. L&O <ref> [16] </ref> on the other hand relies on translating object-oriented logic programs into value-based conventional logic programs. However, the framework in which they accomplish this is quite narrow compared to the needs of object-oriented databases and languages. 1 Interested readers are referred to [13] for a detailed survey.
Reference: [17] <author> D. Miller. </author> <title> A Logical Analysis of Modules in Logic Programming. </title> <journal> Journal of Logic Programming, </journal> (6):79-108, 1989. 
Reference-contexts: We adopt this style along the lines of <ref> [17, 18] </ref>. We present below four inference rules which define the properties of the proof predicate `. <p> Then, we present the last inference rule. (empty) P c ` * 2 (and) P c ` G 1 P c ` OE G 2 [] (deduction) P c ` oe G [] = mgu (A; A 0 ) As in <ref> [17] </ref>, a proof for P c ` G is a tree rooted at P c ` G with internal nodes that are instances of one of the four inference rules and with the leaf nodes that are labeled with the figure empty.
Reference: [18] <author> L. Monteiro and A. Porto. </author> <title> Contextual Logic Programming. </title> <booktitle> In 6th ALP Intl. Conf. on Logic Programming, </booktitle> <year> 1989. </year>
Reference-contexts: We adopt this style along the lines of <ref> [17, 18] </ref>. We present below four inference rules which define the properties of the proof predicate `. <p> We use the notation P c ` G to represent the fact that the goal G is derivable from the closed program P c with a substitution 8 , i.e., P c ` G. Following <ref> [18] </ref>, the structure of the proof rules are as shown below where we read them from bottom up. Note that the application of a proof rule is contingent upon the satisfaction of the conditions specified at the right hand side of each rule.
Reference: [19] <author> R. Ramakrishnan, D. Srivastava, and S. Sudarshan. </author> <title> CORAL : Control, Relations and Logic. </title> <booktitle> In Proc. of 18th VLDB Conference, </booktitle> <year> 1992. </year>
Reference-contexts: Similarly, the bottom-up fixpoint computation can be made more efficient, by incorporating ideas similar to the well-known magic sets method [2]. We are currently investigating these and other optimization opportunities. We have completed a prototype implementation [11, 12] based on translation to coral <ref> [19] </ref>, and are working on a direct implementation. We are also investigating relaxations to the present restrictions on ORLog programs while still capturing behavioral inheritance within the logic. Acknowledgements Hasan M.
Reference: [20] <editor> D. S. Touretzky. </editor> <booktitle> The Mathematics of Inheriance Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1986. </year>
Reference-contexts: We are then required to deal with inheritance conflicts and as a consequence may have to settle for multiple minimal models at the declarative level, e.g., as in [13]. Current solutions that are proposed in the literature are based on non-monotonic reasoning <ref> [20] </ref>, program composition [3], etc. These proposals have been criticized due to the skepticism about their feasibility as an efficient computational platform. Behavioral inheritance has been studied in deductive formalisms such as Ordered Theories [14], in logic languages such as LIFE [1], and several others.
References-found: 20

