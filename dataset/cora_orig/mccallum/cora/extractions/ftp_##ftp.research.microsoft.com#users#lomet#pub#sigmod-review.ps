URL: ftp://ftp.research.microsoft.com/users/lomet/pub/sigmod-review.ps
Refering-URL: http://www.research.microsoft.com/users/lomet/pub/default.htm
Root-URL: http://www.research.microsoft.com
Title: A Review of Recent Work on Multi-attribute Access Methods  
Author: David Lomet 
Address: One Kendall Square, Bldg. 700, Cambridge, MA 02139  
Affiliation: Digital Equipment Corporation Cambridge Research Lab  
Abstract: Most database systems provide database designers with single attribute indexing capability via some form of B+tree. Multi-attribute search structures are rare, and are mostly found in systems specialized to some more narrow application area, e.g. geographic databases. The reason is that no multi-attribute search structure has been demonstrated, with high confidence, to be effective for a broad range of applications. Multi-attribute search is an active area of research. This paper reviews the state of this field and some of the difficult problems, and reviews some recent notable papers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bayer, R. and McCreight, E. </author> <title> Organization and maintenance of large ordered indices. </title> <journal> Acta Inf. </journal> <volume> 1,3(1972), </volume> <pages> 173-189. </pages>
Reference-contexts: An ordering access method would perform this range search in time linear in the number of names in the range, after an initial search logarithmic in the size of the directory. Ordering access methods applicable to arbitrary sets of key values are based on tree search. The B-tree <ref> [1, 2] </ref> is a very robust ordering access method that is ubiquitous in database systems. It is a paginated search tree with high fanout nodes that is used for one dimensional search spaces.
Reference: [2] <author> Comer, D. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys 11,2 (June 1979), </journal> <pages> 121-138. </pages>
Reference-contexts: An ordering access method would perform this range search in time linear in the number of names in the range, after an initial search logarithmic in the size of the directory. Ordering access methods applicable to arbitrary sets of key values are based on tree search. The B-tree <ref> [1, 2] </ref> is a very robust ordering access method that is ubiquitous in database systems. It is a paginated search tree with high fanout nodes that is used for one dimensional search spaces.
Reference: [3] <author> Guttman, A. R-trees: </author> <title> a dynamic index structure for spatial searching, </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <address> (Boston, Mass. </address> <year> 1984) </year> <month> 47-57. </month>
Reference-contexts: Due to spatial data overlap, a clean split, which partitions the space of a node and which results in data going to exactly one of the regions of the partition, may not be possible. The earliest method to deal with this was the R-tree <ref> [3] </ref>. Rather than partitioning the search space, R-tree index terms in a node can refer to overlapping subspaces. Search for a single point in an overlapped region will need to do multiple tree traversals, a substantial negative. Node splitting in the R-tree is complex and hard to optimize.
Reference: [4] <author> Hoel, E. and Samet, H. </author> <title> A qualitative comparison study of data structures for large line segment databases. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Diego, CA (1992) 205-214. </address>
Reference-contexts: There are no widely accepted analytic workloads for spatial structures. As a result, performing experiments on data that is "real" for some application has a credibility that simulations with synthetic data frequently lack. A recent SIG-MOD Conference paper, <ref> [4] </ref>, is illustrative of papers performing comparative studies on real data. In [4], the source of the data is the Bureau of Census TIGER/Line file for representing the roads and geographic features of the United States. <p> As a result, performing experiments on data that is "real" for some application has a credibility that simulations with synthetic data frequently lack. A recent SIG-MOD Conference paper, <ref> [4] </ref>, is illustrative of papers performing comparative studies on real data. In [4], the source of the data is the Bureau of Census TIGER/Line file for representing the roads and geographic features of the United States. The subset of the Census data used covered counties in Maryland, and was primarily line segment (roads) in form.
Reference: [5] <author> Jagadish, H. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Atlantic City, NJ (1990) 332-342. </address>
Reference-contexts: The original z-order has a second attribute, namely that at times, points adjacent in the linear space will be at some distance in the higher dimensional space (see Figure 1). This later characteristic is not an essential one. In <ref> [5] </ref>, a linearization of 2-space was described that uses a "Hilbert curve". The important aspect of the Hilbert curve is that its adjacent points are all also adjacent in the higher dimensional space. This has potentially important implications for the specification of search ranges and the performance of range searching. <p> A disadvantage is that the complexity of transforming a point in 2-space to its Hilbert curve representation is substantially greater than the cost of the bit interleaving required of z-order. A series of simulations were reported in <ref> [5] </ref>, in which search subspace size and shape were varied. The results showed the Hilbert curve to have a consistent though modest advantage for range search over z-order and a number of other linearizations.
Reference: [6] <author> Lomet, D. </author> <title> Grow and post index trees. </title> <booktitle> Proc. 2nd Symp., SSD 91, Lecture Notes in Computer Science 525 (Springer-Verlag, </booktitle> <year> 1991) </year> <month> 183-206 7 </month>
Reference-contexts: Storage utilization with node splitting is about 69%. Over the past twenty years, B-trees have been greatly refined. Things like main memory buffering, key compression, partial expansions, and large bucket size have all been exploited. A more complete review is given in <ref> [6] </ref>. Our assessment is that there is little more to gain in performance attributes for one dimensional access methods. <p> However, all answers to the question of which regions of the search space contain spatial data that overlap a given subspace are in a compact region of the mapped search space, which can be found using a range search. See Figure 2 taken from <ref> [6] </ref>, which also has a more complete discussion of the advantages of parameter space. Parameter space points effectively clusters the answer sets for containing, contained in, and intersection queries.
Reference: [7] <author> Lomet, D. and Salzberg, B. </author> <title> Access methods for multiversion data. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Portland, OR (1989) 315-324. </address>
Reference-contexts: One example of such an analysis, with a confirming simulation study was done on the time-split B-tree or TSB-tree <ref> [7] </ref>. The TSB-tree is a tree that maintains an index on versions of data by both key and transaction time. A TSB-tree node can be key-split, essentially like B-trees, or time-split with clipping (duplicating outdated versions). <p> The non-updatability in the time dimension sim 6 plifies both the TSB-tree and the resulting analytic study. All versions of data in the index start out as current versions. By varying the ratio of insertions to updates, one can control the ratio of outdated to current versions. In <ref> [7] </ref>, fringe analysis, the analytic method of choice for one dimensional access methods, was used. Several forms of storage utilization results were derived, along with quantities that contributed to these results. These were graphed as a function of the ratio of inserts to updates.
Reference: [8] <author> Lomet, D. and Salzberg, B. </author> <title> The hB-tree: a mul-tiattribute indexing method with good guaranteed performance. </title> <journal> ACM Trans. </journal> <note> Database Systems 15,4 (Dec. </note> <year> 1990) </year> <month> 625-658. </month>
Reference-contexts: The papers build on the themes that have been discussed above. The papers are grouped by topic area, and within these groupings, the paper title is used as a subheading. holey bricks have been split. 3.1 Multi-attribute Point Indexing 3.1.1 Multi-attribute Boundaries The hB-tree <ref> [8] </ref> is derived from the k-d B-tree. Its goal is to avoid downward cascading of splits, hence avoiding both re-structuring cost and adverse storage utilization.
Reference: [9] <author> Orenstein, J. and Merrett, T. </author> <title> A class of data structures for associative searching. </title> <booktitle> Proc. ACM PODS Conf., </booktitle> <address> Waterloo, Canada (1984) 181-190. </address>
Reference-contexts: Z-order <ref> [9] </ref> does this by interleaving the bits that represent the attribute values together into a single bit string. A single dimensional index method, e.g. B+trees, can then be used to search the space. This is simple and robust. Also important, it permits an existing one-dimensional access method to be used.
Reference: [10] <author> Orenstein, J. and Manola, F. </author> <title> PROBE spatial data modeling and query processing in an image database application. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 14, </volume> <month> 5 </month> <year> (1988). </year>
Reference-contexts: Particularly important, the simulations showed that the number of disk blocks fetched was a function of the amount of data in the subspace queried, not the size of the database. This applies to z-order as well. 3.2 Spatial Joins 3.2.1 Using Z-order <ref> [10] </ref> contains a z-order based algorithm for spatial join. Each spatial object is decomposed into rectangular regions through a recursive splitting of the space containing the object. The orientation and position of the splits are such that each region resulting from the decomposition is represented by a range of z-values.
Reference: [11] <author> Orenstein, J. </author> <title> Redundancy in spatial database. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Portland, OR (1989). </address>
Reference-contexts: Redundancy is greater than or equal to one (one z-value per object) and its upper bound is determined by the resolution of the grid on which the space-filling curve is defined. In <ref> [11] </ref>, the speed and accuracy of the filter step is shown to depend on redundancy. Low redundancy approximates the spatial objects poorly. The effect is to make z-valued index access inefficient, the filter step slower than it could be, and accuracy of the filter step low.
Reference: [12] <author> Orenstein, J. </author> <title> A comparison of spatial query processing techniques for native and parameter spaces. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Atlantic City, NJ (1990) 343-352. </address>
Reference-contexts: One can control this redundancy with a parameter. 3.2.3 Native vs Parameter Space Z-order based join algorithms can be applied to any kind of spatial or point object. Hence, they can be applied to parameter space as well as to native space representations. <ref> [12] </ref> compares these approaches for spatial joins. The performance results are not clear-cut, but depend on the value of min (jRj; jSj), and the size of the objects. Because of the reliance on filtering, z-order join algorithms have poor worst-case performance. Nonetheless, experimental performance results have been good.
Reference: [13] <author> Robinson, J. </author> <title> The K-D-B-tree: a search structure for large multi-dimensional dynamic indexes. </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <address> Boston, MA (1984) 10-18. </address>
Reference-contexts: Regions of higher dimensional spaces can have more complex boundaries than one-dimensional regions. Complex boundaries of the indexed subspaces make it difficult to find a simple boundary that cleanly separates the index terms into two disjoint regions. The k-d B-tree <ref> [13] </ref>, an early multi-attribute paginated search structures, uses only a single attribute value as the boundary. One can always make this work. This is very simple and search space partitioning is very effective for range searching. There are some dangers, however. Utilization will suffer if the splitting is very uneven.
Reference: [14] <author> Sellis, T., Roussopoulos, N., and Falout-sos, C. </author> <title> The R+-tree: a dynamic index for multi-dimensional objects. </title> <booktitle> Proc. VLDB Conf., </booktitle> <address> Brighton, England (1987) </address>
Reference-contexts: This can 2 lead to reduced performance, sometimes dramati-cally reduced. The spatial overlap problem can also be solved by partitioning the space and storing a copy of the data in each subspace of the partition that it intersects. This is called "clipping". It is the approach used for R+trees <ref> [14] </ref>. Clipping avoids multiple tree traversals. Range searching is simple as a single node contains all data relevant to a sub-space. However, a mix of large regions with small can lead to substantial duplication of the large regions.
Reference: [15] <author> Stonebraker, M. and Frew, J. </author> <title> The SEQUOIA 2000 Benchmark. </title> <type> SEQUOIA 2000 Technical Report No 9, </type> <institution> Electronics Research Lab U. of California, </institution> <address> Berkeley (March 1992). </address> <month> 8 </month>
Reference-contexts: Applying fringe analysis to a multi-attribute access method has not yet been done. An analytic description of an acceptable workload is required for this. Also lacking is a widely accepted experimental workload. This problem may be resolved via the creation of the Sequoia 2000 benchmark <ref> [15] </ref>, which will include experimental workloads based on real data and will be publicly distributed. Only limited work has been done on using multi-attribute indexing for joins. Exploiting indexes for spatial joins is critical to the performance of geographic applications. Research has only begun in this area.
References-found: 15

