URL: http://www.cs.wustl.edu/cs/techreports/1993/wucs-93-21.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Dynamic Reconfiguration with I/O Abstraction  
Author: Bala Swaminathan Kenneth J. Goldman 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: August 20 1993 Revised March 17 1995  
Pubnum: WUCS-93-21  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. R. Barbacci, D. L. Doubleday, C. B. Weinstock, and J. M. Wing. </author> <title> Developing applications for heterogeneous machine networks: The Durra environment. </title> <journal> Computer Systems, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Items (R2) through (R7) are necessary for both logical and physical reconfiguration. Item (R8) is necessary only for module replacement and physical reconfiguration. Various strategies for different kinds of reconfiguration has been studied. For example, a Durra <ref> [1, 2] </ref> application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes.
Reference: [2] <author> Mario R. Barbacci and Jeannette M. Wing. </author> <title> A language for distributed applications. </title> <booktitle> In International Conference on Computer Languages, </booktitle> <address> New Orleans, LA, USA, </address> <pages> pages 59-68, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Items (R2) through (R7) are necessary for both logical and physical reconfiguration. Item (R8) is necessary only for module replacement and physical reconfiguration. Various strategies for different kinds of reconfiguration has been studied. For example, a Durra <ref> [1, 2] </ref> application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. <p> Dar-win [10, 14, 12], a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin <ref> [2, 10] </ref> allow only adding or deleting processes and interconnections between them. PROFIT [9], a recent language that provides a mixture of RPC and data sharing for communication, permits dynamic binding of slots in special cases [7].
Reference: [3] <author> Jerome R. Cox, Jr. and Jonathan S. Turner. </author> <title> Project Zeus: Design of a broadband network and its application on a university campus. </title> <type> Technical Report WUCS 91-45, </type> <institution> Washington University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: An important benefit of I/O abstraction is the potential for integrating discrete data and continuous data within one uniform configuration mechanism. As a testbed for this aspect of the work, we plan to use the high speed packet-switched network that is being deployed on the Washington University campus <ref> [3] </ref>. The network, called Zeus, is based on fast packet switching technology that has been developed over the past several years and is designed to support port interfaces at up to 2:4 Gb/s.
Reference: [4] <author> David Gelernter and Nicholas Carriero. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: It is not a 5 programming language, but rather a coordination language <ref> [4] </ref> designed to work with multiple computation languages in combination.
Reference: [5] <author> Kenneth J. Goldman, Michael D. Anderson, and Bala Swaminathan. </author> <title> The Programmers' Playground: I/O abstraction for heterogeneous distributed systems. </title> <booktitle> In 27th Hawaii International Conference on System Sciences (HICSS), </booktitle> <pages> pages 363-372, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In this paper, we consider logical and physical dynamic reconfiguration in heterogeneous distributed systems whose modules are written using a new programming model called I/O abstraction <ref> [5] </ref>. Briefly, I/O abstraction is the view that each software module in a system has a set of data structures that may be externally observed and/or manipulated. This set of data structures forms the external interface (or presentation) of the module. <p> Details on element-to-aggregate connections may be found elsewhere <ref> [5] </ref>. 2.4 Playground Implementation A logical overview of a Playground system is shown in Figure 1. <p> When a module terminates, either after completion or due to some failure, the protocol sends out all the pending messages, regarding any updates, to its peers before quitting. The connection manager will then remove the process from all of its connections <ref> [5] </ref>. We treat replacing a running module by another module as a special case of physical reconfiguration (see Section 3.2), where the module is "moved" to the same machine with replacement of the code.
Reference: [6] <author> Andrzej Goscinski. </author> <title> Distributed Operating Systems: The Logical Design. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference-contexts: Reconfiguration is a planned activity, and does not include unplanned changes to the system due to hardware or software failures. However, some of the techniques for managing dynamic reconfiguration can be useful in building fault-tolerant systems. Goscinski <ref> [6] </ref> points to several important benefits of dynamic reconfiguration.
Reference: [7] <author> Brent Hailpern and Gail E. Kaiser. </author> <title> Dynamic reconfiguration in an object-based programming lan-guage with distributed shared data. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 73-80, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them. PROFIT [9], a recent language that provides a mixture of RPC and data sharing for communication, permits dynamic binding of slots in special cases <ref> [7] </ref>. Argus [13] supports reconfiguration with two phase locking over atomic objects and version management recovery techniques. Some systems support physical reconfiguration, but support for module migration often has relied upon complicated and expensive techniques for the extraction of the module's state information [16].
Reference: [8] <author> Christine R. Hofmeister and James M Purtilo. </author> <title> Dynamic reconfiguration in distributed systems: Adapting software modules for replacement. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, Pennsylvania, </address> <pages> pages 101-110, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: These problems imply certain requirements for distributed environments that support reconfiguration. Hofmeister and Purtilo put forth the following requirements for reconfiguration in 2 heterogeneous distributed systems <ref> [8] </ref> 1 : (R1) communication across heterogeneous hosts (R2) current configuration is accessible (R3) bindings (interconnections) are not compiled into modules (R4) no covert communication among modules (R5) ability to add/remove modules and bindings (R6) access to messages in transit (R7) mechanism for synchronizing activities (R8) access to module's state information <p> specifies "reconfiguration points," that are used to automatically prepare a process 1 This set of requirements does not appear in their paper, but was part of the conference presentation. 3 to participate during reconfiguration and special techniques are used to capture internal program state in order to accomplish the migration <ref> [8] </ref>. In this paper, we consider logical and physical dynamic reconfiguration in heterogeneous distributed systems whose modules are written using a new programming model called I/O abstraction [5].
Reference: [9] <author> Gail E. Kaiser and Brent Hailpern. </author> <title> An object-based programming model for shared data. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(2) </volume> <pages> 201-264, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Dar-win [10, 14, 12], a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them. PROFIT <ref> [9] </ref>, a recent language that provides a mixture of RPC and data sharing for communication, permits dynamic binding of slots in special cases [7]. Argus [13] supports reconfiguration with two phase locking over atomic objects and version management recovery techniques.
Reference: [10] <author> Jeff Kramer and Jeff Magee. </author> <title> Evolving philosophers problem: Dynamic change management. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(11) </volume> <pages> 1293-1306, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Various strategies for different kinds of reconfiguration has been studied. For example, a Durra [1, 2] application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. Dar-win <ref> [10, 14, 12] </ref>, a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them. <p> Dar-win [10, 14, 12], a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin <ref> [2, 10] </ref> allow only adding or deleting processes and interconnections between them. PROFIT [9], a recent language that provides a mixture of RPC and data sharing for communication, permits dynamic binding of slots in special cases [7].
Reference: [11] <author> Jeff Kramer, Jeff Magee, and Anthony Finkelstein. </author> <title> A constructive approach to the design of distributed systems. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 580-587, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Various strategies for different kinds of reconfiguration has been studied. For example, a Durra [1, 2] application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. Dar-win [10, 14, 12], a generalization of Conic <ref> [11, 12] </ref>, supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them.
Reference: [12] <author> Jeff Kramer, Jeff Magee, and Morris Sloman. </author> <title> Configuring distributed systems. </title> <booktitle> In 5th ACM SIGOPS European Workshop, </booktitle> <address> St. Michel, France, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Various strategies for different kinds of reconfiguration has been studied. For example, a Durra [1, 2] application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. Dar-win <ref> [10, 14, 12] </ref>, a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them. <p> Various strategies for different kinds of reconfiguration has been studied. For example, a Durra [1, 2] application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. Dar-win [10, 14, 12], a generalization of Conic <ref> [11, 12] </ref>, supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them.
Reference: [13] <author> B. Liskov. </author> <title> Distributed programming in Argus. </title> <journal> CACM, </journal> <volume> 31(3) </volume> <pages> 300-313, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them. PROFIT [9], a recent language that provides a mixture of RPC and data sharing for communication, permits dynamic binding of slots in special cases [7]. Argus <ref> [13] </ref> supports reconfiguration with two phase locking over atomic objects and version management recovery techniques. Some systems support physical reconfiguration, but support for module migration often has relied upon complicated and expensive techniques for the extraction of the module's state information [16].
Reference: [14] <author> Jeff Magee, Naranker Dulay, and Jeff Kramer. </author> <title> Structuring parallel and distributed programs. </title> <booktitle> In International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 102-117, </pages> <month> March </month> <year> 1992. </year> <institution> Imperial College of Science, Technology and Medicine, UK. </institution>
Reference-contexts: Various strategies for different kinds of reconfiguration has been studied. For example, a Durra [1, 2] application can evolve during execution by dynamically removing processes and their ports and instantiating new processes and their ports without affecting other processes. Dar-win <ref> [10, 14, 12] </ref>, a generalization of Conic [11, 12], supports logical reconfiguration where the programmer adds code that adapts program modules to participate in reconfiguration. Both Durra and Darwin [2, 10] allow only adding or deleting processes and interconnections between them.
Reference: [15] <author> James M. Purtilo and Pankaj Jalote. </author> <title> An environment for prototyping distributed applications. </title> <booktitle> In Proceedings of the 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 588-594, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Argus [13] supports reconfiguration with two phase locking over atomic objects and version management recovery techniques. Some systems support physical reconfiguration, but support for module migration often has relied upon complicated and expensive techniques for the extraction of the module's state information [16]. Platforms like Polylith <ref> [15] </ref> support moving a process to another machine while the application is executing. In Polylith, configuration is expressed in terms of a set of procedure call bindings.
Reference: [16] <author> Jonathan M. Smith. </author> <title> A survey of process migration mechanisms. </title> <journal> Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1988. </year> <note> 20 APPENDIX </note>
Reference-contexts: Argus [13] supports reconfiguration with two phase locking over atomic objects and version management recovery techniques. Some systems support physical reconfiguration, but support for module migration often has relied upon complicated and expensive techniques for the extraction of the module's state information <ref> [16] </ref>. Platforms like Polylith [15] support moving a process to another machine while the application is executing. In Polylith, configuration is expressed in terms of a set of procedure call bindings. <p> In this paper, we presented mechanisms for both logical and physical reconfiguration that take advantages of these properties. Process migration techniques often do not take advantage of the way program modules are written <ref> [16] </ref> and may spend time capturing unnecessary state information. Low level state capturing is not always easy and may not work across different architectures or languages. As an alternative, we proposed semantic migration in which the meaning, not the low level bits, are migrated.
References-found: 16

