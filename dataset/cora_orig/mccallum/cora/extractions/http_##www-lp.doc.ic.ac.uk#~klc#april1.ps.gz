URL: http://www-lp.doc.ic.ac.uk/~klc/april1.ps.gz
Refering-URL: http://www-lp.doc.ic.ac.uk/software.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: ffgm,klcg@doc.ic.ac.uk  
Title: April Agent PRocess Interaction Language  
Author: F.G. M c Cabe, K.L.Clark 
Date: November 25, 1994  
Address: London  
Affiliation: Dept. of Computing Imperial College  
Abstract: In this paper we introduce key features of a programming language for building DAI and other types of distributed applications requiring the transmission and manipulation of complex symbolic data. The language is high-level and yet also offers a simple and smooth interface to other programming languages such as "C". April is oriented to the implementation of multi-agent systems. However, April is NOT a `multi-agent applications language'. It does not directly offer high level features such as: planners, problem solvers and knowledge representation systems that a multi-agent applications language might be expected to include. April is more an object based concurrent language with objects as processes. As argued in [10], this is a highly suitable base for extension to DAI and multi-agent application platforms.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha and C. Hewitt. </author> <title> Concurrent Programming using Actors. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: [6], and to PCN [9], CSP [11], Guarded Commands [8], LISP [17], Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept <ref> [1] </ref>. We can quite easily simulate actor style programs in April. Program 6.1 is the April equivalent of the factorial program given in [1]. factorial () - [doit integer?n] -&gt; - n=0 -&gt; -1 &gt;> replyto; factorial ()- | n&gt;0 -&gt; -[doit n-1] ~~ fork factcust (replyto,n) &gt;> self; factorial ()- <p> style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept <ref> [1] </ref>. We can quite easily simulate actor style programs in April. Program 6.1 is the April equivalent of the factorial program given in [1]. factorial () - [doit integer?n] -&gt; - n=0 -&gt; -1 &gt;> replyto; factorial ()- | n&gt;0 -&gt; -[doit n-1] ~~ fork factcust (replyto,n) &gt;> self; factorial ()- - factcust (handle?customer,integer?n) - integer?f -&gt; n*f &gt;> customer -; Program 6.1: An actor style program 12 We have written it as a
Reference: [2] <author> J. Armstrong, R. Virding, and M. Williams. </author> <title> Concurrent Programming in Erlang. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1993. </year>
Reference-contexts: If it matches none of the patterns, the process again suspends. It will continue testing each new message until one is received that is accepted by the choice statement. The April semantics for a message receive choice statement is similar to that used in Erlang <ref> [2] </ref>. Order of arrival of two messages M1 and M2 in the message buffer of a process is not necessarily time order of transmission. April cannot preserve time order for messages sent from different processes, because there is no global clock or clock synchronization assumed.
Reference: [3] <author> D. Chu. Ic-prolog ii: </author> <title> a language for implementing intelligent distributed systems. </title> <booktitle> In Proceedings of the 1992 Workshop on Cooperating Knowledge Based Systems. </booktitle> <institution> Dake centre, University of Keele, UK, </institution> <year> 1993. </year>
Reference-contexts: April was explicitly designed to serve as an implementation language for MAIL, acting as an intermediary between MAIL and C. MAIL was prototyped using a distributed logic programming system, IC-Prolog 1 II <ref> [3] </ref>. April was distilled from the features of the IC-Prolog II system that were found to be of most use in implementing MAIL. Sadly, the ESPRIT project ended before the implementation of MAIL on April could be seriously investigated.
Reference: [4] <author> K.L. Clark and S. Gregory. </author> <title> Parlog:parallel programming in logic. </title> <journal> ACM Toplas, </journal> <volume> 8(1) </volume> <pages> 1-49, </pages> <year> 1986. </year>
Reference-contexts: It needs to know that the pattern abstraction it will send will be applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog <ref> [4] </ref> and its object oriented extension Polka [6], and to PCN [9], CSP [11], Guarded Commands [8], LISP [17], Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a
Reference: [5] <author> W.F. Clocksin and C.S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka [6], and to PCN [9], CSP [11], Guarded Commands [8], LISP [17], Prolog <ref> [5] </ref> and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1]. We can quite easily simulate actor style programs in April.
Reference: [6] <author> A. Davison. Polka: </author> <title> a parlog object oriented language. </title> <type> Internal report, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London, </address> <year> 1988. </year>
Reference-contexts: It needs to know that the pattern abstraction it will send will be applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka <ref> [6] </ref>, and to PCN [9], CSP [11], Guarded Commands [8], LISP [17], Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1].
Reference: [7] <author> D. Weerasooriya et al. </author> <title> Design of a concurrent agent oriented language. </title> <editor> In M. Woodridge and N. Jennings, editors, </editor> <booktitle> Pre-Proceedings of ECAI94 Workshop on Agent Theories, Architectures and Languages, </booktitle> <year> 1994. </year> <title> [8] e.W. Dijkstra. The discipline of programming. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1977. </year>
Reference-contexts: For example, we show how the contract net protocol could be implemented, and how a skills server agent might be programmed. Finally, we sketch how it might be used to implement an agent based programming language similar to the recently proposed AgentSpeak <ref> [7] </ref>. We also show how we can program migrating agents. 2 Specific features of April 2.1 Publically named processes All processes in April have names called handles associated with them. <p> forked, just as our server program of Program 3.3. 7 On Implementing a DAI platform on top of April In this section we shall indicate some of the ways that the features of April could be used to implement a DAI or agent based platform similar in functionality to AgentSpeak <ref> [7] </ref>. This is a recently proposed concurrent agent based programming language designed to extend concepts of object based concurrent programming, which April definitely embodies. An agent would be represented as a publically named process. This process would itself have internal parallelism. <p> This knowledge would be represented as several sets of records, each set of records being the current facts for some relation used by the agent to encode its knowledge, as in AgentSpeak <ref> [7] </ref>. The knowledge needs to be held in a separate process, that accepts messages to update and access the knowledge, if we want to allow the agent to be concurrently executing several tasks or plans. <p> The agent could offer services, and the actions linked to these services could be held in a data base associating a pattern of use of the service with a plan, defined as a procedure <ref> [7] </ref>. In April we can implement such a data base as a set of pairs comprising a pattern abstraction and a procedure abstraction which is held within the interface process.
Reference: [9] <author> I. Foster and S. Tuecke. </author> <title> Parallel programming with PCN. </title> <type> Internal report anl-91/32, </type> <institution> Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: that the pattern abstraction it will send will be applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka [6], and to PCN <ref> [9] </ref>, CSP [11], Guarded Commands [8], LISP [17], Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1].
Reference: [10] <author> L. Gasser and J-P. Briot. </author> <title> Object based concurrent programming and DAI. </title> <editor> In N. A. Avouris and L. Gasser, editors, </editor> <booktitle> Disributed Artificial Intelligence: Theory and Praxis. </booktitle> <year> 1992. </year>
Reference: [11] <author> C.A. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: pattern abstraction it will send will be applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka [6], and to PCN [9], CSP <ref> [11] </ref>, Guarded Commands [8], LISP [17], Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1].
Reference: [12] <author> K. E. Iverson. </author> <title> A Programming Language. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka [6], and to PCN [9], CSP [11], Guarded Commands [8], LISP [17], Prolog [5] and APL <ref> [12] </ref>. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1]. We can quite easily simulate actor style programs in April.
Reference: [13] <author> K.L.Clark and F.G.McCabe. </author> <title> Distributed and object oriented symbolic programming in april. </title> <type> Technical report, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London, </address> <year> 1994. </year>
Reference-contexts: With it, it is possible to build language `layers' on top of the basic language to incorporate some additional features. For example, it is possible to define new operators in the language as macros. We have used this facility to provide an Object Oriented extension to April <ref> [13] </ref>. In particular, a package of macros and library procedures could form the basis of MAIL [18] a high level language intended to capture many common multi-agent applications. The MAIL specification, and a preliminary version of April, were developed as part of an of an ESPRIT project Imagine. <p> Using the macro processing facility, we can easily extend the language to have extra message send operators with the semantics of the ABCL/1 now and future forms. (A macro to implement the now form of message send is given in <ref> [13] </ref>.) ABCL/1 also has two modes of message sending: normal and express. An express message sent to an ABCL/1 object/process interrupts the current processing of any normal message, suspending the processing. The action associated with the express message is then executed.
Reference: [14] <author> F.G. McCabe. </author> <title> April agent process interaction language. </title> <type> Internal report, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London, </address> <year> 1994. </year>
Reference-contexts: In our future research we intend to build several DAI platforms on top of April. A full specification of April is given in <ref> [14] </ref>. Please contact the second author if you are interested using the language.
Reference: [15] <author> E. Shibayama and A. Yonezawa. </author> <title> Distributed computing in ABCL/1. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: In April the action can be specified by any April statement or group of statements. * The actor paradigm does not guarantee to preserve order of messages sent from an actor A1 to an actor A2. April does. 6.2 ABCL/1 April is closer to the ABCL <ref> [15] </ref> derivative of the actor paradigm. ABCL/1 preserves order of messages between a given pair of processes. Like us, the authors of ABCL/1 consider this to be essential for certain 3 Remember that the sender of a message can always be identified by the value of the sender keyword. <p> The now form is synchronous send, in which the sender suspends until a reply is received. The future form is asynchronous but the sender can later suspend if the reply has not yet been received and placed in some variable associated with the future send. However, as shown in <ref> [15] </ref>, the future and now forms of message send can be implemented using just the past form providing the language allows the explicit setting of the replyto address, and it can search for messages in its message buffer. Both of these facilities are in April.
Reference: [16] <author> Reid G. Smith. </author> <title> The contract net protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 1104-1113, </pages> <year> 1980. </year>
Reference-contexts: to process such messages are straightforward to implement. [kill,handle?TaskH] :: [TaskH,sender] in TaskHandles -&gt; f TaskHandles := TaskHandles ^" [TaskH,sender]; kill (TaskId)g is a guarded command to process a kill message for a task identified by its handle TaskH. 4 A Second Example Contract Net Protocol The contract net protocol <ref> [16] </ref> is used by an agent the contractor when it isn't sure which other agent should be asked to perform a given task. It therefore `asks' a set of agents to bid for the work.
Reference: [17] <author> G. L. Steele and et. al. </author> <title> An overview of common lisp. </title> <booktitle> In ACM Symposium on Lisp and Functional Programming, </booktitle> <month> August </month> <year> 1982. </year>
Reference-contexts: will be applied to a skill entry record. 6 Influences and related languages Many of the features presented in April are taken from other languages; in particular much is owed to Parlog [4] and its object oriented extension Polka [6], and to PCN [9], CSP [11], Guarded Commands [8], LISP <ref> [17] </ref>, Prolog [5] and APL [12]. 6.1 The actor paradigm The process style of programming in April, and the pattern matching on messages, comes from the Parlog family; although clearly there is a close similarity with the actors concept [1]. We can quite easily simulate actor style programs in April.
Reference: [18] <author> Donald Steiner, Alastair Burt, Michael Kolb, and Christelle Lerin. </author> <title> The conceptual framework for mail: An overview. </title> <type> Internal report, </type> <institution> DFKI, </institution> <year> 1992. </year> <month> 18 </month>
Reference-contexts: For example, it is possible to define new operators in the language as macros. We have used this facility to provide an Object Oriented extension to April [13]. In particular, a package of macros and library procedures could form the basis of MAIL <ref> [18] </ref> a high level language intended to capture many common multi-agent applications. The MAIL specification, and a preliminary version of April, were developed as part of an of an ESPRIT project Imagine.
References-found: 17

