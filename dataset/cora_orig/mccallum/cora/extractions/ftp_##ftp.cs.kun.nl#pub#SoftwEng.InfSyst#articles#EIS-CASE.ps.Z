URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EIS-CASE.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: erikp@cs.kun.nl  
Title: Towards an Integration of Evolving Information Systems and CASE-Tools Proper. Towards an Integration of Evolving
Author: H.A. Proper S. Brinkkemper and F. Harm-sen, 
Date: June 1993.  
Note: Published as: H.A.  editors, Proceedings of the Fourth Workshop  23-33, Paris, France,  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Department of Information Systems, University of Nijmegen  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference: [Ari91] <author> G. Ariav. </author> <title> Temporally oriented data definitions: Managing schema evolution in temporally oriented databases. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6 </volume> <pages> 451-467, </pages> <year> 1991. </year>
Reference-contexts: The need for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects) has also been identified in [MS90], <ref> [Ari91] </ref>, [Rod91], [JMSV92] and [FOP92b]. The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations. <p> Related research regarding evolving information systems can be found in [MS90], <ref> [Ari91] </ref> and in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]).
Reference: [BCG + 87] <author> J. Banerjee, H.-T. Chou, J.F. Garza, W. Kim, D. Woels, and N. Ballou. </author> <title> Data Model Issues for Object-Oriented Applications. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 3-26, </pages> <year> 1987. </year>
Reference-contexts: Related research regarding evolving information systems can be found in [MS90], [Ari91] and in the area of version modelling in engineering databases: <ref> [BCG + 87] </ref>, [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. <p> Related research regarding evolving information systems can be found in [MS90], [Ari91] and in the area of version modelling in engineering databases: <ref> [BCG + 87] </ref>, [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. Version modelling in engineering databases offers a fast body of knowledge concerning evolution of sev eral types of engineering applications.
Reference: [Big88] <author> J. Bigelow. </author> <title> Hypertext and CASE. </title> <journal> IEEE Software, </journal> <volume> 5(2) </volume> <pages> 23-27, </pages> <year> 1988. </year>
Reference: [BKKK87] <author> J. Banerjee, W. Kim, H.J. Kim, and H.F. Korth. </author> <title> Semantics and Implementation of Schema Evolution in Object-Oriented Databases. </title> <booktitle> In ACM SIGMOD Int. Conf. Management of Data, </booktitle> <pages> pages 311-322, </pages> <year> 1987. </year>
Reference: [BPW93] <author> C.A.J. Burgers, H.A. Proper, and Th.P. van der Weide. </author> <title> An Information System organized as Stratified Hypermedia. </title> <type> Technical Report, </type> <note> In Preparation, </note> <institution> Department of Information Systems, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference: [Bri90] <author> S. Brinkkemper. </author> <title> Formalisation of Information Systems Modelling. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year> <pages> Page 9 </pages>
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The need for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects) has also been identified in [MS90], [Ari91], [Rod91], [JMSV92] and <ref> [FOP92b] </ref>. The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations. <p> The notion of application model is defined ([FOP92a], <ref> [FOP92b] </ref>, [PW93]) as the formal description of the universe of discourse. In most traditional information systems, the part of the system that is allowed to change in the course of time is very restricted.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference: [GS90] <author> P.K. Garg and W. Scacchi. </author> <title> A Hypertext System to Manage Software Life-Cycle Documents. </title> <journal> IEEE Software, </journal> <volume> 7(3) </volume> <pages> 90-98, </pages> <year> 1990. </year>
Reference-contexts: This has lead to the idea of building a hypertext browser for such traditional information systems ([BPW93]), enabling an improved information disclosure. This browser allows for query by navigation, i.e. building a query whilst navigating through the information structure. Similar browsers have also proved their usefullness in CASE-Tools ([Big88], <ref> [GS90] </ref>, [Hag92]). For an EIS-Shell, the need for a hypertext-like browsing mechanism for the current, as well as past information structures, of the application model his tory is even more pressing.
Reference: [Hag92] <author> T.M. Hagensen. </author> <title> Hyperstructure CASE Tools. </title> <editor> In B. Theodoulidis and A. Sut-cliffe, editors, </editor> <booktitle> Proceedings of the Third Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 291-297, </pages> <address> Manchester, United Kingdom, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: This browser allows for query by navigation, i.e. building a query whilst navigating through the information structure. Similar browsers have also proved their usefullness in CASE-Tools ([Big88], [GS90], <ref> [Hag92] </ref>). For an EIS-Shell, the need for a hypertext-like browsing mechanism for the current, as well as past information structures, of the application model his tory is even more pressing.
Reference: [Hof93] <author> A.H.M. ter Hofstede. </author> <title> Information Mod-elling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year> <note> (To appear). </note>
Reference: [HPW92] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Mod-elling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Traditionally, a world model is provided as a fixed data model conforming to a modelling technique like NIAM ([NH89]), ER ([Che76]), or for more complex applications a schema conform IFO ([AH87]), or PSM ([HW93], <ref> [HPW92] </ref>) together with an information base conforming to this data model. The other part of the application model is the action model. The action model is a set of action specifications, describing the transitions that can be performed by the system.
Reference: [HSV89] <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable Specifications for Distributed Information Systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 139-156. </pages> <address> North-Holland/IFIP, Amsterdam, The Nether-lands, </address> <year> 1989. </year>
Reference: [HVWB90] <author> A.H.M. ter Hofstede, T.F. Verhoef, G.M. Wijers, and S. Brinkkemper. </author> <title> The SOCRATES project. </title> <editor> In S. Brinkkemper and G.M. Wijers, editors, </editor> <booktitle> Proceedings of the First Workshop on the Next Generation of CASE Tools, </booktitle> <address> Noordwijkerhout, The Netherlands, </address> <month> April </month> <year> 1990. </year>
Reference: [HW92] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Formalisation of techniques: chopping down the methodology jungle. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 57-65, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The way of support of a method, refers to the support of the method by (automated) tools. These five components of a method have been illustrated in figure 10, which is taken from <ref> [HW92] </ref>, and based on [Wij91]. The way of thinking of an evolving information system has been discussed briefly in the previous sections. Objective 3 provides the way of controlling, and some indications for the way of working.
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The need for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects) has also been identified in [MS90], [Ari91], [Rod91], <ref> [JMSV92] </ref> and [FOP92b]. The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations. <p> Related research regarding evolving information systems can be found in [MS90], [Ari91] and in the area of version modelling in engineering databases: [BCG + 87], [Kat90], <ref> [JMSV92] </ref>. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. <p> In traditional approaches to the evolution of information systems, and software evolution in general, a structural change still requires the replacement of the old system by a new system. This latter notion of evolution is the approach to evolving information systems as taken in <ref> [JMSV92] </ref>, there the focus is on the support of evolution of the specification of the information system alone.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference-contexts: Related research regarding evolving information systems can be found in [MS90], [Ari91] and in the area of version modelling in engineering databases: [BCG + 87], <ref> [Kat90] </ref>, [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. <p> Version modelling in engineering databases offers a fast body of knowledge concerning evolution of sev eral types of engineering applications. The requirements for evolving information systems ([FOP92b]) are indeed related to the general requirements for version modelling as presented in <ref> [Kat90] </ref>. An important requirement for evolving information systems, however, is that changes to the structure can be made online. In traditional approaches to the evolution of information systems, and software evolution in general, a structural change still requires the replacement of the old system by a new system.
Reference: [KBC + 89] <author> W. Kim, N. Ballou, H.-T. Chou, J.F. Garza, and D.Woelk. </author> <title> Features of the ORION Object-Oriented Database. </title> <editor> In W. Kim and F.H. Lochovsky, editors, </editor> <title> Object-Oriented Concepts, Databases, and Applications, </title> <publisher> ACM Press, Frontier Series, </publisher> <pages> pages 251-282. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Related research regarding evolving information systems can be found in [MS90], [Ari91] and in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], <ref> [KBC + 89] </ref>). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. Version modelling in engineering databases offers a fast body of knowledge concerning evolution of sev eral types of engineering applications.
Reference: [McC89] <author> C.L. McClure. </author> <title> CASE is Software Automation. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: Furthermore, the rise of (software!) automation costs is of increasing concern to many or-ganisations ([VW91]). The need for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects) has also been identified in <ref> [MS90] </ref>, [Ari91], [Rod91], [JMSV92] and [FOP92b]. The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations. <p> Related research regarding evolving information systems can be found in <ref> [MS90] </ref>, [Ari91] and in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to <p> Related research regarding evolving information systems can be found in <ref> [MS90] </ref>, [Ari91] and in the area of version modelling in engineering databases: [BCG + 87], [Kat90], [JMSV92]. A first database system supporting some aspects of evolution is the ORION system ([BKKK87], [BCG + 87], [KBC + 89]). In [MS90] a relational algebra is presented in which relational tables are allowed to evolve, e.g. change their arity. Version modelling in engineering databases offers a fast body of knowledge concerning evolution of sev eral types of engineering applications.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [OHFB92] <author> J.L.H. Oei, L.J.G.T. van Hemmen, E.D. Falkenberg, and S. Brinkkemper. </author> <title> The Meta Model Hierarchy: A Framework for Page 10 Information System Concepts and Tech--niques. </title> <type> Technical Report 92-17, </type> <institution> Department of Information Systems, University of Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: EIS User Interf. Hypertext Browser CASE User Interf. EIS Shell CASE Tool (IPSE) 6 6 c c I # # Current AMH AM Update End User Information Analyst CASE-Tool 6 Second Order Evolution and Evolving CASE Shells In <ref> [OHFB92] </ref> the notion of evolution of the second order is defined as the ability to change the used modelling techniques for the application model of an evolving information system in the course of time.
Reference: [PW93] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Aus-tralian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: as a CASE-Shell ([HVWB90], [VHW91]) is discussed in section 6. 2 An Architecture for Evolv ing Information Systems In this section, we provide an overview of the architecture for evolving information systems, and discuss the way in which the evolution of application domains is modelled (for more details, refer to <ref> [PW93] </ref>). We start out with the identification of that part of an information system that can be subject to evolution, due to evolution of the universe of discourse. From this definition, the difference between a traditional information system, and its evolving counterpart, will become clear. <p> The notion of application model is defined ([FOP92a], [FOP92b], <ref> [PW93] </ref>) as the formal description of the universe of discourse. In most traditional information systems, the part of the system that is allowed to change in the course of time is very restricted. <p> Several approaches can be taken to the modelling of this evolution. In <ref> [PW93] </ref>, these alternative approaches are discussed in more detail. In our approach, we treat the evolution of an application model as a distinct concept. <p> Objective 1 provides the way of modelling of an EIS-Shell. The exact way of modelling in an EIS-Shell partially depends on the chosen modelling techniques for the application model. Finally, the EIS-Shell itself (objective 2) provides the way of support of the evolving information system method. In <ref> [PW93] </ref>, the focus is on objective 1, i.e. the way of modelling of an evolving information system. In this article we focus on the way of support as provided by an EIS-Shell, and how it can be enhanced by the support of a CASE-Tool. <p> Furthermore, the well-formedness of the evolution of the application model will be maintained. In order to do this, the updated application model must be related to the application model history as whole (see <ref> [PW93] </ref>). This is also the reason why the entire application model history has to be communicated to the CASE-Tool. One of the requirements for a set of (integrated) CASE-Tools, is that it should have a consistent user interface, i.e. the user interfaces have a similar look-and-feel.
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically changing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The need for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects) has also been identified in [MS90], [Ari91], <ref> [Rod91] </ref>, [JMSV92] and [FOP92b]. The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A Taxonomy of Time in Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, </address> <year> 1985. </year>
Reference: [Som89] <author> I. Sommerville. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: Furthermore, we look at the reverse, and relate the notion of CASE-Shell ([HVWB90]) to an EIS-Shell. The way of controlling/working of an EIS-Shell will be closely related to the prototyping approach (see for instance <ref> [Som89] </ref>) to system development, as an EIS-Shell allows for quick changes of the application model.
Reference: [VHW91] <author> T.F. Verhoef, A.H.M. ter Hofstede, and G.M. Wijers. </author> <title> Structuring modelling knowledge for CASE shells. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 502-524, </pages> <address> Trond-heim, Norway, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Two possible integrations between EIS-Shells and CASE-Tools are discussed in section 5 and 6. The support which can be provided by CASE-Tools to EIS-Shells is discussed in section 5. Conversely, the effect of con sidering an EIS-Shell as a CASE-Shell ([HVWB90], <ref> [VHW91] </ref>) is discussed in section 6. 2 An Architecture for Evolv ing Information Systems In this section, we provide an overview of the architecture for evolving information systems, and discuss the way in which the evolution of application domains is modelled (for more details, refer to [PW93]).
Reference: [VW91] <author> Th.H. Visschedijk and R.N. van der Werff. </author> <title> (R)evolutionary system development in practice. </title> <journal> Journal of Software Research, </journal> <pages> pages 46-57, </pages> <month> December </month> <year> 1991. </year>
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.- P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference: [Wij91] <author> G.M. Wijers. </author> <title> Modelling Support in Information Systems Development. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: The three objectives as stated above, can together be regarded as an evolving information systems method. This can be motivated by relating these objectives to the components of a method. Several definitions of the concept of method exist. An elaborated discussion can be found in <ref> [Wij91] </ref>. According to [Wij91] a method can be dissected in the following five aspects: 1. The way of thinking should provide a paradigm. <p> The three objectives as stated above, can together be regarded as an evolving information systems method. This can be motivated by relating these objectives to the components of a method. Several definitions of the concept of method exist. An elaborated discussion can be found in <ref> [Wij91] </ref>. According to [Wij91] a method can be dissected in the following five aspects: 1. The way of thinking should provide a paradigm. <p> The way of support of a method, refers to the support of the method by (automated) tools. These five components of a method have been illustrated in figure 10, which is taken from [HW92], and based on <ref> [Wij91] </ref>. The way of thinking of an evolving information system has been discussed briefly in the previous sections. Objective 3 provides the way of controlling, and some indications for the way of working.
References-found: 34

