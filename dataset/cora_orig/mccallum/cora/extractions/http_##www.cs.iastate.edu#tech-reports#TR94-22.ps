URL: http://www.cs.iastate.edu/tech-reports/TR94-22.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Foundations of Object-Oriented Languages TR94-22  
Author: Giuseppe Castagna and Gary T. Leavens 
Address: 226 Atanasoff Ames, IA 50011  
Affiliation: Iowa State University of Science and Technology Department of Computer Science  
Date: November 23, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Cardelli. </author> <title> A theory of primitive objects: second-order systems. </title> <editor> In D. San-nella, editor, </editor> <booktitle> Proc. of European Symposium on Programming, volume 788 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-25, </pages> <address> New York, NY, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: As a result he obtained a type inference algorithm for the given type system, thereby solving an open problem. Luca Cardelli: Primitive Object Types with Self. Luca Cardelli described joint work with Martn Abadi [2], which is an improvement of the work in <ref> [1] </ref>. The problem he addressed was the definition of a primitive calculus to model object-oriented programming. The necessity of such a calculus is supported by the problems met in performing typing and sub-typing. A focus of this work is the type of self. <p> The necessity of such a calculus is supported by the problems met in performing typing and sub-typing. A focus of this work is the type of self. The starting calculus is the untyped calculus presented in <ref> [1] </ref>, while the starting type theory is the second order type theory of [4] with some improvements: a new quantifier Obj is used which, unlike the previous quantifier, can "move points", override self-returning methods, and encode classes.
Reference: [2] <author> Martn Abadi and Luca Cardelli. </author> <title> An imperative object calculus. </title> <note> Draft available on the WWW via the URL http://www.research.digital.com/ SRC/personal/Luca Cardelli/Papers.html., </note> <year> 1994. </year>
Reference-contexts: Smith gave some rules for reasoning about LOOP. He also discussed the proof of the soundness of the type system of SOOP, which is done by subject-reduction. Martn Abadi: An imperative object calculus. Martn Abadi presented joint work with Luca Cardelli [3] <ref> [2] </ref>. The problem he addressed is the definition of a primitive calculus to model object-oriented programming. The necessity of such a calculus is supported by the problems met in performing typing and subtyping. In particular, in this work, the modeling and typing of imperative features is studied. <p> As a result he obtained a type inference algorithm for the given type system, thereby solving an open problem. Luca Cardelli: Primitive Object Types with Self. Luca Cardelli described joint work with Martn Abadi <ref> [2] </ref>, which is an improvement of the work in [1]. The problem he addressed was the definition of a primitive calculus to model object-oriented programming. The necessity of such a calculus is supported by the problems met in performing typing and sub-typing.
Reference: [3] <author> Martn Abadi and Luca Cardelli. </author> <title> A semantics of object types. </title> <booktitle> In Ninth Annual IEEE Symposium on Logic in Computer Science, Paris, France, </booktitle> <pages> pages 332-341, </pages> <address> Los Alamitos, CA, </address> <month> July </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: Smith gave some rules for reasoning about LOOP. He also discussed the proof of the soundness of the type system of SOOP, which is done by subject-reduction. Martn Abadi: An imperative object calculus. Martn Abadi presented joint work with Luca Cardelli <ref> [3] </ref> [2]. The problem he addressed is the definition of a primitive calculus to model object-oriented programming. The necessity of such a calculus is supported by the problems met in performing typing and subtyping. In particular, in this work, the modeling and typing of imperative features is studied.
Reference: [4] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects | untyped and first-order systems. </title> <editor> In Masami Hagiya and John C. Mitchell, editors, </editor> <booktitle> Theoretical Aspects of Computer Software, volume 789 of Lecture Notes in Computer Science, </booktitle> <pages> pages 296-320. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: The necessity of such a calculus is supported by the problems met in performing typing and sub-typing. A focus of this work is the type of self. The starting calculus is the untyped calculus presented in [1], while the starting type theory is the second order type theory of <ref> [4] </ref> with some improvements: a new quantifier Obj is used which, unlike the previous quantifier, can "move points", override self-returning methods, and encode classes. Special annotations are used to identify read-write fields (typically instance variables), read-only fields (typically methods), and write-only fields.
Reference: [5] <author> Serge Abiteboul, Paris C. Kanellakis, and Em-manuel Waller. </author> <title> Method schemas (preliminary report). </title> <booktitle> In Principles of Data Base Systems, Nashville, </booktitle> <pages> pages 16-27. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: While the delegation-based frameworks are essentially built-in, Cardelli demonstrated the expressibility of class-based frameworks by closely emulating TOOPLE [8]. Emmanuel Waller: Method Schemas. Emmanuel Waller described joint work with Serge Abiteboul and Paris Kanellakis <ref> [5] </ref>. He addressed the problem of static verification of consistency of method schemas (decidability and complexity of var ious cases). 4 A method schema is a simple programming for-malism for object-oriented databases with features such as classes, methods, inheritance, name overloading, and late binding.
Reference: [6] <author> Roberto M. Amadio and Luca Cardelli. </author> <title> Sub-typing recursive types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Such analyses have the advantage that they can be applied to untyped languages, where the more traditional abstract inter pretation needs types for defining abstract domains. More in detail he considered the untyped lambda calculus with zero and successor together with the type system defined by Amadio and Cardelli <ref> [6] </ref> and composed by recursive, arrow, top, and bottom types and Int, plus a subtyping relation with subsumption. Palsberg defined the safety analysis of a term as the resolution of a given set of constraints and showed a cubic time algorithm that computes it.
Reference: [7] <author> Andrew Black and Jens Palsberg. </author> <title> Foundations of object-oriented languages: Workshop report. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 29(3) </volume> <pages> 3-11, </pages> <month> March </month> <year> 1994. </year> <note> The bibliography was truncated in the published version. Obtain the full report by anonymous ftp from crl.dec.com in pub/DEC/sigplan94.ps.Z. </note>
Reference-contexts: This series of workshops is organized by Kim Bruce and Giuseppe Longo. The previous edition was held in Stanford and has been reported in <ref> [7] </ref>. This year's workshop was held in the Conserva-toire National des Arts et Metiers and organized by the Laboratoire d'Informatique de l'Ecole Nor-male Superieure; local arrangements were handled by Roberto Bellucci and Giuseppe Castagna. Participation was by invitation only (see the appendix).
Reference: [8] <author> K.B. Bruce. </author> <title> A paradigmatic object-oriented programming language: Design, static typing and semantics. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(2) </volume> <pages> 127-206, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Although very few primitives are used, the resulting calculus is powerful enough to express object types, class types, and method specialization, covering both class-based and delegation-based frameworks. While the delegation-based frameworks are essentially built-in, Cardelli demonstrated the expressibility of class-based frameworks by closely emulating TOOPLE <ref> [8] </ref>. Emmanuel Waller: Method Schemas. Emmanuel Waller described joint work with Serge Abiteboul and Paris Kanellakis [5].
Reference: [9] <author> Kim B. Bruce, Angela Schuett, and Robert van Gent. </author> <title> A type-safe polymorphic object-oriented language. </title> <note> Obtain by anonymous ftp from cs.williams.edu in pub/kim/PolyTOIL.dvi., </note> <month> July </month> <year> 1994. </year>
Reference-contexts: The summary follows the order in which the presentations were given. Kim Bruce: Matching is better than constraining for bounded polymorphism in OOLs. Kim Bruce discussed his work on providing a flexible, yet type-safe, polymorphic and imperative OO programming language <ref> [9] </ref>. In an imperative OO language, there are fewer subtypes than in previously-studied theoretical OO languages that do not have mutation. Hence bounded polymorphism in which the bounding relationship is a subtype relationship is not as useful as might be desired.
Reference: [10] <author> G. Castagna. </author> <title> Covariance and contravariance: conflict without a cause. </title> <type> Technical Report liens-94-18, </type> <institution> LIENS, </institution> <month> October </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.ens.fr in file /pub/dmi/users/castagna/covariance.dvi.Z. </note>
Reference-contexts: Abadi concluded his talk with an example, showing how to use this logic to prove that a given program computed a given value without modifying the store. Giuseppe Castagna: Covariance and contravari-ance: conflict without a cause. Castagna presented work that addresses the longstanding problem of covariance vs. contravariance <ref> [10] </ref>. The so-called contravariant rule, used to subtype function types, while assuring type safety, seemed to prevent satisfactory typing of some special cases, notably when binary methods were involved. For this reason in some systems this rule had been replaced by a covariant one, but type safety was lost.
Reference: [11] <author> Craig Chambers. </author> <title> Object-oriented multi-methods in Cecil. </title> <editor> In Ole Lehrmann Mad-sen, editor, </editor> <booktitle> ECOOP '92, European Conference on Object-Oriented Programming, Utrecht, The Netherlands, volume 615 of Lecture Notes in Computer Science, </booktitle> <pages> pages 33-56. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: When combining independently developed systems of multi-methods, type errors may occur, for which no part of the program is uniquely responsible. To solve these problems, Leavens described a module mechanism for the language Cecil <ref> [11] </ref>. This mechanism directly addresses the encapsulation problem, since one can limit access to fields by declaring them private.
Reference: [12] <author> Craig Chambers and Gary T. Leavens. </author> <title> Type-checking and modules for multi-methods. </title> <booktitle> In OOPSLA '94 Conference Proceedings, Portland, Oregon., volume 29 of ACM SIGPLAN Notices, </booktitle> <pages> pages 1-15. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: Leavens discussed joint work with Craig Chambers <ref> [12] </ref>. The problem he addressed was one pointed out by William Cook at previous workshops [13]: how to achieve encapsulation and composability for systems of multi-methods.
Reference: [13] <author> William R. Cook. </author> <title> Object-oriented programming versus abstract data types. </title> <editor> In J. W. de Bakker, W. P. de Roever, and G. Rozen-berg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Noordwijk-erhout, The Netherlands, May/June 1990, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-178. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: Leavens discussed joint work with Craig Chambers [12]. The problem he addressed was one pointed out by William Cook at previous workshops <ref> [13] </ref>: how to achieve encapsulation and composability for systems of multi-methods. In comparison to abstract data type languages (such as CLU or Ada), and single dispatching object-oriented languages such as Smalltalk, multi-method systems such as CLOS do not have good encapsulation.
Reference: [14] <author> Jonathan Eifrig, Scott Smith, Valery Trifonov, and Amy Zwarico. </author> <title> Application of oop type theory: State, decidability, integration. </title> <booktitle> In OOP-SLA '94 Conference Proceedings, Portland, Ore-gon, volume 29 of ACM SIGPLAN Notices, </booktitle> <pages> pages 16-30. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: Scott Smith: State in Object-Oriented Programming Languages. Scott Smith discussed joint work with Jonathan Eifrig, Valery Trifonov, and Amy Zwarico <ref> [14] </ref>. This work addresses the problem of how to provide a type system for an OO language with mutable state. This work also shares many of the goals of Kim Bruce's, in that it also deals with a polymorphic, imperative OO programming language.

Reference: [16] <author> Dinesh Katiyar, David Luckham, and John Mitchell. </author> <title> A type system for prototyping languages. </title> <booktitle> In Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium of Principles of Programming Languages, Portland, Oregon, </booktitle> <pages> pages 138-150. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: A discussion about modularity ensued, and it was noted that the work of Pierce and Turner [19] and Katiyar, Luckham, and Mitchell <ref> [16] </ref> allows one to operate on two sets of objects, with representation access, using bounded existential quantifiers. Carl Gunter started a new line of discussion by saying that, as a semanticist, he would like to get the features of OO in a way orthogonal to other features of a language.
Reference: [17] <author> Jens Palsberg and Patrick M. O'Keefe. </author> <title> A type system equivalent to flow analysis. </title> <booktitle> In Conference Record of POPL '95: 22nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, Calif. </address> <publisher> ACM, </publisher> <month> January </month> <year> 1995. </year> <note> To appear. Available by anonymous ftp from ftp.daimi.aau.dk in file pub/palsberg/papers/popl95.ps.Z. </note>
Reference-contexts: This seems to provide multi-methods with the same degree of information hiding as standard OO languages, while retaining other advantages of multi-methods. Jens Palsberg: A Type System Equivalent to Flow Analysis. Jens Palsberg presented a joint work with Patrick O'Keefe <ref> [17] </ref>. He addressed the problem of finding a type system that accept exactly the same programs as safety analysis. Safety analysis is a flow analysis of programs which collects type information and uses this information to accept only safe programs (i.e., programs that cannot go wrong).
Reference: [18] <author> B.C. Pierce and D.N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(2) </volume> <pages> 207-248, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Didier Remy: Programming objects in ML-ART. Didier Remy described a solution to the problem of supporting OO programming idioms in ML [20]. The idea is to use the OO model proposed by Pierce and Turner <ref> [18] </ref> in a type inference framework. To that end he enriched the ML+references language by some features already present in the type inference literature.
Reference: [19] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Statically typed friendly functions via partially abstract types. </title> <type> Technical Report ECS-LFCS-93-256, </type> <institution> University of Edinburgh, LFCS, </institution> <month> April </month> <year> 1993. </year> <note> Get by anonymous ftp from ftp.dcs.ed.ac.uk in pub/bcp/friendly.ps.Z. Also available as INRIA-Rocquencourt Rapport de Recherche No. 1899. </note>
Reference-contexts: Some suggested adding multi-methods to the list, and Cardelli noted that you need some sort of encapsulation for that (as in O 2 or the work of Chambers and Leavens). A discussion about modularity ensued, and it was noted that the work of Pierce and Turner <ref> [19] </ref> and Katiyar, Luckham, and Mitchell [16] allows one to operate on two sets of objects, with representation access, using bounded existential quantifiers.
Reference: [20] <author> Didier Remy. </author> <title> Programming objects with ML-ART: An extension to ML with abstract and record types. </title> <editor> In Masami Hagiya and John C. Mitchell, editors, </editor> <booktitle> Theoretical Aspects of Computer Software, volume 789 of Lecture Notes in Computer Science, </booktitle> <pages> pages 321-346, </pages> <address> New York, NY, April 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Thus the proof is modular in the same sense that the object-oriented program is modular. Didier Remy: Programming objects in ML-ART. Didier Remy described a solution to the problem of supporting OO programming idioms in ML <ref> [20] </ref>. The idea is to use the OO model proposed by Pierce and Turner [18] in a type inference framework. To that end he enriched the ML+references language by some features already present in the type inference literature.
Reference: [21] <author> E. Waller. </author> <title> Schema updates and consistency. </title> <editor> In C. Delobel, M. Kifer, and Y. Masunaga, editors, </editor> <booktitle> Deductive and Object-Oriented Databases, second International Conference, Munich, Ger-many, volume 566 of Lecture Notes in Computer 7 Science, </booktitle> <pages> pages 167-188. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <month> December </month> <year> 1991. </year> <month> 8 </month>
Reference-contexts: Method signature covariance is shown to simplify the computational complexity of key decidable cases. The incremental consistency checking of method schemas is a formalization of the database schema evolution problem. A detailed study of some decidable cases is given in <ref> [21] </ref>. 3 Summary of Discussions At the end of the workshop there was a general discussion. The discussion started with Luca Cardelli offering his (tongue-in-cheek) list of the 10 most important ideas in OO semantics.
References-found: 20

