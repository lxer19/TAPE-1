URL: http://www.eecs.umich.edu/~farnam/papers/rtpb-c.ps
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fzou, farnam@eecs.umich.edug  
Title: Real-Time Primary-Backup (RTPB) Replication with Temporal Consistency Guarantees  
Author: Hengming Zou and Farnam Jahanian 
Address: Ann Arbor, Michigan 48109  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: This paper presents a real-time primary-backup (RTPB) replication scheme for supporting fault-tolerant real-time applications. It formally defines two types of temporal consistency, namely external temporal consistency and inter-object temporal consistency. By introducing a key concept called phase variance, we are able to build our temporal consistency models and derive necessary and sufficient conditions that can be used as the basis for update and transmission scheduling that achieve temporal consistency guarantees. Furthermore, we prove that the term phase variance used in the models can be bounded under various scheduling algorithms, namely EDF, Rate Monotonic [13], and Distance-Constrained Scheduling [9]. A RTPB implementation was developed within the x-kernel architecture on the MK 7.2 microkernel and the results of a detailed performance evaluation is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference: [2] <author> P. Alsberg and J. Day. </author> <title> A principle for resilient sharing of distributed resources. </title> <booktitle> In Proc. IEEE, Int'l Conf. on Software Engineering, </booktitle> <year> 1976. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive <ref> [2, 3, 16] </ref> and active [4, 6, 7] replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [3] <author> J.F. Bartlett. </author> <title> Tandem: A non-stop kernel. </title> <booktitle> In ACM Operating System Review, </booktitle> <volume> volume 15, </volume> <year> 1991. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive <ref> [2, 3, 16] </ref> and active [4, 6, 7] replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [4] <author> K.P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive [2, 3, 16] and active <ref> [4, 6, 7] </ref> replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [5] <author> B.Purimetla, R. M.Sivasankaran, K.Ramamritham, and J.A.Stankovic. </author> <title> Real-time databases: Issues and applications. In Sang Hyuk Son, editor, </title> <booktitle> Advances in Real-Time Systems, chapter 20. </booktitle> <publisher> Prentice Hall, </publisher> <address> 1 edition, </address> <year> 1995. </year>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state. A detailed exposition of related work in real-time database is beyond the scope of this paper. Please refer to <ref> [5, 12] </ref>. Similarly, the notion of imprecise computation [14] explores weaker application semantics and guarantees timely completion of tasks by relaxing the accuracy requirements of the computation.
Reference: [6] <author> F.B.Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Transaction on Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive [2, 3, 16] and active <ref> [4, 6, 7] </ref> replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [7] <author> F.Cristian, B.Dancy, and J.Dehn. </author> <title> Fault-tolerance in the advanced automation system. </title> <booktitle> In Proceedings Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 160-170, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive [2, 3, 16] and active <ref> [4, 6, 7] </ref> replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [8] <author> M. Gagliardi, R.Rajkumar, and L. Sha. </author> <title> Designing for evolvability: Building blocks for evolvable real-time systems. </title> <booktitle> In Proc. Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: It guarantees agreement on membership among the com municating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both TTP and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [8, 17] </ref> present a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [9] <author> C-C Han and K-J Lin. </author> <title> Scheduling distance-constrained real-time tasks. </title> <booktitle> In Proc. Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Zero bound of phase variance Thus far, we have demonstrated that phase variance can indeed be bounded by some known number. In fact, we can ensure that the phase variance is exactly zero in most cases through a direct application of the schedulabilities results from Distant-Constrained Scheduling (DCS) <ref> [9] </ref>. Consider a task set T = T 1 ; T 2 ; : : : ; T n . Suppose e i and c i denote the execution time and distance constraint of task T i , respectively. <p> Suppose e i and c i denote the execution time and distance constraint of task T i , respectively. Any two invocations of task T i is bounded by c i . Han and Lin <ref> [9] </ref> have shown that the task set can be feasibly scheduled un der scheduler S r if P n If we substitute p i for c i , then each invocation of task T i is executed at exactly the same interval p i after some iterations (could be 0).
Reference: [10] <author> H.Kopetz and G. Grunsteidl. </author> <title> Ttp a protocol for fault-tolerant real-time systems. </title> <journal> In IEEE Computer, </journal> <volume> volume 27, </volume> <pages> pages 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Hence, the problem of server replication posses additional challenges in a real-time environment. In recent years, several experimental projects have begun to address the problem of replication in distributed hard real-time systems. For example, TTP <ref> [10] </ref> is a time-triggered distributed real-time system: its architecture is based on the assumption that the worst-case load is determined apriori at design time, and the system response to external events is cyclic at predetermined time-intervals.
Reference: [11] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The x-kernel is a protocol development environment which explicitly implements the protocol graph <ref> [11] </ref>. The protocol objects communicate with each other through a set of x-kernel uniform protocol interfaces. A given instance of the x-kernel can be configured by specifying a protocol graph in the configuration file.
Reference: [12] <author> K-J Lin and F. Jahanian. </author> <title> Issues and applications. In Sang Son, editor, Real-time Database Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state. A detailed exposition of related work in real-time database is beyond the scope of this paper. Please refer to <ref> [5, 12] </ref>. Similarly, the notion of imprecise computation [14] explores weaker application semantics and guarantees timely completion of tasks by relaxing the accuracy requirements of the computation.
Reference: [13] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Fortunately, we are able to derive better bounds on phase variance for various scheduling algorithms. Theorem 2: Inequalities v i xp i e i and v i (x:p i )=(n (2 1=n 1)) e i are satisfiable under EDF and Rate Monotonic Algorithm <ref> [13] </ref>, respectively. Here n is the number of tasks, x is the utilization rate. From Theorem 1 and 2, we see that the restriction on an object can be relaxed if the utilization rate of a task set is known (this is usually the case). <p> For example, the primary will perform a schedulabil-ity test based on the rate-monotonic scheduling algorithm <ref> [13] </ref>. If all existing update tasks as well as the newly added update task for object i are schedulable, the object is admitted into the system. 4.3 Update scheduling In our model, client updates are decoupled from the updates to the backup.
Reference: [14] <author> J.W.S. Liu, W.-K. Shih, and K.-J. Lin. </author> <title> Imprecise computation. </title> <booktitle> In Proceedings of IEEE, </booktitle> <volume> volume 82, </volume> <pages> pages 83-94, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: Instead, relaxed correctness criteria are used in scheduling database transactions which consequently permits a higher degree of concurrency. Similarly, imprecise computations exploit the fact that some computations can be completed successfully even if the input data is not totally up to date <ref> [14] </ref>. Different consistency semantics exist and are used in diverse applications depending on the objective and environment of the tasks. <p> Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state. A detailed exposition of related work in real-time database is beyond the scope of this paper. Please refer to [5, 12]. Similarly, the notion of imprecise computation <ref> [14] </ref> explores weaker application semantics and guarantees timely completion of tasks by relaxing the accuracy requirements of the computation. This is particularly useful in applications that use discrete samples of continuous time variables, since these values can be approximated when there is not sufficient time to compute an exact value.
Reference: [15] <author> A. Mehra, J. Rexford, and F. Jahanian. </author> <title> Design and evaluation of a window-consistent replication service. </title> <booktitle> In IEEE Transaction on Computer, </booktitle> <year> 1997. </year>
Reference-contexts: This paper presents the design and implementation of a real-time primary-backup replication scheme that combines fault-tolerant protocols, real-time scheduling, temporal consistency guarantees, and flexible x-kernel architecture to accommodate various system requirements. This work builds on the Window Consistent Replication Service by Mehra et al. <ref> [15] </ref> but distinguishes itself from that work in the following areas: * The temporal consistency model is more general. * Inter-object temporal consistency is proposed. * Implementation is built within x-kernel architecture. <p> This is identical to the window-consistent protocol proposed by Mehra et. al. <ref> [15] </ref>, here ffi B i ffi P i is the window of inconsistency (or window consistent bound) between the primary and backup. 3 Inter-object temporal consistency The previous section introduced the notion of external temporal consistency which deals with the relationship of an object in the external world and its images <p> The difference between these two graphs is that Figure 5 (a) shows the result under normal scheduling while Figure 5 (b) shows the result under compressed scheduling (primary schedules as many updates to backup as the resources allow <ref> [15] </ref>). The figures show that under both normal (a) (b) compressed scheduling and compressed scheduling, the larger the probability of message loss, the longer the backup stays in an inconsistent state from the primary. However, for the same window size, the results for compressed scheduling are different from normal scheduling.
Reference: [16] <author> N.Budhiraja, K.Marzullo, F.B.Schneider, and S.Toueg. </author> <title> Primay-backup protocols: Lower bounds and optimal implementations. </title> <booktitle> In Proceedings of IFIP Working Conference on Dependable Computing, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive <ref> [2, 3, 16] </ref> and active [4, 6, 7] replication. Past work on synchronous and asynchronous replication protocols has focused, in most cases, on applications for which timing predictability is not a key requirement.
Reference: [17] <author> R. Rajkumar, M. Gagliardi, and L. Sha. </author> <title> The real-time publisher/subscriber inter-process communication model for distributed real-time systems: </title> <booktitle> Design and implementation. In Proc. Real-Time Technology and Applications Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: It guarantees agreement on membership among the com municating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both TTP and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [8, 17] </ref> present a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [18] <author> T.Abdelzaher, A.Shaikh, S.Johnson, F.Jahanian, and K.G.Shin. Rtcast: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: For example, TTP [10] is a time-triggered distributed real-time system: its architecture is based on the assumption that the worst-case load is determined apriori at design time, and the system response to external events is cyclic at predetermined time-intervals. RTCAST <ref> [18] </ref> is a lightweight fault-tolerant mul-ticast and membership service for real-time process groups which exchange periodic and aperiodic messages. The service supports bounded-time message transport, atomicity, and order for multicasts within a group of communicating processes in the presence of processor crashes and communication failures.
Reference: [19] <author> Hengming Zou and Farnam Jahanian. </author> <title> Real-time primary-backup replications with temporal consistency guarantees. </title> <type> Technical Report CSE-TR-356-98, </type> <institution> University of Michigan, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: The correctness of the second condition can be argued similarly. Due to space limitation, we omit the proof in the paper. Refer to the extended version <ref> [19] </ref> for all the proofs of the lemmas and theorems in this paper. The above condition can be significantly relaxed with the introduction of the concept of phase variance.
References-found: 19

