URL: ftp://prospero.isi.edu/pub/papers/prospero/prospero-neuman-thesis.ps.Z
Refering-URL: http://gost.isi.edu/people/bcn/publications.html
Root-URL: http://www.isi.edu
Author: Barry Clifford Neuman 
Date: 1992  
Note: c Copyright  
Abstract-found: 0
Intro-found: 1
Reference: [Batini et al. 86] <author> C. Batini, M. Lenzerini, and S. B. Navathe. </author> <title> A comparative analysis of methodologies for database schema integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4) </volume> <pages> 323-364, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: There has been much work on merging dissimilar databases (often across multiple systems) into a single database [Litwin & Abdellatif 86]. Much of this work has concentrated on schema integration <ref> [Batini et al. 86] </ref>, determining what the underlying databases have in common and deriving a new model (schema) that integrates the data in each of the underlying databases. Schema integration is only useful for tying together logically related information. Many pairs of databases are not related in any useful manner.
Reference: [Berners-Lee et al. 92] <author> T. Berners-Lee, R. Cailliau, J.-F. Groff, and B. Pollermann. </author> <title> World-wide web: The information universe. </title> <journal> Electronic Networking: Research, Applications and Policy, </journal> <volume> 2(1), </volume> <month> Spring </month> <year> 1992. </year>
Reference-contexts: Existing link services are not capable of tying together information on a global scale, though there is a great deal of interest in building link servers that can. In fact, several projects, including Bootstrap [Engelbart 90] and World Wide Web <ref> [Berners-Lee et al. 92] </ref>, are attempting to build open hypertext systems that tie together information distributed across the world; these projects are still in their early stages.
Reference: [Bershad & Pinkerton 88] <author> B. N. Bershad and C. B. Pinkerton. Watchdogs: </author> <title> Extending the Unix file system. </title> <journal> Computing Systems, </journal> <volume> 1(2) </volume> <pages> 169-188, </pages> <month> Spring </month> <year> 1988. </year>
Reference-contexts: A portal is written by the creator of the directory, and as such, it is not customizable by the individual users of the directory. There are also similarities between the functionality of filters, and that of watchdogs <ref> [Bershad & Pinkerton 88] </ref>. Watchdogs are an extension to the file system that allow the owner of a file to define alternative implementations of file system calls, perhaps returning computed results rather than data that actually appears in the file.
Reference: [Birrell et al. 86] <author> A. D. Birrell, B. W. Lampson, R. M. Needham, and M. D. Schroeder. </author> <title> A global authentication service without global trust. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 223-230, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Unless, for every communicating pair of entities, there exists some trusted entity sharing a secret with both parties, then multiple authentication servers might be involved in authenticating a principal. 1 It is important that the end service know which authentication servers were involved when deciding whether to trust the authentication <ref> [Birrell et al. 86] </ref>. There may be different competing collections of authentication servers. Such servers might differ in who they are run by, or perhaps even in the protocol required for initial authentication (how the user logs on).
Reference: [Black 91] <author> A. P. </author> <title> Black. </title> <type> Personal communication, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: Perhaps one of the earliest uses of a mechanism similar to union links was for version control in the Oxford experimental operating system OS12 <ref> [Black 91] </ref>, a successor of OS6 [Stoy & Strachey 72]. A directory in OS12 can contain a link to a single predecessor directory, which might itself have a predecessor. If no match is found in the current directory, and if a predecessor directory exists, the predecessor directory is searched.
Reference: [Brownbridge et al. 82] <author> D. Brownbridge, L. Marshall, and B. Randell. </author> <title> The Newcastle connection or UNIXes of the world unite. </title> <journal> Software: Practice and Experience, </journal> <volume> 12 </volume> <pages> 1147-1162, </pages> <year> 1982. </year>
Reference-contexts: Some of these lists are periodically distributed through electronic mail. 3.2.2 Global Naming An alternative to host-based naming is global naming. Global naming is used by the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus [Walker et al. 83], Unix United <ref> [Brownbridge et al. 82] </ref>, Sprite [Ousterhout et al. 88], Echo [Hisgen et al. 89], and the Universal Directory Service [Lantz et al. 85].
Reference: [Cabrera & Wyllie 88] <author> L.-F. Cabrera and J. Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <month> 119 </month>
Reference: [CCITT 88] <author> CCITT. </author> <title> Recommendation X.500: The Directory, </title> <month> December </month> <year> 1988. </year>
Reference-contexts: Name services such as the Internet Domain Naming System [Mockapetris 87], X.500 <ref> [CCITT 88] </ref>, and DEC's Global Naming System [Lampson 85] use hierarchical names to reduce the need for centralized administration. Central administrators create directories that correspond to individual sites, and administrators at each site are able to administer names within their site's directory. <p> Chapter 3 discussed the problems with global directory services such as the Internet Domain Naming System [Mockapetris 87], X.500 <ref> [CCITT 88] </ref>, and DEC's Global Naming System [Lampson 85]. While these systems are useful for organizing information whose structure conforms to the administrative relationship between different parts of the system, they are less useful when the information is structured in other ways.
Reference: [Ceri & Pelagatti 84] <author> S. Ceri and G. Pelagatti. </author> <title> Distributed Databases: </title> <booktitle> Principles and Systems. Computer Science Series. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: A distributed database is a collection of data that belong logically to the same system but are spread across the sites of a computer network <ref> [Ceri & Pelagatti 84] </ref>. There has been much work on merging dissimilar databases (often across multiple systems) into a single database [Litwin & Abdellatif 86].
Reference: [Cliffe 91] <author> S. Cliffe. </author> <title> Archiving within Australia. </title> <institution> Department of Computer Science, University of Wollongong, Australia, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Prospero also has been adopted as the preferred method for remote access to archie, a database that maintains information about files available from key archive sites. It has also been adopted by the Australian Academic and Research Network (AARNet) as part of their plan for archiving in Australia <ref> [Cliffe 91] </ref>. AARNet has added Prospero support to one of their FTP servers where it helps them reduce the number of repeated file retrievals across a low-speed trans-Pacific connection, and it provides the benefits of Prospero to users who have not installed Prospero on their systems. <p> announced files organized according to keywords from the full text of the announcement. 7.2.3 The Australian Academic and Research Network The Australian Academic and Research Network (AARNet) Archive Working Group has been a major user of Prospero and has adopted Prospero as part of its plan for archiving in Australia <ref> [Cliffe 91] </ref>. The Australian Internet is well connected internally, but the connection to the U.S. is over a low speed (512 Kbit) line. Unfortunately, this connection is often used to retrieve the same large files over and over by different Australian users.
Reference: [Comer & Peterson 89] <author> D. E. Comer and L. L. Peterson. </author> <title> Understanding naming in distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 3(2) </volume> <pages> 51-60, </pages> <year> 1989. </year>
Reference-contexts: (for example, /usr/bcn/readme@cs.washington.edu where /usr/bcn/readme is a filename parsed left to right and cs.washington.edu is a host name parsed right to left) and to model the iterative resolution of names, from those that users specify, to addresses, to the hosts on which the objects are stored, to the objects themselves <ref> [Comer & Peterson 89] </ref>. This dissertation is concerned with the names that are specified by and visible to users. The approach taken is to impose a uniform higher level naming mechanism that maps names from those specified by users to those used by existing systems. <p> Because this dissertation is not concerned with the resolution of these addresses, and because the naming mechanism visible to users is uniform, the extensions described in <ref> [Comer & Peterson 89] </ref> are not relevant to our discussion. The model presented in this section is a little simpler, but 12 it does draw on the formalism presented in that paper. The model will be extended in later chapters to provide better support for customization.
Reference: [Comer et al. 90] <author> D. Comer, R. E. Droms, and T. P. Murtagh. </author> <title> An experimental implementation of the Tilde naming system. </title> <journal> Computing Systems, </journal> <volume> 4(3) </volume> <pages> 487-515, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: This problem is addressed in Tilde <ref> [Droms 86, Comer et al. 90] </ref>, QuickSilver [Cabrera & 25 Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba [Tanenbaum et al. 90, van Renesse 89] by supporting user-centered naming: each user resolves names in a separate name space containing only the files of interest to that user. <p> However, such customized directories will have different names than the parts of the global name space that they replace, meaning that users have to remember which parts of the name space have been customized. Some recent systems including Tilde <ref> [Droms 86, Comer et al. 90] </ref>, QuickSilver [Cabr-era & Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba [Tanenbaum et al. 90, van Renesse 89] allow users to customize all parts of their name spaces.
Reference: [Conklin 87] <author> J. Conklin. </author> <title> Hypertext: An introduction and survey. </title> <journal> IEEE Computer, </journal> <volume> 20(9), </volume> <month> September </month> <year> 1987. </year>
Reference-contexts: The tools provided by the Virtual System Model allow them to do so. 8.5 Hypertext Hypertext has gained widespread interest as an approach for organizing the information in computer systems. This section discusses the relationship between hypertext and the Virtual System Model. Hypertext <ref> [Nelson 65, Conklin 87] </ref> is the combination of text with links to other text. These links represent cross references which may be followed when searching for information, and they allow the interconnection of documents in ways that are more general than supported by traditional file systems.
Reference: [Daley & Neumann 65] <author> R. Daley and P. G. Neumann. </author> <title> A general purpose file system for secondary storage. </title> <booktitle> In Proceedings of the AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 213-229, </pages> <year> 1965. </year>
Reference-contexts: While this allowed users to choose their own names for files without the possibility of conflict with names belonging to other users, it was not possible to share files. Only files within the user's catalog could be named, and thereby accessed. This limitation is addressed in the Multics <ref> [Daley & Neumann 65] </ref> and Unix [Ritchie & Thompson 74] operating systems by supporting a hierarchical name space (an approach which has been adopted by most subsequent systems).
Reference: [Danzig et al. 91] <author> P. B. Danzig, J. Ahn, J. Noll, and K. Obraczka. </author> <title> Distributed indexing: A scalable mechanism for distributed information retrieval. </title> <booktitle> In Proceedings of the ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: These systems work by computing an index over the information in the database. In a large system, the amount of data to be indexed, the frequency of updates, and the need to cross administrative boundaries would preclude the use of a single index. Distributed indexing <ref> [Danzig et al. 91] </ref> is a proposed approach for generating and maintaining multiple indices. Each index would contain information on a particular topic, separate from the data being indexed.
Reference: [Date 81] <author> C. J. Date. </author> <title> An Introduction to Database Systems. </title> <booktitle> The Systems Programming Series. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: The Virtual System Model would fill this role nicely. In fact, although it doesn't completely conform to existing database models, the naming network of the Virtual System Model can be thought of as a database. It could be implemented using a database based on the network model <ref> [Date 81] </ref>. Each object would be represented by a record having unique identifying information that allows it to be referenced or uniquely specified as the starting node (root) of a name space.
Reference: [Dig 80] <institution> Digital Equipment Corporation, Maynard, Massachusetts. </institution> <note> TOPS-20 User's Guide (Version 4), </note> <month> January </month> <year> 1980. </year>
Reference-contexts: Long path names are often necessary to uniquely identify a file, but in a customized name space, shorter, or abbreviated, names can be used for those files that are frequently used. Existing systems support customization and abbreviated names through mechanisms external to the name space. For example, TOPS-20 <ref> [Dig 80] </ref> and VMS [Dig 88] allow users to use logical names in place of file names. Once specified, logical names support limited customization of the name space, but they are private to the process that specified them.
Reference: [Dig 88] <institution> Digital Equipment Corporation, Maynard, Massachusetts. </institution> <note> VMS General User's Manual (Version 5), </note> <month> April </month> <year> 1988. </year> <month> 120 </month>
Reference-contexts: Existing systems support customization and abbreviated names through mechanisms external to the name space. For example, TOPS-20 [Dig 80] and VMS <ref> [Dig 88] </ref> allow users to use logical names in place of file names. Once specified, logical names support limited customization of the name space, but they are private to the process that specified them.
Reference: [Droms 86] <author> R. E. Droms. </author> <title> Naming of Files in Distributed Systems. </title> <type> Ph.D. Dissertation, </type> <institution> Purdue University, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: This problem is addressed in Tilde <ref> [Droms 86, Comer et al. 90] </ref>, QuickSilver [Cabrera & 25 Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba [Tanenbaum et al. 90, van Renesse 89] by supporting user-centered naming: each user resolves names in a separate name space containing only the files of interest to that user. <p> However, such customized directories will have different names than the parts of the global name space that they replace, meaning that users have to remember which parts of the name space have been customized. Some recent systems including Tilde <ref> [Droms 86, Comer et al. 90] </ref>, QuickSilver [Cabr-era & Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba [Tanenbaum et al. 90, van Renesse 89] allow users to customize all parts of their name spaces.
Reference: [Emtage & Deutsch 92] <author> A. Emtage and P. Deutsch. archie: </author> <title> An electronic directory service for the Internet. </title> <booktitle> In Proceedings of the Winter 1992 Usenix Conference, </booktitle> <pages> pages 93-110, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: virtual system 93 examples, it is important to remember that the files shown are scattered across multiple Internet archive sites, but that it appears as a single system to the user. 7.2.2 Archie Some of the most frequently used 3 directories are maintained by the archie group at McGill University <ref> [Emtage & Deutsch 92] </ref>. The archie database [Emtage 91] indexes files from directories at major Internet FTP sites according to the last components of their file names.
Reference: [Emtage 91] <author> A. Emtage. archie. </author> <title> M.S. </title> <type> Thesis, </type> <institution> McGill University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The archie database <ref> [Emtage 91] </ref> indexes files from directories at major Internet FTP sites according to the last components of their file names. Information from the archie database is accessed through a filter (the af filter in direct access to the database, instead of on the client 4 .
Reference: [Engelbart 90] <author> D. C. Engelbart. </author> <title> Knowledge-domain interoperability and an open hy-perdocument system. </title> <booktitle> In Proceedings of the Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 143-156, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Existing link services are not capable of tying together information on a global scale, though there is a great deal of interest in building link servers that can. In fact, several projects, including Bootstrap <ref> [Engelbart 90] </ref> and World Wide Web [Berners-Lee et al. 92], are attempting to build open hypertext systems that tie together information distributed across the world; these projects are still in their early stages.
Reference: [Fowler 85] <author> R. J. Fowler. </author> <title> Decentralized Object Finding Using Forwarding Addresses. </title> <type> Ph.D. Dissertation, </type> <institution> University of Washington, </institution> <month> December </month> <year> 1985. </year> <institution> Department of Computer Science Technical Report 85-12-01. </institution>
Reference-contexts: Implementing and evaluating the scalability of this approach, and improving upon it, are topics for future research. 6.3.3 Object Mobility A Prospero link continues to work even if the object it references has moved. Prospero supports object mobility through the use of forwarding pointers <ref> [Fowler 85] </ref>. A user attempting to access an object at its old location is given the new location of the object and the Prospero library automatically retries the request using the new information.
Reference: [Gifford et al. 91] <author> D. K. Gifford, P. Jouvelot, M. A. Sheldon, and J. W. O'Toole Jr. </author> <title> Semantic file systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 16-25, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: In the Virtual System Model the filter and the union link allow directories to be created as functions of other directories and the resulting directories automatically track the directories from which they are derived. Semantic file systems <ref> [Gifford et al. 91] </ref> provide an alternative method for finding files of interest from a collection of file servers. A semantic file system automatically extracts attributes for the files it contains. Users search for files by specifying attributes which are looked up in the resulting database. <p> Just as a filter in the Virtual System Model allows the result of a computation (e.g., a database query) to be presented to the user in a virtual directory, the semantic file system described by <ref> [Gifford et al. 91] </ref> does the same.
Reference: [Heimbigner & McLeod 85] <author> D. Heimbigner and D. McLeod. </author> <title> A federated architecture for information management. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 3(2), </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: Databases may be identified using higher level databases, or through traditional naming techniques. 2 It is sometimes possible to cache the intermediate results of applying the view, in which case, the query may be applied directly to the cached results 105 In a federated database architecture <ref> [Heimbigner & McLeod 85] </ref> autonomous sites export definitions of the databases that are available to users at other sites on the network. A definition is exported by adding an entry to a database that is shared by all members of the federation.
Reference: [Hisgen et al. 89] <author> A. Hisgen, A. Birrell, T. Mann, M. Schroeder, and G. Swart. </author> <title> Availability and consistency tradeoffs in the Echo distributed file system. </title> <booktitle> In Proceedings of the 2nd IEEE Workshop on Workstation Operating Systems, </booktitle> <pages> pages 49-54, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Global naming is used by the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus [Walker et al. 83], Unix United [Brownbridge et al. 82], Sprite [Ousterhout et al. 88], Echo <ref> [Hisgen et al. 89] </ref>, and the Universal Directory Service [Lantz et al. 85]. <p> Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satyanarayanan 91], Locus [Walker et al. 83], Sprite [Ousterhout et al. 88], and Echo <ref> [Hisgen et al. 89] </ref>.
Reference: [Ho & Olsson 90] <author> W. W. Ho and R. A. Olsson. </author> <title> An approach to genuine dynamic linking. </title> <type> Technical Report CSE-90-25, </type> <institution> Department of Computer Science and Engineering, University of California at Davis, </institution> <month> August </month> <year> 1990. </year> <month> 121 </month>
Reference-contexts: The code for the linker is derived from that used by the Extension Interpreter to support extensible user interfaces [Notkin & Griswold 88]. For the prototype implementation, the dynamic linker only runs on the VAX, though it would be straightforward to use a multi-platform linker for improved portability <ref> [Ho & Olsson 90] </ref>. Although users can write their own filters, most users can get by using predefined ones.
Reference: [Hopcroft & Ullman 79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation, chapter 2. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: Under the assumption that there exists a single naming network, Q; ; ffi; and ff will be fixed. Naming automata are related to finite automata <ref> [Mealy 55, Moore 64, Hopcroft & Ullman 79] </ref>. <p> The NFA is described in [Rabin & Scott 59] and <ref> [Hopcroft & Ullman 79] </ref> where it is shown to be computationally equivalent to the DFA. Graphically, a union link is represented as an edge with no label 13 . Figure 4.8 shows a naming network with three union links.
Reference: [Howard et al. 88] <author> J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols, M. Satya-narayanan, R. N. Sidebotham, and M. J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Others maintain lists of the information available from various locations, frequently updating the lists as things change. Some of these lists are periodically distributed through electronic mail. 3.2.2 Global Naming An alternative to host-based naming is global naming. Global naming is used by the Andrew File System <ref> [Howard et al. 88] </ref>, Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus [Walker et al. 83], Unix United [Brownbridge et al. 82], Sprite [Ousterhout et al. 88], Echo [Hisgen et al. 89], and the Universal Directory Service [Lantz et al. 85]. <p> If the object is a file, a method is needed to retrieve its contents. Because Prospero runs in a heterogeneous environment, it was necessary to support multiple access methods. Among those presently supported are Sun's Network File System [Sandberg et al. 85], the Andrew File System <ref> [Howard et al. 88] </ref>, and access using the anonymous file transfer protocol [Postel & Reynolds 85]. When the client has located a file to be opened, an additional query is sent to the directory server on the system storing the file. This query requests the value of the access-method attribute. <p> Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System <ref> [Howard et al. 88] </ref>, Coda [Satyanarayanan 90, Kistler & Satyanarayanan 91], Locus [Walker et al. 83], Sprite [Ousterhout et al. 88], and Echo [Hisgen et al. 89].
Reference: [Kacmar & Legget 91] <author> C. J. Kacmar and J. J. Legget. PROXHY: </author> <title> A process-oriented extensible hypertext architecture. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 9(4) </volume> <pages> 399-419, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Most hypertext systems run as a single application on a single system, but there has been recent work on supporting hypertext links across applications and over a network <ref> [Yankelovich et al. 88, Kacmar & Legget 91, Pearl 89] </ref>. Most existing hypertext systems that work across application boundaries make use of a link service [Pearl 89] or database [Riley 89] to maintain information about the links.
Reference: [Kahle & Medlar 91] <author> B. Kahle and A. Medlar. </author> <title> An information system for corporate users: Wide area information systems. </title> <type> Technical Report TMC-199, </type> <institution> Thinking Machines Corporation, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Early examples include commercial database services such as Lexis and Westlaw which support full text searches of legal rulings. More recently, the Wide Area Information Service (WAIS) <ref> [Kahle & Medlar 91] </ref> has provided a common protocol to access multiple 1 Attributes are generated by transducers, type-specific programs that read files and produce attributes. Users can write their own transducers, and the transducers that are applied can depend on the position of a file in the file hierarchy.
Reference: [Kistler & Satyanarayanan 91] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda File System. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 213-225, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System [Howard et al. 88], Coda <ref> [Satyanarayanan 90, Kistler & Satyanarayanan 91] </ref>, Locus [Walker et al. 83], Sprite [Ousterhout et al. 88], and Echo [Hisgen et al. 89].
Reference: [Korn & Krell 90] <author> D. G. Korn and E. Krell. </author> <title> A new dimension for the Unix file system. </title> <journal> Software: Practice and Experience, </journal> <volume> 20 </volume> <pages> 19-34, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This provides a subset of the functionality of union links. While useful for version control, supporting mechanisms such as search paths requires the ability to specify multiple directories to be searched. A similar mechanism is used for version control in the 3-D file system <ref> [Korn & Krell 90] </ref>. In the 3-D file system, the directory seen by the user should be thought of as a stack of physical directories.
Reference: [Lampson 73] <author> B. W. Lampson. </author> <title> A note on the confinement problem. </title> <journal> Communications of the ACM, </journal> <volume> 16(10) </volume> <pages> 613-615, </pages> <month> October </month> <year> 1973. </year>
Reference-contexts: This can present problems for security. The ability of the user to control the name space used by a program is important if a program is to be confined 1 <ref> [Lampson 73] </ref>. 1 A program is confined when data cannot be written to locations that are not intended by the user. 115 The second category, further experiments with the Virtual System Model, consists primarily of applying the Virtual System Model to other parts of the system.
Reference: [Lampson 85] <author> B. W. Lampson. </author> <title> Designing a global name service. </title> <booktitle> In Proceedings of the 4th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1985. </year>
Reference-contexts: Name services such as the Internet Domain Naming System [Mockapetris 87], X.500 [CCITT 88], and DEC's Global Naming System <ref> [Lampson 85] </ref> use hierarchical names to reduce the need for centralized administration. Central administrators create directories that correspond to individual sites, and administrators at each site are able to administer names within their site's directory. <p> Chapter 3 discussed the problems with global directory services such as the Internet Domain Naming System [Mockapetris 87], X.500 [CCITT 88], and DEC's Global Naming System <ref> [Lampson 85] </ref>. While these systems are useful for organizing information whose structure conforms to the administrative relationship between different parts of the system, they are less useful when the information is structured in other ways.
Reference: [Lantz et al. 85] <author> K. A. Lantz, J. L. Edighoffer, and B. L. Hitson. </author> <title> Towards a universal directory service. </title> <booktitle> In Proceedings of the 4th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1985. </year> <month> 122 </month>
Reference-contexts: Global naming is used by the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus [Walker et al. 83], Unix United [Brownbridge et al. 82], Sprite [Ousterhout et al. 88], Echo [Hisgen et al. 89], and the Universal Directory Service <ref> [Lantz et al. 85] </ref>. <p> The linkage of protection and naming can hinder the sharing of names. 53 4.4.2 Filters The function of filters in the Virtual System Model is similar to the domain-switching portal mechanism found in the Universal Directory Service <ref> [Lantz et al. 85] </ref>. A portal is a call to a separate name server which may have a non-standard implementation, enabling it to resolve names in a manner different than that in a standard name server. An important difference is that a filter is associated with a link.
Reference: [Lindsay 81] <author> B. Lindsay. </author> <title> Object naming and catalog management for a distributed database manager. </title> <booktitle> In Proceedings of the 2nd International Conference on Distributed Computing Systems, </booktitle> <pages> pages 31-40, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: For example, TOPS-20 [Dig 80] and VMS [Dig 88] allow users to use logical names in place of file names. Once specified, logical names support limited customization of the name space, but they are private to the process that specified them. R* <ref> [Lindsay 81] </ref> supports private aliases which allow users to assign their own names to remote databases. Most systems allow users and programs to specify search paths to be 24 followed when resolving abbreviated names; the system tries each directory in the search path until a match is found.
Reference: [Litwin & Abdellatif 86] <author> W. Litwin and A. Abdellatif. </author> <title> Multidatabase interoperability. </title> <journal> IEEE Computer, </journal> 19(12) 10-18, December 1986. 
Reference-contexts: A distributed database is a collection of data that belong logically to the same system but are spread across the sites of a computer network [Ceri & Pelagatti 84]. There has been much work on merging dissimilar databases (often across multiple systems) into a single database <ref> [Litwin & Abdellatif 86] </ref>. Much of this work has concentrated on schema integration [Batini et al. 86], determining what the underlying databases have in common and deriving a new model (schema) that integrates the data in each of the underlying databases.
Reference: [Mealy 55] <author> G. H. Mealy. </author> <title> A method for synthesizing sequential circuits. </title> <journal> Bell System Technical Journal, </journal> <volume> 34(5) </volume> <pages> 1045-1079, </pages> <year> 1955. </year>
Reference-contexts: Under the assumption that there exists a single naming network, Q; ; ffi; and ff will be fixed. Naming automata are related to finite automata <ref> [Mealy 55, Moore 64, Hopcroft & Ullman 79] </ref>.
Reference: [Mockapetris 87] <author> P. Mockapetris. </author> <title> Domain names concepts and facilities. DARPA Internet RFC 1034, </title> <month> November </month> <year> 1987. </year>
Reference-contexts: The directory structure forms a tree and names are resolved starting from a distinguished directory, called the root, which is known by all users. 3.2 Distributed Systems Many of the advantages of hierarchical naming apply also to distributed systems. Name services such as the Internet Domain Naming System <ref> [Mockapetris 87] </ref>, X.500 [CCITT 88], and DEC's Global Naming System [Lampson 85] use hierarchical names to reduce the need for centralized administration. Central administrators create directories that correspond to individual sites, and administrators at each site are able to administer names within their site's directory. <p> Chapter 3 discussed the problems with global directory services such as the Internet Domain Naming System <ref> [Mockapetris 87] </ref>, X.500 [CCITT 88], and DEC's Global Naming System [Lampson 85]. While these systems are useful for organizing information whose structure conforms to the administrative relationship between different parts of the system, they are less useful when the information is structured in other ways.
Reference: [Moore 64] <author> E. F. Moore, </author> <title> editor. Sequential Machines: Selected Papers. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1964. </year>
Reference-contexts: Under the assumption that there exists a single naming network, Q; ; ffi; and ff will be fixed. Naming automata are related to finite automata <ref> [Mealy 55, Moore 64, Hopcroft & Ullman 79] </ref>.
Reference: [Mullender & Tanenbaum 86] <author> S. J. Mullender and A. S. Tanenbaum. </author> <title> The design of a capability-based distributed operating system. </title> <journal> The Computer Journal, </journal> <volume> 29(4) </volume> <pages> 289-299, </pages> <year> 1986. </year>
Reference-contexts: The basic function (querying and modifying directories) of the Prospero directory server is similar to that of capability-based directory servers like the one in Amoeba <ref> [Mullender & Tanenbaum 86] </ref>: the directory server has no idea how its directories fit into the name space; each directory is a separate object that may be referenced by many other directories; and cycles are even allowed.
Reference: [Nelson 65] <author> T. H. Nelson. </author> <title> A file structure for the complex, the changing, </title> <booktitle> and the indeterminate. In Proceedings of the ACM National Conference, </booktitle> <month> August </month> <year> 1965. </year>
Reference-contexts: The tools provided by the Virtual System Model allow them to do so. 8.5 Hypertext Hypertext has gained widespread interest as an approach for organizing the information in computer systems. This section discusses the relationship between hypertext and the Virtual System Model. Hypertext <ref> [Nelson 65, Conklin 87] </ref> is the combination of text with links to other text. These links represent cross references which may be followed when searching for information, and they allow the interconnection of documents in ways that are more general than supported by traditional file systems.
Reference: [Neuman 88] <author> B. C. Neuman. </author> <title> Issues of scale in large distributed operating systems. </title> <type> General Examination Report, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> May </month> <year> 1988. </year>
Reference: [Neuman 89a] <author> B. C. Neuman. </author> <title> The need for closure in large distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 28-30, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In others, it is determined by applying a closure function. A closure function, : object ! N S, maps an object to the name space within which names embedded in or specified by the object are to be resolved <ref> [Saltzer 78, Neuman 89a] </ref>. Since the name space to be used is specified by the closure function, it needn't be specified as part of the name itself. <p> Closure is represented the same way in the Virtual System Model. To review, a closure function, : object ! N S, maps an object to the starting context from which names embedded in the object are to be resolved <ref> [Saltzer 78, Neuman 89a] </ref>. 52 A file system based on the Virtual System Model is different from other file systems in that closure information is required to be stored with each object.
Reference: [Neuman 89b] <author> B. C. Neuman. </author> <title> The Virtual System Model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> April </month> <year> 1989. </year> <month> 123 </month>
Reference: [Neuman 89c] <author> B. C. Neuman. </author> <title> Workstations and the Virtual System Model. </title> <booktitle> In Proceedings of the 2nd IEEE Workshop on Workstation Operating Systems, </booktitle> <pages> pages 91-95, </pages> <month> September </month> <year> 1989. </year> <journal> Also appears in the Newsletter of the IEEE Technical Committee on Operating Systems, </journal> <volume> Volume 3, Number 3, </volume> <month> Fall </month> <year> 1989. </year>
Reference: [Neuman 90] <author> B. C. Neuman. </author> <title> Managing replicated data within the Virtual System Model. </title> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: This is especially important if the system is to receive widespread use. It is not even enough to provide a fixed set of replication techniques. Instead, the system should provide the infrastructure necessary so that applications can provide their own replication when appropriate <ref> [Neuman 90] </ref>. Although Prospero does not presently implement replication, support for replication was an important consideration in its design.
Reference: [Neuman 92a] <author> B. C. Neuman. Prospero: </author> <title> A tool for organizing Internet resources. </title> <journal> Electronic Networking: Research, Applications and Policy, </journal> <volume> 2(1) </volume> <pages> 30-37, </pages> <month> Spring </month> <year> 1992. </year>
Reference: [Neuman 92b] <author> B. C. Neuman. </author> <title> The Prospero File System: A global file system based on the Virtual System Model. </title> <booktitle> In Proceedings of the Workshop on File Systems, </booktitle> <month> May </month> <year> 1992. </year>
Reference: [Neuman 92c] <author> B. C. Neuman. </author> <title> Scale in distributed systems. </title> <booktitle> In Readings in Distributed Computing Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference: [Notkin & Griswold 88] <author> D. Notkin and W. G. Griswold. </author> <title> Extension and software development. </title> <booktitle> In Proceedings of the 10th International Conference on Software Engineering, </booktitle> <pages> pages 274-283, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: If an appropriate object file does not exist at the time the filter is applied, it can be automatically compiled before loading. The code for the linker is derived from that used by the Extension Interpreter to support extensible user interfaces <ref> [Notkin & Griswold 88] </ref>. For the prototype implementation, the dynamic linker only runs on the VAX, though it would be straightforward to use a multi-platform linker for improved portability [Ho & Olsson 90]. Although users can write their own filters, most users can get by using predefined ones.
Reference: [Ousterhout et al. 88] <author> J. K. Ousterhout, A. R. Cherenson, F. Douglis, M. N. Nelson, and B. B. Welch. </author> <title> The Sprite network operating system. </title> <journal> Computer, </journal> <volume> 21(2) </volume> <pages> 23-35, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Global naming is used by the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus [Walker et al. 83], Unix United [Brownbridge et al. 82], Sprite <ref> [Ousterhout et al. 88] </ref>, Echo [Hisgen et al. 89], and the Universal Directory Service [Lantz et al. 85]. <p> Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satyanarayanan 91], Locus [Walker et al. 83], Sprite <ref> [Ousterhout et al. 88] </ref>, and Echo [Hisgen et al. 89].
Reference: [Pearl 89] <author> A. Pearl. </author> <title> Sun's link service: A protocol for open linking. </title> <booktitle> In Proceedings of Hypertext'89, </booktitle> <pages> pages 137-146, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Most hypertext systems run as a single application on a single system, but there has been recent work on supporting hypertext links across applications and over a network <ref> [Yankelovich et al. 88, Kacmar & Legget 91, Pearl 89] </ref>. Most existing hypertext systems that work across application boundaries make use of a link service [Pearl 89] or database [Riley 89] to maintain information about the links. <p> Most existing hypertext systems that work across application boundaries make use of a link service <ref> [Pearl 89] </ref> or database [Riley 89] to maintain information about the links. Existing link services are not capable of tying together information on a global scale, though there is a great deal of interest in building link servers that can.
Reference: [Peterson 88] <author> L. L. Peterson. </author> <title> The Profile naming service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year> <month> 124 </month>
Reference-contexts: The result is that related information is scattered across the name space and difficult to locate without knowing who created it. 100 Attribute-based naming, as supported by Profile <ref> [Peterson 88] </ref>, presents an alternative to the global hierarchical name services just described. In attribute-based naming, objects are named by a collection of attributes. When naming an object, attributes may be omitted, and only enough attributes to uniquely identify the object must be provided. <p> It is difficult to distribute the database of attributes across a large number of servers. Without a way to direct a query to the right server, queries must be sent to all servers, an operation that doesn't scale. Profile <ref> [Peterson 88] </ref> restricts the set of name servers that are queried and relies on cross-references to direct queries to servers that were not included in the original set.
Reference: [Postel & Reynolds 85] <author> J. B. Postel and J. K. Reynolds. </author> <title> File transfer protocol. DARPA Internet RFC 959, </title> <month> October </month> <year> 1985. </year>
Reference-contexts: Because Prospero runs in a heterogeneous environment, it was necessary to support multiple access methods. Among those presently supported are Sun's Network File System [Sandberg et al. 85], the Andrew File System [Howard et al. 88], and access using the anonymous file transfer protocol <ref> [Postel & Reynolds 85] </ref>. When the client has located a file to be opened, an additional query is sent to the directory server on the system storing the file. This query requests the value of the access-method attribute.
Reference: [Postel 80] <author> J. B. Postel. </author> <title> User datagram protocol. DARPA Internet RFC 768, </title> <month> August </month> <year> 1980. </year>
Reference-contexts: To reduce the overhead that would otherwise be incurred when establishing connections to multiple directory servers, the Prospero protocol is layered on top of a reliable datagram protocol described in Appendix E and implemented using the connectionless User Datagram Protocol <ref> [Postel 80] </ref>. The directory server accepts queries, retrieves the requested data, and responds to the client. Internally, the server uses the Prospero library to process directory information and object attributes.
Reference: [Presotto et al. 91] <author> D. Presotto, R. Pike, K. Thompson, and H. Trickey. </author> <title> Plan 9: A distributed system. </title> <booktitle> In Proceedings of Spring 1991 EurOpen, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: This problem is addressed in Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabrera & 25 Wyllie 88], Plan 9 <ref> [Presotto et al. 91] </ref>, and Amoeba [Tanenbaum et al. 90, van Renesse 89] by supporting user-centered naming: each user resolves names in a separate name space containing only the files of interest to that user. <p> Like the predecessor directories in OS12, the stacking of directories in the 3-D file system supports only a subset of the functionality of union links. 55 The function of the union mount in the Plan 9 operating system <ref> [Presotto et al. 91] </ref> is close to that of the union link. Plan 9 allows a process to associate multiple file systems (or directories) with a single name prefix 16 . <p> Some recent systems including Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabr-era & Wyllie 88], Plan 9 <ref> [Presotto et al. 91] </ref>, and Amoeba [Tanenbaum et al. 90, van Renesse 89] allow users to customize all parts of their name spaces. <p> Tools for resource discovery could benefit from the use of this information in directing searches. 110 8.7 Operating Systems The goal of allowing users to construct a system by selecting components that are available from the network is a goal that is shared by Plan 9 <ref> [Presotto et al. 91] </ref>. A key difference between Plan 9 and the Virtual System Model is that Plan 9 addresses the problems of combining the components, not of finding them. A system view in Plan 9 is not persistent.
Reference: [Rabin & Scott 59] <author> M. O. Rabin and D. Scott. </author> <title> Finite automata and their decision problems. </title> <journal> IBM Journal of Research, </journal> <volume> 3(2) </volume> <pages> 115-125, </pages> <year> 1959. </year>
Reference-contexts: The NFA is described in <ref> [Rabin & Scott 59] </ref> and [Hopcroft & Ullman 79] where it is shown to be computationally equivalent to the DFA. Graphically, a union link is represented as an edge with no label 13 . Figure 4.8 shows a naming network with three union links.
Reference: [Riley 89] <author> V. A. Riley. </author> <title> An interchange format for hypertext systems: The intermedia model. </title> <type> Technical Report 89-6, </type> <institution> Institute for Research in Information and Scholarship, Brown University, </institution> <year> 1989. </year>
Reference-contexts: Most existing hypertext systems that work across application boundaries make use of a link service [Pearl 89] or database <ref> [Riley 89] </ref> to maintain information about the links. Existing link services are not capable of tying together information on a global scale, though there is a great deal of interest in building link servers that can.
Reference: [Ritchie & Thompson 74] <author> D. M. Ritchie and K. Thompson. </author> <title> The Unix time sharing system. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 365-375, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Only files within the user's catalog could be named, and thereby accessed. This limitation is addressed in the Multics [Daley & Neumann 65] and Unix <ref> [Ritchie & Thompson 74] </ref> operating systems by supporting a hierarchical name space (an approach which has been adopted by most subsequent systems).
Reference: [Saltzer 78] <author> J. H. Saltzer. </author> <title> Operating Systems: an advanced course, </title> <booktitle> volume 60 of Lecture Notes in Computer Science, chapter 3, </booktitle> <pages> pages 99-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: Acceptance is determined by the number of users to which a name is visible. 2.3 A Formal Basis for Naming This section presents a formal model for the resolution of names in existing systems. This model is described informally in <ref> [Saltzer 78] </ref>. <p> In others, it is determined by applying a closure function. A closure function, : object ! N S, maps an object to the name space within which names embedded in or specified by the object are to be resolved <ref> [Saltzer 78, Neuman 89a] </ref>. Since the name space to be used is specified by the closure function, it needn't be specified as part of the name itself. <p> Closure is represented the same way in the Virtual System Model. To review, a closure function, : object ! N S, maps an object to the starting context from which names embedded in the object are to be resolved <ref> [Saltzer 78, Neuman 89a] </ref>. 52 A file system based on the Virtual System Model is different from other file systems in that closure information is required to be stored with each object. <p> Its use for naming in file systems has been discussed <ref> [Saltzer 78] </ref>, but no existing systems (other than Prospero) fully implement it. In many systems, users approximate closure by setting environment variables before running a program.
Reference: [Saltzer 82] <author> J. H. Saltzer. </author> <title> On the naming and binding of network destinations. </title> <booktitle> In Proceedings of the International Symposium on Local Computer Networks, </booktitle> <pages> pages 311-317, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Examples of objects include files, directories, processors, users, and servers. 8 An address is the information used by a system to internally identify an object. An address is itself a name that is understood by the system <ref> [Saltzer 82] </ref>. As used in this dissertation, the distinction between a name and an address is that a name is visible to the user whereas an address might not be. A path name is a name for an object that consists of more than one part.
Reference: [Sandberg et al. 85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network File System. </title> <booktitle> In Proceedings of the Summer 1985 Usenix Conference, </booktitle> <pages> pages 119-130, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: Examples of host-based naming include IBIS [Tichy & Ruan 84], FTP, and to some extent, Sun's Network File System <ref> [Sandberg et al. 85] </ref> 1 . In host-based naming, a user wanting to access a file must know the name of the host on which the file resides. <p> If the object is a file, a method is needed to retrieve its contents. Because Prospero runs in a heterogeneous environment, it was necessary to support multiple access methods. Among those presently supported are Sun's Network File System <ref> [Sandberg et al. 85] </ref>, the Andrew File System [Howard et al. 88], and access using the anonymous file transfer protocol [Postel & Reynolds 85]. When the client has located a file to be opened, an additional query is sent to the directory server on the system storing the file.
Reference: [Satyanarayanan 90] <author> M. Satyanarayanan. </author> <title> Scalable, secure, and highly available distributed file access. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 9-21, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Some of these lists are periodically distributed through electronic mail. 3.2.2 Global Naming An alternative to host-based naming is global naming. Global naming is used by the Andrew File System [Howard et al. 88], Coda <ref> [Satyanarayanan 90, Kistler & Satya-narayanan 91] </ref>, Locus [Walker et al. 83], Unix United [Brownbridge et al. 82], Sprite [Ousterhout et al. 88], Echo [Hisgen et al. 89], and the Universal Directory Service [Lantz et al. 85]. <p> Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System [Howard et al. 88], Coda <ref> [Satyanarayanan 90, Kistler & Satyanarayanan 91] </ref>, Locus [Walker et al. 83], Sprite [Ousterhout et al. 88], and Echo [Hisgen et al. 89].
Reference: [Schwartz 89] <author> M. F. Schwartz. </author> <title> The networked resource discovery project. </title> <booktitle> In Proceedings of the IFIP XI World Congress, </booktitle> <pages> pages 827-832, </pages> <month> August </month> <year> 1989. </year> <month> 125 </month>
Reference-contexts: It starts its search by looking for the organization name in a database built from network news articles. It then uses the Internet Domain Naming System to find hosts to look for and finally the finger protocol to search for the individual. Other approaches include user discovery agents <ref> [Schwartz 89] </ref> which accept queries from users and use the information provided in the query to find objects in which the user has an interest. The information needed to direct a query to the appropriate agent evolves over time.
Reference: [Schwartz 91] <author> M. F. Schwartz. </author> <title> Resource discovery and related research at the University of Colorado. </title> <type> Technical Report CU-CS-508-91, </type> <institution> Department of Computer Science University of Colorado, Boulder, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: The target of the link would be an entire file, or by defining a new address type, the link could reference a region within a file. 8.6 The Resource Discovery Project The resource discovery project at the University of Colorado <ref> [Schwartz 91] </ref> has examined mechanisms for the discovery of resources on large networks. Most of the work has concentrated on ways to use the existing information sources that already exist on the network, often tying together multiple services.
Reference: [Sollins 85] <author> K. R. Sollins. </author> <title> Distributed Name Management. </title> <type> Ph.D. Dissertation, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <month> February </month> <year> 1985. </year> <note> Laboratory for Computer Science Technical Report 331. </note>
Reference-contexts: Many of these terms will be defined in greater detail later in this chapter. Terms that apply only to the Virtual System Model are defined in Chapter 4. 9 2.2 The Nature of Naming In her thesis, Sollins describes the way that names are used in everyday life <ref> [Sollins 85] </ref>. Among the characteristics she discusses, seven are particularly important in this work: individuality, multiplicity, mobility, locality, manifest meaning, communication, and sharing.
Reference: [Steiner et al. 88] <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of the Winter 1988 Usenix Conference, </booktitle> <pages> pages 191-201, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The authentication method presently supported identifies the host from which a request originates and the name of the user on the host. It trusts the software at the client to correctly identify the user. Hooks are in place to support stronger authentication methods such as Kerberos <ref> [Steiner et al. 88] </ref>. Table 6.1 shows the rights that appear in access control lists. The entries on the left appear in directory ACLs and apply to all links within the directory. The entries on the right apply to individual links within a directory.
Reference: [Stoy & Strachey 72] <author> J. E. Stoy and C. Strachey. OS6: </author> <title> An experimental operating system for a cmall computer. </title> <journal> The Computer Journal, </journal> <volume> 15(3) </volume> <pages> 195-203, </pages> <year> 1972. </year> <title> Part 2: Input/output and filing system. </title>
Reference-contexts: Perhaps one of the earliest uses of a mechanism similar to union links was for version control in the Oxford experimental operating system OS12 [Black 91], a successor of OS6 <ref> [Stoy & Strachey 72] </ref>. A directory in OS12 can contain a link to a single predecessor directory, which might itself have a predecessor. If no match is found in the current directory, and if a predecessor directory exists, the predecessor directory is searched.
Reference: [Tanenbaum et al. 90] <author> A. S. Tanenbaum, R. van Renesse, H. van Staveren, G. J. Sharp, S. J. Mullender, J. Jansen, and G. van Rossum. </author> <title> Experience with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 47-63, </pages> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: This problem is addressed in Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabrera & 25 Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref> by supporting user-centered naming: each user resolves names in a separate name space containing only the files of interest to that user. <p> I look at each of the features of the Virtual System Model and discuss the relationship to similar features in existing systems. 4.4.1 Directed Graph Based Naming The structure of the naming network in the Virtual System Model is similar to that of the capability-based directory service used by Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref>. The two are similar in that they support multiple name spaces, and that no constraints are placed on the topology of the naming network. Like the Virtual System Model, the active name space in Amoeba is specified by identifying the root directory. <p> Some recent systems including Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabr-era & Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref> allow users to customize all parts of their name spaces.
Reference: [Terry 85] <author> D. B. Terry. </author> <title> Distributed Name Servers: Naming and Caching in Large Distributed Computing Environments. </title> <type> Ph.D. Dissertation, </type> <institution> University of California, Berkeley, </institution> <month> March </month> <year> 1985. </year> <note> Computer Science Division Technical Report 85-228. </note>
Reference: [Terry et al. 84] <author> D. B. Terry, M. Painter, D. W. Riggle, and S. Zhou. </author> <title> The Berkeley internet domain server. </title> <booktitle> In Proceedings of the Summer 1984 Usenix Conference, </booktitle> <pages> pages 23-31, </pages> <month> June </month> <year> 1984. </year>
Reference: [Tichy & Ruan 84] <author> W. F. Tichy and Z. Ruan. </author> <title> Towards a distributed file system. </title> <booktitle> In Proceedings of the Summer 1984 Usenix Conference, </booktitle> <pages> pages 87-97, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Examples of host-based naming include IBIS <ref> [Tichy & Ruan 84] </ref>, FTP, and to some extent, Sun's Network File System [Sandberg et al. 85] 1 . In host-based naming, a user wanting to access a file must know the name of the host on which the file resides.
Reference: [Turing 36] <author> A. M. </author> <title> Turing. On computable numbers with an application to the entschei-dungsproblem. </title> <journal> Proceedings of the London Math Society, </journal> <volume> 2(42) </volume> <pages> 230-265, </pages> <year> 1936. </year> <month> 126 </month>
Reference-contexts: For example, a naming network might include filters that loop indefinitely and it is not possible for the system to decide whether a filter will eventually terminate <ref> [Turing 36] </ref>. As a practical matter we can require that filters terminate on all inputs, and we can make it the responsibility of the writer of a filter to write it in such a way that it does.
Reference: [van Renesse 89] <author> R. van Renesse. </author> <title> The Functional Processing Model. </title> <type> Ph.D. Dissertation, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: This problem is addressed in Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabrera & 25 Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref> by supporting user-centered naming: each user resolves names in a separate name space containing only the files of interest to that user. <p> I look at each of the features of the Virtual System Model and discuss the relationship to similar features in existing systems. 4.4.1 Directed Graph Based Naming The structure of the naming network in the Virtual System Model is similar to that of the capability-based directory service used by Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref>. The two are similar in that they support multiple name spaces, and that no constraints are placed on the topology of the naming network. Like the Virtual System Model, the active name space in Amoeba is specified by identifying the root directory. <p> Some recent systems including Tilde [Droms 86, Comer et al. 90], QuickSilver [Cabr-era & Wyllie 88], Plan 9 [Presotto et al. 91], and Amoeba <ref> [Tanenbaum et al. 90, van Renesse 89] </ref> allow users to customize all parts of their name spaces.
Reference: [Walker et al. 83] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The Locus distributed operating system. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 49-70, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: Some of these lists are periodically distributed through electronic mail. 3.2.2 Global Naming An alternative to host-based naming is global naming. Global naming is used by the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satya-narayanan 91], Locus <ref> [Walker et al. 83] </ref>, Unix United [Brownbridge et al. 82], Sprite [Ousterhout et al. 88], Echo [Hisgen et al. 89], and the Universal Directory Service [Lantz et al. 85]. <p> Chapter 3 discussed some of the shortcomings of conventional distributed file systems like the Andrew File System [Howard et al. 88], Coda [Satyanarayanan 90, Kistler & Satyanarayanan 91], Locus <ref> [Walker et al. 83] </ref>, Sprite [Ousterhout et al. 88], and Echo [Hisgen et al. 89].
Reference: [Wiederhold 86] <author> G. Wiederhold. </author> <title> Views, objects, and databases. </title> <journal> IEEE Computer, </journal> 19(12) 37-44, December 1986. 
Reference-contexts: The primary functions of a database view are as an abstraction mechanism that hides the conceptual organization of the information in a database from the application and as a protection mechanism that prevents access to information that is to be protected <ref> [Wiederhold 86] </ref>. In the Virtual System Model, views are used to organize the available information.
Reference: [Yankelovich et al. 88] <author> N. Yankelovich, B. J. Haan, N. K. Meyrowitz, and S. M. </author> <title> Drucker. Intermedia: The concept and the construction of a seamless information environment. </title> <journal> IEEE Computer, </journal> <volume> 21(1), </volume> <month> January </month> <year> 1988. </year>
Reference-contexts: Most hypertext systems run as a single application on a single system, but there has been recent work on supporting hypertext links across applications and over a network <ref> [Yankelovich et al. 88, Kacmar & Legget 91, Pearl 89] </ref>. Most existing hypertext systems that work across application boundaries make use of a link service [Pearl 89] or database [Riley 89] to maintain information about the links.
References-found: 79

