URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1997/UM-CS-1997-043.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/analysis.html
Root-URL: 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Burch, E. Clarke, K. McMillan, D. Dill, and L. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 428-439, </pages> <year> 1990. </year>
Reference-contexts: We plan to explore a number of directions for further improving the performance of FLAVERS composite data flow analysis. For example, we shall evaluate the symbolic model checking approach <ref> [1] </ref> to see if it might help by reducing the size of the variable automata we use in our analyses. We also intend to complement the basic direction of this current work by exploring ways to reduce the size of the TFG's being analyzed.
Reference: [2] <author> M. Dwyer. </author> <title> Data Flow Analysis for Verifying Correctness Properties of Concurrent Programs. </title> <type> PhD thesis, </type> <institution> University of Massachussetts, Amherst, </institution> <year> 1995. </year>
Reference-contexts: From there the transition on event RecordState is taken to state 1, 5. Finally, the transition on the next event in the execution trace, Car.CloseDoors, leads to the violation state for the product automaton, which signifies that this execution trace corresponds to an infeasible path. <ref> [2] </ref> proves convergence of this algorithm to the maximal fixed point and reports the complexity to be O (jSjjN j 2 ). In the worst case a task automaton needs to be constructed for each task.
Reference: [3] <author> M. Dwyer and L. Clarke. </author> <title> Data flow analysis for verifying properties of concurrent programs. </title> <booktitle> In Proceedings of the Second ACM Sigsoft Symposium on Foundations of Software Engineering, </booktitle> <pages> pages 62-75, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: To successfully analyze a large concurrent system, however, static analysis approaches often have to deal with large internal representations of that system. FLAVERS is one of the few static analysis approaches that has worst-case bounds that are low-order polynomial in the size of the system <ref> [3] </ref>. Despite these low worst-case theoretical bounds, however, FLAVERS can still require sizeable computing resources. Computing resource requirements can become especially large during the iterative application of FLAVERS that is sometimes needed to achieve desired precision of results. <p> ^ a k 2 A C k g S k * v D is the unique violation state Note that the set of product automaton states is not necessarily a full cross product of the set of states in the property and the sets of states in all constraint automata. <ref> [3] </ref> contains a discussion of some techniques that reduce the size of the space of states of the product automaton. <p> The combined number of runs of each of the two approaches for all programs is 612. In our experiments we did not use a full product automaton, but rather an automaton produced by applying a standard reduction algorithm [6] and then the heuristics from <ref> [3] </ref> to the full product automaton. To build this reduced product automaton, the product-based version has to construct the full cross-product of all constraint and property automata for the problem and then reduce it.
Reference: [4] <author> P. Godefroid and P. Wolper. </author> <title> Using partial orders for the efficient verification of deadlock freedom and safety properties. </title> <booktitle> In Proceedings of the Third Workshop on Computer Aided Verification, </booktitle> <pages> pages 417-428, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Currently, we model con-currency with TFG's that contain enormous numbers of edges needed to model all possible interleav-ings of the statements of parallel tasks. Needing to consider all of these edges slows the analysis of such programs considerably. Partial order methods <ref> [7, 4, 5] </ref> may prove useful in addressing this problem by reducing the need for many of these edges.
Reference: [5] <author> G. J. Holzmann, P. Godefroid, and D. Pirottin. </author> <title> Coverage preserving reduction strategies for reachabil-ity analysis. </title> <booktitle> In Proceedings of 12th International Conference on Protocol Specification, Testing, and Verification, </booktitle> <address> INWG/IFIP, Orlando, Fl., </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Currently, we model con-currency with TFG's that contain enormous numbers of edges needed to model all possible interleav-ings of the statements of parallel tasks. Needing to consider all of these edges slows the analysis of such programs considerably. Partial order methods <ref> [7, 4, 5] </ref> may prove useful in addressing this problem by reducing the need for many of these edges.
Reference: [6] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Formal Languages and their Relation to Automata. </title> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference-contexts: The combined number of runs of each of the two approaches for all programs is 612. In our experiments we did not use a full product automaton, but rather an automaton produced by applying a standard reduction algorithm <ref> [6] </ref> and then the heuristics from [3] to the full product automaton. To build this reduced product automaton, the product-based version has to construct the full cross-product of all constraint and property automata for the problem and then reduce it.
Reference: [7] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <editor> In E. M. Clarke and R. Kurshan, editors, </editor> <booktitle> Computer-Aided Verification, </booktitle> <pages> pages 25-41. </pages> <publisher> American Mathematical Society, </publisher> <address> Providence RI, </address> <year> 1991. </year> <booktitle> Number 3 in DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle>
Reference-contexts: Currently, we model con-currency with TFG's that contain enormous numbers of edges needed to model all possible interleav-ings of the statements of parallel tasks. Needing to consider all of these edges slows the analysis of such programs considerably. Partial order methods <ref> [7, 4, 5] </ref> may prove useful in addressing this problem by reducing the need for many of these edges.
References-found: 7

