URL: http://www.cs.mu.oz.au/tr_db/mu_97_15.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: The BDIM Agent Toolkit Design  
Author: Paolo Busetta Kotagiri Ramamohanarao 
Address: Parkville, Victoria 3052 Australia  
Affiliation: Department of Computer Science The University of Melbourne  
Pubnum: Technical Report 97/15  
Abstract: The BDIM (Belief, Desire, Intention, Message) Agent Toolkit is a collection of Java classes designed to enable rapid prototyping of new architectures for BDI agents. Its cornerstone is a Java package, BDIM, which is a framework for defining plans and beliefs. Two alternative packages providing run-time support for BDIM are part of the Toolkit. The first, SimpleBdi, implements an unsophisticated agent architecture, similar to existing BDI systems. The second, TOMAS (Transaction Oriented Multi Agent System), adopts the distributed nested transaction paradigm to perform automatic concurrency control and multi-agent coordination. This paper presents the detailed designs and usage guidelines of BDIM, SimpleBdi and TOMAS. Acknowledgements The authors would like to thank Evan Harris for his precious comments. The research was supported by an Australian Research Council grant, the Key Centre for Knowledge Based Systems, and the Cooperative Research Centre for Intelligent Decision Systems. P. Busetta was supported by an Australian Postgraduate Award (APA) scholarship. 
Abstract-found: 1
Intro-found: 1
Reference: [AG96] <author> K. Arnold and J. Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addi-son Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The reader should at least have some familiarity with the following (in decreasing order of importance): * Object Oriented analysis and design languages. As discussed in Section 1.4, the UML notation [BR97a] has been adopted for this document (a summary is in the Appendix); * The Java language <ref> [AG96] </ref>; * Intelligent Agent architectures (see [Sho93, WJ95] for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the
Reference: [BGK + 95] <author> J. Bailey, M. Georgeff, D. Kemp, D. Kinny, and Kotagiri R. </author> <title> Active databases and agent systems a comparison. </title> <editor> In T. Sellis, editor, </editor> <booktitle> Proceedings of the Second International Workshop on Rules in Database Systems, </booktitle> <address> Athens, Greece, </address> <publisher> LNCS 985, </publisher> <pages> pages 342-356, </pages> <address> Eindhoven, The Netherlands, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: Finally, the Appendix contains a summary of the UML notation used in this paper, with the minor readability improvements which have been adopted. 1.3 Related Readings An overview of the Toolkit, its goals and motivations are presented in [BR97b]. <ref> [BGK + 95] </ref> gives some background information about the research at the basis of TOMAS. The reader should at least have some familiarity with the following (in decreasing order of importance): * Object Oriented analysis and design languages.
Reference: [BR97a] <author> G. Booch and J. Rumbaugh. </author> <title> Unified Method for Object-Oriented Development Version 1.0. Rational Software Corporation, </title> <year> 1997. </year>
Reference-contexts: The reader should at least have some familiarity with the following (in decreasing order of importance): * Object Oriented analysis and design languages. As discussed in Section 1.4, the UML notation <ref> [BR97a] </ref> has been adopted for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see [Sho93, WJ95] for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing <p> The UML (Unified Method for Object-Oriented Development Language) notation <ref> [BR97a] </ref>, well known in the software engineering community, has been chosen to illustrate its design. This notation is constituted of a number of different types of diagrams, whose graphical syntax is summarised in the Appendix.
Reference: [BR97b] <author> P. Busetta and Kotagiri R. </author> <title> An Architecture for Mobile BDI Agents. </title> <type> Technical Report 97/16, </type> <institution> The University of Melbourne, Department of Computer Science, </institution> <address> Melbourne, Australia, </address> <year> 1997. </year>
Reference-contexts: Finally, the Appendix contains a summary of the UML notation used in this paper, with the minor readability improvements which have been adopted. 1.3 Related Readings An overview of the Toolkit, its goals and motivations are presented in <ref> [BR97b] </ref>. [BGK + 95] gives some background information about the research at the basis of TOMAS. The reader should at least have some familiarity with the following (in decreasing order of importance): * Object Oriented analysis and design languages.
Reference: [BSS94] <author> A. Beguelin, E. Seligman, and M. Starkey. Dome: </author> <title> Distributed Object Migration Environment. </title> <type> Technical Report 153, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, USA, </address> <year> 1994. </year>
Reference-contexts: introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, <ref> [PSWL95, BSS94, Maf95] </ref>). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. The UML (Unified Method for Object-Oriented Development Language) notation [BR97a], well known in the software engineering community, has been chosen to illustrate its design.
Reference: [GHJV95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: so to avoid running an Intention which previously failed. 4.2 BdiCallback and BdiPlanCallback BdiCallback (Figure 33) is used to implement a general mechanism to notify an "observer" object of an event happened in an "observed" object. 11 11 That is, BdiCallback is used to implement the Observer pattern described by <ref> [GHJV95] </ref>. 43 Many methods of SimpleBdi classes accept a BdiCallback as a parameter, typically to notify of the completion of an activity or the change of state of a resource. When the expected event happens, one of the callback () methods is invoked, as appropriate.
Reference: [GI89] <author> M. P. Georgeff and F. F. Ingrand. </author> <title> Decision making in an embedded reasoning system. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, Mi., USA, </address> <year> 1989. </year>
Reference-contexts: The Toolkit has been designed in layers (implemented as Java packages), in order to enable the rapid prototyping of the run-time libraries documented here and any future developments. While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by <ref> [GI89, RG92, Rao96, GR93] </ref>. Many of its entities take their names from the concepts in [RG92] and [GR93] that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: The Toolkit has been designed in layers (implemented as Java packages), in order to enable the rapid prototyping of the run-time libraries documented here and any future developments. While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by <ref> [GI89, RG92, Rao96, GR93] </ref>. Many of its entities take their names from the concepts in [RG92] and [GR93] that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit. <p> While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by [GI89, RG92, Rao96, GR93]. Many of its entities take their names from the concepts in [RG92] and <ref> [GR93] </ref> that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit. <p> SimpleBdi is a relatively naive implementation of a unsophisticated BDI agent architecture. SimpleBdi can be used as foundation for more complex architectures, such as TOMAS (Transaction Oriented Multi Agent System). TOMAS automatically performs concurrency control and multi-agent coordination of computations by adopting the distributed nested transaction paradigm <ref> [GR93] </ref>. This paradigm guarantees the preservation of the ACID (Atomicity, Consistency, Isolation, Durability) properties. 1.2 Scope and Overview of this Report The aim of this paper is a detailed presentation of the design of the BDIM Agent Toolkit. <p> for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see [Sho93, WJ95] for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions <ref> [GR93] </ref>; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, [PSWL95, BSS94, Maf95]). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. <p> These PlanInterpreters execute Plans as transactions. A transaction is defined as an ACID (Atomic, Consistent, Isolated, Durable) unit of work. A TOMAS transaction has the same properties as those traditionally implemented by database systems, TP monitors, transaction-oriented operating systems, etc. <ref> [GR93] </ref>. In addition, transactions in TOMAS can be nested and their scope can span multiple agents (that is, they are distributed ). Accesses to non-volatile Beliefs are automatically serialized (via the LockMgr class), while a general purpose caching mechanism (implemented by Buffered-Database) is used to guarantee consistency. <p> A Transaction object represents and supervises a set of strictly related actions being executed as an ACID (Atomic, Consistent, Isolated, Durable) unit of work. In essence, a Transaction is a finite state automata whose states and transitions are defined by the well known Two-Phase Commit Protocol (2PC) <ref> [GR93] </ref>. The Transaction class is abstract in the sense that it has no intimate knowledge of either the actions being performed or the resources it is managing or its users. 5.2.1 State, Instantiation, Resource Managers The current state of a Transaction is represented by a TranState object.
Reference: [Maf95] <author> S. Maffeis. </author> <title> Adding Group Communication and Fault-Tolerance to CORBA. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies, </booktitle> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, <ref> [PSWL95, BSS94, Maf95] </ref>). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. The UML (Unified Method for Object-Oriented Development Language) notation [BR97a], well known in the software engineering community, has been chosen to illustrate its design.
Reference: [PSWL95] <author> G.D. Parrington, S.K. Shrivastava, S.M. Wheater, and M.C. Little. </author> <title> The Design and Implementation of Arjuna. </title> <journal> USENIX Computing Systems Journal, </journal> <volume> 8(3), </volume> <year> 1995. </year>
Reference-contexts: introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, <ref> [PSWL95, BSS94, Maf95] </ref>). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. The UML (Unified Method for Object-Oriented Development Language) notation [BR97a], well known in the software engineering community, has been chosen to illustrate its design.
Reference: [Rao96] <author> Anand S. Rao. AgentSpeak(L): </author> <title> BDI Agents speak out in a logical computable language. </title> <booktitle> In MAAMAW'96: 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, </booktitle> <publisher> LNAI 1038, </publisher> <address> Eindhoven, The Netherlands, </address> <month> January </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: The Toolkit has been designed in layers (implemented as Java packages), in order to enable the rapid prototyping of the run-time libraries documented here and any future developments. While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by <ref> [GI89, RG92, Rao96, GR93] </ref>. Many of its entities take their names from the concepts in [RG92] and [GR93] that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit. <p> Section 1.4, the UML notation [BR97a] has been adopted for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see [Sho93, WJ95] for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to <ref> [RG92, Rao96] </ref>); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, [PSWL95, BSS94, Maf95]). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. <p> The terms used to name entities related to specific agent concepts have been taken from the BDI literature and <ref> [Rao96] </ref> in particular. Two other terms are used with a specific meaning in the context of this paper: * user: a programmer who develops an application (that is, an agent system) by using any combination of the packages described here.
Reference: [RG92] <author> Anand S. Rao and Michael P. Georgeff. </author> <title> An abstract architecture for rational agents. </title> <editor> In W. Swartout C. Rich and B. Nebel, editors, </editor> <booktitle> Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Mateo, CA, 1992. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: The Toolkit has been designed in layers (implemented as Java packages), in order to enable the rapid prototyping of the run-time libraries documented here and any future developments. While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by <ref> [GI89, RG92, Rao96, GR93] </ref>. Many of its entities take their names from the concepts in [RG92] and [GR93] that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit. <p> While the design of the Toolkit is completely original, the ideas it incorporates have been largely influenced by [GI89, RG92, Rao96, GR93]. Many of its entities take their names from the concepts in <ref> [RG92] </ref> and [GR93] that they implement. 1.1.1 Major Components of the Toolkit Agent Toolkit and their reciprocal dependencies. 1 The grey area identifies the components which are part of the Toolkit. <p> Section 1.4, the UML notation [BR97a] has been adopted for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see [Sho93, WJ95] for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to <ref> [RG92, Rao96] </ref>); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault tolerant languages (for instance, [PSWL95, BSS94, Maf95]). 1.4 Design Notation The Toolkit has been developed adopting object-oriented techniques. <p> In TOMAS, Plans and IntentionInstantiators are suspended until they are granted all the required locks. In other words, while the use of locks guarantee the consistency of view, the atomicity of each action with regard to other actions on the Beliefs (required by <ref> [RG92] </ref>) is no longer guaranteed. 71 5.7.3 Operations on Messages get message ops () returns a TranMsgOps to its caller. TranMsgOps performs all its operations by means of TranConnection, passing the Transaction and the String identifier ("Reader" or "Writer") of its TransPlanInterpreter.
Reference: [Sho93] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: As discussed in Section 1.4, the UML notation [BR97a] has been adopted for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see <ref> [Sho93, WJ95] </ref> for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault
Reference: [WJ95] <author> M. Wooldridge and N. R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. Knowledge Engineering Review, </journal> <volume> 10(12), </volume> <year> 1995. </year> <title> 74 6 Appendix: Summary of UML 1.0 Figures 49, 50, 51, 52 summarise the symbols adopted in the UML diagrams of this paper; a subset of [BR97a] has been used. The only difference with [BR97a] is the usage of dashed boxes to identify abstract classes and Java interfaces in the Class Diagrams (Figure 49). All the diagrams in this paper have been drawn by using a public domain two-dimensional graphical editor, </title> <journal> xdvi. </journal> <volume> 75 76 77 </volume>
Reference-contexts: As discussed in Section 1.4, the UML notation [BR97a] has been adopted for this document (a summary is in the Appendix); * The Java language [AG96]; * Intelligent Agent architectures (see <ref> [Sho93, WJ95] </ref> for a general introduction and an overview of the existing theories, architectures and systems) and BDI (with particular reference to [RG92, Rao96]); * Traditional transaction processing and nested transactions [GR93]; * The m4 macro processor, available on any Unix-compatible system and in the public domain; * Concurrent and fault
References-found: 14

