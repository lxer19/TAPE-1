URL: http://www.cs.rpi.edu/tr/90-20.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: 
Title: Mutual Exclusion Revisited C Abstract family of four mutual exclusion algorithms is t presented. Its
Author: Boleslaw K. Szymanski 
Note: A  
Address: Troy, NY 12180  
Affiliation: omputer Science Department eRensselaer Polytechnic Institut  
Abstract-found: 0
Intro-found: 1
Reference: <author> 1] Davidson, </author> <title> C.M., "A Note on Concurrent Pro S gramming Control," </title> <journal> IEEE Transaction on oftware Engineering, </journal> <volume> vol. SE-13, no. 7, </volume> <month> July, </month> [ <title> 2] Dijkstra, E.W. "Solution to a problem in con-o current programming control," </title> <journal> Communication f the ACM, </journal> <volume> vol. 8, no. 9, </volume> <month> September, </month> <year> 1967, </year> <title> p. [ 3] Eisenberg, M.A., and McGuire, M.R. "Further - comments on Dijkstra's concurrent program ing control problem," </title> <journal> Communication of the . ACM, </journal> <volume> vol. 15, no. 11, </volume> <month> November, </month> <year> 1972, </year> <pages> pp 99. </pages>
Reference: [4] <author> Ferguson, M.J. </author> <title> "Multiaccess in a Nonqueueing n Mailbox Environment," </title> <journal> IEEE Transaction o oftware Engineering, </journal> <volume> vol. SE-10, no. 3, </volume> <month> May, </month> [ <title> 5] Knuth D.E., "Additional comments on a prob - lem in concurrent programming control," </title> <journal> Com unication of the ACM, </journal> <volume> vol. 9, no. 5, </volume> <month> May, </month> [ <title> 6] Lamport, L. "The mutual Exclusion Problem: t Part I A Theory of Interprocess Communica-ion," </title> <journal> JACM, </journal> <volume> vol. 33, no. 2, </volume> <month> April, </month> <year> 1986, </year> <pages> pp. </pages> [ <note> 7] Lamport, </note> <author> L. </author> <title> "The mutual Exclusion Problem: . Part II Statement and Solutions," </title> <journal> JACM, </journal> <volume> vol 3, no. 2, </volume> <month> April, </month> <year> 1986, </year> <pages> pp. 327-348. </pages>
Reference-contexts: However, this solution requires l synchronized accesses to the shared memory from al rocesses and such accesses could be difficult to sup t port. In a multiprocessor multiport memory system he test-and-set instruction cannot be implemented by , controlling an access cycle of a single processor <ref> [4] </ref> 11]. <p> a large VLSI chip processors cannot run on s the same clock because sending a clock pulse acros he chip introduces a delay in a pulse propagation. t Growing popularity of parallel and distributed archi-ectures has led to renewed interest in algorithmic , solutions to the mutual exclusion problem [1], <ref> [4] </ref>, [6] 7], [9], [11], [12], [13]. Algorithmic solutions to the mutual exclusion , problem were extensively studied in the past [2], [3] 5], [12].

Reference: [13] <author> Szymanski, B.K. </author> <title> "A Simple Solution to w Lamport's Concurrent Programming Problem ith Linear Wait," </title> <booktitle> Proc. 1988 International , Conference on Supercomputing, </booktitle> <address> St. Malo rance, </address> <month> July 4-8, </month> <year> 1988, </year> <pages> pp. 621-626. </pages> <editor> -[14] Szymanski, B.K. </editor> <title> "Efficient First-Come-First Serve Mutual Exclusion Algorithm," </title> <type> Technical [ Report, </type> <institution> RPI, </institution> <address> Troy, NY, </address> <month> December, </month> <year> 1988. </year> <title> 15] Truuvert K. "A Self-Stabilizing First-ComeS First-Served Mutual Exclusion Algorithm With mall Shared Variables," </title> <type> Technical Note, </type> <institution> University of Toronto, </institution> <month> July, </month> <year> 1989. </year>
Reference-contexts: run on s the same clock because sending a clock pulse acros he chip introduces a delay in a pulse propagation. t Growing popularity of parallel and distributed archi-ectures has led to renewed interest in algorithmic , solutions to the mutual exclusion problem [1], [4], [6] 7], [9], [11], [12], <ref> [13] </ref>. Algorithmic solutions to the mutual exclusion , problem were extensively studied in the past [2], [3] 5], [12]. Recently, Lamport in [7] presented a new s extended definition of the mutual exclusion and it our solutions characterized by different degrees of - enforced fairness and robustness. <p> The strongest fairness condition r (known as first-come first-served property) togethe ith the strongest robustness requirement are provided - by the algorithm that uses n-factorial of communica ion binary variables per process. The fair solution s with a constant number of communication variable as published in <ref> [13] </ref> (linear wait, four one-bit communication variables), and reported in [8] (first-come i first-served, five one-bit communication variables) and n [14] (first-come first-served, four one-bit communi - cation variables). <p> T 2. The Problem Statement he Lamport's definition of mutual exclusion - has been presented in [7], so only a general descrip ion is given here, following also <ref> [13] </ref>. There are n e (n&gt;1) processes that are numbered from 0 to n-1. Th rocesses are executing independently of each other, a possibly on different processors. Each process contains portion of the code called a critical section, which t often includes accesses to limited resources.
References-found: 3

