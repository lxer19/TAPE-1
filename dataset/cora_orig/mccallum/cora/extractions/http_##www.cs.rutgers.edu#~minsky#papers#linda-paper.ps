URL: http://www.cs.rutgers.edu/~minsky/papers/linda-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Title: Law-Governed Linda as a Coordination Model  
Author: Naftaly H. Minsky and Jerrold Leichter 
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Linda is a very high level communication model which allows processes to communicate without knowing each other's identities and without having to arrange for a definite rendezvous. This high level of abstraction would make Linda particularly suitable for use as a coordination model for open systems, if it were not for the fact that the Linda communication is very unsafe. We propose to remove this deficiency of Linda by means of the concept of law-governed architecture previously applied to centralized and message passing systems. We define a model for Law-Governed Linda (LGL) communication, and we demonstrate its efficacy by means of several illustrative examples. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Robert Bjornson. </author> <title> Linda on distributed memory multiprocessors. </title> <type> Technical Report RR-931, </type> <institution> Yale University Department of Computer Science, </institution> <month> November </month> <year> 1992. </year> <note> Also a 1993 Yale University PhD thesis. </note>
Reference-contexts: It may be possible to optimize the placement of such message tuples by analyzing the code that drive all processes of the system and concluding that only process t actually reads this tuple. An implementation can also combine global compile-time analysis with run-time monitoring <ref> [12, 1] </ref>. But for large, evolving systems such global optimization is quite impractical, as has been pointed out by Kahn and Miller [9]. Similar criticism has been leveled against Linda by other writers, who proposed various partial solutions.
Reference: 2. <author> Nicholas Carriero and David Gelernter. </author> <title> The S/Net's Linda kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(2), </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: The match and removal are an atomic operation on the tuple space. For a detailed discussion of the advantages of this model and its use for communication and synchronization the reader is referred to <ref> [8, 2, 16, 3] </ref>.
Reference: 3. <author> Nicholas Carriero and David Gelernter. </author> <title> Applications experience with Linda. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 23(9), </volume> <month> September </month> <year> 1988. </year> <booktitle> Proceedings of ACM/SIGPLAN PPEALS 1988. </booktitle>
Reference-contexts: The match and removal are an atomic operation on the tuple space. For a detailed discussion of the advantages of this model and its use for communication and synchronization the reader is referred to <ref> [8, 2, 16, 3] </ref>.
Reference: 4. <author> Paolo Ciancarini. </author> <title> Enacting rule-based software processes with polis. </title> <type> Technical report, </type> <institution> University of Pisa, </institution> <month> october </month> <year> 1991. </year>
Reference-contexts: This deficiency of Linda has been noted by others. Pinakis [15], in particular, constructed a version of Linda that supports safe direct communication (mes sage passing) between pairs of processes; and Ciancarini <ref> [4] </ref> enhanced Linda by making it support a sophisticated multiple tuple space organization. In this paper we take a more radical approach to this problem, based on the concept of law-governed architecture (LGA) [13].
Reference: 5. <author> W.F. Clocksin and C.S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: But these aspects of LGL are beyond the scope of this paper. We employ a restricted version of the Prolog language for the formulation of the law. Consequently, the reader is expected to have a passing familiarity with Prolog and with its Edinborough syntax <ref> [5] </ref>.
Reference: 6. <author> P.J. Denning and G. S. Graham. </author> <title> Protection principles and practice. </title> <booktitle> In AFIPS 1972 Spring Joint Computer Conf., </booktitle> <pages> pages 417-429. </pages> <publisher> AFIPS, </publisher> <year> 1972. </year>
Reference-contexts: the ruling is simply empty, the process will be blocked forever unless we extend the definition of Linda to allow for "suppressed" operations. 4 Examples 4.1 Capability-Based Control Over Message Passing Elaborating on our previous example, we now consider the law defined in Fig. 2, which establishes a capability-based control <ref> [6] </ref> over the exchange of messages between processes. As mentioned earlier, Pinakis [15] proposed a modification of Linda that uses encryption to support capabilities. Here we show how, under Law-Governed Linda, a similar discipline can be established simply by a law.
Reference: 7. <author> D. Gelenter and N. Carriero. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: 1 Introduction There is much to be said for the use of Linda as a coordination model for open systems <ref> [7] </ref>. In particular, the fact that Linda uncouples communicating processes in both time and space by allowing them to communicate without knowing each other's identities and without having to arrange for a definite rendezvous is very appropriate for open systems.
Reference: 8. <author> David H. Gelernter. </author> <title> Generative communication in Linda. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: In Sect. 3 we introduce our model for Law-Governed Linda (LGL), which is an adaptation of the model for distributed law-governed architecture introduced in [13], illustrating it by various examples in Sect. 4. 2 Linda and Its Weaknesses The Linda model <ref> [8] </ref> provides communication and synchronization between parallel processes by controlled access to a shared data structure called tuple space. A tuple space is a collection (bag) of tuples, each of which is a linear list of typed values called fields. <p> The match and removal are an atomic operation on the tuple space. For a detailed discussion of the advantages of this model and its use for communication and synchronization the reader is referred to <ref> [8, 2, 16, 3] </ref>.
Reference: 9. <author> K.M. Kahn and M.S. Miller. </author> <title> A letter about the article 'Linda in Context' by Carrierro and Gelernter. </title> <journal> Communications of the ACM, </journal> <volume> 32(10) </volume> <pages> 1253-1255, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: An implementation can also combine global compile-time analysis with run-time monitoring [12, 1]. But for large, evolving systems such global optimization is quite impractical, as has been pointed out by Kahn and Miller <ref> [9] </ref>. Similar criticism has been leveled against Linda by other writers, who proposed various partial solutions. Kahn and Miller [9] proposed to enhance the safety of communication in Linda by means of the concept of multiple tuple spaces. <p> But for large, evolving systems such global optimization is quite impractical, as has been pointed out by Kahn and Miller <ref> [9] </ref>. Similar criticism has been leveled against Linda by other writers, who proposed various partial solutions. Kahn and Miller [9] proposed to enhance the safety of communication in Linda by means of the concept of multiple tuple spaces. And Pinakis [15], who was worried specifically about safe message passing, proposed to use encryption techniques to support such communication in Linda. <p> Also by this rule, a process that in's a capability tuple is granted the capability specified in it. 4.2 Establishing Multiple Tuple Spaces The concept of multiple tuple spaces has been proposed frequently <ref> [9] </ref> as a means for enhancing the usefulness of Linda. Here we show how such a facility can be established under LGL by means of a very simple law.
Reference: 10. <author> B.W. Lampson. </author> <title> A note on the confinement problem. </title> <journal> Communications of the ACM, </journal> <volume> 16(10) </volume> <pages> 613-615, </pages> <month> Oct. </month> <year> 1976. </year>
Reference-contexts: An analogous solution for computer systems, where a server might be a program employed to compute the income tax of some client, for example, has been studied as the "confinement problem" <ref> [10] </ref>. The inhumanity of the ancient king is not a problem here, but the confinement of a programmed server may be technically difficult. <p> solution is not quite complete, in the following sense: We deal here only with the interaction of processes with the tuple space, ignoring possible communication between individual processes and the outside world, either by means of simple output, or through the very subtle, even if narrow, channels discussed by Lampson <ref> [10] </ref>. The former kind of channels can, in principle, be blocked by extending the class of controlled events; the later ones generally cannot be. Informally speaking, we intend to establish the following regime, partially illustrated by Fig. 6.
Reference: 11. <author> Jerrold Leichter and Naftaly H. Minsky. </author> <title> Obligations in law governed distributed systems. </title> <note> In preparation. </note>
Reference-contexts: The law has no control over the occurrence of controlled events, 6 but it prescribes the effects that any of them should have. This prescription, which is called the ruling of the law, 6 This is not quite the case for laws that incorporate obligations, as discussed in <ref> [14, 11] </ref>. is a sequence of primitive operations which are to be carried out in response to the event in question. <p> But it is sometimes necessary to control events that occur asynchronously with respect to the home process. These include various kinds of interrupts that may happen around a process, and the event of an obligation coming due, which is used to support the concept of enforceable obligations presented in <ref> [14, 11] </ref>.
Reference: 12. <author> Jerrold S. Leichter. </author> <title> Shared tuple memories, shared memories, buses and LAN's | Linda implementations across the spectrum of connectivity. </title> <type> Technical Report TR-714, </type> <institution> Yale University Department of Computer Science, </institution> <month> July </month> <year> 1989. </year> <note> Also a 1989 Yale University PhD thesis. </note>
Reference-contexts: It may be possible to optimize the placement of such message tuples by analyzing the code that drive all processes of the system and concluding that only process t actually reads this tuple. An implementation can also combine global compile-time analysis with run-time monitoring <ref> [12, 1] </ref>. But for large, evolving systems such global optimization is quite impractical, as has been pointed out by Kahn and Miller [9]. Similar criticism has been leveled against Linda by other writers, who proposed various partial solutions.
Reference: 13. <author> N.H. Minsky. </author> <title> The imposition of protocols over open distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: In this paper we take a more radical approach to this problem, based on the concept of law-governed architecture (LGA) <ref> [13] </ref>. Under this architecture the interaction of each process with the tuple space is governed by the same set of rules, called the "law" of the distributed system. <p> CCR-9308773. ?? Email: leichter@cs.rutgers.edu. We start with a brief introduction to the Linda communication model, and with a discussion of its liabilities. In Sect. 3 we introduce our model for Law-Governed Linda (LGL), which is an adaptation of the model for distributed law-governed architecture introduced in <ref> [13] </ref>, illustrating it by various examples in Sect. 4. 2 Linda and Its Weaknesses The Linda model [8] provides communication and synchronization between parallel processes by controlled access to a shared data structure called tuple space. <p> shall see after introducing our concept of Law-Governed Linda in the next section. 3 Law-Governed Linda In this section we define a model for law-governed architecture for Linda communication, or simply Law-Governed Linda (LGL), which is an adaptation of the previously published model of law-governed architectures for message passing systems <ref> [13] </ref>. This introduction is self contained, and does not assume any familiarity with the previous model.
Reference: 14. <author> N.H. Minsky and A. Lockman. </author> <title> Ensuring integrity by adding obligations to privileges. </title> <booktitle> In Proceedings of the 8th International Conference on Software Engineering, </booktitle> <pages> pages 92-102, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: The law has no control over the occurrence of controlled events, 6 but it prescribes the effects that any of them should have. This prescription, which is called the ruling of the law, 6 This is not quite the case for laws that incorporate obligations, as discussed in <ref> [14, 11] </ref>. is a sequence of primitive operations which are to be carried out in response to the event in question. <p> But it is sometimes necessary to control events that occur asynchronously with respect to the home process. These include various kinds of interrupts that may happen around a process, and the event of an obligation coming due, which is used to support the concept of enforceable obligations presented in <ref> [14, 11] </ref>.
Reference: 15. <author> J. Pinakis. </author> <title> Providing directed communication in linda. </title> <booktitle> In Proceedings of the 15th Australian Computer Science Conf., </booktitle> <pages> pages 731-743, </pages> <year> 1992. </year>
Reference-contexts: However, the reliance of Linda on a completely shared, wide open tuple space makes it too unsafe for this purpose. This deficiency of Linda has been noted by others. Pinakis <ref> [15] </ref>, in particular, constructed a version of Linda that supports safe direct communication (mes sage passing) between pairs of processes; and Ciancarini [4] enhanced Linda by making it support a sophisticated multiple tuple space organization. <p> Similar criticism has been leveled against Linda by other writers, who proposed various partial solutions. Kahn and Miller [9] proposed to enhance the safety of communication in Linda by means of the concept of multiple tuple spaces. And Pinakis <ref> [15] </ref>, who was worried specifically about safe message passing, proposed to use encryption techniques to support such communication in Linda. Our solution, by means of law-governed architecture, is more radical, and far more general then these. <p> As mentioned earlier, Pinakis <ref> [15] </ref> proposed a modification of Linda that uses encryption to support capabilities. Here we show how, under Law-Governed Linda, a similar discipline can be established simply by a law.
Reference: 16. <author> Robert A. Whiteside and Jerrold S. Leichter. </author> <title> Using Linda for supercomputing on a local area network. </title> <booktitle> In Proceedings, Supercomputing '88, </booktitle> <month> November </month> <year> 1988. </year> <institution> Also Yale University Department of Computer Science Technical Report TR-638 and Sandia National Laboratories Report SAND88-8818, </institution> <month> both June </month> <year> 1988. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The match and removal are an atomic operation on the tuple space. For a detailed discussion of the advantages of this model and its use for communication and synchronization the reader is referred to <ref> [8, 2, 16, 3] </ref>.
References-found: 16

