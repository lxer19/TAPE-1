URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1993/1993-27.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Efficient and Constructive Algorithms for the Pathwidth and Treewidth of Graphs  
Author: Hans L. Bodlaender Ton Kloks 
Abstract: In this paper we give, for all constants k, l, explicit algorithms, that given a graph G = (V; E) with a tree-decomposition of G with treewidth at most l, decide whether the treewidth (or pathwidth) of G is at most k, and if so, find a tree-decomposition or (path-decomposition) of G of width at most k, and that use O(jV j) time. In contrast with previous solutions, our algorithms do not rely on non-constructive reasoning, and are single exponential in k and l. This result can be combined with a result of Reed [37], yielding explicit O(n log n) algorithms for the problem, given a graph G, to determine whether the treewidth (or pathwidth) of G is at most k, and if so, to find a tree- (or path-)decomposition of width at most k (k constant). Also, Bodlaender [13] has used the result of this paper to obtain linear time algorithms for these problems. We also show that for all constants k, there exists a polynomial time algorithm, that, when given a graph G = (V; E) with treewidth k, computes the pathwidth of G and a path-decomposition of G of minimum width. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Abrahamson and M. R. Fellows. </author> <title> Finite automata, bounded treewidth and well-quasiordering. In Graph Structure Theory, </title> <journal> Contemporary Mathematics vol. </journal> <volume> 147, </volume> <pages> pages 539-564. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: Results of a similar nature as ours were independently obtained by Lagergren and Arnborg [31] and by Abrahamson and Fellows <ref> [1] </ref>. It should be noted, that for k = 1; 2; 3; 4, linear time and space algorithms based on graph rewriting exist for the `treewidth k' problem [6, 33, 42]. <p> See e.g., <ref> [7, 1] </ref>. * Use 'memoization'; i.e., do not compute full sets at once, but always try to find characteristics that can be included in a (not yet full) set of a node i that is as close to the root as possible.
Reference: [2] <author> S. Arnborg. </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability A survey. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 2-23, </pages> <year> 1985. </year>
Reference-contexts: There are also equivalent characterizations with help of graph grammars, or k-terminal recursive families of graphs. (See e.g., <ref> [2, 8, 22, 46] </ref>.) Formally, the treewidth (pathwidth) of a graph is the minimum treewidth (pathwidth) over all tree-decompositions (path-decompositions) of the graph. (See Section 2 for definitions.) When a tree- or path-decomposition is found of a graph G with optimal treewidth, then usually one can easily construct representations of the
Reference: [3] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embeddings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: These problems are NP-complete <ref> [3] </ref>. <p> The first known algorithms, solving the treewidth and pathwidth problems for fixed k are based on dynamic programming and use respectively O (n k+2 ) and O (n 2k 2 +4k+8 ) time <ref> [3, 21] </ref>. Then, Robertson and Seymour [41] gave a non-constructive proof of the existence of O (n 2 ) decision algorithms for the problems. Their algorithms consist of two steps. <p> The constant factors of these algorithms are still quite large, although much better than those of previous solutions, and `only' singly exponential in a the treewidth of the graphs involved. Note that, due to the NP-completeness of the decision problems Treewidth and Pathwidth <ref> [3] </ref>, we should not expect to do better than worst case running time exponential in k. We believe that our algorithms are probably 0 for small values of k, e.g., k = 3, 4, or 5.
Reference: [4] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <editor> In H. Ehrig, H. Kreowski, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the Fourth Workshop on Graph Grammars and Their Applications to Computer Science, </booktitle> <pages> pages 70-83. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 532, </volume> <year> 1991. </year> <note> To appear in J. ACM. </note>
Reference-contexts: Matousek and Thomas [33], Lagergren [30], and Reed [37] improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. Arnborg et al. <ref> [4] </ref> use a slightly different technique, based on graph rewriting, and obtain decision algorithms, that use linear time, but polynomial memory. This paper addresses the second step. <p> It might be that the variant of the algorithm mentioned in [13], that uses O (n log n) time, and only involves tree-decompositions of width at most k + 1 has most practical value. * Combine the results of this paper with graph rewriting techniques, as in <ref> [6, 4] </ref>. 8.2 Related results and open problems Recently, the algorithms given in this paper have been used in [13] to obtain a linear time algorithm, that given a graph G, decides whether G has treewidth at most k, and if so, find a tree-decomposition of width k (k fixed).
Reference: [5] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340, </pages> <year> 1991. </year>
Reference-contexts: This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph.
Reference: [6] <author> S. Arnborg and A. Proskurowski. </author> <title> Characterization and recognition of partial 3-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 </volume> <pages> 305-314, </pages> <year> 1986. </year>
Reference-contexts: This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph. <p> Results of a similar nature as ours were independently obtained by Lagergren and Arnborg [31] and by Abrahamson and Fellows [1]. It should be noted, that for k = 1; 2; 3; 4, linear time and space algorithms based on graph rewriting exist for the `treewidth k' problem <ref> [6, 33, 42] </ref>. We also solve a different, related problem, with basically the same algorithms: for each constant k, we have a polynomial time algorithm, that when given a graph G = (V; E), computes the pathwidth of G and a path-decomposition of G of minimum width. <p> For instance, it might well be that the following approach would yield the most practical algorithm for the `pathwidth 3' problem: * Find a tree-decomposition of width 3 of the input graph with the algorithm from Arnborg and Proskurowski <ref> [6] </ref>, or decide that the treewidth and hence the pathwidth is larger than 3. * Apply theorem 6.1 (ii), with some further optimizations. Several optimizations to our algorithms seem possible. Most obvious this is for the computations of full sets for introduce nodes. <p> It might be that the variant of the algorithm mentioned in [13], that uses O (n log n) time, and only involves tree-decompositions of width at most k + 1 has most practical value. * Combine the results of this paper with graph rewriting techniques, as in <ref> [6, 4] </ref>. 8.2 Related results and open problems Recently, the algorithms given in this paper have been used in [13] to obtain a linear time algorithm, that given a graph G, decides whether G has treewidth at most k, and if so, find a tree-decomposition of width k (k fixed).
Reference: [7] <author> M. W. Bern, E. L. Lawler, and A. L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 216-235, </pages> <year> 1987. </year>
Reference-contexts: See e.g., <ref> [7, 1] </ref>. * Use 'memoization'; i.e., do not compute full sets at once, but always try to find characteristics that can be included in a (not yet full) set of a node i that is as close to the root as possible.
Reference: [8] <author> H. L. Bodlaender. </author> <title> Classes of graphs with bounded treewidth. </title> <type> Technical Report RUU-CS-86-22, </type> <institution> Dept. of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1986. </year>
Reference-contexts: There are also equivalent characterizations with help of graph grammars, or k-terminal recursive families of graphs. (See e.g., <ref> [2, 8, 22, 46] </ref>.) Formally, the treewidth (pathwidth) of a graph is the minimum treewidth (pathwidth) over all tree-decompositions (path-decompositions) of the graph. (See Section 2 for definitions.) When a tree- or path-decomposition is found of a graph G with optimal treewidth, then usually one can easily construct representations of the
Reference: [9] <author> H. L. Bodlaender. </author> <title> Dynamic programming algorithms on graphs with bounded tree-width. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 105-119. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <year> 1988. </year> <month> 37 </month>
Reference-contexts: This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph.
Reference: [10] <author> H. L. Bodlaender. </author> <title> Improved self-reduction algorithms for graphs with bounded treewidth. </title> <booktitle> In Proc. 15th Int. Workshop on Graph-theoretic Concepts in Computer Science WG'89, </booktitle> <pages> pages 232-244. </pages> <publisher> Springer Verlag, </publisher> <address> Lect. </address> <booktitle> Notes in Computer Science, </booktitle> <volume> vol. 411, </volume> <year> 1990. </year> <note> To appear in: Annals of Discrete Mathematics. </note>
Reference-contexts: Also, the constant factors of these algorithms make them infeasible. With help of a self-reduction technique, introduced by Fellows and Langston [22], it is possible to obtain constructive O (n 2 ) algorithms, but at the cost of a further increase of the constant factors <ref> [10] </ref>. Matousek and Thomas [33], Lagergren [30], and Reed [37] improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm.
Reference: [11] <author> H. L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <type> Technical Report RUU-CS-92-12, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1992. </year> <note> To appear in Acta Cybernetica. </note>
Reference-contexts: Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. [18, 17, 24, 27, 29, 28, 26, 36, 44], on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. <ref> [11] </ref> for an overview.) This paper addresses the case that k is a fixed constant. The first known algorithms, solving the treewidth and pathwidth problems for fixed k are based on dynamic programming and use respectively O (n k+2 ) and O (n 2k 2 +4k+8 ) time [3, 21].
Reference: [12] <author> H. L. Bodlaender. </author> <title> Complexity of path-forming games. </title> <journal> Theor. Comp. Sc., </journal> <volume> 110 </volume> <pages> 215-245, </pages> <year> 1993. </year>
Reference-contexts: This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph.
Reference: [13] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 226-234. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: Our algorithms use linear time, and need as input, besides G a tree-decomposition of G of constant bounded width. Also, in contrast with the graph minors approach, the constant factor hidden in the O-notation of our algorithms is only singly exponential in k. Recently, Bodlaender <ref> [13] </ref> used the result of this paper as an important intermediate step to obtain explicit and constructive algorithms that solve the `treewidth k' and `pathwidth k' problems in linear time (k fixed). <p> The first step of our algorithm is to find a nice tree-decomposition (fX i j i 2 Ig; T = (I; F )) of G with treewidth k. Clearly, this can be done in polynomial time, and even in linear time, using the algorithm from <ref> [13] </ref> and lemma 2.3. Proposition 7.2 For each p 2 I, a full set of characteristics rooted at p contains a polynomial number of characteristics. Each characteristic contains O (1) integer sequences of length at most 2k + 3 = O (log n). Proof: See lemmas 4.1. <p> However, it also will not improve the time for 'negative' inputs. * Try to start with inputs with ` as small as possible. When combining the result of this paper with results in [30] or [37], or with the approach taken in <ref> [13] </ref>, we still can have ` 2k + 1, and this is probably not practical for most values of k. It might be that the variant of the algorithm mentioned in [13], that uses O (n log n) time, and only involves tree-decompositions of width at most k + 1 has <p> When combining the result of this paper with results in [30] or [37], or with the approach taken in <ref> [13] </ref>, we still can have ` 2k + 1, and this is probably not practical for most values of k. It might be that the variant of the algorithm mentioned in [13], that uses O (n log n) time, and only involves tree-decompositions of width at most k + 1 has most practical value. * Combine the results of this paper with graph rewriting techniques, as in [6, 4]. 8.2 Related results and open problems Recently, the algorithms given in this paper <p> log n) time, and only involves tree-decompositions of width at most k + 1 has most practical value. * Combine the results of this paper with graph rewriting techniques, as in [6, 4]. 8.2 Related results and open problems Recently, the algorithms given in this paper have been used in <ref> [13] </ref> to obtain a linear time algorithm, that given a graph G, decides whether G has treewidth at most k, and if so, find a tree-decomposition of width k (k fixed). Clearly, a similar results holds for pathwidth (cf. theorem 6.1).
Reference: [14] <author> H. L. Bodlaender and M. R. Fellows, </author> <year> 1993. </year> <title> Work in progress. </title>
Reference-contexts: Very recent results show that similar techniques can be employed to solve the fixed parameter variant of several other related problems in linear time: minimum cut linear 36 arrangement, modified minimum cut linear arrangement, directed minimum cut linear arrangement, search number, register sufficiency, and others <ref> [14] </ref>. It seems likely that for some of these (e.g., search number), also polynomial time algorithms for computing the number of graphs with bounded treewidth exist. For others of these problems, this is unlikely: e.g. minimum cut linear arrangement is NP-complete for graphs with treewidth 2 [35].
Reference: [15] <author> H. L. Bodlaender, J. R. Gilbert, H. Hafsteinsson, and T. Kloks. </author> <title> Approximating treewidth, pathwidth, and minimum elimination tree height. </title> <editor> In G. Schmidt and R. Berghammer, editors, </editor> <booktitle> Proceedings 17th International Workshop on Graph-Theoretic Concepts in Computer Science WG'91, </booktitle> <pages> pages 1-12. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 570, </volume> <year> 1992. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. [18, 17, 24, 27, 29, 28, 26, 36, 44], on approximation algorithms for treewidth and pathwidth (e.g. <ref> [15] </ref>), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant. <p> So, we assume a fixed upper bound on the treewidth of the input graphs, but the pathwidth of the input graphs, which must be computed, is not a-priory bounded by some constant. Most important for our discussions here are lemma 3.5, and the following fact. Theorem 7.1 <ref> [15] </ref> Let G = (V; E) be a graph with treewidth `. Then the pathwidth of G is at most (` + 1) log jV j.
Reference: [16] <author> H. L. Bodlaender and J. Gustedt. </author> <title> A conjecture on the pathwidth of k-trees. Contemp. Math. 147. In section "Open Problems", </title> <editor> editor N. Dean, </editor> <year> 1993. </year>
Reference-contexts: This solves an open problem from <ref> [16] </ref>.
Reference: [17] <author> H. L. Bodlaender, T. Kloks, and D. Kratsch. </author> <title> Treewidth and pathwidth of permutation graphs. </title> <booktitle> In Proceedings 20th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 114-125, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 700. </pages>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [18] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [19] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-582, </pages> <year> 1992. </year>
Reference-contexts: This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph.
Reference: [20] <author> I. S. Duff and J. K. Reid. </author> <title> The multifrontal solution of indefinite sparse symmetric linear equations. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 9 </volume> <pages> 302-325, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The notions of pathwidth and treewidth play an important role in many different fields of computer science, often with different terminologies, e.g. * Choleski factorization and Gauss elimination. (See e.g. <ref> [20] </ref>.) * VLSI-layout theory. (See e.g. [34].) * theory of expert systems. (See e.g. [32].) * algorithmic graph theory. * theory of graph grammars. (See e.g. [23].) fl A preliminary version of this paper appeared as Better algorithms for the pathwidth and treewidth of graphs, in the proceedings of ICALP'91. y
Reference: [21] <author> J. A. Ellis, I. H. Sudborough, and J. Turner. </author> <title> The vertex separation and search number of a graph. </title> <note> To appear in Information and Computation, </note> <year> 1994. </year>
Reference-contexts: The first known algorithms, solving the treewidth and pathwidth problems for fixed k are based on dynamic programming and use respectively O (n k+2 ) and O (n 2k 2 +4k+8 ) time <ref> [3, 21] </ref>. Then, Robertson and Seymour [41] gave a non-constructive proof of the existence of O (n 2 ) decision algorithms for the problems. Their algorithms consist of two steps. <p> So far, the only classes of graphs of bounded treewidth for which the complexity of the pathwidth problem was determined (besides classes of graphs with bounded pathwidth) were the trees and the forests: for these the pathwidth can be computed in linear time <ref> [21, 34, 43] </ref>. 2 Definitions and Preliminary Results The notions of treewidth and pathwidth were introduced by Robertson and Seymour [38, 40]. <p> Proof: Pathwidth, vertex separation number, and node search number are equivalent notions (see e.g. [34]). Each of the classes mentioned has a constant upper bound on the treewidth of the graphs in the class. 2 The pathwidth of trees and forests can be computed in linear time (see <ref> [21, 34, 43] </ref>).
Reference: [22] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision and the efficiency of polynomial-time algorithms. </title> <booktitle> In Proceedings of the 21rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 501-512, </pages> <year> 1989. </year>
Reference-contexts: There are also equivalent characterizations with help of graph grammars, or k-terminal recursive families of graphs. (See e.g., <ref> [2, 8, 22, 46] </ref>.) Formally, the treewidth (pathwidth) of a graph is the minimum treewidth (pathwidth) over all tree-decompositions (path-decompositions) of the graph. (See Section 2 for definitions.) When a tree- or path-decomposition is found of a graph G with optimal treewidth, then usually one can easily construct representations of the <p> Also, the constant factors of these algorithms make them infeasible. With help of a self-reduction technique, introduced by Fellows and Langston <ref> [22] </ref>, it is possible to obtain constructive O (n 2 ) algorithms, but at the cost of a further increase of the constant factors [10]. Matousek and Thomas [33], Lagergren [30], and Reed [37] improved on the first step.
Reference: [23] <author> A. Habel. </author> <title> Hyperedge Replacement: Grammars and Languages. </title> <type> PhD thesis, </type> <institution> Univ. Bremen, </institution> <year> 1988. </year> <month> 38 </month>
Reference-contexts: play an important role in many different fields of computer science, often with different terminologies, e.g. * Choleski factorization and Gauss elimination. (See e.g. [20].) * VLSI-layout theory. (See e.g. [34].) * theory of expert systems. (See e.g. [32].) * algorithmic graph theory. * theory of graph grammars. (See e.g. <ref> [23] </ref>.) fl A preliminary version of this paper appeared as Better algorithms for the pathwidth and treewidth of graphs, in the proceedings of ICALP'91. y Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, the Nether-lands.
Reference: [24] <author> M. Habib and R. H. Mohring. </author> <title> Treewidth of cocomparability graphs and a new order--theoretic parameter. </title> <type> Technical Report 336/1992, </type> <institution> Fachbereich Mathematik, Technis-che Universitat Berlin, </institution> <year> 1992. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [25] <author> T. Kloks. </author> <title> Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1993. </year>
Reference-contexts: We call D i the rooted tree-decomposition of G i rooted at node i. Lemma 2.1 For each node i, D i is a tree-decomposition of G i . Proof: For the simple proof, see e.g. <ref> [25] </ref>. 2 In order to describe our algorithms more easily, we introduce a special type of rooted tree-decompositions. 4 Definition 2.6 A rooted tree-decomposition D = (S; T ) with S = fX i j i 2 Ig and T = (I; F )) is called a nice tree-decomposition, if the <p> Lemma 2.2 Every graph G with treewidth k has a nice tree-decomposition of width k. Furthermore, if n is the number of vertices of G then there exists a nice tree-decomposition with at most 4n nodes. We omit the proof. See e.g. <ref> [25] </ref>.
Reference: [26] <author> T. Kloks. </author> <title> Treewidth of circle graphs. </title> <type> Technical Report RUU-CS-93-12, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1993. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [27] <author> T. Kloks, H. Bodlaender, H. Muller, and D. Kratsch. </author> <title> Computing treewidth and minimum fill-in: All you need are the minimal separators. To appear in: </title> <booktitle> proceedings 1st European Symposium on Algorithms, </booktitle> <address> ESA'93, </address> <year> 1993. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [28] <author> T. Kloks and D. Kratsch. </author> <title> Finding all minimal separators of a graph. </title> <institution> Computing Science Notes 93-27, Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [29] <author> T. Kloks and D. Kratsch. </author> <title> Treewidth of chordal bipartite graphs. </title> <editor> In P. Enjalbert, A. Finkel, and K. W. Wagner, editors, </editor> <booktitle> Proceedings Symp. Theoretical Aspects of Computer Science, STACS'93, </booktitle> <pages> pages 80-89, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 665. </pages>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [30] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for tree-decomposition and related problems. </title> <booktitle> In Proceedings of the 31rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 173-182, </pages> <year> 1990. </year>
Reference-contexts: With help of a self-reduction technique, introduced by Fellows and Langston [22], it is possible to obtain constructive O (n 2 ) algorithms, but at the cost of a further increase of the constant factors [10]. Matousek and Thomas [33], Lagergren <ref> [30] </ref>, and Reed [37] improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. <p> Matousek and Thomas [33], Lagergren <ref> [30] </ref>, and Reed [37] improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. <p> However, it also will not improve the time for 'negative' inputs. * Try to start with inputs with ` as small as possible. When combining the result of this paper with results in <ref> [30] </ref> or [37], or with the approach taken in [13], we still can have ` 2k + 1, and this is probably not practical for most values of k.
Reference: [31] <author> J. Lagergren and S. Arnborg. </author> <title> Finding minimal forbidden minors using a finite congruence. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 533-543. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year>
Reference-contexts: Recently, Bodlaender [13] used the result of this paper as an important intermediate step to obtain explicit and constructive algorithms that solve the `treewidth k' and `pathwidth k' problems in linear time (k fixed). Results of a similar nature as ours were independently obtained by Lagergren and Arnborg <ref> [31] </ref> and by Abrahamson and Fellows [1]. It should be noted, that for k = 1; 2; 3; 4, linear time and space algorithms based on graph rewriting exist for the `treewidth k' problem [6, 33, 42].
Reference: [32] <author> S. J. Lauritzen and D. J. Spiegelhalter. </author> <title> Local computations with probabilities on graphical structures and their application to expert systems. </title> <journal> The Journal of the Royal Statistical Society. Series B (Methodological), </journal> <volume> 50 </volume> <pages> 157-224, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The notions of pathwidth and treewidth play an important role in many different fields of computer science, often with different terminologies, e.g. * Choleski factorization and Gauss elimination. (See e.g. [20].) * VLSI-layout theory. (See e.g. [34].) * theory of expert systems. (See e.g. <ref> [32] </ref>.) * algorithmic graph theory. * theory of graph grammars. (See e.g. [23].) fl A preliminary version of this paper appeared as Better algorithms for the pathwidth and treewidth of graphs, in the proceedings of ICALP'91. y Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, the Nether-lands. <p> Also, researchers in expert system theory have found out that several otherwise time consuming statistical computations can be done quickly when a tree-decomposition (known as: junction tree, or clique tree) with small treewidth is known (see e.g., <ref> [32, 45] </ref>.) Much research has been done on the problem of determining the treewidth and path-width of a graph, and finding tree- or path-decompositions with optimal treewidth or pathwidth. These problems are NP-complete [3].
Reference: [33] <author> J. Matousek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 1-22, </pages> <year> 1991. </year>
Reference-contexts: Also, the constant factors of these algorithms make them infeasible. With help of a self-reduction technique, introduced by Fellows and Langston [22], it is possible to obtain constructive O (n 2 ) algorithms, but at the cost of a further increase of the constant factors [10]. Matousek and Thomas <ref> [33] </ref>, Lagergren [30], and Reed [37] improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. <p> Results of a similar nature as ours were independently obtained by Lagergren and Arnborg [31] and by Abrahamson and Fellows [1]. It should be noted, that for k = 1; 2; 3; 4, linear time and space algorithms based on graph rewriting exist for the `treewidth k' problem <ref> [6, 33, 42] </ref>. We also solve a different, related problem, with basically the same algorithms: for each constant k, we have a polynomial time algorithm, that when given a graph G = (V; E), computes the pathwidth of G and a path-decomposition of G of minimum width.
Reference: [34] <author> R. H. Mohring. </author> <title> Graph problems related to gate matrix layout and PLA folding. </title> <editor> In E. Mayr, H. Noltemeier, and M. Sys lo, editors, </editor> <title> Computational Graph Theory, </title> <journal> Comuting Suppl. </journal> <volume> 7, </volume> <pages> pages 17-51. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The notions of pathwidth and treewidth play an important role in many different fields of computer science, often with different terminologies, e.g. * Choleski factorization and Gauss elimination. (See e.g. [20].) * VLSI-layout theory. (See e.g. <ref> [34] </ref>.) * theory of expert systems. (See e.g. [32].) * algorithmic graph theory. * theory of graph grammars. (See e.g. [23].) fl A preliminary version of this paper appeared as Better algorithms for the pathwidth and treewidth of graphs, in the proceedings of ICALP'91. y Department of Computer Science, Utrecht University, <p> So far, the only classes of graphs of bounded treewidth for which the complexity of the pathwidth problem was determined (besides classes of graphs with bounded pathwidth) were the trees and the forests: for these the pathwidth can be computed in linear time <ref> [21, 34, 43] </ref>. 2 Definitions and Preliminary Results The notions of treewidth and pathwidth were introduced by Robertson and Seymour [38, 40]. <p> Proof: Pathwidth, vertex separation number, and node search number are equivalent notions (see e.g. <ref> [34] </ref>). Each of the classes mentioned has a constant upper bound on the treewidth of the graphs in the class. 2 The pathwidth of trees and forests can be computed in linear time (see [21, 34, 43]). <p> Proof: Pathwidth, vertex separation number, and node search number are equivalent notions (see e.g. [34]). Each of the classes mentioned has a constant upper bound on the treewidth of the graphs in the class. 2 The pathwidth of trees and forests can be computed in linear time (see <ref> [21, 34, 43] </ref>).
Reference: [35] <author> B. Monien and I. H. Sudborough. </author> <title> Min cut is NP-complete for edge weighted trees. </title> <journal> Theor. Comp. Sc., </journal> <volume> 58 </volume> <pages> 209-229, </pages> <year> 1988. </year>
Reference-contexts: It seems likely that for some of these (e.g., search number), also polynomial time algorithms for computing the number of graphs with bounded treewidth exist. For others of these problems, this is unlikely: e.g. minimum cut linear arrangement is NP-complete for graphs with treewidth 2 <ref> [35] </ref>. The results in this paper resolved some interesting open problems concerning the complexity of computing the treewidth or pathwidth for special classes of graphs.
Reference: [36] <author> A. Rajaraman, H. Balakrishnan, and C. Pandu Rangan. </author> <title> Modular decomposition techniques for distance-hereditary graphs. </title> <type> Unpublished Manuscript, </type> <year> 1993. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [37] <author> B. Reed. </author> <title> Finding approximate separators and computing tree-width quickly. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 221-228, </pages> <year> 1992. </year>
Reference-contexts: With help of a self-reduction technique, introduced by Fellows and Langston [22], it is possible to obtain constructive O (n 2 ) algorithms, but at the cost of a further increase of the constant factors [10]. Matousek and Thomas [33], Lagergren [30], and Reed <ref> [37] </ref> improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. <p> Matousek and Thomas [33], Lagergren [30], and Reed <ref> [37] </ref> improved on the first step. Lagergren [30] gives a parallel algorithm that uses O (log 3 n) time and O (n) processors on a CRCW PRAM. Reed [37] gives a sequential O (n log n) algorithm. Arnborg et al. [4] use a slightly different technique, based on graph rewriting, and obtain decision algorithms, that use linear time, but polynomial memory. This paper addresses the second step. <p> Reed <ref> [37] </ref> has found an O (n log n) algorithm, that when given a graph G = (V; E), either decides that the treewidth of G is at most k, or finds a tree-decomposition of G of width O (k) (for fixed k). <p> However, it also will not improve the time for 'negative' inputs. * Try to start with inputs with ` as small as possible. When combining the result of this paper with results in [30] or <ref> [37] </ref>, or with the approach taken in [13], we still can have ` 2k + 1, and this is probably not practical for most values of k.
Reference: [38] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. I. Excluding a forest. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 35 </volume> <pages> 39-61, </pages> <year> 1983. </year>
Reference-contexts: complexity of the pathwidth problem was determined (besides classes of graphs with bounded pathwidth) were the trees and the forests: for these the pathwidth can be computed in linear time [21, 34, 43]. 2 Definitions and Preliminary Results The notions of treewidth and pathwidth were introduced by Robertson and Seymour <ref> [38, 40] </ref>.
Reference: [39] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors | a survey. </title> <editor> In I. Anderson, editor, </editor> <booktitle> Surveys in Combinatorics, </booktitle> <pages> pages 153-171. </pages> <publisher> Cambridge Univ. Press, </publisher> <year> 1985. </year>
Reference-contexts: The notion of treewidth is also interesting because of its vital role in the theory of Graph Minors of Robertson and Seymour <ref> [39] </ref>. Also, a very large number of intractable graph problems become solvable in polynomial, and even linear time (and belong to the class NC), when restricted to graphs with bounded treewidth, given together with a suitable tree-decomposition.
Reference: [40] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: complexity of the pathwidth problem was determined (besides classes of graphs with bounded pathwidth) were the trees and the forests: for these the pathwidth can be computed in linear time [21, 34, 43]. 2 Definitions and Preliminary Results The notions of treewidth and pathwidth were introduced by Robertson and Seymour <ref> [38, 40] </ref>.
Reference: [41] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIII. The disjoint paths problem. </title> <type> Manuscript, </type> <year> 1986. </year>
Reference-contexts: The first known algorithms, solving the treewidth and pathwidth problems for fixed k are based on dynamic programming and use respectively O (n k+2 ) and O (n 2k 2 +4k+8 ) time [3, 21]. Then, Robertson and Seymour <ref> [41] </ref> gave a non-constructive proof of the existence of O (n 2 ) decision algorithms for the problems. Their algorithms consist of two steps.
Reference: [42] <author> D. P. Sanders. </author> <title> On linear recognition of tree-width at most four. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: Results of a similar nature as ours were independently obtained by Lagergren and Arnborg [31] and by Abrahamson and Fellows [1]. It should be noted, that for k = 1; 2; 3; 4, linear time and space algorithms based on graph rewriting exist for the `treewidth k' problem <ref> [6, 33, 42] </ref>. We also solve a different, related problem, with basically the same algorithms: for each constant k, we have a polynomial time algorithm, that when given a graph G = (V; E), computes the pathwidth of G and a path-decomposition of G of minimum width.
Reference: [43] <author> P. Sche*er. </author> <title> A linear algorithm for the pathwidth of trees. </title> <editor> In R. Bodendiek and R. Henn, editors, </editor> <booktitle> Topics in combinatorics and graph theory, </booktitle> <pages> pages 613-620, </pages> <address> Heidel-berg, 1990. </address> <publisher> Physica-Verlag. </publisher>
Reference-contexts: So far, the only classes of graphs of bounded treewidth for which the complexity of the pathwidth problem was determined (besides classes of graphs with bounded pathwidth) were the trees and the forests: for these the pathwidth can be computed in linear time <ref> [21, 34, 43] </ref>. 2 Definitions and Preliminary Results The notions of treewidth and pathwidth were introduced by Robertson and Seymour [38, 40]. <p> Proof: Pathwidth, vertex separation number, and node search number are equivalent notions (see e.g. [34]). Each of the classes mentioned has a constant upper bound on the treewidth of the graphs in the class. 2 The pathwidth of trees and forests can be computed in linear time (see <ref> [21, 34, 43] </ref>).
Reference: [44] <author> R. Sundaram, K. Sher Singh, and C. Pandu Rangan. </author> <title> Treewidth of circular-arc graphs. </title> <type> Manuscript, </type> <note> to appear in SIAM J. Disc. Math., </note> <year> 1991. </year>
Reference-contexts: These problems are NP-complete [3]. Research has been done on determining the treewidth and pathwidth of special classes of graphs (see e.g. <ref> [18, 17, 24, 27, 29, 28, 26, 36, 44] </ref>, on approximation algorithms for treewidth and pathwidth (e.g. [15]), and on the case that the parameter k is a fixed constant. (See e.g. [11] for an overview.) This paper addresses the case that k is a fixed constant.
Reference: [45] <author> L. C. van der Gaag. </author> <title> Probability-Based Models for Plausible Reasoning. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1990. </year>
Reference-contexts: Also, researchers in expert system theory have found out that several otherwise time consuming statistical computations can be done quickly when a tree-decomposition (known as: junction tree, or clique tree) with small treewidth is known (see e.g., <ref> [32, 45] </ref>.) Much research has been done on the problem of determining the treewidth and path-width of a graph, and finding tree- or path-decompositions with optimal treewidth or pathwidth. These problems are NP-complete [3].
Reference: [46] <author> T. V. Wimer. </author> <title> Linear Algorithms on k-Terminal Graphs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year> <month> 40 </month>
Reference-contexts: There are also equivalent characterizations with help of graph grammars, or k-terminal recursive families of graphs. (See e.g., <ref> [2, 8, 22, 46] </ref>.) Formally, the treewidth (pathwidth) of a graph is the minimum treewidth (pathwidth) over all tree-decompositions (path-decompositions) of the graph. (See Section 2 for definitions.) When a tree- or path-decomposition is found of a graph G with optimal treewidth, then usually one can easily construct representations of the <p> This set of problems includes many well-known NP-complete problems like Hamiltonian Circuit, Independent Set, etc., and even some PSPACE-complete problems (see e.g. <ref> [5, 6, 9, 12, 19, 46] </ref>). Typically, these algorithms use time polynomial in the number of vertices, but at least exponential in the treewidth of the input graph.
References-found: 46

