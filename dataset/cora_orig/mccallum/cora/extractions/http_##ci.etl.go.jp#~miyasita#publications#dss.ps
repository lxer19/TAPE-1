URL: http://ci.etl.go.jp/~miyasita/publications/dss.ps
Refering-URL: http://ci.etl.go.jp/~miyasita/papers.html
Root-URL: 
Email: miyasita@etl.go.jp  katia@cs.cmu.edu  miz@ei.sanken.osaka-u.ac.jp  
Title: Modeling Ill-Structured Optimization Tasks through Cases  
Author: Kazuo Miyashita Katia Sycara Riichiro Mizoguchi 
Keyword: Key words: case-based reasoning, optimization, task analysis  
Address: 1-1-4, Umezono, Tsukuba, Ibaraki 305, Japan  Pittsburgh, PA 15213, U.S.A.  8-1, Mihogaoka, Ibaragi, Osaka 567, Japan  
Affiliation: Electrotechnical Laboratory  The Robotics Institute Carnegie Mellon University  The Institute of Scientific and Industrial Research Osaka University  
Abstract: CABINS is a framework of modeling an optimization task in ill-structured domains. In such domains, neither systems nor human experts possess the exact model for guiding optimization. And the user's model of optimality is subjective and situation-dependent. CABINS optimizes a solution through iterative revision using case-based reasoning. In CABINS, task structure analysis was adopted for creating an initial model of the optimization task. Generic vocabularies found in the analysis were specialized into case feature descriptions for application problems. Extensive experimentation on job shop scheduling problems has shown that CABINS can operationalize and improve the model through the accumulation of cases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Allemang, </author> <title> Combining Case-Based Reasoning and Task-Specific Architectures, </title> <journal> IEEE Expert 9, </journal> <note> No.5 (1994) pp.24-34 </note>
Reference-contexts: For solving these difficulties, there have been attempts of combining knowledge-level analysis and case-based reasoning by constructing a task description of case-based reasoning or using a task structure as a guideline for developing a indexing schema of the case <ref> [3, 1] </ref>.
Reference: [2] <author> B. Chandrasekaran, </author> <title> Generic tasks as building blocks for knowledge-based systems: the diagnosis and routine design examples, </title> <journal> The Knowledge Engineering Review 3, </journal> <note> No.3 (1988) pp.183-210 </note>
Reference-contexts: In recent research on AI, there is a clear consensus in favor of knowledge-level analysis and its advantages for knowledge modeling and acquisition. Chandrasekaran and his colleagues advocated the generic task framework <ref> [2] </ref> and identified a number of tasks of general utility (such as classification), methods for performing the tasks and the kinds of knowledge needed by the methods. Clancey proposed heuristic classification [5] as an abstract inference pattern for a diagnosis task by examining some expert systems such as MYCIN.
Reference: [3] <author> B. Chandrasekaran, </author> <title> Design Problem Solving: A Task Analysis, </title> <journal> AI Magazine 11, </journal> <note> No.4 (1990) pp.59-71 </note>
Reference-contexts: For solving these difficulties, there have been attempts of combining knowledge-level analysis and case-based reasoning by constructing a task description of case-based reasoning or using a task structure as a guideline for developing a indexing schema of the case <ref> [3, 1] </ref>. <p> is a process used to achieve the goals in the task: for example, the task of optimization can be accomplished either by constructive methods or by repair-based methods. 6 can be considered as an of the optimization task, this task structure is constructed based on the task structure of design <ref> [3, 23] </ref>. In the task structure diagram, circles represent tasks and rectangles represent methods. This diagram is not intended to show a complete task structure for the optimization task: it, however, captures some methods and subtasks that are relevant in this paper.
Reference: [4] <author> B. Chandrasekaran and T.R. Johnson and J.W. Smith, </author> <title> Task-Structure Analysis for Knowledge Modeling, </title> <journal> Communications of ACM 35, </journal> <note> No.9 (1992) pp.124-137 </note>
Reference-contexts: The model of an optimization task should have the following knowledge: (1) user context-dependent preferences and (2) situation-dependent search control. In CABINS, CBR method is used for extending the optimization task model created by the domain experts and knowledge engineers based on the task structure analysis <ref> [4] </ref>. We 3 show that when coupled with the task-level analysis, the case-based reasoning method can provide strong leverage for reducing the difficulty of knowledge acquisition. <p> Recently a number of uniform knowledge-level analysis frameworks for describing systems have been developed by several research groups such as MULTIS [24], KADS [35], SPARK [12] and PROT EG E-II [28]. We adopt the task structure analysis <ref> [4] </ref> for building the model of the optimization task.
Reference: [5] <author> W.J. Clancey, </author> <title> Heuristic classification, </title> <booktitle> Artificial Intelligence 27 (1985) pp.289-350 </booktitle>
Reference-contexts: Chandrasekaran and his colleagues advocated the generic task framework [2] and identified a number of tasks of general utility (such as classification), methods for performing the tasks and the kinds of knowledge needed by the methods. Clancey proposed heuristic classification <ref> [5] </ref> as an abstract inference pattern for a diagnosis task by examining some expert systems such as MYCIN. McDermott developed half-weak methods [18], such as cover-and-differentiate and propose-and-revise methods, for solving general tasks that do not require domain specific search control knowledge.
Reference: [6] <editor> B.V. Dasarathy (ed.), </editor> <title> Nearest Neighbor (NN) Norms: NN Pattern Classification Techniques (IEEE Computer Society Press, </title> <address> Los Alamos, </address> <year> 1990) </year>
Reference-contexts: In CABINS cases are retrieved using k-Nearest Neighbor method <ref> [6] </ref>, and the standard formula of calculating the similarity between i-th case and the current problem is as follows 2 : exp ( u u N X (IM i CF i SD j where IM i j is the importance of j-th feature of i-th case in the case base, and
Reference: [7] <author> L. Eshelman, D. Ehret and J. McDermott, MOLE: </author> <title> A Tenacious Knowledge-Acquisition Tool, </title> <journal> International Journal of Man-Machine Studies 26, </journal> <note> No.1 (1987) pp.41-54 </note>
Reference-contexts: To elicit consistent domain knowledge from human experts, several model-based knowledge acquisition tools have been developed such as MOLE <ref> [7] </ref>, SALT [16], KNACK [11] and OPAL [25]. Although these model extension (knowledge acquisition) tools are powerful in allowing domain experts to make large knowledge bases without help from knowledge engineers, such tools must be strongly tied to a specific problem solving method presupposed by the tools.
Reference: [8] <author> S. </author> <title> French, Sequencing and Scheduling: An Introduction to the Mathematics of the Job-Shop (Ellis Horwood, </title> <address> London, </address> <year> 1982) </year>
Reference-contexts: Section 6 presents the concluding remarks. 2 Scheduling Problem Scheduling assigns a set of orders over time to a set of resources with finite capacity. One of the most difficult scheduling problem classes is job shop scheduling. Job shop scheduling is a well-known NP-complete problem <ref> [8] </ref>. In job shop scheduling, each order consists of a set of activities to be scheduled according to a partial activity ordering. <p> Job shop schedule optimization has been very difficult to automate for a variety of reasons. * It is one of the most difficult NP-hard combinatorial optimization problems <ref> [8] </ref>, and even domain experts are not believed to possess sufficient 4 heuristic knowledge for making good schedules efficiently [10]. * Owing to the tight interactions among scheduling constraints and the often conflicting nature of optimization criteria, it is impossible to assess with any precision the extent of the required schedule
Reference: [9] <author> D.S. Johnson, C.R. Aragon, L.A. McGeoch and C. Schevon, </author> <title> Optimization By Simulated Annealing: An Experimental Evaluation, Part I (Graph Partitioning, </title> <note> Operations Research 37, No.6 (1989) pp.865-892 32 </note>
Reference-contexts: These results show that accumulation of cases can enhance the competence of the created models. Other job shop scheduling experiments in [33] show that CABINS outperformed the simulated annealing method <ref> [9] </ref>, a well acknowledged optimization method, both in solution quality and problem solving efficiency. And the experiments in [20, 21] manifest effectiveness of the ways of exploiting failure cases in CABINS for speed-up learning in intractable optimization problems.
Reference: [10] <author> K. Kempf, C. LePape, S.F. Smith and B.R. Fox, </author> <title> Issues in the design of AI-based schedulers: Workshop report, </title> <journal> AI Magazine 11, </journal> <note> No.5 (1991) pp.37-46 </note>
Reference-contexts: Job shop schedule optimization has been very difficult to automate for a variety of reasons. * It is one of the most difficult NP-hard combinatorial optimization problems [8], and even domain experts are not believed to possess sufficient 4 heuristic knowledge for making good schedules efficiently <ref> [10] </ref>. * Owing to the tight interactions among scheduling constraints and the often conflicting nature of optimization criteria, it is impossible to assess with any precision the extent of the required schedule revision to improve the quality of a schedule, or the impact of a scheduling decision on the global satisfaction
Reference: [11] <author> G. Klinker, KNACK: </author> <title> Sample-driven knowledge acquisition tool for reporting system, </title> <editor> in: S. Marcus Ed. </editor> <title> Automating Knowledge Acquisition for Expert Systems, </title> <publisher> Ch.5 (Kluwer Academic, </publisher> <address> Boston, </address> <year> 1988) </year>
Reference-contexts: To elicit consistent domain knowledge from human experts, several model-based knowledge acquisition tools have been developed such as MOLE [7], SALT [16], KNACK <ref> [11] </ref> and OPAL [25]. Although these model extension (knowledge acquisition) tools are powerful in allowing domain experts to make large knowledge bases without help from knowledge engineers, such tools must be strongly tied to a specific problem solving method presupposed by the tools.
Reference: [12] <author> G. Klinker, C. Bhola, G. Dallemagne, D. Marques and J. McDermott, </author> <title> Usable and reusable programming constructs, </title> <journal> Knowledge Acquisition 3, </journal> <note> No.2 (1991) pp.117-135 </note>
Reference-contexts: These insights are used for the definition and enhancement of a knowledge-level model for the problem. Recently a number of uniform knowledge-level analysis frameworks for describing systems have been developed by several research groups such as MULTIS [24], KADS [35], SPARK <ref> [12] </ref> and PROT EG E-II [28]. We adopt the task structure analysis [4] for building the model of the optimization task.
Reference: [13] <author> J. Kolodner, R. Simpson and K. Sycara, </author> <title> A Process of Case-Based Reasoning in Problem Solving, </title> <booktitle> Proceedings of the Ninth International Joint Conference on Artificial Intelligence (1985) pp.284-290 </booktitle>
Reference-contexts: and, at the same time, is capable of matching the nuances of particular applications, a model extension framework based upon such a problem solving method has a highly practical value. 1.1 Case-Based Reasoning Case-based reasoning (CBR) is the problem solving paradigm where previous experiences are used to guide problem solving <ref> [13] </ref>. Cases similar to the current problem are retrieved from memory according to a similarity metric, the best case is selected from those retrieved and compared to the current problem.
Reference: [14] <author> J. </author> <title> Kolodner, </title> <publisher> Case-Based Reasoning (Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1993) </year>
Reference-contexts: CBR also helps a reasoner (1) take actions to avoid repeating past mistakes, and (2) focus its reasoning on important parts of a problem <ref> [14] </ref>. Owing to the above advantages, CBR has successfully been applied to many kinds of problems such as design, planning, diagnosis and instruction . Thus CBR can be regarded as an appropriate problem solving method for a large class of applications.
Reference: [15] <author> L. Lewis and D. Minior and S. Brown, </author> <title> A Case-Based Reasoning Solution to the Problem of Redundant Engineering in Large Scale Manufacturing, </title> <journal> International Journal of Expert Systems 4, </journal> <note> No.2 (1991) pp.189-201 </note>
Reference-contexts: Hence, CBR has been considered as a more natural and less time consuming method of knowledge acquisition <ref> [31, 15] </ref>. It should be noted, however, that CBR is not a panacea that obviates any overhead associated with knowledge acquisition. It defines new types of knowledge acquisition tasks, i.e., definition of appropriate case features and indices.
Reference: [16] <author> S. Marcus and J. McDermott, </author> <title> SALT: A Knowledge Acquisition Tool for Propose-and-Revise Systems, </title> <booktitle> Artificial Intelligence 39, </booktitle> <address> No.1 (1987) pp.1-37 </address>
Reference-contexts: To elicit consistent domain knowledge from human experts, several model-based knowledge acquisition tools have been developed such as MOLE [7], SALT <ref> [16] </ref>, KNACK [11] and OPAL [25]. Although these model extension (knowledge acquisition) tools are powerful in allowing domain experts to make large knowledge bases without help from knowledge engineers, such tools must be strongly tied to a specific problem solving method presupposed by the tools.
Reference: [17] <author> S. Markovitch and P.D. Scott, </author> <title> Information Filtering: Selection Mechanisms in Learning Systems, </title> <booktitle> Machine Learning 10 (1993) pp.113-151 </booktitle>
Reference-contexts: Although we can define the optimal case base size by monitoring the performance of CABINS for the problems in the domain [22], some knowledge filtering techniques <ref> [17] </ref> might be useful for improving efficiency of CABINS by dynamically eliminating redundant or incorrect cases in the case base. 31 Acknowledgment The authors are indebted to Dr. Johan Vanwelkenhuysen at Osaka University (currently at INRIA, France) for insightful discussions on knowledge modeling.
Reference: [18] <author> J. McDermott, </author> <title> Using problem-solving methods to impose structure on knowledge, </title> <booktitle> Proceedings of International Workshop on Artificial Intelligence for Industrial Applications (1988) pp.7-11 </booktitle>
Reference-contexts: Clancey proposed heuristic classification [5] as an abstract inference pattern for a diagnosis task by examining some expert systems such as MYCIN. McDermott developed half-weak methods <ref> [18] </ref>, such as cover-and-differentiate and propose-and-revise methods, for solving general tasks that do not require domain specific search control knowledge.
Reference: [19] <author> S. Minton, </author> <title> Learning Effective Search Control Knowledge: </title> <publisher> An Explanation-Based Approach (Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1988) </year>
Reference-contexts: We think the proposed model formulation method of combining task-level analysis and case-based reasoning can provide a practical approach for solving ill-structured optimization problems. As a limitation in the current status of our research, CABINS suffers from the utility problem <ref> [19] </ref> since CABINS requires more time for case matching and retrieval with increase in case base size.
Reference: [20] <author> K. Miyashita and K. Sycara, </author> <title> Learning Control Knowledge through Cases in Schedule Optimization Problems, </title> <booktitle> Proceedings of the Tenth IEEE Conference on Artificial Intelligence for Application (1994) pp.33-39 33 </booktitle>
Reference-contexts: These results show that accumulation of cases can enhance the competence of the created models. Other job shop scheduling experiments in [33] show that CABINS outperformed the simulated annealing method [9], a well acknowledged optimization method, both in solution quality and problem solving efficiency. And the experiments in <ref> [20, 21] </ref> manifest effectiveness of the ways of exploiting failure cases in CABINS for speed-up learning in intractable optimization problems. More importantly from the modeling perspective, a user of CABINS can define domain-specific case descriptions easily by specializing the generic vocabularies found by the task-level analysis.
Reference: [21] <author> K. Miyashita and K. Sycara, </author> <title> Improving System Performance in Case--Based Iterative Optimization through Knowledge Filtering, </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (1995, to be published) </booktitle>
Reference-contexts: These results show that accumulation of cases can enhance the competence of the created models. Other job shop scheduling experiments in [33] show that CABINS outperformed the simulated annealing method [9], a well acknowledged optimization method, both in solution quality and problem solving efficiency. And the experiments in <ref> [20, 21] </ref> manifest effectiveness of the ways of exploiting failure cases in CABINS for speed-up learning in intractable optimization problems. More importantly from the modeling perspective, a user of CABINS can define domain-specific case descriptions easily by specializing the generic vocabularies found by the task-level analysis.
Reference: [22] <author> K. Miyashita, </author> <title> A Case-Based Approach to Improve Quality and Efficiency in Ill-Structured Optimization: An Application to Job Shop Scheduling Ph.D. </title> <address> Dissertation (Osaka University, Osaka, </address> <year> 1994) </year>
Reference-contexts: See <ref> [22] </ref> for more details. 25 ing results with the captured preferences or how to define quality of a schedule whose evaluation is subjective. To address these issues, we had to devise a method to test the hypotheses in a consistent manner. <p> Although we can define the optimal case base size by monitoring the performance of CABINS for the problems in the domain <ref> [22] </ref>, some knowledge filtering techniques [17] might be useful for improving efficiency of CABINS by dynamically eliminating redundant or incorrect cases in the case base. 31 Acknowledgment The authors are indebted to Dr. Johan Vanwelkenhuysen at Osaka University (currently at INRIA, France) for insightful discussions on knowledge modeling.
Reference: [23] <author> R. Mizoguchi, </author> <title> Consideration on Design Process from a Knowledge Engineering Point of View, </title> <journal> Journal of Japanese Society for Artificial Intelligence 7, </journal> <note> No.2 (1992) pp.45-52 (in Japanese) </note>
Reference-contexts: is a process used to achieve the goals in the task: for example, the task of optimization can be accomplished either by constructive methods or by repair-based methods. 6 can be considered as an of the optimization task, this task structure is constructed based on the task structure of design <ref> [3, 23] </ref>. In the task structure diagram, circles represent tasks and rectangles represent methods. This diagram is not intended to show a complete task structure for the optimization task: it, however, captures some methods and subtasks that are relevant in this paper.
Reference: [24] <author> R. Mizoguchi, Y. Tijerino and M. Ikeda, </author> <title> Task Ontology and its Use in a Task Analysis | Two-level Mediating Representation in MULTIS |, Proceedings of the Second Japanese Knowledge Acquisition for Knowledge-Based Systems Workshop (1992) pp.185-198 </title>
Reference-contexts: These insights are used for the definition and enhancement of a knowledge-level model for the problem. Recently a number of uniform knowledge-level analysis frameworks for describing systems have been developed by several research groups such as MULTIS <ref> [24] </ref>, KADS [35], SPARK [12] and PROT EG E-II [28]. We adopt the task structure analysis [4] for building the model of the optimization task.
Reference: [25] <author> M.A. Musen, L.M. Fagan, </author> <title> D.M. Combs and E.H. Shortlife, Use of a domain model to drive an interactive knowledge-editing tool, </title> <journal> International Journal of Man-Machine Studies 12 (1987) pp.63-87 </journal>
Reference-contexts: To elicit consistent domain knowledge from human experts, several model-based knowledge acquisition tools have been developed such as MOLE [7], SALT [16], KNACK [11] and OPAL <ref> [25] </ref>. Although these model extension (knowledge acquisition) tools are powerful in allowing domain experts to make large knowledge bases without help from knowledge engineers, such tools must be strongly tied to a specific problem solving method presupposed by the tools.
Reference: [26] <author> M.A. Musen, </author> <title> Automated Support for Building and Extending Expert Models, </title> <booktitle> Machine Learning 4, </booktitle> <address> No.3-4 (1989) pp.347-375 </address>
Reference-contexts: Builders of expert systems formulate the model, first by defining a model of the behavior that they wish to understand and then corroborating and extending that model with the aid of specific examples. For example, PROT EG E <ref> [26] </ref> has two interrelated phases of knowledge base construction: (1) model building and (2) model extension. When building a model, developers must first perform a requirements analysis and identify the task that the expert system has to perform.
Reference: [27] <author> A. Newell, </author> <title> The Knowledge Level, </title> <booktitle> Artificial Intelligence 18, </booktitle> <address> No.1 (1982) pp.87-127 </address>
Reference-contexts: For extending a model, the model of the intended behavior of the expert system is validated by ascertaining how well the model applies to closely related application problems. Much of the activity involved in the first stage of model formulation, model building, entails knowledge-level <ref> [27] </ref> analysis, which determines (1) the goals for a knowledge-based system, (2) the actions of which the system is capable, and (3) the knowledge that the system can use to determine the actions that attain the goal.
Reference: [28] <author> A.R. Puerta, J.W. Egar, S.W. Tu and M.A. Musen, </author> <title> A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools, </title> <journal> Knowledge Acquisition 4, </journal> <note> No.2 (1992) pp.171-196 </note>
Reference-contexts: These insights are used for the definition and enhancement of a knowledge-level model for the problem. Recently a number of uniform knowledge-level analysis frameworks for describing systems have been developed by several research groups such as MULTIS [24], KADS [35], SPARK [12] and PROT EG E-II <ref> [28] </ref>. We adopt the task structure analysis [4] for building the model of the optimization task.
Reference: [29] <author> C.R. Reeves (Ed.), </author> <title> Modern Heuristic Techniques for Combinatorial Problems (Halsted Press, </title> <address> New York, </address> <year> 1993) </year>
Reference-contexts: In ill-structured problems, the random selection method is often used for selecting a repair action, since it allows a solution to escape from local minima <ref> [29] </ref>. Because the methods of goal-setting and repair-application in Figure 3 are strongly domain-dependent, these methods have to be defined and developed by domain experts with the help from knowledge engineers. In verifying solutions, a problem repair must be checked regarding feasibility of the result.
Reference: [30] <author> N. Sadeh, </author> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling, </title> <type> Ph.D. </type> <institution> Dissertation (Carnegie Mellon University, Pittsburgh, </institution> <year> 1991) </year>
Reference-contexts: Six groups of 10 problems each were randomly generated by considering three different values of the range parameter, and two values of the bottleneck configuration (1 and 2 bottleneck problems). These problems are variations of the problems originally reported in <ref> [30] </ref>. Our problem sets are, however, different in two respects: (a) we allow substitutable resources for non-bottleneck resources whereas the original problems did not, and (b) the due dates of orders in our problems are tighter by 20 percents than in the original problems.
Reference: [31] <author> E. Simoudis and J. Miller, </author> <title> The Application of CBR to Help Desk Appli--cations, </title> <booktitle> Proceedings of the Case-Based Reasoning Workshop (1991) pp.25-36 </booktitle>
Reference-contexts: Hence, CBR has been considered as a more natural and less time consuming method of knowledge acquisition <ref> [31, 15] </ref>. It should be noted, however, that CBR is not a panacea that obviates any overhead associated with knowledge acquisition. It defines new types of knowledge acquisition tasks, i.e., definition of appropriate case features and indices.
Reference: [32] <author> J. Stout, G. Caplain, S. Marcus and J. McDermott, </author> <title> Toward automating recognition of differing problem-solving demands, </title> <journal> International Journal of Man-Machine Studies 29, </journal> <note> No.5 (1988) pp.599-611 </note>
Reference-contexts: The failure of SALT was caused by the fact that the propose-and-revise problem solving method assumed by SALT was inappropriate for the scheduling problem in spite of its structural resemblance to the design problem <ref> [32] </ref>.
Reference: [33] <author> K. Sycara and K. Miyashita, </author> <title> Case-based Acquisition of User Preferences for Solution Improvement in Ill-Structured Domains, </title> <booktitle> Proceedings of the Twelfth National Conference on Artificial Intelligence (1994) </booktitle>
Reference-contexts: These results show that accumulation of cases can enhance the competence of the created models. Other job shop scheduling experiments in <ref> [33] </ref> show that CABINS outperformed the simulated annealing method [9], a well acknowledged optimization method, both in solution quality and problem solving efficiency. And the experiments in [20, 21] manifest effectiveness of the ways of exploiting failure cases in CABINS for speed-up learning in intractable optimization problems.
Reference: [34] <author> K. Sycara and K. Miyashita, </author> <title> Learning Control Knowledge through Case-Based Acquisition of User Optimization Preferences in Ill-Structured Domain, </title> <editor> in: G. Tecuci and Y. Kodratoff (Eds.), </editor> <title> Machine Learning and Knowledge Acquisition: </title> <publisher> Integrated Approaches (Morgan Kaufmann, </publisher> <address> San Mateo, </address> <note> To be published) </note>
Reference-contexts: Thus CBR can be regarded as an appropriate problem solving method for a large class of applications. In terms of knowledge acquisition, CBR has a number of practically desirable features which encourage CBR applications in many domains <ref> [34] </ref>. In CBR, successful cases are stored in the case base so that they can be retrieved and re-used in the future. Failed cases are also stored so that they can warn the problem solver of potential difficulties and help recover from failures.
Reference: [35] <author> B. Wielinga, G. Schreiber and J. Breuker, </author> <title> Modelling Expertise, </title> <editor> in: G. Schreiber, B. Wiekinga and J. Breuker (Eds.), KADS: </editor> <title> A Principled Approach to Knowledge-Based System Development, </title> <publisher> Ch.2 (Academic Press, </publisher> <address> San Diego, </address> <year> 1993) </year> <month> 35 </month>
Reference-contexts: These insights are used for the definition and enhancement of a knowledge-level model for the problem. Recently a number of uniform knowledge-level analysis frameworks for describing systems have been developed by several research groups such as MULTIS [24], KADS <ref> [35] </ref>, SPARK [12] and PROT EG E-II [28]. We adopt the task structure analysis [4] for building the model of the optimization task.
References-found: 35

