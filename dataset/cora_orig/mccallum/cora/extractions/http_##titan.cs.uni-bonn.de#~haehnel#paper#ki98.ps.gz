URL: http://titan.cs.uni-bonn.de/~haehnel/paper/ki98.ps.gz
Refering-URL: http://titan.cs.uni-bonn.de/~haehnel/
Root-URL: http://cs.uni-bonn.de
Email: fhaehnel,wolframg@cs.uni-bonn.de  gerhard@cs.rwth-aachen.de  
Title: GOLEX Bridging the Gap between Logic (GOLOG) and a Real Robot  
Author: Dirk Hahnel Wolfram Burgard and Gerhard Lakemeyer 
Address: Romerstr. 164, D-53117 Bonn  V, Ahornstr. 55, D-52056 Aachen  
Affiliation: Universitat Bonn, Institut fur Informatik III,  RWTH Aachen, Lehrgebiet Informatik  
Abstract: The control of mobile robots acting autonomously in the real world is one of the long-term goals of the field of artificial intelligence. So far the field lacks methods bridging the gap between the sophisticated symbolic techniques to represent and reason about action and more and more reliable low-level robot control and navigation systems. In this paper we present GOLEX, an execution and monitoring system for the logic-based action language GOLOG and the complex and distributed RHINO control software which operates on RWI B21 and B14 mobile robots. GOLEX provides the following features: it maps abstract primitive actions into low-level commands of the robot control system, thus allowing the user to concentrate on the application rather than the inner workings of the robot; it monitors the execution of the primitive GOLOG actions, making it possible to detect simple execution failures and timeouts; and it includes means to deal with sensing and user input and to continue the operation appropriately. We present two different real-world applications in which GOLEX successfully operated a mobile robot in dynamic and even unstructured environments. These results suggest that the time is ripe for using symbolic action languages for mobile robot applications. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Beetz and D. McDermott. </author> <title> Improving robot plans during their execution. </title> <editor> In Kris Hammond, editor, </editor> <booktitle> Second International Conference on AI Planning Systems, </booktitle> <pages> pages 3 12, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Finally, when moving to more complex applications than the ones we reported on, the current techniques in GOLEX to deal with execution failures will probably not suffice. For example, rather than simply generating a new plan from scratch after a failure, plan transformation techniques as in <ref> [1] </ref> may be prefer able. While GOLEX was designed for the purpose of linking GOLOG to a real robot, GOLEX really only gets to see the output of GOLOG, that is, a sequence of primitive actions. <p> Hence we expect it to be relatively easy to use GOLEX in conjunction with other action or planning languages such as TL [2] and RPL <ref> [1] </ref>. Finally, we strongly believe that both robotics and symbolic AI can benefit from each other. GOLEX is but one step in bringing the two fields closer together.
Reference: 2. <author> W. Bibel. </author> <title> Let's plan it deductively. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <volume> volume 2, </volume> <pages> pages 15491562, </pages> <month> August </month> <year> 1997. </year>
Reference-contexts: Hence we expect it to be relatively easy to use GOLEX in conjunction with other action or planning languages such as TL <ref> [2] </ref> and RPL [1]. Finally, we strongly believe that both robotics and symbolic AI can benefit from each other. GOLEX is but one step in bringing the two fields closer together.
Reference: 3. <author> J. Buhmann, W. Burgard, A.B. Cremers, D. Fox, T. Hofmann, F. Schneider, J. Strikos, and S. Thrun. </author> <title> The mobile robot RHINO. </title> <journal> AI Magazine, </journal> <volume> 16(2):3138, </volume> <month> Summer </month> <year> 1995. </year>
Reference: 4. <author> W. Burgard, Armin B. Cremers, D. Fox, D. Hahnel, G. Lakemeyer, D. Schulz, W. Steiner, and S. Thrun. </author> <title> The interactive museum tour-guide robot. </title> <booktitle> In Proc. of the Sixteenth National Conference on Artificial Intelligence (AAAI-98), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: This software is being used by over 20 groups worldwide. GOLEX has been extensively tested in different applications and proved to be extremely robust in a real-world scenario, in which RHINO was deployed over several days as an interactive and autonomous tour-guide in the Deutsches Museum Bonn <ref> [4] </ref>. As for related work, issues such as execution monitoring certainly come up and need to be solved in any implementation of a robot control language. Most of these languages such as COLBERT [13] remain well below the level of abstraction of GOLOG and hence are hard to compare. <p> RHINO (Figure 2a) from the University of Bonn and GOLEM from the University of Toronto (Figure 2b). 5.1 The Museum Tour-Guide Application The first experiment has been carried out during the six day deployment of the mobile robot RHINO as an interactive personal tour-guide in the Deutsches Museum Bonn, Germany <ref> [4] </ref>. The task of the robot was to guide visitors through the exhibition and to provide explanations about the exhibits (see Figure 3).
Reference: 5. <author> W. Burgard, D. Fox, D. Hennig, and T. Schmidt. </author> <title> Estimating the absolute position of a mobile robot using position probability grids. </title> <booktitle> In Proc. of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 896901, </pages> <year> 1996. </year>
Reference-contexts: The task planner uses GOLOG to plan the activities of the robot and GOLEX to perform and monitor them. The navigation system or low-level control system of the robot consists of the collision avoidance routine [8], the map updating and path planning modules [21] and the localization system <ref> [5] </ref>. The task of the map building system is to update the information about the environment given new sensory input. The path planner computes cost-optimal paths from a starting position to a given target position given the current map of the environment.
Reference: 6. <author> J. G. Carbonell, C. A. Knoblock, and S. Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. Van Lehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <year> 1990. </year>
Reference-contexts: In fact, between then and now most of the work in robotics has concentrated on fixing those shortcomings and issues of high-level control have regained interest only recently. The work closest to our own is perhaps [12]. There PRODIGY <ref> [6] </ref>, a non-linear planning system, is coupled with a mobile robot. While the authors address issues similar to ours such as monitoring and failure recovery, their execution system ROGUE is tightly coupled with PRODIGY and thus cannot be readily used for GOLOG.
Reference: 7. <author> C. Fedor. TCX. </author> <title> An interprocess communication system for building robotic architectures. Programmer's guide to version 10.xx. </title> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> 12 </month> <year> 1993. </year>
Reference-contexts: The localization module permanently estimates the position of the robot within its environment. Finally, the RHINO system contains various hardware control interfaces, for example, to a top-mounted pan-tilt-head carrying a stereo camera system or to the speech-board. All software modules communicate using TCX <ref> [7] </ref>, a communication manager for point-to-point socket communication. The RHINO navigation system has been proven robust and reliable in different applications [3,21]. The modularity provides a high flexibility with respect to new applications and supports the specialization of dedicated modules according to specific subtasks.
Reference: 8. <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics and Automation Magazine, </journal> <year> 1997. </year>
Reference-contexts: The task planner uses GOLOG to plan the activities of the robot and GOLEX to perform and monitor them. The navigation system or low-level control system of the robot consists of the collision avoidance routine <ref> [8] </ref>, the map updating and path planning modules [21] and the localization system [5]. The task of the map building system is to update the information about the environment given new sensory input.
Reference: 9. <author> G. de Giacamo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent execution, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <volume> volume 2, </volume> <pages> pages 12211226, </pages> <year> 1997. </year>
Reference-contexts: Although GOLEX has been proven to allow a robust execution of plans in these real world applications, there are many opportunities for future research: While there is a parallel version of GOLOG <ref> [9] </ref>, GOLEX currently does not support parallel actions. For example, GOLEX is not able to react on user input while the robot travels to its destination. Supporting parallelism in general would require a resource management system since certain resources such as motors cannot be shared simultaneously.
Reference: 10. <author> G. de Giacomo and H. J. Levesque. </author> <title> An incremental interpreter for high-level programs with sensing. </title> <type> Technical report, </type> <institution> University of Toronto, </institution> <year> 1998. </year>
Reference: 11. <author> G. de Giacomo, R. Reiter, and M. M. Soutchanski. </author> <title> Execution monitoring of high-level robot programs. </title> <booktitle> In Proceedings of the Sixth International Conference on Knowledge Representation (KR 98), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Work is under way to adapt GOLEX to use these more expressive action languages. Similarly, it seems desirable to leave at least some part of execution monitoring under high-level user control. First results on how to specify such monitors in GOLOG have recently appeared <ref> [11] </ref>, but they are still at a preliminary stage. Finally, when moving to more complex applications than the ones we reported on, the current techniques in GOLEX to deal with execution failures will probably not suffice.
Reference: 12. <author> K. Z. Haigh and M. M. Veloso. </author> <title> High-level planning and low-level execution: towards a complete robotic agent. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents, </booktitle> <address> Marina del Rey, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: In fact, between then and now most of the work in robotics has concentrated on fixing those shortcomings and issues of high-level control have regained interest only recently. The work closest to our own is perhaps <ref> [12] </ref>. There PRODIGY [6], a non-linear planning system, is coupled with a mobile robot. While the authors address issues similar to ours such as monitoring and failure recovery, their execution system ROGUE is tightly coupled with PRODIGY and thus cannot be readily used for GOLOG.
Reference: 13. <author> K. Konolige. Colbert: </author> <title> A language for reactive control in saphira. </title> <booktitle> In KI-97: Advances in Artificial Intelligence, </booktitle> <pages> pages 3152. </pages> <publisher> LNAI Series, Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: As for related work, issues such as execution monitoring certainly come up and need to be solved in any implementation of a robot control language. Most of these languages such as COLBERT <ref> [13] </ref> remain well below the level of abstraction of GOLOG and hence are hard to compare. Using logic to control a real robot was first attempted in the SHAKEY project [18].
Reference: 14. <author> G. Lakemeyer. </author> <title> On sensing and off-line interpreting in golog. </title> <type> Technical report, </type> <institution> RWTH Aachen, </institution> <year> 1998. </year>
Reference: 15. <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <volume> 31:5984, </volume> <year> 1997. </year>
Reference-contexts: Programming such robot applications using conventional programming languages is a very delicate and often frustrating enterprise, especially for people other than the designers of the robot. Partly as an answer to this dilemma the logic-based action language GOLOG <ref> [15] </ref> has been developed. It allows a user to specify at a very abstract level how primitive actions like pickup (x) change the world. Moreover, such actions can be combined into high-level programs using familiar control structures such as loops or recursive procedures. <p> applications of GOLOG, a tour-guide robot and an office delivery task. 2 GOLOG A Language for Specifying Actions Since GOLEX only sees the output of a GOLOG program, which is a linear sequence of primitive actions, we will only hint at what GOLOG is about and refer the reader to <ref> [15] </ref> for details. GOLOG is based on the situation calculus [17], which itself is a dialect of the predicate calculus with three sorts: ordinary objects, actions, and situations.
Reference: 16. <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, special issue on actions and processes, </journal> <volume> 4:665678, </volume> <year> 1994. </year>
Reference-contexts: What is true at a situation is described in terms of fluents, which are predicates whose last argument is a situation. Following <ref> [16] </ref>, a situation calculus theory AX consists of a number of foundational axioms, precondition axioms for the actions, a specification of what is true after doing an action a in situation s, 2 and a description of what the world is like initially. 2 This employs a solution to the frame
Reference: 17. <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <booktitle> In Semantic Information Processing, </booktitle> <pages> pages 410417. </pages> <publisher> MIT Press, </publisher> <year> 1968. </year>
Reference-contexts: GOLOG is based on the situation calculus <ref> [17] </ref>, which itself is a dialect of the predicate calculus with three sorts: ordinary objects, actions, and situations.
Reference: 18. <author> Nils J. Nilsson. </author> <title> SHAKEY the robot. </title> <type> Technical report, </type> <institution> SRI International, </institution> <year> 1984. </year>
Reference-contexts: In fact, we believe that experiments are needed first so that we can begin to understand what this mapping is about. Also, there is still widespread skepticism whether logic has a role to play at all in robotics, since previous attempts starting with SHAKEY <ref> [18] </ref> never left the laboratory and worked only in toy domains. Our work, perhaps for the first time, demonstrates that logic can be used successfully to control a robot in real world domains. <p> Most of these languages such as COLBERT [13] remain well below the level of abstraction of GOLOG and hence are hard to compare. Using logic to control a real robot was first attempted in the SHAKEY project <ref> [18] </ref>. It never made it beyond toy domains mainly because the robot hardware and low-level control software were neither reliable nor sophisticated enough in those days.
Reference: 19. <author> R. Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In V. Lifshitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation, </booktitle> <pages> pages 359380. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: theory AX consists of a number of foundational axioms, precondition axioms for the actions, a specification of what is true after doing an action a in situation s, 2 and a description of what the world is like initially. 2 This employs a solution to the frame problem by Reiter <ref> [19] </ref>. Given such an AX, GOLOG allows a user to write high-level programs where the primitive actions are those defined in AX and where complex actions can be formed using control structures known from conventional imperative languages.
Reference: 20. <author> R. Reiter. </author> <title> Sequential, temporal golog. </title> <booktitle> In Proceedings of the Sixth International Conference on Knowledge Representation (KR 98), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: For example the primitive robot go path ([P], T) succeeds, if the robot reaches the given P before the end of the time interval T and fails otherwise. This way the system is able to consider time constraints while acting as a coffee delivery robot <ref> [20] </ref>: exec_plan ([startGo ( Person, Place )| Other_actions], Done) :- wants_coffee (Person, Time_interval), ( robot_go_path ([Place], Time_interval) -&gt; execPlan (Other_actions, do (startGo (Person, Place), Done)) ; write ("Skipping "), write (Person), nl, retract (wants_coffee (Person, Time_interval)), ( do ( deliver_coffee (Now), Done, New_actions) -&gt; split (Done, New_actions, Remaining_actions), execPlan (Remaining_actions, Done) <p> Table 1: Some key results. 5.2 The Coffee Delivery Application The second experiment is designed to demonstrate the applicability of GOLEX in a typical office delivery scenario. In this application the task of the robot GOLEM was to serve people with coffee <ref> [20] </ref>. Thereby it had to deal with time constraints given by the time interval when the people had to be served.
Reference: 21. <author> S. Thrun, A. Bucken, W. Burgard, D. Fox, T. Frohlinghaus, D. Hennig, T. Hofmann, M. Krell, and T. Schimdt. </author> <title> Map learning and high-speed navigation in RHINO. </title> <editor> In D. Ko-rtenkamp, R.P. Bonasso, and R. Murphy, editors, </editor> <title> AI-based Mobile Robots: Case studies of successful robot systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1998. </year>
Reference-contexts: The task planner uses GOLOG to plan the activities of the robot and GOLEX to perform and monitor them. The navigation system or low-level control system of the robot consists of the collision avoidance routine [8], the map updating and path planning modules <ref> [21] </ref> and the localization system [5]. The task of the map building system is to update the information about the environment given new sensory input. The path planner computes cost-optimal paths from a starting position to a given target position given the current map of the environment. <p> job. 6 Conclusions In this paper we presented GOLEX, a runtime and execution monitoring system for GOLOG, that demonstrates, how mobile robot applications specified in a logical action language can be realized on top of existing low-level robot control software like that of the RWI B14 and B21 mobile robots <ref> [21] </ref>. GOLEX maps abstract primitive actions into low-level commands of the robot control system, thus allowing the user to concentrate on the application rather than the inner workings of the robot. Fur--thermore, it monitors the execution of the primitive GOLOG actions thus allowing to detect possible execution failures or timeouts.
References-found: 21

