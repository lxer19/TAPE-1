URL: http://www.cs.virginia.edu/~uigroup/docs/publications/Suit.lessons.paper.ps
Refering-URL: http://www.cs.virginia.edu/~uigroup/publications/
Root-URL: http://www.cs.virginia.edu
Title: Lessons Learned from SUIT, the Simple User Interface Toolkit  
Author: Randy Pausch, Matthew Conway, and Robert DeLine 
Keyword: Categories and Subject Descriptors D.2.2 [Software Engineering]: Tools and Techniques software libraries, user interfaces D.2.6 [Software Engineering]: Programming Environments interactive D.2.m [Software Engineering]: Miscellaneous rapid prototyping, reusable software I.3.4 [Computer Graphics]: Graphics Utilities application packages, graphics packages, software support I.3.6 [Computer Graphics]: Methodology and Techniques device independence, interaction techniques K.3.2 [Computers and Education]: Computer and Information Science Education computer science education General Terms UIMS, user interface toolkit, GUI, graphical user interface, rapid prototyping, pedagogy, software tools  
Address: Thornton Hall  Charlottesville, VA, 22903  
Affiliation: Computer Science Department,  University of Virginia  
Note: Page 1 of 32  
Email: contact: Pausch@Virginia.EDU  
Phone: (804) 982-2211  
Abstract: In recent years, the computer science community has realized the advantages of GUIs (Graphical User Interfaces). Because high-quality GUIs are difficult to build, support tools such as UIMSs, UI Toolkits, and Interface Builders have been developed. Although these tools are powerful, they typically make two assumptions: first, that the programmer has some familiarity with the GUI model, and second, that he is willing to invest several weeks becoming proficient with the tool. These tools typically operate only on specific platforms, such as DOS, the Macintosh, or UNIX/X-windows. 
Abstract-found: 1
Intro-found: 1
Reference: [Bass] <author> L. J. Bass, B. M. Clapper, E. J. Hardy,R. N. Kazman,R. C. Seacord, Serpent: </author> <title> A User Interface Environment Proceedings, </title> <booktitle> Winter 1990 USENIX Technical Conference, </booktitle> <address> Jan, 1990,Washington, DC </address>
Reference-contexts: SUIT uses a different model. In fact, it is fair to say that SUIT is best understood if thought of as a subroutine library that provides a front end to a database. The SERPENT system uses a similar approach <ref> [Bass] </ref>. The database maintains information about all screen objects, such as their location and color. When an application exits, SUIT writes the database to permanent storage, and when the application is next invoked, SUIT queries the database to see where objects should go and what color to make them.
Reference: [Bewley] <author> Bewley, William, Roberts, Teresa, Schroit, David, and Verplank, Williams, </author> <title> Human Factors Testing in the Design of Xeroxs 8010 Star Office Workstation, </title> <booktitle> 1983, Proceedings of ACM CHI83 Conference on Human Factors in Computing Systems </booktitle>
Reference-contexts: An exercise in the SUIT tutorial asks the reader to make all labels in an application blue, and then have one particular label override that default and be red. Property sheets date back to (at least) the Xerox Star <ref> [Bewley] </ref>. Other systems use a spreadsheet model for accessing attributes of objects [Myers91, Wilde]. Our contribution is to always expose the fixed three levels on every invocation. This produces some screen clutter, but also avoids having the student learn the mechanisms for accessing inherited state.
Reference: [Blomberg] <author> Blomberg, Jeanette, and Henderson, Austin, </author> <title> Reections on Participatory Design: Lessons from the Trillium Experience, </title> <booktitle> Proceedings of ACM CHI90 Conference on Human Factors in Computing Systems, </booktitle> <pages> pp. 353-359 </pages>
Reference-contexts: This sort of user testing is well understood in some corporate cultures, most notably at Apple Computer. This technique was also used with great success in the development of Trillium <ref> [Blomberg] </ref>. Architecture This section gives a high-level description of SUITs internal architecture and describes SUITs basic data model. We begin by discussing platform portability, then cover several popular UI builder models, SUITs definition of an object, SUITs interactive tool set, and how SUIT composes and links objects together.
Reference: [Calder] <author> Calder, Paul, Linton, Mark, and Vlissides, John, </author> <title> Composing User Interfaces with InterViews, </title> <booktitle> IEEE Computer, </booktitle> <year> 1989. </year>
Reference-contexts: This is a vast improvement over the four to six week learning curve we observed for our students with systems like Xtk [McCormack], the Andrew Tool Kit [Palay], Interviews <ref> [Calder] </ref>, and the Motif Widget Set. SUIT also provides a one hundred-sixty page reference manual, much of which is also available via on-line help.
Reference: [Dewan] <author> Dewan, Prasun, </author> <title> A Guide to Suite, </title> <institution> Software Engineering Research Center, Purdue University, SERC-TR-60-P, </institution> <month> February </month> <year> 1990 </year>
Reference-contexts: We would also like to acknowledge the help of the anonymous referees, whose comments led to substantial improvements in the paper. SUIT should not be confused with SUITE <ref> [Dewan] </ref>, a project at Purdue with a similar name. Getting SUIT SUIT is provided without charge to academic and non-profit organizations. Readers with access to the internet can type finger suit@uvacs.cs.virginia.edu for directions on how to get and run the software. Page 31 of 32
Reference: [Foley86] <author> Foley, James D. and McMath, </author> <title> C.F., Dynamic Process Visualization, </title> <journal> Computer Graphics and Applications 6:3, </journal> <month> March, </month> <year> 1986. </year>
Reference-contexts: For example, SUIT supports a bounded value object with properties: [minimum value, oating point, 0.0] [current value, oating point, 0.7] [maximum value, oating point, 1.0] which can appear as any of the following display styles <ref> [Sibert, Foley86] </ref> shown in Figure 3. A keystroke command (again, with keyboard modifiers down) cycles between the various display styles, and this has been very effective in establishing the difference between an objects state and the mechanism for Page 12 of 32 displaying and altering that state.
Reference: [Foley90] <author> Foley, James, van Dam, Andries, Feiner, Steven, and Hughes, John, </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice (2nd Edition), 1990, </booktitle> <publisher> Addison-Wesley Publishing Co, </publisher> <address> Reading, MA, ISBN 0-201-12110-7; T385.C587. </address>
Reference-contexts: Page 6 of 32 We chose to use SRGP, the Simple Raster Graphics Package, which was being distributed by the Addison-Wesley publishing company with the second edition of Fundamentals of Interactive Computer Graphics, by Foley, van Dam, Feiner, and Hughes <ref> [Foley90] </ref>. SRGP was already implemented for the Macintosh and X windows; we ported it to Turbo C on DOS, on top of Borlands BGI graphics driver. Our DOS version of SRGP is now distributed with the textbook. Figure 1 shows the software layering which makes SUIT portable.
Reference: [Goldberg] <author> Goldberg, Adele, and Robson, David, Smalltalk--80: </author> <title> The Language, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: The Property Editor Students do best with concrete, visible items. Screen objects are good for explaining object-oriented programming, as shown by the early success in Smalltalk <ref> [Goldberg] </ref>. The problem with class and global property lists is that they are no longer implicitly visible. The prototype-instance architecture [Myers90] does not really solve this problem, because prototype objects are typically not visible on-screen.
Reference: [Mahoney] <author> Mahoney, Michael, </author> <title> Interface Builder and Object-Oriented Design in the NeXTstep Environment, </title> <booktitle> Tutorial Notes from the ACM SIGCHI Human Factors in Computer Systems Conference, </booktitle> <address> New Orleans, LA, </address> <note> 1991 Available from NeXT, </note> <institution> Inc., </institution> <address> 900 Chesapeake Drive, Redwood City, CA 94063 415-424-0200 </address>
Reference-contexts: For example, the NeXT Interface Builder <ref> [Mahoney] </ref> requires learning objective-C, and Interviews requires learning C++. While these languages are required to support the model each system provides, users who are focused on their task at hand often fail to use advanced tools because the learning threshold of these languages is too high.
Reference: [McCormack] <author> McCormack, Joel, and Asente, Paul, </author> <title> An Overview of the X Toolkit. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software, </booktitle> <pages> pp 46-55. </pages> <address> Banff, Alberta, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: This is a vast improvement over the four to six week learning curve we observed for our students with systems like Xtk <ref> [McCormack] </ref>, the Andrew Tool Kit [Palay], Interviews [Calder], and the Motif Widget Set. SUIT also provides a one hundred-sixty page reference manual, much of which is also available via on-line help.
Reference: [Myers90] <author> Myers, Brad, et al, Garnet: </author> <title> Comprehensive Support for Graphical, Highly Interactive User Interfaces IEEE Computer, </title> <address> 23:11, </address> <month> November, </month> <year> 1990. </year>
Reference-contexts: The Property Editor Students do best with concrete, visible items. Screen objects are good for explaining object-oriented programming, as shown by the early success in Smalltalk [Goldberg]. The problem with class and global property lists is that they are no longer implicitly visible. The prototype-instance architecture <ref> [Myers90] </ref> does not really solve this problem, because prototype objects are typically not visible on-screen. We provide a direct manipulation [Schneiderman] property editor that allows users to interactively examine Page 14 of 32 and alter the state of objects.
Reference: [Myers91] <author> Myers, Brad, </author> <title> Graphical Techniques in a Spreadsheet for Specifying User Interfaces. </title> <booktitle> Proceedings of ACM CHI91 Conference on Human Factors in Computing Systems. </booktitle>
Reference-contexts: Property sheets date back to (at least) the Xerox Star [Bewley]. Other systems use a spreadsheet model for accessing attributes of objects <ref> [Myers91, Wilde] </ref>. Our contribution is to always expose the fixed three levels on every invocation. This produces some screen clutter, but also avoids having the student learn the mechanisms for accessing inherited state.
Reference: [Palay] <author> Palay, Andrew, et al., </author> <title> The Andrew Toolkit---An Overview, </title> <booktitle> USENIX Technical Conference Proceedings, </booktitle> <address> Dallas, TX, </address> <month> Feb, </month> <year> 1988. </year>
Reference-contexts: This is a vast improvement over the four to six week learning curve we observed for our students with systems like Xtk [McCormack], the Andrew Tool Kit <ref> [Palay] </ref>, Interviews [Calder], and the Motif Widget Set. SUIT also provides a one hundred-sixty page reference manual, much of which is also available via on-line help.
Reference: [Rochkind] <author> Rochkind, Marc J., </author> <title> Technical Overview of the Extensible Virtual Toolkit, </title> <booktitle> Advanced Programming Institute, </booktitle> <publisher> Ltd., </publisher> <month> January 16, </month> <year> 1989, </year> <institution> API Ltd., </institution> <address> Box 17665, Boulder, CO 80308 (303) 443-4223 </address>
Reference-contexts: When SUITs interactive tools are used to set an objects color, a set of color chips appears when on a color screen, but a toggle button appears on a monochrome screen. A very different approach to portability is taken by XVT <ref> [Valdes, Rochkind] </ref>, which provides a virtual toolkit on top of the native toolkit layer on each platform. The advantage of the XVT approach is that on each platform the application has the same look and feel as other applications built locally on that platform.
Reference: [Schneiderman] <author> Shneiderman, Ben, </author> <title> Direct Manipulation: A Step Beyond Programming Languages, </title> <journal> IEEE Computer 16:8, </journal> <month> Aug, </month> <year> 1983, </year> <pages> pp. 57-69. </pages>
Reference-contexts: The problem with class and global property lists is that they are no longer implicitly visible. The prototype-instance architecture [Myers90] does not really solve this problem, because prototype objects are typically not visible on-screen. We provide a direct manipulation <ref> [Schneiderman] </ref> property editor that allows users to interactively examine Page 14 of 32 and alter the state of objects. The SUIT property editor, which is shown in Figure 4, always displays the object, class, and global property lists when allowing the user to edit the state of an object.
Reference: [Sibert] <author> Sibert, John, Hurley, William, and Bleser, Teresa, </author> <title> An Object-Oriented User Interface Management System, </title> <journal> Computer Graphics, </journal> <note> 20:4 August 1986 (Proceedings of SIGGRAPH 86). Page 32 of 32 </note>
Reference-contexts: For example, SUIT supports a bounded value object with properties: [minimum value, oating point, 0.0] [current value, oating point, 0.7] [maximum value, oating point, 1.0] which can appear as any of the following display styles <ref> [Sibert, Foley86] </ref> shown in Figure 3. A keystroke command (again, with keyboard modifiers down) cycles between the various display styles, and this has been very effective in establishing the difference between an objects state and the mechanism for Page 12 of 32 displaying and altering that state.
Reference: [UIMX] <institution> User Interface Management Toolkit for X, Visual Edge Software Ltd, </institution> <address> 101 First St., Suite 443, Los Altos, CA 94022 (415) 948-0753. </address>
Reference-contexts: We had presumed that after spending a few weeks with SUIT they would outgrow it and move on to other more mature and complex systems such as UIMX <ref> [UIMX] </ref>, based on Motif Widget set, or Interviews. Instead, we have observed the phenomenon that also occurred with Pascal: Unless students discovered a specific need to move to a more advanced platform, they continued to use SUIT for their own research projects.
Reference: [Valdes] <author> Valdes, Ray, </author> <title> A Virtual Toolkit for Windows and the Mac, </title> <journal> BYTE, </journal> <month> March, </month> <year> 1989. </year>
Reference-contexts: When SUITs interactive tools are used to set an objects color, a set of color chips appears when on a color screen, but a toggle button appears on a monochrome screen. A very different approach to portability is taken by XVT <ref> [Valdes, Rochkind] </ref>, which provides a virtual toolkit on top of the native toolkit layer on each platform. The advantage of the XVT approach is that on each platform the application has the same look and feel as other applications built locally on that platform.
Reference: [Welsh] <author> Welsh, J., </author> <title> Ambiguities and Insecurities in Pascal, </title> <journal> Software - Practice and Experience 7, </journal> <year> 1977, </year> <pages> pp. 685-696. </pages>
Reference-contexts: Although Pascal is more widely used and is simpler than C, implementing SUIT in Pascal was not technologically feasible. Pascal exists on all three platforms, but it varies widely <ref> [Welsh] </ref>. Also, standard Pascal is not powerful enough to support the external control model: it lacks the ability to store function addresses as variables. Therefore, we chose ANSI-C.
Reference: [Wilde] <author> Wilde, Nicholas, and Lewis, Clayton, </author> <title> Spreadsheet-based Interactive Graphics: from Prototype to Tool, </title> <booktitle> Proceedings of ACM CHI90 Conference on Human Factors in Computing Systems, </booktitle> <pages> pp. 153-159. </pages>
Reference-contexts: Property sheets date back to (at least) the Xerox Star [Bewley]. Other systems use a spreadsheet model for accessing attributes of objects <ref> [Myers91, Wilde] </ref>. Our contribution is to always expose the fixed three levels on every invocation. This produces some screen clutter, but also avoids having the student learn the mechanisms for accessing inherited state.
Reference: [Wirth] <author> Wirth, Niklaus, </author> <title> The programming language Pascal, </title> <journal> acta informatica 1:1, </journal> <year> 1971, </year> <pages> pp. 35-63. </pages>
Reference-contexts: Our goal is not to provide new capabilities in the GUI-building realm, but to combine existing techniques in a clean design that can be learned quickly. In this respect, we hope SUIT can provide the same contribution to the interface builder community that Pascal <ref> [Wirth] </ref> did for the programming language community. We certainly have heard many (older) GUI programmers comment that the current state of the art in GUI tools is similar to programming languages in the 1960s and 1970s.
References-found: 21

