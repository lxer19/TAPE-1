URL: http://www.eecs.berkeley.edu/~galicia/HWSW/hp3.ps
Refering-URL: http://www.eecs.berkeley.edu/~galicia/HWSW/HWSW.html
Root-URL: http://www.cs.berkeley.edu
Title: Codesign of Multifunction DSP Systems  
Author: by Ron Galicia 
Date: June 13, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> "Synchronous data flow," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 75, </volume> <pages> pp. 1235-1245, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: This allows us to describe the applications with the synchronous dataflow (SDF) <ref> [1] </ref> model of computation. Outside of our scope, at least initially, will be the description of switching between functions which would require the embedding of the individual SDF descriptions within a control description, such as a finite-state machine (FSM).
Reference: [2] <author> A. Abnous and J. Rabaey, </author> <title> "Ultra-low-power domain-specific multimedia processors," </title> <booktitle> in IEEE VLSI Signal Processing Workshop (W. </booktitle> <editor> Burleson, K. Konstantinides, and T. Meng, </editor> <booktitle> eds.), </booktitle> <pages> pp. 461-470, </pages> <institution> The Institute of Electrical and Electronics Engineers, </institution> <year> 1996. </year>
Reference-contexts: ASICs have the opportunity to avoid the extra control, interconnect, and temporary variable storage overheads in available microprocessors. ASIC implementations, though efficient, are inflexible and costly. To 1 fully explore the flexibility versus efficiency tradeoff while reducing cost, our design methodology must support highly heterogeneous architectures, such as Pleiades <ref> [2] </ref>, that contain reconfigurable datapaths and programmable logic devices in addition to microprocessors and ASICs. Our approach will draw from work in both the heterogeneous multiprocessor scheduling and hardware synthesis fields.
Reference: [3] <author> A. Kalavade and E. A. Lee, </author> <title> "The extended partitioning problem: Hardware/software mapping and implementation-bin selection," </title> <booktitle> in IEEE International Workshop on Rapid System Prototyping, </booktitle> <pages> pp. 12-18, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Also our focus on multiprocessor-based targets is different from most of the code-sign work that has been done to date which mainly deal with uniprocessor plus multiple ASIC solutions. Many works ignore the effects of IPC limitations on their scheduling and performance estimates <ref> [3] </ref> or assume that the necessary IPC connections will be synthesized. The latter is closely related to architectural cosynthesis work [4, 5]. An alternative is to use predetermined IPC topologies where more characterization of physical path latencies and data collisions can be done prior to synthesis [6, 7].
Reference: [4] <author> S. Prakash and A. C. Parker, </author> <title> "SOS: Synthesis of application-specific heterogeneous multiprocessor systems," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 16, </volume> <pages> pp. 338-351, </pages> <month> Decem-ber </month> <year> 1992. </year>
Reference-contexts: Many works ignore the effects of IPC limitations on their scheduling and performance estimates [3] or assume that the necessary IPC connections will be synthesized. The latter is closely related to architectural cosynthesis work <ref> [4, 5] </ref>. An alternative is to use predetermined IPC topologies where more characterization of physical path latencies and data collisions can be done prior to synthesis [6, 7].
Reference: [5] <author> W. Wolf, </author> <title> "Object-oriented co-synthesis of distributed embedded systems," </title> <booktitle> in ASP-DAC'95/CHDL'95/VLSI'95, </booktitle> <pages> pp. 553-558, </pages> <year> 1995. </year>
Reference-contexts: Many works ignore the effects of IPC limitations on their scheduling and performance estimates [3] or assume that the necessary IPC connections will be synthesized. The latter is closely related to architectural cosynthesis work <ref> [4, 5] </ref>. An alternative is to use predetermined IPC topologies where more characterization of physical path latencies and data collisions can be done prior to synthesis [6, 7].
Reference: [6] <author> E. K. Pauer and J. B. </author> <title> Prime, "An architectural trade capability using the Ptolemy kernel," </title> <booktitle> in IEEE International Conference on Acoustics, Speech and Signal Processing, </booktitle> <volume> vol. 2, </volume> <pages> pp. 1252-1255, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: The latter is closely related to architectural cosynthesis work [4, 5]. An alternative is to use predetermined IPC topologies where more characterization of physical path latencies and data collisions can be done prior to synthesis <ref> [6, 7] </ref>. Architectural cosynthesis does not initially assume the number and types of programmable processors though previous partitioning work does, with the choice of mapping to ASICs or software as the only degree of freedom. <p> This will be in the form of code objects that can describe target architectures and schedulers in a modular and hierarchical fashion. This will provide support for experiments on different hierarchical and cooperative schedulers [9] combined with different architectural model compositions and configurations <ref> [6, 7, 10] </ref>. This work at HP EEsof will result in redesigned and rewritten code for multiprocessor scheduling in HPtolemy. This rearchitected code is intended to support code generation and multiprocessor simulation.
Reference: [7] <author> G. C. Sih and E. A. Lee, </author> <title> "A compile-time scheduling heuristic for interconnection-constrained heterogeneous processors architectures," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 175-187, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The latter is closely related to architectural cosynthesis work [4, 5]. An alternative is to use predetermined IPC topologies where more characterization of physical path latencies and data collisions can be done prior to synthesis <ref> [6, 7] </ref>. Architectural cosynthesis does not initially assume the number and types of programmable processors though previous partitioning work does, with the choice of mapping to ASICs or software as the only degree of freedom. <p> This will be in the form of code objects that can describe target architectures and schedulers in a modular and hierarchical fashion. This will provide support for experiments on different hierarchical and cooperative schedulers [9] combined with different architectural model compositions and configurations <ref> [6, 7, 10] </ref>. This work at HP EEsof will result in redesigned and rewritten code for multiprocessor scheduling in HPtolemy. This rearchitected code is intended to support code generation and multiprocessor simulation.
Reference: [8] <author> M. B. Srivastava and R. W. Brodersen, "SIERA: </author> <title> A unified framework for rapid-prototyping of system-level hardware and software," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. 14, </volume> <pages> pp. 676-693, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In between these two approaches are template-based methods where parts of the architectural structure are specified by a standard configuration that can be manipulated through parameters <ref> [8] </ref>. 3 Deliverables 3.1 Software We will have available at week 5 a software infrastructure to enable experiments with architectural cosynthesis, template-based synthesis, and partitioning approaches. This will be in the form of code objects that can describe target architectures and schedulers in a modular and hierarchical fashion.
Reference: [9] <author> J. L. Pino, S. Bhattacharyya, and E. A. Lee, </author> <title> "A hierarchical multiprocessor scheduling system for DSP applications," </title> <booktitle> in IEEE Asilomar Conference on Signals, Systems, and Computers, </booktitle> <pages> pp. 122-126, </pages> <year> 1995. </year>
Reference-contexts: This will be in the form of code objects that can describe target architectures and schedulers in a modular and hierarchical fashion. This will provide support for experiments on different hierarchical and cooperative schedulers <ref> [9] </ref> combined with different architectural model compositions and configurations [6, 7, 10]. This work at HP EEsof will result in redesigned and rewritten code for multiprocessor scheduling in HPtolemy. This rearchitected code is intended to support code generation and multiprocessor simulation.
Reference: [10] <author> D. Culler, R. Karp, D. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subramonian, and T. von Eicken, </author> <title> "LogP: A practical model of parallel computation," </title> <journal> Communications of the ACM, </journal> <volume> vol. 39, </volume> <pages> pp. 78-85, </pages> <month> November </month> <year> 1996. </year> <month> 3 </month>
Reference-contexts: This will be in the form of code objects that can describe target architectures and schedulers in a modular and hierarchical fashion. This will provide support for experiments on different hierarchical and cooperative schedulers [9] combined with different architectural model compositions and configurations <ref> [6, 7, 10] </ref>. This work at HP EEsof will result in redesigned and rewritten code for multiprocessor scheduling in HPtolemy. This rearchitected code is intended to support code generation and multiprocessor simulation.
References-found: 10

