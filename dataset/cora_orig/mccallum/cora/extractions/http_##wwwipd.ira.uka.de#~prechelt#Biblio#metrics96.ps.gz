URL: http://wwwipd.ira.uka.de/~prechelt/Biblio/metrics96.ps.gz
Refering-URL: 
Root-URL: 
Email: (prechelt@ira.uka.de)  (tichy@ira.uka.de)  
Title: An Experiment to Assess the Benefits of Inter-Module Type Checking  
Author: Lutz Prechelt Walter F. Tichy 
Address: D-76128 Karlsruhe, Germany  
Affiliation: Fakultat fur Informatik Universitat Karlsruhe  
Abstract: This paper reports on an experiment to assess the error detection capabilities of static, inter-module type checking. Type checking is considered an important mechanism for detecting programming errors, especially interface errors. The experiment uses Kernighan&Ritchie C and AN-SI C. The relevant difference is that the ANSI C compiler checks module interfaces (i.e., the parameter lists of calls to external functions), whereas K&R C does not. The experiment employs a counterbalanced design, in which each subject writes two non-trivial programs that interface with a complex library (Motif). Each subject writes one program in K&R C and one in ANSI C. The input to each compiler run is saved and manually analyzed for errors. Results indicate that delivered ANSI C programs contain significantly fewer interface errors than delivered K&R C programs. Furthermore, after subjects have gained some familiarity with the interface they are using, ANSI C programmers remove errors faster and are more productive (measured in both time to completion and functionality implemented). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. R. Basili and B. Perricone. </author> <title> Software errors and com plexity: An empirical investigation. </title> <journal> Communications of the ACM, </journal> <volume> 27(1) </volume> <pages> 42-52, </pages> <month> Jan. </month> <year> 1984. </year>
Reference: [2] <author> A. Ebrahimi. </author> <title> Novice programmer errors: Language constructs and plan composition. </title> <journal> Intl. J. of Human-Computer Studies, </journal> <volume> 41 </volume> <pages> 457-480, </pages> <year> 1994. </year>
Reference: [3] <author> P. G. Frankl and S. N. Weiss. </author> <title> An experimental com parison of the effectiveness of branch testing and data flow testing. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 19(8) </volume> <pages> 774-787, </pages> <month> August </month> <year> 1993. </year>
Reference: [4] <author> P. Hudak and M. P. Jones. </author> <title> Haskell vs. Ada vs. C++ vs. awk vs. : : : an experiment in software prototyping productivity. </title> <type> Technical report, </type> <institution> Yale University, Dept. of CS, </institution> <address> New Haven, CT, </address> <month> July </month> <year> 1994. </year>
Reference: [5] <author> W. Humphrey. </author> <title> A Discipline of Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In particular, it would be interesting to compare productivity and error rates under compile-time type checking, run-time type checking, and type inference. Other important questions concern the influence of a disciplined programming process such as the Personal Software Process <ref> [5] </ref>. Finally, an analysis of the errors occurring in practice might help devise more effective error detection mechanisms. Acknowledgements Thanks to our experimental subjects. Many thanks in particular to Paul Lukowicz for patiently guinea-pigging the experimental setup.
Reference: [6] <author> J. H. Morris. </author> <title> The snickering type checking experiment. </title> <type> unpublished, </type> <year> 1978. </year>
Reference: [7] <author> E. Soloway and S. Iyengar, </author> <title> editors. Empirical Studies of Programmers. </title> <publisher> Ablex Publishing Corp., </publisher> <address> Norwood, NJ, </address> <month> June </month> <year> 1986. </year> <booktitle> (The papers of the First Workshop on Empirical Studies of Programmers, </booktitle> <address> Washington D.C.). </address>
Reference: [8] <author> J. G. Spohrer and E. Soloway. </author> <title> Analyzing the high fre quency bugs in novice programs. </title> <booktitle> In [7], </booktitle> <pages> pages 230-251, </pages> <year> 1986. </year>
Reference: [9] <author> N. Wirth. </author> <title> Gedanken zur Software-Explosion. </title> <journal> Infor matik Spektrum, </journal> <volume> 17(1) </volume> <pages> 5-20, </pages> <month> February </month> <year> 1994. </year> <month> 8 </month>
References-found: 9

