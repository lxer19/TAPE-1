URL: http://www.cs.brown.edu/~tor/doors/linux-doors.ps.gz
Refering-URL: http://www.cs.brown.edu/~tor/doors/
Root-URL: http://www.cs.brown.edu
Email: (jal@cs.brown.edu)  
Title: An Implementation of the Solaris Doors API for Linux  
Author: Jason Lango 
Date: Fall/Spring 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aral, Z., Bloom, J., Doeppner, T., Gertner, I., Langerman, A., and Schaffer, G., </author> <title> "Variable Weight Processes with Flexible Shared Resources," </title> <booktitle> Proceedings of the Winter 1989 USENIX Conference, </booktitle> <address> San Diego CA, </address> <month> January </month> <year> 1989, </year> <pages> pp. 405-412. </pages>
Reference-contexts: The process id of the thread which created a door cannot uniquely identify all other threads within the same process. Linux's threads are essentially variable weight processes which share system resources <ref> [1] </ref>, such as the file descriptor table, virtual address space, etc. In the Linux kernel, a variable weight process is called a task.
Reference: [2] <author> Beck, M., et al. </author> <title> Linux Kernel Internals. </title> <publisher> Addison-Wesley, </publisher> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: The directory cache is a global resource, whose entries can be customized by particular file system implementations (but generally are not). There are several books available which contain greater detail about the architecture of the Linux kernel <ref> [5, 2] </ref>.
Reference: [3] <author> Becker, D., Sterling, T., Savarese, D., Dorband, J., Ranawak, U., Packer, C. BE-OWULF: </author> <title> A PARALLEL WORKSTATION FOR SCIENTIFIC COMPUTATION. </title> <booktitle> Proceedings, International Conference on Parallel Processing, </booktitle> <year> 1995. </year>
Reference-contexts: The list of supported hardware continues to grow at a rapid pace, mostly due to the strong programming support garnered by the open software development model and increased media and commercial support. Linux is used in a wide variety of applications, from the desktop to distributed-memory [8] and cluster-based <ref> [3, 4] </ref> supercomputing.
Reference: [4] <author> Ridge, D., Becker, D., Merkey, P., Becker, T., Merkey, P. Beowulf: </author> <title> Harnessing the Power of Parallelism in a Pile-of-PCs. </title> <booktitle> Proceedings, IEEE Aerospace, </booktitle> <year> 1997. </year>
Reference-contexts: The list of supported hardware continues to grow at a rapid pace, mostly due to the strong programming support garnered by the open software development model and increased media and commercial support. Linux is used in a wide variety of applications, from the desktop to distributed-memory [8] and cluster-based <ref> [3, 4] </ref> supercomputing.
Reference: [5] <author> Rusling, D. </author> <title> The Linux Kernel. </title> <note> Not yet published. http://www.linuxhq.com/guides/TLK/index.html 13 </note>
Reference-contexts: The directory cache is a global resource, whose entries can be customized by particular file system implementations (but generally are not). There are several books available which contain greater detail about the architecture of the Linux kernel <ref> [5, 2] </ref>.
Reference: [6] <author> Voll, J. </author> <title> "Doors" in Solaris: Lightweight RPC using File Descriptors. Sun Developer NEWS, </title> <journal> Vol. </journal> <volume> 1, No. 1, </volume> <month> Fall </month> <year> 1996. </year>
Reference-contexts: The fundamental building block of this RPC mechanism is the door. Abstractly, the door can be thought of as a service procedure or object, upon which a thread can invoke a 2 method (or function call). The door is often referred to in the literature <ref> [6, 7] </ref> as "describing" a particular procedure in a remote server. Doors are made visible to the applications programmer as standard UNIX file descriptors (or "door descriptors"). <p> The Doors API was engineered with certain performance optimizations in mind. Server threads will be created in the calling process in proportion to the load on the server (at most one per concurrent request) <ref> [6] </ref>. The server may control how many threads are created via door server create (3). <p> The kernel may also use handoff scheduling to optimize door call (3) invocations <ref> [6] </ref>. 4 5 Summary of Work The majority of the work involved in this project is in the implementation of a subset of the Solaris Doors API for Linux. <p> Memory mapping large arguments between client and server was implemented, which is not implemented in Solaris 2.6 <ref> [6] </ref>. Benchmarks were taken comparing the speed of doors on Linux versus other IPC mechanisms. 6 Implementation of the Doors API on Linux 6.1 Representing the door The Linux kernel has a virtualized filesystem, similar to the SVR4 VNODE/VFS subsystem. <p> Furthermore, there is no generic facility to accomplish file on file mounting, as in namefs in Solaris <ref> [6] </ref>. fattach (3) and fdetach (3) were implemented as wrappers around part of the doors kernel interface. do door fattach () implements file on file mounting by using Linux's directory cache, much as the implementation of actual file system mounting works.
Reference: [7] <author> Sun Microsystems, Inc. </author> <title> Solaris Manual Pages: Library Routines. Solaris 2.6 Reference Manual AnswerBook, </title> <year> 1997. </year>
Reference-contexts: The fundamental building block of this RPC mechanism is the door. Abstractly, the door can be thought of as a service procedure or object, upon which a thread can invoke a 2 method (or function call). The door is often referred to in the literature <ref> [6, 7] </ref> as "describing" a particular procedure in a remote server. Doors are made visible to the applications programmer as standard UNIX file descriptors (or "door descriptors"). <p> What follows is a list of the relevant library routines encompassing the Solaris Doors API, and the two related routines fattach (3) and fdetach (3). Most detail is omitted, since it is covered at length in the Solaris documentation <ref> [7] </ref>, but there should be enough to provide a general overview of the supported functionality. * door create (3) is used to create a new door. The function takes as its arguments a server procedure, data cookie, and flags.
Reference: [8] <author> Tridgell, A., Mackerras, P., Sitsky, D., Walsh, D. </author> <title> AP/Linux A modern OS for the AP1000+. </title> <booktitle> Proceedings, Sixth Parallel Computing Workshop, </booktitle> <year> 1996. </year> <month> 14 </month>
Reference-contexts: The list of supported hardware continues to grow at a rapid pace, mostly due to the strong programming support garnered by the open software development model and increased media and commercial support. Linux is used in a wide variety of applications, from the desktop to distributed-memory <ref> [8] </ref> and cluster-based [3, 4] supercomputing.
References-found: 8

