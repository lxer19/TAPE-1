URL: http://www.cs.brown.edu/cgc/papers/bclt-maas-96.ps.gz
Refering-URL: http://www.cs.brown.edu/people/rt/papers/recent-papers/recent-papers.html
Root-URL: http://www.cs.brown.edu
Email: fjib,gl,rtg@cs.brown.edu  isabel@cs.tufts.edu  
Title: The Mocha Algorithm Animation System Java provides support for security on the user side. On
Author: James E. Baker Isabel F. Cruz Giuseppe Liotta Roberto Tamassia 
Address: 115 Waterman Street, Providence, RI 02912-1910, USA.  161 College Avenue, Medford, MA 02155, USA.  
Affiliation: Department of Computer Science, Brown University,  Department of Electrical Engineering and Computer Science Tufts University,  
Note: Security.  Research supported in part by the National Science Foundation under grant CCR-9423847, by the U.S. Army Research Office under grants DAAH04-93-0134 and DAAH04-96-1-0013, and by the N.A.T.O.-C.N.R. Advanced Fellowships Programme.  Communication  Support multiple views. Mocha employs a model-view-controller paradigm that simplifies the support for mul  
Abstract: We describe the implementation of a new system, called Mocha, for providing algorithm animation over the World Wide Web. Mocha is a distributed system with a client-server architecture that optimally partitions the software components of a typical algorithm animation system, and leverages the power of the Java language, an emerging standard for distributing interactive platform-independent applications across the Web. Mocha We have implemented a prototype of an animation system called Mocha that can be accessed by any user with a WWW browser supporting Java (currently Netscape 2.0 and HotJava) at URL http://www.cs.brown.edu/people/jib/Mocha.html. In this paper, we discuss in detail the implementation of Mocha. A companion paper [1] describes the model underlying the architecture and design of Mocha, provides a comparison between this model and previous ones, and presents an application to the animation of geometric algorithms. Design Goals Our design goals are derived from the comparison criteria that distinguish Mocha from other models, see [1]. an image, for example. The use of Java also enables the simple use of CGI scripts from the applet itself, image files (GIF, JPEG), audio streams, etc. Yet at the same time, the Java clients can take full advantage of existing or new services, written in a variety of languages, such as C++ or LEDA, as long as they can be written to use the animation protocol or a wrapper is written to enable their use. Responsive feedback. Maintaining high responsiveness to the user's interaction is especially important in the case of client-server environment where there is a possibility of network latency; yet it is also important from the standpoint of accessibility, where we allow users to have access to potentially very expensive computations. From the user's standpoint, interaction should provide responsive feedback. Mocha's support of algorithm animation provides for multiple levels of feedback, ranging from instantaneous to longer range. Display pointer correspondence to the user's mouse, or other input device, should be instantaneous, of course; ideally, any drag-and-drop or other direct manipulation should also be apparently instantaneous. Additional threads, conveniently part of the Java language, provide for other feedback which may not be instantaneous, such as servicing the communication of a lengthy geometric computation on the server. A third layer of feedback might be provided by a monitoring thread that observes the user and suggests further interactional or instructional possibilities. One simple example of such a thread is an audio narrative that instructs the user on the use of the animation if the user has simply been reading the surrounding text without attempting to interact with the animation. Attractiveness. Although this is subjective, we consider the prototypes to be attractive and of interest to a user seeking to better understand these algorithms. Here, the ease of authoring, especially from the standpoint of using resources available on the Internet for creating attractive Web pages, may be the more objective criterion. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> J. E. Baker, I. F. Cruz, G. Liotta, and R. Tamassia. </author> <title> Algorithm animation over the World Wide Web. </title> <booktitle> In Proc. Int. Workshop on Advanced Visual Interfaces. </booktitle> <publisher> ACM Press, </publisher> <year> 1996. </year>
Reference: [2] <author> M. H. Brown. </author> <title> Algorithm Animation. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1988. </year>
Reference-contexts: By using MVC we can ensure the correspondence of each view to the model without increasing the complexity of the design (at least beyond the design's initial incorporation of MVC). The importance of this for algorithm animation was introduced by BALSA <ref> [2] </ref>. Mocha extends this conventional use of MVC by partitioning both the model and the controller between the client and the server.
Reference: [3] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: Here, the ease of authoring, especially from the standpoint of using resources available on the Internet for creating attractive Web pages, may be the more objective criterion. Support multiple views. Mocha employs a model-view-controller paradigm that simplifies the support for mul tiple views. Frameworks Architectural frameworks <ref> [3, 5] </ref> provide for the reusability of the design and implementation of a set of cooperating classes over a given application domain. The advantage that frameworks provide over a monolithic API is that they define the interactions, collaborations, and responsibilities of the components, including the novel parts, in the framework.
Reference: [4] <author> G. E. Krasner and S. T. Pope. </author> <title> A cookbook for using the model-view-controller user interface paradigm in Smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Mocha is thus both a implementation framework | in terms of support for MVC by animation clients and common mediator code | as well as a design framework for integrating algorithm services. The Model-View-Controller Paradigm The Model-View-Controller paradigm <ref> [4] </ref> separates the task of modeling from that of displaying the model (view) and of interacting with the model (controller).
Reference: [5] <author> O. Nierstraz and T. D. Meijler. </author> <title> Research directions in software composition. </title> <journal> Computing Surveys, </journal> <volume> 27(2), </volume> <year> 1995. </year>
Reference-contexts: Here, the ease of authoring, especially from the standpoint of using resources available on the Internet for creating attractive Web pages, may be the more objective criterion. Support multiple views. Mocha employs a model-view-controller paradigm that simplifies the support for mul tiple views. Frameworks Architectural frameworks <ref> [3, 5] </ref> provide for the reusability of the design and implementation of a set of cooperating classes over a given application domain. The advantage that frameworks provide over a monolithic API is that they define the interactions, collaborations, and responsibilities of the components, including the novel parts, in the framework. <p> The advantage that frameworks provide over a monolithic API is that they define the interactions, collaborations, and responsibilities of the components, including the novel parts, in the framework. Frameworks thus provide for "generic software architectures" <ref> [5] </ref>. Java provides a GUI framework in terms of its java.awt package and especially the applet class. Users of this GUI framework are constrained to how the framework dispatches events, such as mouse events or repaints.
Reference: [6] <author> G. Wiederhold. </author> <title> Mediation in information systems. </title> <journal> Computing Surveys, </journal> <volume> 27(2), </volume> <year> 1995. </year>
Reference-contexts: However, naive application partitioning can result in high maintenance costs and even a lack of openness if each client-server pair has its own interface. As the number of clients n and the number of servers m expand, the number of potential relationships is of course n fi m. Mediators <ref> [6] </ref> are a well-known mechanism for reducing this interoperability problem.
References-found: 6

