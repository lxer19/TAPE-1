URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-92-11/s2k-92-11.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-92-11/
Root-URL: http://www.cs.berkeley.edu
Abstract-found: 0
Intro-found: 1
Reference: [BAKE91] <author> Baker, M. G., Hartman, J. H., Kupfer , M. D., Shirriff, K. W., Ousterhout, J. K., </author> <title> Measurements of a Distributed File System, </title> <booktitle> Proceedings of the 13th ACM Symposium on Operating Systems Principles , pp. </booktitle> <pages> 198-212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: For instance, while earlier studies have shown that file caching is effective, these studies have concentrated on Unix-based systems comprised mostly of many small f iles and only a few lar ger files [OUST85] <ref> [BAKE91] </ref>. These studies suggest that when files become large enough that only a few files can be stored in memory, caching will be significantly less effective. One of these studies [BAKE91] specif ically blames worse than expected cache performance on the increasing use of large files in Unix systems. <p> have concentrated on Unix-based systems comprised mostly of many small f iles and only a few lar ger files [OUST85] <ref> [BAKE91] </ref>. These studies suggest that when files become large enough that only a few files can be stored in memory, caching will be significantly less effective. One of these studies [BAKE91] specif ically blames worse than expected cache performance on the increasing use of large files in Unix systems. <p> The dramatic speedup potential of abstracts indicates that hit rates on abstracts need not be especially high to improve throughput significantly. A hit rate as low as 60 percent (a value measured for some f ile caches <ref> [BAKE91] </ref>) would more than double the performance seen by the user, reducing average response time to a Thematic Mapper image query from 700 seconds to 280 seconds. . Creating an abstract is equivalent to running a query over a fullsize data set. As we have seen, this is highly time-consuming.
Reference: [BERS88] <author> Bershad, B. N., Pinkerton, C. B., Watchdogs: </author> <title> Extending the Unix File System, </title> <booktitle> USENIX Association 1988 Winter Conference Proceedings, </booktitle> <month> February </month> <year> 1988. </year>
Reference-contexts: 0.14 14 Magnetic disk 20 GB 0.3 300 Optical disk 500 GB 7 7000 Tape 10,000 GB 140 140000 Query Patterns Abstracts: A Latency-Hiding Technique for High-Capacity Mass-Storage Systems 8 of 20 ally, abstracts could be generated as a part of the process of bringing the data into the system <ref> [BERS88] </ref> [GIFF91], reducing cost by allowing many abstracts to be created without additional access to tertiary memory .
Reference: [BURR91] <author> Burrows, M., Jerian, C., Lampson, B., Mann, T., </author> <title> On-line Data Compression in a Log-Structured File System, </title> <note> DEC Systems Research Center Technical Report, </note> <year> 1991. </year>
Reference-contexts: Lossless compression typically reduces the size of data objects by a factor of 2-5. [ZIV77] [LELE87]. This allows the storage system to transfer more information with fewer bytes, thus making more effective use of available bandwidth. <ref> [BURR91] </ref> But compression alone does nothing for latency; the many seconds consumed loading a tape and seeking to a location on that tape are not eliminated simply by shrinking the size of the data to be read from the tape once the first byte is found.
Reference: [CATE91] <author> Cate, V., Gross, T., </author> <title> Integration of Compression and Caching for a Two-Level Filesystem, </title> <booktitle> Proceedings of the Fourth International Confer ence on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pp. 200-209, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: For some applications, such as image rendering, this is a reasonable tradeoff. However, both lossy and lossless compression are typically used to improve capacity, rather than to reduce latency. For instance, Cate and Gross store compressed versions of files on disk, and cache uncompressed data in main memory <ref> [CATE91] </ref>. This has the effect of increasing the amount of data which can be stored on disk. This is of relatively little benef it, however, with the exceptionally high capacities available in tertiary storage.
Reference: [CHER91] <author> Chervenak, A., </author> <title> Performance Modeling of Helical Scan T ape Devices, </title> <note> submitted for publication, </note> <institution> University of California, </institution> <year> 1991. </year>
Reference-contexts: We used the measured performance of the Exabyte 8500 tape drive in an Exabyte 120 T ape Library <ref> [CHER91] </ref> as the tertiary storage, and a composite Abstracts Abstracts: A Latency-Hiding Technique for High-Capacity Mass-Storage Systems 7 of 20 disk drive technology as secondary storage.
Reference: [CPM91] <institution> Committee on Physical, Mathematical, and Engineering Sciences, Grand Challenges: High Performance Computing and Communications, Office of Science and Technology Policy, </institution> <address> Washington, D. C., </address> <year> 1991. </year>
Reference: [DOZI89] <author> Dozier, J., </author> <title> Spectral Signature of Alpine Snow Cover from the Landsat Thematic Mapper , Remote Sens. </title> <journal> Environ., </journal> <volume> vol 28, </volume> <pages> pp. 9-22, </pages> <year> 1989. </year>
Reference-contexts: A pixel is believed to show snow if its measured radiance satisfies each of the following criteria <ref> [DOZI89] </ref>: r1 &gt; 0.16 (1) (r2 - r5) / (r2 + r5) &gt; 0.4 (3) rn is defined to be the normalized reectance (between 0 and 1) of a pixel in spectral band n.
Reference: [DOZI91] <author> Dozier, J., Ramapriyan, H. K., </author> <title> Planning for the EOS Data and Information System (EOSDIS), Global Environmental Change, </title> <editor> R. W. Corell and P. A. Anderson (eds.), </editor> <booktitle> NATO ASI Series, </booktitle> <volume> vol. </volume> <pages> 1, </pages> <address> Springer-Ver-lag, Berlin, </address> <year> 1991. </year> <title> Figures Abstracts: A Latency-Hiding Technique for High-Capacity Mass-Storage Systems 15 of 20 </title>
Reference: [GIFF91] <author> Gifford, D. K., Jouvelot, P., Sheldon, M. A., OToole Jr., J. W., </author> <title> Semantic File Systems, </title> <booktitle> Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 16-25, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The idea of extracting information from files to accelerate certain types of access is becoming increasingly common. One example is semantic file systems, which pre-compute indices on the contents of files to allow users to quickly find files of interest in a lar ge file system <ref> [GIFF91] </ref>. Examples of indexed attributes are keywords (for mail messages) and procedure names (for program source code.). Lossy image compression is another example of a specific type of abstract. <p> 14 Magnetic disk 20 GB 0.3 300 Optical disk 500 GB 7 7000 Tape 10,000 GB 140 140000 Query Patterns Abstracts: A Latency-Hiding Technique for High-Capacity Mass-Storage Systems 8 of 20 ally, abstracts could be generated as a part of the process of bringing the data into the system [BERS88] <ref> [GIFF91] </ref>, reducing cost by allowing many abstracts to be created without additional access to tertiary memory . As the access patterns from users change, however , we will inevitably need to reevaluate the extent to which existing abstracts are able to intercept queries and avoid fetches from tertiary memory .
Reference: [JUST85] <author> Justice, C. O., Townshend, J. R. G., Holben, B. N., T ucker, C. J., </author> <title> Phenology of Global Vegetation Using Meteorological Satellite Data, </title> <journal> Int. Journal of Rem. Sens., </journal> <volume> vol 6, </volume> <pages> pp. 1271-1319, </pages> <year> 1985. </year>
Reference-contexts: These tests are computationally simple, and are really a special case of a more generic abstracting mechanism: selection by arithmetic preprocessing and boolean combinations of pixel values. For example, a normalized difference of infrared and visible reectance ((IR - vis) / (IR + vis)) is used to map vegetation <ref> [JUST85] </ref>, and could be used as an abstracting function to find vegetated areas. Researchers studying climatic phenomena use snow-cover information to predict such phenomena as patterns of snowmelt and water runoff.
Reference: [KATZ92] <author> Katz, R., Patterson, D., Chervenak, A., Fine, J., Miller, E., </author> <title> An Approach to Cost-Effective Terabyte Memory Systems, </title> <booktitle> Proceedings of IEEE Compcon, </booktitle> <month> February </month> <year> 1992. </year>
Reference: [LEGA91] <author> Le Gall, D., </author> <title> MPEG: A V ideo Compression Standard for Multimedia Applications, </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 4, </volume> <pages> pp 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Colors can be blended or shapes made vague, and people will still be able to discern the contents of the image. This is especially true of moving video, where the eye naturally interpolates between frames. Both the MPEG standard for moving video <ref> [LEGA91] </ref> and the JPEG standard for still images [WALL91] exploit these elements of visual compressibility. But this doesnt say which information can be lost with data types other than images, nor does it work with applications other than image rendering.
Reference: [LELE87] <author> Lelewer, D. A., Hirschberg, D. S., </author> <title> Data Compression, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 19, no. 3, </volume> <pages> pp. 261-296, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: By contrast, we propose storing the original data on tape and caching the abstracted data on disk and in memory. Lossless compression typically reduces the size of data objects by a factor of 2-5. [ZIV77] <ref> [LELE87] </ref>.
Reference: [MECH91] <author> Mechoso, C. R., </author> <type> Personal Communication, </type> <month> October </month> <year> 1991. </year>
Reference: [OUST85] <author> Ousterhout, J. K., Da Costa, H., Harrison, D., Kunze, J. A., Kupfer , M., and Thompson, J. G., </author> <title> A Trace-Driven Analysis of the UNIX 4.2 BSD File System, </title> <booktitle> Proceedings of the 10th Symposium on Operating System Principles, </booktitle> <pages> pp. 15-24, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: For instance, while earlier studies have shown that file caching is effective, these studies have concentrated on Unix-based systems comprised mostly of many small f iles and only a few lar ger files <ref> [OUST85] </ref> [BAKE91]. These studies suggest that when files become large enough that only a few files can be stored in memory, caching will be significantly less effective. One of these studies [BAKE91] specif ically blames worse than expected cache performance on the increasing use of large files in Unix systems.
Reference: [SMIT81] <author> Smith, A. J., </author> <title> Long Term File Migration: Development and Evaluation of Algorithms, </title> <journal> Communications of the ACM, </journal> <volume> vol. 24, </volume> <pages> pp. 521-532, </pages> <year> 1981. </year>
Reference: [SMIT82] <author> Smith, A. J., </author> <title> Cache Memories, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 14, no. 3, </volume> <month> September </month> <year> 1982, </year> <pages> pp. 473-530. </pages>
Reference-contexts: Caches achieve high hit rates by exploiting localities in the access patterns exhibited by users and programs: a piece of data which has just been read is likely to be read again soon, and its neighbors are likely to be read soon too <ref> [SMIT82] </ref>. Localities of reference do not help, however , when the working sets are far lar ger than the cache itself.
Reference: [STON91] <author> Stonebraker, M., Dozier, J., </author> <title> Large Capacity Object Servers to Support Global Change Research, </title> <type> Sequoia Technical Report 91/1, </type> <year> 1991. </year>
Reference-contexts: Introduction Abstracts: A Latency-Hiding Technique for High-Capacity Mass-Storage Systems 3 of 20 measured in minutes <ref> [STON91] </ref>. For instance, scientists would like to view animated sequences of visual images based on the data generated by their climate model. The problems faced by global change researchers are faced by other users as well. <p> Such image data types will cause existing data bases to expand by factors of 1000 or more, and insurance data bases are likely to be measured in terabytes in the near future. The result is that the same latency problems will appear <ref> [STON91] </ref>. We believe that traditional approaches to managing storage hierarchies are inadequate when applied to massive storage systems. In particular, caching and compression will not reduce latency sufficiently to enable interactive systems using high-capacity tertiary memory devices.
Reference: [WALL91] <author> Wallace, G., </author> <title> The JPEG Still Picture Compression Standard, </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, No. 4, </volume> <pages> pp. 30-44, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This is especially true of moving video, where the eye naturally interpolates between frames. Both the MPEG standard for moving video [LEGA91] and the JPEG standard for still images <ref> [WALL91] </ref> exploit these elements of visual compressibility. But this doesnt say which information can be lost with data types other than images, nor does it work with applications other than image rendering.

References-found: 19

