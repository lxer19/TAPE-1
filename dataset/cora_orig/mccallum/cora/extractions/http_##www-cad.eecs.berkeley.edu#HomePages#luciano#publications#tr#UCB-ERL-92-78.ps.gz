URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications/tr/UCB-ERL-92-78.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications.html
Root-URL: 
Title: A Unified Signal Transition Graph Model for Asynchronous Control Circuit Synthesis  
Author: Alexandre Yakovlev Luciano Lavagno Alberto Sangiovanni-Vincentelli 
Date: January 26, 1995  
Address: NE1 7RU United Kingdom  Berkeley, CA 94720  Berkeley, CA 94720  
Affiliation: Dept. of Computing Science The University Newcastle upon Tyne,  Dept. of Electrical Engineering University of California  Dept. of Electrical Engineering University of California  
Abstract: Characterization of the behavior of an asynchronous system depending on the delay of components and wires is a major task facing designers. Some of these delays are outside the designer's control, and in practice may have to be assumed unbounded. The existing literature offers a number of analysis and specification models, but lacks a unified framework to verify directly if the circuit specification admits a correct implementation under these hypotheses. Our aim is to fill exactly this gap, offering both low-level (analysis-oriented) and high-level (specification-oriented) models for asynchronous circuits and the environment where they operate, together with strong equivalence results between the properties at the two levels. One interesting side result is the precise characterization of classical static and dynamic hazards in terms of our model. Consequently the designer can check the specification and directly decide if the behavior of any implementation will depend, e.g., on the delays of the signals described by such specification. We also outline a design methodology based on our models, pointing out how they can be used to select appropriate high and low-level models depending on the desired characteristics of the system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. A. Beerel and T. H-Y. Meng. </author> <title> Gate-level synthesis of speed-independent asynchronous control circuits. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: Such component implementation issues are dealt with elsewhere (see, for example, [25], [12], <ref> [1] </ref>). 2 ACS Asynchronous Control Structure Structural model of asynchronous systems BACS Binary Asynchronous Control Structure Binary version of ACS TS Transition System Uninterpreted state-transition based behavioral model ALTS Arc-Labeled Transition System TS with transitions interpreted as signal value changes STD State-Transition Diagram ALTS with binary-labeled states CD Cumulative Diagram Cumulative <p> The reader is referred to [25], [12] or <ref> [1] </ref> for examples of techniques to realize the function of each node using a specific implementation technology. <p> a Marked Graph. * Once the above choices have been made, the STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this paper. * Then an implementation is produced using a synthesis algorithms from the literature (e.g. [25], [12], <ref> [1] </ref>). * Finally, the resulting circuit can be verified (using, for example, [7]) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 8 Conclusions This paper has achieved three major objectives:
Reference: [2] <author> E. Best and K. Voss. </author> <title> Free choice systems have home states. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 89-100, </pages> <year> 1984. </year>
Reference-contexts: The following Theorem was proved in <ref> [2] </ref>: Theorem 4.2 The ALTS of a PN is confluent if the net is free-choice, bounded and live. The following Theorems were proved in [26]: Theorem 4.3 The CD of a marked PN is a semi-modular lattice with a zero element if the net is persistent. Theorem 4.4 1.
Reference: [3] <author> J. A. Brzozowski and C-J. Seger. </author> <title> Advances in asynchronous circuit theory part I: Gate and unbounded inertial delay models. </title> <journal> Bulletin of the European Association of Theoretical Computer Science, </journal> <month> October </month> <year> 1990. </year>
Reference-contexts: Furthermore, all these models (unlike older ones, as Flow Tables [21]) allow to specify the system in its interaction with the environment, which is also crucial for control, reactive hardware. 1 On the other hand, a number of analysis models (see <ref> [3] </ref> for a thorough review) allow the designer to verify, for example, if the circuit will or will not have hazards during its operation, or if, depending on the relative magnitude of the delay of two components, it may hang forever in an invalid state. <p> We shall therefore regard this behavior (when f i changes before z i ) as anomalous or hazardous. 7 Although some results on speed-independence can be obtained through such technique <ref> [3] </ref>, they are meaningful only for a very restrictive modeling conditions. Namely, the circuit must operate in Fundamental Mode, and it is regarded as Speed-independent if its final equivalence class consists of a unique stable state.
Reference: [4] <author> S. Burns and A. Martin. </author> <title> A synthesis method for self-timed VLSI circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1987. </year>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, <ref> [4, 14, 15] </ref>, [24, 10, 11]). <p> Delay model of the circuit (delay model in large): * feedback delay model ([8]), assuming that there are delays only in the feedback wires. * gate delay model, ([18]), assuming that only the logic elements have finite delays. * gate and wire delay model, ([3] and <ref> [4] </ref>) assuming that both gates and wires have finite delays. 3.
Reference: [5] <author> T.-A. Chu. </author> <title> Synthesis of self-timed control circuits from graphs: an example. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 565-571, </pages> <year> 1986. </year>
Reference-contexts: Among them Signal Transition Graphs (STGs) based on Petri nets as an underlying formalism, have captured wide attention, due to a simple yet powerful mechanism to describe explicitly the major aspects of asynchronous control circuit behavior, such as concurrency, causality and conflict ([19] and <ref> [5] </ref>). <p> Furthermore the classical definition of a valid Signal Transition Graph specification is unnecessarily restrictive, as [28] showed by presenting some useful, correctly implementable behaviors that cannot be described using the constrained STGs used by Chu in <ref> [5] </ref>. For example Chu required the Petri net underlying the STG to be safe, live and free-choice, in order to ease the STG analysis/synthesis task. <p> The model, called Signal Transition Graph (STG), is based on interpreted Petri nets, and is a development of similar, but less general, models presented by [19] and <ref> [5] </ref>. <p> with those in T and whose CDs are isomorphic to the CD generated by S. 4.2 Signal Transition Graphs Interpreted Petri nets, where transitions represent changes of values of circuit signals, were proposed independently as specification models for Asynchronous Logic Circuits by [19] (where they were called Signal Graphs) and <ref> [5] </ref> (where they were called Signal Transition Graphs, STGs). Both papers proposed to interpret a PN as the specification of an ALC C = hX; Z; F i (where Y denotes, as usual, (X [ Z), by labelling each transition with an element of Y fi f+; g. <p> An STG is autonomous if it has no input signals (i.e. X = ;). Both [19] and <ref> [5] </ref> gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [19] and State Graph in [5]) and hence into an ALC implementation of the specified behavior. <p> An STG is autonomous if it has no input signals (i.e. X = ;). Both [19] and <ref> [5] </ref> gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [19] and State Graph in [5]) and hence into an ALC implementation of the specified behavior. Given an STG G = hP; X; Z; i and the ALTS ([m 0 &gt;; E; T; ffi) corresponding to its PN P, we define the associated STD S = h [m 0 &gt;; E; i as follows. <p> Both [19] and <ref> [5] </ref> recognized that an STG has an STD-isomorphic circuit implementation if (but not only if) output signal transitions are persistent, and the STD is non-contradictory.
Reference: [6] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference: [7] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year> <title> An ACM Distinguished Dissertation 1988. 19 I.e. properties that depend both on the graph and on the marking of the PN. </title> <type> 25 </type>
Reference-contexts: STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this paper. * Then an implementation is produced using a synthesis algorithms from the literature (e.g. [25], [12], [1]). * Finally, the resulting circuit can be verified (using, for example, <ref> [7] </ref>) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 8 Conclusions This paper has achieved three major objectives: * Define a low-level structural and behavioral model for asynchronous systems, the
Reference: [8] <author> D. A. Huffman. </author> <title> The synthesis of sequential switching circuits. </title> <journal> J. Franklin Institute, </journal> <volume> 257 161-190,275-303, </volume> <month> March </month> <year> 1954. </year>
Reference: [9] <author> R.M. Keller. </author> <title> A fundamental theorem of asynchronous parallel computation. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 24 </volume> <pages> 103-112, </pages> <year> 1975. </year>
Reference-contexts: by a binary transition system, called state transition diagram, which is introduced in the following section. 2.2 Transition Systems and State Transition Diagrams This section describes how the interconnected components of an ACS behave in time, that is how the variables associated with them change, using some key concepts from <ref> [9] </ref>. A Transition System (TS) is a pair hS; Ei, where S is a set of states, and E; E S fi S, is a set of transitions. Note that we do not restrict S and E to be finite. <p> No matter who wins the race, we must still be able to reach the same state in the future. Similarly, local confluence will be shown to be related to the classical concept of static hazards in a circuit. Following <ref> [9] </ref>, we call an ALTS hS; E; A; ffii : * confluent, if 8s; s1; s2 2 S, if sE fl s1 3 and sE fl s2, then 9s3 2 S such that s1E fl s3 and s2E fl s3. * locally confluent, if 8s; s1; s2 2 S, if sEs1 <p> Keller, in <ref> [9] </ref>, gave three sufficient conditions for local confluence (and hence confluence) of an ALTS. <p> It was proven in <ref> [9] </ref> that if an ALTS satisfy all these conditions together, then it is both Locally Confluent and Confluent. The definition of STD implies that if an STD satisfies these conditions, then it is uniquely locally confluent. <p> Under this mapping, each Unique-Action Relation-class [e] t , with e = sE (t)s 0 corresponds to a particular firing of a transition t. The following Proposition is an obvious consequence of the PN firing rule and of the results in <ref> [9] </ref>: Proposition 4.1 1. The ALTS corresponding to a marked PN is finite if and only if the PN is bounded. 2. The ALTS corresponding to a marked bounded live PN is live. 3. The ALTS corresponding to a marked PN is deterministic and commutative. 4.
Reference: [10] <author> M. A. Kishinevsky, A. Y. Kondratyev, and A. R. Taubin. </author> <title> Formal method for self-timed design. </title> <booktitle> In Proceedings of the European Design Automation Conference (EDAC), </booktitle> <year> 1991. </year>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, [4, 14, 15], <ref> [24, 10, 11] </ref>). Among them Signal Transition Graphs (STGs) based on Petri nets as an underlying formalism, have captured wide attention, due to a simple yet powerful mechanism to describe explicitly the major aspects of asynchronous control circuit behavior, such as concurrency, causality and conflict ([19] and [5]). <p> and -(y 1 ) = -(y 2 ) there exist m 3 and m 0 3 such that m 2 E (y fl 2 )m 3 and m 0 1 )m 0 6 On the relationship between Signal Transition Graphs and Change Diagrams Change Diagrams, described more in detail in <ref> [24, 10, 11] </ref>, are an event-based model for Asynchronous Logic Circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this Section we compare the two models, and show how, when we limit ourselves to Semi-modular circuits, they have similar modeling power. <p> Furthermore synthesis algorithms from Change Diagrams to ALCs in various technologies were outlined in <ref> [10] </ref>. The main limitation of Change Diagrams is their inability to describe choice among alternative behaviors, as modeled by places with more than one successor in PNs.
Reference: [11] <author> M. A. Kishinevsky, A. Y. Kondratyev, A. R. Taubin, and V. I. Varshavsky. </author> <title> On self-timed behavior verification. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <year> 1992. </year>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, [4, 14, 15], <ref> [24, 10, 11] </ref>). Among them Signal Transition Graphs (STGs) based on Petri nets as an underlying formalism, have captured wide attention, due to a simple yet powerful mechanism to describe explicitly the major aspects of asynchronous control circuit behavior, such as concurrency, causality and conflict ([19] and [5]). <p> and -(y 1 ) = -(y 2 ) there exist m 3 and m 0 3 such that m 2 E (y fl 2 )m 3 and m 0 1 )m 0 6 On the relationship between Signal Transition Graphs and Change Diagrams Change Diagrams, described more in detail in <ref> [24, 10, 11] </ref>, are an event-based model for Asynchronous Logic Circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this Section we compare the two models, and show how, when we limit ourselves to Semi-modular circuits, they have similar modeling power. <p> This model is more powerful than similar models known from the literature (e.g. [18] or <ref> [11] </ref>) because it allows to use non-determinism for behavior abstraction and for components that cannot be characterized as Boolean functions, e.g. arbiters. * Characterize concepts such as hazards, delay-insensitivity and speed-independence in terms of formal properties of the Arc-Labeled Transition System and its Cumulative Diagram, both using pure delays and inertial
Reference: [12] <author> L. Lavagno, K. Keutzer, and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis of hazard-free asynchronous circuits. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: The main concern is to analyze properties that are common to every implementation of the specified behavior, using a model that is general enough to abstract various different implementation techniques, but detailed enough to have practical relevance. Such component implementation issues are dealt with elsewhere (see, for example, [25], <ref> [12] </ref>, [1]). 2 ACS Asynchronous Control Structure Structural model of asynchronous systems BACS Binary Asynchronous Control Structure Binary version of ACS TS Transition System Uninterpreted state-transition based behavioral model ALTS Arc-Labeled Transition System TS with transitions interpreted as signal value changes STD State-Transition Diagram ALTS with binary-labeled states CD Cumulative Diagram <p> This point of view is interesting, for example, if the interconnections between nodes occur outside a single integrated circuit, so that the delays between them are large compared with the delays inside the circuit, and are outside of the direct designer's control. The reader is referred to [25], <ref> [12] </ref> or [1] for examples of techniques to realize the function of each node using a specific implementation technology. <p> is a Marked Graph. * Once the above choices have been made, the STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this paper. * Then an implementation is produced using a synthesis algorithms from the literature (e.g. [25], <ref> [12] </ref>, [1]). * Finally, the resulting circuit can be verified (using, for example, [7]) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 8 Conclusions This paper has achieved three major
Reference: [13] <author> L. Lavagno, C. W. Moon, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Solving the state assignment problem for signal transition graphs. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: another STG G 0 with the Complete State Coding property and such that its set of traces (restricted to the signals of G) is a subset of the traces of G was solved recently for various special classes of STGs (see, for example, [27] or [23] for Marked Graphs and <ref> [13] </ref> for free-choice STGs). 5 Classification of Models of Asynchronous Logic Circuits We are now ready to proceed with the next contribution of this paper, a classification of the Signal Transition Graph models according to the type of Asynchronous Control Structure or Asynchronous Logic Circuit they give origin to.
Reference: [14] <author> A. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <editor> In C. A. R. Hoare, editor, </editor> <booktitle> Developments in Concurrency and Communications, The UT Year of Programming Series. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, <ref> [4, 14, 15] </ref>, [24, 10, 11]).
Reference: [15] <author> A. Martin. </author> <title> Synthesis of asynchronous VLSI circuits. </title> <editor> In J. Staunstrup, editor, </editor> <title> Formal Methods for VLSI Design. </title> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, <ref> [4, 14, 15] </ref>, [24, 10, 11]).
Reference: [16] <author> R. E. Miller. </author> <booktitle> Switching theory, </booktitle> <volume> volume 2, chapter 10, </volume> <pages> pages 192-244. </pages> <publisher> Wiley and Sons, </publisher> <year> 1965. </year>
Reference-contexts: It removes the usual structural limitation (used, e.g. by <ref> [16] </ref> or [21]) that each component has exactly one output signal. Thus an ACS structure can represent an arbitrary interconnection of modules, with the only restriction that no two modules can drive a single signal 2 . <p> The complete history of the system is represented by a set of traces, where each trace records exactly the order of occurrences of actions. The state of the Arc-Labeled Transition System, on the other hand, describes only the final result of such execution. In this section, following <ref> [16] </ref>, we will describe a model to describe this history, where only the number of occurrences of each action is recorded, called a Cumulative Diagram (CD). Hence this representation will be of intermediate precision between a Trace Model and an ALTS. <p> An Asynchronous Logic Circuit (ALC, [18], <ref> [16] </ref>) is a triple hX; Z; F i, where X is a set of input signals (jXj = m), Z is a set of output signals (jZj = n), F = ff 1 ; f 2 ; :::; f n g is a set of Boolean functions, the circuit element functions,
Reference: [17] <author> C. W. Moon, P. R. Stephan, and R. K. Brayton. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: Later on Chu ([6]) formulated a necessary and sufficient condition for the existence of a circuit implementation of a valid STG, called Complete State Coding in <ref> [17] </ref> (who proved it to be necessary and sufficient). An STG has the Complete State Coding property if all markings with the same binary label have the same set of enabled output signal transitions. So we can state the following Theorem.
Reference: [18] <author> D. E. Muller and W. C. Bartky. </author> <title> A theory of asynchronous circuits. </title> <journal> In Annals of Computing Laboratory of Harvard University, </journal> <pages> pages 204-243, </pages> <year> 1959. </year>
Reference-contexts: An Asynchronous Logic Circuit (ALC, <ref> [18] </ref>, [16]) is a triple hX; Z; F i, where X is a set of input signals (jXj = m), Z is a set of output signals (jZj = n), F = ff 1 ; f 2 ; :::; f n g is a set of Boolean functions, the circuit element <p> This model is more powerful than similar models known from the literature (e.g. <ref> [18] </ref> or [11]) because it allows to use non-determinism for behavior abstraction and for components that cannot be characterized as Boolean functions, e.g. arbiters. * Characterize concepts such as hazards, delay-insensitivity and speed-independence in terms of formal properties of the Arc-Labeled Transition System and its Cumulative Diagram, both using pure delays
Reference: [19] <author> L. Y. Rosenblum and A. V. Yakovlev. </author> <title> Signal graphs: from self-timed to timed ones. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <year> 1985. </year>
Reference-contexts: The model, called Signal Transition Graph (STG), is based on interpreted Petri nets, and is a development of similar, but less general, models presented by <ref> [19] </ref> and [5]. <p> Marked Graph P 00 whose transitions are labelled with those in T and whose CDs are isomorphic to the CD generated by S. 4.2 Signal Transition Graphs Interpreted Petri nets, where transitions represent changes of values of circuit signals, were proposed independently as specification models for Asynchronous Logic Circuits by <ref> [19] </ref> (where they were called Signal Graphs) and [5] (where they were called Signal Transition Graphs, STGs). <p> An STG is autonomous if it has no input signals (i.e. X = ;). Both <ref> [19] </ref> and [5] gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [19] and State Graph in [5]) and hence into an ALC implementation of the specified behavior. <p> An STG is autonomous if it has no input signals (i.e. X = ;). Both <ref> [19] </ref> and [5] gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [19] and State Graph in [5]) and hence into an ALC implementation of the specified behavior. <p> Both <ref> [19] </ref> and [5] recognized that an STG has an STD-isomorphic circuit implementation if (but not only if) output signal transitions are persistent, and the STD is non-contradictory.
Reference: [20] <author> J. T. Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 197-204, </pages> <year> 1986. </year>
Reference-contexts: Proposition 5.3 holds also in the pure delay case. 19 5.3 Delay Insensitivity Informally, a Delay-Insensitive circuit operates correctly under the inertial gate and wire delay model in input-output mode with general multiple-winner races (Section 3.2). A more formal definition was given by Udding in <ref> [20] </ref>, using Trace theory. Let A = hV; H; Y; i be a BACS, let S = hS; E; i be its associated STD, and let T = hA; i be its associated Trace Model.
Reference: [21] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley Interscience, </publisher> <year> 1969. </year>
Reference-contexts: Furthermore, all these models (unlike older ones, as Flow Tables <ref> [21] </ref>) allow to specify the system in its interaction with the environment, which is also crucial for control, reactive hardware. 1 On the other hand, a number of analysis models (see [3] for a thorough review) allow the designer to verify, for example, if the circuit will or will not have <p> It removes the usual structural limitation (used, e.g. by [16] or <ref> [21] </ref>) that each component has exactly one output signal. Thus an ACS structure can represent an arbitrary interconnection of modules, with the only restriction that no two modules can drive a single signal 2 .
Reference: [22] <author> J. L. A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design, </title> <booktitle> volume 200 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: The ALTS in Figure 1.(b) is obviously live. 2.3 Trace Models For an ACS defined by an ALTS we can define another representation, called Trace Structure, or Trace Model (see <ref> [22] </ref>) 5 , of its behavior. This representation will be needed in Section 5.3, because delay-insensitive circuits were defined in the literature using Trace Models, so in order to define delay-insensitivity within our framework we must relate Trace Models with Arc-Labelled Transition Systems.
Reference: [23] <author> P. Vanbekbergen, G. Goossens, and H. De Man. </author> <title> A local optimization technique for asynchronous control circuits. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: State Coding property, to determine another STG G 0 with the Complete State Coding property and such that its set of traces (restricted to the signals of G) is a subset of the traces of G was solved recently for various special classes of STGs (see, for example, [27] or <ref> [23] </ref> for Marked Graphs and [13] for free-choice STGs). 5 Classification of Models of Asynchronous Logic Circuits We are now ready to proceed with the next contribution of this paper, a classification of the Signal Transition Graph models according to the type of Asynchronous Control Structure or Asynchronous Logic Circuit they
Reference: [24] <author> V. I. Varshavsky, M. A. Kishinevsky, A. Y. Kondratyev, L. Y. Rosenblyum, and A. R. Taubin. </author> <title> Models for specification and analysis of processes in asynchronous circuits. </title> <journal> Izvestiia Akademii nauk SSSR, Tekhnicheskaya Kibernetika, </journal> <pages> pages 171-190, </pages> <year> 1988. </year> <title> English translation: </title> <journal> Soviet Journal of Computer and Systems Sciences. </journal>
Reference-contexts: The existing literature describes models to solve both these problems separately. Namely a number of high-level specification techniques for control-oriented asynchronous circuits have recently become available (see, for example, [4, 14, 15], <ref> [24, 10, 11] </ref>). Among them Signal Transition Graphs (STGs) based on Petri nets as an underlying formalism, have captured wide attention, due to a simple yet powerful mechanism to describe explicitly the major aspects of asynchronous control circuit behavior, such as concurrency, causality and conflict ([19] and [5]). <p> The only effort in this direction, to the best of our knowledge, is the so-called Change Diagram representation, that was shown in <ref> [24] </ref> to be formally equivalent to hazard-free circuits under the unbounded inertial gate delay model. <p> Section 4 defines Signal Transition Graphs as interpreted Petri nets and describes the problem of their implementation in Asynchronous Logic Circuits. Section 5 presents a classification of Signal Transition Graphs according to the corresponding Asynchronous Logic Circuit properties. Section 6 compares the Change Diagram model proposed in <ref> [24] </ref> with the STG model. Section 7 outlines a design methodology based on our models. Section 8 concludes the paper. <p> and -(y 1 ) = -(y 2 ) there exist m 3 and m 0 3 such that m 2 E (y fl 2 )m 3 and m 0 1 )m 0 6 On the relationship between Signal Transition Graphs and Change Diagrams Change Diagrams, described more in detail in <ref> [24, 10, 11] </ref>, are an event-based model for Asynchronous Logic Circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this Section we compare the two models, and show how, when we limit ourselves to Semi-modular circuits, they have similar modeling power. <p> Disengageable arcs are removed from the Change Diagram after the first firing of their successor transition. They are used to represent the initialization sequence of a circuit, and we will not enter into details concerning their usage. Following <ref> [24] </ref>, we can associate a State Transition Diagram S = hS; E; i with a Change Diagram, as we did in Section 4.2 for STGs. Let S be the set of reachable activity vectors (similar to PN markings). <p> The main theoretical result concerning Change Diagrams is stated (without proof) in <ref> [24] </ref>. A transient cycle in an STD is defined as a cycle where at least one variable is continuously excited with the same value (see Figure 9 for an example). Proposition 6.1 Each Semi-modular STD without transient cycles has a corresponding correct Change Diagram.
Reference: [25] <author> V. I. Varshavsky, M. A. Kishinevsky, V. B. Marakhovsky, V. A. Peschansky, L. Y. Rosenblum, A. R. Taubin, and B. S. Tzirlin. </author> <title> Self-timed Control of Concurrent Processes. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1990. </year> <note> (Russian edition: </note> <year> 1986). </year>
Reference-contexts: The main concern is to analyze properties that are common to every implementation of the specified behavior, using a model that is general enough to abstract various different implementation techniques, but detailed enough to have practical relevance. Such component implementation issues are dealt with elsewhere (see, for example, <ref> [25] </ref>, [12], [1]). 2 ACS Asynchronous Control Structure Structural model of asynchronous systems BACS Binary Asynchronous Control Structure Binary version of ACS TS Transition System Uninterpreted state-transition based behavioral model ALTS Arc-Labeled Transition System TS with transitions interpreted as signal value changes STD State-Transition Diagram ALTS with binary-labeled states CD Cumulative <p> This point of view is interesting, for example, if the interconnections between nodes occur outside a single integrated circuit, so that the delays between them are large compared with the delays inside the circuit, and are outside of the direct designer's control. The reader is referred to <ref> [25] </ref>, [12] or [1] for examples of techniques to realize the function of each node using a specific implementation technology. <p> PN is a Marked Graph. * Once the above choices have been made, the STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this paper. * Then an implementation is produced using a synthesis algorithms from the literature (e.g. <ref> [25] </ref>, [12], [1]). * Finally, the resulting circuit can be verified (using, for example, [7]) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 8 Conclusions This paper has achieved three
Reference: [26] <author> A. V. Yakovlev. </author> <title> Analysis of concurrent systems through lattices. </title> <note> Theoretical Computer Science, Submitted for publication. </note>
Reference-contexts: This will be useful in order to establish the desired correspondence between PN properties and circuit properties. According to <ref> [26] </ref>, we define the Cumulative Diagram of a marked PN as follows. <p> The set V, called the Cumulative Diagram of P, was shown in <ref> [26] </ref> to be a partial order when we define V 1 v V 2 if: * V 1 (t) V 2 (t) for all t and * marking (V 2 ) is reachable from marking (V 1 ). <p> The following Theorem was proved in [2]: Theorem 4.2 The ALTS of a PN is confluent if the net is free-choice, bounded and live. The following Theorems were proved in <ref> [26] </ref>: Theorem 4.3 The CD of a marked PN is a semi-modular lattice with a zero element if the net is persistent. Theorem 4.4 1. The CD of a marked PN is a distributive lattice with a zero element if the net is safe and persistent. 2. <p> This Figure illustrates clearly the semantic gap arising from using a purely interleaving semantics (as in the STD) versus using a true concurrent semantics (as in the STG). The following Theorem is a direct consequence of the results in <ref> [26] </ref>: Theorem 4.5 1. For every deterministic, commutative and persistent STD S there exists an STG whose PN is persistent, bounded and generates S. 2. For every distributive STD S there exists an STG whose PN is a safe Marked Graph and generates S. 3. <p> The same behavior can be represented by the infinite PN in Figure 7.(c). We conjecture that there exists no finite PN representing it. The seemingly equivalent PN shown in Figure 8.(a) describes in effect a different behavior. Its unfolding into an execution net (see <ref> [26] </ref>) in Figure 8.(b) shows that here the i-th occurrence of event c can be caused by any combination of pairs of the form a k and b ik where k can be of any value between 0 and i.
Reference: [27] <author> A. V. Yakovlev and A. Petrov. </author> <title> Petri nets and parallel bus controller design. </title> <booktitle> In International Conference on Application and Theory of Petri Nets, </booktitle> <address> Paris, France. </address> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: the Complete State Coding property, to determine another STG G 0 with the Complete State Coding property and such that its set of traces (restricted to the signals of G) is a subset of the traces of G was solved recently for various special classes of STGs (see, for example, <ref> [27] </ref> or [23] for Marked Graphs and [13] for free-choice STGs). 5 Classification of Models of Asynchronous Logic Circuits We are now ready to proceed with the next contribution of this paper, a classification of the Signal Transition Graph models according to the type of Asynchronous Control Structure or Asynchronous Logic
Reference: [28] <author> A.V. Yakovlev. </author> <title> On limitations and extensions of STG model for designing asynchronous control circuits. </title> <booktitle> In Accepted for publication in Proc. of International Conference on Computer Design, </booktitle> <month> October </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: Furthermore the classical definition of a valid Signal Transition Graph specification is unnecessarily restrictive, as <ref> [28] </ref> showed by presenting some useful, correctly implementable behaviors that cannot be described using the constrained STGs used by Chu in [5]. For example Chu required the Petri net underlying the STG to be safe, live and free-choice, in order to ease the STG analysis/synthesis task.
References-found: 28

