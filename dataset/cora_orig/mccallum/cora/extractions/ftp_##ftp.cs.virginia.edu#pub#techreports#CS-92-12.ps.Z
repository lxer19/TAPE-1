URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-92-12.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Function-Driven Scheduling: A General Framework for Expression and Analysis of Scheduling  
Author: W. Timothy Strayer 
Note: This work is supported in part by the U. S. Naval Ocean Systems Center and the Office of Naval Research under contract number N00014-91-J-1514.  
Abstract: Computer Science Report No. TR-92-12 May 14, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [ANSI86] <author> American National Standards Institute, </author> <title> FDDI Token Ring Media Access Control Standard, Draft proposed Standard X3T9.5/83-16, </title> <journal> Rev. </journal> <volume> 10, </volume> <month> February </month> <year> 1986. </year>
Reference-contexts: Time-division multiplexing is another place where levels of service can be established. An example of this is the timed-token approach in the Fiber Distributed Data Interface (FDDI) standard <ref> [ANSI86] </ref>. In FDDI, a certain class of messages, called the synchronous class, requires at least some minimum amount of service each time period. A second class of messages, called asynchronous, may utilize the time left over. <p> Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol. Other protocols are more active in granting access: IEEE 802.4 Token Bus [IEEE85a], IEEE 802.5 Token Ring [IEEE85b], ANSI Fiber Distributed Data Interface (FDDI <ref> [ANSI86] </ref>), and the SAE High Speed Ring Bus (HSRB [SAE87]) all use special frame types called tokens to grant access permissions. The Dual Queue Dual Bus (DQDB [IEEE89]) uses each of its two busses to carry access requests for the other bus.
Reference: [BERN71] <author> Bernstein, A. J. and Sharp, J. C., </author> <title> A Policy-Driven Scheduler for a TimeSharing System, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 14, No. 2, </volume> <pages> pp. </pages> <month> 74-78 (February </month> <year> 1971). </year>
Reference-contexts: The importance abstraction is novel in that it uses a function-driven approach for describing the scheduling policy. There have been previous function-driven approaches, in particular those of <ref> [BERN71] </ref>, [RUSC77], and [JENS85]; the importance abstraction is unique in its use of functions to describe how important a task is to the attainment of the system goal, and its use of these descriptions to perform analysis of the schedules produced. <p> The 41 computation time of this server is replenished each period. Thus, the response time for aperiodic tasks is minimized while the schedulability of the hard real-time periodic tasks is maintained. 3.2. Survey of Function-Based Scheduling Techniques Bernstein and Sharp <ref> [BERN71] </ref> recognized that service given to a class of tasks could be controlled using a function such that various service profiles could be effected as the tasks grew older. Priority in this scheme is related to the difference between the functions projected service and the service actually attained. <p> The value functions did not directly drive the scheduling decisions in Jensens model; rather they were used mostly as a metric for comparing the performance of other scheduling algorithms. Below we survey these three techniques for using functions for making scheduling decisions. 3.2.1. Policy Functions Bernstein and Sharp, in <ref> [BERN71] </ref>, theorized that a scheduling algorithm that keeps track of the resource count of each task and orders the tasks according to how far a task is from the expected resource count at that tasks age would provide the specified level of service for each task. <p> Furthermore, an algorithm is called time-invariant if the difference between the priorities of any two tasks does not change as long as neither task receives service. Included in this class of algorithms is the policy-driven scheduling algorithms of <ref> [BERN71] </ref>. Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 3.2.2.
Reference: [BIYA88] <author> Biyabani, S. R., Stankovic, J. A. and Ramamritham, K., </author> <title> The Integration of Deadline and Criticalness in Hard Real-Time Scheduling, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <pages> pp. 152-160 (December 6-8, </pages> <year> 1988). </year>
Reference-contexts: Biyabani et al explore this kind of bilevel ranking in <ref> [BIYA88] </ref>. They offer a new sematic for the term guarantee that reects the uncertainty of the future task set composition.
Reference: [CCITT84] <author> Comit Consultatif International de Tlgraphique et Tlphonique, </author> <title> The X.25 Packet Layer Protocol, </title> <year> 1984. </year>
Reference-contexts: Some network layer protocols provide a service that is connectionless while some establish and maintain a connection between each endpoint and all of the routers along the path. The Internet Protocol (IP [DARPA81a]) is an example of the former; X.25 <ref> [CCITT84] </ref> is an example of the latter. An interesting new idea is presented in the Xpress Transfer Protocol (XTP [PEI92]), where the network layer is combined with the transport layer into a transfer layer.
Reference: [CHEN88] <author> Cheng, S., Stankovic, J. A. and Ramamrithram, K., </author> <title> Scheduling Algorithms for Hard Real-Time Systems A Brief Survey, in Hard Real-Time Systems, </title> <editor> Stankovic, J. A. (ed.), </editor> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1988. </year>
Reference: [CHER88] <author> Cheriton, D. R., VMTP: </author> <title> Versatile Message Transaction Protocol, Protocol Specification Preliminary Version 0.7, </title> <institution> Computer Science Department, Stanford University, </institution> <month> February 22, </month> <year> 1988. </year>
Reference-contexts: TCP takes this approach. NETBLT [CLAR87] uses a technique called rate-based ow control, where two parameters, burst and rate, regulate the ow of packets: a burst of packets is sent at a specified rate. VMTP <ref> [CHER88] </ref> also uses rate-based ow control, but instead of burst and rate, it uses an interpacket gap.
Reference: [CLAR87] <author> Clark, D. D., Lambert, M. L. and Zhang, L., NETBLT: </author> <title> A Bulk Data Transfer Protocol, Network Information Center RFC 998, </title> <booktitle> SRI International, </booktitle> <month> March </month> <year> 1987. </year>
Reference-contexts: The ow control procedure can use the error reports to Stations Network Network Segment A Network Segment B Network Segment C Segment Routers 105 adjust the number of packets owing from the sending endpoint. TCP takes this approach. NETBLT <ref> [CLAR87] </ref> uses a technique called rate-based ow control, where two parameters, burst and rate, regulate the ow of packets: a burst of packets is sent at a specified rate. VMTP [CHER88] also uses rate-based ow control, but instead of burst and rate, it uses an interpacket gap.
Reference: [CONW67] <author> Conway, R. W., Maxwell, W. L. and Miller, L. W., </author> <title> Theory of Scheduling, </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <address> Reading, Massachusetts, </address> <year> 1967. </year>
Reference-contexts: In general, a scheduler must weigh all of the constraints and all of the environment parameters when making scheduling decisions. 2.2.1.3. Operations A task is comprised of the concatenation of one or more atomic units of action called operations <ref> [CONW67] </ref>. Since ow of control, which normally proceeds from one operation to the next concatenated operation, may be altered with conditional branching, there may be a large number of possible orderings of the operations.
Reference: [DARPA81a] <author> Postel, J., ed., </author> <title> Internet Protocol - DARPA Internet Program Protocol Specification, </title> <type> RFC 791, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: One approach to providing several levels of service in a communication subsystem starts with two basic levels: a normal service and an expedited service. In the Transmission Control Protocol (TCP, <ref> [DARPA81a] </ref>) and the ISO Transport Protocol Class 4 (TP4, [ISO8073]), the normal service is for common communication, while the expedited service bypasses ow control constraints as well as assuming a higher priority in processing. <p> Any MAC address translation required (say, from Ethernet to FDDI) is performed by the router. Some network layer protocols provide a service that is connectionless while some establish and maintain a connection between each endpoint and all of the routers along the path. The Internet Protocol (IP <ref> [DARPA81a] </ref>) is an example of the former; X.25 [CCITT84] is an example of the latter. An interesting new idea is presented in the Xpress Transfer Protocol (XTP [PEI92]), where the network layer is combined with the transport layer into a transfer layer.
Reference: [DARPA81b] <author> Postel, J., ed., </author> <title> Transmission Control Protocol - DARPA Internet Program Protocol Specification, </title> <type> RFC 793, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference: [DEMP92] <author> Dempsey, B. J., Strayer, W. T., and Weaver, A. C., </author> <title> Adaptive Error Control for Multimedia Data Transfers, </title> <booktitle> Proceedings of the International Workshop 145 on Advanced Communications and Applications for High Speed Networks, </booktitle> <address> Munich, Germany, March 16-19, </address> <year> 1992. </year>
Reference-contexts: By analogy, a fire truck is expedited since it may ignore traffic signals, while a fire truck with a plow on the front is preemptive since, with the plow, it can also push cars out of the way. Dempsey et al., in <ref> [DEMP92] </ref>, explore the idea of allowing a user-specified degree of reliability such as may be useful in time-constrained communications where progress is more important than completeness. <p> The importance functions do, however, provide a mechanism for describing how important certain individual packets in a message stream are, and through that levels of service can be established. As cited previously, Dempsey et al. <ref> [DEMP92] </ref> describe a service where the error recovery procedures are governed by the density of errors allowable by the application.
Reference: [DHAL78] <author> Dhall, S. K. and Liu, C. L., </author> <title> On a Real-Time Scheduling Problem, </title> <journal> Operations Research, </journal> <volume> Vol. 26, No. 1, </volume> <pages> pp. </pages> <month> 127-140 (January-February </month> <year> 1978). </year>
Reference-contexts: Rate Monotonic Theory In 1973, Liu and Layland introduced rate monotonic scheduling theory [LIU73] as a method for scheduling many periodic tasks on a single processor such that the scheduling algorithm used to do this was optimal. Dhall and Liu extended this work into the multiprocessor environment in <ref> [DHAL78] </ref>. The following discussion is drawn largely from Sha and Goodenough [SHA90], who present an excellent overview of the theory and recent 37 extensions which include aperiodic and sporadic tasks, as well as non-independent task relationships.
Reference: [FERR90] <author> Ferrari, D., </author> <title> Client Requirements for Real-Time Communication Services, </title> <journal> IEEE Communications Magazine, </journal> <volume> Vol. 28, No. 11, </volume> <pages> pp. </pages> <month> 65-72 (November </month> <year> 1990). </year>
Reference-contexts: Communication protocols endeavor through offered levels of service to guarantee certain aspects of the message exchanges. Ferrari <ref> [FERR90] </ref> compares these guarantees to a contract established between the service user and the service provider: if the user meets certain conditions concerning its service requests, the communication subsystem will provide the level of service required.
Reference: [GAIT90] <author> Gaitonde, S. S., Jacobson, D. W. and Pohm, A. V., </author> <title> Bounding Delay on a Multifarious Token Ring Network, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 33, No. 1, </volume> <pages> pp. </pages> <month> 20-28 (January </month> <year> 1990). </year>
Reference-contexts: Yet static priority is not responsive to the dynamic nature of the environment, nor does it represent time constraints appropriately. Messages that spend a 96 significant portion of their transfer time in queues within stations may benefit from a dynamic priority scheme. For example, Gaitonde et al., in <ref> [GAIT90] </ref>, explored changing priorities on certain messages as those messages aged in the communication subsystem, and found this to improve service. Finally, the additional protocol processing required to use priorities may cause significant overhead.
Reference: [GARE79] <author> Garey, M. R. and Johnson, D. S., </author> <title> Computers and Intractability, A Guild to the Theory of NP- Completeness, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Inefficient algorithms have solutions which 32 are bounded by an exponential on the input size, and are merely variations on exhaustive search. Polynomial time algorithms, on the other hand, are made possible only through some deeper insight into the structure of the problem <ref> [GARE79] </ref>. Undecidable problems are ones for which no algorithm will ever exist, even an exponential one. NP-complete problems are problems for which no polynomial time algorithm yet exists, and for which the discovery of one would imply that many other similarly difficult problems also have polynomial time algorithms. <p> Usually a scheduling problem must be so restricted in order to find an efficient algorithm that its solution is virtually useless in a real-world sense. The following basic scheduling problem illustrates this point. The Sequencing on One Processor problem <ref> [GARE79] </ref> is posed as a set T of tasks where each task in T has the following characteristics: a length, an arrival time, and a deadline.
Reference: [GOOD88] <author> Goodenough, J. B. and Sha, L., </author> <title> The Priority Ceiling Protocol: A Method for Minimizing the Blocking of High-Priority Ada Tasks, </title> <type> Technical Report CMU/SEI-88-SR-4, </type> <institution> Carnegie-Mellon University Software Engineering Institute, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: may do its best to provide service to the highest priority task when the decision epoch arrives, but there is nothing that the algorithm can do to provide service to a newly arriving higher priority task if the server is currently busy until the current task has completed. (Priority inversion <ref> [GOOD88] </ref> is the term used to describe a system which allows high priority tasks to wait while lower priority tasks are being serviced.) The quantum-oriented decision mode makes decisions every fixed quantum of time unless a task completes or a newly arriving task finds the server empty before the next decision <p> The priority ceiling protocol minimizes the blocking of high priority tasks by guaranteeing that such a task will be blocked by at most one critical region of any lower priority task <ref> [GOOD88, LOCK88] </ref>. The priority ceiling of a critical region is defined to be the highest priority of all the tasks that may lock on that region.
Reference: [IEEE85a] <institution> Institute of Electrical and Electronics Engineers, IEEE Standard 802.4 Token-Passing Bus Access Method and Physical Layer Specifications, </institution> <year> 1985. </year>
Reference-contexts: Ethernet [METC76], and its standardized counterpart, IEEE 802.3 [IEEE85c], passively monitor the medium to determine when access can be granted. Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol. Other protocols are more active in granting access: IEEE 802.4 Token Bus <ref> [IEEE85a] </ref>, IEEE 802.5 Token Ring [IEEE85b], ANSI Fiber Distributed Data Interface (FDDI [ANSI86]), and the SAE High Speed Ring Bus (HSRB [SAE87]) all use special frame types called tokens to grant access permissions.
Reference: [IEEE85b] <author> Institute of Electrical and Electronics Engineers, </author> <title> IEEE Standard 802.5 Token Ring Access Method and Physical Layer Specifications, </title> <year> 1985. </year>
Reference-contexts: Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol. Other protocols are more active in granting access: IEEE 802.4 Token Bus [IEEE85a], IEEE 802.5 Token Ring <ref> [IEEE85b] </ref>, ANSI Fiber Distributed Data Interface (FDDI [ANSI86]), and the SAE High Speed Ring Bus (HSRB [SAE87]) all use special frame types called tokens to grant access permissions. The Dual Queue Dual Bus (DQDB [IEEE89]) uses each of its two busses to carry access requests for the other bus.
Reference: [IEEE85c] <author> Institute of Electrical and Electronics Engineers, </author> <title> IEEE Standard 802.3 Carrier Sense Multiple Access with Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications, </title> <year> 1985. </year>
Reference-contexts: MAC Physical Medium MAC MAC 101 Since each stations MAC protocol must work in concert with all other MAC protocols to provide an access policy, some mechanism independent of the data transfer must allow these MAC protocols to communicate. Ethernet [METC76], and its standardized counterpart, IEEE 802.3 <ref> [IEEE85c] </ref>, passively monitor the medium to determine when access can be granted. Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol.
Reference: [IEEE89] <institution> Institute of Electrical and Electronics Engineers, IEEE 802.6 Proposed Standard: Distributed Queue Dual Bus Metropolitan Area Network, </institution> <month> November 30, </month> <year> 1989. </year>
Reference-contexts: The Dual Queue Dual Bus (DQDB <ref> [IEEE89] </ref>) uses each of its two busses to carry access requests for the other bus. Two other access methods include register insertion, where messages are inserted onto the medium via buffers called registers, and slotting, where slots for transmitting are assigned to stations.
Reference: [ISO7498] <author> International Organization for Standardization, </author> <title> Information Processing Systems Open Systems Interconnection - Basic Reference Model, Draft International Standard 7498, </title> <month> October </month> <year> 1984. </year>
Reference-contexts: Again, a consistent approach is required before any statement about the service can be made. 8.2. The ISO Reference Model In 1984 the International Organization for Standardization (ISO) presented the Open Systems Interconnect (OSI) Reference Model <ref> [ISO7498] </ref>, shown in Figure 8.2), and this model has since become the means by which the division of functionality and service are described within a communication subsystem. From bottom to top, the physical layer defines how bits are represented on the physical medium.
Reference: [ISO8073] <author> International Organization for Standardization, </author> <title> Information Processing Systems - Open Systems Interconnection - Transport Protocol Specification, Draft International Standard 8073, </title> <month> July </month> <year> 1986. </year>
Reference-contexts: One approach to providing several levels of service in a communication subsystem starts with two basic levels: a normal service and an expedited service. In the Transmission Control Protocol (TCP, [DARPA81a]) and the ISO Transport Protocol Class 4 (TP4, <ref> [ISO8073] </ref>), the normal service is for common communication, while the expedited service bypasses ow control constraints as well as assuming a higher priority in processing.
Reference: [JENS85] <author> Jensen, E. D., Locke, C. D. and Tokuda, H., </author> <title> A Time Driven Scheduling Model for Real-Time Operating Systems, </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 112-122 (December 3-6, </pages> <year> 1985). </year> <month> 146 </month>
Reference-contexts: The importance abstraction is novel in that it uses a function-driven approach for describing the scheduling policy. There have been previous function-driven approaches, in particular those of [BERN71], [RUSC77], and <ref> [JENS85] </ref>; the importance abstraction is unique in its use of functions to describe how important a task is to the attainment of the system goal, and its use of these descriptions to perform analysis of the schedules produced. The scheduler within the importance abstraction is simple and universal. <p> Ruschitzka and Fabry [RUSC77] used functions to describe the priority of a task directly. Within this model, various scheduling algorithms could be emulated by using an appropriate priority function. Jensen et al. <ref> [JENS85] </ref> used a function to profile a tasks value to the system for completing at that time. The value functions did not directly drive the scheduling decisions in Jensens model; rather they were used mostly as a metric for comparing the performance of other scheduling algorithms. <p> Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 3.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling <ref> [JENS85, LOCK86, TOKU87, WEND88] </ref> is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The optimal schedule, therefore, arranges the tasks such that they complete at times which maximize the sum of their values to the system. Jensen et al. use this value sum as a metric for comparing the effectiveness of conventional scheduling algorithms. It was observed in <ref> [JENS85] </ref> that task scheduling in real-time systems almost always uses some simple algorithm, like fixed priority, first in first out, or round robin. Often the 45 time-criticalness of the tasks is represented by a point in time called a deadline. <p> Since the importance abstraction is based on sets of functions, certain classes of functions, or families, can be expressed in general parametric forms where specific values are assigned according to the application. Jensen, in <ref> [JENS85] </ref>, used a six parameter function to describe value functions.
Reference: [KLEI75] <author> Kleinrock, L., </author> <title> Queueing Systems-Volume 1: Theory, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: may a task expect to wait before being served, (2) how many tasks will be serviced before a newly arrived task is served, (3) what fraction of some time interval will the server set be busy or idle, and (4) how long will the intervals of continual busy work extend <ref> [KLEI75] </ref>. Random arrivals are not classified by identifying a period or an interarrival time, although it is possible that some tasks could have such a relationship. Whereas deterministic arrivals are required for static scheduling, in general the arrival of a task is not known until the task actually arrives.
Reference: [LEHO87] <author> Lehoczky, J. P., Sha, L. and Strosnider, J. K., </author> <title> Enhanced Aperiodic Responsiveness in Hard Real-Time Environments, </title> <booktitle> Proceedings of the 1987 IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <pages> pp. 261-270 (December 1-3, </pages> <year> 1987). </year>
Reference-contexts: If an aperiodic task arrives just after the polling time, the task must wait until the next polling time. In both of these cases the response time for aperiodic tasks suffers unnecessarily due to naive treatment of the task set. The Deferrable Server algorithm <ref> [LEHO87, SPRU88] </ref> is designed to provide aperiodic tasks with a low response time without jeopardizing the periodic tasks.
Reference: [LIU73] <author> Liu, C. L. and Layland, J. W., </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. </pages> <month> 46-61 (January </month> <year> 1973). </year>
Reference-contexts: For example, the rate monotonic scheduling algorithm <ref> [LIU73] </ref> uses the period of each task to determine the tasks ranking, whether or not this is appropriate for each 9 individual task or for the system as its behavior evolves over time. The result is that schedules may not follow naturally from the task attributes and system characteristics. 1.1. <p> The importance abstraction extends this work by also using the functional representation of the tasks importance to perform analysis on the nature of the schedules produced. 3.1. Rate Monotonic Theory In 1973, Liu and Layland introduced rate monotonic scheduling theory <ref> [LIU73] </ref> as a method for scheduling many periodic tasks on a single processor such that the scheduling algorithm used to do this was optimal. Dhall and Liu extended this work into the multiprocessor environment in [DHAL78]. <p> Meeting Deadlines Since nearest deadline first is a static ranking, the result given in Eq 6.11 also applies for schedules imposed using importance functions emulating the nearest deadline first algorithm. Such a set of importance functions is given in Eq 5.3. We know from <ref> [LIU73] </ref> that, if deadlines can be met for a given task set, they will be met using the nearest deadline first policy. <p> Unfortunately, the utilization factor proof in <ref> [LIU73] </ref> only holds for periodic task (a counterexample: task 1 has arrival time a 1 = 5, work required w 1 = 10, deadline d 1 = 15, and task 2 has a 2 = 15, w 2 = 10, d 2 = 25; the utilization factor is 2, yet the
Reference: [LOCK86] <author> Locke, C. D., </author> <title> Best-Effort Decision Making for Real Time Scheduling, </title> <institution> Dissertation (Computer Science Report No. CMU-Computer Science-86-134), Carnegie- Mellon University Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 3.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling <ref> [JENS85, LOCK86, TOKU87, WEND88] </ref> is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in <ref> [LOCK86] </ref>. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in [TOKU87] and [WEND88]. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation Exponential Decay Hard Deadline Parabolic Decay Window of Opportunity Deadline 47 impractical on a uniprocessor system.
Reference: [LOCK88] <author> Locke, C. D. and Goodenough, J. B., </author> <title> A Practical Application of the Ceiling Protocol in a Real-Time System, </title> <type> Technical Report CMU/SEI-88-SR-3, </type> <institution> Carnegie- Mellon University Software Engineering Institute, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: The priority ceiling protocol minimizes the blocking of high priority tasks by guaranteeing that such a task will be blocked by at most one critical region of any lower priority task <ref> [GOOD88, LOCK88] </ref>. The priority ceiling of a critical region is defined to be the highest priority of all the tasks that may lock on that region.
Reference: [METC76] <author> Metcalfe, R. M. and Boggs, D. R., </author> <title> Ethernet: Distributed Packet Switching for Local Computer Networks, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 19, No. 7, </volume> <pages> pp. 395-404, </pages> <month> (July </month> <year> 1976). </year>
Reference-contexts: MAC Physical Medium MAC MAC 101 Since each stations MAC protocol must work in concert with all other MAC protocols to provide an access policy, some mechanism independent of the data transfer must allow these MAC protocols to communicate. Ethernet <ref> [METC76] </ref>, and its standardized counterpart, IEEE 802.3 [IEEE85c], passively monitor the medium to determine when access can be granted. Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol.
Reference: [PEDE88] <author> Peden, J. H. and Weaver, A. C., </author> <title> The Utilization of Priorities on Token Ring Networks, </title> <booktitle> Proceedings of the 13th Conference on Local Computer Networks, </booktitle> <address> Minneapolis, </address> <publisher> Minnesota, </publisher> <pages> pp. 472-478 (October 10-12, </pages> <year> 1988). </year>
Reference-contexts: Employing prioritization mechanisms often wastes bandwidth as the stations on the network try to determine which among them has the highest priority messages. Peden has shown that average delay increases and overall throughput decreases when a priority scheme is implemented <ref> [PEDE88] </ref>. The need to order messages must outweigh this drawback for priorities, or any discrimination technique, to be effective. Consequently, in current practice there is no overall consistent end-to-end view of priority.
Reference: [PEI92] <author> Protocol Engines, Inc., </author> <title> XTP Protocol Definition, </title> <journal> Rev 3.6, </journal> <pages> PEI 92-10, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The Internet Protocol (IP [DARPA81a]) is an example of the former; X.25 [CCITT84] is an example of the latter. An interesting new idea is presented in the Xpress Transfer Protocol (XTP <ref> [PEI92] </ref>), where the network layer is combined with the transport layer into a transfer layer. Here the network layer functionality exhibits behavior of both the connectionless and connection-oriented approaches since, while logically separate, an XTP connection and the path supporting the connection share the same packet-switched mechanisms for their maintenance.
Reference: [RUSC77] <author> Ruschitzka, M. and Fabry, R. S., </author> <title> A Unifying Approach to Scheduling, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 20, No. 7, </volume> <pages> pp. </pages> <month> 469-477 (July </month> <year> 1977). </year>
Reference-contexts: The importance abstraction is novel in that it uses a function-driven approach for describing the scheduling policy. There have been previous function-driven approaches, in particular those of [BERN71], <ref> [RUSC77] </ref>, and [JENS85]; the importance abstraction is unique in its use of functions to describe how important a task is to the attainment of the system goal, and its use of these descriptions to perform analysis of the schedules produced. The scheduler within the importance abstraction is simple and universal. <p> A scheduler implementing a first come, first served algorithm may make decisions continuously, but this would be unnecessary. Ruschitzka and Fabry <ref> [RUSC77] </ref> identify four decision modes which characterize when a new decision may be made. Each decision mode is progressively more general than the last, and each previous mode is a proper subset of the next. The four modes are nonpreemptive, quantum-oriented, preemptive, and processor sharing. <p> Priority in this scheme is related to the difference between the functions projected service and the service actually attained. Ruschitzka and Fabry <ref> [RUSC77] </ref> used functions to describe the priority of a task directly. Within this model, various scheduling algorithms could be emulated by using an appropriate priority function. Jensen et al. [JENS85] used a function to profile a tasks value to the system for completing at that time. <p> One such function proposed uses a curved portion in a region starting with the tasks activation to give a task a limited amount of rapid service, followed by a linear portion for a more constant rate of service. Ruschitzka and Fabry <ref> [RUSC77] </ref> extend the notion using functions for scheduling by introducing the universal scheduling system (USS) as a generalized scheduling framework to support arbitrary scheduling algorithms. There are three parts to the specification of a scheduling algorithm within the USS: the decision mode, the priority function, and an arbitration rule. <p> There is an infinite class of importance functions for which this is true; we offer the most obvious: 1. The concept of creating a framework within which to emulate other scheduling policies was first presented by Ruschitzka and Fabry in <ref> [RUSC77] </ref> with the Universal Scheduling System. 58 Consider four tasks with arrival times as follows: Eq 5.2 Let each task be associated with an importance function as defined above. Assume that each task requires 3 time units to finish.
Reference: [SAE87] <institution> Society of Automotive Engineers, SAE AS4074.2 High Speed Ring Bus, </institution> <note> Final draft Standard, </note> <month> June </month> <year> 1987. </year>
Reference-contexts: Since this method can produce collisions, backoffs and retry mechanisms are included within the protocol. Other protocols are more active in granting access: IEEE 802.4 Token Bus [IEEE85a], IEEE 802.5 Token Ring [IEEE85b], ANSI Fiber Distributed Data Interface (FDDI [ANSI86]), and the SAE High Speed Ring Bus (HSRB <ref> [SAE87] </ref>) all use special frame types called tokens to grant access permissions. The Dual Queue Dual Bus (DQDB [IEEE89]) uses each of its two busses to carry access requests for the other bus.
Reference: [SHA86] <author> Sha, L., Lehoczky, J. and Rajkumar, R., </author> <title> Solutions for Some Practical Problems in Prioritized Preemptive Scheduling, </title> <booktitle> Proceedings of the 1986 IEEE Real-Time Systems Symposium, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pp. </pages> <month> 181- 191 (December 2-4, </month> <year> 1986). </year>
Reference-contexts: When tasks exceed their estimated 39 execution times, a transient overload occurs which may cause some tasks to miss their deadlines. Yet if tasks are prioritized according to their periods, some critical tasks may miss their deadlines if their periods are too long. The period transformation technique <ref> [SHA86] </ref> is used to ensure that highly critical tasks are treated with higher priorities even if they have longer periods. The priority of a critical task can be raised by treating it like a task with a shorter period.
Reference: [SHA87] <author> Sha, L., Rajkumar, R. and Lehoczky, J. P., </author> <title> Priority Inheritance Protocols: An Approach to Real-Time Synchronization, </title> <type> Technical Report CMU-Computer Science-87-181, </type> <institution> Carnegie-Mellon University, Computer Science Department, </institution> <year> 1987. </year>
Reference-contexts: In certain cases the priority inversion can be unbounded. The priority inheritance protocol attempts to limit the amount of priority inversion by allowing a server task to inherit the priority of its highest priority client <ref> [SHA87] </ref>. A central theorem in priority inheritance specifies a sufficient worst-case 40 condition that characterizes the rate-monotonic schedulability of a given set of periodic tasks.
Reference: [SHA90] <author> Sha, L. and Goodenough, J. B., </author> <title> Real-Time Scheduling Theory and Ada, </title> <journal> IEEE Computer, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pp. </pages> <month> 53-62 (April </month> <year> 1990). </year> <month> 147 </month>
Reference-contexts: Dhall and Liu extended this work into the multiprocessor environment in [DHAL78]. The following discussion is drawn largely from Sha and Goodenough <ref> [SHA90] </ref>, who present an excellent overview of the theory and recent 37 extensions which include aperiodic and sporadic tasks, as well as non-independent task relationships. <p> This variation is also optimal with respect to meeting deadlines among all algorithms where priority assignment may be made during the run of the system. In the deadline driven scheduling algorithm, the priorities are assigned according to which tasks deadline is nearest rather than by period length. In <ref> [SHA90] </ref>, Sha and Goodenough discuss the use of rate monotonic theory for real-time scheduling in the Ada tasking model.
Reference: [SPRU88] <author> Sprunt, B., Lehoczky, J. and Sha, L., </author> <title> Exploiting Unused Periodic Time For Aperiodic Service Using The Extended Priority Exchange Algorithm, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama (December 6-8, </address> <year> 1988). </year>
Reference-contexts: If an aperiodic task arrives just after the polling time, the task must wait until the next polling time. In both of these cases the response time for aperiodic tasks suffers unnecessarily due to naive treatment of the task set. The Deferrable Server algorithm <ref> [LEHO87, SPRU88] </ref> is designed to provide aperiodic tasks with a low response time without jeopardizing the periodic tasks.
Reference: [STRA91] <author> Strayer, W. T., </author> <title> A Study of Preemptable vs. Non-Preemptable Token Reservation Access Protocols, </title> <journal> Computer Communication Review, </journal> <volume> Vol. 21, No. </volume> <pages> 2, </pages> <note> pp 71-80 (April 1991). </note>
Reference-contexts: If the second message is actually of higher priority than the first message, a priority inversion occurs. (We examined the effect on priority inversion and performance of having a preemptable MAC service in <ref> [STRA91] </ref>.) In general protocols trade some priority inversion for reduced complexity, efficiency, and performance. Fourth, priority schemes in most extant standards are staticthat is, once assigned, the priority value is unchangeable.
Reference: [TOKU87] <author> Tokuda, H., Wendorf, J. W. and Wang, H., </author> <title> Implementation of a Time-Driven Scheduler for Real Time Operating Systems, </title> <booktitle> Proceedings of the 1987 IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <pages> pp. 271-280 (December 1-3, </pages> <year> 1987). </year>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 3.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling <ref> [JENS85, LOCK86, TOKU87, WEND88] </ref> is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in [LOCK86]. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in <ref> [TOKU87] </ref> and [WEND88]. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation Exponential Decay Hard Deadline Parabolic Decay Window of Opportunity Deadline 47 impractical on a uniprocessor system.
Reference: [TOKU89] <author> Tokuda, H., Mercer, C. W. and Ishikawa, Y., </author> <title> The ARTS Distributed Real-Time Kernel and its Toolset, </title> <type> Report, </type> <year> 1989. </year>
Reference: [WEND88] <author> Wendorf, J. W., </author> <title> Implementation and Evaluation of a Time-Driven Scheduling Processor, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <pages> pp. 172-180 (December 6-8, </pages> <year> 1988). </year> <month> 148 </month>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 3.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling <ref> [JENS85, LOCK86, TOKU87, WEND88] </ref> is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in [LOCK86]. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in [TOKU87] and <ref> [WEND88] </ref>. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation Exponential Decay Hard Deadline Parabolic Decay Window of Opportunity Deadline 47 impractical on a uniprocessor system.
References-found: 41

