URL: http://www.cse.psu.edu/~furer/Papers/splay-soda.ps
Refering-URL: http://www.cse.psu.edu/~furer/Papers/bib.html
Root-URL: http://www.cse.psu.edu
Title: Randomized Splay Trees  
Author: Martin Furer 
Abstract: The performance of the original version of the splay tree algorithm has been unchallenged for over a decade. We propose three randomized versions with better upper bounds on the expected running times (by constant factors). The improvements are particularly strong if the number of insertions is relatively small. All expectations are taken over the coin tosses of the randomized algorithms for worst case inputs. Hence slow running times are very unlikely for any request sequence. Algorithm A improves the expected running time, but could be very slow (with tiny probability). Algorithm B shows that without any loss in the original amortized running time, the expected running time can still be improved by a constant percentage. Algorithm C has the same efficient expected running time as Algorithm A, while its (worst case) amortized running time deteriorates only by a constant factor compared to standard deterministic splaying. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Albers and M. Karpinski. </author> <title> Randomized splay trees. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: The expected number steps per Search operation is at most 2 (pR + 1) log n + O (1) The version of this algorithm corresponding to full splaying (hence with a factor of 3 instead of 2) has been found independently by Albers and Karpinski <ref> [1] </ref>. Here, the probability p (with 0 &lt; p 1) is an arbitrary positive constant. The Delete operation is handled within the same time, while Insert requires an additional (R + 1=p) log n + O (1) steps.
Reference: [2] <author> B. Schoenmakers. </author> <title> A systematic analysis of splaying. </title> <journal> Information Processing Letters, </journal> <volume> 45(1) </volume> <pages> 41-50, </pages> <year> 1993. </year>
Reference-contexts: For k &gt; 2, the order, in which these independent edge pairs are treated, does not affect the outcome. Therefore, the more convenient top down method can be used. 3 Conclusion and Open Problems For other work, investigating several variants of splaying, the reader is referred to <ref> [4, 2, 5] </ref>. The interesting open problems ask whether the new algorithms can shed any new light on the Dynamic Optimality Conjecture [3].
Reference: [3] <author> D.D. Sleater and R.E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> J. of the ACM, </journal> <volume> 32(3) </volume> <pages> 652-686, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Splay trees <ref> [3] </ref> are the standard examples of self-adjusting binary search trees. They have great advantages over explicitly balanced trees, as they automatically adapt to various nonuniform access patterns. On the other hand, they also have an obvious disadvantage. <p> With the help of just one parameter, we can define a very natural and stable model of computation which is suitable for this task. The time unit employed by Sleator and Tarjan <ref> [3] </ref> is the obvious one for their particular algorithm. One step fl Research supported in part by NSF Grant CCR-9700053. y Department of Computer Science and Engineering, Pennsyl-vania State University, University Park, PA 16802, USA. <p> Notation 1.1. We denote the total number of operations by m, while n is the number of Insert operations. Hence, n is an upper bound on the size of the tree. The original paper of Sleator and Tarjan <ref> [3] </ref> not only proposes the standard (full) spaying, but also contains another version called semisplaying, where in the zig-zig case only the rotation around the upper edge is performed. <p> The interesting open problems ask whether the new algorithms can shed any new light on the Dynamic Optimality Conjecture <ref> [3] </ref>. In particular, are the Dynamic Optimality Conjectures for the various algorithms equivalent? Except for the implication of dynamic optimality of Algorithm A from the dynamic optimality of the corresponding version of the original semisplaying algorithm, the problems are open.
Reference: [4] <author> Ashok Subramanian. </author> <title> An explanation of splaying. </title> <journal> Journal of Algorithms, </journal> <volume> 20(3) </volume> <pages> 512-525, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: For k &gt; 2, the order, in which these independent edge pairs are treated, does not affect the outcome. Therefore, the more convenient top down method can be used. 3 Conclusion and Open Problems For other work, investigating several variants of splaying, the reader is referred to <ref> [4, 2, 5] </ref>. The interesting open problems ask whether the new algorithms can shed any new light on the Dynamic Optimality Conjecture [3].
Reference: [5] <author> R. Sundar. Twists, </author> <title> turns, cascades, deque conjecture, and scanning theorem. </title> <booktitle> In IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 555-559, </pages> <year> 1989. </year>
Reference-contexts: For k &gt; 2, the order, in which these independent edge pairs are treated, does not affect the outcome. Therefore, the more convenient top down method can be used. 3 Conclusion and Open Problems For other work, investigating several variants of splaying, the reader is referred to <ref> [4, 2, 5] </ref>. The interesting open problems ask whether the new algorithms can shed any new light on the Dynamic Optimality Conjecture [3].
References-found: 5

