URL: file://ftp.cs.cornell.edu/pub/simlab/tech-reports/imacs94.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/SimLab/papers.by.project.html
Root-URL: 
Email: rick@cs.cornell.edu  ramesh@dri.cornell.edu  
Title: Physical Elements: Using chains and cell complexes to solve multiple domain PDE problems  
Author: Richard S. Palmer Palghat S. Ramesh 
Address: Ithaca, NY 14853  Ithaca, NY 14853  
Affiliation: Department of Computer Science Cornell University  Xerox Corp., Design Research Institute Cornell University  
Abstract: A physical element is an object-oriented definition of a physical phenomenon, which is parameterized by a cell a simple region of space. Physical elements may be systematically applied to a region of space that has been decomposed by a cell complex to create an executable chain model of the behavior in the region. A physical element represents behavior in terms of algebraic-topological constraints on the quantities of the the problem. This enables physical systems to be expressed in algebraic expressions written in a well established and understood mathematical language, which, as it turns out, has remarkable computational applications and properties as well. When a phenomenon is represented in terms of constraints on standard quantities of physics, such as mass, momentum, energy, charge, and so forth, interactions between different phenomena are easily expressed, facilitating the construction of coupled-problem simulators. This article describes how these tools have been used to create compatible models of linear elasticity and inviscid, compressible fluid flow, and how these were combined to create a simulator for a coupled elasticity/fluid problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Paul Bamberg and Schlomo Sternberg. </author> <title> A Course in Mathematics for Students of Physics. </title> <address> Cambridge, Cambridge, England, 1988,1990. </address>
Reference-contexts: interactions between different phenomena (e.g. at an interface), boundary conditions, etc. 2.3 An object-oriented physical systems simulation toolkit The chain models formalism provides a framework for creating an object-oriented simulation environment, where a physical element defines a class for modeling the desired behavior, which may then be instantiated 1 See <ref> [5, 1, 4, 9] </ref> for the algebraic-topology definitions used in the chain models formalism, e.g., cell, complex, chain, etc.. at any cell of the appropriate type to create an executable model of the physics in that cell.
Reference: [2] <author> Franc~ois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The reasons include the inherent complexity of coupled systems as well as the fact that existing simulators have generally been conceived and implemented for a single problem domain. While implementations of multiple domain lumped parameter frameworks exist <ref> [10, 2, 7] </ref>, little has been done in the area of computational frameworks for mixed domain distributed parameter systems. This article describes how a general purpose modeling paradigm, called "chain models," has been used to create a simulator for a simple model of an exhaust nozzle in a jet engine.
Reference: [3] <author> C. A. J. Fletcher. </author> <title> Computational Techniques for Fluid Dynamics, </title> <booktitle> volume 1 and 2. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The 1-chain F = fF ; F u ; F v ; F e g, represents the net fluid flux across the 1-cells. Chain constraints are defined to capture the semantics of the Euler equations, including computational aspects <ref> [3] </ref>. For instance, conservation of mass, momentum, and energy is enforced with the coboundary operator ffi: @q @t = ffiF , while a constitutive equation relates q and F for inviscid, compressible flow.
Reference: [4] <author> John G. Hocking and Gail S. Young. </author> <title> Topology. </title> <publisher> Dover, </publisher> <address> New York, </address> <year> 1961. </year>
Reference-contexts: interactions between different phenomena (e.g. at an interface), boundary conditions, etc. 2.3 An object-oriented physical systems simulation toolkit The chain models formalism provides a framework for creating an object-oriented simulation environment, where a physical element defines a class for modeling the desired behavior, which may then be instantiated 1 See <ref> [5, 1, 4, 9] </ref> for the algebraic-topology definitions used in the chain models formalism, e.g., cell, complex, chain, etc.. at any cell of the appropriate type to create an executable model of the physics in that cell.
Reference: [5] <author> James R. Munkres. </author> <title> Elements of Algebraic Topology. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: interactions between different phenomena (e.g. at an interface), boundary conditions, etc. 2.3 An object-oriented physical systems simulation toolkit The chain models formalism provides a framework for creating an object-oriented simulation environment, where a physical element defines a class for modeling the desired behavior, which may then be instantiated 1 See <ref> [5, 1, 4, 9] </ref> for the algebraic-topology definitions used in the chain models formalism, e.g., cell, complex, chain, etc.. at any cell of the appropriate type to create an executable model of the physics in that cell.
Reference: [6] <author> Richard S. Palmer. </author> <title> Chain models and finite element analysis. </title> <institution> Computer Science Technical Report TR94-1406, Cornell University, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: This formalism uses algebraic topological constructs cells, complexes, and chains defined over them to unify the computer representation of the geometry and physics. These constructs enable a user to express the semantics of a physical system in a formal, high level, and yet directly computable manner. <ref> [6] </ref> introduced the Chains computer language, a computer language whose primary data types are cells, cell complexes, and chains. <p> A Chains specification of a physical system formalizes the kind of reasoning typically used in the derivation of a mathematical model, yet, being expressed in an implemented computer language, is directly executable. As an example, <ref> [6] </ref> illustrated the relationship between chain models and the finite element method (FEM) fl This author's work was supported by the Advanced Research Projects Agency of the Department of Defense under ONR Contract N00014-92-J-1989, by ONR Contract N00014-92-J-1839 and by NSF Contract IRI-9006137. which in turn have faces V 0; : <p> It contains 0-chains to represent displacement and applied forces, which are related by a constitutive equation derived by the finite element method using quadratic shape functions defined over a triangle. For details, see <ref> [6] </ref>. 2d fluid volume element This element represents inviscid compressible fluid flow in two dimensions. The state of the fluid is represented with a 2-chain q = f; u; v; eg, (mass density, x and y components of momentum, and energy integrated over the 2-cells). <p> Inlet and outlet These boundary conditions are now defined on 0-chains. 4 Conclusion A multiple domain simulator using the previously described physical elements (using the reduced 1d fluid volume element) has been constructed using the Chains algebraic-topological programming language described in <ref> [6] </ref>. Figure 4 illustrates one run of the simulator. The initial configuration (not shown) has an undeformed (straight) elastic bar in contact with a fluid. The final configuration (when the system has reached steady state) is shown, together with graphs of the fluid parameters: velocity, pressure, and energy.
Reference: [7] <author> Richard S. Palmer and James F. Cremer. Simlab: </author> <title> Automatically creating physical systems simulators. </title> <booktitle> In The 1992 ASME Winter Annual Meeting, </booktitle> <year> 1992. </year>
Reference-contexts: The reasons include the inherent complexity of coupled systems as well as the fact that existing simulators have generally been conceived and implemented for a single problem domain. While implementations of multiple domain lumped parameter frameworks exist <ref> [10, 2, 7] </ref>, little has been done in the area of computational frameworks for mixed domain distributed parameter systems. This article describes how a general purpose modeling paradigm, called "chain models," has been used to create a simulator for a simple model of an exhaust nozzle in a jet engine.
Reference: [8] <author> Richard S. Palmer and Palghat S. Ramesh. </author> <title> Using an algebraic-topological toolbox to solve the euler equations of fluid flow. </title> <note> In Preparation, </note> <year> 1994. </year>
Reference-contexts: For instance, conservation of mass, momentum, and energy is enforced with the coboundary operator ffi: @q @t = ffiF , while a constitutive equation relates q and F for inviscid, compressible flow. For details, see <ref> [8] </ref>. 3.2 One dimensional elements Inlet This element defines constraints on F at the inlet (derived from stagnation pressure and density). Outlet This element enforces the outlet boundary conditions on F (derived from exit pressure). Fixed boundary This element represents a fixed fluid boundary. <p> Figure 4 illustrates one run of the simulator. The initial configuration (not shown) has an undeformed (straight) elastic bar in contact with a fluid. The final configuration (when the system has reached steady state) is shown, together with graphs of the fluid parameters: velocity, pressure, and energy. We expect <ref> [8] </ref> to contain a complete description of the physical elements, their mathematical derivation, and the computational aspects of the solution methods. We have used the Chains language to begin construction of an object oriented toolbox for the creation of multiple domain simulators.
Reference: [9] <author> Richard S. Palmer and Vadim Shapiro. </author> <title> Chain models of physical behavior for engineering analysis and design. </title> <booktitle> Research in Engineering Design, </booktitle> <month> Spring </month> <year> 1994. </year>
Reference-contexts: In this example, the nozzle is modeled as a linear elastic solid, while the fluid is modeled as inviscid, compressible, and transonic. The chain models formalism was defined in <ref> [9] </ref>, which described the general framework, and indicated how chain models could be used in the design, synthesis, and analysis of engineering systems. This formalism uses algebraic topological constructs cells, complexes, and chains defined over them to unify the computer representation of the geometry and physics. <p> interactions between different phenomena (e.g. at an interface), boundary conditions, etc. 2.3 An object-oriented physical systems simulation toolkit The chain models formalism provides a framework for creating an object-oriented simulation environment, where a physical element defines a class for modeling the desired behavior, which may then be instantiated 1 See <ref> [5, 1, 4, 9] </ref> for the algebraic-topology definitions used in the chain models formalism, e.g., cell, complex, chain, etc.. at any cell of the appropriate type to create an executable model of the physics in that cell.
Reference: [10] <author> Henry M. Paynter. </author> <title> Analysis and Design of Engineering Systems. </title> <publisher> The M.I.T. Press, </publisher> <address> Cambridge, Mas-sachusetts, </address> <year> 1961. </year>
Reference-contexts: The reasons include the inherent complexity of coupled systems as well as the fact that existing simulators have generally been conceived and implemented for a single problem domain. While implementations of multiple domain lumped parameter frameworks exist <ref> [10, 2, 7] </ref>, little has been done in the area of computational frameworks for mixed domain distributed parameter systems. This article describes how a general purpose modeling paradigm, called "chain models," has been used to create a simulator for a simple model of an exhaust nozzle in a jet engine.
References-found: 10

