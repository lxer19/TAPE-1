URL: ftp://ftp.cs.colorado.edu/users/alw/papers/icsp2.ps.Z
Refering-URL: http://www.cs.colorado.edu/~arcadia/Papers/metrics/cu_metrics_papers.html
Root-URL: http://www.cs.colorado.edu
Email: (alw@cs.colorado.edu) (dsr@research.att.com)  
Title: A Study in Software Process Data Capture and Analysis  
Author: Alexander L. Wolf David S. Rosenblum 
Address: Boulder, CO 80309 USA Murray Hill, NJ 07974 USA  
Affiliation: Department of Computer Science Advanced Software Technology Department University of Colorado AT&T Bell Laboratories  
Date: February 25-26, 1993  
Note: From the Proc. of the 2nd Inter. Conf. on the Software Process, Berlin, Germany,  
Abstract: Process data capture is the activity of obtaining information about an existing software process. Process analysis is the manipulation of that information for purposes of problem identification. Capture and analysis are key elements in any strategy for software process improvement. We have developed a model of the software process that is based on a notion of events characterizing identifiable, instantaneous milestones in a process. We have also developed capture and analysis techniques suited to that model. This paper reports on a study that was undertaken to gain experience with both the model and the capture and analysis techniques. In that study, we captured event data on several actual enactments of the build process of a large, complex software project within AT&T. We entered the captured event data into a database and ran several queries against the data. The queries implement a variety of analyses on the event data by examining relationships among events, such as dependencies and time intervals. The output of the queries are statistical data that can be used to guide the design of process improvements. While the data we collected in the study are incomplete, our initial results demonstrate the viability of this approach to capture and analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sergio Bandinelli, Carlo Ghezzi, and Angelo Morzenti. </author> <title> A multi-paradigm Petri net based approach to process description. </title> <editor> In Ian Thomas, editor, </editor> <booktitle> Proceedings of the 7th International Software Process Workshop, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets <ref> [1] </ref>, CSP [6], LOTOS [13] and Statecharts [9]. Retrospective analysis, on the other hand, is concerned with analyzing empirically gathered data from several enactments of a process, with the goal of discovering patterns of anomalous behavior that can be eliminated in future enactments.
Reference: [2] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <editor> In A. van Lam-sweerde and A. Fuggetta, editors, </editor> <booktitle> Proceedings of the 3rd European Software Engineering Conference, number 550 in Lecture Notes in Computer Science, </booktitle> <pages> pages 380-395. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: The choice of formal notation governs what kinds of deductive analysis techniques can be applied to the specified process. A number of formal notations and associated deductive analysis techniques have been designed specifically for process specification and analysis, including APPL/A [16], Interact/Intermediate [10], Marvel/MSL <ref> [2] </ref> and FUN-SOFT nets [8]. In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS [13] and Statecharts [9].
Reference: [3] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> The TAME project: Towards improvement-oriented software environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(6):758-773, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: We feel that a hybrid approach to capture is necessary because purely automated approaches are inherently biased towards the computerized aspects of processes, while purely manual approaches are inefficient for high volumes of data. (For related views, see Basili and Rombach <ref> [3] </ref>, and Sutton [15].) In this paper we describe an event-based software process model and techniques for data capture and retrospective analysis that are suited to the model. <p> For the build process we studied, our event kinds and analysis queries were designed in a rather ad hoc manner. In the future we would like to use a system such as TAME <ref> [3, 11] </ref> to help make the design of the analysis queries more systematic. 123 Acknowledgments We wish to thank the following people for their contributions to this study: Randee Fabrizius, Mary Caruso, Randy Hackbarth, Harry Harabedian, Steve Gryl, Malissia Williams, Rowena Johnson, Lori Ann Thorson, Rick Greer and Dave Belanger.
Reference: [4] <author> Victor R. Basili and David M. Weiss. </author> <title> A methodology for collecting valid software engineering data. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(6):728-738, </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: Capture techniques typically have been either purely manual or purely automated. Basili and Weiss describe a methodology for manual, forms-based collection of data for use in evaluating and comparing software development methodologies <ref> [4] </ref>. Amadeus is a system for automated collection and analysis of process metrics within the Arcadia process-centered environment [14]. Amadeus contains an event-action component for automating the generation and feedback of metrics into the process in response to process events.
Reference: [5] <author> Mark G. Bradac, Dewayne E. Perry, and Lawrence G. Votta. </author> <title> Prototyping a process monitoring experiment. </title> <institution> Internal AT&T Bell Laboratories Memorandum; submitted for external publication, </institution> <year> 1992. </year>
Reference-contexts: For instance, a long period of idleness between the time a meeting is scheduled and the time it takes place may reveal poor planning for activities that require a long preparation time. Bradac, Perry and Votta have also begun to explore these hypotheses <ref> [5] </ref>. In order to analyze a process's characteristic time intervals, it is first necessary to capture the relevant data about the significant events of the process, including the times at which those events occur.
Reference: [6] <author> R. Mark Greenwood. </author> <title> Using CSP and system dynamics as process engineering tools. </title> <editor> In J. C. Derniame, editor, </editor> <booktitle> Proceedings of the Second European Workshop on Software Process Technology, number 635 in Lecture Notes in Computer Science, </booktitle> <pages> pages 138-145. </pages> <address> Springer-Veralag, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP <ref> [6] </ref>, LOTOS [13] and Statecharts [9]. Retrospective analysis, on the other hand, is concerned with analyzing empirically gathered data from several enactments of a process, with the goal of discovering patterns of anomalous behavior that can be eliminated in future enactments.
Reference: [7] <author> Richard Greer, </author> <month> April </month> <year> 1992. </year> <institution> Internal AT&T Bell Laboratories Memorandum. </institution>
Reference-contexts: The database system we use for our analysis experiments is DataShare <ref> [7] </ref>, whose query language, Cymbal, provides powerful facilities for analyzing relationships among data records. By way of example, this section describes two analysis queries we have developed.
Reference: [8] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An evaluation of FUNSOFT nets. </title> <editor> In J. C. Derniame, editor, </editor> <booktitle> Proceedings of the Second European Workshop on Software Process Technology, number 635 in Lecture Notes in Computer Science, </booktitle> <pages> pages 196-214. </pages> <address> Springer-Veralag, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The choice of formal notation governs what kinds of deductive analysis techniques can be applied to the specified process. A number of formal notations and associated deductive analysis techniques have been designed specifically for process specification and analysis, including APPL/A [16], Interact/Intermediate [10], Marvel/MSL [2] and FUN-SOFT nets <ref> [8] </ref>. In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS [13] and Statecharts [9].
Reference: [9] <author> Mark I. Kellner. </author> <title> Software process modeling support for management planning and control. </title> <editor> In Mark Dow-son, editor, </editor> <booktitle> Proceedings of the 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 8-28. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS [13] and Statecharts <ref> [9] </ref>. Retrospective analysis, on the other hand, is concerned with analyzing empirically gathered data from several enactments of a process, with the goal of discovering patterns of anomalous behavior that can be eliminated in future enactments.
Reference: [10] <author> Dewayne E. Perry. </author> <title> Policy-directed coordination and cooperation. </title> <editor> In Ian Thomas, editor, </editor> <booktitle> Proceedings of the 7th International Software Process Workshop, </booktitle> <month> Octo-ber </month> <year> 1991. </year>
Reference-contexts: The choice of formal notation governs what kinds of deductive analysis techniques can be applied to the specified process. A number of formal notations and associated deductive analysis techniques have been designed specifically for process specification and analysis, including APPL/A [16], Interact/Intermediate <ref> [10] </ref>, Marvel/MSL [2] and FUN-SOFT nets [8]. In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS [13] and Statecharts [9].
Reference: [11] <author> H. Dieter Rombach. </author> <title> Specification of software process measurement. </title> <editor> In Dewayne E. Perry, editor, </editor> <title> Experience with Software Process Models: </title> <booktitle> Proceedings of the 5th International Software Process Workshop, </booktitle> <pages> pages 127-179. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: For the build process we studied, our event kinds and analysis queries were designed in a rather ad hoc manner. In the future we would like to use a system such as TAME <ref> [3, 11] </ref> to help make the design of the analysis queries more systematic. 123 Acknowledgments We wish to thank the following people for their contributions to this study: Randee Fabrizius, Mary Caruso, Randy Hackbarth, Harry Harabedian, Steve Gryl, Malissia Williams, Rowena Johnson, Lori Ann Thorson, Rick Greer and Dave Belanger.
Reference: [12] <author> David S. Rosenblum and Balachander Krishna-murthy. </author> <title> An event-based model of software configuration management. </title> <editor> In Peter H. Feiler, editor, </editor> <booktitle> Proceedings of the 3rd International Workshop on Software Configuration Management, </booktitle> <pages> pages 94-97. </pages> <booktitle> ACM SIGSOFT, </booktitle> <year> 1991. </year>
Reference-contexts: Amadeus contains an event-action component for automating the generation and feedback of metrics into the process in response to process events. Yeast is a general event-action system that is being used to automate event capture in a variety of processes in the UNIX r fl environment <ref> [12] </ref>.
Reference: [13] <author> Motoshi Saeki, Tsuyoshi Kaneko, and Maskai Sakamoto. </author> <title> A method for software process modeling and description using LOTOS. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> Proceedings of the 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 90-104. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS <ref> [13] </ref> and Statecharts [9]. Retrospective analysis, on the other hand, is concerned with analyzing empirically gathered data from several enactments of a process, with the goal of discovering patterns of anomalous behavior that can be eliminated in future enactments.
Reference: [14] <author> Richard W. Selby, Adam A. Porter, Doug C. Schmidt, and Jim Berney. </author> <title> Metric-driven analysis and feedback systems for enabling empirically guided software development. </title> <booktitle> In Proceedings of the 13th International Conference on Software Engineering, </booktitle> <pages> pages 288-298. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: Basili and Weiss describe a methodology for manual, forms-based collection of data for use in evaluating and comparing software development methodologies [4]. Amadeus is a system for automated collection and analysis of process metrics within the Arcadia process-centered environment <ref> [14] </ref>. Amadeus contains an event-action component for automating the generation and feedback of metrics into the process in response to process events. Yeast is a general event-action system that is being used to automate event capture in a variety of processes in the UNIX r fl environment [12].
Reference: [15] <author> Stanley M. Sutton, Jr. </author> <title> Accommodating manual activities in automated process programs. </title> <editor> In Ian Thomas, editor, </editor> <booktitle> Proceedings of the 7th International Software Process Workshop, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: We feel that a hybrid approach to capture is necessary because purely automated approaches are inherently biased towards the computerized aspects of processes, while purely manual approaches are inefficient for high volumes of data. (For related views, see Basili and Rombach [3], and Sutton <ref> [15] </ref>.) In this paper we describe an event-based software process model and techniques for data capture and retrospective analysis that are suited to the model.
Reference: [16] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Language constructs for managing change in process-centered environments. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> Proceedings of the 4th Symposium on Software Development Environments, </booktitle> <pages> pages 206-217. </pages> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1990. </year> <month> 124 </month>
Reference-contexts: The choice of formal notation governs what kinds of deductive analysis techniques can be applied to the specified process. A number of formal notations and associated deductive analysis techniques have been designed specifically for process specification and analysis, including APPL/A <ref> [16] </ref>, Interact/Intermediate [10], Marvel/MSL [2] and FUN-SOFT nets [8]. In addition, a number of formal notations and associated deductive analysis techniques for describing software systems have been adapted to process specification and analysis, including Petri Nets [1], CSP [6], LOTOS [13] and Statecharts [9].
References-found: 16

