URL: http://www.ai.mit.edu/~mpf/desktop/research/QC/other_papers/Kitaev.ps
Refering-URL: 
Root-URL: 
Email: e-mail:  
Title: Quantum measurements and the Abelian Stabilizer Problem  
Author: A. Yu. Kitaev 
Date: December 8, 1995  
Web: kitaev itp.ac.ru  
Address: Kosygina St. 2, Moscow 117940, Russia  
Affiliation: L.D.Landau Institute for Theoretical Physics,  
Abstract: We present a polynomial quantum algorithm for the Abelian stabilizer problem which includes both factoring and the discrete logarithm. Thus we extend famous Shor's results [7]. Our method is based on a procedure for measuring an eigenvalue of a unitary operator. Another application of this procedure is a polynomial quantum Fourier transform algorithm for an arbitrary finite Abelian group. The paper also contains a rather detailed introduction to the theory of quantum computation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Benioff, </author> <title> "Quantum mechanical Hamiltonian models of Turing machines", </title> <journal> J. Stat. Phys. </journal> <volume> 29, </volume> <month> 515 </month> <year> (1982). </year>
Reference-contexts: far as the group of unitary transformations U (2 n ) is continuous: To what extent is quantum computation sensitive to perturbation? And is it possible to organize computa tion so that a moderate perturbation would not affect the result? Quantum devices for doing classical computation were suggested by Benioff <ref> [1] </ref>, Peres [2] and Feynmann [3]. Deutsch [4, 5] was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao [6] showed that these two models are equivalent. <p> Without risk of confusion, the corresponding observable may be denoted simply by . Let the operator U act on a register A. Denote by 1 an additional bit and introduce the matrix S = p 1 1 Then the operator ffi (U )[A; 1] = S <ref> [1] </ref> fl (U )[1; A] S [1] (16) is a measurement operator for the observable . <p> Let the operator U act on a register A. Denote by 1 an additional bit and introduce the matrix S = p 1 1 Then the operator ffi (U )[A; 1] = S <ref> [1] </ref> fl (U )[1; A] S [1] (16) is a measurement operator for the observable .
Reference: [2] <author> A. Peres, </author> <title> "Reversible logic and quantum computers", </title> <journal> Phys. </journal> <note> Rev. A 32, 3266 (1985). </note>
Reference-contexts: the group of unitary transformations U (2 n ) is continuous: To what extent is quantum computation sensitive to perturbation? And is it possible to organize computa tion so that a moderate perturbation would not affect the result? Quantum devices for doing classical computation were suggested by Benioff [1], Peres <ref> [2] </ref> and Feynmann [3]. Deutsch [4, 5] was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao [6] showed that these two models are equivalent.
Reference: [3] <author> R. P. </author> <title> Feynman, "Quantum mechanical computers", </title> <journal> Optics News, </journal> <month> February </month> <year> 1985, </year> <note> 11, p. 11. </note>
Reference-contexts: unitary transformations U (2 n ) is continuous: To what extent is quantum computation sensitive to perturbation? And is it possible to organize computa tion so that a moderate perturbation would not affect the result? Quantum devices for doing classical computation were suggested by Benioff [1], Peres [2] and Feynmann <ref> [3] </ref>. Deutsch [4, 5] was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao [6] showed that these two models are equivalent.
Reference: [4] <author> D. Deutsch, </author> <title> "Quantum theory, the Church-Turing principle and the universal quantum computer", </title> <journal> Proc. R. Soc. Lond. </journal> <note> A 400, 97 (1985). </note>
Reference-contexts: Deutsch <ref> [4, 5] </ref> was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao [6] showed that these two models are equivalent.
Reference: [5] <author> D. Deutsch, </author> <title> "Quantum computational networks", </title> <journal> Proc. Roy. Soc. Lond. </journal> <note> A 425, 73 (1989). </note>
Reference-contexts: Deutsch <ref> [4, 5] </ref> was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao [6] showed that these two models are equivalent.
Reference: [6] <author> A. C.-C. Yao, </author> <title> "Quantum Circuit Complexity", </title> <booktitle> Proceedings of the 34th Annual Symposium on the Foundations of Computer Science (IEEE Computer Society Press, </booktitle> <address> Los Alamitos, CA, </address> <year> 1993), </year> <note> p. 352. </note>
Reference-contexts: Deutsch [4, 5] was the first to give an explicit model of quantum computation. He defined both quantum Turing machines and quantum circuits. Yao <ref> [6] </ref> showed that these two models are equivalent. More specifically, quantum Turing machines can simulate, and be simulated by, uniform families of polynomial size quantum circuits, with at most polynomial slowdown. Quantum circuits are generally more convenient for developing quantum algorithms.
Reference: [7] <author> P. W. Shor, </author> <title> "Algorithms for quantum computation: discrete log and factoring", </title> <booktitle> Proceedings of the 35th Annual Symposium on the Foundations of Computer Science (IEEE Computer Society Press, </booktitle> <address> Los Alamitos, CA, </address> <year> 1994), </year> <note> p. 124. </note>
Reference-contexts: Unfortunately, no reasonable computational problem has been proven to be hard yet. So it is interesting to find efficient quantum algorithms for problems which are considered as hard by computer science experts. The most remarkable result of this type has been obtained by Shor <ref> [7] </ref> who invented polynomial quantum algorithms for the discrete logarithm and factoring of integers. However, it is not clear yet whether a polynomial quantum algorithm exists for an NP-complete problem. <p> However, the construction itself may be interesting. Polynomial QFT algorithms were known for groups (Z 2 ) k [11] and Z q , where q = 2 n [12] or q is a smooth number, i.e. contains no prime power factor larger than (log q) c <ref> [7] </ref>. 1 The Abelian Stabilizer Problem Let G be a group acting on a finite set M . Suppose that this action and the group operations in G can be computed easily. Compute the stabilizer of a given element a 2 M . <p> Factoring. The stabilizer of 1 with respect to F g gives the order of an element g in the group G. There is a randomized reduction from factoring to the order of an element [13]. (A sketch of this reduction can be found in Shor's paper <ref> [7] </ref>). 2. Discrete logarithm. Let q be a prime, 2 G ~ = Z q1 a primitive element, g 2 G an arbitrary element. The stabilizer of 1 with respect to F ;g is P = f (m; r) 2 Z 2 : m g r = 1g.
Reference: [8] <author> E. Bernstein and U. Vazirani, </author> <title> "Quantum complexity theory", </title> <booktitle> Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <publisher> (ACM Press, </publisher> <address> New York, </address> <year> 1993), </year> <pages> pp. 11 - 20. </pages>
Reference-contexts: Thus the number of precision bits, needed to specify each elementary quantum operator (gate), is logarithmic <ref> [8] </ref>. This precision requirement is rather weak, which gives hope that quantum computation can be done by a physical device. Note that exponential precision (i.e. polynomial number of precision bits) is almost certainly infeasible; fortunately, it is not needed for quantum computation.
Reference: [9] <author> D. Grigoriev, </author> <title> "Testing shift equivalence of polynomials using quantum machines" (to appear) </title>
Reference-contexts: In this paper we suggest a polynomial quantum algorithm for a so-called Abelian Stabilizer Problem (ASP) which includes both factoring and the discrete logarithm. Thus we reproduce Shor's result by a different method. Another special case of the ASP was studied by Grigoriev <ref> [9] </ref> 2 in connection with the shift equivalence problem for polynomials. The ASP should have some applications to computational problems in number theory and algebraic geometry, but this topic needs a separate study. The key point of our solution is a concept of quantum measurement. <p> Let us describe this situation more exactly. Denote by size (g) the number of bits needed to represent an element g 2 Z k (in a reasonable coding). 3 Let poly 2 For the group G = (Z p ) k , Grigoriev <ref> [9] </ref> designed a quantum algorithm which was polynomial in k and p (but not in log p). 3 In different reasonable codings size (g) may differ at most by a constant factor. 3 stand for any function that grows not faster than a polynomial, i.e. poly (x) = x O (1)
Reference: [10] <editor> D. Simon, </editor> <booktitle> "On the power of quantum computation", Proceedings of the 35th Annual Symposium on the Foundations of Computer Science (IEEE Computer Society Press, </booktitle> <address> Los Alamitos, CA, </address> <year> 1994), </year> <note> p. 116. </note>
Reference-contexts: The ASP should have some applications to computational problems in number theory and algebraic geometry, but this topic needs a separate study. The key point of our solution is a concept of quantum measurement. We also use a generalization of Simon's procedure <ref> [10] </ref> for finding a certain group of characters. In Sec. 5 we demonstrate a more subtle use of quantum measurements by describing a polynomial algorithm for the Quantum Fourier Transform (QFT) on an arbitrary finite Abelian group. <p> It is clear that computing St F (a) is polynomially equivalent to finding H. (To find H means to find a polynomial subset of T k that generates this group). We are going to show how to generate a random element of H using Theorem 1 (cf. <ref> [10] </ref>). The group H itself can be generated by sufficiently many random elements. Consider the orbit N = fF (g; a) : g 2 Z k g B n .
Reference: [11] <author> D. Deutsch, and R. Jozsa, </author> <title> "Rapid solution of problems by quantum computation", </title> <booktitle> Proceedings of the Royal Society, </booktitle> <address> London, A439, </address> <year> 1992, </year> <pages> 553-558. </pages>
Reference-contexts: This doesn't solve any classical computational problem because the QFT is defined in terms of quantum mechanics. However, the construction itself may be interesting. Polynomial QFT algorithms were known for groups (Z 2 ) k <ref> [11] </ref> and Z q , where q = 2 n [12] or q is a smooth number, i.e. contains no prime power factor larger than (log q) c [7]. 1 The Abelian Stabilizer Problem Let G be a group acting on a finite set M .
Reference: [12] <author> D. Coppersmith, </author> <title> "An approximate Fourier transform useful in quantum factoring", </title> <note> IBM Research Report RC19642 (1994) </note>
Reference-contexts: This doesn't solve any classical computational problem because the QFT is defined in terms of quantum mechanics. However, the construction itself may be interesting. Polynomial QFT algorithms were known for groups (Z 2 ) k [11] and Z q , where q = 2 n <ref> [12] </ref> or q is a smooth number, i.e. contains no prime power factor larger than (log q) c [7]. 1 The Abelian Stabilizer Problem Let G be a group acting on a finite set M . Suppose that this action and the group operations in G can be computed easily.
Reference: [13] <author> G. L. Miller, </author> <title> "Riemann's hypothesis and tests for primarity", </title> <journal> J. Comp. Sys. Sci, </journal> <volume> 13, </volume> <month> 300-317 </month> <year> (1976) </year>
Reference-contexts: Consider two cases. 1. Factoring. The stabilizer of 1 with respect to F g gives the order of an element g in the group G. There is a randomized reduction from factoring to the order of an element <ref> [13] </ref>. (A sketch of this reduction can be found in Shor's paper [7]). 2. Discrete logarithm. Let q be a prime, 2 G ~ = Z q1 a primitive element, g 2 G an arbitrary element.
Reference: [14] <author> Yves Lecerf, </author> <title> "Machines de Turing reversibles. Recursive insolubilite en n*N de l'equation u = n ou est un "isomorphism de codes". </title> <address> Comptes Rendus 257, </address> <month> 2597-2600 </month> <year> (1963) </year>
Reference-contexts: We also briefly discuss the concept of uniformity. In Sec. 2.2 we overview the concept of reversible computation introduced by Lecerf <ref> [14] </ref> and Bennett [15]. This is an important link between the standard models (e.g. Boolean circuits) and quantum computation. The results of this section have quantum analogues (see Sec. 5). 4 In Sec. 2.3 we summarize the basic concepts and notations of quantum mechanics.
Reference: [15] <author> C. H. Bennett, </author> <title> "Logical reversibility of computation", </title> <journal> IBM Journal of Research and Development 17, </journal> <month> 525 </month> <year> (1973). </year>
Reference-contexts: We also briefly discuss the concept of uniformity. In Sec. 2.2 we overview the concept of reversible computation introduced by Lecerf [14] and Bennett <ref> [15] </ref>. This is an important link between the standard models (e.g. Boolean circuits) and quantum computation. The results of this section have quantum analogues (see Sec. 5). 4 In Sec. 2.3 we summarize the basic concepts and notations of quantum mechanics.
Reference: [16] <author> A. Barenco, C. H. Bennett, R. Cleve, D. P. DiVincenzo, N. Margolus, P. Shor, T. Sleator, J. Smolin, and H. Weinfurter, </author> <title> "Elementary gates for quantum computation", </title> <address> quant-ph/9503016 22 </address>
Reference-contexts: Note that : 2 U (B 1 ), so R Q. Hence any classical reversible computation can be done in the basis Q. Actually, this basis is complete for quantum computation; even its proper subset U (B 1 )[ft g is a complete basis <ref> [16] </ref>. If a blackbox subroutine F is given, we add the operator F t to the basis. 7 There is still one problem with our choice: the basis Q is infinite so infinite information is needed to specify its element.
References-found: 16

