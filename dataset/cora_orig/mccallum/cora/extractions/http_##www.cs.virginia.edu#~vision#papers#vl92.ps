URL: http://www.cs.virginia.edu/~vision/papers/vl92.ps
Refering-URL: http://www.cs.virginia.edu/~vision/papers/
Root-URL: http://www.cs.virginia.edu
Email: email: olson@virginia.edu  
Title: MAVIS: A Visual Environment for Active Computer Vision  
Author: Thomas J. Olson, Nicholas G. Klop, Mark R. Hyett and Shawn M. Carnell 
Address: Charlottesville, VA, 22903, USA  
Affiliation: Dept. of Computer Science University of Virginia  
Abstract: MAVIS includes a number of features intended to support real-time or active vision. Among these are exible user and program control of communications and scheduling, direct user and program access to all computational and system parameters, and an inherently parallel model of computation that can be readily supported on a variety of computer architectures. This paper describes the goals of the MAVIS project, the design of the language and the status of the implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Aloimonos, I. Weiss, and A. Bandopadhay, </author> <title> Active vision, </title> <booktitle> In Proceedings of the 1st International Conference on Computer Vision, pages 35--54, </booktitle> <address> London, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: The MAVIS project is an attempt to make progress on the software front. Its most general goal is simply to provide better tools for day-to-day work in computer vision. More specifically, however, the project is intended to support research in the emerging subdiscipline of active vision <ref> [1, 2, 3, 5] </ref>. The goal of active vision is to allow autonomous agents (vehicles or robots) to use visual information to accomplish tasks in the real world. Active vision is characterized by an emphasis on vision as an ongoing process that is closely integrated with behavior.
Reference: [2] <editor> Ruzena Bajcsy, </editor> <title> Active perception, </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 76(8):996--1005, </address> <year> 1988. </year>
Reference-contexts: The MAVIS project is an attempt to make progress on the software front. Its most general goal is simply to provide better tools for day-to-day work in computer vision. More specifically, however, the project is intended to support research in the emerging subdiscipline of active vision <ref> [1, 2, 3, 5] </ref>. The goal of active vision is to allow autonomous agents (vehicles or robots) to use visual information to accomplish tasks in the real world. Active vision is characterized by an emphasis on vision as an ongoing process that is closely integrated with behavior.
Reference: [3] <author> Dana H. Ballard, </author> <title> Reference frames for animate vision, </title> <booktitle> In Eleventh International Joint Conference on Artificial Intelligence, pages 1635--1641, </booktitle> <address> Detroit, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: The MAVIS project is an attempt to make progress on the software front. Its most general goal is simply to provide better tools for day-to-day work in computer vision. More specifically, however, the project is intended to support research in the emerging subdiscipline of active vision <ref> [1, 2, 3, 5] </ref>. The goal of active vision is to allow autonomous agents (vehicles or robots) to use visual information to accomplish tasks in the real world. Active vision is characterized by an emphasis on vision as an ongoing process that is closely integrated with behavior.
Reference: [4] <author> Rodney A. Brooks, </author> <title> A Robust Layered Control System for a Mobile Robot, </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> no. RA-2, </volume> <pages> pages 14-23, </pages> <year> 1986. </year>
Reference-contexts: It does its computation in scan-line order, however, so MAVISs token-based dataow model does not map directly onto the hardware. The second MAVIS variant that we are developing is an implementation of the Subsumption Architecture, a visual robot control notation developed by Rod Brooks <ref> [4] </ref>. It has proven possible to obtain subsumption architecture semantics simply by specifying a different set of firing conditions for some of the process instances. MAVIS was originally conceived in part as a way of managing the complexity of programming MIMD parallel machines.
Reference: [5] <author> Peter J. Burt, </author> <title> Smart Sensing Within a Pyramid Vision Machine, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(80) </volume> <pages> 1006-1015, </pages> <year> 1988. </year>
Reference-contexts: The MAVIS project is an attempt to make progress on the software front. Its most general goal is simply to provide better tools for day-to-day work in computer vision. More specifically, however, the project is intended to support research in the emerging subdiscipline of active vision <ref> [1, 2, 3, 5] </ref>. The goal of active vision is to allow autonomous agents (vehicles or robots) to use visual information to accomplish tasks in the real world. Active vision is characterized by an emphasis on vision as an ongoing process that is closely integrated with behavior.
Reference: [6] <author> Datacube, Inc., </author> <title> MV-20 Hardware Reference Manual, </title> <publisher> Datacube Inc., </publisher> <address> Peabody, Massachusetts, </address> <year> 1991. </year>
Reference-contexts: Two variants of MAVIS with alternative communications semantics are currently under development. The first is an interactive interface to a DataCube MV-20 image processor <ref> [6] </ref>. The MV-20 is a dataow machine in that it allows images to be sent through a network of processing elements in order to perform some computation. It does its computation in scan-line order, however, so MAVISs token-based dataow model does not map directly onto the hardware.
Reference: [7] <author> M. Hirakawa, S. Iwata, I. Yoshimoto, M. Tanaka, and T. Ichikawa, </author> <title> HI-VISUAL iconic programming, </title> <booktitle> In Proceedings of the IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Linkoping, Sweden, </address> <year> 1987. </year>
Reference-contexts: The most modern systems (surveyed in [10]) add sophisticated database and software engineering tools. The use of visual languages to describe image processing computations began fairly early, helped perhaps by the traditional use of ow diagrams to describe signal processing algorithms. The HI-VISUAL language <ref> [7] </ref> introduced the basic idea of allowing image data to ow through a graph of computing elements. Tanimotos VIVA [14] introduced the important concept of liveness, a measure of the degree to which visual representations are active during user interaction.
Reference: [8] <author> Michael S. Landy, Yoav Cohen, and George S. Sperling, </author> <title> HIPS: A Unix-based image processing system, Computer Vision, Graphics, </title> <booktitle> and Image Processing, </booktitle> <address> 25(3):331--347, </address> <month> March </month> <year> 1984. </year>
Reference-contexts: Early approaches consisted of little more than subroutine libraries. More recent systems such as HIPS <ref> [8] </ref> and IM-PROC [17] provide interactive interfaces to a standard set of routines. The most modern systems (surveyed in [10]) add sophisticated database and software engineering tools.
Reference: [9] <author> David Lau-Kee, Adam Billyard, Robin Faichney, Yasuo Kozato, Paul Otto and Mark Smith, </author> <title> VPL: An Active, Declarative Visual Programming System, </title> <booktitle> In Proceedings of the 1991 IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Kobe, Japan, </address> <pages> pages 40-46, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A number of recent image processing systems have demonstrated that this is an effective formalism for describing computations on images <ref> [9, 14, 16] </ref>. MAVIS includes a number of features specifically designed to support real-time image processing and active vision. In MAVIS, all data types are temporal sequences; there is no concept of a single static image. <p> The KHOROS system [16] and its visual programming interface, Cantata, were originally targeted toward image and signal processing applications and are now being extended to other domains. VPL <ref> [9] </ref> allows users to construct declarative and potentially recursive dataow graphs, leading to a very different style of visual programming. The immediate inspiration for MAVIS came from recent work in scientific visualization shells [15,11,13].
Reference: [10] <author> Darryl T. Lawton and Christopher C. McConnell, </author> <title> Image understanding environments, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(8), </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: Early approaches consisted of little more than subroutine libraries. More recent systems such as HIPS [8] and IM-PROC [17] provide interactive interfaces to a standard set of routines. The most modern systems (surveyed in <ref> [10] </ref>) add sophisticated database and software engineering tools. The use of visual languages to describe image processing computations began fairly early, helped perhaps by the traditional use of ow diagrams to describe signal processing algorithms.
Reference: [11] <institution> Ohio State Supercomputer Graphics Project, </institution> <note> apE Reference Manual, </note> <month> November </month> <year> 1990. </year>
Reference: [12] <author> Randy Pausch, Nathaniel Young, III, Robert Deline, SUIT, </author> <title> The Pascal of User Interface Toolkits, </title> <booktitle> Proceedings of UIST: the Annual ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <month> November, </month> <year> 1991. </year>
Reference-contexts: Thus for reasonably large images (and assuming that the message buffers fit in physical memory), sequences of MAVIS instances run nearly as quickly as the equivalent C code. The MAVIS user interface was implemented using SUIT, the Simple User Interface Toolkit <ref> [12] </ref>. SUIT is a software toolkit that supports rapid prototyping of user interfaces and permits extensive customization of interfaces by the interactive user. SUIT is distinguished by an extraordinarily rapid learning curve compared with standard X widget sets and toolkits.
Reference: [13] <institution> Silicon Graphics Computer Systems, </institution> <note> IRIS Explorer Users Guide, Document 007-1371-010, </note> <institution> Silicon Graphics Computer Systems Inc., Mountain View, California, </institution> <year> 1992 </year>
Reference: [14] <author> Steven L. Tanimoto, VIVA: </author> <title> A visual language for image processing, </title> <journal> Journal of Visual Languages and Computing, v. </journal> <volume> 1 no. 2, </volume> <year> 1990. </year>
Reference-contexts: A number of recent image processing systems have demonstrated that this is an effective formalism for describing computations on images <ref> [9, 14, 16] </ref>. MAVIS includes a number of features specifically designed to support real-time image processing and active vision. In MAVIS, all data types are temporal sequences; there is no concept of a single static image. <p> The use of visual languages to describe image processing computations began fairly early, helped perhaps by the traditional use of ow diagrams to describe signal processing algorithms. The HI-VISUAL language [7] introduced the basic idea of allowing image data to ow through a graph of computing elements. Tanimotos VIVA <ref> [14] </ref> introduced the important concept of liveness, a measure of the degree to which visual representations are active during user interaction. The KHOROS system [16] and its visual programming interface, Cantata, were originally targeted toward image and signal processing applications and are now being extended to other domains. <p> MAVIS is a productivity-enhancing tool for the working computer vision researcher. Liveness. MAVIS is a fully live system in the sense of Tanimoto <ref> [14] </ref>. Unless explicitly disabled, MAVIS graphs are always active. Thus editing the graph in ways that affect the runnability of processes may trigger immediate actions on the part of the program. Compliance. Dataow visual languages typically use implicit rules to determine when a computational node should execute. <p> In our applications, for example, instances frequently decide to run based on the state of external devices (cameras or motors). Since instances appear to execute continually and respond immediately to user updates, MAVIS is fully live in the sense of Tanimoto <ref> [14] </ref>. MAVIS is also a compliant system: within broad limits, it does what the user tells it to do. The user can halt any or all of the instances with a single mouse click, freezing all communications. The system remains live, however.
Reference: [15] <author> C. Upson, T. Faulhaber, D. Kamins, D. Laidlaw, D. Schlegel, J. Vroom, R. Gurwitz, and A. van Dam, </author> <title> 'The Application Visualization System: A computational environment for scientific visualization, </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 30--42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: VPL [9] allows users to construct declarative and potentially recursive dataow graphs, leading to a very different style of visual programming. The immediate inspiration for MAVIS came from recent work in scientific visualization shells [15,11,13]. MAVIS owes its general appearance and certain features of its interface to AVS <ref> [15] </ref>, though its architecture and semantics are quite different. MAVIS is similar to VIVA, Cantata and VPL in its use of a dataow model to describe image computations. It differs from them primarily in its various adaptations to the needs of active vision, particularly its exible communications semantics.
Reference: [16] <author> C. Williams and J. Rasure, </author> <title> A visual language for image processing, </title> <booktitle> In Proceedings of the IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Skokie, Illinois, </address> <year> 1990. </year>
Reference-contexts: A number of recent image processing systems have demonstrated that this is an effective formalism for describing computations on images <ref> [9, 14, 16] </ref>. MAVIS includes a number of features specifically designed to support real-time image processing and active vision. In MAVIS, all data types are temporal sequences; there is no concept of a single static image. <p> The HI-VISUAL language [7] introduced the basic idea of allowing image data to ow through a graph of computing elements. Tanimotos VIVA [14] introduced the important concept of liveness, a measure of the degree to which visual representations are active during user interaction. The KHOROS system <ref> [16] </ref> and its visual programming interface, Cantata, were originally targeted toward image and signal processing applications and are now being extended to other domains. VPL [9] allows users to construct declarative and potentially recursive dataow graphs, leading to a very different style of visual programming.
Reference: [17] <author> George Wolberg, IMPROC: </author> <title> An interactive image processing software package, </title> <type> Technical Report CUCS-330-88, </type> <institution> Columbia University Department of Computer Science, </institution> <year> 1988. </year>
Reference-contexts: Early approaches consisted of little more than subroutine libraries. More recent systems such as HIPS [8] and IM-PROC <ref> [17] </ref> provide interactive interfaces to a standard set of routines. The most modern systems (surveyed in [10]) add sophisticated database and software engineering tools.
References-found: 17

