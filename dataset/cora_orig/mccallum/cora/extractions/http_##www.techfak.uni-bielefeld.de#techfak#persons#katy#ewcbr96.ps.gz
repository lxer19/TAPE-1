URL: http://www.techfak.uni-bielefeld.de/techfak/persons/katy/ewcbr96.ps.gz
Refering-URL: 
Root-URL: 
Email: katy j eberhard j tammer@informatik.th-leipzig.de  coulon@gmd.de  
Title: Structural Similarity and Adaptation  
Author: Katy Borner Eberhard Pippig Elisabeth-Ch. Tammer Carl-H. Coulon 
Address: IMN, PF 30066, 04251 Leipzig, GERMANY  53754 Sankt Augustin, GERMANY  
Affiliation: 1 HTWK Leipzig, FB  Research Division,  
Pubnum: 2 FIT, AI  
Abstract: Most commonly, case-based reasoning is applied in domains where attribute value representations of cases are sufficient to represent the features relevant to support classification, diagnosis or design tasks. Distance functions like the Hamming-distance or their transformation into similarity functions are applied to retrieve past cases to be used to generate the solution of an actual problem. Often, domain knowledge is available to adapt past solutions to new problems or to evaluate solutions. However, there are domains like architectural design or law in which structural case representations and corresponding structural similarity functions are needed. Often, the acquisition of adaptation knowledge seems to be impossible or rather requires an effort that is not manageable for fielded applications. Despite of this, humans use cases as the main source to generate adapted solutions. How to achieve this computationally? This paper presents a general approach to structural similarity assessment and adaptation. The approach allows to explore structural case representations and limited domain knowledge to support design tasks. It is exemplarily instantiated in three modules of the design assistant FABEL-Idea that generates adapted design solutions on the basis of prior CAD layouts.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: TOPO's compile function projects each layout to the three axes and the 3-dimensional relation is a combination of the relations detected for each dimension. For each projection 8 different directed relations can be detected. They are similar to the temporal relations of <ref> [1] </ref>, but additionally distinguish several classes of distances between disjoint intervals. Therefore, a given object may be in one of 16 relationships for each dimension leading to 16 3 = 4096 different 3-dimensional relationships [12].
Reference: 2. <author> Luitpold Babel and Gottfried Tinhofer. </author> <title> A branch and bound algorithm for the maximum clique problem. </title> <booktitle> ZOR Methods and Models of Operations-Research, </booktitle> <volume> 34 </volume> <pages> 207-217, </pages> <year> 1990. </year>
Reference-contexts: Retrieval: The matching function searches for the maximal common subgraphs of two graphs. In order to solve a similar task, the problem of finding a maximal clique of a graph, various NP-complete algorithms has been developed <ref> [2] </ref>. A clique is a complete subgraph of a graph (every vertex is connected with every other one). Instead of searching for a common subgraph of two graphs TOPO searches for a maximal clique in one graph representing all possible matchings between the two graphs, called their combination graph.
Reference: 3. <author> H. G. Barrow and R. M. Burstall. </author> <title> Subgraph isomorphism relational structures and maximal cliques. </title> <journal> Information Processing Letters, </journal> <volume> 4 </volume> <pages> 83-84, </pages> <year> 1976. </year>
Reference-contexts: Instead of searching for a common subgraph of two graphs TOPO searches for a maximal clique in one graph representing all possible matchings between the two graphs, called their combination graph. Building the combination graph: Using the transformation in <ref> [3] </ref>, the vertices in the combination graph represent all matchings of compatible vertices in the source graphs. Figure 3 shows an example. The source graphs f and g contain objects of type a and b connected by directed relations.
Reference: 4. <author> Brigitte Bartsch-Sporl and Elisabeth-Ch. </author> <title> Tammer. Graph-based approach to structural similarity. </title> <editor> In Angi Vo, editor, </editor> <booktitle> Similarity concepts and retrieval methods, </booktitle> <pages> pages 45-58. </pages> <address> GMD, Sankt Augustin, </address> <year> 1994. </year>
Reference-contexts: Compile and Recompile: Analogous to the other approaches the function compile guarantees the transformation of an attribute value represented case into its graph representation (see <ref> [4] </ref> for examples). We represent cases very close to the graphical representations which are in accordance with former reflections about the graph structure of the domain elements. There are mainly two ways to interpret a layout fragment: All architectural objects which appear in the layout are represented as vertices.
Reference: 5. <author> S. Bhatta and A. Goel. </author> <title> From design cases to generic mechanisms. </title> <journal> AI EDAM, </journal> <volume> 10, </volume> <year> 1996. </year>
Reference-contexts: The instantiation of its mcs is guided by the probabilities of these instantiations, resulting in the optimal solution. 5 Related Work and Discussion Interactive design systems as ARCHIE [19] or CADRE [15] do either support retrieval or adaptation of past designs. Systems like CASEY, KRITIK or IDEAL <ref> [5] </ref> integrate case-based and model-based reasoning to support retrieval as well as adaptation. They require model-based knowledge which is not available in our domain. Cases are most commonly represented by fixed sets of attribute value pairs.
Reference: 6. <author> Katy Borner. </author> <title> Structural similarity as guidance in case-based design. </title> <editor> In Wess et al. </editor> <volume> [25], </volume> <pages> pages 197-208. </pages>
Reference-contexts: The adaptation of prior layouts mainly corresponds to adding, eliminating, or substituting physical objects. Because of the variety and the possible number of combinations of these modifications, adaptation knowledge is difficult to acquire by hand. In the project FABEL approaches have been developed that define the structural similarity <ref> [6, 16] </ref> between structured case representations (graphs) by their maximal common subgraphs (mcs). Given a new problem the structurally most similar case (s) are retrieved. One out of several mcs is transferred and the remaining case parts are taken over as needed. <p> The general approach of Conceptual Analogy has been fully implemented in Syn, a module of a highly interactive, adaptive system architecture [8]. Its compile and recompile function is especially suited to support the geometrical layout of pipe systems. See <ref> [6, 9] </ref> for a detailed description of the implementation. 4.4 Example Depicted on the top is the query case or problem, the middle presents a source case used by TOPO to generate the adapted solution on the right hand side.
Reference: 7. <author> Katy Borner. </author> <title> Conceptual analogy. </title> <editor> In D. W. Aha and A. Ram, editors, </editor> <booktitle> AAAI 1995 Fall Symposium Series: Adaptation of Knowledge for Reuse, </booktitle> <pages> pages 5-11, November 10-12, </pages> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: Especially, the creation of some choosing heuristics based of a different graph representation or the specification of extensive user interaction would be necessary. 4.3 CA/SYN Conceptual analogy (CA) is a general approach that relies on conceptual clus tering to facilitate the efficient use of past cases in analogous situations <ref> [7] </ref>. CA divides the overall design task into memory organization and analogical reasoning both processing structural case representations. In order to ground both processes on attribute value representations of cases a compile function and a recompile function need to be defined.
Reference: 8. <author> Katy Borner. </author> <title> Interactive, adaptive, computer aided design. </title> <editor> In Milton Tan and Robert Teh, editors, </editor> <booktitle> The Global Design Studio proceedings of the 6th international conference on computer-aided architectural design futuresB95, </booktitle> <pages> pages 627-634, </pages> <address> Singapore, </address> <year> 1995. </year> <institution> University of Singapore. </institution>
Reference-contexts: The general approach of Conceptual Analogy has been fully implemented in Syn, a module of a highly interactive, adaptive system architecture <ref> [8] </ref>. Its compile and recompile function is especially suited to support the geometrical layout of pipe systems.
Reference: 9. <author> Katy Borner and Roland Faauer. </author> <title> Analogical Layout Design (Syn*). </title> <editor> In Katy Borner, editor, </editor> <booktitle> Modules for Design Support, </booktitle> <pages> pages 59-68. </pages> <address> GMD, Sankt Augustin, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The general approach of Conceptual Analogy has been fully implemented in Syn, a module of a highly interactive, adaptive system architecture [8]. Its compile and recompile function is especially suited to support the geometrical layout of pipe systems. See <ref> [6, 9] </ref> for a detailed description of the implementation. 4.4 Example Depicted on the top is the query case or problem, the middle presents a source case used by TOPO to generate the adapted solution on the right hand side.
Reference: 10. <editor> Katy Borner, Klaus P. Jantke, Siegfried Schonherr, and Elisabeth-Ch. Tammer. Lernszenarien im fallbasierten Schlieen. </editor> <booktitle> Fabel-Report 14, GMD, </booktitle> <address> Sankt Augustin, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: When mcs (C) and E are given, the structural similarity of any class C of graphs may be written as (C) = E (mcs (C)) in the sense of <ref> [10] </ref>. Because of NP-completeness of the subgraph isomorphism problem, that is the computing of a common isomorphic subgraph, classical case retrieval is extremely expensive, if every member of a usually huge case base is potentially queried.
Reference: 11. <author> C. Bron and J. Kerbosch. </author> <title> Finding all cliques in an undirected graph. </title> <journal> Communications of the ACM, </journal> <volume> 16 </volume> <pages> 575-577, </pages> <year> 1973. </year>
Reference-contexts: Fig. 3. Transformation of the problem of finding the maximal common subgraph to the problem of finding a maximal clique in a graph. The maximal clique and the corresponding matching are marked in black. A general maximal clique algorithm: The algorithm of <ref> [11] </ref> (for further use called max-clique BK ) finds all cliques in a graph by enumerating and extending all complete subgraphs. It extends complete subgraphs of size k to complete subgraphs of size k + 1 by adding iteratively vertices which are connected to all vertices of the complete subgraph.
Reference: 12. <author> Carl-Helmut Coulon. </author> <title> Automatic Indexing, Retrieval and Reuse of Topologies in Architectural Layouts. </title> <editor> In Milton Tan and Robert Teh, editors, </editor> <booktitle> The Global Design Studio proceedings of the 6th international conference on computer-aided architectural design futures, </booktitle> <pages> pages 577-586, </pages> <address> Singapore, </address> <year> 1995. </year> <institution> Centre for Advanced Studies in Architecture, National University of Singapore. </institution>
Reference-contexts: They are similar to the temporal relations of [1], but additionally distinguish several classes of distances between disjoint intervals. Therefore, a given object may be in one of 16 relationships for each dimension leading to 16 3 = 4096 different 3-dimensional relationships <ref> [12] </ref>. Building a graph out of objects and relations, one must decide which ones should be the vertices and which ones the edges. Depending on this decision different subgraphs of graph representations of two layouts become isomorph. As described and discussed in [12] TOPO uses the relations as vertices and the <p> to 16 3 = 4096 different 3-dimensional relationships <ref> [12] </ref>. Building a graph out of objects and relations, one must decide which ones should be the vertices and which ones the edges. Depending on this decision different subgraphs of graph representations of two layouts become isomorph. As described and discussed in [12] TOPO uses the relations as vertices and the objects as edges because it allows to detect weaker, but larger, correspondencies between two layouts. Retrieval: The matching function searches for the maximal common subgraphs of two graphs. <p> It extends complete subgraphs of size k to complete subgraphs of size k + 1 by adding iteratively vertices which are connected to all vertices of the complete subgraph. As an improvement <ref> [12] </ref> describes, how to reduce the search space by searching for matchings of connected subgraphs only and combining them in a second step. The function retrieval: TOPO includes no own retrieval function but supplies the retrieval module ASPECT [20] with two different similarity functions.
Reference: 13. <author> Eric A. Domeshek and Janet L. Kolodner. </author> <title> A case-based design aid for architecture. </title> <booktitle> In Proc. Second International Conference on Artificial Intelligence in Design, </booktitle> <pages> pages 497-516. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction To provide support in a complex real world domain like design, case-based reasoning (CBR) has been suggested as an appropriate problem solving method <ref> [14, 17, 13, 15] </ref>. In CBR, a new problem is solved analogously to past experiences (cases).
Reference: 14. <author> Ashok K. Goel. </author> <title> Integration of case-based reasoning and model-based reasoning for adaptive design problem solving. </title> <type> PhD thesis, </type> <institution> Ohio State University, Columbus, Ohio, </institution> <year> 1989. </year>
Reference-contexts: 1 Introduction To provide support in a complex real world domain like design, case-based reasoning (CBR) has been suggested as an appropriate problem solving method <ref> [14, 17, 13, 15] </ref>. In CBR, a new problem is solved analogously to past experiences (cases).
Reference: 15. <author> Kefeng Hua and Boi Faltings. </author> <title> Exploring case-based building design CADRE. </title> <journal> AI EDAM, </journal> <volume> 7(2) </volume> <pages> 135-144, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction To provide support in a complex real world domain like design, case-based reasoning (CBR) has been suggested as an appropriate problem solving method <ref> [14, 17, 13, 15] </ref>. In CBR, a new problem is solved analogously to past experiences (cases). <p> The instantiation of its mcs is guided by the probabilities of these instantiations, resulting in the optimal solution. 5 Related Work and Discussion Interactive design systems as ARCHIE [19] or CADRE <ref> [15] </ref> do either support retrieval or adaptation of past designs. Systems like CASEY, KRITIK or IDEAL [5] integrate case-based and model-based reasoning to support retrieval as well as adaptation. They require model-based knowledge which is not available in our domain.
Reference: 16. <author> Klaus P. </author> <title> Jantke. Nonstandard concepts of similarity in case-based reasoning. </title> <editor> In H. H. Bock, W. Lenski, and M. M. Richter, editors, </editor> <booktitle> Information Systems and Data Analysis: Prospects-Foundations-Applications, </booktitle> <pages> pages 29-44. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The adaptation of prior layouts mainly corresponds to adding, eliminating, or substituting physical objects. Because of the variety and the possible number of combinations of these modifications, adaptation knowledge is difficult to acquire by hand. In the project FABEL approaches have been developed that define the structural similarity <ref> [6, 16] </ref> between structured case representations (graphs) by their maximal common subgraphs (mcs). Given a new problem the structurally most similar case (s) are retrieved. One out of several mcs is transferred and the remaining case parts are taken over as needed.
Reference: 17. <author> Janet L. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction To provide support in a complex real world domain like design, case-based reasoning (CBR) has been suggested as an appropriate problem solving method <ref> [14, 17, 13, 15] </ref>. In CBR, a new problem is solved analogously to past experiences (cases). <p> In CBR, a new problem is solved analogously to past experiences (cases). That is, cases similar to the problem are retrieved, the set of best cases is selected, a solution is derived and evaluated and the new problem along with its solution is stored in memory <ref> [17, 25] </ref>. In most CBR applications past experiences have no inherent structure and are described by fixed sets of attribute value pairs. Traditionally, case adaptation is guided by static libraries of hand-coded adaptation rules.
Reference: 18. <author> M. Malek and B. Amy. </author> <title> A pre-processing model for integrating CBR and prototype-based neural networks. </title> <type> Technical report, </type> <institution> Working Paper TIMC-LIFIA-IMAG Grenoble, </institution> <year> 1994. </year>
Reference-contexts: Static libraries of hand-coded adaptation rules are used to transform past cases into new solutions. There is a number of CBR approaches that apply conceptual clustering techniques in organizing their case base. The Prototype-Based Indexing System (PBIS) proposed by <ref> [18] </ref> uses an incremental prototype-based neural network to organize cases into groups of similar cases and to represent each group of cases by a prototype. The JANUS CBR Shell [21] applies a Cohonen network to automatically organize cases into disjoint case classes corresponding to similar attribute values.
Reference: 19. <author> M. Pearce, A. K. Goel, J. L. Kolodner, C. Zimring, L. Sentosa, and R. Billington. </author> <title> Case-based design support: A case study in architectural design. </title> <journal> IEEE Expert, </journal> <pages> pages 14-20, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The instantiation of its mcs is guided by the probabilities of these instantiations, resulting in the optimal solution. 5 Related Work and Discussion Interactive design systems as ARCHIE <ref> [19] </ref> or CADRE [15] do either support retrieval or adaptation of past designs. Systems like CASEY, KRITIK or IDEAL [5] integrate case-based and model-based reasoning to support retrieval as well as adaptation. They require model-based knowledge which is not available in our domain.
Reference: 20. <author> Jorg Walter Schaaf. </author> <title> "Fish and Sink"; An Anytime-Algorithm to Retrieve Adequate Cases. </title> <editor> In Manuela Veloso and Agnar Aamodt, editors, </editor> <booktitle> Case-based reasoning research and development: first International Conference, ICCBR-95, proceedings, </booktitle> <pages> pages 538-547. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: As an improvement [12] describes, how to reduce the search space by searching for matchings of connected subgraphs only and combining them in a second step. The function retrieval: TOPO includes no own retrieval function but supplies the retrieval module ASPECT <ref> [20] </ref> with two different similarity functions. Given a similarity function and a query case, ASPECT guarantees to find the most similar source case without the need to compare all cases.
Reference: 21. <editor> Ingo Schiemann and Ansgar Woltering. Organisation groer Fallbasen in der TUB-JANUS Shell zum effizienten Retrieval geeigneter Falle. In Richter M. M., editor, </editor> <booktitle> Workshop Fallbasiertes Schlieen: Grundlagen und Anwendungen, Deutsche Ex-pertensystemtagung XPS-95, LSA-95-02, </booktitle> <pages> pages 30-36, </pages> <year> 1995. </year>
Reference-contexts: The Prototype-Based Indexing System (PBIS) proposed by [18] uses an incremental prototype-based neural network to organize cases into groups of similar cases and to represent each group of cases by a prototype. The JANUS CBR Shell <ref> [21] </ref> applies a Cohonen network to automatically organize cases into disjoint case classes corresponding to similar attribute values. It represents these classes by reference cases. Both systems do a two stage retrieval. Firstly, the prototype/reference case pointing to a case class is selected.
Reference: 22. <author> Barry Smyth and Mark T. Keane. </author> <title> Retrieving adaptable cases: The role of adaptation knowledge in case retrieval. </title> <editor> In Wess et al. </editor> <volume> [25], </volume> <pages> pages 209-220. </pages>
Reference-contexts: See also <ref> [22] </ref> for a discussion and experiments on adaptation-guided retrieval. Finally, the set of solutions may be ordered corresponding to a set of pref-erence criteria: (1) max. structural similarity of the solution and the concept applied, (2) max. probability of edges transferred, and (3) min. solution size.
Reference: 23. <author> Kathleen Steinhofel. </author> <title> Backtrack Algorithmus zur Suche des groten gemeinsamen Teilgraphen. </title> <address> HTWK Leipzig, </address> <year> 1995. </year> <pages> Dokumentation. </pages>
Reference-contexts: Organization of the Case Base: In this approach, we consider arbitrary graphs which may be either directed or undirected and, possibly, labeled or unlabeled. Computing structural similarity is essentially based on graph matching which actually means computing the maximal common isomorphic subgraphs. The module MACS uses a backtracking algorithm <ref> [23] </ref> that realizes the function match to compute maximal common subgraphs of two arbitrary graphs [24]. A maximal common subgraph of two graphs denotes their structural similarity.
Reference: 24. <author> Elisabeth-Ch. Tammer, Kathleen Steinhofel, Siegfried Schonherr, and Daniel Ma-tuschek. </author> <title> Anwendung des Konzeptes der Strukturellen Ahnlichkeit zum Fallver-gleich mittels Term- und Graph-Reprasentationen. </title> <type> Fabel-Report 38, </type> <institution> GMD, Sankt Augustin, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Computing structural similarity is essentially based on graph matching which actually means computing the maximal common isomorphic subgraphs. The module MACS uses a backtracking algorithm [23] that realizes the function match to compute maximal common subgraphs of two arbitrary graphs <ref> [24] </ref>. A maximal common subgraph of two graphs denotes their structural similarity. <p> Because of our key concept of structural similarity, for any collection of graphs C 2 P ( ), we use mcs (C) to denote the set of maximal common subgraphs of all graphs in C with respect to counting vertices and edges (cf. <ref> [24] </ref>). In general, the structural similarity of a set of graphs is not unique. Therefore, it may be represented by a set of graphs. Let us introduce some selection operator E : P ( ) ! to determine a unique representative fi 2 mcs (C) for each class C.
Reference: 25. <editor> Stefan Wess, Klaus-Dieter Althoff, and Michael M. Richter, editors. </editor> <booktitle> Topics in Case-Based Reasoning Selected Papers from the First European Workshop on Case-Based Reasoning (EWCBR-93), volume 837 of LNAI. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: In CBR, a new problem is solved analogously to past experiences (cases). That is, cases similar to the problem are retrieved, the set of best cases is selected, a solution is derived and evaluated and the new problem along with its solution is stored in memory <ref> [17, 25] </ref>. In most CBR applications past experiences have no inherent structure and are described by fixed sets of attribute value pairs. Traditionally, case adaptation is guided by static libraries of hand-coded adaptation rules.
References-found: 25

