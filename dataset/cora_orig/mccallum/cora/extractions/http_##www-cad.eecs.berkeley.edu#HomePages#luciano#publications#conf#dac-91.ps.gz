URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications/conf/dac-91.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications.html
Root-URL: 
Title: Algorithms for synthesis of hazard-free asynchronous circuits  
Author: L. Lavagno K. Keutzer A. Sangiovanni-Vincentelli 
Address: Mountain View, CA  Berkeley  
Affiliation: Dept. of EECS University of California, Berkeley  Synopsys  Dept. of EECS University of California,  
Abstract: A technique for the synthesis of asynchronous sequential circuits from a Signal Transition Graph (STG) specification is described. We give algorithms for synthesis and hazard removal, able to produce hazard-free circuits with the bounded wire-delay model, requiring the STG to be live, safe and to have the unique state coding property. A proof that, contrary to previous beliefs, STG persistency is not necessary for hazard-free implementation is given. 
Abstract-found: 1
Intro-found: 1
Reference: [BHMSV84] <author> R. K. Brayton, G. D. Hachtel, C. T. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: Sec- tion 4 describes the algorithm implementation and gives experimental results. Section 5 draws some conclusions and outlines some opportunities for future development. 2 Definitions Common definitions from logic synthesis may be found in <ref> [BHMSV84] </ref>. 1 2.1 Hazards A static hazard is a 0 ! 1 ! 0 transition (static 0 hazard) or 1 ! 0 ! 1 transition (static 1-hazard) on an output signal of a circuit, in any condition where no transition for that signal should be enabled according to the specification.
Reference: [Chu86] <author> T.-A. Chu. </author> <title> On the models for designing VLSI asynchronous digital systems. Integration: </title> <journal> the VLSI journal, </journal> <volume> 4 </volume> <pages> 99-113, </pages> <year> 1986. </year>
Reference-contexts: Then the circuits corresponding to M and T have precisely the same static hazards. 2.2 Signal Transition Graph The Signal Transition Graph was introduced by <ref> [Chu86] </ref> as a specification formalism for asynchronous sequential circuits.
Reference: [Chu87] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Both methods suffer from the fact that the flow table and the state diagram have an exponential size in the number of specified signals, so they are often not practical. Recently, <ref> [Chu87] </ref> introduced a specification formalism for asynchronous circuits called Signal Transition Graph (STG), that is based on Petri nets to explicitly model concurrency. It overcomes the specification size problem, but the synthesis procedure given by [Chu87] does not guarantee hazard-free operation, unless a possibly unrealistic delay model is used (see Section <p> Recently, <ref> [Chu87] </ref> introduced a specification formalism for asynchronous circuits called Signal Transition Graph (STG), that is based on Petri nets to explicitly model concurrency. It overcomes the specification size problem, but the synthesis procedure given by [Chu87] does not guarantee hazard-free operation, unless a possibly unrealistic delay model is used (see Section 3.4). In a previous paper ([LKSV91]) we have shown that hazard-free asynchronous logic design from STG specification can be done, using the bounded wire-delay model, with an appropriate synthesis technique. <p> The paper is organized as follows: Section 2 recalls some definitions from the literature. Section 3 briefly describes a procedure to synthesize a hazard-free circuit under the bounded wire-delay model. We also show that, contrary to the claim of <ref> [Chu87] </ref>, STG persistency is neither necessary nor sufficient for hazard-free implementation under the unbounded gate-delay model. Sec- tion 4 describes the algorithm implementation and gives experimental results. <p> If a place has more than one fanout edge, then exactly one of its fanout transitions is non-deterministically enabled. This means, in practice, that the behavior of the circuit depends on an external condition. So <ref> [Chu87] </ref> constrained all fanout transitions of an FC place to be input transitions. Two transitions are said to be concurrent if there exists some marking where both are enabled. In this case they can fire in any order. Otherwise they are said to be ordered . <p> This definition is broader than the one given in <ref> [Chu87] </ref>, since * he required that only two transitions per signal appear in the STG, and that those transitions are ordered (i.e. belong to a simple cycle) in every FSM component of the net. * we do not restrict the number of transitions per signal, and we require that at least <p> An edge joins state s 1 with state s 2 if the corresponding marking M 2 can be reached from M 1 (corresponding to s 1 ) through the firing of a single transition. This transition labels the edge. state). 2.4 Unique state coding The synthesis procedure described in <ref> [Chu87] </ref> uses the output signals of the circuit directly as state variables, so the circuit must be able to tell its global state given only the values of the input and output signals. <p> An example of such a labeling appears in Figure 2.b, on the top of each state. If this can be done, then we say that the STG from which the SG was derived has the Unique State Coding property (USC, [Van90]). The following Theorem was proved in <ref> [Chu87] </ref>: Theorem 2.2 An STG S has the USC property if and only if S is live and no complementary set of transitions is feasible in S. 3 Hazard-free implementation 3.1 Next-state function derivation from Signal Transition Graph The following procedure derives an on-set cover F and an off-set cover R <p> Persistency at the STG level was considered to be a necessary and sufficient condition for the existence of a hazard-free circuit implementation, due to the the following Theorem, taken from <ref> [Chu87] </ref> (only the notation is changed here, to be consistent with the rest of the paper): Theorem 3.1 Let S be a live STG. <p> See for example the STG in Figure 1.a, where y + is not persistent. The logic equation for y is y = x + z, and using the unbounded gate-delay model, as assumed by <ref> [Chu87] </ref>, we know that x is caused by z + , so when x fires z is already at 1 (a controlling value for the or gate), and x cannot disable y + . <p> Let us examine now the example in Figure 3, where a circuit implementation was derived from a persistent STG (both are taken from <ref> [Chu87] </ref>, only a fragment is shown here). The value of signals in the given marking is La = 0, Lr = 1, Sa = 0, Sr = 1, Ca = 0 and Cr = 0. When La + fires, then the output of a 3 has a rising transition.
Reference: [Hac72] <author> M. Hack. </author> <title> Analysis of production schemata by Petri Nets. </title> <type> Technical Report TR 94, </type> <institution> Project MAC, MIT, </institution> <year> 1972. </year>
Reference-contexts: An FC net is safe if no place can ever be assigned more than one token after any sequence of firings from the initial marking. <ref> [Hac72] </ref> proved that a live and safe FC net can be decomposed into FSM components that cover the net (each component is sequential and exhibits nondeterministic choice). "Covering" means that each transition and place of the net has a correspondent in at least one FSM component.
Reference: [LKSV90] <author> L. Lavagno, K. Keutzer, and A. SangiovanniVincentelli. </author> <title> Synthesis of verifiably hazard-free asynchronous control circuits. </title> <type> Technical Report UCB/ERL M90/99, </type> <institution> U.C. Berkeley, </institution> <year> 1990. </year>
Reference-contexts: In this paper we give practical algorithms to implement the above technique, and we show the results of its application to some circuit examples, while the interested reader is referred to <ref> [LKSV90] </ref> for the proofs. Notice that, unlike [VKM + 90], the circuits produced with this approach are not speed-independent but have an acceptable size, and, unlike [Ung69], they operate correctly without the need for the fundamental mode assumption. <p> See <ref> [LKSV90] </ref> for a proof that the procedure is well- defined and that its output is a valid pair of covers for the next-state/output function of signal t i . 3 3.2 Static hazard analysis of a circuit implemented from an STG We want to analyze when static hazards can occur under <p> If each implementation of the combinational sub-circuit exciting each flip- flop input, and each implementation of a flip-flop, can be considered a single gate with non-zero delay, then C is hazard-free with the unbounded gate-delay model. Proof: see <ref> [LKSV90] </ref>. So STG persistency is not sufficient to ensure hazard- freeness unless we assume that the delay of complex gates can be modeled as a single lumped delay on their output. But if we make that assumption, then STG persistency is not necessary , as we proved above.
Reference: [LKSV91] <author> L. Lavagno, K. Keutzer, and A. SangiovanniVincentelli. </author> <title> Synthesis of verifiably hazard-free asyn-chronous control circuits. </title> <booktitle> In Proceedings of the Conference on Advanced Research in VLSI, </booktitle> <month> March </month> <year> 1991. </year>
Reference: [Men88] <author> T. Meng. </author> <title> Asynchronous Design for Digital Signal Processing Architectures. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: The conventional graphical representation of an STG is a directed graph, where nodes correspond to transitions (denoted by single circles) and places (denoted by double circles), while directed edges represent elements of the flow relation. They specify what set of transitions causes each transition. places (from <ref> [Men88] </ref>). Figure 1.b contains an example of an STG with two FC places. A set T of transitions is called a complementary set if it does not contain all the transitions of the STG and t fl 2 T ) t fl 2 T .
Reference: [Mil65] <author> R. E. Miller. </author> <booktitle> Switching theory, </booktitle> <volume> volume 2, chap-ter 10, </volume> <pages> pages 192-244. </pages> <publisher> Wiley and Sons, </publisher> <year> 1965. </year>
Reference: [Smi85] <author> G. L. Smith. </author> <title> Model for delay faults based upon paths. </title> <booktitle> In Proceedings of the International Test Conference, </booktitle> <pages> pages 342-349, </pages> <year> 1985. </year>
Reference: [Tra66] <author> J. H. Tracey. </author> <title> Internal state assignments for asynchronous sequential machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15(4):551-560, </volume> <month> August </month> <year> 1966. </year>
Reference: [Ung69] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley Interscience, </publisher> <year> 1969. </year>
Reference-contexts: Notice that, unlike [VKM + 90], the circuits produced with this approach are not speed-independent but have an acceptable size, and, unlike <ref> [Ung69] </ref>, they operate correctly without the need for the fundamental mode assumption. The paper is organized as follows: Section 2 recalls some definitions from the literature. Section 3 briefly describes a procedure to synthesize a hazard-free circuit under the bounded wire-delay model. <p> The following Theorem was proved in <ref> [Ung69] </ref>: Theorem 2.1 Let T be a two-level representation of a logic function f . Let M be a multi-level representation of f such that it can be obtained from T using only the associative, distributive and De Morgan laws. <p> Each such vector pair has associated a transition cube, where all signals that change value from v 1 to v 2 (according to the SG) are undetermined, while the other signals have the value they have in v 1 3 . <ref> [Ung69] </ref> contains a proof that a hazard condition exists for a gate-level implementation, with the unbounded wire-delay model, if and only if the three-valued simulation of the transition cube corresponding to a vector pair gives an undetermined output value. <p> Moreover, unlike the approaches described in <ref> [Ung69] </ref>, we do not make the fundamental mode assumption, that is the circuit itself signals when it is ready to accept new inputs, using the protocol specified by the designer with the STG. 3.4 STG Persistency and hazards An STG is persistent ([Chu87]) if all its transitions are persistent. <p> The algorithms rely on knowing bounds on the delays in the circuit, and use the wire-delay model. No fundamental mode assumption is required (unlike <ref> [Ung69] </ref>). One noticeable consequence of this work is that STG persistence can no longer be considered a necessary or sufficient condition for hazard-free implementation. This is a desirable result, since enforcing persistence reduces the concurrency at the STG level.
Reference: [Van90] <author> P. Vanbekbergen. </author> <title> Optimized synthesis of asyn-chronous control circuits from graph-theoretic spec-ifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 184-187, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: An example of such a labeling appears in Figure 2.b, on the top of each state. If this can be done, then we say that the STG from which the SG was derived has the Unique State Coding property (USC, <ref> [Van90] </ref>).
Reference: [VKM + 90] <author> V. I. Varshavsky, M. A. Kishinevsky, V. B. Marakhovsky, V. A. Peschansky, L. Y. Rosenblum, A. R. Taubin, and B. S. Tzirlin. </author> <title> Self-timed Control of Concurrent Processes. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1990. </year> <note> (Russian edition: </note> <year> 1986). </year>
Reference-contexts: In this paper we give practical algorithms to implement the above technique, and we show the results of its application to some circuit examples, while the interested reader is referred to [LKSV90] for the proofs. Notice that, unlike <ref> [VKM + 90] </ref>, the circuits produced with this approach are not speed-independent but have an acceptable size, and, unlike [Ung69], they operate correctly without the need for the fundamental mode assumption. The paper is organized as follows: Section 2 recalls some definitions from the literature.
References-found: 13

