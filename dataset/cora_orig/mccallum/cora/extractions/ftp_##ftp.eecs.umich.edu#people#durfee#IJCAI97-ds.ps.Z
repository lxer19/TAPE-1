URL: ftp://ftp.eecs.umich.edu/people/durfee/IJCAI97-ds.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: durfee@umich.edu  
Title: The Effects of Runtime Coordination Strategies Within Static Organizations  
Author: Edmund H. Durfee and Young-pa So 
Address: Ann Arbor, MI 48109, USA  
Affiliation: AI Laboratory, EECS Department University of Michigan,  
Abstract: Much work in multiagent systems has been devoted to developing runtime mechanisms to coordinate comp u-tational agents. However, the efficacy of such mechanisms depends to a large extent on the opportunities for flexible choices of action imposed by the implicit or explicit organizational relationships among agents. This paper examines the dependencies between the design of static organizational structures and the efficacy of runtime coordination. We show that runtime coordination strategies can be viewed as transforming the configuration of an organization, with principled effects on the expected performance of the agent system. By understanding these effects in the context of organizations, we can begin to articulate the conditions under which the introduction of coordination mecha nisms (and their associated costs) can be justified. *
Abstract-found: 1
Intro-found: 1
Reference: [Carley and Prietula, 1994] <author> Carley, K. M., and Prietula, M. J., (Eds.), </author> <title> Computational Organization Theory , Hillsdale, </title> <address> NJ, </address> <publisher> Lawrence Earlbaum Associates. </publisher>
Reference-contexts: To advance the design of multiagent systems from an art into an engineering discipline, therefore, will require a careful articulation of the various design parameters for organizations and agents, and their impact on the performance measures <ref> [Carley and Prietula, 1994] </ref>.
Reference: [Decker, 1995] <author> Decker, K., </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms , PhD dissertation, </title> <institution> University of Massachusetts. </institution>
Reference-contexts: Between these extremes are the many techniques for coordinating agents within the bounds of some fixed commi t-ments upon which they can all depend (e.g. <ref> [Decker, 1995; Durfee et al. , 1987; Gasser et al., 1989] </ref>). But these techniques have generally been developed to meet the needs of particular applications. <p> This problem appears in many distributed applic a-tions, ranging from jobshop scheduling to distributed operating systems, with many approaches to supporting this kind of runtime coordination having been identified (e.g. <ref> [Decker, 1995; Liu and Sycara, 1996] </ref>. In general, task interdependencies and uncertainties about execution time complicate the ordering/scheduling of tasks in distributed systems. In the context of our analysis, local task reordering (LTR) is a coordination strategy that lets agents take actions that complement those of other agents.
Reference: [Durfee et al., 1987] <author> Durfee, E., Lesser, V., and Corkill., D., </author> <title> Coherent cooperation among communicating problem solvers. </title> <journal> IEEE Trans on Computers, C36(11):1275-1291. </journal>
Reference-contexts: A countermeasure is to give me m-bers of an organization overlapping responsibilities (tasks) such that if one is delayed in fulfilling its responsibilities (such as if it catastrophically fails), others can pick up the slack <ref> [Durfee et al., 1987] </ref>. For example, to make the previous organization more robust to agent failures, we could redundantly assign supervisory and primitive tasks among the agents. <p> As has been discovered in other organizational approaches to cooperative problem solving, however, the reliability comes at the potential cost of duplicated effort <ref> [Durfee et al., 1987] </ref>. So, in cases where agents do not fail, they should coordinate their choices of which of their assigned tasks to each do to avoid redundancy. And despite the built-in rel i-ability, if too many (or the wrong combination of) agents fail, the organization will still fail.
Reference: [Durfee and Lesser, 1991] <author> Durfee, E., and Lesser, V., </author> <title> Partial Global Planning: A coordination framework for distributed hypothesis formation. </title> <journal> IEEE Trans on Systems, Man, and Cybernetics, SMC21(5):1167-1183. </journal>
Reference-contexts: The combinatorics we have outlined for larger organizations have been addressed numerous ways in more practical coordination mechanisms, including reducing the frequency of coordination, coordinating agents in smaller local groups, and searching less of the collective task-ordering space (such as by using hill-climbing) <ref> [Durfee and Lesser, 1991] </ref>. These relaxations can lead to suboptimal coordination; using the model we have presented here, our research can work toward prescriptions about what relaxations make sense given the costs and the potential benefits for runtime coordination within an organization. <p> In this paper, we have taken steps in this direction so that we can begin to make recommendations for the restricted set of organizations outlined here, organizations for multiagent systems that have already been shown to be useful in mu l-tiagent applications including distributed sensor interpretation <ref> [Durfee and Lesser, 1991] </ref> and distributed network monitoring [So and Durfee, 1992].
Reference: [Gasser et al., 1989] <author> Gasser, L., Rouquette, N. F., Hill, R. W., and Lieb, J., </author> <title> Representing and Using Organizational Knowledge in Distributed AI Systems. </title> <editor> In Gasser and Huhns (eds.) </editor> <booktitle> Distributed Artificial Intelligence II , San Mateo, </booktitle> <address> CA, </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: Between these extremes are the many techniques for coordinating agents within the bounds of some fixed commi t-ments upon which they can all depend (e.g. <ref> [Decker, 1995; Durfee et al. , 1987; Gasser et al., 1989] </ref>). But these techniques have generally been developed to meet the needs of particular applications.
Reference: [Gmytrasiewicz et al., 1991] <author> Gmytrasiewicz, P., Durfee, E., and Wehe, D., </author> <title> A decision-theoretic approach to coordinating multiagent interactions. </title> <booktitle> In IJCAI-91, </booktitle> <pages> pp 62-68. </pages>
Reference-contexts: At the other extreme are researchers who strive toward endowing each agent in a complex system with the ability to dynamically maintain models of other agents and to use these models to make arbitrarily complex coordination decisions interleaved with execution (e.g. <ref> [Gmytrasiewicz et al., 1991] </ref>). Between these extremes are the many techniques for coordinating agents within the bounds of some fixed commi t-ments upon which they can all depend (e.g. [Decker, 1995; Durfee et al. , 1987; Gasser et al., 1989]).
Reference: [Ishida et al., 1992] <author> Ishida, T., Gasser, L., and Yokoo, M., </author> <title> Organization self-design of distributed production systems, </title> <journal> IEEE Trans on Knowl and Data Eng DKE4(2):123-134. </journal>
Reference: [Liu and Sycara, 1996] <author> Liu, J. and Sycara, K., </author> <title> Multiagent coordination in tightly coupled task scheduling, </title> <booktitle> International Conf on Multi-Agent Systems, </booktitle> <pages> pp. 181-188. </pages>
Reference-contexts: This problem appears in many distributed applic a-tions, ranging from jobshop scheduling to distributed operating systems, with many approaches to supporting this kind of runtime coordination having been identified (e.g. <ref> [Decker, 1995; Liu and Sycara, 1996] </ref>. In general, task interdependencies and uncertainties about execution time complicate the ordering/scheduling of tasks in distributed systems. In the context of our analysis, local task reordering (LTR) is a coordination strategy that lets agents take actions that complement those of other agents.
Reference: [Shoham and Tennenholtz, 1992] <author> Shoham, Y. and Tennen-holtz, M., </author> <title> On the synthesis of useful social laws for artificial agent societies, </title> <booktitle> AAAI-92, </booktitle> <pages> pages 276-281. </pages>
Reference: [Smith, 1980] <author> Smith, R. </author> <title> The contract-net protocol, </title> <journal> IEEE Trans on Computers C29(12):1104-1113. </journal>
Reference-contexts: For example, this is the form of organization that emerges from the use of contracting protocols <ref> [Smith, 1980] </ref>. We characterize these structures in terms of the number of (primitive or supervisory) tasks assigned to members, and the branching factor of the organizational tree. <p> Of course, this implies that the agents not only are able to recognize the current configuration, but can identify and agree on a better configuration. Examples of reconfiguration mechanisms exist in the multiagent systems literature (e.g. <ref> [Smith, 1980; So and Durfee, 1992] </ref>). Our investigation asks what kinds of organizations and enviro n-ments could exploit agents that can do this. 5.2 Local Task Reordering The second coordination strategy we look at here focuses on the local decisions agents make about which of their tasks to do next.
Reference: [So and Durfee, 1997] <author> So, Y. and Durfee, E., </author> <title> Designing span-of-control for computational agent organizations, </title> <journal> Journal of Computational and Mathematical Organization Theory 2(3) </journal> <pages> 219-246. </pages>
Reference-contexts: We will omit the details of the calculation of the response time in this paper; we use the model described by <ref> [So and Durfee, 1997] </ref> where we are additionally assuming that the communication delay is equivalent to the unit task execution time.
Reference: [So and Durfee, 1992] <author> So, Y. and Durfee, E., </author> <title> A distributed problemsolving infrastructure for computer network ma n-agement. </title> <journal> Int Journal of Intelligent and Cooperative Info Sys, </journal> <volume> 1(2) </volume> <pages> 363-392. </pages>
Reference-contexts: Of course, this implies that the agents not only are able to recognize the current configuration, but can identify and agree on a better configuration. Examples of reconfiguration mechanisms exist in the multiagent systems literature (e.g. <ref> [Smith, 1980; So and Durfee, 1992] </ref>). Our investigation asks what kinds of organizations and enviro n-ments could exploit agents that can do this. 5.2 Local Task Reordering The second coordination strategy we look at here focuses on the local decisions agents make about which of their tasks to do next. <p> have taken steps in this direction so that we can begin to make recommendations for the restricted set of organizations outlined here, organizations for multiagent systems that have already been shown to be useful in mu l-tiagent applications including distributed sensor interpretation [Durfee and Lesser, 1991] and distributed network monitoring <ref> [So and Durfee, 1992] </ref>.
References-found: 12

