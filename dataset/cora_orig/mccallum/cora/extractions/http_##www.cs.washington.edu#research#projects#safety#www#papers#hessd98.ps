URL: http://www.cs.washington.edu/research/projects/safety/www/papers/hessd98.ps
Refering-URL: http://www.cs.washington.edu/research/projects/safety/www/papers.html
Root-URL: 
Email: fmolly,levesong@cs.washington.edu  
Title: Modeling Controller Tasks for Safety Analysis  
Author: Molly Brown and Nancy G. Leveson 
Address: Seattle, WA 98195-2350  
Affiliation: Computer Science and Engineering University of Washington  
Abstract: In this paper, we present a visual task modeling language that can be used by system designers to model human-computer interactions. The visual models can be translated into SpecTRM-RL, a blackbox specification language for modeling the automated portion of the control system. The SpecTRM-RL suite of analysis tools allow the designer to perform formal and informal safety analyses on the task model in isolation or integrated with the rest of the modeled system. 
Abstract-found: 1
Intro-found: 1
Reference: [AD67] <author> J. Annett and K.D. Duncan. </author> <title> Task analysis and training design. </title> <journal> Occupational Psychology, </journal> <volume> 41 </volume> <pages> 211-221, </pages> <year> 1967. </year>
Reference-contexts: This visualization assists the system designer in determining whether the actions involved in the task support the cognitive processes required of the pilot. 8 Related Work Task analysis models such as Hierarchical Task Analysis (HTA) <ref> [AD67] </ref> focus on steps required by the human to complete the given task. In HTA, tasks can be broken down into subtasks and there is no restriction on the level of decomposition.
Reference: [CMN83] <author> S.K. Card, T.P. Moran, and A. Newell. </author> <title> The psychology of human-computer interaction. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1983. </year>
Reference-contexts: HTA is very flexible, but this flexibility often leads to ambiguity and inconsistency among models. Many task models have been based on the Goals, Operators, Methods and Selection Rules (GOMS) framework <ref> [CMN83] </ref>. In the GOMS methodology, the user's goals are decomposed into subgoals that have operators (behaviors) and methods (sequences of behaviors) associated with them. The goals are decomposed into four different levels of description.
Reference: [DJ89] <author> D. Diaper and P. Johnson. </author> <title> Task analysis for knowledge descriptions: theory and applications in training. </title> <editor> In J. Long and A. Whitefield, editors, </editor> <title> Cognitive er-gonomics and human-computer interaction. </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: This model focuses on error-free performance and models the tasks down to a very detailed description of the keystroke level of behavior. Task Analysis for Knowledge Descriptions (TAKD) takes a different approach to task modeling by focusing on the knowledge required by people to complete the tasks <ref> [DJ89] </ref>. The TAKD method allows the knowledge needed to complete a task to be represented by a multilevel abstraction that traces the high-level knowledge down to the low-level steps necessary to complete the task. Johnson et al. developed another task analysis approach, Task Knowledge Structures (TKS), based on TAKD [JJ91].
Reference: [HL96] <author> M.P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and consistency analysis of state-based requirements. </title> <journal> Transactions on Software Engineering, </journal> <month> June </month> <year> 1996. </year>
Reference-contexts: Consistency and completeness analysis identifies inconsistencies in the specification and conditions not accounted for in the specification <ref> [HL96] </ref>. For example, the automated completeness check on this model found that the Pilot's behavior is not completely specified. During the handoff procedure, the model does not show how the Pilot should act if she reads back an incorrect frequency.
Reference: [JJ91] <author> H. Johnson and P. Johnson. </author> <title> Task knowledge structures: psychological basis and integration in to system design. </title> <journal> Acta Psychologica, </journal> <volume> 78(1-3):3-26, </volume> <year> 1991. </year>
Reference-contexts: The TAKD method allows the knowledge needed to complete a task to be represented by a multilevel abstraction that traces the high-level knowledge down to the low-level steps necessary to complete the task. Johnson et al. developed another task analysis approach, Task Knowledge Structures (TKS), based on TAKD <ref> [JJ91] </ref>. The TKS methodology represents tasks for the purpose of defining what tasks need to be supported by the system design. Unlike many other task models, TKS is a tool for designing systems, not just evaluating existing designs. Executable task models have been developed and used for modeling human-computer interaction.
Reference: [Lev98] <author> N.G. Leveson. </author> <title> The SpecTRM-RL language. </title> <note> In preparation, </note> <year> 1998. </year>
Reference-contexts: With a single consistent model of the complex system, analysts from each discipline can focus on the aspect of the system that is of interest to them. The center of SpecTRM is SpecTRM-RL (SpecTRM Requirements Language), a formal requirements specification language for modeling blackbox behavior of control systems <ref> [Lev98] </ref>. SpecTRM-RL supports a wide-range of problem-solving strategies and tasks during system development and evolution. Models written in SpecTRM-RL can be analyzed by the SpecTRM suite of tools. The SpecTRM tools were developed to detect errors and potentially hazardous behavior.
Reference: [Mit96] <author> C.M. Mitchell. </author> <title> Task-analytic models of human operators: Designing operator-machine interaction. </title> <type> Technical report, </type> <institution> Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: However, automation design has not changed to support the human controller's new role as a monitor of system behavior and backup controller in case of emergency [SW95]. The Operator Function Model (OFM) provides a tool to help improve automation design so that the human controller tasks are supported <ref> [Mit96] </ref>.
Reference: [Pin97] <author> L.D. Pinnel. </author> <title> Visualizing requirement specifications: A toolkit for rapid prototyping of interfaces. </title> <type> Ph.D. qualifying project report, </type> <year> 1997. </year>
Reference-contexts: For example, a backward analysis of the handoff procedure model found that the Pilot model can reach the hazardous state Pilot Tuned To Unknown Frequency. 7.3 Visualization Tools Our IBToolKit (Interface Builder Tool Kit) allows the system designer to create visualizations that can be linked to a SpecTRM-RL model <ref> [Pin97] </ref>. In addition to simply showing the results of the model executing in a visual format, visualizations can be created that highlight specific system qualities. These types of visualizations can aid in the design of automated systems to maximize the strengths of both the human and automated controllers.
Reference: [PPC97] <author> T. Prevot, E. Palmer, and B. Crane. </author> <title> Flight crew support for automated negotiation of descent and arrival clearances. </title> <type> Technical report, </type> <institution> NASA Ames Research Center, </institution> <year> 1997. </year>
Reference-contexts: As a result, many of these control systems rely on both human and automated controllers. For these controllers to interact effectively, the human-computer interaction must be carefully designed. We began looking at these issues while working with the Terminal Area Productivity (TAP) Project at NASA Ames <ref> [PPC97] </ref>. The TAP Project is designing terminal area procedures for air traffic using data links in addition to voice contact to communicate trajectories and routing information between the air traffic controller and the aircraft.
Reference: [RL97a] <author> J.D. Reese and N.G. Leveson. </author> <title> Software deviation analysis. </title> <booktitle> In International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: This incompleteness in the specification is likely to be the result of an oversight of the system designer as she builds the model, but the completeness check aids the analyst by highlighting these possible oversights. Deviation Analysis provides a way to evaluate the specification for robustness against incorrect inputs <ref> [RL97a, RL97b] </ref>. The analyst denotes potential hazardous outputs that she wants to check for and hypothesizes deviations in the inputs, for example, that measured speed is lower than actual speed.
Reference: [RL97b] <author> J.D. Reese and N.G. Leveson. </author> <title> Software deviation analysis: A safeware technique. </title> <booktitle> In AIChe 31st Annual Loss Prevention Symposium, </booktitle> <month> March </month> <year> 1997. </year>
Reference-contexts: This incompleteness in the specification is likely to be the result of an oversight of the system designer as she builds the model, but the completeness check aids the analyst by highlighting these possible oversights. Deviation Analysis provides a way to evaluate the specification for robustness against incorrect inputs <ref> [RL97a, RL97b] </ref>. The analyst denotes potential hazardous outputs that she wants to check for and hypothesizes deviations in the inputs, for example, that measured speed is lower than actual speed.
Reference: [SW95] <author> N.D. Sarter and D. Woods. </author> <title> How in the world did I ever get into that mode?": Mode error and awareness in supervisory control. </title> <booktitle> Human Factors, </booktitle> <volume> 37 </volume> <pages> 5-19, </pages> <year> 1995. </year>
Reference-contexts: Joint human-computer controlled systems change the human controller's function from an active controller to a supervisor and error handler. However, automation design has not changed to support the human controller's new role as a monitor of system behavior and backup controller in case of emergency <ref> [SW95] </ref>. The Operator Function Model (OFM) provides a tool to help improve automation design so that the human controller tasks are supported [Mit96].
Reference: [YGS89] <author> R.M. Young, T.R.G. Green, and T. Simon. </author> <title> Programmable user models for predictive evaluation of interface designs. </title> <booktitle> In Conference on Human Factors in Computing Systems (CHI '89), </booktitle> <pages> pages 15-19, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: The Programmable User Model (PUM), another executable model, provides a constrained cognitive architecture that can be programmed to simulate the user's execution of some set of tasks using a proposed interface <ref> [YGS89] </ref>. PUMs are meant to aid the interface designer in creating more usable designs by highlighting psychological considerations. Joint human-computer controlled systems change the human controller's function from an active controller to a supervisor and error handler.
Reference: [Yos96] <author> G.R. Yost. </author> <title> Implementing the Sisyphus-93 task using Soar/TAQL. </title> <journal> International Journal of Human-Computer Studies, </journal> <pages> 44(3-4), </pages> <year> 1996. </year>
Reference-contexts: Unlike many other task models, TKS is a tool for designing systems, not just evaluating existing designs. Executable task models have been developed and used for modeling human-computer interaction. Yost used the Soar/TAQL to model the Sisyphus-93 elevator-configuration task <ref> [Yos96] </ref>. To achieve an executable model, Yost began with a knowledge-level model of the task, refined this model to a problem-space model, then created the symbol-level model that is executable.
References-found: 14

