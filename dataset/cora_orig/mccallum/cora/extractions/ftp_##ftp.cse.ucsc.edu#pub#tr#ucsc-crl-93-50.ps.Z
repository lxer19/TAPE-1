URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-93-50.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Simulating Network Traffic In An Associative Processing Environment  
Author: Claude S Noshpitz 
Keyword: interprocessor communications, computer architecture, network traffic,  
Note: artificial intelligence, simulation  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: 7 December 1993  
Pubnum: UCSC-CRL-93-50  
Abstract: This thesis considers issues related to the design of a distributed computing system optimized for research in the area of artificial intelligence applications. We introduce the Associative Processing Environment, a computing model explicitly designed to provide support at the machine level for systems that learn. Issues relating to the implementation of a multicomputer based on this model are discussed with a focus on the development of an effective processor interconnection network. We describe APES, a software tool for the simulation of message traffic in such a system, and present a series of experiments testing the behavior of a parallelized AI application on several topologies. We conclude that the behavior of the application is such that an assumption of uniformly distributed random traffic fails to capture essential aspects of the program's communication activity. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [Almasi and Gottlieb, 1989] <author> George Almasi and Allan Gottlieb. </author> <title> Highly Parallel Computing. </title> <address> Benjamin/Cummins, Redwood City, CA, </address> <year> 1989. </year>
Reference-contexts: Historically, parallel supercomputers have been designed and optimized to run codes that are computation-intensive such as image analysis, weather prediction, and numerical analysis <ref> [Almasi and Gottlieb, 1989] </ref>. The patterns of interprocessor communication in these applications are usually well-defined and regular. By contrast, AI codes, especially those implementing a connectionist paradigm, tend to do little number-crunching and a large amount of irregular communication [Fahlman, 1979]. <p> This represents a key difference between the assumptions underlying most `scientific' applications and the connectionist style of AI. Many scientific problems are described as a regular tesselation over some computational space; communication requirements are thus predictable and regular, or at least deterministic <ref> [Almasi and Gottlieb, 1989] </ref>. The temporal and spatial structure of search in an ADB is not necessarily regular; in a system implementing adaptive-predictive search (APS) no a priori structure at all is imposed on the stored patterns or their relations.
Reference: [Ambriola et al., 1990] <author> V. Ambriola, P. Ciancarini, and M. Danelutto. </author> <title> Design and distributed implementation of the parallel logic language Shared Prolog. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(3) </volume> <pages> 40-49, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Further research in the area of parallel logic-based languages has been able to demonstrate good speedup in certain applications, such as the PARTHENON theorem prover reported in [Bose et al., 1992]. Some interesting parallel Prolog implementations have appeared, such as the one presented in <ref> [Ambriola et al., 1990] </ref>. The applicability of purely logic-based approaches to general AI research, however, remains to be seen [Shapiro, 1990]. The notion of `semantic memory' was introduced in 1968 with the publication of Quil-lian's dissertation [Quillian, 1968].
Reference: [Arvind and Nikhil, 1987] <author> Arvind and R. S. Nikhil. </author> <title> Executing a program on the MIT-TTD architecture. </title> <editor> In de Bakker, Nijman, and Treleaven, editors, </editor> <booktitle> Parallel Archtiectures and Languages Europe, </booktitle> <volume> volume 2, </volume> <year> 1987. </year>
Reference-contexts: The latencies due to this communication should also be masked. Since associative primitives involving the local SIMD array are expected to occupy a significant part of the actual execution time, the split-phase transaction model described in the hybrid dataflow literature <ref> [Arvind and Nikhil, 1987] </ref> seems appropriate. The Associative Array Each control processor is bound to a SIMD array of simple processors based on a CAM cell such as the PCAM [Roberts, 1990].
Reference: [Ballard et al., 1983] <author> D. H. Ballard, G.E G. E. Hinton, and T. J. Sejnowski. </author> <title> Parallel visual computation. </title> <journal> Nature, </journal> (5938):21-26, November 1983. 
Reference-contexts: This approach has shown reasonable success in some specific domains such as the modeling of certain areas of precognitive function including early vision processing <ref> [Ballard et al., 1983] </ref>. These areas, however, represent a highly specialized functions; it appears unlikely that any sort of generalized intelligence will be achieved using current neural network-style approaches.
Reference: [Bhuyan et al., 1989] <author> Laxmi N. Bhuyan, Qing Yang, and Dharma Agrawal. </author> <title> Performance of multiprocessor interconnection networks. </title> <journal> Computer, </journal> <volume> 22(2) </volume> <pages> 25-37, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Fat-trees [Leiserson, 1985] and multiple bus [Dai et al., 1991] systems appear to be good candidates, as do some members of the large class of k-ary n-cubes described in [Dally, 1990]. Many studies of network performance have been based on a model of uniform, randomly distributed message traffic <ref> [Patel, 1981, Bhuyan et al., 1989] </ref>. This is in fact not a particularly likely scenario in the applications described as the targets for APE.
Reference: [Bose et al., 1992] <author> Soumitra Bose, Edmund Clarke, et al. PARTHENON: </author> <title> A parellel theorem prover for non-horn clauses. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8, </volume> <year> 1992. </year>
Reference-contexts: Prolog [Clocksin and Mellish, 1981] emerged in the early 1980's as a candidate for an easy-to-understand, easy-to-parallelize language for AI applications. Further research in the area of parallel logic-based languages has been able to demonstrate good speedup in certain applications, such as the PARTHENON theorem prover reported in <ref> [Bose et al., 1992] </ref>. Some interesting parallel Prolog implementations have appeared, such as the one presented in [Ambriola et al., 1990]. The applicability of purely logic-based approaches to general AI research, however, remains to be seen [Shapiro, 1990].
Reference: [Burks et al., 1947] <author> Arthur Burks, Herman Goldstine, and John von Neumann. </author> <title> Preliminary discussion of the logical design an electronic computing instrument. </title> <type> Technical report, </type> <institution> Institute for Advanced Study, Princeton, NJ, </institution> <month> September </month> <year> 1947. </year>
Reference-contexts: This is in sharp contrast to the conventional computational model originally described by von Neumann <ref> [Burks et al., 1947] </ref>, whose explicit intention was the movement of individual data items among specific locations using unique addresses. Given these definitions, we extend the conventional notions of data manipulation to include the accessing of data by content rather than by location.
Reference: [Chien and Kim, 1992] <author> Andrew A. Chien and Jae H. Kim. </author> <title> Planar-adaptive routing: Low-cost adaptive networks for multiprocessors. </title> <booktitle> In 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 268-277. </pages> <institution> Association for Computing Machinery, </institution> <year> 1992. </year>
Reference-contexts: done if each node could be programmed independently. * Virtual-circuit buffering [Dally, 1992] | An adjunct to adaptive routing, support for this buffering scheme would greatly expand the range of system parameters. * Adaptive routing | A number of adaptive routing algorithms with favorable behaviors are described in the literature <ref> [Glass and Ni, , Chien and Kim, 1992, Konstantinidou, 1990] </ref>, particularly in conjunction with virtual-circuit buffering mechanisms. * Parallel implementation | The simulator is a good candidate for porting to a massively parallel SIMD platform such as the Maspar MP-1 [Nickolls, 1990].
Reference: [Clocksin and Mellish, 1981] <author> W. F. Clocksin and C. S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: Efforts have been made to parallelize the systems, and fair speedups have been obtained on specialized 2 hardware [Gupta, 1984]. Prolog <ref> [Clocksin and Mellish, 1981] </ref> emerged in the early 1980's as a candidate for an easy-to-understand, easy-to-parallelize language for AI applications.
Reference: [Cook and L. B. Holder, 1990] <author> D. J. Cook and L.B L. B. Holder. </author> <title> Accelerated learning on the connection machine. </title> <booktitle> In Proceedings of the Second IEEE Symposium on Parallel and Distributed Processing 1990, </booktitle> <pages> pages 448-454. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: Parallel Lisps do not seem to have had a dramatic impact on the structure or performance of AI programs. The data-parallel *Lisp [Hillis, 1985] encumbers the programmer with language limitations and its performance is dominated by the mediocre throughput of the CM-2's global router network <ref> [Cook and L. B. Holder, 1990] </ref>. Other approaches, such as Multilisp [Jr., 1987], extend the language with awkward syntactic structures supporting only a coarse-grained parallelism. Neither style of approach seems to have significantly affected the design of Lisp programs themselves.
Reference: [Dai et al., 1991] <author> Wayne W. Dai, Yoji Kajitani, and Yorihiko Hirata. </author> <title> Multiple bus networks based on block designs. </title> <booktitle> In 1991 IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pages 1009-1012 vol. 2. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: The choice of which topology to use is not altogether straightforward; it is possible for implementation and technology-related issues to overwhelm theoretical analysis in actual network performance. Fat-trees [Leiserson, 1985] and multiple bus <ref> [Dai et al., 1991] </ref> systems appear to be good candidates, as do some members of the large class of k-ary n-cubes described in [Dally, 1990]. Many studies of network performance have been based on a model of uniform, randomly distributed message traffic [Patel, 1981, Bhuyan et al., 1989].
Reference: [Dally, 1990] <author> William J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <editor> In Winston and Shellard, editors, </editor> <booktitle> Artificial Intelligence at MIT, chapter 21. </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Fat-trees [Leiserson, 1985] and multiple bus [Dai et al., 1991] systems appear to be good candidates, as do some members of the large class of k-ary n-cubes described in <ref> [Dally, 1990] </ref>. Many studies of network performance have been based on a model of uniform, randomly distributed message traffic [Patel, 1981, Bhuyan et al., 1989]. This is in fact not a particularly likely scenario in the applications described as the targets for APE. <p> Greater detail on the generation of the communication profile can be found in section 4.5 and in Appendix A. 5.2.2 The experimental topologies The topologies used in the experiments were selected from the family of k-ary n-cubes <ref> [Dally, 1990] </ref>. This class of topology is of considerable interest because isomorphisms exist between k-ary n-cubes and a wide array of other topologies including multistage switching networks, meshes, tori, and hypercubes. Because of the networks' regularity, the switching elements required to implement routing can be designed compactly. <p> Because of the networks' regularity, the switching elements required to implement routing can be designed compactly. In addition, efficient, straightforward deadlock-free routing algorithms are available. One metric that can be used to classify k-ary n-cubes is bisection width, described in <ref> [Dally, 1990] </ref>. The bisection width B (k; n) of a k-ary n-cube network is defined as the minimum number of links that cross an even partitioning of the network, that is, the smallest number of links that can be cut when the network is divided into two equal-sized parts.
Reference: [Dally, 1992] <author> William J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(2), </volume> <month> Mar </month> <year> 1992. </year>
Reference-contexts: The cost, of course, is in computational complexity. Fixed routing schemes can be vulnerable to blocking (increasing latency) and deadlock, but are relatively efficient to implement. Another approach is the use of virtual channels <ref> [Dally, 1992] </ref> to split available bandwidth into independently buffered data streams at the cost of increasing the expense of buffers and routing logic; the cost is balanced by provably deadlock-free operation (again at the cost of some computation to route appropriately). 1 These processors are not part of the explicit topology <p> head of a message does not reach the destination until all flits have completely propagated through the network. * Blocking behavior: wormhole buffering can easily cause the entire network to block if a circular wait condition arises; this is combated by clever routing techniques including adaptive routing and virtual channels <ref> [Dally, 1992] </ref>. While effective, these techniques increase the cost of routing logic and buffering resources. Store-and-forward buffering is less vulnerable to deadlock, assuming buffer sizes are sufficient at each router. Synchronization All actions in the simulator are coordinated by the master simulation clock. <p> of the traffic in the network itself as the simulation is running; the search for emergent behaviors would be greatly facilitated by this feature. * Individual distribution parameters for each node | more detailed probabilistic simu lations could be done if each node could be programmed independently. * Virtual-circuit buffering <ref> [Dally, 1992] </ref> | An adjunct to adaptive routing, support for this buffering scheme would greatly expand the range of system parameters. * Adaptive routing | A number of adaptive routing algorithms with favorable behaviors are described in the literature [Glass and Ni, , Chien and Kim, 1992, Konstantinidou, 1990], particularly in
Reference: [Deering, 1984] <author> Micheal F. Deering. </author> <title> Hardware and software techniques for efficient AI. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 73-78. </pages> <booktitle> American Association for Artificial Intelligence, </booktitle> <year> 1984. </year>
Reference-contexts: A standard Lisp program, however, regardless of its elegance in exploiting the list-processing programming model, suffers from the relatively high overhead and low degree of parallelizability of Lisp <ref> [Deering, 1984] </ref>. Many applications have thus been coded in Lisp, recoded, and recoded again in efforts to extract the best possible performance. Parallel Lisps do not seem to have had a dramatic impact on the structure or performance of AI programs.
Reference: [Ellis, 1992] <author> Gerard Ellis. </author> <title> Efficient rertrieval from hierarchies of objects using lattice operations. </title> <type> Technical report, </type> <institution> Key Centre for Software Technology, University of Brisbane, Brisbane, QLD 4072 Australia, </institution> <year> 1992. </year>
Reference-contexts: Because they are based on semantic rather than syntactic rules, CGs can expose underlying structure in the feature space. * Associative database (ADB) and pattern retrieval method: a scheme to organize and manipulate patterns according to a subsumption relation such as more-general-than (as described in <ref> [Ellis, 1992] </ref>). Patterns are to be classified into a partial order according to their relationships with other patterns in the database. * Search method: strategy to select those patterns from the ADB most likely to lead to the desired result.
Reference: [Fahlman, 1979] <author> Scott E. Fahlman. </author> <title> Netl: A System For Representing And Using Real-World Knowledge. </title> <publisher> MIT Press, </publisher> <year> 1979. </year> <note> References 47 </note>
Reference-contexts: The patterns of interprocessor communication in these applications are usually well-defined and regular. By contrast, AI codes, especially those implementing a connectionist paradigm, tend to do little number-crunching and a large amount of irregular communication <ref> [Fahlman, 1979] </ref>. AI applications have been developed on all sorts of machines, and a number of specialized architectures exist [Wah and Li, 1989, Feigenbaum and McCorduck, 1983]. At present, however, there are few `general-purpose' AI machines widely available. <p> Some relatively simple problems were run with modest results, but various shortcomings of the model caused it to fall into relative obscurity for several years. A decade later, Fahlman presented the NETL system <ref> [Fahlman, 1979] </ref>, extending the Quillian model and generalizing it into more concrete terms. NETL effectively described an architectural abstraction of semantic memory that could be evaluated in concrete terms. <p> Design choices based on this model of data access must be made as early as possible. Massive parallelism is appropriate to the needs of connectionist system; multiprocessing is a natural consequence of their structure, and the mapping to many-processor systems <ref> [Fahlman, 1979] </ref> is easy. In the case of marker propagation systems in particular, very large amounts of interprocessor traffic occur during processing [Miranker and Andrews, 1990]; it is worth noting that the size of marker messages is typically very small.
Reference: [Fahlman, 1980] <author> Scott E. Fahlman. </author> <title> Design sketch for a million-element netl machine. </title> <booktitle> In The First Annual Conference on Artificial Intelligence. AAAI, </booktitle> <month> August </month> <year> 1980. </year>
Reference-contexts: Semantic networks were conceived as a realizable hardware model that could actually be built with existing technology rather than just as an abstract mental experiment. Fahlman believed that at least a million processing elements would be necessary before his machine could produce any `interesting' results <ref> [Fahlman, 1980] </ref>. This was well beyond the limits of technology, at least with respect to funding at the university research level.
Reference: [Feigenbaum and McCorduck, 1983] <author> Edward Feigenbaum and Pamela McCorduck. </author> <booktitle> The Fifth Generation: artificial intelligence and Japan's computer challenge to the world. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: By contrast, AI codes, especially those implementing a connectionist paradigm, tend to do little number-crunching and a large amount of irregular communication [Fahlman, 1979]. AI applications have been developed on all sorts of machines, and a number of specialized architectures exist <ref> [Wah and Li, 1989, Feigenbaum and McCorduck, 1983] </ref>. At present, however, there are few `general-purpose' AI machines widely available.
Reference: [Felperin et al., 1991] <author> Sergio A. Felperin, Luis Gravano, Gustavo D. Pifarre, and Jorge L.C. Sanz. </author> <title> Routing techniques for massively parallel communication. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 79(4) </volume> <pages> 488-503, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Features 23 The philosophy implemented in APES is to provide the simplest and most general degree of functionality possible. Therefore, only fixed routing methods are supported. These include dimension routing (described in [Hillis, 1985] and in a more general form in <ref> [Felperin et al., 1991] </ref>) which routes in fixed order along each dimension of a cube-like structure 2 , and an explicit routing based on the equivalent of a global routing table.
Reference: [Forgy, 1982] <author> Charles L. Forgy. </author> <title> Rete: a fast algorithm for the many pattern/many object pattern problem. </title> <journal> AI Journal, </journal> <year> 1982. </year>
Reference-contexts: This was well beyond the limits of technology, at least with respect to funding at the university research level. Other work in semantic net architectures [Moldovan et al., 1990, Hendler, 1988] has continued, popularized in the book Parallel Distributed Processing [McClelland et al., 1986]. 2 The RETE algorithm <ref> [Forgy, 1982] </ref>, physically embodied in the DADO and NON-VON machines reported in [Stolfo, 1984] and [Shaw, 1985], provided speedup based on the significant degree of parallelism implicit in the serial algorithm itself. 2.2. <p> It is sometimes possible, however, to leverage resources by exploiting parallelism both at the data level, as in the text-retrieval applications on the Connection Machine [Stanfill and Kahle, 1986] which have shown very good performance on complex searches, and at the algorithm level as in the parallel Rete match <ref> [Forgy, 1982] </ref> which does a static dataflow analysis and partitions the problem among available processors for a respectable speedup. Much implementation effort has gone into shoehorning inherently parallel algorithms into Von Neumann-style platforms.
Reference: [Forrest, 1991] <editor> Stephanie Forrest. Introduction. In Stephanie Forrest, editor, </editor> <title> Emergent Computation. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: could easily be done using the facilities available in APES. 6.4 Emergent properties Complex nonlinear systems generally exhibit high-level behaviors that are not obviously related to conditions measurable within the systems themselves [Gleick, 1988]; observation of these macrobehaviors can yield valuable insights into levels of underlying order in the system <ref> [Forrest, 1991] </ref>. The adaptive-predictive search (APS) paradigm as described in [Levinson et al., 1992] is predicated on non-deterministic recombination of feature patterns in an effort to extract structure from the underlying representation.
Reference: [Glass and Ni, ] <author> Christopher J. Glass and Lionel M. Ni. </author> <title> The turn model for adaptive routing. </title> <booktitle> In 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 278-287. </pages> <institution> Association for Computing Machinery. </institution>
Reference: [Gleick, 1988] <author> James Gleick. </author> <title> Chaos: making a new science. </title> <publisher> Penguin Books, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: It is anticipated that once a computer system builds a complex enough world model, that model may begin to behave as a chaotic system <ref> [Gleick, 1988] </ref> rather than a strictly deterministic one. <p> Exploring simple allocation methods would be a worthwhile study that could easily be done using the facilities available in APES. 6.4 Emergent properties Complex nonlinear systems generally exhibit high-level behaviors that are not obviously related to conditions measurable within the systems themselves <ref> [Gleick, 1988] </ref>; observation of these macrobehaviors can yield valuable insights into levels of underlying order in the system [Forrest, 1991]. The adaptive-predictive search (APS) paradigm as described in [Levinson et al., 1992] is predicated on non-deterministic recombination of feature patterns in an effort to extract structure from the underlying representation.
Reference: [Gould and Levinson, 1991] <author> Jeffrey Gould and Robert Levinson. </author> <title> Method integration for experience-based learning. </title> <type> Technical Report CRL-91-27, </type> <institution> Univerity of California, Santa Cruz, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Much implementation effort has gone into shoehorning inherently parallel algorithms into Von Neumann-style platforms. A case in point is the Morph program; a tremendous amount of its development effort has been aimed at tuning the code to achieve decent performance <ref> [Gould and Levinson, 1991] </ref>. In effect, the underlying algorithms have been tweaked until they run reasonably on the available hardware. The refinements to the algorithms are thus driven less by abstract issues of theory than by hardware constraints. 2.4. <p> The experience-based learning (EBL) method described in <ref> [Gould and Levinson, 1991] </ref> suggests the use of a simple form of temporal-difference (TD) learning [Sutton, 1987], which assigns positive or negative credit to patterns contributing to a particular experimental outcome. * Pattern generation method: a facility that creates new patterns both by integrating new observations into the ADB and by
Reference: [Gupta and Forgy, 1989] <author> A. Gupta and Charles L. Forgy. </author> <title> Static and run-time characteristics of OPS5 production systems. </title> <journal> Journal Of Parallel And Distributed Computing, </journal> <volume> 7(1), </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: Current production systems are in use in applications as diverse as computer system configuration (the R1 system at DEC) and medical diagnosis (MYCIN and its descendants). In general, these systems are able to work faster and possibly better <ref> [Gupta and Forgy, 1989] </ref> than humans in extremely limited domains; they are quite incapable of generalizing to new situations [Shapiro, 1990]. Efforts have been made to parallelize the systems, and fair speedups have been obtained on specialized 2 hardware [Gupta, 1984].
Reference: [Gupta, 1984] <author> A. Gupta. </author> <title> Implementing OPS5 production systems on DADO. </title> <booktitle> In International Conference on Parallel Processing. IEEE, </booktitle> <year> 1984. </year>
Reference-contexts: Efforts have been made to parallelize the systems, and fair speedups have been obtained on specialized 2 hardware <ref> [Gupta, 1984] </ref>. Prolog [Clocksin and Mellish, 1981] emerged in the early 1980's as a candidate for an easy-to-understand, easy-to-parallelize language for AI applications.
Reference: [Hart et al., 1968] <author> P. E. Hart, N. J. Nilsson, and B. Raphael. </author> <title> A formal basis for the determination of minimum cost paths. </title> <journal> IEEE Transactions on SSC, </journal> <volume> 4 </volume> <pages> 100-107, </pages> <year> 1968. </year>
Reference-contexts: If no feedback (in the form of a trainer) is available from the environment until the goal predicate is satisfied, then little can be done besides brute-force search. Numerous informed search methods exist, however, for exploiting the information provided by some environmental feedback. Well-explored techniques such as A* <ref> [Hart et al., 1968, Hart et al., 1972] </ref> are proven to converge and are able to find optimal solutions.
Reference: [Hart et al., 1972] <author> P. E. Hart, N. J. Nilsson, and B. Raphael. </author> <title> Corrections to a formal basis for the determination of minimum cost paths. </title> <journal> SIGART Newsletter, </journal> <volume> 37 </volume> <pages> 28-29, </pages> <year> 1972. </year>
Reference-contexts: If no feedback (in the form of a trainer) is available from the environment until the goal predicate is satisfied, then little can be done besides brute-force search. Numerous informed search methods exist, however, for exploiting the information provided by some environmental feedback. Well-explored techniques such as A* <ref> [Hart et al., 1968, Hart et al., 1972] </ref> are proven to converge and are able to find optimal solutions.
Reference: [Helmbold and McDowell, 1991] <author> David P. Helmbold and Charlie E. McDowell. </author> <title> Computing reachable states of parallel programs. </title> <journal> SIGPLAN Notices, </journal> (12):76-84, December 1991. 
Reference-contexts: The communication profile consists of a set of groups of potentially concurrent message events. Each group of events is delimited by synchronization barriers derived from a streamlined data dependency analysis of the application program. Since in the general case this is an NP-hard problem <ref> [Helmbold and McDowell, 1991] </ref>, we make the simplifying assumption that a group of read accesses not separated by a write constitute a potentially concurrent segment. Although weaker than actual dependency analysis, we suggest that this approach abstracts enough of the application's object access behavior to constitute a valid model. <p> There are also events that have no dependencies on each other so that they could happen in any order. In the general case, this sort of dependency analysis is at best an NP-hard problem <ref> [Helmbold and McDowell, 1991] </ref>. A concurrency graph must be generated which represents all possible program states during execution. Analysis of this graph then provides enough information to determine which events could have occurred concurrently.
Reference: [Hendler, 1988] <author> James A. Hendler. </author> <title> Integrating Marker-Passing and Problem-Solving. </title> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1988. </year>
Reference-contexts: Fahlman believed that at least a million processing elements would be necessary before his machine could produce any `interesting' results [Fahlman, 1980]. This was well beyond the limits of technology, at least with respect to funding at the university research level. Other work in semantic net architectures <ref> [Moldovan et al., 1990, Hendler, 1988] </ref> has continued, popularized in the book Parallel Distributed Processing [McClelland et al., 1986]. 2 The RETE algorithm [Forgy, 1982], physically embodied in the DADO and NON-VON machines reported in [Stolfo, 1984] and [Shaw, 1985], provided speedup based on the significant degree of parallelism implicit in
Reference: [Henessy and Patterson, 1989] <editor> John Henessy and David Patterson. </editor> <booktitle> Computer Architecture: </booktitle>
Reference-contexts: The parameters depend on the architecture of the processors and on assumptions about distribution of data in the system over time. Representative distributions for various applications can be generated by conducting statistical analysis of the application program's behavior. This simulation strategy extends the design philosophy described in <ref> [Henessy and Patterson, 1989] </ref>. The idea is to analyze many variants of a particular idea without losing the underlying abstraction and without requiring extremely detailed simulation of each processor. 4.7 Simulation data Massive amounts of data are generated during a simulation.
References-found: 32

