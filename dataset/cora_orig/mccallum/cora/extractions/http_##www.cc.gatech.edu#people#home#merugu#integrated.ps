URL: http://www.cc.gatech.edu/people/home/merugu/integrated.ps
Refering-URL: http://www.cs.gatech.edu/people/home/merugu/resume.html
Root-URL: 
Email: fgmani@bronto.,shashi@bronto.,manikuti@bronto.,murthy@giitm.ernet.in  
Title: Integrated Scheduling of Tasks and Messages in Distributed Real-time Systems  
Author: G.Manimaran M.Shashidhar Anand Manikutty C.Siva Ram Murthy 
Address: Madras 600 036, INDIA  
Affiliation: Department of Computer Science and Engineering Indian Institute of Technology  
Abstract: The scheduling of tasks in distributed real-time systems has attracted many researchers in the recent past. The distributed real-time system considered here consists of uniprocessor or multiprocessor nodes connected through a multihop network. Scheduling in such a system involves scheduling of dynamically arriving tasks within a node (local scheduling) and migration of tasks across the network (global scheduling) if it is not possible to schedule them locally. Most of the existing schemes on distributed real-time task scheduling ignore the underlying message scheduling required for global scheduling of tasks. These schemes consider the load on the processors at a node as the basis to migrate tasks from a heavily loaded node (sender) to a lightly loaded node (receiver). We believe that the identification of a receiver node should be based not only on the load on its processors, but also on the availability of a lightly loaded path from the sender to that receiver. In this paper, we present an integrated framework for distributed real-time dynamic task scheduling (i) by proposing algorithms for transfer, location, and information policies which take into account the states of both the processors and the links, and (ii) by proposing interactions among these policies and schedulers so that the guarantee ratio (ratio of number of tasks guaranteed to the number of tasks arrived) is improved as compared to algorithms where only local scheduling is done. For local scheduling, we use a variation of myopic algorithm [10]. The effectiveness of the proposed framework has been evaluated through simulation. fl This work was supported by the Department of Science and Technology, New Delhi.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chia Shen, K. Ramamritham, and J.A. Stankovic. </author> <title> Resource reclaiming in multiprocessor real-time systems. </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> 4(4) </volume> <pages> 382-397, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The communication between the task scheduler and the processors is through dispatch queues. Each processor has its own dispatch queue. The task scheduler runs in parallel with the processors, scheduling the newly arriving tasks, and periodically updating the dispatch queues <ref> [1] </ref>. Three important components of a global scheduling algorithm are its transfer policy, location policy, and information policy [16]. The transfer policy at a node determines whether the node is in a suitable state to participate in a task transfer either as a sender or as a receiver .
Reference: [2] <author> D. Ferguson, Y. Yemini, and A. Nikalaou. </author> <title> Microeconomic algorithms for load balancing in distributed computer systems. </title> <booktitle> In Proc. Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 491-499, </pages> <year> 1988. </year>
Reference-contexts: This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated [11, 12, 8, 18], in which potential senders search for suitable receivers, receiver-initiated <ref> [2] </ref>, in which potential receivers search for suitable senders, and symmetrically initiated [17], in which both senders and receivers search for complementary nodes. The information policy decides when information about the states of other nodes in the system is collected, what information is collected, and where it is collected from.
Reference: [3] <author> D. Ferrari and D.C. Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE JSAC, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: There are two distinct phases involved in handling real-time channels: channel establishment and run-time message scheduling. The channel establishment phase involves the selection of a route for the channel satisfying traffic characteristics and performance requirements. In <ref> [3] </ref>, a scheme for establishing a real-time channel has been discussed. The real-time channel establishment procedure with associated schedulability check and run-time scheduling of messages in a multihop network is given in [4].
Reference: [4] <author> D.D. Kandlur, K.G. Shin, and D. Ferrari. </author> <title> Real-time communication in multihop networks. </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> 5(10) </volume> <pages> 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In [3], a scheme for establishing a real-time channel has been discussed. The real-time channel establishment procedure with associated schedulability check and run-time scheduling of messages in a multihop network is given in <ref> [4] </ref>. Algorithms for distributed scheduling of real-time tasks in multiple-access and multihop networks are proposed in [9] and [19], respectively. Unlike ours, these algorithms consider periodic tasks whose schedule is constructed off-line. The objective of any distributed real-time scheduling algorithm is to meet the deadlines of dynamically arriving tasks.
Reference: [5] <author> G. Manimaran and C. Siva Ram Murthy. </author> <title> Integrated scheduling of tasks and messages in distributed real-time systems. </title> <type> Technical report, </type> <institution> Dept. of Computer Science and Engg., Indian Institute of Technology, Madras, </institution> <year> 1996. </year>
Reference-contexts: Also, even if there is a routing path, it might be costlier than the routing path to some other possible receiver which has not been considered <ref> [5] </ref>. This may result in missing of task deadlines. The above problem motivates us to define the state of a node as the combination of the load on its processors as well as that on its links. <p> to transfer a task from a heavily loaded node (i.e., the sender) in a very short duration of time (at most two steps) and simultaneously keeps the number of state exchange messages small. 2.3.2 State Exchange Protocol Nodes exchange state messages containing the state of both their processors and links <ref> [5] </ref>. This aids in identifying an actual receiver node overcoming the problems stated in Section 2.1. We use the following protocol which depends on the processor state: * LIGHT state: Inform (LIGHT) message is sent to its In form set nodes. <p> Interaction Between Message Scheduler and Transfer Policy The motivation for interaction between the message scheduler (MS) and transfer policy (TP) <ref> [5] </ref> is given below and the effect of interaction is given in Fig.3. 1.
Reference: [6] <author> G. Manimaran and C. Siva Ram Murthy. </author> <title> Efficient fault-tolerant scheduling on real-time multiprocessor systems. </title> <type> Technical report, </type> <institution> Dept. of Computer Science and Engg., Indian Institute of Technology, Madras, </institution> <year> 1996. </year>
Reference-contexts: Scheduling in distributed real-time systems involves scheduling of tasks within a node (local scheduling), migration of tasks to other nodes (global scheduling) if it is not possible to schedule them locally, and scheduling of messages on communication links (message scheduling). The problem of local scheduling <ref> [15, 13, 6, 10] </ref> is to determine when and on which processor a given task executes. For scheduling tasks in a node, all the tasks arrive at the task scheduler (which does local scheduling) from where they are distributed to other processors in the node for execution. <p> Task Scheduler The myopic algorithm, proposed in [10] for scheduling aperiodic tasks with resource constraints, is a heuristic search algorithm which operates on a set of tasks. A variation of myopic algorithm <ref> [6] </ref> has been used for local scheduling that works as follows: 1. Order the tasks in non-decreasing order of deadline (d i ) in the task queue. 2. Start with an empty partial schedule. (i.e., no task in the schedule). 3.
Reference: [7] <author> H. Zhang. </author> <title> Service disciplines for guaranteed performance service in packet-switching networks. </title> <journal> Proc. IEEE, </journal> <volume> 83(10) </volume> <pages> 1374-1396, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Task scheduler: a variation of myopic scheduling algorithm [10] (scheduling algorithm used in the Spring kernel) has been used for local scheduling. 2. Message scheduler: a rate-based scheduler similar to Hierarchical Round Robin (HRR) <ref> [7] </ref> has been used for message scheduling. 3. Information Policy: a new Maekawa set [14] based state exchange protocol has been proposed. 4. Transfer Policy: a new adaptive load determination al gorithm has been proposed. 5. <p> The tasks with all these information filled are called el igible tasks for migration. 2.6. Message Scheduler The tasks in the migration queue which are marked eligible by the location policy are considered for transfer by the message scheduler. The HRR <ref> [7] </ref> scheduling policy has been used for message scheduling.
Reference: [8] <author> J.A. Stankovic, K. Ramamritham, and S. Cheng. </author> <title> Evaluation of a flexible task scheduling algorithm for distributed hard real-time systems. </title> <journal> IEEE Trans. Computers, </journal> <volume> 34(12) </volume> <pages> 1130-1143, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated <ref> [11, 12, 8, 18] </ref>, in which potential senders search for suitable receivers, receiver-initiated [2], in which potential receivers search for suitable senders, and symmetrically initiated [17], in which both senders and receivers search for complementary nodes.
Reference: [9] <author> K. Ramamritham. </author> <title> Allocation and scheduling of precedence-related periodic tasks. </title> <journal> IEEE Trans. Computers, </journal> <volume> 6(4) </volume> <pages> 412-420, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: In [3], a scheme for establishing a real-time channel has been discussed. The real-time channel establishment procedure with associated schedulability check and run-time scheduling of messages in a multihop network is given in [4]. Algorithms for distributed scheduling of real-time tasks in multiple-access and multihop networks are proposed in <ref> [9] </ref> and [19], respectively. Unlike ours, these algorithms consider periodic tasks whose schedule is constructed off-line. The objective of any distributed real-time scheduling algorithm is to meet the deadlines of dynamically arriving tasks.
Reference: [10] <author> K. Ramamritham, J. A. Stankovic, and Perng-Fei Shiah. </author> <title> Efficient scheduling algorithms for real-time multiprocessor systems. </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 184-194, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Scheduling in distributed real-time systems involves scheduling of tasks within a node (local scheduling), migration of tasks to other nodes (global scheduling) if it is not possible to schedule them locally, and scheduling of messages on communication links (message scheduling). The problem of local scheduling <ref> [15, 13, 6, 10] </ref> is to determine when and on which processor a given task executes. For scheduling tasks in a node, all the tasks arrive at the task scheduler (which does local scheduling) from where they are distributed to other processors in the node for execution. <p> Our Approach to the Distributed Scheduling In this section, we present our approach to the distributed real-time scheduling problem which involves the following: 1. Task scheduler: a variation of myopic scheduling algorithm <ref> [10] </ref> (scheduling algorithm used in the Spring kernel) has been used for local scheduling. 2. Message scheduler: a rate-based scheduler similar to Hierarchical Round Robin (HRR) [7] has been used for message scheduling. 3. Information Policy: a new Maekawa set [14] based state exchange protocol has been proposed. 4. <p> A node is said to be in HEAVY state if its processor state is HEAVY irrespective of its link state. 2.2. Task Scheduler The myopic algorithm, proposed in <ref> [10] </ref> for scheduling aperiodic tasks with resource constraints, is a heuristic search algorithm which operates on a set of tasks. A variation of myopic algorithm [6] has been used for local scheduling that works as follows: 1.
Reference: [11] <author> K. Ramamritham, J.A. Stankovic, and W. Zhao. </author> <title> Distributed scheduling of tasks with deadlines and resource requirements. </title> <journal> IEEE Trans. Computers, </journal> <volume> 38(8) </volume> <pages> 1110-1123, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated <ref> [11, 12, 8, 18] </ref>, in which potential senders search for suitable receivers, receiver-initiated [2], in which potential receivers search for suitable senders, and symmetrically initiated [17], in which both senders and receivers search for complementary nodes.
Reference: [12] <author> Kang G. Shin and Y.G. Chang. </author> <title> Load sharing in distributed real-time systems with state-change broadcasts. </title> <journal> IEEE Trans. Computers, </journal> <volume> 38(8) </volume> <pages> 1124-1142, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: The transfer policy at a node determines whether the node is in a suitable state to participate in a task transfer either as a sender or as a receiver . Many proposed transfer policies are threshold based <ref> [17, 12] </ref>. The location policy at a node determines where a task should be transferred. Most of the existing location policies find a suitable receiver node through polling. <p> This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated <ref> [11, 12, 8, 18] </ref>, in which potential senders search for suitable receivers, receiver-initiated [2], in which potential receivers search for suitable senders, and symmetrically initiated [17], in which both senders and receivers search for complementary nodes.
Reference: [13] <author> Kwang S. Hong and Joseph Y-T. Leung. </author> <title> On-line scheduling of real-time tasks. </title> <journal> IEEE Trans. Computer, </journal> <volume> 41(10) </volume> <pages> 1326-1331, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Scheduling in distributed real-time systems involves scheduling of tasks within a node (local scheduling), migration of tasks to other nodes (global scheduling) if it is not possible to schedule them locally, and scheduling of messages on communication links (message scheduling). The problem of local scheduling <ref> [15, 13, 6, 10] </ref> is to determine when and on which processor a given task executes. For scheduling tasks in a node, all the tasks arrive at the task scheduler (which does local scheduling) from where they are distributed to other processors in the node for execution.
Reference: [14] <author> M. Maekawa. </author> <title> A p n algorithm for mutual exclusion in decentralised systems. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 2(2) </volume> <pages> 145-158, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Task scheduler: a variation of myopic scheduling algorithm [10] (scheduling algorithm used in the Spring kernel) has been used for local scheduling. 2. Message scheduler: a rate-based scheduler similar to Hierarchical Round Robin (HRR) [7] has been used for message scheduling. 3. Information Policy: a new Maekawa set <ref> [14] </ref> based state exchange protocol has been proposed. 4. Transfer Policy: a new adaptive load determination al gorithm has been proposed. 5. <p> Information Policy Here, we propose a new information policy algorithm for distributed real-time task scheduling. This algorithm is based on the Maekawa set used in distributed mutual exclu-sion algorithm <ref> [14] </ref>. In the algorithm, the sender does not probe nodes for receiving a task. Instead it collects information about potential receivers in advance. <p> The Request set is constructed using finite projective plane method and the size of the set is p N <ref> [14] </ref>, where N is the number of nodes. The Inform set is the same as the Request set. The Status set is the set of all nodes in whose Request set the present node lies.
Reference: [15] <author> M.L. Dertouzos and A.K. Mok. </author> <title> Multiprocessor on-line scheduling of hard real-time tasks. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 15(12) </volume> <pages> 1497-1506, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Scheduling in distributed real-time systems involves scheduling of tasks within a node (local scheduling), migration of tasks to other nodes (global scheduling) if it is not possible to schedule them locally, and scheduling of messages on communication links (message scheduling). The problem of local scheduling <ref> [15, 13, 6, 10] </ref> is to determine when and on which processor a given task executes. For scheduling tasks in a node, all the tasks arrive at the task scheduler (which does local scheduling) from where they are distributed to other processors in the node for execution.
Reference: [16] <author> N.G. Shivaratri, P. Krueger, and M. Singhal. </author> <title> Load distributing for locally distributed systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 33-44, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Each processor has its own dispatch queue. The task scheduler runs in parallel with the processors, scheduling the newly arriving tasks, and periodically updating the dispatch queues [1]. Three important components of a global scheduling algorithm are its transfer policy, location policy, and information policy <ref> [16] </ref>. The transfer policy at a node determines whether the node is in a suitable state to participate in a task transfer either as a sender or as a receiver . Many proposed transfer policies are threshold based [17, 12].
Reference: [17] <author> P. Krueger and N.G. Shivaratri. </author> <title> Adaptive location policies for global scheduling. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 20(6) </volume> <pages> 432-444, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The transfer policy at a node determines whether the node is in a suitable state to participate in a task transfer either as a sender or as a receiver . Many proposed transfer policies are threshold based <ref> [17, 12] </ref>. The location policy at a node determines where a task should be transferred. Most of the existing location policies find a suitable receiver node through polling. <p> This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated [11, 12, 8, 18], in which potential senders search for suitable receivers, receiver-initiated [2], in which potential receivers search for suitable senders, and symmetrically initiated <ref> [17] </ref>, in which both senders and receivers search for complementary nodes. The information policy decides when information about the states of other nodes in the system is collected, what information is collected, and where it is collected from.
Reference: [18] <author> S. Zhou. </author> <title> A trace-driven simulation study of dynamic load balancing. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 14(9) </volume> <pages> 1327-1341, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: This causes the missing of tasks' deadlines. Location policies are broadly classified as sender-initiated <ref> [11, 12, 8, 18] </ref>, in which potential senders search for suitable receivers, receiver-initiated [2], in which potential receivers search for suitable senders, and symmetrically initiated [17], in which both senders and receivers search for complementary nodes.
Reference: [19] <author> T.F. Abdelzaher and Kang G. Shin. </author> <title> Optimal combined task and message scheduling in distributed real-time systems. </title> <booktitle> In Real-Time Systems Symp., </booktitle> <pages> pages 162-171, </pages> <year> 1995. </year>
Reference-contexts: The real-time channel establishment procedure with associated schedulability check and run-time scheduling of messages in a multihop network is given in [4]. Algorithms for distributed scheduling of real-time tasks in multiple-access and multihop networks are proposed in [9] and <ref> [19] </ref>, respectively. Unlike ours, these algorithms consider periodic tasks whose schedule is constructed off-line. The objective of any distributed real-time scheduling algorithm is to meet the deadlines of dynamically arriving tasks.
References-found: 19

