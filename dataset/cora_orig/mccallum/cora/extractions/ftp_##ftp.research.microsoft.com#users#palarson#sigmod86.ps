URL: ftp://ftp.research.microsoft.com/users/palarson/sigmod86.ps
Refering-URL: http://www.research.microsoft.com/~palarson/publications.htm
Root-URL: http://www.research.microsoft.com
Title: Efficiently Updating Materialized Views  
Author: Jose A. Blakeley, Per -Ake Larson, Frank Wm. Tompa 
Address: Waterloo, Ontario, N2L 3G1  
Affiliation: Data Structuring Group, Department of Computer Science, University of Waterloo,  
Abstract: Query processing can be sped up by keeping frequently accessed users' views materialized. However, the need to access base relations in response to queries can be avoided only if the materialized view is adequately maintained. We propose a method in which all database updates to base relations are first filtered to remove from consideration those that cannot possibly affect the view. The conditions given for the detection of updates of this type, called irrelevant updates, are necessary and sufficient and are independent of the database state. For the remaining database updates, a differential algorithm can be applied to re-evaluate the view expression. The algorithm proposed exploits the knowledge provided by both the view definition expression and the database update operations. 
Abstract-found: 1
Intro-found: 1
Reference: [AL80] <author> Adiba, Michel, and Bruce G. Lindsay, </author> <title> "Database Snapshots," </title> <booktitle> Proc. of the 6th. International Conference on Very Large Databases, </booktitle> <year> 1980, </year> <pages> Pages 86-91. </pages>
Reference-contexts: This paper carries the assumption that the views are materialized every time a transaction updates the database. It is also possible to envision a mechanism in which materialized views are updated periodically or only on demand. Such materialized views are known as snapshots <ref> [AL80] </ref> and their maintenance mechanism as snapshot refresh 1 . The approach proposed in this paper also applies to this environment, and further work in this direction is in progress.
Reference: [ASU79] <author> Aho, A.V., Y. Sagiv, and J.D. Ullman, </author> <title> "Efficient Optimization of a Class of Re lational Expressions," ACM Transactions 1 System R* provides a differential snapshot refresh mechanism for snapshots defined by a selection and projection on a single base relation [L85]. However, details of this mechanism have not been published. </title> <booktitle> 10 on Database Systems, </booktitle> <volume> Vol. 4, No. 4, </volume> <month> De--cember </month> <year> 1979, </year> <pages> pages 435-454. </pages>
Reference-contexts: Such expression can be obtained at view definition time by the tableau method of Aho Sagiv and Ullman <ref> [ASU79] </ref> extended to handle inequality conditions [K80]; and (II) step 2 poses an interesting optimization problem, namely, the efficient execution of a set of SPJ expressions (all the same) whose operands represent different relations and where intermediate results can be re-used among several expressions. 6 Conclusions A new mechanism for the
Reference: [BC79] <author> Buneman, O. Peter, and Eric K. Clemons, </author> <title> "Efficiently Monitoring Relational Databases," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 4, No. 3, </volume> <month> September </month> <year> 1979, </year> <pages> Pages 368-382. </pages>
Reference-contexts: Horwitz and Teit-elbaum [HT85] propose a model for the generation of language-based environments which uses a relational database along with attribute grammars, and they suggest algorithms for incrementally updating views, motivated by the efficiency requirements of interactive editing. Buneman and Clemons <ref> [BC79] </ref> propose views for the support of alerters, which monitor a database and report to some user or application whether a state of the database, described by the view definition, has been reached. <p> The selection of the least expensive test from the set of candidate tests requires a procedure similar to the one required in query optimization. Buneman and Clemons <ref> [BC79] </ref> propose a procedure for the efficient implementation of alerters. In general, the condition that triggers an alerter is expressed in terms of a query|called the target relation|over several base relations; in our terminology, a target relation corresponds to a virtual view.
Reference: [F62] <author> Floyd, Robert W., </author> <title> "Algorithm 97: Shortest Path," </title> <journal> Communications of the ACM , Vol. </journal> <volume> 5, No. 6, </volume> <month> June </month> <year> 1962, </year> <pages> Page 345. </pages>
Reference-contexts: To find whether a directed weighted graph contains a negative cycle one can use Floyd's algorithm <ref> [F62] </ref>, which finds all the shortest paths between any two nodes in a directed weighted graph.
Reference: [GSV84] <author> Gardarin, G., E. Simon, L. Verlaine, </author> <title> "Querying Real Time Relational Data Bases," </title> <booktitle> IEEE-ICC International Conference (Amsterdam), </booktitle> <month> May </month> <year> 1984, </year> <pages> Pages 757-761. </pages>
Reference-contexts: However, complete re-evaluation is often wasteful, and the cost involved may be unacceptable. The need for a mechanism to update materialized views efficiently has been expressed by several authors. Gardarin et al. <ref> [GSV84] </ref> consider concrete views (i.e., materialized views) as a candidate approach for the support of real time queries. However, they discard this approach because of the lack of an efficient algorithm to keep the concrete views up to date with the base relations.
Reference: [HS78] <author> Hammer, Michael, and Sunil K. Sarin, </author> <title> "Efficient Monitoring of Database Assertions," </title> <booktitle> Supplement Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Austin, TX., May 31-June 2, </address> <year> 1978, </year> <pages> Page 38. </pages>
Reference-contexts: This is a restricted class of views, since views based on the join of some, but not all, of the relations in the data base scheme cannot be handled by this mechanism. Another restriction on the views is the omission of selection conditions. In related work, Hammer and Sarin <ref> [HS78] </ref> present a method for efficiently detecting violations of integrity constraints, called integrity assertions, as a result of database updates. For each integrity assertion, there exists an error-predicate which corresponds to the logical complement of the assertion.
Reference: [HT85] <author> Horwitz, Susan, and Tim Teitelbaum, </author> <title> "Relations and Attributes: A Symbiotic Basis for Editing Environments," </title> <booktitle> ACM SIGPLAN 85 Symposium on Language Issues in Programming Environments, Sig-plan Notices, </booktitle> <volume> Vol. 20, No. 7, </volume> <month> July </month> <year> 1985, </year> <pages> Pages 93-106. </pages>
Reference-contexts: Gardarin et al. [GSV84] consider concrete views (i.e., materialized views) as a candidate approach for the support of real time queries. However, they discard this approach because of the lack of an efficient algorithm to keep the concrete views up to date with the base relations. Horwitz and Teit-elbaum <ref> [HT85] </ref> propose a model for the generation of language-based environments which uses a relational database along with attribute grammars, and they suggest algorithms for incrementally updating views, motivated by the efficiency requirements of interactive editing.
Reference: [K80] <author> Klug, A., </author> <title> "On Inequality Tableaux," </title> <type> CS Technical Report 403, </type> <institution> University of Wis-consin, Madison, WI, </institution> <month> November </month> <year> 1980. </year>
Reference-contexts: Such expression can be obtained at view definition time by the tableau method of Aho Sagiv and Ullman [ASU79] extended to handle inequality conditions <ref> [K80] </ref>; and (II) step 2 poses an interesting optimization problem, namely, the efficient execution of a set of SPJ expressions (all the same) whose operands represent different relations and where intermediate results can be re-used among several expressions. 6 Conclusions A new mechanism for the maintenance of materialized views has been
Reference: [KP81] <author> Koenig, Shaye, and Robert Paige, </author> <title> "A Transformational Framework for the Automatic Control of Derived Data," </title> <booktitle> Proc. of the 7th. International Conference on Very Large Data Bases, </booktitle> <year> 1981, </year> <pages> Pages 306-318. </pages>
Reference-contexts: to detect updates that have no effect on a view; Section 5 describes a method for differentially updating materialized views; finally, Section 6 contains some conclusions and suggestions for further research. 2 Previous work Work directly related to the maintenance of materialized views has been reported by Koenig and Paige <ref> [KP81] </ref> and by Shmueli and Itai [SI84]. Koenig and Paige [KP81] investigate the support of derived data in the context of a functional binary-association data model. <p> Section 5 describes a method for differentially updating materialized views; finally, Section 6 contains some conclusions and suggestions for further research. 2 Previous work Work directly related to the maintenance of materialized views has been reported by Koenig and Paige <ref> [KP81] </ref> and by Shmueli and Itai [SI84]. Koenig and Paige [KP81] investigate the support of derived data in the context of a functional binary-association data model. This data model puts together ideas borrowed from binary-association models, functional models, and the entity-relationship model, within a programming language suitable for data definition and manipulation.
Reference: [L85] <author> Lindsay, Bruce G., </author> <type> Personal communication. </type>
Reference: [M83] <author> Maier, David, </author> <title> The Theory of Relational Databases, </title> <publisher> Computer Science Press, </publisher> <year> 1983. </year>
Reference-contexts: work is the efficient detection of base relation updates that are of no interest to an alerter, thus determining when re-evaluation of the associated query is unnecessary. 3 Notation and terminology We assume that the reader is familiar with the basic ideas and notation concerning relational databases, as described in <ref> [M83] </ref>. A view definition V corresponds to a relational algebra expression on the database scheme. A view materialization v is a stored relation resulting from the evaluation of this relational algebra expression against an instance of the database.
Reference: [RH80] <author> Rosenkrantz, Daniel J., and Harry B. Hunt III, </author> <title> "Processing Conjunctive Predicates and Queries," </title> <booktitle> Proc. of the 6th International Conference on Very Large Data Bases, </booktitle> <year> 1980, </year> <pages> Pages 64-72. </pages>
Reference-contexts: This proves that the condition is necessary. 2 Deciding the satisfiability of Boolean expressions is in general NP-complete. However, there is a large class of Boolean expressions for which satisfiability can be decided efficiently, as shown by Rosenkrantz and Hunt <ref> [RH80] </ref>.
Reference: [SI84] <author> Shmueli, Oded, and Alon Itai, </author> <title> "Maintenance of Views," </title> <booktitle> SIGMOD '84 Proceedings of Annual Meeting (Boston, MA), Sigmod Record, </booktitle> <volume> Vol. 14, No. 2, </volume> <year> 1984, </year> <pages> Pages 240-255. </pages>
Reference-contexts: effect on a view; Section 5 describes a method for differentially updating materialized views; finally, Section 6 contains some conclusions and suggestions for further research. 2 Previous work Work directly related to the maintenance of materialized views has been reported by Koenig and Paige [KP81] and by Shmueli and Itai <ref> [SI84] </ref>. Koenig and Paige [KP81] investigate the support of derived data in the context of a functional binary-association data model. This data model puts together ideas borrowed from binary-association models, functional models, and the entity-relationship model, within a programming language suitable for data definition and manipulation.
Reference: [WY76] <author> Wong, Eugene, and Karel Youssefi, </author> <title> "Decomposition A Strategy for Query Processing," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 1, No. 3, </volume> <month> September </month> <year> 1976, </year> <pages> pages 223-241. 11 </pages>
Reference-contexts: To evaluate each SPJ expression associated with a row of the table, we can make use of some known algorithm such as QUEL's decomposition algorithm by Wong and Youssefi <ref> [WY76] </ref>. Once more, there is a possibility of saving computation by re-using partial computations common to several rows in the table. We now present the outline of an algorithm to update SPJ views differentially.
References-found: 14

