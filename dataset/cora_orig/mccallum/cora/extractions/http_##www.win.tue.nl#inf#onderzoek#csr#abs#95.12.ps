URL: http://www.win.tue.nl/inf/onderzoek/csr/abs/95.12.ps
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Email: sjouke@win.tue.nl, michelr@win.tue.nl  
Title: Empty Interworkings and Refinement Semantics of Interworkings Revised  
Author: S. Mauw, M.A. Reniers 
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands.  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: The semantics for Interworkings from [MvWW93] does not give a proper meaning to empty entities and empty Interworkings. Furthermore, the process algebra considered has to be extended in order to define refinement of Interworkings. For these purposes we give a revision and extension of the semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [BB88] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Global Renaming Operators in Concrete Process Algebra. </title> <journal> Information and Computation, </journal> <volume> 78, </volume> <year> 1988. </year>
Reference-contexts: This renaming operator resembles the renaming operator ae f from <ref> [BB88] </ref>. 15 ae f (") = " ae f (c (p; q; m)) = c (f fl (p); f fl (q); m) ae f (x + y) = ae f (x) + ae f (y) Table 11: Entity Renaming function on processes In Table 12 the entity renaming operator on processes
Reference: [BK84a] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process Algebra for Synchronous Communication. </title> <journal> Information & Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference: [BK84b] <author> J.A. Bergstra and J.W. Klop. </author> <title> The Algebra of Recursively Defined Processes and the Algebra of Regular Processes. </title> <editor> In J. Paredaens, editor, </editor> <booktitle> Proceedings 11 th ICALP, volume 172 of Lecture Notes in Computer Science, </booktitle> <pages> pages 82-95. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year> <note> Extended abstract, full version appeared in [PVvV95]. </note>
Reference: [BV93] <author> J.C.M. Baeten and C. Verhoef. </author> <title> A Congruence Theorem for Structured Operational Semantics with Predicates. </title> <editor> In E. Best, editor, CONCUR'93, </editor> <booktitle> volume 715 of Lecture Notes in Computer Science, </booktitle> <pages> pages 477-492. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: For a formal definition of term deduction systems we refer to <ref> [BV93] </ref>. " # x + y # x + y # x y # a x ! x 0 a y ! y 0 a x ! x 0 a x #; y ! y 0 a Table 2: Structured Operational Semantics of BPA ffi;" (A) Finally we would like to <p> By the congruence theorem from Baeten and Verhoef <ref> [BV93] </ref> it follows immediately that bisimulation is a congruence on the closed IWD " (A; EID; E) terms. Theorem 2.2.2 (Soundness) The process algebra IWD " (A; EID; E) is a sound axiomatization of bisimulation equivalence on closed IWD " (A; EID; E) terms. <p> Thereto, suppose that s is a normal form with respect to the term rewrite system and suppose that s is not a closed BPA ffi;" (A) term. Then s must contain at 1 For a definition of pure term deduction systems see <ref> [BV93] </ref>. 2 For a definition of well-founded term deduction systems see [BV93]. 3 For a definition of the path format see [BV93]. 6 a Lffi iw x ! a x x Rffi iw a ! a x if E (a) " E (x) = ? x Rffi iw a ! ffi <p> Then s must contain at 1 For a definition of pure term deduction systems see <ref> [BV93] </ref>. 2 For a definition of well-founded term deduction systems see [BV93]. 3 For a definition of the path format see [BV93]. 6 a Lffi iw x ! a x x Rffi iw a ! a x if E (a) " E (x) = ? x Rffi iw a ! ffi if E (a) " E (x) 6= ? p Table 6: <p> Then s must contain at 1 For a definition of pure term deduction systems see <ref> [BV93] </ref>. 2 For a definition of well-founded term deduction systems see [BV93]. 3 For a definition of the path format see [BV93]. 6 a Lffi iw x ! a x x Rffi iw a ! a x if E (a) " E (x) = ? x Rffi iw a ! ffi if E (a) " E (x) 6= ? p Table 6: Additonal rewriting rules for IWD " (A; EID; E) least <p> Theorem 2.3.8 (Congruence) Entity bisimulation equivalence is a congruence for the function symbols in the signature of IWE " (A; EID; E) which are defined on LP terms. Proof The theorem from <ref> [BV93] </ref> as used in the previous theorems on congruence is not applicable in this case. This theorem is only formulated for strong bisimulation equivalence. Nevertheless we will see that Theorem 2.3.8 is not too hard to prove.
Reference: [BV95] <author> J.C.M. Baeten and C. Verhoef. </author> <title> Concrete Process Algebra. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, volume IV, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: The parameters A, EID and E are the set of atomic actions, a universe of entity identifiers and a mapping from atomic actions to entity identifiers, respectively. We start by giving the process algebra BPA ffi;" (A) from <ref> [BW90, BV95] </ref>. This process algebra is extended to the process algebra IWD " (A; EID; E), i.e., Process Algebra for Interworking Diagrams, with the operator interworking sequencing ( ffi iw ) and some auxiliary operators ( Lffi iw , Rffi iw , and p ). <p> chosen for the approach with three parameters to cover applications where an entity function must be defined explicitly, because it can not be obtained from the atomic actions. 2.1 Basic Process Algebra with Deadlock and Empty Process We will give a brief introduction to the process algebra BPA ffi;" (A) <ref> [BV95, BW90] </ref>. This process algebra will be our starting point towards the more complex algebras which are introduced in the following sections. The parameter A of the process algebra represents the set of atomic actions. <p> The theorem follows from the following observations: 1) Bisimulation is definable in terms of predicate and relation symbols only, 2) the process algebra BPA ffi;" (A) is a complete axiomatization of bisimulation equivalence on closed BPA ffi;" (A) terms (see <ref> [BV95, BW90] </ref>), 3) the process algebra IWD " (A; EID; E) is a sound axiomatization of bisimulation equivalence on closed IWD " (A; EID; E) terms (see Theorem 2.2.2), 4) the term deduction system T (BPA ffi;" (A)) is pure 1 , well-founded 2 and in path format, and 5) the
Reference: [BW90] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1990. </year> <note> ISBN 0-521-40043-0. </note>
Reference-contexts: The parameters A, EID and E are the set of atomic actions, a universe of entity identifiers and a mapping from atomic actions to entity identifiers, respectively. We start by giving the process algebra BPA ffi;" (A) from <ref> [BW90, BV95] </ref>. This process algebra is extended to the process algebra IWD " (A; EID; E), i.e., Process Algebra for Interworking Diagrams, with the operator interworking sequencing ( ffi iw ) and some auxiliary operators ( Lffi iw , Rffi iw , and p ). <p> chosen for the approach with three parameters to cover applications where an entity function must be defined explicitly, because it can not be obtained from the atomic actions. 2.1 Basic Process Algebra with Deadlock and Empty Process We will give a brief introduction to the process algebra BPA ffi;" (A) <ref> [BV95, BW90] </ref>. This process algebra will be our starting point towards the more complex algebras which are introduced in the following sections. The parameter A of the process algebra represents the set of atomic actions. <p> y # x y # a x ! x 0 a y ! y 0 a x ! x 0 a x #; y ! y 0 a Table 2: Structured Operational Semantics of BPA ffi;" (A) Finally we would like to mention the following well-known result from literature (e.g. <ref> [BW90] </ref>): The process algebra BPA ffi;" (A) is a sound and complete axiomatization of bisimulation equivalence, notation $ , on the closed BPA ffi;" (A) terms. <p> To obtain an axiomatization of the interworking sequencing operator in the context of empty Interworkings an approach is followed which compares easily with the step from the free merge in a setting without the empty process to a free merge in a setting with the empty process <ref> [BW90] </ref>. The axiomatization of ffi iw as presented in [MvWW93] uses the two auxiliary operators Lffi iw and Rffi iw . The process x Lffi iw y behaves like the process x ffi iw y with the restriction that the first action to be executed must originate from process x. <p> This is not what we want and therefore we need the additional operator p as given in Table 4. This operator has also been used by Baeten and Weijland <ref> [BW90] </ref> in axiomatizing the free merge in a process algebra containing the empty process. <p> The theorem follows from the following observations: 1) Bisimulation is definable in terms of predicate and relation symbols only, 2) the process algebra BPA ffi;" (A) is a complete axiomatization of bisimulation equivalence on closed BPA ffi;" (A) terms (see <ref> [BV95, BW90] </ref>), 3) the process algebra IWD " (A; EID; E) is a sound axiomatization of bisimulation equivalence on closed IWD " (A; EID; E) terms (see Theorem 2.2.2), 4) the term deduction system T (BPA ffi;" (A)) is pure 1 , well-founded 2 and in path format, and 5) the
Reference: [IT94] <author> ITU-T. </author> <title> Z.120 Messages sequence chart (MSC), </title> <booktitle> 1994. </booktitle> <pages> 18 </pages>
Reference: [KL80] <author> S. Kamin and J.-J. Levy. </author> <title> Two Generalizations of the Recursive Path Ordering. </title> <type> Un--published manuscript, </type> <year> 1980. </year>
Reference-contexts: Proof The term rewrite system associated with the axioms A3-A7 from Table 1 and the axioms from Tables 3 and 4 and the additional rewriting rules from Table 6 is strongly normalizing. This can be proven with the method of the lexicographical path ordering <ref> [KL80, Klo92] </ref>. Note that the additional rewriting rules are, for closed terms, derivable from the axioms of IWD " (A; EID; E). If we additionally show that every normal form of the closed terms is in fact a closed BPA ffi;" (A) term then the theorem follows easily.
Reference: [Klo92] <author> J.W. Klop. </author> <title> Term Rewriting Systems. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume II, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: Proof The term rewrite system associated with the axioms A3-A7 from Table 1 and the axioms from Tables 3 and 4 and the additional rewriting rules from Table 6 is strongly normalizing. This can be proven with the method of the lexicographical path ordering <ref> [KL80, Klo92] </ref>. Note that the additional rewriting rules are, for closed terms, derivable from the axioms of IWD " (A; EID; E). If we additionally show that every normal form of the closed terms is in fact a closed BPA ffi;" (A) term then the theorem follows easily.
Reference: [MvWW92] <author> S. Mauw, M. van Wijk, and T. Winter. </author> <title> Syntax and Semantics of Synchronous Inter-workings VI, Refinement. </title> <type> Unpublished manuscript, </type> <year> 1992. </year>
Reference-contexts: These notions imply introduction of the so-called empty process into the process algebra. This extended process algebra is also needed if we define refinement as introduced in <ref> [MvWW92] </ref>. The problem encountered in the semantics of [MvWW93] with respect to empty entities is the following. Consider the Interworkings from Figure 1. The difference between the Interworkings A and B is that B contains an entity s while A does not.
Reference: [MvWW93] <author> S. Mauw, M. van Wijk, and T. Winter. </author> <title> A Formal Semantics of Synchronous Interwork-ings. </title> <editor> In O. Faergemand and A. Sarma, editors, </editor> <title> SDL'93 Using Objects, </title> <booktitle> Proceedings of the Sixth SDL Forum, </booktitle> <pages> pages 167-178, </pages> <address> Darmstadt, 1993. </address> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam. ISBN 0-444-81486-8. </address>
Reference-contexts: Interworkings are similar to Message Sequence Charts ([IT94]), which are standardized by the International Telecommunication Union (ITU). The main difference is that Interworkings describe synchronous communication, whereas Message Sequence Charts describe asynchronous communication. A first proposal for the syntax and semantics of Interworkings is given in <ref> [MvWW93] </ref> and [MW93] contains a description of a tool set for Interworkings. The semantics are given via a translation into process algebra ([BK84a, BK84b, BV95, BW90]). <p> Figure 2D in which only one execution order is allowed: m1, m2, m3). This is expressed formally in the definition of the interworking sequencing operator. The interworking merge operator is explained below. Although the semantics in <ref> [MvWW93] </ref> are consistent, we are not completely satisfied with it, especially with respect to empty entities and empty Interworkings. These notions imply introduction of the so-called empty process into the process algebra. This extended process algebra is also needed if we define refinement as introduced in [MvWW92]. <p> These notions imply introduction of the so-called empty process into the process algebra. This extended process algebra is also needed if we define refinement as introduced in [MvWW92]. The problem encountered in the semantics of <ref> [MvWW93] </ref> with respect to empty entities is the following. Consider the Interworkings from Figure 1. The difference between the Interworkings A and B is that B contains an entity s while A does not. <p> Since B does not have this communication, a deadlock results as depicted by two horizontal bars in the Interworking E from Figure 2. We conclude that intuitively the merge of A and C is different from the merge of B and C. In the semantics of <ref> [MvWW93] </ref>, however, A and B have exactly the same interpretation. The empty entity s is simply neglected, so A k iw C and B k iw C are equal. <p> acknowledged for their comments on a preliminary version of this paper. 2 We are grateful to Loe Feijs (Philips Research Laboratories Eindhoven) for his comments on the refinement of Interworkings. 2 Process Algebra for Interworkings In this section we will extend the process algebra BPA iw (A; EID; E) from <ref> [MvWW93] </ref> with the empty process ("). The parameters A, EID and E are the set of atomic actions, a universe of entity identifiers and a mapping from atomic actions to entity identifiers, respectively. We start by giving the process algebra BPA ffi;" (A) from [BW90, BV95]. <p> The interworking sequencing operator is similar to the weak sequential composition operator from [RW94]. As a starting point for the axiomatization we take the axioms for the interworking sequencing as they are given in <ref> [MvWW93] </ref>. To obtain an axiomatization of the interworking sequencing operator in the context of empty Interworkings an approach is followed which compares easily with the step from the free merge in a setting without the empty process to a free merge in a setting with the empty process [BW90]. <p> The axiomatization of ffi iw as presented in <ref> [MvWW93] </ref> uses the two auxiliary operators Lffi iw and Rffi iw . The process x Lffi iw y behaves like the process x ffi iw y with the restriction that the first action to be executed must originate from process x. <p> Since " is unable to do any step, it seems plausible to define " Lffi iw y = ffi. Consequently, we also define x Rffi iw " = ffi. If we apply this in the definition of the sequencing operator as given in <ref> [MvWW93] </ref> we get " ffi iw " = " Lffi iw " + " Rffi iw " = ffi + ffi = ffi. This is not what we want and therefore we need the additional operator p as given in Table 4. <p> In this section we will solve this problem by associating to every closed term of the process algebra a label denoting the entities which are present. With that additional information it is straightforward to give an axiomatization of the interworking merge. As was done in <ref> [MvWW93] </ref> the interworking merge is expressed in terms of the E-interworking merge operator and the common entities of the operands. The axiomatization of the S-interworking merge as presented in [MvWW93] uses the auxiliary operators left S-interworking merge k S iw and synchronization interworking merge j S iw with S a set <p> With that additional information it is straightforward to give an axiomatization of the interworking merge. As was done in <ref> [MvWW93] </ref> the interworking merge is expressed in terms of the E-interworking merge operator and the common entities of the operands. The axiomatization of the S-interworking merge as presented in [MvWW93] uses the auxiliary operators left S-interworking merge k S iw and synchronization interworking merge j S iw with S a set of atomic actions. We will use similar auxiliary operators only now labelled with a set of entities in stead of a set of atomic actions. <p> The interpretation of xk E iw y, however, make it reasonable to define "k E iw x = x j E iw " = ffi. With respect to the main axiom for the interworking merge from <ref> [MvWW93] </ref>: x k S iw y = xk iw y + yk iw x + x j S derive " k E iw " = "k iw " + "k iw " + " j E iw " = ffi + ffi + ffi = ffi. <p> We will also prove that the interworking merge is both commutative and associative. The interworking merge as defined by <ref> [MvWW93] </ref> did not have the associativity property. This is a direct consequence of our decision to maintain the entities of an Interworking statically. We can illustrate this with the following example. Example 3.1 In the semantics of [MvWW93] the Interworkings as shown in Figure 3 are given by A = c <p> The interworking merge as defined by <ref> [MvWW93] </ref> did not have the associativity property. This is a direct consequence of our decision to maintain the entities of an Interworking statically. We can illustrate this with the following example. Example 3.1 In the semantics of [MvWW93] the Interworkings as shown in Figure 3 are given by A = c (p; q; m) and B = c (p; q; n), whereas in this paper they are represented by A = hc (p; q; m); fp; qgi and B = hc (p; q; n); fp; qgi. <p> We compute the expressions (A k iw A) k iw B and A k iw (A k iw B) in both settings. In the semantics of <ref> [MvWW93] </ref> we have the following computations. (A k iw A) k iw B = (c (p; q; m) k iw c (p; q; m)) k iw c (p; q; n) = ffi A k iw (A k iw B) = c (p; q; m) k iw (c (p; q; m) k <p> In the computation of A k iw B in the semantics of <ref> [MvWW93] </ref> we lost information on the entities which are present, whereas in the second computation we did not. Observe that in the definition of interworking merge as presented in this paper (A k iw A) k iw B and A k iw (A k iw B) are entity bisimilar.
Reference: [MW93] <author> S. Mauw and T. Winter. </author> <title> A Prototype Toolset for Interworkings. </title> <journal> Philips Telecommunication Review, </journal> <volume> 51(3), </volume> <year> 1993. </year>
Reference-contexts: Interworkings are similar to Message Sequence Charts ([IT94]), which are standardized by the International Telecommunication Union (ITU). The main difference is that Interworkings describe synchronous communication, whereas Message Sequence Charts describe asynchronous communication. A first proposal for the syntax and semantics of Interworkings is given in [MvWW93] and <ref> [MW93] </ref> contains a description of a tool set for Interworkings. The semantics are given via a translation into process algebra ([BK84a, BK84b, BV95, BW90]).
Reference: [Plo81] <author> G.D. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DIAMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: This process algebra will be called IWE " (A; EID; E), i.e. Process Algebra for Interworkings with (empty) entities. We give for each of the process algebras a structured operational semantics in the style of Plotkin <ref> [Plo81, Plo83] </ref>.
Reference: [Plo83] <author> G.D. Plotkin. </author> <title> An Operational Semantics for CSP. </title> <booktitle> In Proceedings of the Conference on the Formal Description of Programming Concepts, </booktitle> <volume> volume 2, Garmisch, </volume> <year> 1983. </year>
Reference-contexts: This process algebra will be called IWE " (A; EID; E), i.e. Process Algebra for Interworkings with (empty) entities. We give for each of the process algebras a structured operational semantics in the style of Plotkin <ref> [Plo81, Plo83] </ref>.
Reference: [PVvV95] <editor> A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors. </editor> <title> Algebra of Communicating Processes, </title> <booktitle> Utrecht 1994, Workshops in Computing. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> ISBN 0 387-19909-8. </note>
Reference: [Ren93] <author> M.A. Reniers. Verificatie van Enige Eigenschappen van Interworkings. </author> <title> Unpublished manuscript in Dutch, </title> <year> 1993. </year>
Reference-contexts: E iw x (3) iw hy; E 2 i = hy; E 2 i k E hx; E 1 i k iw hy; E 2 i = hy; E 2 i k iw hx; E 1 i (5) Proof For proofs of the propositions (1) and (3) we refer to <ref> [Ren93] </ref>. Proposition (2) follows immediately from proposition (1). Proposition (4) follows immediately from proposition (3). Proposition (5) can be proven as follows. <p> we have (x ffi iw y) ffi iw z = x ffi iw (y ffi iw z) (1) (x k E 1 "E 2 (E 1 [E 2 )"E 3 E 1 "(E 2 [E 3 ) iw z) (3) Proof For a proof of proposition (1) we refer to <ref> [Ren93] </ref>.
Reference: [RW94] <author> A. Rensink and H. Wehrheim. </author> <title> Weak Sequential Composition in Process Algebras. </title> <editor> In B. Jonsson and J. Parrow, editors, CONCUR'94: </editor> <booktitle> Concurrency Theory, volume 836 of Lecture Notes in Computer Science, </booktitle> <pages> pages 226-241. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The interworking sequencing operator is similar to the weak sequential composition operator from <ref> [RW94] </ref>. As a starting point for the axiomatization we take the axioms for the interworking sequencing as they are given in [MvWW93].
Reference: [vdBG95] <author> J. van den Brink and W.O.D. Griffioen. </author> <title> Formal Semantics of Interworkings with Discrete Absolute Time. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors, </editor> <title> Algebra of Communicating Processes, </title> <booktitle> Utrecht 1994, Workshops in Computing, </booktitle> <pages> pages 106-123. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> See [PVvV95]. </note>
Reference-contexts: The semantics are given via a translation into process algebra ([BK84a, BK84b, BV95, BW90]). Communications are translated into atomic actions and two composition operators are defined: the interworking sequencing ( ffi iw ) for vertical composition and the interworking merge ( k iw ) for horizontal composition. In <ref> [vdBG95] </ref> Van den Brink and Griffioen describe an extension of Interworkings with discrete absolute time features by labelling actions with a time stamp and by labelling actions with a discrete time interval. An Interworking consists of entities, represented by vertical axes, and messages, represented by horizontal arrows.
Reference: [Ver94] <author> C. Verhoef. </author> <title> A General Conservative Extension Theorem in Process Algebra. </title> <editor> In E.- R. Olderog, editor, </editor> <booktitle> Programming Concepts, Methods and Calculi (PROCMET '94), volume 56 of IFIP Transactions A: Computer Science and Technology, </booktitle> <pages> pages 149-168. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: For the other axioms we only relate the left-hand side to the right-hand side. Theorem 2.2.3 (Conservativity) The process algebra IWD " (A; EID; E) is a conservative ex tension of the process algebra BPA ffi;" (A). Proof The proof of this theorem uses the approach of Verhoef <ref> [Ver94] </ref>. <p> Theorem 2.2.5 (Completeness) The process algebra IWD " (A; EID; E) is a complete axiomatization of bisimulation equivalence on closed IWD " (A; EID; E) terms. Proof By the General Completeness Theorem of Verhoef <ref> [Ver94] </ref>, the completeness of the process algebra IWD " (A; EID; E) follows immediately from the propositions which are used in the proof of Theorem 2.2.3 and the fact that IWD " (A; EID; E) has the elimination property for BPA ffi;" (A) (see Theorem 2.2.4). 2.3 Axiomatization of Interworking Merge
Reference: [Vra91] <author> J.L.M. Vrancken. </author> <title> Studies in Process Algebra, Algebraic Specifications and Parallelism. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1991. </year> <month> 19 </month>
Reference-contexts: This operator is taken from <ref> [Vra91] </ref>. " I (") = " " I (a x) = " I (x) if a 2 I " I (x + y) = " I (x) + " I (y) Table 13: Renaming atomic actions into " In Table 14 the operator for removing internal communications is extended to labelled
References-found: 20

