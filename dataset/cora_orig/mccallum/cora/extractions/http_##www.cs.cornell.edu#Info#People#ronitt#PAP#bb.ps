URL: http://www.cs.cornell.edu/Info/People/ronitt/PAP/bb.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/ronitt/papers.html
Root-URL: 
Email: Email: madhu@watson.ibm.com.  
Title: Reconstructing Algebraic Functions from Mixed Data  
Author: Sigal Ar Richard J. Lipton Ronitt Rubinfeld Madhu Sudan 
Address: P.O. Box 218, Yorktown Heights, NY 10598, U.S.A.  
Affiliation: at Matsushita Information Technology Labs. Cornell University.  at Hebrew University and Princeton University.  I.B.M. Thomas J. Watson Research Center,  
Note: Princeton University, Supported by Dept. of Navy Grant #N00014-85-C-0456, by NSF PYI grant CCR 9057486 and a grant from MITL. Princeton University. Part of this research was done while  Part of this research was done while  This research is supported by DIMACS, NSF-STC88-09648, ONR Young Investigator Award N00014-93-1-0590 and grant No. 92-00226 from the United States Israel Binational Science Foundation (BSF).  Part of this work was done when this author was at U.C. Berkeley, supported in part by NSF Grant No. CCR 88-96202.  
Date: August 28, 1997  
Abstract: We consider a variant of the traditional task of explicitly reconstructing algebraic functions from black box representations. In the traditional setting for such problems, one is given access to an unknown function f that is represented by a black box, or an oracle, which can be queried for the value of f at any input. Given a guarantee that this unknown function f is some nice algebraic function, say a polynomial in its input of degree bound d, the goal of the reconstruction problem is to explicitly determine the coefficients of the unknown polynomial. All work on polynomial interpolation, especially sparse ones, are or may be presented in such a setting. The work of Kaltofen and Trager [25], for instance, highlights the utility of this setting, by performing numerous manipulations on polynomials presented as black boxes. The variant considered in this paper differs from the traditional setting in that our black boxes represent several algebraic functions - f 1 ; : : : ; f k , where at each input x, the box arbitrarily chooses a subset of f 1 (x); : : :; f k (x) to output and we do not know which subset it outputs. We show how to reconstruct the functions f 1 ; : : : ; f k from the black box, provided the black box outputs according to these functions "often". This allows us to group the sample points into sets, such that for each set, all outputs to points in the set are from the same algebraic function. Our methods are robust in the presence of a small fraction of arbitrary errors in the black box. Our model and techniques can be applied in the areas of computer vision, machine learning, curve fitting and polynomial approximation, self-correcting programs and bivariate polynomial factorization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding Instance in Multioracle Queries. </title> <note> In STACS 1990 </note>
Reference-contexts: The definition of a (k; d)-polynomial black box can be generalized to situations involving noise as follows: Definition 3 For * 2 <ref> [0; 1] </ref> and for a finite subset H of a field F , a black box B : H ! F is an *-noisy (k; d)-polynomial black box if there exist polynomials f 1 ; : : : ; f k : F ! F of degree at most d and <p> We solve this problem by creating a univariate reconstruction problem and then using Theorem 22 to solve this problem. This reduction builds upon a method of [14], which in turn builds upon earlier work of <ref> [1, 13] </ref>. We create a univariate "subdomain", more precisely a function D : F ! F n , such that the image of the domain, Im (D) def = fD (t)jt 2 F g, satisfies the following properties:, 20 1. ^a and ^ b are contained in Im (D).. 2.
Reference: [2] <author> M. Ben-Or. </author> <title> Probabilistic Algorithms in Finite Fields In Proc. </title> <booktitle> 22nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 394-398, </pages> <year> 1981. </year>
Reference: [3] <author> M. Ben-Or and P. Tiwari. </author> <title> A Deterministic Algorithm for Sparse Multivariate Polynomial Interpolation. </title> <booktitle> In Proc. 20th STOC, </booktitle> <pages> pages 301-309, </pages> <year> 1988. </year>
Reference-contexts: Efficient algorithms for sparse multivariate polynomial interpolation are given by Zippel [40, 41], Grigoriev, Karpinski and Singer [21] and Borodin and Tiwari <ref> [3] </ref>, and for sparse rational functions by Grigoriev, Karpinski and Singer [20]. The case where the black box represents a single function with some noise has also been studied previously. <p> If the polynomial turns out to be sparse then we can now use any sparse interpolation algorithm from <ref> [3, 20, 21, 40] </ref> to reconstruct an explicit representation of the polynomials in time polynomial in n, d and the number of non-zero coefficients. <p> For instance, if the reconstructed function is a sparse multivariate polynomial, then we can use any of the sparse multivariate polynomial interpolation algorithms given in <ref> [3, 20, 21, 40] </ref> to recover explicit representations of the reconstructed functions, in running time which is polynomial in the number of non-zero coefficients rather than total number of possible coefficients.
Reference: [4] <author> E. Berlekamp. </author> <title> Factoring Polynomials over Large Finite Fields. </title> <journal> Mathematics of Computation, </journal> <volume> page 713, vol. 24, no. 111, </volume> <year> 1970. </year>
Reference-contexts: in Subsection 4.1 how to find a polynomial with integer coefficients that is -close to all but an * fraction of the points (if such a polynomial exists), where * need only be less than 1=2 (provided is m is larger than (4+1)d Reducing Bivariate Factoring to Univariate Factoring In <ref> [4] </ref> Berlekamp gave a randomized polynomial time algorithm for factoring univariate polynomials over finite fields. Kaltofen [24] and Grigoriev and Chistov [18] show that the problem of bivariate factoring can also be solved in polynomial time by a reduction to univariate factoring, using somewhat deep methods from algebra.
Reference: [5] <author> E. Berlekamp. </author> <title> Bounded Distance +1 Soft-Decision Reed-Solomon Decoding. </title> <journal> In IEEE Transactions on Information Theory, pages 704-720, </journal> <volume> vol. 42, no. 3, </volume> <month> May </month> <year> 1996. </year>
Reference-contexts: The case where the black box represents a single function with some noise has also been studied previously. Welch and Berlekamp <ref> [39, 5] </ref> (see also [14]) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith [11], Gemmell, Lipton, Rubinfeld, Sudan and Wigderson [13] and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. <p> However we will have to do something about the noisy points which do not lie on any nice algebraic curve. We adapt an algorithm of Welch and Berlekamp <ref> [39, 5] </ref> (see also [14]) to handle this situation.
Reference: [6] <author> A. Blum and P. Chalasani. </author> <title> Learning Switching Concepts. </title> <booktitle> Proc. 5th Annual Workshop on Computational Learning Theory, </booktitle> <pages> pages 231-242, </pages> <year> 1992. </year>
Reference-contexts: Our techniques in combination with Rivest's algorithm yield a consistent hypothesis, but since our hypothesis is not a boolean function, we must use the work of Haussler [22] to see that a consistent hypothesis is a good hypothesis. Independent of our work, Blum and Chalasani <ref> [6] </ref> also consider a model of learning from examples where the examples may be classified according to one of several different concepts. In their model an adversary controls the decision of which concept would be used to classify the next example.
Reference: [7] <author> M. Blum, M. Luby, R. Rubinfeld. </author> <title> Self-Testing/Correcting with Applications to Numerical Problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol. 47, No. 3, </volume> <month> December </month> <year> 1993. </year>
Reference: [8] <author> A. Blumer, A. Ehrenfeucht, D. Haussler and M. K. Warmuth. </author> <note> Occam's Razor. Information Processing Letters 24 (1987) pp. 377-380. </note>
Reference-contexts: The only technical point that needs to be made is as follows: Rivest gives an algorithm for producing a decision list that is consistent with the random examples and then argues using an Occam argument (see Blumer et. al. <ref> [8] </ref>) that any hypothesis that is consistent with the labels of the random examples is a good hypothesis (i.e. computes a function that is usually equal to the target function).
Reference: [9] <author> J.Y. Cai and L. Hemachandra. </author> <title> A note on enumerative counting. </title> <journal> Information Processing Letters, </journal> <note> 38 (1991) pp. 215-219. </note>
Reference: [10] <author> Canny J., </author> <year> 1983. </year> <title> Finding edges and lines in images. M.I.T., </title> <note> Artificial Intelligence Laboratory Report, AI-TR-720. </note>
Reference: [11] <author> D. Coppersmith, </author> <title> Personal communication to Ronitt Rubinfeld, </title> <month> Fall </month> <year> 1990. </year>
Reference-contexts: The case where the black box represents a single function with some noise has also been studied previously. Welch and Berlekamp [39, 5] (see also [14]) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith <ref> [11] </ref>, Gemmell, Lipton, Rubinfeld, Sudan and Wigderson [13] and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. All the above mentioned results require, however, that the field size be at least polynomially large in d ffi .
Reference: [12] <author> J. von zur Gathen. </author> <title> Algebraic Complexity Theory. </title> <journal> Annual Reviews of Computer Science, </journal> <volume> 3 </volume> <pages> 317-347, </pages> <year> 1988. </year>
Reference-contexts: evaluated at any input x using the given (k; d)-total polynomial black box, using the identity j (x) = S [k];jSj=j i2S Furthermore this computation can be performed in time in O (k log k log log k) using a fast Fourier transform (see survey article by von zur Gathen <ref> [12] </ref>, pages 320-321). Observe further that j is a polynomial of degree at most jd. Hence evaluating it at jd + 1 points suffices to find all the coefficients of this polynomial (if the black box outputs every f i (x) for every x).
Reference: [13] <author> P. Gemmell, R. Lipton, R. Rubinfeld, M. Sudan and A. Wigderson. </author> <title> Self--Testing/Correcting for Polynomials and for Approximate Functions. </title> <booktitle> Proc. 23rd ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: Welch and Berlekamp [39, 5] (see also [14]) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith [11], Gemmell, Lipton, Rubinfeld, Sudan and Wigderson <ref> [13] </ref> and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. All the above mentioned results require, however, that the field size be at least polynomially large in d ffi . <p> We solve this problem by creating a univariate reconstruction problem and then using Theorem 22 to solve this problem. This reduction builds upon a method of [14], which in turn builds upon earlier work of <ref> [1, 13] </ref>. We create a univariate "subdomain", more precisely a function D : F ! F n , such that the image of the domain, Im (D) def = fD (t)jt 2 F g, satisfies the following properties:, 20 1. ^a and ^ b are contained in Im (D).. 2.
Reference: [14] <author> P. Gemmell and M. Sudan. </author> <title> Highly resilient correctors for polynomials. </title> <note> Information Processing Letters 43 (1992) 169-174. </note>
Reference-contexts: The case where the black box represents a single function with some noise has also been studied previously. Welch and Berlekamp [39, 5] (see also <ref> [14] </ref>) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith [11], Gemmell, Lipton, Rubinfeld, Sudan and Wigderson [13] and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. <p> Welch and Berlekamp [39, 5] (see also <ref> [14] </ref>) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith [11], Gemmell, Lipton, Rubinfeld, Sudan and Wigderson [13] and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. All the above mentioned results require, however, that the field size be at least polynomially large in d ffi . <p> However we will have to do something about the noisy points which do not lie on any nice algebraic curve. We adapt an algorithm of Welch and Berlekamp [39, 5] (see also <ref> [14] </ref>) to handle this situation. Say we sample the black box B in m points x 1 ; : : : ; x m and the black box outputs y 1 ; : : : ; y m according to some (unknown) polynomial Q in all but m 0 locations. <p> We solve this problem by creating a univariate reconstruction problem and then using Theorem 22 to solve this problem. This reduction builds upon a method of <ref> [14] </ref>, which in turn builds upon earlier work of [1, 13].
Reference: [15] <author> O. Goldreich and L. Levin. </author> <title> A hard-core predicate for any one-way function. </title> <booktitle> Proc. 21st ACM Symposium on Theory of Computing, </booktitle> <year> 1989. </year>
Reference-contexts: Reconstructing functions from a black box representing more than one function, or when the function it represents is not guaranteed to be unique, seems to be a relatively unexplored subject. The works of Goldreich and Levin <ref> [15] </ref> and Kushilevitz and Mansour [26] are the only exceptions we know of. Both papers study the reconstruction of n-variate linear functions (i.e., homogenous polynomials of degree 1) from a 1=2 ffi-noisy black box over GF (2). <p> Their algorithm runs in time O ((n; 1 * ) poly (d) ), which is exponential in d. Their algorithm generalizes the earlier mentioned solution of Goldreich and Levin <ref> [15] </ref>.
Reference: [16] <author> O. Goldreich, R. Rubinfeld and M. Sudan. </author> <title> Learning polynomials with queries: The highly noisy case. </title> <booktitle> Proc. 36th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1995. </year>
Reference-contexts: They show that it is possible to factor and compute g.c.d.'s for polynomials given by such a representation and to separate the numerator from the denominator of rational functions given by such a representation. 8 Sudan <ref> [16] </ref> give an algorithm to (explicitly) reconstruct all n-variate degree d polynomials agreeing with a black box over F on * fraction of the inputs, provided * 2 q d=jF j. Their algorithm runs in time O ((n; 1 * ) poly (d) ), which is exponential in d.
Reference: [17] <author> D. Grigoriev. </author> <title> Factorization of Polynomials over a Finite Field and the Solution of Systems of Algebraic Equations. </title> <editor> Translated from Zapiski Nauchnykh Seminarov Lenningradskogo Otdeleniya Matematicheskogo Instituta im. V. A. Steklova AN SSSR, </editor> <volume> Vol. 137, </volume> <pages> pp. 20-79, </pages> <year> 1984. </year>
Reference-contexts: Bivariate factorization can be done efficiently over the rationals [18, 24, 29] and can be done efficiently (probabilistically) over finite fields <ref> [17, 24] </ref>. We now summarize our algorithm.
Reference: [18] <author> D. Grigoriev and A. Chistov. </author> <title> Fast decomposition of polynomials into irreducible ones and the solution of systems of algebraic equations. </title> <journal> Soviet Math. </journal> <note> Doklady , 29 (1984) 380-383. </note>
Reference-contexts: Kaltofen [24] and Grigoriev and Chistov <ref> [18] </ref> show that the problem of bivariate factoring can also be solved in polynomial time by a reduction to univariate factoring, using somewhat deep methods from algebra. <p> Bivariate factorization can be done efficiently over the rationals <ref> [18, 24, 29] </ref> and can be done efficiently (probabilistically) over finite fields [17, 24]. We now summarize our algorithm.
Reference: [19] <author> D. Grigoriev and M. Karpinski. </author> <title> Algorithms for Sparse Rational Interpolation. </title> <type> ICSI Tech. Report, </type> <institution> TR-91-011, </institution> <month> January </month> <year> 1991. </year>
Reference: [20] <author> D. Grigoriev, M. Karpinski, M.F. Singer. </author> <title> Interpolation of Sparse Rational Functions Without Knowing Bounds on Exponents. </title> <institution> Institut fur Informatik der Universitat Bonn, </institution> <note> Report No. 8539-CS, </note> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: Efficient algorithms for sparse multivariate polynomial interpolation are given by Zippel [40, 41], Grigoriev, Karpinski and Singer [21] and Borodin and Tiwari [3], and for sparse rational functions by Grigoriev, Karpinski and Singer <ref> [20] </ref>. The case where the black box represents a single function with some noise has also been studied previously. <p> If the polynomial turns out to be sparse then we can now use any sparse interpolation algorithm from <ref> [3, 20, 21, 40] </ref> to reconstruct an explicit representation of the polynomials in time polynomial in n, d and the number of non-zero coefficients. <p> For instance, if the reconstructed function is a sparse multivariate polynomial, then we can use any of the sparse multivariate polynomial interpolation algorithms given in <ref> [3, 20, 21, 40] </ref> to recover explicit representations of the reconstructed functions, in running time which is polynomial in the number of non-zero coefficients rather than total number of possible coefficients.
Reference: [21] <author> D. Grigoriev, M. Karpinski, M.F. Singer. </author> <title> Fast Parallel Algorithms for Sparse Multivari-ate Polynomial Interpolation over Finite Fields. </title> <journal> SIAM J. Comput., </journal> <volume> Vol. 19, No. 6, </volume> <pages> pp 1059-1063, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Efficient algorithms for sparse multivariate polynomial interpolation are given by Zippel [40, 41], Grigoriev, Karpinski and Singer <ref> [21] </ref> and Borodin and Tiwari [3], and for sparse rational functions by Grigoriev, Karpinski and Singer [20]. The case where the black box represents a single function with some noise has also been studied previously. <p> If the polynomial turns out to be sparse then we can now use any sparse interpolation algorithm from <ref> [3, 20, 21, 40] </ref> to reconstruct an explicit representation of the polynomials in time polynomial in n, d and the number of non-zero coefficients. <p> For instance, if the reconstructed function is a sparse multivariate polynomial, then we can use any of the sparse multivariate polynomial interpolation algorithms given in <ref> [3, 20, 21, 40] </ref> to recover explicit representations of the reconstructed functions, in running time which is polynomial in the number of non-zero coefficients rather than total number of possible coefficients.
Reference: [22] <author> D. </author> <title> Haussler Decision Theoretic Generalizations of the PAC Model for Neural Net and Other Learning Applications. </title> <journal> Information and Computation, </journal> <volume> 100,pp. </volume> <pages> 78-150, </pages> <year> (1992). </year>
Reference-contexts: Our techniques in combination with Rivest's algorithm yield a consistent hypothesis, but since our hypothesis is not a boolean function, we must use the work of Haussler <ref> [22] </ref> to see that a consistent hypothesis is a good hypothesis. Independent of our work, Blum and Chalasani [6] also consider a model of learning from examples where the examples may be classified according to one of several different concepts.
Reference: [23] <author> J. Henderson and R. Quandt. </author> <title> Microeconomic Theory, </title> <publisher> McGraw Hill Book Company, </publisher> <year> 1958, 1971. </year>
Reference-contexts: However, it is also the case that this curve may change <ref> [23] </ref>.
Reference: [24] <author> E. Kaltofen. </author> <title> A Polynomial-Time Reduction from Bivariate to Univariate Integral Polynomial Factorization. </title> <booktitle> In 23rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 57-64, </pages> <year> 1982. </year>
Reference-contexts: Kaltofen <ref> [24] </ref> and Grigoriev and Chistov [18] show that the problem of bivariate factoring can also be solved in polynomial time by a reduction to univariate factoring, using somewhat deep methods from algebra. <p> Bivariate factorization can be done efficiently over the rationals <ref> [18, 24, 29] </ref> and can be done efficiently (probabilistically) over finite fields [17, 24]. We now summarize our algorithm. <p> Bivariate factorization can be done efficiently over the rationals [18, 24, 29] and can be done efficiently (probabilistically) over finite fields <ref> [17, 24] </ref>. We now summarize our algorithm.
Reference: [25] <author> E. Kaltofen and B. Trager. </author> <title> Computing with Polynomials Given by Black Boxes for Their Evaluations: Greatest Common Divisors, Factorization, Separation of Numerators and Denominators. </title> <booktitle> In 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 296-305, </pages> <year> 1988. </year>
Reference-contexts: On the other hand, by using the techniques of <ref> [25] </ref> we can also continue to manipulate the black boxes as they are for whatever purposes 1 . We now describe our result for reconstructing multivariate polynomials. <p> Some recent work has addressed this question. Goldreich, Rubinfeld and 1 The idea of manipulating multivariate polynomials and rational functions represented by black boxes was proposed by Kaltofen and Trager in <ref> [25] </ref>.
Reference: [26] <author> E. Kushilevitz and Y. Mansour. </author> <title> Learning decision trees using the Fourier spectrum. </title> <booktitle> Proc. 23rd ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: Reconstructing functions from a black box representing more than one function, or when the function it represents is not guaranteed to be unique, seems to be a relatively unexplored subject. The works of Goldreich and Levin [15] and Kushilevitz and Mansour <ref> [26] </ref> are the only exceptions we know of. Both papers study the reconstruction of n-variate linear functions (i.e., homogenous polynomials of degree 1) from a 1=2 ffi-noisy black box over GF (2).
Reference: [27] <author> R. Lidl and H. Niederreiter. </author> <title> Introduction to finite fields and their applications. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1986 </year>
Reference-contexts: of a polynomial is simply the sum of the derivatives of the monomials in it.) The above definition is motivated by the following well-known fact: A polynomial p (over any unique factorization domain) has repeated non-constant factors if and only if it shares a common factor with its derivative (cf. <ref> [27] </ref>, Theorem 1.68). From the well-known fact about resultants, this extends to saying that a polynomial has repeated non-constant factors if and only if its discriminant is zero.
Reference: [28] <author> R. Lipton. </author> <title> New directions in testing. </title> <booktitle> In Distributed Computing and Cryptography, DIMACS Series on Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 191-202, </pages> <editor> v. </editor> <volume> 2, </volume> <year> 1991. </year>
Reference: [29] <author> A. K. Lenstra, H. W. Lenstra and L. Lovasz. </author> <title> Factoring polynomials with rational coefficients. </title> <journal> Math. Ann., </journal> <volume> 261 (1982), </volume> <pages> 515-534. </pages>
Reference-contexts: Bivariate factorization can be done efficiently over the rationals <ref> [18, 24, 29] </ref> and can be done efficiently (probabilistically) over finite fields [17, 24]. We now summarize our algorithm.
Reference: [30] <author> D. Marr and E. Hildreth. </author> <title> Theory of edge detection. </title> <journal> Proceeding of the Royal Society London, </journal> <volume> B207, </volume> <pages> pp. 187-217, </pages> <year> 1980. </year>
Reference: [31] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference: [32] <author> R. Rivest. </author> <title> Learning Decision Lists. </title> <journal> Machine Learning, </journal> <volume> 2(3), </volume> <pages> pages 229-246, </pages> <year> 1987. </year>
Reference-contexts: If the terms are restricted to being conjunctions of at most c literals, we call it a polynomial-valued c-decision list. This is an extension of the boolean decision list model defined by Rivest in <ref> [32] </ref>, where the polynomials f i are restricted to being the constants 0 or 1. In [32], Rivest shows that the class of boolean c-decision lists is learnable in polynomial time. <p> This is an extension of the boolean decision list model defined by Rivest in <ref> [32] </ref>, where the polynomials f i are restricted to being the constants 0 or 1. In [32], Rivest shows that the class of boolean c-decision lists is learnable in polynomial time. Using our techniques, in combination with Rivest's algorithm, we can extend this result to show that the class of polynomial-valued c-decision lists can be learned in polynomial time.
Reference: [33] <author> T.J. Rivlin. </author> <title> An Introduction of the Approximation of Functions. </title> <publisher> Dover Publications, </publisher> <year> 1969. </year>
Reference-contexts: Depending on the exact specification of the "fit" the problem takes on different flavors: for instance, if the curve is to pass close to all the points, then this becomes a uniform approximation problem (see text by Rivlin <ref> [33] </ref>), while if the curve is supposed to pass through most of the points, then it resembles problems from coding theory. Here, we consider a problem that unifies the above two instances over discrete domains.
Reference: [34] <author> R. Rubinfeld and R. Zippel. </author> <title> A new modular interpolation algorithm for factoring multivariate polynomials. </title> <booktitle> Proc. Algorithmic Number Theory Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: This is the true problem underlying the application to computer vision. While the ideas in this paper do not immediately apply to this question, some variants (in particular, the variant employed in [35]) seem promising and deserve to be investigated further. In other related work, Rubinfeld and Zippel <ref> [34] </ref> have employed the black box reconstruction problem and build on the techniques presented in this paper to present a modular approach to the polynomial factorization problem. While the application presented in this paper (in Section 4.2) is to a restricted subclass of the bivariate factorization problem, the work of [34] <p> <ref> [34] </ref> have employed the black box reconstruction problem and build on the techniques presented in this paper to present a modular approach to the polynomial factorization problem. While the application presented in this paper (in Section 4.2) is to a restricted subclass of the bivariate factorization problem, the work of [34] finds an application to the general multivariate factorization problem. 1.3 Organization The rest of this paper is organized as follows. In Section 2, we describe our results for univariate polynomials, rational functions and other algebraic functions.
Reference: [35] <author> M. Sudan. </author> <title> Decoding of Reed Solomon codes beyond the error-correction bound. </title> <journal> Journal of Complexity, </journal> <volume> 13(1) </volume> <pages> 180-193, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: Their algorithm runs in time O ((n; 1 * ) poly (d) ), which is exponential in d. Their algorithm generalizes the earlier mentioned solution of Goldreich and Levin [15]. For the case of univariate polynomials, Sudan <ref> [35] </ref>, has given a polynomial time algorithm which can find all degree d polynomials agreeing with a black box on * fraction of the domain, provided * 2 q The main contribution in [35] is a simple observation which shows that m input/output pairs from any black box can be thought <p> For the case of univariate polynomials, Sudan <ref> [35] </ref>, has given a polynomial time algorithm which can find all degree d polynomials agreeing with a black box on * fraction of the domain, provided * 2 q The main contribution in [35] is a simple observation which shows that m input/output pairs from any black box can be thought of as the output of a (1; O ( p m))-algebraic black box. <p> Using this observation, Lemma 18 of this paper is applied to reconstruct all polynomials of low degree which describe the black box on *-fraction of the inputs. Finding a similar solution for the multivariate cases remains open (some cases are addressed by <ref> [35] </ref>, but the problem is not completely resolved). A second question that is left open is the task of solving the (k; d)-polynomial black box problem over the reals, where the points are not provided to infinite precision. This is the true problem underlying the application to computer vision. <p> This is the true problem underlying the application to computer vision. While the ideas in this paper do not immediately apply to this question, some variants (in particular, the variant employed in <ref> [35] </ref>) seem promising and deserve to be investigated further. In other related work, Rubinfeld and Zippel [34] have employed the black box reconstruction problem and build on the techniques presented in this paper to present a modular approach to the polynomial factorization problem.
Reference: [36] <author> L. Valiant, </author> <title> A Theory of the Learnable, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 27, No. 11, pp.1134-1142, </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: The task of learning the price-demand relationship may be decomposed into the two subtasks of first determining the unknown curves, and then learning what determines the move from one curve to another. Our algorithm gives a solution for the first task. We consider the Valiant model of PAC learning <ref> [36] </ref>, in which a concept is learnable if there is an efficient algorithm that is able to find a good approximation to the concept on the basis of sample data.
Reference: [37] <editor> Van der Waerden. </editor> <booktitle> Algebra, </booktitle> <volume> Volume 1. </volume> <publisher> Frederick Ungar Publishing Co., Inc., </publisher> <pages> page 82. </pages>
Reference: [38] <author> R. J. Walker. </author> <title> Algebraic Curves. </title> <publisher> Princeton University Press, </publisher> <year> 1950. </year>
Reference-contexts: Bezout's bound is slightly weaker than the one we wish to prove for the case of (k; d)-algebraic black boxes, so we prove our lemma from first principles. Before going on to the next lemma we review a couple of standard definitions from algebra (cf. <ref> [38] </ref>). <p> 1 X d i (i) k 1 X (i + k (i))d + i=k 1 +1 = i=1 k+k 1 X (i)d + kk 1 d This concludes the proof. 15 It is well-known that the resultant of two polynomials is zero iff the polynomials share a common factor (cf. <ref> [38] </ref>, Chapter 1, Theorem 9.3). We will show that R y (x) is identically zero and this will suffice to prove the lemma. We show this part in the next claim by showing that R y (x) has more zeroes than the upper bound on its degree.
Reference: [39] <author> L. Welch and E. Berlekamp. </author> <title> Error Correction of Algebraic Block Codes. </title> <type> US Patent Number 4,633,470, </type> <note> issued December 1986. </note>
Reference-contexts: The case where the black box represents a single function with some noise has also been studied previously. Welch and Berlekamp <ref> [39, 5] </ref> (see also [14]) show how to reconstruct a univariate polynomial from a ( 1 2 ffi)-noisy (1; d)-polynomial black box and Coppersmith [11], Gemmell, Lipton, Rubinfeld, Sudan and Wigderson [13] and Gemmell and Sudan [14] show how to do the same for multivariate polynomials. <p> However we will have to do something about the noisy points which do not lie on any nice algebraic curve. We adapt an algorithm of Welch and Berlekamp <ref> [39, 5] </ref> (see also [14]) to handle this situation.
Reference: [40] <author> R.E. Zippel. </author> <title> Probabilistic Algorithms for Sparse Polynomials. </title> <booktitle> In Proc. EUROSAM '79, </booktitle> <publisher> Springer Verlag LNCS, </publisher> <pages> pages 216-226, </pages> <editor> v. </editor> <volume> 72, </volume> <year> 1979. </year>
Reference-contexts: Efficient algorithms for sparse multivariate polynomial interpolation are given by Zippel <ref> [40, 41] </ref>, Grigoriev, Karpinski and Singer [21] and Borodin and Tiwari [3], and for sparse rational functions by Grigoriev, Karpinski and Singer [20]. The case where the black box represents a single function with some noise has also been studied previously. <p> If the polynomial turns out to be sparse then we can now use any sparse interpolation algorithm from <ref> [3, 20, 21, 40] </ref> to reconstruct an explicit representation of the polynomials in time polynomial in n, d and the number of non-zero coefficients. <p> For instance, if the reconstructed function is a sparse multivariate polynomial, then we can use any of the sparse multivariate polynomial interpolation algorithms given in <ref> [3, 20, 21, 40] </ref> to recover explicit representations of the reconstructed functions, in running time which is polynomial in the number of non-zero coefficients rather than total number of possible coefficients.
Reference: [41] <author> R.E. Zippel. </author> <title> Interpolating Polynomials from their Values. </title> <journal> J. Symbolic Computation 9, </journal> <pages> pages 375-403, </pages> <year> 1990. </year> <month> 30 </month>
Reference-contexts: Efficient algorithms for sparse multivariate polynomial interpolation are given by Zippel <ref> [40, 41] </ref>, Grigoriev, Karpinski and Singer [21] and Borodin and Tiwari [3], and for sparse rational functions by Grigoriev, Karpinski and Singer [20]. The case where the black box represents a single function with some noise has also been studied previously.
References-found: 41

