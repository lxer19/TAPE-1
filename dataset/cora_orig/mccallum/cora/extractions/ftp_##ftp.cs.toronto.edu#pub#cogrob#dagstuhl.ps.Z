URL: ftp://ftp.cs.toronto.edu/pub/cogrob/dagstuhl.ps.Z
Refering-URL: 
Root-URL: 
Email: email: tgk@cs.toronto.edu  
Title: Modeling Complex Systems in the Situation Calculus: A Case Study Using the Dagstuhl Steam Boiler Problem  
Author: Todd G. Kelley 
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: The situation calculus is showing considerable promise as a formal framework for modeling the dynamical worlds encountered in real life. We take advantage of the results of [Rei96] to show that the situation calculus is a powerful and practical modeling language. The paper provides a brief overview of the concurrent temporal situation calculus and how it is used to specify physical behavior. It then presents the Dagstuhl steam boiler problem as an example of a complex physical system of interest in the real world. The problem was the focus of the Dagstuhl meeting, "Methods for Semantics and Specification", whose goal was to develop criteria by which to compare advantages and drawbacks of formal methods for practical applications. The paper presents the situation calculus specification of the focus of the problem, the steam boiler controller. It then discusses the theoretical foundation of a PRO-LOG technology simulator, which, together with the specification, form an implementation of the controller. The paper concludes with an evaluation of the situation calculus solution to the problem, using the criteria which emanated from the Dagstuhl meeting.
Abstract-found: 1
Intro-found: 1
Reference: [ABL95] <editor> Jean-Raymond Abrial, Egon Boerger, and Hans Langmaack. </editor> <title> Preliminary report for the Dagstuhl-seminar 9523: Methods for semantics and specification. </title> <note> Available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, 1995. </note>
Reference-contexts: Hence, the problem is ideal for exhibiting the features of the situation calculus. In this paper, I present an evaluation of the situation calculus solution to the problem, using the criteria which emanated from the Dagstuhl meeting <ref> [ABL95] </ref>. 2 Situation Calculus Ontology The situation calculus is designed to formalize the behavior of dynamically changing worlds. Intuitively there are two facets to the ontology itself: 1) distinguishing between different courses of action, and 2) determining the state of the world after different courses of action. <p> (PUMP_CONTROL_STATE (1,0),10)], do ([transmit (MODE (NORMAL),5)], do ([switch_to_mode (normal,5)], do ([receive (PHYSICAL_UNITS_READY,5), receive (level (400.0),5), receive (steam (0.0),5), receive (PUMP_STATE (1,0),5),..., receive (PUMP_CONTROL_STATE (1,0),5)], do ([transmit (PROGRAM_READY,0), transmit (MODE (INITIALIZATION),0), do ([receive (STEAM_BOILER_WAITING,0)],s0)...) 7 Evaluation of the Solution In this section, we attempt to apply the evaluation criteria given in <ref> [ABL95] </ref> to this formalization and simulation. These criteria were formulated by participants at the Dagstuhl meeting to evaluate various solutions to the steam boiler problem and to compare the specific merits and drawbacks of the formal methods used in those solutions.
Reference: [Abr94] <author> Jean-Raymond Abrial. </author> <title> Steam-boiler control specification problem. Distributed to the participants of the Dagstuhl Meeting, "Methods for Semantics and Specification", </title> <address> June 4-9, </address> <year> 1995. </year> <title> This paper, and its companion, "Additional infor-mation concerning the physical behavior of the steam boiler", </title> <note> are available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, August 1994. </note>
Reference-contexts: Hence, a specification in situation calculus form is also an implementation whose behavioral properties are automatically formally verified against the specification. To illustrate that the situation calculus is a practical modeling language, we have formalized the controller specification for the Dagstuhl steam boiler <ref> [Abr94] </ref>. The original text from which the specification is derived was written by LtCol. J. C. <p> Successor state axioms such as this embody Reiter's [Rei91] solution to the frame problem. 3 The Dagstuhl Steam Boiler In this section, we attempt merely to introduce the Dagstuhl steam boiler problem in enough detail for the purposes of this paper, rather than reproduce the specification. See <ref> [Abr94] </ref> for the complete specifica tion. <p> We attempt to keep our notation consistent with the original problem description, <ref> [Abr94] </ref>. Messages are denoted by functions and constants with upper case names. Mandatory messages must be present in every transmission. <p> Control strategies other than this one are possible; however, this one is proposed in <ref> [Abr94] </ref> as a reasonable candidate.
Reference: [Cla78] <author> K. L. Clark. </author> <title> Negation as failure. </title> <editor> In Herve Gallaire and Jack Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference: [Kel96] <author> T. G. Kelley. </author> <title> Reasoning about physical systems with the situation calculus. In COMMON SENSE '96: </title> <booktitle> the third symposium on logical formalizations of common-sense reasoning, </booktitle> <institution> Stanford University, </institution> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. These physical systems (the toilet of <ref> [Kel96] </ref> is another example) involve time, continuous processes, and simultaneous natural actions (those dictated by the laws of physics). The situation calculus of [Rei96] provides a knowledge representation framework that is conducive to the specification and simulation of such systems, while explicitly embodying a solution to the frame problem.
Reference: [Kui86] <author> Benjamin Kuipers. </author> <title> Qualitative simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 29 </volume> <pages> 289-338, </pages> <year> 1986. </year>
Reference-contexts: We say that the behavior of the parameter is constant. Unlike the QSIM-style qualitative reasoners (e.g. <ref> [Kui86] </ref>), which abstract change over points and intervals from the continous change of a parameter, a situation calculus treatment abstracts behavior from the continuous change. This treatment of continuous processes is in the spirit of Sandewall's work [San89].
Reference: [Lot95] <author> Annette Lotzbeyer. </author> <title> Simulator for the dagstuhl seminar 1995: Steam boiler control specification problem. The README file and tcl/tk source code for the simulator are available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, 1995. </title>
Reference-contexts: Rischel et al ([RCM + 95]) use a specification language that has a real-time interval logic semantics for the specification, and they use C code for the implementation. 7.2 Practicality Has the solution actually been implemented and can it control the FZI simulation <ref> [Lot95] </ref> of the steam boiler? The situation calculus solution is also strong in this regard, since an elementary change in syntax of the spec ification produces a working implementation.
Reference: [Lam94] <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <year> 1994. </year>
Reference-contexts: Other solutions to the problem are based on logical formalisms, but those formalisms are separate from the actual implementation. For example, Leke and Merz ([LM95]) use Lamport's Temporal Logic of Actions (TLA) <ref> [Lam94] </ref> in their solution, leaving the implementation language open. They consider this a feature, since the implementation language can be chosen to suite a variety of machine architectures.
Reference: [LLL + 96] <author> Yves Lesperance, Hector J. Levesque, Fangzhen Lin, Daniel Marcu, Raymond Reiter, and Richard B. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Volume II|Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), </booktitle> <pages> pages 331-346. </pages> <note> Springer-Verlag, Lecture Notes in Artificial Intelligence, 1996. To Appear. </note>
Reference-contexts: A single formal theory of action and time that satisfies these conditions is the ongoing objective of the Cognitive Robotics Group. Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved <ref> [Rei91, Pin94, LRL + 96, LLL + 96, SL93] </ref>. This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. <p> She cannot write down, for example, that at time t, the controller will receive message m, and do x. Knowledge-producing actions are required to handle this issue properly (see, for example, <ref> [LLL + 96, SL93] </ref>). The receipt of a message would be represented by the execution of a knowledge-producing action.
Reference: [LM95] <author> Frank Leke and Stephan Merz. </author> <title> Steam boiler control specification problem: A tla solution. </title> <note> This paper is available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, September 1995. </note>
Reference: [LR94] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: The predicate symbol &lt;, where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concur rent). * The foundational axioms for the concurrent temporal situation calculus, provided in [Rei96], which are generalizations of those provided in <ref> [LR94] </ref> and [Rei93] for the nonconcurrent situation calculus.
Reference: [LRL + 96] <author> H. J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <note> Special Issue on Reasoning about Action and Change, 1996. To appear. </note>
Reference-contexts: A single formal theory of action and time that satisfies these conditions is the ongoing objective of the Cognitive Robotics Group. Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved <ref> [Rei91, Pin94, LRL + 96, LLL + 96, SL93] </ref>. This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. <p> These axioms include unique names axioms for situations, a definition for &lt;, a coherency criterion for concurrent actions, and an induction axiom. 4.1 Axiomatizing Application Domains Levesque et al. <ref> [LRL + 96] </ref> list the general types of axioms required to formalize an application domain in the situation calculus.
Reference: [MH69] <author> John McCarthy and Patrick Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <address> Scotland, </address> <year> 1969. </year>
Reference-contexts: When the program detects that a component is faulty, it sends an appropriate message to the operator desk. After the component is repaired, an appropriate message is sent to the controller to inform it of the repair. 4 The Situation Calculus Language The instantiation of McCarthy's <ref> [MH69] </ref> situation calculus language used in this paper to formalize the steam boiler controller is due to Reiter [Rei96], largely influenced by Pinto's [Pin94] work on concurrency and continuous processes.
Reference: [Pin94] <author> Javier Andres Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Toronto, </institution> <address> Ontario, Canada, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: A single formal theory of action and time that satisfies these conditions is the ongoing objective of the Cognitive Robotics Group. Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved <ref> [Rei91, Pin94, LRL + 96, LLL + 96, SL93] </ref>. This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. <p> Functional fluents are functions whose value varies from one situation to another. For example, const position (ball; s) might denote the real-valued constant position of a ball in situation s. Continuous processes are represented using functional fluents. The important idea, due to Pinto <ref> [Pin94] </ref>, is that although a continuous process involves continuous change in the values of one or more parameters, the values of the parameters can be modeled by equations which do not change in a particular situation. We say that the behavior of the parameter is constant. <p> the component is repaired, an appropriate message is sent to the controller to inform it of the repair. 4 The Situation Calculus Language The instantiation of McCarthy's [MH69] situation calculus language used in this paper to formalize the steam boiler controller is due to Reiter [Rei96], largely influenced by Pinto's <ref> [Pin94] </ref> work on concurrency and continuous processes. The language has the following ontology: * a sort situation, and a distinguished situation con stant symbol S 0 : * a sort time ranging over the reals. * a sort action of simple actions.
Reference: [RCM + 95] <author> Hans Rischel, Jorge Cuellar, Simon Mtrk, Anders P. Ravn, and Isolde Wildgru-ber. </author> <title> Development of safety-critical real-time systems. </title> <note> This paper is available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, 1995. </note>
Reference: [Rei91] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: A single formal theory of action and time that satisfies these conditions is the ongoing objective of the Cognitive Robotics Group. Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved <ref> [Rei91, Pin94, LRL + 96, LLL + 96, SL93] </ref>. This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. <p> Successor state axioms such as this embody Reiter's <ref> [Rei91] </ref> solution to the frame problem. 3 The Dagstuhl Steam Boiler In this section, we attempt merely to introduce the Dagstuhl steam boiler problem in enough detail for the purposes of this paper, rather than reproduce the specification. See [Abr94] for the complete specifica tion.
Reference: [Rei93] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: symbol &lt;, where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concur rent). * The foundational axioms for the concurrent temporal situation calculus, provided in [Rei96], which are generalizations of those provided in [LR94] and <ref> [Rei93] </ref> for the nonconcurrent situation calculus.
Reference: [Rei96] <author> R. Reiter. </author> <title> Natural actions, concurrency and continuous time in the situation calculus. </title> <editor> In L. C. Aiello, J. Doyle, and S. C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR '96). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved [Rei91, Pin94, LRL + 96, LLL + 96, SL93]. This paper concentrates specifically on the results of <ref> [Rei96] </ref> which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. These physical systems (the toilet of [Kel96] is another example) involve time, continuous processes, and simultaneous natural actions (those dictated by the laws of physics). The situation calculus of [Rei96] provides <p> of <ref> [Rei96] </ref> which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. These physical systems (the toilet of [Kel96] is another example) involve time, continuous processes, and simultaneous natural actions (those dictated by the laws of physics). The situation calculus of [Rei96] provides a knowledge representation framework that is conducive to the specification and simulation of such systems, while explicitly embodying a solution to the frame problem. As a specification language, the situation calculus boasts many desirable properties. <p> After the component is repaired, an appropriate message is sent to the controller to inform it of the repair. 4 The Situation Calculus Language The instantiation of McCarthy's [MH69] situation calculus language used in this paper to formalize the steam boiler controller is due to Reiter <ref> [Rei96] </ref>, largely influenced by Pinto's [Pin94] work on concurrency and continuous processes. The language has the following ontology: * a sort situation, and a distinguished situation con stant symbol S 0 : * a sort time ranging over the reals. * a sort action of simple actions. <p> (and similarly for any concurrent action c). * The predicate symbol &lt;, where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concur rent). * The foundational axioms for the concurrent temporal situation calculus, provided in <ref> [Rei96] </ref>, which are generalizations of those provided in [LR94] and [Rei93] for the nonconcurrent situation calculus. <p> A legal situation is consistent with the laws of Nature, in that a natural action must occur at the time dictated by natural laws governing the behavior of the system, unless the action is prevented from occurring by an earlier action. Reiter <ref> [Rei96] </ref> defines the legal (s) predicate to formalize this principle: legal (s) S 0 s ^ (8a; c; s 0 ):natural (a) ^ P oss (a; s 0 ) ^ (9) do (c; s 0 ) s a 2 c _ time (c) &lt; time (a): Here, is the ordering relation <p> The legal predicate is instrumental in the implementation of a simulator, as will become clear. A domain of discourse in which all actions are natural is said to comply with Reiter's <ref> [Rei96] </ref> Natural World Condition (N W C). This condition assures a deterministic simulation. Another concept crucial to the implementation of a simulator is the notion of Reiter's [Rei96] Least Natu ral Time Points: lntp (s; t) (10) (9a)[natural (a) ^ P oss (a; s) ^ time (a) = t] ^ (8a)[natural <p> A domain of discourse in which all actions are natural is said to comply with Reiter's <ref> [Rei96] </ref> Natural World Condition (N W C). This condition assures a deterministic simulation. Another concept crucial to the implementation of a simulator is the notion of Reiter's [Rei96] Least Natu ral Time Points: lntp (s; t) (10) (9a)[natural (a) ^ P oss (a; s) ^ time (a) = t] ^ (8a)[natural (a) ^ P oss (a; s) time (a) t]: Informally, the least natural time point is the earliest time at which any natural action can possibly occur <p> An example of a world where this condition fails is one in which we have (8a):natural (a) (9x; t)a = B (x; t), where x ranges over the nonzero natural numbers, and P oss (B (x; t); s) t = start (s) + 1=x. Reiter <ref> [Rei96] </ref> puts this all together with his foundational axioms for the concurrent temporal situation calculus and proves: LN T P C ^ N W C legal (do (c; s)) flegal (s) ^ P oss (c; s) ^ start (s) &lt; time (c) ^ (8a)[a 2 c P oss (a; s) ^
Reference: [San89] <author> Erik Sandewall. </author> <title> Combining logic and differential equations for describing real-world systems. </title> <booktitle> In First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Mateo, CA, 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Unlike the QSIM-style qualitative reasoners (e.g. [Kui86]), which abstract change over points and intervals from the continous change of a parameter, a situation calculus treatment abstracts behavior from the continuous change. This treatment of continuous processes is in the spirit of Sandewall's work <ref> [San89] </ref>. This work introduces the idea of using differential equations to represent the behavior of parameters, and using logic to specify which differential equations model the behavior of a parameter during the different phases of the evolution of a dynamical system.
Reference: [SI95] <author> So-Ming So and Mabo R. Ito. </author> <title> Graftab | an innovative requirements specification method. </title> <note> This paper is available via WWW at http://www.informatik.uni-kiel.de/~procos/dag9523/dag9523.html, October 1995. </note>
Reference: [SL93] <author> Richard B. Scherl and Hector J. Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 689-695, </pages> <address> Washing-ton, DC, July 1993. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: A single formal theory of action and time that satisfies these conditions is the ongoing objective of the Cognitive Robotics Group. Encouraging progress towards this long-range objective using the situation calculus as the framework has been achieved <ref> [Rei91, Pin94, LRL + 96, LLL + 96, SL93] </ref>. This paper concentrates specifically on the results of [Rei96] which make it possible to formally model the behavior of physical systems as complex as a steam boiler controller. <p> She cannot write down, for example, that at time t, the controller will receive message m, and do x. Knowledge-producing actions are required to handle this issue properly (see, for example, <ref> [LLL + 96, SL93] </ref>). The receipt of a message would be represented by the execution of a knowledge-producing action.
References-found: 20

