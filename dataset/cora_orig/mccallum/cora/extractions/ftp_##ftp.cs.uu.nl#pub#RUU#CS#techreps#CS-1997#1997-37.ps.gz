URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-37.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: fhansb,sedthilkg@cs.ruu.nl  
Title: Graphs with Branchwidth at most Three  
Author: Hans L. Bodlaender Dimitrios M. Thilikos 
Keyword: graph algorithms, branchwidth, obstruction set, graph minor, reduction rule.  
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University,  
Abstract: In this paper we investigate both the structure of graphs with branchwidth at most three, as well as algorithms to recognise such graphs. We show that a graph has branchwidth at most three, if and only if it has treewidth at most three and does not contain the three-dimensional binary cube graph as a minor. A set of four graphs is shown to be the obstruction set of graphs with branchwidth at most three. We give a safe and complete set of reduction rules for the graphs with branchwidth at most three. Using this set, a linear time algorithm is given that checks if a given graph has branchwidth at most three, and, if so, outputs a minimum width branch decomposition.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embeddings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: As both treewidth and branchwidth are NP-complete parameters (see <ref> [1, 18] </ref>), it appears an interesting task to find algorithms solving the following problems (k is assumed to be a fixed constant). d k (T )): Check if an input graph has branchwidth (treewidth) at most k. c k (T )): Given a graph with branchwidth (treewidth) at most k, output
Reference: [2] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40 </volume> <pages> 1134-1164, </pages> <year> 1993. </year>
Reference-contexts: These reductions are in fact a special case of a more general form of reductions as studied amongst others in <ref> [2] </ref> where subgraphs can be rewritten to graphs, different from a clique. (t:i) (t:ii) (t:iii) null graph 3 We denote as R t3 the set of reduction rules ft:i; t:ii; t:iii; t:iv; t:v; t:vig, shown in Figure 1.
Reference: [3] <author> S. Arnborg and A. Proskurowski. </author> <title> Characterization and recognition of partial 3-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 </volume> <pages> 305-314, </pages> <year> 1986. </year>
Reference-contexts: As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 <ref> [3, 10, 12] </ref>, treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7].
Reference: [4] <author> S. Arnborg, A. Proskurowski, and D. G. Corneil. </author> <title> Forbidden minors characterization of partial 3-trees. </title> <journal> Disc. Math., </journal> <volume> 80 </volume> <pages> 1-19, </pages> <year> 1990. </year>
Reference-contexts: on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 [3, 10, 12], treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known <ref> [4, 17, 20] </ref>. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical.
Reference: [5] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <journal> SIAM J. Comput., </journal> <volume> 25 </volume> <pages> 1305-1317, </pages> <year> 1996. </year>
Reference-contexts: It is also known that for, any k, the class of graphs where treewidth (or branchwidth) is bounded by a fixed k is minor closed (see also Theorem 1). An immediate consequence of this fact (using results from Robertson and Seymour and the algorithm from <ref> [5] </ref>) is the existence of a linear time algorithm solving d k (B) or d Unfortunately, in this way, we only get a non-constructive proof of the existence of such an algorithm, but in order to construct the algorithm, we must know the corresponding obstruction set. <p> Additionally, we would like to have an algorithm that non only decides on branchwidth, but also constructs the corresponding branch decomposition. Much research has been done towards the construction of linear time algorithms solving d k (T ). In <ref> [5] </ref>, a linear (on the size of the input) time algorithm for treewidth was constructed.
Reference: [6] <author> H. L. Bodlaender, T. Kloks, and D. Kratsch. </author> <title> Treewidth and pathwidth of permutation graphs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 8(4) </volume> <pages> 606-616, </pages> <year> 1995. </year>
Reference: [7] <author> H. L. Bodlaender and D. M. Thilikos. </author> <title> Constructive linear time algorithms for branchwidth. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Proceedings 24th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 627-637. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1256, </volume> <year> 1997. </year>
Reference-contexts: algorithms first try to find a tree decomposition of small width, and then utilise the advantages of the tree structure of the decomposition. fl This paper is the full version of part of the paper titled "Constructive Linear Time Algorithms for Branch-width" which appeared in the proceedings of ICALP'97 (see <ref> [7] </ref>). y This research was partially supported by ESPRIT Long Term Research Project 20244 (project ALCOM IT: Algorithms and Complexity in Information Technology). z The second author was supported by the Training and Mobility of Researchers (TMR) Program, (EU contract no ERBFMBICT950198). 1 The branchwidth of a graph differs from its <p> Recently, a linear time algorithm solving d k (B) and c k (B) was given in <ref> [7] </ref>. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical. In this paper, we provide special "tailor made" results for the case where k 3. <p> Recently, a linear time algorithm solving d k (B) and c k (B) was given in <ref> [7] </ref>. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical. In this paper, we provide special "tailor made" results for the case where k 3.
Reference: [8] <author> W. Cook, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: seems to give better constant factors in the implementation of the algorithms; for instance, Cook used branch decompositions as an important ingredient in a practical approximation algorithm for the Travelling Salesman Problem [9], and remarked that branch-width was the more natural notion (instead of treewidth) to use for that problem <ref> [8] </ref>: where tree decompositions primarily are concerned with vertices, branch decompositions deal more with edges (in a loose sense.) We also mention that the branchwidth of planar graphs can be computed in polynomial time (see [18]).
Reference: [9] <author> W. Cook and P. D. Seymour. </author> <title> An algorithm for the ring-routing problem. </title> <type> Bellcore technical memorandum, </type> <institution> Bellcore, </institution> <year> 1993. </year>
Reference-contexts: also bounded branchwidth.) In fact, in some cases, it appears that branchwidth is more convenient to use, and seems to give better constant factors in the implementation of the algorithms; for instance, Cook used branch decompositions as an important ingredient in a practical approximation algorithm for the Travelling Salesman Problem <ref> [9] </ref>, and remarked that branch-width was the more natural notion (instead of treewidth) to use for that problem [8]: where tree decompositions primarily are concerned with vertices, branch decompositions deal more with edges (in a loose sense.) We also mention that the branchwidth of planar graphs can be computed in polynomial
Reference: [10] <author> Y. Kajitani, A. Ishizuka, and S. Ueno. </author> <title> A characterization of the partial k-tree in terms of certain substructures. </title> <booktitle> Graphs and Combinatorics, </booktitle> <volume> 2 </volume> <pages> 233-246, </pages> <year> 1986. </year>
Reference-contexts: As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 <ref> [3, 10, 12] </ref>, treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7].
Reference: [11] <author> T. Kloks. </author> <title> Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1993. </year> <month> 19 </month>
Reference-contexts: Then, G 0 is a crossless chordal graph with maximum clique size at most 4. Proof. It is known that if G 0 is a minimal triangulation of a partial k-tree, then G 0 has maximum clique size at most k+1 (see e.g. Chapter 2 of <ref> [11] </ref>). What remains to prove is that G 0 is crossless. Suppose that G 0 contain a cross S. Then all the triples of S are minimal separators and, because of Theorem 3, they are also minimum separators of G.
Reference: [12] <author> J. Matousek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <journal> J. Algo--rithms, </journal> <volume> 12 </volume> <pages> 1-22, </pages> <year> 1991. </year>
Reference-contexts: As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 <ref> [12, 20] </ref>, treewidth 3 [3, 10, 12], treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. <p> As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 <ref> [3, 10, 12] </ref>, treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7].
Reference: [13] <author> J. Matousek and R. Thomas. </author> <title> On the complexity of finding iso- and other morphisms for partial k-trees. </title> <journal> Disc. Math., </journal> <volume> 108 </volume> <pages> 343-364, </pages> <year> 1992. </year>
Reference-contexts: The reductions can be applied in linear time observing that every edge of an occurrence of a reduction of the set R b3 in a graph G is incident to a vertex of degree 5 and using the same approach as the one used in <ref> [13] </ref> by Matousek and Thomas (their algorithm is based on the same observation about the set R t3 ).
Reference: [14] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors | a survey. </title> <editor> In I. Anderson, editor, </editor> <booktitle> Surveys in Combinatorics, </booktitle> <pages> pages 153-171. </pages> <publisher> Cambridge Univ. Press, </publisher> <year> 1985. </year>
Reference-contexts: Given a graph class G that is closed under taking of minors, we define the obstruction set of G as the set set of minor minimal graphs that do not belong in G. Robertson and Seymour proved (see e.g. <ref> [14] </ref>) that any class of graphs G contains a finite set of minor minimal elements. According to this result, any graph class that is closed under taking of minors has a finite obstruction set.
Reference: [15] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. X. Obstructions to tree-decomposition. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 153-190, </pages> <year> 1991. </year>
Reference: [16] <author> D. P. Sanders. </author> <title> On linear recognition of tree-width at most four. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 9(1) </volume> <pages> 101-117, </pages> <year> 1996. </year>
Reference-contexts: As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 [3, 10, 12], treewidth 4 <ref> [16] </ref>.) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical.
Reference: [17] <author> A. Satyanarayana and L. Tung. </author> <title> A characterization of partial 3-trees. </title> <journal> Networks, </journal> <volume> 20 </volume> <pages> 299-322, </pages> <year> 1990. </year>
Reference-contexts: on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 [3, 10, 12], treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known <ref> [4, 17, 20] </ref>. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical.
Reference: [18] <author> P. D. Seymour and R. Thomas. </author> <title> Call routing and the ratcatcher. </title> <journal> Combinatorica, </journal> <volume> 14(2) </volume> <pages> 217-241, </pages> <year> 1994. </year>
Reference-contexts: that branch-width was the more natural notion (instead of treewidth) to use for that problem [8]: where tree decompositions primarily are concerned with vertices, branch decompositions deal more with edges (in a loose sense.) We also mention that the branchwidth of planar graphs can be computed in polynomial time (see <ref> [18] </ref>). <p> As both treewidth and branchwidth are NP-complete parameters (see <ref> [1, 18] </ref>), it appears an interesting task to find algorithms solving the following problems (k is assumed to be a fixed constant). d k (T )): Check if an input graph has branchwidth (treewidth) at most k. c k (T )): Given a graph with branchwidth (treewidth) at most k, output
Reference: [19] <editor> J. van Leeuwen. </editor> <booktitle> Graph algorithms. In Handbook of Theoretical Computer Science, A: Algorithms and Complexity Theory, </booktitle> <pages> pages 527-631, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address>
Reference-contexts: It can be easily proved that a graph has treewidth k iff it is a partial k-tree (see e.g. <ref> [19] </ref>). Also, if G is a partial k-tree, then jE (G)j = kjV (G)j. Finally, a k-perfect elimination ordering of a k-tree can be found in O (kn) time.
Reference: [20] <author> J. A. Wald and C. J. Colbourn. </author> <title> Steiner trees, partial 2-trees, and minimum IFI networks. </title> <journal> Networks, </journal> <volume> 13 </volume> <pages> 159-167, </pages> <year> 1983. </year> <month> 20 </month>
Reference-contexts: As this algorithm appears to be heavily exponential on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 <ref> [12, 20] </ref>, treewidth 3 [3, 10, 12], treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known [4, 17, 20]. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. <p> on k (and thus impractical, at least without considerably optimisations in the implementation), practical "tailor-made" algorithms have been presented for small values of k: (treewidth 1 and 2 [12, 20], treewidth 3 [3, 10, 12], treewidth 4 [16].) Also, the obstruction sets for treewidth 1, 2, and 3 are known <ref> [4, 17, 20] </ref>. Recently, a linear time algorithm solving d k (B) and c k (B) was given in [7]. Unfor tunately, the algorithms in [7] appear (similarly to the case of treewidth) to be non-practical.
References-found: 20

