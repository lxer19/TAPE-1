URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1993/UM-CS-1993-032.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/93-032.html
Root-URL: 
Email: blerner@cs.umass.edu  
Title: Contrasting Approaches of Two Environment Generators: The Synthesizer Generator and Pan  
Author: Barbara Staudt Lerner 
Date: April 20, 1993  
Address: Amherst, MA 01003  
Affiliation: Computer Science Department University of Massachusetts  
Abstract: The Synthesizer Generator and Pan are two popular environment generators. While having the same basic goal of assisting in the development of interactive environments, they use rather different mechanisms to reach this goal. This paper discusses the three basic descriptive components used in environment generation: syntactic, semantic, and user interface descriptions. The contrasting approaches of the Synthesizer Generator and Pan are presented, along with a discussion of the consequences resulting from their respective mechanisms. 
Abstract-found: 1
Intro-found: 1
Reference: [Bal89] <author> Robert Alan Ballance. </author> <title> Syntactic and Semantic Checking in Language-Based Editing Systems. </title> <type> PhD thesis, </type> <institution> Computer Science Division EECS, University of California, Berkeley, </institution> <month> December </month> <year> 1989. </year> <note> Available as Report No. UCB/CSD 89/548. </note>
Reference-contexts: In addition, the user can turn off all semantic checking if so desired. 3.2 Pan Pan's semantic descriptions are written using a logic constraint language, Colander <ref> [Bal89] </ref>, which combines logic programming and consistency maintenance. A logic constraint grammar is 8 Environment Generator Comparison a context-free grammar with goals attached to the productions in the grammar. There may also be goals that are independent of the productions. These goals initialize global data.
Reference: [BC85] <author> G. Beshers and R. Campbell. </author> <title> Maintained and constructor attributes. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Language Issues in Programming Environments, </booktitle> <pages> pages 34-42, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [BCD + 88] <author> P. Borras, D. Clement, Th. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> CENTAUR: The system. </title> <booktitle> In SIGSOFT 88: 3rd Symposium on Software Development Environments, </booktitle> <pages> pages 14-24, </pages> <address> Boston, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur <ref> [BCD + 88] </ref>, PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [BGV92] <author> Robert A. Ballance, Susan L. Graham, and Michael L. Van De Vanter. </author> <title> The Pan language-based editing system. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 1(1) </volume> <pages> 95-127, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In this article, we compare and contrast the capabilities of two environment generators so that the software practitioner can determine if they would be useful for his/her work. We have chosen to present the Synthesizer Generator [RT89] and Pan <ref> [BGV92] </ref> since they are well known and present contrasting mechanisms to support environment generation, leading to an interesting comparison. <p> Consider the example shown in Figure 3 taken from <ref> [BGV92, p. 106] </ref>. In this example, the abstract syntax nonterminal &lt;stmt&gt; corresponds to the concrete syntax nonterminal &lt;stmt&gt;. The remaining nonterminals and tokens shown in the concrete syntax have been abstracted away in the abstract syntax. <p> A context is a group of collections representing the portion of the database that is used to satisfy a subtree's goals, such as the set of collections representing all scopes visible in a subtree. For example, consider Figure 4, derived from <ref> [BGV92, pp. 113-5] </ref>. This is a very simple example involving the definition and use of identifiers. When a definition is created, ?Scope is bound to the context in which the definition occurred. ?Name is bound to the string representing the identifier.
Reference: [BS92] <author> Rolf Bahlke and Gregor Snelting. </author> <title> Design and structure of a semantics-based programming environment. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 37(4) </volume> <pages> 467-479, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG <ref> [BS92] </ref>, IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [Cap85a] <author> M. Caplinger. </author> <title> Structured editor support for modularity and data abstraction. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Language Issues in Programming Environments, </booktitle> <address> Seattle, Washington, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: Some work has been done to assist in the binding of names to definitions, such as <ref> [VL88, Cap85a, Rei83] </ref>, and more is needed to facilitate other common types of semantic processing. Also, while the environments produced by environment generators can support all phases of the software lifecycle in principle, the vast majority of environments have been developed for the coding phase.
Reference: [Cap85b] <author> Michael Caplinger. </author> <title> A Single Intermediate Language for Programming Environments. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Rice University, Houston, Texas, </institution> <year> 1985. </year> <note> Available as Rice COMP TR85-28. </note>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil <ref> [Cap85b] </ref>, GIPE [HKKL86], and ASDL [KS89]. We also limit the discussion to environment generation and do not attempt to survey the much more general area of software development environments. 2 Syntactic Descriptions A syntactic description defines the internal representation of documents as well as the external presentation of documents.
Reference: [DGHKL84] <author> Veronique Donzeau-Gouge, Gerard Huet, Giles Kahn, and Bernard Lang. </author> <title> Programming environments based on structrued editors: The MENTOR experience. </title> <editor> In David R. Barstow, Howard E. Shrobe, and Erik Sandewall, editors, </editor> <booktitle> Interactive Programming Environments, chapter 7, </booktitle> <pages> pages 128-140. </pages> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1984. </year> <title> Environment Generator Comparison </title>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor <ref> [DGHKL84] </ref>, Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [DRZ85] <author> A. Demers, A. Rogers, and F. K. Zadeck. </author> <title> Attribute propagation by message passing. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Language Issues in Programming Environments, </booktitle> <pages> pages 140-147, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [ELN + 92] <author> G. Engels, C. Lewerentz, M. Nagl, W. Schafer, and A. Schurr. </author> <title> Building integrated software development environments part I: Tool specification. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 1(2) </volume> <pages> 135-167, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN <ref> [ELN + 92] </ref>, Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [Ger90] <author> Colin Gerety. </author> <title> A new generation of software development tools. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 41(3) </volume> <pages> 48-58, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: While they can be integrated with other tools through procedure calls, 13 Environment Generator Comparison the interfaces are not clean or well thought-out. Clearly, if environment generation technology is to succeed, this limitation must be overcome. The Synthesizer Generator is attacking this problem by adding SoftBench style messages <ref> [Ger90] </ref> to support integration. Acknowledgements I am indebted to numerous people for assisting me with developing this paper. Tim Teitelbaum advised me about the Synthesizer Generator through numerous conversations. Susan Graham, Michael Van De Vanter, and John Pasalis provided assistance with Pan.
Reference: [GKS86] <author> David Garlan, Charles W. Krueger, and Barbara J. Staudt. </author> <title> A structural approach to the maintenance of structure-oriented environments. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 160-170, </pages> <address> Palo Alto, California, </address> <month> December </month> <year> 1986. </year>
Reference-contexts: We would also choose other features from environment generators that were not presented here. In particular, we would borrow ideas from Gandalf's support for programming-in-the-large [KSH89] and grammar evolution <ref> [GKS86] </ref> and Mercury's [KKM87] support for programming-in-the-large. These features allow more realistic environments to be developed and maintained over time with support for large documents, many programmers working concurrently, cooperating languages, and an internal representation that can evolve as the requirements of the environment change over time.
Reference: [Hed91] <author> Gorel Hedin. </author> <title> Incremental static semantic analysis for object-oriented languages using door attribute grammars. </title> <editor> In H. Alblas and B. Melichar, editors, </editor> <title> Attribute Grammars, </title> <booktitle> Applications and Systems: Proceedings of the International Summer School SAGA, volume 545 of Lecture Notes in Computer Science, </booktitle> <pages> pages 374-379, </pages> <address> Prague, Czechoslovakia, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [HGN91] <author> Nico Habermann, David Garlan, and David Notkin. </author> <title> Generation of integrated task-specific software environments. </title> <editor> In Richard F. Rashid, editor, </editor> <booktitle> CMU Computer Science: A 25th Anniversary Commemorative, Anthology Series, chapter 4, </booktitle> <pages> pages 69-97. </pages> <publisher> ACM Press, </publisher> <address> Reading, Massachusetts, </address> <year> 1991. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf <ref> [HGN91] </ref>, Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [HKKL86] <author> J. Heering, G. Kahn, P. Klint, and B. Lang. </author> <title> Generation of interactive programming environments. In ESPRIT'85:, Status Report of Continuing Work, </title> <booktitle> Part I, </booktitle> <pages> pages 467-477. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE <ref> [HKKL86] </ref>, and ASDL [KS89]. We also limit the discussion to environment generation and do not attempt to survey the much more general area of software development environments. 2 Syntactic Descriptions A syntactic description defines the internal representation of documents as well as the external presentation of documents.
Reference: [Hoo86] <author> R. </author> <title> Hoover. Dynamically bypassing copy rule chains in attribute grammars. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 14-25, </pages> <address> St. Petersburg, Florida, </address> <month> January </month> <year> 1986. </year>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [HT86] <author> R. Hoover and T. Teitelbaum. </author> <title> Efficient incremental evaluation of aggregate values in attribute grammars. </title> <booktitle> In Proceedings of the SIGPLAN 86 Symposium on Compiler Construction, </booktitle> <pages> pages 39-50, </pages> <address> Palo Alto, California, </address> <month> June </month> <year> 1986. </year> <note> Available as SIGPLAN Notices, </note> <month> July </month> <year> 1986. </year>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [JF85] <author> G.F. Johnson and C.N. Fischer. </author> <title> A meta-language and system for nonlocal incremental attribute evaluation in language-based editors. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Principles of Programming Languages, </booktitle> <address> New Orleans, Louisiana, </address> <month> January </month> <year> 1985. </year>
Reference-contexts: Various researchers have proposed mechanisms to support more efficient handling of such attribute propagation by allowing non-local propagation of attributes <ref> [HT86, Hed91, BC85, DRZ85, Hoo86, JF85] </ref>. Consider the parsing example in Figure 1. ast is an attribute representing the abstract syntax tree being constructed.
Reference: [JG82] <author> Fahimeh Jalili and Jean H. Gallier. </author> <title> Building friendly parsers. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 196-206, </pages> <address> Albuquerque, New Mexico, </address> <month> January </month> <year> 1982. </year> <title> 15 Environment Generator Comparison </title>
Reference-contexts: Similarly, the right hand side of the second abstract nonterminal &lt;expr&gt; &lt;stmts&gt; &lt;stmts&gt; corresponds to the concrete string if &lt;expr&gt; then &lt;stmts&gt; else &lt;stmts&gt;, which is also derivable from the concrete nonterminal &lt;stmt&gt;. Parsing is accomplished using a modification of the Jalili-Gallier incremental parsing algorithm <ref> [JG82] </ref> which provides LR parsing. The Jalili-Gallier algorithm supports incremental parsing by incrementally modifying the parse tree as the user modifies the text. Pan's modifications support incremental modification of the abstract syntax tree directly, rather than the parse tree.
Reference: [Kai85] <author> Gail E. Kaiser. </author> <title> Semantics for Structure Editing Environments. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University Department of Computer Science, Pittsburgh, Pennsylvania, </institution> <month> May </month> <year> 1985. </year>
Reference-contexts: A declarative notation for describing semantics would facilitate the development of environments, although, as previously noted, attribute grammars and logic constraint grammars are incapable of providing dynamic semantics. Kaiser's work on action equations <ref> [Kai85] </ref> addresses this problem by combining the attribute grammar notation with an event architecture. Action equations can be attached to productions and evaluated in the same manner as attribute equations.
Reference: [KKM87] <author> Gail E. Kaiser, Simon M. Kaplan, and Josehpine Micallef. </author> <title> Multiuser, distributed language-based environments. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 58-67, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: We would also choose other features from environment generators that were not presented here. In particular, we would borrow ideas from Gandalf's support for programming-in-the-large [KSH89] and grammar evolution [GKS86] and Mercury's <ref> [KKM87] </ref> support for programming-in-the-large. These features allow more realistic environments to be developed and maintained over time with support for large documents, many programmers working concurrently, cooperating languages, and an internal representation that can evolve as the requirements of the environment change over time.
Reference: [Kru92] <author> Charles W. Krueger. </author> <title> Software reuse. </title> <journal> ACM Computer Surveys, </journal> <volume> 24(2) </volume> <pages> 131-183, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: As with any application generator, the environment generator makes certain decisions over which the environment implementor has no control. It is therefore important for environment generators to provide an appropriate balance between reuse of common facilities and flexibility in specification <ref> [Kru92] </ref>. The earliest form of environment generators were editor generators, which produced syntax-directed editors. These early environments supported programming-in-the-small, that is, a single programmer working on a small program.
Reference: [KS89] <author> Bernd Kramer and Heinz-Wilhelm Schmidt. </author> <title> Developing integrated environments with ASDL. </title> <journal> IEEE Software, </journal> <pages> pages 98-107, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL <ref> [KS89] </ref>. We also limit the discussion to environment generation and do not attempt to survey the much more general area of software development environments. 2 Syntactic Descriptions A syntactic description defines the internal representation of documents as well as the external presentation of documents.
Reference: [KSH89] <author> Charles W. Krueger, Barbara J. Staudt, and A. Nico Habermann. </author> <title> Scaling up integrated software development environment databases. </title> <booktitle> In Proceedings of the 1989 ACM SIGMOD Workshop on Software CAD Databases, </booktitle> <pages> pages 74-78, </pages> <address> Napa, CA., </address> <month> February </month> <year> 1989. </year>
Reference-contexts: We would also choose other features from environment generators that were not presented here. In particular, we would borrow ideas from Gandalf's support for programming-in-the-large <ref> [KSH89] </ref> and grammar evolution [GKS86] and Mercury's [KKM87] support for programming-in-the-large.
Reference: [MHM + 90] <editor> B. Magnusson, G. Hedin, S. Minor, et al. </editor> <title> An overview of the Mjolner/Orm environment. </title> <booktitle> In Proceedings of the 2nd International Conference TOOLS (Technology of Object-Oriented Languages and Systems), </booktitle> <pages> pages 635-646, </pages> <address> Paris, </address> <month> June </month> <year> 1990. </year> <note> Available as Lund University TR LU-CS-TR:90-57. </note>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan [Rei85], Mjolner <ref> [MHM + 90] </ref>, Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [Min92] <author> Sten Minor. </author> <title> Interacting with structure-oriented editors. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 37(4) </volume> <pages> 399-418, </pages> <year> 1992. </year>
Reference-contexts: It unnaturally constrains the experienced user by requiring documents to always be built top-down. Furthermore, syntax-directed 11 Environment Generator Comparison editing typically requires the user to know implementation details of how the editor represents the document. (See <ref> [VGB92, Van92, Min92] </ref> for more detailed criticism.) The user interface for Pan environments differs markedly from those for the Synthesizer Generator. Pan generates a syntax-recognizing interface rather than a syntax-directed interface.
Reference: [Rei83] <author> S. P. Reiss. </author> <title> Generation of compiler symbol process mechanisms from specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(2) </volume> <pages> 127-163, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: Some work has been done to assist in the binding of names to definitions, such as <ref> [VL88, Cap85a, Rei83] </ref>, and more is needed to facilitate other common types of semantic processing. Also, while the environments produced by environment generators can support all phases of the software lifecycle in principle, the vast majority of environments have been developed for the coding phase.
Reference: [Rei85] <author> Steven P. Reiss. </author> <title> PECAN: Program development systems that support multiple views. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(3):276-285, </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: This paper is necessarily an incomplete survey due to its length and omits important contributions made by numerous other projects including Gandalf [HGN91], Mentor [DGHKL84], Centaur [BCD + 88], PSG [BS92], IPSEN [ELN + 92], Pecan <ref> [Rei85] </ref>, Mjolner [MHM + 90], Yggdrasil [Cap85b], GIPE [HKKL86], and ASDL [KS89].
Reference: [RT89] <author> Thomas W. Reps and Tim Teitelbaum. </author> <title> The Synthesizer Generator: A System for Constructing Langauge-Based Editors. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: In this article, we compare and contrast the capabilities of two environment generators so that the software practitioner can determine if they would be useful for his/her work. We have chosen to present the Synthesizer Generator <ref> [RT89] </ref> and Pan [BGV92] since they are well known and present contrasting mechanisms to support environment generation, leading to an interesting comparison.
Reference: [RT91] <author> Thomas W. Reps and Tim Teitelbaum. </author> <title> The Synthesizer Generator Reference Manual Release 3.5. </title> <publisher> GrammaTech, Inc., </publisher> <address> Ithaca, NY, </address> <year> 1991. </year>
Reference-contexts: For example, Figure 2 demonstrates this flexibility in an example of a desktop calculator where the user's input can be the name of a constant, while the value inserted in the abstract syntax tree is the constant's value (adapted from <ref> [RT91, p. 76] </ref>). The concrete syntax for ExpCommand is of the form .Identifier. When an ExpCommand is parsed, the attribute equations look for a binding of the identifier in the current environment. If one is found, intvalue is bound to the integer value in the binding.
Reference: [SLC92] <author> A. V. Staa, C. J. P. Lucena, and D. D. Cowan. </author> <title> Talisman a process-model driven software engineering environment. </title> <type> Technical Report CS-92-36, </type> <institution> University of Waterloo Computer Science Department, Waterloo, </institution> <address> Ontario, Canada, </address> <month> September </month> <year> 1992. </year> <title> Describes an environment generator for process-centered environments. So high-level as to be meaningless. </title>
Reference-contexts: Second, until recently, software engineering processes were typically managed in ad hoc fashions. With the development of support for programming-in-the-large and the research into processes, the time is ripe to experiment with generated environments for more of the software lifecycle, and some work is beginning in that regard <ref> [SLC92] </ref>. Finally, both systems produce environments that are basically closed from interaction with externally-developed tools. While they can be integrated with other tools through procedure calls, 13 Environment Generator Comparison the interfaces are not clean or well thought-out.
Reference: [Van92] <author> Michael Lee Van De Vanter. </author> <title> User Interaction in Langauge-Based Editing Systems. </title> <type> PhD thesis, </type> <institution> Computer Science Division EECS, University of California, Berkeley, </institution> <month> December </month> <year> 1992. </year> <title> Availabe as UCB/CSD-93-726. 16 Environment Generator Comparison </title>
Reference-contexts: It unnaturally constrains the experienced user by requiring documents to always be built top-down. Furthermore, syntax-directed 11 Environment Generator Comparison editing typically requires the user to know implementation details of how the editor represents the document. (See <ref> [VGB92, Van92, Min92] </ref> for more detailed criticism.) The user interface for Pan environments differs markedly from those for the Synthesizer Generator. Pan generates a syntax-recognizing interface rather than a syntax-directed interface.
Reference: [VGB92] <author> Michael L. Van De Vanter, Susan L. Graham, and Robert A. Ballance. </author> <title> Coherent user interfaces for language-based editing systems. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 37(4) </volume> <pages> 431-466, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: It unnaturally constrains the experienced user by requiring documents to always be built top-down. Furthermore, syntax-directed 11 Environment Generator Comparison editing typically requires the user to know implementation details of how the editor represents the document. (See <ref> [VGB92, Van92, Min92] </ref> for more detailed criticism.) The user interface for Pan environments differs markedly from those for the Synthesizer Generator. Pan generates a syntax-recognizing interface rather than a syntax-directed interface.
Reference: [VL88] <author> Scott Vorthmann and Richard J. LeBlanc. </author> <title> A naming specification language for syntax-directed editors. </title> <booktitle> In Proceedings of the 1988 International Conference on Computer Languages, </booktitle> <pages> pages 250-257, </pages> <address> Miami Beach, Florida, October 1988. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 17 </pages>
Reference-contexts: Some work has been done to assist in the binding of names to definitions, such as <ref> [VL88, Cap85a, Rei83] </ref>, and more is needed to facilitate other common types of semantic processing. Also, while the environments produced by environment generators can support all phases of the software lifecycle in principle, the vast majority of environments have been developed for the coding phase.
References-found: 34

