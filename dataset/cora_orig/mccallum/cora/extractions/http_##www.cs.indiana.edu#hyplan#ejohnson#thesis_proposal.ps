URL: http://www.cs.indiana.edu/hyplan/ejohnson/thesis_proposal.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/ejohnson.html
Root-URL: http://www.cs.indiana.edu
Title: Thesis Proposal: Support for Parallel Generic Programming  
Author: Elizabeth Johnson 
Date: May 20, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, J. Demmel, J. Dongarra, J. DuCroz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorenson. </author> <note> LAPACK Users' Guide. SIAM, </note> <year> 1992. </year>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS [18, 11, 10] and LAPACK <ref> [1] </ref> for computations on HPC++ matrices and vectors will also be supported. 2 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [2] <author> Susan Atlas, Subhankar Banerjee, Julian C. Cummings, Paul J. Hinker, M. Srikant, John V. W. Reynders, and Marydell Tholburn. POOMA: </author> <title> A high performance distributed simulation environment for scientific applications. </title> <booktitle> In Supercomputing '95, </booktitle> <month> December </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: In addition to data-parallel operations, IC++ also provides the ability to spawn new threads to execute statements. The Parallel Object-Oriented Methods and Applications (POOMA) Framework <ref> [2] </ref> is a C++ class library which supports data-parallel programming. Like my implementation, POOMA is a layered collection of C++ classes. In particular, the Global and Local Layers provide Global Data Types, which are data-parallel classes for several data types including Fields (multidimensional arrays), matrix, vectors, and Particle classes.
Reference: [3] <author> P. Beckman and D. Gannon. Tulip: </author> <title> A portable run-time system for object-parallel systems. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: In support of this project, I implemented a distributed vector class using the DDD specification. The implementation is built on top of Tulip, a portable run-time system developed by Pete Beckman <ref> [3] </ref>. The DDD specification is intended to be generic enough to allow implementation of any distributed data structure, static or dynamic. A data structure is defined in terms of an element type, a block type, and a domain.
Reference: [4] <author> P. Beckman, D. Gannon, B. Winnicka, A. Sussman, T. Haupt, and J. Cowie. </author> <title> PCRC distributed data descriptors specification. </title> <type> Draft, </type> <year> 1995. </year>
Reference-contexts: to cut the communication costs. 12 5.2 Other Work In preparation for the HPC++ research, I worked on several projects involving distributed data structures. 5.2.1 Distributed Data Descriptor As part of the Parallel Runtime Consortium (PCRC), a Distributed Data Descriptor (DDD) was developed for use in creating distributed data structures <ref> [4] </ref>. In support of this project, I implemented a distributed vector class using the DDD specification. The implementation is built on top of Tulip, a portable run-time system developed by Pete Beckman [3].
Reference: [5] <author> William W. Carlson and Jesse M. Draper. </author> <title> Distributed data access in AC. </title> <booktitle> In Fifth ACM Sigplan Symposium on Principles and Practices of Parallel Programming, </booktitle> <year> 1995. </year>
Reference: [6] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation, </title> <booktitle> 1993. In Research Directions in Concurrent Object Oriented Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference: [7] <author> C. Chang, A. Sussman, and J. Saltz. </author> <title> Object-oriented runtime support for complex distributed data structures. </title> <type> Technical Report UMIACS-TR-95-35, </type> <institution> University of Maryland Institute for Advanced Computer Studies and Department of Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The multi-dimensional arrays in my research will be based on A++, but will extend that design in several ways including support of a hierarchy of iterators and providing more user control over the distribution of the arrays. Chaos++ <ref> [7] </ref> is a runtime library which supports distributed arrays and pointer-based structures. Distribution of array elements is handled via partitioners, which are functions created by the user or provided with Chaos++. In the case of applications with irregular communications, translation tables are created.
Reference: [8] <author> A. A. Chien, U. Reddy, J. Plevyak, and J. Dolby. </author> <title> ICC++ a C++ dialect for high performance parallel computing. </title> <booktitle> In 2nd International Symposium on Object Technologies for Advanced Software, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Parallel functions can also be defined which operate element-wise in parallel on all elements in the collection. Slices of Aggregates can also be defined, which aliases a subset of an Aggregate along a dimension. The hierarchy of iterators proposed for the HPC++ array class is similar to this. ICC++ <ref> [8] </ref> is a parallel extension to C++. Collections are provided which are distributed arrays. Like pC++, member functions can be either aggregate or element-wise, and each element has access to other elements via a pointer to the collection itself.
Reference: [9] <author> D. Culler, A. Dusseau, S. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Supercomputing '93, </booktitle> <year> 1993. </year>
Reference: [10] <author> J. J. Dongarra, J. DuCroz, S. Hammarling, and I. Duff. </author> <title> A set of level 3 Basic Linear Algebra Subprograms. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 16(1) </volume> <pages> 1-16, </pages> <year> 1990. </year>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [18, 11, 10] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 2 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [11] <author> J. J. Dongarra, J. DuCroz, S. Hammarling, and R.J. Hanson. </author> <title> An extended set of FORTRAN Basic Linear Algebra Subprograms. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 14(1) </volume> <pages> 1-17, </pages> <year> 1988. </year>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [18, 11, 10] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 2 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [12] <author> High Performance Fortran Forum. </author> <title> Draft High Performance Fortran Language Specification, </title> <month> November </month> <year> 1992. </year> <note> Version 0.4. </note>
Reference-contexts: AVTL vectors are static elements cannot be inserted or removed after creation. pC++ [13], is a data-parallel extension to C++. It provides distributed collections. Users can define element-wise functions as well as aggregate functions. Distribution of elements is handled in a way similar to High Performance Fortran <ref> [12] </ref>, except that distribution can be specified at run-time in pC++. Distribution objects define a mapping of a grid to the actual machine processors 14 and then alignment objects specify the mapping of the collection elements to the grid.
Reference: [13] <author> Dennis Gannon, Francois Bodin, Peter Beckman, Shelby Yang, and S. Narayana. </author> <title> Distributed pC++: Basic ideas for an object parallel language. </title> <journal> Journal of Scientific Programming, </journal> <volume> 2 </volume> <pages> 7-22, </pages> <year> 1993. </year>
Reference-contexts: Iterators are not provided at all instead functions may be applied to the aggregate as a whole or element-wise. Vectors are distributed across contexts in equal-sized blocks no mechanism is provided for alternative distributions. AVTL vectors are static elements cannot be inserted or removed after creation. pC++ <ref> [13] </ref>, is a data-parallel extension to C++. It provides distributed collections. Users can define element-wise functions as well as aggregate functions. Distribution of elements is handled in a way similar to High Performance Fortran [12], except that distribution can be specified at run-time in pC++.
Reference: [14] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and specification, </title> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: Level 1 of the HPC++ framework consists of the following parts: * parallel loop directives, * a parallel Standard Template Library, * a multidimensional array class, and, in the future, * a library for distributed active objects, * an interface to CORBA via IDL <ref> [14] </ref> mapping, and * a set of programming and performance analysis tools. The parallel loop directives support single context parallelism. A loop can be declared by the programmer to be parallelizable using the compiler directive #pragma HPC_INDEPENDENT placed before the loop.
Reference: [15] <institution> The HPC++ Working Group. </institution> <type> HPC++ White Papers. Technical Report TR 95633, </type> <note> Center for Research on Parallel Computation, </note> <year> 1995. </year>
Reference-contexts: The HPC++ consortium, composed of representatives from industry, academia, and government laboratories, has included such a parallel library in their new framework for parallel C++ programming, HPC++ <ref> [15] </ref>. The HPC++ proposal is described in the next section. In my research, I will implement and refine the HPC++ Parallel Standard Template Library. <p> I will also implement a distributed multidimensional array class along with parallel iterators which fit into the PSTL paradigm. 1 2 Overview of HPC++ The current HPC++ framework <ref> [15] </ref> (Level 1) describes a C++ library along with compiler directives which support parallel C++ programming. A future version (Level 2) will include language extensions for semantics that cannot be expressed by the Level 1 library.
Reference: [16] <author> Scott Kohn and Scott Baden. </author> <title> Irregular coarse-grain data parallelism under LPARX. </title> <journal> Journal of Scientific Programming, </journal> <note> To appear. </note>
Reference-contexts: The STL does not include a multidimensional array class, but such a class is essential for the scientific computation typical of parallel applications. For this reason, HPC++ includes a multidimensional distributed array class based on A++[22] and LPARX <ref> [16] </ref>. This array class will support element access via standard array indexing as well as parallel random access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. <p> Consequently, the HPC++ consortium has incorporated the design of the Los Alamos A++ library [22] with extensions from the LPARX array class <ref> [16] </ref> into the definition of the HPC++ Array container. An Array will be created with a constructor that gives the size of the array in each dimension and a pointer to a distribution object.
Reference: [17] <author> J. R. Larus. </author> <title> C**: a large-grain, object-oriented, data-parallel programming language. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing (5th International Workshop), </booktitle> <year> 1993. </year>
Reference: [18] <author> C. L. Lawson, R. J. Hanson, D. R. Kincaid, and F. T. Krogh. </author> <title> Basic Linear Algebra Subprograms for Fortran Usage. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 5(3) </volume> <pages> 308-323, </pages> <year> 1979. </year> <month> 16 </month>
Reference-contexts: This array class will support element access via standard array indexing as well as parallel random access iterators. The latter will facilitate the use of STL and PSTL algorithms on the array class. Use of optimized mathematical libraries such as the BLAS <ref> [18, 11, 10] </ref> and LAPACK [1] for computations on HPC++ matrices and vectors will also be supported. 2 3 Standard Template Library The C++ Standard Template Library has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vector, list, deque, set and map.
Reference: [19] <author> D. Musser and A. Sani. </author> <title> STL Tutorial and Reference Guide. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Clearly, if cost-effective, efficient, and reusable software components are to be written for parallel processing, something needs to change. Fortunately, in the sequential C++ world, something has changed. The Standard Template Library (STL) <ref> [19, 21, 25] </ref>, a recent addition to the C++ language standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [20] <author> D. R. Musser and A. A. Stepanov. </author> <title> Algorithm-Oriented Generic Libraries. </title> <journal> Software Practice and Experience, </journal> <volume> 24(7) </volume> <pages> 623-642, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Fortunately, in the sequential C++ world, something has changed. The Standard Template Library (STL) [19, 21, 25], a recent addition to the C++ language standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming. Generic programming <ref> [20] </ref> is a programming paradigm in which algorithms are written so that they can operate on any type of container which provides accessibility meeting certain minimal criteria. This element access is provided via iterators, C-pointer-like objects which can traverse through a container.
Reference: [21] <author> M. Nelson. </author> <title> C++ Programmer's Guide to the Standard Template Library. </title> <publisher> IDG Books Worldwide, Inc., </publisher> <year> 1995. </year>
Reference-contexts: Clearly, if cost-effective, efficient, and reusable software components are to be written for parallel processing, something needs to change. Fortunately, in the sequential C++ world, something has changed. The Standard Template Library (STL) <ref> [19, 21, 25] </ref>, a recent addition to the C++ language standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [22] <author> Rebecca Parsons and Daniel Quinlan. </author> <title> Run-time recognition of task parallelism within the P++ parallel array class library. </title> <booktitle> In Proceedings of the Workshop of Scalable Parallel Libraries, </booktitle> <year> 1993. </year>
Reference-contexts: Consequently, the HPC++ consortium has incorporated the design of the Los Alamos A++ library <ref> [22] </ref> with extensions from the LPARX array class [16] into the definition of the HPC++ Array container. An Array will be created with a constructor that gives the size of the array in each dimension and a pointer to a distribution object. <p> The user may also build other distributed classes using facilities from the Parallel Abstraction Layer. Layout classes are used to specify distribution. P++ <ref> [22] </ref> is a C++ class library which provides distributed multi-dimensional arrays for a data-parallel environment. The interface to the arrays is identical to A++, a serial array class library.
Reference: [23] <author> M. Ranganathan, A. Acharya, G. Edjlali, A. Sussman, and J. Saltz. </author> <title> Runtime coupling of data-parallel programs. </title> <type> Technical Report CS-TR-3565, </type> <institution> University of Maryland, College Park, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Meta-Chaos is a library designed to facilitate inter-application data transfer between data-parallel programs <ref> [23] </ref>. Using this library, the user can associate all or part of a data structure in one program with a data structure in another program at run-time. The programs may be in the same or different languages. Data can then be transferred between the data structures at run-time.
Reference: [24] <author> T. She*er. </author> <title> A portable MPI-based parallel vector template library. </title> <type> Technical Report RIACS-TR-95.04, </type> <institution> Research Institute for Advanced Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: This section describes some approaches to the problem. The Amelia Vector Template Library (AVTL) <ref> [24] </ref> is closest to the PSTL in philosophy and function. It provides a templated distributed vector class, generic vector algorithms, generic function objects, and a memory manager. Contrary to the philosophy of the STL, the entire vector is passed to the generic algorithms rather than passing vector iterators.
Reference: [25] <author> Alexander Stepanov and Meng Lee. </author> <title> The Standard Template Library. </title> <type> Technical Report HPL-95-11, </type> <institution> Hewlett-Packard Laboratories, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Clearly, if cost-effective, efficient, and reusable software components are to be written for parallel processing, something needs to change. Fortunately, in the sequential C++ world, something has changed. The Standard Template Library (STL) <ref> [19, 21, 25] </ref>, a recent addition to the C++ language standard, is a library of templated algorithms, containers, and iterators which provide support for generic programming.
Reference: [26] <author> G. V. Wilson and R. B. Irvin. </author> <title> Assessing and comparing the usability of parallel programming systems. </title> <type> Technical Report CSRI-321, </type> <institution> University of Toronto, </institution> <month> March </month> <year> 1995. </year>
Reference: [27] <author> Gregory Wilson and William O'Farrell. </author> <title> An introduction to ABC++. </title> <booktitle> 1995. </booktitle> <pages> 17 </pages>
References-found: 27

