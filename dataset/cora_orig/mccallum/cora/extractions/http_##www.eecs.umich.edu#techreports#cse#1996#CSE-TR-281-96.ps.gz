URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-281-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Email: fashish,atri,kgshing@eecs.umich.edu  
Title: Resource Management for Real-Time Communication: Making Theory Meet Practice  
Author: Ashish Mehra Atri Indiresan Kang G. Shin 
Keyword: Key Words Real-time communication, resource management, QoS-sensitive protocol processing, CPU and link scheduling  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: A growing number of real-time applications (e.g., real-time controls, and audio/video conferencing) require certain quality-of-service (QoS) from the underlying communication subsystem. Real-time communication services are needed in the communication subsystem (host as well as network) to provide the required QoS to these applications while providing reasonably good performance for best-effort traffic. At the host, real-time communication necessitates that shared host resources such as CPU and link bandwidth be consumed according to the relative requirements of the active connections. This requires appropriate resource management policies for admission control and scheduling that are typically formulated assuming idealized resource models. However, when implementing these policies one must account for the performance characteristics of the hardware and software components involved, which could deviate significantly from those of the idealized resource models. In this paper, we focus on bridging the gap between theory and practice in the management of host CPU and link resources for real-time communication. Using our implementation of real-time channels, a paradigm for real-time communication in packet-switched networks, we illustrate the tradeoff between resource capacity and channel admissibility, which determines the number and type of real-time channels that can be accepted for service and the performance delivered to best-effort traffic. We demonstrate that this tradeoff is affected significantly by the choice of implementation paradigms and the grain at which CPU and link resources can be multiplexed amongst active channels. In order to account for this effect, we extend the admission control procedure for real-time channels originally proposed using idealized resource models. Our results show that practical considerations significantly reduce channel admissibility compared to idealized resource models. Further, the optimum choice of the multiplexing grain depends on several factors such as the overheads of resource preemption, the relationship between CPU and link bandwidth, and the manner in which allocation of link bandwidth interacts with allocation of CPU bandwidth. The work reported in this paper was supported in part by the National Science Foundation under grant MIP-9203895 and the Office of Naval Research under grants N00014-94-1-0229. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of NSF or ONR. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In this paper, we focus on bridging the gap between theory and practice in the management of host CPU and link resources for real-time communication. For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks <ref> [1] </ref>. The model of real-time channels is similar to other proposals for guaranteed-QoS connections [2]. Using our implementation of real-time channels [3], we illustrate the tradeoff between useful resource capacity and channel admissibility. Useful resource capacity refers to the proportion of the raw resource capacity that can be utilized effectively. <p> If d is the desired end-to-end delay bound for a channel, message m i generated at the source is guaranteed to be delivered at the sink by time `(m i ) + d. More details on the real-time channel model can be found in <ref> [1] </ref>. 2.2 Resource Management As with other proposals for guaranteed-QoS communication [2], there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [1], which uses fixed-priority scheduling for computing the worst-case delay experienced by <p> More details on the real-time channel model can be found in <ref> [1] </ref>. 2.2 Resource Management As with other proposals for guaranteed-QoS communication [2], there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [1], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. A message is considered to be a set of one or more packets, where the packet size is bounded. <p> These packets are stored in the order of their logical arrival time because they have to be transferred to Queue 1 as they become current. Queue 3 effectively shapes early (non-compliant) traffic into current (compliant) traffic. More details on the processing done by the link scheduler are given in <ref> [1] </ref>, and the overheads and effectiveness of the implementation discussed in [3]. Note that the above model of real-time channels only applies to management of link bandwidth and does not account for management of CPU processing bandwidth at the host. <p> In order to calculate the time spent waiting for resources, one must consider the preemption model used for resource access. 5 The real-time channel model presented in <ref> [1] </ref> accounts for the effects of non-preemptive packet transmissions, but assumes an ideal preemption model for CPU access. That is, the CPU can be allocated to a waiting higher-priority handler immediately at no extra cost. <p> This effect is analyzed in Section 4. 4 Computing Worst-Case Service and Wait Times For a channel requesting admission, D order can compute the worst-case response time for a message (referred to as the system time requirement in <ref> [1] </ref>) by accounting for three components: * the worst-case waiting time for the message (T wait ) due to lower-priority handlers or packets, * the worst-case service time for the message (T service ), and * the worst-case waiting time due to servicing of message arrivals on all the existing higher <p> This shows that it is necessary to account for non-ideal characteristics, such as context switch overhead and cache miss penalty, of real systems. 6 Related Work This paper is an extension of the policies proposed in <ref> [1] </ref>, with a focus on CPU and link bandwidth management for admission control. We have implemented a QoS-sensitive architecture [3] that uses the extensions described here to provide admission control and run-time support for real-time channels.
Reference: [2] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne, </author> <title> "Real-time communication in packet-switched networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks [1]. The model of real-time channels is similar to other proposals for guaranteed-QoS connections <ref> [2] </ref>. Using our implementation of real-time channels [3], we illustrate the tradeoff between useful resource capacity and channel admissibility. Useful resource capacity refers to the proportion of the raw resource capacity that can be utilized effectively. <p> More details on the real-time channel model can be found in [1]. 2.2 Resource Management As with other proposals for guaranteed-QoS communication <ref> [2] </ref>, there are two related aspects to resource management for real-time channels: admission control and (run-time) scheduling. Admission control for real-time channels is provided by Algorithm D order [1], which uses fixed-priority scheduling for computing the worst-case delay experienced by a channel at a link. <p> Our implementation methodology and analysis is also applicable to other proposals for supporting guaranteed real-time communication in packet-switched networks. A detailed survey of the proposed techniques can be found in <ref> [2] </ref>. Similar issues are being explored in the context of providing integrated services on the Internet [7-9]. The Tenet real-time protocol suite [10] is an advanced implementation of real-time communication on wide-area networks (WANs); however, they have not considered incorporation of protocol processing overheads into the network-level resource management policies. <p> While our present work has been done in the context of real-time channels, it is applicable to a wide variety of proposals for real-time communication and QoS guarantees <ref> [2] </ref>. The issues of simultaneous management of CPU and link bandwidth to support real-time communication are of wide-ranging interest. Many of the tradeoffs we highlighted are applicable to other machines as well.
Reference: [3] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Design and evaluation of a QoS-sensitive communication subsystem architecture," </title> <type> Technical Report CSE-TR-280-96, </type> <institution> University of Michigan, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: For this purpose we utilize real-time channels, a paradigm for real-time communication in packet-switched networks [1]. The model of real-time channels is similar to other proposals for guaranteed-QoS connections [2]. Using our implementation of real-time channels <ref> [3] </ref>, we illustrate the tradeoff between useful resource capacity and channel admissibility. Useful resource capacity refers to the proportion of the raw resource capacity that can be utilized effectively. <p> Queue 3 effectively shapes early (non-compliant) traffic into current (compliant) traffic. More details on the processing done by the link scheduler are given in [1], and the overheads and effectiveness of the implementation discussed in <ref> [3] </ref>. Note that the above model of real-time channels only applies to management of link bandwidth and does not account for management of CPU processing bandwidth at the host. <p> More importantly, it cannot be extended directly to CPU bandwidth management, as discussed in Section 3. 2.3 Implementation We have implemented a QoS-sensitive communication subsystem architecture featuring real-time channels <ref> [3] </ref>. Our implementation employs a communication executive derived from x-kernel 3.1 [6] exercising complete control over a Motorola 68040 CPU. The protocol stack utilized for real-time communication includes protocols for resource reservation (channel establishment and teardown), remote procedure call, transport-level fragmentation, network-level encapsulation, and clock synchronization. <p> In our implementation, packets created by channel handlers are scheduled for transmission by a non-preemptive multi-class EDF link scheduler, as explained in Section 2.2. More details of the protocol stack and the real-time channel implementation are given in <ref> [3] </ref>. 2.3.2 Null Network Device In order to explore the effects of the relationship between CPU and link bandwidth, we have implemented a device emulator, referred to as the null device, that can be configured to emulate any desired packet transmission time L xmit . <p> In the experiments reported here, we use system parameter values obtained from an extensive parameterization of the communication subsystem, including the protocol stack <ref> [3] </ref>. size, for three values of link speed (LS) as before. Consider option O1 (Figure 5 (a)). As can be seen, the predicted throughput reveals roughly the same trends as those of the measured throughput. <p> We have implemented a QoS-sensitive architecture <ref> [3] </ref> that uses the extensions described here to provide admission control and run-time support for real-time channels. Our implementation methodology and analysis is also applicable to other proposals for supporting guaranteed real-time communication in packet-switched networks. A detailed survey of the proposed techniques can be found in [2].
Reference: [4] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks, </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year> <note> available as technical report UILU-ENG-87-2246. </note>
Reference-contexts: When the application requests that the channel be destroyed, all resources allocated for the channel are released by the network and the communication subsystems at the source and destination hosts. 2 2.1 Traffic Generation Model The traffic generation model in real-time channels is based on a linear bounded arrival process <ref> [4, 5] </ref>, which is characterized by three parameters: * maximum message size (S max bytes), * maximum message rate (R max messages/second), and * maximum burst size (B max messages). In any interval of length ffi, the number of messages generated is bounded by B max +ffiR max .
Reference: [5] <author> D. P. Anderson, S. Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews, </author> <title> "Support for continuous media in the DASH system," </title> <booktitle> in Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 54-61, </pages> <year> 1990. </year>
Reference-contexts: When the application requests that the channel be destroyed, all resources allocated for the channel are released by the network and the communication subsystems at the source and destination hosts. 2 2.1 Traffic Generation Model The traffic generation model in real-time channels is based on a linear bounded arrival process <ref> [4, 5] </ref>, which is characterized by three parameters: * maximum message size (S max bytes), * maximum message rate (R max messages/second), and * maximum burst size (B max messages). In any interval of length ffi, the number of messages generated is bounded by B max +ffiR max .
Reference: [6] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 1-13, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: More importantly, it cannot be extended directly to CPU bandwidth management, as discussed in Section 3. 2.3 Implementation We have implemented a QoS-sensitive communication subsystem architecture featuring real-time channels [3]. Our implementation employs a communication executive derived from x-kernel 3.1 <ref> [6] </ref> exercising complete control over a Motorola 68040 CPU. The protocol stack utilized for real-time communication includes protocols for resource reservation (channel establishment and teardown), remote procedure call, transport-level fragmentation, network-level encapsulation, and clock synchronization.
Reference: [7] <author> D. D. Clark, S. Shenker, and L. Zhang, </author> <title> "Supporting real-time applications in an integrated services packet network: Architecture and mechanism," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 14-26, </pages> <month> August </month> <year> 1992. </year>
Reference: [8] <author> R. Braden, D. Clark, and S. Shenker, </author> <title> "Integrated services in the Internet architecture: An overview," Request for Comments RFC 1633, </title> <month> July </month> <year> 1994. </year> <note> Xerox PARC. </note>
Reference: [9] <author> S. Floyd and V. Jacobson, </author> <title> "Link-sharing and resource management models for packet networks," </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> vol. 3, no. 4, </volume> , <month> August </month> <year> 1995. </year>
Reference: [10] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. C. Verma, and H. Zhang, </author> <title> "The Tenet real-time protocol suite: Design, implementation, and experiences," </title> <type> Technical Report TR-94-059, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: A detailed survey of the proposed techniques can be found in [2]. Similar issues are being explored in the context of providing integrated services on the Internet [7-9]. The Tenet real-time protocol suite <ref> [10] </ref> is an advanced implementation of real-time communication on wide-area networks (WANs); however, they have not considered incorporation of protocol processing overheads into the network-level resource management policies. In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive.
Reference: [11] <author> C. W. Mercer and H. Tokuda, </author> <booktitle> "Preemptibility in real-time operating systems," in Proceedings of the 13th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: In particular, they do not address the problem of making protocol processing inside the host QoS-sensitive. The implications of priority inversion due to non-preemptible critical sections was studied in <ref> [11] </ref>; however, the costs of preemption (context switches and cache misses) and the resulting degradation 17 in useful resource capacity were not considered. The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [12] and some implementation strategies demonstrated in [13].
Reference: [12] <author> D. P. Anderson, L. Delgrossi, and R. G. Herrtwich, </author> <title> "Structure and scheduling in real-time protocol implementations," </title> <type> Technical Report TR-90-021, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in <ref> [12] </ref> and some implementation strategies demonstrated in [13]. More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in [17] and [18].
Reference: [13] <author> R. Govindan and D. P. Anderson, </author> <title> "Scheduling and IPC mechanisms for continuous media," </title> <booktitle> in Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pp. 68-80, </pages> <year> 1991. </year>
Reference-contexts: The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [12] and some implementation strategies demonstrated in <ref> [13] </ref>. More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in [17] and [18].
Reference: [14] <author> C. W. Mercer, S. Savage, and H. Tokuda, </author> <title> "Processor capacity reserves for multimedia operating systems," </title> <booktitle> in Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [12] and some implementation strategies demonstrated in [13]. More recently, processor capacity reserves in Real-Time Mach <ref> [14] </ref> have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in [17] and [18]. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. <p> While we only considered management of communication resources, the present work can be extended to incorporate application scheduling as well. Our analysis is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [14, 16] </ref>. As part of future work, we plan to continue with more extensive validation of the proposed extensions to the real-time channel model. This would involve careful parameterization of the communication subsystem and incorporation of the results into the service and wait time calculations.
Reference: [15] <author> C. Maeda and B. N. Bershad, </author> <title> "Protocol service decomposition for high-performance networking," </title> <booktitle> in Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pp. 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The need for scheduling protocol processing at priority levels consistent with those of the communicating application was highlighted in [12] and some implementation strategies demonstrated in [13]. More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing <ref> [15] </ref> to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in [17] and [18]. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel.
Reference: [16] <author> C. W. Mercer, J. Zelenka, and R. Rajkumar, </author> <title> "On predictable operating system protocol processing," </title> <type> Technical Report CMU-CS-94-165, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable <ref> [16] </ref>. Operating system support for multimedia communication is explored in [17] and [18]. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. <p> While we only considered management of communication resources, the present work can be extended to incorporate application scheduling as well. Our analysis is directly applicable if a portion of the host processing capacity can be reserved for communication-related activities <ref> [14, 16] </ref>. As part of future work, we plan to continue with more extensive validation of the proposed extensions to the real-time channel model. This would involve careful parameterization of the communication subsystem and incorporation of the results into the service and wait time calculations.
Reference: [17] <author> O. Hagsand and P. Sjodin, </author> <title> "Workstation support for real-time multimedia communication," </title> <booktitle> in Winter USENIX Conference, </booktitle> <pages> pp. 133-142, </pages> <month> January </month> <year> 1994. </year> <note> Second Edition. </note>
Reference-contexts: More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in <ref> [17] </ref> and [18]. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [18] is on the scheduling architecture. 7 Conclusion and Future Work In this paper, we have focused on the management of host communication resources for real-time communication. <p> More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in <ref> [17] </ref> and [18]. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [18] is on the scheduling architecture. 7 Conclusion and Future Work In this paper, we have focused on the management of host communication resources for real-time communication.
Reference: [18] <author> C. Vogt, R. G. Herrtwich, and R. Nagarajan, "HeiRAT: </author> <title> The Heidelberg resource administration technique design philosophy and goals," </title> <institution> Research Report 43.9213, IBM Research Division, IBM European Networking Center, </institution> <address> Heidelberg, Germany, </address> <year> 1992. </year> <month> 19 </month>
Reference-contexts: More recently, processor capacity reserves in Real-Time Mach [14] have been combined with user-level protocol processing [15] to make protocol processing inside hosts predictable [16]. Operating system support for multimedia communication is explored in [17] and <ref> [18] </ref>. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [18] is on the scheduling architecture. 7 Conclusion and Future Work In this paper, we have focused on the management of host communication resources for real-time communication. <p> Operating system support for multimedia communication is explored in [17] and <ref> [18] </ref>. In [17] the focus is on provision of preemption points and earliest-deadline-first scheduling in the kernel. Similarly, the focus of [18] is on the scheduling architecture. 7 Conclusion and Future Work In this paper, we have focused on the management of host communication resources for real-time communication. In particular, we identified the issues involved in extending and implementing resource management policies originally formulated using idealized resource models.
References-found: 18

