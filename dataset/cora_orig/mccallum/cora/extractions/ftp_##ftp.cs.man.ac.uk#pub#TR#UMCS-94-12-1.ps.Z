URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-94-12-1.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-94-12-1.html
Root-URL: http://www.cs.man.ac.uk
Title: A Process Algebra Foundation for Reasoning about Core ELLA  
Author: Howard Barringer, Graham Gough, Brian Monahan, Alan Williams 
Affiliation: Computer Science University of Manchester  
Pubnum: Technical Report UMCS-94-12-1  
Abstract-found: 0
Intro-found: 1
Reference: [BCL91] <author> J.R. Burch, E.M. Clarke, and D.E. </author> <title> Long. Representing circuits more efficiently in symbolic model checking. </title> <booktitle> In DAC91, </booktitle> <year> 1991. </year>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been dramatically enhanced by the introduction of compact state-space encodings, namely BDDs see <ref> [BCL91, BCMD90, CBM89] </ref> for key expositions. The process algebraic approach described here has its origins in the foundational works of CCS [Mil89] and CSP [Hoa85].
Reference: [BCMD90] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, and D.L. Dill. </author> <title> Sequential circuit verification using symbolic model checking. </title> <booktitle> In DAC90, </booktitle> <year> 1990. </year>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been dramatically enhanced by the introduction of compact state-space encodings, namely BDDs see <ref> [BCL91, BCMD90, CBM89] </ref> for key expositions. The process algebraic approach described here has its origins in the foundational works of CCS [Mil89] and CSP [Hoa85].
Reference: [BFG89] <author> H. Barringer, M. Fisher, and G.D. Gough. </author> <title> Fair SMG and Linear Time Model Checking. In Proceedings of Workshop on Automatic Verification Methods for Finite State Systems, </title> <address> Grenoble, France, </address> <month> June </month> <year> 1989. </year> <note> LNCS 407. </note>
Reference-contexts: how state bisimulation can be established, by generating a set of verification conditions from a symbolic bisimulation of the EPA terms under analysis if the verification conditions are valid, then the EPA terms are bisimilar. 1.3 Related Work There has been extensive research into state-based verification methods such as model-checking <ref> [CES86, BFG89] </ref>. Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been dramatically enhanced by the introduction of compact state-space encodings, namely BDDs see [BCL91, BCMD90, CBM89] for key expositions.
Reference: [BGHT90] <author> R Boulton, M Gordon, J Herbert, and J Van Tassel. </author> <title> The HOL Verification of ELLA Designs. </title> <type> Technical report, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1990. </year>
Reference-contexts: There have been other recent approaches to providing a formal semantics for ELLA. At Edinburgh, operational semantics are provided for two simplified versions of ELLA, called microELLA [Goo90a] and picoELLA [Goo90b]. At Cambridge, a system was being developed to semantically embed ELLA into HOL <ref> [BGHT90] </ref>, so that the HOL verification system and its associated tools can be employed. 3 Our work on foundations and verification support has formed part of an on-going collaborative project, involving Manchester, DRA (Malvern), Harlequin Ltd. (Cambridge), and GEC Plessey Semiconductors (Swindon), and sponsored by the DTI and SERC.
Reference: [BGL + 91] <author> H. Barringer, G. Gough, T. Longshaw, B. Monahan, M. Peim, and A. Williams. </author> <title> Semantics and Verification for Boolean Kernel ELLA using IO Automata. </title> <booktitle> In Advanced Research Workshop on Correct Hardware Design Methodologies (CHARME'91), </booktitle> <address> Turin, Italy, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Work from the project is documented in <ref> [GB91, BGL + 91, BGL + 92, BGMW94b] </ref>; a World-Wide Web page containing an overview of the project, and a full list of project reports is also available [EP]. <p> An early prototype compiler was implemented, based on the IOA semantics for a subset of Core ELLA called Boolean Kernel ELLA (BKE), using an enumerated representation of the IOAs. A simulator, equivalence-checker and counter-example generator were also built, and installed within a prototype design environment developed by Harlequin Ltd <ref> [BGL + 91, BGL + 92] </ref>. The environment contains a design library facility, and textual and schematic editors, all embedded within a graphical user interface.
Reference: [BGL + 92] <author> H. Barringer, G.D. Gough, T. Longshaw, B.Q. Monahan, M. Peim, and A. Williams. </author> <title> A Semantics and Verification Framework for ELLA. </title> <type> Technical Report UMCS-92-4-6, </type> <institution> University of Manchester, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Work from the project is documented in <ref> [GB91, BGL + 91, BGL + 92, BGMW94b] </ref>; a World-Wide Web page containing an overview of the project, and a full list of project reports is also available [EP]. <p> An early prototype compiler was implemented, based on the IOA semantics for a subset of Core ELLA called Boolean Kernel ELLA (BKE), using an enumerated representation of the IOAs. A simulator, equivalence-checker and counter-example generator were also built, and installed within a prototype design environment developed by Harlequin Ltd <ref> [BGL + 91, BGL + 92] </ref>. The environment contains a design library facility, and textual and schematic editors, all embedded within a graphical user interface.
Reference: [BGMW94a] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> Verifying Deterministic Systems using a State Evolution Method. Deliverable D2.4a, Formal Verification Support for ELLA, </title> <type> IED 4/1/1357, </type> <institution> University of Manchester, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: A full description of the verification approach is given in another paper in the series <ref> [BGMW94a] </ref>. A 1 reference manual containing the complete semantic definition of ELLA using EPA is also available as a technical report [BGMW94b]. 1.1 Background Increasingly sophisticated hardware design environments are becoming more readily available to the hardware engineer. <p> A high degree of automation is still possible, however. Although we will describe the method for deterministic systems, it is possible to extend it to non-deterministic systems. Note that this method is main subject of <ref> [BGMW94a] </ref>, where it is described in detail. 26 5.3 State Bisimulation and State Evolution Each design is represented by an EPA process P in normal form. From this are extracted a response function r P (x; s P ), and an evolution function e P (x; s P ). <p> The soundness of the state evolution rule with respect to strong bisimilarity, and a discussion of termination conditions can be found in <ref> [BGMW94a] </ref> 5.3.1.1 Example: Integer Delay Consider the following problem of determining whether two normal form EPA process terms, P (i=o) and Q (i=o) are equivalent: P (in: N = out: N) 4 P 0 (0 ; in = out) Q (in: N = out: N) 4 Q 0 (1 ; in
Reference: [BGMW94b] <author> H. Barringer, G.D. Gough, B.Q. Monahan, and A. Williams. </author> <title> A Process Algebraic Semantics for Core ELLA. </title> <type> Technical Report UMCS-93-2-1, </type> <institution> University of Manchester, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: A full description of the verification approach is given in another paper in the series [BGMW94a]. A 1 reference manual containing the complete semantic definition of ELLA using EPA is also available as a technical report <ref> [BGMW94b] </ref>. 1.1 Background Increasingly sophisticated hardware design environments are becoming more readily available to the hardware engineer. Typically, these are equipped with hardware description languages (HDLs) for design representation, and schematic capture and other editing tools for design entry and manipulation. Library and versioning tools provide for design management. <p> Work from the project is documented in <ref> [GB91, BGL + 91, BGL + 92, BGMW94b] </ref>; a World-Wide Web page containing an overview of the project, and a full list of project reports is also available [EP]. <p> Full details of the EPA semantics for Core ELLA can be found in <ref> [BGMW94b] </ref>. 4.1 ELLA Closure An ELLA closure consists of a sequence of well-formed type- and function-declarations [[decl 1 ; ; decl k ]], which must observe a define-before-use order.
Reference: [CBM89] <author> O. Coudert, C. Berthet, and J-C. Madre. </author> <title> Verification of Synchronous Sequential Machines based on Symbolic Execution. In Proceedings of Workshop on Automatic Verification Methods for Finite State Systems, </title> <address> Grenoble, France, </address> <month> June </month> <year> 1989. </year> <note> LNCS 407. </note>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been dramatically enhanced by the introduction of compact state-space encodings, namely BDDs see <ref> [BCL91, BCMD90, CBM89] </ref> for key expositions. The process algebraic approach described here has its origins in the foundational works of CCS [Mil89] and CSP [Hoa85].
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic Verification of finite state concurrent systems using Temporal Logic Specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2), </volume> <year> 1986. </year>
Reference-contexts: how state bisimulation can be established, by generating a set of verification conditions from a symbolic bisimulation of the EPA terms under analysis if the verification conditions are valid, then the EPA terms are bisimilar. 1.3 Related Work There has been extensive research into state-based verification methods such as model-checking <ref> [CES86, BFG89] </ref>. Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been dramatically enhanced by the introduction of compact state-space encodings, namely BDDs see [BCL91, BCMD90, CBM89] for key expositions.
Reference: [Com91] <institution> Computer General Electronic Design, </institution> <address> Chippenham, Wiltshire, United Kingdom. </address> <note> The ELLA Language Reference Manual, 5.1 edition, </note> <month> February </month> <year> 1991. </year>
Reference-contexts: feedback from verification attempts should be presented back to the user at the level of the original design description. 1.1.1 ELLA ELLA is a hardware design system created by DRA Malvern for the high-level description of complex VLSI designs [MC93, MPT85], then developed as a commercial product by Praxis Systems <ref> [Com91] </ref> and now available in the public domain as ELLA2000 1 . The system includes the ELLA language and compiler, an application support environment, and simulation and other tools. <p> of a representation of the ELLA semantics in a process algebra, EPA, which can be viewed as a symbolic representation of the underlying input/output trace set. 3.1 Representing Hardware Components using EPA EPA is a process algebra designed specifically for representing the behaviour of synchronous hardware systems described in ELLA <ref> [MC93, Com91] </ref>, although it does have wider applications. EPA has some similarities to SCCS [Mil89]. An EPA process term evolves into a new term by performing actions, the evolution determined by a set of transition rules, with respect to an EPA context, or set of EPA definitions.
Reference: [EP] <institution> Formal Verification Support for ELLA, IED/SERC Project 4/1/1357. </institution> <note> Reports are available on the World-Wide Web, URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html. </note>
Reference-contexts: Work from the project is documented in [GB91, BGL + 91, BGL + 92, BGMW94b]; a World-Wide Web page containing an overview of the project, and a full list of project reports is also available <ref> [EP] </ref>.
Reference: [GB91] <institution> Semantics and Verification Foundations for ELLA. Deliverable D1.1+2.1, FORMAL VERIFICATION SUPPORT FOR ELLA, IED 4/1/1357, University of Manchester and DRA Electronics Division, RSRE Malvern, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Work from the project is documented in <ref> [GB91, BGL + 91, BGL + 92, BGMW94b] </ref>; a World-Wide Web page containing an overview of the project, and a full list of project reports is also available [EP]. <p> Consider the water pump controller, derived from <ref> [GB91] </ref>: A reservoir is connected to a lake by a pipe line. Water is taken from the lake to the reservoir by a system of two pumps. Two level sensors are installed on the reservoir. Their outputs are denoted by signals a 1 , a 2 .
Reference: [Goo90a] <author> K.G.W. Goossens. </author> <title> An Operational Semantics for a Subset of the CHDDL ELLA. </title> <type> Technical report, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: There have been other recent approaches to providing a formal semantics for ELLA. At Edinburgh, operational semantics are provided for two simplified versions of ELLA, called microELLA <ref> [Goo90a] </ref> and picoELLA [Goo90b].
Reference: [Goo90b] <author> K.G.W. Goossens. </author> <title> Semantics for picoELLA. </title> <type> Technical report, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: There have been other recent approaches to providing a formal semantics for ELLA. At Edinburgh, operational semantics are provided for two simplified versions of ELLA, called microELLA [Goo90a] and picoELLA <ref> [Goo90b] </ref>.
Reference: [HL93] <author> M. Hennessy and H. Lin. </author> <title> Proof Systems for Message-Passing Process Algebras. </title> <type> Technical Report 5/93, </type> <institution> University of Sussex, </institution> <year> 1993. </year>
Reference-contexts: The process algebraic approach described here has its origins in the foundational works of CCS [Mil89] and CSP [Hoa85]. There have recently emerged techniques for efficiently modelling systems; for example <ref> [HL93] </ref> describes a value-passing process algebra, where the structured actions consist of channels which can carry messages or data. There have been other recent approaches to providing a formal semantics for ELLA. At Edinburgh, operational semantics are provided for two simplified versions of ELLA, called microELLA [Goo90a] and picoELLA [Goo90b].
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: The process algebraic approach described here has its origins in the foundational works of CCS [Mil89] and CSP <ref> [Hoa85] </ref>. There have recently emerged techniques for efficiently modelling systems; for example [HL93] describes a value-passing process algebra, where the structured actions consist of channels which can carry messages or data. There have been other recent approaches to providing a formal semantics for ELLA.
Reference: [HU79] <author> J.E. Hopcroft and J.D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year> <month> 31 </month>
Reference-contexts: In ELLA, every design element is assumed to have zero delay, except for explicit delay elements, which have integer delays. In turn, a trace set can be represented using a structure similar to a standard Mealy machine from automata theory <ref> [HU79, Shi87] </ref>. These ideas are slightly adapted and generalised here to form an input/output automaton (IOA), which has some similarity to the structure of the same name studied by [LT88].
Reference: [LT88] <author> N.A. Lynch and M.R. Tuttle. </author> <title> An Introduction to Input/Output Automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: In turn, a trace set can be represented using a structure similar to a standard Mealy machine from automata theory [HU79, Shi87]. These ideas are slightly adapted and generalised here to form an input/output automaton (IOA), which has some similarity to the structure of the same name studied by <ref> [LT88] </ref>. The set of input/output traces, or IO language giving the behaviour of an ELLA construct, is then represented by an IOA.
Reference: [MC93] <author> J D Morison and A S Clarke. ELLA2000: </author> <title> A Language for Electronic System Design. </title> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction This paper is one of a series describing different aspects of work on the development of design and formal verification environments for commercial hardware description languages (HDLs). The HDL addressed here is ELLA <ref> [MC93] </ref>. The techniques described, however, have broader applications, for example, it would be possible to apply them to other HDLs, such as VHDL, in future work. The work reported here focusses initially on the development of a formal semantics for ELLA (the starting point for any formal analysis tools). <p> The work presented here lays the foundations for such tools and their integration into design environments already familiar to the hardware engineer. Our approach has been to work in the context of a commercial HDL, namely ELLA <ref> [MC93] </ref>, so that the means of design representation is familiar to the designer, who can still use existing CAD support tools. The ELLA design and verification environment currently under development includes many of the facilities provided by conventional environments listed above. <p> with these tools at a familiar level for example, any debugging feedback from verification attempts should be presented back to the user at the level of the original design description. 1.1.1 ELLA ELLA is a hardware design system created by DRA Malvern for the high-level description of complex VLSI designs <ref> [MC93, MPT85] </ref>, then developed as a commercial product by Praxis Systems [Com91] and now available in the public domain as ELLA2000 1 . The system includes the ELLA language and compiler, an application support environment, and simulation and other tools. <p> of a representation of the ELLA semantics in a process algebra, EPA, which can be viewed as a symbolic representation of the underlying input/output trace set. 3.1 Representing Hardware Components using EPA EPA is a process algebra designed specifically for representing the behaviour of synchronous hardware systems described in ELLA <ref> [MC93, Com91] </ref>, although it does have wider applications. EPA has some similarities to SCCS [Mil89]. An EPA process term evolves into a new term by performing actions, the evolution determined by a set of transition rules, with respect to an EPA context, or set of EPA definitions.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The process algebraic approach described here has its origins in the foundational works of CCS <ref> [Mil89] </ref> and CSP [Hoa85]. There have recently emerged techniques for efficiently modelling systems; for example [HL93] describes a value-passing process algebra, where the structured actions consist of channels which can carry messages or data. There have been other recent approaches to providing a formal semantics for ELLA. <p> EPA has some similarities to SCCS <ref> [Mil89] </ref>. An EPA process term evolves into a new term by performing actions, the evolution determined by a set of transition rules, with respect to an EPA context, or set of EPA definitions. An action in EPA is structured; it associates value expressions with input and output channels. <p> In particular, the notion of (strong) bisimilarity <ref> [Mil89] </ref> will be used. In the next section we outline a state bisimulation relation, equivalent to strong bisimilarity, which operates on the abstract EPA terms produces from ELLA. An accompanying state evolution method generates verification conditions needed to establish state bisim-ilarity between two EPA systems.
Reference: [Moo56] <author> E.F. Moore. </author> <title> Gedanken Experiments on Sequential Machines. </title> <editor> In C.E. Shannon and J. McCarthy, editors, </editor> <booktitle> Automata Studies, </booktitle> <pages> pages 129 - 153. </pages> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: Furthermore, any such channel is hidden within the resulting product automaton it still remains as an output, however. Verification for IOA semantic objects requires the application of well-known language equivalence and containment algorithms <ref> [Moo56, RS59] </ref>. If two automata are inequivalent, then it is possible to generate 4 a counter-example or difference automaton that, when simulated, shows how the trace sets differ.
Reference: [MPT85] <author> J.D. Morison, N.E. Peeling, and T.L. Thorp. </author> <title> The Design Rationale of ELLA, a hardware design and description language. </title> <booktitle> In CHDL, </booktitle> <address> Tokyo, </address> <year> 1985. </year>
Reference-contexts: with these tools at a familiar level for example, any debugging feedback from verification attempts should be presented back to the user at the level of the original design description. 1.1.1 ELLA ELLA is a hardware design system created by DRA Malvern for the high-level description of complex VLSI designs <ref> [MC93, MPT85] </ref>, then developed as a commercial product by Praxis Systems [Com91] and now available in the public domain as ELLA2000 1 . The system includes the ELLA language and compiler, an application support environment, and simulation and other tools.
Reference: [Old91] <author> E-R. Olderog. </author> <title> Nets, Terms and Formulas, </title> <booktitle> volume 23 of Tracts in TCS. CUP, </booktitle> <year> 1991. </year>
Reference-contexts: If hs P ; s Q i 2 SB then 8 x 2 I, (a) r P (x; s P ) = r Q (x; s Q ), and This is clearly related to a similar notion defined by Olderog appearing in <ref> [Old91] </ref>. The difference between the approaches is that we do not wish to immediately identify the concept of state with that of process as directly as Olderog does.
Reference: [Pei92] <author> M.D. Peim. </author> <title> A BDD-based equivalence checker for IO automata. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Manchester, </institution> <year> 1992. </year>
Reference-contexts: The environment contains a design library facility, and textual and schematic editors, all embedded within a graphical user interface. Also included was a BDD-encoded version of the equivalence checker <ref> [Pei92] </ref>. 2.1 IO Automaton Examples The IOA representation of the semantics of synchronous hardware systems is not fully described here; instead three examples of IOA representations of simple hardware components are given.
Reference: [RS59] <author> M.O. Rabin and D. Scott. </author> <title> Finite Automata and their Decision Problems. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 3(2) </volume> <pages> 114-125, </pages> <month> April </month> <year> 1959. </year>
Reference-contexts: Furthermore, any such channel is hidden within the resulting product automaton it still remains as an output, however. Verification for IOA semantic objects requires the application of well-known language equivalence and containment algorithms <ref> [Moo56, RS59] </ref>. If two automata are inequivalent, then it is possible to generate 4 a counter-example or difference automaton that, when simulated, shows how the trace sets differ.
Reference: [Shi87] <author> M. Shields. </author> <title> An Introduction to Automata Theory. </title> <publisher> Blackwell, Oxford, </publisher> <year> 1987. </year>
Reference-contexts: In ELLA, every design element is assumed to have zero delay, except for explicit delay elements, which have integer delays. In turn, a trace set can be represented using a structure similar to a standard Mealy machine from automata theory <ref> [HU79, Shi87] </ref>. These ideas are slightly adapted and generalised here to form an input/output automaton (IOA), which has some similarity to the structure of the same name studied by [LT88].
Reference: [SOR93] <author> N Shankar, S Owre, and J M Rushby. </author> <title> The PVS Proof Checker: A Reference Manual (Beta Release). </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> March </month> <year> 1993. </year> <month> 32 </month>
Reference-contexts: A prototype of such a verification condition generator (VCG) has been implemented that automatically simplifies as many VCs as possible (without implementing a full first order theorem prover/proof assistant) and then submits those that are non-trivially true or false to a proof assistant (in our case PVS <ref> [SOR93] </ref>) for proof. One advantage of such an approach over other symbolic model checking methods, such as BDDs, is the ability to handle trace equivalence of infinite state space designs, either fully automatically or with minimal user interaction.
References-found: 28

