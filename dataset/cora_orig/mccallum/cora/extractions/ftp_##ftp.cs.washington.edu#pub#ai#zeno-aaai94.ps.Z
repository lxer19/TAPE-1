URL: ftp://ftp.cs.washington.edu/pub/ai/zeno-aaai94.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Email: jsp@watson.ibm.com  weld@cs.washington.edu  
Title: Temporal Planning with Continuous Change  
Author: J. Scott Penberthy Daniel S. Weld 
Address: 30 Saw Mill River Road Hawthorne, NY 10532  Seattle, WA 98105  
Affiliation: IBM T.J. Watson Research Center  Department of Computer Science and Engineering University of Washington  
Note: To Appear, AAAI-94  
Abstract: We present zeno, a least commitment planner that handles actions occurring over extended intervals of time. Deadline goals, metric preconditions, metric effects, and continuous change are supported. Simultaneous actions are allowed when their effects do not interfere. Unlike most planners that deal with complex languages, the zeno planning algorithm is sound and complete. The running code is a complete implementation of the formal algorithm, capable of solving simple problems (i.e., those involving less than a dozen steps). 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J., Kautz, H., Pelavin, R., and Tenenberg, J. </author> <year> 1991. </year> <title> Reasoning about Plans. </title> <address> San Mateo, CA: </address> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: on search control and abstraction is needed before zeno can handle large-scale, practical problems. could switch to Karmarkar's linear programming algorithm which is guaranteed polynomial (Karloff 1991). 5 This clairvoyant proof technique was first used by Mc-Dermott (McDermott 1991) to prove his total-order planner complete. problems: Allen's door latch example <ref> (Allen et al. 1991) </ref>, the airplane example of this paper and the metric blocks world problem from figure 9.3 of (Wilkins 1988b). A simple predicate ordering, e.g., see (Sacer-doti 1974), was used on all but the door latch problem to guide subgoal selection. <p> Iterative-deepening, depth-first search (Korf 1985) handled all other nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen <ref> (Allen 1991) </ref>, Chapman (Chapman 1987), McAllester (McAllester & Rosenblitt 1991) and Pednault (Pednault 1986). Allen and Pelavin (Allen et al. 1991) describe an elegant theory of temporal planning based on first order logic and an interval model of time. <p> Allen and Pelavin <ref> (Allen et al. 1991) </ref> describe an elegant theory of temporal planning based on first order logic and an interval model of time. In contrast, we model time using the real numbers; this allows metric duration and continuous change.
Reference: <author> Allen, J. </author> <year> 1991. </year> <title> Planning as temporal reasoning. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 3-14. </pages>
Reference-contexts: on search control and abstraction is needed before zeno can handle large-scale, practical problems. could switch to Karmarkar's linear programming algorithm which is guaranteed polynomial (Karloff 1991). 5 This clairvoyant proof technique was first used by Mc-Dermott (McDermott 1991) to prove his total-order planner complete. problems: Allen's door latch example <ref> (Allen et al. 1991) </ref>, the airplane example of this paper and the metric blocks world problem from figure 9.3 of (Wilkins 1988b). A simple predicate ordering, e.g., see (Sacer-doti 1974), was used on all but the door latch problem to guide subgoal selection. <p> Iterative-deepening, depth-first search (Korf 1985) handled all other nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen <ref> (Allen 1991) </ref>, Chapman (Chapman 1987), McAllester (McAllester & Rosenblitt 1991) and Pednault (Pednault 1986). Allen and Pelavin (Allen et al. 1991) describe an elegant theory of temporal planning based on first order logic and an interval model of time. <p> Allen and Pelavin <ref> (Allen et al. 1991) </ref> describe an elegant theory of temporal planning based on first order logic and an interval model of time. In contrast, we model time using the real numbers; this allows metric duration and continuous change.
Reference: <author> Chapman, D. </author> <year> 1987. </year> <title> Planning for conjunctive goals. </title> <booktitle> Artificial Intelligence 32(3) </booktitle> <pages> 333-377. </pages>
Reference-contexts: We say "possibly" here since the plan P is only partially specified: many step orderings and values for free variables may be consistent with P , yet allow threats to occur. zeno resolves all threats using the standard techniques of promotion and demotion, i.e., posting ordering constraints on time points <ref> (Chapman 1987) </ref>, and confrontation, i.e., posting a new subgoal that prevents e k from interfering (Collins & Pryor 1992; Penberthy & Weld 1992; Weld 1994). If no resolution is possible, zeno backtracks. Linking and threat prevention introduce constraints on the plan. <p> Iterative-deepening, depth-first search (Korf 1985) handled all other nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen (Allen 1991), Chapman <ref> (Chapman 1987) </ref>, McAllester (McAllester & Rosenblitt 1991) and Pednault (Pednault 1986). Allen and Pelavin (Allen et al. 1991) describe an elegant theory of temporal planning based on first order logic and an interval model of time.
Reference: <author> Collins, G., and Pryor, L. </author> <year> 1992. </year> <title> Achieving the functionality of filter conditions in a partial order planner. </title> <booktitle> In Proc. 10th Nat. Conf. on A.I. </booktitle>
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: the open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: Our approach is considerably simpler than that of sipe (Wilkins 1990) and deviser (Vere 1983) - zeno avoids parallel links, complex traversal schemes, and heuristic plan evaluation. Similarly, we believe that zeno's treatment of simultaneous and metric effects is more general than sipe's. While oplan <ref> (Currie & Tate 1991) </ref> uses ideas from operations research to optimize resource usage, they use different techniques for temporal management.
Reference: <author> Dean, T. </author> <year> 1989. </year> <title> Using Temporal Hierarchies to Efficiently Maintain Large Temporal Databases. </title> <journal> Journal of the ACM 36(4) </journal> <pages> 687-718. </pages>
Reference: <author> Dechter, R., Meiri, I., and Pearl, J. </author> <year> 1991. </year> <title> Temporal constraint networks. </title> <booktitle> Artificial Intelligence 49 </booktitle> <pages> 61-96. </pages>
Reference-contexts: We strive for a system with the performance of sipe (Wilkins 1988a) and the formal properties of zeno. Since metering tools show that the bulk of zeno's time is spent updating and querying its temporal cache, we hope to integrate optimized temporal reasoners, such as <ref> (Dechter, Meiri, & Pearl 1991) </ref>,(Dean 1989) or (Williamson & Hanks 1993), into zeno's hierarchy of constraint reasoners. As it stands, we believe that zeno represents a first step towards bridging the gap between formal and empirical approaches to automated planning with expressive temporal languages.
Reference: <author> Drabble, B. </author> <year> 1993. </year> <title> Excalibur: a program for planning and reasoning with processes. </title> <booktitle> Artificial Intelligence 62 </booktitle> <pages> 1-40. </pages>
Reference-contexts: In contrast, we model time using the real numbers; this allows metric duration and continuous change. Numerous systems with some of zeno's features have been implemented in the past twenty years and we have drawn insight from many of them. Drab-ble's excalibur <ref> (Drabble 1993) </ref> first generates a plan that ignores metric constraints, then tests it through qualitiative simulation; failed tests invoke heuristic re-planning. Simmons' gordius (Simmons 1988) handles actions with conditional and metric effects, but uses a state-based model of time and is incomplete.
Reference: <author> Hendrix, G. </author> <year> 1973. </year> <title> Modeling simultaneous actions an continuous processes. </title> <booktitle> Artificial Intelligence 4 </booktitle> <pages> 145-180. </pages>
Reference: <author> Jaffar, J., Michaylov, S., Stuckey, P., and Yap, R. </author> <year> 1992. </year> <title> The CLP(R) Language and System. </title> <journal> ACM Transactions on Programming Languages and Systems 14(3) </journal> <pages> 339-395. </pages>
Reference-contexts: While exponential in the worst case, the expected time for phase I is linear in the number of variables. 4 For maximum speed, zeno uses Jaf 4 In our experience, the Simplex algorithm is never the bottleneck; if larger problems cause this to be the case we far et.al.'s <ref> (Jaffar et al. 1992) </ref> dynamic programming version of the algorithm optimized for incremental updates. This version retains the polytope from n equations, then modifies it when the n + 1st inequality is added. The above algorithms determine whether the set of constraints are consistent. <p> While oplan (Currie & Tate 1991) uses ideas from operations research to optimize resource usage, they use different techniques for temporal management. In contrast, zeno uses an integrated approach for both temporal and other metric constraints, but makes no claim of efficient resource handling. <ref> (Jaffar et al. 1992) </ref> developed the incremental algorithms and the idea of using Gaussian elimination and Simplex phase I iteration to manage linear equations and inequalities.
Reference: <author> Karloff, H. </author> <year> 1991. </year> <title> Linear Programming. </title> <address> Boston: </address> <publisher> Birkhauser. </publisher>
Reference-contexts: These canonical forms are identical to the matrix representation of equations used in linear algebra and operations research <ref> (Karloff 1991) </ref>. Linear equations are solved by Gaussian elimination, linear inequalities by the Simplex algorithm, and nonlinear equations are delayed until they become linear via the solution of other equations and inequalities. <p> Finding inconsistencies in linear inequalities is a bit trickier. Recall that linear programming is the task of minimizing a cost function while satisfying a set of linear inequalities <ref> (Karloff 1991) </ref>. The Simplex algorithm operates in two phases. First, it constructs a polytope, i.e., a convex region in &lt; n , that exactly covers the set of solutions to the linear inequalities. <p> Yet even in these domains performance is tolerable, i.e., the current implementation is suitable for experimental research use. Further work on search control and abstraction is needed before zeno can handle large-scale, practical problems. could switch to Karmarkar's linear programming algorithm which is guaranteed polynomial <ref> (Karloff 1991) </ref>. 5 This clairvoyant proof technique was first used by Mc-Dermott (McDermott 1991) to prove his total-order planner complete. problems: Allen's door latch example (Allen et al. 1991), the airplane example of this paper and the metric blocks world problem from figure 9.3 of (Wilkins 1988b).
Reference: <author> Korf, R. </author> <year> 1985. </year> <title> Depth-first iterative deepening: An optimal admissible tree search. </title> <booktitle> Artificial Intelligence 27(1) </booktitle> <pages> 97-109. </pages>
Reference-contexts: A simple predicate ordering, e.g., see (Sacer-doti 1974), was used on all but the door latch problem to guide subgoal selection. Iterative-deepening, depth-first search <ref> (Korf 1985) </ref> handled all other nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen (Allen 1991), Chapman (Chapman 1987), McAllester (McAllester &
Reference: <author> McAllester, D., and Rosenblitt, D. </author> <year> 1991. </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on A.I., </booktitle> <pages> 634-639. </pages>
Reference-contexts: Logical and fluent-definitional goals If ' from '; g is a literal such as At (ernie, city-d), it is satisfied in a style similar to ucpop (Pen berthy & Weld 1992; Weld 1994) and snlp <ref> (McAllester & Rosenblitt 1991) </ref> in the "logical goals" path of the main loop. zeno nondeterministically chooses a source for ' by finding an effect that concludes ' over e , where e possibly precedes g . Sources from both newly instantiated and existing steps S i are considered. <p> search (Korf 1985) handled all other nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen (Allen 1991), Chapman (Chapman 1987), McAllester <ref> (McAllester & Rosenblitt 1991) </ref> and Pednault (Pednault 1986). Allen and Pelavin (Allen et al. 1991) describe an elegant theory of temporal planning based on first order logic and an interval model of time. In contrast, we model time using the real numbers; this allows metric duration and continuous change.
Reference: <author> McDermott, D. </author> <year> 1991. </year> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems 6 </journal> <pages> 357-416. </pages>
Reference-contexts: Further work on search control and abstraction is needed before zeno can handle large-scale, practical problems. could switch to Karmarkar's linear programming algorithm which is guaranteed polynomial (Karloff 1991). 5 This clairvoyant proof technique was first used by Mc-Dermott <ref> (McDermott 1991) </ref> to prove his total-order planner complete. problems: Allen's door latch example (Allen et al. 1991), the airplane example of this paper and the metric blocks world problem from figure 9.3 of (Wilkins 1988b).
Reference: <author> Nelson, G., and Oppen, D. C. </author> <year> 1979. </year> <title> Simplification by cooperating decision procedures. </title> <journal> ACM Transactions on Programming Languages and Systems 1(2) </journal> <pages> 245-257. </pages>
Reference-contexts: To ensure sound constraint handling, each equality, x i = c, that is derived by one algorithm is passed to all other algorithms <ref> (Nelson & Oppen 1979) </ref>. Determining an inconsistency using Gaussian elimination is straightforward; if a constraint c = 0 is detected during elimination, where c is non-zero constant, then the equations are inconsistent. Finding inconsistencies in linear inequalities is a bit trickier. <p> Our restrictions on the use of metric variables in zeno's logic are derived from the innovative approaches of <ref> (Nelson & Oppen 1979) </ref> and (Hen-drix 1973). 6 The experiments were performed on an IBM RS/6000 running Allegro Common Lisp; 95% confidence intervals were calcuated from 10 runs per problem.
Reference: <author> Pednault, E. </author> <year> 1986. </year> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University. </institution>
Reference-contexts: nondetermi nistic choices. problem cpu time (sec) Door latch 0:04 0:00 Airplane routing 151:56 27:56 sipe example 1:42 0:24 Related Work Because of our interest in formal properties, zeno is closest in spirit to the work of Allen (Allen 1991), Chapman (Chapman 1987), McAllester (McAllester & Rosenblitt 1991) and Pednault <ref> (Pednault 1986) </ref>. Allen and Pelavin (Allen et al. 1991) describe an elegant theory of temporal planning based on first order logic and an interval model of time. In contrast, we model time using the real numbers; this allows metric duration and continuous change.
Reference: <author> Penberthy, J., and Weld, D. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 103-114. </pages> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference: <author> Penberthy, J. </author> <year> 1993. </year> <title> Planning with Continuous Change. </title> <type> Ph.D. Dissertation, </type> <institution> University of Washing-ton. </institution> <note> Available as UW CSE Tech Report 93-12-01. </note>
Reference-contexts: Internally, the conjunctive effects of each action are simplified to a set of literals through reduction parsing <ref> (Penberthy 1993) </ref>. This approach simplifies the matching of action effects to goals. The last effect conjunct of Fast-Fly, 8 time t t 2 [t s ; t e ] @ @t fuel (t; plane) = -4 states that the fuel level will change at a constant rate of -4 . <p> This is accomplished by first adding a new causal link p ; ' to L and then removing all threats to the new link. The tuple format of a causal link is shorthand for a logical sentence stating that ' must persist over the interval p <ref> (Penberthy 1993) </ref>. A threat is any effect e k that might possibly cause :' over some portion of the interval p . <p> The base case (0-step plans) is true for all consistent problem descriptions. The inductive case uses an n 1 step plan to guide zeno as it builds an n step plan. 5 zeno's proofs occupy many more pages than allowed in this paper; see <ref> (Penberthy 1993) </ref> for details. Performance zeno has been tested on numerous problems. Our empirical results (Penberthy 1993) show that zeno's performance is on a par with state-based planners, e.g., ucpop and prodigy, in domains that don't involve interval goals, continuous change and metric rela tionships (which those planners can't handle). zeno's <p> The inductive case uses an n 1 step plan to guide zeno as it builds an n step plan. 5 zeno's proofs occupy many more pages than allowed in this paper; see <ref> (Penberthy 1993) </ref> for details. Performance zeno has been tested on numerous problems. Our empirical results (Penberthy 1993) show that zeno's performance is on a par with state-based planners, e.g., ucpop and prodigy, in domains that don't involve interval goals, continuous change and metric rela tionships (which those planners can't handle). zeno's speed only degrades when a planning problem demands zeno's advanced features.
Reference: <author> Sacerdoti, E. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference: <author> Simmons, R. </author> <year> 1988. </year> <title> Combining associational and causal reasoning to solve interpretation and planning problems. </title> <institution> AI-TR-1048, MIT AI Lab. </institution>
Reference-contexts: Numerous systems with some of zeno's features have been implemented in the past twenty years and we have drawn insight from many of them. Drab-ble's excalibur (Drabble 1993) first generates a plan that ignores metric constraints, then tests it through qualitiative simulation; failed tests invoke heuristic re-planning. Simmons' gordius <ref> (Simmons 1988) </ref> handles actions with conditional and metric effects, but uses a state-based model of time and is incomplete. Our approach is considerably simpler than that of sipe (Wilkins 1990) and deviser (Vere 1983) - zeno avoids parallel links, complex traversal schemes, and heuristic plan evaluation.
Reference: <author> Vere, S. </author> <year> 1983. </year> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence 5 </journal> <pages> 246-267. </pages>
Reference-contexts: Simmons' gordius (Simmons 1988) handles actions with conditional and metric effects, but uses a state-based model of time and is incomplete. Our approach is considerably simpler than that of sipe (Wilkins 1990) and deviser <ref> (Vere 1983) </ref> - zeno avoids parallel links, complex traversal schemes, and heuristic plan evaluation. Similarly, we believe that zeno's treatment of simultaneous and metric effects is more general than sipe's.
Reference: <author> Warshall, S. </author> <year> 1962. </year> <title> A theorem on boolean matrices. </title> <journal> Journal of the ACM 9(1). </journal>
Reference-contexts: For example, the half-open interval [t 1 ; t 2 ) represents all time points t such that t 1 t &lt; t 2 . To expedite temporal queries, zeno caches temporal relations with Warshall's transitive closure algorithm <ref> (Warshall 1962) </ref>. For each time point t, this cache specifies all time points t less than or equal to t, all time points t greater than or equal to t, and all time points t 6= distinct from t.
Reference: <author> Weld, D. </author> <year> 1994. </year> <title> An introduction to least-commitment planning. </title> <journal> AI Magazine. </journal> <note> Available via FTP from pub/ai/ at cs.washington.edu. </note>
Reference-contexts: Specialized routines cooperate to handle the different types of constraints in C: codesignations, linear equalities, linear inequalities, and nonlinear equations. Codesignations are handled as they were in ucpop <ref> (Weld 1994) </ref>. A simple algorithm maintains equivalence classes of all logical variables, then determines whether the noncodesignations are inconsistent with the classification.
Reference: <author> Wilkins, D. </author> <year> 1988a. </year> <title> Causal reasoning in planning. </title> <booktitle> Computational Intelligence 4(4) </booktitle> <pages> 373-380. </pages>
Reference-contexts: A full, working implementation of the program has performance similar to existing state-based planners on comparable domains, but cannot be said to have heuristic adequacy. We strive for a system with the performance of sipe <ref> (Wilkins 1988a) </ref> and the formal properties of zeno.
Reference: <author> Wilkins, D. E. </author> <year> 1988b. </year> <title> Practical Planning. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: algorithm which is guaranteed polynomial (Karloff 1991). 5 This clairvoyant proof technique was first used by Mc-Dermott (McDermott 1991) to prove his total-order planner complete. problems: Allen's door latch example (Allen et al. 1991), the airplane example of this paper and the metric blocks world problem from figure 9.3 of <ref> (Wilkins 1988b) </ref>. A simple predicate ordering, e.g., see (Sacer-doti 1974), was used on all but the door latch problem to guide subgoal selection.
Reference: <author> Wilkins, D. </author> <year> 1990. </year> <title> Can AI planners solve practical problems? Computational Intelligence 6(4) </title> <type> 232-246. </type>
Reference-contexts: Simmons' gordius (Simmons 1988) handles actions with conditional and metric effects, but uses a state-based model of time and is incomplete. Our approach is considerably simpler than that of sipe <ref> (Wilkins 1990) </ref> and deviser (Vere 1983) - zeno avoids parallel links, complex traversal schemes, and heuristic plan evaluation. Similarly, we believe that zeno's treatment of simultaneous and metric effects is more general than sipe's.
Reference: <author> Williamson, M., and Hanks, S. </author> <year> 1993. </year> <title> Exploiting domain structure to achieve efficient temporal reasoning. </title> <booktitle> In Proc. 13th Int. Joint Conf. on A.I., </booktitle> <pages> 152-157. </pages>
Reference-contexts: Since metering tools show that the bulk of zeno's time is spent updating and querying its temporal cache, we hope to integrate optimized temporal reasoners, such as (Dechter, Meiri, & Pearl 1991),(Dean 1989) or <ref> (Williamson & Hanks 1993) </ref>, into zeno's hierarchy of constraint reasoners. As it stands, we believe that zeno represents a first step towards bridging the gap between formal and empirical approaches to automated planning with expressive temporal languages.
References-found: 27

