URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1994/GIT-CC-94-55.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.94.html
Root-URL: 
Email: e-mail frimli,venkatg@cc.gatech.edu  
Title: A Lower Bound for Boolean Permanent in Bijective Boolean Circuits and its Consequences  
Author: Rimli Sengupta and H. Venkateswaran 
Note: This work was supported by NSF grant CCR-9200878.  
Address: Atlanta, Georgia 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Date: September, 1994  
Pubnum: GIT-CC-94-55  
Abstract: We identify a new restriction on Boolean circuits called bijectivity and prove that bijective Boolean circuits require exponential size to compute the Boolean permanent function. As consequences of this lower bound, we show exponential size lower bounds for: (a) computing the Boolean permanent using monotone multilinear circuits; (b) computing the 0-1 permanent function using monotone arithmetic circuits; and (c) computing the lexicographically first bipartite perfect matching function using circuits over (min; concat). The lower bound arguments for the Boolean permanent function are adapted to prove an exponential lower bound for computing the Hamiltonian cycle function using bijective circuits. We identify a class of monotone functions such that if their counting version is ]P-hard, then there are no polynomial size bijective circuits for such functions unless PH collapses. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon and R.B. Boppana, </author> <title> The monotone circuit complexity of Boolean functions, </title> <journal> Com-binatorica, </journal> <volume> 7 (1987), </volume> <pages> pp. 1-22. </pages>
Reference-contexts: Since HC is a suitable function, this lower bound also follows from the fact that bijective circuits for HC must be monotone (theorem 3.1) and the exponential size lower bound for computing HC using monotone Boolean circuits <ref> [1] </ref>. 4.3 Generalizing the Lower Bound We now show that the lower bound presented above holds for a model that is slightly more general than bijective circuits. <p> every leaf node A in C n create a leaf node A in B 0 n . * For every _-node A in C n create the _-nodes [A; i; 0], 0 i p, in B 0 n . * For every ^-node A in C n create the _-nodes <ref> [A; i; 1] </ref>, 0 i p, in B 0 n . * For all 0 i p, the inputs to an _-node of the form [A; i; 1] are ^-nodes [A; i; j; k], for all j; k such that 0 j; k p and j + k = i. * <p> create the _-nodes [A; i; 0], 0 i p, in B 0 n . * For every ^-node A in C n create the _-nodes <ref> [A; i; 1] </ref>, 0 i p, in B 0 n . * For all 0 i p, the inputs to an _-node of the form [A; i; 1] are ^-nodes [A; i; j; k], for all j; k such that 0 j; k p and j + k = i. * For all i; j; k, inputs to the ^-node [A; i; j; k] are the _-nodes [B; j; 0] and [C; k; 0], where B <p> the inputs of the ^-node A in C n . * For all 0 i p, the inputs to an _-node of the form [A; i; 0] are set as follows: for each input B of the _-node A in C n , (a) if B is an ^-node, make <ref> [B; i; 1] </ref> an input of [A; i; 0], for all 0 i p; (b) if B is a leaf node labeled with a variable x, [A; 1; 0] has x as its input, and for all i 6= 1, [A; i; 0] gets the constant 0 as an input; and <p> 0] are set as follows: for each input B of the _-node A in C n , (a) if B is an ^-node, make [B; i; 1] an input of [A; i; 0], for all 0 i p; (b) if B is a leaf node labeled with a variable x, <ref> [A; 1; 0] </ref> has x as its input, and for all i 6= 1, [A; i; 0] gets the constant 0 as an input; and (c) if B is a leaf node labeled with a constant c, [A; 0; 0] has c as its input, and for all 1 i p,
Reference: [2] <author> R. Boppana and M. Sipser, </author> <title> The complexity of finite functions, </title> <booktitle> In The Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen ed., </editor> <publisher> Elsevier Science Publishers B.V. </publisher> <year> (1990) </year> <month> 759-804. </month>
Reference: [3] <author> A. Chandra, L. Stockmeyer and U. Vishkin, </author> <title> Constant depth reducibility, </title> <journal> SIAM J. Comput., </journal> <volume> 13 (1984), </volume> <pages> pp. 423-439. </pages>
Reference-contexts: For monotone Boolean circuits computing this function, a super-polynomial size lower bound [8] and a linear depth lower bound [7] are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY <ref> [3] </ref>. The bijectivity restriction is interesting for the following reasons: (a) Bijective circuits can compute all Boolean functions.
Reference: [4] <author> M. Grigni and M. Sipser, </author> <title> Monotone separation of Logspace from NC 1 , Proc. </title> <booktitle> 6th Annual IEEE Conference on Structures in Complexity Theory (1991), </booktitle> <pages> pp. 294-298. </pages>
Reference: [5] <author> J.E. Hopcroft and R.M. Karp, </author> <title> A n 5=2 algorithm for maximum matching in bipartite graphs, </title> <journal> SIAM J. Comput., </journal> <volume> 2 (1973), </volume> <pages> pp. 225-231. </pages>
Reference-contexts: Computing the Boolean permanent of a matrix is equivalent to deciding whether the bipartite graph represented by the matrix has a perfect matching. This problem can be solved by polynomial size Boolean circuits since it is known to be in P <ref> [5] </ref>. But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound [8] and a linear depth lower bound [7] are known. <p> If G does not have a perfect matching, the function outputs ?. The algorithm below computes LMBPM, where BPM (G) decides whether G has a perfect matching and fi denotes concatenation. Since there is a polynomial time algorithm for BPM <ref> [5] </ref>, LMBPM is therefore in P.
Reference: [6] <author> M. Jerrum and M. Snir, </author> <title> Some exact complexity results for straight-line computations over semi-rings, </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 29 (1982), </volume> <pages> pp. 874-897. </pages>
Reference-contexts: Arithmetic circuits with f+; fig nodes have traditionally been defined as algebraic circuits over a field. Several lower bounds are known on the size and depth of algebraic circuits over positive reals that compute certain multilinear polynomials <ref> [6, 11, 16, 14] </ref>. Our interest is in counting arithmetic circuits: those that compute functions of the form f : f0; 1g fl ! N . <p> For example, the arithmetization of a monotone circuit for the Boolean permanent function does not nec essarily compute the 0-1 permanent. The proof of our lower bound is based on a combinatorial framework developed by Jerrum and Snir <ref> [6] </ref> to obtain size lower bounds for computing polynomials using circuits defined over semi-rings. In [6], Jerrum and Snir prove an exponential size lower bound for computing the permanent polynomial using algebraic circuits over positive reals. <p> The proof of our lower bound is based on a combinatorial framework developed by Jerrum and Snir <ref> [6] </ref> to obtain size lower bounds for computing polynomials using circuits defined over semi-rings. In [6], Jerrum and Snir prove an exponential size lower bound for computing the permanent polynomial using algebraic circuits over positive reals. The combinatorial framework they develop uses restricted Boolean circuits that correspond to such algebraic circuits. We observe that these Boolean circuits are monotone, multilinear and bijective. <p> The following are some noteworthy features of the results in this paper: * The lower bound for computing the Boolean permanent function using bijective circuits is obtained by a simple extension of the framework in <ref> [6] </ref>. As noted earlier, our lower bound is for circuits whose formal polynomials need not be multilinear. This is not the case for circuits considered in [6, 11]. <p> As noted earlier, our lower bound is for circuits whose formal polynomials need not be multilinear. This is not the case for circuits considered in <ref> [6, 11] </ref>. As a consequence of our bound, we obtain an exponential size lower bound for computing the 0-1 permanent function using monotone arithmetic circuits. * Razborov [8] showed a super-polynomial size lower bound for monotone circuits that compute the Boolean permanent function. <p> After motivating the bijectivity restriction in section 2.2 and 2.3, we show that bijective 2 circuits for computing a class of monotone functions, that includes Boolean permanent and Hamiltonian cycle, must be monotone (section 3). In section 4, we adapt the Jerrum and Snir <ref> [6] </ref> lower bound framework to bijective circuits to obtain an exponential size lower bound for the Boolean permanent function. The three consequences of this lower bound are discussed in section 5. <p> Parse-graphs are a generalization of the notion of parse-trees in <ref> [6] </ref>. Every node of a parse-graph G computes a formal multivariate monomial, defined in the obvious way. The monomial computed at the root of G is a monomial of P (B n ). Thus, each monomial of P (B n ) corresponds to a parse-graph in B n . <p> Valiant [16] studied the power of negations in this setting and showed that a single subtraction can lead to an exponential gain in size for counting the number of perfect matchings in triangular grid graphs. <ref> [11, 6] </ref> proved non-trivial lower bounds on the size and depth of arithmetic circuits that compute certain multilinear polynomials with non-negative 0-1 coefficients. <p> In the next section, we improve this size lower bound to exponential by extending the lower bound arguments of <ref> [6] </ref> to hold for bijective circuits. 4.1 Adaptation of Jerrum and Snir's Framework The main difference between this model and that used in [6] is that the circuits used here need not be multilinear. <p> In the next section, we improve this size lower bound to exponential by extending the lower bound arguments of <ref> [6] </ref> to hold for bijective circuits. 4.1 Adaptation of Jerrum and Snir's Framework The main difference between this model and that used in [6] is that the circuits used here need not be multilinear. <p> Definition 4.3 Let H be a subgraph of a parse-graph G. Define the weight of H as follows: W (H) = ff2^nodes (H) 1 m (ff) , where ^-nodes (H) denotes the set of ^-nodes in H. A lemma similar to the one below was proven in <ref> [6] </ref> for their model. To prove it for bijective circuits, we need to take into account the fact that the parse-graphs are not necessarily trees. Lemma 4.1 If ff is an (r; d)-significant ^-node of B m , then m (ff) d!(r d)!(n r)!. <p> Since this means that the node ff contributes to m (ff) only for a single value of r and a single value of d, m (ff) is bounded above by d!(r d)!(n r)!. 2 The lemma below is motivated by theorem 3.3 in <ref> [6] </ref>, where fG i j 1 i n!g, are the parse-graphs of B m . Let fl = f^-node ff j m (ff) 1g: Lemma 4.2 P n! Proof: By definition, n! X W (G i ) = i=1 ff2^nodes (G i ) 1 : Fix an ^-node ff. <p> m (ff) 1 m (ff) = 1 and therefore the right-hand side is the number of ^-nodes in fl. 2 To obtain a lower bound on the weight of a parse-graph G, we consider the number of input variables covered by G, instead of the notion of degree used in <ref> [6] </ref>. This is primarily because P (B m ) is not necessarily multilinear in our model. 10 For any subgraph H of a parse-graph of B m , let v (H) denote the number of variables in the term associated with H. Let c (r; d) = d!(r d)!(n r)!. <p> Let c (r; d) = d!(r d)!(n r)!. The lemma below is adapted from theorem 3.4 in <ref> [6] </ref>. Lemma 4.3 Let H be a subgraph of any parse-graph G. Then, W (H) P v (H) 1 Proof: The proof is by induction on the number of nodes in H. For the base case, H has a single node. <p> Applying the induction hypothesis to the subgraphs ~ H fi and H fl and using lemma 4.1, we get: W (H) i=2 c (i; 1) (rd) X 1 + c (r; d) The expression on the right is shown in <ref> [6] </ref> to be minimum at d = 1 in the range 1 d b r 2 c. <p> which is exactly 2 n1 1 (n1)! , from which the theorem follows.2 4.2 Notes on the Lower Bound A few points are worth noting: Upper Bound The Boolean circuit based on the permanent analogue of Laplace's expansion rule for determinants computes BPM within size O (n (2 n1 1)) <ref> [6] </ref>. This circuit happens to be bijective. Therefore, the lower bound presented above is tight. 11 Depth Lower Bound The above size lower bound immediately implies a linear depth lower bound for computing the Boolean permanent function with bijective Boolean circuits. <p> Then, the bijective Boolean circuit obtained by Booleaniz-ing A m , would compute BPM within size smaller than n (2 (n1) 1). But by theorem 4.1, this is impossible. 2 We note that this lower bound on monotone arithmetic circuits computing PERM extends that obtained by <ref> [6] </ref> to the 0-1 permanent function. It is also worth noting that this bound does not follow from the work of Valiant [16]. 5.2 Monotone Multilinear Circuits Let B n be a monotone multilinear Boolean circuit for BPM.
Reference: [7] <author> R. Raz and A. Wigderson, </author> <title> Monotone circuits for matching require linear depth, </title> <booktitle> Proc. 22nd Annual ACM Symposium on Theory of Computing (1990), </booktitle> <pages> pp. 287-292. </pages>
Reference-contexts: But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound [8] and a linear depth lower bound <ref> [7] </ref> are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY [3]. The bijectivity restriction is interesting for the following reasons: (a) Bijective circuits can compute all Boolean functions. <p> This depth bound also follows from proposition 4.1 and a linear depth bound for this function using monotone Boolean circuits proven by Raz and Wigderson <ref> [7] </ref>. Lower Bound for Hamiltonian Cycle The Hamiltonian cycle function HC : f0; 1g n 2 ! f0; 1g takes as input the standard n fi n adjacency matrix representation of a graph G and outputs 1 if and only if G has a Hamiltonian cycle.
Reference: [8] <author> A.A. Razborov, </author> <title> A lower bound on the monotone network complexity of the logical permanent, </title> <address> Mathematischi Zametki 37, </address> <year> (1985), </year> <pages> pp. 887-900. </pages>
Reference-contexts: But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound <ref> [8] </ref> and a linear depth lower bound [7] are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY [3]. <p> This is not the case for circuits considered in [6, 11]. As a consequence of our bound, we obtain an exponential size lower bound for computing the 0-1 permanent function using monotone arithmetic circuits. * Razborov <ref> [8] </ref> showed a super-polynomial size lower bound for monotone circuits that compute the Boolean permanent function. <p> Since PERM is the counting version of BPM, the analogue of conjecture 2.1 is, Conjecture 2.2 BPM cannot be computed by polynomial size parsimonious Boolean circuits. Razborov's super-polynomial size lower bound <ref> [8] </ref> for monotone Boolean circuits computing BPM implies that there are no polynomial size monotone parsimonious circuits for BPM and therefore no polynomial size monotone arithmetic circuits for PERM. But the above result has the exact same consequences as before and therefore is hard to prove. <p> Since BPM is a suitable function and its counting version PERM is known to be ]P-complete [15], by corollary 3.2 we have a conditional lower bound on the size of bijective circuits for BPM. But since bijective circuits for BPM are monotone, Razborov's super-polynomial size lower bound <ref> [8] </ref> for monotone Boolean circuits computing the Boolean permanent applies and we have, Fact 4.1 Bijective circuits for BPM require super-polynomial size.
Reference: [9] <author> W. L. Ruzzo, </author> <title> On uniform circuit complexity, </title> <journal> J. Comput. System Sci., </journal> <volume> 22 (1981), </volume> <pages> pp. 365-383. </pages>
Reference-contexts: The uniformity condition used below is the notion of U D -uniformity defined by Ruzzo <ref> [9] </ref>. Theorem 2.1 [18, 19] ]P is the class of functions computable by uniform families of counting arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [10] <author> J. E. Savage, </author> <title> The complexity of computing, </title> <editor> R. E. </editor> <publisher> Kreiger Publishing Co., </publisher> <address> Malabar, FL, </address> <year> 1987. </year>
Reference: [11] <author> E. Shamir and M. Snir, </author> <title> On the depth complexity of formulas, </title> <journal> Math. Systems Theory, </journal> <volume> 13 (1980), </volume> <pages> pp. 301-322. </pages>
Reference-contexts: Arithmetic circuits with f+; fig nodes have traditionally been defined as algebraic circuits over a field. Several lower bounds are known on the size and depth of algebraic circuits over positive reals that compute certain multilinear polynomials <ref> [6, 11, 16, 14] </ref>. Our interest is in counting arithmetic circuits: those that compute functions of the form f : f0; 1g fl ! N . <p> As noted earlier, our lower bound is for circuits whose formal polynomials need not be multilinear. This is not the case for circuits considered in <ref> [6, 11] </ref>. As a consequence of our bound, we obtain an exponential size lower bound for computing the 0-1 permanent function using monotone arithmetic circuits. * Razborov [8] showed a super-polynomial size lower bound for monotone circuits that compute the Boolean permanent function. <p> Valiant [16] studied the power of negations in this setting and showed that a single subtraction can lead to an exponential gain in size for counting the number of perfect matchings in triangular grid graphs. <ref> [11, 6] </ref> proved non-trivial lower bounds on the size and depth of arithmetic circuits that compute certain multilinear polynomials with non-negative 0-1 coefficients.
Reference: [12] <author> E. Tardos, </author> <title> The gap between monotone and non-monotone circuit complexity is exponential, </title> <journal> Combinatorica, </journal> <volume> 7 (1987), </volume> <pages> pp. 141-142. </pages>
Reference: [13] <author> S. </author> <title> Toda, PP is as hard as the polynomial-time hierarchy, </title> <journal> SIAM J. Comput., </journal> <volume> 20 (1991), </volume> <pages> 865-877. </pages>
Reference-contexts: We would like to be able to prove the following result: Conjecture 2.1 PERM cannot be computed by polynomial size arithmetic circuits. We expect this to be true because if there were polynomial size arithmetic circuits for PERM, then Toda's result that PH P ]P <ref> [13] </ref> would lead to the collapse of PH. Proving this conjecture seems hard since in conjunction with theorem 2.1, it would imply that PERM 5 62 ]LOGCF L. This is turn would imply that ]LOGCF L is properly contained in ]P, since PERM is known to be in ]P [15]. <p> Consider a suitable function f such that ]f is ]P-hard. A polynomial size bijective circuit for f would imply a polynomial size arithmetic circuit for ]f . This in turn would lead to the collapse of PH due to Toda's result that PH P ]P <ref> [13] </ref>. Corollary 3.2 Given a suitable function f such that ]f is ]P-hard, there is no polynomial size bijective circuit for f unless PH collapses. In particular, since BPM is a suitable function and since PERM is ]P-hard, there is no polynomial size bijective circuit for BPM unless PH collapses.
Reference: [14] <author> M. Tompa and P. Tiwari, </author> <title> A direct version of Shamir and Snir's lower bounds on monotone circuit depth, </title> <institution> Univ. of Washington Technical Report # 92-12-06, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Arithmetic circuits with f+; fig nodes have traditionally been defined as algebraic circuits over a field. Several lower bounds are known on the size and depth of algebraic circuits over positive reals that compute certain multilinear polynomials <ref> [6, 11, 16, 14] </ref>. Our interest is in counting arithmetic circuits: those that compute functions of the form f : f0; 1g fl ! N .
Reference: [15] <author> L. Valiant, </author> <title> The complexity of computing the permanent, </title> <institution> Theor. Comput. Sci., </institution> <month> 8 </month> <year> (1979), </year> <pages> pp. 189-201. </pages>
Reference-contexts: Proving this conjecture seems hard since in conjunction with theorem 2.1, it would imply that PERM 5 62 ]LOGCF L. This is turn would imply that ]LOGCF L is properly contained in ]P, since PERM is known to be in ]P <ref> [15] </ref>. Moreover, it would also have the more severe implication that PERM 62 F P. <p> We shall loosely refer to each consistent monomial in P (B m ) as a permutation. Since BPM is a suitable function and its counting version PERM is known to be ]P-complete <ref> [15] </ref>, by corollary 3.2 we have a conditional lower bound on the size of bijective circuits for BPM.
Reference: [16] <author> L. Valiant, </author> <title> Negation can be exponentially powerful, </title> <institution> Theor. Comput. Sci., </institution> <month> 12 </month> <year> (1980), </year> <pages> pp. 303-314. </pages>
Reference-contexts: Arithmetic circuits with f+; fig nodes have traditionally been defined as algebraic circuits over a field. Several lower bounds are known on the size and depth of algebraic circuits over positive reals that compute certain multilinear polynomials <ref> [6, 11, 16, 14] </ref>. Our interest is in counting arithmetic circuits: those that compute functions of the form f : f0; 1g fl ! N . <p> Valiant <ref> [16] </ref> studied the power of negations in this setting and showed that a single subtraction can lead to an exponential gain in size for counting the number of perfect matchings in triangular grid graphs. [11, 6] proved non-trivial lower bounds on the size and depth of arithmetic circuits that compute certain <p> But by theorem 4.1, this is impossible. 2 We note that this lower bound on monotone arithmetic circuits computing PERM extends that obtained by [6] to the 0-1 permanent function. It is also worth noting that this bound does not follow from the work of Valiant <ref> [16] </ref>. 5.2 Monotone Multilinear Circuits Let B n be a monotone multilinear Boolean circuit for BPM.
Reference: [17] <author> L. Valiant, </author> <title> Why is Boolean complexity theory difficult? In Boolean Function Complexity Theory, edited by M.S. Paterson, </title> <booktitle> London Mathematical Society. Lecture Notes Series 169, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [18] <author> H. Venkateswaran, </author> <title> Properties that characterize LOGCFL, </title> <journal> J. Comput. System Sci., </journal> <volume> 43 (1991), </volume> <pages> pp. 380-404. </pages>
Reference-contexts: The uniformity condition used below is the notion of U D -uniformity defined by Ruzzo [9]. Theorem 2.1 <ref> [18, 19] </ref> ]P is the class of functions computable by uniform families of counting arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [19] <author> H. Venkateswaran, </author> <title> Circuit definitions of nondeterministic complexity classes, </title> <note> SIAM J. Comput., 21 (1992) pp. 655-670. </note>
Reference-contexts: The reason for our interest in counting arithmetic circuits is that there are characterizations of popular counting classes such as ]P and ]LOGCF L in terms of these circuits <ref> [19, 20] </ref>. Therefore, proving non-trivial lower bounds on the size of arithmetic circuits that compute natural functions have implications for separating counting classes. <p> We define the degree of A n to be the degree of P (A n ). The reason for our interest in counting arithmetic circuits is that there are characterizations of popular counting classes such as ]P and ]LOGCF L in terms of these circuits <ref> [19, 20] </ref>, summa rized in the theorem below. The uniformity condition used below is the notion of U D -uniformity defined by Ruzzo [9]. <p> The uniformity condition used below is the notion of U D -uniformity defined by Ruzzo [9]. Theorem 2.1 <ref> [18, 19] </ref> ]P is the class of functions computable by uniform families of counting arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [20] <author> V. Vinay, </author> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits, </title> <booktitle> Proc. 6th Annual IEEE Conference on Structure in Complexity Theory (1991), </booktitle> <pages> pp. 270-284. 18 </pages>
Reference-contexts: The reason for our interest in counting arithmetic circuits is that there are characterizations of popular counting classes such as ]P and ]LOGCF L in terms of these circuits <ref> [19, 20] </ref>. Therefore, proving non-trivial lower bounds on the size of arithmetic circuits that compute natural functions have implications for separating counting classes. <p> We define the degree of A n to be the degree of P (A n ). The reason for our interest in counting arithmetic circuits is that there are characterizations of popular counting classes such as ]P and ]LOGCF L in terms of these circuits <ref> [19, 20] </ref>, summa rized in the theorem below. The uniformity condition used below is the notion of U D -uniformity defined by Ruzzo [9].
References-found: 20

