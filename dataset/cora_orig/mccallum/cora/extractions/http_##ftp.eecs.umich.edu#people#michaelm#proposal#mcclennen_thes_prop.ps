URL: http://ftp.eecs.umich.edu/people/michaelm/proposal/mcclennen_thes_prop.ps
Refering-URL: http://ftp.eecs.umich.edu/people/michaelm/proposal/
Root-URL: http://www.eecs.umich.edu
Title: The multi-structured approach to the design of naming and descriptive systems  
Author: Michael McClennen 
Degree: A doctoral thesis proposal  
Affiliation: EECS Department The University of Michigan  
Abstract-found: 0
Intro-found: 0
Reference: <institution> (65) References </institution>
Reference: [1] <author> D. C. Blair. </author> <title> Language and Representation in Information Retrieval. </title> <publisher> Elsevier Science Publishers, </publisher> <address> New York, </address> <year> 1990 </year>
Reference-contexts: Researchers in information science have explored various schemes for determining such relationships. Some work on normative relationships, and some on descriptive. Unfortunately, most of the schemes proposed so far have difficulties which keep them from being effective <ref> [1] </ref>. In any case, only the most trivial have ever been implemented in large-scale commercial systems. With no way to express structure, users are left with flat descriptive spaces and with the difficulties described above.
Reference: [2] <author> D. C. Blair and M. E. Maron. </author> <title> An Evaluation of Retrieval Effectiveness for a Full-text Document Retrieval System. </title> <journal> Communications of the ACM, </journal> <volume> 28(3) </volume> <pages> 289-299, </pages> <month> March </month> <year> 1985 </year>
Reference-contexts: In addition, there is no way to tell in advance how the conjunction of two terms will behave. Although information systems researchers have explored the problems inherent in such systems, existing implementations tend not to work very well <ref> [2] </ref>. 2 - Problem (11) 2.7 A hypothesis: middlesized information systems I hypothesize that the realm of information retrieval problems can be categorized into three domains based on the size of the descriptive set.
Reference: [3] <author> M. Bowman, L.L. Peterson, and A. Yeatts. Univers: </author> <title> an attribute-based name server. </title> <journal> Software - Practice and Experience, </journal> <volume> 20(4) </volume> <pages> 403-24, </pages> <month> April </month> <year> 1990 </year>
Reference-contexts: This property is maintained by the operations that add and remove elements, independently of the path name interpretation algorithm. Second, consider an attribute-based resource location service (such as Univers <ref> [3] </ref>). In most systems of this type, each association is required to be distinct from all of the others known to the system. This guarantees that for each resource or object that is available for discovery there is a unique description that will retrieve it and no other. <p> Researchers such as G. Neufeld [11] have proposed enhancements to this structure to improve its flexibility and descriptive capacity by relaxing the hierarchical ordering constraints. Another tack is taken by Bowman et. al., with the Univers directory service <ref> [3] </ref>. This is an attribute-based system, designed with flexibility in mind. Each entry consists of a set of attributes, and queries are arbitrary lists of attribute/value pairs which are evaluated under one of several matching rules. <p> For instance, in a versioned information system, a description that does not explicitly specify a version may be defined to match the most recent version of the association that matches the description. Matching preference The Univers attribute-based naming system of Bowman, Peterson, and Yeats <ref> [3] </ref> includes in its definition a meta-property which the authors call preference class. The Univers system is oriented toward inexact matching, where most descriptions are expected to match more than one association.
Reference: [4] <author> P. G. Neumann R. C. Daley. </author> <title> A General-Purpose File System for Secondary Storage. </title> <booktitle> In AFIPS Fall Joint Computer Conference, </booktitle> <pages> pp. 213-229, 27, </pages> <year> 1965 </year>
Reference-contexts: The designers of MULTICS felt that the flat, unstructured name spaces provided by contemporary storage systems were not going to be sufficient for the wide variety of documents that the multiple users of their system were expected to store <ref> [4] </ref>. One of the goals of the MULTICS system was to encourage collaboration among users. The flexible linkage architecture and the fine-grained access control allowed users to share code and data and to build on each others work. <p> A name looked up relative to this context is evaluated in each of the target directories in sequence, until a match is found. This feature first appeared in MULTICS <ref> [4] </ref>, and is used in a very limited way in Unix. A single viewpath is maintained by the Unix shell for the purpose of resolving command names. The Translucent File Service [6] is a recent attempt to expand the use of viewpathing in Unix.
Reference: [5] <author> D. Gifford, P. Jouvelot, M. Sheldon, et. al.. </author> <title> Semantic File Systems. </title> <booktitle> In 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 16-25, </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991 </year>
Reference-contexts: However, Moguls implementation has the limitation that the descriptive information is split between the space of hierarchical path names and the space of property lists. The routines that open files for reading and writing require different syntax for specifying elements from the two domains. The Semantic File System <ref> [5] </ref> goes further by integrating both hierarchical and nonhierarchical information into a single descriptive space. As with the Property List system, nonhierarchical descriptive information is stored by means of typed attributes. The scope of each attribute is a single hierarchical 3 - Background (19) directory.
Reference: [6] <author> D. Hendricks. </author> <title> A Filesystem For Software Development. </title> <booktitle> In USENIX Summer '90, </booktitle> <pages> pp. 333-40, </pages> <address> Anaheim, CA, </address> <month> June, </month> <year> 1990 </year>
Reference-contexts: This feature first appeared in MULTICS [4], and is used in a very limited way in Unix. A single viewpath is maintained by the Unix shell for the purpose of resolving command names. The Translucent File Service <ref> [6] </ref> is a recent attempt to expand the use of viewpathing in Unix. This product is included with the Network Software Environment from Sun Microsystems, and consists of an extension to the Unix file system that allows the creation of viewpaths bound to any path name.
Reference: [7] <author> P. Honeyman. </author> <title> Synopsis of distributed file system protocols. </title> <type> Technical report CITI TR 90-4, </type> <institution> University of Michigan Technical Report, </institution> <month> October </month> <year> 1990 </year>
Reference-contexts: Modern file systems make full use of all of these properties, especially those which are designed for large-scale distributed systems (such as AFS and NFS) <ref> [7] </ref>. 2.5.2 Properties of flat attribute spaces The other common descriptive structure, the flat attribute space, is in many ways complementary to the hierarchical structure. Many of the strengths of one correspond to a weakness of the other.
Reference: [8] <author> S. R. Kleiman. Vnodes: </author> <title> an architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proc. 1986 Usenix Winter Technical Conference </booktitle>
Reference-contexts: These operations are socalled because they operate on data structures known as vnodes. Each vnode represents a file, directory, or symbolic link. This interface was designed by Sun Microsystems <ref> [8] </ref>, and has made its way into almost every Unix-derived operating system. This is fortunate for me, because it will enable my work to be extremely portable.
Reference: [9] <author> D.G. Korn and E. Krell. </author> <title> A new dimension for the Unix file system. </title> <journal> Software Practice and Experience, </journal> <volume> 20(S1):19-34, </volume> <month> June </month> <year> 1990 </year>
Reference-contexts: A file name without a version suffix matches the most recent (largest-numbered) version of the corresponding file. A different scheme is used in the 3-D file system from Bell Labs <ref> [9] </ref>. Under this scheme, versioned files take on the aspect of directories, containing one entry for each version. Version tags are not restricted to integers, but can be any string. In fact, a hierarchical set of tags can be defined for each file. <p> Thus, the programmer can build a modified system using the same set of bindings as the original. As modifications are approved, the files in question can be copied back into the common directory. The 3-D file system <ref> [9] </ref>, a research prototype from Bell Labs, uses a very similar scheme to accomplish the same purpose.
Reference: [10] <author> J. C. Mogul. </author> <title> Representing information about files. </title> <type> Technical report STAN-CS-86-1103, </type> <institution> Stanford University, </institution> <month> March </month> <year> 1986 </year>
Reference-contexts: As modifications are approved, the files in question can be copied back into the common directory. The 3-D file system [9], a research prototype from Bell Labs, uses a very similar scheme to accomplish the same purpose. Nonhierarchical descriptive elements In his 1986 thesis, Mogul <ref> [10] </ref> proposed an extension of the standard Unix file system whereby each directory would be associated with a list of properties (typed attributes) that could be assigned to files within it.
Reference: [11] <author> Gerald W. Neufeld. </author> <title> Descriptive Names in X.500. </title> <booktitle> In SIGCOMM '89 Symposium, Communications Arch. and Protocols, </booktitle> <pages> pp. 64-71, </pages> <address> Austin, TX, </address> <month> September </month> <year> 1989 </year>
Reference-contexts: The CCITT x.500 standard, which is coming into the mainstream, prescribes a structure which is basically hierarchical but with the flexibility to add extra information as attributes at each node of the hierarchy. Researchers such as G. Neufeld <ref> [11] </ref> have proposed enhancements to this structure to improve its flexibility and descriptive capacity by relaxing the hierarchical ordering constraints. Another tack is taken by Bowman et. al., with the Univers directory service [3]. This is an attribute-based system, designed with flexibility in mind.
Reference: [12] <author> Michael A. Olson. </author> <title> The Design and Implementation of the Inversion File System. </title> <booktitle> In Proc. 1993 USENIX Winter Technical Conference, </booktitle> <pages> pp. 1-14, </pages> <address> San Diego, CA, </address> <month> January, </month> <year> 1993 </year>
Reference-contexts: There is no flexibility for users to design descriptive structures that precisely mirror the underlying object properties they are trying to represent. The Inversion file system This novel system <ref> [12] </ref> is part of the POSTGRES database system. The name "Inversion" represents the fact that the usual order of things is inverted. The file system is built on top of a database, rather than the other way around.
Reference: [13] <author> Walter F. Tichy. </author> <title> RCS-a system for version control. </title> <journal> Software - Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <year> 1985 </year>
Reference-contexts: Version tags are not restricted to integers, but can be any string. In fact, a hierarchical set of tags can be defined for each file. This allows 3 - Background (18) the file system to offer the same version structure as the widely used RCS system <ref> [13] </ref>. A separate mapping table maintained by the file system specifies the default version tag to be used when none is specified. Viewpathing The term "viewpathing" refers to a feature that allows a sequence of directories to appear as a single naming context.
Reference: [14] <author> F. J. Corbato V. A. Vyssotsky. </author> <title> Structure of the Multics Supervisor. </title> <booktitle> In AFIPS Fall Joint Computer Conference, </booktitle> <pages> pp. 203-12, </pages> <note> 27, 1965 References (66) </note>
Reference-contexts: Many of the features that are considered commonplace in modern operating systems were first introduced on the MULTICS timesharing system that came out of MIT in the late 1960s <ref> [14] </ref>. The most pervasive of these innovations, and surely one of the most influencial, is the hierarchical file system.
References-found: 15

