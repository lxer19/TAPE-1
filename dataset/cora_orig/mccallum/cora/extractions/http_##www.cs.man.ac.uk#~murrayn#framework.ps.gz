URL: http://www.cs.man.ac.uk/~murrayn/framework.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~murrayn/index.html
Root-URL: http://www.cs.man.ac.uk
Email: norm&gt;@cs.man.ac.uk  
Title: A Framework for Describing Visual Interfaces to Databases  
Author: Norman Murray, Carole Goble and Norman W. Paton email:&lt;murrayn, carole, 
Address: Oxford Road Manchester M13 9PL, U.K.  
Affiliation: Department of Computer Science University of Manchester  
Abstract: In the field of HCI there exist many formalisms for analysing, describing and evaluating interactive systems. However, in developing and evaluating user interfaces to databases, we found it necessary to be able to describe presentation and interaction aspects that are catered for poorly or not at all in current formalisms. This paper presents a framework for the systematic description of data model, presentation and interaction components that together form a graphical user interface. The utility of the framework is then demonstrated by showing how it can be used to describe two existing visual query interfaces. These examples show that the framework provides a systematic method for the concise description of graphical interfaces to databases that can be used either during interface design or as a communication aid. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory D. Abowd and Russell Beale. </author> <title> Users, Systems and Interfaces: A Unifying Framework for Interaction. </title> <booktitle> In People and Computers VI, Proceedings of the HCI '91 Conference, </booktitle> <pages> pages 73-87, </pages> <year> 1991. </year>
Reference-contexts: The general interaction framework defined by Abowd in <ref> [1] </ref> consists of the system, the user and the inputs and outputs of the system. Task Formulation User Perception Action Human Output Devices Input Devices Interaction Presentation Interface System Output Input Processing System deciding on a plan of action, and executing the task at the interface via the input devices.
Reference: [2] <author> J. Annett and K. Duncan. </author> <title> Task Analysis and Training Design. </title> <journal> Occupational Psychology, </journal> <volume> 41 </volume> <pages> 211-221, </pages> <year> 1967. </year>
Reference-contexts: The performing of a task usually involves a sequence of interaction cycles or subtasks, with each cycle contributing towards the completion of the task and so satisfying the user's goal [12]. With Hierarchical Task Analysis (HTA) <ref> [2, 26] </ref>, tasks can be broken down into subtasks. The subtasks that have arisen from the decomposition of the complex task may then be further broken down into subtasks. For example, in QBE, the user could start with the main task of completing a query on one table.
Reference: [3] <author> Phillip J. Barnard. </author> <title> Cognitive resources and the learning of human-computer dialogs. </title> <editor> In John M. Carroll, editor, </editor> <booktitle> Interfacing Thought: Cognitive Aspects of Human-Computer Interaction, chapter 6, </booktitle> <pages> pages 112-158. </pages> <publisher> MIT Press, </publisher> <address> London, England, </address> <year> 1987. </year>
Reference-contexts: Complexity Theory (CCT) [31], and Task Action Grammar (TAG) [29], all follow on from TAL in that they attempt to perform predictive or competence analysis of interface design specifications by using more psychologically valid models than TAL, but these models tend to be piecemeal, using only partial cognitive psychology theories <ref> [3] </ref>. Each represents the user's tasks and actions but has no need to describe the feedback and presentation of the design as they are attempting to perform predictive analysis of the designs. Descriptive formalisms have also emerged from the area of Cognitive Science.
Reference: [4] <author> Borland. </author> <title> Borland Paradox for Windows User's Guide. </title> <publisher> Borland International Inc., </publisher> <year> 1994. </year>
Reference-contexts: We shall use the framework to describe the QBE interface as implemented in Paradox for Windows <ref> [4] </ref>, with the interface residing in a WIMP environment, as shown in figure 10.
Reference: [5] <author> J. Boyle, S. Leishman, and P. M. D. Gray. </author> <title> From WIMP to 3D: the development of AMAZE. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 7 </volume> <pages> 291-319, </pages> <year> 1996. </year>
Reference-contexts: Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE <ref> [5] </ref>). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another. To represent this we have chosen a simple, extensible set of functions, with each style of visual presentation having its own functions to describe its characteristics.
Reference: [6] <author> Philippe Brun and Michel Beaudouin-Lafon. </author> <title> A Taxonomy and Evaluation of Formalisms for the Specification of Interactive Systems. </title> <booktitle> In People and computers X : Proceedings of HCI '95, </booktitle> <pages> pages 197-212. </pages> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: We shall now compare this framework with some other notations that are available. 19 7 Related Work There exist many formalisms in HCI that attempt to predict, analyse and describe properties of interactive systems. A recent taxonomy of this area <ref> [6] </ref> has identified evaluation criteria for these present formalisms. Three of the twelve evaluation criteria most pertinent to this framework examine how well the formalisms represent: 1. the user's tasks and actions; 2. the interface state and system feedback; 3. the presentation of the interface.
Reference: [7] <author> Michael Caplinger. </author> <title> Graphical Database Browsing. </title> <booktitle> In Proc. 3rd ACM SIGOIS, </booktitle> <pages> pages 113-121, </pages> <year> 1986. </year>
Reference-contexts: Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing <ref> [7] </ref>, AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another. To represent this we have chosen a simple, extensible set of functions, with each style of visual presentation having its own functions to describe its characteristics.
Reference: [8] <author> S. K. Card, T. P. Moran, and A. Newell. </author> <title> The Psychology of Human-Computer Interaction. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale NJ, </address> <year> 1983. </year>
Reference-contexts: TAL is therefore an attempt to perform predictive analyses on different interface designs. It does address the issue of describing the user's interaction with the system but does not cater for our need to specify feedback and presentation. Goals, Operators, Methods and Selection Rules (GOMS) <ref> [8] </ref>, Cognitive Complexity Theory (CCT) [31], and Task Action Grammar (TAG) [29], all follow on from TAL in that they attempt to perform predictive or competence analysis of interface design specifications by using more psychologically valid models than TAL, but these models tend to be piecemeal, using only partial cognitive psychology
Reference: [9] <author> T. Catarci, S. K Chang, and G. Santucci. </author> <title> Query Representation and Management in a Multi-paradigmatic Visual Query Environment. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 3(3) </volume> <pages> 299-330, </pages> <year> 1994. </year>
Reference-contexts: Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. <ref> [14, 9] </ref>), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another.
Reference: [10] <author> R. L. Cooper, </author> <title> editor. </title> <booktitle> Proc. 1st Int. Workshop on Interfaces to Database Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Research in user interfaces for databases is gaining momentum with many recent conferences and workshops <ref> [10, 21, 22, 23, 36] </ref>. However, many papers on database interfaces give ad-hoc and imprecise descriptions of presentation and interaction aspects of interfaces, with many details being unclear or left to the imagination of the reader.
Reference: [11] <author> C. J. Date. </author> <title> A Guide to the SQL Standard. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: The output devices attached to a system convert the data's internal representation into a form perceptible by the user. Database interfaces have historically moved from being textual (e.g. SQL <ref> [11] </ref>) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]).
Reference: [12] <author> D. Diaper. </author> <title> Task Observation for human-computer interaction. </title> <editor> In D. Diaper, editor, </editor> <title> Task Analysis for Human-Computer Interaction. </title> <address> Chichester, </address> <publisher> Ellis Horwood, </publisher> <year> 1989. </year>
Reference-contexts: The performing of a task usually involves a sequence of interaction cycles or subtasks, with each cycle contributing towards the completion of the task and so satisfying the user's goal <ref> [12] </ref>. With Hierarchical Task Analysis (HTA) [2, 26], tasks can be broken down into subtasks. The subtasks that have arisen from the decomposition of the complex task may then be further broken down into subtasks.
Reference: [13] <author> Alan Dix, Janet Finlay, Gregory Abowd, and Russell Beale. </author> <title> Human-Computer Interaction. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: As the user interacts with the input device, this interaction is transformed into input that the system can process. Interaction devices take the form of keyboards, mice, track-balls, touch screens, 3D trackers, etc. <ref> [13, 33] </ref>. by interacting with the input devices to achieve a specific goal. The performing of a task usually involves a sequence of interaction cycles or subtasks, with each cycle contributing towards the completion of the task and so satisfying the user's goal [12].
Reference: [14] <author> D. K. Doan, N. W. Paton, A. C. Kilgour, and G. Al-Qaimari. </author> <title> A Multi-Paradigm Query Interface To An Object-Oriented Database. </title> <journal> Interacting With Computers, </journal> <volume> 7(1) </volume> <pages> 25-47, </pages> <year> 1995. </year>
Reference-contexts: Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. <ref> [14, 9] </ref>), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another.
Reference: [15] <author> D. C. Engelbart and W. K. </author> <title> English. A Research Center for Augmenting Human Intellect. </title> <booktitle> In AFIPS Conference Proceedings, 1968 Spring Joint Conference, </booktitle> <address> Washington, DC. </address> <publisher> Thompson Books, </publisher> <year> 1968. </year>
Reference-contexts: TAL extensive none none GOMS extensive none none CCT extensive none none TAG extensive none none CLG extensive minimal none UAN extensive extensive minimal Databases Haber et al none none partial Murray et al extensive extensive extensive Table 15: Evaluation of existing formalisms Petri Nets [30], State Transition Charts (STCs), <ref> [25, 15] </ref> and Object State Transition Charts (OSTCs), [26], from Calculus Theory, can be described as constructional (relating to how the interface is implemented) rather than behavioural (relating to how users accomplish their tasks).
Reference: [16] <author> Jonathon Grudin. </author> <title> The Case Against User Interface Consistency. </title> <journal> Communications of the ACM, </journal> <volume> 32(10) </volume> <pages> 1164-1173, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Using grammars from different designs, comparisons can be made on the basis of the grammar's simplicity and consistency on the assumption that the cognitive factors of learning and remembering are related to these factors <ref> [16, 35] </ref>. TAL is therefore an attempt to perform predictive analyses on different interface designs. It does address the issue of describing the user's interaction with the system but does not cater for our need to specify feedback and presentation.
Reference: [17] <author> Eben M. Haber, Yannis E. Ioannidis, and Miron Livny. </author> <title> Foundations of Visual Metaphors for Schema Display. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 3(3) </volume> <pages> 263-298, </pages> <year> 1994. </year> <month> 22 </month>
Reference-contexts: UAN does support the user's interaction and interface state and feedback, but this is done textually, so support for interface presentation is minimal. From the area of databases, Haber et al <ref> [17] </ref> defines a visual metaphor as being a mapping between the data model and a visual model. In this respect it is very similar to Definition 4 of the framework but goes into more depth regarding the use of metaphors and their quality.
Reference: [18] <author> H. Rex Hartson, Antonio C. Siochi, and Deborah Hix. </author> <title> The UAN: A User-Oriented Representation for Direct Manipulation Interface Designs. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 181-203, </pages> <year> 1990. </year>
Reference-contexts: It does give 20 a representation for describing the user's interaction but does not support descriptions of the interface presentation and feedback as the physical component of CLG has not been defined. User Action Notation's (UAN) <ref> [38, 18] </ref> main role is as a descriptive tool. UAN tasks are described in a table showing the user actions, the interface feedback and state. Table 16, from [18] describes the task of selecting a file icon with a mouse in a desktop environment. <p> User Action Notation's (UAN) [38, 18] main role is as a descriptive tool. UAN tasks are described in a table showing the user actions, the interface feedback and state. Table 16, from <ref> [18] </ref> describes the task of selecting a file icon with a mouse in a desktop environment.
Reference: [19] <author> David Haw, Carole Goble, and Alan Rector. </author> <title> GUIDANCE: Making it Easy for the User to be an Expert. </title> <booktitle> In Proc. 2nd Int. Workshop On Interfaces to Database Systems, </booktitle> <pages> pages 19-43. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> P. Sawyer (Ed). </note>
Reference-contexts: The output devices attached to a system convert the data's internal representation into a form perceptible by the user. Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE <ref> [19] </ref>, Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another.
Reference: [20] <author> M. A. Jackson. </author> <title> System Development. </title> <publisher> London: Prentice Hall, </publisher> <year> 1983. </year>
Reference-contexts: Each of these tasks could be further decomposed into subtasks. If we take the task of placing constraints on attributes of the table, this would involve selection of the query space for that attribute and entry of the query. plans [37], and Jackson structured design (JSD) <ref> [20] </ref>. Figure 2 uses JSD to specify the order that the 4 Execute query on table * Perform query query Perform simple Select table constraints Add attribute o Select output attributes o Select query area query Edit tasks are completed.
Reference: [21] <author> J. B. Kennedy and P. J. Barclay, </author> <title> editors. </title> <booktitle> Proc. 3rd Int. Workshop On Interfaces to Database Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Research in user interfaces for databases is gaining momentum with many recent conferences and workshops <ref> [10, 21, 22, 23, 36] </ref>. However, many papers on database interfaces give ad-hoc and imprecise descriptions of presentation and interaction aspects of interfaces, with many details being unclear or left to the imagination of the reader.
Reference: [22] <author> E Knuth and L. M. Wegner, </author> <title> editors. Visual Database Systems II. </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Research in user interfaces for databases is gaining momentum with many recent conferences and workshops <ref> [10, 21, 22, 23, 36] </ref>. However, many papers on database interfaces give ad-hoc and imprecise descriptions of presentation and interaction aspects of interfaces, with many details being unclear or left to the imagination of the reader.
Reference: [23] <editor> T. L. Kunii, editor. </editor> <title> Visual Database Systems. </title> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Research in user interfaces for databases is gaining momentum with many recent conferences and workshops <ref> [10, 21, 22, 23, 36] </ref>. However, many papers on database interfaces give ad-hoc and imprecise descriptions of presentation and interaction aspects of interfaces, with many details being unclear or left to the imagination of the reader.
Reference: [24] <author> Thomas P. Moran. </author> <title> The Command Language Grammar: A Representation for the User Interface oa Interactive Computer Systems. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 15 </volume> <pages> 3-50, </pages> <year> 1981. </year>
Reference-contexts: Each represents the user's tasks and actions but has no need to describe the feedback and presentation of the design as they are attempting to perform predictive analysis of the designs. Descriptive formalisms have also emerged from the area of Cognitive Science. Command Language Grammar (CLG) <ref> [24] </ref>, can be considered a descriptive formalism as it does not include any characteristics of the user or any metrics or criteria for performing predictive analysis on the design. CLG is a linguistic dialogue model, so it can only be used to describe command language interfaces.
Reference: [25] <author> W. M. Newman. </author> <title> A System for Interactive Graphical Programming. </title> <booktitle> In AFIPS Conference Proceedings, 1968 Spring Joint Conference, </booktitle> <address> Washington, DC. </address> <publisher> Thompson Books, </publisher> <year> 1968. </year>
Reference-contexts: TAL extensive none none GOMS extensive none none CCT extensive none none TAG extensive none none CLG extensive minimal none UAN extensive extensive minimal Databases Haber et al none none partial Murray et al extensive extensive extensive Table 15: Evaluation of existing formalisms Petri Nets [30], State Transition Charts (STCs), <ref> [25, 15] </ref> and Object State Transition Charts (OSTCs), [26], from Calculus Theory, can be described as constructional (relating to how the interface is implemented) rather than behavioural (relating to how users accomplish their tasks).
Reference: [26] <author> William M. Newman and Michael G. Lamming. </author> <title> Interactive System Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The performing of a task usually involves a sequence of interaction cycles or subtasks, with each cycle contributing towards the completion of the task and so satisfying the user's goal [12]. With Hierarchical Task Analysis (HTA) <ref> [2, 26] </ref>, tasks can be broken down into subtasks. The subtasks that have arisen from the decomposition of the complex task may then be further broken down into subtasks. For example, in QBE, the user could start with the main task of completing a query on one table. <p> CCT extensive none none TAG extensive none none CLG extensive minimal none UAN extensive extensive minimal Databases Haber et al none none partial Murray et al extensive extensive extensive Table 15: Evaluation of existing formalisms Petri Nets [30], State Transition Charts (STCs), [25, 15] and Object State Transition Charts (OSTCs), <ref> [26] </ref>, from Calculus Theory, can be described as constructional (relating to how the interface is implemented) rather than behavioural (relating to how users accomplish their tasks).
Reference: [27] <author> A. Papantonakis and P. J. H. King. </author> <title> Syntax and Semantics of Gql, a Graphical Query Language. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 6 </volume> <pages> 3-25, </pages> <year> 1995. </year>
Reference-contexts: Sections 3 to 5 describe the components that form the framework and include the definition of the framework. Section 6 shows examples of using the framework, in particular the graph-based query language Gql <ref> [27] </ref> and the form based query interface QBE [40]. <p> The output devices attached to a system convert the data's internal representation into a form perceptible by the user. Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql <ref> [27] </ref>) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another. <p> Database activities other than querying are not examined here but these interfaces and tasks can be described in a similar vein, e.g. schema creation in a graphical interface can be similar to query building, etc. 6.1 Gql Database Interface Presentation The Gql interface <ref> [27, 28] </ref>, is a graph-based visual query language (see figure 3). This presentation consists of a graph representing the database schema, with entities represented as circles and their associated attributes represented by ovals, with the attribute name appearing inside the oval, and with functions represented by labelled directed arcs.
Reference: [28] <author> Anthony Papantonakis and Peter J. H. King. Gql, </author> <title> A Declarative Graphical Query Language based on the Functional Data Model. </title> <editor> In S. Levialdi T. Catarci, M. Costabile and G. Santucci, editors, </editor> <booktitle> Proceedings Advanced Visual Interfaces, </booktitle> <pages> pages 113-122, </pages> <year> 1994. </year>
Reference-contexts: Database activities other than querying are not examined here but these interfaces and tasks can be described in a similar vein, e.g. schema creation in a graphical interface can be similar to query building, etc. 6.1 Gql Database Interface Presentation The Gql interface <ref> [27, 28] </ref>, is a graph-based visual query language (see figure 3). This presentation consists of a graph representing the database schema, with entities represented as circles and their associated attributes represented by ovals, with the attribute name appearing inside the oval, and with functions represented by labelled directed arcs.
Reference: [29] <author> S. J. Payne and T. R. G. Green. </author> <title> Task-Action Grammars: A Model of the Mental Representation of Task Languages. </title> <booktitle> Human Computer Interaction, </booktitle> <volume> 2 </volume> <pages> 93-133, </pages> <year> 1986. </year>
Reference-contexts: It does address the issue of describing the user's interaction with the system but does not cater for our need to specify feedback and presentation. Goals, Operators, Methods and Selection Rules (GOMS) [8], Cognitive Complexity Theory (CCT) [31], and Task Action Grammar (TAG) <ref> [29] </ref>, all follow on from TAL in that they attempt to perform predictive or competence analysis of interface design specifications by using more psychologically valid models than TAL, but these models tend to be piecemeal, using only partial cognitive psychology theories [3].
Reference: [30] <author> J. Peterson. </author> <title> Petri Nets. </title> <journal> ACM Computing Surveys, </journal> <volume> 9(3) </volume> <pages> 223-252, </pages> <year> 1977. </year>
Reference-contexts: none partial partial Cognitive Science TAL extensive none none GOMS extensive none none CCT extensive none none TAG extensive none none CLG extensive minimal none UAN extensive extensive minimal Databases Haber et al none none partial Murray et al extensive extensive extensive Table 15: Evaluation of existing formalisms Petri Nets <ref> [30] </ref>, State Transition Charts (STCs), [25, 15] and Object State Transition Charts (OSTCs), [26], from Calculus Theory, can be described as constructional (relating to how the interface is implemented) rather than behavioural (relating to how users accomplish their tasks).
Reference: [31] <author> Peter G. Polson. </author> <title> A quantitative theory of human-computer interaction. </title> <editor> In John M. Carroll, editor, </editor> <booktitle> Interfacing Thought: Cognitive Aspects of Human-Computer Interaction, chapter 8, </booktitle> <pages> pages 184-235. </pages> <publisher> MIT Press, </publisher> <address> London, England, </address> <year> 1987. </year>
Reference-contexts: It does address the issue of describing the user's interaction with the system but does not cater for our need to specify feedback and presentation. Goals, Operators, Methods and Selection Rules (GOMS) [8], Cognitive Complexity Theory (CCT) <ref> [31] </ref>, and Task Action Grammar (TAG) [29], all follow on from TAL in that they attempt to perform predictive or competence analysis of interface design specifications by using more psychologically valid models than TAL, but these models tend to be piecemeal, using only partial cognitive psychology theories [3].
Reference: [32] <author> Alexandra Poulovassilis and Peter King. </author> <title> Extending the Functional Data Model to Computational Completeness. </title> <booktitle> In Advances in Database Technology - EDBT'90 International Conference on Extending Database Technology, </booktitle> <pages> pages 75-91, </pages> <year> 1990. </year>
Reference-contexts: We shall then look at a subset of the tasks and describe interaction in Gql. Order Supplier Name Name Part &gt; 800 oq of from Quantity Definition 1 covered the database environment which consists of: * Data Model (DM) - Gql utilises the functional data model, FDL <ref> [32] </ref>. The functional data model represents the data by entities and relations between them. There are two kinds of entities, those which relate to real world concepts (e.g. student, course, etc) and lexical entities (e.g. the string "Orange", the number 3.13, etc).
Reference: [33] <author> Jenny Preece, Yvonne Rogers, Helen Sharp, David Benyon, Simon Holland, and Tom Carey. </author> <title> Human-Computer Interaction. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: As the user interacts with the input device, this interaction is transformed into input that the system can process. Interaction devices take the form of keyboards, mice, track-balls, touch screens, 3D trackers, etc. <ref> [13, 33] </ref>. by interacting with the input devices to achieve a specific goal. The performing of a task usually involves a sequence of interaction cycles or subtasks, with each cycle contributing towards the completion of the task and so satisfying the user's goal [12].
Reference: [34] <author> Phyllis Reisner. </author> <title> Formal Grammar and Human Factors Design of an Interactive Graphics System. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(2) </volume> <pages> 229-240, </pages> <year> 1981. </year>
Reference-contexts: Furthermore, these formalisms do not support the state, feedback and presentation of the interface as can be seen in Table 15. From Cognitive Science we begin with Task Action Language (TAL) <ref> [34] </ref>. TAL uses a formal grammar for describing the user's interaction with a system to support evaluation of its design. The grammar is used to describe the user's interaction (e.g. mouse movements, typing, etc. ), forming an action language for the interactive system.
Reference: [35] <author> Phyllis Reisner. </author> <title> What is Inconsistency. </title> <booktitle> In INTERACT'90: Proceedings IFIP 3rd International Conference on Human-Computer Interaction, </booktitle> <pages> pages 175-181, </pages> <year> 1990. </year>
Reference-contexts: Using grammars from different designs, comparisons can be made on the basis of the grammar's simplicity and consistency on the assumption that the cognitive factors of learning and remembering are related to these factors <ref> [16, 35] </ref>. TAL is therefore an attempt to perform predictive analyses on different interface designs. It does address the issue of describing the user's interaction with the system but does not cater for our need to specify feedback and presentation.
Reference: [36] <editor> P. Sawyer, editor. </editor> <booktitle> Proc. 2nd Int. Workshop on Interfaces to Database Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Research in user interfaces for databases is gaining momentum with many recent conferences and workshops <ref> [10, 21, 22, 23, 36] </ref>. However, many papers on database interfaces give ad-hoc and imprecise descriptions of presentation and interaction aspects of interfaces, with many details being unclear or left to the imagination of the reader.
Reference: [37] <author> A. Shepherd. </author> <title> Analysis and training in information tasks. </title> <editor> In Dan Diaper, editor, </editor> <title> Task Analysis for Human-Computer Interaction. </title> <publisher> Ellis Horwood, </publisher> <address> Chichester, </address> <year> 1989. </year>
Reference-contexts: Each of these tasks could be further decomposed into subtasks. If we take the task of placing constraints on attributes of the table, this would involve selection of the query space for that attribute and entry of the query. plans <ref> [37] </ref>, and Jackson structured design (JSD) [20]. Figure 2 uses JSD to specify the order that the 4 Execute query on table * Perform query query Perform simple Select table constraints Add attribute o Select output attributes o Select query area query Edit tasks are completed. <p> JSD will be used throughout the paper as it can adequately model the task hierarchies that will be presented. More complex dialogues can be represented by using plans as described by Shepherd <ref> [37] </ref>. From the analysis of Figure 2 we see that to perform a goal consists of some sequence of tasks.
Reference: [38] <author> Antonio C. Siochi and H. Rex Hartson. </author> <title> Task-Oriented Representation of Asynchronous User Interfaces. </title> <booktitle> In Proceedings CHI '89 Human Factors in Computing Systems, </booktitle> <pages> pages 183-188, </pages> <year> 1989. </year>
Reference-contexts: It does give 20 a representation for describing the user's interaction but does not support descriptions of the interface presentation and feedback as the physical component of CLG has not been defined. User Action Notation's (UAN) <ref> [38, 18] </ref> main role is as a descriptive tool. UAN tasks are described in a table showing the user actions, the interface feedback and state. Table 16, from [18] describes the task of selecting a file icon with a mouse in a desktop environment.
Reference: [39] <author> K. Tsuda, M. Hirakawa, M. Tanaka, and T. Ichikawa. </author> <title> Iconic Browser: An Iconic Retrieval System for Object-Oriented Databases. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(1) </volume> <pages> 59-76, </pages> <year> 1990. </year> <month> 23 </month>
Reference-contexts: The output devices attached to a system convert the data's internal representation into a form perceptible by the user. Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE [40]), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER <ref> [39] </ref>), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). The spatial layout of the visualisation defines how the items that form the interface are arranged in relation to one another.
Reference: [40] <author> M. Zloof. Query-By-Example: </author> <title> A Data Base Language. </title> <journal> IBM Systems Journal, </journal> <volume> Vol. 4, </volume> <pages> pages 324-343, </pages> <month> December </month> <year> 1977. </year> <month> 24 </month>
Reference-contexts: Sections 3 to 5 describe the components that form the framework and include the definition of the framework. Section 6 shows examples of using the framework, in particular the graph-based query language Gql [27] and the form based query interface QBE <ref> [40] </ref>. Section 7 details related 1 work on formalisms for describing interactive systems, and conclusions are presented in Section 8. 2 The Interaction Cycle To build a framework we must first define the components that form the interactive system and select those components that the framework needs to model. <p> The output devices attached to a system convert the data's internal representation into a form perceptible by the user. Database interfaces have historically moved from being textual (e.g. SQL [11]) to form-based (e.g. QBE <ref> [40] </ref>), diagrammatic (e.g. GUIDANCE [19], Gql [27]) and iconic (e.g. ICONICBROWSER [39]), from single to multi paradigm (e.g. [14, 9]), and from two to three dimensional (e.g Graphical Database Browsing [7], AMAZE [5]). <p> Name Attribute Name Relation Name Relation Name Relation Name Relation Name Relation Name Relation Name &gt; 10 ="Manc" x + ] Table 8 Select result attributes operation x Select attributes Query Schema 6.2 QBE Database Interface Presentation Query By Example, QBE, is a forms based presentation for accessing relational databases <ref> [40] </ref>. We shall use the framework to describe the QBE interface as implemented in Paradox for Windows [4], with the interface residing in a WIMP environment, as shown in figure 10.
References-found: 40

