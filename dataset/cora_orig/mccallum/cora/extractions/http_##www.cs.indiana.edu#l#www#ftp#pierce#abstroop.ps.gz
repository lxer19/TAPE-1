URL: http://www.cs.indiana.edu/l/www/ftp/pierce/abstroop.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: A Unifying Type-Theoretic Framework for Objects  
Author: Martin Hofmann Benjamin Pierce 
Address: The King's Buildings, Edinburgh, EH9 3JZ, U.K.  
Affiliation: Department of Computer Science, University of Edinburgh,  
Date: 1 (1): 1-000, January 1993  
Note: J. Functional Programming  c 1993 Cambridge University Press 1  
Abstract: We give a direct type-theoretic characterization of the basic mechanisms of object-oriented programming, including objects, methods, message passing, and subtyping, by introducing an explicit constructor for object types and suitable introduction, elimination, and equality rules. The resulting abstract framework provides a basis for justifying and comparing previous encodings of objects based on recursive record types (Cardelli, 1984; Cardelli, 1992; Bruce, 1994; Cook et al., 1990; Mitchell, 1990a) and encodings based on existential types (Pierce & Turner, 1994).
Abstract-found: 1
Intro-found: 1
Reference: <author> Abadi, M. </author> <year> 1992 </year> <month> (Feb.). </month> <title> Doing without F-bounded quantification. Message to Types electronic mail list. </title>
Reference: <author> Abadi, M. </author> <year> 1994. </year> <title> Baby Modula-3 and a Theory of Objects. </title> <journal> Journal of Functional Programming, </journal> <note> 4(2). An earlier version appeared as DEC Systems Research Center Research Report 95, </note> <month> (February, </month> <year> 1993). </year>
Reference: <author> Abadi, M., & Cardelli, L. </author> <year> 1994b. </year> <title> A Theory of Primitive Objects: Second-order Systems. </title> <booktitle> In: European Symposium on Programming (ESOP), </booktitle> <address> Edinburgh, Scotland. </address>
Reference: <author> Abadi, M., & Cardelli, L. </author> <year> 1994a. </year> <title> A Theory of Primitive Objects: Untyped and First-order Systems. </title> <booktitle> In: Theoretical Aspects of Computer Software (TACS), Sendai, </booktitle> <address> Japan. </address>
Reference: <author> Amadio, R. M., & Cardelli, L. </author> <year> 1993. </year> <title> Subtyping Recursive Types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4), </volume> <pages> 575-631. </pages> <note> A preliminary version appeared in POPL '91 (pp. 104-118), and as DEC Systems Research Center Research Report number 62, </note> <month> August </month> <year> 1990. </year>
Reference-contexts: We extend pure F ! with a recursive type constructor , which obeys the following subtyping laws <ref> (Amadio & Cardelli, 1993) </ref>: ` (A)T : Type ` (A)T ~ [((A)T )=A]T (S-Fold*) ; B Top (Type); A B ` S T ` (A)S (B)T This extension is summarized in Appendix E. (We give slightly more general ver sions of S-Fold and S-Mu there.) We also assume the existence of <p> S T ` (A)S (B)T This extension is summarized in Appendix E. (We give slightly more general ver sions of S-Fold and S-Mu there.) We also assume the existence of a fixed-point combinator fix : All (A Top (Type)) (A!A) ! A: This combinator can be defined using mixed-variance -types <ref> (Amadio & Cardelli, 1993) </ref>; however, we prefer to consider it as a primitive, since the equation Eq-Fix-Sub in Appendix E is not provable syntactically for the encoding. The definitions of positivity and map for the extended system appear in Appendix E. <p> For Eq-Map-Sub, we use Eq-Pack and Eq-Open. fl E Recursive Types The following extension of the basic F ! calculus with recursive types is somewhat tentative. The rules are suggested by existing treatments of recursive types in lower 38 M. Hofmann and B. Pierce order calculi <ref> (Amadio & Cardelli, 1993) </ref>, but a full study of recursive types in this setting falls outside the scope of the present article. <p> as follows: T ::= : : : j (A:K)T least fixed point The inference rules are extended by the formation rule ; A Top (K) ` T : K (K-Mu) and two subtyping rules | one for "unfolding" a recursive type and one for (finitely) comparing two recursive types (c.f. <ref> (Amadio & Cardelli, 1993) </ref>): ` (A:K)T : K (S-Fold) ; B Top (K); A B ` S T (S-Mu) E.1 Remark: Note that we have the derived rule ; B Top (K); A B; D Top (K); C D ; B Top (K); A B ` (C)S (A; C) (D)S (B;
Reference: <author> Barendregt, H. </author> <year> 1992. </year> <title> Lambda Calculi with Types. </title> <editor> In: Abramsky, G., & Maibaum (eds), </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> vol. II. </volume> <publisher> Oxford University Press. </publisher>
Reference: <author> Barr, M., & Wells, C. </author> <year> 1990. </year> <title> Category Theory for Computing Science. </title> <publisher> Prentice Hall. </publisher>
Reference: <author> Bruce, K., & Mitchell, J. </author> <year> 1992 </year> <month> (Jan.). </month> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In: Proceedings of the Nineteenth ACM Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Bruce, K. B. </author> <year> 1994. </year> <title> A Paradigmatic Object-Oriented Programming Language: Design, Static Typing and Semantics. Journal of Functional Programming, 4(2). A preliminary version appeared in POPL 1993 under the title "Safe Type Checking in a Statically Typed Object-Oriented Programming Language". </title>
Reference: <author> Canning, P., Cook, W., Hill, W., Olthoff, W., & Mitchell, J. </author> <year> 1989 </year> <month> (Sept.). </month> <title> F-Bounded Quantification for Object-Oriented Programming. </title> <booktitle> Pages 273-280 of: Fourth International Conference on Functional Programming Languages and Computer Architecture. </booktitle>
Reference: <author> Cardelli, L. </author> <year> 1984. </year> <title> A semantics of multiple inheritance. Pages 51-67 of: </title> <editor> Kahn, G., Mac-Queen, D., & Plotkin, G. (eds), </editor> <booktitle> Semantics of Data Types. Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 173. </pages> <note> Springer-Verlag. Full version in Information and Computation 76 138-164, </note> <year> 1988. </year>
Reference: <author> Cardelli, L. </author> <year> 1988 </year> <month> (Jan.). </month> <title> Structural Subtyping and the Notion of Power Type. </title> <booktitle> Pages 70-79 of: Proceedings of the 15th ACM Symposium on Principles of Programming Languages. </booktitle>
Reference: <author> Cardelli, L. </author> <year> 1990 </year> <month> (Oct.). </month> <title> Notes about F ! &lt;: </title> . <type> Unpublished manuscript. </type>
Reference-contexts: Notice, in particular, that pos (N ) is always false when N is a variable. Similarly, an application N (S) can only be marked pos A or neg A if A does not occur free in N or S. As we remarked in Section 3, a stronger calculus (c.f. <ref> (Cardelli, 1990) </ref>) with positive and negative (monotone and antimonotone) operators seems cleaner 32 M. Hofmann and B. Pierce in this respect, since it allows positivity/negativity to be ascribed to more type expressions. However, the present formulation is sufficient for our purposes.
Reference: <author> Cardelli, L. </author> <year> 1992 </year> <month> (Jan.). </month> <title> Extensible Records in a Pure Calculus of Subtyping. </title> <note> Research report 81. DEC Systems Research Center. </note> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year>
Reference: <author> Cardelli, L., & Longo, G. </author> <year> 1991. </year> <title> A semantic basis for Quest. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(4), </volume> <pages> 417-458. </pages> <note> Preliminary version in ACM Conference on Lisp and Functional Programming, June 1990. Also available as DEC SRC Research Report 55, </note> <month> Feb. </month> <year> 1990. </year>
Reference: <author> Cardelli, L., & Wegner, P. </author> <year> 1985. </year> <title> On Understanding Types, Data Abstraction, </title> <journal> and Poly morphism. Computing Surveys, </journal> <volume> 17(4). </volume>
Reference-contexts: This suggests a change in the type of GM: ` N : Type!Type pos (N ) ` GM N : All (N 0 N ) Object (N 0 ) ! N (Object (N 0 )) (T-GM) (c.f. <ref> (Cardelli & Wegner, 1985) </ref>). Note, here, that N 0 N does not imply that N 0 is also positive.
Reference: <author> Cardelli, L., Martini, S., Mitchell, J. C., & Scedrov, A. </author> <year> 1994. </year> <title> An Extension of System F with Subtyping. </title> <booktitle> Information and Computation, </booktitle> <pages> 109(1-2), 4-56. </pages> <note> A preliminary version appeared in TACS '91 (Sendai, Japan, pp. 750-770). </note>
Reference-contexts: See Steffen and Pierce (1994) for a related discussion. The rule Eq-TApp is closely related to the semantic concept of parametricity (c.f. <ref> (Cardelli et al., 1994) </ref>).
Reference: <author> Castagna, G., Ghelli, G., & Longo, G. </author> <year> 1994. </year> <title> A calculus for overloaded functions with subtyping. </title> <journal> Information and Computation. </journal> <note> To appear; a preliminary version appeared </note>
References-found: 18

