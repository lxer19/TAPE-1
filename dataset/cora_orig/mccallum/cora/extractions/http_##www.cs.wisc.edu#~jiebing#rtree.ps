URL: http://www.cs.wisc.edu/~jiebing/rtree.ps
Refering-URL: http://www.cs.wisc.edu/~jiebing/jiebing.html
Root-URL: 
Email: fia  
Title: Using Constraints to Query R -Trees  
Author: Jonathan Goldstein Raghu Ramakrishnan Uri Shaft Jie-Bing Yu f(jgoldst, raghu, uri, jiebing) 
Note: Paper Number  
Date: February 22, 1996  5026  
Web: cs.wisc.edug  
Address: Madison, Wisconsin 53706  
Affiliation: Department of Computer Sciences University of Wisconsin, Madison  
Abstract: The R fl -Tree index is a popular multidimensional index used in several extensible and GIS-oriented database systems. In this paper, we show that a simple refinement of the search algorithm of the R fl -Tree|which is common to all variants of the R-Tree|offers significant speedups in most cases, with little or no worst-case performance penalty. The idea is essentially to use a conjunction of linear constraints (rather than a minimum bounding retangle) to approximate the query and to use this tighter bounding envelope to determine when the query overlaps with an R fl -Tree node. This raises an important question: How can we efficiently check whether the query envelope overlaps the minimum bounding box for a tree node? Linear Programming (LP) offers one solution, but it is susceptible to numeric approximation errors. One of the contributions of this paper is a new algorithm for performing this check check that is more efficient than LP and free from numeric errors. We also present several theoretical results characterizing this algorithm. From a practical standpoint, adding the proposed constraint query refinement to existing R fl -Tree implementations is straightforward. Using implementations of R fl -Trees on top of the SHORE storage manager, we present experimental results (using TIGER census data for California and Wisconsin, and the Sequoia 2000 benchmark data set) that provide strong evidence in support of the proposed refinement. Our results demonstrate that the CPU overhead of our more complex overlap test, vis-a-vis the traditional minimum bounding box intersection test, is minor. On the other hand, the (CPU and I/O) gains can be considerable, especially for queries that are asymmetrically oriented with respect to the R fl -Tree axes. The results are especially surprising given that we make no changes at all to the insertion and deletion algorithms. Finally, linear constraints are a very powerful tool for formulating queries, and a very important application of our results is that we can efficiently support a broad new class of such queries on multidimensional datasets drawn from a variety of domains that go well beyond GIS and spatial applications. We illustrate this, with experimental results, using queries over a five-dimensional projection of the widely used Compustat financial database (which contains over 300 dimensions!).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beckmann, N., Kriegel, H.P., Schneider, R., Seeger, B. </author> <title> "The R fl |Tree: An Efficient and Robust Access Method for Points and Rectangles". </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1990, </year> <pages> pp. 322-331. </pages>
Reference-contexts: Such applications include computer-aided design (CAD), 1 geographic information systems (GIS), On-Line Analytic Processing (OLAP), and image repositories. A key component of a database management system that aims to support such applications is a multidimensional access method. The R fl -Tree index <ref> [1] </ref> is a variant of the R-Tree [10], In this paper, we show that a simple refinement of the search algorithm of the R fl -Tree offers significant speedups in most cases, with little or no worst-case performance penalty. <p> If the number of dimensions is greater than two, MBBs with an appropriate number of dimensions are used, but the basic idea remains the same. The above description is sufficiently general that it applies to several variants of the R-Tree, including R + -Trees [25] and R fl -Trees <ref> [1] </ref>. (Note that MBBs in non-leaf nodes of an R + -Tree are non-overlapping, and therefore point queries search a single path from root to leaf. <p> Since the number of vertices of a polyhedron is exponential in the number of constraints (for arbitrary dimensionality), converting the input to fit those algorithms will be prohibitively expensive. Several variants of the R-Tree [10] have been proposed, including the R + -Tree [25] and the R fl -Tree <ref> [1] </ref>. Other closely related structures are the k-d-B Tree [24] and the Buddy-Tree [15, 16]; they all use boxes (MBBs) to bound the space represented by a tree node. <p> Popular access methods for point data include the Grid File [19]. The performance study in <ref> [1] </ref> suggests that the R fl -Tree is superior to the other variants of the R-Tree, and indeed even the Grid File for point data. Consequently, the R fl -Tree was implemented as the spatial access method for the Paradise GIS on top of the Shore data manager.
Reference: [2] <author> Carey, M., DeWitt, D., Franklin, M., Hall, N., McAuliffe, M., Naughton, J., Schuh, D., Solomon, M., Tan, C., Tsatalos,O., White, S., Zwilling, M. </author> <title> "Shoring up Persistent Objects". </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1994, </year> <pages> pp. 383-394. </pages>
Reference-contexts: We present the results of several experiments designed to evaluate our approach, using an implementation of R fl -Trees on top of the SHORE storage manager <ref> [2] </ref>. A wide range of query types and system parameters are explored, the results provide strong evidence in support of the proposed refinement.
Reference: [3] <author> Dantzig, </author> <title> G.B. "Linear Programming and Extensions". </title> <publisher> Princeton University Press, </publisher> <address> Princeton, N.J. </address> <year> 1963. </year>
Reference: [4] <author> DeWitt, D., Kabra, N., Luo, J., Patel, J., Yu, J. </author> <title> "Client-Server Paradise". </title> <booktitle> Proc. 20th Int. Conf. on VLDB, </booktitle> <year> 1994. </year> <month> pp.558-569. </month>
Reference-contexts: The reason we use a predetermined number of iterations as an additional stopping criterion is that the number of iterations is not bounded. The following input demonstrates the problem: P &gt; &gt; &lt; x 1 + x 2 " x 1 + x 2 " B <ref> [4; 4] </ref> fi [4; 4] For " &gt; 0 we have that P = ;, and the number of iterations is at least 1=". A similar example exists in 3 dimensions where we have 1=" iterations and P 6= ;. <p> The reason we use a predetermined number of iterations as an additional stopping criterion is that the number of iterations is not bounded. The following input demonstrates the problem: P &gt; &gt; &lt; x 1 + x 2 " x 1 + x 2 " B <ref> [4; 4] </ref> fi [4; 4] For " &gt; 0 we have that P = ;, and the number of iterations is at least 1=". A similar example exists in 3 dimensions where we have 1=" iterations and P 6= ;. <p> To address this shortcoming, we also chose a set of queries using the Paradise front-end to give us complete end-to-end performance numbers. 3 These are indeed 3 Paradise <ref> [4] </ref> is a prototype object-relational DBMS for GIS applications developed at University of Wisconsin, it is built on top of the SHORE storage manager. 15 queries that an end-user might ask, and we hand-picked the queries to ensure that a range of situations was covered.
Reference: [5] <author> Faloutsos, C., Roseman, S. </author> <title> "Fractals for Secondary Key Retrieval," </title> <booktitle> Proc. 8th ACM SIGACT-SIGMOD-SIGART Symposium on PODS, </booktitle> <year> 1989, </year> <pages> pp. 247-252. </pages>
Reference: [6] <author> Fang S. C., Puthenpura S. </author> <title> "Linear Optimization and Extensions: Theory and Algorithms". </title> <publisher> Prentice Hall 1993. </publisher>
Reference-contexts: The popular LP algorithms are "Simplex" and "Karmarkar's". For m constraints and n dimensions the complexity of Karmarkar's algorithm is O ((m + n) 4 ) while the Simplex algorithm has an exponential run-time although its complexity seems to be O (m 2 n) in practice (for example, see <ref> [6] </ref>). In addition to the high complexity, these algorithms are prone to numerical error, and modifying them to be `safe' would make them even more expensive. Results from Computational Geometry all deal with representations of polyhedra as sets of vertices [22]. <p> detection for the cell-tree do not seem feasible in more than three dimensions. (A 4-dimensional test of two polyhedra with 16 vertices in each takes about 10 7 terabytes of space and about 10 20 operations for preprocessing!) Even if we consider using algorithms such as Simplex or Karmarkar's algorithm <ref> [6] </ref> instead of the overlap checks proposed for the Cell tree, the CPU overhead is likely to be too high. The P-tree [12] has a structure close to the R-tree and uses high dimensional boxes as representations for lower dimensional polyhedra.
Reference: [7] <author> Goldstein J., Ramakrishnan R, Shaft U., Yu J. B. </author> <title> "Using Constraints to Query R fl -Trees". </title> <type> Technical Report No. 1301 , Comp. </type> <institution> Sci. Dept., Univ. of Wisconsin-Madison, </institution> <year> 1996. </year> <note> Full Manuscript. </note>
Reference-contexts: For n &gt; 3, there are cases when the algorithm yields a false positive. * For n &gt; 3 there are cases when the algorithm stops with a false positive even when the algorithm is not restricted to a predetermined number of iterations. 7 Proofs for these claims are in <ref> [7] </ref>. 4 Improving Search in R-Trees We now present our refinement to the R-Tree search algorithm. <p> This may be a characteristic of GIS data.) jects (LP) jects (Clipping) 6.5 Page Size In this experiment, we kept the (query area)/(MBB area) ratio at 0.5 and varied the selectivity and page size. Page size had no effect on relative performance. Details are in <ref> [7] </ref>. 7 Performance Study of LP with a GIS In this section, we describe a set of realistic tests in the context of a GIS system. We show that the conclusions drawn from the experiments using synthetic queries (Section 6) are borne out in a more realistic environment.
Reference: [8] <author> Gunther, O. </author> <title> "The Design of the Cell Tree: An Object-Oriented Index Structure for Geometric Databases". </title> <booktitle> Proc. 5th Int. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 508-605. </pages>
Reference-contexts: For the same reasons, we chose to evaluate the performance of our refinement with respect to the R fl -Tree variant. The other proposals (that we are aware of) that do not use MBBs to bound objects and/or queries are the Sphere tree [28], the Cell tree <ref> [8, 9] </ref> and the P-tree [12]. The Sphere tree uses spheres instead of boxes to bound both queries and data in the tree. Storing spheres has the advantage that the orientation of the axes does not affect performance.
Reference: [9] <author> Gunther O., Wong E. </author> <title> "A Dual Approach to Detect Polyhedral Intersection in Arbitrary Dimensions". </title> <booktitle> Proc. 25th Annual Allerton Conf. on Comm., Control and Comp., </booktitle> <month> Oct </month> <year> 1987, </year> <pages> pp. 859-868. </pages>
Reference-contexts: For the same reasons, we chose to evaluate the performance of our refinement with respect to the R fl -Tree variant. The other proposals (that we are aware of) that do not use MBBs to bound objects and/or queries are the Sphere tree [28], the Cell tree <ref> [8, 9] </ref> and the P-tree [12]. The Sphere tree uses spheres instead of boxes to bound both queries and data in the tree. Storing spheres has the advantage that the orientation of the axes does not affect performance. <p> The space overhead for describing each polyhedron is considerable even if the tightest description possible (i.e., linear constraints) is used. The methods used by Gunther and Wong <ref> [9] </ref> for polyhedron-polyhedron overlap detection for the cell-tree do not seem feasible in more than three dimensions. (A 4-dimensional test of two polyhedra with 16 vertices in each takes about 10 7 terabytes of space and about 10 20 operations for preprocessing!) Even if we consider using algorithms such as Simplex
Reference: [10] <author> Guttman, A. "R|Trees: </author> <title> A Dynamic Index Structure for Spatial Searching," </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1984, </year> <pages> pp. 47-57. 24 </pages>
Reference-contexts: Such applications include computer-aided design (CAD), 1 geographic information systems (GIS), On-Line Analytic Processing (OLAP), and image repositories. A key component of a database management system that aims to support such applications is a multidimensional access method. The R fl -Tree index [1] is a variant of the R-Tree <ref> [10] </ref>, In this paper, we show that a simple refinement of the search algorithm of the R fl -Tree offers significant speedups in most cases, with little or no worst-case performance penalty. <p> with experimental results, using queries over a five-dimensional projection of the widely used Compustat financial database (which contains over 300 dimensions!). 2 Background In this section, we present a brief introduction to R-Trees and the use of linear constraints to approximate a query. 2.1 The R-Tree Access Method The R-Tree <ref> [10] </ref> is a height-balanced tree structure designed specifically for indexing multi-dimensional spatial objects. As in a B-Tree, each node (a disk page) in the R-Tree is either an internal node or a leaf node. Entries in internal nodes point to other nodes. <p> Since the number of vertices of a polyhedron is exponential in the number of constraints (for arbitrary dimensionality), converting the input to fit those algorithms will be prohibitively expensive. Several variants of the R-Tree <ref> [10] </ref> have been proposed, including the R + -Tree [25] and the R fl -Tree [1]. Other closely related structures are the k-d-B Tree [24] and the Buddy-Tree [15, 16]; they all use boxes (MBBs) to bound the space represented by a tree node.
Reference: [11] <author> Jagadish, H.V. </author> <title> "Linear Clustering of Objects with Multiple Attributes," </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1990, </year> <month> pp.332-342. </month>
Reference: [12] <author> Jagadish, H. V. </author> <title> "Spatial Search with Polyhedra". </title> <booktitle> Proc. IEEE 6th Int. Conf. on Data Engineering 1990, </booktitle> <pages> pp. 311-319. </pages>
Reference-contexts: The other proposals (that we are aware of) that do not use MBBs to bound objects and/or queries are the Sphere tree [28], the Cell tree [8, 9] and the P-tree <ref> [12] </ref>. The Sphere tree uses spheres instead of boxes to bound both queries and data in the tree. Storing spheres has the advantage that the orientation of the axes does not affect performance. The major disadvantage is that "narrow" objects (such as lines) are very poorly approximated by spheres. <p> The P-tree <ref> [12] </ref> has a structure close to the R-tree and uses high dimensional boxes as representations for lower dimensional polyhedra.
Reference: [13] <author> Kriegel, H.P., Heep S., Fahldiek A., Mysliwitz N. </author> <title> "Query Processing of Geometric Objects with Free Form Boundaries in Spatial Databases". </title> <booktitle> Proc. 4th Int. Conf. DEXA 1993, </booktitle> <pages> pp. 349-360. </pages>
Reference-contexts: Several other spatial access methods have been proposed, e.g., [18, 20], but these are not directly related to our work. Other query types that have been proposed are polygon queries [14] and spline and Bezier curve queries <ref> [13] </ref>. Both methods look promising. However, it is not clear how the polygon queries scale to higher dimensions and the only applications that use splines or Bezier curves seem to be in CAD/CAM.
Reference: [14] <author> Kriegel, H.P., Horn, H., Schiwietz, M. </author> <title> "The Performance of Object Decomposition Techniques for Spatial Query Processing". </title> <booktitle> Proc. 2nd Symposium on Large Spatial Databases, Lecture Notes in Computer Science, </booktitle> <volume> Vol 525, </volume> <publisher> Springer, </publisher> <year> 1991, </year> <pages> pp. 257-276. </pages>
Reference-contexts: Even if the P-Tree is used, our technique can provide better approximations for the query since we are not limited by a predetermined set of axes. A summary of several kinds of approximations that can be used to represent a spatial object is presented in <ref> [14] </ref>. One of the suggested techniques is decomposition of a complex spatial object into a collection of smaller objects. Each of the smaller objects is then approximated by a MBB. <p> As indicated in Section 7, such an approach holds the potential for dramatic speed-ups in some cases. Several other spatial access methods have been proposed, e.g., [18, 20], but these are not directly related to our work. Other query types that have been proposed are polygon queries <ref> [14] </ref> and spline and Bezier curve queries [13]. Both methods look promising. However, it is not clear how the polygon queries scale to higher dimensions and the only applications that use splines or Bezier curves seem to be in CAD/CAM.
Reference: [15] <author> Kriegel, H.P., Schiwietz M., Schneider R., Seeger, B. </author> <title> "Performance Comparison of Point and Spatial Access Methods". </title> <booktitle> SSD 1989, </booktitle> <pages> pp. 89-113. </pages>
Reference-contexts: Several variants of the R-Tree [10] have been proposed, including the R + -Tree [25] and the R fl -Tree [1]. Other closely related structures are the k-d-B Tree [24] and the Buddy-Tree <ref> [15, 16] </ref>; they all use boxes (MBBs) to bound the space represented by a tree node.
Reference: [16] <author> Kriegel, H.P., Schiwietz M., Schneider R., Seeger, B. </author> <title> "The Buddy-Tree: An Efficient and Robust Method for Spatial Data Base Systems". </title> <booktitle> Proc. 16th VLDB Conf. </booktitle> <year> 1990, </year> <pages> pp. 590-601. </pages>
Reference-contexts: Several variants of the R-Tree [10] have been proposed, including the R + -Tree [25] and the R fl -Tree [1]. Other closely related structures are the k-d-B Tree [24] and the Buddy-Tree <ref> [15, 16] </ref>; they all use boxes (MBBs) to bound the space represented by a tree node.
Reference: [17] <author> Kuenzi, </author> <title> H.P., </title> <address> G.B., Tzschach, H.G., Zehnder., C.A. </address> <booktitle> "Numerical Methods of Mathematical Programming". </booktitle> <publisher> New York Academic Press, </publisher> <year> 1971. </year>
Reference: [18] <author> Lomet, D. and Salzberg, B. </author> <title> "The hB-Tree: A Multi-attribute Access Method with Good Guaranteed Performance," </title> <journal> ACM TODS Vol. </journal> <volume> 15, No. 4, </volume> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: As indicated in Section 7, such an approach holds the potential for dramatic speed-ups in some cases. Several other spatial access methods have been proposed, e.g., <ref> [18, 20] </ref>, but these are not directly related to our work. Other query types that have been proposed are polygon queries [14] and spline and Bezier curve queries [13]. Both methods look promising.
Reference: [19] <author> Nievergelt, J., Hinterberger, H., Sevcik, </author> <title> S.C. "The Grid File: An Adaptable, Symmetric Multikey File Structure," </title> <booktitle> Readings in Database Systems, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Popular access methods for point data include the Grid File <ref> [19] </ref>. The performance study in [1] suggests that the R fl -Tree is superior to the other variants of the R-Tree, and indeed even the Grid File for point data.
Reference: [20] <author> Orenstein J.A. and Merrett, T. </author> <title> "A Class of Data Structures for Associative Searching," </title> <booktitle> Proc. 3rd ACM SIGACT-SIGMOD-SIGART Symposium on PODS, </booktitle> <year> 1984, </year> <pages> pp. 181-190. </pages>
Reference-contexts: As indicated in Section 7, such an approach holds the potential for dramatic speed-ups in some cases. Several other spatial access methods have been proposed, e.g., <ref> [18, 20] </ref>, but these are not directly related to our work. Other query types that have been proposed are polygon queries [14] and spline and Bezier curve queries [13]. Both methods look promising.
Reference: [21] <author> Otterman M., </author> <title> "Approximate Matching with High Dimensionality R-trees". M.Sc. </title> <type> Scholarly paper, </type> <institution> Dept. of Computer Science, Univ. of Maryland, College Park, MD, </institution> <year> 1992. </year> <note> Supervised by Faloutsos C. </note>
Reference-contexts: This is the essential idea behind the P-Tree, but there are some important drawbacks. First, R-Trees are very sensitive to increases in dimensionality of the data (see <ref> [21] </ref>). If it is intended that point data be stored in the R-Tree, the only advantage gained from use of the P-Tree is a more precise query form (at the cost of added dimensions in the tree itself).
Reference: [22] <author> Preparata F. P., Shamos M. I. </author> <title> "Computational Geometry: An Introduction". </title> <publisher> Springer-Verlag 1990 (3rd printing). </publisher>
Reference-contexts: In addition to the high complexity, these algorithms are prone to numerical error, and modifying them to be `safe' would make them even more expensive. Results from Computational Geometry all deal with representations of polyhedra as sets of vertices <ref> [22] </ref>. This representation for a hyper-box grows exponentially as the dimensionality increases, making the resulting algorithms hyper-exponential for our problem. <p> The overlap algorithm is an important part of the search algorithm. There are Computational Geometry algorithms for detecting polyhedron|box overlap or polyhedron|polyhedron overlap (e.g. see <ref> [22] </ref>); why 22 can't these be used instead? The input to these algorithms is usually the vertices of the polyhedra and not the tight representation of the conjunction of linear constraints.
Reference: [23] <author> Press, </author> <title> W.H., Flannery, B.P., Teukolsky, S.A., Vetterling, W.T. "Numerical Recipes in C," </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge. </address> <year> 1988. </year>
Reference: [24] <author> Robinson, J. </author> <title> "The k-d-B Tree: A Search Structure for Large Multi-dimensional Dynamic Indexes," </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1981, </year> <pages> pp. 10-18. </pages>
Reference-contexts: Since the search algorithm is essentially the same for all variants of R-Trees, our refinement is equally applicable to variants other than R fl -Trees; indeed, it applies to related structures such as k-d-B trees <ref> [24] </ref> as well. However, our discussion and performance study is limited to R fl -Trees. Our main contribution is the proposal that we should use a conjunction of linear constraints, rather than the usual minimum bounding box (MBB), to approximate the query. <p> Several variants of the R-Tree [10] have been proposed, including the R + -Tree [25] and the R fl -Tree [1]. Other closely related structures are the k-d-B Tree <ref> [24] </ref> and the Buddy-Tree [15, 16]; they all use boxes (MBBs) to bound the space represented by a tree node.
Reference: [25] <author> Sellis, T., Roussopoulos, N., Faloutsos, C., </author> <title> "The R + |Tree: A Dynamic Index for Multi|Dimensional Objects," </title> <booktitle> Proc. 13th Inf. Conf. on VLDB, </booktitle> <year> 1987, </year> <pages> pp. 507-518. </pages>
Reference-contexts: If the number of dimensions is greater than two, MBBs with an appropriate number of dimensions are used, but the basic idea remains the same. The above description is sufficiently general that it applies to several variants of the R-Tree, including R + -Trees <ref> [25] </ref> and R fl -Trees [1]. (Note that MBBs in non-leaf nodes of an R + -Tree are non-overlapping, and therefore point queries search a single path from root to leaf. <p> Since the number of vertices of a polyhedron is exponential in the number of constraints (for arbitrary dimensionality), converting the input to fit those algorithms will be prohibitively expensive. Several variants of the R-Tree [10] have been proposed, including the R + -Tree <ref> [25] </ref> and the R fl -Tree [1]. Other closely related structures are the k-d-B Tree [24] and the Buddy-Tree [15, 16]; they all use boxes (MBBs) to bound the space represented by a tree node.
Reference: [26] <author> Seeger, B., Kriegel, </author> <title> H.P. "Techniques for Design and Implementation of Efficient Spatial Access Methods," </title> <booktitle> Proc. 14th VLDB Conf., </booktitle> <year> 1988. </year>
Reference: [27] <author> Stonebraker, M., Frew, J., Gardels, K., Meredith, J. </author> <title> "The Sequoia 2000 Storage Benchmark". </title> <booktitle> Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1993, </year> <pages> pp. 2-11. </pages>
Reference-contexts: Each experiment involved varying one or two parameters. For each value of the varied parameters, a query of the shape described above was executed using each of the three candidate search algorithms (STD, LP and Clipping). For some experiments we use datasets from the "Sequoia 2000 Storage Landmark" <ref> [27] </ref>. These data contain thousands of landuse polygons that cover the region of California. For other experiments the underlying data set was TIGER Type I data from the U.S. Census Bureau for Orange County, California. The TIGER dataset contains topological data on spatial features.
Reference: [28] <author> Van Oosterom, P., Claasen, E. </author> <title> "Orientation Insensitive Index Methods for Geometric Objects," </title> <booktitle> Proc. 4th International Symposium on Spatial Data Handling, </booktitle> <year> 1990, </year>
Reference-contexts: For the same reasons, we chose to evaluate the performance of our refinement with respect to the R fl -Tree variant. The other proposals (that we are aware of) that do not use MBBs to bound objects and/or queries are the Sphere tree <ref> [28] </ref>, the Cell tree [8, 9] and the P-tree [12]. The Sphere tree uses spheres instead of boxes to bound both queries and data in the tree. Storing spheres has the advantage that the orientation of the axes does not affect performance.
References-found: 28

