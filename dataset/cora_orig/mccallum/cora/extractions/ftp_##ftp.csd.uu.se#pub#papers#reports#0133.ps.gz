URL: ftp://ftp.csd.uu.se/pub/papers/reports/0133.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: email: margus@csd.uu.se  
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Title: Complexity of Basic Decision Problems of Finite Tree Automata  
Author: Margus Veanes 
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department Uppsala University  
Note: On Computational  
Abstract: UPMAIL Technical Report No. 133 January 16, 1997 ISSN 1100-0686 Abstract This report focuses on the following basic decision problems of finite tree automata: nonemptiness and intersection nonemptiness. There is a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem, and it is shown that the nonemptiness problem is P-complete. A notion of succinctness is considered with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. The report includes a short survey of closely related problems which shows that there is a rule of thumb: if a decision problem for (deterministic) finite automata is complete for a certain space complexity then the same decision problem for (deterministic) finite tree automata is complete for the corresponding alternating space complexity, but alternating space is precisely deterministic time, only one exponential higher. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.R. Buchi and J.B. Wright. </author> <title> Mathematical theory of automata. </title> <note> course notes. Communications Sciences 403, </note> <institution> University of Michigan, </institution> <year> 1960. </year>
Reference-contexts: So the value of a term 1 ( 2 ( n (*))) is the state after reading the string n 2 1 . This observation is attributed to Buchi and Wright <ref> [1] </ref>. 1 deterministic time, only one exponential higher [3]. The rest of the report is organized as follows. In Section 2 we recall the main notions used in this report, namely finite tree automata and alternating Turing machines.
Reference: [2] <author> A. Chandra, H. Lewis, and J. Makowsky. </author> <title> Embedded implicational dependencies and their inference problem. </title> <booktitle> In Proc. of 13th Annual ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 342-354, </pages> <year> 1981. </year> <month> 19 </month>
Reference-contexts: It's general outline is the same as in the remarks or proof outlines provided in the above references. We reduce the intersection nonemptiness problem of TAs to a wellkown problem in EXPTIME <ref> [2] </ref>. It is also remarked by Fruhwirth et al that this problem is in EXPTIME [15]. <p> The only function symbols in an FID are constants. The inference problem is simply the question of whether a given conjunction of FIDs implies another given FID. This problem can be solved in exponential time (actually it is EXPTIME-complete <ref> [2, 52] </ref>). <p> The construction of P is clearly linear in the total size of the A i 's. By Chandra et al <ref> [2] </ref> it follows thus that: Lemma 11 The intersection nonemptiness problem of DTAs is in EXPTIME. We obtain an alternative proof of Lemma 11 by looking at P as a logic program and asking the question if the goal Nonempty follows from it.
Reference: [3] <author> A.K. Chandra, D.C. Kozen, and L.J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: So the value of a term 1 ( 2 ( n (*))) is the state after reading the string n 2 1 . This observation is attributed to Buchi and Wright [1]. 1 deterministic time, only one exponential higher <ref> [3] </ref>. The rest of the report is organized as follows. In Section 2 we recall the main notions used in this report, namely finite tree automata and alternating Turing machines. In Section 3 we introduce the basic decision problems of finite tree automata that are considered in this report. <p> We will refer to (classical) nondeterministic finite automata as NFAs and to deterministic finite automata as DFAs. In general, we will follow Hopcroft and Ullman [26] regarding the formal definitions and notational conventions of finite automata. 2.2 Alternation and Computational Complexity Alternation was introduced by Chandra, Kozen and Stockmeyer <ref> [3] </ref> as a generalization of nondeterminism. First, let us give an intuitive definition of an alternating Turing machine or ATM. <p> M is a 7-tuple (Q; in ; ; ffi; q 0 ; b; F ), where - Q is a finite set of states, 2 In the original definition of an ATM there is also a possibility of a "negated" state, but it can be omitted without loss of generality <ref> [3, Theorem 2.5] </ref>. 3 is a finite set of tape symbols, - b is a tape symbol called blank, in is a subset of called the set of input symbols, - ffi is a mapping from Q fi to subsets of Q fi fi fleft; rightg, and is called the transition <p> Alternating Space vs Deterministic Time The notion of space (and time) complexity of ATMs is the same as that of TMs. The key property that we are going to use is that, alternating space is precisely deterministic time, only one exponential higher <ref> [3] </ref>. In particular, * APSPACE = EXPTIME, * ALOGSPACE = P, where the classes APSPACE and ALOGSPACE consist of all problems that can be solved by a polynomial space ATM and a logarithmic space ATM, respectively.
Reference: [4] <author> J.L. Conquide, M. Dauchet, R. Gilleron, and S. Vagvolgyi. </author> <title> Bottom-up tree pushdown automata: classification and connection with rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 127 </volume> <pages> 69-98, </pages> <year> 1994. </year>
Reference-contexts: Here we adopt a definition of tree automata based on rewrite rules. This definition is used for example by Conquide et al <ref> [4] </ref> and Dauchet [6].
Reference: [5] <author> B. Courcelle. </author> <title> On recognizable sets and tree automata. </title> <editor> In M. Nivat and H. Ait-Kaci, editors, </editor> <title> Resolution of Equations in Algebraic Structures. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: This is actually the definition of a DTA used by Gecseg and Steinby [21]. For an overview of the notion of recognizability in general algebraic structures see Courcelle <ref> [5] </ref> and the fundamental paper by Mezei and Wright [38]. We will refer to (classical) nondeterministic finite automata as NFAs and to deterministic finite automata as DFAs.
Reference: [6] <author> M. Dauchet. </author> <title> Rewriting and tree automata. </title> <editor> In H. Comon and J.P. Jouannaud, editors, </editor> <booktitle> Term Rewriting (French Spring School of Theoretical Computer Science), volume 909 of Lecture Notes in Computer Science, </booktitle> <pages> pages 95-113. </pages> <publisher> Springer Verlag, </publisher> <address> Font Romeux, France, </address> <year> 1993. </year>
Reference-contexts: Here we adopt a definition of tree automata based on rewrite rules. This definition is used for example by Conquide et al [4] and Dauchet <ref> [6] </ref>.
Reference: [7] <author> A. Degtyarev, Yu. Gurevich, P. Narendran, M. Veanes, and A. Voronkov. </author> <title> The de-cidability of simultaneous rigid E-unification with one variable. </title> <type> Upmail technical report, </type> <institution> Uppsala University, Computing Science Department, </institution> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: In particular, inequivalence [44, 46] and intersection nonemptiness <ref> [7, 15, 47] </ref> are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [47]. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov <ref> [7] </ref>. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability [17, 18, 22]. The main contributions of this report can be summarized as follows. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov <ref> [7] </ref>. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community.
Reference: [8] <author> A. Degtyarev, Yu. Gurevich, and A. Voronkov. </author> <title> Herbrand's theorem and equational reasoning: Problems and solutions. </title> <journal> In Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> volume 57. </volume> <month> October </month> <year> 1996. </year> <note> The "Logic in Computer Science" column. </note>
Reference-contexts: Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov <ref> [8] </ref> for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25]. The computational complexities of the problems studied in this report and of closely related problems is summarized in Table 1.
Reference: [9] <author> A. Degtyarev, Yu. Matiyasevich, and A. Voronkov. </author> <title> Simultaneous rigid E-unification and related algorithmic problems. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 494-502, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification [22]. (Note that this proof is faulty by the result of Degtyarev and Voronkov <ref> [10, 11, 9, 12] </ref>.) Seidl [47] 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen [32]. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [10] <author> A. Degtyarev and A. Voronkov. </author> <title> Simultaneous rigid E-unification is undecidable. </title> <type> UPMAIL Technical Report 105, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification [22]. (Note that this proof is faulty by the result of Degtyarev and Voronkov <ref> [10, 11, 9, 12] </ref>.) Seidl [47] 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen [32]. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [11] <author> A. Degtyarev and A. Voronkov. </author> <title> Simultaneous rigid E-unification is undecidable. </title> <editor> In H. Kleine Buning, editor, </editor> <booktitle> Computer Science Logic. 9th International Workshop, CSL'95, volume 1092 of Lecture Notes in Computer Science, </booktitle> <pages> pages 178-190, </pages> <address> Paderborn, Germany, </address> <month> September </month> <year> 1995, 1996. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification [22]. (Note that this proof is faulty by the result of Degtyarev and Voronkov <ref> [10, 11, 9, 12] </ref>.) Seidl [47] 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen [32]. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [12] <author> A. Degtyarev and A. Voronkov. </author> <title> The undecidability of simultaneous rigid E-unification. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 166:10, </address> <year> 1996. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification [22]. (Note that this proof is faulty by the result of Degtyarev and Voronkov <ref> [10, 11, 9, 12] </ref>.) Seidl [47] 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen [32]. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov <ref> [9, 10, 11, 12] </ref> there appeared many faulty proofs of its decidability [17, 18, 22]. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [13] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-309. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Unless otherwise stated it is always assumed that is nonempty, finite and includes at least one constant (function symbol of arity 0). We will also assume certain familiarity with some basic notions from term rewriting <ref> [13] </ref>, regarding ground rewriting systems. 2.1 Finite Tree Automata Finite tree automata, or simply tree automata from here on, is a generalization of classical automata and were first studied by Doner [14] and independently by Thatcher and Wright [51].
Reference: [14] <author> J. Doner. </author> <title> Tree acceptors and some of their applications. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4 </volume> <pages> 406-451, </pages> <year> 1970. </year>
Reference-contexts: 1 Introduction Finite tree automata <ref> [14, 51] </ref> is a natural generalization of classical finite automata to automata that accept or recognize trees of symbols, not just sequences of symbols or strings. <p> We will also assume certain familiarity with some basic notions from term rewriting [13], regarding ground rewriting systems. 2.1 Finite Tree Automata Finite tree automata, or simply tree automata from here on, is a generalization of classical automata and were first studied by Doner <ref> [14] </ref> and independently by Thatcher and Wright [51]. The main motivation was to obtain decidability results for the weak monadic second order logic of the binary tree. <p> The main motivation was to obtain decidability results for the weak monadic second order logic of the binary tree. A remarkable feature of tree autmata is that they provide an alternative characterization of both the class of regular sets and the class context-free languages (see Doner <ref> [14] </ref>). Here we adopt a definition of tree automata based on rewrite rules. This definition is used for example by Conquide et al [4] and Dauchet [6]. <p> Two tree automata are equivalent if they recognize the same forest. It is wellknown that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [14, 21, 51] </ref>, i.e., for any TA there is an equivalent DTA. Clearly there is no essential difference between a TA and a TTA. However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests.
Reference: [15] <author> T. Fruhwirth, E. Shapiro, M. Vardi, and E. Yardeni. </author> <title> Logic programs as types of logic programs. </title> <booktitle> In Proc. 6th Symposium on Logics in Computer Science (LICS), </booktitle> <pages> pages 300-309, </pages> <year> 1991. </year>
Reference-contexts: In particular, inequivalence [44, 46] and intersection nonemptiness <ref> [7, 15, 47] </ref> are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [47]. <p> In particular, inequivalence [44, 46] and intersection nonemptiness [7, 15, 47] are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming <ref> [15] </ref>. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [47]. <p> Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "decidability" proof of SREU [22], its proof is either merely remarked upon <ref> [15] </ref>, or only briefly outlined and incomplete [22, 47]. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> Then we show that intersection nonemptiness of TAs is in EXP-TIME. EXPTIME-hardness of these problems has been stated before (without detailed proofs) and used in various contexts. EXPTIME-hardness of intersection nonempti-ness of TAs has been remarked by Fruhwirth et al <ref> [15] </ref> and used in the context of type inference of logic programs. <p> It's general outline is the same as in the remarks or proof outlines provided in the above references. We reduce the intersection nonemptiness problem of TAs to a wellkown problem in EXPTIME [2]. It is also remarked by Fruhwirth et al that this problem is in EXPTIME <ref> [15] </ref>. It should be noted that informally this is clear already from the fact that the size of a direct product of an unbounded number of TAs is exponential and to test nonemptiness takes polynomial time in the size of that product by Theorem 1. <p> Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers <ref> [15, 22, 47] </ref>. In particular, Seidl outlines a proof in the case of DTTAs [47]. He has also proved that inequivalence of TAs is EXPTIME-complete [46, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete [46, Theorem 4.3].
Reference: [16] <author> M. Furer. </author> <title> The complexity of the inequivalence problem for regular expressions with intersection. </title> <booktitle> In Proc. 7th International Colloquium on Autamata, Languages, and Programming (ICALP), volume 85 of Lecture Notes in Computer Science, </booktitle> <pages> pages 234-245, </pages> <address> New York, 1980. </address> <publisher> Springer Verlag. </publisher> <pages> 20 </pages>
Reference-contexts: It is wellknown that the use of intersection can shorten a regular expression by an exponential amount. So for example the inequivalence problem for regular expressions is PSPACE-complete [37], but becomes EXPSPACE-complete when intersection is added <ref> [16, 27] </ref>. (Similar effect if obtained with interleaving [35].) In case of finite automata or finite tree automata, taking their intersection corresponds to taking their direct product.
Reference: [17] <author> J. Gallier, P. Narendran, S. Raatz, and W. Snyder. </author> <title> Theorem proving using equa-tional matings and rigid E-unification. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(2) </volume> <pages> 377-429, </pages> <year> 1992. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [18] <author> J.H. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification is NP-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25].
Reference: [19] <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Theorem proving using rigid E-unification: Equational matings. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Our main motivation for studying this problem is its close connection with a certain fragment of intuitionistic logic with equality and a subcase of a problem called simultaneous rigid E-unification, or SREU, that arises in the automated theorem proving context <ref> [19] </ref>. These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability [17, 18, 22]. <p> Our main motivation for studying these problems and their computational complexity is their close connection with the decidability and computational complexity of certain fragments of intuitionistic logic with equality and subcases of a certain problem called simultaneous rigid E-unification that arises in the automated theorem proving context <ref> [19] </ref>. These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability [17, 18, 22].
Reference: [20] <author> H. Galperin and A. Wigderson. </author> <title> Succinct representations of graphs. </title> <journal> Information and Control, </journal> <volume> 56 </volume> <pages> 183-198, </pages> <year> 1983. </year>
Reference-contexts: Let us note that the usual notion of succinct representation of a graph is a boolean circuit which given as input binary representations of two integers (representing two nodes in that graph) computes the corresponding entry of the adjacency matrix of that graph <ref> [20] </ref>. For example, the succinct graph accessibility problem is PSPACE-complete [41] (also for undirected graphs [33]). In general one can define product representation of an abitrary finite first order structure in the above manner, i.e., as sequence of first order structures (with the same type) denoting the corresponding direct product.
Reference: [21] <author> F. Gecseg and M. Steinby. </author> <title> Tree Automata. </title> <address> Akademiai Kiodo, Budapest, </address> <year> 1984. </year>
Reference-contexts: Two tree automata are equivalent if they recognize the same forest. It is wellknown that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [14, 21, 51] </ref>, i.e., for any TA there is an equivalent DTA. Clearly there is no essential difference between a TA and a TTA. However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests. <p> However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests. A simple example of that is the forest ff (a; b); f (b; a)g that is clearly recognizable but not by any DTTA <ref> [21, Example 2.11] </ref>. We say that a TA is total if every term over its input alphabet reduces to some state. Every TA can trivially be extended (by adding new rules and a new dummy state) to an equivalent total TA. <p> This is actually the definition of a DTA used by Gecseg and Steinby <ref> [21] </ref>. For an overview of the notion of recognizability in general algebraic structures see Courcelle [5] and the fundamental paper by Mezei and Wright [38]. We will refer to (classical) nondeterministic finite automata as NFAs and to deterministic finite automata as DFAs. <p> be tween EXPTIME and other complexity classes see Johnson [29] or Papadimitriou [40]. 4 3 Basic Decision Problems of Finite Tree Automata All the basic decision problems of finite tree automata, like the nonemptiness problem, the inequivalence problem (or the more general inclusion problem) are decidable (see Gecseg and Steinby <ref> [21] </ref>). The proofs are fairly easy by first transforming a TA into a DTA by a powerset construction and then using a "pumping property" for DTAs. It is also easy to show that recognizable sets of terms are closed under Boolean operations. <p> It is clear that, by using (2), inequivalence of DTAs reduces (in logarithmic space) to nonempti-ness <ref> [21] </ref>. For DFAs this was already shown by Moore [39].
Reference: [22] <author> J. Goubault. </author> <title> Rigid ~ E-unifiability is DEXPTIME-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. The main contributions of this report can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection nonemptiness problem of finite tree automata. More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata. <p> More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata. Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "decidability" proof of SREU <ref> [22] </ref>, its proof is either merely remarked upon [15], or only briefly outlined and incomplete [22, 47]. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "decidability" proof of SREU [22], its proof is either merely remarked upon [15], or only briefly outlined and incomplete <ref> [22, 47] </ref>. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification <ref> [22] </ref>. (Note that this proof is faulty by the result of Degtyarev and Voronkov [10, 11, 9, 12].) Seidl [47] 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. <p> These connections are investigated in a separate joint paper by Degtyarev, Gurevich, Narendran, Veanes and Voronkov [7]. Until SREU was proved undecidable by Degtyarev and Voronkov [9, 10, 11, 12] there appeared many faulty proofs of its decidability <ref> [17, 18, 22] </ref>. See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes [25]. <p> Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers <ref> [15, 22, 47] </ref>. In particular, Seidl outlines a proof in the case of DTTAs [47]. He has also proved that inequivalence of TAs is EXPTIME-complete [46, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete [46, Theorem 4.3].
Reference: [23] <author> R. Greenlaw, H.J. Hoover, and W.L. Ruzzo. </author> <title> A compendium of problems complete for P . Technical Report TR 91-05-01, </title> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1991. </year>
Reference-contexts: There is also a very simple reduction from generability, which is another P-complete problem due to Jones and Laaser [30] and Kozen [31], to nonemptiness of DTAs and 5 vice versa. We follow Greenlaw, Hoover and Ruzzo <ref> [23, 24] </ref> in our formulation of alternating graph accessibility and generability. 3 I Alternating graph accessibility. Given is a directed graph with a set of vertices V and a set of edges E, a subset U of V , and designated vertices a and b in V .
Reference: [24] <author> R. Greenlaw, H.J. Hoover, and W.L. Ruzzo. </author> <title> Limits to Parallel Computation: P -Completeness Theory. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: This survey is summarized with Table 1 in the conclusions. We show also that the nonemptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility <ref> [24, 28] </ref> and generability [24, 30, 31]. We consider a notion of succinctness with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. <p> This survey is summarized with Table 1 in the conclusions. We show also that the nonemptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [24, 28] and generability <ref> [24, 30, 31] </ref>. We consider a notion of succinctness with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. <p> There is also a very simple reduction from generability, which is another P-complete problem due to Jones and Laaser [30] and Kozen [31], to nonemptiness of DTAs and 5 vice versa. We follow Greenlaw, Hoover and Ruzzo <ref> [23, 24] </ref> in our formulation of alternating graph accessibility and generability. 3 I Alternating graph accessibility. Given is a directed graph with a set of vertices V and a set of edges E, a subset U of V , and designated vertices a and b in V . <p> Let us consider one induction case, namely when x is existential and different from b. Then, for some vertex z, apath (x; b) ) (x; z) 2 E; apath (z; b) (IH) fl ) x ! R g (t ); 3 The book of Greenlaw, Hoover and Ruzzo <ref> [24] </ref> includes an excellent up-to-date survey of around 150 P-complete problems. 6 where t 2 T and g is either g 1 or g 2 . The `(' direction follows also easily by induction on the length of reductions.
Reference: [25] <author> Y. Gurevich and M. Veanes. </author> <title> On the Herbrand skeleton problem. </title> <type> Technical report, </type> <institution> Uppsala University, Computing Science Department, </institution> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes [53], and Gurevich and Veanes <ref> [25] </ref>. The computational complexities of the problems studied in this report and of closely related problems is summarized in Table 1.
Reference: [26] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1979. </year>
Reference-contexts: For an overview of the notion of recognizability in general algebraic structures see Courcelle [5] and the fundamental paper by Mezei and Wright [38]. We will refer to (classical) nondeterministic finite automata as NFAs and to deterministic finite automata as DFAs. In general, we will follow Hopcroft and Ullman <ref> [26] </ref> regarding the formal definitions and notational conventions of finite automata. 2.2 Alternation and Computational Complexity Alternation was introduced by Chandra, Kozen and Stockmeyer [3] as a generalization of nondeterminism. First, let us give an intuitive definition of an alternating Turing machine or ATM. <p> All computation models based on a Turing machine can be considered as variants of a TM with different acceptance conditions, this point is emphasized by Johnson [29]. We follow Hopcroft and Ullman <ref> [26] </ref> regarding the formal definition of a nondeterministic Turing machine. For the sake of clearness we recall here the main definitions. <p> We can assume without loss of generality that M has a single tape, this follows from a straightforward generalization of the corresponding property for TMs <ref> [26, Theorem 12.2] </ref>. Let x 2 + in be a fixed string and n = S (jxj).
Reference: [27] <author> H.B. Hunt III. </author> <title> The equivalence problem for regular expressions with intersection is not polynomial in tape. </title> <type> Technical Report TR 73-161, </type> <institution> Cornell University, </institution> <address> Ithaca, NY., </address> <year> 1973. </year>
Reference-contexts: It is wellknown that the use of intersection can shorten a regular expression by an exponential amount. So for example the inequivalence problem for regular expressions is PSPACE-complete [37], but becomes EXPSPACE-complete when intersection is added <ref> [16, 27] </ref>. (Similar effect if obtained with interleaving [35].) In case of finite automata or finite tree automata, taking their intersection corresponds to taking their direct product.
Reference: [28] <author> N. Immerman. </author> <title> Number of quantifiers is better than number of tape cells. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 384-406, </pages> <year> 1981. </year>
Reference-contexts: This survey is summarized with Table 1 in the conclusions. We show also that the nonemptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility <ref> [24, 28] </ref> and generability [24, 30, 31]. We consider a notion of succinctness with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. <p> It follows that the inequiv-alence problem of DFAs is also NL-complete. Analogously, for finite tree automata there is a simple reduction from the alternating graph accessibility problem to the nonemptiness problem and vice versa. Alternating graph accessibility was shown P-complete by Immerman <ref> [28] </ref> by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generability, which is another P-complete problem due to Jones and Laaser [30] and Kozen [31], to nonemptiness of DTAs and 5 vice versa. <p> For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37]. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen [32]. Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility <ref> [28] </ref> and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers [15, 22, 47]. In particular, Seidl outlines a proof in the case of DTTAs [47].
Reference: [29] <author> D.S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity, chapter 2, </booktitle> <pages> pages 67-161. </pages> <publisher> Elsevier Science, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: All computation models based on a Turing machine can be considered as variants of a TM with different acceptance conditions, this point is emphasized by Johnson <ref> [29] </ref>. We follow Hopcroft and Ullman [26] regarding the formal definition of a nondeterministic Turing machine. For the sake of clearness we recall here the main definitions. <p> The class EXPTIME consist of all problems that can be solved by a deterministic TM that is time bounded by 2 n c for some c &gt; 0. For a general overview of the relationships be tween EXPTIME and other complexity classes see Johnson <ref> [29] </ref> or Papadimitriou [40]. 4 3 Basic Decision Problems of Finite Tree Automata All the basic decision problems of finite tree automata, like the nonemptiness problem, the inequivalence problem (or the more general inclusion problem) are decidable (see Gecseg and Steinby [21]).
Reference: [30] <author> N.D. Jones and W.T. Laaser. </author> <title> Complete problems for deterministic polynomial time. </title> <journal> Theoretical Computer Science, </journal> <volume> 3(2) </volume> <pages> 105-117, </pages> <year> 1976. </year>
Reference-contexts: This survey is summarized with Table 1 in the conclusions. We show also that the nonemptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [24, 28] and generability <ref> [24, 30, 31] </ref>. We consider a notion of succinctness with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. <p> Alternating graph accessibility was shown P-complete by Immerman [28] by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generability, which is another P-complete problem due to Jones and Laaser <ref> [30] </ref> and Kozen [31], to nonemptiness of DTAs and 5 vice versa. We follow Greenlaw, Hoover and Ruzzo [23, 24] in our formulation of alternating graph accessibility and generability. 3 I Alternating graph accessibility. <p> For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37]. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen [32]. Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability <ref> [30, 31] </ref>. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers [15, 22, 47]. In particular, Seidl outlines a proof in the case of DTTAs [47].
Reference: [31] <author> D. Kozen. </author> <title> Complexity of finitely presented algebras. </title> <booktitle> In Proc. of the 9th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 164-177, </pages> <address> New York, 1977. </address> <publisher> ACM. </publisher>
Reference-contexts: This survey is summarized with Table 1 in the conclusions. We show also that the nonemptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [24, 28] and generability <ref> [24, 30, 31] </ref>. We consider a notion of succinctness with respect to which the intersection nonemptiness problem is in fact a succinct version of the nonemptiness problem. <p> Alternating graph accessibility was shown P-complete by Immerman [28] by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generability, which is another P-complete problem due to Jones and Laaser [30] and Kozen <ref> [31] </ref>, to nonemptiness of DTAs and 5 vice versa. We follow Greenlaw, Hoover and Ruzzo [23, 24] in our formulation of alternating graph accessibility and generability. 3 I Alternating graph accessibility. <p> The generability problem remains in P even with more than one function. More generally, it is the problem of deciding if, given a finite algebra, a subset of its universe and an element in it, this element is in the subalgebra generated by the given subset <ref> [31] </ref>. (See for example Wechler [54] for definitions.) Actually, as we will see, generability is basically the same problem as nonemptiness of DTAs. <p> For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37]. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen [32]. Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability <ref> [30, 31] </ref>. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers [15, 22, 47]. In particular, Seidl outlines a proof in the case of DTTAs [47].
Reference: [32] <author> D. Kozen. </author> <title> Lower bounds for natural proof systems. </title> <booktitle> In Proc. 18th IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 254-266, </pages> <year> 1977. </year>
Reference-contexts: The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen <ref> [32] </ref>. It's general outline is the same as in the remarks or proof outlines provided in the above references. We reduce the intersection nonemptiness problem of TAs to a wellkown problem in EXPTIME [2]. It is also remarked by Fruhwirth et al that this problem is in EXPTIME [15]. <p> For finite automata the product nonemptiness is PSPACE-complete by Kozens result <ref> [32] </ref>. Let us note that the usual notion of succinct representation of a graph is a boolean circuit which given as input binary representations of two integers (representing two nodes in that graph) computes the corresponding entry of the adjacency matrix of that graph [20]. <p> Thus the intersection nonemptiness problem of NFAs is in PSPACE. This fact follows already from the proof of the PSPACE-completeness of the intersection nonemptiness problem of DFAs by Kozen <ref> [32] </ref>, where the part of the proof regarding inclusion in PSPACE holds also for NFAs. 6 Conclusions In this report we considered computational complexity of some basic decision problems of finite tree automata. <p> For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37]. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen <ref> [32] </ref>. Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete.
Reference: [33] <author> A. Lozano and J.L. Balcazar. </author> <title> The complexity of graph problems for succinctly represented graphs. </title> <editor> In M. Nagl, editor, </editor> <booktitle> Graph-Theoretic Concepts in Computer Science, 15th International Workshop WG'89, volume 411 of Lecture Notes in Computer Science, </booktitle> <pages> pages 277-286. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year> <month> 21 </month>
Reference-contexts: For example, the succinct graph accessibility problem is PSPACE-complete [41] (also for undirected graphs <ref> [33] </ref>). In general one can define product representation of an abitrary finite first order structure in the above manner, i.e., as sequence of first order structures (with the same type) denoting the corresponding direct product. It follows for example from Corollary 3 that product generability is EXPTIME-complete.
Reference: [34] <author> M. Magidor and G. Moran. </author> <title> Finite automata over finite trees. </title> <type> Technical Re--port 30, </type> <institution> Hebrew University, Jerusalem, </institution> <year> 1969. </year>
Reference-contexts: So R is a ground canonical rewrite system. Tree automata as defined above are usually also called bottom-up tree automata. Top-down tree automata were introduced by Rabin [42] and were also studied by Magidor and Moran <ref> [34] </ref>. Here we will use the following definition based on rewrite rules.
Reference: [35] <author> A.J. Mayer and L.J. Stockmeyer. </author> <title> The complexity of word problems this time with interleaving. </title> <journal> Information and Computation, </journal> <volume> 115 </volume> <pages> 293-311, </pages> <year> 1994. </year>
Reference-contexts: In fact, Seidl has proved that the inequivalence problem of TAs is EXPTIME-complete [46, Theorem 2.1]. The inequivalence problem of NFAs and regular expressions is PSPACE-complete [37]. For more recent developments regarding complexity of word problems see Mayer and Stockmeyer <ref> [35] </ref>. 5 Intersection Nonemptiness of Finite Tree Automata We proceed in two steps. First we prove that intersection nonemptiness of DTAs is EXPTIME-hard. Then we show that intersection nonemptiness of TAs is in EXP-TIME. EXPTIME-hardness of these problems has been stated before (without detailed proofs) and used in various contexts. <p> It is wellknown that the use of intersection can shorten a regular expression by an exponential amount. So for example the inequivalence problem for regular expressions is PSPACE-complete [37], but becomes EXPSPACE-complete when intersection is added [16, 27]. (Similar effect if obtained with interleaving <ref> [35] </ref>.) In case of finite automata or finite tree automata, taking their intersection corresponds to taking their direct product. In some cases the size of a finite automaton or TA, can be decreased by an exponential amount by representing it by a sequence of finite automata or TAs, resepectively.
Reference: [36] <author> A.R. Meyer and M.J. Fisher. </author> <title> Economy of description of automata, grammars and formal systems. </title> <booktitle> In Proc. 12th IEEE Symposium on Switching and Automata Theory (SWAT), </booktitle> <pages> pages 188-191, </pages> <year> 1971. </year>
Reference-contexts: In order to reduce the inequivalence problem of two TAs into the nonemptiness problem by using (2) it is necessary to first transform the TAs in question into DTAs which in general implies an exponential increase in the number of states (this is true already in the case of NFAs <ref> [43, 36] </ref>). In fact, Seidl has proved that the inequivalence problem of TAs is EXPTIME-complete [46, Theorem 2.1]. The inequivalence problem of NFAs and regular expressions is PSPACE-complete [37].
Reference: [37] <author> A.R. Meyer and L.J. Stockmeyer. </author> <title> The equivalence problem for regular expressions with squaring requires exponential space. </title> <booktitle> In Proc. 13th IEEE Symposium on Switching and Automata Theory (SWAT), </booktitle> <pages> pages 125-129, </pages> <year> 1972. </year>
Reference-contexts: In fact, Seidl has proved that the inequivalence problem of TAs is EXPTIME-complete [46, Theorem 2.1]. The inequivalence problem of NFAs and regular expressions is PSPACE-complete <ref> [37] </ref>. For more recent developments regarding complexity of word problems see Mayer and Stockmeyer [35]. 5 Intersection Nonemptiness of Finite Tree Automata We proceed in two steps. First we prove that intersection nonemptiness of DTAs is EXPTIME-hard. Then we show that intersection nonemptiness of TAs is in EXP-TIME. <p> Corollary 3 Intersection nonemptiness of DTAs is EXPTIME-hard even when restricted to signatures consisting of constants and one binary function symbol. It is wellknown that the use of intersection can shorten a regular expression by an exponential amount. So for example the inequivalence problem for regular expressions is PSPACE-complete <ref> [37] </ref>, but becomes EXPSPACE-complete when intersection is added [16, 27]. (Similar effect if obtained with interleaving [35].) In case of finite automata or finite tree automata, taking their intersection corresponds to taking their direct product. <p> Using (2), inequivalence of DFAs reduces to nonempti-ness [39] and since nonemptiness is a particular case of inequivalence, it follows that inequivalnece of DFAs is NL-complete as well. For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer <ref> [37] </ref>. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen [32]. Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete.
Reference: [38] <author> J. Mezei and J.B. Wright. </author> <title> Algebraic automata and context-free sets. </title> <journal> Information and Control, </journal> <volume> 11 </volume> <pages> 3-29, </pages> <year> 1967. </year>
Reference-contexts: This is actually the definition of a DTA used by Gecseg and Steinby [21]. For an overview of the notion of recognizability in general algebraic structures see Courcelle [5] and the fundamental paper by Mezei and Wright <ref> [38] </ref>. We will refer to (classical) nondeterministic finite automata as NFAs and to deterministic finite automata as DFAs.
Reference: [39] <author> E.F. Moore. </author> <title> Gedanken experiments on sequential machines. </title> <booktitle> In Automata Studies, </booktitle> <pages> pages 129-153. </pages> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, N.J., </address> <year> 1956. </year>
Reference-contexts: It is clear that, by using (2), inequivalence of DTAs reduces (in logarithmic space) to nonempti-ness [21]. For DFAs this was already shown by Moore <ref> [39] </ref>. <p> Remarks about Table 1 The nonemptiness problem of finite automata is in fact the graph accessibility problem and is thus complete for nondeterministic logarithmic space or NL-complete [45]. Using (2), inequivalence of DFAs reduces to nonempti-ness <ref> [39] </ref> and since nonemptiness is a particular case of inequivalence, it follows that inequivalnece of DFAs is NL-complete as well. For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37]. PSPACE-completeness of nonemptiness of intersection of finite automata was proved by Kozen [32].
Reference: [40] <author> C.H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The class EXPTIME consist of all problems that can be solved by a deterministic TM that is time bounded by 2 n c for some c &gt; 0. For a general overview of the relationships be tween EXPTIME and other complexity classes see Johnson [29] or Papadimitriou <ref> [40] </ref>. 4 3 Basic Decision Problems of Finite Tree Automata All the basic decision problems of finite tree automata, like the nonemptiness problem, the inequivalence problem (or the more general inclusion problem) are decidable (see Gecseg and Steinby [21]). <p> It follows for example from Corollary 3 that product generability is EXPTIME-complete. Let us also note that 8 it is generally believed that EXPTIME is nothing else but P on exponentially more succinct input <ref> [40] </ref> 5.1 EXPTIME-hardness of Intersection Nonemptiness of DTAs We give a polynomial time reduction of polynomial space ATMs to the intersection nonemptiness problem of DTAs. It follows that the problem is APSPACE-hard and thus EXPTIME-hard.
Reference: [41] <author> C.H. Papadimitriou and M. Yannakakis. </author> <title> A note on succinct representations of graphs. </title> <journal> Information and Control, </journal> <volume> 71 </volume> <pages> 181-185, </pages> <year> 1986. </year>
Reference-contexts: For example, the succinct graph accessibility problem is PSPACE-complete <ref> [41] </ref> (also for undirected graphs [33]). In general one can define product representation of an abitrary finite first order structure in the above manner, i.e., as sequence of first order structures (with the same type) denoting the corresponding direct product.
Reference: [42] <author> M.O. Rabin. </author> <title> Decidability of second-order theories and automata on infinite trees. </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> 141 </volume> <pages> 1-35, </pages> <year> 1969. </year>
Reference-contexts: So R is a ground canonical rewrite system. Tree automata as defined above are usually also called bottom-up tree automata. Top-down tree automata were introduced by Rabin <ref> [42] </ref> and were also studied by Magidor and Moran [34]. Here we will use the following definition based on rewrite rules.
Reference: [43] <author> M.O. Rabin and D. Scott. </author> <title> Finite automata and their decision problems. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 3 </volume> <pages> 115-125, </pages> <year> 1959. </year>
Reference-contexts: In order to reduce the inequivalence problem of two TAs into the nonemptiness problem by using (2) it is necessary to first transform the TAs in question into DTAs which in general implies an exponential increase in the number of states (this is true already in the case of NFAs <ref> [43, 36] </ref>). In fact, Seidl has proved that the inequivalence problem of TAs is EXPTIME-complete [46, Theorem 2.1]. The inequivalence problem of NFAs and regular expressions is PSPACE-complete [37].
Reference: [44] <author> K. Salomaa, D. Wood, and S. Yu. </author> <title> Complexity of E0L structural equivalence. </title> <booktitle> In Mathematical Foundations of Computer Science 1994, number 841 in Lecture Notes in Computer Science, </booktitle> <pages> pages 587-596, </pages> <address> Kosice, Slovakia, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Like in the case of finite automata, decision problems of finite tree automata are typically complete for the computational complexity classes they belong to and have, due to their simple formulation, proved to be useful tools in classifying complexity bounds of other problems. In particular, inequivalence <ref> [44, 46] </ref> and intersection nonemptiness [7, 15, 47] are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15].
Reference: [45] <author> W.J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: n, the intersection nonemptiness problem reduces to the nonemptiness problem in logarithmic space. 4 Nonemptiness and Inequivalence of Finite Tree Automata For finite automata (either deterministic or nondeterministic) the nonemptiness problem is basically the same as the graph accessibility problem and is thus complete for nondeterministic logarithmic space or NL-complete <ref> [45] </ref>. It follows that the inequiv-alence problem of DFAs is also NL-complete. Analogously, for finite tree automata there is a simple reduction from the alternating graph accessibility problem to the nonemptiness problem and vice versa. <p> Remarks about Table 1 The nonemptiness problem of finite automata is in fact the graph accessibility problem and is thus complete for nondeterministic logarithmic space or NL-complete <ref> [45] </ref>. Using (2), inequivalence of DFAs reduces to nonempti-ness [39] and since nonemptiness is a particular case of inequivalence, it follows that inequivalnece of DFAs is NL-complete as well. For finite automata in general, inequiv-alence is PSPACE-complete by Meyer and Stockmeyer [37].
Reference: [46] <author> H. Seidl. </author> <title> Deciding equivalence of finite tree automata. </title> <journal> SIAM Journal of Computing, </journal> <volume> 19(3) </volume> <pages> 424-437, </pages> <year> 1990. </year>
Reference-contexts: Like in the case of finite automata, decision problems of finite tree automata are typically complete for the computational complexity classes they belong to and have, due to their simple formulation, proved to be useful tools in classifying complexity bounds of other problems. In particular, inequivalence <ref> [44, 46] </ref> and intersection nonemptiness [7, 15, 47] are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15]. <p> It is also easy to see that there is logspace reduction from any two DTAs A and B to the DTA in (2). It follows thus that inequivalence of DTAs is also P-complete. From a statement in Seidl <ref> [46, Theorem 4.3: P-completeness of inequivalence of m-ambiguous TTAs] </ref> follows that inequivalence of DTTAs is P-complete as well. For TAs in general the situation is different however. <p> In fact, Seidl has proved that the inequivalence problem of TAs is EXPTIME-complete <ref> [46, Theorem 2.1] </ref>. The inequivalence problem of NFAs and regular expressions is PSPACE-complete [37]. For more recent developments regarding complexity of word problems see Mayer and Stockmeyer [35]. 5 Intersection Nonemptiness of Finite Tree Automata We proceed in two steps. First we prove that intersection nonemptiness of DTAs is EXPTIME-hard. <p> Besides Table 1, further justification for this rule follows by comparing computational complexities of some other decision problems of finite tree automata studied by Seidl <ref> [46] </ref> with the corresponding decision problems of finite automata studied by Stearns and Hunt III [49, 50]. <p> EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers [15, 22, 47]. In particular, Seidl outlines a proof in the case of DTTAs [47]. He has also proved that inequivalence of TAs is EXPTIME-complete <ref> [46, Theorem 2.1] </ref> and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete [46, Theorem 4.3]. Acknowledgements The author wishes to thank Evgeny Dantsin and Andrei Voronkov for valuable comments and discussions. <p> In particular, Seidl outlines a proof in the case of DTTAs [47]. He has also proved that inequivalence of TAs is EXPTIME-complete [46, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete <ref> [46, Theorem 4.3] </ref>. Acknowledgements The author wishes to thank Evgeny Dantsin and Andrei Voronkov for valuable comments and discussions.
Reference: [47] <author> H. Seidl. </author> <title> Haskell overloading is DEXPTIME-complete. </title> <journal> Information Processing Letters, </journal> <volume> 52(2) </volume> <pages> 57-60, </pages> <year> 1994. </year>
Reference-contexts: In particular, inequivalence [44, 46] and intersection nonemptiness <ref> [7, 15, 47] </ref> are examples of such decision problems. The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [47]. <p> The intersection nonemptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [15]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming <ref> [47] </ref>. Our main motivation for studying this problem is its close connection with a certain fragment of intuitionistic logic with equality and a subcase of a problem called simultaneous rigid E-unification, or SREU, that arises in the automated theorem proving context [19]. <p> Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "decidability" proof of SREU [22], its proof is either merely remarked upon [15], or only briefly outlined and incomplete <ref> [22, 47] </ref>. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> Goubault gives an incomplete EXPTIME-hardness proof of the intersection nonemptiness problem of DTAs in the context of a faulty EXPTIME-completeness proof of simultaneous rigid E-unification [22]. (Note that this proof is faulty by the result of Degtyarev and Voronkov [10, 11, 9, 12].) Seidl <ref> [47] </ref> 7 uses EXPTIME-hardness of the intersection nonemptiness of DTTAs and outlines a proof in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection nonemptiness of DFAs by Kozen [32]. <p> Nonemptiness of finite tree automata is closely related to the two wellknown P-complete problems: alternating graph accessibility [28] and generability [30, 31]. It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers <ref> [15, 22, 47] </ref>. In particular, Seidl outlines a proof in the case of DTTAs [47]. He has also proved that inequivalence of TAs is EXPTIME-complete [46, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete [46, Theorem 4.3]. <p> It follows by (2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection nonemptiness problem of finite tree automata has been observed by other researchers [15, 22, 47]. In particular, Seidl outlines a proof in the case of DTTAs <ref> [47] </ref>. He has also proved that inequivalence of TAs is EXPTIME-complete [46, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalnece is P-complete [46, Theorem 4.3]. Acknowledgements The author wishes to thank Evgeny Dantsin and Andrei Voronkov for valuable comments and discussions.
Reference: [48] <author> E.Y. Shapiro. </author> <title> Alternation and the computational complexity of logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 1 </volume> <pages> 19-33, </pages> <year> 1984. </year>
Reference-contexts: The computational complexity of the problem of deciding if P ` Nonempty is therefore in EXPTIME by a correspondence between logic programs and ATMs by Shapiro <ref> [48, Theorem 4.4] </ref> and the relationship EXPTIME = APSPACE. We can also note that NFAs correspond to monadic TAs, i.e., TAs over a signature where there are besides constants only unary function symbols.
Reference: [49] <author> R. Stearns and H. Hunt III. </author> <title> On the equivalence and containment problems for unambiguous regular expressions, regular grammars and finite automata. </title> <booktitle> In Proc. 22th IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 74-81, </pages> <year> 1981. </year>
Reference-contexts: Besides Table 1, further justification for this rule follows by comparing computational complexities of some other decision problems of finite tree automata studied by Seidl [46] with the corresponding decision problems of finite automata studied by Stearns and Hunt III <ref> [49, 50] </ref>. This relationship between computational complexities of decision problems of finite tree automata and finite automata is reflected by the fact that proofs of the former are usually extensions of proofs of the latter, by going from using nondeterministic Turing machines to using alternating Turing machines.
Reference: [50] <author> R. Stearns and H. Hunt III. </author> <title> On the equivalence and containment problems for unambiguous regular expressions, regular grammars and finite automata. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14 </volume> <pages> 598-611, </pages> <year> 1985. </year>
Reference-contexts: Besides Table 1, further justification for this rule follows by comparing computational complexities of some other decision problems of finite tree automata studied by Seidl [46] with the corresponding decision problems of finite automata studied by Stearns and Hunt III <ref> [49, 50] </ref>. This relationship between computational complexities of decision problems of finite tree automata and finite automata is reflected by the fact that proofs of the former are usually extensions of proofs of the latter, by going from using nondeterministic Turing machines to using alternating Turing machines.
Reference: [51] <author> J.W. Thatcher and J.B. Wright. </author> <title> Generalized finite automata theory with an application to a decision problem of second-order logic. </title> <journal> Mathematical Systems Theory, </journal> <volume> 2(1) </volume> <pages> 57-81, </pages> <year> 1968. </year> <month> 22 </month>
Reference-contexts: 1 Introduction Finite tree automata <ref> [14, 51] </ref> is a natural generalization of classical finite automata to automata that accept or recognize trees of symbols, not just sequences of symbols or strings. <p> will also assume certain familiarity with some basic notions from term rewriting [13], regarding ground rewriting systems. 2.1 Finite Tree Automata Finite tree automata, or simply tree automata from here on, is a generalization of classical automata and were first studied by Doner [14] and independently by Thatcher and Wright <ref> [51] </ref>. The main motivation was to obtain decidability results for the weak monadic second order logic of the binary tree. A remarkable feature of tree autmata is that they provide an alternative characterization of both the class of regular sets and the class context-free languages (see Doner [14]). <p> Two tree automata are equivalent if they recognize the same forest. It is wellknown that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [14, 21, 51] </ref>, i.e., for any TA there is an equivalent DTA. Clearly there is no essential difference between a TA and a TTA. However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests.
Reference: [52] <author> M. Y. Vardi. </author> <title> The complexity of relational query languages. </title> <booktitle> In Proc. 14th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 137-146, </pages> <year> 1982. </year>
Reference-contexts: The only function symbols in an FID are constants. The inference problem is simply the question of whether a given conjunction of FIDs implies another given FID. This problem can be solved in exponential time (actually it is EXPTIME-complete <ref> [2, 52] </ref>).
Reference: [53] <author> M. Veanes. </author> <title> Uniform representation of recursively enumerable sets with simultaneous rigid E-unification. </title> <type> Technical Report 126, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: See the survey paper by Degtyarev, Gurevich and Voronkov [8] for the impact of this undecidability result on the automated theorem proving community. Further implications are studied by Veanes <ref> [53] </ref>, and Gurevich and Veanes [25]. The computational complexities of the problems studied in this report and of closely related problems is summarized in Table 1.
Reference: [54] <author> W. Wechler. </author> <title> Universal Algebra for Computer Scientists, </title> <booktitle> volume 25 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year> <month> 23 </month>
Reference-contexts: More generally, it is the problem of deciding if, given a finite algebra, a subset of its universe and an element in it, this element is in the subalgebra generated by the given subset [31]. (See for example Wechler <ref> [54] </ref> for definitions.) Actually, as we will see, generability is basically the same problem as nonemptiness of DTAs. In the following proof it is easily seen that all reductions can be carried out within logarithmic space, assuming reasonable representations of the problems, and we will not mention that explicitly.
References-found: 54

