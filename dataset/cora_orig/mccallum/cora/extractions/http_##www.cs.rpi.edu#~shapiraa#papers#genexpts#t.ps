URL: http://www.cs.rpi.edu/~shapiraa/papers/genexpts/t.ps
Refering-URL: http://www.cs.rpi.edu/~shapiraa/papers/windex.html
Root-URL: http://www.cs.rpi.edu
Title: Experiments on the Generation of Distinguishing N-Tuples for Selected Character Dichotomies  
Author: Andrew Shapira 
Date: December 22, 1995  
Address: Troy, NY 12180  
Affiliation: ECSE Department Rensselaer Polytechnic Institute  
Pubnum: Technical Report No. ECSE-OCR-18DEC95  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Jung and M. Krishnamoorthy and G. Nagy and A. Shapira, </author> <title> "N-Tuple Features for OCR Revisited," </title> <journal> Submitted to IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <year> 1995. </year> <month> 14 </month>
Reference-contexts: 1 Introduction This report is a companion to <ref> [1] </ref>. In the present document, we describe experiments on generating n-tuples for optical character recognition. The focus is on the generation process itself, and not the use of the generated tuples. The experiments were conducted at Rensselaer during late January, 1995. An outline of the report is as follows. <p> An outline of the report is as follows. In Section 2 we describe the experiments. The presentation of the experiment data is explained in Section 3. Section 4 contains some discussion. The experiment data is presented in Appendix A. This report assumes familiarity with <ref> [1] </ref>. Additional information regarding the generators, and further discussion of the experiments, may be found there. 1 2 2 Description of Experiments We consider the generation of n-tuples using two generators, called Gen0 and Gen1. Gen0 is a simple backtracking algorithm. Gen1 is a more sophisticated backtracking algorithm. <p> In some cases, weeks of CPU time were spent determining whether a solution exists for a given (p; q) pair. The procedure for determining optimal values was independent of the C-like pseudocode in Section 2. This procedure followed the staircase pattern described in <ref> [1] </ref>. For example, in Table 1, to find the optimal values, the generator traversed (p; q) pairs in the following order: (1; 2), (2; 2), (2; 3), (3; 3), (4; 3), (5; 3), , (11; 3), (12; 3). <p> Another reason is that the tuples away from p = 1; q = n 1 are the ones that are most desirable for OCR <ref> [1] </ref>. Examination of the tables shows that for the difficult problems as defined above, Gen1 finds solutions faster and over a wider range than Gen0. For the "easy" problems, Gen0 does better. It is instructive to examine why Gen0 does better than Gen1 on easy problems.
References-found: 1

