URL: http://www.cs.princeton.edu/~funk/gi96.ps.gz
Refering-URL: http://www.cs.princeton.edu/~funk/
Root-URL: http://www.cs.princeton.edu
Title: Database Management for Interactive Display of Large Architectural Models  
Author: Thomas A. Funkhouser 
Keyword: Key Words: Interactive Visualization, Database Systems, Computer-Aided Architectural Design.  
Address: Murray Hill, NJ  
Affiliation: AT&T Bell Laboratories  
Abstract: This paper describes algorithms for predictive database management used in The UC Berkeley Building Walkthrough System. The algorithms forecast a range of possible observer viewpoints during upcoming frames and use precomputed cell visibility information to determine a set of objects likely to be visible to the observer in the near future. For each of these objects, detail elision techniques determine which levels of detail must be stored in a memory resident cache. Cache management algorithms determine which objects to load into memory from disk, and which to replace when the cache is full. Using these algorithms, the system is able to maintain real-time frame rates during interactive visualization of large building models with furniture and radiosity illumination. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M., John H. Rohlf, and Frederick P. Brooks, Jr. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: However, to the author's knowledge, none of them employs sophisticated memory management algorithms, and none supports models larger than fit in memory. The UNC Building Walkthrough System [3] provided much inspiration for this work, including ideas on spatial subdivisions and cell-to-cell visibility precomputation <ref> [1] </ref>. However, it too supports only memory resident models. 3 System Overview The UC Berkeley Building Walkthrough System simulates an observer moving through a 3D building model under interactive user control [10].
Reference: [2] <author> Bechtel, Inc. WALKTHRU: </author> <title> 3D Animation and Visualization System. Promotional literature, </title> <year> 1991. </year>
Reference-contexts: The observer may step in any direction, or spin around quickly. Therefore, many of the optimizations used by vehicle simulators based on assumptions of observer navigation are not possible in a building walk-through system. Commercial products for visualization of architectural models are now readily available <ref> [2, 15] </ref>. However, to the author's knowledge, none of them employs sophisticated memory management algorithms, and none supports models larger than fit in memory. The UNC Building Walkthrough System [3] provided much inspiration for this work, including ideas on spatial subdivisions and cell-to-cell visibility precomputation [1].
Reference: [3] <author> Brooks, Jr., Frederick P. </author> <title> Walkthrough A Dynamic Graphics System for Simulating Virtual Buildings. </title> <booktitle> Proceedings of the 1986 Workshop on Interactive 3D Graphics. </booktitle>
Reference-contexts: Commercial products for visualization of architectural models are now readily available [2, 15]. However, to the author's knowledge, none of them employs sophisticated memory management algorithms, and none supports models larger than fit in memory. The UNC Building Walkthrough System <ref> [3] </ref> provided much inspiration for this work, including ideas on spatial subdivisions and cell-to-cell visibility precomputation [1]. However, it too supports only memory resident models. 3 System Overview The UC Berkeley Building Walkthrough System simulates an observer moving through a 3D building model under interactive user control [10].
Reference: [4] <author> Clark, James H. </author> <title> Hierarchical Geometric Models for Visible Surface Algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 19, </volume> <month> 10 (October </month> <year> 1976), </year> <pages> 547-554. </pages>
Reference-contexts: Prior to execution, an efficient display database is constructed for the architectural model [9]. The display database describes the model as a set of objects, each of which can be represented at multiple levels of detail (LODs) <ref> [4] </ref>. It also contains a spatial subdivision constructed by partitioning space into cells split by the major, axis-aligned polygons of the building model (e.g., walls, ceilings, and floors).
Reference: [5] <author> Deyo, R. J., J. A. Briggs, and P. Doenges. </author> <title> Getting Graphics in Gear: Graphics and Dynamics in Driving Simulation. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '88), </booktitle> <volume> 24, </volume> <month> 4 (July </month> <year> 1988), </year> <pages> 317-326. </pages>
Reference-contexts: The results are followed by a brief discussion and conclusion. 2 Related Work There has been a considerable amount of work in interactive visualization of 3D models for computer-aided design and vehicle simulation systems <ref> [5, 7] </ref>. Although some systems support real-time database management, little has been published on this topic since most systems are proprietary. Vehicle simulation systems often use quadtrees to represent terrain models and load patches of terrain within the viewer frustum at appropriate resolutions based on viewing distance [12, 16].
Reference: [6] <author> Dijksta, </author> <title> E.W. A Note on Two Problems in Con-nexion with Graphs. </title> <type> Numerische Mathematik 1, </type> <year> 1959, </year> <pages> 269-271. </pages>
Reference-contexts: During each frame, we compute a set of range cells, R, that cumulatively contain the observer range by performing a shortest path search of the cell adjacency graph. The search, implemented using Dijkstra's method <ref> [6] </ref>, adds cells to the range set in order of minimum number of frames before the observer can enter the cell.
Reference: [7] <author> Evans and Sutherland Computer Corporation. ESIG:4000, Promotional literature, </author> <year> 1993. </year>
Reference-contexts: The results are followed by a brief discussion and conclusion. 2 Related Work There has been a considerable amount of work in interactive visualization of 3D models for computer-aided design and vehicle simulation systems <ref> [5, 7] </ref>. Although some systems support real-time database management, little has been published on this topic since most systems are proprietary. Vehicle simulation systems often use quadtrees to represent terrain models and load patches of terrain within the viewer frustum at appropriate resolutions based on viewing distance [12, 16].
Reference: [8] <author> Funkhouser, Thomas A., and Carlo H. Sequin. </author> <title> Adaptive Display Algorithm for Interactive Frame Rates During Visualization of Complex Virtual Environments. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '93), </booktitle> <month> (August </month> <year> 1993), </year> <month> 247-254.. </month>
Reference-contexts: A static screen area threshold (pixels/polygon) is used to bound LODs, and then an optimization algorithm is used to possibly further reduce LODs used for some objects in order to maintain a bounded frame rate <ref> [8] </ref>. Finally, rendering commands are sent to the graphics workstation to display the potentially visible objects with the chosen levels of detail. subset of its cell's visibility (stipple). The operations in the lower fork of the walk-through pipeline perform database management.
Reference: [9] <author> Funkhouser, Thomas A. </author> <title> Database and Display Algorithms for Interactive Visualization of Architectural Models. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1993. </year> <note> Also available as UC Berkeley technical report UCB/CSD-93-771. </note>
Reference-contexts: The goal is to render the model as seen from the observer viewpoint in a window on the workstation display at interactive frame rates as the user moves the observer viewpoint through the model. Prior to execution, an efficient display database is constructed for the architectural model <ref> [9] </ref>. The display database describes the model as a set of objects, each of which can be represented at multiple levels of detail (LODs) [4].
Reference: [10] <author> Funkhouser, Thomas A., Seth Teller, Carlo Sequin, and Delnaz Khorramabadi. </author> <title> The UC Berkeley System for Interactive Visualization of Large Architectural Models. </title> <journal> Presence, </journal> <volume> 5, 1, </volume> <month> January, </month> <year> 1996. </year>
Reference-contexts: However, it too supports only memory resident models. 3 System Overview The UC Berkeley Building Walkthrough System simulates an observer moving through a 3D building model under interactive user control <ref> [10] </ref>. The goal is to render the model as seen from the observer viewpoint in a window on the workstation display at interactive frame rates as the user moves the observer viewpoint through the model. Prior to execution, an efficient display database is constructed for the architectural model [9].
Reference: [11] <author> Goral, Cindy M., Kenneth E. Torrance, Donald P. Greenberg, and Bennett Battaile. </author> <title> Modeling the Interaction of Light Between Diffuse Surfaces. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '84), </booktitle> <volume> 18, </volume> <month> 3 (July </month> <year> 1984), </year> <pages> 213-222. </pages>
Reference-contexts: As a result, visual simulation and verification of an architectural design may be performed early in the design cycle, thereby saving time and money. Radiosity methods <ref> [11] </ref> are often used to perform lighting simulations of building interiors. The advantage of radiosity methods for interactive visualization is that they are able to model physically realistic indirect diffuse illumination and shadows, and therefore generate fairly realistic-looking images.
Reference: [12] <author> Schachter, Bruce J. (Ed.). </author> <title> Computer Image Generation. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1983. </year>
Reference-contexts: Although some systems support real-time database management, little has been published on this topic since most systems are proprietary. Vehicle simulation systems often use quadtrees to represent terrain models and load patches of terrain within the viewer frustum at appropriate resolutions based on viewing distance <ref> [12, 16] </ref>. Although there are many similarities between vehicle simulators and building walkthrough systems, there are several important differences. First, building models tend to be more "densely occluded" than terrain environments.
Reference: [13] <author> Teller, Seth J., and Carlo H. Sequin. </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <booktitle> Computer Graphics (Proc. SIGGRAPH '91), </booktitle> <volume> 25, </volume> <month> 4 (August </month> <year> 1991), </year> <pages> 61-69. </pages>
Reference-contexts: For each cell, C, a visibility precomputation is performed that determines which cells (cell-to-cell visibility) and which objects (cell-to-object visibility) are potentially visible to any observer in C <ref> [13, 14] </ref>. Execution during an interactive walkthrough proceeds as diagrammed in Figure 2. In every frame, the system performs seven operations, each of which can run asynchronously in a separate concurrent process in a two-forked pipeline.
Reference: [14] <author> Teller, Seth J. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1992. </year> <note> Also available as UC Berkeley technical report UCB/CSD-92-708. </note>
Reference-contexts: For each cell, C, a visibility precomputation is performed that determines which cells (cell-to-cell visibility) and which objects (cell-to-object visibility) are potentially visible to any observer in C <ref> [13, 14] </ref>. Execution during an interactive walkthrough proceeds as diagrammed in Figure 2. In every frame, the system performs seven operations, each of which can run asynchronously in a separate concurrent process in a two-forked pipeline.
Reference: [15] <author> Virtus Walkthrough. Promotional literature, </author> <year> 1991. </year>
Reference-contexts: The observer may step in any direction, or spin around quickly. Therefore, many of the optimizations used by vehicle simulators based on assumptions of observer navigation are not possible in a building walk-through system. Commercial products for visualization of architectural models are now readily available <ref> [2, 15] </ref>. However, to the author's knowledge, none of them employs sophisticated memory management algorithms, and none supports models larger than fit in memory. The UNC Building Walkthrough System [3] provided much inspiration for this work, including ideas on spatial subdivisions and cell-to-cell visibility precomputation [1].
Reference: [16] <author> Zyda, Michael J., David R. Pratt, James G. Monahan, and Kalin P. Wilson. NPSNET: </author> <title> Constructing a 3D virtual world. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <month> March, </month> <year> 1992. </year>
Reference-contexts: Although some systems support real-time database management, little has been published on this topic since most systems are proprietary. Vehicle simulation systems often use quadtrees to represent terrain models and load patches of terrain within the viewer frustum at appropriate resolutions based on viewing distance <ref> [12, 16] </ref>. Although there are many similarities between vehicle simulators and building walkthrough systems, there are several important differences. First, building models tend to be more "densely occluded" than terrain environments.
References-found: 16

