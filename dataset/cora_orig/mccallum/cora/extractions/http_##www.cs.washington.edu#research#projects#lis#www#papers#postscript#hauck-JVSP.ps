URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hauck-JVSP.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: 
Title: of VLSI Signal Processing. Mesh Routing Topologies For Multi-FPGA Systems  
Author: Scott Hauck, Gaetano Borriello, Carl Ebeling 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: submitted to Journal  
Abstract: There is currently great interest in using fixed arrays of FPGAs for logic emulators, custom computing devices, and software accelerators. An important part of designing such a system is determining the proper routing topology to use to interconnect the FPGAs. This topology can have a great effect on the area and delay of the resulting system. Tree, Bipartite Graph, and Mesh interconnection schemes have all been proposed for use in FPGA-based systems. In this paper we examine Mesh interconnection schemes, and propose several constructs for more efficient topologies. These reduce inter-chip delays by more than 60% over the basic 4-way Mesh.
Abstract-found: 1
Intro-found: 1
Reference: [Aptix93] <institution> Aptix Data Book, Aptix Corporation, </institution> <address> San Jose, CA, </address> <year> 1993. </year>
Reference: [Babb93] <author> J. Babb, R. Tessier, A. Agarwal, </author> <title> "Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators", </title> <booktitle> IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1993, </year> <pages> pp. 142-151. </pages>
Reference-contexts: Mesh connections are scalable, and may have better utilization than the other structures, but have even worse routing predictability. Although Mesh topologies seem to be falling out of favor due to perceived pin limitations, new techniques such as Virtual Wires <ref> [Babb93] </ref> and future high-I/O FPGA packages make Meshes a very viable alternative. Also, in applications with a great deal of structure and local communication, like that found in DSP processing tasks, automatic software may be able to exploit this information to generate even more efficient mappings.
Reference: [Bertin93] <author> P. Bertin, D. Roncin, J. Vuillemin, </author> <title> "Programmable Active Memories: a Performance Assessment", </title> <booktitle> Research on Integrated Systems: Proceedings of the 1993 Symposium, </booktitle> <year> 1993, </year> <month> pp.88-102. </month>
Reference-contexts: Logic emulation tasks, in which ASIC designs are simulated on large FPGA-based structures [Butts92], have greatly increased simulation speeds. Software subroutines have been hand-optimized to FPGAs to speed up inner loops of programs <ref> [Bertin93] </ref>, and work has been done to automate this process [Wazlowski93]. FPGA-based circuit implementation boards have been built for easier project construction in electronics education [Chan92]. The potential future applications are large and varied. <p> Several routing hierarchies have been used in recent FPGA-based systems. A Mesh structure, where the FPGAs are laid out in a two-dimensional grid, with an FPGA connected only to its four nearest neighbors, is employed in the PAM <ref> [Bertin93] </ref> software accelerator. A board being developed at MIT incorporates Mesh connections with routing similar to Superpins (described later in this paper)[Tessier93].
Reference: [Butts92] <author> M. Butts, J. Batcheller, J. Varghese, </author> <title> "An Efficient Logic Emulation System", </title> <booktitle> Proceedings of ICCD, </booktitle> <year> 1992, </year> <pages> pp. 138-141. </pages>
Reference-contexts: Introduction In the time since they were introduced, FPGAs have moved from being viewed simply as a method of implementing random logic in circuit boards to being a flexible implementation medium for many types of systems. Logic emulation tasks, in which ASIC designs are simulated on large FPGA-based structures <ref> [Butts92] </ref>, have greatly increased simulation speeds. Software subroutines have been hand-optimized to FPGAs to speed up inner loops of programs [Bertin93], and work has been done to automate this process [Wazlowski93]. FPGA-based circuit implementation boards have been built for easier project construction in electronics education [Chan92]. <p> A board being developed at MIT incorporates Mesh connections with routing similar to Superpins (described later in this paper)[Tessier93]. The Quickturn RPM <ref> [Butts92] </ref> logic emulator uses a hierarchy of partial crossbars, or Bipartite Graphs (However, the hierarchy is actually similar to a Tree, making the RPM a Tree of Bipartite Graphs).
Reference: [Chan93] <author> P. K. Chan, M. D. F. Schlag, </author> <booktitle> "Architectural Tradeoffs in Field-Programmable-Device-Based Computing Systems", IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1993, </year> <pages> pp. 152-161. </pages>
Reference: [Chan92] <author> P. K. Chan, M. Schlag, M. Martin, "BORG: </author> <title> A Reconfigurable Prototyping Board Using Field Programmable Gate Arrays", </title> <booktitle> Proceedings of the 1st International ACM/SIGDA Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1992, </year> <pages> pp. 47-51. </pages>
Reference-contexts: Software subroutines have been hand-optimized to FPGAs to speed up inner loops of programs [Bertin93], and work has been done to automate this process [Wazlowski93]. FPGA-based circuit implementation boards have been built for easier project construction in electronics education <ref> [Chan92] </ref>. The potential future applications are large and varied. FPGAs form an ideal implementation medium for fine-grained, repeated calculations, such as those found in DSP, image processing, and data compression tasks. <p> The Quickturn RPM [Butts92] logic emulator uses a hierarchy of partial crossbars, or Bipartite Graphs (However, the hierarchy is actually similar to a Tree, making the RPM a Tree of Bipartite Graphs). The BORG board <ref> [Chan92] </ref>, designed for use in electronics education, uses a Bipartite Graph, where half the FPGAs are used for logic, and half for routing only.
Reference: [Hauck94a] <author> S. Hauck, G. Borriello, C. Ebeling, </author> <title> Mesh Routing Topologies for FPGA Arrays, </title> <booktitle> 2nd International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1994. </year>
Reference-contexts: It is possible to generate even better topologies by using several different permutations in a single system. As described in <ref> [Hauck94a] </ref>, having different permutations in different directions (i.e. one for paths leading east, another for paths leading south) takes advantage of reconvergent paths (i.e. the path leading east then south arrives at the same FPGA as the path leading south then east), having the short routes along one path leading to <p> However, in our experience several different permutations yield at most a 1% improvement in routing costs, and some of these benefits would probably not be realizable by automatic mapping software. In <ref> [Hauck94a] </ref> we presented a lower bound on the quality of permutations. Unfortunately, we do not have a simple, deterministic construction method for finding optimum permutations. However, it is fairly easy to write a simple simulated annealing program for permutations which gives very good results.
Reference: [Hauck94b] <author> S. Hauck, G. Borriello, C. Ebeling, </author> <title> Pin Assignment for Multi-FPGA Systems, </title> <booktitle> 1994 IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1994. </year>
Reference-contexts: We have developed a pin assignment tool (similar to a detailed router) for inter-FPGA routing <ref> [Hauck94b] </ref>, and the only impact of the improved topologies on this tool is the loss of a slight speed optimization opportunity. Decomposition and partitioning tools are also easily adapted, since the locality needed for Mesh circuits is still the primary concern, though the number of closest neighbors is increased.
Reference: [McMurchie94] <author> L. McMurchie, C. Ebeling, G. Borriello, </author> <title> An Iterative, </title> <institution> Performace-Driven Router for FPGAs, University of Washington, Dept. of Computer Science & Engineering Internal Report, </institution> <year> 1994. </year>
Reference-contexts: To measure this resource conflict, we have used the router we developed for the Triptych FPGA project <ref> [McMurchie94] </ref>, which can be retargeted to different domains by altering a routing resource template. This router optimizes both area utilization and delay, making it a good experimental platform for this domain.
Reference: [Tessier94] <author> R. Tessier, J. Babb, M. Dahl, S. Hanono, A. Agarwal, </author> <title> The Virtual Wire Emulation System: A Gate Efficient ASIC Prototyping Environment, </title> <type> FPGA 94, </type> <year> 1994. </year>
Reference: [Wazlowski93] <author> M. Wazlowski, L. Agarwal, T. Lee, A. Smith, E. Lam, P. Athanas, H. Silverman, S. Ghosh, </author> <title> "PRISM-II Compiler and Architecture", </title> <booktitle> IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1993, </year> <pages> pp. 9-16. </pages>
Reference-contexts: Logic emulation tasks, in which ASIC designs are simulated on large FPGA-based structures [Butts92], have greatly increased simulation speeds. Software subroutines have been hand-optimized to FPGAs to speed up inner loops of programs [Bertin93], and work has been done to automate this process <ref> [Wazlowski93] </ref>. FPGA-based circuit implementation boards have been built for easier project construction in electronics education [Chan92]. The potential future applications are large and varied. FPGAs form an ideal implementation medium for fine-grained, repeated calculations, such as those found in DSP, image processing, and data compression tasks.
References-found: 11

