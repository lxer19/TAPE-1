URL: http://www.cs.utah.edu/~luli/nasa93paper.ps
Refering-URL: http://www.cs.utah.edu/~luli/nasa93.html
Root-URL: 
Note: This is a blank page.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Actel Corporation. </author> <title> ACT Family Field Programmable Gate Array Databook, </title> <month> March </month> <year> 1991. </year>
Reference-contexts: Output data are latched, and so remain valid until the next FIR computation starts. For historical reasons, this module obeys a four-phase synchronous self-timed protocol. 4.2 Implementation Details A prototype version of the mixed asynchronous-synchronous FIR filter has been designed for implementation in Actel FPGAs <ref> [1] </ref>. It was built and functionally simulated using the asynchronous macro cells described in [6] and the synchronous parts provided as Actel Macro Library soft macros, and contains 640 logic modules. Q-flops used in the interface are not available as standard digital parts. <p> Although Q-flops cannot be built using FPGAs because it is not possible to implement the required analog comparator circuit, we have designed circuits that mimic the behavior of a Q-flop using Actel FPGAs [6]. These FPGA circuits use a fixed delay to resolve metastability <ref> [1] </ref> and so are not value-safe, but they allow us to prototype designs quickly that can then be upgraded to use custom Q-flops as required. We have built and tested actual Q-flops in a variety of technologies including CMOS [5, 11], and Gallium Arsenide [7].
Reference: [2] <author> Naser Awad and David Smith. </author> <title> Automatic interfacing of synchronous modules to an asynchronous environment. </title> <booktitle> In International VLSI Conference, </booktitle> <year> 1991. </year>
Reference-contexts: Evidence for this is the number of interface specification systems that completely disregard this issue. For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs <ref> [2, 4, 13] </ref>, or only handle signals related to the same clock internally or externally [12, 18, 21]. <p> Value-safety is assured. Chapiro [9] has done studies that indicate clock speeds can actually be increased, now that synchronization delay can be "dynamically adapting". In contrast to other recent work <ref> [2] </ref>, no redesign of the synchronous part is required to accommodate it in the globally asynchronous self-timed environment. This makes the method especially suitable for correctly including previously designed synchronous parts in mixed systems. There are many kinds of mixed systems where these interfaces can be used.
Reference: [3] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> Chapter 8. </note>
Reference-contexts: the method and indicate future extensions to this work. 2 Mixed Systems Combining Asynchronous and Syn chronous Regions As system sizes and circuit technology speeds increase, it becomes more difficult to satisfy the high frequency clock requirements of robust, hazard- and race-free clock schemes and small skew global clock distribution <ref> [3] </ref>. Using autonomous locally clocked and/or asynchronous subsystems can facilitate large system design. As a corollary, global communication requirements are reduced since most communications can be localized.
Reference: [4] <author> Gaetano Borriello. </author> <title> Specification and synthesis of interface logic. </title> <editor> In R. Camposano and W. Wolf, editors, </editor> <booktitle> High-Level VLSI Synthesis, chapter 7, </booktitle> <pages> pages 153-177. </pages> <year> 1991. </year>
Reference-contexts: Evidence for this is the number of interface specification systems that completely disregard this issue. For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs <ref> [2, 4, 13] </ref>, or only handle signals related to the same clock internally or externally [12, 18, 21].
Reference: [5] <author> Erik Brunvand. Parts-r-us. </author> <title> a chip aparts(s): </title> : :. <type> Technical Report CMU-CS-87-119, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: These FPGA circuits use a fixed delay to resolve metastability [1] and so are not value-safe, but they allow us to prototype designs quickly that can then be upgraded to use custom Q-flops as required. We have built and tested actual Q-flops in a variety of technologies including CMOS <ref> [5, 11] </ref>, and Gallium Arsenide [7]. The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries [5, 7, 8, 19, 24, 26]. <p> The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24].
Reference: [6] <author> Erik Brunvand. </author> <title> A cell set for self-timed design using actel FPGAs. </title> <type> Technical Report UUCS-91-013, </type> <institution> University of Utah, </institution> <year> 1991. </year> <month> 10 </month>
Reference-contexts: For historical reasons, this module obeys a four-phase synchronous self-timed protocol. 4.2 Implementation Details A prototype version of the mixed asynchronous-synchronous FIR filter has been designed for implementation in Actel FPGAs [1]. It was built and functionally simulated using the asynchronous macro cells described in <ref> [6] </ref> and the synchronous parts provided as Actel Macro Library soft macros, and contains 640 logic modules. Q-flops used in the interface are not available as standard digital parts. <p> Q-flops used in the interface are not available as standard digital parts. Although Q-flops cannot be built using FPGAs because it is not possible to implement the required analog comparator circuit, we have designed circuits that mimic the behavior of a Q-flop using Actel FPGAs <ref> [6] </ref>. These FPGA circuits use a fixed delay to resolve metastability [1] and so are not value-safe, but they allow us to prototype designs quickly that can then be upgraded to use custom Q-flops as required.
Reference: [7] <author> Erik Brunvand, Nick Michell, and Kent Smith. </author> <title> A comparison of self-timed design using FPGA, CMOS, </title> <booktitle> and GaAs technologies. In International Conference on Computer Design, </booktitle> <address> Cambridge, Mass., </address> <month> October </month> <year> 1992. </year>
Reference-contexts: We have built and tested actual Q-flops in a variety of technologies including CMOS [5, 11], and Gallium Arsenide <ref> [7] </ref>. The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries [5, 7, 8, 19, 24, 26]. <p> The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24].
Reference: [8] <author> Erik Brunvand and Robert F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In ICCAD-89, </booktitle> <pages> pages 262-265. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1989. </year>
Reference-contexts: The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24].
Reference: [9] <author> Daniel M. Chapiro. </author> <title> Globally-Asynchronous Locally-Synchronous Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> October </month> <year> 1984. </year>
Reference-contexts: One approach involves designing globally asynchronous, locally synchronous systems (hereafter called "mixed systems"). We use Q-module-based interface/clock generation elements as shown in Figure 1 and described in Section 3 to safely coordinate and synchronize interactions between the different regions in these mixed systems. Unlike other value-reliable <ref> [9] </ref> synchronization circuits such as stretchable or stoppable clock methods, Q-modules (internally clocked, delay insensitive circuits) conform naturally to the self-timed asynchronous design style that we advocate in our asynchronous systems research. <p> For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input. <p> For circuits that operate using this restricted interface model, this scheme avoids metastability because it avoids sampling a changing signal. However, stoppable clock circuits require careful delay analysis in their design to ensure correct circuit operation <ref> [9, 31] </ref>. Often redesign of the synchronous part itself is required as well. Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. <p> Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. Stretchable clock circuits can be used in the more general case when neither the value nor the arrival time of the incoming asynchronous signal is known in advance. In stretchable clock circuits <ref> [9, 10, 22, 28] </ref>, a comparator-based metastability detector is used to delay the next clock edge when a potentially changing input is sampled. <p> Value-safety is assured. Chapiro <ref> [9] </ref> has done studies that indicate clock speeds can actually be increased, now that synchronization delay can be "dynamically adapting". In contrast to other recent work [2], no redesign of the synchronous part is required to accommodate it in the globally asynchronous self-timed environment.
Reference: [10] <author> Daniel M. Chapiro. </author> <title> Reliable high-speed arbitration and synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(10):1251-1255, </volume> <month> October </month> <year> 1987. </year>
Reference-contexts: Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. Stretchable clock circuits can be used in the more general case when neither the value nor the arrival time of the incoming asynchronous signal is known in advance. In stretchable clock circuits <ref> [9, 10, 22, 28] </ref>, a comparator-based metastability detector is used to delay the next clock edge when a potentially changing input is sampled.
Reference: [11] <author> Ganesh Gopalakrishnan and Luli Josephson. </author> <title> Towards amalgamating the synchronous and asynchronous styles. In Tau 93: </title> <booktitle> 1993 Workshop on Timing Issues in Specification and Synthesis of Digital Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: For this very simple interface, no additional logic or state-holding Q-flops are required. This is not usually the case. We are working on more complicated examples where state information and feedback within the Q-module are required <ref> [11, 16] </ref>. 8 The synchronous computation unit Synch consists of five adders and three synchronous multipliers. The multipliers have data-dependent completion times, so the number of cycles for each FIR computation will vary. Output data are latched, and so remain valid until the next FIR computation starts. <p> These FPGA circuits use a fixed delay to resolve metastability [1] and so are not value-safe, but they allow us to prototype designs quickly that can then be upgraded to use custom Q-flops as required. We have built and tested actual Q-flops in a variety of technologies including CMOS <ref> [5, 11] </ref>, and Gallium Arsenide [7]. The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries [5, 7, 8, 19, 24, 26]. <p> Yet another example involves connecting synchronous analog-to-digital input converters and digital-to-analog output converters to an asynchronous neural net classifier system [14, 15] also being constructed in our lab. The issues involved in successfully combining more than two systems using these interfaces are being explored, as described in <ref> [11] </ref>. For a variety of reasons, including limitations in current asynchronous design tools, designing completely asynchronous circuits may not always be practical or desirable.
Reference: [12] <author> M.R. Greenstreet and K. Li. </author> <title> Simple hardware for fast interprocessor communication. </title> <type> Technical Report CS-Tr-242-90, </type> <institution> Princeton University, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs [2, 4, 13], or only handle signals related to the same clock internally or externally <ref> [12, 18, 21] </ref>. For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability.
Reference: [13] <author> S. Hayati and A. Parker. </author> <title> Automatic production of controller specifications from control and timing behavioral descriptions. </title> <booktitle> In Proceedings of the 26th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 75-80, </pages> <year> 1989. </year>
Reference-contexts: Evidence for this is the number of interface specification systems that completely disregard this issue. For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs <ref> [2, 4, 13] </ref>, or only handle signals related to the same clock internally or externally [12, 18, 21].
Reference: [14] <author> John F. Hurdle. </author> <title> Self-timed neural model implementation: an example using CMAC. </title> <booktitle> In Proceedings of the 26th Hawaii International Conference on Systems Science, </booktitle> <pages> pages 369-378, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: One system-size example we are working on in our lab [16] is interfacing a synchronous off-the-shelf math coprocessor chip to a fully self-timed asynchronous microprocessor [23]. Yet another example involves connecting synchronous analog-to-digital input converters and digital-to-analog output converters to an asynchronous neural net classifier system <ref> [14, 15] </ref> also being constructed in our lab. The issues involved in successfully combining more than two systems using these interfaces are being explored, as described in [11].
Reference: [15] <author> John F. Hurdle, Luli Josephson, Erik L. Brunvand, and Ganesh Gopalakrishnan. </author> <title> Asynchronous models for large scale neurocomputing applications. </title> <editor> In Jean-Claude Rault, editor, </editor> <booktitle> Neural Nimes 92: Proceedings of the Fifth International Conference on Neural Networks and their Applications. </booktitle> <year> 1992. </year>
Reference-contexts: One system-size example we are working on in our lab [16] is interfacing a synchronous off-the-shelf math coprocessor chip to a fully self-timed asynchronous microprocessor [23]. Yet another example involves connecting synchronous analog-to-digital input converters and digital-to-analog output converters to an asynchronous neural net classifier system <ref> [14, 15] </ref> also being constructed in our lab. The issues involved in successfully combining more than two systems using these interfaces are being explored, as described in [11].
Reference: [16] <author> Luli Josephson. </author> <title> Mixed asynchronous and synchronous circuits. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of Utah, </institution> <year> 1993. </year> <note> In preparation. </note>
Reference-contexts: For this very simple interface, no additional logic or state-holding Q-flops are required. This is not usually the case. We are working on more complicated examples where state information and feedback within the Q-module are required <ref> [11, 16] </ref>. 8 The synchronous computation unit Synch consists of five adders and three synchronous multipliers. The multipliers have data-dependent completion times, so the number of cycles for each FIR computation will vary. Output data are latched, and so remain valid until the next FIR computation starts. <p> Our technique could be used in both of these applications. The FIR is a small mixed-system demonstration circuit. As asynchronous systems evolve in size, such an approach will become a necessity until suitable asynchronous computation components are commonly available. One system-size example we are working on in our lab <ref> [16] </ref> is interfacing a synchronous off-the-shelf math coprocessor chip to a fully self-timed asynchronous microprocessor [23]. Yet another example involves connecting synchronous analog-to-digital input converters and digital-to-analog output converters to an asynchronous neural net classifier system [14, 15] also being constructed in our lab.
Reference: [17] <author> Lindsay Kleeman and Antonio Cantoni. </author> <title> Metastable behavior in digital systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pages 4-19, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Conversely, the longer one waits before using the sampled data, the lower the probability of synchronizer failure. Conventional techniques for decreasing the probability of metastable failure <ref> [17, 20] </ref> include using fast devices, allowing for extended settling times, and employing masking and redundancy. These techniques all amount to allowing a long but bounded amount of time for metastability to resolve, accepting the finite probability that failures will occur.
Reference: [18] <author> David Ku. </author> <title> Constrained Synthesis and Optimization of Digital Integrated Circuits from Behavioral Specifications. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs [2, 4, 13], or only handle signals related to the same clock internally or externally <ref> [12, 18, 21] </ref>. For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability.
Reference: [19] <author> C. E. Molnar, T. P. Feng, and F. U. Rosenberger. </author> <title> Synthesis of dely-insensitive modules. </title> <booktitle> In Proc. 1985 Chapel Hill Conference on Very Large Scale Integration. </booktitle> <publisher> Computer Science Press, </publisher> <month> March </month> <year> 1985. </year>
Reference-contexts: The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24].
Reference: [20] <author> Bryon I. Moyer. </author> <booktitle> Has the metastability world stabilized? In Proceedings of the Second Annual PLD Design Conference and Exhibit, </booktitle> <year> 1992. </year> <month> April. </month>
Reference-contexts: Conversely, the longer one waits before using the sampled data, the lower the probability of synchronizer failure. Conventional techniques for decreasing the probability of metastable failure <ref> [17, 20] </ref> include using fast devices, allowing for extended settling times, and employing masking and redundancy. These techniques all amount to allowing a long but bounded amount of time for metastability to resolve, accepting the finite probability that failures will occur.
Reference: [21] <author> J. A. Nestor and D. E. Thomas. </author> <title> Behavioral synthesis with interfaces. </title> <booktitle> In IEEE International Conference on Computer-Aided Design, ICCAD-86: Digest of Technical Papers, </booktitle> <pages> pages 112-115, </pages> <year> 1986. </year>
Reference-contexts: For example, a range of interface specification methods are being developed in conjunction with several high-level synthesis systems. The implementations synthesized from these descriptions either include conventional synchronizers on the asynchronous inputs [2, 4, 13], or only handle signals related to the same clock internally or externally <ref> [12, 18, 21] </ref>. For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability.
Reference: [22] <author> Miroslav Pechoucek. </author> <title> Anomalous response times of input synchronizers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-25(2):133-139, </volume> <month> February </month> <year> 1976. </year>
Reference-contexts: For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input. <p> Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. Stretchable clock circuits can be used in the more general case when neither the value nor the arrival time of the incoming asynchronous signal is known in advance. In stretchable clock circuits <ref> [9, 10, 22, 28] </ref>, a comparator-based metastability detector is used to delay the next clock edge when a potentially changing input is sampled.
Reference: [23] <author> William F. Richardson and Erik Brunvand. </author> <title> The NSR processor prototype. </title> <type> UUCS Tech Report UUCS-92-029. </type>
Reference-contexts: As asynchronous systems evolve in size, such an approach will become a necessity until suitable asynchronous computation components are commonly available. One system-size example we are working on in our lab [16] is interfacing a synchronous off-the-shelf math coprocessor chip to a fully self-timed asynchronous microprocessor <ref> [23] </ref>. Yet another example involves connecting synchronous analog-to-digital input converters and digital-to-analog output converters to an asynchronous neural net classifier system [14, 15] also being constructed in our lab. The issues involved in successfully combining more than two systems using these interfaces are being explored, as described in [11].
Reference: [24] <author> Fred U. Rosenberger, Charles E. Molnar, Thomas J. Chaney, and Ting-Pein Fang. Q-modules: </author> <title> Internally clocked delay-insensitive modules. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(9) </volume> <pages> 1005-1018, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: In our scheme the special circuitry for detecting these events and for stretching the clock that is delivered to the synchronous part of the system is encapsulated in a Q-flop-based interface, as an extension of Rosenberger's Q-Module organization <ref> [24] </ref>. This provides a very convenient method for interfacing mixed systems as the interface and clock generation is isolated into one special module, and neither the asynchronous nor the synchronous system need be modified internally to accommodate the interface. <p> In stretchable clock circuits [9, 10, 22, 28], a comparator-based metastability detector is used to delay the next clock edge when a potentially changing input is sampled. Again, critical timing conditions must be met in the design and operation <ref> [24] </ref>. 5th NASA Symposium on VLSI Design 1993 5 3 Q-Module-Based Interfaces The goal is to build value-safe interfaces for combining synchronous and asynchronous designs. The main difficulty with the stoppable/stretchable clock based approaches is that they require specialized and somewhat hard-to-build circuits. <p> We implement a stretchable clock interface where the metastabillty detection circuitry is encapsulated in a special module called a Q-module, shown in Figure 1 and described in Rosenberger, et al., <ref> [24] </ref>. Q-modules are internally clocked, delay-insensitive state machines. Data inputs are sampled on one clock event using Q-flops: these special flip-flops use comparator-based circuits to acknowledge when metastability has resolved and values are stable. <p> The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24]. <p> Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in <ref> [24] </ref>. Sutherland and Sproull suggest such an asynchronous state machine built using Q-flops as an asynchronous replacement for a conventional register-based synchronizer plus synchronous state machine in a three port memory controller in [30]. In this paper, we introduce a Q-module-based interface circuit for value-safe synchronization and clock generation.
Reference: [25] <author> Charles L. Seitz. </author> <title> System timing. </title> <editor> In C. Mead and L. Conway, editors, </editor> <title> Introduction to VLSI Systems, chapter 7. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input.
Reference: [26] <author> Robert F. Sproull. </author> <title> Qflop modules. </title> <type> Technical Memo 4472, Sutherland, </type> <institution> Sproull and Associates, </institution> <month> June 10, </month> <year> 1986. </year> <booktitle> 5th NASA Symposium on VLSI Design 1993 11 </booktitle>
Reference-contexts: The next step is to implement the asynchronous parts of this interface design in another technology where the actual analog metastability resolver parts can be used. 5 Results and Future Work Q-flops are found in several circuit libraries <ref> [5, 7, 8, 19, 24, 26] </ref>. Combining Q-flops with control logic to form delay-insensitive state machine modules (Q-modules) has been extensively described by Rosenberger, et al., in [24].
Reference: [27] <author> Robert F. Sproull and Ivan E. Sutherland. </author> <title> Stoppable clock. </title> <type> Technical Memo 3438, Sutherland, </type> <institution> Sproull and Associates, </institution> <month> Jan. 9, </month> <year> 1986. </year>
Reference-contexts: For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input.
Reference: [28] <author> M.J. Stucki and J.R. Cox, Jr. </author> <title> Synchronization strategies. </title> <booktitle> In Proceedings of the Caltech Conference on VLSI, </booktitle> <pages> pages 375-393, </pages> <month> January </month> <year> 1979. </year>
Reference-contexts: For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input. <p> Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. Stretchable clock circuits can be used in the more general case when neither the value nor the arrival time of the incoming asynchronous signal is known in advance. In stretchable clock circuits <ref> [9, 10, 22, 28] </ref>, a comparator-based metastability detector is used to delay the next clock edge when a potentially changing input is sampled.
Reference: [29] <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> CACM, </journal> <volume> 32(6), </volume> <year> 1989. </year>
Reference-contexts: The environment can supply data and use results at any rate as long as the sequence of "send-Req; receive-Ack" is obeyed. The data-fetching part Asynch is an asynchronous shift register with 6 data taps implemented as a Sutherland micropipelined-based FIFO <ref> [29] </ref>. It uses two-phase self-timed control with data-bundling. The Q-module-based interface part Asynch-to-Synch Interface, Figure 4, provides synchronized asynchronous data and the clock for use by the synchronous computation unit.
Reference: [30] <author> Ivan E. Sutherland and Robert F. Sproull. </author> <title> Three port memory. </title> <type> Technical Memo 4497, Sutherland, </type> <institution> Sproull and Associates, </institution> <month> Sept 1, </month> <year> 1986. </year>
Reference-contexts: Sutherland and Sproull suggest such an asynchronous state machine built using Q-flops as an asynchronous replacement for a conventional register-based synchronizer plus synchronous state machine in a three port memory controller in <ref> [30] </ref>. In this paper, we introduce a Q-module-based interface circuit for value-safe synchronization and clock generation.
Reference: [31] <author> Cherrice Ann Traver. </author> <title> A testable model for stoppable clock ASICs. </title> <booktitle> In Proceedings of the Fourth Annual IEEE International ASIC Conference and Exhibit, </booktitle> <pages> pages P6-3.1, </pages> <year> 1991. </year>
Reference-contexts: For high-speed, value-critical system interfaces, these methods cannot guarantee the required combination of value-reliability plus speed. 2.3 Reliable Value Synchronization Methods Alternatively, less conventional methods using stoppable or stretchable clocks trade a degree of time-uncertainty for value-reliability. Stoppable clocks <ref> [9, 22, 25, 27, 28, 31] </ref> can be used for interfacing asynchronous-synchronous circuits communicating via specific protocols and when the synchronous system does not require a continuously running clock. The locally generated clock is stopped synchronously, and the system passively awaits the next asynchronous input. <p> For circuits that operate using this restricted interface model, this scheme avoids metastability because it avoids sampling a changing signal. However, stoppable clock circuits require careful delay analysis in their design to ensure correct circuit operation <ref> [9, 31] </ref>. Often redesign of the synchronous part itself is required as well. Thus stoppable-clock based interface schemes are applicable only in certain restricted cases. <p> This makes the method especially suitable for correctly including previously designed synchronous parts in mixed systems. There are many kinds of mixed systems where these interfaces can be used. This paper describes one example circuit containing asynchronous and synchronous regions that need to synchronize. Traver <ref> [31] </ref> describes a method for interfacing multiple locally-synchronous but mutually-asynchronous circuits. Synchronization problems arise in embedded controllers using synchronous circuits but responding to asynchronous events.
References-found: 31

