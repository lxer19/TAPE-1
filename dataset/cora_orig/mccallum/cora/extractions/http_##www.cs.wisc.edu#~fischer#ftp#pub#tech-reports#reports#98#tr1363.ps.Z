URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/reports/98/tr1363.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/reports/98/
Root-URL: http://www.cs.wisc.edu
Email: cao,zj,kbeach@cs.wisc.edu  
Title: Active Cache: Caching Dynamic Contents (Objects) on the Web  
Author: Pei Cao, Jin Zhang and Kevin Beach 
Address: Madison, WI 53705  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: Dynamic documents (in other words, objects) constitutes an increasing percentage of contents on the Web, and caching dynamic documents becomes an increasingly important issue that affects the scalability of the Web. In this paper, we propose the Active Cache scheme to support caching of dynamic contents at Web proxies. The scheme allows servers to supply cache applets to be attached with documents, and requires proxies to invoke cache applets upon cache hits to furnish the necessary processing without contacting the server. We describe the protocol, interface and security mechanisms of the Active Cache scheme, and illustrate its use via several examples. Through prototype implementation and performance measurements, we show that Active Cache is a feasible scheme that can result in significant network bandwidth savings at the expense of moderate CPU costs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Pei Cao and Sandy Irani. </author> <title> Cost-aware WWW proxy caching algorithms. </title> <booktitle> In Proceedings of the 1997 USENIX Symposium on Internet Technology and Systems, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: To decide whether an object should be cached, the proxy estimates the benefit and the cost of caching, and pass the information to the cache replacement module. A cost-aware cache replacement algorithm is used to decide whether an active object is cached, for example, the GreedyDual-Size algorithm <ref> [1] </ref>. The benefit of caching is calculated in terms of saved network bandwidth, estimated by the size of the response to each client request.
Reference: [2] <institution> Javasoft Inc. </institution> <note> The jar guide. http://www.javasoft.com/products/jar/, 1997. </note>
Reference-contexts: It specifies that the applet "code.class" at code base "codebase url" is the cache applet for the document, and associated classes are grouped in an archive <ref> [2] </ref>. Codebase and archive directives are optional.
Reference: [3] <author> Netscape Inc. </author> <title> Generating dynamic html documents. </title> <note> http://www.netscapeworld.com/nw-05-1997/nw-05-clue.html, 1997. </note>
Reference-contexts: It also allows schemes such as Pointcast [4] to not have to write its own proxy servers, and support broadcasting schemes such as SkyCache [5]. 2.2.5 Server-Side Include Expansion Similar to the ad-banner-rotation applet, another applet allows expansion of Server-Side Include (SSI) <ref> [3] </ref> variables at the proxy site, thus allowing the correct caching of SSI-based dynamic documents. The applet scans the cached document, and for each specially marked SSI variable, update the value of the variable in the document, and put the new document in New File.
Reference: [4] <institution> Pointcast Inc. </institution> <address> Redistribute pointcast. http://pioneer.pointcast.com/company/isp overview.html, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: For a proxy with a large client population, the savings in network bandwidth can be significant. It also allows schemes such as Pointcast <ref> [4] </ref> to not have to write its own proxy servers, and support broadcasting schemes such as SkyCache [5]. 2.2.5 Server-Side Include Expansion Similar to the ad-banner-rotation applet, another applet allows expansion of Server-Side Include (SSI) [3] variables at the proxy site, thus allowing the correct caching of SSI-based dynamic documents.
Reference: [5] <author> SkyCache Inc. </author> <title> Skycache solutions. </title> <address> http://www.skycache.com/, March 1998. </address>
Reference-contexts: For a proxy with a large client population, the savings in network bandwidth can be significant. It also allows schemes such as Pointcast [4] to not have to write its own proxy servers, and support broadcasting schemes such as SkyCache <ref> [5] </ref>. 2.2.5 Server-Side Include Expansion Similar to the ad-banner-rotation applet, another applet allows expansion of Server-Side Include (SSI) [3] variables at the proxy site, thus allowing the correct caching of SSI-based dynamic documents.
Reference: [6] <author> A. Luotonen, H. Frystyk, and T. Berners-Lee. </author> <title> CERN HTTPD public domain full-featured hypertext/proxy server with caching. </title> <type> Technical report, </type> <note> Available from http://www.w3.org/hypertext/WWW/ Daemon/Status.html, </note> <year> 1994. </year>
Reference-contexts: Page 6 5 Prototype Implementation and Performance We have implemented a prototype Active Cache as an extension of the the CERN httpd proxy <ref> [6] </ref>. The original CERN httpd software offers traditional caching of Web documents and HTTP protocol support. We modified the daemon to recognize the CacheApplet header, and to invoke the appropriate applet upon cache hit. A cache-applet attached document is stored as a regular document in the CERN proxy.
Reference: [7] <author> Carlos Maltzahn, Kathy Richardson, and Dirk Grunwald. </author> <title> Performance issues of enterprise level web proxies. </title> <booktitle> In Proceedings of the 1997 ACM SIGMETRICS International Conference on Measurement and Modelling of Computer Systems, </booktitle> <pages> pages 13-23, </pages> <month> June </month> <year> 1997. </year> <pages> Page 8 </pages>
Reference-contexts: The CacheAp-plet header is stored as part of the document and identifies the associated applet and archive. The CERN httpd proxy handles each user request in a separate process. (Despite its process-forking overhead, CERN httpd performs amazingly well compared to a highly sophisticated proxy <ref> [7] </ref>.) The process model significantly simplifies our implementation, because we can limit the resource consumption of applets by using setrlimit calls prior to calling the applet. Sending the log object back to the server is implemented via a HTTP "POST" request to the server.
Reference: [8] <author> Jeffrey C. Mogul, Fred Douglis, Anja Feld--mann, and Balachander Krishnamurthy. </author> <title> Potential benefits of delta encoding and data compression for http. In Proceedings of ACM SIGCOMM'97, </title> <month> August </month> <year> 1997. </year> <note> Available from http://www.research.att.com/ douglis/. </note>
Reference-contexts: The proxy can correctly expand variables DATE GMT, DATE LOCAL, REMOTE ADDRESS, and REMOTE HOST. Other SSI variables are typically related to the server and do not change from request to request. 2.2.6 Delta Compression Studies <ref> [8] </ref> have shown that transmitting the changes (deltas) between the new and old versions of dynamic information can reduce network traffic significantly. Delta compression can be easily implemented with cache applets.
Reference: [9] <author> Gene Trent and Mark Sake. WebSTONE: </author> <title> The first generation in HTTP server bench-marking. </title> <type> Technical report, </type> <institution> MTS, Silicon Graphics Inc., </institution> <month> February </month> <year> 1995. </year> <note> available from http://www-europe.sgi.com/TEXT/ Products/WebFORCE/WebStone/paper.html. </note>
Reference-contexts: The Java run-time environment is set up with the appropriate security manager. 5.1 Applet Overhead To measure the overhead incurred by the cache applets, we use the WebStone 2.0 standard Web server benchmark <ref> [9] </ref> and compare the response times of the original CERN httpd proxy and the Active Cache proxy with various cache applets. In each of our Active Cache tests, we assume that all the documents are associated with the same applet.
Reference: [10] <author> Dan S. Wallach, Dirk Balfanz, Drew Dean, and Edward W Felten. </author> <title> Extensible security architecture for java. </title> <booktitle> In The 16th Symposium on Operating System Principles, </booktitle> <month> May </month> <year> 1997. </year> <pages> Page 9 </pages>
Reference-contexts: The restrictions are enforced by two mechanisms: the ActiveProxy class implements the constraints, and Java's type safety and run-time mechanisms prevent applets from bypassing the ActiveProxy class and gaining raw access to information and resources. Recent research has also significantly improved the robustness of Java's run-time environments <ref> [10] </ref>. Thus, we rely on the existing mechanisms to force the applet to use the ActiveProxy to access its objects as well as the computation and networking resources. The Ac-tiveProxy class is also the place where we keep track of resources consumed by each applet.
References-found: 10

