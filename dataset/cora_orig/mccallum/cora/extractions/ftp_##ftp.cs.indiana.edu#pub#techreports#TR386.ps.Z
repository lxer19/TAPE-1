URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR386.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: System Factorization in Codesign A Case Study of the Use of Formal Techniques to Achieve
Author: Bhaskar Bose, M. Esen Tuna, and Steven D. Johnson 
Note: To appear in the proceedings of the 1993 IEEE International Conference on Computer Design (ICCD '93 Cambridge, Massachusetts,  
Date: June 1993  October, 1993.  
Abstract: indiana university computer science department technical report no. 386 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Subrahmanyam, G. D. Micheli, and K. Buchen-rieder, "Hardware-software codesign," </author> <booktitle> Computer IEEE, </booktitle> <pages> pp. 84-87, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction With the increasing complexity and diversity of applications employing VLSI technology, design environments providing a unified framework for specification, design, and simulation/modeling are needed to relate hardware and software domains <ref> [1] </ref>.
Reference: [2] <author> S. D. Johnson, </author> <title> Synthesis of Digital Designs from Recursion Equations. </title> <publisher> Cambridge: The MIT Press, </publisher> <year> 1984. </year>
Reference-contexts: We think this balance point may be in the area of codesign. A design methodology based on the algebraic manipulation of purely functional forms provides a basis for our digital design derivation (DDD) framework <ref> [2, 3] </ref>. DDD provides a unified environment for specification, hardware derivation, and modeling. Specifications are written in a functional language. Equivalence preserving transformations are applied to these specifications for hardware derivation. The initial specification, as well as transformed expressions are executable in the functional modeling language.
Reference: [3] <author> S. D. Johnson, B. Bose, and C. D. Boyer, </author> <title> "A tactical framework for digital design," in VLSI Specification, Verification and Synthesis (G. </title> <editor> Birtwistle and P. Sub-rahmanyam, </editor> <booktitle> eds.), </booktitle> <pages> pp. 349-383, </pages> <publisher> Kluwer, </publisher> <year> 1988. </year>
Reference-contexts: We think this balance point may be in the area of codesign. A design methodology based on the algebraic manipulation of purely functional forms provides a basis for our digital design derivation (DDD) framework <ref> [2, 3] </ref>. DDD provides a unified environment for specification, hardware derivation, and modeling. Specifications are written in a functional language. Equivalence preserving transformations are applied to these specifications for hardware derivation. The initial specification, as well as transformed expressions are executable in the functional modeling language.
Reference: [4] <author> D. Winkel, F. Prosser, R. Wehrmeister, W. C. Hunt, and C. Hess, </author> <title> "A student VLSI hardware tester," </title> <booktitle> in Proceedings of the Microelectronic Systems Education Conference and Exposition, </booktitle> <pages> pp. 15-24, </pages> <year> 1990. </year>
Reference-contexts: Specifications are written in a functional language. Equivalence preserving transformations are applied to these specifications for hardware derivation. The initial specification, as well as transformed expressions are executable in the functional modeling language. This environment has been integrated with the Logic Engine Hardware Development Platform <ref> [4] </ref> providing a seamless integration of hardware and software. We use this capability to incrementally map our specifications to hardware while maintaining the global integrity of the system description with the formal system. Issues in codesign relate to decomposing a system into related hardware and software components. <p> The system is used interactively or through command scripts to transform behavioral specifications to boolean sub-systems. The system has been integrated with various logic synthesis tools to generate realizations in PALs, FPGAs, and custom VLSI. 2.2 Logic Engine Hardware Platform The Logic Engine <ref> [4] </ref> is a hardware development environment consisting of a Logic Engine Board and a PC host. The Logic Engine Board is a large printed circuit board designed for the testing and prototyping of hardware systems.
Reference: [5] <author> S. D. Johnson, </author> <title> "Manipulating logical organization with system factorizations," in Hardware Specification, Verification and Synthesis: Mathematical Aspects (M. </title> <editor> Leeser and G. Brown, </editor> <booktitle> eds.), </booktitle> <pages> pp. 260-281, </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1989. </year>
Reference-contexts: Issues in codesign relate to decomposing a system into related hardware and software components. Our methodology provides transformations for system factorization to decompose and restructure the design <ref> [5] </ref>. These transformations point to a general mechanism to isolate components of a specification for implementation in either the hardware or software domain. In this paper we present an exercise in codesign in the context of developing a hardware prototype for the DDD-FM9001 [6].
Reference: [6] <author> B. Bose and S. D. Johnson, "DDD-FM9001: </author> <title> Derivation of a verified microprocessor. An exercise in integrating verification with formal derivation," in Correct Hardware Design and Verification Methods (G. </title> <editor> J. Milne and L. Pierre, eds.), </editor> <volume> vol. 683, </volume> <pages> pp. 191-202, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These transformations point to a general mechanism to isolate components of a specification for implementation in either the hardware or software domain. In this paper we present an exercise in codesign in the context of developing a hardware prototype for the DDD-FM9001 <ref> [6] </ref>. The DDD-FM9001 is a 32-bit general purpose microprocessor realized in FPGAs derived from Hunt's Nqthm FM9001 specification [7] us ing the DDD system. Details of the derivation of the DDD-FM9001 are reported in [6]. <p> present an exercise in codesign in the context of developing a hardware prototype for the DDD-FM9001 <ref> [6] </ref>. The DDD-FM9001 is a 32-bit general purpose microprocessor realized in FPGAs derived from Hunt's Nqthm FM9001 specification [7] us ing the DDD system. Details of the derivation of the DDD-FM9001 are reported in [6]. The DDD-FM9001 experiment provided a context in which we could apply our methodology and illustrate our framework. In the following section we present our methodology. Section 3 details how the DDD-FM9001 was realized in hardware.
Reference: [7] <author> W. A. Hunt, </author> <title> "A formal HDL and its use in the FM9001 verification," in Mechanized Reasoning in Hardware Design (C. </title> <editor> Hoare and M. Gordon, eds.), </editor> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: In this paper we present an exercise in codesign in the context of developing a hardware prototype for the DDD-FM9001 [6]. The DDD-FM9001 is a 32-bit general purpose microprocessor realized in FPGAs derived from Hunt's Nqthm FM9001 specification <ref> [7] </ref> us ing the DDD system. Details of the derivation of the DDD-FM9001 are reported in [6]. The DDD-FM9001 experiment provided a context in which we could apply our methodology and illustrate our framework. In the following section we present our methodology. <p> The interface provides a transparent co-simulation environment between the hardware components and the executing software model. 3 A Case Study: The DDD-FM9001 The DDD-FM9001 was a design exercise to construct a hardware implementation of the FM9001 <ref> [7] </ref> microprocessor description using the DDD system. The FM9001 is a 32-bit general purpose microprocessor mechanically verified by Hunt in the Nqthm theorem prover [9] and realized in LSI Logics gate array technology. Details of the proof are reported in [7]. 2 The processor incorporates 32-bit addressing, 16 32--bit general purpose <p> design exercise to construct a hardware implementation of the FM9001 <ref> [7] </ref> microprocessor description using the DDD system. The FM9001 is a 32-bit general purpose microprocessor mechanically verified by Hunt in the Nqthm theorem prover [9] and realized in LSI Logics gate array technology. Details of the proof are reported in [7]. 2 The processor incorporates 32-bit addressing, 16 32--bit general purpose registers, 5 addressing modes, a 16 function ALU, and a conditional assignment statement. cmd M A B 1 M A B 3 M rd (T, M) B 5 M A B 7 M T B 9 M rd (T, M)
Reference: [8] <editor> W. Clinger and J. Rees, </editor> <title> "The revised 4 report on the algorithmic language Scheme," </title> <journal> Lisp Pointers, </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. pages 1-55, </pages> <year> 1991. </year>
Reference-contexts: This framework consists of an executable modeling language, a formal reasoning system for circuit derivation, and a hardware platform for prototype development. We use the Scheme <ref> [8] </ref> programming language as our specification and executable modeling language, as well as the implementation language of our formal system. The language is based on functional model theory and is well suited for symbolic manipulation. the circuit into subcomponents realized in hardware and software.
Reference: [9] <author> R. S. Boyer and J. S. Moore, </author> <title> A Computational Logic Handbook. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: The FM9001 is a 32-bit general purpose microprocessor mechanically verified by Hunt in the Nqthm theorem prover <ref> [9] </ref> and realized in LSI Logics gate array technology.
Reference: [10] <author> K. Rath and S. D. Johnson, </author> <title> "Toward a basis for protocol specification and process decomposition," </title> <booktitle> in Proceedings of the IFIP Conference on Hardware Description Languages and their Applications, </booktitle> <year> 1993. </year> <month> 4 </month>
Reference-contexts: At points in the derivation, parts of the specification were in hardware, and parts were in software. The gradual migration of software into hardware provided a means of testing hardware components individually while maintaining their relationship with the rest of the system. In <ref> [10] </ref>, the notion of system factorization is extended to include protocol specification to formalize a more general process decomposition. Future work will involve the integration of more sophisticated factorization techniques in our framework for design decomposition.
References-found: 10

