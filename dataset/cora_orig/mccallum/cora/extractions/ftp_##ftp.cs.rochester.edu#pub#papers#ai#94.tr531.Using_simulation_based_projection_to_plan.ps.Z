URL: ftp://ftp.cs.rochester.edu/pub/papers/ai/94.tr531.Using_simulation_based_projection_to_plan.ps.Z
Refering-URL: http://www.cs.rochester.edu/research/trains/publications.html
Root-URL: 
Title: Using Simulation-based Projection to Plan in an Uncertain and Temporally Complex World  
Author: Ed Yampratoom 
Note: This material is based upon work supported by U.S. Air Force Rome Laboratory research contract no. F30602-91-C-0010.  
Date: September 1994  
Address: Rochester, New York 14627  
Affiliation: The University of Rochester Computer Science Department  
Pubnum: Technical Report 531  
Abstract: Temporal projection is a crucial task in planning. In order to achieve its goals, the planner must be able to reason about the consequences of its actions. In the real world, the planner does not have complete information about the environment or even the consequences of its actions. The planner thus must be able to reason about the probabilistic nature of the world and the probabilistic effects of its action. Interactions between actions and events in the world are not only probabilistic; they also are temporally complex. Simultaneous events can interact in many different ways depending on their temporal properties. An action's temporal relation to its preconditions and effects can also become quite complex. Existing projection systems are weak in their representations of temporally complex actions and events in a probabilistic world. Those that can handle probabilistic situations have a limited representation of temporal relations, while those that can handle complex temporal relations generally assume the world to be completely deterministic. Moreover, the speed of existing probabilistic projection systems are low. These systems are impractical to scale up to larger problems. In this thesis, we propose a practical projection system that can handle both the probabilistic nature of the world and the temporally complex nature of actions. The projection is based on simulation methods. Projection is done by simulating possible courses of events, one at a time. The simulation traces are then collected and processed by a projection module front-end, which provides the planner and the execution monitor with probabilistic estimates of propositions' values. The representation allowed by the system is rich in both the temporal and the probabilistic aspects. 
Abstract-found: 1
Intro-found: 1
Reference: [Allen, 1990] <author> A. O. Allen, </author> <title> Probability, Statistics, and Queueing Theory With Computer Science Applications, </title> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1990. </year>
Reference-contexts: If we take the latter (and simpler) approach, we must make an assumption, however, that all the random variables involved in the simulations are independent and have normal distributions <ref> [Allen, 1990] </ref>.
Reference: [Allen and Schubert, 1991] <author> J. F. Allen and L. K. Schubert, </author> <title> "The TRAINS Project," </title> <institution> Computer Science 91-1, University of Rochester, </institution> <year> 1991, </year> <note> TRAINS Technical Note. </note>
Reference-contexts: Complex interactions between simultaneous or overlapping actions and events are also supported. External events with possibly probabilistic occurrences can also be represented. The Predictor's use is demonstrated in the trains world <ref> [Allen and Schubert, 1991] </ref>. <p> The actions that can be represented by the Predictor are temporally much richer than in Hanks's, Kanazawa's, and the Buridan group's approaches. The Predictor's use is demonstrated in the trains world <ref> [Allen and Schubert, 1991] </ref>. The mechanism of projection in the Predictor can be summed up in a slogan: projection by simulation. <p> Integrating the projection module into a real working planning system will also demonstrate our projection's utility. To that end, the projection module will be integrated into the existing planning system used in the trains project <ref> [Allen and Schubert, 1991] </ref>. Although the original aim of the projection module is for it to be used by a planner, the interface is clear enough that a human user should also be able to easily interact with it. <p> The planner can thus use the predictor to test and refine its plan before executing it in the real world. The trains Predictor's use is demonstrated in the trains world <ref> [Allen and Schubert, 1991] </ref>. A.2 Simple Cases We will first describe the simplest case where there are no simultaneous actions nor temporally complex preconditions and effects.
Reference: [Allen and Ferguson, 1994] <author> James F. Allen and George Ferguson, </author> <title> "Actions and events in interval temporal logic," </title> <journal> Journal of Logic and Computation, </journal> <note> Special Issue on Actions and Processes, 1994, To appear. An earlier version appeared in Working notes of the Second Symposium on Logical Formalizations of Commonsense Reasoning, </note> <institution> Austin, TX, </institution> <month> 11-13 January, </month> <year> 1993. </year>
Reference-contexts: Classical planners and even most of the modern ones cannot adequately represent the temporal aspect of actions and events. Their temporal representation, such as state spaces and the situation calculus, is generally too weak. In <ref> [Allen and Ferguson, 1994] </ref>, the arguments for a richer temporal representation are explored in details. <p> Note that the spinning action is performed during, and not before, the shooting action as originally specified in the Russian Turkey Shoot problem in <ref> [Allen and Ferguson, 1994] </ref>.
Reference: [Allen, 1983] <author> J.F. Allen, </author> <title> "Maintaining knowledge about temporal intervals," </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: This restriction is partly due to their requiring actions to be instantaneous. Since we now make a more realistic assumption that actions take time, we will also model more realistic temporal relations between actions and their preconditions/effects. Although there are 13 primitive relations between a pair of time intervals <ref> [Allen, 1983] </ref>, resulting in 2 13 possible total relations, we found that the number of conceptually plausible relations between actions and their preconditions/effects are actually very small. To make things simple, the Predictor will restrict the relations between actions and their preconditions/effects to this small subset.
Reference: [Barrett and Weld, 1992] <author> A. Barrett and D. Weld, </author> <title> "Partial Order Planning: Evaluating Possible Efficiency Gains," </title> <type> Technical Report 92-05-01, </type> <institution> Dept. of Computer Science and Engineering, University of Washigton, </institution> <month> July </month> <year> 1992. </year>
Reference: [Chapman, 1987] <author> D. Chapman, </author> <title> "Planning for conjunctive goals," </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: Partial order (non-linear) planners require a more complicated projection facility. The Question-Answering facility [Tate, 1977] provides answers to questions about a proposition's truth value at any point in a partial plan. The method has essentially been subsumed by Chapman's more formal Modal Truth Criterion <ref> [Chapman, 1987] </ref>. The representations allowed by both methods are as weak as those used by simple STRIPS-based planners, however. They cannot handle probabilities or temporally complex models of actions. <p> The detailed description of QA in [Tate, 1977] is a bit ad hoc and its algorithm has been subsumed by Chapman's more formal Modal Truth Criterion. I will thus focus on Chapman's method instead. Chapman <ref> [Chapman, 1987] </ref> formally specifies a projection method for partial order planners. His modal truth criterion lists the necessary and sufficient conditions for ensuring that a condition be true at a specific point in time given a partially ordered set of actions. <p> which p is necessarily asserted; and for every step C possibly before s and every proposition q possibly codesignating with p which C denies, there is a step W necessarily between C and s which asserts r, a proposition such that r and p codesignate whenever p and q codesignate. <ref> [Chapman, 1987] </ref> The criterion can be implemented and run in time polynomial to the number of steps (actions). Chapman used a modal truth criterion module to implement a provably sound and complete planner called TWEAK. Unfortunately, there is a price for the soundness and completeness.
Reference: [Cooper, 1990] <author> G. F. Cooper, </author> <title> "The computational complexity of probabilistic inference using bayesian belief networks," </title> <journal> Artificial Intelligence, </journal> <volume> 42(2-3):393-405, </volume> <year> 1990. </year>
Reference-contexts: Solving the network will yield consistent probability distributions for all propositions at all time points. The problem is that solving such a network is difficult. First, Bayesian network algorithms are computationally expensive. In fact, it was proven that solving a multiply-connected Bayesian network is NP-Hard <ref> [Cooper, 1990] </ref>. Any non-trivial time net is almost certain to be multiply connected. There exist many algorithms that can compute a consistent distribution for each node: conditioning and clustering, which are exact, or sampling and bounding, which are approximate.
Reference: [Dean, 1989] <author> T. Dean, </author> <title> "Using temporal hierarchies to efficiently maintain large temporal databases," </title> <journal> Journal of the ACM, </journal> <volume> 36(4) </volume> <pages> 687-718, </pages> <year> 1989. </year>
Reference-contexts: The knowledge representation and query language is based on the logic of lifetimes, while the inference is performed on the continuous time nets constructed by the program. Goo can be considered a distant cousin of 6 Dean's Time Map Manager <ref> [Dean and McDermott, 1987; Dean, 1989] </ref>. While Goo's capability of temporal representation is much less sophisticated, it has an explicit notion of probability.
Reference: [Dean and Boddy, 1988] <author> T. Dean and M. Boddy, </author> <title> "An analysis of time-dependent planning," </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <year> 1988. </year>
Reference-contexts: More importantly, those situations are very common, which again suggest that Buridan is not practical at least in its current form. Buridan also is not anytime, according to the definition of anytime algorithm given in <ref> [Dean and Boddy, 1988] </ref>. The user will have to wait until the whole chain of projection is completely computed. Given that the amount of time required for Buridan to perform projections for non-trivial situations can be enormous, this uninterruptible nature makes it impractical. <p> Given more time, the Predictor will generate and project more scenarios. The algorithm is thus anytime according to the definition in <ref> [Dean and Boddy, 1988] </ref>: it is preemptible; it is interruptible at any time and still provides an answer; and we can get a rough estimate of a plan's success very quickly but if we give it more time we will get a more accurate answer (the answer improves, at least in
Reference: [Dean et al., 1988] <author> T. Dean, R.J. Firby, and D. Miller, </author> <title> "Hierarchical planning involving deadlines, travel time, and resources," </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 381-398, </pages> <year> 1988. </year>
Reference-contexts: They cannot handle probabilities or temporally complex models of actions. Dean and McDermott, in [Dean and McDermott, 1987], describe how to build a temporal database system that allows efficient assertions and queries about temporally qualified propositions. The system, TMM, is used in a planner called FORBIN <ref> [Dean et al., 1988] </ref>. The temporal relations between actions allowed by FORBIN is quite weak, and the probabilistic aspect cannot be represented. All approaches described so far cannot make probabilistic temporal projections. They all assume that the planner has a complete knowledge about the world, which is completely deterministic. <p> In [Kowalski and Sergot, 1986], an event calculus is defined. Its concepts of temporal databases are similar to those employed by TMM, but based on a logic programming paradigm. In <ref> [Dean et al., 1988] </ref>, FORBIN, a planning architecture supporting hierarchical planning involving deadlines, travel time, and resources is described. The architecture is based upon a temporal database, a heuristic evaluator, and a decision procedure for refining partial plans.
Reference: [Dean et al., 1993] <author> T. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson, </author> <title> "Planning with deadlines in stochastic domains," </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <year> 1993. </year> <month> 55 </month>
Reference-contexts: It then tries to increase the probability of achieving the goal by elaborating the plan with additional paths that satisfy the goal. The objection to such a Markov process representation is that it is unintuitive and extremely inconvenient to work with in traditional planning tasks. <ref> [Dean et al., 1993] </ref> present an improvement of Drummond and Bressina's work. The new algorithm is based on Markov decision theory for planning with deadlines in stochastic domains.
Reference: [Dean and Kanazawa, 1988] <author> T. Dean and K. </author> <title> Kanazawa, "Probabilistic temporal reasoning," </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 524-528, </pages> <year> 1988. </year>
Reference-contexts: All approaches described so far cannot make probabilistic temporal projections. They all assume that the planner has a complete knowledge about the world, which is completely deterministic. There are planners that can make probabilistic temporal projections, however. Kanazawa, in <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref>, employs stochastic process theory to make probabilistic projections; the probability used comes from Markov process theory and survival analysis. The implementation of the system relies, however, on a graph model, which is a Bayesian network. <p> This chapter will describe previous approaches at predicting the future in an uncertain environment. It will also describe what is lacking in those approaches. 2.2 Kanazawa Kanazawa's work <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref> applies stochastic process theory to reason about chance and time. The probability used comes from Markov process theory and survival analysis. Kanazawa attacks the problem using two different approaches.
Reference: [Dean and Kanazawa, 1989] <author> T. Dean and K. </author> <title> Kanazawa, "A model for reasoning about persistence and causation," </title> <journal> Computational Intelligence, </journal> <volume> 5 </volume> <pages> 142-150, </pages> <year> 1989. </year>
Reference-contexts: All approaches described so far cannot make probabilistic temporal projections. They all assume that the planner has a complete knowledge about the world, which is completely deterministic. There are planners that can make probabilistic temporal projections, however. Kanazawa, in <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref>, employs stochastic process theory to make probabilistic projections; the probability used comes from Markov process theory and survival analysis. The implementation of the system relies, however, on a graph model, which is a Bayesian network. <p> This chapter will describe previous approaches at predicting the future in an uncertain environment. It will also describe what is lacking in those approaches. 2.2 Kanazawa Kanazawa's work <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref> applies stochastic process theory to reason about chance and time. The probability used comes from Markov process theory and survival analysis. Kanazawa attacks the problem using two different approaches.
Reference: [Dean and McDermott, 1987] <author> T. Dean and D. McDermott, </author> <title> "Temporal data base management," </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 1-55, </pages> <year> 1987. </year>
Reference-contexts: The method has essentially been subsumed by Chapman's more formal Modal Truth Criterion [Chapman, 1987]. The representations allowed by both methods are as weak as those used by simple STRIPS-based planners, however. They cannot handle probabilities or temporally complex models of actions. Dean and McDermott, in <ref> [Dean and McDermott, 1987] </ref>, describe how to build a temporal database system that allows efficient assertions and queries about temporally qualified propositions. The system, TMM, is used in a planner called FORBIN [Dean et al., 1988]. <p> The knowledge representation and query language is based on the logic of lifetimes, while the inference is performed on the continuous time nets constructed by the program. Goo can be considered a distant cousin of 6 Dean's Time Map Manager <ref> [Dean and McDermott, 1987; Dean, 1989] </ref>. While Goo's capability of temporal representation is much less sophisticated, it has an explicit notion of probability. <p> The algorithm has been proven sound and complete, although exponential. The projection algorithm, similar to NONLIN, makes use of causal links to record dependencies between actions. The causal links are used to detect when a newly introduced actions interferes with past decisions. 24 4.4 TMM and FORBIN In <ref> [Dean and McDermott, 1987] </ref>, Dean and McDermott describes how to build a temporal database system that allows efficient assertions and queries about temporally qualified propositions.
Reference: [Drummond and Bressina, 1990] <author> M. Drummond and J. Bressina, </author> <title> "Anytime synthetic projection: Maximizing the probability of goal satisfaction," </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: But it has no computational theory for inferring about facts and events over time, a task central to probabilistic temporal projection. It doesn't even address the issue of how to reason about the changing probability of facts and events over time. 12 Drummond and Bressina <ref> [Drummond and Bressina, 1990] </ref> present an algorithm for gen-erating plans in stochastic temporal domains. The dynamics of the domain are represented as discrete Markov processes: actions and external events are characterized by transition probabilities. The algorithm first projects a single path that satisfies the goal with some probability.
Reference: [Fikes and Nilsson, 1971] <author> R. E. Fikes and N. J. Nilsson, </author> <title> "STRIPS: A New Approach to the Application of Theorem Proving to Problem Solving," </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: The projection task required in such a world is called probabilistic temporal projection. Classical planning literature usually assumes a deterministic world, circumventing the difficult task of making probabilistic temporal projection. Projection in a simple STRIPS-based planners, <ref> [Fikes and Nilsson, 1971] </ref>, is trivial since its extremely restricted representation (no probabilities, no temporally complex models of actions) makes projection a trivially straightforward task. Partial order (non-linear) planners require a more complicated projection facility. <p> Here we will describe how existing planning systems make use of their projection facilities. Note, however, that none of them can handle non-deterministic actions or actions with temporally complex properties. 4.2 Simple STRIPS assumption-based planners For simple STRIPS-based planners <ref> [Fikes and Nilsson, 1971] </ref>, projection is straightforward due to the simplicity of their world representation.
Reference: [Gerevini and Schubert, 1993] <author> A. Gerevini and L. Schubert, </author> <title> "Efficient temporal reasoning through timegraphs," </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: We also should note that it may be wise to keep the allowed expressible relations to the pointizable interval relations so that when we later use a more efficient temporal reasoning module such as TG-II <ref> [Gerevini and Schubert, 1993; Gerevini and Schubert, 1994] </ref>. To deal with a more temporally complex preconditions and effects, the plan given to the predictor describe the partial ordering of actions to be performed and the metric temporal constraints (duration, start time, end time) associated with those actions. <p> The reason we are using MATS right now is of necessity and convenience, since it currently provides the richest temporal representation. We intended to replace MATS with a metricized version of TG-II <ref> [Gerevini and Schubert, 1993; Gerevini and Schubert, 1994] </ref> when it becomes available. The implementation of the current predictor is modular enough that a substitution of temporal reasoning module should be easy. The time spent here will mostly be waiting for a metricized TG-II to be implemented.
Reference: [Gerevini and Schubert, 1994] <author> A. Gerevini and L. Schubert, </author> <title> "Efficient algorithms for qualitative reasoning about time," </title> <note> To appear in Artificial Intelligence, </note> <year> 1994. </year>
Reference-contexts: We also should note that it may be wise to keep the allowed expressible relations to the pointizable interval relations so that when we later use a more efficient temporal reasoning module such as TG-II <ref> [Gerevini and Schubert, 1993; Gerevini and Schubert, 1994] </ref>. To deal with a more temporally complex preconditions and effects, the plan given to the predictor describe the partial ordering of actions to be performed and the metric temporal constraints (duration, start time, end time) associated with those actions. <p> The reason we are using MATS right now is of necessity and convenience, since it currently provides the richest temporal representation. We intended to replace MATS with a metricized version of TG-II <ref> [Gerevini and Schubert, 1993; Gerevini and Schubert, 1994] </ref> when it becomes available. The implementation of the current predictor is modular enough that a substitution of temporal reasoning module should be easy. The time spent here will mostly be waiting for a metricized TG-II to be implemented.
Reference: [Haddawy, 1990] <author> P. Haddawy, </author> <title> "Time, chance, and action," </title> <booktitle> In Proceedings of the Sixth Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 147-154, </pages> <year> 1990. </year>
Reference-contexts: If there are not many irrelevant pieces of evidence, Hanks's advantage of not looking at irrelevant evidence disappears and his algorithm has to spend extra time computing the degree of relevance that won't be of much use anyway. Haddawy <ref> [Haddawy, 1990; Haddawy, 1991] </ref> develops a logic of time, chance, and action for reasoning about plans. This logic is close to the logic of lifetime developed by Kanazawa, but with different goals in mind.
Reference: [Haddawy, 1991] <author> P. Haddawy, </author> <title> Representing and reasoning about plans under uncertainty, </title> <type> PhD thesis, </type> <institution> University of Illinois, </institution> <year> 1991. </year>
Reference-contexts: If there are not many irrelevant pieces of evidence, Hanks's advantage of not looking at irrelevant evidence disappears and his algorithm has to spend extra time computing the degree of relevance that won't be of much use anyway. Haddawy <ref> [Haddawy, 1990; Haddawy, 1991] </ref> develops a logic of time, chance, and action for reasoning about plans. This logic is close to the logic of lifetime developed by Kanazawa, but with different goals in mind.
Reference: [Haimowitz and Kohane, 1993] <author> I. J. Haimowitz and I. S. Kohane, </author> <title> "Automated Trend Detection with Multiple Temporal Hypotheses," </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: Another possible facility is to use the projection module in a pro-active way, monitoring both the simulation runs and the real execution run, matching possibly troublesome 34 simulation cases against the real execution to detect problems, using the technique described in <ref> [Haimowitz and Kohane, 1993] </ref>. It is likely that we also have to implement the execution monitoring module ourselves or in collaboration with others. Separating the projection module process from the planner process can be another demonstration of the usefulness of our method.
Reference: [Hanks, 1988] <author> S. Hanks, </author> <title> "Representing and computing temporally scoped beliefs," </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <year> 1988. </year>
Reference-contexts: The computation process involved is very inefficient and, more importantly, the representation is extremely weak in the temporal aspect. Actions and events are instantaneous. So there are essentially no interactions between overlapping actions or events. Another approach, in <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref>, relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> More importantly, Kanazawa's model can handle only temporally simple actions. Events are assumed to be instantaneous and effects are realized at the time step right after their associated event due to the Markovian nature of the model. 2.3 Hanks Hanks's approach <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref> relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence.
Reference: [Hanks, 1990a] <author> S. Hanks, </author> <title> "Practical temporal projection," </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: The computation process involved is very inefficient and, more importantly, the representation is extremely weak in the temporal aspect. Actions and events are instantaneous. So there are essentially no interactions between overlapping actions or events. Another approach, in <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref>, relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> More importantly, Kanazawa's model can handle only temporally simple actions. Events are assumed to be instantaneous and effects are realized at the time step right after their associated event due to the Markovian nature of the model. 2.3 Hanks Hanks's approach <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref> relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence.
Reference: [Hanks, 1990b] <author> S. Hanks, </author> <title> "Projecting plans for uncertain worlds," </title> <type> Technical Report 756, </type> <institution> Yale University, Department of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: The computation process involved is very inefficient and, more importantly, the representation is extremely weak in the temporal aspect. Actions and events are instantaneous. So there are essentially no interactions between overlapping actions or events. Another approach, in <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref>, relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> More importantly, Kanazawa's model can handle only temporally simple actions. Events are assumed to be instantaneous and effects are realized at the time step right after their associated event due to the Markovian nature of the model. 2.3 Hanks Hanks's approach <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref> relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> Also, Weber's accuracy value is a subtly different concept from Hanks's threshold. Due to Weber's use of accuracy value, Hanks claims that his algorithm is more efficient than Weber's since Weber's algorithm has to look at more pieces of evidence <ref> [Hanks, 1990b] </ref>. This is not necessarily true in all situations, however. Their relative efficiencies will depend on the number of irrelevant pieces of evidence.
Reference: [Hanks and McDermott, 1993] <author> S. Hanks and D. McDermott, </author> <title> "Modeling a Dynamic and Uncertain World I: Symbolic and Probabilistic Reasoning about Change," </title> <type> Technical Report 93-06-10, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <year> 1993. </year>
Reference-contexts: The computation process involved is very inefficient and, more importantly, the representation is extremely weak in the temporal aspect. Actions and events are instantaneous. So there are essentially no interactions between overlapping actions or events. Another approach, in <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref>, relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> More importantly, Kanazawa's model can handle only temporally simple actions. Events are assumed to be instantaneous and effects are realized at the time step right after their associated event due to the Markovian nature of the model. 2.3 Hanks Hanks's approach <ref> [Hanks, 1988; Hanks, 1990a; Hanks, 1990b; Hanks and McDermott, 1993] </ref> relies on a system of probability estimation to derive a probability for any proposition at any time point, given a body of evidence. <p> Thus it can yield a rough estimate quickly. But it is not convergent since jE P ()j is not guaranteed to decrease as the algorithm goes on. To illustrate the algorithm, we will use the example in <ref> [Hanks and McDermott, 1993] </ref>. The proposition of interest is "the cat is in the living room." At 9AM, the cat was seen in the room. But at 1PM, we heard a cat-like noise from the kitchen. The probability that the noise was really from the cat is 50%. <p> As stated above, the estimation algorithm is heuristic in that it considers only a single piece of evidence that would change its estimate. The correctness of the algorithm thus 1 The details of the complex computations resulting in this number is omitted. Interested readers may consult equations 24-26 in <ref> [Hanks and McDermott, 1993] </ref>. 9 assumes that multiple pieces of evidence considered together (a task not handled by the algorithm) will not change the estimate with respect to the threshold when each evidence, taken alone, will not be strong enough to revise the estimate.
Reference: [Kanazawa, 1992] <author> K. </author> <title> Kanazawa, Reasoning about Time and Probability, </title> <type> PhD thesis, </type> <institution> Brown University, </institution> <year> 1992. </year> <month> 56 </month>
Reference-contexts: All approaches described so far cannot make probabilistic temporal projections. They all assume that the planner has a complete knowledge about the world, which is completely deterministic. There are planners that can make probabilistic temporal projections, however. Kanazawa, in <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref>, employs stochastic process theory to make probabilistic projections; the probability used comes from Markov process theory and survival analysis. The implementation of the system relies, however, on a graph model, which is a Bayesian network. <p> This chapter will describe previous approaches at predicting the future in an uncertain environment. It will also describe what is lacking in those approaches. 2.2 Kanazawa Kanazawa's work <ref> [Dean and Kanazawa, 1988; Dean and Kanazawa, 1989; Kanazawa, 1992] </ref> applies stochastic process theory to reason about chance and time. The probability used comes from Markov process theory and survival analysis. Kanazawa attacks the problem using two different approaches.
Reference: [Kautz, 1991] <author> H. Kautz, </author> <title> MATS (Metric/Allen Time System) Documentation, </title> <institution> AT&T Bell Laboratories, </institution> <year> 1991. </year>
Reference-contexts: Second is the plan that describes the partial ordering of actions to be performed. The partial ordering of actions and the metric temporal constraints are first given to a temporal reasoning system (MATS) <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> resulting in a minimal network. Then we randomly pick a specific complete ordering of events. Cranking out the predictions can then be done straightforwardly since we have a complete ordering of actions. The preconditions are checked just before the action is performed. <p> The Predictor ability to handle quantities will be well served by the projection module's ability to estimate expected values for quantities. Also equally important is our use of MATS <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> as a temporal reasoning module. In [Yampratoom and Allen, 1993a; Yampratoom and Allen, 1993b], we have evaluated many temporal reasoning systems and found most of them, especially MATS, unable to scale up very well. <p> Second is the plan that describes the partial ordering of actions to be performed. The partial ordering of actions and the metric temporal constraints are first given to a temporal reasoning system (MATS) <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> resulting in a minimal network. Then we randomly pick a specific complete ordering of events as follows: 1. Divide events into two groups, those that can be done right away and those that have to wait. 2.
Reference: [Kautz and Ladkin, 1991] <author> H. Kautz and P. Ladkin, </author> <title> "Integrating Metric and Qualitative Temporal Reasoning," </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: Second is the plan that describes the partial ordering of actions to be performed. The partial ordering of actions and the metric temporal constraints are first given to a temporal reasoning system (MATS) <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> resulting in a minimal network. Then we randomly pick a specific complete ordering of events. Cranking out the predictions can then be done straightforwardly since we have a complete ordering of actions. The preconditions are checked just before the action is performed. <p> The Predictor ability to handle quantities will be well served by the projection module's ability to estimate expected values for quantities. Also equally important is our use of MATS <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> as a temporal reasoning module. In [Yampratoom and Allen, 1993a; Yampratoom and Allen, 1993b], we have evaluated many temporal reasoning systems and found most of them, especially MATS, unable to scale up very well. <p> Second is the plan that describes the partial ordering of actions to be performed. The partial ordering of actions and the metric temporal constraints are first given to a temporal reasoning system (MATS) <ref> [Kautz and Ladkin, 1991; Kautz, 1991] </ref> resulting in a minimal network. Then we randomly pick a specific complete ordering of events as follows: 1. Divide events into two groups, those that can be done right away and those that have to wait. 2.
Reference: [Khambhampati and Nau, 1993] <author> S. Khambhampati and D. S. Nau, </author> <title> "On the nature and role of modal truth criteria in planning," </title> <type> Technical Report ISR-TR-93-30, </type> <institution> Institue for Systems Research, University of Maryland, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Since a planner needs to call the projection module many times, Chapman felt that planners with more expressive action representations will not scale up very well. In recent papers <ref> [Khambhampati and Nau, 1993; Weld, 1994] </ref>, other researchers have argued that Chapman's pessimism is ungrounded.
Reference: [Kowalski and Sergot, 1986] <author> R. Kowalski and M. Sergot, </author> <title> "A logic-based calculus of events," </title> <journal> New Generation Computing, </journal> <volume> 4 </volume> <pages> 67-95, </pages> <year> 1986. </year>
Reference-contexts: If some later assertion contradicts with the currently assumed persistence, the new assertion will clip the current persistence and force to become false earlier. The system does not explicitly handle probabilities, however, and there is no direct way to encode a knowledge about probabilistic interactions. In <ref> [Kowalski and Sergot, 1986] </ref>, an event calculus is defined. Its concepts of temporal databases are similar to those employed by TMM, but based on a logic programming paradigm. In [Dean et al., 1988], FORBIN, a planning architecture supporting hierarchical planning involving deadlines, travel time, and resources is described.
Reference: [Kushmerick et al., 1994a] <author> N. Kushmerick, S. Hanks, and D. Weld, </author> <title> "An Algorithm for Probabilistic Least-Commitment Planning," </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <year> 1994. </year>
Reference-contexts: Hanks's system is reasonably efficient for pure projection tasks, but if it is integrated into a planning system, the efficiency is much reduced since the planner's actions will violate many assumptions required to speed up the estimation process. The temporal representation of this system is as weak as Kanazawa's. <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describe Buridan, a sound and complete partial-order planner that can deal with probabilistic actions and world states. They extend the STRIPS action representation to allow conditional and probabilistic effects. <p> Each time points (of actions and observations) must also be known precisely. Events cannot cause another events. Simultaneous actions and events are possible only if they do not interact with one another. 2.4 Buridan <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describe Buridan, a partial-order planner that can deal with probabilistic actions and world states. They extend the STRIPS action representation to allow conditional and probabilistic effects. <p> The sampling nature of our approach makes our solution much more stable than Hanks's, however. For another example of our Predictor's ability, Figure 3.2 shows the result of running it on the problem examined in details by <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref>. Note that the probability converges much more quickly than in Hanks's cat example because the problem is simpler (no external events). <p> Completeness is thus sacrificed. Unfortunately, the program will still have to perform separate projections for all linearizations of some partial order plans in cases dealing with order-dependent effects and quantity variations to ensure that there is at least one consistent ordering of the partial order. 4.5 Buridan <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describes Buridan, a partial-order planner that can deal with probabilistic actions and world states. The probabilistic projection part of Buridan is described in Chapter 2. In this section, we will concentrate on how the Buridan planner uses the projection system. <p> For each run, the predictor non-deterministically determines the exact initial state of the world before starting the simulation. The probabilistic initial state can be specified by using numbers instead of t or nil as initial conditions. For example, in the Buridan example <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref>, we can specified the initial state this way to say that the gripper is dry with probability 0.7: (make-belief :initial-condition (list '(gripper-dry 0.7) '(gripper-dirty nil) '(hold-block nil) '(block-painted nil)) ...) A.9 Complex Probabilistic Effects If an action can have a number of mutually
Reference: [Kushmerick et al., 1994b] <author> N. Kushmerick, S. Hanks, and D. Weld, </author> <title> "An Algorithm for Probabilistic Planning," </title> <institution> Computer Science 93-06-03, University of Washington, </institution> <year> 1994. </year>
Reference-contexts: Hanks's system is reasonably efficient for pure projection tasks, but if it is integrated into a planning system, the efficiency is much reduced since the planner's actions will violate many assumptions required to speed up the estimation process. The temporal representation of this system is as weak as Kanazawa's. <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describe Buridan, a sound and complete partial-order planner that can deal with probabilistic actions and world states. They extend the STRIPS action representation to allow conditional and probabilistic effects. <p> The time required to guarantee convergence for the approximation solution is not given. Depending upon which approximation algorithms you choose, the time required will be different. But, as mentioned above, all the Bayesian network solving algorithms blow up exponentially under various circumstances. Kushmerick et al. <ref> [Kushmerick et al., 1994b] </ref> tried to use a modified version of Kanazawa's network algorithm as a projection routine for their planner, Buridan, because their projection algorithm does not perform well. <p> Each time points (of actions and observations) must also be known precisely. Events cannot cause another events. Simultaneous actions and events are possible only if they do not interact with one another. 2.4 Buridan <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describe Buridan, a partial-order planner that can deal with probabilistic actions and world states. They extend the STRIPS action representation to allow conditional and probabilistic effects. <p> The sampling nature of our approach makes our solution much more stable than Hanks's, however. For another example of our Predictor's ability, Figure 3.2 shows the result of running it on the problem examined in details by <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref>. Note that the probability converges much more quickly than in Hanks's cat example because the problem is simpler (no external events). <p> Completeness is thus sacrificed. Unfortunately, the program will still have to perform separate projections for all linearizations of some partial order plans in cases dealing with order-dependent effects and quantity variations to ensure that there is at least one consistent ordering of the partial order. 4.5 Buridan <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref> describes Buridan, a partial-order planner that can deal with probabilistic actions and world states. The probabilistic projection part of Buridan is described in Chapter 2. In this section, we will concentrate on how the Buridan planner uses the projection system. <p> For each run, the predictor non-deterministically determines the exact initial state of the world before starting the simulation. The probabilistic initial state can be specified by using numbers instead of t or nil as initial conditions. For example, in the Buridan example <ref> [Kushmerick et al., 1994a; Kushmerick et al., 1994b] </ref>, we can specified the initial state this way to say that the gripper is dry with probability 0.7: (make-belief :initial-condition (list '(gripper-dry 0.7) '(gripper-dirty nil) '(hold-block nil) '(block-painted nil)) ...) A.9 Complex Probabilistic Effects If an action can have a number of mutually
Reference: [Martin and Allen, 1991] <author> N. G. Martin and J. F. Allen, </author> <title> "A language for planning with statistics," </title> <booktitle> In Proceedings of the Seventh Conference on Uncertainty in Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: Thus the projection module should also be integrated to the new trains World general and graphical interface as described in [Martin and Mitchell, 1994]. <ref> [Martin and Allen, 1991; Martin and Allen, 1993; Martin, 1993] </ref> present a language for planning with statistics. Among other things, they show how to compute confidence intervals from statistics on events.
Reference: [Martin and Mitchell, 1994] <author> N. G. Martin and G. J. Mitchell, </author> <title> "TRAINS World Simulator: </title> <note> User's Manual," TRAINS Technical Note 94-x (to appear), </note> <institution> Computer Science Department, University of Rochester, </institution> <year> 1994. </year>
Reference-contexts: Thus the projection module should also be integrated to the new trains World general and graphical interface as described in <ref> [Martin and Mitchell, 1994] </ref>. [Martin and Allen, 1991; Martin and Allen, 1993; Martin, 1993] present a language for planning with statistics. Among other things, they show how to compute confidence intervals from statistics on events.
Reference: [Martin, 1993] <author> Nathaniel G. Martin, </author> <title> Using Statistical Inference to Plan Under Uncertainty, </title> <type> PhD thesis, </type> <institution> University of Rochester, Computer Science Department, Rochester, </institution> <address> NY 14627, </address> <year> 1993. </year>
Reference-contexts: Thus the projection module should also be integrated to the new trains World general and graphical interface as described in [Martin and Mitchell, 1994]. <ref> [Martin and Allen, 1991; Martin and Allen, 1993; Martin, 1993] </ref> present a language for planning with statistics. Among other things, they show how to compute confidence intervals from statistics on events.
Reference: [Martin and Allen, 1993] <author> Nathaniel G. Martin and James F. Allen, </author> <title> "Statistical Probabilities for Planning," </title> <type> Technical Report 474, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY, </address> <year> 1993. </year>
Reference-contexts: Thus the projection module should also be integrated to the new trains World general and graphical interface as described in [Martin and Mitchell, 1994]. <ref> [Martin and Allen, 1991; Martin and Allen, 1993; Martin, 1993] </ref> present a language for planning with statistics. Among other things, they show how to compute confidence intervals from statistics on events.
Reference: [McAllester and Rosenblitt, 1991] <author> David McAllester and David Rosenblitt, </author> <title> "Systematic Nonlinear Planning," </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: The probabilistic projection part of Buridan is described in Chapter 2. In this section, we will concentrate on how the Buridan planner uses the projection system. Buridan's plan generation algorithm is a modification of the standard partial order planning algorithms for deterministic domain such as SNLP <ref> [McAllester and Rosenblitt, 1991] </ref> 25 and UCPOP [Penberthy and Weld, 1992].
Reference: [Penberthy and Weld, 1992] <author> J. S. Penberthy and D. S. Weld, "UCPOP: </author> <title> A sound, complete, partial order planner for ADL," </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <year> 1992. </year>
Reference-contexts: It remains to be seen whether this complexity tradeoff is advantageous. In a recent development, UCPOP <ref> [Penberthy and Weld, 1992] </ref> is a more expressive rigorous partial order planner. It can handle conditional effects and universally quantified preconditions, effects, and goals. The algorithm has been proven sound and complete, although exponential. The projection algorithm, similar to NONLIN, makes use of causal links to record dependencies between actions. <p> In this section, we will concentrate on how the Buridan planner uses the projection system. Buridan's plan generation algorithm is a modification of the standard partial order planning algorithms for deterministic domain such as SNLP [McAllester and Rosenblitt, 1991] 25 and UCPOP <ref> [Penberthy and Weld, 1992] </ref>. Buridan alternates between assessing a plan's success and refining the current plan, ending the refinement process and return a randomly chosen linearization of the current partial plan when the assessment routine finds the current plan to be adequate with respect to the user's given threshold.
Reference: [Penberthy and Weld, 1994] <author> J. S. Penberthy and D. S. Weld, </author> <title> "Temporal Planning with Continuous Change," </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <year> 1994. </year> <month> 57 </month>
Reference-contexts: Another important revision goal is to improve their performance. As another example of potential improvement, the existing facility for dealing with continuously changing quantities such as those handled in <ref> [Penberthy and Weld, 1994] </ref> is minimal. The Predictor ability to handle quantities will be well served by the projection module's ability to estimate expected values for quantities. Also equally important is our use of MATS [Kautz and Ladkin, 1991; Kautz, 1991] as a temporal reasoning module.
Reference: [Russell and Wefald, 1989] <author> S. Russell and E. </author> <title> Wefald, </title> <booktitle> "Principles of metareasoning," In Pro--ceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 400-411, </pages> <year> 1989. </year>
Reference-contexts: The planning problem is then to select a certain string of decisions in the beginning. This method faces a severe combinatoric problem due to the exponential number of possible decision sequences. Kanazawa expresses hope for help from further developments in the field of decision theory and bounded rationality <ref> [Russell and Wefald, 1989; Russell and Wefald, 1991] </ref>. 2.2.1 Deficiencies The timenet model can only handle a single grain of time since it is time-based. Thus the appropriate grain must be selected for each specific problem. <p> Separating the projection module process from the planner process can be another demonstration of the usefulness of our method. Parallelization will allow us to make use of the projection's anytime property and provide support for planners with bounded rationality <ref> [Russell and Wefald, 1989; Russell and Wefald, 1991] </ref>. Integrating the projection module into a real working planning system will also demonstrate our projection's utility. To that end, the projection module will be integrated into the existing planning system used in the trains project [Allen and Schubert, 1991].
Reference: [Russell and Wefald, 1991] <author> S. Russell and E. Wefald, </author> <title> Do the Right Thing: Studies in Limited Rationality, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: The planning problem is then to select a certain string of decisions in the beginning. This method faces a severe combinatoric problem due to the exponential number of possible decision sequences. Kanazawa expresses hope for help from further developments in the field of decision theory and bounded rationality <ref> [Russell and Wefald, 1989; Russell and Wefald, 1991] </ref>. 2.2.1 Deficiencies The timenet model can only handle a single grain of time since it is time-based. Thus the appropriate grain must be selected for each specific problem. <p> Separating the projection module process from the planner process can be another demonstration of the usefulness of our method. Parallelization will allow us to make use of the projection's anytime property and provide support for planners with bounded rationality <ref> [Russell and Wefald, 1989; Russell and Wefald, 1991] </ref>. Integrating the projection module into a real working planning system will also demonstrate our projection's utility. To that end, the projection module will be integrated into the existing planning system used in the trains project [Allen and Schubert, 1991].
Reference: [Tate, 1977] <author> Austin Tate, </author> <title> "Generating project networks," </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 888-889, </pages> <year> 1977. </year>
Reference-contexts: Projection in a simple STRIPS-based planners, [Fikes and Nilsson, 1971], is trivial since its extremely restricted representation (no probabilities, no temporally complex models of actions) makes projection a trivially straightforward task. Partial order (non-linear) planners require a more complicated projection facility. The Question-Answering facility <ref> [Tate, 1977] </ref> provides answers to questions about a proposition's truth value at any point in a partial plan. The method has essentially been subsumed by Chapman's more formal Modal Truth Criterion [Chapman, 1987]. The representations allowed by both methods are as weak as those used by simple STRIPS-based planners, however. <p> But non-linear planners need a more sophisticated projection algorithm due to the fact that the projected plan is usually partially ordered. NONLIN, an early partial order planner <ref> [Tate, 1977] </ref>, uses a projection module called the Question-Answering facility (QA). <p> The detailed description of QA in <ref> [Tate, 1977] </ref> is a bit ad hoc and its algorithm has been subsumed by Chapman's more formal Modal Truth Criterion. I will thus focus on Chapman's method instead. Chapman [Chapman, 1987] formally specifies a projection method for partial order planners.
Reference: [Weber, 1989a] <author> J. A. Weber, </author> <title> "Parallel algorithm for statistical belief refinement and its use in causal reasoning," </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <year> 1989. </year>
Reference-contexts: In fact, Buridan can compute the exact probability of the plan's success because of its restricted representation. Extending it to handle external events with known probabilities of occurrence or a more temporally complex representation is not possible. 2.5 Other Approaches Weber <ref> [Weber, 1989a; Weber, 1989b] </ref> describes how to efficiently make predictions based on statistical information. The heuristic algorithm refines its belief in the likelihood of a proposition by first looking at the evidence with the highest impact, then the second highest one, and so on, until a certain accuracy is achieved.
Reference: [Weber, 1989b] <author> J. A. Weber, </author> <title> Principles and Algorithms for Causal Reasoning with Uncertainty, </title> <type> PhD thesis, </type> <institution> University of Rochester, </institution> <year> 1989. </year>
Reference-contexts: In fact, Buridan can compute the exact probability of the plan's success because of its restricted representation. Extending it to handle external events with known probabilities of occurrence or a more temporally complex representation is not possible. 2.5 Other Approaches Weber <ref> [Weber, 1989a; Weber, 1989b] </ref> describes how to efficiently make predictions based on statistical information. The heuristic algorithm refines its belief in the likelihood of a proposition by first looking at the evidence with the highest impact, then the second highest one, and so on, until a certain accuracy is achieved.
Reference: [Weld, 1994] <author> D. Weld, </author> <title> "An Introduction to Least Commitment Planning," </title> <note> To appear in AI Magazine Summer/Fall 1994, </note> <year> 1994. </year>
Reference-contexts: Since a planner needs to call the projection module many times, Chapman felt that planners with more expressive action representations will not scale up very well. In recent papers <ref> [Khambhampati and Nau, 1993; Weld, 1994] </ref>, other researchers have argued that Chapman's pessimism is ungrounded.
Reference: [Yampratoom, 1994] <author> E. Yampratoom, </author> <title> "The TRAINS Predictor Manual and User Guide," </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: Our work is to produce an approach that can handle much more temporally complex actions. The detailed description of the Predictor can be found in the trains Predictor documentation <ref> [Yampratoom, 1994] </ref>, the most recent of version of which is included in the appendix. This chapter will present the Predictor on a more abstract level.
Reference: [Yampratoom and Allen, 1993a] <author> E. Yampratoom and J. F. Allen, </author> <title> "Performance of Temporal Reasoning Systems," </title> <type> TRAINS Technical Note 93-1, </type> <institution> Computer Science Department, University of Rochester, Rochester, </institution> <address> NY, </address> <year> 1993. </year>
Reference-contexts: The Predictor ability to handle quantities will be well served by the projection module's ability to estimate expected values for quantities. Also equally important is our use of MATS [Kautz and Ladkin, 1991; Kautz, 1991] as a temporal reasoning module. In <ref> [Yampratoom and Allen, 1993a; Yampratoom and Allen, 1993b] </ref>, we have evaluated many temporal reasoning systems and found most of them, especially MATS, unable to scale up very well. The reason we are using MATS right now is of necessity and convenience, since it currently provides the richest temporal representation.
Reference: [Yampratoom and Allen, 1993b] <author> E. Yampratoom and J. F. Allen, </author> <title> "Performance of Temporal Reasoning Systems," </title> <journal> SIGART Bulletin, </journal> <volume> 4(3), </volume> <month> July </month> <year> 1993. </year> <month> 58 </month>
Reference-contexts: The Predictor ability to handle quantities will be well served by the projection module's ability to estimate expected values for quantities. Also equally important is our use of MATS [Kautz and Ladkin, 1991; Kautz, 1991] as a temporal reasoning module. In <ref> [Yampratoom and Allen, 1993a; Yampratoom and Allen, 1993b] </ref>, we have evaluated many temporal reasoning systems and found most of them, especially MATS, unable to scale up very well. The reason we are using MATS right now is of necessity and convenience, since it currently provides the richest temporal representation.
References-found: 48

