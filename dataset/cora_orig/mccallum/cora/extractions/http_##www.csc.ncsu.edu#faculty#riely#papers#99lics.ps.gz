URL: http://www.csc.ncsu.edu/faculty/riely/papers/99lics.ps.gz
Refering-URL: http://www.csc.ncsu.edu/faculty/riely/
Root-URL: http://www.csc.ncsu.edu
Title: Secure Resource Access for Mobile Agents  
Author: JAMES RIELY AND MATTHEW HENNESSY 
Keyword: Security, Type theory and type systems, Mobile agents, Open systems, Concurrency, Semantics.  
Abstract: In open distributed systems of mobile agents, where code from remote sites may run locally, protection of sensitive data and system resources is of paramount importance. We present a capability-based typing system that provides such protection, using a mix of static and runtime typing. We formalize security violations as runtime errors and prove that, using our semantics, runtime errors cannot occur at good sites, i.e. sites under control of a particular administrative domain. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi. </author> <title> Secrecy by typing in security protocols. </title> <booktitle> In Proceedings of TACS97, volume 1218 of Lecture Notes in Computer Science, </booktitle> <pages> pages 611637. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources. Type systems have also been used to study secure transmission of data, using cryptographic techniques <ref> [2, 1, 7] </ref>; while the goals of this work are related to ours, there appears to be little technical overlap. Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing [10, 3, 4, 27, 28, 31].
Reference: [2] <author> M. Abadi and A. D. Gordon. </author> <title> A calculus for cryptographic protocols: The spi calculus. </title> <journal> Information and Computation, </journal> <note> To appear. Available as Compaq SRC Research Report 149 (1998). </note>
Reference-contexts: Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources. Type systems have also been used to study secure transmission of data, using cryptographic techniques <ref> [2, 1, 7] </ref>; while the goals of this work are related to ours, there appears to be little technical overlap. Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing [10, 3, 4, 27, 28, 31].
Reference: [3] <author> Roberto Amadio. </author> <title> An asynchronous model of locality, failure, and process mobility. In COORDINATION '97, </title> <booktitle> volume 1282 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [4] <author> L. Cardelli and A. D. Gordon. </author> <title> Mobile ambients. </title> <editor> In Maurice Nivat, editor, </editor> <booktitle> Proc. FOSSACS'98, International Conference on Foundations of Software Science and Computation Structures, volume 1378 of Lecture Notes in Computer Science, </booktitle> <pages> pages 140155. </pages> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [5] <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> Computing Systems, </booktitle> <address> 8(1):2759, </address> <month> January </month> <year> 1995. </year> <title> A preliminary version appeared in Proceedings of the 22nd ACM Symposium on Principles of Programming. 2 Indeed throughout Table 6 only type environments (and not the more general security policies) may be used. 3 In general this constructs security policies rather than type environments but one can show that all applications of this construction in Tables 6 and 8 actually generate type environments. Secure Resource Access for Mobile Agents 11 </title>
Reference-contexts: The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage. Several studies have addressed the issue of static typing for languages with remote resources <ref> [23, 5, 27, 15] </ref>, but none of these address secure resources or open networks. Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [6] <author> Luca Cardelli and Andrew Gordon. </author> <title> Types for mobile ambients. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Antonio, </address> <month> January </month> <year> 1999. </year> <note> ACM Press. </note>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing [10, 3, 4, 27, 28, 31]. While there is an active interest in typing systems for such languages <ref> [11, 6] </ref>, we are aware of no other work on capability-based or secure typing systems for distributed calculi. Secure Resource Access for Mobile Agents 6 1.5 Overview of the Paper The rest of the paper proceeds as follows.
Reference: [7] <author> Mads Dam. </author> <title> Proving trust in systems of second-order processes. </title> <booktitle> In Hawaii International Conference on Systems Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1998. </year>
Reference-contexts: Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources. Type systems have also been used to study secure transmission of data, using cryptographic techniques <ref> [2, 1, 7] </ref>; while the goals of this work are related to ours, there appears to be little technical overlap. Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing [10, 3, 4, 27, 28, 31].
Reference: [8] <author> D. Denning. </author> <title> A lattice model of secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5):236242, </volume> <year> 1976. </year>
Reference-contexts: Controlled access to data and system calls has been central to operating systems for decades. In addition, methods for statically guaranteeing that secure information does not leak to insecure agents have been known at least since the 70's <ref> [8, 9] </ref>. In this paper we combine these two lines of work to show that secure resource access in highly distributed networks can be guaranteed using a mix of static and runtime typing. The specific contributions are threefold: riely@csc.ncsu.edu. NCSU, Raleigh, NC 27695-7534, USA. <p> In the current paper we have extended this framework to allow the use of capabilities, annotated with security levels, in arbitrary open networks. In this extended abstract, we have presented Dp without any constructs for conditional execution. In this case secure dataflow analysis <ref> [8, 9] </ref> coincides with the typing system presented in Section 3. In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours.
Reference: [9] <author> D. Denning. </author> <title> Certification of programs for secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 20:504513, </volume> <year> 1977. </year>
Reference-contexts: Controlled access to data and system calls has been central to operating systems for decades. In addition, methods for statically guaranteeing that secure information does not leak to insecure agents have been known at least since the 70's <ref> [8, 9] </ref>. In this paper we combine these two lines of work to show that secure resource access in highly distributed networks can be guaranteed using a mix of static and runtime typing. The specific contributions are threefold: riely@csc.ncsu.edu. NCSU, Raleigh, NC 27695-7534, USA. <p> In the current paper we have extended this framework to allow the use of capabilities, annotated with security levels, in arbitrary open networks. In this extended abstract, we have presented Dp without any constructs for conditional execution. In this case secure dataflow analysis <ref> [8, 9] </ref> coincides with the typing system presented in Section 3. In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours.
Reference: [10] <author> C. Fournet, G. Gonthier, J.J. Levy, L. Marganget, and D. Remy. </author> <title> A calculus of mobile agents. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR: Proceedings of the International Conference on Concurrency Theory, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 406421, </pages> <address> Pisa, </address> <month> August </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [11] <author> Cedric Fournet, Cosimo Laneve, Luc Maranget, and Didier Remy. </author> <title> Implicit typing OEa la ML for the join-calculus. </title> <booktitle> In CONCUR: Proceedings of the International Conference on Concurrency Theory, Lecture Notes in Computer Science, </booktitle> <address> Warsaw, </address> <month> August </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing [10, 3, 4, 27, 28, 31]. While there is an active interest in typing systems for such languages <ref> [11, 6] </ref>, we are aware of no other work on capability-based or secure typing systems for distributed calculi. Secure Resource Access for Mobile Agents 6 1.5 Overview of the Paper The rest of the paper proceeds as follows.
Reference: [12] <author> Nevin Heintz and Jon G. Riecke. </author> <title> The SLam calculus: Programming with secrecy and integrity. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours. Recently, it has been shown that secure dataflow analysis can be expressed using typing rules <ref> [24, 32, 29, 17, 12] </ref>. The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage.
Reference: [13] <author> Matthew Hennessy and James Riely. </author> <title> Resource access control in systems of mobile agents. </title> <institution> Computer Science Technical Report 2/98, University of Sussex, </institution> <year> 1998. </year> <note> Available from http://www.cogs. susx.ac.uk/. Extended abstract in 3rd International Workshop on High-Level Concurrent Languages (HLCL'98), volume 16(3) of Electronic Notes in Theoretical Computer Science (http://www. elsevier.nl/locate/entcs), Nice, September 1998. Elsevier. </note>
Reference-contexts: These results are expressed in terms of the language Dp <ref> [13] </ref>, a network-aware distributed version of the p-calculus [19, 18]. In the rest of this introduction we describe (1) the formal framework provided by Dp, (2) security policies and their application to closed networks, (3) the extensions required to handle open networks, and (4) related work. <p> In this paper we introduce a new language of security types, allowing us to develop a new type discipline which can express such constraints in open networks. These security types are obtained by adding security levels to the type language of <ref> [13] </ref> 1.2 Security Topologies and Security Policies In order to establish constraints on the use of accnt resources, we introduce a security topology, i.e. a lattice S of security levels. <p> ensure that runtime errors can occur only at bad sites (sites which are assigned the type lbad); the security policy G is respected at all good sites (sites which are not assigned the type lbad). 1.4 Related Work The secure types presented here are derived from the type language of <ref> [13] </ref>, obtained by extending the typing system presented by Pierce and Sangiorgi at LICS in 1993 [25]. The type language of [13], however, is not amenable to use in open networks. <p> is respected at all good sites (sites which are not assigned the type lbad). 1.4 Related Work The secure types presented here are derived from the type language of <ref> [13] </ref>, obtained by extending the typing system presented by Pierce and Sangiorgi at LICS in 1993 [25]. The type language of [13], however, is not amenable to use in open networks. This lead us to abandon Pierce/Sangiorgi style capabilities in our previous work on open networks [14, 26], which concentrated on simple type-safety properties. <p> Secure Resource Access for Mobile Agents 6 1.5 Overview of the Paper The rest of the paper proceeds as follows. In the next section we describe Dp, including its reduction semantics; this presentation of Dp extends that of <ref> [13] </ref> with security levels, affecting minor changes in both the syntax and semantics. We then define security policies and runtime error, which formalizes the intuition that a security policy has been violated. <p> For convenience, we introduce separate metavariables for resource and location pre-types, respectively A and K. Their basic structure is taken from <ref> [13] </ref> to which the reader is referred for a detailed description and rationale. Here the capabilities are annotated with security levels; intuitively an agent running at security level s can only access capabilities whose security level is at most s. <p> Dependent tuples are used to transmit information about non-local resources; their role is explained in detail in <ref> [13] </ref>. NOTATION. In examples, we sometimes drop the security-level subscript ?; for example, rendering int ? as int.
Reference: [14] <author> Matthew Hennessy and James Riely. </author> <title> Type-safe execution of mobile agents in anonymous networks. </title> <editor> In J. Vitek and C. Jensen, editors, </editor> <title> Secure Internet Programming: Security Issues for Distributed and Mobile Objects, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1999. </year> <note> Also available as Computer Science Technical Report 3/98, </note> <institution> University of Sussex, </institution> <year> 1998. </year> <note> Available from http: //www.cogs.susx.ac.uk/. </note>
Reference-contexts: Methods for automatically generating proofs guaranteeing standard type-safety properties have been developed [20, 22]. * In <ref> [14] </ref> sites maintain filters, which lists the types of local resources. An incoming agent is compared against the filter before it is allowed to run, guaranteeing that the agent cannot misuse local resources during its execution. <p> In addition to the move rule, other reduction rules are also modified to reflect the fact that filters may change over time as information about new resources in the network is obtained. This approach to open networks was first introduced in <ref> [14, 26] </ref>. In Appendix A, we establish Subject Reduction and Type Safety results for open networks, showing that this form of runtime typechecking offers adequate protection from malicious agents. <p> The type language of [13], however, is not amenable to use in open networks. This lead us to abandon Pierce/Sangiorgi style capabilities in our previous work on open networks <ref> [14, 26] </ref>, which concentrated on simple type-safety properties. In the current paper we have extended this framework to allow the use of capabilities, annotated with security levels, in arbitrary open networks. In this extended abstract, we have presented Dp without any constructs for conditional execution.
Reference: [15] <author> Frederick Coleville Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1995. </year>
Reference-contexts: The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage. Several studies have addressed the issue of static typing for languages with remote resources <ref> [23, 5, 27, 15] </ref>, but none of these address secure resources or open networks. Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [16] <author> Dexter Kozen. </author> <title> Efficient code certification. </title> <type> Technical Report 98-1661, </type> <institution> Cornell University, Department of Computer Science, </institution> <year> 1998. </year> <note> Available from http://www.cs.cornell.edu/kozen/secure. </note>
Reference-contexts: Several studies have addressed the issue of static typing for languages with remote resources [23, 5, 27, 15], but none of these address secure resources or open networks. Proof carrying code and related techniques <ref> [33, 21, 16, 20] </ref> address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [17] <author> Xavier leroy and Francois Rouaix. </author> <title> Security properties of typed applets. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: For example: * In Java [33] applets from non-local URLs are checked by a bytecode verifier before loading. The verifier checks, for example, that all access to local memory is type-safe. Bytecode verification has been formalized using typing rules in [30]; a similar approach is taken in <ref> [17] </ref>. * In proof-carrying-code [21] an incoming agent must provide a proof that the code it is proposing to run locally satisfies appropriate constraints set down by the host. <p> In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours. Recently, it has been shown that secure dataflow analysis can be expressed using typing rules <ref> [24, 32, 29, 17, 12] </ref>. The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage.
Reference: [18] <author> Robin Milner. </author> <title> The polyadic p-calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <title> Also in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: These results are expressed in terms of the language Dp [13], a network-aware distributed version of the p-calculus <ref> [19, 18] </ref>. In the rest of this introduction we describe (1) the formal framework provided by Dp, (2) security policies and their application to closed networks, (3) the extensions required to handle open networks, and (4) related work. <p> We defer the discussion of types, T, until Section 2.3. The main syntactic categories of the language are as follows: * Threads, P, are terms of the ordinary polyadic p-calculus <ref> [18] </ref> with additional constructs for movement and restriction of locations.
Reference: [19] <author> Robin Milner, Joachim Parrow, and David Walker. </author> <title> A calculus of mobile processes, Parts I and II. Information and Computation, </title> <address> 100:177, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: These results are expressed in terms of the language Dp [13], a network-aware distributed version of the p-calculus <ref> [19, 18] </ref>. In the rest of this introduction we describe (1) the formal framework provided by Dp, (2) security policies and their application to closed networks, (3) the extensions required to handle open networks, and (4) related work.
Reference: [20] <author> Greg Morrisett, David Walker, Karl Crary, and Neal Glew. </author> <title> From System F to typed assembly language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 8597, </pages> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: Methods for automatically generating proofs guaranteeing standard type-safety properties have been developed <ref> [20, 22] </ref>. * In [14] sites maintain filters, which lists the types of local resources. An incoming agent is compared against the filter before it is allowed to run, guaranteeing that the agent cannot misuse local resources during its execution. <p> Several studies have addressed the issue of static typing for languages with remote resources [23, 5, 27, 15], but none of these address secure resources or open networks. Proof carrying code and related techniques <ref> [33, 21, 16, 20] </ref> address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [21] <author> George Necula. </author> <title> Proof-carrying code. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: The verifier checks, for example, that all access to local memory is type-safe. Bytecode verification has been formalized using typing rules in [30]; a similar approach is taken in [17]. * In proof-carrying-code <ref> [21] </ref> an incoming agent must provide a proof that the code it is proposing to run locally satisfies appropriate constraints set down by the host. <p> Several studies have addressed the issue of static typing for languages with remote resources [23, 5, 27, 15], but none of these address secure resources or open networks. Proof carrying code and related techniques <ref> [33, 21, 16, 20] </ref> address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [22] <author> George C. Necula and Peter Lee. </author> <title> The design and implementation of a certifying compiler. </title> <booktitle> In Proceedings of the '98 Conference on Programming Language Design and Implementation, </booktitle> <address> Montreal, 1998. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Methods for automatically generating proofs guaranteeing standard type-safety properties have been developed <ref> [20, 22] </ref>. * In [14] sites maintain filters, which lists the types of local resources. An incoming agent is compared against the filter before it is allowed to run, guaranteeing that the agent cannot misuse local resources during its execution.
Reference: [23] <author> Atsuhi Ohori and Kazuhiko Kato. </author> <title> Semantics for communication primitives in a polymorphic language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> Charleston, </address> <month> January </month> <year> 1993. </year> <title> ACM Press. Secure Resource Access for Mobile Agents 12 </title>
Reference-contexts: The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage. Several studies have addressed the issue of static typing for languages with remote resources <ref> [23, 5, 27, 15] </ref>, but none of these address secure resources or open networks. Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources.
Reference: [24] <author> J. Palsberg and P. rbaek. </author> <title> Trust in the l-calculus. </title> <booktitle> In Static Analysis Symposium, volume 983 of Lecture Notes in Computer Science, </booktitle> <pages> pages 314329. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours. Recently, it has been shown that secure dataflow analysis can be expressed using typing rules <ref> [24, 32, 29, 17, 12] </ref>. The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage.
Reference: [25] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <note> Mathematical Structures in Computer Science, 6(5):409454, 1996. Extended abstract in LICS '93. </note>
Reference-contexts: lbad); the security policy G is respected at all good sites (sites which are not assigned the type lbad). 1.4 Related Work The secure types presented here are derived from the type language of [13], obtained by extending the typing system presented by Pierce and Sangiorgi at LICS in 1993 <ref> [25] </ref>. The type language of [13], however, is not amenable to use in open networks. This lead us to abandon Pierce/Sangiorgi style capabilities in our previous work on open networks [14, 26], which concentrated on simple type-safety properties.
Reference: [26] <author> James Riely and Matthew Hennessy. </author> <title> Trust and partial typing in open systems of mobile agents. </title> <institution> Computer Science Technical Report 4/98, University of Sussex, </institution> <year> 1998. </year> <title> Available from http://www. cogs.susx.ac.uk/. </title> <booktitle> Extended Abstract in Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Antonio, </address> <month> January </month> <year> 1999. </year> <note> ACM Press. </note>
Reference-contexts: An incoming agent is compared against the filter before it is allowed to run, guaranteeing that the agent cannot misuse local resources during its execution. This approach is extended in <ref> [26] </ref> by allowing control of non-local information and by introducing a notion of trust between locations. While type-safety is a necessary pre-condition to secure computation, it is not sufficient. There are often certain resources that an incoming agent should not use at all, even in a type-safe way. <p> In addition to the move rule, other reduction rules are also modified to reflect the fact that filters may change over time as information about new resources in the network is obtained. This approach to open networks was first introduced in <ref> [14, 26] </ref>. In Appendix A, we establish Subject Reduction and Type Safety results for open networks, showing that this form of runtime typechecking offers adequate protection from malicious agents. <p> The type language of [13], however, is not amenable to use in open networks. This lead us to abandon Pierce/Sangiorgi style capabilities in our previous work on open networks <ref> [14, 26] </ref>, which concentrated on simple type-safety properties. In the current paper we have extended this framework to allow the use of capabilities, annotated with security levels, in arbitrary open networks. In this extended abstract, we have presented Dp without any constructs for conditional execution. <p> To accomplish this, in Table 7 we define a notation for constructing simple environments, which uses the meet operator on types. The reader is referred to page 10 of <ref> [26] </ref> where the notation is discussed in detail. 3 The main results of this section can now be stated: THEOREM 3.2 (SUBJECT REDUCTION). If G ` N and N ! N 0 then G ` N 0 . fl THEOREM 3.3 (TYPE SAFETY).
Reference: [27] <author> Tatsurou Sekiguchi and Akinori Yonezawa. </author> <title> A calculus with code mobility. </title> <booktitle> In FMOODS '97, </booktitle> <address> Canterbury, July 1997. </address> <publisher> Chapman and Hall. </publisher>
Reference-contexts: The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage. Several studies have addressed the issue of static typing for languages with remote resources <ref> [23, 5, 27, 15] </ref>, but none of these address secure resources or open networks. Proof carrying code and related techniques [33, 21, 16, 20] address the problem of runtime typechecking in open networks, but do not consider either secure resources or references to remote resources. <p> Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [28] <author> Peter Sewell, Pawel Wojciechowski, and Benjamin Pierce. </author> <title> Location-independent communication for mobile agents: a two-level architecture. </title> <booktitle> In Workshop on Internet Programming Languages (WIPL), </booktitle> <address> Chicago, </address> <year> 1998. </year> <note> Available from http://www.cl.cam.ac.uk/users/pes20/. </note>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [29] <author> Geoffrey Smith and Dennis Volpano. </author> <title> Secure information flow in a multi-threaded imperative language. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours. Recently, it has been shown that secure dataflow analysis can be expressed using typing rules <ref> [24, 32, 29, 17, 12] </ref>. The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage.
Reference: [30] <author> R. Stata and M. Abadi. </author> <title> A type system for java bytecode subroutines. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference-contexts: For example: * In Java [33] applets from non-local URLs are checked by a bytecode verifier before loading. The verifier checks, for example, that all access to local memory is type-safe. Bytecode verification has been formalized using typing rules in <ref> [30] </ref>; a similar approach is taken in [17]. * In proof-carrying-code [21] an incoming agent must provide a proof that the code it is proposing to run locally satisfies appropriate constraints set down by the host.
Reference: [31] <author> J. Vitek and G. Castagna. </author> <title> A calculus of secure mobile computations. </title> <booktitle> In Workshop on Internet Programming Languages (WIPL), </booktitle> <address> Chicago, </address> <year> 1998. </year> <note> Available from http://cuiwww.unige.ch/ ~jvitek/. </note>
Reference-contexts: Finally, we note that several calculi, in addition to Dp, have been proposed for the study of distributed computing <ref> [10, 3, 4, 27, 28, 31] </ref>. While there is an active interest in typing systems for such languages [11, 6], we are aware of no other work on capability-based or secure typing systems for distributed calculi.
Reference: [32] <author> D. Volpano, G. Smith, and C. </author> <title> Irvine. A sound type system for secure flow analysis. </title> <journal> Journal of Computer Security, </journal> <volume> 4(3):121, </volume> <year> 1996. </year>
Reference-contexts: In the presence of conditionals, however, secure dataflow analysis rejects many programs that are accepted by a standard typing system, such as ours. Recently, it has been shown that secure dataflow analysis can be expressed using typing rules <ref> [24, 32, 29, 17, 12] </ref>. The techniques developed in these papers should be readily transferable to our setting, strengthening the type system to prevent not only transmission of secure data, but also indirect data leakage.

References-found: 32

