URL: http://www.cs.toronto.edu/~avigal/slm.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Email: Email: favigal, ieretzng@ie.technion.ac.il  
Title: CODES A Design Tool for Computerized Systems  
Author: Avigdor Gal, Opher Etzion 
Address: Haifa, 32000, Israel  
Affiliation: Technion Israel Institute of Technology Information Systems Engineering Department Faculty of Industrial Engineering and Management  
Abstract: In this paper we present a design tool for complex computerized systems, that is based on the experience gained in the active database research area. CODES, a COntrol and Data Engineering of Systems, extends the capabilities of contemporary design tools by enabling a top-down design and reasoning facilities. The model combines the notions of hierarchy, concurrency and communication, and enables the representation of data flow as well as control flow. These properties form a highly structured and accurate specification language. The model is given using a formal and a graphical presentation. keywords: Design, Software engineering, Information modeling
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U.S. Chakravarthy and D. Mishra. </author> <title> An expressive event specification language for active databases. </title> <journal> Data & Knowledge Engineering Journal, </journal> <volume> 13(3), </volume> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: A control relationship from an external event ce 1 to an external event ce 2 . Its result is the triggering of ce 2 . This type of relationships enables the modeling of composite events <ref> [1] </ref>. 2.3 Using classification to define a CODES model CODES represents a pattern of a computerized system, i.e., the possible states and behaviors of a system. To do so, we shall use a classification abstraction [9], as follows.
Reference: [2] <author> P. Coad and E. Yourdon. </author> <title> Object Oriented Analysis. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, 2nd edition, </address> <year> 1991. </year>
Reference-contexts: with process driven approach- The combination of a process driven approach (e.g., [3], [14]) with an event driven approach provides a natural design tool and supports executable specifications using high level abstractions. * Unification of structural, functional and behavioral aspects- Many methodologies for the specification of complex systems (e.g., OOA <ref> [2] </ref>, SADT [13] and HOS [7]) concentrate mainly on the structural and functional aspects of systems, and do not provide dynamic semantics to handle behavioral aspects. Others (e.g., Statecharts [8]) concentrated mainly on the behavioral aspect. CODES provides a combination of the three aspects. <p> The main contribution of this model is the combination of data flow and control flow to a unified model. Thus, we omit the structural aspect of the model. The structural aspect of the model is similar to the approach as given in <ref> [2] </ref>. 2 The CODES model In this section we provide the basic definitions of the CODES elements, object classes, event classes, and process classes. The CODES elements are connected through lines, that represent possible relationships among elements.
Reference: [3] <author> D. Dori, R.M. Haralick, and I. Phillips. </author> <title> Transformations among products representations: an object-process approach. </title> <editor> In S. Adiga, editor, </editor> <booktitle> Applications of Object-Oriented Analysis in Manufacturing. </booktitle> <publisher> Chapman Hall, </publisher> <year> 1993. </year>
Reference-contexts: For example, queries of the form: What is the condition for activating Y, if we are at X can be evaluated using graph techniques, embedded in the CODES inference mechanism. * Event driven combined with process driven approach- The combination of a process driven approach (e.g., <ref> [3] </ref>, [14]) with an event driven approach provides a natural design tool and supports executable specifications using high level abstractions. * Unification of structural, functional and behavioral aspects- Many methodologies for the specification of complex systems (e.g., OOA [2], SADT [13] and HOS [7]) concentrate mainly on the structural and functional <p> TURN RESULT d3.4: 3RD WHEEL TURN RESULT 1 MONEY INSERTED 2 START GAME 5 SEND MONEY 4 MACHINE READY c1 c4 c3.2 3.2 TURN WHEELS c3.13.1 START MACHINE 3.4 CHECK WINNING 3.3 ROUND RESULTS 1ST WHEEL: 2ND WHEEL: 3RD WHEEL: d3.5: WHEEL TURN RESULT (b) some analysis and design approaches <ref> [3] </ref>. Due to the symmetrical assumption, we claim that the unfolding assumption holds for both object classes and process classes. For example, Figure 1 (b) is the result of unfolding the slot machine object from Figure 1 (a). The gray rectangle represents the borders of the object.
Reference: [4] <author> O. Etzion. </author> <title> PARDES | a data-driven oriented active database model. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 22(1) </volume> <pages> 7-14, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: In the following section, we present the CODES model, both formally and through a graphical representation. CODES is based on new techniques in active database programming <ref> [4] </ref>, [5], that use a dependency graph of data items and operations to monitor transaction in active databases. The main contribution of this model is the combination of data flow and control flow to a unified model. Thus, we omit the structural aspect of the model.
Reference: [5] <author> O. Etzion. Tapuz: </author> <title> an information repository approach to active database applications. </title> <type> Technical Report ISE-TR-94-2, </type> <institution> Technion-Israel Institute of Technology, </institution> <month> Aug </month> <year> 1994. </year>
Reference-contexts: In the following section, we present the CODES model, both formally and through a graphical representation. CODES is based on new techniques in active database programming [4], <ref> [5] </ref>, that use a dependency graph of data items and operations to monitor transaction in active databases. The main contribution of this model is the combination of data flow and control flow to a unified model. Thus, we omit the structural aspect of the model.
Reference: [6] <author> A. Gal and O. Etzion. </author> <title> Maintaining data driven rules in databases using an invariant language. </title> <journal> IEEE Computer, </journal> <volume> 28(1) </volume> <pages> 28-38, </pages> <month> Jan </month> <year> 1995. </year>
Reference-contexts: We believe that the use of CODES would ease the design task, and would save expensive debugging time. A similar model is tested as a suitable vehicle for representing activities in an active database <ref> [6] </ref>. The model is currently in use as part of final projects of students in the Information Systems Engineering program in the Technion | Israel Institute of Technology.
Reference: [7] <author> M. Hamilton and S. Zeldin. </author> <title> Higher order software|a methodology for defining software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 2 </volume> <pages> 9-32, </pages> <year> 1976. </year>
Reference-contexts: combination of a process driven approach (e.g., [3], [14]) with an event driven approach provides a natural design tool and supports executable specifications using high level abstractions. * Unification of structural, functional and behavioral aspects- Many methodologies for the specification of complex systems (e.g., OOA [2], SADT [13] and HOS <ref> [7] </ref>) concentrate mainly on the structural and functional aspects of systems, and do not provide dynamic semantics to handle behavioral aspects. Others (e.g., Statecharts [8]) concentrated mainly on the behavioral aspect. CODES provides a combination of the three aspects.
Reference: [8] <author> D. Harel. Statecharts: </author> <title> a visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction The problem of specification and design of large and complex systems is well known in the system engineering literature [11], <ref> [8] </ref>, [10]. The design of communication networks, computer operating systems, and human-computer interfaces of software products are several examples of systems that are difficult to define in a clear and manageable way, and at the same time be formal enough to enable reasoning features. <p> Others (e.g., Statecharts <ref> [8] </ref>) concentrated mainly on the behavioral aspect. CODES provides a combination of the three aspects.
Reference: [9] <author> R. Hull and R. King. </author> <title> Semantic database modeling: Survey, application and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: This type of relationships enables the modeling of composite events [1]. 2.3 Using classification to define a CODES model CODES represents a pattern of a computerized system, i.e., the possible states and behaviors of a system. To do so, we shall use a classification abstraction <ref> [9] </ref>, as follows. A computerized object class coc (or simply an object class) designates the set of all the objects in the system that have the same sort of object's values and the same possible activities.
Reference: [10] <author> R.J.K. Jacob. </author> <title> Using formal specifications in the desgin of a human-computer interface. </title> <journal> Communications of the ACM, </journal> <volume> 26 </volume> <pages> 259-264, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The problem of specification and design of large and complex systems is well known in the system engineering literature [11], [8], <ref> [10] </ref>. The design of communication networks, computer operating systems, and human-computer interfaces of software products are several examples of systems that are difficult to define in a clear and manageable way, and at the same time be formal enough to enable reasoning features.
Reference: [11] <author> L. Liu and R. Mersman. </author> <title> Activity model: A declerative approach for capturing communication behavior in object-oriented databases. </title> <booktitle> In Proceedings of the International Conference on VLDB, </booktitle> <pages> pages 481-493, </pages> <address> Vancouver, Canada, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction The problem of specification and design of large and complex systems is well known in the system engineering literature <ref> [11] </ref>, [8], [10]. The design of communication networks, computer operating systems, and human-computer interfaces of software products are several examples of systems that are difficult to define in a clear and manageable way, and at the same time be formal enough to enable reasoning features.
Reference: [12] <author> J. Martin and C. McClure. </author> <title> Diagramming Techniques for Analysis and Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: This property is useful for a top-down design, and enable generating different views of the system for parallel implementation. This property solves the problem of exponential number of elements, discussed in <ref> [12] </ref>, and overcomes one of the main drawbacks of formal models like Petri nets. * Connective semantics- CODES has a clear and concise semantics of relationships among components; thus, behavioral reasoning is feasible.
Reference: [13] <author> D. Ross. </author> <title> Structured analysis (SADT): A language for communicating ideas. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 3 </volume> <pages> 16-34, </pages> <year> 1977. </year>
Reference-contexts: driven approach- The combination of a process driven approach (e.g., [3], [14]) with an event driven approach provides a natural design tool and supports executable specifications using high level abstractions. * Unification of structural, functional and behavioral aspects- Many methodologies for the specification of complex systems (e.g., OOA [2], SADT <ref> [13] </ref> and HOS [7]) concentrate mainly on the structural and functional aspects of systems, and do not provide dynamic semantics to handle behavioral aspects. Others (e.g., Statecharts [8]) concentrated mainly on the behavioral aspect. CODES provides a combination of the three aspects.
Reference: [14] <author> A. Wasserman. </author> <title> Extending state transition diagrams for the specification of human- computer interaction. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11 </volume> <pages> 699-713, </pages> <year> 1985. </year>
Reference-contexts: For example, queries of the form: What is the condition for activating Y, if we are at X can be evaluated using graph techniques, embedded in the CODES inference mechanism. * Event driven combined with process driven approach- The combination of a process driven approach (e.g., [3], <ref> [14] </ref>) with an event driven approach provides a natural design tool and supports executable specifications using high level abstractions. * Unification of structural, functional and behavioral aspects- Many methodologies for the specification of complex systems (e.g., OOA [2], SADT [13] and HOS [7]) concentrate mainly on the structural and functional aspects
References-found: 14

