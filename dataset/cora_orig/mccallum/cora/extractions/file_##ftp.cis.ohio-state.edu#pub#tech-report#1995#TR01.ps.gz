URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1995/TR01.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: email: framach,singhalg@cis.ohio-state.edu  
Title: A Consensus-Based Approach to Implementing Semaphores in a Distributed Environment  
Author: Mahendra Ramachandran and Mukesh Singhal 
Keyword: Key phrases: Operating Systems, Process Synchronization, Semaphores, Distributed Memory Architectures.  
Address: Columbus, Ohio 43210-1277  
Affiliation: Department of Computer and Information Science The Ohio State University,  
Abstract: Semaphores have been used for synchronization in both uniprocessor and shared memory multi-processor systems. However, in distributed systems, semaphores have not recieved much attention. This has been partly due to the lack of shared memory in such systems. It is nonetheless desirable to support such a mechanism in distributed systems. Semaphores are a general purpose mechanism with which a variety of synchronization problems can be addressed. Lately, many research projects have focused on providing a shared memory programming model on distributed systems (DSM systems.) This makes it more appealing to provide efficient solutions for supporting the semaphore mechanism in a distributed system. In this paper we present a distributed semaphore mechanism. The nodes in the system maintain their own copy of a semaphore. A P operation succeeds when a node performing it succeeds in performing it by consensus on all the nodes in the system. The P operation requests are time-stamped inorder to break ties among concurrent requests from different nodes. We proove the correctness of the algorithm, propose some alternatives to improve the performance of the base algorithm and demonstrate the effectiveness of this approach through simulation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Lamport. </author> <title> "Time, Clocks and Ordering of Events in Distributed Systems". </title> <journal> Communications of the ACM, </journal> <month> July </month> <year> 1978. </year>
Reference-contexts: All the nodes must also be notified when a particular node performs the V operation so that they may perform the V on their respective semaphores. This approach has some similarity to some mutual exclusion algorithms such as Lamport, Ricart-Agarawala, Maekawa, and Singhal <ref> [1, 2, 3, 4] </ref>. These algorithms, unlike the token-based mutual exclusion algorithms described in previous papers do not rely on a token. Instead, mutual exclusion is requested from and granted by a set of nodes in the system. <p> Every node maintains a logical clock which is updated everytime the node communicates with another as per the definition of timestamps proposed by Lamport <ref> [1] </ref>. We assume that this is performed implicitly and leave it out of our algorithms. The semaphores in the system are labeled as S 1 ,...,S k . Each semaphore has an initial value assigned to it (e.g., S 1 = 1, S 2 = 4).
Reference: [2] <author> G. Ricart and A. K. Agrawala. </author> <title> "An Optimal Algorithm for Mutual Exclusion in Computer Networks". </title> <journal> Communications of the ACM, </journal> <month> Jan </month> <year> 1981. </year>
Reference-contexts: All the nodes must also be notified when a particular node performs the V operation so that they may perform the V on their respective semaphores. This approach has some similarity to some mutual exclusion algorithms such as Lamport, Ricart-Agarawala, Maekawa, and Singhal <ref> [1, 2, 3, 4] </ref>. These algorithms, unlike the token-based mutual exclusion algorithms described in previous papers do not rely on a token. Instead, mutual exclusion is requested from and granted by a set of nodes in the system.
Reference: [3] <author> M. Maekawa. </author> <title> "A p N Algorithm for Mutual Exclusion in Decentralized Systems". </title> <journal> ACM Transactions on Computer Systems, </journal> <month> May </month> <year> 1985. </year> <title> 19 Multiple Binary Semaphores on 35 Processors (CST = 4 msec, </title> <type> RA= 10 msec) </type>
Reference-contexts: All the nodes must also be notified when a particular node performs the V operation so that they may perform the V on their respective semaphores. This approach has some similarity to some mutual exclusion algorithms such as Lamport, Ricart-Agarawala, Maekawa, and Singhal <ref> [1, 2, 3, 4] </ref>. These algorithms, unlike the token-based mutual exclusion algorithms described in previous papers do not rely on a token. Instead, mutual exclusion is requested from and granted by a set of nodes in the system.
Reference: [4] <author> M. Singhal. </author> <title> "A Heuristically-Aided Algorithm for Mutual Exclusion in Distributed Systems". </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(5), </volume> <month> May </month> <year> 1989. </year>
Reference-contexts: All the nodes must also be notified when a particular node performs the V operation so that they may perform the V on their respective semaphores. This approach has some similarity to some mutual exclusion algorithms such as Lamport, Ricart-Agarawala, Maekawa, and Singhal <ref> [1, 2, 3, 4] </ref>. These algorithms, unlike the token-based mutual exclusion algorithms described in previous papers do not rely on a token. Instead, mutual exclusion is requested from and granted by a set of nodes in the system.
Reference: [5] <author> M. Ramachandran and M. Singhal. </author> <title> "Distributed Semaphores". </title> <type> Technical Report OSU-CISRC-6/94-TR34, </type> <institution> The Ohio State University Computer and Information Science Research Center, </institution> <month> June </month> <year> 1994. </year> <title> 20 Multiple Resource Counting Semaphores on 10 Processors (CST = 4 msec, RA= 10 msec) Multiple Resource Counting Semaphores on 35 Processors (CST = 4 msec, </title> <type> RA= 10 msec) 21 22 </type>
Reference-contexts: The P and V requests would be multicast to the nodes within of a particular cluster and will not be broadcast to the entire system. The algorithm must provide for inter-cluster proxy-P and proxy-V operations as well. A Similar strategy was proposed for token-based implementations of semaphores <ref> [5] </ref>. The modified algorithms, using clustering is presented. Initiating a P Operation When a node performs a P operation on a semaphore S i , it first examines its local copy of the semaphore.
References-found: 5

