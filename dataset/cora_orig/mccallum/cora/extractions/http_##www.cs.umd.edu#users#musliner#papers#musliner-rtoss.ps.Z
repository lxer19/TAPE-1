URL: http://www.cs.umd.edu/users/musliner/papers/musliner-rtoss.ps.Z
Refering-URL: http://www.cs.umd.edu/users/musliner/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: djm@eecs.umich.edu  
Phone: (313) 763-5363  
Title: Any-Dimension Algorithms  
Author: David J. Musliner Edmund H. Durfee Kang G. Shin 
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Computer Science and Engineering Division Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. L. Burden and J. D. Faires, </author> <title> Numerical Analysis, </title> <publisher> PWS-KENT Publishing Co., </publisher> <year> 1989. </year>
Reference-contexts: Any-time algorithms are one type of any-dimension algorithm, terminated when an interrupt indicates that a temporal threshold has been reached. Similarly, "any-precision" algorithms halt when a result with a certain precision has been achieved; many iterative numerical methods <ref> [1] </ref> are any-precision algorithms. Thus any-dimension algorithms can provide guarantees on either the quality of the final output of a process or the maximum resources it will consume while running.
Reference: [2] <author> T. Dean and M. Boddy, </author> <title> "An Analysis of Time-Dependent Planning," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference-contexts: These on-line techniques are exemplified by "any-time" algorithms, which can be interrupted at any time to yield a result, possibly with reduced precision, confidence or completeness <ref> [2, 3] </ref>. Any-time algorithms provide an on-line, dynamic method for guaranteeing the timeliness of a result. This paper generalizes the any-time technique to provide guarantees on other measures of performance, and examines some of the issues involved with the resulting class of any-dimension algorithms. <p> Thus any-dimension algorithms do not rely on such mappings to make guarantees. Instead, any-dimension algorithms retain their thresholds on the original measurement dimensions. A similar argument applies to Dean and Boddy's work on "deliberation scheduling," deciding how long to run any-time algorithms <ref> [2] </ref>. Their formulation does indicate that the problem domain can have an effect on the mapping of an algorithm's result utility to running time. However, they do not discuss precisely how that effect can be quantified.
Reference: [3] <author> K.-J. Lin, S. Natarajan, and J. W.-S. Liu, </author> <title> "Imprecise Results: Utilizing Partial Computations in Real-Time Systems," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 210-217, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: These on-line techniques are exemplified by "any-time" algorithms, which can be interrupted at any time to yield a result, possibly with reduced precision, confidence or completeness <ref> [2, 3] </ref>. Any-time algorithms provide an on-line, dynamic method for guaranteeing the timeliness of a result. This paper generalizes the any-time technique to provide guarantees on other measures of performance, and examines some of the issues involved with the resulting class of any-dimension algorithms.
Reference: [4] <author> J. W.-S. Liu, K.-J. Lin, and S. Natarajan, </author> <title> "Scheduling Real-Time, Periodic Jobs Using Imprecise Results," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 252-260, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Also, if we are monitoring memory usage, for example, we would not want the any-dimension algorithm's code to be responsible for checking a memory limit each time an allocation was performed; that should be done outside the any-dimension process, preferably in operating system code. Related Work Liu et al. <ref> [4] </ref> have investigated an approach known as "imprecise computation," which is very similar to an any-time algorithm. They discuss using an incremental algorithm which generates intermediate results with non-decreasing precision. The key difference from pure any-time algorithms is that the authors of [4] also postulate that a known amount of computation <p> Related Work Liu et al. <ref> [4] </ref> have investigated an approach known as "imprecise computation," which is very similar to an any-time algorithm. They discuss using an incremental algorithm which generates intermediate results with non-decreasing precision. The key difference from pure any-time algorithms is that the authors of [4] also postulate that a known amount of computation time will lead to an acceptably precise result. <p> In general, such a mapping is not available, because the precision of a result is highly dependent on the particular problem to which the algorithm is being applied. For example, Liu et al. <ref> [4] </ref> describe an any-time implementation of Newton's method for finding the roots of a function F .
Reference: [5] <author> J. A. Stankovic and K. Ramamritham, </author> <title> "The Design of the Spring Kernel," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 146-157, </pages> <month> December </month> <year> 1987. </year> <month> 4 </month>
Reference-contexts: Introduction In striving to apply computer control systems to domains which require predictable performance, researchers have developed methods of obtaining performance guarantees using limited system resources. These guarantees are usually based on either off-line scheduling techniques that reserve resources (e.g., the Spring kernel <ref> [5] </ref>), or on-line techniques that dynamically adjust resource usage to meet guarantees. These on-line techniques are exemplified by "any-time" algorithms, which can be interrupted at any time to yield a result, possibly with reduced precision, confidence or completeness [2, 3].
References-found: 5

