URL: http://www.cis.udel.edu/~pollock/papers/asian.ps
Refering-URL: http://www.cis.udel.edu/~jochen/passages/pubs.htm
Root-URL: http://www.cis.udel.edu
Email: yang@cis.udel.edu pollock@cis.udel.edu  
Title: An Algorithm for All-du-path Testing Coverage of Shared Memory Parallel Programs  
Author: C.-S. D. Yang and L. L. Pollock 
Address: 19716, USA  
Affiliation: Computer and Information Sciences University of Delaware Newark, DE  
Abstract: Little attention has focused on applying traditional testing methodology to parallel programs. This paper discusses issues involved in providing all-du-path coverage in shared memory parallel programs, and describes an algorithm for finding a set of paths covering all define-use pairs. To our knowledge, this is the first effort of this kind. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bertolino and M. Marre. </author> <title> Automatic generation of path covers based on the control flow analysis of computer programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> 20(12) 885-899, Dec. 1994. 
Reference-contexts: This paper describes contributions towards the goal of providing automatic generation of test cases for the structural testing of parallel programs. Structural testing of sequential programs has been studied extensively <ref> [4, 5, 8, 1] </ref>. However, there is currently no known method for determining the all-du-path coverage for parallel programs. <p> that in some cases the P AT H w may not exist Hence, finding the P AT H w is not computationally possible. 3 Current Approaches In the context of sequential programs, several researchers have contributed to generating test cases using path finding as well as finding minimum path coverage <ref> [2, 7, 1] </ref>. These methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs. <p> This is not a straightforward task, and becomes a downfall of using DFS in isolation for providing all-du-path coverage for parallel programs. 3.2 Dominator/Implied Trees (DT-IT) Bertolino and Marre <ref> [1] </ref> have developed an algorithm that uses dominator trees (DT) and implied trees (IT) (i.e., post-dominator trees) to find a path coverage for all branches in sequential programs [1]. <p> becomes a downfall of using DFS in isolation for providing all-du-path coverage for parallel programs. 3.2 Dominator/Implied Trees (DT-IT) Bertolino and Marre <ref> [1] </ref> have developed an algorithm that uses dominator trees (DT) and implied trees (IT) (i.e., post-dominator trees) to find a path coverage for all branches in sequential programs [1]. If we apply this algorithm alone to find the all-du-path coverage for parallel programs, we need to find a path coverage for all du-pairs instead of all-edges which is a minor change. However, we also run into the same problem as in the DFS.
Reference: [2] <author> H. N. Gabow, S. N. Maheshwari, and L. J. Osterweil. </author> <title> On two problems in the generation of program test paths. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-2(3):227-231, </volume> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: that in some cases the P AT H w may not exist Hence, finding the P AT H w is not computationally possible. 3 Current Approaches In the context of sequential programs, several researchers have contributed to generating test cases using path finding as well as finding minimum path coverage <ref> [2, 7, 1] </ref>. These methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs. <p> However, we have found that the DFS and the DT-IT approaches can be used together with extension to provide all-du-path coverage for parallel programs. We first look at their limitations for providing all-du-path coverage for parallel programs when used in isolation. 3.1 Depth-first Search (DFS) Gabow, Maheshwari, and Osterweil <ref> [2] </ref> propose to use DFS to find actual paths for connecting two nodes in sequential programs. When applying the DFS alone to parallel programs, we claim that it is not appropriate even for finding P AT H a , not to mention P AT H w .
Reference: [3] <author> D. Grunwald and H. Srinivasan. </author> <title> Data flow equations for explicitly parallel programs. </title> <booktitle> In Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 159-168, </pages> <address> California, USA, </address> <year> 1993. </year>
Reference-contexts: We first describe the data structures utilized in the du-pair path finding algorithm, and then present the details of the algorithm. The algorithm assumes that the individual du-pairs of the parallel program have been found. In our implementation, we use the work by Grunwald and Srini-vasan <ref> [3] </ref> as the basis for finding individual du-pairs. 4.1 Data Structures The main data structures used in the hybrid algorithm are: (1) a PPFG and a source level control flow graph, (2) one post/wait working queue per thread used for storing the post/wait nodes that are required to be included in
Reference: [4] <author> J. R. Horgan and S. </author> <title> London. Data flow coverage and the C language. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 87-97, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: This paper describes contributions towards the goal of providing automatic generation of test cases for the structural testing of parallel programs. Structural testing of sequential programs has been studied extensively <ref> [4, 5, 8, 1] </ref>. However, there is currently no known method for determining the all-du-path coverage for parallel programs.
Reference: [5] <author> R. Jasper, M. Brennan, K. Williamson, and B. Currier. </author> <title> Test data generation and feasible path analysis. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 95-107, </pages> <address> Seattle, Washington, </address> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: This paper describes contributions towards the goal of providing automatic generation of test cases for the structural testing of parallel programs. Structural testing of sequential programs has been studied extensively <ref> [4, 5, 8, 1] </ref>. However, there is currently no known method for determining the all-du-path coverage for parallel programs.
Reference: [6] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 558-564, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: We use the symbol "" to represent the Lamport's happen before relation between two nodes <ref> [6] </ref>. We say a b if the node a is executed before the node b.
Reference: [7] <author> S. C. Ntafos and S. L. Hakimi. </author> <title> On path cover problems in digraphs and applications to program testing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(5) </volume> <pages> 520-529, </pages> <month> Sept. </month> <year> 1979. </year>
Reference-contexts: that in some cases the P AT H w may not exist Hence, finding the P AT H w is not computationally possible. 3 Current Approaches In the context of sequential programs, several researchers have contributed to generating test cases using path finding as well as finding minimum path coverage <ref> [2, 7, 1] </ref>. These methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs.
Reference: [8] <author> P. T. Revanbu, D. S. Rosenblum, and A. L. Wolf. </author> <title> Automated construction of testing and analysis tools. </title> <booktitle> In International Conference on Software Engineering, </booktitle> <pages> pages 241-250, </pages> <address> Sorrento, Italy, </address> <year> 1994. </year>
Reference-contexts: This paper describes contributions towards the goal of providing automatic generation of test cases for the structural testing of parallel programs. Structural testing of sequential programs has been studied extensively <ref> [4, 5, 8, 1] </ref>. However, there is currently no known method for determining the all-du-path coverage for parallel programs.
References-found: 8

