URL: http://www.icsi.berkeley.edu/~yairb/pubs/ABF-det-file-alloc.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Email: E-mail: baruch@theory.lcs.mit.edu.  E-mail: yairb@math.tau.ac.il.  E-mail: fiat@math.tau.ac.il.  
Title: Competitive Distributed File Allocation  
Author: Baruch Awerbuch Yair Bartal Amos Fiat 
Address: Tel-Aviv 69978, Israel.  Tel-Aviv 69978, Israel. Sup  
Note: Supported by Air Force Contract TNDGAFOSR-86-0078, ARO contract DAAL03-86-K-0171, NSF contract 9114440-CCR, DARPA contract N00014-J-92-1799, and a special grant from IBM.  Research supported in part by Ben Gurion Fellowship, the Ministry of Science and Arts.  ported by a grant from the Israeli Academy of Sciences.  
Affiliation: Lab. for Computer Science, MIT.  Department of Computer Science, Tel-Aviv University,  Department of Computer Science, School of Mathematics, Tel-Aviv University,  
Abstract: This paper deals with the file allocation problem [BFR92] concerning the dynamic optimization of communication costs to access data in a distributed environment. We develop a dynamic file re-allocation strategy that adapts on-line to a sequence of read and write requests whose location and relative frequencies are completely unpredictable. This is achieved by replicating the file in response to read requests and migrating the file in response to write requests while paying the associated communications costs, so as to be closer to processors that access it frequently. We develop first explicit deterministic on-line strategy assuming existence of global information about the state of the network; previous (deterministic) solutions were complicated and more expensive. Our solution has (optimal) logarithmic competitive ratio. The paper also contains the first explicit deterministic data migration [BS89] algorithm achieving the best known competitive ratio for this problem. Using somewhat different technique, we also develop the first deterministic distributed file allocation algorithm (using only local information) with poly-logarithmic competitive ratio against a globally-optimized optimal prescient strategy. 
Abstract-found: 1
Intro-found: 1
Reference: [AA92] <author> N. Alon and Y. Azar. </author> <title> On-line Steiner trees in the Euclidean plane. </title> <booktitle> In Proc. 8th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 337-343, </pages> <year> 1992. </year>
Reference-contexts: That potential function proof gives the intuition behind our more complex file allocation algorithm proof. Analysis of the greedy Steiner tree algorithm was also independently made by <ref> [AA92] </ref>, [CV92] and [WY93] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 3.2 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. 8 Proof. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW, WY93] </ref>, and in Section 3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives
Reference: [AP89] <author> Baruch Awerbuch and David Peleg. </author> <title> On-line tracking of mobile users. </title> <type> Technical Memo TM-410, </type> <institution> MIT, Lab. for Computer Science, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Consequently, the task of designing efficient on-line distributed algorithms is quite a challenging one, and cannot be taken for granted. While certain techniques have been developed in the literature in order to competitively locate mobile objects based on local information <ref> [AP89, BFR92] </ref>, it is hard (and sometimes provably impossible) to "localize" global-knowledge decision strategy without compromising the performance. Consequently, "good" global-knowledge on-line algorithm may prove to be absolutely useless in the distributed environment. <p> For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 6.2 Distributed Data Tracking 6.2.1 Data Tracking. The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q.
Reference: [AP90] <author> Baruch Awerbuch and David Peleg. </author> <title> Sparse partitions. </title> <booktitle> In Proc. 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 503-513, </pages> <year> 1990. </year>
Reference-contexts: The proof of the lemma is established using the triangle inequality and symmetry: D min X d (w i ; w j ) i j i j6=i (2D 2) i 6 Preliminaries for the Distributed Algorithm 6.1 Graph Decompositions The hierarchical network decomposition <ref> [AP90] </ref> defines the notion of clusters, partitions, and a hierarchy of partitions. All these definitions are a function of some parameter k. (Usually k = log n.) A cluster C is a set of vertices. A partition is a set of (possibly overlapping) clusters.
Reference: [AP91] <author> Baruch Awerbuch and David Peleg. </author> <title> Concurrent on-line tracking of mobile users. </title> <booktitle> In Proceedings of the Annual ACM SIGCOMM Symposium on Communication Architectures and Protocols, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 6.2 Distributed Data Tracking 6.2.1 Data Tracking. The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q.
Reference: [BBK + 90] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the power of randomization in on-line algorithms. </title> <booktitle> In Proc.of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 379-386, </pages> <month> may </month> <year> 1990. </year>
Reference-contexts: Consequently, "good" global-knowledge on-line algorithm may prove to be absolutely useless in the distributed environment. For example, the "existential" method of <ref> [BBK + 90] </ref> for derandomizing on-line algorithms is based on obtaining global information 2 and thus cannot be be efficiently implemented in a distributed setting. 1.3 Existing results. The management of data in a multiprocessing environment has been extensively studied, both from the theoretical and the practical standpoints. <p> Other special cases of these problems have been considered in [CLRW, LRWY94, WY93]. In [BFR92], randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem. The existential construction of <ref> [BBK + 90] </ref> can be used to obtain an O (log 2 n)-competitive deterministic centralized on-line "algorithm". One of its disadvantages is the exponential computational cost, which makes it unattractive from the practical perspective. <p> We conjecture that there exists a deterministic (global-control) O (c n )-competitive algorithm for the file allocation problem. In [BFR92], a similar theorem was proved using randomization algorithms against adaptive ad versaries (and thus proving an O (c 2 n ) bound on the deterministic competitive ratio via <ref> [BBK + 90] </ref>). Finally, the problem of devising competitive algorithms for the constrained file allocation prob lem [BFR92] on arbitrary network topologies is still open.
Reference: [BFR92] <author> Yair Bartal, Amos Fiat, and Yuval Rabani. </author> <title> Competitive algorithms for distributed data management. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <year> 1992. </year>
Reference-contexts: Consequently, the task of designing efficient on-line distributed algorithms is quite a challenging one, and cannot be taken for granted. While certain techniques have been developed in the literature in order to competitively locate mobile objects based on local information <ref> [AP89, BFR92] </ref>, it is hard (and sometimes provably impossible) to "localize" global-knowledge decision strategy without compromising the performance. Consequently, "good" global-knowledge on-line algorithm may prove to be absolutely useless in the distributed environment. <p> The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in [CLRW, LRWY94, WY93]. In <ref> [BFR92] </ref>, randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem. <p> a control message is sent, on-line pays the number of bits in the message, times the cost of the path traversed by that message. 5 3 Preliminaries In this section we describe some basic tools we use. 3.1 The Cover Problem 3.1.1 The Cover Problem Definition The on-line cover problem <ref> [BFR92] </ref> is the problem of maintaining a covering of small number of small diameter subsets of a dynamically changing set in a weighted graph. Let G be a weighted graph. Let Q be a subset of nodes of G. <p> Define the optimal cost of an insertion to be the minimum distance between a node of Q and the inserted node, and the optimal cost for a deletion is 0. For every integer k &gt; 0, <ref> [BFR92] </ref> gives an algorithm for the on-line cover problem that maintains a 2 (k 1)-covering such that for every sequence of insertions and deletions, if the optimal cost for the sequence is UPD, the final value of s is at most 1 + 1 k UPD. <p> Let the number of covering sets maintained by the i-level cover algorithm be denoted s (i). Let the total number of covering sets creations made by the i-level cover algorithm be denoted c (i). Then s (i) c (i). The following theorem is a slight modification from <ref> [BFR92] </ref>: Theorem 3.1 The following invariant is maintained by the hierarchical cover algorithm log (Diam) X i=0 log (Diam) X i=0 O (minflog n; log (Diam)g) UPD: For completeness of discussion, the solution and analysis of the cover problem is described in the appendix. 3.2 The On-line Steiner Tree Problem Let <p> As described in Section 3.1 the tree cover problem is a restriction of the cover problem of <ref> [BFR92] </ref>. In fact we use the hierarchical cover problem, defined in Section 3.1, to obtain a hierarchy of tree covers. The analysis of the Steiner tree potential function is somewhat different than the usual one-step analysis. <p> For the case k = log n we have deg (P) 2 log n and stretch (P) 2 log n. 6.2 Distributed Data Tracking 6.2.1 Data Tracking. The data tracking mechanism of <ref> [BFR92] </ref> is a generalization of the mobile user tracking mechanism of [AP89, AP91]. <p> The optimal cost of Delete (v) is 0. 32 The optimal cost of Find (u) is the cost of sending a message from u to the closest processor in Q; i.e., d (u; Q) <ref> [BFR92] </ref> present a distributed on-line data tracking algorithm, named TRACK, dealing with arbitrary sequences of Insert, Delete and Find operations, such that the following theorem holds. Theorem 6.1 For every n-processor network, for every sequence of operations , 1. <p> (A [ fmg) + d (A; m)g: Claim 7.7.3 The cost for DFA for the write requests of the phase satisfies: Cost DFA C TRACK (D T (B 0 ) + Cost Adv ): The rest of proof takes after the proof of Lemma 5.6. 46 8 Open Problems In <ref> [BFR92] </ref> a lower bound of (log n) was proved for the file allocation problem in the global-view setting. While this paper shows this ratio to be tight up to a constant factor, the upper bound achieved here in the distributed setting is O (log 4 n). <p> Let the competitive ratio of the on-line Steiner tree problem on a specific metric space be c n . We conjecture that there exists a deterministic (global-control) O (c n )-competitive algorithm for the file allocation problem. In <ref> [BFR92] </ref>, a similar theorem was proved using randomization algorithms against adaptive ad versaries (and thus proving an O (c 2 n ) bound on the deterministic competitive ratio via [BBK + 90]). Finally, the problem of devising competitive algorithms for the constrained file allocation prob lem [BFR92] on arbitrary network topologies <p> In <ref> [BFR92] </ref>, a similar theorem was proved using randomization algorithms against adaptive ad versaries (and thus proving an O (c 2 n ) bound on the deterministic competitive ratio via [BBK + 90]). Finally, the problem of devising competitive algorithms for the constrained file allocation prob lem [BFR92] on arbitrary network topologies is still open.
Reference: [BS89] <author> D.L. Black and D.D. Sleator. </author> <title> Competitive algorithms for replication and migration problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Carnegie-Mellon, </institution> <year> 1989. </year> <month> 47 </month>
Reference-contexts: The 1981 survey paper by Dowdy and Foster [DF82], dealing with the file allocation (or assignment) problem, cites close to a hundred references. First competitive algorithms for special cases of the centralized version of the problem were found by Black and Sleator and by Westbrook <ref> [BS89, Wes91] </ref>. The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in [CLRW, LRWY94, WY93]. <p> First competitive algorithms for special cases of the centralized version of the problem were found by Black and Sleator and by Westbrook [BS89, Wes91]. The file allocation problem may be viewed as the combined solution to the two subproblems defined in <ref> [BS89] </ref>. Other special cases of these problems have been considered in [CLRW, LRWY94, WY93]. In [BFR92], randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem.
Reference: [CLRW] <author> M. Chrobak, L. Larmore, N. Reingold, and J. Westbrook. </author> <title> Optimal multiprocessor migration algorithms using work functions. </title> <type> manuscript. </type>
Reference-contexts: The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in <ref> [CLRW, LRWY94, WY93] </ref>. In [BFR92], randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem.
Reference: [CV92] <author> B. Chandra and S. Vishwanathan. </author> <title> Constructing Reliable communication networks of small weight on-line. </title> <journal> Journal of Algorithms, </journal> <year> 1992. </year>
Reference-contexts: That potential function proof gives the intuition behind our more complex file allocation algorithm proof. Analysis of the greedy Steiner tree algorithm was also independently made by [AA92], <ref> [CV92] </ref> and [WY93] giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 3.2 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. 8 Proof. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW, WY93] </ref>, and in Section 3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives
Reference: [DF82] <author> D. Dowdy and D. Foster. </author> <title> Comparative models of the file assignment problem. </title> <journal> Computing Surveys, </journal> <volume> 14(2), </volume> <month> Jun </month> <year> 1982. </year>
Reference-contexts: 1 Introduction 1.1 The Problem This paper is concerned with finding efficient strategy for replicating and migrating data in presence of a dynamic pattern of reads and writes (see figure 1, details in Section 2). This is a well-studied problem in distributed systems <ref> [DF82] </ref>. be read or written by any of the processors. In order to achieve maximum efficiency, we need to maximally exploit the locality of reference in the underlying distributed program, and incorporate it with the spatial locality of the underlying network architecture. <p> The management of data in a multiprocessing environment has been extensively studied, both from the theoretical and the practical standpoints. The 1981 survey paper by Dowdy and Foster <ref> [DF82] </ref>, dealing with the file allocation (or assignment) problem, cites close to a hundred references. First competitive algorithms for special cases of the centralized version of the problem were found by Black and Sleator and by Westbrook [BS89, Wes91].
Reference: [IW] <author> M. Imaze and B.M. Waxman. </author> <title> Dynamic Steiner tree problem. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 4(3) </volume> <pages> 369-384, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The on-line Steiner tree problem is equivalent to a special case of the file allocation problem, where D = 1, only read requests are issued, and the algorithm is forced to replicate upon a read request. Imaze and Waxman <ref> [IW] </ref> define this problem and give upper and lower bounds for it. They show that the greedy on-line Steiner tree algorithm is dlog ne competitive. For completeness of the discussion we give here an alternative very simple proof of this claim. <p> First we consider a special case of the problem, where D = 1, and only read requests are issued. This version of the problem is related to the on-line Steiner tree problem, studied by <ref> [IW] </ref>. 4.1 More on the On-line Steiner Tree Problem The on-line Steiner tree problem is equivalent to a special case of the file allocation problem, where D = 1, only read requests are issued, and the algorithm is forced to replicate upon a read request. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW, WY93] </ref>, and in Section 3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives
Reference: [KMRS88] <author> Karlin, Manasse, Rudolpoh, and Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: To capture additional subtleties arising in distributed systems, such as the need for local control, the standard definition of competitiveness, as introduced by Sleator and Tarjan <ref> [ST85, KMRS88] </ref>, needs to be refined. Below we briefly elaborate on this important issue. 1.2 Centralized & distributed models Centralized model. In this "standard" setting, as introduced in [ST85, KMRS88], the on-line algorithm is fully aware of the global state of the system, which consists of the current configuration (i.e. the <p> arising in distributed systems, such as the need for local control, the standard definition of competitiveness, as introduced by Sleator and Tarjan <ref> [ST85, KMRS88] </ref>, needs to be refined. Below we briefly elaborate on this important issue. 1.2 Centralized & distributed models Centralized model. In this "standard" setting, as introduced in [ST85, KMRS88], the on-line algorithm is fully aware of the global state of the system, which consists of the current configuration (i.e. the position of all file replicas) and the current input, but is unaware of the future sequence of input requests.
Reference: [LRWY94] <author> C. Lund, N. Reingold, J. Westbrook, and D. Yan. </author> <title> On-Line distributed data management. </title> <booktitle> In Proc. of European Symp. on Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in <ref> [CLRW, LRWY94, WY93] </ref>. In [BFR92], randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem.
Reference: [MMS88] <author> M.S. Manasse, L.A. McGeoch, and D.D. Sleator. </author> <title> Competitive algorithms or on-line problems. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333. </pages> <publisher> ACM SIGACT, ACM, </publisher> <month> May </month> <year> 1988. </year>
Reference: [ST85] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Comm. of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: To capture additional subtleties arising in distributed systems, such as the need for local control, the standard definition of competitiveness, as introduced by Sleator and Tarjan <ref> [ST85, KMRS88] </ref>, needs to be refined. Below we briefly elaborate on this important issue. 1.2 Centralized & distributed models Centralized model. In this "standard" setting, as introduced in [ST85, KMRS88], the on-line algorithm is fully aware of the global state of the system, which consists of the current configuration (i.e. the <p> arising in distributed systems, such as the need for local control, the standard definition of competitiveness, as introduced by Sleator and Tarjan <ref> [ST85, KMRS88] </ref>, needs to be refined. Below we briefly elaborate on this important issue. 1.2 Centralized & distributed models Centralized model. In this "standard" setting, as introduced in [ST85, KMRS88], the on-line algorithm is fully aware of the global state of the system, which consists of the current configuration (i.e. the position of all file replicas) and the current input, but is unaware of the future sequence of input requests.
Reference: [Wes91] <author> J. Westbrook. </author> <title> Randomized algorithms for multiprocessor page migration. </title> <note> to appear in Proc. of DIMACS Workshop on On-Line Algorithms. </note>
Reference-contexts: The 1981 survey paper by Dowdy and Foster [DF82], dealing with the file allocation (or assignment) problem, cites close to a hundred references. First competitive algorithms for special cases of the centralized version of the problem were found by Black and Sleator and by Westbrook <ref> [BS89, Wes91] </ref>. The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in [CLRW, LRWY94, WY93].
Reference: [WY93] <author> J. Westbrook. and D.K. Yan. </author> <title> Greedy on-Line Steiner tree and generalized Steiner problems. </title> <booktitle> In Proc. of the 3rd Workshop in Algorithms and Data Structures, Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 709, </volume> <pages> pages 622-633, </pages> <address> Montreal, Canada, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The file allocation problem may be viewed as the combined solution to the two subproblems defined in [BS89]. Other special cases of these problems have been considered in <ref> [CLRW, LRWY94, WY93] </ref>. In [BFR92], randomized algorithms have been developed for the general network, with competitive ratio of O (log n) for the centralized problem and O (log 4 n) for the distributed problem. <p> That potential function proof gives the intuition behind our more complex file allocation algorithm proof. Analysis of the greedy Steiner tree algorithm was also independently made by [AA92], [CV92] and <ref> [WY93] </ref> giving similar bounds. The Greedy Steiner Tree Algorithm. The greedy Steiner tree algorithm connects a new point to the closest point already in the tree. Theorem 3.2 The greedy Steiner tree algorithm is strictly dlog ne-competitive for any weighted graph over n vertices. 8 Proof. <p> In the following paragraph we consider the greedy strategy for the Steiner tree problem and give a simple potential function proof for the competitiveness of the greedy on-line Steiner tree algorithm, and thus to read-only replication. (Alternative non potential function proofs given by <ref> [AA92, CV92, IW, WY93] </ref>, and in Section 3.2.) Although this is not essential for the proofs of competitiveness of our file-allocation algorithms, the intuition behind this potential function serves as a basis to the more complex potential function used to prove our deterministic file-allocation algorithm, and we believe that it gives <p> For each level we have 2 i+1 (s (i) 1) O (T (A)), so that the proof gives a competitive ratio 12 proportional to the number of levels: O (log (n diam (A) T (A) )). This result was independently established in <ref> [WY93] </ref>. 4.2 File Migration While the Steiner tree problem model a special case of the read only file allocation problem, the data migration problem relates to file allocation with only write requests.
References-found: 17

