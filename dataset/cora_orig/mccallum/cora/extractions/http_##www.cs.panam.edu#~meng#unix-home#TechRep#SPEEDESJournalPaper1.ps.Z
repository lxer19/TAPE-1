URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/SPEEDESJournalPaper1.ps.Z
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/
Root-URL: http://www.cs.panam.edu
Email: JSS@PEBBLES.JPL.NASA.GOV  
Phone: (818) 354-3793,  
Title: SPEEDES: A MULTIPLE-SYNCHRONIZATION ENVIRONMENT FOR PARALLEL DISCRETE EVENT SIMULATION  
Author: Jeff S. Steinman 
Keyword: KEY WORDS SPEEDES, Parallel Discrete Event Simulation, Interactive Simulation, Delta Exchange, Breathing Time Buckets, Time Warp, CO-OP, Proximity Detection, Event Horizon.  
Address: 4800 Oak Grove Drive, Mail Stop 138-310 Pasadena, CA 91109  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  
Abstract: Synchronous Parallel Environment for Emulation and Discrete Event Simulation (SPEEDES) is a unified parallel simulation environment. It supports multiple-synchronization protocols without requiring users to recompile their code. When a SPEEDES simulation runs on one node, all the extra parallel overhead is automatically removed at run time. When the same executable runs in parallel, the user preselects the synchronization algorithm from a list of options. SPEEDES currently runs on UNIX networks and on the California Institute of Technology/Jet Propulsion Laboratory (Caltech/JPL) Mark III Hypercube. SPEEDES also supports interactive simulations. Featured in the SPEEDES environment is a new parallel synchronization approach called Breathing Time Buckets. This algorithm uses some of the conservative techniques found in Time Bucket synchronization, along with the optimism that characterizes the Time Warp approach. A mathematical model derived from first principles predicts the performance of Breathing Time Buckets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chandy, K., and Misra, J. </author> <title> Distributed Simulation: A Case Study in Design and Verification of Distributed Programs. </title> <journal> IEEE Transactions on Software Engineering. </journal> <volume> Vol. SE-5, No. 5, </volume> <pages> pages 440452, </pages> <year> 1979. </year>
Reference: [2] <author> Dickens, D., and Reynolds, P. </author> <title> SRADS With Local Rollback. </title> <booktitle> Proceedings of the SCS Multi-Conference on Distributed Simulation. </booktitle> <volume> Vol. 22, No. 1, </volume> <month> January, </month> <pages> pages 161164, </pages> <year> 1990. </year>
Reference-contexts: Instead of exploiting lookahead on the message receivers end [11,14] or using preknown or calculable delays [13], it uses optimistic processing with local rollback. However, unlike other optimistic windowing approaches [18], it never requires antimessages. Local rollback is not a unique concept either <ref> [2] </ref>. However, the Breathing Time Buckets algorithm allows full connectivity between the simulation objects (often called logical processes). Fundamental Concepts The essential synchronization concept for Breathing Time Buckets is the causality principle. Like the Time Bucket approach, the Breathing Time Buckets approach processes events in time cycles.
Reference: [3] <author> Felderman, R., and Kleinrock, L. </author> <title> Two Processor Time Warp Analysis: Some Results on a Unifying Approach. </title> <booktitle> Proceedings of the SCS Multiconference on Advances in Parallel and Distributed Simulation. </booktitle> <volume> Vol. 23, No. 1, </volume> <pages> pages 310, </pages> <year> 1991. </year>
Reference-contexts: In particular, it is usually very difficult to predict the performance of parallel discrete event simulations. Time Warp is a good example of this since it is difficult to predict all sequences of events that might lead to roll back <ref> [3] </ref>. Because performance is so difficult to predict, most applications tend to shy away from the more aggressive simulation strategies. Ultraconservative algorithms (which may be less efficient, but are more understandable), such as time-driven approaches, tend to dominate real-world applications.
Reference: [4] <author> Fox, G. </author> <title> Solving Problems on Concurrent Processors. </title> <journal> Vol. </journal> <volume> 1, </volume> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: Message Sending SPEEDES uses both synchronous and asynchronous message sending approaches. Time Warp uses the asynchronous style, while the other algorithms synchronously send their messages. For example, the Crystal Router <ref> [4] </ref> is used when running on hypercubes. Synchronous message sending using the Crystal Router has been observed to be about five times faster than its asynchronous counterpart, because collisions are avoided and buffers are preallocated. There are two extremes for event processing and message sending.
Reference: [5] <author> Fujimoto, R. </author> <title> Lookahead in Parallel Discrete Event Simulation. </title> <booktitle> International Conference on Parallel Processing. </booktitle> <volume> Vol. 3, </volume> <pages> pages 3441, </pages> <year> 1988. </year>
Reference: [6] <author> Fujimoto, R. </author> <title> Parallel Discrete Event Simulation. </title> <journal> Communications of the ACM. </journal> <volume> Vol. 33, No. 10, </volume> <pages> pages 3053, </pages> <year> 1990. </year>
Reference: [7] <author> Fujimoto, R., Tsai, J., and Gopalakrishnan, G. </author> <title> Design and Evaluation of the Rollback Chip: Special Purpose Hardware for Time Warp. </title> <type> Technical Report UUCS-88-011, </type> <institution> Department of Computer Science, University of Utah, </institution> <year> 1988. </year>
Reference-contexts: Performing the Delta Exchange method normally involves a negligible amount of time. Thus, sequential simulations are still efficient even when this extra step is performed. Further, because the Delta Exchange mechanism normally has low overhead, special-purpose hardware to support rollback efficiently may not be necessary <ref> [7] </ref>. The Delta Exchange mechanism has the added benefit of permitting fast rewind capabilities. Much like an efficient text editor that saves only the keystrokes (i.e., changes to the text file), the Delta Exchange mechanism saves the changes to the simulation objects.
Reference: [8] <author> Jefferson, D. </author> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems. </journal> <volume> Vol. 7, No. 3, </volume> <pages> pages 404425, </pages> <year> 1985. </year>
Reference: [9] <author> Jones, D. </author> <title> An Empirical Comparison of Priority-Queue and Event-Set Implementations. </title> <journal> Communications of the ACM. </journal> <volume> Vol. 29, No. 4, </volume> <pages> pages 300311, </pages> <year> 1986. </year> <month> 32 </month>
Reference: [10] <author> Kaudel, F. </author> <title> A Literature Survey on Distributed Discrete Event Simulation. </title> <journal> Simuletter. </journal> <volume> Vol. 18, No. 2, </volume> <pages> pages 1121, </pages> <year> 1987. </year>
Reference: [11] <author> Lin, Y., and Lazowska, E. </author> <title> Exploiting Lookahead in Parallel Simulation. </title> <journal> IEEE Transactions on Parallel and Distributed Systems. </journal> <volume> Vol. 1, No. 4, </volume> <pages> pages 457469, </pages> <year> 1990. </year>
Reference: [12] <author> Lin, Y., and Lazowska, E. </author> <title> Processor Scheduling for Time Warp Parallel Simulation. </title> <booktitle> Proceedings of the SCS Multiconference on Advances in Parallel and Distributed Simulation. </booktitle> <volume> Vol. 23, No. 1, </volume> <pages> pages 1114, </pages> <year> 1991. </year>
Reference-contexts: It would be interesting to then compare the performance of the various event synchronization algorithms with a neural network simulation. CO-OP (Conservative-Optimistic) Approach Parallel simulations normally schedule their events by strict time order within their nodes <ref> [12] </ref>. In other words, the event with the earliest time stamp on a node is always processed next. This is not required for provably correct simulations. The only requirement is that the events for each object should be processed in their correct time order.
Reference: [13] <author> Lubachevsky, B. </author> <title> Bounded Lag Distributed Discrete Event Simulation. </title> <booktitle> Multi-Conference on Distributed Simulation. </booktitle> <month> February, </month> <pages> pages 183191, </pages> <year> 1988. </year>
Reference-contexts: BREATHING TIME BUCKETS The original SPEEDES algorithm (Breathing Time Buckets) is a new windowing parallel simulation strategy with some unique properties. Instead of exploiting lookahead on the message receivers end [11,14] or using preknown or calculable delays <ref> [13] </ref>, it uses optimistic processing with local rollback. However, unlike other optimistic windowing approaches [18], it never requires antimessages. Local rollback is not a unique concept either [2]. However, the Breathing Time Buckets algorithm allows full connectivity between the simulation objects (often called logical processes).
Reference: [14] <author> Nicol, D. </author> <title> Performance Bounds on Parallel Self-Initiating Discrete Event Simulations. </title> <type> Technical NASA Contractor Report 182010, ICASE Report No. </type> <pages> 90-21, </pages> <year> 1990. </year>
Reference-contexts: Using this model, the total number of events, n, in the simulation is constant. Our goal is to determine the average number of events, m, processed in a cycle. It should be noted that while others have performed similar calculations <ref> [14] </ref>, we derive our results for general systems using equilibrium conditions and differential equations. After determining m for a stochastic simulation, we should note that if m is much larger than the number of nodes, N, the Breathing Time Buckets algorithm should be able to achieve high parallel performance.
Reference: [15] <author> Reynolds, P. </author> <title> A Spectrum of Options for Parallel Simulation. </title> <booktitle> Proceedings of the 1988 Winter Simulation Conference. </booktitle> <pages> Pages 325332, </pages> <year> 1988. </year>
Reference-contexts: For example, it took only three weeks to include Time Warp (using aggressive cancellation) as one of the algorithms. By January 1991, the SPEEDES environment could support multiple-synchronization algorithms and interactive simulations. SPEEDES INTERNAL STRUCTURE While other multiple-synchronization systems (or test beds) have been developed <ref> [15] </ref>, one reason for the success of SPEEDES is its unique object-oriented design. To begin this discussion, we first break event processing into some very basic steps (see Figure 1). (Figure 1) Creating an Event An event is created by a message.
Reference: [16] <author> Reynolds, P. </author> <title> An Efficient Framework for Parallel Simulations. </title> <booktitle> Proceedings of the SCS Multiconference on Advances in Parallel and Distributed Simulation. </booktitle> <volume> Vol. 23, No. 1, </volume> <pages> pages 167174, </pages> <year> 1991. </year>
Reference-contexts: This mechanism has the good characteristic of being portable. However, it is not scalable to large machines. Other ways to solve this problem exist, using scalable asynchronous control messages, shared memory, or reduction networks <ref> [16] </ref>, but a better solution would be to use a global hardware line. The idea here is that when each node crosses the event horizon, it sends a signal on a hardware global line.
Reference: [17] <author> Sleator, D., and Tarjan, R. </author> <title> Self Adjusting Binary Search Trees. </title> <journal> Journal of the ACM. </journal> <volume> Vol. 32, No. 3, </volume> <pages> pages 652686, </pages> <year> 1985. </year>
Reference: [18] <author> Sokol, L., Stucky, B., and Hwang, V. MTW: </author> <title> A Control Mechanism for Parallel Discrete Simulation. </title> <booktitle> International Conference on Parallel Processing. </booktitle> <volume> Vol. 3, </volume> <month> August, </month> <pages> pages 250254, </pages> <year> 1989. </year>
Reference-contexts: Instead of exploiting lookahead on the message receivers end [11,14] or using preknown or calculable delays [13], it uses optimistic processing with local rollback. However, unlike other optimistic windowing approaches <ref> [18] </ref>, it never requires antimessages. Local rollback is not a unique concept either [2]. However, the Breathing Time Buckets algorithm allows full connectivity between the simulation objects (often called logical processes). Fundamental Concepts The essential synchronization concept for Breathing Time Buckets is the causality principle.

References-found: 18

