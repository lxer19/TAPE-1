URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1994/GIT-CC-94-58.color.ps.Z
Refering-URL: http://www.cs.gatech.edu/systems/projects/FALCON/
Root-URL: 
Title: Opportunities and Tools for Highly Interactive Distributed and Parallel Computing  
Author: Greg Eisenhauer Weiming Gu Thomas Kindler Karsten Schwan Dilma Silva Jeffrey Vetter 
Address: Atlanta, Georgia 30332  
Affiliation: Georgia Institute of Technology  
Abstract: Advances in networking, visualization and parallel computing signal the end of the days of batch-mode processing for computationally intensive applications. The ability to control and interact with these applications in real-time offers both opportunities and challenges. This paper examines two com-putationally intensive scientific applications and discusses the ways in which more interactivity in their computations presents opportunities for gain. It briefly examines the requirements for systems trying to exploit these opportunities and discusses Falcon, a system that attempts to fulfill these requirements.
Abstract-found: 1
Intro-found: 1
Reference: [Bec94] <author> Thomas Becker. </author> <title> Application-transparent fault tolerance in distributed systems. </title> <booktitle> In Proc. of the Second International Workshop in Configurable Distributed Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications [BS91, GS89, GS93], and the load balancing or program configuration for enhanced reliability in distributed systems <ref> [SGB87, MW91, Bec94] </ref>. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level.
Reference: [BS91] <author> Thomas E. Bihari and Karsten Schwan. </author> <title> Dynamic adaptation of real-time software. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 143-174, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Examples of such improvement include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications <ref> [BS91, GS89, GS93] </ref>, and the load balancing or program configuration for enhanced reliability in distributed systems [SGB87, MW91, Bec94]. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level. <p> However, actuator actions are capable of encoding much more complex operations than this. For example, they should be capable of the operations necessary to ensure that modifications of program state do not violate program correctness criteria as in <ref> [BS91] </ref>. The discussion above presents a brief overview of the abstractions in the Falcon steering library and the manner in which they interact with the remainder of the Falcon system.
Reference: [BS93] <author> Adam Beguelin and Erik Seligman. </author> <title> Causality-preserving timestamps in distributed programs. </title> <type> Technical Report CMU-CS-93-167, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The on-line nature of the Falcon monitoring system precludes any use of such a solution, and sorting by timestamp order does not entirely eliminate the problem of out-of-order events <ref> [BS93] </ref>. In addition, coarse clock granularities and poor clock synchronization among different processors may lead to event timestamps that do not accurately reflect the actual order of program execution. Falcon offers a general mechanism for approaching this problem.
Reference: [CD88] <author> Eric C. Cooper and Richard P. Draves. </author> <title> C threads. </title> <type> Technical report, </type> <institution> Computer Science, Carnegie-Mellon University, CMU-CS-88-154, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: In this model, independent threads of computation are created on the various processors, and they control access to shared data by using mutex locks and conditions <ref> [CD88] </ref>. The amount of time a thread spends waiting to be granted a lock or for a particular condition to occur directly impacts the amount of useful work it can perform in a given time.
Reference: [EGSM94] <author> Greg Eisenhauer, Weiming Gu, Karsten Schwan, and Niru Mallavarupu. </author> <title> Falcon toward interactive parallel programs: The on-line steering of a molecular dynamics application. </title> <booktitle> In Proceedings of The Third International Symposium on High-Performance Distributed Computing (HPDC-3), </booktitle> <pages> pages 26-34, </pages> <address> San Francisco, CA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: This section examines two large parallel applications and discusses ways in which a monitoring and steering system might benefit each. 2.1 MD MD is an interactive molecular dynamics simulation developed at Georgia Tech in cooperation with a group of physicists exploring the statistical mechanics of complex liquids <ref> [XORL92, EGSM94] </ref>. The specific molecular dynamics systems being simulated are n-hexadecane (C 16 -H 34 ) films on a crystalline substrate Au (001). In the simulation, the alkane system is described via intramolecular and intermolecular interactions between pseudoatoms (CH 2 and terminal CH 3 segments) and the substrate atoms. <p> In some cases the design of the application makes this easy. The load balancing of the MD application described in <ref> [EGSM94] </ref> was facilitated because mechanisms were in place to handle molecules moving from domain to domain. These worked without modification when the domain boundaries themselves moved. In other cases it is clear that desired manipulations cannot be carried out without the direct cooperation of the application. <p> The implementation and integration of the steering library and other steering facilities is not yet complete, though proof-of-concept demonstrations as in <ref> [EGSM94] </ref> have been quite successful.
Reference: [FW94] <author> I.T. Foster and P.H. Worley. </author> <title> Parallel algorithms for the spectral transform method. </title> <type> Technical Report ORNL/TM-12507, </type> <institution> Oak Ridge National Laboratory, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Details of this solution approach, which is quite common in global models, can be found in [Hau40], [Sil54], [KHYK61], [WP86] or <ref> [FW94] </ref>. Our model contains 37 layers, which represent segments of the earth's atmosphere from the surface to approximately 50 km, with a horizontal resolution of 42 waves or 946 spectral values. In a grid system, this corresponds to a resolution of about 2.8 degrees by 2.8 degrees.
Reference: [GEK + 94] <author> Weiming Gu, Greg Eisenhauer, Eileen Kraemer, Karsten Schwan, John Stasko, Jeffrey Vetter, and Nirupama Mallavarupu. </author> <title> Falcon: On-line monitoring and steering of large-scale parallel programs. </title> <type> Technical Report GIT-CC-94-21, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0280, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: These components are shown in Figure 5. The following steps are taken when using Falcon. First, application code is instrumented with sensors 1 A more detailed description of the complete Falcon system and its performance can be found in <ref> [GEK + 94] </ref> 9 and probes generated from sensor and view specifications. Such monitoring specifications allow users to express specific program attributes to be monitored and based on which steering may be performed.
Reference: [GS89] <author> Prabha Gopinath and Karsten Schwan. </author> <title> Chaos: Why one cannot have only an operating system for real-time applications. </title> <journal> SIGOPS Notices, </journal> <pages> pages 106-125, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Examples of such improvement include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications <ref> [BS91, GS89, GS93] </ref>, and the load balancing or program configuration for enhanced reliability in distributed systems [SGB87, MW91, Bec94]. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level.
Reference: [GS93] <author> Ahmed Gheith and Karsten Schwan. </author> <title> Chaos-arc kernel support for multi-weight objects, invocations, and atomicity in real-time applications. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(1) </volume> <pages> 33-72, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Examples of such improvement include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications <ref> [BS91, GS89, GS93] </ref>, and the load balancing or program configuration for enhanced reliability in distributed systems [SGB87, MW91, Bec94]. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level.
Reference: [GVS94] <author> Weiming Gu, Jeffrey Vetter, and Karsten Schwan. </author> <title> An annotated bibliography of interactive program steering. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 29(9) </volume> <pages> 140-148, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Perhaps more importantly in the long term, neither type of tool encompasses mechanisms for dynamically manipulating running programs. To address these deficiencies one needs mechanisms for "observing" a running application and "adjusting" its state or behavior. Collectively, these mechanisms are a monitoring and steering system <ref> [GVS94] </ref>. The online manipulation or steering of parallel and distributed programs has been shown to result in performance improvement in many domains.
Reference: [Hau40] <author> B. Haurwitz. </author> <title> The motion of atmospheric disturbances on the spherical earth. </title> <journal> Journal of Mar. Res., </journal> <volume> 3 </volume> <pages> 254-267, </pages> <year> 1940. </year>
Reference-contexts: Details of this solution approach, which is quite common in global models, can be found in <ref> [Hau40] </ref>, [Sil54], [KHYK61], [WP86] or [FW94]. Our model contains 37 layers, which represent segments of the earth's atmosphere from the surface to approximately 50 km, with a horizontal resolution of 42 waves or 946 spectral values.
Reference: [HE91] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <pages> pages 29-39, </pages> <month> September </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: Instead, misorderings existing in the event stream are due to the buffering and processing methods employed in the monitoring system. The diagnosis and correction of out-of-order events is a common problem in parallel and distributed monitoring systems. Existing systems (e.g., ParaGraph <ref> [HE91] </ref> and SIEVE [SG92]) rely on a sort by timestamp value to impose a total order on all events stored in event files.
Reference: [HMC94] <author> Jeffrey K. Hollingsworth, Barton P. Miller, and Jon Cargille. </author> <title> Dynamic program instrumentation for scalable performance tools. </title> <booktitle> In Proceedings of SHPCC'94, </booktitle> <pages> pages 841-850, </pages> <address> Knoxville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Instead of focusing on supporting on-line interactivity, however, past work in program monitoring has focused on helping programmers understand the performance of their parallel codes, minimizing or correcting program perturbation due to monitoring, reducing the amounts of monitoring or trace information captured for parallel or distributed program debugging <ref> [OSS93, HMC94] </ref>, and the effective replay [LMC87] or long-term storage of monitoring information. <p> Using Falcon's monitoring specification language [Sno87], programmers may define application-specific sensors for capturing both the program and performance behavior to be monitored and the program attributes 2 Related work by Hollingsworth and Miller <ref> [HMC94] </ref> removes instrumentation points completely to reduce the overheads of these turned-off instrumentation points to zero. 10 based on which steering may be performed.
Reference: [KHYK61] <author> S. Kubota, M. Hirose, Y.Kichuchi, and Y. Kurihara. </author> <title> Barotropic forecasting with the use of surface spherical harmonic representation. Pap. </title> <journal> Meteorol. Geophys., </journal> <volume> 12 </volume> <pages> 199-215, </pages> <year> 1961. </year>
Reference-contexts: Details of this solution approach, which is quite common in global models, can be found in [Hau40], [Sil54], <ref> [KHYK61] </ref>, [WP86] or [FW94]. Our model contains 37 layers, which represent segments of the earth's atmosphere from the surface to approximately 50 km, with a horizontal resolution of 42 waves or 946 spectral values. In a grid system, this corresponds to a resolution of about 2.8 degrees by 2.8 degrees.
Reference: [KS91] <author> Carol E. Kilpatrick and Karsten Schwan. </author> <title> ChaosMON - application-specific monitoring and display of performance information for parallel and distributed systems. </title> <booktitle> In Proceedings of the ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 57-67, </pages> <address> Santa Cruz, Califor-nia, </address> <month> May 20-21 </month> <year> 1991. </year>
Reference-contexts: We are now generalizing the notion of sensors to permit programmers to specify higher level `views' of monitoring data like those described in <ref> [KS91, OSS93, Sno88] </ref>. Such views will be implemented with library support resident in both local and central monitors.
Reference: [KSS + 94] <author> T. Kindler, K. Schwan, D. Silva, M. Trauner, and F. Alyea. </author> <title> A parallel spectral model for atmospheric transport processes. </title> <type> Technical report, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, 30332 GA, </address> <year> 1994. </year>
Reference: [LMC87] <author> Thomas J. LeBlanc and John M. Mellor-Crummey. </author> <title> Debugging parallel programs with instant replay. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(4):471-481, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: supporting on-line interactivity, however, past work in program monitoring has focused on helping programmers understand the performance of their parallel codes, minimizing or correcting program perturbation due to monitoring, reducing the amounts of monitoring or trace information captured for parallel or distributed program debugging [OSS93, HMC94], and the effective replay <ref> [LMC87] </ref> or long-term storage of monitoring information.
Reference: [MP89] <author> Henry Massalin and Calton Pu. </author> <title> Threads and input/output in the synthesis kernel. </title> <booktitle> In Proceedings of the 12th Symposium on Operating Systems Principles, </booktitle> <pages> pages 191-201. </pages> <publisher> SIGOPS, Assoc. Comput. Mach., </publisher> <month> December </month> <year> 1989. </year>
Reference-contexts: The online manipulation or steering of parallel and distributed programs has been shown to result in performance improvement in many domains. Examples of such improvement include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems <ref> [MP89] </ref>, the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications [BS91, GS89, GS93], and the load balancing or program configuration for enhanced reliability in distributed systems [SGB87, MW91, Bec94]. 1 Further benefits are gained if monitoring and steering mechanisms are not limited
Reference: [MRW92] <author> Allen D. Malony, Daniel A. Reed, and Harry A. G. Wijshoff. </author> <title> Performance measurement intrusion and perturbation analysis. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(4) </volume> <pages> 433-450, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Therefore, the only direct program perturbation caused by Falcon is the execution of embedded sensors and the insertion of trace records into monitoring buffers. Such perturbation is generally predictable, and its effects on the correctness of timing information can be eliminated using straightforward techniques for perturbation analysis <ref> [MRW92] </ref>. 11 In order to control monitoring overheads and latency, Falcon's runtime system may itself be configured or steered in several ways, including changing the number of local monitors and communication buffers to configure the system for parallel programs and machines of different sizes.
Reference: [MS93] <author> Bodhisattwa Mukherjee and Karsten Schwan. </author> <title> Experimentation with a reconfigurable micro-kernel. </title> <booktitle> In Proc. of the USENIX Symposium on Microkernels and Other Kernel Architectures, </booktitle> <pages> pages 45-60, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Low steering latency may also be a critical requirement, particularly for algorithmic steering. Program events related to steering must be captured and processed, and the corresponding steering decision must be made while the decision is still relevant to the situation. Consider the on-line configuration of mutex locks presented in <ref> [MS93] </ref>, where on-line algorithms change lock behavior from spin to blocking locks. Lock type is determined at runtime based on the time a lock call must wait before it obtains the lock. When the waiting time is above a certain threshold, the lock is a blocking lock.
Reference: [MSSG95] <author> Bodhisattwa Mukherjee, Dilma Silva, Karsten Schwan, and Ahmed Gheith. Ktk: </author> <title> kernel support for configurable objects and invocations. </title> <journal> Distributed Systems Engineering Journal, </journal> <note> 1995. To Appear. </note>
Reference-contexts: Our future work will address how such customized mechanisms may be used in conjunction with the remainder of the Falcon system. In addition, work in progress is addressing the monitoring of object-oriented, parallel programs, including the provision of default monitoring views and performance displays <ref> [MSSG95] </ref>. An important component of our future research is the use of Falcon with very large-scale parallel programs, either using thousands of execution threads or exhibiting high rates of monitoring traffic. For these applications it will be imperative that monitoring mechanisms are dynamically controllable and configurable.
Reference: [Muk91] <author> Bodhisattwa Mukherjee. </author> <title> A portable and reconfigurable threads package. </title> <booktitle> In Proceedings of Sun User Group Technical Conference, </booktitle> <pages> pages 101-112, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: To produce displays of this type, the important constructs in the programming model must be instrumented. In this case, we have instrumented the Cthreads parallel programming library <ref> [Muk91] </ref> so that every operation that can affect the state of a thread produces a record in an event stream. In order to produce a reasonable display, these events must contain accurate timestamps and they should not excessively disturb normal execution of the program.
Reference: [MW91] <author> Keith Marzullo and Mark Wood. </author> <title> Making real-time reactive systems reliable. </title> <journal> ACM Operating Systems Review, </journal> <volume> 25(1) </volume> <pages> 45-48, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications [BS91, GS89, GS93], and the load balancing or program configuration for enhanced reliability in distributed systems <ref> [SGB87, MW91, Bec94] </ref>. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level.
Reference: [OSS93] <author> D.M. Ogle, K. Schwan, and R. Snodgrass. </author> <title> Application-dependent dynamic monitoring of distributed and parallel systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(7) </volume> <pages> 762-778, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Instead of focusing on supporting on-line interactivity, however, past work in program monitoring has focused on helping programmers understand the performance of their parallel codes, minimizing or correcting program perturbation due to monitoring, reducing the amounts of monitoring or trace information captured for parallel or distributed program debugging <ref> [OSS93, HMC94] </ref>, and the effective replay [LMC87] or long-term storage of monitoring information. <p> Trace data filtering and analysis must be performed to generate information that is interesting to end users. Related research concerning on-line trace analysis includes Snodgrass' work on update networks [Sno82] and our own past work on real-time monitoring <ref> [OSS93] </ref>. In [Sno87], information to be monitored is modeled by temporal relations in a hierarchical structure with primitive relations at the bottom of the structure and composed relations at the top. <p> We are now generalizing the notion of sensors to permit programmers to specify higher level `views' of monitoring data like those described in <ref> [KS91, OSS93, Sno88] </ref>. Such views will be implemented with library support resident in both local and central monitors.
Reference: [SG92] <author> Sekhar R. Sarukkai and Dennis Gannon. </author> <title> Parallel program visualization using SIEVE.1. </title> <booktitle> In International Conference on Supercomputing. ACM, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Instead, misorderings existing in the event stream are due to the buffering and processing methods employed in the monitoring system. The diagnosis and correction of out-of-order events is a common problem in parallel and distributed monitoring systems. Existing systems (e.g., ParaGraph [HE91] and SIEVE <ref> [SG92] </ref>) rely on a sort by timestamp value to impose a total order on all events stored in event files. The on-line nature of the Falcon monitoring system precludes any use of such a solution, and sorting by timestamp order does not entirely eliminate the problem of out-of-order events [BS93].
Reference: [SGB87] <author> Karsten Schwan, Prabha Gopinath, </author> <title> and Win Bo. CHAOS kernel support for objects in the real-time domain. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(8):904-916, </volume> <month> July </month> <year> 1987. </year>
Reference-contexts: include the automatic configuration of small program fragments for maintaining real-time response in uniprocessor systems [MP89], the on-line adaptation of functional program components for realizing reliability versus performance tradeoffs in parallel and real-time applications [BS91, GS89, GS93], and the load balancing or program configuration for enhanced reliability in distributed systems <ref> [SGB87, MW91, Bec94] </ref>. 1 Further benefits are gained if monitoring and steering mechanisms are not limited to system-level con-structs but are instead made available in a reasonable way at the application level.
Reference: [Sil54] <author> I.S. Silberman. </author> <title> Planetary waves in the atmosphere. </title> <journal> J. Meteorol., </journal> <volume> 11 </volume> <pages> 27-34, </pages> <year> 1954. </year>
Reference-contexts: Details of this solution approach, which is quite common in global models, can be found in [Hau40], <ref> [Sil54] </ref>, [KHYK61], [WP86] or [FW94]. Our model contains 37 layers, which represent segments of the earth's atmosphere from the surface to approximately 50 km, with a horizontal resolution of 42 waves or 946 spectral values.
Reference: [SK93] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A version of Falcon currently being completed also works with PVM across networked execution platforms. Similar portability is attained for the graphical displays used with Falcon. Notably, the Polka animation library can be executed on any Unix platform on which Motif is available <ref> [SK93] </ref>. Falcon's low-level monitoring mechanisms have been available via the Internet since early Summer 1994. A version of Falcon offering on-line user interfaces for monitoring and monitor control will be released in 1995.
Reference: [Sno82] <author> Richard Snodgrass. </author> <title> Monitoring Distributed Systems: A Relational Approach. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, Carnegie-Mellon University, </institution> <address> Pitts-burgh, PA 15213, </address> <month> December </month> <year> 1982. </year> <month> 18 </month>
Reference-contexts: Trace data filtering and analysis must be performed to generate information that is interesting to end users. Related research concerning on-line trace analysis includes Snodgrass' work on update networks <ref> [Sno82] </ref> and our own past work on real-time monitoring [OSS93]. In [Sno87], information to be monitored is modeled by temporal relations in a hierarchical structure with primitive relations at the bottom of the structure and composed relations at the top.
Reference: [Sno87] <author> Richard Snodgrass. </author> <title> The temporal query language TQuel. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: To reduce the perturbation, the "expensive" tracing sensor is not turned on until ineffective distance checks are detected. Using Falcon's monitoring specification language <ref> [Sno87] </ref>, programmers may define application-specific sensors for capturing both the program and performance behavior to be monitored and the program attributes 2 Related work by Hollingsworth and Miller [HMC94] removes instrumentation points completely to reduce the overheads of these turned-off instrumentation points to zero. 10 based on which steering may be <p> Trace data filtering and analysis must be performed to generate information that is interesting to end users. Related research concerning on-line trace analysis includes Snodgrass' work on update networks [Sno82] and our own past work on real-time monitoring [OSS93]. In <ref> [Sno87] </ref>, information to be monitored is modeled by temporal relations in a hierarchical structure with primitive relations at the bottom of the structure and composed relations at the top.
Reference: [Sno88] <author> Richard Snodgrass. </author> <title> A relational approach to monitoring complex systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 157-196, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: We are now generalizing the notion of sensors to permit programmers to specify higher level `views' of monitoring data like those described in <ref> [KS91, OSS93, Sno88] </ref>. Such views will be implemented with library support resident in both local and central monitors.
Reference: [SO93] <author> R. Swinbank and A. O'Neill. </author> <title> A stratosphere troposphere data assimilation system. </title> <note> Climate Research Technical Note CRTN 35, </note> <institution> Hadley Centre Meteorological Office, </institution> <address> London Road Bracknell Berkshire RG12 2SY, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Earth and atmospheric scientists at Georgia Tech have developed a global chemical transport model (GCTM)[KSS + 94] which uses assimilated windfields <ref> [SO93] </ref> for the transport calculations. These types of models are important tools to answer scientific questions concerning the stratospheric-tropospheric exchange mechanism or the distribution of species such as chlorofluorocarbons (CFC's), hydrochlorofluorocar-bon (HCFC's) and ozone. This model uses a spectral approach to solve the transport equation for each species.
Reference: [WP86] <author> W.M. Washington and C.L. Parkinson. </author> <title> An introduction to three-dimensional climate modeling. </title> <publisher> Oxford University Press, </publisher> <year> 1986. </year>
Reference-contexts: Details of this solution approach, which is quite common in global models, can be found in [Hau40], [Sil54], [KHYK61], <ref> [WP86] </ref> or [FW94]. Our model contains 37 layers, which represent segments of the earth's atmosphere from the surface to approximately 50 km, with a horizontal resolution of 42 waves or 946 spectral values. In a grid system, this corresponds to a resolution of about 2.8 degrees by 2.8 degrees.
Reference: [XORL92] <author> T. K. Xia, Jian Ouyang, M. W. Ribarsky, and Uzi Landman. </author> <title> Interfacial alkane films. </title> <journal> Physical Review Letters, </journal> <volume> 69(13) </volume> <pages> 1967-1970, </pages> <month> 28 September </month> <year> 1992. </year> <month> 19 </month>
Reference-contexts: This section examines two large parallel applications and discusses ways in which a monitoring and steering system might benefit each. 2.1 MD MD is an interactive molecular dynamics simulation developed at Georgia Tech in cooperation with a group of physicists exploring the statistical mechanics of complex liquids <ref> [XORL92, EGSM94] </ref>. The specific molecular dynamics systems being simulated are n-hexadecane (C 16 -H 34 ) films on a crystalline substrate Au (001). In the simulation, the alkane system is described via intramolecular and intermolecular interactions between pseudoatoms (CH 2 and terminal CH 3 segments) and the substrate atoms.
References-found: 34

