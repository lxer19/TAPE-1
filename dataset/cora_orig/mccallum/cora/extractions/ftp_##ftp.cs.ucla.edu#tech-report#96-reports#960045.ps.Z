URL: ftp://ftp.cs.ucla.edu/tech-report/96-reports/960045.ps.Z
Refering-URL: http://ficus-www.cs.ucla.edu/ficus-members/ratner/papers.html
Root-URL: http://www.cs.ucla.edu
Title: The Ward Model: A Replication Architecture for Mobile Environments  
Author: David Ratner Gerald J. Popek Peter Reiher 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: Replication in mobile environments requires fundamentally different solutions than those previously proposed for static systems, due to requirement differences and to changes in how users work and operate within the system. Here we present a model for replication in mobile environments that solves these problems by blending together traditional client-server and peer-to-peer approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. G. Guy, J. S. Heidemann, W. Mak, T. W. Page, Jr., G. J. Popek, and D. Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Early replication solutions assumed stationary and relatively well-connected environments, and thus had relatively simple architectures. Even systems designed to support frequent network disconnections and treat them as normal occurrences <ref> [1, 4] </ref> were built assuming static infrastructures. However, mobile users are by definition not static, and have difficulty operating within a static infrastructure. <p> Nevertheless, while traveling, the users want the ability to synchronize cheaply and easily with the neighboring, local users. Researchers who previously addressed this part of the problem turned to peer-to-peer algorithms <ref> [1, 10, 14] </ref> for their flexible control structures. Second, scaling in the number of replicas becomes very important. Mobile users clearly require local replicas on their mobile machines; yet replicas must also be stored in the office environment for reliability, intra-office use by non-mobile personnel and system-administration activities like back-ups. <p> In contrast to conservative solutions such as primary-site or majority-vote, optimistic solutions allow updates to any replica at any time, and reliably detect and resolve the resulting conflicts [6, 9]. Availability is therefore greatly increased. Many systems <ref> [1, 12] </ref> have previously provided optimistic replication support, but optimism becomes even more essential in highly mobile environments, due to the commonality of disconnection and the increase in disconnection latency. Peer-based algorithms [10], which allow all replicas to directly exchange information, are required to support interaction between mobile machines.
Reference: [2] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann. </author> <title> The Little Work project. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 11-14. </pages> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: Thus, mobile environments may require much higher replication factors than traditional static environments. Many researchers have therefore chosen client-server style solutions <ref> [2, 12, 13] </ref> because of their inherent ability to scale well. 1 Unfortunately, practice has shown that neither approach is a complete solution. Peer algorithms do not scale well; client-server approaches restrict the system's functionality and flexibility by not allowing clients to intercommunicate and directly synchronize with each other.
Reference: [3] <author> J. J. Kistler. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Such replication flexibility, called selective replication [7, 8] provides improved efficiency and resource utilization: ward members locally store only those objects in the ward set that they actively require. Replication decisions can be made manually or with automated tools <ref> [3, 5] </ref>. Since the ward set varies dynamically, it follows that different wards might store different sets of data as well; that is, not all ward sets will be equivalent. In other words, the model provides selective replication between wards themselves.
Reference: [4] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <type> Technical Report CMU-CS-91-166, </type> <institution> Carnegie-Mellon University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Early replication solutions assumed stationary and relatively well-connected environments, and thus had relatively simple architectures. Even systems designed to support frequent network disconnections and treat them as normal occurrences <ref> [1, 4] </ref> were built assuming static infrastructures. However, mobile users are by definition not static, and have difficulty operating within a static infrastructure.
Reference: [5] <author> G. H. Kuenning. </author> <title> Design of the SEER predictive caching system. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Such replication flexibility, called selective replication [7, 8] provides improved efficiency and resource utilization: ward members locally store only those objects in the ward set that they actively require. Replication decisions can be made manually or with automated tools <ref> [3, 5] </ref>. Since the ward set varies dynamically, it follows that different wards might store different sets of data as well; that is, not all ward sets will be equivalent. In other words, the model provides selective replication between wards themselves.
Reference: [6] <author> P. Kumar and M. Satyanarayanan. </author> <title> Supporting application-specific resolution in an optimistically replicated file system. </title> <booktitle> In Proceedings of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 66-70, </pages> <address> Napa, California, </address> <month> Oct. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: In contrast to conservative solutions such as primary-site or majority-vote, optimistic solutions allow updates to any replica at any time, and reliably detect and resolve the resulting conflicts <ref> [6, 9] </ref>. Availability is therefore greatly increased. Many systems [1, 12] have previously provided optimistic replication support, but optimism becomes even more essential in highly mobile environments, due to the commonality of disconnection and the increase in disconnection latency.
Reference: [7] <author> D. Ratner, G. J. Popek, and P. Reiher. </author> <title> Peer replication with selective control. </title> <type> Technical Report CSD-960031, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Both the ward set and ward membership are locally recorded and replicated in an optimistic fashion. Additionally, each ward member, including the ward master, can locally store a different subset of the ward set. Such replication flexibility, called selective replication <ref> [7, 8] </ref> provides improved efficiency and resource utilization: ward members locally store only those objects in the ward set that they actively require. Replication decisions can be made manually or with automated tools [3, 5]. <p> Since the ward set varies dynamically, it follows that different wards might store different sets of data as well; that is, not all ward sets will be equivalent. In other words, the model provides selective replication between wards themselves. The reconciliation topologies and algorithms <ref> [7] </ref> apply equally well within a single ward and between ward masters. Briefly, the algorithms provide that machines communicate with multiple other partners to ensure that each data object is synchronized directly with another replica.
Reference: [8] <author> D. H. Ratner. </author> <title> Selective replication: Fine-grain control of replicated files. </title> <type> Master's thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> Mar. </month> <year> 1995. </year> <note> Available as UCLA technical report CSD-950007. </note>
Reference-contexts: Both the ward set and ward membership are locally recorded and replicated in an optimistic fashion. Additionally, each ward member, including the ward master, can locally store a different subset of the ward set. Such replication flexibility, called selective replication <ref> [7, 8] </ref> provides improved efficiency and resource utilization: ward members locally store only those objects in the ward set that they actively require. Replication decisions can be made manually or with automated tools [3, 5].
Reference: [9] <author> P. Reiher, J. S. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 183-195. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: In contrast to conservative solutions such as primary-site or majority-vote, optimistic solutions allow updates to any replica at any time, and reliably detect and resolve the resulting conflicts <ref> [6, 9] </ref>. Availability is therefore greatly increased. Many systems [1, 12] have previously provided optimistic replication support, but optimism becomes even more essential in highly mobile environments, due to the commonality of disconnection and the increase in disconnection latency.
Reference: [10] <author> P. Reiher, J. Popek, M. Gunter, J. Salomone, and D. Ratner. </author> <title> Peer-to-peer reconciliation based replication for mobile computers. </title> <booktitle> In Proceedings of ECOOP'96 II Workshop on Mobility and Replication, </booktitle> <month> July </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: Nevertheless, while traveling, the users want the ability to synchronize cheaply and easily with the neighboring, local users. Researchers who previously addressed this part of the problem turned to peer-to-peer algorithms <ref> [1, 10, 14] </ref> for their flexible control structures. Second, scaling in the number of replicas becomes very important. Mobile users clearly require local replicas on their mobile machines; yet replicas must also be stored in the office environment for reliability, intra-office use by non-mobile personnel and system-administration activities like back-ups. <p> Availability is therefore greatly increased. Many systems [1, 12] have previously provided optimistic replication support, but optimism becomes even more essential in highly mobile environments, due to the commonality of disconnection and the increase in disconnection latency. Peer-based algorithms <ref> [10] </ref>, which allow all replicas to directly exchange information, are required to support interaction between mobile machines. Client-server algorithms allow no direct interaction between clients; mobile clients can only communicate with one another through a third party.
Reference: [11] <author> M. Satyanarayanan, J. H. Howard, D. A. Nichols, R. N. Sidebotham, A. Z. Spector, and M. J. West. </author> <title> The ITC distributed file system: </title> <booktitle> Principles and design. In Proceedings of the Tenth Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50. </pages> <publisher> ACM, </publisher> <month> Dec. </month> <year> 1985. </year>
Reference-contexts: Previous systems have only provided replication control at the volume <ref> [11] </ref> granularity, which does not provide the type of fine-grain control needed by the mobile user. 3 The Ward Architecture The ward architecture combines classical elements of both the traditional peer-to-peer and client-server models, yielding a solution that scales well and provides replication flexibility, allowing dynamic reconfiguration of the synchronization topology.
Reference: [12] <author> M. Satyanarayanan, J. J. Kistler, P. Kumar, M. E. Okasaki, E. H. Siegel, and D. C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Thus, mobile environments may require much higher replication factors than traditional static environments. Many researchers have therefore chosen client-server style solutions <ref> [2, 12, 13] </ref> because of their inherent ability to scale well. 1 Unfortunately, practice has shown that neither approach is a complete solution. Peer algorithms do not scale well; client-server approaches restrict the system's functionality and flexibility by not allowing clients to intercommunicate and directly synchronize with each other. <p> In contrast to conservative solutions such as primary-site or majority-vote, optimistic solutions allow updates to any replica at any time, and reliably detect and resolve the resulting conflicts [6, 9]. Availability is therefore greatly increased. Many systems <ref> [1, 12] </ref> have previously provided optimistic replication support, but optimism becomes even more essential in highly mobile environments, due to the commonality of disconnection and the increase in disconnection latency. Peer-based algorithms [10], which allow all replicas to directly exchange information, are required to support interaction between mobile machines.
Reference: [13] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile computing environment. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, Aug. 1993. </address> <publisher> USENIX. </publisher>
Reference-contexts: Thus, mobile environments may require much higher replication factors than traditional static environments. Many researchers have therefore chosen client-server style solutions <ref> [2, 12, 13] </ref> because of their inherent ability to scale well. 1 Unfortunately, practice has shown that neither approach is a complete solution. Peer algorithms do not scale well; client-server approaches restrict the system's functionality and flexibility by not allowing clients to intercommunicate and directly synchronize with each other.
Reference: [14] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> Dec. </month> <year> 1995. </year> <journal> ACM. </journal> <volume> 7 </volume>
Reference-contexts: Nevertheless, while traveling, the users want the ability to synchronize cheaply and easily with the neighboring, local users. Researchers who previously addressed this part of the problem turned to peer-to-peer algorithms <ref> [1, 10, 14] </ref> for their flexible control structures. Second, scaling in the number of replicas becomes very important. Mobile users clearly require local replicas on their mobile machines; yet replicas must also be stored in the office environment for reliability, intra-office use by non-mobile personnel and system-administration activities like back-ups.
References-found: 14

