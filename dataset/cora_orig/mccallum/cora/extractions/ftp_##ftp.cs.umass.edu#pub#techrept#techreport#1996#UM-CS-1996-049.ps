URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-049.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/96-049.html
Root-URL: 
Title: The Criticality of Modeling Formalisms in Software Design Method Comparison  
Author: Rodion M. Podorozhny and Leon J. Osterweil 
Keyword: Software Development Methodology, Software Process, Process Formalism, Com parison, Base Framework  
Address: Amherst, Massachusetts 01003  
Affiliation: Laboratory for Advanced Software Engineering Research Computer Science Department University of Massachusetts  
Note: email:  This work was supported in part by the Air Force Materiel Command, Rome Laboratory, and the Advanced Research Projects Agency under Contract F30602-94-C-0137.  
Email: fpodorozhjljog@cs.umass.edu  
Date: August 16, 1996  
Abstract: This paper describes experimentation aimed at making the comparison of software design methodologies (SDM's) more of an exact science. Our aim is to lay the foundations for this more exact science by establishing fixed methods and conceptual frameworks that are able to assure that comparison efforts will yield predictable, reproducible results. Earlier papers have proposed the use of a systematic process to compare SDM's. This process assumes that the comparison will be done relative to a fixed standard SDM feature classification schema, and with the use of a fixed formalism for modeling the SDM's. Early experiments with this approach have yielded interesting SDM comparisons, but have raised questions about how sensitive these results might be to the choice of modeling formalism. In this paper we study this sensitivity by varying the choice of modeling formalism. We describe an experiment in which we fix a pair of SDM's and then use two different formalisms to obtain two different comparisons of that pair of SDM's. We then compare the comparisons. Our results suggest that comparison results may be relatively insensitive to differences in modeling formalisms. This paper also suggests an approach to further experimentation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sergio Bandinelli, Alfonso Fuggetta, Carlo Ghezzi, and Luigi Lavazza. SPADE: </author> <title> An Environment for Software Process Analysis, Design, </title> <editor> and Enactment. In Anthony Finkelstein, Jeff Kramer, and Bashar Nuseibeh, editors, </editor> <booktitle> Software Process Modelling and Technology, chapter 9, </booktitle> <pages> pages 223-248. </pages> <publisher> Research Studies Press, Ltd., </publisher> <address> Taunton, Somerset, England, </address> <year> 1994. </year> <month> 24 </month>
Reference-contexts: Specifically we repeated some of the design process comparison experiments (e.g., comparing Booch Object Oriented Design (BOOD) [2] to Jackson System Development (JSD) [3]) using CDM and a single fixed classification schema, but substituting a different modeling formalism for HFSP. In these new experiments we used SLANG <ref> [1] </ref> to model the design processes. We then compared the comparison results obtained using SLANG to comparison results obtained using HFSP. In this paper we describe the results obtained.
Reference: [2] <author> Grady Booch. </author> <title> Object-Oriented Development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(2):211-221, </volume> <month> February </month> <year> 1986. </year>
Reference-contexts: Thus, we embarked upon a new set of experiments aimed at attempting to evaluate the sensitivity of the classification and comparison results we obtained to the choice of modeling formalism selected. Specifically we repeated some of the design process comparison experiments (e.g., comparing Booch Object Oriented Design (BOOD) <ref> [2] </ref> to Jackson System Development (JSD) [3]) using CDM and a single fixed classification schema, but substituting a different modeling formalism for HFSP. In these new experiments we used SLANG [1] to model the design processes.
Reference: [3] <author> John R. Cameron. </author> <title> An Overview of JSD. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(2):222-240, </volume> <month> February </month> <year> 1986. </year>
Reference-contexts: Specifically we repeated some of the design process comparison experiments (e.g., comparing Booch Object Oriented Design (BOOD) [2] to Jackson System Development (JSD) <ref> [3] </ref>) using CDM and a single fixed classification schema, but substituting a different modeling formalism for HFSP. In these new experiments we used SLANG [1] to model the design processes. We then compared the comparison results obtained using SLANG to comparison results obtained using HFSP.
Reference: [4] <author> Sjaak Brinkkemper Geert van den Goor, Shuguang Hong. </author> <title> A Comparison of Six Object-Oriented Analysis and Design Methods. </title> <type> Technical report, </type> <institution> University of Twente, Enschede, </institution> <address> the Netherlands, </address> <year> 1992. </year>
Reference-contexts: Ideally, this would be done as a community activity leading to an increasingly broadly accepted classification schema. Indeed, it is clear that this activity is already underway. Thus, for example, in earlier work [8] we have proposed BF. More recently Brinkkemper et al. <ref> [4] </ref> have suggested a different classification schema which they refer to as a supermethod. A careful comparison of BF and Brinkkemper et al.'s supermethod is beyond the scope of this paper, but it seems clear that the supermethod is more detailed, but less structured than BF. <p> This feature is mentioned explicitly in Brinkkem-per et al.'s supermethod in that two features, Concurrency between Objects and Concurrency within Objects deal with concurrency. In <ref> [4] </ref> (p. 129) it is stated that "Concurrency is a property for describing Systems in which more Objects operate in parallel". Thus, those SDM components that allow design of concurrent systems should be classified as relating to BSM's notion of concurrency. <p> It does seem important to note that our comparison results are ultimately based upon a less firm foundation than we would like, in that they are based upon our informal interpretations of what is meant by the various SDM features in BSM. As Brinkkemper, et. al. in <ref> [4] </ref> and Song and Osterweil in [10] described SDM features informally, there is no definitive way to be sure that the features we selected for comparison in this work are precisely the right features.
Reference: [5] <author> Takuya Katayama. </author> <title> A Hierarchical and Functional Software Process Description and its Enac-tion. </title> <booktitle> In Proceedings of the Eleventh International Conference of Software Engineering, </booktitle> <pages> pages 343-353, </pages> <year> 1989. </year>
Reference-contexts: In particular, it seemed clear that others might suggest classification schemas other than BF. We also noted that the results we had obtained were based largely upon the use of a single formalism for modeling the design processes that we compared. The use of that modeling formalism, HFSP <ref> [5] </ref>, seemed to enable us to obtain a range of interesting, useful, and credible design process classification and comparison findings.
Reference: [6] <author> Leon J. Osterweil. </author> <title> Software Process Interpretation and Software Environments. </title> <type> Technical Report CU-CS-324-86, </type> <institution> Department of Computer Science, University of Colorado, Boulder, CO, </institution> <month> April </month> <year> 1986. </year>
Reference-contexts: 1 Introduction 1.1 Background In earlier work <ref> [6] </ref>, [9] we have argued that processes should be viewed as artifacts that can be thought of as emerging from a process-development activity. <p> In earlier work we have suggested that many of the ideas, approaches, techniques, and formalisms of software engineering should be applied to the engineering of processes as well. Our earlier work has evaluated this suggestion by applying a range of software engineering techniques to process engineering. In <ref> [6] </ref> we suggested that software development environments should be viewed as systems for supporting the development, execution, evaluation, and evolution of software development processes.
Reference: [7] <author> Xiping Song and Leon Osterweil. </author> <title> Toward Objective, Systematic Design-Method Comparisons. </title> <journal> IEEE Software, </journal> <pages> pages 43-53, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In [11] we suggested that programming languages should be used to program the process of developing software, and presented evidence that a specific language we had developed showed promise of being effective in supporting this. In [10], <ref> [7] </ref> we suggested that software design notations and software process programming formalisms could be useful in establishing baselines that could be effective bases for the objective classification and comparison of processes. <p> In that work we have also proposed the use of BF, a classification schema for organizing the key components of design processes. In [9], [10] we demonstrated the use of CDM and BF in comparing some software design processes. In <ref> [7] </ref> we have suggested that CDM and BF must be considered to be only initial suggestions, and that considerable community participation in evaluating and migrating them is necessary, based upon an ongoing series of design process classification and comparison activities. <p> The use of that modeling formalism, HFSP [5], seemed to enable us to obtain a range of interesting, useful, and credible design process classification and comparison findings. In the spirit of our earlier paper <ref> [7] </ref>, however, we did feel that it was important to evaluate the use of HFSP as we were concerned that the comparison results obtained might be biased by the use of HFSP as the basis for these comparisons.
Reference: [8] <author> Xiping Song and Leon J. Osterweil. </author> <title> The Models of the Design Methodologies. </title> <type> Technical Report UCI-91-19, </type> <institution> University of California, </institution> <address> Irvine, Irvine, CA 92717, </address> <year> 1991. </year>
Reference-contexts: Ideally, this would be done as a community activity leading to an increasingly broadly accepted classification schema. Indeed, it is clear that this activity is already underway. Thus, for example, in earlier work <ref> [8] </ref> we have proposed BF. More recently Brinkkemper et al. [4] have suggested a different classification schema which they refer to as a supermethod. <p> SDM M odeling SLANG (J SD), yielding J SD M odel SLANG SDM M odeling HF SP (BOOD), yielding BOOD M odel HF SP and SDM M odeling SLANG (BOOD), yielding BOOD M odel SLANG J SD M odel HF SP and BOOD M odel HF SP were presented in <ref> [8] </ref> and are reproduced here as Appendices A.1 and A.2. J SD M odel SLANG is presented in Figs. 3- 7 and BOOD M odel SLANG is presented in Figs. 8- 12. The second step of the process in Fig. 1 entails feature extraction, the third entails feature comparison.
Reference: [9] <author> Xiping Song and Leon J. Osterweil. </author> <title> Engineering Software Design Processes to Guide Process Execution,. </title> <type> Technical Report TR-94-23, </type> <institution> University of Massachusetts, Computer Science Department, </institution> <address> Amherst, MA, </address> <month> February </month> <year> 1994. </year> <note> Appendix accepted and published in Preprints of the Eighth International Software Proces Workshop. </note>
Reference-contexts: 1 Introduction 1.1 Background In earlier work [6], <ref> [9] </ref> we have argued that processes should be viewed as artifacts that can be thought of as emerging from a process-development activity. <p> In [10] we have proposed CDM (Comparison of Design Methodologies) and presented a model of this process for the comparison of design processes. In that work we have also proposed the use of BF, a classification schema for organizing the key components of design processes. In <ref> [9] </ref>, [10] we demonstrated the use of CDM and BF in comparing some software design processes.
Reference: [10] <author> Xiping Song and Leon J. Osterweil. </author> <title> Experience with an approach to comparing software design methodologies. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(5) </volume> <pages> 364-384, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In [11] we suggested that programming languages should be used to program the process of developing software, and presented evidence that a specific language we had developed showed promise of being effective in supporting this. In <ref> [10] </ref>, [7] we suggested that software design notations and software process programming formalisms could be useful in establishing baselines that could be effective bases for the objective classification and comparison of processes. <p> In our earlier work we have proposed such techniques and structures, and have demonstrated their use by carrying out classifications and comparisons of processes drawn from the narrow and specialized domain of software design processes. In <ref> [10] </ref> we have proposed CDM (Comparison of Design Methodologies) and presented a model of this process for the comparison of design processes. In that work we have also proposed the use of BF, a classification schema for organizing the key components of design processes. In [9], [10] we demonstrated the use <p> In <ref> [10] </ref> we have proposed CDM (Comparison of Design Methodologies) and presented a model of this process for the comparison of design processes. In that work we have also proposed the use of BF, a classification schema for organizing the key components of design processes. In [9], [10] we demonstrated the use of CDM and BF in comparing some software design processes. <p> the feasibility of systematically evolving a maturing discipline of software process engineering. 2 Approach 2.1 Comparison of the results of SDM comparison as a way to determine the influence of the modeling formalism used Fig. 1 models an SDM comparison process that is essentially the same as CDM, described in <ref> [10] </ref>. But this model emphasizes the major functional components in the process. This functional decomposition provides a conceptual framework that seems convenient as the basis for establishing a discipline of SDM comparison. The figure also shows dependencies between these functional components. <p> The descriptions used were the ones in <ref> [10] </ref> 6 BSM features in turn. 3.2.1 Identify Objects Identify Objects is a feature of BSM. It is a part of the Analysis of Requirements activity (cf. <p> As Brinkkemper, et. al. in [4] and Song and Osterweil in <ref> [10] </ref> described SDM features informally, there is no definitive way to be sure that the features we selected for comparison in this work are precisely the right features.
Reference: [11] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. APPL/A: </author> <title> A Language for Software-Process Programming. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(3) </volume> <pages> 221-286, </pages> <month> July </month> <year> 1995. </year> <month> 25 </month>
Reference-contexts: Our earlier work has evaluated this suggestion by applying a range of software engineering techniques to process engineering. In [6] we suggested that software development environments should be viewed as systems for supporting the development, execution, evaluation, and evolution of software development processes. In <ref> [11] </ref> we suggested that programming languages should be used to program the process of developing software, and presented evidence that a specific language we had developed showed promise of being effective in supporting this.
References-found: 11

