URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/distedit93.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Title: Issues in the Design of a Toolkit for Supporting Multiple Group Editors  
Author: Michael Knister and Atul Prakash 
Keyword: groupware, collaboration technology, group editors, distributed systems.  
Date: April 2, 1993  
Address: Ann Arbor, MI 48109  
Affiliation: Software Systems Research Laboratory Department of EECS U. of Michigan,  
Abstract: A great interest has developed in recent years in building tools that allow people to collaborate on work without the need for physical proximity. One such class of tools, group editors, allows collaborators to view and edit a shared document simultaneously from their workstations. Building group editors, however, requires solving non-trivial problems such as providing adequate response time for edit operations and yet ensuring consistency with concurrent updates, and providing adequate per-user undo facilities. We have implemented a toolkit, called DistEdit, for building new interactive group editors and for converting existing single-user editors into group editors with minimal changes to their code. The toolkit allows different users to use their favorite editors (e.g., Xedit, Gnu Emacs) to edit a shared file and observe each others' changes as they occur. The toolkit provides fine-grain concurrency control, fault-tolerance, synchronization of views, and support for per-user undo. We describe the detailed design and implementation of the DistEdit toolkit and report our experiences in converting several editors, including Gnu Emacs and Xedit, to group editors using the toolkit.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. M. Abdel-Wahab, S. Guan, and J. Nievergelt. </author> <title> Shared workspaces for group collaboration: An experiment using Internet and Unix inter-process communication. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 10-16, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: In recent years, there has been a growing interest in developing the technology further to provide support for more closely-coupled interactions <ref> [1, 7, 11, 19] </ref>. Our focus in this paper is on one type of collaboration tool, group editors, that allows several people to jointly edit a shared document in a distributed environment.
Reference: [2] <author> K. Birman et al. </author> <title> The ISIS System Manual, </title> <note> Version 2.0, </note> <month> April </month> <year> 1990. </year>
Reference-contexts: Those DistEdit primitives first check for possible region overlap with updates of other users. If no region overlap exists, the primitives do the operation locally first and then distribute them over the network, using the ISIS communication package <ref> [2] </ref>, to all the editors. DistEdit 7 provided internal routines then map the received DistEdit primitives back to calls on the standard access primitives, which are provided by each editor to update and access the editor's buffer state. The DistEdit primitives and the access primitives are discussed in Section 6. <p> Care must be taken to ensure that resulting state is identical in all editors and matches the expectations of the users. The following subsections address this issue and other implementation issues. 7.1 Underlying Communication Software ISIS <ref> [2] </ref>, a toolkit for programming distributed applications, was chosen as our communications package because of its elegant broadcast facilities, its error handling, and its lightweight process system.
Reference: [3] <author> P. Dewan and R. Choudhary. </author> <title> A flexible and high-level framework for implementing multi-user user interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The communication protocols and algorithms used by the toolkit ensure mutual consistency between the buffers, even in the presence of failures. Different approaches to groupware toolkits can be seen in LIZA [9], GroupKit [18], Rendezvous [16], and Suite <ref> [3] </ref>. LIZA provides a high-level collection of tools to support sending messages, indicating moods of participants, giving slide shows, and monitoring the group. Both Rendezvous and GroupKit provide generic facilities for doing conference management, sharing of windows, implementing various floor control policies, and basic access control.
Reference: [4] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Design and use of a group editor. </title> <editor> In G. Cockton, editor, </editor> <booktitle> Engineering for Human-Computer Interaction, </booktitle> <pages> pages 13-25. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <month> September </month> <year> 1988. </year> <month> 24 </month>
Reference-contexts: The resulting group editors allow users to make changes concurrently to the same document and to observe changes of others as the editing is in progress. GROVE <ref> [4] </ref> and ShrEdit [13] are examples of editors that are designed specifically to support group editing. DistEdit, unlike these systems, is not an editor but a toolkit that can be used to build new group editors and adapt existing single-user editors to the task of group editing.
Reference: [5] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD '89 Conference on Management of Data, </booktitle> <pages> pages 399-407. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Reordering of Operations: Even if undo is not supported in a group editor, there may be reasons to keep the primitives restricted to a small set. For instance, if a scheme such as that in <ref> [5] </ref> is used to ensure consistency, functions to resequence operations are required (T op matrix in [5]). Defining such functions is much easier if the set of primitives is small. In DistEdit, we chose to support a very simple and general model of text editing. <p> For instance, if a scheme such as that in <ref> [5] </ref> is used to ensure consistency, functions to resequence operations are required (T op matrix in [5]). Defining such functions is much easier if the set of primitives is small. In DistEdit, we chose to support a very simple and general model of text editing. <p> a group member leaving STATE TRANSFER (buffer contents, lock table) transfers state of the current buffer and state of the locks to the new UNLOCKed (JOINing) group member INFO (member info) member informs group of user name and host name lead to inconsistencies in the buffer state at various sites <ref> [5] </ref>. We use an efficient locking-based solution which requires locks to be acquired only at the start of an insert/delete but not during an insert/delete. <p> Another reasonable alternative would have been to use the somewhat more complex scheme suggested in <ref> [5] </ref>, which does not require locks but does require messages to contain version vectors and requires messages to be processed against a command log.
Reference: [6] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: One difficulty in building collaboration systems is that they require solutions to non-trivial problems in distributed concurrency control, fault-tolerance, user-interfaces, psychology, human factors, and software design <ref> [6] </ref>. The goal of our project is to remove most of the concerns of distributed concurrency control and fault tolerance by providing a library of primitives that can be used to build collaboration tools. This paper describes the design issues we faced during the development of the DistEdit toolkit. <p> Furthermore, they did not deal properly with multi-operation actions. The current version of DistEdit-based Gnu Emacs addresses these problems using the techniques outlined in this paper and has been found to be much more satisfactory. For results of usage studies with group editors in general, see <ref> [6] </ref>. Work still needs to be done for support of shared editing of multiple buffers at present, editing multiple files in a shared manner requires opening one editor per file, as the DistEdit library primitives allow only one file to be edited in the shared mode.
Reference: [7] <author> M. Elwart-Keys, D. Halonen, M. Horton, R. Kass, and P. Scott. </author> <title> User interface requirements for face to face groupware. </title> <type> Technical Report CMI-89-020, </type> <institution> Center for Machine Intelligence, </institution> <address> Ann Arbor, MI, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: In recent years, there has been a growing interest in developing the technology further to provide support for more closely-coupled interactions <ref> [1, 7, 11, 19] </ref>. Our focus in this paper is on one type of collaboration tool, group editors, that allows several people to jointly edit a shared document in a distributed environment.
Reference: [8] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> A collaborative tool for cooperative writing. </title> <booktitle> In Proceedings of ACM SIGOIS Conference, </booktitle> <pages> pages 30-37, </pages> <year> 1988. </year>
Reference-contexts: A closely related class of collaboration systems are those that support more asynchronous or non-real time styles of interaction. Examples are editors such as CES [10], Quilt <ref> [8] </ref>, and Prep [14]. These editors allow users to work on the same document but typically on different sections and at different times. As a result, interactions are over a much longer duration, even up to several days.
Reference: [9] <author> S.J. Gibbs. LIZA: </author> <title> An extensible groupware toolkit. </title> <booktitle> In Proc. of the ACM CHI'89 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 29-35, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: In contrast, DistEdit-based editors maintain a copy of the state of the editor buffer for each user. The communication protocols and algorithms used by the toolkit ensure mutual consistency between the buffers, even in the presence of failures. Different approaches to groupware toolkits can be seen in LIZA <ref> [9] </ref>, GroupKit [18], Rendezvous [16], and Suite [3]. LIZA provides a high-level collection of tools to support sending messages, indicating moods of participants, giving slide shows, and monitoring the group.
Reference: [10] <author> I. Grief, R. Seliger, and W. Weihl. </author> <title> Atomic data abstractions in a distributed collaborative editing system. </title> <booktitle> In Proc. of the 13th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 160-172, </pages> <year> 1976. </year>
Reference-contexts: A closely related class of collaboration systems are those that support more asynchronous or non-real time styles of interaction. Examples are editors such as CES <ref> [10] </ref>, Quilt [8], and Prep [14]. These editors allow users to work on the same document but typically on different sections and at different times. As a result, interactions are over a much longer duration, even up to several days.
Reference: [11] <author> D. Halonen, M. Horton, R. Kass, and P. Scott. </author> <title> Shared hardware: A novel technology for computer support of face to face meetings. </title> <type> Technical Report CMI-89-015, </type> <institution> Center for Machine Intelligence, </institution> <address> Ann Arbor, MI, </address> <month> November </month> <year> 1989. </year>
Reference-contexts: In recent years, there has been a growing interest in developing the technology further to provide support for more closely-coupled interactions <ref> [1, 7, 11, 19] </ref>. Our focus in this paper is on one type of collaboration tool, group editors, that allows several people to jointly edit a shared document in a distributed environment.
Reference: [12] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Many of the issues of fault tolerance and real time propagation of updates are not important in such systems. The DistEdit toolkit concentrates on providing more closely coupled "real-time" interaction. An earlier version of the DistEdit toolkit is described in <ref> [12] </ref>. Several major features have since been added. <p> The lightweight process system in ISIS allows broadcasts to be received while waiting for keyboard input; also, events, such as a group member failing, can be handled by triggering a lightweight process. 7.2 Dealing with Concurrent Updates Unlike the earlier version of DistEdit described in <ref> [12] </ref>, the current version of the DistEdit toolkit provides support for concurrent updates. To keep response time low, any update is performed locally first and then broadcast to other sites.
Reference: [13] <author> L. McGuffin and G. M. Olson. ShrEdit: </author> <title> A shared electronic workspace. </title> <type> Technical Report CSMIL Technical Report No. 45, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1992. </year>
Reference-contexts: The resulting group editors allow users to make changes concurrently to the same document and to observe changes of others as the editing is in progress. GROVE [4] and ShrEdit <ref> [13] </ref> are examples of editors that are designed specifically to support group editing. DistEdit, unlike these systems, is not an editor but a toolkit that can be used to build new group editors and adapt existing single-user editors to the task of group editing.
Reference: [14] <editor> C.M. Neuwirth, D.S. Kaufer, R. Chandhok, and J.H. Morris. </editor> <booktitle> Issues in the design of computer support for co-authoring and commenting. In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 183-195, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A closely related class of collaboration systems are those that support more asynchronous or non-real time styles of interaction. Examples are editors such as CES [10], Quilt [8], and Prep <ref> [14] </ref>. These editors allow users to work on the same document but typically on different sections and at different times. As a result, interactions are over a much longer duration, even up to several days.
Reference: [15] <author> R.E. Newman-Wolfe and H. K. Pelimuhandiram. MACE: </author> <title> A fine-grained concurrent editor. </title> <booktitle> In Proceedings of the ACM/IEEE Conference on Organizational Computing Systems (COCS 91), </booktitle> <pages> pages 240-254, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: DistEdit specifically addresses the problem of per-user undo in group editors, making the facility available to all editors built using the toolkit. MACE <ref> [15] </ref>, another group editor, is structured to make it easy to integrate different editors into a collaborative environment by replacing only a few modules. At present, however, only one editor interface, based on the Athena text widget, is supported. <p> We believe that the following design decisions in MACE may make it difficult to integrate other editors: (a) to integrate a new editor in MACE requires one to implement a module that provides conversion between keystroke commands and a canonical form understood by all editors <ref> [15] </ref> a task that we believe may prove difficult for sophisticated editors such as Emacs with a large number of keystroke commands; and (b) MACE is based on a different model of user/editor interaction than is found in single-user 2 editors.
Reference: [16] <author> J.F. Patterson, R.D. Hill, </author> <title> S.L. Rohall, and W.S. Meeks. Rendezvous: An architecture for synchronous multi-user applications. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 317-328, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year> <month> 25 </month>
Reference-contexts: The communication protocols and algorithms used by the toolkit ensure mutual consistency between the buffers, even in the presence of failures. Different approaches to groupware toolkits can be seen in LIZA [9], GroupKit [18], Rendezvous <ref> [16] </ref>, and Suite [3]. LIZA provides a high-level collection of tools to support sending messages, indicating moods of participants, giving slide shows, and monitoring the group. Both Rendezvous and GroupKit provide generic facilities for doing conference management, sharing of windows, implementing various floor control policies, and basic access control.
Reference: [17] <author> A. Prakash and M. Knister. </author> <title> Undoing actions in collaborative work. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 273-280, </pages> <address> Toronto, Canada, </address> <month> Oc-tober </month> <year> 1992. </year>
Reference-contexts: The toolkit takes care of many non-trivial issues, such as concurrency control, consistency of views, history lists for the purpose of per-user undo <ref> [17] </ref>, and fault-tolerance. The primitives provided by the toolkit are generic enough to support different text editors in the same group environment. <p> For instance, it probably would be cheaper to transmit an IndentParagraph command, rather than the sequence of InsertChar and DeleteChar commands to which it might map. Support for Undo: Undo implementation is much more complex in a group editor <ref> [17] </ref> than in a single-user editor. In particular, the ability to reverse and resequence operations is needed for all the primitive operations. It is much easier to provide this capability if the set of primitive operations is small. <p> In <ref> [17] </ref>, we proposed a general framework for undoing actions in collaborative systems. The framework takes into account the possibility of conflicts between different users' actions that may prevent a normal undo. <p> When the de local undo primitive is invoked, DistEdit looks through the history list and finds the last operation that was done by the user. DistEdit then attempts to undo the operation by shifting the operation to the end of the history list using a sequence of transpose operations <ref> [17] </ref>. If the operation is shifted successfully (i.e., no conflicts with later changes of other users), the operation is undone by executing its inverse operation. To update the state of other editors, the inverse operation is broadcast to other editors. For more details of this strategy, see [17]. 7.5 File Management <p> of transpose operations <ref> [17] </ref>. If the operation is shifted successfully (i.e., no conflicts with later changes of other users), the operation is undone by executing its inverse operation. To update the state of other editors, the inverse operation is broadcast to other editors. For more details of this strategy, see [17]. 7.5 File Management Several problems arise from sharing document files. First, when a user requests a file be opened for editing, DistEdit must determine whether anyone else is editing that file and, if so, load from the active group session rather than from the file. <p> Choosing more complex primitives simply would mean more work in implementing transactions and the group undo facilities. The current version of the toolkit only provides global and per-user history undo. In <ref> [17] </ref>, we suggested that other undo methods, such as region-undo and time-based undo, also might be useful in group environments. We plan to enhance the toolkit to provide support for these other types of undo facilities.
Reference: [18] <author> M. Roseman and S. Greenberg. GroupKit: </author> <title> A groupware toolkit for building real-time conferencing appliations. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 43-50, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The communication protocols and algorithms used by the toolkit ensure mutual consistency between the buffers, even in the presence of failures. Different approaches to groupware toolkits can be seen in LIZA [9], GroupKit <ref> [18] </ref>, Rendezvous [16], and Suite [3]. LIZA provides a high-level collection of tools to support sending messages, indicating moods of participants, giving slide shows, and monitoring the group.
Reference: [19] <author> M. Stefik, G. Foster, D.G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond the Chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> Jan. </month> <year> 1987. </year> <month> 26 </month>
Reference-contexts: In recent years, there has been a growing interest in developing the technology further to provide support for more closely-coupled interactions <ref> [1, 7, 11, 19] </ref>. Our focus in this paper is on one type of collaboration tool, group editors, that allows several people to jointly edit a shared document in a distributed environment.
References-found: 19

