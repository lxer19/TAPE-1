URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/vldb98.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/laks/papers.html
Root-URL: http://www.cs.concordia.ca
Email: e-mail: fgingras, laksg@cs.concordia.ca  
Title: nD-SQL: A Multi-dimensional Language for Interoperability and OLAP  
Author: Frederic Gingras and Laks V.S. Lakshmanan 
Address: Montreal, Quebec H3G 1M8  
Affiliation: Department of Computer Science, Concordia University,  
Abstract: We propose a multi-dimensional language called nD-SQL with the following features: (i) nD-SQL supports queries that interoperate amongst multiple relational sources with heterogeneous schemas, including RDBMS and relational data marts, overcoming the mismatch between data and schema; (ii) it supports complex forms of restructuring that permit the visualization of n-dimensional data using the three physical dimensions of the relational model, viz., row, column, and relation; (iii) it captures sophisticated aggregations involving multiple granularities, to an arbitrary degree of resolution compared to CUBE, ROLLUP, and DRILLDOWN. We propose a formal model for a federation of relational sources and illustrate nD-SQL against it. We propose an extension to relational algebra, called restructuring relational algebra (RRA), capable of restructuring and aggregation. We propose an architecture for the implementation of an nD-SQL server, based on translating nD-SQL queries into equivalent RRA expressions, which are then optimized. We are currently implementing an nD-SQL server on the PC platform based on these ideas. 
Abstract-found: 1
Intro-found: 1
Reference: [Agar + 96] <editor> Agarwal, S. et al. </editor> <booktitle> On the Computation of Multidimensional Aggregates In Proc. 22nd VLDB Conf., </booktitle> <year> 1996. </year>
Reference-contexts: We can test the latter in time linear in the size of a given query [GL98]. 3.2 Enhancing nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. [Gray+96] for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator <ref> [Agar + 96, ZDN97] </ref>. The CUBE operator corresponds to aggregation at exponentially many granularities. It has been recognized [Agar + 96, ZDN97] that in practice, a user may be interested in specific subsets of group-bys. Two such examples are ROLLUP (e.g., ffDate, Tickerg, fDateg, fg) and its converse DRILLDOWN. <p> nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. [Gray+96] for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator <ref> [Agar + 96, ZDN97] </ref>. The CUBE operator corresponds to aggregation at exponentially many granularities. It has been recognized [Agar + 96, ZDN97] that in practice, a user may be interested in specific subsets of group-bys. Two such examples are ROLLUP (e.g., ffDate, Tickerg, fDateg, fg) and its converse DRILLDOWN. <p> The key idea in their processing is recognizing that they involve the computation of a subset of group-bys from the cube lattice. Such computations are referred to as partial cubes <ref> [Agar + 96, ZDN97] </ref>. ROLLUP is a common example of a partial cube. See Example 3.4 for another intersting example of a partial cube. The papers [Agar + 96, ZDN97] discuss how algorithms for computing the CUBE can be adapted for computing partial cubes. <p> Such computations are referred to as partial cubes <ref> [Agar + 96, ZDN97] </ref>. ROLLUP is a common example of a partial cube. See Example 3.4 for another intersting example of a partial cube. The papers [Agar + 96, ZDN97] discuss how algorithms for computing the CUBE can be adapted for computing partial cubes. Optimization of partial cubes is a topic of its own interest and is orthogonal to this paper.
Reference: [ASD + 91] <author> Ahmed, R., Smedt, P., Du, W., Kent, W., Ketabchi, A., and Litwin, W. </author> <title> The Pegasus Heterogeneous Multidatabase System. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: One approach that has been followed in the past to resolve schematic discrepancies is to convert the data in the databases to conform to a common canonical schema, by defining mappings (e.g., see <ref> [ASD + 91] </ref>). Unfortunately, such mappings tend to be very low level and converting data in this manner is labor intensive, necessitating lengthy and costly human interventions. <p> For lack of space, we merely observe that none of the above languages have both the restructuring and complex aggregation capabilities of nD-SQL. Important extensions to SQL inspired by OODB querying include Kifer et al.'s XSQL [KKS92], Ahmed at al.'s HOSQL <ref> [ASD + 91] </ref>, and Chomicki and Litwin's OSQL [CL93]. XSQL permits very complex and powerful queries, and the concern about its effective and efficient implementability has not been addressed by its authors.
Reference: [Bee93] <author> Beech, D. </author> <title> Collections of Objects in SQL3. </title> <booktitle> In Proc. 19th VLDB Conf., </booktitle> <year> 1993. </year>
Reference: [Cat96] <author> Cattell, R.G.G. </author> <title> The Object Database Standard: ODMG-93 Release 1.2. </title> <address> Morgan-Kauffmann, San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: Some of the expressions for extracting domain values and values of criteria in nD-SQL resemble the path expressions of OQL <ref> [Cat96] </ref>. However, there seems to be no direct facility for restructuring in OQL. Two noteworthy extensions to SQL from the vendor side are DB2/SQL [DB296] and ORACLE/SQL [ORA].
Reference: [CD97] <author> Surajit Chaudhuri and Umesh Dayal. </author> <title> An Overview of Data Warehousing and OLAP Technology, </title> <booktitle> Tutorial - VLDB'96 and SIGMOD'97, SIGMOD Record '97. </booktitle>
Reference-contexts: Why then need yet another query language? However, as discussed in <ref> [CD97] </ref>, building a data warehouse is 1 Actually, a data warehouse should ideally support both OLAP and mining as argued by Chaudhuri and Dayal [CD97], but in this paper, we do not consider mining. <p> Why then need yet another query language? However, as discussed in <ref> [CD97] </ref>, building a data warehouse is 1 Actually, a data warehouse should ideally support both OLAP and mining as argued by Chaudhuri and Dayal [CD97], but in this paper, we do not consider mining. Ticker Date Measure Price ibm 10j27j97 open 63.67 ... ... ... ... ibm 10j27j97 close 62.56 ... ... ... ... ... ... ... ...
Reference: [CL93] <author> Chomicki, J. and Litwin, W. </author> <title> Declarative Definition of Object-Oriented Multidatabase Mappings. In Ozsu, M.T, Dayal, U, and Valduriez, P, editors, Distributed Object Management. </title> <editor> M. </editor> <publisher> Kaufmann Publishers, </publisher> <address> Los Altos, California, </address> <year> 1993. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability. <p> For lack of space, we merely observe that none of the above languages have both the restructuring and complex aggregation capabilities of nD-SQL. Important extensions to SQL inspired by OODB querying include Kifer et al.'s XSQL [KKS92], Ahmed at al.'s HOSQL [ASD + 91], and Chomicki and Litwin's OSQL <ref> [CL93] </ref>. XSQL permits very complex and powerful queries, and the concern about its effective and efficient implementability has not been addressed by its authors. Both HOSQL and OSQL do not allow ad hoc queries that refer to more than one component database in one shot.
Reference: [DB296] <institution> IBM DB2 for MVS/ESA Version 5 , 1996. </institution> <note> Programmer's Manual. </note>
Reference-contexts: Some of the expressions for extracting domain values and values of criteria in nD-SQL resemble the path expressions of OQL [Cat96]. However, there seems to be no direct facility for restructuring in OQL. Two noteworthy extensions to SQL from the vendor side are DB2/SQL <ref> [DB296] </ref> and ORACLE/SQL [ORA]. Of these, DB2/SQL is being incorporated in DataJoiner, IBM's new middleware for interoperability, and supports queries involving joins of tables from multiple DBMS in one select statement.
Reference: [DKS92] <author> Weimin Du, Ravi Krishnamurthy, and Ming-Chien Shan. </author> <title> Query Optimization in a Heterogeneous DBMS. </title> <booktitle> In Proc. Int. Conf. on Very Large Data Bases., </booktitle> <pages> pages 277-291, </pages> <address> Dublin, Ireland, </address> <year> 1992. </year>
Reference-contexts: Multi-database Query Optimization: Much work has been done in the context of multi-database query optimization, particularly in integrating data sources with diverse capabilities. See Haas et al. [Haa97] for a survey. Du et al. <ref> [DKS92] </ref>, Qian [Qia96] and Florescu et al. [Flo95] are related works studying query optimization in multi-database systems.
Reference: [Flo95] <author> Florescu, D. </author> <title> Using Heterogeneous Equivalences for Query Rewriting in Multi-Database Systems. </title> <booktitle> In Proc. 23rd Int. Conf. on Cooperative Information Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Multi-database Query Optimization: Much work has been done in the context of multi-database query optimization, particularly in integrating data sources with diverse capabilities. See Haas et al. [Haa97] for a survey. Du et al. [DKS92], Qian [Qia96] and Florescu et al. <ref> [Flo95] </ref> are related works studying query optimization in multi-database systems. Our concern in query optimization in this paper is different: we focus on algebraic optimization of queries across multiple relational databases with heterogeneous schemas, where queries can involve attribute/value conflicts, restructuring, and complex OLAP-style aggrega tion.
Reference: [GL97] <author> Marc Gyssens and Laks V.S. Lakshmanan. </author> <title> A Foundation for Mulit-Dimensional Databases. </title> <booktitle> In Proc. 23rd Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 106-115, </pages> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference: [GL98] <author> Gingras, Frederic and Lakshmanan, </author> <title> Laks V.S. Design and Implementation of nD-SQL, a MultiDimensional Language for Interoperability and OLAP. </title> <type> Technical report, </type> <institution> Concordia University, Montreal, Canada, </institution> <note> in preparation. </note>
Reference-contexts: For lack of space, we suppress the proofs of all our results and finer details of our query processing algorithms in this paper, and refer the reader to the full version <ref> [GL98] </ref>. We also point the reader to the URL http://www.cs.concordia.ca/~special/bibdb/nd-sql for more information about nD-SQL. 2 The Model In this section, we propose a formal model for collections of relational databases. <p> The semantics of nD-SQL will be illustrated with examples. The complete syntax of the language and a rigorous account of the semantics can be found in <ref> [GL98] </ref>. Tables summarizing the differences in syntax between SQL and nD-SQL are available at http://www.cs.concordia.ca/~special/bibdb/ndsql. <p> Examples of labels could be: "Price for Year = "&T.Ticker, "Price for "&T.Ticker, T.Ticker&"'s Price" or even simply T.Ticker. When no label (AS subclause) is present, appropriate default conventions for labels are used <ref> [GL98] </ref>. The use of the FOR subclause with a select object indicates that there should be a complex attribute with name (undconc (domain 0 ), fundconc (domain 1 ), undconc (domain 2 ), ...g) (see Definition 3.1) in the output relation schema. <p> The result of the query is shown in Figure 3, where we assume all output relations to be temporarily viewed as members of a database named "output". Various abbreviations are acceptable in nD-SQL syntax <ref> [GL98] </ref>, whose details are suppressed for lack of space. Well Typing: Intuitively, a query can be meaningful only if it maps legal instances to legal instances. More precisely, we have the following definition. <p> Theorem 3.1 A query is well-typed if and only if it is well-formed. Theorem 3.1 immediately yields an algorithm for testing well-typing: test whether the query satisfies the conditions for being well-formed. We can test the latter in time linear in the size of a given query <ref> [GL98] </ref>. 3.2 Enhancing nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. [Gray+96] for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator [Agar + 96, ZDN97]. The CUBE operator corresponds to aggregation at exponentially many granularities. <p> The resulting table is shown in Figure 7. It turns out the converse of add rel, call it rem rel, is not needed as an explicit operator, as its sense is built into our query processing algorithms. We point the reader to <ref> [GL98] </ref> for the details as well as for an algorithmic presentation of the restructuring operators. The classical RA operators are extended in the following way: we allow that parameters to these operators refer to one specific column instance of a complex column by using its label. <p> Translation from nD-SQL to RRA: As stated earlier, the processing of nD-SQL queries is based on the translation of said queries into equivalent RRA expressions. For lack of space, we point the reader interested in details of the translation algorithm to <ref> [GL98] </ref>. We will provide here a very high level description of the algorithm. <p> We define two new operators, fl and oe fl that capture the series of operations (1) and (2) respectively. For lack of space, we refer their formal definition to <ref> [GL98] </ref>. 4.3 Processing of queries involving dimension variables The most interesting (and challenging) class of queries of this kind are the ones which involve aggregation. The key idea in their processing is recognizing that they involve the computation of a subset of group-bys from the cube lattice. <p> SQL Extensions: There have been numerous extensions to SQL-like languages over the years, some inspired by multi-database interoperability requirements ([Lit89, GLRS93, SSR94, MR95]), some motivated by querying OODBs ([KKS92, ASD + 91, CL93]). An extensive comparison between nD-SQL and many of these languages appears in <ref> [GL98] </ref>. For lack of space, we merely observe that none of the above languages have both the restructuring and complex aggregation capabilities of nD-SQL. <p> Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. A comparison between nD-SQL and a whole class of related logics is given in <ref> [GL98] </ref>. Ross et al. [SRC97] generalize CUBE into a multi-feature CUBE, and propose fast algorithms for computing queries involving this operator. Their contributions and those of this paper are complementary. 2.
Reference: [GLRS93] <author> Grant, J. , Litwin, W., Roussopoulos, N., and Sellis, T. </author> <title> Query Languages for Relational Multidatabases. </title> <journal> VLDB Journal, </journal> <volume> 2(2) </volume> <pages> 153-171, </pages> <year> 1993. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability.
Reference: [GLS96] <author> Gyssens, Marc, Lakshmanan, Laks V.S., and Sub-ramanian, Iyer N. </author> <title> Tables as a Paradigm for Querying and Restructuring. </title> <booktitle> In Proc. ACM Symposium on Principles of Database Systems (PODS), </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: ORACLE/SQL's DECODE feature is worth noting, since it permits some lim ited form of cross-tabbing. This is far too limited compared to the restructuring capabilities of nD-SQL. Finally, Ross [Ros92] and Gyssens et al. <ref> [GLS96] </ref> are two recently proposed algebras which have the power of manipulating meta-data. Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. <p> This is far too limited compared to the restructuring capabilities of nD-SQL. Finally, Ross [Ros92] and Gyssens et al. <ref> [GLS96] </ref> are two recently proposed algebras which have the power of manipulating meta-data. Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. A comparison between nD-SQL and a whole class of related logics is given in [GL98].
Reference: [GLS + 97] <author> Gingras Frederic, Lakshmanan Laks V.S., Subrama-nian Iyer N., Papoulis, Despina, and Shiri, Nematol-laah. </author> <title> Languages for Multi-database Interoperability. </title> <editor> In Joan S. Peckham, editor, </editor> <booktitle> Proc. of the ACM SIG-MOD, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year> <title> Tools Demo. </title>
Reference: [Gray+96] <author> Gray, J. and Bosworth, A. and Layman, A. and Pi-rahesh H.. </author> <title> Data Cube: A Relational Aggregation Operator Generalizing Group-By, </title> <booktitle> Cross-Tab, and Sub-Totals In Proc. of the 12th Intl. Conf. on Data Engineering (ICDE), </booktitle> <year> 1996. </year>
Reference-contexts: We can test the latter in time linear in the size of a given query [GL98]. 3.2 Enhancing nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. <ref> [Gray+96] </ref> for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator [Agar + 96, ZDN97]. The CUBE operator corresponds to aggregation at exponentially many granularities. <p> Constraints on dimension variables include the standard rel-ops =; ; &lt;; &gt;; ; 6=. We interpret them w.r.t. the lexicographic ordering of the dimension names. E.g., Date &lt; Ticker. We introduce a special constant, NONE, inspired by the special constant all introduced by Gray et al. <ref> [Gray+96] </ref>. 2 We give this constant a special status w.r.t. the way the rel-ops are interpreted. We assume: (i) NONE Op NONE is always true for all rel-ops Op; (ii) hdimensioni &lt; NONE is always true, for all dimension names hdimensioni.
Reference: [Haa97] <author> Haas Laura et al. </author> <title> Optimizing Queries Across Diverse Data Sources. </title> <booktitle> In Proc. 23rd Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 276-285, </pages> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: On the query processing side, unlike [LSS96], we give an algebra and exploit its properties for query optimization. 3. Multi-database Query Optimization: Much work has been done in the context of multi-database query optimization, particularly in integrating data sources with diverse capabilities. See Haas et al. <ref> [Haa97] </ref> for a survey. Du et al. [DKS92], Qian [Qia96] and Florescu et al. [Flo95] are related works studying query optimization in multi-database systems.
Reference: [KGK + 95] <author> Kelley, W., Gala, S. K., Kim, W., Reyes, T.C., and Graham, B. </author> <title> Schema Architecture of the UniSQL/M Multidatabase System. </title> <booktitle> In Modern Database Systems. </booktitle> <year> 1995. </year>
Reference: [KLK91] <author> Krishnamurthy, R., Litwin, W., and Kent, W. </author> <title> Language Features for Interoperability of Databases With Schematic Discrepancies. </title> <booktitle> In ACM SIGMOD Intl. Conference on Management of Data, </booktitle> <pages> pages 40-49, </pages> <year> 1991. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability.
Reference: [KKS92] <author> Kifer Michael, Kim Won, and Sagiv Yehoshua. </author> <title> Querying Object-Oriented Databases. </title> <booktitle> In Proc. ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 393-402, </pages> <year> 1992. </year>
Reference-contexts: An extensive comparison between nD-SQL and many of these languages appears in [GL98]. For lack of space, we merely observe that none of the above languages have both the restructuring and complex aggregation capabilities of nD-SQL. Important extensions to SQL inspired by OODB querying include Kifer et al.'s XSQL <ref> [KKS92] </ref>, Ahmed at al.'s HOSQL [ASD + 91], and Chomicki and Litwin's OSQL [CL93]. XSQL permits very complex and powerful queries, and the concern about its effective and efficient implementability has not been addressed by its authors.
Reference: [Lit89] <author> Litwin, W. MSQL: </author> <title> A Multidatabase Language. </title> <journal> Information Science, </journal> <volume> 48(2), </volume> <year> 1989. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability.
Reference: [LSS96] <author> Lakshmanan L.V.S., Sadri F., and Subramanian, I. N. </author> <title> SchemaSQL a Language for Querying and Restructuring multidatabase systems. </title> <booktitle> In Proc. IEEE Int. Conf. on Very Large Databases (VLDB'96), </booktitle> <pages> pages 239-250, </pages> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability. <p> It is known that conventional languages like SQL or variants cannot be used to overcome this conflict (see <ref> [LSS96] </ref>), without a host language. In this paper, we view interoperability in a slightly larger context where the objective is not only to run traditional SQL queries on the data in a federation, but also queries involving multiple granularity aggregation required for OLAP. <p> Ross et al. [SRC97] generalize CUBE into a multi-feature CUBE, and propose fast algorithms for computing queries involving this operator. Their contributions and those of this paper are complementary. 2. SchemaSQL: SchemaSQL is a multi-database interopera-ble query language proposed by one of the authors <ref> [LSS96] </ref>, capable of restructuring and complex aggregations, and is the closest language to nD-SQL. In particular, our syntax for database, relation, and column variables was inspired by SchemaSQL. <p> By contrast, this is straightforward in nD-SQL (e.g., see query (Q3), page 6). (5) Multiple granularity: One of the strengths of nD-SQL is its ability to express multiple granularity aggregation, possibly together with multiple visualizations (see Section 3.2), something SchemaSQL cannot do. On the query processing side, unlike <ref> [LSS96] </ref>, we give an algebra and exploit its properties for query optimization. 3. Multi-database Query Optimization: Much work has been done in the context of multi-database query optimization, particularly in integrating data sources with diverse capabilities. See Haas et al. [Haa97] for a survey.
Reference: [MR95] <author> Missier, P. and Rusinkiewicz, Marek. </author> <title> Extending a Multidatabase Manipulation Language to Resolve Schema and Data Conflicts. </title> <booktitle> In Proc. Sixth IFIP TC-2 Working Conf. on Data Semantics (DS-6), </booktitle> <address> Atlanta, </address> <month> May </month> <year> 1995. </year>
Reference: [ORA] <institution> Oracle7 Server SQL Reference. </institution> <note> available from: http://www.oracle.com/documentation/sales/html /o7sqlref.html. </note>
Reference-contexts: Some of the expressions for extracting domain values and values of criteria in nD-SQL resemble the path expressions of OQL [Cat96]. However, there seems to be no direct facility for restructuring in OQL. Two noteworthy extensions to SQL from the vendor side are DB2/SQL [DB296] and ORACLE/SQL <ref> [ORA] </ref>. Of these, DB2/SQL is being incorporated in DataJoiner, IBM's new middleware for interoperability, and supports queries involving joins of tables from multiple DBMS in one select statement.
Reference: [Qia96] <author> Xiaolei Quian. </author> <title> Query Folding. </title> <booktitle> In Proc. IEEE Int. Conf. on Data Eng., </booktitle> <address> New Orleans, LA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Multi-database Query Optimization: Much work has been done in the context of multi-database query optimization, particularly in integrating data sources with diverse capabilities. See Haas et al. [Haa97] for a survey. Du et al. [DKS92], Qian <ref> [Qia96] </ref> and Florescu et al. [Flo95] are related works studying query optimization in multi-database systems.
Reference: [Ros92] <author> Ross, Kenneth. </author> <title> Relations With Relation Names as Arguments: Algebra and Calculus. </title> <booktitle> In Proc. 11th ACM Symp. on PODS, </booktitle> <pages> pages 346-353, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: ORACLE/SQL's DECODE feature is worth noting, since it permits some lim ited form of cross-tabbing. This is far too limited compared to the restructuring capabilities of nD-SQL. Finally, Ross <ref> [Ros92] </ref> and Gyssens et al. [GLS96] are two recently proposed algebras which have the power of manipulating meta-data. Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. <p> ORACLE/SQL's DECODE feature is worth noting, since it permits some lim ited form of cross-tabbing. This is far too limited compared to the restructuring capabilities of nD-SQL. Finally, Ross <ref> [Ros92] </ref> and Gyssens et al. [GLS96] are two recently proposed algebras which have the power of manipulating meta-data. Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. A comparison between nD-SQL and a whole class of related logics is given in [GL98].
Reference: [SRC97] <author> Kenneth A. Ross and Divesh Srivastava and Dami-anos Chatziantoniou. </author> <title> Complex Aggregation at Multiple Granularities. </title> <booktitle> In Proc. International Conference on Extending Database Technology (EDBT), </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Of these, [Ros92] has limited restructuring capabilities, while [GLS96] has been shown to be complete for all generic restructuring transformations. However, both languages do not handle aggregation. A comparison between nD-SQL and a whole class of related logics is given in [GL98]. Ross et al. <ref> [SRC97] </ref> generalize CUBE into a multi-feature CUBE, and propose fast algorithms for computing queries involving this operator. Their contributions and those of this paper are complementary. 2.
Reference: [SQL96] <institution> SQL Standards Home Page. </institution> <note> SQL 3 articles and publications, 1996. URL: www.jcc.com/sql articles.html. </note>
Reference: [SSR94] <author> Sciore, E., Siegel, M., and Rosenthal, A. </author> <title> Using Semantic Values to Facilitate Interoperability Among Heterogeneous Information Systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(2) </volume> <pages> 254-290, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Proceedings of the 24th VLDB Conference New York, USA, 1998 including platforms, database schemas, and transaction management systems, to name a few. The importance of developing query languages capable of "cross-querying" the component databases, overcoming the discrepancies among their schema and data semantics has been recognized (see <ref> [CL93, GLRS93, KLK91, Lit89, SSR94, LSS96] </ref> for a few proposals for such languages). It has been realized from these earlier works that even in the context of a federation consisting of relational databases, the conflicts among the component database schemas raise serious challenges for interoperability.
Reference: [ZDN97] <author> Yihong Zhao, Prasad M. Deshpande, and Jeffrey F. Naughton. </author> <title> An Array-Based Algorithm for Simultaneous Multidimensional Aggregates In Proc. </title> <booktitle> ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 159-169, </pages> <address> Tucson, Arizona, </address> <year> 1997. </year>
Reference-contexts: We can test the latter in time linear in the size of a given query [GL98]. 3.2 Enhancing nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. [Gray+96] for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator <ref> [Agar + 96, ZDN97] </ref>. The CUBE operator corresponds to aggregation at exponentially many granularities. It has been recognized [Agar + 96, ZDN97] that in practice, a user may be interested in specific subsets of group-bys. Two such examples are ROLLUP (e.g., ffDate, Tickerg, fDateg, fg) and its converse DRILLDOWN. <p> nD-SQL for OLAP: multiple vi sualizations and subaggregates Since the proposal by Gray et al. [Gray+96] for the powerful CUBE operator, researchers have developed several efficient algorithms for computing this expensive operator <ref> [Agar + 96, ZDN97] </ref>. The CUBE operator corresponds to aggregation at exponentially many granularities. It has been recognized [Agar + 96, ZDN97] that in practice, a user may be interested in specific subsets of group-bys. Two such examples are ROLLUP (e.g., ffDate, Tickerg, fDateg, fg) and its converse DRILLDOWN. <p> The key idea in their processing is recognizing that they involve the computation of a subset of group-bys from the cube lattice. Such computations are referred to as partial cubes <ref> [Agar + 96, ZDN97] </ref>. ROLLUP is a common example of a partial cube. See Example 3.4 for another intersting example of a partial cube. The papers [Agar + 96, ZDN97] discuss how algorithms for computing the CUBE can be adapted for computing partial cubes. <p> Such computations are referred to as partial cubes <ref> [Agar + 96, ZDN97] </ref>. ROLLUP is a common example of a partial cube. See Example 3.4 for another intersting example of a partial cube. The papers [Agar + 96, ZDN97] discuss how algorithms for computing the CUBE can be adapted for computing partial cubes. Optimization of partial cubes is a topic of its own interest and is orthogonal to this paper.
References-found: 29

