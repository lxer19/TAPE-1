URL: http://www.neci.nj.nec.com:80/tr/neci-tr-96-1.ps
Refering-URL: http://www.neci.nj.nec.com:80/tr/
Root-URL: 
Email: avg@research.nj.nec.com  karzanov@cs.vniisi.msk.su  
Title: Maximum Skew-Symmetric Flows  
Author: Andrew V. Goldberg Alexander V. Karzanov 
Note: Part of this work was done while the author was  supported in part by NSF Grant CCR-9307045.  
Date: September 1995  
Address: 4 Independence Way Princeton, NJ 08540  9, Prospect 60 Let Oktyabrya 117312 Moscow, Russia  
Affiliation: NEC Research Institute  Institute for Systems Analysis  at Computer Science Department, Stanford University, and  
Abstract: We introduce the maximum skew-symmetric flow problem which generalizes flow and matching problems. We develop a theory of skew-symmetric flows that is parallel to the classical flow theory. We use the newly developed theory to extend, in a natural way, the blocking flow method of Dinitz to the skew-symmetric flow case. In the special case of the skew-symmetric flow problem that corresponds to cardinality matching, our algorithm is simpler and more efficient than the corresponding matching algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. M. Adel'son-Vel'ski, E. A. Dinits, and A. V. Karzanov. </author> <title> Flow Algorithms. </title> <publisher> Nauka, </publisher> <address> Moscow, </address> <year> 1975. </year> <note> In Russian. </note>
Reference-contexts: 1 Introduction Flow and matching problems are classical problems in combinatorial optimization <ref> [1, 8, 13, 26] </ref> and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. [1, 25]). <p> 1 Introduction Flow and matching problems are classical problems in combinatorial optimization [1, 8, 13, 26] and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. <ref> [1, 25] </ref>). In general, however, the combinatorial structure of matchings is more complicated than the combinatorial structure of flows. Although matching algorithms are similar to and often motivated by flow algorithms, the former are much more complicated. <p> The capacitated b-matching problem can be reduced to the skew-symmetric flow problem in a natural way as described below (in fact, such a reduction is well-known for special cases; see e.g. <ref> [1, 3, 25] </ref>).
Reference: [2] <author> R. K. Ahuja, J. B. Orlin, and R. E. Tarjan. </author> <title> Improved Time Bounds for the Maximum Flow Problem. </title> <journal> SIAM J. Comput., </journal> <volume> 18 </volume> <pages> 939-954, </pages> <year> 1989. </year>
Reference-contexts: This yields an O (M (n; m) + nm) time bound, where M (n; m) is the time to find an integral maximum flow in a network with with n nodes, m arcs, and integral capacities. Note that, with one exception, all fastest currently known maximum flow algorithms <ref> [2, 5, 20, 24] </ref> find integral solutions and run in (nm) time. The only exception is the algorithm of Cheriyan et. al. [5] that runs in O (n 3 = log n) time (taking advantage of bit operations in the uniform-cost RAM model of computation).
Reference: [3] <author> N. Blum. </author> <title> A New Approach to Maximum Matching in General Graphs. </title> <booktitle> In Proc. ICALP, </booktitle> <pages> pages 586-597, </pages> <year> 1990. </year>
Reference-contexts: Given a symmetric function of arc lengths, the shortest r-paths problem to find the shortest r-path from s to s 0 or a proof that there is none. The r-reachability problem can be solved in O (m) time <ref> [3, 18] </ref>. For nonnegative lengths, the shortest r-path problem can be solved in O (m log n) time; for unit lengths, in O (m) time [18]. <p> The capacitated b-matching problem can be reduced to the skew-symmetric flow problem in a natural way as described below (in fact, such a reduction is well-known for special cases; see e.g. <ref> [1, 3, 25] </ref>). <p> It is easy to see that a maximum b-matching in this network gives a maximum skew-symmetric flow in the original network. 8 Concluding Remarks The cardinality matching algorithm of Blum <ref> [3, 4] </ref> is very similar to the special case of our RBFM algorithm on networks with unit node capacities. However, the algorithm does not explicitly maintain buds, and the paper [3, 4] does not address the maximum IS-flow problem. <p> this network gives a maximum skew-symmetric flow in the original network. 8 Concluding Remarks The cardinality matching algorithm of Blum <ref> [3, 4] </ref> is very similar to the special case of our RBFM algorithm on networks with unit node capacities. However, the algorithm does not explicitly maintain buds, and the paper [3, 4] does not address the maximum IS-flow problem. We conjecture that the dynamic tree data structure [6] can be used to find an r-blocking IS-flow in O (m log (n 2 =m)) time, matching the blocking flow bound of [21].
Reference: [4] <author> N. Blum. </author> <title> A New Approach to Maximum Matching in General Graphs. </title> <type> Technical report, </type> <institution> Institut fur Informatik der Universitat Bonn, </institution> <year> 1990. </year>
Reference-contexts: It is easy to see that a maximum b-matching in this network gives a maximum skew-symmetric flow in the original network. 8 Concluding Remarks The cardinality matching algorithm of Blum <ref> [3, 4] </ref> is very similar to the special case of our RBFM algorithm on networks with unit node capacities. However, the algorithm does not explicitly maintain buds, and the paper [3, 4] does not address the maximum IS-flow problem. <p> this network gives a maximum skew-symmetric flow in the original network. 8 Concluding Remarks The cardinality matching algorithm of Blum <ref> [3, 4] </ref> is very similar to the special case of our RBFM algorithm on networks with unit node capacities. However, the algorithm does not explicitly maintain buds, and the paper [3, 4] does not address the maximum IS-flow problem. We conjecture that the dynamic tree data structure [6] can be used to find an r-blocking IS-flow in O (m log (n 2 =m)) time, matching the blocking flow bound of [21].
Reference: [5] <author> J. Cheriyan, T. Hagerup, and K. Mehlhorn. </author> <title> Can a Maximum Flow be Computed in o(nm) Time? In Proc. </title> <booktitle> ICALP, </booktitle> <year> 1990. </year>
Reference-contexts: This yields an O (M (n; m) + nm) time bound, where M (n; m) is the time to find an integral maximum flow in a network with with n nodes, m arcs, and integral capacities. Note that, with one exception, all fastest currently known maximum flow algorithms <ref> [2, 5, 20, 24] </ref> find integral solutions and run in (nm) time. The only exception is the algorithm of Cheriyan et. al. [5] that runs in O (n 3 = log n) time (taking advantage of bit operations in the uniform-cost RAM model of computation). <p> Note that, with one exception, all fastest currently known maximum flow algorithms [2, 5, 20, 24] find integral solutions and run in (nm) time. The only exception is the algorithm of Cheriyan et. al. <ref> [5] </ref> that runs in O (n 3 = log n) time (taking advantage of bit operations in the uniform-cost RAM model of computation). Thus except for dense graphs, our bound for the maximum IS-flow problem matches the best bounds for the maximum flow problem. This paper is organized as follows.
Reference: [6] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 32 </volume> <pages> 652-686, </pages> <year> 1985. </year>
Reference-contexts: However, the algorithm does not explicitly maintain buds, and the paper [3, 4] does not address the maximum IS-flow problem. We conjecture that the dynamic tree data structure <ref> [6] </ref> can be used to find an r-blocking IS-flow in O (m log (n 2 =m)) time, matching the blocking flow bound of [21]. However, the results of Section 5.4 allow us to get the corresponding bound for MSFP using the dynamic tree data structure indirectly (in a maximum flow algorithm).
Reference: [7] <author> E. A. Dinic. </author> <title> Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11 </volume> <pages> 1277-1280, </pages> <year> 1970. </year>
Reference-contexts: The augmenting path theorem is the basis for the augmenting path algorithm of Ford and 1 Fulkerson [13] and the shortest augmenting path algorithm of Edmonds and Karp [10]. A more efficient version of the latter algorithm is the blocking flow algorithm of Dinitz <ref> [7] </ref>. These algorithmic results can be extended to IS-flows using the combinatorial and linear programming results of Sections 3 and 4. In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm. The resulting algorithm has the same running time bound as Dinitz' algorithm on general networks [7] as <p> Dinitz <ref> [7] </ref>. These algorithmic results can be extended to IS-flows using the combinatorial and linear programming results of Sections 3 and 4. In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm. The resulting algorithm has the same running time bound as Dinitz' algorithm on general networks [7] as well as on networks with unit arc or node capacities [11, 22, 23]. Modifications of our algorithm achieve better time bounds. Let n and m denote the number of nodes and arcs in the input network, respectively. <p> In this section we describe our r-blocking flow algorithm for the MSFP (called RBFM). The algorithm is a generalization of the blocking flow algorithm of Dinitz <ref> [7] </ref>, and the complexity of these algorithms is the same. At the end of the section we show how the time bound for the MSFP problem can be improved further. The RBFM algorithm maintains an IS-flow f . Initially f is the zero flow. <p> The algorithm is based on Dinitz' blocking flow algorithm <ref> [7] </ref> and the r-reachability algorithm [18]. Let g denote the flow being constructed in H. Initially g is the zero flow. A simple O (m 2 ) RBF algorithm works by successive augmentations.
Reference: [8] <author> J. Edmonds. </author> <title> Paths, Trees and Flowers. </title> <journal> Canada J. Math., </journal> <volume> 17 </volume> <pages> 449-467, </pages> <year> 1965. </year>
Reference-contexts: 1 Introduction Flow and matching problems are classical problems in combinatorial optimization <ref> [1, 8, 13, 26] </ref> and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. [1, 25]).
Reference: [9] <author> J. Edmonds and E. L. Johnson. </author> <title> Matching, a Well-Solved Class of Integer Linear Programs. </title> <editor> In R. Guy, H. Haneni, and J. Schonhein, editors, </editor> <booktitle> Combinatorial Structures and Their Applications, </booktitle> <pages> pages 89-92. </pages> <publisher> Gordon and Breach, </publisher> <address> NY, </address> <year> 1970. </year>
Reference-contexts: The maximum matching problem is to find a matching M whose cardinality jM j is as large as possible. A more general problem is the capacitated b-matching problem <ref> [9, 26] </ref>. The input to this problem includes a supply function b : V 0 ! Z + and a capacity function u 0 : E 0 ! Z + .
Reference: [10] <author> J. Edmonds and R. M. Karp. </author> <title> Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 19 </volume> <pages> 248-264, </pages> <year> 1972. </year> <month> 19 </month>
Reference-contexts: We study linear programming formulation of the maximum IS-flow problem and the complementary slackness conditions for it in Section 4. The augmenting path theorem is the basis for the augmenting path algorithm of Ford and 1 Fulkerson [13] and the shortest augmenting path algorithm of Edmonds and Karp <ref> [10] </ref>. A more efficient version of the latter algorithm is the blocking flow algorithm of Dinitz [7]. These algorithmic results can be extended to IS-flows using the combinatorial and linear programming results of Sections 3 and 4. In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm.
Reference: [11] <author> S. Even and R. E. Tarjan. </author> <title> Network Flow and Testing Graph Connectivity. </title> <journal> SIAM J. Comput., </journal> <volume> 4:507--518, </volume> <year> 1975. </year>
Reference-contexts: In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm. The resulting algorithm has the same running time bound as Dinitz' algorithm on general networks [7] as well as on networks with unit arc or node capacities <ref> [11, 22, 23] </ref>. Modifications of our algorithm achieve better time bounds. Let n and m denote the number of nodes and arcs in the input network, respectively. <p> Theorem 5.6 The MSFP problem can be solved in O (M (n; m) + nm) time. 6 Special Networks The O (n 2 m) time bound for Dinitz' maximum flow algorithm can be improved for several important classes of networks <ref> [11, 12, 23, 22] </ref>. In this section we use similar techniques to obtain the same improvements for the RBFM algorithm. Lemma 6.1 On networks with unit arc capacities, the RBFM algorithm runs in O (m 1:5 ) time. Proof.
Reference: [12] <author> T. Feder and R. Motwani. </author> <title> Clique Partitions, Graph Compression and Speeding-up Algorithms. </title> <booktitle> In Proc. 23st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 123-133, </pages> <year> 1991. </year>
Reference-contexts: Modifications of our algorithm achieve better time bounds. Let n and m denote the number of nodes and arcs in the input network, respectively. For the special case arising from the cardinality matching problem, we use the graph compression techniques of Feder and Motwani <ref> [12] </ref> to get an O nm log n time bound. 1 This improves the previous bound of O ( p nm) for cardinality matching [17, 27, 28]. <p> Then j &gt; i + 1 (as j = i would imply (a i ) = a i and j = i + 1 would imply (x i ) = x j1 = x i ). Now 1 This bound was conjectured in <ref> [12] </ref>. 2 (a i+1 ) = a j1 contradicts the minimality of j i. Note also that if v 0 = (v) and (v; v 0 ) 2 E, then there are even number of copies of (v; v 0 ) which are partitioned into pairs of mates. <p> Theorem 5.6 The MSFP problem can be solved in O (M (n; m) + nm) time. 6 Special Networks The O (n 2 m) time bound for Dinitz' maximum flow algorithm can be improved for several important classes of networks <ref> [11, 12, 23, 22] </ref>. In this section we use similar techniques to obtain the same improvements for the RBFM algorithm. Lemma 6.1 On networks with unit arc capacities, the RBFM algorithm runs in O (m 1:5 ) time. Proof. <p> Next we show how to use the graph compression techniques of Feder and Motwani <ref> [12] </ref> to improve the bound of Lemma 6.2 to O p for bipartite networks with unit capacities and no arcs between symmetric nodes. <p> Note that there is a one-to-one correspondence between IS-flows in the original and the transformed networks. If the input graph is dense enough, this transformation can be used to reduce the number of arcs. It is shown in <ref> [12] </ref> that a bipartite graph with n nodes and m arcs can be transformed into a graph with m fl = O (m log (n 2 =m)= log n) arcs in o ( p nm log (n 2 =m)= log n) time by compressing large enough cliques as described above. <p> The compression algorithm can be easily modified so that when a clique is found and compressed, the symmetric clique is compressed as well. Let Z be the set of nodes added while compressing cliques. The results of <ref> [12] </ref> imply that jZj = o (m= n). Thus we can have an asymptotic increase in the number of nodes but not in the graph size. An iteration of the RBFM algorithm on the compressed graph takes O (m log (n 2 =m)= log n) 16 time. <p> Since G 0 has no self-loops, G has no arcs between symmetric nodes. Thus, Lemma 6.2 implies the following result which proves the conjecture of Feder and Motwani <ref> [12] </ref> and improves the O ( p nm) bound on the cardinality matching problem. Theorem 7.1 The cardinality matching problem can be solved in O ( p nm log (n 2 =m)= log n) time.
Reference: [13] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: 1 Introduction Flow and matching problems are classical problems in combinatorial optimization <ref> [1, 8, 13, 26] </ref> and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. [1, 25]). <p> The theory of IS-flows, developed in the current paper, is parallel to that for usual maximum flows <ref> [13] </ref>. The maximum IS-flow problem generalizes both the maximum flow and maximum matching problems. This appears to be a right generalization since combinatorial and linear programming theorems and algorithms for flows extend in a natural way to IS-flows. The implied results for matching are often simpler and better motivated. <p> We study linear programming formulation of the maximum IS-flow problem and the complementary slackness conditions for it in Section 4. The augmenting path theorem is the basis for the augmenting path algorithm of Ford and 1 Fulkerson <ref> [13] </ref> and the shortest augmenting path algorithm of Edmonds and Karp [10]. A more efficient version of the latter algorithm is the blocking flow algorithm of Dinitz [7]. These algorithmic results can be extended to IS-flows using the combinatorial and linear programming results of Sections 3 and 4. <p> refer to an s-barrier as barrier. 5 Theorem 2.2 [18] There is an r-path from s to s 0 if and only if there is no barrier. 3 Skew-Symmetric Flow Theory In this section we extend the classic flow decomposition, augmenting path, and max-flow min-cut theorems of Ford and Fulkerson <ref> [13] </ref> to the skew-symmetric case. First we need a few definitions. Let u be an integral symmetric capacity function, and f be an IS-flow in G. <p> This linear program and its dual (discussed below) are analogous to, but somewhat more complicated than, those for the usual maximum flow problem and its dual in <ref> [13] </ref>.
Reference: [14] <author> H. N. Gabow. </author> <title> A scaling algorithm for weighted matching on general graphs. </title> <booktitle> In Proc. 26th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 90-100, </pages> <year> 1985. </year>
Reference-contexts: Similarly, 14 computing the augmentation amount ffi and updating g takes time proportional to the number of arcs in the augmenting path and can be charged to A. Next we account for trimming and expanding of buds. Using techniques and data structures from <ref> [14, 15, 16, 17, 18] </ref>, the trimming and expanding can be done in time linear in the number of nodes in the bud. Because the buds form a nested family, the total time for manipulating the buds is O (m).
Reference: [15] <author> H. N. Gabow and R. E. Tarjan. </author> <title> A Linear-Time Algorithm for a Special Case of Disjoint Set Union. </title> <journal> J. Comp. and Syst. Sci., </journal> <volume> 30 </volume> <pages> 209-221, </pages> <year> 1985. </year>
Reference-contexts: Similarly, 14 computing the augmentation amount ffi and updating g takes time proportional to the number of arcs in the augmenting path and can be charged to A. Next we account for trimming and expanding of buds. Using techniques and data structures from <ref> [14, 15, 16, 17, 18] </ref>, the trimming and expanding can be done in time linear in the number of nodes in the bud. Because the buds form a nested family, the total time for manipulating the buds is O (m).
Reference: [16] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Algorithms for Two Bottleneck Optimization Problems. </title> <journal> J. Algorithms, </journal> <volume> 9 </volume> <pages> 411-417, </pages> <year> 1988. </year>
Reference-contexts: Similarly, 14 computing the augmentation amount ffi and updating g takes time proportional to the number of arcs in the augmenting path and can be charged to A. Next we account for trimming and expanding of buds. Using techniques and data structures from <ref> [14, 15, 16, 17, 18] </ref>, the trimming and expanding can be done in time linear in the number of nodes in the bud. Because the buds form a nested family, the total time for manipulating the buds is O (m).
Reference: [17] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for general graph-matching problems. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 38 </volume> <pages> 815-853, </pages> <year> 1991. </year>
Reference-contexts: For the special case arising from the cardinality matching problem, we use the graph compression techniques of Feder and Motwani [12] to get an O nm log n time bound. 1 This improves the previous bound of O ( p nm) for cardinality matching <ref> [17, 27, 28] </ref>. For the general problem, we can use any integral maximum flow algorithm to find a good initial solution for our skew-symmetric blocking flow algorithm. <p> Similarly, 14 computing the augmentation amount ffi and updating g takes time proportional to the number of arcs in the augmenting path and can be charged to A. Next we account for trimming and expanding of buds. Using techniques and data structures from <ref> [14, 15, 16, 17, 18] </ref>, the trimming and expanding can be done in time linear in the number of nodes in the bud. Because the buds form a nested family, the total time for manipulating the buds is O (m).
Reference: [18] <author> A. V. Goldberg and A. V. Karzanov. </author> <title> Path Problems in Skew-Symmetric Graphs. </title> <type> Technical Report STAN-CS-93-1489, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Although matching algorithms are similar to and often motivated by flow algorithms, the former are much more complicated. This paper continues a systematical study of skew-symmetric graphs and their applications started in our previous paper <ref> [18, 19] </ref>. That paper, devoted to problems on regular paths, extends to the skew-symmetric graphs the usual path reachability and shortest path problems, as well as certain problems on alternating paths in matching theory. The present paper deals with the maximum integral skew-symmetric flow (maximum IS-flow) problem. <p> As the flow and matching problems are closely related to path problems, the maximum IS-flow problem is closely related to regular path problems in skew-symmetric graphs. For example, duals of the shortest regular path and maximum IS-flow problems are similar, and the shortest regular path algorithm developed in <ref> [18] </ref> is used as a subroutine in the algorithms developed in the present paper. The theory of IS-flows, developed in the current paper, is parallel to that for usual maximum flows [13]. The maximum IS-flow problem generalizes both the maximum flow and maximum matching problems. <p> Given a symmetric function of arc lengths, the shortest r-paths problem to find the shortest r-path from s to s 0 or a proof that there is none. The r-reachability problem can be solved in O (m) time <ref> [3, 18] </ref>. For nonnegative lengths, the shortest r-path problem can be solved in O (m log n) time; for unit lengths, in O (m) time [18]. <p> The r-reachability problem can be solved in O (m) time [3, 18]. For nonnegative lengths, the shortest r-path problem can be solved in O (m log n) time; for unit lengths, in O (m) time <ref> [18] </ref>. Given a simple path P and nodes v and w on P , we denote the portion of P between v and w by P [v; w]. We denote the number of arcs on P by jP j. <p> We denote the number of arcs on P by jP j. A concatenation of paths P and Q is denoted by P Q. 2.1 Buds and Trimming Operation Buds, introduced in the context of skew-symmetric paths <ref> [18] </ref>, play an important role in our algorithms. <p> Each arc (x; y) 2 E fe t g that enters V t is replaced by an arc from x to w 0 . See Figure 1 for an example of bud trimming. Clearly G has a natural skew-symmetry. A useful property of buds is as follows. Lemma 2.1 <ref> [18] </ref> There is an r-path from s to s 0 in G if and only if there is an r-path from s to s 0 in G. 2.2 Barriers Barriers are dual to r-paths in a sense that either there is an r-path from s to (s) or there is an <p> Unless mentioned otherwise, in this paper s and s 0 = (s) are the source and the sink, respectively, and we refer to an s-barrier as barrier. 5 Theorem 2.2 <ref> [18] </ref> There is an r-path from s to s 0 if and only if there is no barrier. 3 Skew-Symmetric Flow Theory In this section we extend the classic flow decomposition, augmenting path, and max-flow min-cut theorems of Ford and Fulkerson [13] to the skew-symmetric case. <p> Lemma 5.1 The RBFM algorithm terminates in O (n) iterations. An algorithm for finding an r-blocking IS-flow in a symmetric acyclic network is described in Section 5.3. This algorithm is based on Dinitz' algorithm and the r-reachability algorithm <ref> [18] </ref>. 11 5.1 Buds in Split-Graph Our implementation of steps 1 and 2 of the RBFM algorithm use the r-reachability and the shortest r-path algorithms of [18] on split-graphs. <p> This algorithm is based on Dinitz' algorithm and the r-reachability algorithm <ref> [18] </ref>. 11 5.1 Buds in Split-Graph Our implementation of steps 1 and 2 of the RBFM algorithm use the r-reachability and the shortest r-path algorithms of [18] on split-graphs. We take advantage of the structure of these graphs to maintain the unit base invariant: the residual capacity of base arcs of all buds trimmed by these algorithms is one. <p> We discuss such a modification of the r-reachability algorithm in Section 5.3; the modification of the shortest r-path algorithm is similar. 5.2 The Auxiliary Network To build the auxiliary network H f = (V; E (H f )), we use the shortest r-paths algorithm from <ref> [18] </ref> on G [u f ] with the unit length function `. Because of the unit input lengths, the implementation of the algorithm that uses buckets runs in linear time. <p> Since the buds trimmed by the shortest r-path algorithm are nested, each bud contains an r-path from its base w to (w), and the unit base invariant is maintained, the corresponding IS-flow g in G f can be found in linear time using techniques similar to those used in <ref> [18] </ref> for extending the shortest path in the trimmed graph to the shortest path in the original graph. <p> The algorithm is based on Dinitz' blocking flow algorithm [7] and the r-reachability algorithm <ref> [18] </ref>. Let g denote the flow being constructed in H. Initially g is the zero flow. A simple O (m 2 ) RBF algorithm works by successive augmentations. <p> Since the path P can be found in O (m) time, the algorithm runs in O (m 2 ) time. Next we describe an RBF algorithm that runs in O (nm) time. We start with a review of the r-reachability algorithm <ref> [18] </ref>. The algorithm maintains a set A of nodes reachable from s by r-paths, with the r-paths represented by a spanning tree T E of A rooted at s. The algorithm also maintains A 0 = (A) and T 0 = (T ). <p> Similarly, 14 computing the augmentation amount ffi and updating g takes time proportional to the number of arcs in the augmenting path and can be charged to A. Next we account for trimming and expanding of buds. Using techniques and data structures from <ref> [14, 15, 16, 17, 18] </ref>, the trimming and expanding can be done in time linear in the number of nodes in the bud. Because the buds form a nested family, the total time for manipulating the buds is O (m). <p> Finally, extracting the blocking flow of H from the blocking flow in the trimmed graph at the end of the algorithm can be done in O (m + A) time using techniques similar to those for expanding r-paths used in <ref> [18] </ref>. Lemmas 5.1 and 5.4 yield the following theorem.
Reference: [19] <author> A. V. Goldberg and A. V. Karzanov. </author> <title> Path Problems in Skew-Symmetric Graphs. </title> <booktitle> In Proc. 5th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 526-535, </pages> <year> 1994. </year>
Reference-contexts: Although matching algorithms are similar to and often motivated by flow algorithms, the former are much more complicated. This paper continues a systematical study of skew-symmetric graphs and their applications started in our previous paper <ref> [18, 19] </ref>. That paper, devoted to problems on regular paths, extends to the skew-symmetric graphs the usual path reachability and shortest path problems, as well as certain problems on alternating paths in matching theory. The present paper deals with the maximum integral skew-symmetric flow (maximum IS-flow) problem.
Reference: [20] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> A New Approach to the Maximum Flow Problem. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: This yields an O (M (n; m) + nm) time bound, where M (n; m) is the time to find an integral maximum flow in a network with with n nodes, m arcs, and integral capacities. Note that, with one exception, all fastest currently known maximum flow algorithms <ref> [2, 5, 20, 24] </ref> find integral solutions and run in (nm) time. The only exception is the algorithm of Cheriyan et. al. [5] that runs in O (n 3 = log n) time (taking advantage of bit operations in the uniform-cost RAM model of computation).
Reference: [21] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Finding Minimum-Cost Circulations by Successive Approximation. </title> <journal> Math. of Oper. Res., </journal> <volume> 15 </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: We conjecture that the dynamic tree data structure [6] can be used to find an r-blocking IS-flow in O (m log (n 2 =m)) time, matching the blocking flow bound of <ref> [21] </ref>. However, the results of Section 5.4 allow us to get the corresponding bound for MSFP using the dynamic tree data structure indirectly (in a maximum flow algorithm).
Reference: [22] <editor> A. V. Karzanov. O nakhozhdenii maksimal'nogo potoka v setyakh spetsial'nogo vida i nekotorykh prilozheniyakh. In Matematicheskie Voprosy Upravleniya Proizvodstvom, </editor> <volume> volume 5. </volume> <publisher> Moscow State University Press, </publisher> <address> Moscow, </address> <year> 1973. </year> <title> In Russian; title translation: On Finding Maximum Flows in Network with Special Structure and Some Applications. </title>
Reference-contexts: In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm. The resulting algorithm has the same running time bound as Dinitz' algorithm on general networks [7] as well as on networks with unit arc or node capacities <ref> [11, 22, 23] </ref>. Modifications of our algorithm achieve better time bounds. Let n and m denote the number of nodes and arcs in the input network, respectively. <p> Theorem 5.6 The MSFP problem can be solved in O (M (n; m) + nm) time. 6 Special Networks The O (n 2 m) time bound for Dinitz' maximum flow algorithm can be improved for several important classes of networks <ref> [11, 12, 23, 22] </ref>. In this section we use similar techniques to obtain the same improvements for the RBFM algorithm. Lemma 6.1 On networks with unit arc capacities, the RBFM algorithm runs in O (m 1:5 ) time. Proof.
Reference: [23] <editor> A. V. Karzanov. Tochnaya otzenka algoritma nakhojdeniya maksimalnogo potoka, primenennogo k zadache "o predstavitelyakh". </editor> <booktitle> In Problems in Cibernetics, </booktitle> <volume> volume 5, </volume> <pages> pages 66-70. </pages> <publisher> Nauka, </publisher> <address> Moscow, </address> <year> 1973. </year> <title> In Russian; title translation: The exact time bound for a maximum flow algorithm applied to the set representatives problem. </title>
Reference-contexts: In Section 5 we introduce a skew-symmetric version of the blocking flow algorithm. The resulting algorithm has the same running time bound as Dinitz' algorithm on general networks [7] as well as on networks with unit arc or node capacities <ref> [11, 22, 23] </ref>. Modifications of our algorithm achieve better time bounds. Let n and m denote the number of nodes and arcs in the input network, respectively. <p> Theorem 5.6 The MSFP problem can be solved in O (M (n; m) + nm) time. 6 Special Networks The O (n 2 m) time bound for Dinitz' maximum flow algorithm can be improved for several important classes of networks <ref> [11, 12, 23, 22] </ref>. In this section we use similar techniques to obtain the same improvements for the RBFM algorithm. Lemma 6.1 On networks with unit arc capacities, the RBFM algorithm runs in O (m 1:5 ) time. Proof.
Reference: [24] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A Faster Deterministic Maximum Flow Algorithm. </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 447-474, </pages> <year> 1994. </year>
Reference-contexts: This yields an O (M (n; m) + nm) time bound, where M (n; m) is the time to find an integral maximum flow in a network with with n nodes, m arcs, and integral capacities. Note that, with one exception, all fastest currently known maximum flow algorithms <ref> [2, 5, 20, 24] </ref> find integral solutions and run in (nm) time. The only exception is the algorithm of Cheriyan et. al. [5] that runs in O (n 3 = log n) time (taking advantage of bit operations in the uniform-cost RAM model of computation).
Reference: [25] <author> E. L. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Reinhart, and Winston, </publisher> <address> New York, NY., </address> <year> 1976. </year>
Reference-contexts: 1 Introduction Flow and matching problems are classical problems in combinatorial optimization [1, 8, 13, 26] and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. <ref> [1, 25] </ref>). In general, however, the combinatorial structure of matchings is more complicated than the combinatorial structure of flows. Although matching algorithms are similar to and often motivated by flow algorithms, the former are much more complicated. <p> The capacitated b-matching problem can be reduced to the skew-symmetric flow problem in a natural way as described below (in fact, such a reduction is well-known for special cases; see e.g. <ref> [1, 3, 25] </ref>).
Reference: [26] <author> L. Lovasz and M. D. Plummer. </author> <title> Matching Theory. </title> <publisher> Akademiai Kiado, </publisher> <address> Budapest, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction Flow and matching problems are classical problems in combinatorial optimization <ref> [1, 8, 13, 26] </ref> and have many practical applications. These problems are closely related; in particular, the bipartite matching problem can be viewed as a special case of the maximum flow problem (see e.g. [1, 25]). <p> The maximum matching problem is to find a matching M whose cardinality jM j is as large as possible. A more general problem is the capacitated b-matching problem <ref> [9, 26] </ref>. The input to this problem includes a supply function b : V 0 ! Z + and a capacity function u 0 : E 0 ! Z + .
Reference: [27] <author> S. Micali and V. V. Vazirani. </author> <title> An O( p jV jjEj) algorithm for finding maximum matching in general graphs. </title> <booktitle> In Proc. 21th IEEE Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 17-27, </pages> <year> 1980. </year>
Reference-contexts: For the special case arising from the cardinality matching problem, we use the graph compression techniques of Feder and Motwani [12] to get an O nm log n time bound. 1 This improves the previous bound of O ( p nm) for cardinality matching <ref> [17, 27, 28] </ref>. For the general problem, we can use any integral maximum flow algorithm to find a good initial solution for our skew-symmetric blocking flow algorithm.
Reference: [28] <author> V. V. Vazirani. </author> <title> A Theory of Alternating Paths and Blossoms for Proving Correctness of the O( p General Graph Maximum Matching Algorithm. </title> <journal> Combinatorica, </journal> <note> to appear. 20 </note>
Reference-contexts: For the special case arising from the cardinality matching problem, we use the graph compression techniques of Feder and Motwani [12] to get an O nm log n time bound. 1 This improves the previous bound of O ( p nm) for cardinality matching <ref> [17, 27, 28] </ref>. For the general problem, we can use any integral maximum flow algorithm to find a good initial solution for our skew-symmetric blocking flow algorithm.
References-found: 28

