URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-640.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: MIT/LCS/TR-640 AN INTERACTIVE PROGRAMMING SYSTEM FOR MEDIA COMPUTATION  
Author: David J. Wetherall 
Affiliation: MIT Laboratory for Computer Science.  
Note: This document has been made available free of charge via ftp from the  
Date: September 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. F. Adam, H. H. Houh, M. Ismert, and D. L. Tennenhouse. </author> <title> A Network Architecture for Distributed Multimedia System. </title> <booktitle> In Proceedings of the International Conference on Multimedia Systems and Computing, </booktitle> <pages> pages 76-86, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: The system contains an embedded Tcl interpreter, which provides great flexibility in re-configuring and extending the runtime environment. Tcl scripts are used to combine modules into applications, as well as describe standardized user interface panels for configuring each module. 14 The other component of the ViewStation is the VuNet <ref> [1] </ref>. It is an ATM-based gigabit per second local area network, shown in Figure 1.3. By complementing the VuSystem, it provides a computationally rich environment in which distributed video applications may be studied.
Reference: [2] <author> Joel. F. Adam and David. L. Tennenhouse. </author> <title> The vidboard: A video capture and processing peripheral for a distributed multimedia system. </title> <booktitle> In Proceedings of ACM Multimedia 93, </booktitle> <pages> pages 113-120, </pages> <address> Anaheim, CA, </address> <month> August </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: It is an ATM-based gigabit per second local area network, shown in Figure 1.3. By complementing the VuSystem, it provides a computationally rich environment in which distributed video applications may be studied. A variety of configurations are possible, linking workstations and custom video capture peripherals <ref> [2] </ref>. 1.3 User Programming Systems The VuSystem provides specialized media manipulation abilities to application developers. In contrast, end user programming systems such as PAVES provide specialized interaction facilities to the end users of applications.
Reference: [3] <author> G. D. Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <note> ftp from wilma.cs.brown.edu (128.148.33.66), June 1993. file /pub/gdbiblio.ps.Z. </note>
Reference-contexts: Automatic layout is applied in this special case. As a matter of convenience, more general layout tools would be useful to assist the user in tidying layouts after they have been manipulated. Despite much research on diagram layout (surveyed in <ref> [3] </ref>) it is difficult to find algorithms that reliably produce good results, are computationally simple, and are stable across user interactions. 50 Abstractions An abstraction in the visual language is a set of interconnected modules that function as a single larger module.
Reference: [4] <author> Eugene C. Ciccarelli. </author> <title> Presentation based user interfaces (revised Ph.D.). </title> <type> Technical Report MIT/AI/TR 794, </type> <institution> Artificial Intelligence Lab., Massachusetts Institute of Technology, </institution> <month> August </month> <year> 1984. </year>
Reference-contexts: This is difficult to accomplish because all PAVES facilities are intended for a range of video programs. They are automatically generated and cannot be specially coded to accommodate the vagaries of a particular video program. PAVES implements a generalized synchronization scheme with a presentation-style approach <ref> [4] </ref>. In tackling both these issues, the interpreted programming environment of the VuSystem is valuable. It provides a language midway between the visual and C/C++ program languages, a reference point that can be related to both languages. <p> Further, a changing and functionally overlapping set of interface displays can be in use, and all views will be maintained correctly. 31 3.3.1 A Presentation-Style Model The synchronization model I chose is a refinement of the presentation model of Ciccarelli <ref> [4] </ref>. In this model, the notion of the state corresponding to the user interface and its objects is collected into views that are separated from the underlying program database. the executing program image they represent.
Reference: [5] <author> Charles L. Compton and David L. Tennenhouse. </author> <title> Collaborative load shedding for media-based applications. </title> <booktitle> In Workshop on the Role of Real-Time in Multimedia/Interactive Computer Systems, </booktitle> <address> Raleigh, NC, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: This makes choices, 45 such as compression format, that allow the user to trade the quantity of computation for the quality of result valuable. A VuSystem experiment with collaborative load shedding is investigating the effectiveness of automatic resource customization <ref> [5] </ref>. Such systems will likely prove useful for improving the default behavior of programs, but they cannot obviate the need for customizations. 4.2.2 Experimentation and Prototyping With the visual programming windows, an existing program can be readily transformed into a new application.
Reference: [6] <institution> Digital Video Applications Corp. DiVA VideoShop: </institution> <note> Users Guide. Digital Video Applications Corp., </note> <month> November </month> <year> 1991. </year>
Reference-contexts: Solaris LIVE! is a set of libraries [17] and an architecture for Sun workstations. It emphasizes media computation more than does Quicktime but supports no interface elements except for media display. 2.1.2 Premiere, VideoShop and Director Video editing systems such as Adobe Premiere, DiVA VideoShop, and MacroMind Director <ref> [12, 6, 16] </ref> provide users with facilities for combining video segments in sophisticated ways.
Reference: [7] <author> Microsoft Corporation. </author> <title> Microsoft Video For Windows Users Guide. </title> <publisher> Microsoft Corporation, </publisher> <year> 1992. </year>
Reference-contexts: Other platforms have developer toolkits, but again they provide no direct programming features for the application user. Microsoft's Video For Windows <ref> [7] </ref> is the equivalent of Quicktime for the Windows environment, and includes a set of tools for editing video sequences. Solaris LIVE! is a set of libraries [17] and an architecture for Sun workstations.
Reference: [8] <author> Isabel. F. Cruz. DOODLE: </author> <title> A Visual Language for Object-Oriented Databases. </title> <booktitle> In Proceedings of SIGMOD. ACM, </booktitle> <year> 1992. </year>
Reference-contexts: To alleviate this difficulty, many systems combine graphics with text or target a restricted application domain or set of users. Some recent visual languages, for example, have targeted VHDL hardware descriptions [28] and the specification of database queries <ref> [8] </ref>. These problems have a natural hierarchical decomposition that can be shown visually. Other successful visual languages have based their representation on the flow of data between computational processes.
Reference: [9] <author> Michael Eisenberg. </author> <title> Programmable applications: Interpreter meets interface. </title> <type> Technical Report AI Memo 1325, </type> <institution> MIT, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: But they can prove cryptic to the beginner. There is no easy way to combine the strengths of both methods. 27 Applications such as SchemePaint <ref> [9] </ref>, on the other hand, demonstrate the use of cooperative programming methods. SchemePaint is a graphics application that augments a direct manipulation paint system, similar in spirit to MacPaint, with an interpreter for graphics-enriched Scheme.
Reference: [10] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 101 </month>
Reference-contexts: And with a C interface they are especially useful for data that is not readily converted to and from strings. The result is a compact, dynamic, and introspective language, more in the spirit of CLOS [20] (the object system that extends common lisp) than static models such as C++ <ref> [10] </ref>. This distinguishes it from [incr Tcl] [25], an alternative Tcl-based object system that aims to supplement Tcl with a structured programming environment.
Reference: [11] <author> M. Gantt and B. Nardi. Gardeners and Gurus: </author> <title> Patterns of cooperation among CAD users. </title> <booktitle> In Proceedings of CHI, </booktitle> <pages> pages 107-117, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: With little or no training, the end user can configure an application to be better suited to the task at hand. Many different user programming systems have been devised, with varying degrees of success; work continues in trying to understand the process of user programming <ref> [23, 11] </ref>. Figure 1.4, reproduced here from Nardi [30], conveys a sense of the diversity of these systems. It roughly characterizes them by their level of programmability and degree of interaction.
Reference: [12] <institution> Adobe Systems Inc. Premiere. Adobe Systems Inc., </institution> <year> 1991. </year>
Reference-contexts: Solaris LIVE! is a set of libraries [17] and an architecture for Sun workstations. It emphasizes media computation more than does Quicktime but supports no interface elements except for media display. 2.1.2 Premiere, VideoShop and Director Video editing systems such as Adobe Premiere, DiVA VideoShop, and MacroMind Director <ref> [12, 6, 16] </ref> provide users with facilities for combining video segments in sophisticated ways.
Reference: [13] <author> Apple Computer Inc. </author> <title> Dylan: an object-oriented dynamic language. </title> <institution> Apple Computer Inc., </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: This distinguishes it from [incr Tcl] [25], an alternative Tcl-based object system that aims to supplement Tcl with a structured programming environment. The Object Tcl approach shares goals with languages such as Dylan <ref> [13] </ref>, which attempt to be practical on small machines while providing many of the language features found in CLOS and other advanced object systems. 6.2 Introducing Objects In Tcl, all commands and values are represented as strings.
Reference: [14] <institution> Apple Computer Inc. HyperCard (version 2.2). Apple Computer Inc., </institution> <year> 1993. </year>
Reference-contexts: Examples include LOGO, HyperTalk, Visual Basic, and Tk. The LOGO language is for drawing pictures, and uses the metaphor of a turtle moving about the screen to help children learn about mathematics and computational processes. HyperCard <ref> [14] </ref> uses the metaphor of a stack of cards containing objects to build hypermedia style documents. Programs are written in a verbose textual language called HyperTalk, with fragments of the overall program attached to interface objects to control how they respond to different events.
Reference: [15] <author> Apple Computer Inc. </author> <title> Inside MacIntosh: Quicktime, Inside MacIntosh: Quicktime Components. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This provides users the flexibility to choose the programming method most suited to the task at hand. 11 1.1 Digital Video and Computers In 1991, Apple Computer Inc. introduced its Quicktime <ref> [15] </ref> software toolkit for manipulating time-based media, such as video. Quicktime-based applications gave many personal computer users a limited capability for recording, replaying, and combining video. Products for the associated technologies of video capture and storage are also commercially available. <p> Though they do not constitute programming 21 in the traditional sense, these systems are worth examining because they explore frameworks that allow users to specify operations on video and other media. 2.1.1 Quicktime and other toolkits Apple Computer's Quicktime <ref> [15] </ref> is a commercial toolkit for manipulating time-based media in the Macintosh environment. It is notable as the most popular system in use today for programming multimedia applications. Many existing applications, such as word processors, have been extended to support video by incorporating its functionality.
Reference: [16] <author> MacroMind Inc. </author> <title> MacroMind Director (Version 3.0): Overview Manual. </title> <publisher> MacroMind Inc., </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Solaris LIVE! is a set of libraries [17] and an architecture for Sun workstations. It emphasizes media computation more than does Quicktime but supports no interface elements except for media display. 2.1.2 Premiere, VideoShop and Director Video editing systems such as Adobe Premiere, DiVA VideoShop, and MacroMind Director <ref> [12, 6, 16] </ref> provide users with facilities for combining video segments in sophisticated ways.
Reference: [17] <author> Sun Microsystems Inc. </author> <title> Solaris XIL 1.1 Imaging Library: Programmers' Guide. </title> <publisher> Sun Microsystems Inc., </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: Other platforms have developer toolkits, but again they provide no direct programming features for the application user. Microsoft's Video For Windows [7] is the equivalent of Quicktime for the Windows environment, and includes a set of tools for editing video sequences. Solaris LIVE! is a set of libraries <ref> [17] </ref> and an architecture for Sun workstations.
Reference: [18] <author> ISO/IEC JTC1/SC29. </author> <title> Coded Representation of Picture, Audio, and Multimedia/Hypermedia Information. Committee Draft of Standard ISO/IEC 11172, </title> <year> 1991. </year>
Reference-contexts: Products for the associated technologies of video capture and storage are also commercially available. Digital video grabbers, such as SunVideo and DEC Sound & Motion, allow video sequences to be captured for later computation. Image compression and decompression codecs, such as those based on the JPEG [19] and MPEG <ref> [18] </ref> standards, facilitate the transfer and storage of video by reducing its sheer size to more manageable proportions. The falling relative costs of processing video make it possible to encode simple algorithms in software and apply them interactively.
Reference: [19] <author> ISO/IEC JTC1/SC2/W10. </author> <title> Digital Compression and Coding of Continuous-Tone Still Images. IEC Draft International Standard 10918-1, </title> <year> 1992. </year>
Reference-contexts: Products for the associated technologies of video capture and storage are also commercially available. Digital video grabbers, such as SunVideo and DEC Sound & Motion, allow video sequences to be captured for later computation. Image compression and decompression codecs, such as those based on the JPEG <ref> [19] </ref> and MPEG [18] standards, facilitate the transfer and storage of video by reducing its sheer size to more manageable proportions. The falling relative costs of processing video make it possible to encode simple algorithms in software and apply them interactively.
Reference: [20] <author> Sonya E. Keene. </author> <title> Object-Oriented Programming in COMMON LISP: A Programmer's Guide to CLOS. </title> <publisher> Addison-Wesley, </publisher> <month> December </month> <year> 1988. </year>
Reference-contexts: They complement and extend the built-in Tcl structures of lists, arrays, procedures, and commands. And with a C interface they are especially useful for data that is not readily converted to and from strings. The result is a compact, dynamic, and introspective language, more in the spirit of CLOS <ref> [20] </ref> (the object system that extends common lisp) than static models such as C++ [10]. This distinguishes it from [incr Tcl] [25], an alternative Tcl-based object system that aims to supplement Tcl with a structured programming environment.
Reference: [21] <author> G. Kiczales, J. des Rivieres, and D. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: A meta-object protocol (MOP) <ref> [21] </ref> would let the language user incrementally modify and extend the Object Tcl definition. It would then occupy a region of the design space, rather than a point, and consequently be more widely applicable.
Reference: [22] <author> C. Lindblad, D. Wetherall, and D. Tennenhouse. </author> <title> The VuSystem: A Programming System for Visual Processing of Digital Video. </title> <booktitle> In Proceedings of ACM Multimedia 94. ACM, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Introduction Many new uses of digital video are becoming viable as it is manipulated by increasingly powerful computers. With the right programming tools, video applications can become more intelligent and responsive through greater amounts of media processing <ref> [36, 22] </ref>. This report investigates the programming language aspects of controlling such video applications. It presents PAVES, a direct manipulation system that allows users to control applications while the applications simultaneously manipulate live video. <p> PAVES is novel in the extent to which it emphasizes liveness of both program and video data, and in its approach to extensibility through the cooperation of graphical and textual programming methods. PAVES extends the VuSystem media processing toolkit <ref> [22] </ref> with several user programming windows that are accessible across a range of video programs. A visual flow graph can be used to observe and control the pattern of media processing implemented by the application. <p> This was not practical with previous generation workstations where even copying video frames was an expensive operation. But the memory bandwidth and processing capacity of modern workstations enable them to perform simple processing well above the full-motion video rate <ref> [22] </ref>. Developments in high-speed networking and video 12 codecs are also encouraging distributed applications where larger computations may be accommodated by splitting them across multiple computers [34]. Using software to apply algorithms to video yields very different applications than those commonly given as examples of multimedia programs. <p> Its software development component, the VuSystem <ref> [22] </ref>, focuses on computer-participative multimedia applications, where the computer not only manipulates media but also digests it and performs independent actions based on media content. This makes it suitable for developing the kind of applications sketched as scenarios in the previous section. <p> The contrast helps to place in perspective the interactive programming system presented in this report. 2.1 Programming in Multimedia Systems Besides the VuSystem <ref> [22] </ref>, there are other multimedia systems that support programming activities. In this section I investigate the programming aspects of multimedia systems that are designed from the ground up to manipulate video, since its timeliness and visual properties drive this research. <p> This provides a record of activity that may be cut and pasted into another X application. 5.3 Structuring Conventions The interactive facilities of the previous sections are dependent on program structuring conventions. These govern how video programs may be expressed. They reuse and extend the original VuSystem model <ref> [22] </ref>, contributing to flow graphs, control panels, and code fragment in two important ways. VuSystem conventions support a model of the video program in terms of objects and their relationships. Manipulations defined in terms of this a model are safe for all conforming video programs.
Reference: [23] <author> Wendy E. Mackay. </author> <title> Triggers and barriers to customizing software. </title> <booktitle> In CHI'91 Conference Proceedings, </booktitle> <pages> pages 153-160. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: With little or no training, the end user can configure an application to be better suited to the task at hand. Many different user programming systems have been devised, with varying degrees of success; work continues in trying to understand the process of user programming <ref> [23, 11] </ref>. Figure 1.4, reproduced here from Nardi [30], conveys a sense of the diversity of these systems. It roughly characterizes them by their level of programmability and degree of interaction.
Reference: [24] <author> James Matthews, Peter Gloor, and Fillia Makedon. Videoscheme: </author> <title> A programmable video editing system for automation and media recognition. </title> <booktitle> In Proceedings of ACM Multimedia 93, </booktitle> <pages> pages 419-426, </pages> <address> Anaheim, CA, </address> <month> August </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: They are not suited to live media, nor do they produce their video result interactively. Instead, they transform a given sequence of video into a new one in an unconstrained amount of time, without provision for producing the new sequence as it is needed for play-out. 2.1.3 VideoScheme VideoScheme <ref> [24] </ref> is a programmable video editing system developed to research the automation of routine video processing tasks. It addresses the programming weaknesses seen in Premiere and similar systems by using the Scheme language to specify operations.
Reference: [25] <author> Michael J. McLennan. </author> <title> [incr Tcl] - Object-Oriented Programming in Tcl. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1994. </year> <note> ftp from harbor.ecn.purdue.edu. </note>
Reference-contexts: The result is a compact, dynamic, and introspective language, more in the spirit of CLOS [20] (the object system that extends common lisp) than static models such as C++ [10]. This distinguishes it from [incr Tcl] <ref> [25] </ref>, an alternative Tcl-based object system that aims to supplement Tcl with a structured programming environment.
Reference: [26] <author> Brad A. Meyers. </author> <booktitle> State of the art in user interface software tools. Advances in Human-Computer Interaction, </booktitle> <volume> 4, </volume> <year> 1992. </year> <month> 102 </month>
Reference-contexts: With my approach, a system for managing user interface widgets would largely parallel that for managing media processing objects. Much other work, going by the general name of user interface management systems (UIMS) and surveyed in <ref> [26, 27] </ref>, addresses these interface configuration issues. Finally, when necessary I have traded appearance for functionality.
Reference: [27] <author> Brad A. Meyers and Mary Beth Rosson. </author> <title> Survey on User Interface Programming. </title> <booktitle> In Proceedings of SIGCHI. ACM, </booktitle> <year> 1992. </year>
Reference-contexts: With my approach, a system for managing user interface widgets would largely parallel that for managing media processing objects. Much other work, going by the general name of user interface management systems (UIMS) and surveyed in <ref> [26, 27] </ref>, addresses these interface configuration issues. Finally, when necessary I have traded appearance for functionality.
Reference: [28] <author> D. L. Miller-Karlow and E. J. Golin. vVHDL: </author> <title> A Visual Hardware Description Language. </title> <booktitle> In Proceedings of Workshop on Visual Languages, </booktitle> <pages> pages 133-139, </pages> <address> Seattle, WA, </address> <month> September </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: To alleviate this difficulty, many systems combine graphics with text or target a restricted application domain or set of users. Some recent visual languages, for example, have targeted VHDL hardware descriptions <ref> [28] </ref> and the specification of database queries [8]. These problems have a natural hierarchical decomposition that can be shown visually. Other successful visual languages have based their representation on the flow of data between computational processes.
Reference: [29] <author> David A. Moon. </author> <title> Object-Oriented Programming with Flavors. </title> <booktitle> In Proceedings of ACM Conference on Object-Oriented Systems, Languages, and Applications (OOPSLA) 1986. ACM, </booktitle> <month> September </month> <year> 1986. </year>
Reference-contexts: Figure 6.4 shows these class relationships. The Safety class can be combined with any type of collection (for example, stack, queue, and set) but is not required. It is known as a mixin in Flavors <ref> [29] </ref>, and demonstrates an intuitive use of inheritance that is difficult to achieve with only single inheritance. The inheritance mechanisms cause a minor complication to demand loading. Methods written in Tcl should be auto-loaded in a similar fashion as procedures. <p> Multiple inheritance proved simple and efficient to implement as well as intuitive to use. Mechanisms for combining methods to not need to be complicated, as demonstrated by the topological sort algorithm. At the same time they may be natural to use, as exemplified by the mixin model of Flavors <ref> [29] </ref>. The lack of automatic method combination in C++ appears to be the major reason why multiple inheritance is perceived to be complicated and of little value there. In C++, the next most shadowed method must be specified explicitly using the scope resolution operator.
Reference: [30] <author> Bonnie A. Nardi. </author> <title> A Small Matter of Programming: Perspectives on End User Computing. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Many different user programming systems have been devised, with varying degrees of success; work continues in trying to understand the process of user programming [23, 11]. Figure 1.4, reproduced here from Nardi <ref> [30] </ref>, conveys a sense of the diversity of these systems. It roughly characterizes them by their level of programmability and degree of interaction. Over a decade of experience with spreadsheets, CAD systems, and statistical packages prove that successful user programming systems can be created.
Reference: [31] <author> Thomas J. Olsen et al. MAVIS: </author> <title> A Visual Environment for Active Computer Vision. </title> <booktitle> In Proceedings of Workshop on Visual Languages, </booktitle> <pages> pages 170-176, </pages> <address> Seattle, WA, </address> <month> September </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: The programming system presented in this report draws on many of its features, while adapting them to support video. 2.2.2 Cantata, VIVA, and MAVIS There are a variety of media flow style visual languages for image processing, including Cantata, VIVA, and MAVIS <ref> [40, 37, 31] </ref>. Cantata provides a graphical front to the KHOROS signal processing system. It lets the user construct a pictorial representation of processing operations, from which a valid KHOROS program is constructed and executed. This has proven a convenient way to prototype applications. VIVA is similar to Cantata.
Reference: [32] <author> John Ousterhout. </author> <title> Tcl: An Embeddable Command Language. </title> <booktitle> USENIX, </booktitle> <year> 1990. </year>
Reference-contexts: Alternatively, new modules may be written from scratch, with few operational constraints. Programming of the control message processing, in which user events are decoded and user feedback is displayed, is expressed with an extended version of the Tool Command Language (Tcl) <ref> [32] </ref>. The system contains an embedded Tcl interpreter, which provides great flexibility in re-configuring and extending the runtime environment. <p> Object syntax and semantics are exposed along the way. The final section discusses the role of Object Tcl in PAVES. Appendix B contains a reference guide to the language. 6.1 Tcl as a Starting Point The Tool Command Language (Tcl) <ref> [32] </ref> is a simple yet extensible interpreted language. Its easy syntax and use of strings plus its interpreted and dynamic nature make for rapid prototyping. Its compatibility with C and lightweight implementation mean it can be embedded in extensible applications.
Reference: [33] <author> John Ousterhout. </author> <title> An X11 Toolkit Based on the Tcl Language. </title> <booktitle> USENIX, </booktitle> <year> 1991. </year>
Reference-contexts: HyperCard [14] uses the metaphor of a stack of cards containing objects to build hypermedia style documents. Programs are written in a verbose textual language called HyperTalk, with fragments of the overall program attached to interface objects to control how they respond to different events. Visual Basic and Tk <ref> [33] </ref> work in a similar manner, but use an interface metaphor based on grouping window elements and their controls. Visual programming languages have also received much attention. Graphics has the advantage of a low learning barrier, since much syntax associated with textual languages is eliminated. <p> With an object command approach, each object of complicated data is registered with the interpreter as a single command. Operations on an object are performed with subcommands by using the first argument to the command to specify the operation. The Tk <ref> [33] </ref> graphical user interface toolkit uses this approach to manage widgets. 6.2.1 Objects Object Tcl formalizes the notion of grouping related data so that object models may be realized without replicating the infrastructure that would otherwise be necessary. <p> The approach of using a visual representation as a higher level interface to running scripts is not limited to PAVES. It may be applied to Tk <ref> [33] </ref>, for example.
Reference: [34] <author> Brent Phillips. </author> <title> A Distributed Programming System for Media Applications. </title> <type> SM Thesis Proposal, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: But the memory bandwidth and processing capacity of modern workstations enable them to perform simple processing well above the full-motion video rate [22]. Developments in high-speed networking and video 12 codecs are also encouraging distributed applications where larger computations may be accommodated by splitting them across multiple computers <ref> [34] </ref>. Using software to apply algorithms to video yields very different applications than those commonly given as examples of multimedia programs. Teleconferencing systems, multimedia encyclopedias, and the like make poor use of the general computation possibilities of computers.
Reference: [35] <author> Richard Stallman. </author> <title> GNU Emacs Manual. Free Software Foundation, </title> <month> March </month> <year> 1987. </year> <note> Sixth Edition, Version 18. </note>
Reference-contexts: The act of changing program 32 state then causes the presenter process to update the interface view. An example of a presentation-style model can be seen when using the Emacs <ref> [35] </ref> editor. Emacs can display multiple editing buffers at a time, and it is allowable for a single buffer object to be shown more than once. In this situation, if the user types then the result appears in all copies of the single buffer object.
Reference: [36] <author> William Stasior. </author> <title> Visual Processing for Seamless Interactive Computing. </title> <booktitle> in MIT/LCS/TR-590, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Introduction Many new uses of digital video are becoming viable as it is manipulated by increasingly powerful computers. With the right programming tools, video applications can become more intelligent and responsive through greater amounts of media processing <ref> [36, 22] </ref>. This report investigates the programming language aspects of controlling such video applications. It presents PAVES, a direct manipulation system that allows users to control applications while the applications simultaneously manipulate live video. <p> Intelligent video programs will be capable of making decisions based on video content. For example, a computer scribe may automatically capture and distill a set of notes from a camera pointed at a blackboard during a lecture <ref> [36] </ref>. A programmable television agent may be capable of reorganizing a video broadcast to meet a user's preferences. <p> The BlueScreen program has several features that make it a suitable example. It is a real application that was developed as part of the COMMA project <ref> [36] </ref>. The segmentation task it performs is non-trivial, and generalizes from keying by color to keying by motion so that an artificial background is not needed.
Reference: [37] <author> Steven L. Tantimoto. Viva: </author> <title> A visual language for image processing. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(2), </volume> <year> 1990. </year>
Reference-contexts: The programming system presented in this report draws on many of its features, while adapting them to support video. 2.2.2 Cantata, VIVA, and MAVIS There are a variety of media flow style visual languages for image processing, including Cantata, VIVA, and MAVIS <ref> [40, 37, 31] </ref>. Cantata provides a graphical front to the KHOROS signal processing system. It lets the user construct a pictorial representation of processing operations, from which a valid KHOROS program is constructed and executed. This has proven a convenient way to prototype applications. VIVA is similar to Cantata.
Reference: [38] <author> D. L. Tennenhouse, J. F. Adam, D. Carver, H. Houh, M. Ismert, C. Lindblad, W. Stasior, D. Wetherall, D. Bacher, and T. Chang. </author> <title> A Software-Oriented Approach to the Design of Media-Processing Environments. </title> <booktitle> In Proceedings of the International Conference on Multimedia Systems and Computing, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: A programmable television agent may be capable of reorganizing a video broadcast to meet a user's preferences. Or perhaps a program will be able to distinguish between video-conference participants and their background so that the participants can enhance their images with different background scenes. 1.2 The ViewStation The ViewStation <ref> [38] </ref> is an environment that is specialized for the study of intelligent and responsive multimedia applications. Its software development component, the VuSystem [22], focuses on computer-participative multimedia applications, where the computer not only manipulates media but also digests it and performs independent actions based on media content.
Reference: [39] <author> C. Upson et al. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Flow graphs reveal the broad scale structure of a program in terms of the relationship between its input and output data, rather than as a navigable database of related operations. This view has proven valuable in problem domains related to video, such as image processing [40] and scientific visualization <ref> [39] </ref>. 1.4 Interactive Video Programming with PAVES This report describes the design, implementation, and use of PAVES, an interactive video programming environment. PAVES stands for Programming Active Video with an Embedded System. It brings the advantages of user programming systems to bear on computer-participative multimedia applications. <p> These systems are designed for specialized problem domains that share characteristics with video processing: image processing, computer vision, and scientific visualization. 2.2.1 AVS The Application Visualization System (AVS) <ref> [39] </ref> has set a de facto standard as a commercial tool for scientific visualization. It provides a visual programming interface with which users may combine processing elements into a program that represents the visualization.
Reference: [40] <author> C. Williams and J. Rasure. </author> <title> A visual language for image processing. </title> <booktitle> In IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Skokie, IL, </address> <year> 1990. </year> <journal> IEEE Computer Society. </journal> <volume> 103 </volume>
Reference-contexts: Flow graphs reveal the broad scale structure of a program in terms of the relationship between its input and output data, rather than as a navigable database of related operations. This view has proven valuable in problem domains related to video, such as image processing <ref> [40] </ref> and scientific visualization [39]. 1.4 Interactive Video Programming with PAVES This report describes the design, implementation, and use of PAVES, an interactive video programming environment. PAVES stands for Programming Active Video with an Embedded System. It brings the advantages of user programming systems to bear on computer-participative multimedia applications. <p> The programming system presented in this report draws on many of its features, while adapting them to support video. 2.2.2 Cantata, VIVA, and MAVIS There are a variety of media flow style visual languages for image processing, including Cantata, VIVA, and MAVIS <ref> [40, 37, 31] </ref>. Cantata provides a graphical front to the KHOROS signal processing system. It lets the user construct a pictorial representation of processing operations, from which a valid KHOROS program is constructed and executed. This has proven a convenient way to prototype applications. VIVA is similar to Cantata.
Reference: [41] <author> S. Wray, T. Glauert, and A. Hopper. </author> <title> The Medusa Applications Environment. </title> <booktitle> In Proceedings of the International Conference on Multimedia Systems and Computing, </booktitle> <pages> pages 265-273, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year> <journal> IEEE. </journal> <volume> 104 </volume>
Reference-contexts: VideoScheme also inherits the off-line or batch processing nature of editing systems. Though the Scheme program may be developed interactively, it cannot 23 produce its video result in real-time since there is no resource scheduling based on real-time. 2.1.4 Medusa The Medusa applications environment <ref> [41] </ref> is a prototyping system for distributed video and audio applications, based on a peer-to-peer architecture for controlling networked multimedia devices. It uses simple, reliable, and unbuffered channels for connections and capability-based proxies for security. In Medusa, programs are modeled as active objects, which are implemented as C++ classes.
References-found: 41

