URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rvirga/www/papers/dep-rel.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rvirga/www/Home.html
Root-URL: 
Title: Higher-Order Superposition for Dependent Types  
Author: Roberto Virga 
Note: This work was supported by NSF Grant CCR-9303383 The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of NSF or the U.S. government  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: May 9, 1995  
Abstract: In this paper we extend the higher-order critical pair criterion, as described in [9], to the LF framework [10], a calculus with dependent types. The notion of dependence relation is introduced, and used to restrict rewriting to those cases where well-typedness is preserved. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Coquand, T. </author> <title> An algorithm for testing conversion in type theory. Logical Frameworks, </title> <publisher> Cambridge University Press, </publisher> <year> 1991, </year> <pages> pp. 155-279 </pages>
Reference-contexts: If ` M : A then there is a unique M 0 such that M 0 M and ` M + A. 6. If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. See <ref> [1] </ref>, [2], [15]. In light of the previous section, our goal is to show that if a well-typed term or type family respects the dependencies, so does its canonical form. Notation.
Reference: [2] <author> Geuvers, H. </author> <title> The Church-Rosser Property for fi-Reduction in Typed -Calculi. </title> <booktitle> Seventh. Ann. IEEE Symp. on Lofic in Comp. </booktitle> <publisher> Sci., IEEE Computer Society Press, </publisher> <year> 1992, </year> <pages> pp. 453-460 </pages>
Reference-contexts: If ` M : A then there is a unique M 0 such that M 0 M and ` M + A. 6. If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. See [1], <ref> [2] </ref>, [15]. In light of the previous section, our goal is to show that if a well-typed term or type family respects the dependencies, so does its canonical form. Notation.
Reference: [3] <author> Harper, R. , Honsell F., Plotkin, G. </author> <title> A framework for defining logics. </title> <journal> Journal of the Association for Computing Machinery, </journal> <month> January </month> <year> 1993, </year> <pages> pp. 143-184 </pages>
Reference-contexts: Nipkow's Higher Order Term Rewriting Systems (HTRS) are similar to Klop's Combinatory Reduction Systems (CRS). For a detailed analysis of the relation between these two, see [16]. In this paper we extend higher-order rewriting to a calculus with dependent types, as presented in <ref> [3] </ref>. Our approach in the proof of most results, notably the Critical Pair Lemma, will follow Nipkow's one, though significant modifications are necessary due to the fact that here terms may appear inside types. 2. Preliminaries Definition 2.1.
Reference: [4] <author> Klop, J. </author> <title> Combinatory Reduction Systems. </title> <publisher> Mathematical Centre Tracts 127. Stichting Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: This fact, in conjunction with Newman's lemma <ref> [4] </ref>, which says that in presence of termination local confluence and confluence coincide, has led in the last decade to a series of important breakthroughs in the field of automated equational reasoning.
Reference: [5] <author> Kahrs, </author> <title> D.Towards a Domain Theory for Termination Proofs. </title> <booktitle> Sixth International Conference on Rewriting Techniques and Applications (RTA), </booktitle> <year> 1994 </year>
Reference-contexts: Future Developments The Critical Pair Lemma gives us a criterion to check for local confluence of a HTRS. As said before, local confluence assumes a great relevance in presence of termination, since by Newman's Lemma, it provides a simple and computationally-effective way to check for confluence. Very recently, in <ref> [5] </ref> and [12] two methods of proving the termination of a HTRS have been proposed for simple types; it is our hope that these will translate to dependent types, and that perhaps the richer type structure will allow to obtain better results.
Reference: [6] <author> Knuth, D. and Bendix, P. </author> <title> Simple Word Problems in Universal Algebra. Computational Problems in Abstract Algebra, </title> <publisher> Pergamon Press, </publisher> <year> 1972, </year> <pages> pp. 263-297 </pages>
Reference-contexts: In presence of these conditions, the test for convertibility of two terms, undecidable in the general case, reduces to a simple test for equality of their respective normal forms. One of the central results in this study is certainly the Critical Pair Lemma for first-order TRSes <ref> [6] </ref>, which provides a computational method to check for local confluence in a TRS, together with a way to extend any TRS to an equivalent locally confluent one.
Reference: [7] <author> Mayr, R. , Nipkow, T. </author> <title> Higher-Order Rewrite Systems and their Confluence. </title> <type> Tech. Report, </type> <institution> Technische Universitat Munchen, </institution> <year> 1994 </year>
Reference-contexts: The first important advance in order to overcome these difficulties is due to D. Miller [8], who identified a subclass of higher-order terms, called higher-order patterns for which the unification problem is decidable, and moreover uniqueness of most general unifiers hold. Making use of this result, T. Nipkow <ref> [7, 9] </ref> was able to state and prove an analogous of the Critical Pair Lemma for the case of higher-order, simply-typed TRSes. Nipkow's Higher Order Term Rewriting Systems (HTRS) are similar to Klop's Combinatory Reduction Systems (CRS). For a detailed analysis of the relation between these two, see [16].
Reference: [8] <author> Miller, D. </author> <title> A Logic Programming Language With Lambda abstraction, Function Variables, and Simple Unification. </title> <type> LFCS report series, </type> <institution> University of Edinburgh, </institution> <year> 1991, </year> <pages> pp. 253-281 </pages>
Reference-contexts: The first important advance in order to overcome these difficulties is due to D. Miller <ref> [8] </ref>, who identified a subclass of higher-order terms, called higher-order patterns for which the unification problem is decidable, and moreover uniqueness of most general unifiers hold. Making use of this result, T.
Reference: [9] <author> Nipkow, T. </author> <title> Higher-Order Critical Pairs. </title> <booktitle> Proceedings of the 5th IEEE Conference of Logic In Computer Science (LICS), </booktitle> <year> 1990, </year> <pages> pp. 342-348 </pages>
Reference-contexts: The first important advance in order to overcome these difficulties is due to D. Miller [8], who identified a subclass of higher-order terms, called higher-order patterns for which the unification problem is decidable, and moreover uniqueness of most general unifiers hold. Making use of this result, T. Nipkow <ref> [7, 9] </ref> was able to state and prove an analogous of the Critical Pair Lemma for the case of higher-order, simply-typed TRSes. Nipkow's Higher Order Term Rewriting Systems (HTRS) are similar to Klop's Combinatory Reduction Systems (CRS). For a detailed analysis of the relation between these two, see [16]. <p> By inversion (and type conversion, if necessary), we get ; x : A ` M : B, ` and A ffi A B. The result then follows by the Lemma. 4. Substitutions In <ref> [9] </ref>, the definition of substitution makes use of the existence and uniqueness of long fi normal forms. In the LF calculus, these find an analogue in the concept of canonical form: Definition 4.1. <p> Given any well-typed term ` M : A and substitution = fx 7! N g : + , define M to be the (unique) canonical form of ` [N =x]M : [N =x]A Similarly, given ` A : type we also define A. Note that here, in analogy to <ref> [9] </ref>, we define the result of a substitution application to be a canonical term. This will simplify considerably some proofs in the next section. Definition 4.15. We define: 1. <p> To prove the other direction of Theorem 5.5 we follow the same approach used in <ref> [9] </ref>, which goes through the definition of a weaker notion of rewriting: Definition 5.8.
Reference: [10] <author> Pfenning, F. </author> <title> Logic Programming in the LF Logical Framework. </title> <editor> G. Huet, G. Plotkin ed., </editor> <title> Logical Frameworks, </title> <publisher> Cambridge University Press, </publisher> <year> 1991, </year> <pages> pp. 149-181 </pages>
Reference: [11] <author> Pfenning, F. </author> <title> Unification and ant-unification in the Calculus of Constructions., </title> <booktitle> Proceedings of the 6th IEEE Conference of Logic In Computer Science (LICS), </booktitle> <year> 1991, </year> <pages> pp. 149-181 </pages>
Reference-contexts: Theorem 4.19. Unification of patterns is decidable; if two patterns unify, there is a unique (up to conversion) most general unifier. Proof. See <ref> [11] </ref>. 5. Higher-Order Term Rewriting In this section we extend the notion of term rewriting system and rewriting relation to a higher-order setting with dependent types. Definition 5.1.
Reference: [12] <author> Rohwedder, E. , Pfenning, F. </author> <title> Mode and Termination analysis for Higher-Order Logic., </title> <note> to appear at ESOP 96 </note>
Reference-contexts: As said before, local confluence assumes a great relevance in presence of termination, since by Newman's Lemma, it provides a simple and computationally-effective way to check for confluence. Very recently, in [5] and <ref> [12] </ref> two methods of proving the termination of a HTRS have been proposed for simple types; it is our hope that these will translate to dependent types, and that perhaps the richer type structure will allow to obtain better results.
Reference: [13] <author> Snyder, W. </author> <title> A Proof Theory for General Unification. </title> <publisher> Birkhauser, </publisher> <year> 1991 </year>
Reference-contexts: Dependency relations formalize 4 mathematically this idea by defining preorders over type constants, constructed by looking (recursively) at the signature. The idea of using dependency relations is not completely new in LF. They have also been used in <ref> [13] </ref> to prove well-foundedness of proofs by structural induction. In this paper, we will use them to obtain information about the type of objects appearing inside types, and in turn we will use this information to define a notion of rewriting which is sound with respect to type checking.
Reference: [14] <author> Salvesen, A. </author> <title> The Church-Rosser Property for Pure Systems with fi-Reduction. </title> <type> Tech. Rep., </type> <institution> University of Oslo, </institution> <year> 1992 </year>
Reference: [15] <author> Van de Pol, J. </author> <title> Termination Proofs for Higher-Order Rewrite Systems, </title> <editor> J. Heering, K. Meinke, B. Moller, T. Nipkow ed., </editor> <title> Higher Order Algebra, Logic and Term Rewriting, </title> <booktitle> Lect. Notes in Comp. Sci., </booktitle> <volume> Vol 816, </volume> <publisher> Springer Verlag, </publisher> <year> 1994 </year>
Reference-contexts: If ` A : type then there is a unique A 0 such that A A 0 and ` A 0 + type. Proof. See [1], [2], <ref> [15] </ref>. In light of the previous section, our goal is to show that if a well-typed term or type family respects the dependencies, so does its canonical form. Notation.
Reference: [16] <author> Van Oostrom, V. , Van Raamsdonk, F. </author> <title> Comparing Combinatory Reduction Systems and Other Systems. </title> <editor> J. Heering, K. Meinke, B. Moller, T. Nipkow ed., </editor> <title> Higher Order Algebra, Logic and Term Rewriting, </title> <booktitle> Lect. Notes in Comp. Sci., </booktitle> <volume> Vol 816, </volume> <publisher> Springer Verlag, </publisher> <year> 1994, </year> <pages> pp. 305-325 </pages>
Reference-contexts: Nipkow [7, 9] was able to state and prove an analogous of the Critical Pair Lemma for the case of higher-order, simply-typed TRSes. Nipkow's Higher Order Term Rewriting Systems (HTRS) are similar to Klop's Combinatory Reduction Systems (CRS). For a detailed analysis of the relation between these two, see <ref> [16] </ref>. In this paper we extend higher-order rewriting to a calculus with dependent types, as presented in [3].
References-found: 16

