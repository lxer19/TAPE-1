URL: http://www.csl.sri.com/~bruno/publis/safefm_tse.ps.gz
Refering-URL: http://www.csl.sri.com/~bruno/publis/safefm_tse.html
Root-URL: 
Title: Formal Requirements Analysis of an Avionics Control System  
Author: Bruno Dutertre, Victoria Stavridou 
Keyword: Formal specification, formal verification, safety critical systems, requirements analysis, avionics systems.  
Date: 1997 1  5, 1997  
Note: IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. XX, NO. Y, MONTH  To Appear in IEEE Transactions on Software Engineering, Vol. 23, No.  
Abstract: We report on a formal requirements analysis experiment involving an avionics control system. We describe a method for specifying and verifying real-time systems with PVS. The experiment involves the formalization of the functional and safety requirements of the avionics system as well as its multilevel verification. First level verification demonstrates the consistency of the specifications whilst the second level shows that certain system safety properties are satisfied by the specification. We critically analyze methodological issues of large scale verification and propose some practical ways of structuring verification activities for opti-mising the benefits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> "The Procurement of Safety Critical Software in Defence Equipment," </institution> <year> 1991, </year> <title> Interim Defence Standard 00-55, Issue1. [2] "Draft IEC Standard 1508 Functional Safety: </title> <booktitle> Safety-related systems," </booktitle> <month> April </month> <year> 1995, </year> <note> International Electrotechnical Commission, Technical Committee no. 65, Working Group 9/10 (WG 9/10), IEC 65A. </note>
Reference: [3] <author> P. Bradley, L. Shackleton, and V. Stavridou, </author> <title> "The SafeFM project," </title> <booktitle> in Proc. of Safety Critical Systems Symposium 93, </booktitle> <editor> F. Redmill, Ed. </editor> <month> February </month> <year> 1993, </year> <pages> pp. 168-176, </pages> <publisher> Springer-Verlag. </publisher>
Reference: [4] <author> V. Stavridou, A. Boothroyd, T. Boyce, P. Bradley, J. Draper, B. Dutertre, and R. Smith, </author> <title> "Developing and Assessing Safety Critical Systems with Formal Methods: the SafeFM Way," </title> <journal> Journal of High Integrity Systems, </journal> <volume> vol. 1, no. 6, </volume> <pages> pp. 541-545, </pages> <year> 1996. </year>
Reference: [5] <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke, </author> <title> "Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 21, no. 2, </volume> <pages> pp. 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference: [6] <author> J. Crow, S. Owre, J. Rushby, N. Shankar, and M. Srivas, </author> <title> "A tutorial introduction to PVS," </title> <booktitle> in WIFT'95 Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <month> April </month> <year> 1995. </year>
Reference: [7] <author> T. Boyce, </author> <title> "SafeFM case study report," </title> <type> Tech. Rep. </type> <institution> SafeFM-018-GEC-1, SafeFM project, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: A. Functional requirements The first stage of the work was the formal specification of the functional software requirements. Our starting point was a report describing informally the ADC architecture and the main functions of the system <ref> [7] </ref>. This original document describes the two channels and their interfaces and specifies the redundancy management mechanism. The report also specifies in fairly precise terms the different control and failure detection functions to be implemented. <p> Once the building blocks of the formalization had been identified, specification of the functional requirements was straightforward. The informal requirements translated to a list of data flow definitions without any difficulty. This was certainly due to the quality and precision of the original document <ref> [7] </ref>; we were also aided by a VDM specification of the case study which had been developed separately within the SafeFM project [26]. The VDM specification and direct contact with GEC-Marconi resolved the few ambiguities we found in the informal requirements document. <p> The two main safety requirements selected for the case study are upper limits on the wing sweep angles when two different sets of flaps are extended. These two properties were given in the original requirement document <ref> [7] </ref> and were extracted from a Failure Mode and wing_sweep_primary [ (IMPORTING time, types) ALTITUDE : [time-&gt; altitude_range], MACH : [time-&gt; mach_range], ...] : THEORY BEGIN ... t : VAR clock [PRIMARY_PERIOD] ...
Reference: [8] <author> S. Owre, N. Shankar, and J. M. Rushby, </author> <title> User Guide for the PVS Specification and Verification System, </title> <institution> Computer Science Lab., SRI International, </institution> <month> March </month> <year> 1993. </year>
Reference: [9] <author> S. P. Miller and M. Srivas, </author> <title> "Formal Verification of the AAMP5 Microprocessor: A Case Study in the Industrial Use of Formal Methods," </title> <booktitle> in WIFT'95 Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: By the size of its specifications and the number of proofs performed, our experiment represents a major effort in formal verification. The experiment has shown that such large scale verification is feasible and has corroborated other reports on industrial uses of PVS, such as <ref> [9] </ref>. Our verification effort would not have succeeded without effective tool support. Tools are necessary simply to cope with the size of the specifications. They are also essential for supporting the proof process. The requirements of the case study include numerical computations and logical and temporal constraints.
Reference: [10] <author> M. K. Srivas and S. P. Miller, </author> <title> "Formal Verification of an Avionics Microprocessor," </title> <type> Tech. Rep. </type> <institution> SRI-CSL-95-04, SRI International, </institution> <month> June </month> <year> 1995. </year>
Reference: [11] <author> K.-H. Buth, </author> <title> "Automated Code Generator Verification based on Algebraic Laws," </title> <type> Tech. Rep. ProCoS II Report, </type> <institution> Kiel KHB 5/1, University of Kiel, </institution> <month> September </month> <year> 1995. </year>
Reference: [12] <author> J. Hooman, </author> <title> "Correctness of Real Time Systems by Construction," in Formal Techniques in Real-Time and Fault-Tolerant Systems. </title> <month> September </month> <year> 1994, </year> <pages> pp. 19-40, </pages> <publisher> Springer-Verlag, LNCS 863. </publisher>
Reference: [13] <author> N. Shankar, </author> <title> "Verification of Real-Time Systems Using PVS," in Computer Aided Verification, </title> <journal> CAV'93. June-July 1993, Springer-Verlag, LNCS 697. 12 IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, </journal> <volume> VOL. XX, NO. </volume> <pages> Y, </pages> <month> MONTH </month> <year> 1997 </year>
Reference: [14] <author> M.J.C. Gordon and T.F. Melham, </author> <title> Introduction to HOL. A theorem proving environment for higher order logic, </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference: [15] <author> A. P. Ravn, H. Rischel, and K. M. Hansen, </author> <title> "Specifying and verifying requirements of real-time systems," </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. 19, no. 1, </volume> <pages> pp. 41-55, </pages> <month> January </month> <year> 1993. </year>
Reference: [16] <author> Z. Chaochen, C. A. R. Hoare, and A. P. Ravn, </author> <title> "A calculus of durations," </title> <journal> Information Processing Letters, </journal> <volume> vol. 40, no. 5, </volume> <pages> pp. 269-276, </pages> <month> December </month> <year> 1991. </year>
Reference: [17] <author> J. U. Skakkebk and N. Shankar, </author> <title> "Towards a duration calculus proof assistant in PVS," in Formal Techniques in Real-time and Fault-Tolerant Systems. September 1994, </title> <publisher> Springer-Verlag, LNCS 863. </publisher>
Reference: [18] <author> Z. Chaochen, A. P. Ravn, and M. R. Hansen, </author> <title> "An extended duration calculus for hybrid real-time systems," in Hybrid Systems, </title> <booktitle> 1993, number 736 in LNCS, </booktitle> <pages> pp. 36-59. </pages>
Reference: [19] <author> A. P. Ravn, </author> <title> Design of Embedded Real-Time Computing Systems, </title> <type> Ph.D. thesis, </type> <institution> Technical University of Denmark, Lyngby, Denmark, </institution> <month> October </month> <year> 1995. </year>
Reference: [20] <author> N. Halbwachs, P. Caspi, P. Raymond, and D. Pilaud, </author> <title> "The Synchronous Data Flow Programming Language LUSTRE," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 79, no. 9, </volume> <pages> pp. 1305-1321, </pages> <month> September </month> <year> 1991. </year>
Reference: [21] <author> P. Le Guernic, T. Gautier, M. Le Borgne, and C. Le Maire, </author> <title> "Programming Real-Time Applications with SIGNAL," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 79, no. 9, </volume> <pages> pp. 1321-1336, </pages> <month> September </month> <year> 1991. </year>
Reference: [22] <author> J. Crow and B. Di Vito, </author> <title> "Formalizing Space Shuttle Software Requirements," </title> <booktitle> in ACM SIGSOFT Workshop on Formal Methods in Software Practice, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: These restrictions are important for getting confidence in the feasibility of the software requirements. The state machine model is in fact adopted by many approaches to software development, including recent work with PVS on the specification of the space shuttle software <ref> [22] </ref>. The state machine model is also widely used by formalisms such as B or VDM [23], [24] which incorporate software development methods. As a whole, the data flow specification of software requirements provides a solid basis for subsequent development. <p> We are also confident through the use of type checking and because of the definitional style adopted that the PVS specifications are consistent. In this respect, the SafeFM case study has confirmed other authors' conclu sions about the value of formal specifications (for example, see <ref> [22] </ref>, [27]). The existence of the VDM specification and the substantial experience of the GEC-Marconi engineers with the system, meant that the PVS formalization was not likely to uncover previously unknown problems. The main benefits of the formal approach were realised during the later stages of validating the specifications.
Reference: [23] <author> Cliff B. Jones, </author> <title> Systematic Software Development using VDM, </title> <booktitle> Prentice-Hall International, 1986, 2nd Edition. </booktitle>
Reference-contexts: The state machine model is in fact adopted by many approaches to software development, including recent work with PVS on the specification of the space shuttle software [22]. The state machine model is also widely used by formalisms such as B or VDM <ref> [23] </ref>, [24] which incorporate software development methods. As a whole, the data flow specification of software requirements provides a solid basis for subsequent development. Type checking ensures completeness and consistency and we feel that the restrictions on the form of specifications are a price worth paying considering the potential benefits.
Reference: [24] <author> J. R. Abrial, M. Lee, D. Neilson, N. Scharbach, and I. Sorensen, </author> <title> "The B method for Large Software. Specification, Design and Coding," </title> <booktitle> in VDM'91: </booktitle> <volume> Volume 2: </volume> <pages> Tutorials. </pages> <year> 1991, </year> <pages> pp. 398-405, </pages> <publisher> Springer-Verlag, LNCS 552. </publisher>
Reference-contexts: The state machine model is in fact adopted by many approaches to software development, including recent work with PVS on the specification of the space shuttle software [22]. The state machine model is also widely used by formalisms such as B or VDM [23], <ref> [24] </ref> which incorporate software development methods. As a whole, the data flow specification of software requirements provides a solid basis for subsequent development. Type checking ensures completeness and consistency and we feel that the restrictions on the form of specifications are a price worth paying considering the potential benefits. IV.
Reference: [25] <author> B. Dutertre, </author> <title> "Case study coherent specifications," </title> <type> Tech. Rep. </type> <institution> SafeFM-050-RH-1, SafeFM project, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: In particular, we started with a general model of clocks which required a DUTERTRE AND STAVRIDOU: FORMAL REQUIREMENTS ANALYSIS OF AN AVIONICS CONTROL SYSTEM 7 more complex PVS definition than given in section III-C.3; a clock was any unbounded, countable set of instants <ref> [25] </ref>. This general model did not prove convenient or useful and was later on largely simplified. The basic support theories have been evolving throughout the whole project but a fairly stable version was obtained at the end of the formalization of the software requirements.
Reference: [26] <author> T. Boyce, </author> <title> "Formal techniques in analysis and design," </title> <type> Tech. Rep. </type> <institution> SafeFM-027-GEC-2, SafeFM project, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The informal requirements translated to a list of data flow definitions without any difficulty. This was certainly due to the quality and precision of the original document [7]; we were also aided by a VDM specification of the case study which had been developed separately within the SafeFM project <ref> [26] </ref>. The VDM specification and direct contact with GEC-Marconi resolved the few ambiguities we found in the informal requirements document. The structure of the PVS specifications follows closely the informal document organization. Six software modules are described, four for the primary channel and two for the backup channel. <p> This unexpected situation was discovered by failing to prove a putative theorem. The error can be traced back to the original informal requirements where the possible inversion of the two limits is completely overlooked. The same mistake was present in the VDM specifications given in <ref> [26] </ref> which were derived from the same informal requirements. This was the only error discovered during the proofs. After a simple correction, the putative theorems and the three important safety properties were all formally proved. The whole specification consists of approximately 4500 lines of PVS (with comments and blank lines).
Reference: [27] <author> B. Di Vito, </author> <title> "Formalizing New Navigation Requirements for NASA's Space Shuttle," </title> <booktitle> in FME'96, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: We are also confident through the use of type checking and because of the definitional style adopted that the PVS specifications are consistent. In this respect, the SafeFM case study has confirmed other authors' conclu sions about the value of formal specifications (for example, see [22], <ref> [27] </ref>). The existence of the VDM specification and the substantial experience of the GEC-Marconi engineers with the system, meant that the PVS formalization was not likely to uncover previously unknown problems. The main benefits of the formal approach were realised during the later stages of validating the specifications.

References-found: 26

