URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EvolvDBO.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Towards Database Optimization by Evolution Towards Database Optimization by Evolution. search strategy is established, based
Author: P. van Bommel Th.P. van der Weide P. van Bommel and Th.P. van der Weide. 
Date: 273-287, July 1992.  
Note: Published as:  In Proceedings of the International Conference on Information Systems and Management of Data (CISMOD 92), Bangalore, India, pages  A  are introduced.  
Abstract: In this paper we focus on optimization of database schema transformation, by evolutionary (or genetic) search. A framework for transforming conceptual data schemata into efficient internal schemata is presented. We consider this problem from the viewpoint of searching through the space of all correct, but possibly incomplete internal representations of the conceptual schema at hand. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Amikam. </author> <title> On the automatic generation of optimal internal schemata. </title> <journal> Information Systems, </journal> <volume> 10(1) </volume> <pages> 37-45, </pages> <year> 1985. </year>
Reference-contexts: The problem then is how to find good candidate internal schemata. In this paper we focus on the question how such a good candidate schema can be found, based on the notion of evolution. For other approaches, see for example <ref> [1] </ref>, [3], [15], [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]).
Reference: [2] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: The semantics of a schema are expressed in terms of populations (instantiations) of the information structure, satisfying the requirements specified in C. For a formal definition of these concepts, we refer to <ref> [2] </ref>. We shortly summarize them in this section. ~ A ~ C ~ E s a 1 b 1 b 1 b 1 c 2 d 1 d 2 d 2 e 1 An information structure consists of the following basic components: * A set O of object types.
Reference: [3] <author> M.A. Casanova, L. Tucherman, A.L. Furtado, </author> <title> and A.P. Braga. Optimization of relational schemas containing inclusion dependencies. </title> <booktitle> In Proceedings of the Fifteenth VLDB Conference, </booktitle> <pages> pages 317-325, </pages> <year> 1989. </year>
Reference-contexts: The problem then is how to find good candidate internal schemata. In this paper we focus on the question how such a good candidate schema can be found, based on the notion of evolution. For other approaches, see for example [1], <ref> [3] </ref>, [15], [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]).
Reference: [4] <author> P.P. Chen. </author> <title> The entity-relationship model: toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <year> 1976. </year>
Reference-contexts: ER <ref> [4] </ref> and NIAM [14], [17]). The main contributions of this paper are: 1. Definition of candidate database structures in terms of the conceptual schema at hand, as a suitable representation for individuals. 2. Introduction of evolution operators in terms of this internal representation.
Reference: [5] <author> L.S. Colby. </author> <title> A recursive algebra for nested relations. </title> <journal> Information Systems, </journal> <volume> 15(5) </volume> <pages> 567-582, </pages> <year> 1990. </year>
Reference-contexts: The set H contains all objectifications: H = p 2 P j Base (p) 2 F 3 Tree representations In this section we introduce the nested relational view on information structures (see <ref> [5] </ref>, [20] and [21]), as an extension of the Predicator Model in terms of an additional structuring of predicators. This (internal) view directly corresponds to an implementation structure of the (conceptual) information structure. <p> We define R N as the set of nodes being the root of some tree: R = x 2 N fi 8 hm;ni2E [x 6= m] 3.2 Trees as nested relations The tree representation of an information structure is very close to the concept of nested relations, as introduced in <ref> [5] </ref>, [20] and [21]. In order to demonstrate this, we show in this section how tree representations are translated into nested tables. Suppose node m has descendents as depicted in figure 3. <p> Note that the entire population satisfies the Conformity Rule. 4.2 Tree population In this section we introduce how tree representations are populated. Our way of populating tree representations is analogous with <ref> [5] </ref>, [20] and [21], where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population P of a tree representation T assigns to each node in N a set of values of the corresponding domain.
Reference: [6] <author> L. Davis. </author> <title> Handbook of genetic algorithms. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]). In so-called evolutionary (or genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. <ref> [6] </ref>, [12]). Recently, this approach has been applied in a number of fields, for instance aircraft design, chemistry, neural network architectures and telecommunication networks (see [6]). Evolutionary methods can be made very robust in avoiding local optima. <p> genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. <ref> [6] </ref>, [12]). Recently, this approach has been applied in a number of fields, for instance aircraft design, chemistry, neural network architectures and telecommunication networks (see [6]). Evolutionary methods can be made very robust in avoiding local optima. This robustness is obtained by searching from a set of solutions, instead of one single solution, on the basis of probabilistic reproduction rules, rather than deterministic rules. <p> This robustness is obtained by searching from a set of solutions, instead of one single solution, on the basis of probabilistic reproduction rules, rather than deterministic rules. The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. <ref> [6] </ref>, [8], [12], [13] and [22]). <p> A better approach is to use good heuristics to find the optimal individual. The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to [24]. One approach exploits the idea of evolution of individuals (see <ref> [6] </ref>, [8], [12], [13] and [22]). In general, evolution of individuals is described as follows: Given a set of individuals fT 1 ; :::; T i g, find a new individual T that combines the strong properties of T 1 ; :::; T i . <p> In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to <ref> [6] </ref>, [8], [12], [13] and [22]. 6 Reproduction of individuals In this section, we introduce the primitive operations on individuals, that are necessary for describing the search strategies from the previous section. 6.1 Merging of individuals As a first operation we introduce the union of two disjoint individuals (i.e., having no
Reference: [7] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A conceptual framework for evolving information systems. </title> <booktitle> In The Second International Working Conference on Dynamic Modelling of Information Systems, </booktitle> <address> Washington DC, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Secondly, access paths (indices) should be integrated in the individuals. 3. Application of the approach in the optimization of CD-ROM databases (e.g. Hypertext [23]). This will be partly supported by the ESPRIT project APPED (2499). 4. Application of the approach in the implementation of so-called Evolving Information Systems (EIS <ref> [7] </ref>). The EIS project is partly supported by the Foundation for Computer Science in The Netherlands (SION). 12 Acknowledgement The use of an evolutionary approach in database optimization was suggested by E.D. Falkenberg. We thank the anonymous referees for their contributive remarks.
Reference: [8] <author> D.E. Goldberg. </author> <title> Genetic algorithms in search, optimization, and machine learning. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1989. </year>
Reference-contexts: For other approaches, see for example [1], [3], [15], [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. <ref> [8] </ref>, [22]). In so-called evolutionary (or genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. [6], [12]). <p> This robustness is obtained by searching from a set of solutions, instead of one single solution, on the basis of probabilistic reproduction rules, rather than deterministic rules. The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. [6], <ref> [8] </ref>, [12], [13] and [22]). The behaviour of the optimization process can then be derived from the behaviour of these primitive operations (see [8]). fl Dept. of Information Systems, Faculty of Mathematics and Informatics, University of Nijmegen, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands, E-mail: pvb@cs.kun.nl y This work has been <p> The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. [6], <ref> [8] </ref>, [12], [13] and [22]). The behaviour of the optimization process can then be derived from the behaviour of these primitive operations (see [8]). fl Dept. of Information Systems, Faculty of Mathematics and Informatics, University of Nijmegen, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands, E-mail: pvb@cs.kun.nl y This work has been partially supported by the ESPRIT project APPED (2499). 1 In this paper we restrict ourselves to (the broad class of) conceptual modelling techniques <p> A better approach is to use good heuristics to find the optimal individual. The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to [24]. One approach exploits the idea of evolution of individuals (see [6], <ref> [8] </ref>, [12], [13] and [22]). In general, evolution of individuals is described as follows: Given a set of individuals fT 1 ; :::; T i g, find a new individual T that combines the strong properties of T 1 ; :::; T i . <p> Usually, such a crossover is performed on individuals with a high fitness: for two individuals with high Fitness do perform crossover This strategy is applied in so-called Genetic Algorithms (e.g. <ref> [8] </ref>), where the individuals to be combined (crossed) are selected fitness-proportionately from a set of individuals. In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to [6], [8], [12], [13] and [22]. 6 Reproduction of individuals In this section, we <p> do perform crossover This strategy is applied in so-called Genetic Algorithms (e.g. <ref> [8] </ref>), where the individuals to be combined (crossed) are selected fitness-proportionately from a set of individuals. In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to [6], [8], [12], [13] and [22]. 6 Reproduction of individuals In this section, we introduce the primitive operations on individuals, that are necessary for describing the search strategies from the previous section. 6.1 Merging of individuals As a first operation we introduce the union of two disjoint individuals (i.e., having no predicators
Reference: [9] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in Data Modelling. </title> <type> Technical Report 91/07, </type> <institution> SERC, Software Engineering Research Centrum, </institution> <address> Utrecht, The Netherlands, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: We will see that our translation mechanism leads to a correct implementation of the corresponding information structure. The notion of correct implementation in the context of informaton structures is introduced in <ref> [9] </ref>. We first shortly discuss the population of information structures (4.1). Then we introduce populations for tree representations (4.2). Next, we show how a conceptual population (of an information structure) is translated into an internal population (of a tree representation) (4.3). <p> Obviously, P satisfies the Partitioning Rule and the Fitting Rule. A next property is: Lemma 4.1 Forest (T; I) ) (T ) is a correct implementation of I. For a formal definition of the concept of correct implementation we refer to <ref> [9] </ref>. It will however also be clear that schemata I and (T ) are not equivalent. For this purpose schema (T ) should at least be extended with a sufficient set of table guards. We will not elaborate on this further in this paper.
Reference: [10] <author> J.H. Holland. </author> <booktitle> Adaption in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <year> 1975. </year>
Reference-contexts: For other approaches, see for example [1], [3], [15], [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], <ref> [10] </ref>). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]). In so-called evolutionary (or genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. [6], [12]).
Reference: [11] <author> ISO/TC97/SC5/WG3. </author> <title> Concepts and Terminology for the Conceptual Schema and the Information Base, </title> <year> 1982. </year>
Reference-contexts: The result of information analysis is a conceptual schema, specifying what kind of data must be stored. Then, the process of database design is initiated with this conceptual schema. It results in an internal schema, specifying in what way the data is represented on a computer (see also <ref> [11] </ref>). For a given conceptual schema, the number of correct internal representations may be very large. Some internal schemata will result in an efficient system, others will not. The problem then is how to find good candidate internal schemata.
Reference: [12] <author> K. de Jong. </author> <title> Genetic algorithms: A 10 year perspective. </title> <booktitle> In Proceedings of the first International Conference on Genetic Algorithms and their Applications, </booktitle> <pages> pages 169 - 177, </pages> <year> 1985. </year>
Reference-contexts: Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]). In so-called evolutionary (or genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. [6], <ref> [12] </ref>). Recently, this approach has been applied in a number of fields, for instance aircraft design, chemistry, neural network architectures and telecommunication networks (see [6]). Evolutionary methods can be made very robust in avoiding local optima. <p> The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. [6], [8], <ref> [12] </ref>, [13] and [22]). <p> A better approach is to use good heuristics to find the optimal individual. The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to [24]. One approach exploits the idea of evolution of individuals (see [6], [8], <ref> [12] </ref>, [13] and [22]). In general, evolution of individuals is described as follows: Given a set of individuals fT 1 ; :::; T i g, find a new individual T that combines the strong properties of T 1 ; :::; T i . <p> In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to [6], [8], <ref> [12] </ref>, [13] and [22]. 6 Reproduction of individuals In this section, we introduce the primitive operations on individuals, that are necessary for describing the search strategies from the previous section. 6.1 Merging of individuals As a first operation we introduce the union of two disjoint individuals (i.e., having no predicators in
Reference: [13] <author> K. de Jong. </author> <title> On using genetic algorithms to search program spaces. </title> <booktitle> In Proceedings of the 2nd International Conference on Genetic Algorithms and their Applications, </booktitle> <pages> pages 210-216, </pages> <year> 1987. </year>
Reference-contexts: The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. [6], [8], [12], <ref> [13] </ref> and [22]). <p> The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to [24]. One approach exploits the idea of evolution of individuals (see [6], [8], [12], <ref> [13] </ref> and [22]). In general, evolution of individuals is described as follows: Given a set of individuals fT 1 ; :::; T i g, find a new individual T that combines the strong properties of T 1 ; :::; T i . <p> In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to [6], [8], [12], <ref> [13] </ref> and [22]. 6 Reproduction of individuals In this section, we introduce the primitive operations on individuals, that are necessary for describing the search strategies from the previous section. 6.1 Merging of individuals As a first operation we introduce the union of two disjoint individuals (i.e., having no predicators in common),
Reference: [14] <author> C.M.R. Leung and G.M. Nijssen. </author> <title> Relational database design using the NIAM conceptual schema. </title> <journal> Information Systems, </journal> <volume> 13(2) </volume> <pages> 219-227, </pages> <year> 1988. </year>
Reference-contexts: ER [4] and NIAM <ref> [14] </ref>, [17]). The main contributions of this paper are: 1. Definition of candidate database structures in terms of the conceptual schema at hand, as a suitable representation for individuals. 2. Introduction of evolution operators in terms of this internal representation.
Reference: [15] <author> M.E. McLaughlin, K.B. Bates Hill, D.D. Brown, M.A Rogers, </author> <title> Howell A.M., and Hatch P.P. An integrated methodology and toolset for database design. </title> <journal> ACM SIGMOD Record, </journal> <volume> 17(4) </volume> <pages> 37-55, </pages> <year> 1988. </year>
Reference-contexts: The problem then is how to find good candidate internal schemata. In this paper we focus on the question how such a good candidate schema can be found, based on the notion of evolution. For other approaches, see for example [1], [3], <ref> [15] </ref>, [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]).
Reference: [16] <author> E. Mendelson. </author> <title> Introduction to Mathematical Logic. </title> <publisher> Wadsworth and Brooks, </publisher> <year> 1987. </year>
Reference: [17] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual schema and Relational Database Design: A fact oriented approach. </title> <publisher> Prentice Hall of Australia Pty Ltd, </publisher> <year> 1989. </year> <month> 13 </month>
Reference-contexts: ER [4] and NIAM [14], <ref> [17] </ref>). The main contributions of this paper are: 1. Definition of candidate database structures in terms of the conceptual schema at hand, as a suitable representation for individuals. 2. Introduction of evolution operators in terms of this internal representation. <p> In section 6 we discuss the reproduction (evolution) of individuals. With respect to the graphical representation of conceptual information structures, we make use of the NIAM drawing convention (see <ref> [17] </ref>). For the internal representations, we introduce an extension of this convention. 2 The Predicator Model In the Predicator Model a schema = hI; Ci consists of an information structure I and a set of constraints C.
Reference: [18] <author> I. Rechenberg. </author> <title> Optimierung technischer Systeme nach Prinzipien der biologischen Evolution. </title> <type> PhD thesis, </type> <institution> Technical University of Berlin, Germany, </institution> <year> 1970. </year>
Reference: [19] <author> N. Rishe. </author> <title> Efficient organisation of semantic databases. </title> <editor> In W. Litwin and H.J. Schek, editors, </editor> <booktitle> Foundations of Data Organisation and Algorithms (FODO-89), volume 367 of Lecture Notes in Computer Science, </booktitle> <pages> pages 114-127. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The problem then is how to find good candidate internal schemata. In this paper we focus on the question how such a good candidate schema can be found, based on the notion of evolution. For other approaches, see for example [1], [3], [15], <ref> [19] </ref>. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], [22]).
Reference: [20] <author> M.A. Roth, H.F. Korth, and A. Silberschatz. </author> <title> Extended algebra and calculus for nested relational databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(4) </volume> <pages> 389-417, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: The set H contains all objectifications: H = p 2 P j Base (p) 2 F 3 Tree representations In this section we introduce the nested relational view on information structures (see [5], <ref> [20] </ref> and [21]), as an extension of the Predicator Model in terms of an additional structuring of predicators. This (internal) view directly corresponds to an implementation structure of the (conceptual) information structure. <p> define R N as the set of nodes being the root of some tree: R = x 2 N fi 8 hm;ni2E [x 6= m] 3.2 Trees as nested relations The tree representation of an information structure is very close to the concept of nested relations, as introduced in [5], <ref> [20] </ref> and [21]. In order to demonstrate this, we show in this section how tree representations are translated into nested tables. Suppose node m has descendents as depicted in figure 3. We then construct a table with a column for m-values, and for each fact type hooking to node m. <p> Note that the entire population satisfies the Conformity Rule. 4.2 Tree population In this section we introduce how tree representations are populated. Our way of populating tree representations is analogous with [5], <ref> [20] </ref> and [21], where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population P of a tree representation T assigns to each node in N a set of values of the corresponding domain. <p> population P (m) is a set of tuples, where each tuple assigns a unique value to m: 8 t 1 ;t 2 2 P (m) [t 1 (m) = t 2 (m) ) t 1 = t 2 ] This is referred to as the Partitioning Rule for populations (cf. <ref> [20] </ref>). The value t (m) is called the root value of tuple t. Furthermore, a tuple t 2 P (m) assigns to each descendant of node m a value, organised via the subtables structure resulting from the transformation .
Reference: [21] <author> H.J. Schek and M.H. Scholl. </author> <title> The relational model with relation-valued attributes. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 137-147, </pages> <year> 1986. </year>
Reference-contexts: The set H contains all objectifications: H = p 2 P j Base (p) 2 F 3 Tree representations In this section we introduce the nested relational view on information structures (see [5], [20] and <ref> [21] </ref>), as an extension of the Predicator Model in terms of an additional structuring of predicators. This (internal) view directly corresponds to an implementation structure of the (conceptual) information structure. <p> N as the set of nodes being the root of some tree: R = x 2 N fi 8 hm;ni2E [x 6= m] 3.2 Trees as nested relations The tree representation of an information structure is very close to the concept of nested relations, as introduced in [5], [20] and <ref> [21] </ref>. In order to demonstrate this, we show in this section how tree representations are translated into nested tables. Suppose node m has descendents as depicted in figure 3. We then construct a table with a column for m-values, and for each fact type hooking to node m. <p> Note that the entire population satisfies the Conformity Rule. 4.2 Tree population In this section we introduce how tree representations are populated. Our way of populating tree representations is analogous with [5], [20] and <ref> [21] </ref>, where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population P of a tree representation T assigns to each node in N a set of values of the corresponding domain.
Reference: [22] <editor> H.P. Schwefel. </editor> <title> Numerical Optimization of Computer Models. </title> <publisher> John Wiley and Sons, </publisher> <year> 1981. </year>
Reference-contexts: For other approaches, see for example [1], [3], [15], [19]. The concept of evolution was introduced in the context of formal (technical) systems twenty years ago ([18], [10]). Since then, this concept has become more powerful by a further formalization of biological evolution (e.g. [8], <ref> [22] </ref>). In so-called evolutionary (or genetic) algorithms, optimization is expressed as the evolution of (a group of) individuals with weak properties into (a group of) individuals with strong properties (e.g. [6], [12]). <p> The evolutionary optimization can be based on a suitable problem representation, with only a limited set of primitive operations (see e.g. [6], [8], [12], [13] and <ref> [22] </ref>). <p> The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to [24]. One approach exploits the idea of evolution of individuals (see [6], [8], [12], [13] and <ref> [22] </ref>). In general, evolution of individuals is described as follows: Given a set of individuals fT 1 ; :::; T i g, find a new individual T that combines the strong properties of T 1 ; :::; T i . <p> In this way, the notions of 'natural selection' and 'survival of the fittest' are simulated. For more details, we refer to [6], [8], [12], [13] and <ref> [22] </ref>. 6 Reproduction of individuals In this section, we introduce the primitive operations on individuals, that are necessary for describing the search strategies from the previous section. 6.1 Merging of individuals As a first operation we introduce the union of two disjoint individuals (i.e., having no predicators in common), denoted as
Reference: [23] <author> P.L. van der Spiegel, J.T.W. Driessen, P.D. Bruza, and Th.P. van der Weide. </author> <title> A Transaction Model for Hypertext. </title> <booktitle> In Proceedings of the Data Base and Expert System Applications Conference (DEXA 91), </booktitle> <pages> pages 281-286. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A generalization of our approach. Firstly, the computation of access time should be investigated, given an expected profile of access operations. Secondly, access paths (indices) should be integrated in the individuals. 3. Application of the approach in the optimization of CD-ROM databases (e.g. Hypertext <ref> [23] </ref>). This will be partly supported by the ESPRIT project APPED (2499). 4. Application of the approach in the implementation of so-called Evolving Information Systems (EIS [7]).
Reference: [24] <author> A. Torn and A. Zilinskas. </author> <title> Global Optimization. </title> <publisher> Springer Verlag, </publisher> <year> 1989. </year> <month> 14 </month>
Reference-contexts: A better approach is to use good heuristics to find the optimal individual. The typical problem of this approach, however, is to avoid local optima. For an in-depth study of global optimization approaches, we refer to <ref> [24] </ref>. One approach exploits the idea of evolution of individuals (see [6], [8], [12], [13] and [22]).
References-found: 24

