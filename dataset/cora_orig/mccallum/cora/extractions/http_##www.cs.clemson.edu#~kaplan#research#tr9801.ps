URL: http://www.cs.clemson.edu/~kaplan/research/tr9801.ps
Refering-URL: http://www.cs.clemson.edu/~kaplan/research/
Root-URL: http://www.cs.clemson.edu
Title: Why IDLs Are Not Ideal  
Author: Alan Kaplan John Ridgway and Jack C. Wileden 
Address: Clemson, SC 29634-1906 Amherst, MA 01003-4610  
Affiliation: Department of Computer Science Department of Computer Science Clemson University University of Massachusetts  
Abstract: The dominant approach to addressing heterogeneity, interoperability and legacy software components at present is based on the use of interface description languages (IDLs) such as the OMG/CORBA IDL. We believe that this approach has serious drawbacks. In this paper we outline our objections to the IDL-based approach, then describe ongoing research directed toward producing a superior alternative, which we refer to as the polylingual systems approach. We illustrate both our objections to the IDL-based approach and also our new polylingual systems approach with examples based on the IWSSD common case study. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Gary T. Leavens and Murali Sitaraman, Eds., </editor> <booktitle> Proceedings of the First Workshop on Foundations of Component-Based Systems, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1997. </year> <booktitle> http://www.cs.wvu.edu/resolve/FoCBS, In conjunction with European Software Engineering Conference and the Fifth ACM SIGSOFT Symposium on the Foundations of Software Engineering. </booktitle>
Reference-contexts: Along with this growth in importance has come increasing interest in conceptual and pragmatic foundations for interoperability and other aspects of component-based software development <ref> [1] </ref>. Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see [2] for an overview).
Reference: [2] <author> Jack C. Wileden, Alexader L. Wolf, William R. Rosenblatt, and Peri L. Tarr, </author> <title> Specification level interoperability, </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 5, </volume> <pages> pp. 7387, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Along with this growth in importance has come increasing interest in conceptual and pragmatic foundations for interoperability and other aspects of component-based software development [1]. Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see <ref> [2] </ref> for an overview). At present, however, strong industrial forces (OMG [3]) are pushing an approach (CORBA [4]) whose central feature is the use of a unifying type model [2, 5] or interface definition language (IDL) to mediate among interoperating components. <p> Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see [2] for an overview). At present, however, strong industrial forces (OMG [3]) are pushing an approach (CORBA [4]) whose central feature is the use of a unifying type model <ref> [2, 5] </ref> or interface definition language (IDL) to mediate among interoperating components. While seemingly sensible, IDL-based approaches actually have some significant drawbacks in practice.
Reference: [3] <institution> Object Management Group, A Discussion of the Object Management Architecture, </institution> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see [2] for an overview). At present, however, strong industrial forces (OMG <ref> [3] </ref>) are pushing an approach (CORBA [4]) whose central feature is the use of a unifying type model [2, 5] or interface definition language (IDL) to mediate among interoperating components. While seemingly sensible, IDL-based approaches actually have some significant drawbacks in practice.
Reference: [4] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> Aug. </month> <year> 1997, </year> <note> Revision 2.1. </note>
Reference-contexts: Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see [2] for an overview). At present, however, strong industrial forces (OMG [3]) are pushing an approach (CORBA <ref> [4] </ref>) whose central feature is the use of a unifying type model [2, 5] or interface definition language (IDL) to mediate among interoperating components. While seemingly sensible, IDL-based approaches actually have some significant drawbacks in practice. <p> The benefits of achieving these goals are clear, e.g., improved re-use and sharing, improved productivity, reduced development costs, etc. We examine and assess two alternative approaches to this problem in Sections 3 and 4. 3 IDL-based approach The IDL-based approach (e.g., <ref> [4, 10, 11, 5] </ref>) has become prevalent in recent years. The basic idea behind this approach is that shared components are described in a universal formalism (namely, an interface description language or IDL). Given an IDL specification for shared components, a tool then generates programming-language-specific source code.
Reference: [5] <author> Bill Janssen and Mike Spreitzer, </author> <title> ILU: Inter-language unification via object modules, </title> <booktitle> in Workshop on Multi-Language Object Models, </booktitle> <address> Portland, OR, </address> <month> Aug. </month> <year> 1994, </year> <note> In conjunction with OOPSLA'94. </note>
Reference-contexts: Various approaches to heterogeneity, interoperability and legacy software have been proposed and used in the past (see [2] for an overview). At present, however, strong industrial forces (OMG [3]) are pushing an approach (CORBA [4]) whose central feature is the use of a unifying type model <ref> [2, 5] </ref> or interface definition language (IDL) to mediate among interoperating components. While seemingly sensible, IDL-based approaches actually have some significant drawbacks in practice. <p> The benefits of achieving these goals are clear, e.g., improved re-use and sharing, improved productivity, reduced development costs, etc. We examine and assess two alternative approaches to this problem in Sections 3 and 4. 3 IDL-based approach The IDL-based approach (e.g., <ref> [4, 10, 11, 5] </ref>) has become prevalent in recent years. The basic idea behind this approach is that shared components are described in a universal formalism (namely, an interface description language or IDL). Given an IDL specification for shared components, a tool then generates programming-language-specific source code.
Reference: [6] <author> Alan Kaplan and Jack Wileden, </author> <title> Toward painless polylin-gual persistence, </title> <booktitle> in Seventh International Workshop on Persistent Object Systems, </booktitle> <address> Cape May, NJ, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: It also imposes potentially serious overhead on software developers trying to work around its limitations. We have been working on an alternative, IDL-free (or IDL-invisible), approach to interoperability that avoids these shortcomings, which we refer to as the polylingual systems approach <ref> [6, 7, 8] </ref>. In this paper, we seek to contribute to an improved understanding of the foundations of interoperability by offering an example-driven comparison of some aspects of these two approaches. <p> of this specification. 2.2 Classification of Interoperability Scenarios The time the decision is made to share software components is a critical issue in assessing the suitability of different interoperability approaches. 1 Three distinct timing 1 For a more detailed explanation of this issue, as well as other interoperability-related issues, see <ref> [6] </ref>. Equipment encapsulates information about equipment needed at meeting (e.g., overhead, projector, etc.). Location encapsulates information about locations of meetings (e.g., cities, countries, etc.). Date encapsulates a calendar date (i.e., month, day, year) and a time period (starting and ending time).
Reference: [7] <author> Daniel J. Barrett, Alan Kaplan, and Jack C. Wileden, </author> <title> Automated support for seamless interoperability in polylingual software systems, </title> <booktitle> in The Fourth Symposium on the Foundations of Software Engineering, </booktitle> <address> San Francisco, CA, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: It also imposes potentially serious overhead on software developers trying to work around its limitations. We have been working on an alternative, IDL-free (or IDL-invisible), approach to interoperability that avoids these shortcomings, which we refer to as the polylingual systems approach <ref> [6, 7, 8] </ref>. In this paper, we seek to contribute to an improved understanding of the foundations of interoperability by offering an example-driven comparison of some aspects of these two approaches. <p> Details of this process as it has been carried out using a version of PolySPINNER that accepts C++ and CLOS inputs are described and illustrated in <ref> [7] </ref>. 5 Status and directions In this paper we have sought to contribute to an improved understanding of the foundations of interoperability by offering an example-driven comparison of some aspects of two interoperability approaches.
Reference: [8] <author> Daniel J. Barrett, </author> <title> Polylingual Systems: An Approach to Seamless Interoperability, </title> <type> Ph.D. thesis, </type> <institution> University of Mas-sachusetts Amherst, </institution> <month> May </month> <year> 1998. </year>
Reference-contexts: It also imposes potentially serious overhead on software developers trying to work around its limitations. We have been working on an alternative, IDL-free (or IDL-invisible), approach to interoperability that avoids these shortcomings, which we refer to as the polylingual systems approach <ref> [6, 7, 8] </ref>. In this paper, we seek to contribute to an improved understanding of the foundations of interoperability by offering an example-driven comparison of some aspects of these two approaches. <p> The matching criteria used for unification are currently ad hoc but we are currently developing an implementation based on a formal model of the matching <ref> [8] </ref>. 4.1 The easiest case In this section we outline a simple extension to the PolySPIN framework and the PolySPINNER tool to assist in easy case polylingual programming. <p> To provide a principled foundation for the cross-language type compatibility checking implemented in our PolySPINNER tool we have developed an initial version of a formal model of cross-language type matching <ref> [8] </ref>. Improvements and enhancements to that model are also presently underway. Some of these are necessitated by the addition of a third language (Java) to the set supported by PolySPINNER. Others seek to expand the kinds of situations to which our approach can apply.
Reference: [9] <editor> IEEE, </editor> <booktitle> Proceedings of Ninth IEEE International Workshop on Software Specification and Design, </booktitle> <address> Ise-shima, Japan, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: Specifically, we illustrate both (some of) the shortcomings of the IDL-based approach and also our new polylingual systems approach with examples based on the IWSSD common case study. 2 Polylingual interoperability In this section, we briefly outline a partial instantiation of the IWSSD common case study <ref> [9] </ref> that we will use in illustrating the interoperability problem for component-based software systems. We then provide an overview of a simple classification of interoperability scenarios, which is useful for distinguishing three kinds of interoperability problems.
Reference: [10] <author> Kraig Brockschmidt, </author> <title> Inside OLE, 2nd Edition, </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: The benefits of achieving these goals are clear, e.g., improved re-use and sharing, improved productivity, reduced development costs, etc. We examine and assess two alternative approaches to this problem in Sections 3 and 4. 3 IDL-based approach The IDL-based approach (e.g., <ref> [4, 10, 11, 5] </ref>) has become prevalent in recent years. The basic idea behind this approach is that shared components are described in a universal formalism (namely, an interface description language or IDL). Given an IDL specification for shared components, a tool then generates programming-language-specific source code.
Reference: [11] <author> R.G.G. Cattell and Douglas Barry, Eds., </author> <title> The Object Database Standard: ODMG 2.0, </title> <booktitle> Series in Data Management Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1997. </year>
Reference-contexts: The benefits of achieving these goals are clear, e.g., improved re-use and sharing, improved productivity, reduced development costs, etc. We examine and assess two alternative approaches to this problem in Sections 3 and 4. 3 IDL-based approach The IDL-based approach (e.g., <ref> [4, 10, 11, 5] </ref>) has become prevalent in recent years. The basic idea behind this approach is that shared components are described in a universal formalism (namely, an interface description language or IDL). Given an IDL specification for shared components, a tool then generates programming-language-specific source code.
References-found: 11

