URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/sig96.ps.gz
Refering-URL: http://www.cs.unc.edu/~lin/papers.html
Root-URL: http://www.cs.unc.edu
Email: fgottscha,lin,manochag@cs.unc.edu  
Title: OBBTree: A Hierarchical Structure for Rapid Interference Detection  
Author: S. Gottschalk M. C. Lin D. Manocha 
Web: http://www.cs.unc.edu/geom/OBB/OBBT.html  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present a data structure and an algorithm for efficient and exact interference detection amongst complex models undergoing rigid motion. The algorithm is applicable to all general polygonal models. It pre-computes a hierarchical representation of models using tight-fitting oriented bounding box trees (OBBTrees). At runtime, the algorithm traverses two such trees and tests for overlaps between oriented bounding boxes based on a separating axis theorem, which takes less than 200 operations in practice. It has been implemented and we compare its performance with other hierarchical data structures. In particular, it can robustly and accurately detect all the contacts between large complex geometries composed of hundreds of thousands of polygons at interactive rates. CR Categories and Subject Descriptors: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling Additional Key Words and Phrases: hierarchical data structure, collision detection, shape approximation, contacts, physically-based modeling, virtual prototyping. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.Garica-Alonso, N.Serrano, and J.Flaquer. </author> <title> Solving the collision detection problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(3) </volume> <pages> 36-43, </pages> <year> 1994. </year>
Reference-contexts: Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing <ref> [1, 6, 8, 20] </ref> and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [2] <author> J. Arvo and D. Kirk. </author> <title> A survey of ray tracing acceleration techniques. In An Introduction to Ray Tracing, </title> <address> pages 201-262, </address> <year> 1989. </year>
Reference-contexts: They are currently restricted to objects whose motion can be expressed as a closed form function of time, which is rarely the case in most applications. Furthermore, their performance is too slow for interactive applications. OBBs have been extensively used to speed up ray-tracing and other interference computations <ref> [2] </ref>.
Reference: [3] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 19-28, </pages> <year> 1990. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21].
Reference: [4] <author> B. Barber, D. Dobkin, and H. Huhdanpaa. </author> <title> The quickhull algorithm for convex hull. </title> <type> Technical Report GCG53, </type> <institution> The Geometry Center, MN, </institution> <year> 1993. </year>
Reference-contexts: The convex hull is the smallest convex set containing all the points and efficient algorithms of O (n lg n) complexity and their robust implementations bounded polygons and bound the resulting groups. are available as public domain packages <ref> [4] </ref>. This is an improvement, but still suffers from a similar sampling problem: a small but very dense collection of nearly collinear vertices on the convex hull can cause the bounding box to align with that collection. <p> The test could also be easily implemented in hardware. Since most of the collision query time is spent in the overlap tests, any such optimization will significantly improve overall running time. The Qhull package <ref> [4] </ref> is optionally used for computing the OBB orientation. It has been found to be quite robust. If we do use Qhull, we have to ensure that the input to Qhull spans 3 dimensions.
Reference: [5] <author> N. Beckmann, H. Kriegel, R. Schneider, and B. Seeger. </author> <title> The r*-tree: An efficient and robust access method for points and rectangles. </title> <booktitle> Proc. SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 322-331, </pages> <year> 1990. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees [20, 28], R-trees and their variants <ref> [5] </ref>, trees based on S-bounds [7] etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more.
Reference: [6] <author> S. Cameron. </author> <title> Collision detection by four-dimensional intersection testing. </title> <booktitle> Proceedings of InternationalConference on Robotics and Automation, </booktitle> <pages> pages 291-302, </pages> <year> 1990. </year>
Reference-contexts: Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing <ref> [1, 6, 8, 20] </ref> and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [7] <author> S. Cameron. </author> <title> Approximation hierarchies and s-bounds. </title> <booktitle> In Proceedings. Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 129-137, </pages> <address> Austin, TX, </address> <year> 1991. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees [20, 28], R-trees and their variants [5], trees based on S-bounds <ref> [7] </ref> etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more.
Reference: [8] <author> J. F. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Trans. PAMI, </journal> <volume> 8 </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing <ref> [1, 6, 8, 20] </ref> and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [9] <author> B. Chazelle and D. P. Dobkin. </author> <title> Intersection of convex objects in two and three dimensions. </title> <journal> J. ACM, </journal> <volume> 34 </volume> <pages> 1-27, </pages> <year> 1987. </year>
Reference-contexts: In computational geometry, many theoretically efficient algorithms have been proposed for polyhedral objects. Most of them are either restricted to static environments, convex objects, or only polyhedral objects undergoing rigid motion <ref> [9] </ref>. However, their practical utility is not clear as many of them have not been implemented in practice.
Reference: [10] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. <p> Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes <ref> [10, 21] </ref>. However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. Algorithms based on interval arithmetic and bounds on functions have been described in [12, 13, 19]. They are able to find all the contacts accurately.
Reference: [11] <author> R.O. Duda and P.E. Hart. </author> <title> Pattern Classification and Scene Analysis. </title> <publisher> John Wiley and Sons, </publisher> <year> 1973. </year>
Reference-contexts: We triangulate all polygons composed of more than three edges. The OBB computation algorithm makes use of first and second order statistics summarizing the vertex coordinates. They are the mean, , and the covariance matrix, C, respectively <ref> [11] </ref>.
Reference: [12] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference-contexts: However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. Algorithms based on interval arithmetic and bounds on functions have been described in <ref> [12, 13, 19] </ref>. They are able to find all the contacts accurately. However, their practical utility is not clear at the moment. They are currently restricted to objects whose motion can be expressed as a closed form function of time, which is rarely the case in most applications.
Reference: [13] <author> J. Snyder et. al. </author> <title> Interval methods for multi-point collisions between time dependent curved surfaces. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 321-334, </pages> <year> 1993. </year>
Reference-contexts: However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. Algorithms based on interval arithmetic and bounds on functions have been described in <ref> [12, 13, 19] </ref>. They are able to find all the contacts accurately. However, their practical utility is not clear at the moment. They are currently restricted to objects whose motion can be expressed as a closed form function of time, which is rarely the case in most applications.
Reference: [14] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedurefor computing the distance between objects in three-dimensionalspace. </title> <journal> IEEE J. Robotics and Automation, </journal> <volume> vol RA-4:193-203, </volume> <year> 1988. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. <p> A simple algorithm for finding the overlap status of two OBBs tests all edges of one box for intersection with any of the faces of the other box, and vice-versa. Since OBBs are convex polytopes, algorithms based on linear programming [27] and closest features computation <ref> [14, 21] </ref> can be used as well. A general purpose interference detection test between OBBs and convex polyhedron is presented in [16]. <p> The latter include an efficient implementation of closest features computation between convex polytopes <ref> [14] </ref> and a fast implementation of linear programming based on Seidel's algorithm [33]. Note that the last two implementations have been optimized for general convex polytopes, but not for boxes. All these algorithms are much faster than performing 144 edge-face intersections.
Reference: [15] <author> S. Gottschalk. </author> <title> Separating axis theorem. </title> <type> Technical Report TR96-024, </type> <institution> Department of Computer Science, UNC Chapel Hill, </institution> <year> 1996. </year>
Reference-contexts: A consequence of this is that two convex polytopes are disjoint iff there exists a separating axis orthogonal to a face of either polytope or orthogonal to an edge from each polytope. A proof of this basic theorem is given in <ref> [15] </ref>. Each box has 3 unique face orientations, and 3 unique edge directions. This leads to 15 potential separating axes to test (3 faces from one box, 3 faces from the other box, and 9 pairwise combinations of edges).
Reference: [16] <author> N. Greene. </author> <title> Detecting intersection of a rectangular solid and a convex polyhedron. </title> <booktitle> In Graphics Gems IV, </booktitle> <pages> pages 74-82. </pages> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: Since OBBs are convex polytopes, algorithms based on linear programming [27] and closest features computation [14, 21] can be used as well. A general purpose interference detection test between OBBs and convex polyhedron is presented in <ref> [16] </ref>.
Reference: [17] <author> J. K. Hahn. </author> <title> Realistic animation of rigid bodies. </title> <journal> Computer Graphics, </journal> <volume> 22(4):pp. </volume> <pages> 299-308, </pages> <year> 1988. </year>
Reference-contexts: In such cases, their performance slows down considerably and they become a major bottleneck in the simulation, as stated in <ref> [17] </ref>. In computational geometry, many theoretically efficient algorithms have been proposed for polyhedral objects. Most of them are either restricted to static environments, convex objects, or only polyhedral objects undergoing rigid motion [9]. However, their practical utility is not clear as many of them have not been implemented in practice.
Reference: [18] <author> M. Held, J.T. Klosowski, and J.S.B. Mitchell. </author> <title> Evaluation of collision detection methods for virtual reality fly-throughs. </title> <booktitle> In Canadian Conference on Computational Geometry, </booktitle> <year> 1995. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes [3, 10, 14, 21, 23, 33] and based on line-stabbing and convex differences for general polyhedral models <ref> [18, 26, 29] </ref>. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. <p> Most of them are based on spheres or AABBs. They have been applied to a number of complex environments. However, there are no standard benchmarks available to compare different algorithms and implementations. As a result, it is non-trivial to compare two algorithms and their implementations. More recently, <ref> [18] </ref> have compared different algorithms (based on line-stabbing and AABBs) on models composed of tens of thousands of polygons. On an SGI Indigo 2 Extreme, the algorithms with the best performance are able to compute all the contacts between the models in about 1=7 1=5 of a second.
Reference: [19] <author> B. V. Herzen, A. H. Barr, and H. R. Zatz. </author> <title> Geometric collisions for time-dependent parametric surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 39-48, </pages> <year> 1990. </year>
Reference-contexts: However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. Algorithms based on interval arithmetic and bounds on functions have been described in <ref> [12, 13, 19] </ref>. They are able to find all the contacts accurately. However, their practical utility is not clear at the moment. They are currently restricted to objects whose motion can be expressed as a closed form function of time, which is rarely the case in most applications.
Reference: [20] <author> P. M. Hubbard. </author> <title> Interactive collision detection. </title> <booktitle> In Proceedings of IEEE Symposium on Research Frontiers in Virtual Reality, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees <ref> [20, 28] </ref>, R-trees and their variants [5], trees based on S-bounds [7] etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more. <p> Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing <ref> [1, 6, 8, 20] </ref> and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [21] <author> M.C. Lin. </author> <title> Efficient Collision Detection for Animationand Robotics. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. <p> Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes <ref> [10, 21] </ref>. However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations. Algorithms based on interval arithmetic and bounds on functions have been described in [12, 13, 19]. They are able to find all the contacts accurately. <p> A simple algorithm for finding the overlap status of two OBBs tests all edges of one box for intersection with any of the faces of the other box, and vice-versa. Since OBBs are convex polytopes, algorithms based on linear programming [27] and closest features computation <ref> [14, 21] </ref> can be used as well. A general purpose interference detection test between OBBs and convex polyhedron is presented in [16].
Reference: [22] <author> M.C. Lin and Dinesh Manocha. </author> <title> Fast interference detection between geometric models. </title> <journal> The Visual Computer, </journal> <volume> 11(10) </volume> <pages> 542-561, </pages> <year> 1995. </year>
Reference: [23] <author> M. Moore and J. Wilhelms. </author> <title> Collision detection and response for computer animation. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 289-298, </pages> <year> 1988. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21].
Reference: [24] <author> B. Naylor, J. Amanatides, and W. Thibault. </author> <title> Merging bsp trees yield polyhedral modeling results. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 115-124, </pages> <year> 1990. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees [20, 28], R-trees and their variants [5], trees based on S-bounds [7] etc. Other spatial representations are based on BSP's <ref> [24] </ref> and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [25] <author> J. O'Rourke. </author> <title> Finding minimal enclosing boxes. </title> <journal> Internat. J. Comput. Inform. Sci., </journal> <volume> 14 </volume> <pages> 183-199, </pages> <year> 1985. </year>
Reference-contexts: main issues arise: how can we compute a tight-fitting OBB enclosing a model and how quickly can we test two such boxes for overlap? For polygonal models, the minimal volume enclosing bound ing box can be computed in O (n 3 ) time, where n is the number of vertices <ref> [25] </ref>. However, it is practical for only small models. Simple incremental algorithms of linear time complexity are known for computing a minimal enclosing ellipsoid for a set of points [36]. The axes of the minimal ellipsoid can be used to compute a tight-fitting OBB.
Reference: [26] <author> M. Ponamgi, D. Manocha, and M. Lin. </author> <title> Incremental algorithms for collision detection between general solid models. </title> <booktitle> In Proc. of ACM/SiggraphSymposium on Solid Modeling, </booktitle> <pages> pages 293-304, </pages> <year> 1995. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes [3, 10, 14, 21, 23, 33] and based on line-stabbing and convex differences for general polyhedral models <ref> [18, 26, 29] </ref>. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations.
Reference: [27] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: A simple algorithm for finding the overlap status of two OBBs tests all edges of one box for intersection with any of the faces of the other box, and vice-versa. Since OBBs are convex polytopes, algorithms based on linear programming <ref> [27] </ref> and closest features computation [14, 21] can be used as well. A general purpose interference detection test between OBBs and convex polyhedron is presented in [16].
Reference: [28] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 3324-3329, </pages> <year> 1994. </year>
Reference-contexts: Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees <ref> [20, 28] </ref>, R-trees and their variants [5], trees based on S-bounds [7] etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more. <p> Just based on the model complexity, we are able to handle models composed of hundreds of thousands of polygons (with multiple parallel contacts) in about 1=25 1=75 of a second. We also compared our algorithm with an implementation of sphere tree based on the algorithm presented in <ref> [28] </ref>. A very preliminary comparison indicates one order of magnitude improvement. More comparisons and experiments are planned in the near future. 7.4 RAPID and benchmarks Our implementation of our algorithms is available as a software package called RAPID (Rapid and Accurate Polygon Interference Detection). It can be obtained from: http://www.cs.unc.edu/geom/OBB/OBBT.html.
Reference: [29] <author> A. Rappoport. </author> <title> The extended convex differences tree (ecdt) representation for n-dimensional polyhedra. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(3) </volume> <pages> 227-41, </pages> <year> 1991. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes [3, 10, 14, 21, 23, 33] and based on line-stabbing and convex differences for general polyhedral models <ref> [18, 26, 29] </ref>. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. However, these algorithms and systems are restrictive in terms of application to general polygonal models with unstructured representations.
Reference: [30] <author> S. Rubin and T. Whitted. </author> <title> A 3-dimensional representation for fast rendering of complex scenes. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 110-116, </pages> <year> 1980. </year>
Reference-contexts: However, the constant factor in front of the linear term for this algorithm is very high (almost 3 fi 10 5 ) and thereby making it almost impractical to use for large models. As for ray-tracing, algorithms using structure editors <ref> [30] </ref> and modeling hierarchies [35] have been used to construct hierarchies of OBBs. However, they cannot be directly applied to compute tight-fitting OBBs for large unstructured models.
Reference: [31] <author> H. Samet. </author> <title> Spatial Data Structures: Quadtree, Octrees and Other Hierarchical Methods. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees <ref> [31] </ref>, sphere trees [20, 28], R-trees and their variants [5], trees based on S-bounds [7] etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions [34], spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more.
Reference: [32] <author> T.W. Sederberg and S.R. Parry. </author> <title> Comparison of three curve intersection algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(1) </volume> <pages> 58-63, </pages> <year> 1986. </year>
Reference-contexts: Some of the future work includes its specialization and extension to other applications. These include ray-tracing, interference detection between curved surfaces, view frustum culling and deformable models. As far as curve and surface intersections are concerned, current approaches are based on algebraic methods, subdivision methods and interval arithmetic <ref> [32] </ref>. Algebraic methods are restricted to low degree intersections. For high degree curve intersections, algorithms based on interval arithmetic have been found to be the fastest [32]. Such algorithms compute a decomposition of the curve in terms of AABBs. It will be worthwhile to try OBBs. <p> As far as curve and surface intersections are concerned, current approaches are based on algebraic methods, subdivision methods and interval arithmetic <ref> [32] </ref>. Algebraic methods are restricted to low degree intersections. For high degree curve intersections, algorithms based on interval arithmetic have been found to be the fastest [32]. Such algorithms compute a decomposition of the curve in terms of AABBs. It will be worthwhile to try OBBs. This would involve subdividing the curve, computing tight-fitting OBBs for each segment, and checking them for overlaps. In terms of view frustum culling, most applications use hierarchies based on AABBs.
Reference: [33] <author> R. Seidel. </author> <title> Linear programmingand convexhulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on ComputationalGeometry, pages 211-215,Berkeley, </booktitle> <address> California, </address> <year> 1990. </year>
Reference-contexts: However, their practical utility is not clear as many of them have not been implemented in practice. Other approaches are based on linear programming and computing closest pairs for convex polytopes <ref> [3, 10, 14, 21, 23, 33] </ref> and based on line-stabbing and convex differences for general polyhedral models [18, 26, 29]. Algorithms utilizing spatial and temporal coherence have been shown to be effective for large environments represented as union of convex polytopes [10, 21]. <p> The latter include an efficient implementation of closest features computation between convex polytopes [14] and a fast implementation of linear programming based on Seidel's algorithm <ref> [33] </ref>. Note that the last two implementations have been optimized for general convex polytopes, but not for boxes. All these algorithms are much faster than performing 144 edge-face intersections. We report the average time for checking overlap between two OBBs in Table 2.
Reference: [34] <editor> W.Bouma and G.Vanecek.Collision detection and analysis in a physically based simulation. </editor> <booktitle> ProceedingsEurographicsworkshop on animationand simulation, </booktitle> <pages> pages 191-203, </pages> <year> 1991. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [31], sphere trees [20, 28], R-trees and their variants [5], trees based on S-bounds [7] etc. Other spatial representations are based on BSP's [24] and its extensions to multi-space partitions <ref> [34] </ref>, spatial representations based on space-time bounds or four-dimensional testing [1, 6, 8, 20] and many more. All of these hierarchical methods do very well in performing rejection tests", whenever two objects are far apart.
Reference: [35] <author> H. Weghorst, G. Hooper, and D. Greenberg. </author> <title> Improvedcomputational methods for ray tracing. </title> <journal> ACM Transactions on Graphics, </journal> <pages> pages 52-69, </pages> <year> 1984. </year>
Reference-contexts: However, the constant factor in front of the linear term for this algorithm is very high (almost 3 fi 10 5 ) and thereby making it almost impractical to use for large models. As for ray-tracing, algorithms using structure editors [30] and modeling hierarchies <ref> [35] </ref> have been used to construct hierarchies of OBBs. However, they cannot be directly applied to compute tight-fitting OBBs for large unstructured models. <p> The basic cost function was taken from <ref> [35] </ref>, who used it for analyzing hierarchical methods for ray tracing.

References-found: 35

