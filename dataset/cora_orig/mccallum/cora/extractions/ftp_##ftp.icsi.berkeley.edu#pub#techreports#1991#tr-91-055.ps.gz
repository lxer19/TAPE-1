URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1991/tr-91-055.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1991.html
Root-URL: http://www.icsi.berkeley.edu
Title: Potentiality of Parallelism in Logic  
Author: Franz Kurfe 
Note: Preprint from: Wrightson, G and Fronhofer, B.; Parallelization in Inference Systems. Springer Verlag  
Pubnum: TR-91-055  
Abstract: The processing of knowledge is becoming a major area of applications for computer systems. In contrast to data processing, the current stronghold of computer use, where well-structured data are manipulated through well-defined algorithms, the treatment of knowledge requires more intricate representation schemes as well as refined methods to manipulate the represented information. Among the many candidates proposed for representing and processing knowledge, logic has a number of important advantages, although it also suffers from some drawbacks. One of the advantages is the availability of a strong formal background with a large assortment of techniques for dealing with the representation and processing of knowledge. A considerable disadvantage so far is the amount and complexity of computation required to perform even simple tasks in the area of logic. One promising approach to overcome this problem is the use of parallel processing techniques, enabling an ensemble of processing elements to cooperate in the solution of a problem. The goal of this paper is to investigate the combination of parallelism and logic. 
Abstract-found: 1
Intro-found: 1
Reference: [Ajjanagadde, 1990] <author> Ajjanagadde, V. </author> <year> (1990). </year> <title> Reasoning with function symbols in a connectionist system. </title> <type> Technical report, </type> <institution> Department of Computer and Information Science, University of Pennsylvania. </institution>
Reference: [Ajjanagadde and Shastri, 1991] <author> Ajjanagadde, V. and Shastri, L. </author> <year> (1991). </year> <title> Rules and variables in neural nets. </title> <journal> Neural Computation, </journal> <volume> 3 </volume> <pages> 121-134. </pages>
Reference: [Ali, 1987] <author> Ali, K. </author> <year> (1987). </year> <title> OR-parallel execution of Prolog on a multi-sequential machine. </title> <booktitle> Parallel Programming, </booktitle> <pages> 15(3). </pages>
Reference: [Amthor, 1989] <author> Amthor, R. </author> <year> (1989). </year> <title> Simulation eines Beweisers auf einer Multi-Prozessor Architek-tur. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Aso and Onai, 1983] <author> Aso, M. and Onai, R. </author> <year> (1983). </year> <title> XP's: An Extended OR-Parallel Prolog System. </title> <type> Technical Report TR 023, </type> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Auburn, 1989] <author> Auburn (1989). </author> <title> Parallel logic programming architectures: </title> <type> Final report. Technical report, </type> <institution> Department of Computer Science and Engineering, Auburn University, Auburn, AL. </institution>
Reference: [Bachinger, 1987] <author> Bachinger, J. </author> <year> (1987). </year> <title> Implementierung eines parallelen Theorembeweisers und Simulation der Ausfuhrung auf einer Mehrprozessormaschine. </title> <type> Master's thesis, </type> <institution> Institut fur Infor-matik, Technische Universitat Munchen. </institution>
Reference: [Ballard, 1986] <author> Ballard, D. </author> <year> (1986). </year> <title> Parallel Logical Inference and Energy Minimization. </title> <type> Technical Report TR 142, </type> <institution> Computer Science Department, University of Rochester. </institution>
Reference: [Bansal and Potter, 1990] <author> Bansal, A. and Potter, J. </author> <year> (1990). </year> <title> A data-parallel model for efficient execution of logic programs on associative supercomputers. </title> <booktitle> In North American Conference on Logic Programming. </booktitle>
Reference: [Barnden, 1988] <author> Barnden, J. </author> <year> (1988). </year> <title> Simulations of Conposit, a Supra-Connectionist Architecture for Commonsense Reasoning. </title> <booktitle> In 2nd Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <address> Fairfax, VA., Las Cruces. </address>
Reference: [Baron et al., 1988] <author> Baron, U., Chassin, J., and Syre, J. </author> <year> (1988). </year> <title> The Parallel ECRC Prolog System PEPSys: An overview and evaluation results. </title> <booktitle> In FGCS '88. </booktitle> <pages> 11 </pages>
Reference: [Baron et al., 1987] <author> Baron, U., Ing, B., Ratcliffe, M., and Robert, P. </author> <year> (1987). </year> <title> A Distributed Archi--tecture for the PEPSys Parallel Logic Programming System. </title> <type> Technical report, </type> <institution> ECRC Computer Architecture Group, Munchen. </institution>
Reference: [Beer, 1989] <author> Beer, J. </author> <year> (1989). </year> <title> Concepts, Design, and Performance Analysis of a Parallel Prolog Machine, </title> <booktitle> volume 404 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer. </publisher>
Reference-contexts: Pipelining-Parallelism Instead of evaluating the subgoals in a clause fully in parallel, they can be processed in a pipelined fashion <ref> [Beer and Giloi, 1987, Beer, 1989] </ref>. The advantage is the full compatibility with the standard Prolog evaluation mechanism, which proceeds from left to right in the body of a clause.
Reference: [Beer and Giloi, 1987] <author> Beer, J. and Giloi, W. K. </author> <year> (1987). </year> <title> POPE A Parallel-Operating Prolog Engine. </title> <journal> Future Generations Computer Systems, </journal> <pages> pages 83-92. </pages>
Reference-contexts: Pipelining-Parallelism Instead of evaluating the subgoals in a clause fully in parallel, they can be processed in a pipelined fashion <ref> [Beer and Giloi, 1987, Beer, 1989] </ref>. The advantage is the full compatibility with the standard Prolog evaluation mechanism, which proceeds from left to right in the body of a clause.
Reference: [Ben-Ari, 1984] <author> Ben-Ari, M. </author> <year> (1984). </year> <title> Principles of Concurrent Programming. </title> <publisher> Prentice Hall. </publisher>
Reference: [Bibel, 1987] <author> Bibel, W. </author> <year> (1987). </year> <title> Automated Theorem Proving. </title> <publisher> Vieweg, </publisher> <address> Braunschweig, Wiesbaden, </address> <note> second edition. </note>
Reference-contexts: Spanning Sets One important advantage of the spanning set concept as well is to make the run-time management of bindings simpler. This is based on a statical analysis of the program with the goal of identifying parts of the program (spanning sets of connections) which represent alternative solutions <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref> (see also the contribution of Wang, Marsh and Lavington in this volume). These solutions then can be computed completely independent of each other, without the necessity of maintaining complex run-time environments for variable bindings. <p> The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved. The second restriction can be overcome by choosing a different evaluation mechanism <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. Unification Competition Conceptually similar to competition in the inference mechanism, competition can be used for unification by applying different unification mechanisms to one and the same term pair.
Reference: [Bibel and Aspetsberger, 1985] <author> Bibel, W. and Aspetsberger, K. </author> <year> (1985). </year> <title> A Bibliography on Parallel Inference Machines. </title> <journal> Symbolic Computation, </journal> <volume> 1(1) </volume> <pages> 115-118. </pages>
Reference: [Bibel and Buchberger, 1984] <author> Bibel, W. and Buchberger, B. </author> <year> (1984). </year> <title> Towards a Connection Machine for Logic Inference. </title> <journal> Future Generation Computer Systems, </journal> <volume> 1(3) </volume> <pages> 177-188. </pages>
Reference: [Bibel and Jorrand, 1986] <editor> Bibel, W. and Jorrand, P., editors (1986). </editor> <booktitle> Fundamentals of Artificial Intelligence, volume 232 of Lecture Notes in Computer Science, </booktitle> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference: [Bibel et al., 1987] <author> Bibel, W., Kurfe, F., Aspetsberger, K., Hintenaus, P., and Schumann, J. </author> <year> (1987). </year> <title> Parallel inference machines. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987], </year> <pages> pages 185-226. </pages>
Reference: [Bic, 1984] <author> Bic, L. </author> <year> (1984). </year> <title> A Data-Driven Model for Parallel Interpretation of Logic Programs. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems 1984, </booktitle> <pages> pages 517-523. </pages> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Bitar and Chen, 1990] <author> Bitar, P. and Chen, C. </author> <year> (1990). </year> <title> The OR+AND Modeling Framework for Parallel Prolog Models. </title> <type> UCB/CSD 90/604, </type> <institution> Computer Science Division, University of California, Berkeley, </institution> <address> CA 94720. </address>
Reference: [Blelloch, 1989] <author> Blelloch, G. </author> <year> (1989). </year> <title> Scans as primitive parallel operations. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(11) </volume> <pages> 1526-1538. </pages>
Reference: [Blelloch and Sabot, 1990] <author> Blelloch, G. and Sabot, G. </author> <year> (1990). </year> <title> Compiling collection-oriented languages onto massively parallel computers. </title> <journal> Parallel and Distributed Computing, </journal> <volume> 8(2) </volume> <pages> 119-134. </pages>
Reference: [Bock, 1989] <author> Bock, K.-H. </author> <year> (1989). </year> <title> Studying an application for a parallel logic programming system. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Bode, 1991] <editor> Bode, A., editor (1991). </editor> <booktitle> Distributed Memory Computing. 2nd European Conference, EDMCC2, number 487 in Lecture Notes in Computer Science, </booktitle> <address> Munich, FRG. Apringer. </address>
Reference: [Borgwardt, 1984] <author> Borgwardt, P. </author> <year> (1984). </year> <title> Parallel Prolog Using Stack Segments on Shared Memory Multiprocessors. </title> <booktitle> In International Symposium On Logic Programming, </booktitle> <address> Atlantic City, NJ. </address>
Reference: [Bose et al., 1989] <author> Bose, S., Clarke, E. M., Long, D. E., and Spiro, M. </author> <year> (1989). </year> <note> Parthenon. Technical report, LICS. </note>
Reference: [Brogi and Gorrieri, 1989] <author> Brogi, A. and Gorrieri, R. </author> <year> (1989). </year> <title> A Distributed, Net Oriented Semantics for Delta Prolog. </title> <booktitle> In TAPSOFT '89, </booktitle> <pages> pages 162-177. </pages>
Reference: [Caferra and Jorrand, 1985] <author> Caferra, R. and Jorrand, P. </author> <year> (1985). </year> <title> Unification with Refined Linearity Check as a Network of Parallell Processes. </title> <type> Technical report, </type> <institution> LIFIA, Laboratoire d'Informatique Fondamentale et d'Intelligence Artificielle IMAG, Grenoble, France. </institution> <month> 12 </month>
Reference: [Chandy and Misra, 1988] <author> Chandy, K. M. and Misra, J. </author> <year> (1988). </year> <title> Parallel Program Design. </title> <publisher> Addison--Wesley, </publisher> <address> Reading, MA. </address>
Reference: [Chassin de Kergommeaux et al., 1988] <author> Chassin de Kergommeaux, J., Baron, U., Rapp, W., and Ratcliffe, M. </author> <year> (1988). </year> <title> Performance Analysis of Parallel Prolog: A Correlated Approach. </title> <type> Technical report, </type> <institution> ECRC Munich. </institution>
Reference: [Chassin de Kergommeaux et al., 1989] <author> Chassin de Kergommeaux, J., Codognet, P., Robert, P., and Syre, J.-C. </author> <year> (1989). </year> <title> Une programmation logique parallele: </title> <journal> premiere partie: Langages gardes. Technique et Science Informatiques, </journal> <volume> 8 </volume> <pages> 205-224. </pages>
Reference: [Cheese, 1991] <author> Cheese, A. </author> <year> (1991). </year> <title> Implementing committed-choice logic programming languages on distributed memory computers. </title> <booktitle> In [Bode, </booktitle> <year> 1991]. </year>
Reference: [Chen et al., 1988] <author> Chen, C., Singhal, A., and Patt, Y. N. </author> <year> (1988). </year> <title> PUP: An Architecture to Exploit Parallel Unification in Prolog. </title> <type> Technical Report UCB/CSD 88/414, </type> <institution> University of California, Computer Science Department), Berkeley, </institution> <address> CA 94720. </address>
Reference: [Chengzheng and Yungui, 1990] <author> Chengzheng, S. and Yungui, C. </author> <year> (1990). </year> <title> The OR-forest-based parallel execution model of logic programs. </title> <journal> Future Generation Computer Systems, </journal> <volume> 6(1) </volume> <pages> 25-34. </pages>
Reference: [Chu and Itano, 1984] <author> Chu, Y. and Itano, K. </author> <year> (1984). </year> <title> Organisation of a Parallel PROLOG Machine. </title> <booktitle> Proc. Intern. Workshop on HLCA. </booktitle>
Reference: [Ciepielewski and Haridi, 1984a] <author> Ciepielewski, A. and Haridi, S. </author> <year> (1984a). </year> <title> Control of Activities in the OR-parallel Token Machine. </title> <type> Technical report, </type> <institution> Department Of Telecommunications and Comping Systems, Royal Institute of Technology, Stockholm. </institution>
Reference: [Ciepielewski and Haridi, 1984b] <author> Ciepielewski, A. and Haridi, S. </author> <year> (1984b). </year> <title> Execution of Bagof on the OR-parallel Token Machine. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 551-562, </pages> <address> Tokyo. </address>
Reference: [Citrin, 1988] <author> Citrin, W. </author> <year> (1988). </year> <title> Parallel Unification Scheduling in Prolog. </title> <type> Technical Report UCB/CSD 88/415, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA. </address>
Reference: [Clark and Gregory, 1981] <author> Clark, K. and Gregory, S. </author> <year> (1981). </year> <title> A Relational Language for Parallel Programming. </title> <booktitle> In ACM Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 171-178. </pages>
Reference: [Clark and Gregory, 1984] <author> Clark, K. and Gregory, S. </author> <year> (1984). </year> <booktitle> Notes on Systems Programming in Parlog. Proc. Of the International Conference On Fifth Generation Computer Systems, </booktitle> <pages> pages 299-306. </pages>
Reference: [Clark and Gregory, 1986] <author> Clark, K. and Gregory, S. </author> <year> (1986). </year> <title> PARLOG: Parallel Programming in Logic. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> 1986(8) 1-49. 
Reference: [Clark, 1988] <author> Clark, K. L. </author> <year> (1988). </year> <title> Parlog and Its Applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14 </volume> <pages> 1792-1804. </pages>
Reference: [Colmerauer, 1982] <author> Colmerauer, A. </author> <year> (1982). </year> <title> Prolog and Infinite Trees. </title> <booktitle> Logic Programming, </booktitle> <pages> pages 231-251. </pages>
Reference-contexts: Occur Check The task of the occur check is to identify situations where a term is substituted by a subterm of itself, resulting in cyclic substitutions [Plaisted, 1984]. Whereas it is possible to define a semantics which allows the occurrence of infinite substitutions <ref> [Colmerauer, 1982] </ref>, or in many situations to just neglect potential problems and omit an occur check (as in many Prolog implementations), there are cases where cyclic substitutions should not be accepted.
Reference: [Conery, 1983] <author> Conery, J. S. </author> <year> (1983). </year> <title> The AND/OR Process Model for Parallel Execution of Logic Programs. </title> <type> PhD thesis, </type> <institution> University of California, Irvine. </institution> <type> Technical report 204, </type> <institution> Department of Information and Computer Science. </institution>
Reference: [Corbin and Bidoit, 1983] <author> Corbin, J. and Bidoit, M. </author> <year> (1983). </year> <title> A Rehabilitation of Robinson's Unification Algorithm. </title> <booktitle> Information Processing '83, </booktitle> <pages> pages 909-914. 13 </pages>
Reference-contexts: It is questionable, however, if this kind of parallelism is very useful since the variety of unification mechanisms is not too large, and performance differences largely can be attributed to the term size, and not so much to the internal structure of the terms <ref> [Corbin and Bidoit, 1983] </ref>. Unification Cooperation The use of cooperation during unification has a close affinity to unification competition described above: it seems feasible, but with current techniques probably does not result in substantial advantages.
Reference: [Corsini et al., 1989a] <author> Corsini, P., Frosini, G., and Rizzo, L. </author> <year> (1989a). </year> <title> Implementing a Parallel PROLOG Interpreter by Using OCCAM and Transputers. </title> <journal> Microprocessors and Microsystems, </journal> <volume> 13(4) </volume> <pages> 271-279. </pages>
Reference: [Corsini et al., 1989b] <author> Corsini, P., Frosini, G., and Speranza, G. </author> <year> (1989b). </year> <title> The Parallel Interpretation of Logic Programs in Distributed Architectures. </title> <journal> Computer Journal, </journal> <volume> 32 </volume> <pages> 29-35. </pages>
Reference: [Crammond, 1985] <author> Crammond, J. </author> <year> (1985). </year> <title> A Comparative Study of Unification Algorithms for OR-Parallel Execution of Logic Languages. </title> <journal> IEEE, </journal> <pages> pages 131-138. </pages>
Reference: [Crammond, 1986] <author> Crammond, J. A. </author> <year> (1986). </year> <title> An Execution Model for Committed-Choice Nondeterministic Languages. </title> <booktitle> In Symposium on Logic Programming '86, </booktitle> <pages> pages 148-158. </pages>
Reference: [Crowl and LeBlanc, 1991] <author> Crowl, L. A. and LeBlanc, T. J. </author> <year> (1991). </year> <title> Architectural adaptability in parallle programming via control abstraction. </title> <type> Technical Report 359, </type> <institution> Department of Computer Science, University of Rochester, Rochester, </institution> <address> NY 14627. </address>
Reference-contexts: A partial solution to this dilemma might lie in the use of control abstraction, which follows a strategy similar to data abstraction <ref> [Crowl and LeBlanc, 1991] </ref>. The basic idea is to provide a safe way to introduce explicit, user-definable control constructs for parallelism.
Reference: [Cunha et al., 1989] <author> Cunha, J. C., Ferreira, M. C., and Moniz Pereira, L. </author> <year> (1989). </year> <title> Programming in Delta Prolog. </title> <booktitle> In Logic Programming Conference '89. </booktitle>
Reference: [Darlington and Reeve, 1983] <author> Darlington, J. and Reeve, M. </author> <year> (1983). </year> <title> ALICE and the Parallel Evaluation of Logic Programs. </title> <booktitle> 10th Annual International Symposium on Computer Architecture. </booktitle>
Reference: [Davison, 1989] <author> Davison (1989). Polka: </author> <title> A parlog object oriented language. </title> <type> Technical report, </type> <institution> Dept. of Computing, Imperial College, London, </institution> <note> UK. </note> <author> [de Boer and Palamidessi, 1990a] de Boer, F. S. and Palamidessi, C. </author> <year> (1990a). </year> <title> Concurrent logic programming: Asynchronism and language comparison. </title> <type> Technical Report TR - 6/90, </type> <institution> University of Pisa, Department of Computer Science, 56100 Pisa, Italy. [de Boer and Palamidessi, </institution> <note> 1990b] de Boer, </note> <author> F. S. and Palamidessi, C. </author> <year> (1990b). </year> <title> A fully abstract model for concurrent logic languages. </title> <type> Technical Report CS-R9046, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, The Netherlands. </address>
Reference: [De Nicola and Ferrari, 1990] <author> De Nicola, R. and Ferrari, G. </author> <year> (1990). </year> <title> Observational logics and con-currency models. </title> <type> Technical Report TR - 10/90, </type> <institution> University of Pisa, Department of Computer Science, 56100 Pisa, Italy. </institution>
Reference: [Debray, 1989] <author> Debray, S. K. </author> <year> (1989). </year> <title> Static inference of modes and data dependencies in logic programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(3) </volume> <pages> 419-450. </pages>
Reference: [Debray et al., 1990] <author> Debray, S. K., Lin, N.-W., and Hermenegildo, M. </author> <year> (1990). </year> <title> Task granularity analysis in logic programs. </title> <type> Technical Report TR 90-16, </type> <institution> Department of Computer Science, University of Arizona, </institution> <address> Tucson, AZ 85721. </address>
Reference: [DeGroot, 1984] <author> DeGroot, D. </author> <year> (1984). </year> <title> Restricted AND-Parallelism. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 471-478. </pages> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference-contexts: AND-Parallelism This category is widely used in parallel logic programming, and relies on a concurrent evaluation of the literals in the clause body (subgoals). Problems occur if variables are shared between literals, since they must assume identical values <ref> [DeGroot, 1984, DeGroot, 1988] </ref>. On the other hand, shared variables are a convenient way to express synchronization between different threads of computation, which makes languages based on AND-parallelism also well suited for low-level tasks such as systems programming.
Reference: [DeGroot, 1988] <author> DeGroot, D. </author> <year> (1988). </year> <title> A Technique for Compiling Execution Graph Expressions for Restricted And-Parallelism in Logic Programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> (5):494-516. 
Reference-contexts: AND-Parallelism This category is widely used in parallel logic programming, and relies on a concurrent evaluation of the literals in the clause body (subgoals). Problems occur if variables are shared between literals, since they must assume identical values <ref> [DeGroot, 1984, DeGroot, 1988] </ref>. On the other hand, shared variables are a convenient way to express synchronization between different threads of computation, which makes languages based on AND-parallelism also well suited for low-level tasks such as systems programming.
Reference: [DeGroot, 1990] <author> DeGroot, D. </author> <year> (1990). </year> <title> On the inherently speculative nature of parallel logic programming. </title> <booktitle> In North American Conference on Logic Programming. </booktitle>
Reference: [Delcher and Kasif, 1989] <author> Delcher, A. and Kasif, S. </author> <year> (1989). </year> <title> Some results in the complexity of exploiting data dependency in parallel logic programs. </title> <journal> Logic Programming, </journal> <volume> 6 </volume> <pages> 229-241. 14 </pages>
Reference: [Delcher and Kasif, 1988] <author> Delcher, A. L. and Kasif, S. </author> <year> (1988). </year> <title> Efficient Parallel Term Matching. </title> <type> Technical report, </type> <institution> Computer Science Department, Johns Hopkins University, </institution> <address> Baltimore, MD 21218. </address>
Reference: [Delgado-Rannauro et al., 1991] <author> Delgado-Rannauro, S. A., Dorochevsky, M., Scherman, K., Veron, A., and Xu, J. </author> <year> (1991). </year> <title> A shared environment parallel logic programming system on distributed memory architectures. </title> <booktitle> In [Bode, </booktitle> <year> 1991]. </year>
Reference: [Despain et al., 1986] <author> Despain, A., Patt, Y., Dobry, T., Chang, J., and Citrin, W. </author> <year> (1986). </year> <title> High Performance Prolog: The Multiplicative Effect of Several Levels of Implementation. </title> <booktitle> In COMPCON 86, </booktitle> <address> Berkeley. </address>
Reference: [Despain and Patt, 1985] <author> Despain, A. M. and Patt, Y. N. </author> <year> (1985). </year> <title> Aquarius A High Performance Computing System for Symbolic and Numeric Applications. </title> <booktitle> In COMPCON '85, </booktitle> <address> Berkeley, CA. </address>
Reference: [Diel et al., 1986] <author> Diel, H., Lenz, N., and Welsch, H. M. </author> <year> (1986). </year> <title> System Structure for Parallel Logic Programming. </title> <journal> Future Generation Computer Systems, </journal> <volume> 2 </volume> <pages> 225-231. </pages>
Reference: [Dixon and deKleer, 1988] <author> Dixon, M. and deKleer, J. </author> <year> (1988). </year> <title> Massively parallel assumption-based truth maintenance. </title> <editor> In Smith, R. G. and Mitchell, T. M., editors, </editor> <booktitle> Seventh National Conference on Artificial Intelligence, </booktitle> <volume> volume 1/2, </volume> <pages> pages 199-204, </pages> <address> St. Paul, MN. </address> <booktitle> American Association for Artificial Intelligence, </booktitle> <publisher> Morgan Kaufman. </publisher>
Reference: [Dwork et al., 1986] <author> Dwork, C., Kanellakis, P., and Stockmeyer, L. </author> <year> (1986). </year> <title> Parallel Algorithms for Term Matching. </title> <booktitle> In CADE '86, </booktitle> <pages> pages 416-430, </pages> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference: [Dwork et al., 1988] <author> Dwork, C., Kanellakis, P. C., and Stockmeyer, L. </author> <year> (1988). </year> <title> Parallel algorithms for term matching. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17(4) </volume> <pages> 711-731. </pages>
Reference-contexts: Parallelism on the term level 6 underlies two important restrictions: first, the task of unification can be inherently sequential in the worst case <ref> [Yasuura, 1984, Dwork et al., 1988] </ref>; second, the grain size for unification tasks tends to be rather small with a Prolog-based evaluation model. The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved.
Reference: [Dyer, 1989] <author> Dyer, M. G. </author> <year> (1989). </year> <title> Symbolic processing techniques in connectionist networks and their application to high-level cognitive tasks. </title> <editor> In Brauer, W. and Freksa, C., editors, </editor> <booktitle> International GI Congress on Knowledge Based Systems, Informatik Fachberichte, </booktitle> <address> Munich. </address> <publisher> Springer. </publisher>
Reference: [Eckmiller et al., 1990] <editor> Eckmiller, R., Hartmann, G., and Hauske, G., editors (1990). </editor> <booktitle> Parallel Processing in Neural Systems and Computers. </booktitle> <publisher> Elsevier. </publisher>
Reference: [Eisenstadt and Brayshaw, 1988] <author> Eisenstadt, M. and Brayshaw, M. </author> <year> (1988). </year> <title> The Transparent Prolog Machine (TPM): An Execution Model and Graphical Debugger for Logic Programming. </title> <booktitle> Logic Programming, </booktitle> <pages> pages 277-342. </pages>
Reference: [Eliens, 1991a] <author> Eliens, A. </author> <year> (1991a). </year> <journal> Distributed logic programming for artificial intelligence. AI Communications, </journal> <volume> 4(1) </volume> <pages> 11-21. </pages>
Reference: [Eliens, 1991b] <author> Eliens, A. </author> <year> (1991b). </year> <title> DLP A Language for Distributed Logic Programming. </title> <type> PhD thesis, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, Netherlands. </address>
Reference: [Engels, 1988] <author> Engels, J. </author> <year> (1988). </year> <title> A Model for Or-parallel Execution of (Full) Prolog and its Proposed Implementation. </title> <type> Technical report, </type> <institution> Institut fur Informatik III, Universitat Bonn, Bonn. </institution>
Reference: [Ertel, 1990] <author> Ertel, W. </author> <year> (1990). </year> <title> Random competition: A simple, but efficient method for parallelizing inference systems. </title> <type> Technical Report FKI 143-90, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference-contexts: The idea of competition is to apply different evaluation mechanisms to one and the same program. Whereas in principle this results in redundant computation, different calculi are well suited for different classes of programs <ref> [Ertel, 1990, Ertel, 1991] </ref> (see also the contribution of W. Ertel in this volume).
Reference: [Ertel, 1991] <author> Ertel, W. </author> <year> (1991). </year> <title> Performance of competitive or-parallelism. </title> <booktitle> ICLP Workshop on Parallel Inferencing. </booktitle>
Reference-contexts: The idea of competition is to apply different evaluation mechanisms to one and the same program. Whereas in principle this results in redundant computation, different calculi are well suited for different classes of programs <ref> [Ertel, 1990, Ertel, 1991] </ref> (see also the contribution of W. Ertel in this volume).
Reference: [Ertel et al., 1989] <author> Ertel, W., Kurfe, F., Letz, R., Pandolfi, X., and Schumann, J. </author> <year> (1989). </year> <title> PARTHEO: A Parallel Inference Machine. </title> <booktitle> In PARLE '89. </booktitle> <pages> 15 </pages>
Reference: [Fagin, 1990] <author> Fagin, B. </author> <year> (1990). </year> <title> Data-parallel logic programming. </title> <booktitle> In North American Conference on Logic Programming. </booktitle>
Reference: [Fagin, 1991] <author> Fagin, B. </author> <year> (1991). </year> <title> Data-parallel logic programming systems. </title> <type> Technical report, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <address> Hanover, NH 03755. </address>
Reference-contexts: Whereas typical logic programs may not contain many data structures where data parallelism can be applied, there certainly are many applications with highly regular data structures which can profit from this combination, such as deductive data bases, image processing, or scientific computations <ref> [Fagin, 1991, Succi and Marino, 1991] </ref>. Streams The concept of streams is based on an incremental evaluation of large data structures, e.g. lists which change dynamically [Ito et al., 1987, Takeuchi et al., 1987].
Reference: [Fagin and Despain, 1987] <author> Fagin, B. and Despain, A. M. </author> <year> (1987). </year> <title> Performance Studies of a Parallel Prolog Architecture. </title> <type> Technical report, </type> <institution> Computer Science Division, University of California, Berkeley, CA. </institution> <note> preprint from ISCA, June '87. </note>
Reference: [Fagin and Despain, 1990] <author> Fagin, B. S. and Despain, A. M. </author> <year> (1990). </year> <title> The performance of parallel Prolog programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(12) </volume> <pages> 1434-1445. </pages>
Reference: [Fahlman and Hinton, 1987] <author> Fahlman, S. and Hinton, G. </author> <year> (1987). </year> <title> Connectionist Architectures for Artificial Intelligence. </title> <journal> Computer, </journal> <volume> 20 </volume> <pages> 100-118. </pages>
Reference: [Feldman, 1990] <author> Feldman, J. A. </author> <year> (1990). </year> <title> Conventional and connectionist parallel computation. </title> <publisher> GMD-Spiegel. </publisher>
Reference: [Foster, 1990] <author> Foster, I. </author> <year> (1990). </year> <title> Systems Programming in Parallel Logic Languages. </title> <publisher> Prentice Hall. </publisher>
Reference: [Foster and Taylor, 1987] <author> Foster, I. and Taylor, S. </author> <year> (1987). </year> <title> Flat Parlog: A Basis for Comparison. </title> <journal> Parallel Programming, </journal> <volume> 16 </volume> <pages> 87-125. </pages>
Reference: [Foster and Taylor, 1989] <author> Foster, I. and Taylor, S. </author> <year> (1989). </year> <title> STRAND: New Concepts in Parallel Programming. </title> <publisher> Prentice Hall. </publisher>
Reference: [Fronhofer and Kurfe, 1987] <author> Fronhofer, B. and Kurfe, F. </author> <year> (1987). </year> <title> Cooperative Competition: A modest proposal concerning the use of multi-processor systems for automated reasoning. </title> <type> Technical report, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference-contexts: Cooperation The cooperation category is based on the exchange of useful information between different inference mechanisms working on the same program, and thus can be viewed as a counterpart to the previously described competition approach <ref> [Fronhofer and Kurfe, 1987] </ref>.
Reference: [Futo, 1988] <author> Futo, I. </author> <year> (1988). </year> <title> Parallele Programmierung in CS-Prolog. </title> <journal> Artificial Intelligence Newsletter, </journal> <volume> 9, 10 </volume> <pages> 13-15, 16-19. </pages>
Reference: [Futo and Kacsuk, 1989] <author> Futo, I. and Kacsuk, P. </author> <year> (1989). </year> <journal> CS-Prolog on multitransputer systems. Microprocessors and Microsystems, </journal> <volume> 13 </volume> <pages> 103-112. </pages>
Reference: [Georgescu, 1986] <author> Georgescu, I. </author> <year> (1986). </year> <title> An Inference Processor based on reactive memory. </title> <type> Technical report, </type> <institution> Institute for Computers and Informatics, Department of Robotics and Artificial Intelligence, Bucharest. </institution>
Reference: [Giambiasi et al., 1989] <author> Giambiasi, N., Lbath, R., and Touzet, C. </author> <year> (1989). </year> <title> Une approche connex-ionniste pour calculer l'implication floue dans les systemes a base de regles. </title> <type> Technical report, </type> <institution> Universite de Nimes. </institution>
Reference: [Gonzalez-Rubio et al., 1987] <author> Gonzalez-Rubio, R., Bradier, A., and Rohmer, J. </author> <year> (1987). </year> <title> DDC Delta Driven Computer a Parallel Machine for Symbolic Processing. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987]. </year>
Reference: [Goto et al., 1983] <author> Goto, A., Aida, H., Maruyama, T., Yuhara, M., Tanaka, H., and Moto-OKA, T. </author> <year> (1983). </year> <title> A Highly Parallel Inference Engine: </title> <booktitle> PIE. In Logic Programming Conference. </booktitle> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Goto et al., 1988] <author> Goto, A., Sato, M., Nakajima, K., Taki, K., and Matsumoto, A. </author> <year> (1988). </year> <title> Overview of the Parallel Inference Machine Architecture (PIM). </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 209-229, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Goto et al., 1984] <author> Goto, A., Tanaka, H., and Moto-Oka, T. </author> <year> (1984). </year> <title> Highly Parallel Inference Engine: PIE. Goal Rewriting Model and Machine Architecture. </title> <journal> New Generation Computing. </journal> <volume> 16 </volume>
Reference: [Goto and Uchida, 1985] <author> Goto, A. and Uchida, S. </author> <year> (1985). </year> <title> Current Research Status of PIM: Parallel Inference Machine. </title> <booktitle> In Third Japanese-Swedish Workshop, number TM - 140. </booktitle> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Goto and Uchida, 1986] <author> Goto, A. and Uchida, S. </author> <year> (1986). </year> <title> Toward a High Performance Parallel Inference Machine The Intermediate State Plan of PIM -. Technical report, </title> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Goto and Uchida, 1987] <author> Goto, A. and Uchida, S. </author> <year> (1987). </year> <title> Towards a High Performance Parallel Inference Machine The Intermediate Stage Plan for PIM. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987]. </year>
Reference: [Gregory, 1984] <author> Gregory, S. </author> <year> (1984). </year> <title> Implementing PARLOG on the ALICE Machine. </title> <type> Technical report, </type> <institution> Imperial College, </institution> <address> London. </address>
Reference: [Gregory, 1987] <author> Gregory, S. </author> <year> (1987). </year> <title> Parallel Logic Programming with PARLOG: The Language and its Implementation. </title> <publisher> Addison Wesley. </publisher>
Reference: [Gregory et al., 1989] <author> Gregory, S., Foster, I. T., Burt, A. D., and Ringwood, G. A. </author> <year> (1989). </year> <title> An Abstract Machine for the Implementation of PARLOG on Uniprocessors. </title> <journal> New Generation Computing, </journal> (6):389-420. 
Reference: [Guntzer et al., 1986] <author> Guntzer, U., Kiessling, W., and Bayer, R. </author> <year> (1986). </year> <title> Evaluation Paradigms for Deductive Databases: from Systolic to As-You-Please. </title> <type> Technical Report TUM-I-86-05, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Hager and Moser, 1989] <author> Hager, J. and Moser, M. </author> <year> (1989). </year> <title> An Approach to Parallel Unification Using Transputers. </title> <booktitle> In GWAI '89, </booktitle> <pages> pages 83-91. </pages> <publisher> Springer. </publisher>
Reference-contexts: At best unification and occur check can be performed in a pipelined fashion, where the occur check is performed incrementally on the section of the terms already unified <ref> [Hager and Moser, 1989] </ref>. Separability This category corresponds to modularity on the program level by identifying sections in the terms to be unified which are more or less independent.
Reference: [Hailperin and Westphal, 1986] <author> Hailperin, M. and Westphal, H. </author> <year> (1986). </year> <title> A Computational Model for PEPSys. </title> <type> Technical Report CA-16, </type> <institution> ECRC. </institution>
Reference: [Halim, 1986] <author> Halim, Z. </author> <year> (1986). </year> <title> A Data-Driven Machine for Or-Parallel Evaluation of Logic Programs. New Generation Computing, Vol.4, </title> <publisher> No.1:5-33. </publisher>
Reference: [Harland and Jaffar, 1987] <author> Harland, J. and Jaffar, J. </author> <year> (1987). </year> <title> On Parallel Unification for Prolog. </title> <journal> New Generation Computing, </journal> <volume> 5 </volume> <pages> 259-279. </pages>
Reference-contexts: This becomes rather complicated, especially when one tries to combine different categories of parallelism in one evaluation mechanism. 3.1 Analysis of Parallelism An inportant method for the exploitation of parallelism in logic is the analysis of programs, for example by determining the potential parallel factor <ref> [Harland and Jaffar, 1987] </ref> or more complex measures.
Reference: [Hattori et al., 1989] <author> Hattori, A., Shinogoi, T., Kumon, K., and Goto, A. </author> <year> (1989). </year> <title> PIM-p: A Hierarchical Parallel Inference Machine. </title> <type> Technical Report TR-514, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo, Japan. </address>
Reference: [Hellerstein and Shapiro, 1986] <author> Hellerstein, L. and Shapiro, E. </author> <year> (1986). </year> <title> Implementing Parallel All-gorithms in Concurrent Prolog: </title> <journal> The Maxflow Experience. Logic Programming, </journal> <volume> 2 </volume> <pages> 157-184. </pages>
Reference: [Hermenegildo, 1986] <author> Hermenegildo, M. </author> <year> (1986). </year> <title> An Abstract Machine for Restricted AND-Parallel Execution of Logic Programs. </title> <booktitle> In Third International Conference On Logic Programming 86, </booktitle> <pages> pages 25-39. </pages>
Reference: [Hermenegildo and Nasr, 1986] <author> Hermenegildo, M. and Nasr, R. </author> <year> (1986). </year> <title> Efficient Management of Backtracking in AND-Parallelism. </title> <booktitle> In Third International Conference On Logic Programming 86, </booktitle> <pages> pages 40-54. </pages>
Reference: [Hermenegildo and Rossi, 1989] <author> Hermenegildo, M. and Rossi, F. </author> <year> (1989). </year> <title> On the Correctness and Efficiency of Independent AND-Parallelism in Logic Programs. </title> <booktitle> In North American Conference on Logic Programming, </booktitle> <pages> pages 369-389. </pages> <publisher> MIT Press. </publisher>
Reference: [Hertzberger and van de Riet, 1984] <author> Hertzberger, L. and van de Riet, R. </author> <year> (1984). </year> <title> Progress in the Fith Generation Inference Architectures. </title> <journal> Future Generations Computer Systems, </journal> <volume> 1(2) </volume> <pages> 93-102. </pages>
Reference: [Hillis, 1985] <author> Hillis, D. W. </author> <year> (1985). </year> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address> <month> 17 </month>
Reference: [Hillis and Steele, 1986] <author> Hillis, W. and Steele, G. </author> <year> (1986). </year> <title> Data Parallel Algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 29 </volume> <pages> 1170-1183. </pages>
Reference-contexts: In many practical cases, however, regular data structures are used, the prototype being an array of elements of some type. Such regular data structures open the door to another category of parallelism, usually referred to as data parallelism <ref> [Hillis and Steele, 1986] </ref>. Here, one and the same operation is applied to all or a subset of the single elements in a SIMD (Single Instruction Multiple Data) way.
Reference: [Hillyer and Shaw, 1983] <author> Hillyer, B. and Shaw, D. </author> <year> (1983). </year> <title> Rapid Execution of AI Production Systems on the NON-VON Supercomputer. </title> <type> Technical report, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York. </address>
Reference: [Holldobler, 1990a] <author> Holldobler, S. </author> <year> (1990a). </year> <title> CHCL a connectionist inference system for horn logic based on the connection method. </title> <type> Technical Report TR-90-042, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA 94704. </address>
Reference-contexts: One approach is to represent symbols and programs as patterns of activation and interconnection distributed a network of simple units, which are connected through weighted links <ref> [Holldobler, 1990a, Holldobler and Kurfe, 1991] </ref> 1 . The computation then is performed by a spreading activation scheme which settles into a stable state when a solution is found.
Reference: [Holldobler, 1990b] <author> Holldobler, S. </author> <year> (1990b). </year> <title> A structured connectionist unification algorithm. </title> <booktitle> In AAAI '90, </booktitle> <pages> pages 587-593. </pages> <note> A long version appeared as Technical Report TR-90-012, </note> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA. </address>
Reference: [Holldobler, 1990c] <author> Holldobler, S. </author> <year> (1990c). </year> <title> Towards a connectionist inference system. </title> <booktitle> In Proceedings of the International Symposium on Computational Intelligence. </booktitle>
Reference: [Holldobler and Kurfe, 1991] <author> Holldobler, S. and Kurfe, F. </author> <year> (1991). </year> <title> CHCL A Connectionist Inference System. </title> <booktitle> International Computer Science Institute. </booktitle>
Reference-contexts: One approach is to represent symbols and programs as patterns of activation and interconnection distributed a network of simple units, which are connected through weighted links <ref> [Holldobler, 1990a, Holldobler and Kurfe, 1991] </ref> 1 . The computation then is performed by a spreading activation scheme which settles into a stable state when a solution is found.
Reference: [Houri and Shapiro, 1986] <author> Houri, A. and Shapiro, E. </author> <year> (1986). </year> <title> A Sequential Abstract Machine for Flat concurrent Prolog. </title> <type> Technical Report CS86-20, </type> <institution> Weizmann Institute of Science, Rehovot, Isael. </institution>
Reference: [Hwang and Briggs, 1984] <author> Hwang, K. and Briggs, F. </author> <year> (1984). </year> <title> Computer Architecture and Parallel Processing. </title> <publisher> Mc Graw-Hill, </publisher> <address> New York. </address>
Reference: [Hwang et al., 1987] <author> Hwang, K., Ghosh, J., </author> <booktitle> and R.Chokwanyun (1987). Computer Architectures for Artificial Intelligence Processing. Computer, </booktitle> <volume> 20 </volume> <pages> 19-30. </pages>
Reference: [Iba~nez, 1988] <author> Iba~nez, M. B. </author> <year> (1988). </year> <title> Parallel inferencing in first-order logic based on the connection method. </title> <booktitle> In Artificial Intelligence: Methodology, Systems, Applications '88. Varna, </booktitle> <publisher> North-Holland. </publisher>
Reference-contexts: Spanning Sets One important advantage of the spanning set concept as well is to make the run-time management of bindings simpler. This is based on a statical analysis of the program with the goal of identifying parts of the program (spanning sets of connections) which represent alternative solutions <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref> (see also the contribution of Wang, Marsh and Lavington in this volume). These solutions then can be computed completely independent of each other, without the necessity of maintaining complex run-time environments for variable bindings. <p> Routes The routes concept again relies on a statical analysis of the program, identifying sequences of connections (or resolution steps) which will have to be followed through in the evaluation, and which contain OR-parallel connections only at the end points <ref> [Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. The crucial point with respect to parallelism is that these routes do not necessarily have to be treated in a sequential way; they may as well be combined pairwise with logarithmic execution time instead of linear. <p> The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved. The second restriction can be overcome by choosing a different evaluation mechanism <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. Unification Competition Conceptually similar to competition in the inference mechanism, competition can be used for unification by applying different unification mechanisms to one and the same term pair.
Reference: [Iba~nez, 1989] <author> Iba~nez, M. B. </author> <year> (1989). </year> <title> Inference parallele et processus communicants pour les clauses de Horn. Extension au premier ordre par la methode de connexion. </title> <type> PhD thesis, </type> <institution> I.N.P. de Grenoble, France. </institution>
Reference-contexts: Spanning Sets One important advantage of the spanning set concept as well is to make the run-time management of bindings simpler. This is based on a statical analysis of the program with the goal of identifying parts of the program (spanning sets of connections) which represent alternative solutions <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref> (see also the contribution of Wang, Marsh and Lavington in this volume). These solutions then can be computed completely independent of each other, without the necessity of maintaining complex run-time environments for variable bindings. <p> Routes The routes concept again relies on a statical analysis of the program, identifying sequences of connections (or resolution steps) which will have to be followed through in the evaluation, and which contain OR-parallel connections only at the end points <ref> [Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. The crucial point with respect to parallelism is that these routes do not necessarily have to be treated in a sequential way; they may as well be combined pairwise with logarithmic execution time instead of linear. <p> The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved. The second restriction can be overcome by choosing a different evaluation mechanism <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. Unification Competition Conceptually similar to competition in the inference mechanism, competition can be used for unification by applying different unification mechanisms to one and the same term pair.
Reference: [ICLP91, 1991] <author> ICLP91 (1991). </author> <title> ICLP 91 Workshop on Parallel Execution of Logic Programs, </title> <address> Paris, France. </address>
Reference: [Ino and Koelbl, 1988] <author> Ino, E. and Koelbl, D. </author> <year> (1988). </year> <institution> Sequentielle und parallele Architekturansatze fur logische Programmiersprachen. Informatik Forschung und Entwicklung, </institution> <month> 3 </month> <pages> 182-194. </pages>
Reference: [Ito et al., 1987] <author> Ito, N., Kuno, E., and Oohara, T. </author> <year> (1987). </year> <title> Efficient Stream Processing in GHC and Its Evaluation on a Parallel Inference Machine. </title> <journal> Journal of Information Processing, </journal> <volume> 10 </volume> <pages> 237-244. </pages>
Reference-contexts: Streams The concept of streams is based on an incremental evaluation of large data structures, e.g. lists which change dynamically <ref> [Ito et al., 1987, Takeuchi et al., 1987] </ref>. Usually operations involving the whole data structure, like comparing two lists, are only applicable if and when the whole data structures are available.
Reference: [Ito et al., 1983a] <author> Ito, N., Masuda, K., and Shimizu, H. </author> <month> (August </month> <year> 1983a). </year> <title> Parallel Prolog Machine. </title> <type> Technical report, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo. </address>
Reference: [Ito and Masuda, 1983] <author> Ito, N. and Masuda, Y. </author> <year> (1983). </year> <title> Parallel Inference Machine Based on the Data Flow Model. </title> <type> Technical Report TR-033, </type> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Ito et al., 1983b] <author> Ito, N., Onai, R., Masuda, K., and Shimizu, H. </author> <year> (1983b). </year> <title> Parallel Prolog Machine Based on Data Flow Mechanism. </title> <booktitle> In Logic Programming Conference '83. </booktitle> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Jorrand, 1986] <author> Jorrand, P. </author> <year> (1986). </year> <title> Term Rewriting as a Basis for the Design of a Functional and Parallel Programming Language. A case study: the Language FP2. </title> <editor> In [Bibel and Jorrand, </editor> <year> 1986], </year> <pages> pages 221-276. 18 </pages>
Reference: [Jorrand, 1987] <author> Jorrand, P. </author> <year> (1987). </year> <title> Design and Implementation of a Parallel Inference Machine for First-Order Logic: An Overview. </title> <booktitle> In PARLE 87, volume 258 of Lecture Notes in Computer Science, </booktitle> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference: [Kacsuk, 1991] <author> Kacsuk, P. </author> <year> (1991). </year> <title> A Parallel PROLOG Abstract Machine and its Multi-Transputer Implementation. </title> <journal> Computer, </journal> <volume> 34(1) </volume> <pages> 52-63. </pages>
Reference: [Kacsuk and Bale, 1987] <author> Kacsuk, P. and Bale, A. </author> <year> (1987). </year> <title> DAP Prolog: A Set-oriented Approach to Prolog. </title> <journal> Computer, </journal> <volume> 30(5) </volume> <pages> 393-403. </pages>
Reference: [Kahn, 1986] <author> Kahn, K. e. a. </author> <year> (1986). </year> <title> Objects in concurrent logic languages. </title> <booktitle> In OOPSLA 86, </booktitle> <pages> pages 242-257. </pages>
Reference: [Kale, 1988] <author> Kale, L. </author> <year> (1988). </year> <title> A Tree Representation for Parallel Problem Solving. </title> <booktitle> In AAAI '88, </booktitle> <pages> pages 677-681. </pages>
Reference: [Kale, 1985] <author> Kale, L. V. </author> <year> (1985). </year> <title> Parallel Architectures for Problem Solving. </title> <type> PhD thesis, </type> <institution> State University of New York, Stony Brook. </institution>
Reference: [Kale, 1987] <author> Kale, L. V. </author> <year> (1987). </year> <title> Completeness and full parallelism of parallel logic programming schemes. </title> <booktitle> In IEEE Symposium on Logic Programming, </booktitle> <pages> pages 125-133, </pages> <address> San Francisco, CA. </address> <publisher> IEEE. </publisher>
Reference: [Kale, 1989] <author> Kale, L. V. </author> <year> (1989). </year> <title> The REDUCE OR Process Model for Parallel Execution of Logic Programs. </title> <journal> Journal of Logic Programming. </journal>
Reference: [Kale and Ramkumar, 1990] <author> Kale, L. V. and Ramkumar, B. </author> <year> (1990). </year> <title> Joining AND Parallel Solutions in AND/OR Parallel Systems: Part I Static Analysis. </title> <note> In ICLP '90. </note>
Reference: [Kale et al., 1988] <author> Kale, L. V., Ramkumar, B., and Shu, W. </author> <year> (1988). </year> <title> A Memory Organisation Independent Binding Environment for AND and OR Parallel Execution of Logic Programs. </title> <booktitle> In ICLP '88, volume 2, </booktitle> <institution> University of Illinois at Urbana-Champaign. </institution>
Reference: [Kale and Saletore, 1988] <author> Kale, L. V. and Saletore, V. </author> <year> (1988). </year> <title> Obtaining first solution faster in parallel problem solving. </title> <type> Technical Report UIUCDCS-R-88-1481, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, IL. </institution>
Reference: [Kaplan, 1988] <author> Kaplan, S. </author> <year> (1988). </year> <title> Algorithmic complexity of logic programs. </title> <booktitle> In International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 780-793, </pages> <address> Seattle, WA. </address>
Reference: [Karam, 1988] <author> Karam (1988). </author> <title> Prototyping Concurrent Systems with Multilog. </title> <type> Technical report, </type> <institution> Department of Systems and Computer Engineering, Carleton University. </institution>
Reference: [Kasif et al., 1983] <author> Kasif, S., Kohli, M., and Minker, J. </author> <year> (1983). </year> <title> PRISM: A Parallel Inference System for Problem Solving. </title> <booktitle> In Logic Programming Workshop '83, </booktitle> <pages> pages 123-152, </pages> <institution> Lisboa, Portugal. Universidade Nova de Lisboa. </institution>
Reference: [Kasif and Minker, ] <author> Kasif, S. and Minker, J. </author> <title> The Intelligent Channel: A Scheme for Result Sharing in Logic Programs. </title> <type> Technical report, </type> <institution> University of Maryland. </institution>
Reference: [Kasif et al., 1987] <author> Kasif, S., Reif, J. H., and Sherlekar, D. D. </author> <year> (1987). </year> <title> Formula Dissection: A Parallel Algorithm for Constraint Satisfaction. </title> <booktitle> In IJCAI '87. </booktitle>
Reference: [Kibler and Conery, ] <author> Kibler, D. and Conery, J. </author> <title> Parallelism in AI Programs. </title> <type> Technical report, </type> <institution> Irvine Computational Intelligence Project, Information and Computer Science Department, University of California, Irvine. </institution>
Reference: [Kimura and Chikayama, 1987] <author> Kimura, Y. and Chikayama, T. </author> <year> (1987). </year> <title> An Abstract KL1 Machine and its Instruction Set. </title> <type> Technical Report TR-246, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo, Japan. </address> <month> 19 </month>
Reference: [Kliger et al., 1988] <author> Kliger, S., Yardeni, E., Kahn, K., and Shapiro, E. </author> <year> (1988). </year> <title> The Language FCP(:,?). </title> <booktitle> In FGCS '88, </booktitle> <pages> pages 763-783, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Knight, 1989] <author> Knight, K. </author> <year> (1989). </year> <title> Unification: A multidisciplinary survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(1) </volume> <pages> 93-124. </pages>
Reference: [Kober, 1988] <editor> Kober, R., editor (1988). Parallelrechner-Architekturen. </editor> <publisher> Springer, </publisher> <address> Berlin. </address>
Reference: [Kumar et al., 1988] <author> Kumar, V., Ramesh, K., and Rao, V. </author> <year> (1988). </year> <title> Parallel Best-First Search of State-Space Graphs: A Summary of Results. </title> <booktitle> In AAAI '88, </booktitle> <volume> volume 1, </volume> <pages> pages 122-127. </pages>
Reference: [Kumon et al., 1986] <author> Kumon, K., Masuzawa, H., Itashiki, A., Satoh, K., and Sohma, Y. </author> <year> (1986). </year> <title> Kabu-Wake: A New Parallel Inference Method and its Evaluation. </title> <journal> IEEE, </journal> <pages> pages 168-172. </pages>
Reference: [Kung, 1985] <author> Kung, C.-H. </author> <year> (1985). </year> <title> High Parallelism and a Proof Procedure. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 1 </volume> <pages> 323-331. </pages>
Reference: [Kurfe, 1988] <author> Kurfe, F. </author> <year> (1988). </year> <title> Logic and reasoning with neural models (extended abstract). Neural Networks, </title> <booktitle> 1, Suppl. 1 (Abstracts of INNS 88):192. </booktitle>
Reference: [Kurfe, 1990] <author> Kurfe, F. </author> <year> (1990). </year> <title> Parallelism in Logic | Its Potential for Performance and Program Development. </title> <type> PhD thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution> <note> published as book by Vieweg Verlag, Wiesbaden (1991). </note>
Reference-contexts: Spanning Sets One important advantage of the spanning set concept as well is to make the run-time management of bindings simpler. This is based on a statical analysis of the program with the goal of identifying parts of the program (spanning sets of connections) which represent alternative solutions <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref> (see also the contribution of Wang, Marsh and Lavington in this volume). These solutions then can be computed completely independent of each other, without the necessity of maintaining complex run-time environments for variable bindings. <p> Routes The routes concept again relies on a statical analysis of the program, identifying sequences of connections (or resolution steps) which will have to be followed through in the evaluation, and which contain OR-parallel connections only at the end points <ref> [Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. The crucial point with respect to parallelism is that these routes do not necessarily have to be treated in a sequential way; they may as well be combined pairwise with logarithmic execution time instead of linear. <p> The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved. The second restriction can be overcome by choosing a different evaluation mechanism <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. Unification Competition Conceptually similar to competition in the inference mechanism, competition can be used for unification by applying different unification mechanisms to one and the same term pair.
Reference: [Kurfe, 1991] <author> Kurfe, F. </author> <year> (1991). </year> <title> Massive parallelism in inference systems. </title> <booktitle> IJCAI '91 Workshop on Parallel Processing for Artificial Intelligence. </booktitle>
Reference: [Kurfe et al., 1989] <author> Kurfe, F., Pandolfi, X., Belmesk, Z., Ertel, W., Letz, R., and Schumann, J. </author> <year> (1989). </year> <title> PARTHEO and FP2: Design of a parallel inference machine. </title> <editor> In [Treleaven, </editor> <year> 1989], </year> <note> chapter 9. </note>
Reference: [Kurfe and Reich, 1989] <author> Kurfe, F. and Reich, M. </author> <year> (1989). </year> <title> Logic and reasoning with neural models. </title> <booktitle> In Connectionism in Perspective, </booktitle> <pages> pages 365-376, </pages> <address> Amsterdam. </address> <publisher> Elsevier. </publisher>
Reference: [Kurozumi, 1989] <author> Kurozumi, T. </author> <year> (1989). </year> <title> Outline of the fifth generation computer systems project and ICOT activities. </title> <type> Technical Report TR-523, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo, Japan. </address>
Reference: [Lake, 1988] <author> Lake, T. </author> <year> (1988). </year> <title> Languages for Parallel Processing (Sprachen fur die parallele Daten-verarbeitung). Informationstechnik it, </title> <type> 30(2). </type>
Reference: [Lange and Dyer, 1989] <author> Lange, T. E. and Dyer, M. G. </author> <year> (1989). </year> <title> High-level inferencing in a connectionist network. </title> <journal> Connection Science, </journal> <volume> 1 </volume> <pages> 181-217. </pages>
Reference: [Levi, 1986] <author> Levi, G. </author> <year> (1986). </year> <title> Concurrency Issues in Logic Languages. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987]. </year>
Reference: [Levi and Palamidessi, 1988] <author> Levi, G. and Palamidessi, C. </author> <year> (1988). </year> <title> Contributions to the Semantics of Logic Perpetual Processes. </title> <journal> Acta Informatica, </journal> <volume> 25 </volume> <pages> 691-711. </pages>
Reference: [Levy, 1986a] <author> Levy, J. </author> <year> (1986a). </year> <title> CFL-A Concurrent Functional Language Embedded in a Concurrent Logic Programming Environment. </title> <type> Technical report, </type> <institution> Weizmann Institute of Science, Rehovot, Israel. </institution>
Reference: [Levy, 1986b] <author> Levy, J. </author> <year> (1986b). </year> <title> Shared Memory Execution of Committed-Choice Languages. </title> <booktitle> In Conference On Logic Programming 86, </booktitle> <pages> pages 299-312. </pages>
Reference: [Levy and Friedmann, 1986] <author> Levy, J. and Friedmann, N. </author> <year> (1986). </year> <title> Concurrent Prolog Implementations Two New Schemes. </title> <type> Technical report, </type> <institution> Weizmann Institute of Science, Rehovot, Israel. </institution> <month> 20 </month>
Reference: [Li and Wah, 1985] <author> Li, G. and Wah, B. </author> <year> (1985). </year> <title> MANIP-2: A Multicomputer Architecture for Evaluating Logic Programs. </title> <journal> IEEE, </journal> <pages> pages 123-130. </pages>
Reference: [Lichtenwalder, 1988] <author> Lichtenwalder, K. </author> <year> (1988). </year> <title> Spezifikation einer parallelen Inferenzmaschine in Hinblick auf ein Transputersystem. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Lin and Kumar, 1988] <author> Lin, Y.-J. and Kumar, V. </author> <year> (1988). </year> <title> An Execution Model for Exploiting AND-Parallelism in Logic Programs. </title> <journal> New Generation Computing, </journal> <volume> 5 </volume> <pages> 393-425. </pages>
Reference: [Lusk et al., 1988] <author> Lusk, E., Butler, R., Disz, T., Olson, R., Overbeek, R., Stevens, R., Warren, D. H. D., Calderwood, A., Szeredi, P., Haridi, S., Brand, P., Carlsson, M., Ciepielewski, A., and Haussmann, B. </author> <year> (1988). </year> <title> The AURORA OR-Parallel PROLOG System. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 819-830. </pages>
Reference: [Lutke-Holz, 1989] <author> Lutke-Holz, B. </author> <year> (1989). </year> <title> Simulation eines parallelen Hornklauselinterpreters nach dem Prinzip der Cooperative Competition. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Mariyama and et al., 1983] <author> Mariyama, T. and et al. </author> <year> (1983). </year> <title> A Highly Parallel Inference Engine PIE. </title> <booktitle> In Electronic Computer Society of IEEE of Japan, volume EC 83-39, </booktitle> <address> Japan. </address>
Reference: [Matsuda and Kokata, 1985] <author> Matsuda, H. and Kokata, M. e. a. </author> <year> (1985). </year> <title> Parallel Prolog Machine PARK: Its Hardware Structure and Prolog System. </title> <booktitle> In Conference on Logic Programming '85, </booktitle> <pages> pages 148-158. </pages>
Reference: [Matsumoto, 1985] <author> Matsumoto, H. </author> <year> (1985). </year> <title> A Static Analysis of Prolog Programs. </title> <journal> SIGPLAN Notices, </journal> 20(10) 48-59. 
Reference: [Mayr and Reich, 1988] <author> Mayr, K. and Reich, M. </author> <year> (1988). </year> <title> Hochparallele Algorithmen fur das Erfullbarkeitsproblem in der Aussagenlogik - implementiert auf einem Simulator fur neuronale Netze. </title> <type> Technical report, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [McCorduck, 1983] <author> McCorduck, P. </author> <year> (1983). </year> <title> Introduction to the Fifth Generation. </title> <journal> Communications of the ACM, </journal> <volume> 6(9) </volume> <pages> 629-645. </pages>
Reference: [Meseguer, 1990a] <author> Meseguer, J. </author> <year> (1990a). </year> <title> Conditional rewriting logic: Deduction, models and con-currency. </title> <type> Technical Report SRI-CSL-90-14, </type> <institution> SRI International, </institution> <address> Menlo Park, CA 94025. </address>
Reference: [Meseguer, 1990b] <author> Meseguer, J. </author> <year> (1990b). </year> <title> A logical theory of concurrent objects. </title> <type> Technical Report SRI-CSL-90-07, </type> <institution> SRI International, </institution> <address> Menlo Park, CA 94025. </address>
Reference: [Millroth, 1991] <author> Millroth, H. </author> <year> (1991). </year> <title> Reforming compilation of logic programs. </title> <booktitle> In ILPS 91. </booktitle>
Reference-contexts: Once that goal is available, however, simple calculations often can be made to determine or estimate the number of iterations. Then in some cases it is possible to apply conventional parallelization techniques to transform the sequence of operations in the loop into operations executed in parallel <ref> [Millroth, 1991] </ref>. The potential gain from this technique is especially large if it can be used to predetermine the structure of the AND/OR-tree, and thus reduce the complexity of managing of the binding environments.
Reference: [Mills, 1989] <author> Mills, J. W. </author> <year> (1989). </year> <title> A pipelined architecture for logic programming with a complex but single-cycle instruction set. </title> <type> Technical Report TR 284, </type> <institution> Computer Science Department, Indiana University, Bloomington, </institution> <note> IN 47405. </note>
Reference: [Mills, 1990] <author> Mills, J. W. </author> <year> (1990). </year> <title> Connectionist logic programming. </title> <type> Technical Report TR 315, </type> <institution> Computer Science Department, Indiana University, </institution> <note> Bloomington IN 47405. </note>
Reference: [Mills et al., 1990] <author> Mills, J. W., Beavers, M. G., and Daffinger, C. A. </author> <year> (1990). </year> <title> Lukasiewicz logic arrays. </title> <type> Technical Report TR 296, </type> <institution> Computer Science Department, Indiana University, Bloomington, </institution> <note> IN 47405. </note>
Reference: [Mills and Daffinger, 1990a] <author> Mills, J. W. and Daffinger, C. A. </author> <year> (1990a). </year> <title> An Analog VLSI Array Processor for Classical and Connectionist AI. </title> <type> Technical Report TR 313, </type> <institution> Computer Science Department, Indiana University, Bloomington, </institution> <note> IN 47405. 21 </note>
Reference: [Mills and Daffinger, 1990b] <author> Mills, J. W. and Daffinger, C. A. </author> <year> (1990b). </year> <title> CMOS VLSI Lukasiewicz Logic Arrays. </title> <type> Technical Report TR 312, </type> <institution> Computer Science Department, Indiana University, Bloomington, </institution> <note> IN 47405. </note>
Reference: [Minsky, 1990] <author> Minsky, M. </author> <year> (1990). </year> <title> Logical vs. analogical or symbolic vs. connectionist or neat vs. scruffy. </title> <booktitle> In Frontiers of Artificial Intelligence, chapter 9, </booktitle> <pages> pages 218-243. </pages> <publisher> MIT Press. </publisher>
Reference: [Moniz Pereira et al., 1988] <author> Moniz Pereira, L., Monteiro, L., and Cunha, Jose C.and Aparicio, J. </author> <year> (1988). </year> <title> Concurrency and Communication in Delta Prolog. </title> <booktitle> In IEEE International Specialists Seminar on The Design and Applications of Parallel Digital Processors, </booktitle> <pages> pages 94-104, </pages> <address> Lisbon. </address>
Reference: [Moto-Oka and Fuchi, 1983] <author> Moto-Oka, T. and Fuchi, K. </author> <year> (1983). </year> <booktitle> The architectures in the fifth generation computer. Information Processing. </booktitle>
Reference: [Moto-Oka et al., 1984] <author> Moto-Oka, T., Tanaka, H., Aida, H., Hirata, K., and Maruyama, T. </author> <year> (1984). </year> <title> The Architecture of a Parallel Inference Engine PIE. </title> <booktitle> In Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 479-488. </pages> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Muller, 1984] <author> Muller, J.-P. </author> <year> (1984). </year> <title> Paralog: A Parallel Logic Programming System. </title> <booktitle> In ECAI '86, </booktitle> <pages> pages 115-119. </pages> <publisher> Elsevier. </publisher>
Reference: [Munsch, 1989] <author> Munsch, F. </author> <year> (1989). </year> <title> Ausnutzung von Parallelitat bei Theorembeweisern durch Ko-operation. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Murakami et al., 1984] <author> Murakami, K., Kakuta, T., and Onai, R. </author> <year> (1984). </year> <title> Architectures and hardware systems: Parallel inference machine and knowledge base machine. </title> <booktitle> Fifth Generation Computer Systems, </booktitle> <pages> pages 18-35. </pages>
Reference: [Nilsson and Tanaka, 1988] <author> Nilsson, M. and Tanaka, H. </author> <year> (1988). </year> <title> Massively Parallel Implementation of Flat GHC on the Connection Machine. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 1031-1040. </pages>
Reference: [NSF / ICOT, 1990] <editor> NSF / ICOT (1990). </editor> <booktitle> NSF / ICOT Joint Workshop on Parallel Logic Programming and Knowledge Representation, </booktitle> <address> Tokyo, Japan. </address>
Reference: [Ohki et al., 1987] <author> Ohki, M., Takeuchi, A., and Furukawa, K. </author> <year> (1987). </year> <title> An Object-oriented Language Based on the Parallel Logic Programming Language KL1. </title> <booktitle> In Conference on Logic Programming '87, </booktitle> <pages> pages 894-909. </pages> <publisher> MIT Press. </publisher>
Reference: [Onai et al., 1984] <author> Onai, R., Asou, M., and Takeuchi, A. </author> <year> (1984). </year> <title> An approach to a parallel inference machine based on control- driven and data-driven mechanisms. </title> <type> Technical Report TR-042, </type> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Onai and et al., 1984] <author> Onai, R. and et al. </author> <month> (May </month> <year> 1984). </year> <title> Analysis of Sequential Prolog Programs. </title> <type> Technical Report 48, </type> <address> Tokyo. </address>
Reference: [Onai et al., ] <author> Onai, R., Shimizu, H., Masuda, K., Matsumoto, A., and Aso, M. </author> <title> Architecture and evaluation of a reduction-based parallel inference machine: Pim-r. </title> <type> Technical report, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo. </address>
Reference: [Park et al., 1988] <author> Park, C.-I., Park, K. H., and Kim, M. </author> <year> (1988). </year> <title> Efficient Backward Execution in AND/OR Process Model. </title> <journal> Information Processing Letters, </journal> <volume> 29 </volume> <pages> 191-198. </pages>
Reference: [Percebois et al., 1991] <author> Percebois, C., Signes, N., and Agnoletto, P. </author> <year> (1991). </year> <title> A compiler for a distributed inference model. </title> <booktitle> In [Bode, </booktitle> <year> 1991]. </year>
Reference: [Pereira and Nasr, 1984] <author> Pereira, L. and Nasr, R. </author> <year> (1984). </year> <title> Delta-Prolog: A Distributed Logic Programming Language. </title> <booktitle> In International Conference On Fifth Generation Computer Systems, </booktitle> <pages> pages 283-291. </pages> <institution> Institute for New Generation Computer Technology (ICOT). </institution> <month> 22 </month>
Reference: [Peterson and Stickel, 1982] <author> Peterson, G. and Stickel, M. </author> <year> (1982). </year> <title> Complete Systems of Reductions Using Associative AND/OR Commutative Unifications. </title> <type> Technical report, </type> <institution> SRI International, </institution> <address> Menlo Park, CA. </address>
Reference: [Pinkas, 1990] <author> Pinkas, G. </author> <year> (1990). </year> <title> Connectionist energy minimization and logic satisfiability. </title> <type> Technical report, </type> <institution> Center for Intelligent Computing Systems, Department of Computer Science, Wash-ington University. </institution>
Reference: [Pinkas, 1991] <author> Pinkas, G. </author> <year> (1991). </year> <title> Symmetric neural networks and propositional logic satisfiability. </title> <journal> Neural Computation, </journal> <volume> 3(2) </volume> <pages> 282-291. </pages>
Reference: [Plaisted, 1984] <author> Plaisted, D. </author> <year> (1984). </year> <title> The Occur-Check Problem in Prolog. </title> <journal> New Generation Computing, </journal> <volume> 2 </volume> <pages> 309-322. </pages>
Reference-contexts: Occur Check The task of the occur check is to identify situations where a term is substituted by a subterm of itself, resulting in cyclic substitutions <ref> [Plaisted, 1984] </ref>. Whereas it is possible to define a semantics which allows the occurrence of infinite substitutions [Colmerauer, 1982], or in many situations to just neglect potential problems and omit an occur check (as in many Prolog implementations), there are cases where cyclic substitutions should not be accepted.
Reference: [Pollack, 1990] <author> Pollack, J. B. </author> <year> (1990). </year> <title> Recursive distributed representations. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 77-105. </pages>
Reference: [Ponder and Patt, 1984] <author> Ponder, C. and Patt, Y. </author> <year> (1984). </year> <title> Alternative Proposals for Implementing Prolog Concurrently and Implications Regarding their Respective Microarchitectures. </title> <booktitle> In 17th Annual Microprogramming Workshop. </booktitle>
Reference: [Potter, 1985] <author> Potter, J. </author> <year> (1985). </year> <title> The Massively Parallel Processor. </title> <publisher> MIT Press. </publisher>
Reference: [Powers, 1990a] <author> Powers, D. M. W. </author> <year> (1990a). </year> <title> Compartmentalized Connection Graphs for Logic Programming I: Compartmentalization, Transformation and Examples. </title> <type> SEKI Report SR-90-16, </type> <institution> Fachbereich Informatik, Universitat Kaiserslautern, D-6750 Kaiserslautern, Germany. </institution>
Reference: [Powers, 1990b] <author> Powers, D. M. W. </author> <year> (1990b). </year> <title> Compartmentalized Connection Graphs for Logic Programming II: Parallelism, Indexing and Unification. </title> <type> SEKI Report SR-90-17, </type> <institution> Fachbereich Infor-matik, Universitat Kaiserslautern, D-6750 Kaiserslautern, Germany. </institution>
Reference: [Ramesh and Ramakrishnan, 1990] <author> Ramesh, R. and Ramakrishnan, I. </author> <year> (1990). </year> <title> Parallel tree pattern matching. </title> <journal> Symbolic Computation, </journal> <volume> 9(4) </volume> <pages> 704-716. </pages>
Reference: [Ramesh et al., 1989] <author> Ramesh, R., Verma, R., Krishnaprasad, T., and Ramakrishnan, I. </author> <year> (1989). </year> <title> Term matching on parallel computers. </title> <booktitle> Logic Programming, </booktitle> <pages> pages 213-228. </pages>
Reference: [Ramkumar and Kale, 1989a] <author> Ramkumar, B. and Kale, L. V. </author> <year> (1989a). </year> <title> Compiled Execution of the REDUCE-OR Process Model on Multiprocessors. </title> <booktitle> In NACLP '89, </booktitle> <pages> pages 313-331. </pages>
Reference: [Ramkumar and Kale, 1989b] <author> Ramkumar, B. and Kale, L. V. </author> <year> (1989b). </year> <title> On the Compilation of Parallel Prolog for Shared and Nonshared Memory Machines. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, IL. </institution>
Reference: [Ramkumar and Kale, 1990] <author> Ramkumar, B. and Kale, L. V. </author> <year> (1990). </year> <title> A Chare Kernel Implementation of a Parallel Prolog Compiler. </title> <booktitle> In Second Conference on Principles and Practice of Parallel Programming, </booktitle> <address> Seattle. </address>
Reference: [Rapp, 1988] <author> Rapp, W. </author> <year> (1988). </year> <title> PEPSys Sequential Module on the MX-500 Users Manual. </title> <type> Technical Report PEPSys-26, </type> <institution> European Computer Research Center (ECRC), Munchen, Munchen. </institution>
Reference: [Ratcliffe and Robert, 1986] <author> Ratcliffe, M. and Robert, P. </author> <year> (1986). </year> <title> PEPSys: A Prolog for Parallel Processing. </title> <type> Technical Report CA-17, </type> <institution> European Computer Research Center (ECRC), Munchen, Munchen. </institution>
Reference: [Ratcliffe and Syre, 1987] <editor> Ratcliffe, M. and Syre, J.-C. </editor> <year> (1987). </year> <title> Virtual Machines for Parallel Architectures. </title> <type> Technical report, </type> <institution> European Computer Research Center (ECRC), Munchen, Munchen. </institution>
Reference: [Ringwood, 1988] <author> Ringwood, G. </author> <year> (1988). </year> <title> Parlog86 and the Dining Logicians. </title> <journal> Communications of the ACM, </journal> <volume> 31 </volume> <pages> 10-25. 23 </pages>
Reference: [Rohmer et al., 1986] <author> Rohmer, J., Gonzalez-Rubio, R., and Bradier, A. </author> <year> (1986). </year> <title> Delta driven com-puter: A parallel machine for symbolic processing. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987]. </year>
Reference: [Safra, 1986] <author> Safra, S. </author> <year> (1986). </year> <title> Partial Evaluation of Concurrent Prolog and its Implication. </title> <type> Technical Report CS86-24, </type> <institution> Weizmann Institute of Science. </institution>
Reference: [Saletore and Kale, 1990] <author> Saletore, V. A. and Kale, L. V. </author> <year> (1990). </year> <title> Consistent Linear Speedups to a First Solution in Parallel State-Space Search. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign. </institution>
Reference: [Saletore et al., 1990] <author> Saletore, V. A., Ramkumar, B., and Kale, L. V. </author> <year> (1990). </year> <title> Consistent First Solution Speedups in OR-Parallel Execution of Logic Programs. </title> <type> Technical Report UIUCDCS-R-90-1586, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, IL. </institution>
Reference: [Saraswat, 1986] <author> Saraswat, V. </author> <year> (1986). </year> <title> Problems with Concurrent Prolog. </title> <type> Technical Report CME-CS-86-100, </type> <institution> Carnegie-Mellon University. </institution>
Reference: [Schmid, 1988] <author> Schmid, E. </author> <year> (1988). </year> <title> Implementierung eines parallelen Theroembeweisers auf einem Multiprozessor-Simulator. </title> <institution> Fortgeschrittenenpraktikum fur informatiker, Institut fur Informatik, Technische Universitat Munchen, Munchen. </institution>
Reference: [Schumann, 1991] <author> Schumann, J. </author> <year> (1991). </year> <title> Efficient Theorem Provers based on an Abstract Machine. </title> <type> PhD thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen. </institution>
Reference: [Schumann and Letz, 1990] <author> Schumann, J. and Letz, R. </author> <year> (1990). </year> <title> PARTHEO: A High Performance Parallel Theorem Prover. </title> <editor> In Stickel, M., editor, </editor> <booktitle> CADE '90, volume 449 of Lecture Notes in Computer Science, </booktitle> <pages> pages 40 - 56, </pages> <address> Kaiserslautern. </address> <publisher> Springer. </publisher>
Reference: [Schumann et al., 1990] <author> Schumann, J., Letz, R., and Kurfe, F. </author> <year> (1990). </year> <title> Tutorial on high-performance theorem provers: Efficient implementation and parallelization. </title> <editor> In [Stickel, </editor> <year> 1990]. </year>
Reference: [Schwaab and Tusera, 1988] <author> Schwaab, F. and Tusera, D. </author> <year> (1988). </year> <title> Un Algorithme Distribue pour l'Execution Parallele de Prolog. </title> <type> Technical report, </type> <institution> INRIA, Le Chesnay. </institution>
Reference: [Shapiro, 1983] <author> Shapiro, E. </author> <year> (1983). </year> <title> A Systolic Concurrent PROLOG Machine Lecture notes on the Bagel. </title> <type> Technical Report TR-035, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo. </address>
Reference: [Shapiro, 1984] <author> Shapiro, E. </author> <year> (1984). </year> <title> Systolic Programming: A Paradigm of Parallel Processing. </title> <booktitle> International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 458-470. </pages>
Reference: [Shapiro, 1986] <author> Shapiro, E. </author> <year> (1986). </year> <title> Concurrent prolog: A progress report. </title> <journal> Computer, </journal> 1986(8) 44-58. also in [Bibel and Jorrand, 1986]. 
Reference: [Shapiro, 1988] <author> Shapiro, E. </author> <year> (1988). </year> <title> Concurrent Prolog. </title> <publisher> MIT Press. </publisher>
Reference: [Shapiro, 1989a] <author> Shapiro, E. </author> <year> (1989a). </year> <title> The family of concurrent logic programming languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 413-510. </pages>
Reference: [Shapiro, 1989b] <author> Shapiro, E. </author> <year> (1989b). </year> <title> Or-Parallel PROLOG in Flat Concurrent PROLOG. </title> <journal> Logic Programming, </journal> (6):243-267. 
Reference: [Shapiro and Takeuchi, 1983] <author> Shapiro, E. and Takeuchi, A. </author> <year> (1983). </year> <title> Object-Oriented Programming in Concurrent Prolog. </title> <journal> New Generation Computing, </journal> (1):25-48. 
Reference: [Shastri, 1988] <author> Shastri, L. </author> <year> (1988). </year> <title> A connectionist approach to knowledge representation and limited inference. </title> <journal> Cognitive Science, </journal> <volume> 12 </volume> <pages> 331-392. 24 </pages>
Reference: [Shastri and Ajjanagadde, 1989] <author> Shastri, L. and Ajjanagadde, V. </author> <year> (1989). </year> <title> A connectionist system for rule based reasoning with multi-place predicates and variables. </title> <type> Technical report, </type> <institution> University of Pennsylvania, Computer and Information Science Department, </institution> <address> Philadelphia. </address>
Reference: [Shastri and Ajjanagadde, 1990] <author> Shastri, L. and Ajjanagadde, V. </author> <year> (1990). </year> <title> From simple associations to systematic reasoning: A connectionist representation of rules, variables and dynamic bindings. </title> <type> Technical Report MS-CIS-90-05, </type> <institution> Computer And Information Science Department, University of Pennsylvania, </institution> <address> Philadelphia, PA 19104. </address>
Reference: [Shastri and Feldman, 1985] <author> Shastri, L. and Feldman, J. A. </author> <year> (1985). </year> <title> Evidential Reasoning in Semantic Networks: A Formal Theory. </title> <booktitle> In IJCAI '85, </booktitle> <pages> pages 465-474. </pages>
Reference: [Shaw, 1981] <author> Shaw, D. </author> <year> (1981). </year> <title> NON-VON: A Parallel Machine Architecture for Knowledge Based Information Processing. </title> <booktitle> In IJCAI '81, </booktitle> <pages> pages 961-963, </pages> <address> Vancouver. </address>
Reference: [Shaw, 1987] <author> Shaw, D. </author> <year> (1987). </year> <title> On the range of applicability of an artificial intelligence machine. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 252-172. </pages>
Reference: [Shen and Warren, 1987] <author> Shen, K. and Warren, D. </author> <year> (1987). </year> <title> A simulation study of the Argonne model for OR-parallel execution of Prolog. </title> <booktitle> In Symposium on Logic Programming '87, </booktitle> <pages> pages 54-86. </pages>
Reference: [Shrobe et al., 1988] <author> Shrobe, H., Aspinall, J., and Mayle, N. </author> <year> (1988). </year> <title> Towards A Virtual Parallel Inference Engine. </title> <booktitle> In AAAI '88, </booktitle> <pages> pages 654-659. </pages>
Reference: [Singhal, 1990] <author> Singhal, A. </author> <year> (1990). </year> <title> Exploiting Fine Grain Parallelism in Prolog. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley. </institution> <note> TR CSD 90/588. </note>
Reference: [Smolensky, 1987] <author> Smolensky, P. </author> <year> (1987). </year> <title> On variable binding and the representation of symbolic structures in connectionist systems. </title> <type> CU-CS 355-87, </type> <institution> Department of Computer Science and Institute of Cognitive Science, University of Colorado. </institution>
Reference: [Sohma et al., 1985] <author> Sohma, Y., Satoh, K., Kumon, K., Masuzawa, H., and Itashiki, A. </author> <year> (1985). </year> <title> A new parallel inference mechanism based on sequential processing. </title> <booktitle> In IFIP TC-10 Working Conference on Fifth Generation Computer Architecture, UMIST, </booktitle> <address> Manchester. </address>
Reference: [Stanfill, 1988] <author> Stanfill, C. </author> <year> (1988). </year> <title> Parallel computing for information retrieval. </title> <type> Technical Report DR88-1, </type> <institution> Thinking Machines Corporation, </institution> <address> Cambridge, MA. </address>
Reference: [Stanfill and Waltz, 1986] <author> Stanfill, C. and Waltz, D. </author> <year> (1986). </year> <title> Toward Memory-Based Reasoning. </title> <journal> Communications of the ACM, </journal> <volume> 29 </volume> <pages> 1213-1228. </pages>
Reference: [Stanfill and Waltz, 1988a] <author> Stanfill, C. and Waltz, D. </author> <year> (1988a). </year> <title> Artificial intelligence on the connection machine: A snapshot. </title> <type> Technical Report G88-1, </type> <institution> Thinking Machines Corporation, </institution> <address> Cambridge, MA. </address>
Reference: [Stanfill and Waltz, 1988b] <author> Stanfill, C. and Waltz, D. </author> <year> (1988b). </year> <title> The memory-based reasoning paradigm. </title> <booktitle> In Case-Based Reasoning Workshop, </booktitle> <pages> pages 414-424, </pages> <address> Clearwater Beach, FL. </address>
Reference: [Stender, 1987] <author> Stender, J. </author> <year> (1987). </year> <title> Parallele Prolog-Implementierung auf Transputern. Hard and Soft, </title> <booktitle> Juli/August 87 </booktitle> <pages> 17-23. </pages>
Reference: [Stern, 1988] <author> Stern, A. </author> <year> (1988). </year> <title> Matrix Logic. </title> <publisher> North Holland, Amsterdam. </publisher>
Reference: [Stickel, 1989] <author> Stickel, M., </author> <title> editor (1989). </title> <booktitle> 1989 AAAI Spring Symposium on Representation and Compilation in High Performance Theorem Proving. SRI International. </booktitle>
Reference: [Stickel, 1990] <author> Stickel, M., </author> <title> editor (1990). </title> <booktitle> CADE '90: 10th International Conference on Automated Deduction, volume 449 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Kaiserslautern. </address> <publisher> Springer. </publisher>
Reference: [Stolcke, 1989] <author> Stolcke, A. </author> <year> (1989). </year> <title> Unification as constraint satisfaction in structured connectionist networks. </title> <journal> Neural Computation, </journal> (1):559-567. <volume> 25 </volume>
Reference: [Stolcke and Wu, 1991] <author> Stolcke, A. and Wu, D. </author> <year> (1991). </year> <title> Tree matching with recursive distributed representations. </title> <booktitle> International Computer Science Institute. </booktitle>
Reference: [Stolfo, 1983] <author> Stolfo, S. </author> <year> (1983). </year> <title> The DADO Parallel Computer. </title> <type> Technical report, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York. </address>
Reference: [Stolfo, 1987a] <author> Stolfo, S. </author> <year> (1987a). </year> <title> Initial Performance of the DADO-2 Prototype. </title> <journal> Computer, </journal> <volume> 20 </volume> <pages> 75-85. </pages>
Reference: [Stolfo, 1987b] <author> Stolfo, S. </author> <year> (1987b). </year> <title> On the Limitations of Massively Parallel (SIMD) Architectures for Logic Programming. </title> <booktitle> In US-Japan AI Symposium. </booktitle>
Reference: [Stolfo et al., 1983] <author> Stolfo, S., Miranker, D., and Shaw, D. </author> <year> (1983). </year> <booktitle> Architecture and applications of DADO: A large-scale parallel computer for artificial intelligence. In IJCAI '83, </booktitle> <pages> pages 850-854, </pages> <address> Karlsruhe, BRD. </address>
Reference: [Succi and Marino, 1991] <author> Succi, G. and Marino, G. </author> <year> (1991). </year> <title> Data Parallelism in Logic Programming. </title> <booktitle> In [ICLP91, </booktitle> <year> 1991]. </year>
Reference-contexts: Whereas typical logic programs may not contain many data structures where data parallelism can be applied, there certainly are many applications with highly regular data structures which can profit from this combination, such as deductive data bases, image processing, or scientific computations <ref> [Fagin, 1991, Succi and Marino, 1991] </ref>. Streams The concept of streams is based on an incremental evaluation of large data structures, e.g. lists which change dynamically [Ito et al., 1987, Takeuchi et al., 1987].
Reference: [Syre, 1985] <editor> Syre, J.-C. </editor> <year> (1985). </year> <title> A Review of Computer Architectures for Functional and Logic Programming Systems. </title> <type> Technical report, </type> <institution> European Computer Research Center (ECRC), Munchen. </institution>
Reference: [Syre and Westphal, 1985] <author> Syre, J.-C. and Westphal, H. </author> <year> (1985). </year> <title> A Review of Parallel Models for Logic Programming Languages. </title> <type> Technical report, </type> <institution> European Computer Research Center (ECRC), Munchen. </institution>
Reference: [Szeredi, 1989] <author> Szeredi, P. </author> <year> (1989). </year> <title> Performance Analysis of the Aurora OR-parallel Prolog System. </title> <booktitle> In North American Conference on Logic Programming. </booktitle>
Reference: [Takeuchi and Furukawa, 1985] <author> Takeuchi, A. and Furukawa, K. </author> <year> (1985). </year> <title> Interprocess Communication in Concurrent Prolog. </title> <type> Technical report, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo. </address>
Reference: [Takeuchi and Furukawa, 1986] <author> Takeuchi, A. and Furukawa, K. </author> <year> (1986). </year> <booktitle> Parallel Logic Programming Languages. In Third International Conference On Logic Programming '86, </booktitle> <pages> pages 242-254. </pages>
Reference: [Takeuchi et al., 1987] <author> Takeuchi, A., Takahashi, K., and Shimizu, H. </author> <year> (1987). </year> <title> A Description Language with AND/OR Parallelism for Concurrent Systems and Its Stream-Based realization. </title> <type> Technical report, </type> <institution> Institute for New Generation Computer Technology, </institution> <address> Tokyo. </address>
Reference-contexts: Streams The concept of streams is based on an incremental evaluation of large data structures, e.g. lists which change dynamically <ref> [Ito et al., 1987, Takeuchi et al., 1987] </ref>. Usually operations involving the whole data structure, like comparing two lists, are only applicable if and when the whole data structures are available.
Reference: [Tamaki, 1985] <author> Tamaki, H. </author> <year> (1985). </year> <title> A Distributed Unification Scheme for Systolic Logic Programs. </title> <address> pages 552-559. </address> <publisher> IEEE. </publisher>
Reference: [Tamura and Kanada, 1984] <author> Tamura, N. and Kanada, Y. </author> <year> (1984). </year> <title> Implementing Parallel Prolog on a Multiprocessor Machine. </title> <booktitle> In International Symposium On Logic Programming '84, </booktitle> <address> Atlantic City, NJ. </address>
Reference: [Tanaka, 1988] <author> Tanaka, J. </author> <year> (1988). </year> <title> Meta-interpreters and Reflective Operations in GHC. </title> <booktitle> In Future Generation Computer Systems, </booktitle> <pages> pages 775-783, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Taylor, 1989] <author> Taylor, S. </author> <year> (1989). </year> <title> Parallel Logic Programming Techniques. </title> <publisher> Prentice Hall. </publisher>
Reference: [Taylor et al., 1983] <author> Taylor, S., Maio, C., Stolfo, S., and Shaw, D. </author> <year> (1983). </year> <title> Prolog on the DADO Machine: A Parallel System for High-speed Logic Programming. </title> <type> Technical report, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York. </address>
Reference: [Tick, 1988] <author> Tick, E. </author> <year> (1988). </year> <title> Compile-time granularity analysis for parallel logic programming languages. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 994-1000, </pages> <address> Tokyo, Japan. </address> <month> 26 </month>
Reference: [Tick and Warren, 1984] <author> Tick, E. and Warren, D. </author> <year> (1984). </year> <title> Towards a Pipelined Prolog Processor. </title> <journal> New Generation Computing, </journal> <volume> 2 </volume> <pages> 323-345. </pages>
Reference: [Touretzky and Hinton, 1985] <author> Touretzky, D. and Hinton, G. </author> <year> (1985). </year> <title> Symbols Among the Neurons: Details of a Connectionist Inference Architecture. </title> <booktitle> In IJCAI '85, </booktitle> <pages> pages 238-243, </pages> <address> Pittsburgh. </address>
Reference: [Touretzky and Hinton, 1988] <author> Touretzky, D. S. and Hinton, G. E. </author> <year> (1988). </year> <title> A distributed connectionist production system. </title> <journal> Cognitive Science, </journal> <volume> 12 </volume> <pages> 423-466. </pages>
Reference: [Treleaven, 1989] <author> Treleaven, P. C., </author> <title> editor (1989). Parallel Computers: Object-Oriented, Functional and Logic. </title> <publisher> Wiley, </publisher> <address> Chichester. </address>
Reference: [Treleaven and Refenes, 1985] <author> Treleaven, P. C. and Refenes, A. N. </author> <year> (1985). </year> <title> Fifth Generation and VLSI Architectures. </title> <journal> Future Generation Computer Systems, </journal> <volume> 1(6) </volume> <pages> 387-396. </pages>
Reference: [Treleaven et al., 1987] <author> Treleaven, P. C., Refenes, A. N., Lees, K., and McCabe, S. </author> <year> (1987). </year> <booktitle> Computer Architectures for Artificial Intelligence. In [Treleaven and Vanneschi, </booktitle> <year> 1987]. </year>
Reference: [Treleaven et al., 1986] <author> Treleaven, P. C., Refenes, A. N., Lees, K. J., and Mccabe, S. C. </author> <year> (1986). </year> <title> Computer Architectures for Artificial Intelligence. </title> <type> Technical report, </type> <institution> University College, London; Ferranti Computer Systems, Bracknell; THORN-EMI Central Research Labs., Hayes. </institution>
Reference: [Treleaven and Vanneschi, 1987] <author> Treleaven, P. C. and Vanneschi, M., </author> <title> editors (1987). Future Parallel Computers, </title> <booktitle> volume 272 of Lecture Notes in Computer Science, </booktitle> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference: [Uchida, 1983] <author> Uchida (1983). </author> <title> Inference Machine: From Sequential to Parallel. </title> <booktitle> In 10th Annual International Symposium On Computer Architecture, </booktitle> <address> Schweden. </address>
Reference: [Uchida, ] <author> Uchida, S. </author> <title> Inference Machines in FCGS Project. </title> <type> Technical Report TR-278, </type> <institution> Institute for New Generation Computer Technology, </institution> <address> Tokyo. </address>
Reference: [Uchida, 1987] <author> Uchida, S. </author> <year> (1987). </year> <title> Parallel Inference Machines at ICOT. </title> <journal> Future Generation Computer Systems, </journal> (3):245-252. 
Reference: [Uchida et al., 1986] <author> Uchida, S., K, T., Goto, A., Nakajima, K., Nakashima, H., Yokota, M., Nishikawa, H., Yamamoto, A., and Mitsui, M. </author> <year> (1986). </year> <title> Logic Computers and Japan's FGCS Project. </title> <editor> In [Treleaven and Vanneschi, </editor> <year> 1987]. </year>
Reference: [Uchida et al., 1988] <author> Uchida, S., Taki, K., Nakajima, K., Goto, A., and Chikayama, T. </author> <year> (1988). </year> <title> Research and Development of the Parallel Inference Systemin the Intermediate Stage of the FGCS Project. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 17-36, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Ueda, 1985] <author> Ueda, K. </author> <year> (1985). </year> <title> Guarded Horn Clauses. </title> <type> Technical Report TR-103, </type> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Ueda, 1986] <author> Ueda, K. </author> <year> (1986). </year> <title> Guarded Horn Clauses: A Parallel Logic Programming Language with the Concept of a Guard. </title> <type> Technical Report TR-208, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo, Japan. </address>
Reference: [Ueda, 1989] <author> Ueda, K. </author> <year> (1989). </year> <title> Parallelism in logic programming. </title> <type> Technical Report TR-495, </type> <institution> Institute for New Generation Computer Technology (ICOT), </institution> <address> Tokyo, Japan. </address>
Reference: [Ultsch et al., 1990] <author> Ultsch, A., Hannuschka, R., Hartmann, U., and Weber, V. </author> <year> (1990). </year> <title> Learning of control knowledge for symbolic proofs with backpropagation networks. </title> <editor> In [Eckmiller et al., </editor> <year> 1990], </year> <pages> pages 499-502. </pages>
Reference: [Vitter and Simons, 1986] <author> Vitter, J. and Simons, R. </author> <year> (1986). </year> <title> New classes for parallel complexity:. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(5) </volume> <pages> 403-418. 27 </pages>
Reference: [Wah, 1987] <author> Wah, B. </author> <year> (1987). </year> <journal> New Computers for Artificial Intelligence Processing. Computer, </journal> <volume> 20 </volume> <pages> 10-19. </pages>
Reference: [Waltz, 1990] <author> Waltz, D. L. </author> <year> (1990). </year> <title> Massively Parallel AI. </title> <booktitle> In Ninth National Conference on Artificial Intelligence, </booktitle> <address> Boston, MA. </address> <booktitle> American Association for Artificial Intelligence. </booktitle>
Reference: [Waltz and Stanfill, 1988a] <author> Waltz, D. L. and Stanfill, C. </author> <year> (1988a). </year> <booktitle> Artificial Intelligence Related Research on the Connection Machine. In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 1010-1024, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Waltz and Stanfill, 1988b] <author> Waltz, D. L. and Stanfill, C. </author> <year> (1988b). </year> <booktitle> Artificial Intelligence Related Research on the Connection Machine. In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 1010-1024, </pages> <address> Tokyo. </address> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference: [Wang, 1989] <author> Wang, J. </author> <year> (1989). </year> <title> Towards a New Computational Model for Logic Languages. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Essex, </institution> <address> Colchester. </address>
Reference-contexts: Spanning Sets One important advantage of the spanning set concept as well is to make the run-time management of bindings simpler. This is based on a statical analysis of the program with the goal of identifying parts of the program (spanning sets of connections) which represent alternative solutions <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref> (see also the contribution of Wang, Marsh and Lavington in this volume). These solutions then can be computed completely independent of each other, without the necessity of maintaining complex run-time environments for variable bindings. <p> The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved. The second restriction can be overcome by choosing a different evaluation mechanism <ref> [Bibel, 1987, Wang, 1989, Iba~nez, 1988, Iba~nez, 1989, Kurfe, 1990] </ref>. Unification Competition Conceptually similar to competition in the inference mechanism, competition can be used for unification by applying different unification mechanisms to one and the same term pair.
Reference: [Wang et al., 1990] <author> Wang, J., Marsh, A., and Lavington, S. </author> <year> (1990). </year> <title> Non-WAM Models of Logic Programming and their Support by Novel Parallel Hardware. </title> <booktitle> International Workshop on Massively Parallel Inference Systems. </booktitle>
Reference: [Warren, 1987] <author> Warren, D. </author> <year> (1987). </year> <title> The SRI model for OR-parallel execution of Prolog. </title> <booktitle> In Symposium on Logic Programming '87, </booktitle> <pages> pages 92-102. </pages>
Reference: [Warren, 1983] <author> Warren, D. H. </author> <year> (1983). </year> <title> An Abstract Prolog Instruction Set. </title> <type> Technical Report 309, </type> <institution> SRI International, Artificial Intelligence Center, Menlo Park, California. </institution>
Reference-contexts: We will not restrict ourselves, however, to a certain processing mode, architecture or topology; in particular, we want to overcome the severe implications imposed by the inherently sequential execution mode of a stack-based Warren Abstract Machine Wam <ref> [Warren, 1983] </ref> and resolution as underlying calculus. This will give us the freedom to investigate different computational models, especially with respect to their suitability for parallel evaluation. 2 Categories of Parallelism This section gives an overview of various categories of parallelism which can be identified in inference systems.
Reference: [Watzlawik, 1991] <author> Watzlawik, G. </author> <year> (1991). </year> <title> European Declarative System (EDS): Architecture and Interprocess Communication. </title> <booktitle> In [Bode, </booktitle> <year> 1991], </year> <pages> pages 485-494. </pages>
Reference: [Weinbaum and Shapiro, 1986] <author> Weinbaum, D. and Shapiro, E. </author> <year> (1986). </year> <title> Hardware Description and Simulation Using Concurrent Prolog. </title> <type> Technical Report CS86-25, </type> <institution> Weizmann Institute of Science, Rehovot, Israel. </institution>
Reference: [Westphal, 1986] <author> Westphal, H. </author> <year> (1986). </year> <title> Eine Beurteilung paralleler Modelle fur Prolog. </title> <booktitle> In GI-Jahrestagung '86, </booktitle> <pages> pages 227-240, </pages> <address> Berlin. </address> <publisher> Springer. </publisher>
Reference: [Westphal et al., 1987] <author> Westphal, H., Robert, P., Chassin, J., and Syre, J. </author> <year> (1987). </year> <title> The PEPSys model: Combining Backtracking, AND- and OR-parallelism. </title> <booktitle> In Symposium on Logic Programming '87, </booktitle> <pages> pages 436-448. </pages>
Reference: [Yamaguchi et al., ] <author> Yamaguchi, T., Tezuka, Y., and Kakusho, O. </author> <title> Parallel Processing of Resolution. </title> <type> Technical report, </type> <institution> Osaka University. </institution>
Reference: [Yang, 1987] <author> Yang, R. </author> <year> (1987). </year> <title> P-Prolog A Parallel Logic Programming Language. </title> <publisher> World Scientific, Singapore. </publisher>
Reference: [Yasuura, 1984] <author> Yasuura, H. </author> <year> (1984). </year> <title> On Parallel Computational Complexity of Unification. </title> <booktitle> In International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 235-243. </pages> <institution> Institute for New Generation Computer Technology (ICOT). </institution>
Reference-contexts: Parallelism on the term level 6 underlies two important restrictions: first, the task of unification can be inherently sequential in the worst case <ref> [Yasuura, 1984, Dwork et al., 1988] </ref>; second, the grain size for unification tasks tends to be rather small with a Prolog-based evaluation model. The first restriction is of a fundamental nature, but depends to a large degree on the formulation and representation of the problem to be solved.
Reference: [Zhiyi and Shouren, 1990] <author> Zhiyi, H. and Shouren, H. </author> <year> (1990). </year> <title> A compiling approach for exploiting AND-parallelism in logic programs. </title> <journal> Future Generation Computer Systems, </journal> <volume> 1(1) </volume> <pages> 35-42. 28 </pages>
References-found: 311

