URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-017.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Comparing Algorithms for Dynamic Speed-Setting of a Low-Power CPU  
Author: Kinshuk Govil Edwin Chan Hal Wasserman 
Note: Supported by NDSEG Fellowship daah04 93-g-0267.  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Berkeley,  Berkeley,  Berkeley,  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Computer Science Division, University of California,  Computer Science Division, University of California,  Computer Science Division, University of California,  
Pubnum: TR-95-017  
Email: kgovil@cory.eecs.berkeley.edu.  chance@cory.eecs.berkeley.edu.  halw@cs.berkeley.edu.  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: April 1995  
Abstract: To take advantage of the full potential of ubiquitous computing devices, we will need systems which minimize power consumption. Weiser et al. and others have suggested that this may be accomplished in part by a CPU which dynamically changes speed and voltage, thereby saving energy by spreading run cycles into idle time. Here we continue this research, using a simulation to compare a number of policies for dynamic speed-setting. Our work clarifies a fundamental power vs. delay tradeoff, as well as the role of prediction and of speed-smoothing in dynamic speed-setting policies. We conclude that success seems to depend more on simple smoothing algorithms than on sophisticated prediction techniques, but defer to the eventual replication of these results on actual multiple-speed systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. P. Chandrakasan, S. Sheng, & R. W. Brodersen, </author> <title> "Low-power CMOS digital design," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> Vol. 27, </volume> <pages> pp. 473-484, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [1, 3, 7] </ref>. They point out that it is possible to build CPUs which can run at several different speeds: and voltage may be decreased approximately linearly as speed decreases. A CPU, regarded as a capacitor-based system, satisfies the physical law Energy/sec / Voltage 2 speed. <p> Traces record CPU-usage for a workstation running standard applications; no attempt was made to capture the unique workload (if any) of a ubiquitous computing device. It is assumed that speed may be set to any real number on range <ref> [min speed, 1] </ref>, where 1 represents full speed. Weiser et al. compile data for min speed values of 0.2, 0.44, and 0.66 (corresponding to imagined CPUs with full voltage 5.0 V and minimum voltages 1.0 V, 2.2 V, or 3.3 V).
Reference: [2] <author> Fred Douglis, P. Krishnan, & Brian Marsh, </author> <title> "Thwarting the power-hungry disk," </title> <booktitle> Proc. Winter 1994 USENIX Conference, </booktitle> <pages> pp. 293-306, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be optimized by spinning down the disk whenever it has been inactive for several seconds; <ref> [2, 4, 5] </ref> have researched this topic. It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by [1, 3, 7].
Reference: [3] <author> Mark A. Horowitz, </author> <title> "Self-clocked structures for low power systems," </title> <type> ARPA semi-annual report, </type> <institution> Computer Science Laboratory, Stanford University, </institution> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [1, 3, 7] </ref>. They point out that it is possible to build CPUs which can run at several different speeds: and voltage may be decreased approximately linearly as speed decreases. A CPU, regarded as a capacitor-based system, satisfies the physical law Energy/sec / Voltage 2 speed.
Reference: [4] <author> Kester Li, Roger Kumpf, Paul Horton, & Thomas Anderson, </author> <title> "A quantitative analysis of disk drive power management in portable computers," </title> <booktitle> Proc. Winter 1994 USENIX Conference, </booktitle> <pages> pp. 279-292, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Clearly it will be advantageous for such devices to minimize power consumption. The top power-consumers in a computer system are the display (68%), the disk (20%), and the CPU (12%) <ref> [4] </ref>. There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be optimized by spinning down the disk whenever it has been inactive for several seconds; [2, 4, 5] have researched this topic. <p> There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be optimized by spinning down the disk whenever it has been inactive for several seconds; <ref> [2, 4, 5] </ref> have researched this topic. It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by [1, 3, 7].
Reference: [5] <author> Kester Li, </author> <title> "Towards a low power file system," </title> <type> CS Tech Report 94-814, </type> <institution> University of California, Berkeley, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be optimized by spinning down the disk whenever it has been inactive for several seconds; <ref> [2, 4, 5] </ref> have researched this topic. It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by [1, 3, 7].
Reference: [6] <author> Mark Weiser, </author> <title> "Some computer science issues in ubiquitous computing," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 36, </volume> <pages> pp. 74-83, </pages> <month> July </month> <year> 1993. </year>
Reference: [7] <author> Mark Weiser, Brent Welch, Alan Demers, & Scott Shenker, </author> <title> "Scheduling for reduced CPU energy," </title> <booktitle> Proc. Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pp. 13-23, </pages> <month> November, </month> <year> 1994. </year> <month> 12 </month>
Reference-contexts: It is certainly possible to imagine ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [1, 3, 7] </ref>. They point out that it is possible to build CPUs which can run at several different speeds: and voltage may be decreased approximately linearly as speed decreases. A CPU, regarded as a capacitor-based system, satisfies the physical law Energy/sec / Voltage 2 speed. <p> Nevertheless, our goal here will be to separate the two functions to some extent, trying to understand the utility (or lack thereof) of several algorithms for prediction and for smoothing. Weiser et al. <ref> [7] </ref> present just one practical speed-setting policy, PAST. PAST's prediction algorithm is elementary, and its smoothing is somewhat ad hoc. Hypothesizing that more sophisticated prediction methods will allow for substantially improved performance, we here set out to compare the performance of several new policies. <p> To indicate that the above data is not specific to emacs1, we have duplicated the runs in Figure 10 on a quite different trace, kestrel.mar1; nearly ten hours long, this trace is on a workload including "software development, documentation, e-mail, simulation, and other typical activities of engineering workstations" <ref> [7] </ref>. The results are shown in Figure 11. Since the simulator was capable of identifying much of the idle time in kestrel.mar1 as soft, we were also able to run these traces with run cycles stretched only into soft idle.
References-found: 7

