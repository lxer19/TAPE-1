URL: http://www.cs.utah.edu/~cs686/serrano-icfp96.ps
Refering-URL: http://www.cs.utah.edu/~cs686/
Root-URL: 
Email: fSerrano,Feeleyg@IRO.UMontreal.CA  
Phone: 1  2  
Title: Storage Use Analysis and its Applications  
Author: Manuel Serrano ; and Marc Feeley 
Address: Montreal C.P. 6128, succ. centre-ville, Montreal Canada H3C 3J7  B.P. 105, Rocquencourt, 78153 Le Chesnay Cedex, France  
Affiliation: Universite de  Inria  
Abstract: In this paper we present a new program analysis method which we call Storage Use Analysis. This analysis deduces how objects are used by the program and allows the optimization of their allocation. This analysis can be applied to both statically typed languages (e.g. ML) and latently typed languages (e.g. Scheme). It handles side-effects, higher order functions, separate compilation and does not require cps transformation. We show the application of our analysis to two important optimizations: stack allocation and unbox-ing. The first optimization replaces some heap allocations by stack allocations for user and system data storage (e.g. lists, vectors, procedures). The second optimization avoids boxing some objects. This analysis and associated optimizations have been implemented in the Bigloo Scheme/ML compiler. Experimental results show that for many allocation intensive programs we get a significant speedup. In particular, numerically intensive programs are almost 20 times faster because floating point numbers are unboxed and no longer heap allocated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Appel. </author> <title> Runtime Tags Aren't Necessary. </title> <type> Technical Report CS-TR-142-88, </type> <institution> Princeton University, </institution> <year> 1989. </year>
Reference: [2] <author> A. Appel. </author> <title> Compiling with continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [3] <author> A. Ayers. </author> <title> Abstract Analysis and Optimization of Scheme. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> Septem-ber </month> <year> 1993. </year>
Reference: [4] <author> A. Banerjee and D. Schmidt. </author> <title> Stackability in the Simple-Typed Call-By-Value Lambda Calculus. </title> <booktitle> In 1fst Static Analysis Symposium, </booktitle> <pages> pages 131-146, </pages> <address> Namur, Belgium, </address> <month> Septem-ber </month> <year> 1994. </year>
Reference: [5] <author> J.F. Bartlett. </author> <title> Scheme-&gt;C a Portable Scheme-to-C Compiler. </title> <type> Research Report 89 1, </type> <institution> DEC Western Research Laboratory, </institution> <address> Palo Alto, CA, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: Both versions of Bigloo use Boehm's garbage collector release 4.7 [6]. This collector allows ambiguous pointers and uses a traditional mark & sweep algorithm. Gsc is the Gambit-C compiler version 2.3a, S2c is Bartlett's Scheme-to-C compiler version 15mar93jfb <ref> [5] </ref> and Gcc is the popular Gnu C compiler version 2.6.3, used at optimized level 2. Here is a short description of the Scheme test programs we used: Nucleic (3496 lines) : Floating-point arithmetic. Fft (127 lines) : Floating-point arithmetic, loops. Bcopy (43 lines) : Strings, chars, fixnum, loops.
Reference: [6] <author> H.J. Boehm. </author> <title> Space efficient conservative garbage collection. </title> <booktitle> In Conference on Programming Language Design and Implementation, number 28, 6 in Sigplan Notices, </booktitle> <pages> pages 197-206, </pages> <year> 1991. </year>
Reference-contexts: The times given are user+system time, including garbage collection time. Bigloo1.7 is the current distributed version of the system, Bigloo1.8 is the new version including the unboxed representation and the stack allocation optimization. Both versions of Bigloo use Boehm's garbage collector release 4.7 <ref> [6] </ref>. This collector allows ambiguous pointers and uses a traditional mark & sweep algorithm. Gsc is the Gambit-C compiler version 2.3a, S2c is Bartlett's Scheme-to-C compiler version 15mar93jfb [5] and Gcc is the popular Gnu C compiler version 2.6.3, used at optimized level 2.
Reference: [7] <author> D. Chase. </author> <title> Safety considerations for storage allocation optimizations. </title> <booktitle> In Conference on Programming Language Design and Implementation, </booktitle> <address> Atlanta, Georgia, USA, </address> <month> June </month> <year> 1988. </year>
Reference: [8] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Symposium on Principles of Programming Languages, </booktitle> <pages> pages 238-252, </pages> <address> Los Angeles, CA, USA, </address> <month> January </month> <year> 1977. </year>
Reference: [9] <author> B. Goldberg and G. Park. </author> <title> Higher order escape analysis: Optimizing stack allocation in functional program implementations. </title> <booktitle> In European Symposium on Programming, number 432 in Lecture Notes on Computer Science, </booktitle> <pages> pages 152-160, </pages> <month> May </month> <year> 1990. </year>
Reference: [10] <author> J. Goubault. </author> <title> Generalized Boxings, Congruences and Partial Inlining. </title> <booktitle> In 1fst Static Analysis Symposium, </booktitle> <pages> pages 147-161, </pages> <address> Namur, Belgium, </address> <month> September </month> <year> 1994. </year>
Reference: [11] <author> R. Harper and G. Morrisset. </author> <title> Compiling polymorphism using intensional type analysis. </title> <booktitle> In 22 Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 130-141, </pages> <address> New York, NY, USA, </address> <month> January </month> <year> 1995. </year>
Reference: [12] <author> P. Hartel et al. Pseudoknot: </author> <title> a Float-Intensive Benchmark for Functional Compilers. </title> <journal> Journal of Functional Programming, </journal> <note> To appear, </note> <year> 1996. </year>
Reference: [13] <author> F. Henglein. </author> <title> Global Tagging Optimization by Type Inference. </title> <booktitle> In Conference on Lisp and Functional Programming, </booktitle> <year> 1992. </year>
Reference: [14] <author> P. Hudak. </author> <title> A semantic model of reference counting and its abstraction. </title> <booktitle> In Abstract Interpretation of Declarative Languages, </booktitle> <pages> pages 45-62. </pages> <publisher> Ellis Horwood, </publisher> <year> 1987. </year>
Reference: [15] <author> S. Jagannathan and A. Wright. </author> <title> Effective Flow Analysis for Avoiding Run-Time Checks. </title> <booktitle> In 2nd Static Analysis Symposium, Lecture Notes on Computer Science, </booktitle> <pages> pages 207-224, </pages> <address> Glasgow, Scotland, </address> <month> September </month> <year> 1995. </year>
Reference: [16] <author> T. Johnson. </author> <title> Lambda Lifting : Transforming Programs to Recursive Equations. </title> <booktitle> In Proceedings of the ACM Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 190-203, </pages> <year> 1985. </year>
Reference: [17] <author> D.A. Kranz. </author> <title> ORBIT: An Optimizing Compiler For Scheme. </title> <type> PhD thesis, </type> <institution> Yale university, </institution> <month> February </month> <year> 1988. </year>
Reference: [18] <author> X. Leroy. </author> <title> Efficient data representation in polymorphic languages. </title> <editor> In P. Deransart and J.Ma luszynski, editors, </editor> <booktitle> Int. Symp. on Programming Language Implementation and Logique Programming, volume 456 of Lecture Notes on Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Also available as IN-RIA research report 1264. </note>
Reference: [19] <author> X. Leroy. </author> <title> Unboxed objects and polymorphic typing. </title> <booktitle> In Symposium on Principles of Programming Languages, </booktitle> <pages> pages 177-188, </pages> <address> Albuquerque, New Mexico, </address> <month> January </month> <year> 1992. </year>
Reference: [20] <author> R. MacLachlan. </author> <title> The Python Compiler for CMU Common Lisp. </title> <booktitle> In Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 235-246, </pages> <address> San Francisco, CA, USA, </address> <month> June </month> <year> 1992. </year>
Reference: [21] <author> S. Peyton Jones and J. Launchbury. </author> <title> Unboxed Values as First Class Citizens in a Non-Strict Functional Language. </title> <booktitle> In Proceedings of the ACM Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 636-666, </pages> <address> Cambridge, MA, USA, </address> <month> August </month> <year> 1991. </year>
Reference: [22] <author> W. Press, B. Flannery, S. Teukolsky, and Vetterling W. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: On Mbrot and Fft (which is a translation of a C routine from <ref> [22] </ref>, not the Lisp version from the Gabriel suite) Bigloo's performance is very close to Gcc. Fft and Mbrot are efficiently compiled by Bigloo; no floating point values get boxed. Fft makes use of vectors of floats which are optimized as described in Section 4.5.2.
Reference: [23] <author> C. Ruggieri and T. Murtagh. </author> <title> Lifetime Analysis of Dynamically Allocated Object. </title> <booktitle> In Symposium on Principles of Programming Languages, </booktitle> <pages> pages 285-293, </pages> <year> 1988. </year>
Reference: [24] <author> M. Serrano. </author> <title> De l'utilisation des analyses de flot de controle dans la compilation des langages fonctionnels. </title> <editor> In Pierre Les-canne, editor, Actes des journees du GDR de Programma-tion, </editor> <month> September </month> <year> 1993. </year>
Reference: [25] <author> M. Serrano. </author> <title> Vers une compilation portable et performante des langages fonctionnels. </title> <institution> These de doctorat d'universite, Universite Pierre et Marie Curie (Paris VI), Paris, France, </institution> <month> December </month> <year> 1994. </year>
Reference: [26] <author> M. Serrano. </author> <title> Control Flow Analysis: a Functional Languages Compilation Paradigm. </title> <booktitle> In 10th Symposium on Applied Computing, </booktitle> <address> Nashville, Tennessee, USA, </address> <month> February </month> <year> 1995. </year>
Reference: [27] <author> Z. Shao and A. Appel. </author> <title> A Type-Based Compiler for Standard ML. </title> <booktitle> In Proceedings of the SIGPLAN '95 Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1995. </year>
Reference: [28] <author> O. Shivers. </author> <title> Control flow analysis in scheme. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <address> Atlanta, Georgia, </address> <month> June </month> <year> 1988. </year>
Reference: [29] <author> O. Shivers. </author> <title> Control-Flow Analysis of Higher-Order Languages or Taming Lambda. </title> <institution> CMU-CS-91-145, School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> May </month> <year> 1991. </year>
Reference: [30] <author> P.A. Steenkiste and J. Hennessy. </author> <title> Tags and Type Checking in LISP: Hardware and Software Approaches. </title> <booktitle> In Architectural support for programming languages and operating systems, </booktitle> <pages> pages 50-59, </pages> <address> Palo Alto. CA US, </address> <year> 1987. </year>
Reference: [31] <author> M. Tofte and J-P. Talpin. </author> <title> Implementation of the Typed Call-by-Value -calculus using a Stack of Regions. </title> <booktitle> In 21st acm sigplan-sigact Symposium on Principles of Programming Languages, </booktitle> <pages> pages 188-201, </pages> <address> Portland, Oregon, USA, </address> <month> January </month> <year> 1994. </year>
References-found: 31

