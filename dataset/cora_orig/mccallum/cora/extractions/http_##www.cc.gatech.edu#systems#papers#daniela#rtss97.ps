URL: http://www.cc.gatech.edu/systems/papers/daniela/rtss97.ps
Refering-URL: http://www.cs.gatech.edu/people/home/daniela/cv.html
Root-URL: 
Email: f daniela,schwan g@cc.gatech.edu sudhakar.yalamanchili@ee.gatech.edu  jha@src.honeywell.com  
Title: On Adaptive Resource Allocation for Complex Real-Time Applications  
Author: Daniela Rosu, Karsten Schwan, Sudhakar Yalamanchili Rakesh Jha 
Address: 801 Atlantic Drive, Atlanta, GA 30332-0208  3660 Technology Drive Minneapolis, MN-55418  
Affiliation: Georgia Institute of Technology  Honeywell Technology Center  
Abstract: Resource allocation for high-performance real-time applications is challenging due to the applications' data-dependent nature, dynamic changes in their external environment, and limited resource availability in their target embedded system platforms. These challenges may be met by use of Adaptive Resource Allocation (ARA) mechanisms that can promptly adjust resource allocation to changes in an application's resource needs, whenever there is a risk of failing to satisfy its timing constraints. By taking advantage of an application's adaptation capabilities, ARA eliminates the need for `over-sizing' real-time systems to meet worst-case application needs. This paper proposes a model for describing an application's adaptation capabilities and the runtime variation of its resource needs. The paper also proposes a satisfiability-driven set of performance metrics for capturing the impact of ARA mechanisms on the performance of adaptable real-time applications. The relevance of the proposed set of metrics is demonstrated experimentally, using a synthetic application designed to represent time-critical applications in C3I systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. F. Abdelzaher, E. M. Atkins, and K. G. Shin. </author> <title> QoS Negotiation in Real-Time Systems and Its Application to Automated Flight Control. </title> <booktitle> Real-Time Technology and Applications Symposium, </booktitle> <year> 1997. </year>
Reference-contexts: In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. Extensive research has addressed the problem of dynamic resource allocation for both the real-time <ref> [1, 9, 10, 18, 22] </ref> and the non-real-time [7, 14, 17] domains. <p> Model Discussion. The knowledge of the acceptable configurations permits automatic adjustments of a component resource usage without negotiation. The adaptation overhead permits the ARA infrastructure to estimate the enactment overheads and their effects on the application performance. Related Work. Our model is different from other schemes <ref> [1] </ref> that allow the application to specify a set of acceptable configurations at resource request time, by its description of adaptation overheads. The current model does not permit the specification of the "value" each particular configuration brings to the application, as in [1]. <p> Our model is different from other schemes <ref> [1] </ref> that allow the application to specify a set of acceptable configurations at resource request time, by its description of adaptation overheads. The current model does not permit the specification of the "value" each particular configuration brings to the application, as in [1]. This is motivated by the current goal of our ARA: to satisfy the application's performance requirements with no concern for the overall application "value". However, such mission level information may be easily added to the model. 3.3.
Reference: [2] <author> A. Banerja and D. Ferrari. </author> <title> The Tenet Real-Time Protocol Suite: Design, Implementation, and Experiences. </title> <journal> IEEE/ACM Transactions on Networking vol.4, </journal> <volume> no.1, </volume> <month> Feb., </month> <year> 1996. </year>
Reference-contexts: The component's computation needs include its execution time and its communication related computation. The latter is estimated based on the number of I/O operations and the total amount of data transferred. The communication needs result directly from the model. In contrast to typical real-time connection models <ref> [2] </ref>, we ignore the intra-communication burst because it influences only the memory requirements on the nodes and network routers.
Reference: [3] <author> T. Bihari and K. Schwan. </author> <title> Dynamic Adaptation of Real-Time Software. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> May, </month> <year> 1991. </year>
Reference-contexts: Resource management problems for real-time and embedded applications are exacerbated by dynamic changes in their external environments and by restrictions on resource availability. Solving such problems by using worst-case needs analysis [6] is typically not viable because of excessive resource estimates resulting from complex application behavior. Instead, adaptive methods <ref> [3, 10, 11] </ref> must be used to adjust resource allocation to changes in an application's needs and to insure the satisfiability of its real-time constraints. fl Funded in part by DARPA through the Honeywell Technology Center under Contract No. B09332478and Contract No. <p> The application is designed by Honeywell in the context of high performance C3I 1 applications [15]. Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications <ref> [3, 11, 13] </ref>, including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications [3, 13] or that maintain high application throughput [11]. <p> Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications [3, 11, 13], including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications <ref> [3, 13] </ref> or that maintain high application throughput [11]. In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. <p> This is due to the resource management infrastructure's fast access to all the necessary information related to resource availability and current resource usage patterns of application components. A drawback is that, compared to application-level decisions <ref> [3] </ref>, ARA decisions may fail to produce the most appropriate resource assignment for each particular situation. Likewise, ARA may result in resource allocation changes not necessary for achieving acceptable application performance. The models and mechanisms embedded in an ARA infrastructure mitigate these potential drawbacks.
Reference: [4] <author> S. H. Bokhari. </author> <title> Partitioning Problems in Parallel, Pipelined and Distributed Computing. </title> <journal> IEEE Transactions on Computers, </journal> <month> Jan., </month> <year> 1988. </year>
Reference-contexts: Instead, our ARA approach advocates using a RUM with reduced levels of detail and low decision overheads, yet able to provide good estimates of application performance. The RUM also improves on previous parallel task models used in load balancing or task assignment problems <ref> [10, 4, 17] </ref> that describe the communication needs only by the time taken to perform it. By providing a more detailed description, the RUM can better estimate communication related resource needs in terms of multiple resource types and in a heterogenous environment. 3.2. Adaptation Model Background.
Reference: [5] <author> J. Canny. </author> <title> A Computational Approach to Edge Detection. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <month> Nov., </month> <year> 1986. </year>
Reference-contexts: Our variation-driven detector is similar to the Sobel detector used for edge-detection in computer vision <ref> [5] </ref>. This detector is trustworthier than the variation-based detector because it employs smoothing techniques to eliminate the effect of noise, and its decisions are based on a range of samples around the sample of interest. Unfortunately, these techniques result in poor promptness.
Reference: [6] <author> S. Chatterjee and J. Strosnider. </author> <title> Distributed Pipeline Scheduling: End-to-End Analysis of Heterogeneous, </title> <booktitle> Multi-Resource Real-Time Systems . 15th International Conference on Distributed Computing Systems, </booktitle> <year> 1995. </year>
Reference-contexts: 1. Introduction Motivation. Resource management problems for real-time and embedded applications are exacerbated by dynamic changes in their external environments and by restrictions on resource availability. Solving such problems by using worst-case needs analysis <ref> [6] </ref> is typically not viable because of excessive resource estimates resulting from complex application behavior. <p> The information needed to maintain the dynamic RUM is obtained with low monitoring overhead from the instrumentation of the communication library. Related Work. The resource usage model introduced here improves upon the deficiencies of real-time task models used in previous research <ref> [6] </ref> that do not permit a low-complexity description of a parallel component.
Reference: [7] <author> D. L. Eager, E. D. Lazowska, and J. Zahorjan. </author> <title> Adaptive Load Sharing in Homogeneous Distributed Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> May, </month> <year> 1986. </year>
Reference-contexts: Extensive research has addressed the problem of dynamic resource allocation for both the real-time [1, 9, 10, 18, 22] and the non-real-time <ref> [7, 14, 17] </ref> domains. The methods developed in these studies do not fit our target application model, because our model assumes that the resource needs of a time-constrained task, even when generated by the same type of event, may vary throughout the execution of the application. <p> This variability prevents us from using a periodic task model [9, 10] in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered. It also prevents us from using a sporadic task model, as in the real-time [18, 22] or the non-real-time <ref> [7, 14] </ref> domains, because of the high overhead of taking resource allocation actions at each task arrival. Resource reallocation triggered by runtime variation of application needs has received less attention.
Reference: [8] <author> G. Eisenhauer, B. Schroeder, K. Schwan, V. Martin, and J. Vetter. DataExchange: </author> <title> High Performance Communication in Distributed Laboratories. </title> <booktitle> 9th International Conference on Parallel and Distributed Computing and Systems, </booktitle> <month> Oct., </month> <year> 1997. </year>
Reference-contexts: Explicit admission control guarantees sufficient resources for meeting the application's initial needs. The models and heuristics proposed here are evaluated in the context of a centralized ARA controller. Online monitoring is performed with the mechanisms described in <ref> [8] </ref>. Experiments are conducted with a synthetic application running on a cluster of workstations. The application is designed by Honeywell in the context of high performance C3I 1 applications [15]. Related research.
Reference: [9] <author> J. Huang and P.-J. Wan. </author> <title> On Supporting Mission-Critical Multimedia Applications. </title> <booktitle> 3rd IEEE International Conference on Multimedia Computing and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. Extensive research has addressed the problem of dynamic resource allocation for both the real-time <ref> [1, 9, 10, 18, 22] </ref> and the non-real-time [7, 14, 17] domains. <p> This variability prevents us from using a periodic task model <ref> [9, 10] </ref> in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered.
Reference: [10] <author> J. Jehuda. </author> <title> Automated Meta-Control for Adaptable Real-Time Software. </title> <journal> Real-Time Systems Journal, </journal> <note> (to appear). </note>
Reference-contexts: Resource management problems for real-time and embedded applications are exacerbated by dynamic changes in their external environments and by restrictions on resource availability. Solving such problems by using worst-case needs analysis [6] is typically not viable because of excessive resource estimates resulting from complex application behavior. Instead, adaptive methods <ref> [3, 10, 11] </ref> must be used to adjust resource allocation to changes in an application's needs and to insure the satisfiability of its real-time constraints. fl Funded in part by DARPA through the Honeywell Technology Center under Contract No. B09332478and Contract No. <p> In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. Extensive research has addressed the problem of dynamic resource allocation for both the real-time <ref> [1, 9, 10, 18, 22] </ref> and the non-real-time [7, 14, 17] domains. <p> This variability prevents us from using a periodic task model <ref> [9, 10] </ref> in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered. <p> Resource reallocation triggered by runtime variation of application needs has received less attention. Previous schemes proposed for both real-time <ref> [10, 20] </ref> and non-real-time [11, 14, 17] domains do not consider the transitory effects of adaptation mechanisms on the satisfiability of application's performance constraints. Their primary interest is to attain optimal average-case performance. Overview of paper. <p> This change might require extending the component's level of parallelism in order to meet the required event rate. Our approach to resource management attempts to move part of the burden of making adaptation decisions from the application to the resource management infrastructure. A similar approach is taken in <ref> [10, 11] </ref> and, also, in our previous work [20]. The benefits of this approach are a reduction in application perturbation plus the fact that unexpected changes in the application's resource needs are likely to receive fast response. <p> Instead, our ARA approach advocates using a RUM with reduced levels of detail and low decision overheads, yet able to provide good estimates of application performance. The RUM also improves on previous parallel task models used in load balancing or task assignment problems <ref> [10, 4, 17] </ref> that describe the communication needs only by the time taken to perform it. By providing a more detailed description, the RUM can better estimate communication related resource needs in terms of multiple resource types and in a heterogenous environment. 3.2. Adaptation Model Background. <p> ARA Performance Characterization The formulation of suitable resource usage and adaptation models is the first contribution of our research. A second contribution is our proposal of a satisfiability-driven approach to evaluating the performance of an ARA infrastructure. This is in contrast to the optimality-driven approaches used in past research <ref> [10, 11] </ref>. In the context of a real-time application, we claim that the reactivity of an ARA infrastructure is often more important than the optimality of its decisions. <p> Although we do not include in our set a metric capturing the necessity, we consider it when designing the ARA mechanisms, primarily those related to detection and state assessment. Related Work. Previous studies considering automatic ARA adjustments for real-time applications <ref> [10, 11] </ref> typically compare the performance attained with ARA against optimal solutions. [10] proposes algorithms for optimal resource allocation decisions, but which can trade optimality for short decision times. [11] evaluates the ARA performance by the loss in application performance with respect to the performance enabled by an ideal ARA infrastructure <p> Related Work. Previous studies considering automatic ARA adjustments for real-time applications [10, 11] typically compare the performance attained with ARA against optimal solutions. <ref> [10] </ref> proposes algorithms for optimal resource allocation decisions, but which can trade optimality for short decision times. [11] evaluates the ARA performance by the loss in application performance with respect to the performance enabled by an ideal ARA infrastructure with instantaneous detection, optimal decision, and no overheads.
Reference: [11] <author> R. Jha, M. Muhammad, S. Yalamanchili, K. Schwan, and D. I. Rosu. </author> <title> Adaptive Resource Allocation for Embedded Parallel Applications. </title> <booktitle> 3rd Int. Conference on High Performance Computing, </booktitle> <year> 1996. </year>
Reference-contexts: Resource management problems for real-time and embedded applications are exacerbated by dynamic changes in their external environments and by restrictions on resource availability. Solving such problems by using worst-case needs analysis [6] is typically not viable because of excessive resource estimates resulting from complex application behavior. Instead, adaptive methods <ref> [3, 10, 11] </ref> must be used to adjust resource allocation to changes in an application's needs and to insure the satisfiability of its real-time constraints. fl Funded in part by DARPA through the Honeywell Technology Center under Contract No. B09332478and Contract No. <p> The application is designed by Honeywell in the context of high performance C3I 1 applications [15]. Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications <ref> [3, 11, 13] </ref>, including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications [3, 13] or that maintain high application throughput [11]. <p> Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications [3, 11, 13], including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications [3, 13] or that maintain high application throughput <ref> [11] </ref>. In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. <p> Resource reallocation triggered by runtime variation of application needs has received less attention. Previous schemes proposed for both real-time [10, 20] and non-real-time <ref> [11, 14, 17] </ref> domains do not consider the transitory effects of adaptation mechanisms on the satisfiability of application's performance constraints. Their primary interest is to attain optimal average-case performance. Overview of paper. <p> This change might require extending the component's level of parallelism in order to meet the required event rate. Our approach to resource management attempts to move part of the burden of making adaptation decisions from the application to the resource management infrastructure. A similar approach is taken in <ref> [10, 11] </ref> and, also, in our previous work [20]. The benefits of this approach are a reduction in application perturbation plus the fact that unexpected changes in the application's resource needs are likely to receive fast response. <p> ARA Performance Characterization The formulation of suitable resource usage and adaptation models is the first contribution of our research. A second contribution is our proposal of a satisfiability-driven approach to evaluating the performance of an ARA infrastructure. This is in contrast to the optimality-driven approaches used in past research <ref> [10, 11] </ref>. In the context of a real-time application, we claim that the reactivity of an ARA infrastructure is often more important than the optimality of its decisions. <p> Although we do not include in our set a metric capturing the necessity, we consider it when designing the ARA mechanisms, primarily those related to detection and state assessment. Related Work. Previous studies considering automatic ARA adjustments for real-time applications <ref> [10, 11] </ref> typically compare the performance attained with ARA against optimal solutions. [10] proposes algorithms for optimal resource allocation decisions, but which can trade optimality for short decision times. [11] evaluates the ARA performance by the loss in application performance with respect to the performance enabled by an ideal ARA infrastructure <p> Related Work. Previous studies considering automatic ARA adjustments for real-time applications [10, 11] typically compare the performance attained with ARA against optimal solutions. [10] proposes algorithms for optimal resource allocation decisions, but which can trade optimality for short decision times. <ref> [11] </ref> evaluates the ARA performance by the loss in application performance with respect to the performance enabled by an ideal ARA infrastructure with instantaneous detection, optimal decision, and no overheads. In contrast, we submit that satisfying the application's performance requirements is more important than achieving optimal application performance. 5.
Reference: [12] <author> M. B. Jones, D. Rosu, and M. Rosu. </author> <title> CPU Reservations and Time Constraints: Efficient, Predictable Scheduling of Independent Activities. </title> <booktitle> 16th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1997. </year>
Reference-contexts: Therefore, the worst case needs depend on the worst case execution scenarios, which makes them hard to evaluate. Our solution to these problems is to use adaptive resource allocation (ARA). By taking advantage of the application's adaptation capabilities, ARA permits using long-term resource reservations <ref> [12] </ref> while accommodating run-time changes in resource needs. Adaptive Resource Allocation. ARA is a resource management paradigm that takes advantage of an application's runtime adaptation capability in order to accommodate its dynamic resource needs and to satisfy the system goals with respect to performance and resource utilization. <p> A node is characterized by its speed (MIPS or MFLOPS) and the size of its local memory. Each node uses a scheduling policy able to guarantee the resource reservations and to provide feedback to the application on its actual resource usage, such as those proposed in <ref> [12] </ref>. A communication link provides a unidirectional connection between two nodes. It is characterized by one or more protocols (e.g., reliable, FIFO unreliable), with known available bandwidth and cost of I/O operations at each end-point a constant per-message overhead and a per-byte overhead.
Reference: [13] <author> K. Marzullo and M. Wood. </author> <title> Making Real-Time Reactive Systems Reliable. </title> <booktitle> 4th European SIGOPS Workshop, </booktitle> <year> 1990. </year>
Reference-contexts: The application is designed by Honeywell in the context of high performance C3I 1 applications [15]. Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications <ref> [3, 11, 13] </ref>, including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications [3, 13] or that maintain high application throughput [11]. <p> Related research. Previous work has described frameworks and mechanisms that facilitate the creation and use of online adaptation heuristics for real-time applications [3, 11, 13], including mechanisms for runtime monitoring, adaptation enactment, and mechanisms that ensure the reliable execution of applications <ref> [3, 13] </ref> or that maintain high application throughput [11]. In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications.
Reference: [14] <author> C. McCann and J. Zahorjan. </author> <title> Processor Allocation Policies for Message-Passing Parallel Computers. </title> <booktitle> ACM Sigmetrics, </booktitle> <year> 1994. </year>
Reference-contexts: Extensive research has addressed the problem of dynamic resource allocation for both the real-time [1, 9, 10, 18, 22] and the non-real-time <ref> [7, 14, 17] </ref> domains. The methods developed in these studies do not fit our target application model, because our model assumes that the resource needs of a time-constrained task, even when generated by the same type of event, may vary throughout the execution of the application. <p> This variability prevents us from using a periodic task model [9, 10] in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered. It also prevents us from using a sporadic task model, as in the real-time [18, 22] or the non-real-time <ref> [7, 14] </ref> domains, because of the high overhead of taking resource allocation actions at each task arrival. Resource reallocation triggered by runtime variation of application needs has received less attention. <p> Resource reallocation triggered by runtime variation of application needs has received less attention. Previous schemes proposed for both real-time [10, 20] and non-real-time <ref> [11, 14, 17] </ref> domains do not consider the transitory effects of adaptation mechanisms on the satisfiability of application's performance constraints. Their primary interest is to attain optimal average-case performance. Overview of paper.
Reference: [15] <author> R. C. Metzger, B. VanVoorst, L. S. Pires, R. Jha, W. Au, M. Amin, D. A. Castanon, and V. Kumar. </author> <title> C3I Parallel Benchmark Suite Introduction and Preliminary Results. </title> <booktitle> Supercomputing, </booktitle> <year> 1996. </year>
Reference-contexts: For such applications, it is difficult to closely estimate their worst-case event processing and communication needs. This class of applications includes radar systems [16], robot control [21], target recognition, multi-object tracking, and hypothesis testing <ref> [15] </ref>. ARA mechanisms can be used to promptly adjust resource allocation to changes in an application's resource needs, whenever there is a risk of failing to satisfy the application's timing constraints. <p> Online monitoring is performed with the mechanisms described in [8]. Experiments are conducted with a synthetic application running on a cluster of workstations. The application is designed by Honeywell in the context of high performance C3I 1 applications <ref> [15] </ref>. Related research. <p> Sample Application. One sample application driving this research is a radar system. Figure 1 presents part of such a system, as described in [16]. Detection, Track Init, and Track Identif are computationally intensive tasks, each well suited for parallel implementation <ref> [15] </ref>. Over time, their processing and communication needs vary with the number and characteristics (e.g., amplitude, direction) of dwells. Given the nature of their computation [15], these tasks can adapt by changing their internal levels of parallelism. <p> Detection, Track Init, and Track Identif are computationally intensive tasks, each well suited for parallel implementation <ref> [15] </ref>. Over time, their processing and communication needs vary with the number and characteristics (e.g., amplitude, direction) of dwells. Given the nature of their computation [15], these tasks can adapt by changing their internal levels of parallelism. The main event streams in the radar system are (1) the input from the radar, (2) the input from the missile tracking device, and (3) the missile control requirements. Timing constraints concern necessary event rates and processing latencies. <p> The radar system is one of many applications concerned with processing signals from a sensor suite, forming hypotheses about and assessing the situation, and taking an appropriate response based on data observed and processed over a period of time. Other examples are multi-hypotheses tracking and image understanding <ref> [15] </ref>. Often the front end of these applications consists of signal processing stages whose computational needs are predictable, as they are independent of the signal values. However, computations at the back end depend on the semantic content of the signal values, being often heavily data-dependent. Specific Resource Allocation Problems. <p> In addition, our experiments show that reaction time is an important performance metric: improved ARA reaction time implies improved application performance. The experimental results reported in this study are obtained with a synthetic, distributed application designed by Honeywell in the context of high performance C3I applications <ref> [15] </ref>. The application performs on a cluster of eleven UltraSPARC-I Model 170 workstations with an MPI-1 interface over 100Mbit switched Ethernet links. The application consists of multiple communicating components connected by an acyclic graph of communication links. Each component can adapt its execution to span over any number of processors.
Reference: [16] <author> J. Molini, S. Maimon, and P. Watson. </author> <title> Real-Time System Scenarios. </title> <booktitle> Real-Time Systems Symposium, </booktitle> <year> 1990. </year>
Reference-contexts: Runtime changes in event rates and more importantly, in the data content of these events cause significant changes in the resource needs of various application components. For such applications, it is difficult to closely estimate their worst-case event processing and communication needs. This class of applications includes radar systems <ref> [16] </ref>, robot control [21], target recognition, multi-object tracking, and hypothesis testing [15]. ARA mechanisms can be used to promptly adjust resource allocation to changes in an application's resource needs, whenever there is a risk of failing to satisfy the application's timing constraints. <p> Each timing constraint has specific miss rate and miss burst bounds. Sample Application. One sample application driving this research is a radar system. Figure 1 presents part of such a system, as described in <ref> [16] </ref>. Detection, Track Init, and Track Identif are computationally intensive tasks, each well suited for parallel implementation [15]. Over time, their processing and communication needs vary with the number and characteristics (e.g., amplitude, direction) of dwells.
Reference: [17] <author> D. M. Nicol and P. F. J. Reynolds. </author> <title> Optimal Dynamic Remapping of Data Parallel Computations. </title> <journal> IEEE Transactions on Computers, </journal> <month> Feb., </month> <year> 1990. </year>
Reference-contexts: Extensive research has addressed the problem of dynamic resource allocation for both the real-time [1, 9, 10, 18, 22] and the non-real-time <ref> [7, 14, 17] </ref> domains. The methods developed in these studies do not fit our target application model, because our model assumes that the resource needs of a time-constrained task, even when generated by the same type of event, may vary throughout the execution of the application. <p> Resource reallocation triggered by runtime variation of application needs has received less attention. Previous schemes proposed for both real-time [10, 20] and non-real-time <ref> [11, 14, 17] </ref> domains do not consider the transitory effects of adaptation mechanisms on the satisfiability of application's performance constraints. Their primary interest is to attain optimal average-case performance. Overview of paper. <p> Instead, our ARA approach advocates using a RUM with reduced levels of detail and low decision overheads, yet able to provide good estimates of application performance. The RUM also improves on previous parallel task models used in load balancing or task assignment problems <ref> [10, 4, 17] </ref> that describe the communication needs only by the time taken to perform it. By providing a more detailed description, the RUM can better estimate communication related resource needs in terms of multiple resource types and in a heterogenous environment. 3.2. Adaptation Model Background.
Reference: [18] <author> K. Ramamritham and J. A. Stankovic. </author> <title> Dynamic Task Scheduling in Hard Real-Time Distributed Systems. </title> <journal> IEEE Software, </journal> <volume> Vol. 1, No. 3, </volume> <month> Jul., </month> <year> 1984. </year>
Reference-contexts: In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. Extensive research has addressed the problem of dynamic resource allocation for both the real-time <ref> [1, 9, 10, 18, 22] </ref> and the non-real-time [7, 14, 17] domains. <p> This variability prevents us from using a periodic task model [9, 10] in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered. It also prevents us from using a sporadic task model, as in the real-time <ref> [18, 22] </ref> or the non-real-time [7, 14] domains, because of the high overhead of taking resource allocation actions at each task arrival. Resource reallocation triggered by runtime variation of application needs has received less attention. <p> Specific Resource Allocation Problems. The application model presented above raises interesting resource allocation problems. First, the event stream-based execution makes viable the option of using long term resource allocation. Alternatively, a short term resource allocation based on dynamic real-time scheduling decisions <ref> [18, 22] </ref> is prone to add a large overhead to each event's processing. Second, worst case-based allocation may not be appropriate for our target applications.
Reference: [19] <author> D. Rosu, K. Schwan, S. Yalamanchili, and R. Jha. </author> <title> On Adaptive Resource Allocation for Complex Real-Time Applications. </title> <institution> Georgia Inst. of Technology, GIT-CC-97-26, </institution> <month> Sept., </month> <year> 1997. </year>
Reference-contexts: However, such mission level information may be easily added to the model. 3.3. Using the Models We briefly describe how the RUM and the adaptation model are used by the ARA controller (see Section 2). Details appear in <ref> [19] </ref>. The application requests an initial resource allocation by specifying an adaptation model. The ARA controller receives this request, and based on current resource availability, it chooses an acceptable configuration, performs the corresponding reservations and notifies the application. At runtime, each component is described by a current RUM.
Reference: [20] <author> D. I. Rosu and K. Schwan. </author> <title> Improving Protocol Performance by Dynamic Control of Communication Resources. </title> <booktitle> 2nd IEEE International Conference on Engineering Complex Computer Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Resource reallocation triggered by runtime variation of application needs has received less attention. Previous schemes proposed for both real-time <ref> [10, 20] </ref> and non-real-time [11, 14, 17] domains do not consider the transitory effects of adaptation mechanisms on the satisfiability of application's performance constraints. Their primary interest is to attain optimal average-case performance. Overview of paper. <p> Our approach to resource management attempts to move part of the burden of making adaptation decisions from the application to the resource management infrastructure. A similar approach is taken in [10, 11] and, also, in our previous work <ref> [20] </ref>. The benefits of this approach are a reduction in application perturbation plus the fact that unexpected changes in the application's resource needs are likely to receive fast response.
Reference: [21] <author> K. Schwan, T. Bihari, B. W. Weide, and G. Taulbee. </author> <title> High-Performance Operation System Primitives for Robotics and Real-Time Control Systems. </title> <booktitle> 6th Symposium on Reliability in Distributed Software, </booktitle> <year> 1987. </year>
Reference-contexts: For such applications, it is difficult to closely estimate their worst-case event processing and communication needs. This class of applications includes radar systems [16], robot control <ref> [21] </ref>, target recognition, multi-object tracking, and hypothesis testing [15]. ARA mechanisms can be used to promptly adjust resource allocation to changes in an application's resource needs, whenever there is a risk of failing to satisfy the application's timing constraints.
Reference: [22] <author> H. Zhou, K. Schwan, and I. Akyildiz. </author> <title> Performance Effects of Information Sharing in a Distributed Multiprocessor Real-Time Scheduler. </title> <booktitle> Real-Time Systems Symposium, </booktitle> <year> 1992. </year>
Reference-contexts: In comparison, the focus of this paper is not to define new frameworks, but instead, to define models and methods to be used in such frameworks and to analyze their effect on adaptive applications. Extensive research has addressed the problem of dynamic resource allocation for both the real-time <ref> [1, 9, 10, 18, 22] </ref> and the non-real-time [7, 14, 17] domains. <p> This variability prevents us from using a periodic task model [9, 10] in which performance requirements are fixed throughout an application's execution, and therefore worst-case needs have to be considered. It also prevents us from using a sporadic task model, as in the real-time <ref> [18, 22] </ref> or the non-real-time [7, 14] domains, because of the high overhead of taking resource allocation actions at each task arrival. Resource reallocation triggered by runtime variation of application needs has received less attention. <p> Specific Resource Allocation Problems. The application model presented above raises interesting resource allocation problems. First, the event stream-based execution makes viable the option of using long term resource allocation. Alternatively, a short term resource allocation based on dynamic real-time scheduling decisions <ref> [18, 22] </ref> is prone to add a large overhead to each event's processing. Second, worst case-based allocation may not be appropriate for our target applications.
References-found: 22

