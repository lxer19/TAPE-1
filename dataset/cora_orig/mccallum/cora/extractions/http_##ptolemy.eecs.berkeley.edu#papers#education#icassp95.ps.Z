URL: http://ptolemy.eecs.berkeley.edu/papers/education/icassp95.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/education/index.html
Root-URL: 
Title: INTEGRATING ANALYSIS, SIMULATION, AND IMPLEMENTATION TOOLS IN ELECTRONIC COURSEWARE FOR TEACHING SIGNAL PROCESSING  
Author: Roberto H. Bamberger Brian L. Evans Edward A. Lee James H. McClellan Mark A. Yoder 
Note: In 1995 Proc. IEEE Int. Conf. on Acoustics, Speech, and Signal Proc.  
Address: Pullman, WA 99164-2752  Berkeley, CA 94720-1770  Atlanta, GA 30332-0250  IN 47803-3999  
Affiliation: Dept. of EECS, Washington State University,  Dept. of EECS, University of California,  School of ECE, Georgia Institute of Technology,  Dept. of ECE, Rose-Hulman Institute of Technology, Terre Haute,  
Abstract: A typical path in learning digital signal processing begins at the theoretical end and progresses toward the practical constraints imposed by implementation in hardware or software. On this path, the student would learn how to convert mathematical theory into algorithms and then algorithms into efficient implementations. In this paper, we first summarize the electronic courseware we have already developed in Mathemat-ica, Matlab, and Ptolemy to teach DSP theory, algorithms, and implementation, respectively. Then, we discuss ways to integrate our efforts to help students discover the connections between these topics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Wolfram, </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <address> Redwood City, CA: </address> <publisher> Addison-Wesley, </publisher> <editor> second ed., </editor> <year> 1991. </year>
Reference-contexts: DSP algorithms efficiently. Different design tools can support learning along the way. Among the tools that could help students learn DSP theory, we have primarily used the symbolic mathematics environment Mathematica <ref> [1] </ref>.
Reference: [2] <author> B. L. Evans, </author> <title> A Knowledge-Based Environment for the Design and Analysis of Multidimensional Multirate Signal Processing Algorithms. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: DSP algorithms efficiently. Different design tools can support learning along the way. Among the tools that could help students learn DSP theory, we have primarily used the symbolic mathematics environment Mathematica [1]. Mathematica has limited signal processing abilities, so Evans and Mc-Clellan developed the Signal Processing Packages <ref> [2] </ref> to perform algebraic operations (e.g. convolution and transforms) on signals expressed as mathematical formulas Based on these packages, we have written interactive tutorials on convolution, filter design, and transforms [3], interactive tutorials on complex numbers, sampling, and modulation [4], and interactive solution sets [5] for a signals and systems textbook <p> At the end, we give information on how to obtain the electronic courseware we have developed. 2. DSP THEORY IN MATHEMATICA Mathematica is a symbolic mathematics environment. Its algebraic abilities are sufficient to teach introductory circuit analysis [14] but are insufficient for teaching signal processing. The Signal Processing Packages <ref> [2] </ref> extend Mathematica by defining common signals and systems. The packages also perform algebraic operations such as continuous and discrete piecewise convolution, Laplace and Fourier transforms, and z, discrete Fourier, and discrete-time Fourier transforms. The balance between continuous and discrete operations enabled us to write an interactive companion to [6]. <p> We are exploring World Wide Web interfaces as an alternative and for long-distance learning over the Internet. 6. INTERNET ACCESS A freely distributable version of the Signal Processing Packages and Notebooks for Mathematica, as well as <ref> [2] </ref>, is available by FTP to gauss.eedsp.gatech.edu. Commercial versions are available from PWS Publishing Company and Wolfram Research Inc. Information on Mathematica notebooks on modulation and sampling is available on the World Wide Web (WWW) http://www.eecs.wsu.edu/~bamberg/.
Reference: [3] <author> B. L. Evans, J. H. McClellan, and H. J. Trussell, </author> <title> "Investigating signal processing theory with Mathemat-ica," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, vol. I, </booktitle> <address> (Minneapolis, MN), </address> <pages> pp. 12-15, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Mathematica has limited signal processing abilities, so Evans and Mc-Clellan developed the Signal Processing Packages [2] to perform algebraic operations (e.g. convolution and transforms) on signals expressed as mathematical formulas Based on these packages, we have written interactive tutorials on convolution, filter design, and transforms <ref> [3] </ref>, interactive tutorials on complex numbers, sampling, and modulation [4], and interactive solution sets [5] for a signals and systems textbook [6]. Using Matlab [7], McClellan and others [8] have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data.
Reference: [4] <author> R. H. Bamberger, </author> <title> "Interactive tools for signal processing education: The signal processing instructional facility (SPIF Lab) at Washington State University," </title> <journal> Comp. Appl. in Eng. Education, </journal> <volume> vol. 1, </volume> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: processing abilities, so Evans and Mc-Clellan developed the Signal Processing Packages [2] to perform algebraic operations (e.g. convolution and transforms) on signals expressed as mathematical formulas Based on these packages, we have written interactive tutorials on convolution, filter design, and transforms [3], interactive tutorials on complex numbers, sampling, and modulation <ref> [4] </ref>, and interactive solution sets [5] for a signals and systems textbook [6]. Using Matlab [7], McClellan and others [8] have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data. <p> In this fashion, the students and instructors become partners in the learning process. Of the learning tools discussed in this paper, Wash-ington State University <ref> [4] </ref> and Rose-Hulman Institute of Technology introduce Mathematica first by means of self-contained tutorial Mathematica notebooks and Matlab later. Georgia Tech introduces Matlab first in sound and image processing laboratories and then Mathematica the following year, whereas U. C. Berke-ley uses only Ptolemy.
Reference: [5] <author> B. L. Evans, S. X. Gu, and R. H. Bamberger, </author> <title> "Interactive solution sets as components of fully electronic signals and systems courseware," </title> <booktitle> in Proc. IEEE Asilo-mar Conf. on Signals, Systems, and Computers, </booktitle> <address> (Pacific Grove, CA), </address> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Mc-Clellan developed the Signal Processing Packages [2] to perform algebraic operations (e.g. convolution and transforms) on signals expressed as mathematical formulas Based on these packages, we have written interactive tutorials on convolution, filter design, and transforms [3], interactive tutorials on complex numbers, sampling, and modulation [4], and interactive solution sets <ref> [5] </ref> for a signals and systems textbook [6]. Using Matlab [7], McClellan and others [8] have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data.
Reference: [6] <author> R. D. Strum and D. E. Kirk, </author> <title> Contempory Linear Systems Using MATLAB. </title> <address> Boston, MA: </address> <publisher> PWS Publishing, </publisher> <year> 1994. </year>
Reference-contexts: to perform algebraic operations (e.g. convolution and transforms) on signals expressed as mathematical formulas Based on these packages, we have written interactive tutorials on convolution, filter design, and transforms [3], interactive tutorials on complex numbers, sampling, and modulation [4], and interactive solution sets [5] for a signals and systems textbook <ref> [6] </ref>. Using Matlab [7], McClellan and others [8] have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data. The exercises help students convert theory into algorithms by having them write programs in Matlab, at a higher level than Fortran or C. <p> The packages also perform algebraic operations such as continuous and discrete piecewise convolution, Laplace and Fourier transforms, and z, discrete Fourier, and discrete-time Fourier transforms. The balance between continuous and discrete operations enabled us to write an interactive companion to <ref> [6] </ref>. Students can use the packages to compute transforms and convolutions symbolically. They can investigate properties of transforms; e.g., the z-transform of a n x [n] is returned as X ( z a ). Students can also see how to perform computations by hand.
Reference: [7] <author> C. Moler, J. Little, and S. Bangert, </author> <title> Matlab User's Guide. </title> <address> Natick, MA: </address> <publisher> The MathWorks Inc., </publisher> <year> 1989. </year>
Reference-contexts: Using Matlab <ref> [7] </ref>, McClellan and others [8] have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data. The exercises help students convert theory into algorithms by having them write programs in Matlab, at a higher level than Fortran or C.
Reference: [8] <author> C. S. Burrus, J. H. McClellan, A. V. Oppenheim, T. W. Parks, R. W. Schafer, and H. Schussler, </author> <title> Computer-Aided Exercises for Signal Processing. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Using Matlab [7], McClellan and others <ref> [8] </ref> have developed laboratory exercises to help students make the transition from mathematical formulas to programs that process data. The exercises help students convert theory into algorithms by having them write programs in Matlab, at a higher level than Fortran or C. <p> However, it may still be necessary to manage blocks of data using buffering strategies in algorithms such as overlap-save convolution. Matlab is probably the most widespread and successful language for signal processing exploration related to courses. One notable demonstration is the FFT operation counting demo <ref> [8] </ref> which exploits Mat-lab's floating-point operations counter to graph the trend in the number of multiplications vs. FFT length, and shows the great computational savings that power-of-two FFT lengths yield. An entirely new set of instructional demos is based on the programmable graphical interface of Matlab 4.
Reference: [9] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, "Ptolemy: </author> <title> A platform for heterogeneous simulation and prototyping," </title> <booktitle> in Proc. of the 1991 European Simulation Conf., </booktitle> <address> (Copenhagen, Denmark), </address> <month> July </month> <year> 1991. </year>
Reference-contexts: The exercises help students convert theory into algorithms by having them write programs in Matlab, at a higher level than Fortran or C. Lee and others <ref> [9] </ref> have researched the use of block diagram languages to represent the dataflow of algorithms, organize algorithms hierarchically into systems, and generate efficient hardware and software implementations. They have encoded their research ideas in the visual block diagram environment Ptolemy [10].
Reference: [10] <author> The Ptolemy Group, </author> <title> "The Almagest: Ptolemy 0.5 Manual." (four volumes), </title> <year> 1994. </year>
Reference-contexts: Lee and others [9] have researched the use of block diagram languages to represent the dataflow of algorithms, organize algorithms hierarchically into systems, and generate efficient hardware and software implementations. They have encoded their research ideas in the visual block diagram environment Ptolemy <ref> [10] </ref>. Based on Ptolemy, Lee has developed exercises for undergraduate [11] and graduate [12] DSP classes. Lee has also created a multidisciplinary course to bring together a variety of topics in hardware/software implementation of DSP systems [13]. <p> They are commonly used in informal ways in textbooks, but can be formalized and developed into a programming environment. Such a programming environment can be used by undergraduate and graduate students as a design laboratory, e.g. Ptolemy at U.C. Berkeley <ref> [10, 11, 12] </ref>. Interactivity and animation in block diagram environments can greatly aid the development of intuition. In principle, real-time implementations generated by these environments would strengthen this intuition. The hardware required, however, is still prohibitively expensive for some teaching environments.
Reference: [11] <author> E. A. Lee, </author> <title> "Signal processing experiments using Ptolemy | instructor's manual." </title> <booktitle> (contact the author at eal@eecs.berkeley.edu), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: They have encoded their research ideas in the visual block diagram environment Ptolemy [10]. Based on Ptolemy, Lee has developed exercises for undergraduate <ref> [11] </ref> and graduate [12] DSP classes. Lee has also created a multidisciplinary course to bring together a variety of topics in hardware/software implementation of DSP systems [13]. In this paper, we first discuss electronic courseware we have developed to help students learn DSP theory, algorithms, and implementation. <p> They are commonly used in informal ways in textbooks, but can be formalized and developed into a programming environment. Such a programming environment can be used by undergraduate and graduate students as a design laboratory, e.g. Ptolemy at U.C. Berkeley <ref> [10, 11, 12] </ref>. Interactivity and animation in block diagram environments can greatly aid the development of intuition. In principle, real-time implementations generated by these environments would strengthen this intuition. The hardware required, however, is still prohibitively expensive for some teaching environments.
Reference: [12] <author> E. A. Lee, </author> <title> "A design lab for statistical signal processing," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, </booktitle> <volume> vol. </volume> <pages> 4, </pages> <address> (San Francisco, CA), </address> <pages> pp. 81-84, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: They have encoded their research ideas in the visual block diagram environment Ptolemy [10]. Based on Ptolemy, Lee has developed exercises for undergraduate [11] and graduate <ref> [12] </ref> DSP classes. Lee has also created a multidisciplinary course to bring together a variety of topics in hardware/software implementation of DSP systems [13]. In this paper, we first discuss electronic courseware we have developed to help students learn DSP theory, algorithms, and implementation. <p> They are commonly used in informal ways in textbooks, but can be formalized and developed into a programming environment. Such a programming environment can be used by undergraduate and graduate students as a design laboratory, e.g. Ptolemy at U.C. Berkeley <ref> [10, 11, 12] </ref>. Interactivity and animation in block diagram environments can greatly aid the development of intuition. In principle, real-time implementations generated by these environments would strengthen this intuition. The hardware required, however, is still prohibitively expensive for some teaching environments.
Reference: [13] <author> E. A. Lee, </author> <title> "Computing and signal processing: An experimental multidisciplinary course," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, vol. VI, </booktitle> <address> (Adelaide, Australia), </address> <pages> pp. 45-48, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: They have encoded their research ideas in the visual block diagram environment Ptolemy [10]. Based on Ptolemy, Lee has developed exercises for undergraduate [11] and graduate [12] DSP classes. Lee has also created a multidisciplinary course to bring together a variety of topics in hardware/software implementation of DSP systems <ref> [13] </ref>. In this paper, we first discuss electronic courseware we have developed to help students learn DSP theory, algorithms, and implementation. Then, we discuss ways to integrate these separate efforts in order to help students convert mathematical theory into algorithms and algorithms into efficient implementations. <p> Intuition about semantics, therefore, may prove to be at least as important as intuition about circuits. To explore this issue, Lee has developed a multidisciplinary course on programming languages for real-time reactive (DSP) systems <ref> [13] </ref>. 5. INTEGRATING TOOLS FOR ELECTRONIC COURSEWARE The primary motivation for integrating analysis, simulation, and implementation tools is to provide students with a rich, interactive, user-friendly environment for "inquiry-based" a.k.a. "discovery-based" learning.
Reference: [14] <author> M. A. Yoder, </author> <title> "An Electrical Engineer's Introduction to Symbolic Algebra via Mathematica." </title> <booktitle> (contact the author at Mark.A.Yoder@rose-hulman.edu), </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: At the end, we give information on how to obtain the electronic courseware we have developed. 2. DSP THEORY IN MATHEMATICA Mathematica is a symbolic mathematics environment. Its algebraic abilities are sufficient to teach introductory circuit analysis <ref> [14] </ref> but are insufficient for teaching signal processing. The Signal Processing Packages [2] extend Mathematica by defining common signals and systems. The packages also perform algebraic operations such as continuous and discrete piecewise convolution, Laplace and Fourier transforms, and z, discrete Fourier, and discrete-time Fourier transforms.
References-found: 14

