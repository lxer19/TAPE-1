URL: http://www.cs.utah.edu/~ganesh/cs611-notes/notes/notes/notes/notes/l15/aamp.ps
Refering-URL: http://www.cs.utah.edu/~ganesh/cs611-notes/notes/notes/notes/notes/l15/
Root-URL: 
Title: Applying Formal Verification to a Commercial Microprocessor  
Author: Mandayam K. Srivas Steven P. Miller 
Address: Menlo Park, CA 94025 USA Cedar Rapids, IA 52498 USA  
Affiliation: Computer Science Laboratory  SRI International Rockwell International  
Note: To be presented at the 1995 IFIP International Conference on Computer Hardware Description Languages, Chiba, Japan,  Collins Commercial Avionics  
Email: e-mail: srivas@csl.sri.com e-mail: spmiller@cca.rockwell.com  
Phone: Tel: +1 (415) 859-6136 Tel: +1 (319) 395-8008  
Date: August 1995  
Abstract: Formal verification using interactive proof-checkers has been used successfully to verify a wide variety of moderate-sized hardware designs. The industry is beginning to look at formal verification as an alternative to simulation for obtaining higher assurance than is currently possible. However, many questions remain regarding its use in practice: Can these techniques scale up to industrial systems, where are they likely to be useful, and how should industry go about incorporating them into practice? This paper describes a project recently undertaken by SRI International and Collins Commercial Avionics, a division of Rockwell International to explore some of these questions. The project formally specified in SRI's PVS language a Rockwell proprietary pipelined microprocessor (the AAMP5, built using almost half a million transistors) at both the instruction-set and register-transfer levels and used the PVS theorem prover to show the microcode correctly implemented the instruction-level specification for a representative subset of instructions. The key results of the project were the development of a practical methodology for microprocessor verification in industrial settings and the discovery of both actual and seeded errors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Best, C. Kress, N. Mykris, J. Russel, and W. Smith. </author> <title> An advanced-architecture cmos/sos microprocessor. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 11|26, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: Our conclusions are presented in the last section. III. The AAMP5 Microprocessor: An Informal Description The Advanced Architecture Microprocessor (AAMP) consists of a Rockwell proprietary family of microprocessors based on the Collins Adaptive Processor System (CAPS) originally developed in 1972 <ref> [1] </ref>. The AAMP architecture is specifically designed for use with block-structured, high-level languages such as Ada in real-time embedded applications. <p> Although it is based on a stack architecture, the AAMP5 design uses pipelining and other modern RISC-like features to provide a performance that rivals or exceeds that of most commercially available 16-bit microprocessors. A. The Macroarchitecture The AAMP5 was designed as an object-code-compatible replacement for the earlier AAMP2 <ref> [1] </ref>, with advanced implementation techniques such as pipelining providing a more than threefold performance improvement. The main macroarchitecture features that make its specification and verification challenging are its support for multi-tasking and error handling, process stack, and the variety of its CISC-like instructions. We briefly discuss these features below. <p> The main macroarchitecture features that make its specification and verification challenging are its support for multi-tasking and error handling, process stack, and the variety of its CISC-like instructions. We briefly discuss these features below. A more detailed discussion can be found in <ref> [1] </ref>. The AAMP provides separate address spaces for code memory and data memory. The process stack is central to the AAMP macroarchitecture, implementing in hardware many of the features needed to support high-level block structured languages and multi-tasking. Each task maintains a single process stack in the task's data environment.
Reference: [2] <author> J. R. Burch and D. L. Dill. </author> <title> Automatic verification of pipelined microprocessor control. </title> <editor> In David Dill, editor, </editor> <booktitle> Computer-Aided Verification, CAV '94, volume 818 of Lecture Notes in Computer Science, </booktitle> <pages> pages 68-80, </pages> <address> Stanford, CA, June 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This makes it hard to choose a reference point for characterizing the visible state since the distance between two consecutive visible states is indefinite and varying. If the definition of the visible state is not engineered carefully the abstraction can become complicated. Burch and Dill <ref> [2] </ref> have proposed the idea of using a sequence of NOPs to flush out the states of the desired internal registers to eliminate the need to explicitly define an abstraction function in some microprocessor verifications. <p> The special-purpose decision procedures for microprocessors proposed in <ref> [2, 3] </ref> are efficient methods for proving such properties under certain restrictions. <p> For example, some of the decompositions that we used to facilitate our proofs would not have been necessary if the hardware strategy could be implemented more efficiently. Toward this end, it would be interesting to explore integrating special purpose decision procedures, such as <ref> [2] </ref>, into PVS. Benefits: While it is not hard to convince engineers that formal methods subject a design to a more thorough analysis than traditional methods can, these benefits must also be evaluated relative to their cost.
Reference: [3] <author> D. Cyrluk and P. Narendran. </author> <title> Ground temporal logic|a logic for hardware verification. </title> <editor> In David Dill, editor, </editor> <booktitle> Computer-Aided Verification, CAV '94, volume 818 of Lecture Notes in Computer Science, </booktitle> <pages> pages 247-259, </pages> <address> Stanford, CA, June 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The special-purpose decision procedures for microprocessors proposed in <ref> [2, 3] </ref> are efficient methods for proving such properties under certain restrictions.
Reference: [4] <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> Effective theorem proving for hardware verification. </title> <editor> In Ramayya Kumar and Thomas Kropf, editors, </editor> <booktitle> Theorem Provers in Circuit Design (TPCD '94), volume 910 of Lecture Notes in Computer Science, </booktitle> <pages> pages 203-222, </pages> <address> Bad Herrenalb, Germany, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: One way to facilitate automation, is to transform the verification problem into one of proving a set of properties each of which relates a pair of states of the micromachine that are a fixed and finite distance apart in time. As shown in <ref> [4] </ref>, for register-transfer level designs specified in the functional style described in Section C such "finite distance" properties can be automatically proved using a core hardware strategy.
Reference: [5] <author> David Cyrluk. </author> <title> Microprocessor verification in PVS: A methodology and simple example. </title> <type> Technical Report SRI-CSL-93-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1993. </year>
Reference: [6] <author> James Glanz. </author> <title> Mathematical logic flushes out the bugs in chip designs. </title> <journal> Science, </journal> <volume> 267 </volume> <pages> 332-333, </pages> <month> January 20, </month> <year> 1995. </year>
Reference: [7] <author> M. Gordon. </author> <title> Why higher-order logic is a good formalism for specifying and verifying hardware. </title> <type> Technical Report 77, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> September </month> <year> 1985. </year>
Reference-contexts: The signal definitions implicitly specify the connectivity between the components. We decided to use a functional style because proofs based on functional specifications tend to be more automatic than those involving predicative style specifications, popularized by Gordon <ref> [7] </ref>. For a more detailed look at a comparison of the two styles and their impact on proofs see [14]. V. Verifying the AAMP5 This section describes the verification of the AAMP5. We first informally describe the AAMP5 pipeline and then formalize its correctness criterion.
Reference: [8] <author> Warren A. Hunt, Jr. FM8501: </author> <title> A Verified Microprocessor, </title> <booktitle> volume 795 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference: [9] <author> Steven P. Miller and Mandayam Srivas. </author> <title> Formal verification of the AAMP5 microprocessor: A case study in the industrial use of formal methods. </title> <booktitle> In WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <pages> pages 2-16, </pages> <address> Boca Raton, FL, 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [10] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference: [11] <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas. An integration of model-checking with automated proof checking. </title> <editor> In Pierre Wolper, editor, </editor> <booktitle> Computer-Aided Verification, CAV '95, Lecture Notes in Computer Science, Liege, </booktitle> <address> Belgium, </address> <month> June </month> <year> 1995. </year> <note> Springer-Verlag. To appear. </note>
Reference-contexts: The task of verifying that the LFU/BIU satisfies our interface specification is better-suited for finite-state enumeration tools, such as model-checkers, than theorem provers. To perform such a verification, it is necessary abstract appropriate parts of the LFU-BIU-DPU system to construct a finite-state machine for the model-checker. We have explored <ref> [11] </ref> this problem for a very simplified model of the AAMP5 using a prototype enhancement to PVS that provides the ability to invoke a model-checker as a decision procedure within PVS. The DPU is constructed by combining the specifications of the datapath and the microcontroller at the register-transfer level.
Reference: [12] <author> Mandayam Srivas and Mark Bickford. </author> <title> Formal verification of a pipelined microprocessor. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 52-64, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: For example, they allow instructions following a conditional branch to execute assuming the branch would not be taken leaving the burden of generating correct code to the compilers. One way to handle this is (as shown in <ref> [12] </ref>) either to restrict the set of programs for which the two machines are related or expose some of the effects of pipelin-ing in the macromachine. Further adjustment would be needed if pipelining allows out-of-order instruction execution.
Reference: [13] <author> Mandayam Srivas and Steven P. Miller. </author> <title> Formal verification of a commercial microprocessor. </title> <type> Technical Report SRI-CSL-95-4, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: Details on how the AAMP5 interrupts can be specified and verified can be found in <ref> [13] </ref>. other lemmas. In the constructive style all the cases were embedded inside a function definition in an algorithmic style. <p> During normal pipeline operation, the distance between consecutive visible states is exactly one cycle. The abstraction function ABS acts like a projection function on the mi-crostate except for the stack-structured memory. A formalization of the commuting property for the AAMP5 is given below. For more details see <ref> [13] </ref>. commuting_property: LEMMA visible_state (t) & proper_instrns_in_pipe (t) & no_logical_stack_overflow (t) =&gt; EXISTS (tp: time | tp &gt; t): stays_low (t+1, tp-1)(visible_state) & visible_state (tp) & ABS (tp) = next_macro_state (ABS (t)) The commuting property has two additional preconditions when compared to the general commuting diagram of Section II to handle <p> While the second error was deliberately planted by Collins engineers in the microcode, the first one had escaped the the microcode traditional walk-throughs and simulations. More details are given in <ref> [13] </ref>. Technology transfer: Despite their name, formal methods provide remarkably little methodology to guide their use in a new setting.
Reference: [14] <author> Mandayam Srivas, Natarajan Shankar, and Sreeranga Rajan. </author> <title> Hardware verification using PVS: A tutorial. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: We decided to use a functional style because proofs based on functional specifications tend to be more automatic than those involving predicative style specifications, popularized by Gordon [7]. For a more detailed look at a comparison of the two styles and their impact on proofs see <ref> [14] </ref>. V. Verifying the AAMP5 This section describes the verification of the AAMP5. We first informally describe the AAMP5 pipeline and then formalize its correctness criterion. Then, we describe the mechanization of the proof of correctness. A.
Reference: [15] <author> S. Tahar and R. Kumar. </author> <title> Implementing a methodology for formally verifying risc processors in hol. </title> <editor> In Jeffrey J. Joyce and Carl-Johan H. Seger, editors, </editor> <booktitle> Higher Order Logic Theorem Proving and its Applications (6th International Workshop, HUG '93), number 780 in Lecture Notes in Computer Science, </booktitle> <pages> pages 281-294, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference: [16] <author> Phillip J. Windley. </author> <title> The Formal Verification of Generic Interpreters. </title> <type> PhD thesis, </type> <institution> University of California, Davis, </institution> <address> CA, </address> <month> June </month> <year> 1990. </year>
References-found: 16

