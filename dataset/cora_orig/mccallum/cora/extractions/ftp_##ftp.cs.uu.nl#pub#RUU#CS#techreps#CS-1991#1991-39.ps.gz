URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1991/1991-39.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On the complexity of the Maximum Cut problem  
Author: Hans L. Bodlaender Klaus Jansen 
Abstract: The complexity of the simple maxcut problem is investigated for several special classes of graphs. It is shown that this problem is NP-complete when restricted to one of the following classes: chordal graphs, undirected path graphs, split graphs, tripartite graphs, and graphs that are the complement of a bipartite graph. The problem can be solved in polynomial time, when restricted to graphs with bounded treewidth, or cographs. We also give large classes of graphs that can be seen as generalizations of classes of graphs with bounded treewidth and of the class of the cographs, and allow polynomial time algorithms for the simple max cut problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg, </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability | A survey, </title> <booktitle> BIT 25 (1985), </booktitle> <pages> pp. 2 - 23. </pages>
Reference-contexts: We sketch the method here, as it will be generalized hereafter. The notion of treewidth of a graph was introduced by Robertson and Seymour [16], and is equivalent to several other interesting graph theoretic notions, for instance the notion of partial k-trees (see e.g., <ref> [1, 4] </ref>).
Reference: [2] <author> H.L. Bodlaender, </author> <title> Achromatic Number is NP-complete for cographs and interval graphs. </title> <journal> Information Processing Letters, </journal> <volume> 31 </volume> <pages> 135-138, </pages> <year> 1989. </year>
Reference-contexts: Alternatively, a graph is a cograph, if it does not contain a path with four vertices P 4 as an induced subgraph. Many NP-complete problems are polynomial time solvable on cographs; there are only a few notable expections, e.g. achromatic number <ref> [2] </ref> and list coloring [11] are NP-complete for cographs. To each cograph G one can associate a corresponding rooted binary tree T , called the cotree of G, in the following way. Each non-leaf node in the tree is labeled with either "[" (union-nodes) or "fi" (product-nodes).
Reference: [3] <author> H.L. Bodlaender, </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <type> Technical Report RUU-CS-92-27, </type> <institution> Department of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1992. </year>
Reference-contexts: We will assume in the remainder that a tree-decomposition of G of this type is given, with treewidth at most k, for some constant k. Note that a tree-decomposition of G with treewidth k can be found, if it exists, in O (n) time <ref> [3] </ref>. For every node i 2 I, let Y i denote the set of all vertices in a set X j with j = i or j is a descendant of i in the rooted tree T .
Reference: [4] <author> H.L. Bodlaender, </author> <title> A tourist guide through treewidth. </title> <type> Technical Report RUU-CS-92-12, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1992. </year>
Reference-contexts: We sketch the method here, as it will be generalized hereafter. The notion of treewidth of a graph was introduced by Robertson and Seymour [16], and is equivalent to several other interesting graph theoretic notions, for instance the notion of partial k-trees (see e.g., <ref> [1, 4] </ref>).
Reference: [5] <author> K. Chang and D. Du, </author> <title> Efficient algorithms for the layer assignment problem, </title> <journal> IEEE Trans. </journal> <volume> CAD 6 (1987), </volume> <pages> pp. 67 - 78. </pages>
Reference-contexts: This paper is mostly concerned with the simple max cut problem. In section 4 we comment on the max cut problem (i.e., the problem where edges do not necessarily have unit weights.) Some applications of the maxcut problem are given in the references <ref> [5, 6, 15] </ref>. fl Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, The Nether-lands.
Reference: [6] <author> R. Chen, Y. Kajitani and S. Chan, </author> <title> A graph theoretic via minimization algorithm for two layer printed circuit boards, </title> <journal> IEEE Trans. Circuit Syst. </journal> <year> (1983), </year> <pages> pp. 284 - 299. </pages>
Reference-contexts: This paper is mostly concerned with the simple max cut problem. In section 4 we comment on the max cut problem (i.e., the problem where edges do not necessarily have unit weights.) Some applications of the maxcut problem are given in the references <ref> [5, 6, 15] </ref>. fl Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, The Nether-lands.
Reference: [7] <author> D.G. Corneil, Y. Perl, and L.K. Stewart, </author> <title> A linear recognition algorithm for cographs, </title> <journal> SIAM J. Comput. </journal> <volume> 4 (1985), </volume> <pages> pp. 926 - 934. </pages>
Reference-contexts: We remark that the most usual definition of cotrees allows for arbitrary degree of internal nodes. However, it is easy to see that this has the same power, and can easily be transformed in cotrees with two children per internal node. In <ref> [7] </ref>, it is shown that one can decide in O (n + e) time, whether a graph is a cograph, and build a corresponding cotree. Our algorithm has the following structure: first find a cotree for the input graph G, which is a cograph.
Reference: [8] <author> S. F oldes and P.L. Hammer, </author> <title> Split graphs, </title> <booktitle> Proc. 8th Southeastern Conf. on Combinatorics, Graph Theory and Computing, </booktitle> <institution> Louisiana State University, Baton Rouge, Louisiana, </institution> <note> pp. 311 - 315. </note>
Reference-contexts: Another necessary and sufficient condition for a graph G to be a split graph is that G and its complement G c are chordal graphs, see also Foldes and Hammer <ref> [8] </ref>. We analyse now a subclass of the split graphs, namely the class of those split graphs where each vertex of the independent set U is incident to exactly two vertices of the clique C. We call these graphs the 2-split graphs.
Reference: [9] <author> M.R. Garey and D.S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completness, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: Question: Is there a truth assignment to the variables which satisfies at least k clauses ? Max 2-sat was proven to be NP-complete by Garey, Johnson and Stockmeyer [10]. (In [10] also a transformation from max 2-sat to the simple max cut problem for undirected graphs was given.) We note <ref> [9] </ref> that 3-sat remains NP-complete if for each variable there are at most five clauses that contain either the variable or its complement.
Reference: [10] <author> M.R. Garey, D.S. Johnson and L. Stockmeyer, </author> <title> Some simplified NP-complete graph problems, </title> <type> Theo. </type> <institution> Comput. </institution> <note> Sci 1 (1976), pp. 237 - 267. </note>
Reference-contexts: Whereas the problems where we look for a partition with a minimum total weight of the edges between the sets are solvable in polynomial time with flow techniques, the (decision variants of the) max cut, and even the simple max cut problems are NP-complete <ref> [13, 10] </ref>. This motivates the research to solve the (simple) max cut problem on special classes of graphs. In [12] Johnson gives a table of the known results on the complexity of simple max cut restricted to several classes of graphs. <p> Problem: max 2-sat Input: A set of p disjunctive clauses each containing at most two literals and an integer k p. Question: Is there a truth assignment to the variables which satisfies at least k clauses ? Max 2-sat was proven to be NP-complete by Garey, Johnson and Stockmeyer <ref> [10] </ref>. (In [10] also a transformation from max 2-sat to the simple max cut problem for undirected graphs was given.) We note [9] that 3-sat remains NP-complete if for each variable there are at most five clauses that contain either the variable or its complement. <p> Question: Is there a truth assignment to the variables which satisfies at least k clauses ? Max 2-sat was proven to be NP-complete by Garey, Johnson and Stockmeyer <ref> [10] </ref>. (In [10] also a transformation from max 2-sat to the simple max cut problem for undirected graphs was given.) We note [9] that 3-sat remains NP-complete if for each variable there are at most five clauses that contain either the variable or its complement. <p> Using the reduction of Garey, Johnson and Stockmeyer <ref> [10] </ref> we can obtain a similar result for max 2-sat such that for each variable there are at most 20 clauses containing the variable or 2 its complement. It is possible to replace the number 20 by the smaller constant six using a different construction.
Reference: [11] <author> K. Jansen and P. Scheffler, </author> <title> Some coloring results for tree like graphs, </title> <booktitle> Workshop on Graph Theoretic Concepts in Computer Science, LNCS, 657, 1992, p. </booktitle> <pages> 50-59. </pages>
Reference-contexts: Alternatively, a graph is a cograph, if it does not contain a path with four vertices P 4 as an induced subgraph. Many NP-complete problems are polynomial time solvable on cographs; there are only a few notable expections, e.g. achromatic number [2] and list coloring <ref> [11] </ref> are NP-complete for cographs. To each cograph G one can associate a corresponding rooted binary tree T , called the cotree of G, in the following way. Each non-leaf node in the tree is labeled with either "[" (union-nodes) or "fi" (product-nodes). Each non-leaf node has exactly two children.
Reference: [12] <author> D.S. Johnson, </author> <title> The NP-completeness column: an ongoing guide, </title> <journal> J. Algorith. </journal> <volume> 6 (1985), </volume> <pages> pp. 434 - 451. </pages>
Reference-contexts: This motivates the research to solve the (simple) max cut problem on special classes of graphs. In <ref> [12] </ref> Johnson gives a table of the known results on the complexity of simple max cut restricted to several classes of graphs. The most notable of the results listed there, is perhaps the fact that simple max cut can be solved in polynomial time on planar graphs.
Reference: [13] <author> R.M. Karp, </author> <title> Reducibility among combinatorial problems, in: Miller and Thatcher: Complexity of Computer Computations, </title> <publisher> Plenum Press (1972), </publisher> <pages> pp. 85 - 104. </pages>
Reference-contexts: Whereas the problems where we look for a partition with a minimum total weight of the edges between the sets are solvable in polynomial time with flow techniques, the (decision variants of the) max cut, and even the simple max cut problems are NP-complete <ref> [13, 10] </ref>. This motivates the research to solve the (simple) max cut problem on special classes of graphs. In [12] Johnson gives a table of the known results on the complexity of simple max cut restricted to several classes of graphs.
Reference: [14] <author> J.H. Muller and J. Spinrad, </author> <title> Incremental modular decomposition, </title> <journal> J. ACM, </journal> <volume> 36 (1989), </volume> <pages> pp. 1 - 19. </pages>
Reference-contexts: Such a `factorization', where H 0 is as small as possible, r 2, can be found in polynomial time <ref> [14] </ref>. (Clearly, a trivial factorization, where G = H 0 and all graphs H 1 ; ; H n consist of one vertex always exists, but is not really useful.) Then, it is often useful to factorize the graphs H 1 , H 2 , : : : , H r <p> Theorem 3.9 For all constants k, the simple max cut problem is solvable in polynomial time for graphs, with a factor tree, where every label graph has treewidth at most k. The first step of the algorithm is to find the factor tree. By using the results from <ref> [14] </ref>, it follows that the factor tree can be found in polynomial time, such that the size and also the treewidth of label graphs are minimal. Also, a tree-decomposition of treewidth at most k of the type as described in the previous section is computed for every label graph.
Reference: [15] <author> R. Pinter, </author> <title> Optimal layer assignment for interconnect, </title> <booktitle> Proc. Int. Symp. Circuit Syst. (ISCAS) (1982), </booktitle> <pages> pp. 398 - 401. </pages>
Reference-contexts: This paper is mostly concerned with the simple max cut problem. In section 4 we comment on the max cut problem (i.e., the problem where edges do not necessarily have unit weights.) Some applications of the maxcut problem are given in the references <ref> [5, 6, 15] </ref>. fl Department of Computer Science, Utrecht University, P.O.Box 80.089, 3508 TB Utrecht, The Nether-lands.
Reference: [16] <author> N. Robertson and P.D. Seymour, </author> <title> Graph minors. II. Algorithmic aspects of tree-width, </title> <editor> J. </editor> <booktitle> Algorithms 7 (1986), </booktitle> <pages> pp. 309-322. </pages>
Reference-contexts: We sketch the method here, as it will be generalized hereafter. The notion of treewidth of a graph was introduced by Robertson and Seymour <ref> [16] </ref>, and is equivalent to several other interesting graph theoretic notions, for instance the notion of partial k-trees (see e.g., [1, 4]).
Reference: [17] <author> W.T. Trotter, Jr. and F. Harary, </author> <title> On double and multiple interval graphs, </title> <editor> J. </editor> <booktitle> Graph Theory 3 (1979), </booktitle> <pages> pp. 205 - 211. </pages>
Reference-contexts: These graphs are introduced by Harary and Trotter in <ref> [17] </ref>. Lemma 2.4 Each 2-split graph is a double interval graph.
Reference: [18] <author> E. Wanke, </author> <title> k-NLC graphs and polynomial algorithms. </title> <type> Bericht, </type> <institution> Reihe Informatik 80, Universitat Paderborn, </institution> <year> 1991. </year>
Reference-contexts: Independently, Wanke <ref> [18] </ref> has found a polynomial time algorithm for a class of graphs that includes the cographs.
Reference: [19] <author> T.V. Wimer, </author> <title> Linear algorithms on k-terminal graphs, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Clemson University, </institution> <year> 1987. </year> <month> 13 </month>
Reference-contexts: such that it also yields a partition with the maximum number of cut edges, and uses also O (n 2 ) time. 3.2 Graphs with bounded treewidth It is well know that the simple max cut problem can be solved in linear time on graphs with bounded treewidth (see e.g. <ref> [19] </ref>). We sketch the method here, as it will be generalized hereafter. The notion of treewidth of a graph was introduced by Robertson and Seymour [16], and is equivalent to several other interesting graph theoretic notions, for instance the notion of partial k-trees (see e.g., [1, 4]). <p> to cliques, when only edge weigths 0 and 1 are allowed. (The problem in this form is equivalent to the simple max cut problem.) So, max cut is NP-complete for all classes of graphs that contain all cliques, (e.g., for the class of cographs.) Secondly, as first shown by Wimer <ref> [19] </ref>, max cut can be solved in linear time on graphs given with a tree-decomposition of bounded treewidth. (It is possible to modify the results of section 3.2 and obtain an algorithm, quite similar to the algorithm of Wimer.) 12
References-found: 19

