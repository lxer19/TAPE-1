URL: http://www.cs.berkeley.edu/~maratb/cs264/paper.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~maratb/cs264/
Root-URL: 
Title: Design and Implementation of Tree-Transformations in Ensemble  
Author: Marat Boshernitsan 
Date: May 9, 1997  
Address: Berkeley, CA 94720  
Affiliation: The Ensemble Project Computer Science Division University of California, Berkeley  
Pubnum: UCB CS Honors Program Project Report  
Abstract: Tree transformations offer a convenient method to describe various manipulations that are commonly performed by compilers and language-based editors. Many of the compiler stages, such as semantic analysis, code optimization, and code generation [Pelegri-Llopart 1988], are frequently specified as a sequence of tree transformations that transform parse tree into output representation (e.g. machine language). Similarly, structured-document environments, such as Ensemble [Dennis et al. 1995], can benefit from the use of tree transformations to convert parse trees to abstract syntax trees (and vice versa, given sufficient information for the reverse transformation), compute presentation-trees, etc. In this paper, we describe design and implementation of tree transformation subsystem in Ensemble environment. Ensemble (presently a research prototype) provides to the user a number of document services (including incremental analysis, revision management, presentation, etc.), simplifying the task of software construction and maintenance. We extend this set of document services to include tree transformation facilities that provide functionality to translate between programming languages, rearrange source code, perform code generation, etc. by means of applying tree transformations to document trees. 0 The author can be reached at: maratb@CS.Berkeley.EDU. An on-line version of this paper can be found on the WWW page: http://www.cs.berkeley.edu/~maratb/cs264/paper.html. 
Abstract-found: 1
Intro-found: 1
Reference: [Aho et al. 1989] <author> Aho, A. V., Ganapathi, M., and Tjiang, S. W. K. </author> <title> Code generation using tree matching and dynamic programming. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(4) </volume> <pages> 491-516, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: These code generating transformations often include a cost metric to be minimized (to decide between several equivalent transformations) <ref> [Aho et al. 1989] </ref>, [Fraser et al. 1992]. Language-based editors are programs that "understand" the program being edited and can assist the programmer by checking syntax, performing intelligent formatting, and offering other language-specific services. In such systems, tree transformations are useful for translating between parse trees and abstract syntax trees.
Reference: [Chase 1987] <author> Chase, D. R. </author> <title> An improvement to bottom-up tree pattern matching. </title> <booktitle> In Conference Record of the Fourteenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 168-177, </pages> <year> 1987. </year>
Reference-contexts: This is especially noticeable on large patterns sets, such as the ones generated by our pattern matcher 3 . Chase in <ref> [Chase 1987] </ref> proposes an improvement to Hoffman/O'Donnell algorithm to alleviate this problem.
Reference: [Dennis et al. 1995] <author> Dennis, B. M., Goldman, R., Graham, S. L., Harrison, M. A., Maddox, W., Maverick, V., Munson, E. V., and Wagner, T. A. </author> <title> A document architecture for integrated software development. </title> <type> Technical Report UCB/CSD 95/???, </type> <institution> Department of Computer Science, University of California, Berkeley, </institution> <year> 1995. </year>
Reference-contexts: Here we show two presentations and four views of a simple text document. All presentations share the same document tree. 2.1 Overview of Ensemble Ensemble <ref> [Dennis et al. 1995] </ref> is a prototype system for integrated software development. It utilizes a rich document model that is sufficiently powerful to facilitate various aspects of software development including language-sensitive editing, incremental analysis, and documentation management.
Reference: [Farnum 1990] <author> Farnum, C. D. </author> <title> Pattern-based languages for prototyping of compiler optimizers. </title> <type> Master's thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1990. </year>
Reference-contexts: One such schema that transforms Java "for" loops into "while" loops is presented in Figure 7. Quite obviously it is far from being self-explanatory. * The pattern matching mechanism of TTL is very limited. In particular, one frequently wishes to match so-called horizontal and vertical iterators <ref> [Farnum 1990] </ref>. These are patterns that may contain wildcards not only at leafs (vertical iterators) and match multiple children (horizontal iterators).
Reference: [Fraser et al. 1992] <author> Fraser, C. W., Hanson, D. R., and Proebsting, T. A. </author> <title> Engineering a simple, efficient code-generator generator. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 1(3) </volume> <pages> 213-226, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: These code generating transformations often include a cost metric to be minimized (to decide between several equivalent transformations) [Aho et al. 1989], <ref> [Fraser et al. 1992] </ref>. Language-based editors are programs that "understand" the program being edited and can assist the programmer by checking syntax, performing intelligent formatting, and offering other language-specific services. In such systems, tree transformations are useful for translating between parse trees and abstract syntax trees.
Reference: [Hoffman & O'Donnell 1982] <author> Hoffman, C. and O'Donnell, M. J. </author> <title> Pattern matching in trees. </title> <journal> Journal of the ACM, </journal> <pages> pp. 68-95, </pages> <year> 1982. </year>
Reference-contexts: with ones: ?num@NUM -&gt; NUM -text = ($num.text == 0) ? 1 : $num.text * 2 4 Tree-pattern Matching Algorithm In this section, we briefly discuss the internals of pattern matching algorithm that we use and consider some performance characteristics of the tree-transformation tool. 4.1 Bottom-up Tree Pattern Matching In <ref> [Hoffman & O'Donnell 1982] </ref> the authors discuss a very simple and attractive pattern matching algorithm that we used (with certain modifications) as the basis for the pattern matcher in tree transformation tool.

References-found: 6

