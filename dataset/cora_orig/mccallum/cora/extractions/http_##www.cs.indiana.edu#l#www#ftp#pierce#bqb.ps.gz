URL: http://www.cs.indiana.edu/l/www/ftp/pierce/bqb.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Email: pierce@cs.indiana.edu  
Title: Bounded Quantification with Bottom  
Author: Benjamin C. Pierce 
Date: 12, 1997  
Note: November  
Address: Lindley Hall 215 Bloomington, IN 47405, USA  
Affiliation: Computer Science Department Indiana University  
Abstract: Indiana University CSCI Technical Report #492 Abstract While numerous extensions of Cardelli and Wegner's calculus of polymorphism and subtyping, Kernel Fun, have been studied during the past decade, one quite simple one has received little attention: the addition of a minimal type Bot, dual to the familiar maximal type Top. We develop basic meta-theory for this extension. Although most of the usual properties of Kernel Fun (existence of meets and joins, decidability of subtyping and typing, subject reduction, etc.) also hold for the extended system, the presence of Bot introduces some surprising intricacies. In particular, a type variable bounded by Bot is actually a synonym for Bot; such "bottom variables" must be treated specially at several points. 
Abstract-found: 1
Intro-found: 1
Reference: [AC93] <author> Roberto M. Amadio and Luca Cardelli. </author> <title> Subtyping recursive types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 575-631, </pages> <year> 1993. </year> <note> A preliminary version appeared in POPL '91 (pp. 104-118) and as DEC Systems Research Center Research Report number 62, </note> <month> August </month> <year> 1990. </year>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types <ref> [AC93] </ref>, extensible records [CM91], existential types [GP97], and type operators [Car90, CL91, PT94, HP95, PS94, Com94]. However, one quite obvious extension has apparently never been considered in detail.
Reference: [ACV96] <author> Martn Abadi, Luca Cardelli, and Ramesh Viswanathan. </author> <title> An interpretation of objects and object types. </title> <booktitle> In Principles of Programming Languages, </booktitle> <pages> pages 396-409, </pages> <year> 1996. </year>
Reference-contexts: In Kernel Fun, the bounds of the two types must be the same; in Full F , the subtype relation is contravariant in the bounds. Although the additional power offered by Full F is occasionally useful (e.g. <ref> [ACV96] </ref>), the system lacks many desirable properties, such as decidability [Pie94]. 3. Completeness of subtyping and typechecking algorithms. 4. Subject reduction. 1 Strictly speaking, Java's null value has all object types, but not types like integer or array. The languge studied here does not capture this refinement. 3 5.
Reference: [Car90] <author> Luca Cardelli. </author> <title> Notes about F ! &lt;: </title> . <type> Unpublished manuscript, </type> <month> October </month> <year> 1990. </year> <month> 21 </month>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [CG92] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption: Minimum typing and type-checking in F . Mathematical Structures in Computer Science, </title> <booktitle> 2 </booktitle> <pages> 55-91, </pages> <year> 1992. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year>
Reference-contexts: 1 Introduction The typed lambda-calculus Kernel Fun [CW85] and its wilder sibling, F <ref> [CG92, Ghe90, CMMS94] </ref> have become standard tools for the foundational study of programming languages combining subtyping and im-predicative polymorphism. Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. <p> Because the existence of meets and joins in the subtype relation is crucial for the development here and in [PT97], the sytem studied here extends Cardelli and Wegner's original Kernel Fun [CW85] rather than the "Full F " of Curien and Ghelli <ref> [CG92] </ref>. The only difference between these systems lies in the subtyping rule for comparing quantified types. In Kernel Fun, the bounds of the two types must be the same; in Full F , the subtype relation is contravariant in the bounds. <p> First, as discussed in the introduction, the definition extends the original "Kernel Fun variant" of F [CW85], in which the upper bounds B in the subtyping rule for polymorphic functions are required to be identical, rather than the more powerful but less tractable variant of Curien and Ghelli <ref> [CG92, CMMS94] </ref>. The principal reason for this restriction is that it allows us to define meets and joins of all pairs of types, which may fail to exist in "Full F " [Ghe90].
Reference: [CL91] <author> Luca Cardelli and Giuseppe Longo. </author> <title> A semantic basis for Quest. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(4) </volume> <pages> 417-458, </pages> <month> October </month> <year> 1991. </year> <note> Preliminary version in ACM Conference on Lisp and Functional Programming, June 1990. Also available as DEC SRC Research Report 55, </note> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [CM91] <author> Luca Cardelli and John Mitchell. </author> <title> Operations on records. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1 </volume> <pages> 3-48, </pages> <year> 1991. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press, </title> <note> 1994); available as DEC Systems Research Center Research Report #48, </note> <month> August, </month> <year> 1989, </year> <booktitle> and in the proceedings of MFPS '89, </booktitle> <publisher> Springer LNCS volume 442. </publisher>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records <ref> [CM91] </ref>, existential types [GP97], and type operators [Car90, CL91, PT94, HP95, PS94, Com94]. However, one quite obvious extension has apparently never been considered in detail.
Reference: [CMMS94] <author> Luca Cardelli, Simone Martini, John C. Mitchell, and Andre Scedrov. </author> <title> An extension of system F with subtyping. </title> <journal> Information and Computation, </journal> <note> 109(1-2):4-56, 1994. A preliminary version appeared in TACS '91 (Sendai, Japan, pp. 750-770). </note>
Reference-contexts: 1 Introduction The typed lambda-calculus Kernel Fun [CW85] and its wilder sibling, F <ref> [CG92, Ghe90, CMMS94] </ref> have become standard tools for the foundational study of programming languages combining subtyping and im-predicative polymorphism. Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. <p> First, as discussed in the introduction, the definition extends the original "Kernel Fun variant" of F [CW85], in which the upper bounds B in the subtyping rule for polymorphic functions are required to be identical, rather than the more powerful but less tractable variant of Curien and Ghelli <ref> [CG92, CMMS94] </ref>. The principal reason for this restriction is that it allows us to define meets and joins of all pairs of types, which may fail to exist in "Full F " [Ghe90].
Reference: [Com94] <author> Adriana B. Compagnoni. </author> <title> Decidability of higher-order subtyping with intersection types. </title> <booktitle> In Computer Science Logic, </booktitle> <month> September </month> <year> 1994. </year> <title> Kazimierz, </title> <booktitle> Poland. Springer Lecture Notes in Computer Science 933, </booktitle> <month> June </month> <year> 1995. </year> <note> Also available as University of Edinburgh, LFCS technical report ECS-LFCS-94-281, titled "Subtyping in F ! ^ is decidable". </note>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Com puting Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: 1 Introduction The typed lambda-calculus Kernel Fun <ref> [CW85] </ref> and its wilder sibling, F [CG92, Ghe90, CMMS94] have become standard tools for the foundational study of programming languages combining subtyping and im-predicative polymorphism. Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. <p> Existence of meets and joins in the subtype relation. Because the existence of meets and joins in the subtype relation is crucial for the development here and in [PT97], the sytem studied here extends Cardelli and Wegner's original Kernel Fun <ref> [CW85] </ref> rather than the "Full F " of Curien and Ghelli [CG92]. The only difference between these systems lies in the subtyping rule for comparing quantified types. <p> First, as discussed in the introduction, the definition extends the original "Kernel Fun variant" of F <ref> [CW85] </ref>, in which the upper bounds B in the subtyping rule for polymorphic functions are required to be identical, rather than the more powerful but less tractable variant of Curien and Ghelli [CG92, CMMS94]. <p> For example, suppose we wanted to extend the present system with existential types <ref> [MP88, CW85] </ref>.
Reference: [Ghe90] <author> Giorgio Ghelli. </author> <title> Proof Theoretic Studies about a Minimal Type System Integrating Inclusion and Parametric Polymorphism. </title> <type> PhD thesis, </type> <institution> Universita di Pisa, </institution> <month> March </month> <year> 1990. </year> <type> Technical report TD-6/90, </type> <institution> Dipartimento di Informatica, Universita di Pisa. </institution>
Reference-contexts: 1 Introduction The typed lambda-calculus Kernel Fun [CW85] and its wilder sibling, F <ref> [CG92, Ghe90, CMMS94] </ref> have become standard tools for the foundational study of programming languages combining subtyping and im-predicative polymorphism. Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. <p> The principal reason for this restriction is that it allows us to define meets and joins of all pairs of types, which may fail to exist in "Full F " <ref> [Ghe90] </ref>. Second, we give an algorithmic presentation of subtyping, in which the rules of transitivity and general reflexivity are omitted, and recover these rules (in the next subsection) as properties of the definition. 2 The type of nil is chosen here for consistency with standard treatments.
Reference: [GP97] <author> Giorgio Ghelli and Benjamin Pierce. </author> <title> Bounded existentials and minimal typing. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types <ref> [GP97] </ref>, and type operators [Car90, CL91, PT94, HP95, PS94, Com94]. However, one quite obvious extension has apparently never been considered in detail. <p> These cases must later be treated in the proof of subject reduction. 4. The algorithm for finding the smallest supertype of a given type that does not use a given type variable is actually somewhat simpler than the corresponding algorithm for Kernel Fun <ref> [GP97] </ref>. The following section introduces the syntax of the extended system formally. <p> But the minimal type of b may not have this property; in order to construct a typechecking algorithm for this extension, we need to be able to calculate the smallest supertype of the minimal type that does. (This problem is discussed in more detail in <ref> [GP97] </ref>.) Another application of variable elimination is the constraint-generation algorithm developed in [PT97]. Given two types S and T, one of which may include some indeterminate "unification variables," this algorithm calculates the minimal constraints on the unification variables such that S &lt;: T. <p> "Kernel Fun" variant of F rather than the "full F " variant where two polymorphic function types with different upper bounds for their type components are allowed to stand in the subtype relation under appropriate conditions; in the latter system, variables cannot always be eliminated in a most general way <ref> [GP97] </ref>. <p> These functions are similar to the ones used in <ref> [GP97] </ref>, but somewhat easier because of the presence of Bot in our type system (this is one of the rare points where the presence of Bot makes things easier!). 4.2.1 Lemma [Soundness of variable elimination]: Suppose S and T are types whose free variables fall in dom (; ; ) and
Reference: [HP95] <author> Martin Hofmann and Benjamin Pierce. </author> <title> A unifying type-theoretic framework for objects. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(4) </volume> <pages> 593-635, </pages> <month> October </month> <year> 1995. </year> <note> Previous versions appeared in the Symposium on Theoretical Aspects of Computer Science, </note> <year> 1994, </year> <title> (pages 251-262) and, under the title "An Abstract View of Objects and Subtyping (Preliminary Report)," as University of Edinburgh, </title> <type> LFCS technical report ECS-LFCS-92-226, </type> <year> 1992. </year>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [MP88] <author> John Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Transactions on Pro gramming Languages and Systems, </journal> <volume> 10(3), </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: For example, suppose we wanted to extend the present system with existential types <ref> [MP88, CW85] </ref>.
Reference: [Pie94] <author> Benjamin C. Pierce. </author> <title> Bounded quantification is undecidable. </title> <journal> Information and Computation, </journal> <volume> 112(1) </volume> <pages> 131-165, </pages> <month> July </month> <year> 1994. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year> <note> A preliminary version appeared in POPL '92. </note>
Reference-contexts: In Kernel Fun, the bounds of the two types must be the same; in Full F , the subtype relation is contravariant in the bounds. Although the additional power offered by Full F is occasionally useful (e.g. [ACV96]), the system lacks many desirable properties, such as decidability <ref> [Pie94] </ref>. 3. Completeness of subtyping and typechecking algorithms. 4. Subject reduction. 1 Strictly speaking, Java's null value has all object types, but not types like integer or array. The languge studied here does not capture this refinement. 3 5.
Reference: [PS94] <author> Benjamin Pierce and Martin Steffen. </author> <title> Higher-order subtyping. </title> <booktitle> In IFIP Working Conference on Programming Concepts, Methods and Calculi (PROCOMET), </booktitle> <year> 1994. </year> <note> Full version in Theoretical Computer Science, </note> <editor> vol. </editor> <volume> 176, no. </volume> <pages> 1-2, pp. 235-282, </pages> <year> 1997. </year>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [PT94] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(2) </volume> <pages> 207-247, </pages> <month> April </month> <year> 1994. </year> <note> A preliminary version appeared in Principles of Programming Languages, </note> <year> 1993, </year> <title> and as University of Edinburgh technical report ECS LFCS-92-225, under the title "Object-Oriented Programming Without Recursive Types". </title>
Reference-contexts: Their syntax and semantics have been investigated in detail, and they have formed the basis for a number of experimental language designs. Moreover, many ways of enriching these pure systems have been studied, including extensions with recursive types [AC93], extensible records [CM91], existential types [GP97], and type operators <ref> [Car90, CL91, PT94, HP95, PS94, Com94] </ref>. However, one quite obvious extension has apparently never been considered in detail.
Reference: [PT97] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Local type argument synthesis with bounded quantification. </title> <type> Technical Report 495, </type> <institution> Computer Science Department, Indiana University, </institution> <year> 1997. </year>
Reference-contexts: It is described in detail in <ref> [PT98, PT97] </ref>.) Unfortunately, the addition of Bot significantly complicates the meta-theoretic properties of the system. <p> The main ones developed here are: 1. "Cut-elimination" (admissibility of transitivity) for subtyping. 2. Existence of meets and joins in the subtype relation. Because the existence of meets and joins in the subtype relation is crucial for the development here and in <ref> [PT97] </ref>, the sytem studied here extends Cardelli and Wegner's original Kernel Fun [CW85] rather than the "Full F " of Curien and Ghelli [CG92]. The only difference between these systems lies in the subtyping rule for comparing quantified types. <p> This generalization has no effect on the properties of the system per se, but plays an important role in the scheme for inferring type arguments described in <ref> [PT97] </ref>; it is used here for notational consistency with that paper. <p> [S=X] ` K &lt;: [S=X]J; as required. ffi 4 More Properties of Subtyping This section develops some additional properties of subtyping that are not required for the development of the subject reduction property in Section 5. (They play a critical role in the local type argument synthesis algorithm developed in <ref> [PT97] </ref>.) 4.1 Bottom Variables and Rigid Types As discussed in the introduction, it is important to note that some of the usual properties of presentations of Kernel Fun without Bot do not hold for the present system. <p> not have this property; in order to construct a typechecking algorithm for this extension, we need to be able to calculate the smallest supertype of the minimal type that does. (This problem is discussed in more detail in [GP97].) Another application of variable elimination is the constraint-generation algorithm developed in <ref> [PT97] </ref>. Given two types S and T, one of which may include some indeterminate "unification variables," this algorithm calculates the minimal constraints on the unification variables such that S &lt;: T. <p> It should be emphasized that this choice is made for purely stylistic reasons (mainly for consistency with the development in <ref> [PT97] </ref>): it does not affect the set of typeable terms.
Reference: [PT98] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Local type inference. </title> <booktitle> In Conference Record of POPL '98: the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <year> 1998. </year> <note> To appear. Full version available as Indiana University CSCI technical report #493. </note>
Reference-contexts: It is described in detail in <ref> [PT98, PT97] </ref>.) Unfortunately, the addition of Bot significantly complicates the meta-theoretic properties of the system.
References-found: 18

