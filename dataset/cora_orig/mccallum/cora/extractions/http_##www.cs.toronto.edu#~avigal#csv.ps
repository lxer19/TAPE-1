URL: http://www.cs.toronto.edu/~avigal/csv.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Title: Combining Simultaneous Values and Temporal Data Dependencies  
Author: Avigdor Gal Dov Dori 
Address: Haifa, 32000, Israel  
Affiliation: Information Systems Engineering Department Faculty of Industrial Engineering and Management Technion Israel Institute of Technology  
Abstract: In temporal databases there are situations where multiple values of the same data item have overlapping validity times. In addition to the common case of multi-valued properties, there are several possible semantics to multiple values with overlapping validity times of the same data item. We refer to such data items as having simultaneous values. This paper presents a polynomial algorithm for efficient handling of simultaneous values in a database with temporal data dependencies|integrity rules that define relationships among values of different data items in a temporal database. The algorithm is demonstrated using a case study from the game theory area. An implementation of the algorithm is integrated in a prototype of a temporal active database. keywords: temporal databases, simultaneous values, uncertainty, temporal data dependencies, action reasoning 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Cournot. </author> <booktitle> Researches into the Mathematical Principles of the Theory of Wealth. </booktitle> <publisher> Macmillan, </publisher> <address> New York, N.Y., </address> <month> 1897. </month>
Reference-contexts: Decision support systems can benefit significantly from the temporal active paradigm. As a concrete motivating case study, we present the following application of a decision support system, based on the Cournot game [7]; <ref> [1] </ref>. Three instant coffee manufacturers|Bilbo, Frodo and Gandalf, decide each month about the quantity of coffee to be produced in the next month.
Reference: [2] <author> O. Etzion, A. Gal, and A. Segev. </author> <title> Temporal active databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Database, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Instead, for each database retrieval operation, the user can choose the appropriate value, values or any aggregation of those values. Handling simultaneous values in a temporal database requires the use of optimized update and retrieval mechanisms. The maintenance problem of simultaneous values becomes more arduous in temporal active databases <ref> [2] </ref>, where temporal data dependencies are enforced. A temporal data dependency is a tool that supports rules for manipulating data-items which may have a variety of temporal characteristics. Temporal data dependencies can be viewed as a type of integrity rules of the temporal active database.
Reference: [3] <author> K.M. Van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> A modeling environment for decision support systems. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 7 </volume> <pages> 241-251, </pages> <year> 1991. </year>
Reference: [4] <author> R. Hull and R. King. </author> <title> Semantic database modeling: Survey, application and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> Sep </month> <year> 1987. </year>
Reference-contexts: There are situations where multiple values of the same data-item have overlapping valid times. The multi-valued property is the most common case, where several values are grouped into a single property <ref> [4] </ref>. For example, a property that contains the languages that a person speaks, can have a set of values grouped into a single property.
Reference: [5] <author> C.S. Jensen, J. Clifford, S.K. Gadia, A. Segev, and R.T. Snodgrass. </author> <title> A glossary of temporal database concepts. </title> <journal> ACM SIGMOD Record, </journal> <volume> 21(3) </volume> <pages> 35-43, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction and Motivation A temporal database is a database that supports some aspects of time <ref> [5] </ref>. One of the basic temporal aspects supported by many temporal databases is the valid time, representing the time a data-item is considered to be true in the modeled reality [5]. There are situations where multiple values of the same data-item have overlapping valid times. <p> 1 Introduction and Motivation A temporal database is a database that supports some aspects of time <ref> [5] </ref>. One of the basic temporal aspects supported by many temporal databases is the valid time, representing the time a data-item is considered to be true in the modeled reality [5]. There are situations where multiple values of the same data-item have overlapping valid times. The multi-valued property is the most common case, where several values are grouped into a single property [4]. <p> For example, in Figure 1 only interpreted as all the days from February 1, 1994 to May 31, 1994 (June 1, 1994 is not included). A time interval is defined in <ref> [5] </ref> as "the time between two insatnces" and can be represented as either close or semi-open intervals. 8 combinations out of the 24 possible ones should be considered. This work presents an algorithm that efficiently computes temporal data dependencies.
Reference: [6] <author> N. Kline and R.T. Snodgrass. </author> <title> Computing temporal aggregates. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 223-231, </pages> <month> Mar </month> <year> 1995. </year>
Reference-contexts: This work presents an algorithm that efficiently computes temporal data dependencies. Our approach for efficient evaluation of temporal data dependencies is based in part on previous works on computing temporal aggregates, including [8] and <ref> [6] </ref>. An aggregate function, such as selecting the minimum value of a set, is applied to a set of values (e.g. relations in the relational database model) and yields a scalar value. <p> The approach proposed in [8] first determines constant intervals as intervals within which there is no change in the data-item value. It then selects tuples that overlap each of these constant intervals and calculates the result. The work in <ref> [6] </ref> is based on a tree data structure for the time axis partition. Extending these approaches to solve the problem of evaluating temporal data dependencies, we present a polynomial algorithm for efficient evaluation of temporal data dependencies with simultaneous values.
Reference: [7] <author> J. Tirole. </author> <title> The Theory of Industrial Organization. </title> <publisher> the MIT press, </publisher> <year> 1989. </year>
Reference-contexts: Decision support systems can benefit significantly from the temporal active paradigm. As a concrete motivating case study, we present the following application of a decision support system, based on the Cournot game <ref> [7] </ref>; [1]. Three instant coffee manufacturers|Bilbo, Frodo and Gandalf, decide each month about the quantity of coffee to be produced in the next month.
Reference: [8] <author> P.A. Tuma. </author> <title> Implementing historical aggregates in TempIS. </title> <type> Master thesis. </type> <institution> Wayne State University, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: This work presents an algorithm that efficiently computes temporal data dependencies. Our approach for efficient evaluation of temporal data dependencies is based in part on previous works on computing temporal aggregates, including <ref> [8] </ref> and [6]. An aggregate function, such as selecting the minimum value of a set, is applied to a set of values (e.g. relations in the relational database model) and yields a scalar value. <p> To carry out such calculation, it is necessary to know which values have overlapping validity intervals, and to consider each value in its own validity interval. The approach proposed in <ref> [8] </ref> first determines constant intervals as intervals within which there is no change in the data-item value. It then selects tuples that overlap each of these constant intervals and calculates the result. The work in [6] is based on a tree data structure for the time axis partition.
References-found: 8

