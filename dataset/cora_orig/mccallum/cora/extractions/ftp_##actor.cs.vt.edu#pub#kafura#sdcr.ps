URL: ftp://actor.cs.vt.edu/pub/kafura/sdcr.ps
Refering-URL: http://www.cs.vt.edu/~kafura/
Root-URL: http://www.cs.vt.edu
Email: kafura@cs.vt.edu  mukherji@cis.udel.edu  
Phone: 540.231.5568  302.831.8235  
Title: Coordination in Statically-Typed Concurrent Object-Oriented Languages  
Author: Dr. Dennis Kafura Dr. Manibrata Mukherji 
Date: April 30, 1996  
Address: VA 24061-0106  19716  
Affiliation: Department of Computer Science Virginia Tech Blacksburg,  Department of Computer and Information Sciences University of Delaware Newark, DE  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Mukherji. </author> <title> "Specification of Multi-Object Coordination Schemes Using Coordinating Environments". </title> <type> Doctoral Dissertation. </type> <institution> Department of Computer Science, Virginia Tech, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Button class, is shown below. class ButtonPanel : public MultiButtonPanel f public: ButtonPanel (ElementaryEvent* e1, ElementaryEvent* e2) : MultiButtonPanel (e1, e2) f g; protected: void UndepressButtonCA () f depressedButton!BlockComponent (); ((Button*) depressedButton)!Undepress (); depressedButton!UnblockComponent (); g; g; 4 A Calculus of Coordinating Environments The Calculus of Coordinating Environments (CCE) ([16], <ref> [1] </ref>) enables a simple and direct specification of CE objects using Coordinating Environment agents (CE agents). CE agents coordinate com positions of CCS agents.
Reference: [2] <author> M. Mukherji and D. Kafura. </author> <title> "Specification of Multi-Object Coordination Schemes Using Coordinating Environments". </title> <note> Paper under review at Theory and Practice of Object Systems. </note>
Reference-contexts: A diverse set of coordination languages is encouraged and can be appreciated as representatives solutions in a large design space. This paper describes a coordination language for concurrent object-oriented programming referred to as Coordinating Environments (CEs) ([1], <ref> [2] </ref>). The base object-oriented language is statically typed. Coordination is achieved among concurrent objects by means of a framework designed in C++. This approach is based on our previous work ([3]) with the actor model ([4]) in C++.
Reference: [3] <author> D. Kafura, M. Mukherji, and G. Lavender, </author> <title> "ACT++ 2.0: A Class Library for Concurrent Programming in C++ with Actors," </title> <journal> Journal of Object-Oriented Programming, </journal> <pages> pages 47-55, </pages> <month> October, </month> <year> 1993. </year>
Reference: [4] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference: [5] <author> S. Frolund and G. Agha. </author> <title> A Language Framework for Multi-Object Coordination. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings ECOOP'93, </booktitle> <volume> LNCS 707, </volume> <pages> pages 346-359, </pages> <address> Germany, July, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference: [6] <editor> M. Aksit et al. </editor> <title> Abstracting Object Interactions Using Composition Filters. </title> <booktitle> Proceedings of the ECOOP'93 Workshop on Object-Based Distributed Programming, </booktitle> <editor> R. Guerraoui, O. Nierstrasz, and M. Rivelli editors, </editor> <volume> LNCS 791, </volume> <pages> pages 152-184, </pages> <address> Kaiserslautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference: [7] <author> G. Agha and C. J. Callsen. Actorspace: </author> <title> An Open Distributed Programming Paradigm. </title> <booktitle> In Proceedings of the ACM Symposium on Principles and Practice of Parallel Programming, SIGPLAN Notices v 28:7, </booktitle> <pages> pages 23 - 32. </pages>
Reference: [8] <author> S. Gibbs. </author> <title> Composite Multimedia and Active Objects. </title> <booktitle> In OOPSLA'91 Conference Proceedings, </booktitle> <pages> pages 97-112. </pages>
Reference-contexts: Based on these goals, Coordinating Environments is most similar to Synchronizers ([5]) and Abstract Communication Types ([6]). Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], <ref> [8] </ref>, [9], [10], [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], [14], [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations.
Reference: [9] <author> M. H. Olsen, E. Oskiewicz, J. P. Warne. </author> <title> A Model for Interface Groups. </title> <booktitle> In Proceedings IEEE 10th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <year> 1991. </year>
Reference-contexts: Based on these goals, Coordinating Environments is most similar to Synchronizers ([5]) and Abstract Communication Types ([6]). Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], <ref> [9] </ref>, [10], [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], [14], [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations.
Reference: [10] <author> C. Arapis. </author> <title> Specifying Object Interactions. </title> <editor> In D. Tsichritzis, editor, </editor> <title> Object Composition. </title> <institution> University of Geneva, </institution> <year> 1991. </year>
Reference-contexts: Based on these goals, Coordinating Environments is most similar to Synchronizers ([5]) and Abstract Communication Types ([6]). Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], [9], <ref> [10] </ref>, [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], [14], [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations.
Reference: [11] <author> R. Wirfs-Brock, B. Wilkerson, and L. Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Based on these goals, Coordinating Environments is most similar to Synchronizers ([5]) and Abstract Communication Types ([6]). Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], [9], [10], <ref> [11] </ref>). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], [14], [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations.
Reference: [12] <author> D. C. Luckham et al. </author> <title> Partial Orderings of Event Sets and Their Application to Prototyping Concurrent, Timed Systems. </title> <journal> Journal of Systems Software. </journal> <volume> Vol. 21, </volume> <month> June </month> <year> 1993, </year> <pages> pages 253-265. 8 </pages>
Reference: [13] <author> A. Yonezawa, </author> <title> editor. ABCL | an object-oriented concurrent system. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], [9], [10], [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], <ref> [13] </ref>, [14], [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations. The key operation in the CEs model is the observe operation that allows a coordinating agent to transparently monitor and control messages received by coordinated objects.
Reference: [14] <author> A. R. Helm, I. M. Holland, and D. Gangopadhyay. </author> <title> Contracts: Specifying Behavioral Compositions in Object-Oriented Systems. In OOPSLA'90, </title> <journal> in Special Issue of SIGPLAN Notices, </journal> <pages> pages 169-180, </pages> <address> Ottawa, </address> <year> 1990. </year> <note> ACM Press. Joint conference ECOOP/OOPSLA. </note>
Reference-contexts: Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], [9], [10], [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], <ref> [14] </ref>, [15]). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations. The key operation in the CEs model is the observe operation that allows a coordinating agent to transparently monitor and control messages received by coordinated objects.
Reference: [15] <author> I. M. Holland. </author> <title> Specifying Reusable Components Using Contracts. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP'92, </booktitle> <volume> LNCS 615, </volume> <pages> pages 287-308, </pages> <address> Utrecht, The Netherlands, July, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Due to its transparency, Coordinating Environments differ from approaches that use a visible group coordinator ([7], [8], [9], [10], [11]). Due to its separability, Coordinating Environments differ from approaches that embed the coordination machinery in each coordinated object ([12], [13], [14], <ref> [15] </ref>). The remainder of this paper is organized as follows. Section 2 describes Coordinating Environments, its object model, and its operations. The key operation in the CEs model is the observe operation that allows a coordinating agent to transparently monitor and control messages received by coordinated objects.
Reference: [16] <author> M. Mukherji and D. Kafura, "CCE: </author> <booktitle> A Process-Calculus Based Formalism for Specifying Multi-Object Coordination ," in the proceedings of COORDINATION'96 | First International Conference on Coordination Languages and Models, </booktitle> <address> Cesena, Italy, </address> <month> April 15-17, </month> <year> 1996, </year> <pages> pages 285-304, </pages> <booktitle> Lecture Notes in Computer Science, number 1061, </booktitle> <publisher> Springer. </publisher>
Reference-contexts: Section 3 presents a simple example: a coordinated pair of buttons forming a panel of buttons. Section 4 outlines a theory named the Calculus of Coordinating Environments (CCE) ([1], <ref> [16] </ref>), based on Milner's Calculus of Communicating Systems (CCS) ([17]), that allows for the direct expression and analysis of coordination among agents.
Reference: [17] <author> R. Milner, </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [18] <author> Arthur Allen and Dennis de Champeaux, </author> <title> "Extending the Statechart Formalism: Event Scheduling and Disposition," </title> <booktitle> in the proceedings of OOPSLA'95, </booktitle> <pages> pages 1-16. 9 </pages>
References-found: 18

