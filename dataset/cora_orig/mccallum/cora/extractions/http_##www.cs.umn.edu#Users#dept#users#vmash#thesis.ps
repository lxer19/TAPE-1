URL: http://www.cs.umn.edu/Users/dept/users/vmash/thesis.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/vmash/
Root-URL: http://www.cs.umn.edu
Author: Date 
Degree: Dr. John Riedl Name of Faculty Adviser Signature of Faculty Adviser  
Date: made.  
Note: This is to certify that I have examined this bound copy of a doctoral thesis by Vahid Reza Mashayekhi and have found that it is complete and satisfactory in all respects, and that any and all revisions required by the final examining committee have been  
Affiliation: UNIVERSITY OF MINNESOTA  GRADUATE SCHOOL  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Sid Ahuja, Robert Ensor, and David Horn. </author> <title> The Rapport multimedia conferencing system. </title> <booktitle> In Proceedings of Conference on Office Information Systems, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> The response from the recipient may be sent back to the original sender, who is in charge of scheduling a meeting time for a group of people. 2.3 Multimedia Systems There are many applications for multimedia in collaborative applications <ref> [1, 41, 81, 84, 93] </ref>. Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93]. <p> The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice. Teleconferencing systems improve synchronous interaction, when traveling is not desirable. Rapport is a multimedia conferencing system, supporting interactive, real-time, distributed conferences among a group of people <ref> [1] </ref>. It aims at emulating face-to-face conferences when participants are distributed. Teleconf is an audio teleconferencing tool built on SuiteSound [81]. Teleconf manages floor control for users in two modes: FIFO queuing and no floor control. FIFO queuing places a participant on a queue of waiting speaker. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>.
Reference: [2] <author> Marc Andreesen. </author> <title> NCSA Mosaic technical summary. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Link markers demarcate the points of departure from the current document. The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. There are several hypertext and hypermedia systems in existence <ref> [2, 20, 53, 86, 95] </ref>. <p> The World Wide Web project (WWW) enjoys equal support among academic and industry institutions [5, 6]. WWW uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for WWW project <ref> [2] </ref>. The client software, called Mosaic, is a networked information discovery, retrieval, and collaboration tool for wide-area distributed computing. It is capable of supporting multiple media, user-tracking, personal annotations, and document cross-linking. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>. <p> The exchange of messages will continue until all the faults are addressed. 4.3.2 Mosaic Mosaic is a networked information discovery, retrieval, and collaboration tool <ref> [2] </ref>. It is accessible across several platforms, capable of supporting multiple media, user-tracking, annotations, and document cross-linking. For a more detailed description of Mosaic, refer to Appendix B. <p> The primary goal of these projects is to provide a user on the Internet access to information on distributed hosts in a seamless fashion. We have chosen the National Center for Supercomputing Applications (NCSA) WWW client and server software <ref> [2] </ref> for implementing our prototype for asynchronous inspection. NCSA client software, called Mosaic, is a networked information discovery, retrieval, and collabo 91 ration tool for wide-area distributed computing. It is capable of supporting multiple media, user-tracking, personal annotations, and document cross-linking. <p> Environment: A strength of the Web [6] project is the variety of software and hardware platforms supported by it. There are many Web browsers for PC, Macintosh, and UNIX workstations. The participants in our pilot study took advantage of this strength by running Mosaic <ref> [2] </ref> browsers from Sun Sparc Stations located in computer laboratories at the University of Minnesota or dialed in remotely from their personal computers at home. Target Material: The target material in our pilot study was the object diagram for an Automatic Teller Machine (ATM) (See Appendix F).
Reference: [3] <author> Apollo Systems. </author> <title> Introduction to the DSEE Environment. User Reference Manual. </title>
Reference-contexts: Apollo's DSEE environment extends this support by archiving previous versions of sources, controlling access to all versions, documenting the history of each file, building programs and individual components, rebuilding programs with previously built components, building components concurrently on distributed nodes, and managing program releases <ref> [3] </ref>. 2.8 Software Inspectors Research in the area of software inspection has resulted in the introduction of new inspection processes and computer-supported tools. The formal inspection techniques include Active Design Reviews, N-fold inspection, and phased inspection.
Reference: [4] <editor> Lynda Applegate, Ben Konsynski, and Jay Nunamaker. </editor> <title> A group decision support system for idea generation and issue analysis in organization planning. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 16-34. </pages> <institution> Association for Computing Machinery, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: Cognoter is a Colab tool used to prepare presentations collectively. It provides support for brainstorming, organizing, and evaluating. The PlexCenter Planning and Decision Support Laboratory at the University of Ari-zona provides a large U-shaped conference table with workstations depressed below the table for line-of-sight considerations <ref> [4, 73] </ref>. A large-screen projection system displays screens of individual participants or a compilation of screens. The facility is used for electronic brainstorming and issue analysis among other group activities. A multi-user software environment named Software-Aided Meeting Management (SAMM) serves as a vehicle for experimentation in GDSS at Minnesota [34].
Reference: [5] <author> Tim Berners-Lee, Robert Cailliau, Jean-Francois Groff, and Bernd Pollermann. </author> <title> World-Wide Web: </title> <journal> The Information Universe, </journal> <volume> volume 2, </volume> <pages> pages 52-58. </pages> <publisher> Meckler Publishing, </publisher> <address> Westport, CT, USA, </address> <year> 1992. </year> <note> Published in Electronic Networking: Research, Applications and Policy. </note>
Reference-contexts: Links are types of connections between cards and can be displayed as a small link icon or as a box with the title of the destination card. The World Wide Web project (WWW) enjoys equal support among academic and industry institutions <ref> [5, 6] </ref>. WWW uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for WWW project [2]. <p> a reminder window, flashing the screen, beeping the terminal, sending conventional e-mail messages, computational e-mail messages to schedule an appointment on the participant's calendar, or displaying the inspection meeting on the participant's screen. 5.3 Implementation In the past few years, projects such as Gopher [64] and World Wide Web (WWW) <ref> [5, 6] </ref> have gained increasing visibility and support among academic and industry institutions. The primary goal of these projects is to provide a user on the Internet access to information on distributed hosts in a seamless fashion.
Reference: [6] <author> Tim Berners-Lee, Robert Cailliau, Jean-Francois Groff, and Bernd Pollermann. </author> <title> The World Wide Web initiative. </title> <booktitle> In Proceedings of INET 93, </booktitle> <year> 1993. </year>
Reference-contexts: Links are types of connections between cards and can be displayed as a small link icon or as a box with the title of the destination card. The World Wide Web project (WWW) enjoys equal support among academic and industry institutions <ref> [5, 6] </ref>. WWW uses the hypertext paradigm to provide a seamless universe of network-accessible information to computer users. The National Center for Supercomputing Applications has developed client and server software for WWW project [2]. <p> a reminder window, flashing the screen, beeping the terminal, sending conventional e-mail messages, computational e-mail messages to schedule an appointment on the participant's calendar, or displaying the inspection meeting on the participant's screen. 5.3 Implementation In the past few years, projects such as Gopher [64] and World Wide Web (WWW) <ref> [5, 6] </ref> have gained increasing visibility and support among academic and industry institutions. The primary goal of these projects is to provide a user on the Internet access to information on distributed hosts in a seamless fashion. <p> Two of the students had participated in computer-supported inspections prior to this pilot study. We appointed a more experienced student to be the moderator for the inspection meeting; two students played the reviewer's role; and the last, the producer's. Environment: A strength of the Web <ref> [6] </ref> project is the variety of software and hardware platforms supported by it. There are many Web browsers for PC, Macintosh, and UNIX workstations.
Reference: [7] <author> Sara A. Bly, Steve R. Harrison, and Susan Irwin. </author> <title> Media spaces: Bringing people together in a video, audio, and computing environment. </title> <journal> Communications of ACM, </journal> <volume> 36(1) </volume> <pages> 28-47, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [7, 21, 89] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [38].
Reference: [8] <author> Barry Boehm. </author> <booktitle> Software Engineering Economics. </booktitle> <address> Prentic-Hall, </address> <year> 1981. </year>
Reference-contexts: Developing architectural models for building CSCW applications. 2. Building software engineering applications and conducting field and laboratory trials of the prototypes to learn more about the support required for the infras tructure. software engineering, in that feedback from subsequent phases is used to modify the results from previous phases <ref> [8] </ref>. Developing Taxonomies analyzes the solution space for a particular coordination problem. The analysis provides a partial characterization of the possible ways the coordination problem may be solved.
Reference: [9] <author> Barry Boehm. </author> <title> Industrial software metrics top 10 list. </title> <booktitle> In IEEE Software, </booktitle> <month> Septem-ber </month> <year> 1987. </year>
Reference-contexts: Boehm includes software inspection in his list of the ten most important approaches for improving the quality of software, saying, "Walkthroughs (inspection) catch 60 percent of the errors (faults)" <ref> [9] </ref>. Inspection can be used on many types of software products including analysis documents, design documents, computer programs, test plans, and test cases. Proposals, technical reports, and business reports can also benefit from inspection. Cost and time are the limiting factors for inspection.
Reference: [10] <author> Nathaniel Borenstein. </author> <title> Computational mail as network infrastructure for Computer-Supported Cooperative Work. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Confernece, </booktitle> <pages> pages 67-74. </pages> <institution> Association for Computing Machinery, </institution> <month> November </month> <year> 1992. </year> <month> 126 </month>
Reference-contexts: Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive [11, 12]. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages <ref> [10] </ref>. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>. <p> Upon receipt of a message, the system can take automatic actions based on its type, such as filtering, classifying, or forwarding the 65 message [22]. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages <ref> [10] </ref>. Active messages interact with the recipients of the messages and take different actions based on the recipients' responses. <p> the discussions and the history of the meeting. * Group decision-making must be made available in e-mail. * Multimedia capabilities are needed to support recording, playing, and editing faults as audio annotations [11, 71]. 66 Proposed active e-mail systems could be used to support these extensions for effective asynchronous meetings <ref> [10] </ref>. Consider the following scenario of an inspection meeting using computational e-mail: The target material is sent to all participants, who review the material and send back their list of faults to the producer.
Reference: [11] <author> Nathniel Borenstein and Ned Freed. MIME: </author> <title> Multi-purpose Internet Mail Extensions. </title> <type> RFC 1521. </type>
Reference-contexts: Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [11, 12] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [10]. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses. <p> Traditional e-mail systems are characterized by passive, unidirectional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as images and audio, but the process has remained one-way and noninteractive <ref> [11, 12] </ref>. E-mail messages are further enhanced by structuring the information to include a message type. Upon receipt of a message, the system can take automatic actions based on its type, such as filtering, classifying, or forwarding the 65 message [22]. <p> guidelines. * The shared information must be managed in a structured manner to aid the participants in following the discussions and the history of the meeting. * Group decision-making must be made available in e-mail. * Multimedia capabilities are needed to support recording, playing, and editing faults as audio annotations <ref> [11, 71] </ref>. 66 Proposed active e-mail systems could be used to support these extensions for effective asynchronous meetings [10].
Reference: [12] <author> Nathniel Borenstein and Chris Thyberg. </author> <title> Power, ease of use, and cooperative work in a practical multimedia message system. </title> <journal> International Journal of Man-Machine Studies, </journal> <month> April </month> <year> 1991. </year>
Reference-contexts: Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [11, 12] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [10]. Active messages interact with the recipients of the messages by taking different actions based on the recipients' responses. <p> Traditional e-mail systems are characterized by passive, unidirectional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as images and audio, but the process has remained one-way and noninteractive <ref> [11, 12] </ref>. E-mail messages are further enhanced by structuring the information to include a message type. Upon receipt of a message, the system can take automatic actions based on its type, such as filtering, classifying, or forwarding the 65 message [22].
Reference: [13] <author> L. Brothers, V. Sembugamoorthy, and M. Miller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of Computer Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: As we study asynchrony and distribution in inspection meetings, it could be that eliminating face-to-face meetings is neither possible nor desirable. For instance, social interaction is regarded to be critical to the task of software inspection as currently formulated <ref> [13] </ref>, and this may be true for many types of meetings. Presently, our focus is on technical issues in distributed and asynchronous inspection. If our work is successful, it will make it possible for further investigation of the social changes introduced by distributed and asynchronous meeting models. <p> expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> The computer-supported tools include InspeQ, ICICLE, CIA, and CSRS. InspeQ is a prototype that has been developed that provides computer support for the phased inspection process [59]. The tool provides windows for displaying the work product, inspection checklist, and participants' comments. ICICLE <ref> [13] </ref> is a system intended to support the set of tasks performed during code inspection. ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting.
Reference: [14] <author> Marc Brown. </author> <title> Exploring algorithms using Balsa-II. </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Students can asynchronously discuss the class material with the instructor, teaching assistants, or other students in the class via electronic mail or electronic bulletins boards. The instructor can use algorithm animation software for simulating textbook algorithms 4 in classes, bringing to life concepts presented in a conventional textbook <ref> [14, 69] </ref>. Students observe the simulations and become active participants by tweaking the parameters while the algorithms are in execution. 1.2.3 Program Editing Consider two programmers who are working under a tight deadline to complete and deliver a software project. They use a multiuser editor to edit a program [32]. <p> Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom [37, 45, 87]. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors <ref> [14] </ref>. 27 2.4 Group Decision Support Systems Project Nick studies the theory of meetings and defines the meeting types and classes [21]. The focus is on small face-to-face meetings specializing in exploration activities such as brainstorming, defining design structure, analyzing issues, and problem resolution.
Reference: [15] <author> Todd Cavalier, Ravinder Chandhok, James Morris, David Kaufer, and Chris Neuwirth. </author> <title> A visual design for collaborative work: Columns for commenting and annotation. </title> <booktitle> In Proceedings of HICSS '24 IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: The PREP editor is a multi-user environment that supports co-authoring and commenting relationships <ref> [15, 16, 70, 71] </ref>.
Reference: [16] <author> Todd Cavalier, Ravinder Chandhok, James Morris, David Kaufer, and Chris Neuwirth. </author> <title> A visual design for collaborative work: Columns for commenting and annotation. </title> <booktitle> In Proceedings of the Twenty-fourth Hawaii International Conference on System Sciences, </booktitle> <pages> pages 729-738. </pages> <publisher> IEEE Press, </publisher> <year> 1991. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> The PREP editor is a multi-user environment that supports co-authoring and commenting relationships <ref> [15, 16, 70, 71] </ref>.
Reference: [17] <author> Peter Chen. </author> <title> The Entity Relationship mode toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1), </volume> <month> March </month> <year> 1976. </year>
Reference-contexts: These artifacts are 83 usually graphical documents, like Data Flow Diagrams (DFDs) [24], Petri Nets [77], and Entity-Relation (ER) diagrams <ref> [17] </ref>. Similar to textual documents, graphical documents need to be inspected to locate and fix faults as early as possible and prevent their propagation to later stages of software development. Our design elements require some changes to support inspecting graphical as well as textual documents.
Reference: [18] <author> S. Chen, K.G. Heisler, W.T. Tsai, X. Chen, and E. Leung. </author> <title> A model for assembly program maintenance. Software Maintenance: </title> <journal> Research and Practice, </journal> <volume> 2 </volume> <pages> 3-32, </pages> <year> 1990. </year>
Reference: [19] <author> Jeffrey Conklin. Hypertex: </author> <title> An introduction and survey. </title> <booktitle> IEEE Computer, </booktitle> <month> September </month> <year> 1987. </year>
Reference-contexts: merits, but only AST can explain how groups achieve their goals when the proper communication support is not provided [44]. 2.6 Hypermedia Systems Hypermedia systems support nonsequential browsing of documents, whereby a reader has the option of reading the current document further or following a cross link to another document <ref> [19] </ref>. Links may be uni- or bi-directional, supporting navigation both forward and backward. At any single time, the user sees the current document and the link markers. Link markers demarcate the points of departure from the current document.
Reference: [20] <author> Jeffrey Conklin and Michale Begeman. gIBIS: </author> <title> A hypertext tool for exploratory policy discussion. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4), </volume> <month> Oc-tober </month> <year> 1988. </year>
Reference-contexts: Link markers demarcate the points of departure from the current document. The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. There are several hypertext and hypermedia systems in existence <ref> [2, 20, 53, 86, 95] </ref>. <p> There are several hypertext and hypermedia systems in existence [2, 20, 53, 86, 95]. Graphical Issue Based Information System (gIBIS) is part of the Design Journal Project, which aims to capture the rationale for a software design <ref> [20] </ref>. gIBIS is a multi-user hypertext system, based on a theoretical model of the design process as a conversation among "stakeholders" who bring their respective expertise and viewpoints to bear on a number of design issues.
Reference: [21] <author> P. Cook, C. Ellia, M. Graf, Gail Rein, and T. Smith. Project Nick: </author> <title> Meeting augmentation and analysis. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [7, 21, 89] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [38]. <p> For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors [14]. 27 2.4 Group Decision Support Systems Project Nick studies the theory of meetings and defines the meeting types and classes <ref> [21] </ref>. The focus is on small face-to-face meetings specializing in exploration activities such as brainstorming, defining design structure, analyzing issues, and problem resolution. Meeting-aids include an electronic blackboard, interconnected workstations, and recording apparatus. <p> Chapter 3 COLLABORATIVE SOFTWARE INSPECTION Acknowledgement The work reported in this chapter was done in collaboration with Dr. Janet Drake and Dr. Wei-Tek Tsai [36, 66]. 3.1 Introduction Face-to-face meetings are described as "communication activities in which all participants are physically and simultaneously present" <ref> [21] </ref>. Bringing all participants together at the same time and place is expensive, but in the past face-to-face meetings were the only method for effective collaboration. The addition of distributed collaborative meeting environments changes this constraint [66].
Reference: [22] <author> Kevin Crowston and Thomas Malone. </author> <title> Intelligent software agents. </title> <journal> BYTE, De-cember 1988. </journal> <volume> 127 </volume>
Reference-contexts: A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. 2.2 Electronic Mail Systems A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) <ref> [22, 48, 62, 92] </ref>. Email allow users to compose, edit, delete, browse, save, archive, and send messages to groups of users. Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. <p> E-mail messages are further enhanced by structuring the information to include a message type. Upon receipt of a message, the system can take automatic actions based on its type, such as filtering, classifying, or forwarding the 65 message <ref> [22] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [10]. Active messages interact with the recipients of the messages and take different actions based on the recipients' responses.
Reference: [23] <author> Alan M. Davis. </author> <title> Software Requirements: Analysis and Specification. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: These students reviewed the requirements documents for two projects under development in our collaborative systems research group (See Appendix D). We have chosen to inspect software requirements since requirements analysis is a pivotal stage in the software development waterfall model where many faults could be detected and corrected <ref> [23] </ref>. One group of students first manually inspected one requirements document, and then used CAIS to inspect the other, while the second group first used CAIS for inspection and then manually inspected the other requirements document.
Reference: [24] <author> Tom DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Prentice Hall, </publisher> <year> 1978. </year>
Reference-contexts: To better understand how our proposed abstractions behave when applied to the product of other phases of the software development process, this chapter applies asynchronous inspection to the artifacts of the design phase. These artifacts are 83 usually graphical documents, like Data Flow Diagrams (DFDs) <ref> [24] </ref>, Petri Nets [77], and Entity-Relation (ER) diagrams [17]. Similar to textual documents, graphical documents need to be inspected to locate and fix faults as early as possible and prevent their propagation to later stages of software development.
Reference: [25] <author> Alan Dennis, Joseph Valacich, and Jay Nunamaker. </author> <title> An experimental investigation of the effect of group size in an electronic meeting environment. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 20, </volume> <year> 1990. </year>
Reference-contexts: Relaxing the time constraint allows the participants to work at a time of their choosing, providing a greater degree of freedom in their actions. In addition to enhancing flexibility for the participants, asynchronous meetings may alleviate some of the problems that have been reported in synchronous meetings <ref> [25, 52] </ref>: Limited Air Time: Only one person can speak at a time, limiting the time each 57 person can contribute. Production Blocking: Individuals have to withhold their contributions until they get a chance to report them.
Reference: [26] <author> Gerardine DeSanctis, Marshall Scott Poole, and Gary Dickson. </author> <title> Interpretive analysis of team use of group technologies. </title> <journal> Journal of Organizational Computing, </journal> <volume> 3(1) </volume> <pages> 1-29, </pages> <year> 1993. </year>
Reference-contexts: Another theory called, the Adaptive Structuration Theory (AST), also focuses on how technology structures are applied in interpersonal interaction and the specific nature of appropriation patterns <ref> [26] </ref>. However, AST states that individuals are able to adapt their behavior to complete their given task, even when a matching communication modality is not provided.
Reference: [27] <author> Prasun Dewan. </author> <title> A guide to Suite. </title> <type> Technical report, </type> <institution> SERC-TR-60-P, Software Engineering Research Center at Purdue University, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: Though, recording events is not part of software inspection, the monitoring makes it possible to investigate interesting research questions, such as the average time it takes for the participants to discover faults. 3.3 Implementation To build CSI, we used the Suite software development environment <ref> [27, 30, 33] </ref>. For a more detailed description of the Suite software system, refer to Appendix A. Figures 3.2 and 3.3 show the high-level and low-level views of the CSI's design. Eight objects make up CSI: Browser, Annotator, Note Pad, Action List, Inspection Summary, Criteria, Fault List, and History Log.
Reference: [28] <author> Prasun Dewan. </author> <title> Designing and implementing multi-user applications: A case study. </title> <journal> Software-Practice and Experience, </journal> <volume> 23(1) </volume> <pages> 75-94, </pages> <year> 1993. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [29] <author> Prasun Dewan. </author> <title> A structured approach to designing and evaluating collaborative systems. </title> <type> Technical report, </type> <institution> University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: We anticipate that what we learn in building these applications will help us understand how asynchrony and distribution should be supported in general infrastructures for building collaborative applications. Our strategy in solving the problem involves two parallel processes <ref> [29] </ref>: 1. Developing architectural models for building CSCW applications. 2.
Reference: [30] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Flexible user interface coupling in a collaborative system. </title> <booktitle> In Proceedings of the ACM CHI's 91 Conference, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Though, recording events is not part of software inspection, the monitoring makes it possible to investigate interesting research questions, such as the average time it takes for the participants to discover faults. 3.3 Implementation To build CSI, we used the Suite software development environment <ref> [27, 30, 33] </ref>. For a more detailed description of the Suite software system, refer to Appendix A. Figures 3.2 and 3.3 show the high-level and low-level views of the CSI's design. Eight objects make up CSI: Browser, Annotator, Note Pad, Action List, Inspection Summary, Criteria, Fault List, and History Log. <p> Table 3.1 shows the objects, the inspection material supported by the object, and the type of access supported by the object. 3.3.1 Degree of Collaboration CSI uses two interaction modes, one for asynchronous work and the other for synchronous work <ref> [30] </ref>. In asynchronous work, updates are propagated only after a user commits a change to an object. Thus, two users entering notes in the Note Pad do not see each others' changes until the notes are completed. In synchronous work, CSI propagates updates immediately after each character is typed. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>.
Reference: [31] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> A high-level and flexible framework for implementing multiuser user interfaces. </title> <journal> ACM Transcations on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [32] <author> Prasun Dewan and John Riedl. </author> <title> Toward computer-supported concurrent software engineering. </title> <booktitle> IEEE Computer, </booktitle> <month> January 93. </month>
Reference-contexts: Collaboration is a requirement in many software engineering tasks including requirements analysis, design, programming, debugging, and testing <ref> [32] </ref>. For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems [42]. <p> Students observe the simulations and become active participants by tweaking the parameters while the algorithms are in execution. 1.2.3 Program Editing Consider two programmers who are working under a tight deadline to complete and deliver a software project. They use a multiuser editor to edit a program <ref> [32] </ref>. The first programmer is checking for compliance with the established coding standards, while the second is adding comments to the code. They set the locking granularity to line-level, and start editing concurrently in What You See Is What I See (WYSIWIS) manner. <p> The traditional approach requires a merging process with human intervention at the end of the editing sessions and may still put the team beyond their designated deadline due to the serial manner of performing their tasks. 1.2.4 Collaborative Debugging Consider a software tester who is doing source-level testing <ref> [32] </ref>. After compiling and checking the output of the modules, the tester realizes that the output of the program is erroneous. The tester seeks the aid of the programmer who authored the module in fixing the problem. <p> expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [33] <author> Prasun Dewan and Eric Vasilik. </author> <title> An object model for conventional operating systems. </title> <booktitle> Usenix Computing Systems, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Though, recording events is not part of software inspection, the monitoring makes it possible to investigate interesting research questions, such as the average time it takes for the participants to discover faults. 3.3 Implementation To build CSI, we used the Suite software development environment <ref> [27, 30, 33] </ref>. For a more detailed description of the Suite software system, refer to Appendix A. Figures 3.2 and 3.3 show the high-level and low-level views of the CSI's design. Eight objects make up CSI: Browser, Annotator, Note Pad, Action List, Inspection Summary, Criteria, Fault List, and History Log. <p> A prototype of Suite has been implemented on top of UNIX, TCP/IP, NFS, and X <ref> [33] </ref>. The Suite object model is an extension of UNIX, allowing distributed, shared, protected, and persistent objects. For a more detailed description of Suite, refer to Appendix A.
Reference: [34] <author> Gary Dickson, Marshall Scott Poole, and Gerardine DeSanctis. </author> <title> An Overview of the GDSS Research Project and the SAMM System, </title> <booktitle> chapter 9, </booktitle> <pages> pages 163-179. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1992. </year>
Reference-contexts: A large-screen projection system displays screens of individual participants or a compilation of screens. The facility is used for electronic brainstorming and issue analysis among other group activities. A multi-user software environment named Software-Aided Meeting Management (SAMM) serves as a vehicle for experimentation in GDSS at Minnesota <ref> [34] </ref>. SAMM is designed for small face-to-face meetings of a group of participants. Its U-shaped conference table has a terminal and keyboard for each group member to enter ideas, comments, votes, and notes.
Reference: [35] <author> Paul Dourish and Victoria Bellotti. </author> <title> Awareness and coordination in shared workspaces. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year> <month> 128 </month>
Reference-contexts: Awareness comprises cognition of past and present activities of others and what is required of us in present and future to complete our task. It is used in helping participants match their contributions with the goals and objectives of the group as a whole <ref> [35] </ref>.
Reference: [36] <author> Janet Drake, Vahid Mashayekhi, John Riedl, and Wei-Tek Tsai. </author> <title> A distributed collaborative software inspection tool: Design, prototype, and early trial. </title> <booktitle> In Proceedings of the AIAA 30th Aerospace Sciences Meeting Conference in Reno, </booktitle> <address> Nevada, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: We build upon the work done in software inspectors by introducing distribution and asynchrony as abstractions for software inspection. Chapter 3 COLLABORATIVE SOFTWARE INSPECTION Acknowledgement The work reported in this chapter was done in collaboration with Dr. Janet Drake and Dr. Wei-Tek Tsai <ref> [36, 66] </ref>. 3.1 Introduction Face-to-face meetings are described as "communication activities in which all participants are physically and simultaneously present" [21]. Bringing all participants together at the same time and place is expensive, but in the past face-to-face meetings were the only method for effective collaboration.
Reference: [37] <author> EDUCOM. </author> <title> The Joe Wyatt challenge: </title> <booktitle> 101 success stories of information technologies in higher education, </booktitle> <year> 1991. </year>
Reference-contexts: In the no floor control mode, the audio from several active speakers are merged and played simultaneously at a workstation. Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom <ref> [37, 45, 87] </ref>. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors [14]. 27 2.4 Group Decision Support Systems Project Nick studies the theory of meetings and defines the meeting types and classes [21].
Reference: [38] <author> Clarence Ellis, Simon Gibbs, and Gail Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 39-56, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information <ref> [38] </ref>. Time and space are two major constraints in CSCW: Space (or Distribution): Relaxing the space constraint allows people to work in a place of their choosing. Consider the case of a multi-national software engineering team in Japan and the United States. <p> The reader is invited to follow the evolution of these ideas in the subsequent chapters. 1.5 Time and Space Axes In general, collaborative meetings can be categorized by the two dimensions of space and time <ref> [38] </ref>. A same-time, same-place meeting is the current board-room type meeting where everyone congregates at a table, using pointers, overhead projectors, and handouts as meeting tools. A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements. <p> Group Outline Viewing Editor (GROVE) is a real-time text editor designed 25 for simultaneous editing of a shared outline by multiple users <ref> [38] </ref>. Users may have private (read by single user), public (read by all users), and shared (read by a subset of all users) views of the document being edited.
Reference: [39] <author> Michael Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <year> 1976. </year>
Reference-contexts: in software inspection to be applicable to other software engineering tasks and can act as a first step in addressing our main conjecture. 8 1.4 Traditional Software Inspection Software inspection is a detailed review of a small amount of material by technically competent peers with the goal of detecting faults <ref> [39, 40] </ref>. Yourdon and Humphrey both developed widely used techniques for inspection [51, 99]. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, and find faults that result in action items.
Reference: [40] <author> Michael Fagan. </author> <title> Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(7) </volume> <pages> 744-751, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: in software inspection to be applicable to other software engineering tasks and can act as a first step in addressing our main conjecture. 8 1.4 Traditional Software Inspection Software inspection is a detailed review of a small amount of material by technically competent peers with the goal of detecting faults <ref> [39, 40] </ref>. Yourdon and Humphrey both developed widely used techniques for inspection [51, 99]. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, and find faults that result in action items.
Reference: [41] <author> Harry Forsdick. </author> <title> Explorations into real time multimedia conferencing. </title> <booktitle> In Proceedings of the International Conference on Computer Message Systems, </booktitle> <year> 1985. </year>
Reference-contexts: The response from the recipient may be sent back to the original sender, who is in charge of scheduling a meeting time for a group of people. 2.3 Multimedia Systems There are many applications for multimedia in collaborative applications <ref> [1, 41, 81, 84, 93] </ref>. Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93]. <p> Multimedia message systems, such as Diamond <ref> [41] </ref>, create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93]. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>.
Reference: [42] <author> Gene Forte and Ronald Norman. </author> <title> A self-assessment by the software engineering community. </title> <journal> Communications of the ACM, </journal> <volume> 35(4) </volume> <pages> 28-32, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems <ref> [42] </ref>. It is our belief that more effective software engineering methods will impact the society at large through savings in time, money, and effort. Furthermore, we anticipate that methods of collaboration in software engineering will also apply to collaboration in other domains.
Reference: [43] <author> Daniel Freedman and Gerald Weinberg. </author> <title> Handbook of Walkthroughs, Inspections, and Technical Reviews. </title> <publisher> Dorset House, </publisher> <year> 1990. </year>
Reference-contexts: Peer review finds more faults than the producer alone can find. When a group of peer work together and reaches consensus on the faults, the quality of the faults found improves. <ref> [43] </ref>. The objectives of inspection according to Humphrey are [51]: 1. "To find errors (faults) at the earliest possible point in the development cycle. 2. To ensure that the appropriate parties technically agree on the work. 3. To verify that the work meets predefined criteria. 13 4. <p> Criteria is a supporting object for the convenience of the system users. In the pilot study, we used the evaluation criteria developed by Freedman and Weinberg <ref> [43] </ref>. History Log captures CSI activities. For our study, we modified the History Log to compile data to evaluate CSI's performance versus that of a manual meeting. History Log time-stamps actions performed by all objects and writes them to a log.
Reference: [44] <author> Jolene Galegher and Robert Kraut. </author> <title> Computer-mediated communication and collaborative writing: Media influence and adaptation to communication constraints. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Several studies have investigated the validity of these theories and have found both theories with merits, but only AST can explain how groups achieve their goals when the proper communication support is not provided <ref> [44] </ref>. 2.6 Hypermedia Systems Hypermedia systems support nonsequential browsing of documents, whereby a reader has the option of reading the current document further or following a cross link to another document [19]. Links may be uni- or bi-directional, supporting navigation both forward and backward.
Reference: [45] <author> Steven Gilbert. </author> <title> Draft: A national strategy for helping faculty use information technologies to serve the educational goals of colleges and universities: Introducing the Jericho project, </title> <month> October </month> <year> 1992. </year>
Reference-contexts: In the no floor control mode, the audio from several active speakers are merged and played simultaneously at a workstation. Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom <ref> [37, 45, 87] </ref>. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors [14]. 27 2.4 Group Decision Support Systems Project Nick studies the theory of meetings and defines the meeting types and classes [21].
Reference: [46] <author> John Gintell and Gerard Memmi. CIA: </author> <title> Collaborative Inspection Agent experience: Building a CSCW application for software engineering. </title> <booktitle> In Workshop on CSCW Tools, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting. Collaborative Inspection Agent (CIA) is a document inspection tool <ref> [46] </ref>. CIA uses ConversationBuilder [57] to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles.
Reference: [47] <author> Saul Greenberg, Mark Roseman, Dave Webster, and Ralph Bohnet. </author> <title> Issues and experiences designing and implementing two group drawing tools. </title> <booktitle> In Proceedings of 25th Annual Hawaii International Conference on System Sciences, </booktitle> <month> January </month> <year> 1992. </year> <month> 129 </month>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [48] <author> Johnathan Grudin. </author> <title> Perils and pitfalls. </title> <journal> BYTE, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. 2.2 Electronic Mail Systems A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) <ref> [22, 48, 62, 92] </ref>. Email allow users to compose, edit, delete, browse, save, archive, and send messages to groups of users. Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers.
Reference: [49] <author> Barbara Gutek. </author> <title> Workgroup structure and information technology: A structural contingency approach. </title> <booktitle> In Intellectual Teamwork: The Social and Technological bases of cooperative work, </booktitle> <pages> pages 63-78, </pages> <year> 1990. </year>
Reference-contexts: According to the contingency theory, given a task, participants will choose a medium for their communication that matches the characteristics of the task 28 <ref> [49] </ref>. For instance, an interaction-intensive task, like design or software inspection, requires the adoption of an expressive, interactive communication modality, such as face-to-face meeting. Further, contingency theory predicts that if the communication modality does not match the characteristics of the task, the performance of the group will suffer.
Reference: [50] <author> Louise Hewitt. </author> <title> Interactive multimedia in a distance education milieu. </title> <booktitle> In Ed-Media '93, </booktitle> <pages> pages 247-254, </pages> <year> 1993. </year>
Reference-contexts: Once an order for the ideas is established, the group begin evaluating ideas by looking at the structure of the ideas, eliminating irrelevant categories or items, and filling in the missing items. 1.2.2 Distance Education Consider a distributed classroom, where the instructor and students are geographically dispersed across multiple sites <ref> [50, 74, 87] </ref>. The attendees, students and instructors, have desktop computers inter-connected via a network. All students see pictures of the instructor and other student speakers on their screens.
Reference: [51] <author> Watts Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Yourdon and Humphrey both developed widely used techniques for inspection <ref> [51, 99] </ref>. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, and find faults that result in action items. The preparation stage differs in the two techniques. <p> Post Inspection: After the producer fixes the problems and the action items are complete, the moderator re-evaluates the status of the target material. If another inspection session is required, the inspection process begins again. The inspection records and reports are completed. The software inspection meeting model <ref> [51] </ref> has well defined roles for participants and phases. The roles are: Moderator organizes and leads the inspection. The moderator is responsible to invite participants, schedule the meetings and meeting rooms, maintain order in the meeting, and ensure that the action list items are completed. <p> Peer review finds more faults than the producer alone can find. When a group of peer work together and reaches consensus on the faults, the quality of the faults found improves. [43]. The objectives of inspection according to Humphrey are <ref> [51] </ref>: 1. "To find errors (faults) at the earliest possible point in the development cycle. 2. To ensure that the appropriate parties technically agree on the work. 3. To verify that the work meets predefined criteria. 13 4. To formally complete a technical task. 5. <p> The inspection information is available for metric collection, eliminating unnecessary note-taking and duplication. 35 Added Structure: Automated support adds structure and consistency to the software inspection process. Humphrey states that a consistent and uniform review is a criterion for developing a high quality software process <ref> [51] </ref> . Enforcing the structure of the inspection process results in repeatable and measurable results. We propose to distribute software inspection by providing a public workspace for individuals to share information, supporting audio conferencing for participants' interaction, and introducing structure to the software inspection meeting activities. <p> Overall, the participants preferred CAIS over the manual meeting for its flexibility and freedom of meeting times. Roles: Our current implementation of CAIS does not support the notion of roles, as prescribed by Humphrey <ref> [51] </ref>. An inspection could assign one of three roles to the participants: Moderator, reviewer, or producer. <p> These roles are used to limit access to information and operations during the meeting. For instance, fault correlation is an activity that is only performed by the producer and not by other participants. Note that Humphrey <ref> [51] </ref> prescribes the additional role of a "scribe" (or recorder) in his inspection model. This role is redundant in our model since we automatically capture and present all the comments made by the participants in the structured history of the meeting. <p> of the root graphical document, where each list contains the faults recorded 97 by all participants collectively. 5.3.2 Fault Correlation During fault correlation, the producer integrates individual faults lists into an integrated fault list, eliminates duplicates, and arranges them by the order that they will be addressed in the inspection <ref> [51] </ref>. Figure 5.7 shows the architectural design of AISA's fault correlator module. We implement fault correlation in two steps: (1) Local correlation of faults for each component document, and (2) Global correlation of all locally-correlated faults in the root document. <p> The potential for abuse may be higher in organizations where the management uses inspection for evaluating employees' performance. However, we emphasize that the primary purpose of inspection is the evaluation of the product and not the producer <ref> [51] </ref>. 99 Merging two (or more) faults requires that their fields be somehow combined. Consider the simple case of two faults depicted in Table 5.1.
Reference: [52] <author> Charles McLaughlin Hymes and Gary Olson. </author> <title> Unblocking brainstorming through the use of a simple group editor. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <year> 1992. </year>
Reference-contexts: These scenarios serve to 3 motivate the remainder of this thesis. 1.2.1 Outlining Consider a group of workers who are using an electronic meeting room for generating an outline for a presentation <ref> [52, 89] </ref>. Meeting aids include an electronic blackboard and interconnected workstations. The group recognizes three distinct phases in accomplishing their task: Brainstorming, organizing, and evaluating. The group starts off by brainstorming, where ideas, described using a catch-word or a catch-phrase, are entered into private windows on participants workstations. <p> Relaxing the time constraint allows the participants to work at a time of their choosing, providing a greater degree of freedom in their actions. In addition to enhancing flexibility for the participants, asynchronous meetings may alleviate some of the problems that have been reported in synchronous meetings <ref> [25, 52] </ref>: Limited Air Time: Only one person can speak at a time, limiting the time each 57 person can contribute. Production Blocking: Individuals have to withhold their contributions until they get a chance to report them.
Reference: [53] <author> Kevin Jeffay, Jin-Kun Lin, John Menges, Don Smith, and John Smith. </author> <title> Architecture of the artifact-based collaborative system matrix. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> Link markers demarcate the points of departure from the current document. The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. There are several hypertext and hypermedia systems in existence <ref> [2, 20, 53, 86, 95] </ref>.
Reference: [54] <author> Philip M. Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the Conference on Computer Supported Cooperative Work. Association for Computing Machinery, </booktitle> <year> 1992. </year>
Reference-contexts: Collaborative Software Review System (CSRS) [55] aims to decrease the required human effort in reviews, conduct inspection incrementally during the software development, and provide on-line capabilities to collect metrics on the inspection process and software artifacts. The system is implemented on top of EGRET <ref> [54] </ref>, a multi-user, distributed, hypertext environment for asynchronous collaboration.
Reference: [55] <author> Philip M. Johnson and Danu Tjahjono. </author> <title> Improving software quality through computer supported collaborative review. </title> <booktitle> In Proceedings of the Third European Conference on Computer Supported Cooperative Work. Association for Computing Machinery, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: CIA uses ConversationBuilder [57] to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles. Collaborative Software Review System (CSRS) <ref> [55] </ref> aims to decrease the required human effort in reviews, conduct inspection incrementally during the software development, and provide on-line capabilities to collect metrics on the inspection process and software artifacts. The system is implemented on top of EGRET [54], a multi-user, distributed, hypertext environment for asynchronous collaboration.
Reference: [56] <author> Philip M. Johnson, Danu Tjahjono, Dadong Wan, and Robert S. Brewer. </author> <title> Experiences with CSRS: An instrumented software review environment. </title> <booktitle> In Software Quality, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Empirical studies of the CSRS system suggest that its use improves the breadth and depth of information captured by each reviewer in the inspection <ref> [56] </ref>. 32 2.9 Compare and Contrast Collaborative editors and annotators, such as GROVE, DistEdit, and Prep suggest that collaboration technology may be successfully applied to traditional domains such as writing and editing.
Reference: [57] <author> Simon Kaplan, William Tolone, Douglas Bogia, and Celsina Bignoli. </author> <title> Flexible, active support for collaborative work with ConversationBuilder. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> ICICLE assists individual users in the comment-preparation phase of code inspection. It provides a synchronous environment in the inspection meeting phase, with computer support providing a paperless meeting. Collaborative Inspection Agent (CIA) is a document inspection tool [46]. CIA uses ConversationBuilder <ref> [57] </ref> to develop a tool for synchronous inspection of all work products at various stages of the life cycle. It supports collaborative work by simultaneously displaying information on multiple user's screens, and allowing participants to play inspection roles. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>.
Reference: [58] <author> Won Kim and Henry Korth. </author> <title> A model of CAD transactions. </title> <booktitle> In Proceedings of VLDB, </booktitle> <pages> pages 25-33, </pages> <year> 1985. </year>
Reference-contexts: checkin/checkout model may be viewed as a long duration transaction, where multiple writes may occur on a single shared object, as long as the 30 semantics of a transaction are preserved (i.e., locking and access control is applied to the data object to make each update isolated from other operations.) <ref> [58] </ref>. An example of the checkin/checkout model is the UNIX Revision Control System (RCS) [94]. RCS provides utility programs designed to manage multiple revisions of source files, automate the storing, retrieval, logging, identification, and merging of versions, and maintain a history of previous versions.
Reference: [59] <author> John C. Knight and E. Ann Myers. </author> <title> An improved inspection technique. </title> <journal> Communications of the ACM, </journal> <volume> 36(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1993. </year> <month> 130 </month>
Reference-contexts: Empirical evidence of the authors' observation is reported in a subsequent experimental 31 evaluation [85]. In the phased inspection method, reviewers examine the work in a series of small inspections (also called phases), each of which aims at verifying that the product satisfies some desirable properties <ref> [59] </ref>. The properties examined are ordered such that each phase can assume the existence of properties checked in the earlier phases. The computer-supported tools include InspeQ, ICICLE, CIA, and CSRS. InspeQ is a prototype that has been developed that provides computer support for the phased inspection process [59]. <p> some desirable properties <ref> [59] </ref>. The properties examined are ordered such that each phase can assume the existence of properties checked in the earlier phases. The computer-supported tools include InspeQ, ICICLE, CIA, and CSRS. InspeQ is a prototype that has been developed that provides computer support for the phased inspection process [59]. The tool provides windows for displaying the work product, inspection checklist, and participants' comments. ICICLE [13] is a system intended to support the set of tasks performed during code inspection. ICICLE assists individual users in the comment-preparation phase of code inspection.
Reference: [60] <author> Michael Knister and Atul Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Standard editing operations such as insert, delete, cut, and paste are supported, the results of which are observed by all other participants simultaneously. DistEdit is a distributed toolkit for building interactive group editors <ref> [60, 78] </ref>. The requirements for DistEdit are supporting multiple users, achieving reasonable performance in presenting a consistent view to all users, compatibility with multiple, existing editors, tolerance in face of machine crashes, and dynamic join and departure of people.
Reference: [61] <author> Hideaki Kuzuoka. GestureCam: </author> <title> A video communication system for sympathetic remote collaboration. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 35-43. </pages> <institution> Association for Computing Machinery, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [62] <author> Kum-Yew Lai and Thomas Malone. </author> <title> Object Lens: A spreadsheet for cooperative work. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <year> 1988. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. 2.2 Electronic Mail Systems A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) <ref> [22, 48, 62, 92] </ref>. Email allow users to compose, edit, delete, browse, save, archive, and send messages to groups of users. Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers.
Reference: [63] <author> Lotus Development Corporation. </author> <title> Lotus Notes: The Groupware Standard, </title> <note> release 3 edition, </note> <year> 1993. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>. <p> Other reviewers can read the group annotations by the first reviewer and add their own group annotations regarding the document. The annotations are time-stamped and bear the name of the annotator to help in building a context around the group work. 4.3.3 Lotus Notes Lotus Notes <ref> [63] </ref> manages information for a group of people distributed across a computer network. This management includes the ability to collect, organize, share, process, and customize information.
Reference: [64] <author> J.L. Martin. </author> <title> Travels with Gopher. </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 84-87, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: of different forms, including popping up a reminder window, flashing the screen, beeping the terminal, sending conventional e-mail messages, computational e-mail messages to schedule an appointment on the participant's calendar, or displaying the inspection meeting on the participant's screen. 5.3 Implementation In the past few years, projects such as Gopher <ref> [64] </ref> and World Wide Web (WWW) [5, 6] have gained increasing visibility and support among academic and industry institutions. The primary goal of these projects is to provide a user on the Internet access to information on distributed hosts in a seamless fashion.
Reference: [65] <author> Johnny Martin and Wei-Tek Tsai. </author> <title> N-Fold inspection: A requirements analysis technique. </title> <journal> Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 225-232, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The N-fold inspection technique replicates the formal inspection method using N independent teams working in parallel under the control of a single moderator <ref> [65] </ref>. Each team is provided with a checklist and asked to analyze the software artifact. A fault may be detected by several teams, but the moderator gathers and records only the independent faults.
Reference: [66] <author> Vahid Mashayekhi, Janet Drake, Wei-Tek Tsai, and John Riedl. </author> <title> Distributed collaborative software inspection. </title> <journal> IEEE Software, </journal> <pages> pages 66-75, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: The large computer company wishes to be involved in all stages of development and has requested joint inspection meetings to be done on a weekly basis. The two group use an inspection tool that supports distributed participants in the inspection meeting <ref> [66] </ref>. <p> expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> We build upon the work done in software inspectors by introducing distribution and asynchrony as abstractions for software inspection. Chapter 3 COLLABORATIVE SOFTWARE INSPECTION Acknowledgement The work reported in this chapter was done in collaboration with Dr. Janet Drake and Dr. Wei-Tek Tsai <ref> [36, 66] </ref>. 3.1 Introduction Face-to-face meetings are described as "communication activities in which all participants are physically and simultaneously present" [21]. Bringing all participants together at the same time and place is expensive, but in the past face-to-face meetings were the only method for effective collaboration. <p> Bringing all participants together at the same time and place is expensive, but in the past face-to-face meetings were the only method for effective collaboration. The addition of distributed collaborative meeting environments changes this constraint <ref> [66] </ref>. In distributed software inspection, participants can "meet" with people in other cities through workstations at their desks. The benefits of distributed collaborative software inspection are: Distribution: People who are geographically distributed can participate in the inspection. <p> We have chosen Suite as our application development platform foremost because of our success in building other multi-user applications in it, including CSI <ref> [66] </ref>. Figures 4.3 and 4.4 show the high-level and low-level views of the CAIS's design. <p> the CAIS implementation in Suite by introducing the CAIS objects, presenting the group decision-making support and communications in CAIS, and demonstrating asynchronous inspection in CAIS through a scenario. 70 dashed arrows representing the logs. 4.3.5 CAIS Objects We use CSI (See Chapter 3) for the individual reviews and fault collection <ref> [66] </ref>. The correlated faults are sent to the asynchronous meeting, where CAIS is used for the discussion and resolution of the collected faults. CAIS consists of three objects (See Browser Object contains the document under review, with each line numbered. <p> This organization introduces a user-defined structure for a document that otherwise lacks linear structure. The division may be applied recursively to yield manageable pieces from a large, complex design document for the purpose of inspection. 86 Adding to the Information Space: Our experience with the hypertext paradigm <ref> [66, 67] </ref> has shown the model of a traversable network of information nodes to be a powerful way of capturing and adding to an information space.
Reference: [67] <author> Vahid Mashayekhi, Chris Feulner, and John Riedl. </author> <title> CAIS: Collaborative Asynchronous Inspection of Software. </title> <booktitle> In The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering. Association of Computing Machinery, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection. <p> Software inspection is a well structured group activity and the success of CSI suggests that other well structured group activities could benefit from a collaborative environment. Chapter 4 COLLABORATIVE ASYNCHRONOUS INSPECTION OF SOFTWARE Acknowledgement The work reported in this chapter was done in collaboration with Chris Feulner <ref> [67] </ref>. 4.1 Introduction We find the concurrent participation in the meeting phase of software inspection to be a significant component of the total inspection cost. The time required from the meeting participants and the problem of scheduling the meeting can make the synchronous meeting the bottleneck for the inspection. <p> For instance, all the annotations for a line can be linked to that line. In the following three sub-sections, we will discuss our design elements separately, concentrating on the changes and additions made to them as the result of work on our first prototype for asynchronous inspection <ref> [67] </ref> and present our scheme for supporting inspection of graphical documents: 5.2.1 Shared Information Space The shared information space plays a pivotal role in asynchronous inspection by presenting a causal and temporal ordering of the inspection activities, imposing a structure onto the meeting activities and artifacts, organizing the target material into <p> Structuring the Inspection Meeting: Our earlier design fixed the inspection meeting statically, whereby only discussions on faults discovered during the fault collection phase were allowed in the meeting. Subsequent pilot studies revealed that participants discovered new faults during the asynchronous inspection meeting that needed to be addressed <ref> [67] </ref>. Our present design supports a dynamic meeting structure, whereby new faults may be introduced and discussed during any phase of the inspection process. Organizing the Target Material: Textual documents can be divided into their physical parts, like pages, paragraphs, and lines of code. <p> This organization introduces a user-defined structure for a document that otherwise lacks linear structure. The division may be applied recursively to yield manageable pieces from a large, complex design document for the purpose of inspection. 86 Adding to the Information Space: Our experience with the hypertext paradigm <ref> [66, 67] </ref> has shown the model of a traversable network of information nodes to be a powerful way of capturing and adding to an information space. <p> As part of the pre-inspection preparation, the producer is responsible for determining the logical components of the graphical target material based on her intimate knowledge and understanding of it. Grouping Interrelated Faults: During our earlier pilot study <ref> [67] </ref>, our participants noted their desire for grouping related faults and addressing them as a single logical fault. We introduce the notion of a "composite" fault, which is a new entity created from merging a number of related, interdependent faults that share common 87 properties. <p> Note that Humphrey [51] prescribes the additional role of a "scribe" (or recorder) in his inspection model. This role is redundant in our model since we automatically capture and present all the comments made by the participants in the structured history of the meeting. Our previous design <ref> [67] </ref> did not support the notion of roles, leading to situations where a less-privileged participant would unknowingly perform an operation only intended for a more-privileged participant. <p> Decision by Lack of Response occurs when a participant suggests an idea (not a formal proposal), which goes un-answered by others. The lack of response by others in effect implies the rejection of that idea. In an earlier design cycle <ref> [67] </ref>, we decided to support Unanimity and Consensus methods. However, we discovered that meetings could be tied up by a slow participant. To avoid having meetings prolonged unnecessarily this way, in the current design we allow a majority of votes to decide the status of a proposal.
Reference: [68] <author> Vahid Mashayekhi, Bob Glamm, and John Riedl. AISA: </author> <title> Asynchronous Inspection of Software Artifacts. </title> <type> Technical report, </type> <institution> University of Minnesota, </institution> <year> 1995. </year> <note> In Press. </note>
Reference-contexts: Additional research is needed to understand the effects of the new meeting model on organizations. Chapter 5 ASYNCHRONOUS INSPECTION OF SOFTWARE ARTIFACTS Acknowledgment The work reported in this chapter was done in collaboration with Robert Glamm <ref> [68] </ref>. 5.1 Introduction We know that faults can be introduced and propagated at every phase of the software development.
Reference: [69] <author> Philllip Mercurio. </author> <title> The distributed laboratory: An interactive visualization environment for electron microscopy and 3-D imaging. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1992. </year>
Reference-contexts: Students can asynchronously discuss the class material with the instructor, teaching assistants, or other students in the class via electronic mail or electronic bulletins boards. The instructor can use algorithm animation software for simulating textbook algorithms 4 in classes, bringing to life concepts presented in a conventional textbook <ref> [14, 69] </ref>. Students observe the simulations and become active participants by tweaking the parameters while the algorithms are in execution. 1.2.3 Program Editing Consider two programmers who are working under a tight deadline to complete and deliver a software project. They use a multiuser editor to edit a program [32].
Reference: [70] <author> Chris Neuwirth, David Kaufer, Ravinder Chandhok, and James Morris. </author> <booktitle> Issues in the design of computer support for co-authoring and commenting. In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 183-195. </pages> <institution> Association for Computing Machinery, </institution> <year> 1990. </year> <month> 131 </month>
Reference-contexts: The PREP editor is a multi-user environment that supports co-authoring and commenting relationships <ref> [15, 16, 70, 71] </ref>. <p> In case time has expired and there are still faults remaining to be discussed, a synchronous meeting is scheduled to complete the inspection (See Figure 4.2). 4.3 Implementation There exist a wealth of software infrastructures for developing asynchronous inspectors <ref> [1, 2, 10, 30, 41, 57, 63, 70] </ref>.
Reference: [71] <author> Chris Neuwirth, David Kaufer, Ravinder Chandhok, and James Morris. </author> <title> Computer support for distributed collaborative writing: Defining parameters of interaction. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 145-153. </pages> <institution> Association for Computing Machinery, </institution> <year> 1994. </year>
Reference-contexts: The PREP editor is a multi-user environment that supports co-authoring and commenting relationships <ref> [15, 16, 70, 71] </ref>. <p> guidelines. * The shared information must be managed in a structured manner to aid the participants in following the discussions and the history of the meeting. * Group decision-making must be made available in e-mail. * Multimedia capabilities are needed to support recording, playing, and editing faults as audio annotations <ref> [11, 71] </ref>. 66 Proposed active e-mail systems could be used to support these extensions for effective asynchronous meetings [10].
Reference: [72] <author> Jakob Nielsen. </author> <title> Hypertext and Hypermedia. </title> <publisher> Academic Press, INC., </publisher> <year> 1990. </year>
Reference-contexts: We believe that the additional time spent in the asynchronous meeting is due to four factors: (1) Typing is generally slower than speaking, (2) The reading speed from the screen is about 30% slower than the reading speed from the paper <ref> [72] </ref>, (3) In asynchronous collaboration, a participant is required to read the previous comments for each fault every time to familiarize herself with the context of the discussion up to that point before contributing new ideas, and (4) Since the participants had the freedom of working from home in a relaxed
Reference: [73] <author> Jay Nunamaker, Alan Dennis, Joseph Valacich, Douglas Vogel, and Joey George. </author> <title> Electronic meeting systems to support group work. </title> <journal> Communications of the ACM, </journal> <month> July </month> <year> 1991. </year>
Reference-contexts: Cognoter is a Colab tool used to prepare presentations collectively. It provides support for brainstorming, organizing, and evaluating. The PlexCenter Planning and Decision Support Laboratory at the University of Ari-zona provides a large U-shaped conference table with workstations depressed below the table for line-of-sight considerations <ref> [4, 73] </ref>. A large-screen projection system displays screens of individual participants or a compilation of screens. The facility is used for electronic brainstorming and issue analysis among other group activities. A multi-user software environment named Software-Aided Meeting Management (SAMM) serves as a vehicle for experimentation in GDSS at Minnesota [34]. <p> These design elements satisfy the "Reaching a Consensus" and"Coordination" requirements. 3.2.2 CSI Structure Based on the two dimensions of time and place, four meeting models for collaborative meetings can be envisioned <ref> [73] </ref>: same-time-same-place: Participants meet in a single meeting room and interact simultaneously. same-time-different-place: Participants in different rooms interact simultane ously (See Figure 1.3). different-time-same-place: Participants go to a single meeting room at different times of their own choosing. different-time-different-place: Participants in different rooms perform tasks at time that each chooses (See
Reference: [74] <author> Bengt Olson. </author> <title> Third generation distance education. </title> <journal> International Journal of Continuing Education, </journal> 2(2/3/4):90-104, 1992. 
Reference-contexts: Once an order for the ideas is established, the group begin evaluating ideas by looking at the structure of the ideas, eliminating irrelevant categories or items, and filling in the missing items. 1.2.2 Distance Education Consider a distributed classroom, where the instructor and students are geographically dispersed across multiple sites <ref> [50, 74, 87] </ref>. The attendees, students and instructors, have desktop computers inter-connected via a network. All students see pictures of the instructor and other student speakers on their screens.
Reference: [75] <author> Francois Pacull, Alain Sandoz, and Andre Schiper. Duplex: </author> <title> A distributed collaborative editing environment in large scale. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 165-173. </pages> <institution> Association for Computing Machinery, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [76] <author> David L. Parnas and David M. Weiss. </author> <title> Active design reviews: Principles and practices. </title> <journal> Journal of Systems and Software, </journal> <volume> 7 </volume> <pages> 259-265, </pages> <year> 1987. </year>
Reference-contexts: The formal inspection techniques include Active Design Reviews, N-fold inspection, and phased inspection. Active Design Reviews is a new approach for reviewing design documents, where a small group of reviewers use questionnaires to study the design artifact and record both positive and negative comments <ref> [76] </ref>. The questionnaires are provided by the producers and are meant to enable the reviewers to take a more active role in the inspection process and focus their attention on a particular aspect of the design.
Reference: [77] <author> Carl Adam Petri. </author> <title> Kommunikation mit Automaten. </title> <type> PhD thesis, </type> <institution> University of Bonn, </institution> <year> 1962. </year>
Reference-contexts: To better understand how our proposed abstractions behave when applied to the product of other phases of the software development process, this chapter applies asynchronous inspection to the artifacts of the design phase. These artifacts are 83 usually graphical documents, like Data Flow Diagrams (DFDs) [24], Petri Nets <ref> [77] </ref>, and Entity-Relation (ER) diagrams [17]. Similar to textual documents, graphical documents need to be inspected to locate and fix faults as early as possible and prevent their propagation to later stages of software development. Our design elements require some changes to support inspecting graphical as well as textual documents.
Reference: [78] <author> Atul Prakash and Hyong Sop Shim. DistView: </author> <title> Support for building efficient collaborative applications using replicated active objects. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Standard editing operations such as insert, delete, cut, and paste are supported, the results of which are observed by all other participants simultaneously. DistEdit is a distributed toolkit for building interactive group editors <ref> [60, 78] </ref>. The requirements for DistEdit are supporting multiple users, achieving reasonable performance in presenting a consistent view to all users, compatibility with multiple, existing editors, tolerance in face of machine crashes, and dynamic join and departure of people.
Reference: [79] <author> Paul Resnick, Neophytos Iacovou, Mitesh Suchak, Peter Bergstrom, and John Riedl. GroupLens: </author> <title> An open architecture for collaborative filtering of netnews. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 175-186. </pages> <institution> Association for Computing Machinery, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications [1, 28, 31, 53, 57, 63, 82, 90, 91], and collaborative applications, fashioning an environment for group work <ref> [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79] </ref>. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [80] <author> John Riedl and Vahid Mashayekhi. </author> <title> Continuous media in discrete objects: support for collaborative multimedia. </title> <booktitle> In Workshop on Multimedia Information Systems (MIMS 92), </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: Once the target material is available, the reviewers browse through it, annotating it appropriately. CSI supports annotations by creating hyperlinks between lines of the document and the reviewers' annotations. Both text and audio annotations are possible <ref> [80] </ref>. Later, the producer reviews and categorizes the annotations and integrates them into one list. During the meeting, participants use CSI to bring the integrated fault list on-line and discuss the faults.
Reference: [81] <author> John Riedl, Vahid Mashayekhi, Jim Schnepf, Mark Claypool, and Dan Frankowski. Suitesound: </author> <title> A system for distributed collaborative multimedia. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <pages> pages 600-610, </pages> <month> August </month> <year> 1993. </year> <month> 132 </month>
Reference-contexts: An example of a same-time, different-place meeting would be a teleconferencing system supporting audio and video, allowing the meeting to take place with members in 16 activities performed during the inspection meeting from different places at the same time. different locations <ref> [81, 84] </ref>. Conceptually, a different-time, different-place meeting would enable participants to work together at the time and place of their choosing. An example is the e-mail systems, but existing implementations of structured activities are scarce. <p> The response from the recipient may be sent back to the original sender, who is in charge of scheduling a meeting time for a group of people. 2.3 Multimedia Systems There are many applications for multimedia in collaborative applications <ref> [1, 41, 81, 84, 93] </ref>. Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93]. <p> Teleconferencing systems improve synchronous interaction, when traveling is not desirable. Rapport is a multimedia conferencing system, supporting interactive, real-time, distributed conferences among a group of people [1]. It aims at emulating face-to-face conferences when participants are distributed. Teleconf is an audio teleconferencing tool built on SuiteSound <ref> [81] </ref>. Teleconf manages floor control for users in two modes: FIFO queuing and no floor control. FIFO queuing places a participant on a queue of waiting speaker. In the no floor control mode, the audio from several active speakers are merged and played simultaneously at a workstation. <p> Synchronous Tasks: The synchronous activities of inspection include discussion of correlated faults, reaching a consensus on the faults, recording the action items, and determining the meeting status. CSI supports discussion among the participants with a teleconferencing tool named Teleconf <ref> [81] </ref>. CSI brings the target material on-line in a window on all participants' screens. Figure 3.1 shows schematically what the user sees during the synchronous part of software inspection. The producer leads the group through the correlated fault list. <p> The "Category" and "Disposition" fields in the Annotator object provide a selection of values through pop-up windows. 3.3.3 Teleconf We used a teleconferencing tool named Teleconf to support the verbal interaction of meeting participants through digital audio support by their workstations <ref> [81] </ref>. Teleconf has objects that manage floor control and sound delivery. These objects interact with the audio device for playing and recording of sound. Teleconf currently supports two floor control modes: FIFO and no floor control (Free). <p> Our preliminary results have shown that Teleconf under Free mode imposes high CPU and network load. We have reduced this load by using silence deletion filters and have discovered that the use of these filters can reduce the traffic from O (n 2 ) to O (n) <ref> [81] </ref>. 3.4 Pilot Study To assess the effectiveness of inspection in our distributed collaborative environment and compare it with face-to-face meeting, we used a case study approach with replication logic [98]. <p> The microphones were hand-held and it was difficult to use them simultaneously with the keyboard . In more recent experiments with Teleconf, we used lapel microphones and headphone. Benefits of the headphones are free hands, a quiet room for co-workers, and better silence deletion <ref> [81] </ref>. The FIFO queuing protocol for floor control is adequate for small meetings such as software inspection. There is more silent time in software inspection meetings than other types of meetings. The producer and reviews spend time reading the faults and target material and thinking. <p> Finally, we support the Decision by Lack of Response method by allowing those faults whose resolution are difficult to obtain asynchronously to be sent to the synchronous meeting. 5.2.3 Communications In synchronous meetings, we rely on audio-visual information for gathering knowledge about the state of data, people, and task <ref> [81] </ref>. For instance, during the vote-taking phase of a meeting, all participants cast their votes to determine the status of a proposal. Casting of a vote by everyone is an incremental step toward the completion of the task and ensures progress.
Reference: [82] <author> Mark Roseman and Saul Greenberg. GroupKit: </author> <title> A groupware toolkit for building real-time conferencing applications. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [83] <author> James Rumbaugh, Micahel Blaha, William Premerlani, Frederick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Target Material: The target material in our pilot study was the object diagram for an Automatic Teller Machine (ATM) (See Appendix F). The problem description, data dictionary, associations, and object diagram for this problem were borrowed from the solution part of the Software Engineering textbook, "Object-Oriented Modeling and Design" <ref> [83] </ref>. We thoroughly examined the object for correctness. Subsequently, we seeded 10 faults in the object diagram and asked the participants to inspect the resulting object diagram.
Reference: [84] <author> Shiro Sakata. </author> <title> Development and evaluation of an In-house multimedia desktop coneference. </title> <journal> IEEE journal on selected areas in communcations, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: An example of a same-time, different-place meeting would be a teleconferencing system supporting audio and video, allowing the meeting to take place with members in 16 activities performed during the inspection meeting from different places at the same time. different locations <ref> [81, 84] </ref>. Conceptually, a different-time, different-place meeting would enable participants to work together at the time and place of their choosing. An example is the e-mail systems, but existing implementations of structured activities are scarce. <p> The response from the recipient may be sent back to the original sender, who is in charge of scheduling a meeting time for a group of people. 2.3 Multimedia Systems There are many applications for multimedia in collaborative applications <ref> [1, 41, 81, 84, 93] </ref>. Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93].
Reference: [85] <author> G. Michael Schneider, Johnny Martin, and Wei-Tek Tsai. </author> <title> An experimental study of fault detection in user requirements documents. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 1(2) </volume> <pages> 188-204, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The authors observe that independent inspection results do not tend to overlap and therefore more faults can be found if more than a single inspection team is used. Empirical evidence of the authors' observation is reported in a subsequent experimental 31 evaluation <ref> [85] </ref>. In the phased inspection method, reviewers examine the work in a series of small inspections (also called phases), each of which aims at verifying that the product satisfies some desirable properties [59].
Reference: [86] <author> Ben Schneiderman. </author> <title> User interface design for the Hyperties electronic encyclopedia. </title> <booktitle> In Proceedings of the ACM Hypertext '87 Conference, </booktitle> <pages> pages 189-194, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Link markers demarcate the points of departure from the current document. The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. There are several hypertext and hypermedia systems in existence <ref> [2, 20, 53, 86, 95] </ref>.
Reference: [87] <author> James Schnepf, Vahid Mashayekhi, John Riedl, and David Du. </author> <title> Closing the gap in distance learning: Computer supported, </title> <booktitle> participative, media-rich education. Educational Technology Review, </booktitle> <year> 1994. </year>
Reference-contexts: Once an order for the ideas is established, the group begin evaluating ideas by looking at the structure of the ideas, eliminating irrelevant categories or items, and filling in the missing items. 1.2.2 Distance Education Consider a distributed classroom, where the instructor and students are geographically dispersed across multiple sites <ref> [50, 74, 87] </ref>. The attendees, students and instructors, have desktop computers inter-connected via a network. All students see pictures of the instructor and other student speakers on their screens. <p> In the no floor control mode, the audio from several active speakers are merged and played simultaneously at a workstation. Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom <ref> [37, 45, 87] </ref>. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors [14]. 27 2.4 Group Decision Support Systems Project Nick studies the theory of meetings and defines the meeting types and classes [21].
Reference: [88] <author> Beatrice Schultz. </author> <title> Communicating in the Small Group: Theory and Practice. </title> <publisher> Harper and Row, </publisher> <year> 1989. </year>
Reference-contexts: We therefore include a "moderator role", with certain privileged operations. 5.2.2 Group Decision-Making Once a proposal is put forth by an inspection member, group members need to decide its status. We consider the following set of group decision-making methods for software inspection <ref> [88] </ref>: Unanimity means that all inspection participants must agree with one alternative and assumes that the agreed upon alternative achieves the optimal outcome for everyone. 88 Consensus is similar to the unanimity process, with the added element of compromise.
Reference: [89] <author> Mark Stefik, Gregg Foster, Daniel Bobrow, Kenneth Kahn, Stan Lanning, and Lucy Suchman. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [7, 21, 89] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports user interaction and sharing of information [38]. <p> These scenarios serve to 3 motivate the remainder of this thesis. 1.2.1 Outlining Consider a group of workers who are using an electronic meeting room for generating an outline for a presentation <ref> [52, 89] </ref>. Meeting aids include an electronic blackboard and interconnected workstations. The group recognizes three distinct phases in accomplishing their task: Brainstorming, organizing, and evaluating. The group starts off by brainstorming, where ideas, described using a catch-word or a catch-phrase, are entered into private windows on participants workstations. <p> Meeting-aids include an electronic blackboard, interconnected workstations, and recording apparatus. The Colab experimental meeting room developed at Xerox PARC is designed for facilitating interaction in small working groups <ref> [89] </ref>. The room is equipped with workstations linked together over a LAN, a large touch-sensitive screen, and a stand-up keyboard. Cognoter is a Colab tool used to prepare presentations collectively. It provides support for brainstorming, organizing, and evaluating.
Reference: [90] <author> Norbert Streitz, Jorg Geibler, Jorg Haake, </author> <title> and Jeroen Hol. DOLPHIN: Integrated meeting support across local and remote desktop environments and liveboards. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference, </booktitle> <pages> pages 345-358. </pages> <institution> Association for Computing Machinery, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [91] <author> John Tang and Monica Rua. </author> <title> Montage: Providing teleproximity for distributed groups. </title> <booktitle> In Proceedings of CHI'94, </booktitle> <pages> pages 37-43, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: However, we expect that, with suitable support, many day-to-day activities can be performed completely distributed and asynchronously. 18 1.6 Methodology The field of Computer-Supported Cooperative Work encompasses both general infrastructures for building collaborative applications <ref> [1, 28, 31, 53, 57, 63, 82, 90, 91] </ref>, and collaborative applications, fashioning an environment for group work [13, 16, 32, 46, 47, 61, 62, 66, 67, 75, 79]. This thesis focuses on developing collaborative applications that support asynchrony and distribution in software inspection.
Reference: [92] <author> Jane Morrill Tazelaar. </author> <title> In-depth groupware. </title> <journal> BYTE, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: A PREP document is divided into a number of columns, where a column may be linked to other columns, providing an unlimited amount of "virtual margins" for users to make comments. 2.2 Electronic Mail Systems A widely-used computer mechanism for supporting asynchronous and distributed collaboration is electronic mail (e-mail) <ref> [22, 48, 62, 92] </ref>. Email allow users to compose, edit, delete, browse, save, archive, and send messages to groups of users. Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. <p> namely Electronic Mail, Mosaic, Lotus Notes, and Suite, can be fruitfully explored for developing asynchronous inspectors and detail the implementation of our prototype called, Collaborative Asynchronous Inspection of Software (CAIS), in the Suite environment. 4.3.1 Electronic Mail Arguably, electronic mail (e-mail) has been the most successful groupware system ever introduced <ref> [92] </ref>. Traditional e-mail systems are characterized by passive, unidirectional exchange of electronic messages between a sender and one or more receivers. Multimedia e-mail systems augment this exchange by supporting non-textual data, such as images and audio, but the process has remained one-way and noninteractive [11, 12].
Reference: [93] <author> Douglas Terry and Daniel Swinehart. </author> <title> Managing stored voice in the Etherphone system. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1988. </year> <month> 133 </month>
Reference-contexts: The response from the recipient may be sent back to the original sender, who is in charge of scheduling a meeting time for a group of people. 2.3 Multimedia Systems There are many applications for multimedia in collaborative applications <ref> [1, 41, 81, 84, 93] </ref>. Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks [93]. <p> Multimedia message systems, such as Diamond [41], create, edit, transmit, print, and manage multimedia documents, demonstrating the feasibility of using multimedia messages instead of text-only messages. For instance, the Etherphone system supports locally distributed computing environments with multiple workstations and multiple networks <ref> [93] </ref>. In the Etherphone system, each workstation is associated with an Etherphone that digitizes, packetizes, and encrypts the user's voice and transmits it over the Ethernet. The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice.
Reference: [94] <author> Walter Tichy. </author> <title> RCS A system for version control. </title> <journal> Software Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: An example of the checkin/checkout model is the UNIX Revision Control System (RCS) <ref> [94] </ref>. RCS provides utility programs designed to manage multiple revisions of source files, automate the storing, retrieval, logging, identification, and merging of versions, and maintain a history of previous versions.
Reference: [95] <author> Randall Trigg, Lucy Suchman, and Frank Halaz. </author> <title> Supporting collaboration in NoteCards. </title> <booktitle> In Proceedings of the ACM Computer Supported Cooperative Work Conference. Association for Computing Machinery, </booktitle> <year> 1986. </year>
Reference-contexts: Link markers demarcate the points of departure from the current document. The information nodes in hypermedia systems may be of any type, including text, audio, graphics, and video. There are several hypertext and hypermedia systems in existence <ref> [2, 20, 53, 86, 95] </ref>. <p> The participants in the design 29 process argue about these issues by suggesting positions and presenting argument in support of their positions. NoteCard supports multiple users in adding annotations and links to nodes of information <ref> [95] </ref>. Each node is a single notecard that can be opened as a window on the screen. The cards may contain different types of information, such as plain text or graphics.
Reference: [96] <author> Robert A. Virzi. </author> <title> Refining the test phase of usability evaluation: How many subjects is enough. </title> <booktitle> Human Factors, </booktitle> <volume> 34(4) </volume> <pages> 457-468, </pages> <year> 1992. </year>
Reference-contexts: A sample size of 4 was chosen as recent research has shown that 80% of a system's usability problems can be ascertained with 4 or 5 test users <ref> [96] </ref>. Three participants were Ph.D. candidates, and the other M.S. Their industrial experience ranged from one and a half years to eleven years, with the same wide distribution in software inspection practice. Two of the students had participated in computer-supported inspections prior to this pilot study.
Reference: [97] <author> Larry Wall and Randall L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1992. </year>
Reference: [98] <author> Robert Yin. </author> <title> Case Study Research: Design and Methods. </title> <publisher> Sage Publications, </publisher> <address> Newbury Park, CA, </address> <year> 1989. </year>
Reference-contexts: have discovered that the use of these filters can reduce the traffic from O (n 2 ) to O (n) [81]. 3.4 Pilot Study To assess the effectiveness of inspection in our distributed collaborative environment and compare it with face-to-face meeting, we used a case study approach with replication logic <ref> [98] </ref>. The case study is repeated by different groups and we look for the same phenomena to occur in multiple cases to confirm our observations.
Reference: [99] <author> Edward Yourdon. </author> <title> Structured Walkthrough. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Yourdon and Humphrey both developed widely used techniques for inspection <ref> [51, 99] </ref>. In both approaches, team members have specific roles: Reviewer, moderator, producer, and recorder. Participants individually prepare for the inspection, attend the inspection meeting, and find faults that result in action items. The preparation stage differs in the two techniques.
References-found: 99

