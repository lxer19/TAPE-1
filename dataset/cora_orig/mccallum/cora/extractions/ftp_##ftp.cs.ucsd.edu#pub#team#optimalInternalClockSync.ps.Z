URL: ftp://ftp.cs.ucsd.edu/pub/team/optimalInternalClockSync.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Email: e-mail: fcfetzer, flaviug@cs.ucsd.edu  
Title: An Optimal Internal Clock Synchronization Algorithm  
Author: Christof Fetzer and Flaviu Cristian 
Date: December 6, 1995  
Web: http://www-cse.ucsd.edu/users/fcfetzer,flaviug CS95-410  
Address: La Jolla, CA 920930114  
Affiliation: Department of Computer Science Engineering University of California, San Diego  
Abstract: We propose an optimal convergence function for achieving fault-tolerant, internal clock synchronization in the presence of arbitrary process and clock failures. The differential fault-tolerant midpoint convergence function guarantees an optimal maximum correction, an optimal maximum drift rate, and an optimal maximum deviation. The proposed convergence function is simple and easy to compute. It bounds the maximum drift rate of correct clocks by the maximum drift rate of a correct hardware clock. The maximum correction is limited by the maximum drift between two correct hardware clocks during one round. The maximum deviation is approximately 4fl + 4r max , where fl is the maximum remote clock reading error, is the maximum drift rate of a correct hardware clock and r max is the maximum duration of a synchronization round. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant internal clock synchronization. </title> <booktitle> In Proceedings of the Thirteenth Symposium on Reliable Distributed Systems, Dana Point, </booktitle> <address> Ca., </address> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Therefore, the extended interval has always a length of 2fl and the midpoint of this interval guarantees the nested adjustment condition (see <ref> [1] </ref> for more details). We use this idea to define an extended midpoint function emid.
Reference: [2] <author> D. Dolev, J. Y. Halpern, and R. </author> <title> Strong. On the possibility and impossibility of achieving clock synchronization. </title> <journal> Journal of Computer and System Science, </journal> <volume> 32(2) </volume> <pages> 230-250, </pages> <year> 1986. </year>
Reference-contexts: The total number of processes participating in the clock synchronization must be at least 2 3F +1 <ref> [2] </ref>, where F denotes the maximum number of processes that can be faulty. For simplicity, we assume that no failed process recovers. We assume that processes and clocks fail in arbitrary ways.
Reference: [3] <author> C. Fetzer and F. Cristian. </author> <title> Optimal convergence function based clock synchronization. </title> <booktitle> In Proceedings of Fourtheenth ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Ottawa, CA, </address> <month> Aug </month> <year> 1995. </year>
Reference-contexts: The optimal maximum correction is 2r max <ref> [3] </ref>. Thus, the FTM does not provide optimal maximum correction. Let us now show why the maximum deviation provided by the fault-tolerant midpoint convergence function is not optimal. <p> Thus, the maximum deviation between correct clocks is at least 4:5fl + 4r max . The tight lower bound for the maximum deviation between clocks is ffi opt = 4fl + 4r max <ref> [3] </ref>. <p> In <ref> [3] </ref> the following lower bounds for convergence function based clock synchronization are derived, where ffi opt denotes the optimal maximum deviation and K opt the optimal maximum correction: ffi opt 4fl + 4r max (1) K opt 2r max (2) By definition of the function dmp, a clock is at most <p> Because is very small and fi is in general bounded by ffi (1 + ), <ref> [3] </ref> neglects summands of the form 2fi. We derive in the Appendix that the deviation of correct clocks synchronized by the DFTM is bounded by 4fl + 4r max + 2fi. Hence the maximum deviation is optimal, because we neglect summands of the form 2fi.
Reference: [4] <author> J. Lundelius-Welch and N. Lynch. </author> <title> A new fault-tolerant algorithm for clock synchronization. </title> <journal> Information and Computation, </journal> <volume> 77(1) </volume> <pages> 1-36, </pages> <year> 1988. </year>
Reference-contexts: We propose a differential fault-tolerant midpoint convergence function which provides an optimal maximum correction, an optimal maximum drift rate, and an optimal maximum deviation between clocks. The differential fault-tolerant midpoint convergence function is based on the fault-tolerant midpoint function proposed in <ref> [4] </ref>, and improves upon it, since the fault-tolerant midpoint function, as proposed in [4], does not provide an optimal maximum correction, an optimal maximum drift, or an optimal maximum deviation. 2 System Model We consider a distributed system consisting of nodes hosting time server processes. <p> The differential fault-tolerant midpoint convergence function is based on the fault-tolerant midpoint function proposed in <ref> [4] </ref>, and improves upon it, since the fault-tolerant midpoint function, as proposed in [4], does not provide an optimal maximum correction, an optimal maximum drift, or an optimal maximum deviation. 2 System Model We consider a distributed system consisting of nodes hosting time server processes. Each such process has access to the local hardware clock of its node. <p> This convergence function improves the fault-tolerant mid point function proposed in <ref> [4] </ref> by providing optimal maximum correction, optimal maximum drift rate, and optimal maximum deviation. 5.1 Definitions Let CT refer to the set of clock values. A clock reading returns a clock value for each process, thus, it is a mapping with signature P ! CT . <p> Thus, the signature of a convergence function cf n is: cf n : (P fi CR) ! CT : 5.2 Fault-Tolerant Midpoint Function Because the proposed convergence function is based on the fault-tolerant midpoint convergence function (FTM) described in <ref> [4] </ref>, we first recall the basic ideas of FTM and also give examples illustrating that FTM is not optimal.
Reference: [5] <author> D. L. Mills. </author> <title> Internet time synchronization: the network time protocol. </title> <journal> IEEE Trans. Communications, </journal> <volume> 39(10) </volume> <pages> 1482-1493, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: The proposed convergence function is also useful for synchronization algorithms based on statistical remote clock reading <ref> [5] </ref>. Since such statistical reading methods do not provide any a priori or computed upper bound on the error made when reading a remote clock, the synchronized clocks can be repeatedly adjusted forth and back with large corrections, because of excessive clock reading errors.
Reference: [6] <author> F. Schneider. </author> <title> Understanding protocols for Byzan-tine clock synchronization. </title> <type> Technical Report 87-859, </type> <institution> Dept of Computer Science, Cornell University, </institution> <month> Aug </month> <year> 1987. </year>
Reference-contexts: Most synchronization algorithms can be described as instances of a single abstract, generic clock synchronization algorithm by using the notion of a convergence function introduced in <ref> [6] </ref>. This generic algorithm can be succintly described as follows: at the end of each synchronization round each process reads the clocks of all processes and then adjusts its clock value for the next round by applying a convergence function to the clock readings of the current round. <p> + A k We denote T k+1 p the end of round k with respect to round clock C k p : T k+1 p (t k+1 4.3 Assumptions To prove that a convergence function based internal clock synchronization algorithm is correct one has to make the following standard assumptions <ref> [6] </ref> in addition to those described in our system model section. 4.3.1 Initialization At the start of the first round, all correct clocks must be within ffi S of each other.

References-found: 6

