URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1997/85166-CS.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1997-en.html
Root-URL: http://cs.uni-bonn.de
Email: e-mail: richter@cs.uni-bonn.de  
Title: A New Measure of the Distance between Ordered Trees and its Applications  
Author: Thorsten Richter 
Date: May 31, 1997  
Address: Roemerstr. 164, 53117 Bonn, Germany  
Affiliation: Department of Computer Science IV, University of Bonn  
Abstract: The problem of computing the distance between two trees T 1 and T 2 ([14], [18]), also known as tree editing problem, is a generalization of the problem of computing the distance between two strings ([8], [9], [16]) to labeled ordered trees. One view of the distance between two trees T 1 and T 2 is that of a mapping. A mapping M from T 1 to T 2 is a partial one-to-one map from the nodes of T 1 to the nodes of T 2 that preserves the ancestor relations and the left-to-right ordering of the nodes. In [18] an algorithm is given that computes the distance between two ordered trees T 1 and T 2 in time O(jT 1 j jT 2 j min(depth(T 1 ); leaves(T 1 )) min(depth(T 2 ); leaves(T 2 ))) and in space O(jT 1 j jT 2 j). In this paper we define a new measure of the distance between two ordered trees T 1 and T 2 that is based on a restricted kind of mapping which we call structure respecting. In a structure respecting mapping M from T 1 to T 2 for all (v 1 ; w 1 ), (v 2 ; w 2 ), (v 3 ; w 3 ) 2 M the additional condition lca(v 1 ; v 2 ) = lca(v 1 ; v 3 ) () lca(w 1 ; w 2 ) = lca(w 1 ; w 3 ) holds, so that a structure respecting mapping preserves more of the structure of the trees involved than a general mapping. We then present a simple dynamic programming algorithm that computes a minimum cost structure respecting mapping between two ordered trees T 1 and T 2 in time O(degree(T 1 )degree(T 2 )jT 1 jjT 2 j) and in space O(degree(T 1 )depth(T 1 )jT 2 j). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. S. Boyer and J. S. Moore, </author> <title> A Fast String Matching Algorithm, </title> <booktitle> CACM 20 (1977), </booktitle> <pages> pp. 262 - 272. </pages>
Reference-contexts: In the following, some algorithms have been developed that improve the quadratic time bound of Sellers' algorithm (see [3] for a survey and further references). Note that these global approximate string matching problems can also be considered as generalizations of the classic string matching problem (see <ref> [1] </ref> and [6] for the classic 35 algorithms). In the second variant of Sellers, which we call local approximate string matching, one looks for the substrings of S whose distance to the pattern string is minimum among their sub- and superstrings. Formally, this local resemblance is defined as follows.
Reference: [2] <author> M. Dubiner, Z. Galil and E. Magen, </author> <title> Faster Tree Pattern Matching, </title> <booktitle> Proc. 31st FOCS (1990), </booktitle> <pages> pp. 145 - 150. </pages>
Reference-contexts: Finally, note that the removing distance as well as the pruning distance corresponds to the global resemblance of substrings. Hence they can also be seen as generalizations of tree pattern matching (see [4], [5] and <ref> [2] </ref>). 7.3 The Structure Respecting Removing Distance In this subsection we apply the structure respecting distance between two ordered trees to approximate tree matching, where we restrict ourselves to the removing distance. Formally we can define this problem as follows.
Reference: [3] <author> Z. Galil and R. Giancarlo, </author> <title> Data Structures and Algorithms for Approximate String Matching, </title> <editor> J. </editor> <booktitle> Complexity 4 (1988), </booktitle> <pages> pp. 33 - 72. 42 </pages>
Reference-contexts: The essential difference between this algorithm and the standard dynamic programming algorithm for the string editing problem is that the former allows the removal of a prefix of the target string without any cost. A version of this problem is the k differences problem (see [15], <ref> [3] </ref>, [7], for example). Here one asks whether there is a substring of the target string whose distance to the pattern string is at most k. <p> Clearly one can solve this problem with Sellers' algorithm, because this algorithm computes the distance between the pattern string and every sub-string of the target string. In the following, some algorithms have been developed that improve the quadratic time bound of Sellers' algorithm (see <ref> [3] </ref> for a survey and further references). Note that these global approximate string matching problems can also be considered as generalizations of the classic string matching problem (see [1] and [6] for the classic 35 algorithms).
Reference: [4] <author> C. M. Hoffmann and M. J. O'Donnell, </author> <title> Pattern Matching in Trees, </title> <booktitle> JACM 29 (1982), </booktitle> <pages> pp. 68 - 95. </pages>
Reference-contexts: Finally, note that the removing distance as well as the pruning distance corresponds to the global resemblance of substrings. Hence they can also be seen as generalizations of tree pattern matching (see <ref> [4] </ref>, [5] and [2]). 7.3 The Structure Respecting Removing Distance In this subsection we apply the structure respecting distance between two ordered trees to approximate tree matching, where we restrict ourselves to the removing distance. Formally we can define this problem as follows.
Reference: [5] <author> S. R. Kosaraju, </author> <title> Efficient Tree Pattern Matching, </title> <booktitle> Proc. 30th FOCS (1989), </booktitle> <pages> pp. 178 - 183. </pages>
Reference-contexts: Finally, note that the removing distance as well as the pruning distance corresponds to the global resemblance of substrings. Hence they can also be seen as generalizations of tree pattern matching (see [4], <ref> [5] </ref> and [2]). 7.3 The Structure Respecting Removing Distance In this subsection we apply the structure respecting distance between two ordered trees to approximate tree matching, where we restrict ourselves to the removing distance. Formally we can define this problem as follows.
Reference: [6] <author> D. E. Knuth, J. H. Morris and V. R. Pratt, </author> <title> Fast Pattern Matching in Strings, </title> <journal> SIAM J. Comput. </journal> <volume> 6 (1977), </volume> <pages> pp. 323 - 350. </pages>
Reference-contexts: In the following, some algorithms have been developed that improve the quadratic time bound of Sellers' algorithm (see [3] for a survey and further references). Note that these global approximate string matching problems can also be considered as generalizations of the classic string matching problem (see [1] and <ref> [6] </ref> for the classic 35 algorithms). In the second variant of Sellers, which we call local approximate string matching, one looks for the substrings of S whose distance to the pattern string is minimum among their sub- and superstrings. Formally, this local resemblance is defined as follows.
Reference: [7] <author> G. M. Landau and U. Vishkin, </author> <title> Fast Parallel and Serial Approximate String Matching, </title> <editor> J. </editor> <booktitle> Algorithms 10 (1989), </booktitle> <pages> pp. 157 - 169. </pages>
Reference-contexts: The essential difference between this algorithm and the standard dynamic programming algorithm for the string editing problem is that the former allows the removal of a prefix of the target string without any cost. A version of this problem is the k differences problem (see [15], [3], <ref> [7] </ref>, for example). Here one asks whether there is a substring of the target string whose distance to the pattern string is at most k.
Reference: [8] <author> V. I. Levenshtein, </author> <title> Binary Codes Capable of Correcting Deletions, </title> <journal> Insertions and Reversals, Soviet Phys. Dokl. </journal> <volume> 6 (1966), </volume> <pages> pp. 707 - 710. </pages>
Reference-contexts: In this problem a pattern string P and a target string S are given. Then one looks for the substrings of S which most resemble P , where resemblance is defined in terms of string distance (see <ref> [8] </ref>, [9] and [16]). Sellers defines two variants of this problem that differ in the exact definition of resemblance. In the first variant, which we call global approximate string matching, one looks for the substrings of S whose distance to the pattern string is minimum among all substrings.
Reference: [9] <author> P. H. Sellers, </author> <title> On the Theory and Computation of Evolutionary Distances, </title> <journal> SIAM J. Appl. Math. </journal> <volume> 26 (1974), </volume> <pages> pp. 787 - 793. </pages>
Reference-contexts: 1 Introduction and Motivation The problem of computing the distance between two trees T 1 and T 2 ([14], [18]), also known as tree editing problem, is a generalization of the problem of computing the distance between two strings ([8], <ref> [9] </ref>, [16]) to labeled trees. The trees under consideration in the tree editing problem are ordered, i. e. the left-to right order of the children of a node is significant. Without this assumption, i. e. if considering unordered trees, the tree editing problem becomes N P-complete [19]. <p> In this problem a pattern string P and a target string S are given. Then one looks for the substrings of S which most resemble P , where resemblance is defined in terms of string distance (see [8], <ref> [9] </ref> and [16]). Sellers defines two variants of this problem that differ in the exact definition of resemblance. In the first variant, which we call global approximate string matching, one looks for the substrings of S whose distance to the pattern string is minimum among all substrings.
Reference: [10] <author> P. H. Sellers, </author> <title> The Theory and Computation of Evolutionary Distances: Pattern Recognition, </title> <editor> J. </editor> <booktitle> Algorithms 1 (1980), </booktitle> <pages> pp. 359 - 373. </pages>
Reference-contexts: In the the following we first review approximate string and tree matching. Then we show how the concecpts used in these problems can be transformed to the structure respecting distance between ordered trees. 7.1 Approximate String Matching Approximate string matching was first introduced by Sellers <ref> [10] </ref>. In this problem a pattern string P and a target string S are given. Then one looks for the substrings of S which most resemble P , where resemblance is defined in terms of string distance (see [8], [9] and [16]). <p> string most resembles the pattern string P globally, if ffi S (P; S [i 1 : : : i 2 ]) ffi S (P; S [j 1 : : : j 2 ]) for all 1 j 1 j 2 jSj, where ffi S denotes the string distance. 2 In <ref> [10] </ref> an algorithm is given that solves this problem in time O (jP j jT j). The essential difference between this algorithm and the standard dynamic programming algorithm for the string editing problem is that the former allows the removal of a prefix of the target string without any cost. <p> if ffi S (P; S [i 1 : : : i 2 ]) ffi S (P; S [h 1 : : : h 2 ]) ffi S (P; S [i 1 : : : i 2 ]) ffi S (P; S [j 1 : : : j 2 ]) In <ref> [10] </ref> an algorithm is given that solves this problem in time O (jP j jT j), too.
Reference: [11] <author> B. A. Shapiro, </author> <title> An Algorithm for comparing Multiple RNA Secondary Structures, </title> <journal> Com-put. Appl. Biosci. </journal> <volume> 4 (1988), </volume> <pages> pp. </pages> <address> 387 -393. </address>
Reference-contexts: An application of the tree editing problem is the comparison of RNA secondary structures (see <ref> [11] </ref>, [12]). Here an RNA secondary structure is modelled as an ordered tree, such that one can use an algorithm for the tree editing problem to compare two of these structures. Another application of ordered labeled trees occurs in syntax theory.
Reference: [12] <author> B. A. Shapiro and K. Zhang, </author> <title> Comparing Multiple RNA Secondary Structures Using Tree Comparisons, </title> <journal> Comput. Appl. Biosci. </journal> <volume> 6 (1990), </volume> <pages> pp. 309 - 318. </pages>
Reference-contexts: An application of the tree editing problem is the comparison of RNA secondary structures (see [11], <ref> [12] </ref>). Here an RNA secondary structure is modelled as an ordered tree, such that one can use an algorithm for the tree editing problem to compare two of these structures. Another application of ordered labeled trees occurs in syntax theory.
Reference: [13] <author> K.-C. Tai, </author> <title> Syntactic Error Correction in Programming Languages, </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Th., Dept. Comptr. Sci., Cornell U., </institution> <address> Ithaca, N.Y., </address> <year> 1977. </year>
Reference-contexts: Another application of ordered labeled trees occurs in syntax theory. To compare two sentential forms of a (context-free) grammar, one can compute the distance between their parse trees. In <ref> [13] </ref> this was applied to the problem of syntactic error recovery and correction for programming languages, for example. Similar techniques could be applied in the analysis of natural language. One can describe the syntactic structure of a natural language sentence in terms of its parse tree (see [17]).
Reference: [14] <author> K.-C. Tai, </author> <title> The Tree-to-Tree Correction Problem, </title> <booktitle> JACM 26 (1979), </booktitle> <pages> pp. 422 - 433. </pages>
Reference-contexts: have defined the general distance between two trees as well in terms of mappings: ffi (T; T 0 ) = minffl (M ) j M is a mapping from T to T 0 g: The first algorithm for computing the general distance between two trees was given by Tai in <ref> [14] </ref>. It considers the nodes of both tree in preorder and has a running time of O (jT j jT 0 j depth (T ) 2 depth (T 0 ) 2 ): 7 This complexity was improved by Zhang and Shasha in [18].
Reference: [15] <author> E. Ukkonen, </author> <title> Finding Approximate Pattern in Strings, </title> <editor> J. </editor> <booktitle> Algorithms 6 (1985), </booktitle> <pages> pp. 132 - 137. </pages>
Reference-contexts: The essential difference between this algorithm and the standard dynamic programming algorithm for the string editing problem is that the former allows the removal of a prefix of the target string without any cost. A version of this problem is the k differences problem (see <ref> [15] </ref>, [3], [7], for example). Here one asks whether there is a substring of the target string whose distance to the pattern string is at most k.
Reference: [16] <author> R. A. Wagner and M. J. Fischer, </author> <title> The String-to-String Correction Problem, </title> <booktitle> JACM 21 (1974), </booktitle> <pages> pp. 168 - 173. </pages>
Reference-contexts: 1 Introduction and Motivation The problem of computing the distance between two trees T 1 and T 2 ([14], [18]), also known as tree editing problem, is a generalization of the problem of computing the distance between two strings ([8], [9], <ref> [16] </ref>) to labeled trees. The trees under consideration in the tree editing problem are ordered, i. e. the left-to right order of the children of a node is significant. Without this assumption, i. e. if considering unordered trees, the tree editing problem becomes N P-complete [19]. <p> In this problem a pattern string P and a target string S are given. Then one looks for the substrings of S which most resemble P , where resemblance is defined in terms of string distance (see [8], [9] and <ref> [16] </ref>). Sellers defines two variants of this problem that differ in the exact definition of resemblance. In the first variant, which we call global approximate string matching, one looks for the substrings of S whose distance to the pattern string is minimum among all substrings.
Reference: [17] <author> T. Winograd, </author> <title> Language as a Cognitive Process, Vol. 1: Syntax, Chapter 3, </title> <address> Addison-Weslwy, Reading, MA, </address> <year> 1983, </year> <pages> pp. 72 - 132. </pages>
Reference-contexts: In [13] this was applied to the problem of syntactic error recovery and correction for programming languages, for example. Similar techniques could be applied in the analysis of natural language. One can describe the syntactic structure of a natural language sentence in terms of its parse tree (see <ref> [17] </ref>). Then one can compare a new sentence with other sentences stored in a database by computing the distance between their parse trees, for example.
Reference: [18] <author> K. Zhang and D. Shasha, </author> <title> Simple Fast Algorithms for the Editing Distance between Trees and Related Problems, </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1989), </volume> <pages> pp. 1245 - 1262. </pages>
Reference-contexts: 1 Introduction and Motivation The problem of computing the distance between two trees T 1 and T 2 ([14], <ref> [18] </ref>), also known as tree editing problem, is a generalization of the problem of computing the distance between two strings ([8], [9], [16]) to labeled trees. <p> The cost of a mapping with minimum cost is equal to the cost of an edit sequence with minimum cost, so that both views of the distance between two trees are equivalent. In <ref> [18] </ref> an algorithm is given that computes the distance between two ordered trees T 1 and T 2 in time O (jT 1 j jT 2 j min (depth (T 1 ); leaves (T 1 )) min (depth (T 2 ); leaves (T 2 ))) and in space O (jT 1 <p> It considers the nodes of both tree in preorder and has a running time of O (jT j jT 0 j depth (T ) 2 depth (T 0 ) 2 ): 7 This complexity was improved by Zhang and Shasha in <ref> [18] </ref>. The basic idea of their algorithm is to consider the nodes of the trees in (left-to-right) postorder. This is as follows. <p> This is done by Zhang and Shasha in <ref> [18] </ref> as follows. The removal of a prefix of a string is generalized by the removal of a collection of subtrees. <p> By minimizing over all w 2 T one gets the distance between the pattern tree and that subtree of the target tree, that most resembles the pattern tree. In <ref> [18] </ref> Zhang and Shasha present algorithms for computing the removing distance and the pruning distance, respectively, that are based on their algorithm for the general distance between trees, and that also have a running time of O (jP j jT j min (depth (P ); leaves (P )) min (depth (T
Reference: [19] <author> K. Zhang, R. Statman and D. Shasha, </author> <title> On the editing distance between unordered labeled trees, </title> <journal> IPL 42 (1992), pp. </journal> <volume> 133 - 139. </volume> <pages> 43 </pages>
Reference-contexts: The trees under consideration in the tree editing problem are ordered, i. e. the left-to right order of the children of a node is significant. Without this assumption, i. e. if considering unordered trees, the tree editing problem becomes N P-complete <ref> [19] </ref>. The edit operations available in the tree editing problem are changing, deleting and inserting a node. To these operations costs are assigned that depend on the labels of the fl This work was supported by the DFG under grant Bl 320/2 - 1 1 nodes involved.
References-found: 19

