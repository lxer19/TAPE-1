URL: http://pertsserver.cs.uiuc.edu/papers/TiLi94a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Assigning Real-Time Tasks and Resources to Distributed Systems  
Author: Too-Seng Tia Jane W.-S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Note: To appear in a 1995 special issue of the International Journal of Mini and Microcomputers  
Abstract: In this paper, we study the problem of simultaneously assigning real-time tasks and resources to a distributed system, taking into account the execution, communication and resource-contention costs. We assume that multiprocessor priority-ceiling protocol is used to synchronize the access to shared resources, and each processor schedule the tasks assigned to it using the rate-monotonic scheduling algorithm. The assignment is subject to the constraint that the tasks are schedulable after the assignment. This problem is known to be computationally intractable. We formulate the problem using an assignment graph and describe an efficient heuristic algorithm, which is based on clustering and graph-bisection, to find an assignment. Experimental results indicate that the assignment algorithm is effective. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider, </author> <title> "Enhanced Aperiodic Scheduling in Hard-Real-Time Environments," </title> <booktitle> in Proc. of the Real-Time System Symposium, </booktitle> <pages> pp. 261-270, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: The processing of aperiodic tasks can be integrated into a periodic environment by introducing one or more periodic tasks, called servers, to execute the aperiodic tasks <ref> [1, 2] </ref>. Therefore, there is no need to deal with aperiodic tasks differently from periodic tasks. For this reason, we consider here only the assignment of the periodic tasks and the periodic servers used to service the aperiodic tasks.
Reference: [2] <author> B. Sprunt, L. Sha, and J. P. Lehoczky, </author> <title> "Aperiodic Task Scheduling for Hard Real-Time Systems," </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 27-60, </pages> <year> 1989. </year>
Reference-contexts: The processing of aperiodic tasks can be integrated into a periodic environment by introducing one or more periodic tasks, called servers, to execute the aperiodic tasks <ref> [1, 2] </ref>. Therefore, there is no need to deal with aperiodic tasks differently from periodic tasks. For this reason, we consider here only the assignment of the periodic tasks and the periodic servers used to service the aperiodic tasks.
Reference: [3] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment," </title> <journal> in J. Assoc. Comput. Mach., </journal> <volume> vol. 20(1), </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference-contexts: For this reason, we consider here only the assignment of the periodic tasks and the periodic servers used to service the aperiodic tasks. One of the most well-known and widely-used algorithm for scheduling real-time tasks on uniprocessor systems is the rate-monotonic (RM) algorithm <ref> [3, 4, 5] </ref>. This algorithm is a static priority-driven algorithm that assigns higher priorities to tasks with shorter periods. The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. <p> The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. Besides its low overhead, the RM algorithm is attractive because there exist necessary and sufficient conditions <ref> [3, 4, 5] </ref> which can be used to determine the schedulability of a task system executing on a processor. Unfortunately, the RM algorithm, like many priority-driven algorithms, is known to have poor worst-case performance when used to schedule tasks on a multiprocessor or distributed system [6]. <p> Since it is time-consuming to perform an exact necessary and sufficient schedulability test for each assignment, we use the sufficient schedulability condition derived by Liu and Layland <ref> [3] </ref>, which is much easier and faster to compute. The more exact schedu-lability test will be used in the next phase to improve the assignment if necessary. <p> Hence after phase 2, it may be possible to move some tasks/resources from one processor to another so as to improve the assignment. 2. For practical reason, we use the sufficient schedu-lability condition derived by Liu and Layland <ref> [3] </ref> in phase 2. However, this sufficient condition does not take blocking times into consideration, although blocking times are implicitly taken into account by the way edge weights are assigned. A better assignment may be obtained if a more exact schedulability test is used.
Reference: [4] <author> J. Lehoczhy, L. Sha, and Y. Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm Exact Characterization and Average Case Behavior," </title> <booktitle> in Proc. of the Real-Time System Symposium, </booktitle> <pages> pp. 166-171, </pages> <year> 1989. </year>
Reference-contexts: For this reason, we consider here only the assignment of the periodic tasks and the periodic servers used to service the aperiodic tasks. One of the most well-known and widely-used algorithm for scheduling real-time tasks on uniprocessor systems is the rate-monotonic (RM) algorithm <ref> [3, 4, 5] </ref>. This algorithm is a static priority-driven algorithm that assigns higher priorities to tasks with shorter periods. The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. <p> The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. Besides its low overhead, the RM algorithm is attractive because there exist necessary and sufficient conditions <ref> [3, 4, 5] </ref> which can be used to determine the schedulability of a task system executing on a processor. Unfortunately, the RM algorithm, like many priority-driven algorithms, is known to have poor worst-case performance when used to schedule tasks on a multiprocessor or distributed system [6].
Reference: [5] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky, </author> <title> "Priority Inheritance Protocols: An Approach to Real-Time Synchronization," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 39(9), </volume> <pages> pp. 1175-1185, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: For this reason, we consider here only the assignment of the periodic tasks and the periodic servers used to service the aperiodic tasks. One of the most well-known and widely-used algorithm for scheduling real-time tasks on uniprocessor systems is the rate-monotonic (RM) algorithm <ref> [3, 4, 5] </ref>. This algorithm is a static priority-driven algorithm that assigns higher priorities to tasks with shorter periods. The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. <p> The RM algorithm is optimal among static priority-driven algorithms whenever the relative deadlines of tasks are equal or proportional to their periods. Besides its low overhead, the RM algorithm is attractive because there exist necessary and sufficient conditions <ref> [3, 4, 5] </ref> which can be used to determine the schedulability of a task system executing on a processor. Unfortunately, the RM algorithm, like many priority-driven algorithms, is known to have poor worst-case performance when used to schedule tasks on a multiprocessor or distributed system [6].
Reference: [6] <author> S. K. Dhall and C. L. Liu, </author> <title> "On a Real-Time Scheduling Problem," </title> <journal> in Operations Research, </journal> <volume> vol. 26(1), </volume> <pages> pp. 127-140, </pages> <month> Feb. </month> <year> 1978. </year>
Reference-contexts: Unfortunately, the RM algorithm, like many priority-driven algorithms, is known to have poor worst-case performance when used to schedule tasks on a multiprocessor or distributed system <ref> [6] </ref>. In a uniprocessor system, the schedulability bound for the RM algorithm is ln2 ( 69%); this means that the 1 processor can be safely utilized up to at least 69% without causing any task to miss its deadline. <p> In contrast, if tasks are dynamically assigned to processors and scheduled on the RM basis, in a multiprocessor or distributed system containing m identical processors, a task can miss its deadline even when only 1=(m 1) of the available processors' cycles are utilized <ref> [6] </ref>. This discouraging performance has motivated the solution where tasks are statically bound to processors and are migrated among processors only during mode changes and reconfigurations. Tasks on each processor are scheduled locally using the RM algorithm. This is the approach taken in this paper. <p> Since finding an optimal assignment is usually impractical, most researchers have adopted heuristic approaches, which find satisfactory suboptimal task assignments in a reasonable amount of time. Dhall and Liu <ref> [6] </ref> considered the problem of assigning a set of independent periodic tasks to a minimal number of processors. They proposed two heuristic algorithms, called the Rate-Monotonic-First-Fit (RMFF) and Rate-Monotonic-Next-Fit (RMNF) algorithms.
Reference: [7] <author> R. Rajkumar, L. Sha, and J. Lehoczhy, </author> <title> "Real-Time Synchronization Protocols for Multiprocessors," </title> <booktitle> in Proc. of the Real-Time System Symposium, </booktitle> <pages> pp. 259-272, </pages> <year> 1988. </year>
Reference-contexts: The maximum possible duration of priority inversion for a task is called its blocking time. We assume that the multiprocessor priority-ceiling protocol (MPCP) <ref> [7] </ref> is used so that the blocking time of every task is bounded. The schedulability conditions for the RM algorithm have also been extended to include MPCP. Besides resource requirements, a task may also have communication requirements. Cooperating tasks may need to communicate among themselves to accomplish a common goal. <p> A better assignment may be obtained if a more exact schedulability test is used. Since phase 3 mainly performs minor perturbation to the resulting assignment from phase 2, we can afford to conduct the more exact, albeit time-consuming, schedulability test proposed by Rajkumar, Sha and Lehoczhy <ref> [7] </ref> for RM + MPCP algorithm to determine whether the tasks are schedulable.
Reference: [8] <author> B. W. Kernighan and S. Lin, </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs," </title> <journal> in Bell Systems Technical Journal, </journal> <volume> vol. 49(2), </volume> <pages> pp. 291-307, </pages> <year> 1970. </year>
Reference-contexts: The assignment algorithm consists of three phases. Phase 1 finds clusters of tasks and resources that should be assigned to the same processor. Phase 2 recursively bipartition the cluster to produce the actual assignment. In each bipartitioning step, an efficient, modified Kernighan-Lin <ref> [8] </ref> graph-bisection algorithm is used. The objective of the algorithm is to minimize the cost of the edge weights, which model the blocking and communication costs, across the partitions while ensuring that the tasks in each partition remain schedulable. <p> This remains true even for the case where p = 2. Our proposed assignment algorithm makes use of an efficient graph bipar-titioning heuristic to find the p-way cut. This heuristic is based on the Fiduccia-Mattheyses [20] variant of the graph bipartitioning heuristic by Kernighan and Lin <ref> [8] </ref>. The main advantages of this heuristic are that it is robust, can deal with arbitrary vertex and edge weights and can easily accommodate additional constraints on each partition. This heuristic has been applied successfully in many applications in practice; in particular, in the physical design process of VLSI.
Reference: [9] <author> J. W. S. Liu, J. L. R. Redondo, Z. Deng, T. S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. K. Shih, "PERTS: </author> <title> A Prototyping Environment for Real-Time Systems," </title> <booktitle> in Proceedings of the Real-Time System Symposium, </booktitle> <pages> pp. 184-188, </pages> <year> 1993. </year>
Reference-contexts: Phase 3 iteratively improves upon the partition obtained in phase 2 by re-assigning some of the tasks and resources, if necessary. The algorithm has been implemented as part of PERTS (a Prototyping Environment for Real-Time Systems) <ref> [9] </ref>. The rest of this paper is organized as follows. Following this introduction, Section 2 gives a brief overview of related work. In Section 3, we present the problem formulation and our task and resource model. Details of the proposed assignment algorithm are presented in Section 4.
Reference: [10] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> New York: </address> <publisher> W. H. Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: These formulations represent the different types of real-time systems and the different requirements of the systems. Except for the most trivial cases, the underlying problems of finding an optimal assignment of tasks to the processors is known to be NP-hard in the strong sense <ref> [10] </ref>. Since finding an optimal assignment is usually impractical, most researchers have adopted heuristic approaches, which find satisfactory suboptimal task assignments in a reasonable amount of time. Dhall and Liu [6] considered the problem of assigning a set of independent periodic tasks to a minimal number of processors.
Reference: [11] <author> S. Davari and S. Dhall, </author> <title> "On a Real-Time Task Allocation Problem," </title> <booktitle> in Proc. of the 7th Hawaii Intl. Conf. on System Sciences, </booktitle> <year> 1985. </year>
Reference-contexts: They proposed two heuristic algorithms, called the Rate-Monotonic-First-Fit (RMFF) and Rate-Monotonic-Next-Fit (RMNF) algorithms. They showed that in the worst-case, the assignment produced by the RMFF algorithm uses no more than 2.33 times the optimal number of processors, while RMNF uses no more than 2.67 times. Davari and Dhall <ref> [11] </ref> considered another variation of the heuristic, called First-Fit-Decreasing-Utilization-Factor (FFDUF) algorithm, which improves the worst-case performance to 2 times the optimal number of processors. Davari and Dhall then devised an on-line algorithm, called Next-Fit-M algorithm [12] which has a worst-case performance ratio of 2.2838.
Reference: [12] <author> S. Davari and S. Dhall, </author> <title> "An On Line Algorithm for Real-Time Tasks Allocation," </title> <booktitle> in Proc. of the Real-Time System Symposium, </booktitle> <pages> pp. 194-200, </pages> <year> 1986. </year>
Reference-contexts: Davari and Dhall [11] considered another variation of the heuristic, called First-Fit-Decreasing-Utilization-Factor (FFDUF) algorithm, which improves the worst-case performance to 2 times the optimal number of processors. Davari and Dhall then devised an on-line algorithm, called Next-Fit-M algorithm <ref> [12] </ref> which has a worst-case performance ratio of 2.2838. Bannister and Trivedi [13] examined the task assignment problem in fault-tolerant distributed systems.
Reference: [13] <author> J. A. Bannister and K. S. Trivedi, </author> <title> "Task Allocation in Fault-Tolerant Distributed Systems," </title> <journal> in Acta Informica, </journal> <volume> vol. 20, </volume> <pages> pp. 261-181, </pages> <year> 1983. </year>
Reference-contexts: Davari and Dhall then devised an on-line algorithm, called Next-Fit-M algorithm [12] which has a worst-case performance ratio of 2.2838. Bannister and Trivedi <ref> [13] </ref> examined the task assignment problem in fault-tolerant distributed systems.
Reference: [14] <author> K. Ramamritham, </author> <title> "Allocation and Scheduling of Complex Periodic Tasks," </title> <booktitle> in Proceedings of the 10th Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 108-115, </pages> <year> 1990. </year>
Reference-contexts: Ramamritham <ref> [14] </ref> studied a more complex model involving periodic tasks with precedence and fault-tolerant constraints, as well as communication and resource requirements. Their algorithm made use of clustering and other heuristics to search for a solution. Recently, Storch and Liu [15] proposed five heuristics for assigning periodic tasks with communication costs.
Reference: [15] <author> M. F. Storch and J. W. S. Liu, </author> <title> "Heuristic Algorithms for Periodic Job Assignment," </title> <booktitle> in Proceedings of the Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <pages> pp. 245-251, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Ramamritham [14] studied a more complex model involving periodic tasks with precedence and fault-tolerant constraints, as well as communication and resource requirements. Their algorithm made use of clustering and other heuristics to search for a solution. Recently, Storch and Liu <ref> [15] </ref> proposed five heuristics for assigning periodic tasks with communication costs. Their heuristics are also based on clustering and bin-packing techniques. Chu and Lan [16] proposed an algorithm to assign tasks in distributed systems taking into account precedence relations, communication costs and execution costs.
Reference: [16] <author> W. W. Chu and L. M. T. </author> <title> Lan, "Task Allocation and Precedence Relations for Distributed Real-Time Systems," </title> <journal> in IEEE Transactions on Computers, </journal> <volume> vol. C-36(6), </volume> <pages> pp. 667-679, </pages> <year> 1987. </year>
Reference-contexts: Their algorithm made use of clustering and other heuristics to search for a solution. Recently, Storch and Liu [15] proposed five heuristics for assigning periodic tasks with communication costs. Their heuristics are also based on clustering and bin-packing techniques. Chu and Lan <ref> [16] </ref> proposed an algorithm to assign tasks in distributed systems taking into account precedence relations, communication costs and execution costs. Their algorithm first performed some clustering, following by an exhaustive search for assignments of individual clusters. Tindell, Burns and Wellings [17] proposed an assignment algorithm based on simulated annealing.
Reference: [17] <author> K. Tindell, A. Burns, and A. Wellings, </author> <title> "Allocating Hard Real-Time Tasks: An NP-hard Problem Made Easy," </title> <editor> in J. </editor> <booktitle> Real-Time Systems, </booktitle> <volume> vol. 4, </volume> <pages> pp. 145-165, </pages> <year> 1992. </year>
Reference-contexts: Chu and Lan [16] proposed an algorithm to assign tasks in distributed systems taking into account precedence relations, communication costs and execution costs. Their algorithm first performed some clustering, following by an exhaustive search for assignments of individual clusters. Tindell, Burns and Wellings <ref> [17] </ref> proposed an assignment algorithm based on simulated annealing. Several authors have used branch-and-bound techniques to solve the assignment problems.
Reference: [18] <author> D. Peng and K. Shin, </author> <title> "Static Allocation of Periodic Tasks with Precedence Constraints in Distributed Real-Time Systems," </title> <booktitle> in Proc. of the 9th Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 190-198, </pages> <year> 1989. </year>
Reference-contexts: Their algorithm first performed some clustering, following by an exhaustive search for assignments of individual clusters. Tindell, Burns and Wellings [17] proposed an assignment algorithm based on simulated annealing. Several authors have used branch-and-bound techniques to solve the assignment problems. Peng and Shin <ref> [18] </ref> considered the problem of assigning and scheduling a set of communicating periodic tasks to a set of heterogeneous processors so that the maximum response time is minimized. They proposed two branch-and-bound algorithms, one for task assignment and the other for scheduling.
Reference: [19] <author> C. J. Hou and K. G. Shin, </author> <title> "Allocation of Periodic Task Modules with Precedence and Deadline Constraints in Distributed Real-Time Systems," </title> <booktitle> in Proc. of the Real-Time System Symposium, </booktitle> <pages> pp. 146-155, </pages> <year> 1992. </year>
Reference-contexts: Peng and Shin [18] considered the problem of assigning and scheduling a set of communicating periodic tasks to a set of heterogeneous processors so that the maximum response time is minimized. They proposed two branch-and-bound algorithms, one for task assignment and the other for scheduling. Recently, Hou and Shin <ref> [19] </ref> addressed the problem of assigning and scheduling periodic task modules, subject to precedence and timing constraints, in a distributed real-time system. Their branch-and-bound technique, called module allocation algorithm, finds an assignment that maximizes the probability of meeting task deadlines.
Reference: [20] <author> C. M. Fiduccia and R. M. Matteyses, </author> <title> "A Linear-Time Heuristic for Improving Network Partitions," </title> <booktitle> in Proc. of the 19th Design Automation Conference, </booktitle> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: This remains true even for the case where p = 2. Our proposed assignment algorithm makes use of an efficient graph bipar-titioning heuristic to find the p-way cut. This heuristic is based on the Fiduccia-Mattheyses <ref> [20] </ref> variant of the graph bipartitioning heuristic by Kernighan and Lin [8]. The main advantages of this heuristic are that it is robust, can deal with arbitrary vertex and edge weights and can easily accommodate additional constraints on each partition.
Reference: [21] <author> C. M. Bailey, E. Fyfe, A. Burns, and A. J. Wellings, </author> <title> The Olympus Attitude and Orbital Control System: A Case Study in Hard Real-time System Design and Implementation. </title> <institution> University of York, Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: Phase 3 can be terminated after one pass or can be repeated until there is no further improvement. 5 Experimental Results To evaluate our algorithm, we generated 80 test cases based on the specification of the Olympus Attitude and Orbital Control System <ref> [21] </ref>. There are 17 tasks and 17 resources 1 in the system.
Reference: [22] <author> J. Sun, R. Bettati, and J. W.-S. Liu, </author> <title> "An End-to-End Approach to Scheduling Tasks with Shared Resources in Multiprocessor Systems," </title> <booktitle> in Proc. of the 11th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <year> 1994. </year> <month> 10 </month>
Reference-contexts: We are looking into the possibilities of applying the assignment algorithm to other scheduling model, such as the end-to-end scheduling model <ref> [22] </ref>. 9
References-found: 22

