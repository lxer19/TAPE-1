URL: http://www.cs.umn.edu/Research/Agassiz/Paper/huang.pdcs97.ps.Z
Refering-URL: http://www.cs.umn.edu/Research/Agassiz/agassiz_pubs.html
Root-URL: http://www.cs.umn.edu
Title: Reducing Cache Misses for CC-NUMA by Careful Page-Mapping  
Author: Jian Huang Zhiyuan Li 
Address: Minneapolis, MN 55455 West Lafayette, IN 47907  
Affiliation: Department of Computer Science Department of Computer Sciences University of Minnesota Purdue University  
Abstract: Careful page mapping has been shown in the past to be effective for reducing cache conflicts on both uniprocessor and Uniform Memory Access (UMA) multiprocessors. This paper extends previous page-mapping schemes to Cache-Coherent Non-Uniform Memory Access (CC-NUMA) multiprocessors. These extensions maintain the program's data-task affinity, which is important to CC-NUMA, while reducing cache set conflicts by carefully selecting the page frames. Using an execution-driven superscaler multiprocessor simulator, we find that a simplistic application of page-coloring performs worse than bin-hopping by 10-45%, while by hashing the page color with part of the MID bits, page-coloring can perform closely to bin-hopping. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Bugnion, et al. </author> <title> Compiler-directed page coloring for multiprocessors. </title> <booktitle> In Proc. of the 7th Int. Sym. on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> 10/96. </pages>
Reference-contexts: hence program performance, on uniprocessor machines as well as multiprocessor with uniform memory access <ref> [1] </ref>[5]. We expect a similar, if not greater performance impact on CC-NUMA due to the higher cache-miss penalty. Various techniques have been proposed and used in page-mapping, including page-coloring, bin-hopping, best-bin, hierarchical method [5], compiler-assisted page-coloring [1] and dynamic re-mapping [9]. SGI adopts page-coloring scheme in its products, while DEC ships OSF/1 with bin-hopping. In this paper, we study page-mapping techniques in the context of CC-NUMA. We compare their performances and show that page-coloring was lagged behind by a considerable margin.
Reference: [2] <author> J. Gu, Z. Li, G. Lee. </author> <title> Experience with Efficient Array Data-Flow Analysis for Array Privatization, </title> <booktitle> In Proc. of 6th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> June, </month> <year> 1997. </year>
Reference-contexts: Hence all the sixteen faulting pages will be mapped to sixteen different cache-bins. 3 Simulation Methodology Each program is parallelized and instrumented by Panorama, an inter-procedural parallelizing compiler developed at the University of Minnesota <ref> [2] </ref> and compiled by SGI's f77 compiler with -O2 flag on IRIX 5.3. The executable object code is then fed to our multiprocessor simulator (NUMAsim). We select Block Scheduling, also known as Simple Scheduling on SGI Cluster, to be the default scheduling technique.
Reference: [3] <author> J. Huang and Z. Li. </author> <title> Reducing Cache Misses for CC-NUMA by Careful Page-Mapping. </title> <type> Technical Report TR 97-036, </type> <institution> Dept. of Computer Science, University of Minnesota. </institution>
Reference-contexts: Systems based on this architecture include research prototypes such as the Stanford DASH and FLASH, MIT Alewife, Carnegie Melon PLUS, University of Toronto NUMAchine, and Sun's S3.mp, as well as commercial products including the Sequent STiNG, Hewlett-Packard SPP, and Silicon Graphics Origin 2000 (see <ref> [3] </ref> for references). A CC-NUMA machine has a number of nodes connected by an interconnection network.Each node consists of one or a few processors, a private cache hierarchy, and a local memory module. <p> To minimize remote memory references in the event of cache misses, the compiler can align the data allocation with the tasks. These two issues have been studied extensively recently (see <ref> [3] </ref> for references). This paper focuses on the issue of reducing cache set conflicts by properly mapping a virtual page to a physical page. <p> The Y-axis shows the page-colors referenced in physical memory, and the Z-axis is the count of references to physical page colors within each time interval. Due to limited space, we only show the figures for Ora here. Readers can refer to our technical report <ref> [3] </ref> for other programs. With page-coloring, we see that programs only reference limited number of colors in their entire execution and the reference count within each interval is large. In the case of bin-hopping, the colors referenced spread across the available range.
Reference: [4] <author> J. Huang and T. Nguyen. </author> <note> Inside NUMAsim. http://www.cs.umn.edu/ ~huangj/numa-sim.html. </note>
Reference-contexts: L2 caches of different nodes are kept coherent based on write-invalidate policy. Please refer to <ref> [4] </ref> for detailed description of our simulator. The Panorama compiler uses a data-task co-allocation scheme [7] to align the data with tasks. It instruments the FORTRAN source code by inserting directives to identify the starting and ending address of an array and to specify the data allocation decisions.
Reference: [5] <author> R. E. Kessler and Mark D. Hill. </author> <title> Page placement algorithms for large real-indexed caches. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> 10(4), </volume> <month> Nov., </month> <year> 1992. </year>
Reference-contexts: in cache, and hence program performance, on uniprocessor machines as well as multiprocessor with uniform memory access [1]<ref> [5] </ref>. We expect a similar, if not greater performance impact on CC-NUMA due to the higher cache-miss penalty. Various techniques have been proposed and used in page-mapping, including page-coloring, bin-hopping, best-bin, hierarchical method [5], compiler-assisted page-coloring [1] and dynamic re-mapping [9]. SGI adopts page-coloring scheme in its products, while DEC ships OSF/1 with bin-hopping. In this paper, we study page-mapping techniques in the context of CC-NUMA. We compare their performances and show that page-coloring was lagged behind by a considerable margin. <p> For a given physical page, there are a certain number of cache-sets which can cache the data of this page. All these cache-sets together are called a cache-bin <ref> [5] </ref>. The page-mapping process is essentially the selection of a cache-bin for a particular virtual page (Figure 1). Since the number of cache-bins are limited, we may see frequent cache-set conflicts, if we do not utilize all the bins intelligently. <p> Part of the SI is inside the page-offset and should be left untouched during the mapping process. The rest of the SI is considered as the color of a page, which is also called the cache-bin ID <ref> [5] </ref>. Selection of a cache-bin ID for a faulting virtual page will affect the number of cache-set conflicts in the later cache references, and in turn the overall execution time of a process. Page-coloring and bin-hopping schemes are extended to handle page-faults in CC-NUMA here.
Reference: [6] <author> J. E. Veenstra and R. J. Fowler. </author> <title> MINT tutorial and user manual. </title> <type> Technical Report 452, </type> <institution> Dept. of Computer Science, Univ. of Rochester. </institution>
Reference-contexts: This technique divides a n-iteration parallel loop into chunks of n/p iterations for p processors. Each chunk is then assigned to a processor. Our experiments showed that other scheduling schemes are inferior to simple scheduling for our benchmarks [8]. NUMAsim is an execution-driven multi-processor simulator based on MINT <ref> [6] </ref>. However, modifications are done to support superscalar CPU model and weak-ordered memory consistency. Latency parameters are selected based on several existing and developing commercial systems.
Reference: [7] <author> T. N. Nguyen. </author> <title> Interprocedural Compiler Analysis for Reducing Memory Latency and Network Traffic. </title> <type> PhD thesis, </type> <institution> Univ. of Minnesota, </institution> <year> 1996. </year>
Reference-contexts: The discussion of data-allocation schemes is out of the scope of this paper. However, we do all the evaluations based on what we believe a good data-task co-allocation scheme <ref> [7] </ref> to minimize the effect of them. The distributed data on a CC-NUMA machine in different memory modules may compete for a limited portion of each node's private cache. <p> L2 caches of different nodes are kept coherent based on write-invalidate policy. Please refer to [4] for detailed description of our simulator. The Panorama compiler uses a data-task co-allocation scheme <ref> [7] </ref> to align the data with tasks. It instruments the FORTRAN source code by inserting directives to identify the starting and ending address of an array and to specify the data allocation decisions. The simulator uses the inserted information and re-maps addresses at run-time for simulation.
Reference: [8] <author> T. N. Nguyen, et al. </author> <title> Performance Evaluation of Memory Allocation Schemes on CC-NUMA Multiprocessors, </title> <type> Technical Report TR 96-043, </type> <institution> Dept. of Computer Science, Univ. of Min-nesota. </institution>
Reference-contexts: This technique divides a n-iteration parallel loop into chunks of n/p iterations for p processors. Each chunk is then assigned to a processor. Our experiments showed that other scheduling schemes are inferior to simple scheduling for our benchmarks <ref> [8] </ref>. NUMAsim is an execution-driven multi-processor simulator based on MINT [6]. However, modifications are done to support superscalar CPU model and weak-ordered memory consistency. Latency parameters are selected based on several existing and developing commercial systems.
Reference: [9] <author> T. Romer, D. Lee, B. Bershad, J. Chen. </author> <title> Dynamic Page-Mapping Policies for Cache Conflict Resolution on Standard Hardware. </title> <booktitle> Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <month> Nov., </month> <year> 1994. </year>
Reference-contexts: We expect a similar, if not greater performance impact on CC-NUMA due to the higher cache-miss penalty. Various techniques have been proposed and used in page-mapping, including page-coloring, bin-hopping, best-bin, hierarchical method [5], compiler-assisted page-coloring [1] and dynamic re-mapping <ref> [9] </ref>. SGI adopts page-coloring scheme in its products, while DEC ships OSF/1 with bin-hopping. In this paper, we study page-mapping techniques in the context of CC-NUMA. We compare their performances and show that page-coloring was lagged behind by a considerable margin.
References-found: 9

