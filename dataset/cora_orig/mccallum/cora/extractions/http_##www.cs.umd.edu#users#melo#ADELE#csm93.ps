URL: http://www.cs.umd.edu/users/melo/ADELE/csm93.ps
Refering-URL: http://www.umiacs.umd.edu/~melo/
Root-URL: 
Phone: [3] [6] [7] [8] [21].  
Title: Supporting Software Maintenance Processes in TEMPO n i c a t i o n c
Author: N. Belkhatir and W. L. Melo r o n m e n t c o m m u 
Keyword: Software process, software engineering  
Address: BP 53 38041 Grenoble Cedex 9 France  
Affiliation: LGI  
Note: Paper published in the Conference on Software Maintenance, Montreal, Canada, Semptembre 1993. IEEE Press.  e n v i  e  to be provided. Experimental studies show that 70% to 80% of software engineering  by a process-centered SEE  
Abstract: We will show in this article how Tempo, a process-centered software engineering environment (SEE), assists in cooperative work by means of an appr oach based on a communication model. We will describe the executable formalisme used to define software engineering activities, and we will show how contraints r elated to the use of objects in these activities are expressed using the role concept. We will then present our communication model. Thanks to this model, strategies governing the cooperation between various software processes are specified by the c on c e pt o f a c t iv e , p r o g r am m a b l e c o nn e c ti o ns . A connection is a communication channel that links two roles. Message exchange is controlled using TECA rules (Temporal event-condition-action rules), executed by a trigger mechanism. These allow for pr ogramming of s y n c h ro n i z a t i o n s t r a t e g i e s b e t w e e n p r o c e s s e s , propagating the effects of an executed action on one or more connection points. The temporary modes of TECA rules allow for transactions of long duration, because these can be used to reason on past activities. Coherence control of objects handled by activities of long duration is performed by the work environments. The union between connections and work environments makes it possible to support of the cooperating processes and object sharing between these processes. The problems of developing lar ge volume software are well-known. They can be classified as programming-in-the-small [11], programming-in-the-large [22] and programming-in-the-many. By programming-in-the-small we mean the development activities associated with someone who develops a module or program alone. Programming-in-the-large means development activities involving many components, and programming-in-the-many refers to software development activities involving several agents. Research has focused for some time on the first aspect with the development of the programming Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems. TEMPO is a SEE piloted by an executable formalisme which allows description of software process models, object views, and elaboration on the strategies of cooperation, communication [4]. In the following text we will stress those aspects of TEMPO which relate to cooperation, with particular emphasis on the two following aspects: 1) Resource coordination. This is the problem of object sharing among team members. We will show how TEMPO supports activities of long duration with the role concept Many roles may be called on by activities which execute concurrently (cooperating processes). An activity takes place within a context called a work environment. The work environment is a unity of regrouped roles strongly linked together by a particular level of communication. 2) Cooperation between the agents who share the model of a common software process. We will introduce and develop the concept of active, programmable connections 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Balzer. </author> <title> Tolerating inconsistency. </title> <booktitle> In Proc. of the 13th Intl Conf. on Soft. Eng.g, </booktitle> <pages> pp 158165, </pages> <address> Austin, </address> <year> 1991. </year>
Reference-contexts: END_OF ReviewDesign; 3.0 Resource coordination: the work environments In classical database management systms object coherence must always be ensured by the system. In the software engineering context, where activities are of long duration, it is difficult to require that these objects stay coherent during software process execution <ref> [1] </ref>. For one thing, such incoherence comes from the integration of dif ferent views within a single description. On the other hand, this incoherence stems from the fact that dif ferent activities may share the same object over a long period of time.
Reference: [2] <author> N. S. Barghouti. </author> <title> Supporting cooperation in the Marvel process-centered SDE. </title> <booktitle> In vol. 17 of ACM SIGSOFT Software Engineering Notes, </booktitle> <pages> pp 2131. </pages> <year> 1992. </year>
Reference-contexts: In such a context, the transactional mechanism must be modified and/or extended to meet this new requirement. 3.1 The check-in/check-out model A lot of work has been done in the f ield of SEEs to furnish a framework which supports coordination by building mechanisms to manage long transactions <ref> [2] </ref> [9] [18] [21] [23]. Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es.
Reference: [3] <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> Adele 2: a support to large software development process. </title> <booktitle> In Dowson [14], </booktitle> <pages> pages 159170. </pages>
Reference-contexts: By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE <ref> [3] </ref> [6] [7] [8] [21]. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems. <p> By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE <ref> [3] </ref> [6] [7] [8] [21]. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems. <p> TECA rules in TEMPO are similair to Alf [20], Damokles [12] and HiPAC [10] rules.Interpretation and execution of these r ules are based on Adele s trigger s and its object management system <ref> [3] </ref>. For example: ModifyDesign ISA PROCESS; ATTRIBUTES begin_date = DATE := now (); end_date = DATE; deadline = DATE; METHODS continue_execution; . . .
Reference: [4] <author> N. Belkhatir, J. Estublier, and W. L. Melo. </author> <title> Software process model and work space control in the Adele system. </title> <booktitle> In 2nd Intl Conf. on the Softwar e Process, </booktitle> <pages> pp 2 11, </pages> , <address> Germany, </address> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: TEMPO is a SEE piloted by an executable formalisme which allows description of software process models, object views, and elaboration on the strategies of cooperation, communication <ref> [4] </ref>. In the following text we will stress those aspects of TEMPO which relate to cooperation, with particular emphasis on the two following aspects: 1) Resource coordination. This is the problem of object sharing among team members. <p> A SEE should provide a work environment which can describe and control these various aspects. Thanks to the role concept, TEMPO allows each software process occurrence to have local contraints and properties for each object treated <ref> [4] </ref>. Roles are of a defined type. A role type may reference different types of objects. This allows for the integration of various types of behaviour and properties, coming from different types of objects, within a unique perspective.
Reference: [5] <author> N. Belkhatir and W. L. Melo. TEMPO: </author> <title> a software process model based on object context behavior. </title> <booktitle> In Proc. of the 5th Intl Conf. on Soft. Eng. & its Applications , pages 733742, </booktitle> <address> Toulouse, France, </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO <ref> [5] </ref> project in order to take into account the production and evolution strategies of software systems. TEMPO is a SEE piloted by an executable formalisme which allows description of software process models, object views, and elaboration on the strategies of cooperation, communication [4]. <p> An activity manager. The temporal event-condition-action rules (TECA) and the trigger mechanisms are called by the activity manager, which also offers definition concepts, activity structuring using process and role concepts within a process, and work environment support. 2.1 The software process model TEMPO <ref> [5] </ref> describes and executes software processes. A software process model of considerable size may thus be written by a group of various software process types. A software process type has a recurrent def inition. It is a mixture of several software process types.
Reference: [6] <author> K. Benali, et. al. </author> <title> Presentation of the Alf projet. </title> <booktitle> In Proc. of the 1st Intl Conf. on System Development Env . and Factories, </booktitle> <pages> pages 7590, </pages> <address> Berlin, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE [3] <ref> [6] </ref> [7] [8] [21]. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems.
Reference: [7] <editor> R.F. Bruynooghe, et. al. PSS: </editor> <title> a system for process enactment. </title> <booktitle> In Dowson [14], </booktitle> <pages> pp 128141. </pages>
Reference-contexts: By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE [3] [6] <ref> [7] </ref> [8] [21]. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems.
Reference: [8] <author> R. Conradi, E. Osjord, P.H. Westby, and C. Liu. </author> <title> Initial s o f tw a r e p r oc e ss ma n a g e me n t i n E p os . I E E SE J </title> , 
Reference-contexts: By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE [3] [6] [7] <ref> [8] </ref> [21]. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems.
Reference: [9] <author> W. Courington. </author> <title> The Network Software Environment. Sun Microsystems, </title> <publisher> Inc, </publisher> <year> 1989. </year>
Reference-contexts: In such a context, the transactional mechanism must be modified and/or extended to meet this new requirement. 3.1 The check-in/check-out model A lot of work has been done in the f ield of SEEs to furnish a framework which supports coordination by building mechanisms to manage long transactions [2] <ref> [9] </ref> [18] [21] [23]. Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es.
Reference: [10] <author> U. Dayal et al. </author> <title> The HiPAC project: combining active databases and timing constraints. </title> <booktitle> ACM SIGMOD Record, </booktitle> <address> 17(1):5170, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: TECA rules in TEMPO are similair to Alf [20], Damokles [12] and HiPAC <ref> [10] </ref> rules.Interpretation and execution of these r ules are based on Adele s trigger s and its object management system [3]. For example: ModifyDesign ISA PROCESS; ATTRIBUTES begin_date = DATE := now (); end_date = DATE; deadline = DATE; METHODS continue_execution; . . .
Reference: [11] <author> F. DeRemer and H. Kron. </author> <title> Programming-in-the-large verus programming in the small. </title> <journal> IEEE TOSE, </journal> <volume> 2:8086, </volume> <month> June </month> <year> 1976. </year>
Reference-contexts: 1.0 Introduction The problems of developing lar ge volume software are well-known. They can be classified as programming-in-the-small <ref> [11] </ref>, programming-in-the-large [22] and programming-in-the-many. By programming-in-the-small we mean the development activities associated with someone who develops a module or program alone. Programming-in-the-large means development activities involving many components, and programming-in-the-many refers to software development activities involving several agents.
Reference: [12] <author> K.R. Dittrich. </author> <title> The Damokles database system for design applications: its past, its present, and its future. In Soft. </title> <journal> Eng. Environments: Research and Practice, </journal> <pages> pages 151171. </pages> <publisher> Ellis Horwood Books, </publisher> <address> Durhan, </address> <year> 1989. </year>
Reference-contexts: TECA rules in TEMPO are similair to Alf [20], Damokles <ref> [12] </ref> and HiPAC [10] rules.Interpretation and execution of these r ules are based on Adele s trigger s and its object management system [3]. For example: ModifyDesign ISA PROCESS; ATTRIBUTES begin_date = DATE := now (); end_date = DATE; deadline = DATE; METHODS continue_execution; . . .
Reference: [13] <author> K.R. Dittrich, W. Gotthard, and P. C. Lockemann. </author> <title> Damokles a database system for software engineering environments. </title> <booktitle> In vol. 244 of LNCS, </booktitle> <pages> pp 353371. </pages> <year> 1987. </year>
Reference-contexts: Generally, such work results in models for long transactions similar to the check-in/check-out model <ref> [13] </ref> [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es. Gen era lly a workspa ce is implemented in the form of a f ile management system directory [25].
Reference: [14] <editor> M. Dowson, editor. </editor> <booktitle> Proc. of the First Intl Conf. on the Software Process, </booktitle> <address> Redondo Beach, CA, </address> <month> Oct. </month> <year> 1991. </year>
Reference: [15] <author> J. Estublier, et. al. </author> <title> Support a levolution des procedes de production logiciel dans un AGL centr processus. </title> <note> TR, </note> <author> L. G. I., </author> <month> July </month> <year> 1993. </year>
Reference-contexts: We thus need a mechanism by which these strategies can be changed without stopping the execution of cooperating processes. Work concerning this aspect is described in <ref> [15] </ref>. We b e l ie v e th a t w e o f f e r a d e si g n c o nt e x t w h ic h coordination activities found within a SEE.
Reference: [16] <author> P.H. Feiler. </author> <title> Configuration management models in commercial environments. </title> <address> CMU/SEI-91-TR-7, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Generally, such work results in models for long transactions similar to the check-in/check-out model [13] <ref> [16] </ref> [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es. Gen era lly a workspa ce is implemented in the form of a f ile management system directory [25]. <p> This new version has a life span limited to that of the work environment in which it is located. In order to control coherence between long transactions, we require that these transactions be performed in a hierarchical manner, like the one described in <ref> [16] </ref> [17] and [19]. Thus, whenever two work environments wish to share the same object concurrently and modify it, these two environments must use the same root object. 3.3 Example of sharing The following diagram shows an example of sharing a software object.
Reference: [17] <author> G. E. Kaiser. </author> <title> A flexible transaction model for s o ft w a r e e n gi ne e r i ng . I n 6 th I n t l Co n f. o n D at a Engineering, </title> <booktitle> pages 560567, </booktitle> <address> Los alamitos, CA, </address> <year> 1990. </year>
Reference-contexts: Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] <ref> [17] </ref>. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es. Gen era lly a workspa ce is implemented in the form of a f ile management system directory [25]. <p> This new version has a life span limited to that of the work environment in which it is located. In order to control coherence between long transactions, we require that these transactions be performed in a hierarchical manner, like the one described in [16] <ref> [17] </ref> and [19]. Thus, whenever two work environments wish to share the same object concurrently and modify it, these two environments must use the same root object. 3.3 Example of sharing The following diagram shows an example of sharing a software object.
Reference: [18] <author> W. Kim, N. Ballou J.F. Garza, and D. Woelk. </author> <title> A distributed objectoriented database system supporting shared and private databases. </title> <journal> ACM TOIS, </journal> <volume> 9(1):3151, </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: In such a context, the transactional mechanism must be modified and/or extended to meet this new requirement. 3.1 The check-in/check-out model A lot of work has been done in the f ield of SEEs to furnish a framework which supports coordination by building mechanisms to manage long transactions [2] [9] <ref> [18] </ref> [21] [23]. Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es.
Reference: [19] <author> T. Miller. </author> <title> Configuration management with the NSE. </title> <booktitle> In vol. 467 of LNCS, </booktitle> <pages> pages 99106. </pages> <publisher> Springer -Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: This new version has a life span limited to that of the work environment in which it is located. In order to control coherence between long transactions, we require that these transactions be performed in a hierarchical manner, like the one described in [16] [17] and <ref> [19] </ref>. Thus, whenever two work environments wish to share the same object concurrently and modify it, these two environments must use the same root object. 3.3 Example of sharing The following diagram shows an example of sharing a software object.
Reference: [20] <author> F. Oquendo,et. </author> <title> al .. Support for software tool integration and process-centered software engineering environments. </title> <booktitle> In Proc. of the 3rd Intl Workshop on Soft. Eng. and its Applications , pages 135155, </booktitle> <address> Toulouse, , Dec.1990. </address>
Reference-contexts: TECA rules in TEMPO are similair to Alf <ref> [20] </ref>, Damokles [12] and HiPAC [10] rules.Interpretation and execution of these r ules are based on Adele s trigger s and its object management system [3]. For example: ModifyDesign ISA PROCESS; ATTRIBUTES begin_date = DATE := now (); end_date = DATE; deadline = DATE; METHODS continue_execution; . . .
Reference: [21] <author> B. Peuschel, et. </author> <title> al.A knowledge-based software development environment supporting cooperative work. </title> <journal> Intl Journal of SEKE, </journal> <volume> 2(1):7916, </volume> <month> March </month> <year> 1992 1992. </year>
Reference-contexts: By using such an approach, the resource sharing strategies, communication and coordination within the development team, and synchronization of software engineering activities may be explicitly described using an executable formalisme and then implemented in the environment by a process-centered SEE [3] [6] [7] [8] <ref> [21] </ref>. Based on Adele [3], an environment for programming-in-the-large which supports software product structuring and objects versions, we started the TEMPO [5] project in order to take into account the production and evolution strategies of software systems. <p> such a context, the transactional mechanism must be modified and/or extended to meet this new requirement. 3.1 The check-in/check-out model A lot of work has been done in the f ield of SEEs to furnish a framework which supports coordination by building mechanisms to manage long transactions [2] [9] [18] <ref> [21] </ref> [23]. Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es.
Reference: [22] <author> C.V. Romamoorthy. </author> <title> Programming in the large. </title> <journal> IEEE TOSE, </journal> <volume> 12(7):11451154, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: 1.0 Introduction The problems of developing lar ge volume software are well-known. They can be classified as programming-in-the-small [11], programming-in-the-large <ref> [22] </ref> and programming-in-the-many. By programming-in-the-small we mean the development activities associated with someone who develops a module or program alone. Programming-in-the-large means development activities involving many components, and programming-in-the-many refers to software development activities involving several agents.
Reference: [23] <author> S. Sarkar and V. Venugopal. </author> <title> Transaction mechanisms for software environment databases. </title> <booktitle> In 24th Hawaii Intl Conf. on System Sciences, </booktitle> <pages> pages 511518, </pages> <address> Kona, </address> <year> 1991. </year>
Reference-contexts: a context, the transactional mechanism must be modified and/or extended to meet this new requirement. 3.1 The check-in/check-out model A lot of work has been done in the f ield of SEEs to furnish a framework which supports coordination by building mechanisms to manage long transactions [2] [9] [18] [21] <ref> [23] </ref>. Generally, such work results in models for long transactions similar to the check-in/check-out model [13] [16] [17]. In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es.
Reference: [24] <author> R. W. Schwanke and G. E. Kaiser. </author> <title> Living with inconsistency in large systems. </title> <booktitle> In Intl Workshop on Software Version and Configuration Control, </booktitle> <address> Grassau, Germany, </address> <month> Jan. </month> <year> 1988. </year> <editor> B. G. </editor> <publisher> Teubner, Stuttgart, </publisher> <year> 1988. </year>
Reference-contexts: On the other hand, this incoherence stems from the fact that dif ferent activities may share the same object over a long period of time. Nonetheless, a SEE must manage this incoherence so as to ensure cooperative, parallel processing during all stages of the softwares life cycle <ref> [24] </ref>. To manage the coherence (or incoherence!) of shared objects, it is necessary to provide me chanisms to coordinate the users of those objects. W ith relational databases, coherence is assured by the concept of transactional atomicity, and coordination is taken into account by the serialisation of these transactions.
Reference: [25] <author> W.F. Tichy. </author> <title> Rcs a system for version control. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 15:637654, </volume> <year> 1985. </year>
Reference-contexts: In this model, shared objects are taken from the central database and made available to users in their r espe ctive wor kspac es. Gen era lly a workspa ce is implemented in the form of a f ile management system directory <ref> [25] </ref>.
References-found: 25

