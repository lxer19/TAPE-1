URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bnoble/Web/papers/sc97.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bnoble/Web/papers/papers.html
Root-URL: 
Email: fbnoble,satyag@cs.cmu.edu fgnguyen,randyg@cs.berkeley.edu  
Title: Trace-Based Mobile Network Emulation  
Author: Brian D. Noble; M. Satyanarayanan; Giao T. Nguyen; Randy H. Katz 
Address: Pittsburgh, PA Berkeley, CA  
Affiliation: Carnegie Mellon University University of California, Berkeley School of Computer Science Department of Electrical Engineering and Computer Science  
Date: September, 1997  
Note: To appear in Proceedings of ACM SIGCOMM'97, Cannes, France,  
Abstract: Subjecting a mobile computing system to wireless network conditions that are realistic yet reproducible is a challenging problem. In this paper, we describe a technique called trace modulation that re-creates the observed end-to-end characteristics of a real wireless network in a controlled and repeatable manner. Trace modulation is transparent to applications and accounts for all network traffic sent or received by the system under test. We present results that show that it is indeed capable of reproducing wireless network performance faithfully. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ahn, J. S., Danzig, P. B., Liu, Z., and Yan, L. </author> <title> Evaluation of TCP Vegas: Emulation and Experiment. </title> <journal> Computer Communication Review 25, </journal> <month> 4 (August </month> <year> 1995), </year> <pages> 185-195. </pages>
Reference-contexts: Our determination of bottleneck bandwidth is quite similar to the packet-pair approach used by Keshav [10], but our workload enables derivation of additional network parameters. The network emulation package most similar to our modulation kernel is hitbox, which was used in evaluating the performance of TCP Vegas <ref> [1] </ref>. Unlike trace modulation, hitbox models networks with relatively static performance. A more flexible system, the Probe/Fault Injection Tool [4], allows any protocol layer to be encapsulated by a lower layer to perturb existing traffic, and a higher layer to generate test traffic. <p> One approach would be to use a custom hardware clock, but this would preclude our ability to run on stock machines. The other approach, which we rejected in the interests of minimal system perturbation, would be to raise the frequency of clock interrupts as described by Ahn et al <ref> [1] </ref>. Delay Compensation Our intent is to provide symmetric delay of inbound and outbound traffic; that is, for a fixed set of modulation parameters, inbound traffic should perform exactly the same as outbound traffic.
Reference: [2] <institution> AT&T Global Information Solutions Company. Architecture Specification for WaveLAN Air Interface. </institution>
Reference-contexts: We show that trace modulation accurately reproduces the original wireless environment. Our validation experiments consist of three benchmarks | Web browsing, FTP transfers, and the Andrew Benchmark [7] | run in four different WaveLAN <ref> [2] </ref> wireless networking scenarios. In the few cases where the measurements indicate significant divergence, our analysis suggests that the use of fine-granularity, low-drift, synchronized clocks would substantially improve accuracy. Unfortunately, such clocks are not yet readily available on mobile platforms.
Reference: [3] <author> Davies, N., Blair, G. S., Cheverst, K., and Fri-day, A. </author> <title> A Network Emulator to Support the Development of Adaptive Applications. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile and Location Independent Computing (April 10-11 1995). </booktitle>
Reference-contexts: A more flexible system, the Probe/Fault Injection Tool [4], allows any protocol layer to be encapsulated by a lower layer to perturb existing traffic, and a higher layer to generate test traffic. However, these layers are driven only by synthetic models, not by empirically derived ones. The Lancaster emulator <ref> [3] </ref> uses a central server rather than an emulation layer in each host. More broadly, the use of user-level libraries for network emulation is widespread. Examples include Delayline [8] and the slow mechanism of RPC2 [16].
Reference: [4] <author> Dawson, S., and Jahanian, F. </author> <title> Probing and Fault Injection of Dependable Distributed Protocols. </title> <booktitle> The Computer Jouranl 38, </booktitle> <month> 4 </month> <year> (1995). </year>
Reference-contexts: The network emulation package most similar to our modulation kernel is hitbox, which was used in evaluating the performance of TCP Vegas [1]. Unlike trace modulation, hitbox models networks with relatively static performance. A more flexible system, the Probe/Fault Injection Tool <ref> [4] </ref>, allows any protocol layer to be encapsulated by a lower layer to perturb existing traffic, and a higher layer to generate test traffic. However, these layers are driven only by synthetic models, not by empirically derived ones.
Reference: [5] <author> Ebling, M., and Satyanarayanan, M. SynRGen: </author> <title> An Extensible File Reference Generator. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference (Nashville, </booktitle> <address> TN, </address> <month> May </month> <year> 1994). </year>
Reference-contexts: The trace collection host is placed in a room with five other laptops also using WaveLAN. Each of the other laptops continuously executes a workload produced by SynRGen <ref> [5] </ref>, a synthetic file reference generator. The synthetic workload models a user in a edit-debug cycle on files stored on a remote NFS [15] file server. We refer to this scenario as the Chatterbox scenario, depicted in Figure 5.
Reference: [6] <author> Eckhardt, D., and Steenkiste, P. </author> <title> Measurement and Analysis of the Error Characteristics of an In-Building Wireless Network. </title> <journal> Computer Communication Review 26, </journal> <month> 4 (October </month> <year> 1996), </year> <pages> 243-254. </pages>
Reference-contexts: Third, it is valuable in debugging mobile systems because it enables the re-creation of conditions that trigger rare but serious bugs. Unfortunately, obtaining repeatable performance is extremely difficult because the quality of wireless networks can vary dramatically and unpredictably over time and space <ref> [6, 12] </ref>. In this paper we describe a solution, called trace modulation, which combines three distinct ideas. First, performance of a real, wireless network is captured through trace collection. Second, these complex network observations are reduced to a list of parameters of a simple, time-varying network model.
Reference: [7] <author> Howard, J. H., Kazar, M. L., Menees, S. G., Nichols, D. A., Satyanarayanan, M., Side-botham, R. N., and West, M. J. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems 6, </journal> <month> 1 (February </month> <year> 1988). </year>
Reference-contexts: Further, it accounts for all network traffic sent or received by the modulated host, not just that of specific applications. We show that trace modulation accurately reproduces the original wireless environment. Our validation experiments consist of three benchmarks | Web browsing, FTP transfers, and the Andrew Benchmark <ref> [7] </ref> | run in four different WaveLAN [2] wireless networking scenarios. In the few cases where the measurements indicate significant divergence, our analysis suggests that the use of fine-granularity, low-drift, synchronized clocks would substantially improve accuracy. Unfortunately, such clocks are not yet readily available on mobile platforms.
Reference: [8] <author> Ingham, D. B., and Parrington, G. D. Delayline: </author> <title> A Wide-Area Network Emulation Tool. </title> <booktitle> Computing Systems 7, </booktitle> <month> 3 </month> <year> (1994). </year>
Reference-contexts: However, these layers are driven only by synthetic models, not by empirically derived ones. The Lancaster emulator [3] uses a central server rather than an emulation layer in each host. More broadly, the use of user-level libraries for network emulation is widespread. Examples include Delayline <ref> [8] </ref> and the slow mechanism of RPC2 [16].
Reference: [9] <author> Jacobson, V., Leres, C., and McCanne, S. </author> <title> The Tcpdump Manual Page. </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA. </address>
Reference-contexts: However, each aspect of our methodology has been investigated in isolation by other researchers. The best-known system for network tracing is the Berke-ley Packet Filter [11], which is typically used in conjunction with tcpdump <ref> [9] </ref>. This architecture is efficient and flexible, and has rightly found great favor with the networking community. Our trace collection mechanism differs from the Berkeley Packet Filter in that we record device characteristics in addition to information from packets. <p> The WaveLAN device reports signal characteristics such as signal level, signal quality and silence level, which we record along with packet traffic. 3.1.2 Collection Method To collect traced information we have an in-kernel implementation, similar to other network data collection platforms <ref> [9, 11] </ref>, that provides accurate timing with modest overheads. Hooks are placed in the input and output routines of traced devices to allow the tracing software access to packets.
Reference: [10] <author> Keshav, S. </author> <note> Packet-Pair Flow Control. To appear in IEEE/ACM Transactions on Networking. </note>
Reference-contexts: The notion of reducing complex network observations to simple parameters through controlled workloads is commonly used in modelling physical channels. Our determination of bottleneck bandwidth is quite similar to the packet-pair approach used by Keshav <ref> [10] </ref>, but our workload enables derivation of additional network parameters. The network emulation package most similar to our modulation kernel is hitbox, which was used in evaluating the performance of TCP Vegas [1]. Unlike trace modulation, hitbox models networks with relatively static performance.
Reference: [11] <author> McCanne, S., and Jacobson, V. </author> <title> The BSD Packet Filter: A New Architecture for User-level Packet Capture. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Technical Conference (San Deigo, </booktitle> <address> CA, </address> <month> January </month> <year> 1993). </year>
Reference-contexts: We are not aware of any previous work, published or unpublished, that combines these ideas in a similar manner. However, each aspect of our methodology has been investigated in isolation by other researchers. The best-known system for network tracing is the Berke-ley Packet Filter <ref> [11] </ref>, which is typically used in conjunction with tcpdump [9]. This architecture is efficient and flexible, and has rightly found great favor with the networking community. Our trace collection mechanism differs from the Berkeley Packet Filter in that we record device characteristics in addition to information from packets. <p> The WaveLAN device reports signal characteristics such as signal level, signal quality and silence level, which we record along with packet traffic. 3.1.2 Collection Method To collect traced information we have an in-kernel implementation, similar to other network data collection platforms <ref> [9, 11] </ref>, that provides accurate timing with modest overheads. Hooks are placed in the input and output routines of traced devices to allow the tracing software access to packets.
Reference: [12] <author> Nguyen, G., Katz, R., Noble, B., and Satya-narayanan, M. </author> <title> A Trace-Based Approach for Mod-elling Wireless Channel Behavior. </title> <booktitle> In Proceedings of the Winter Simulation Conference (1996). </booktitle>
Reference-contexts: Third, it is valuable in debugging mobile systems because it enables the re-creation of conditions that trigger rare but serious bugs. Unfortunately, obtaining repeatable performance is extremely difficult because the quality of wireless networks can vary dramatically and unpredictably over time and space <ref> [6, 12] </ref>. In this paper we describe a solution, called trace modulation, which combines three distinct ideas. First, performance of a real, wireless network is captured through trace collection. Second, these complex network observations are reduced to a list of parameters of a simple, time-varying network model. <p> Our trace collection mechanism differs from the Berkeley Packet Filter in that we record device characteristics in addition to information from packets. While not strictly necessary for trace modulation, such a record of device behavior in actual use is valuable for a better understanding of wireless networks <ref> [12] </ref>. The notion of reducing complex network observations to simple parameters through controlled workloads is commonly used in modelling physical channels. Our determination of bottleneck bandwidth is quite similar to the packet-pair approach used by Keshav [10], but our workload enables derivation of additional network parameters.
Reference: [13] <author> Noble, B., Nguyen, G., Satyanarayanan, M., and Katz, R. </author> <title> Mobile Network Tracing. Internet RFC 2041, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: We have defined a trace format <ref> [13] </ref> that is flexible and extensible while remaining fully self-descriptive.
Reference: [14] <author> Noble, B. D., Satyanarayanan, M., Narayanan, D., Tilton, J. E., Flinn, J., and Walker, K. R. </author> <title> Agile Application-Aware Adaptation for Mobility. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles (St. </booktitle> <address> Malo, France, </address> <month> October </month> <year> 1997). </year>
Reference-contexts: While this paper has focused on the use of traces from real networks, it is also possible to modulate using synthetic traces. These can be used to generate characteristics that can only be approximated by actual networks. For example, a recent paper <ref> [14] </ref> reports on the use of synthetic traces to explore the behavior of an adaptive mobile system in response to step and impulse variations in bandwidth. We are confident that the trace-based methodology described here will prove to be useful and versatile.
Reference: [15] <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D., and Lyon, B. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Usenix Conference Proceedings (Summer 1985). </booktitle>
Reference-contexts: Each of the other laptops continuously executes a workload produced by SynRGen [5], a synthetic file reference generator. The synthetic workload models a user in a edit-debug cycle on files stored on a remote NFS <ref> [15] </ref> file server. We refer to this scenario as the Chatterbox scenario, depicted in Figure 5. This figure differs from the depictions of the previous three scenarios because there is no physical motion. We use simple histograms rather than plotting parameter values along a sequence of checkpoint locations.
Reference: [16] <author> Satyanarayanan, M. </author> <title> RPC2 User Guide and Reference Manual. </title> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: The Lancaster emulator [3] uses a central server rather than an emulation layer in each host. More broadly, the use of user-level libraries for network emulation is widespread. Examples include Delayline [8] and the slow mechanism of RPC2 <ref> [16] </ref>. While useful, such libraries have two shortcomings: they require recompilation or relinking of applications, and they only influence traffic to or from the applications in question. 3 Design and Implementation 3.1 Collection Phase There are two key issues in trace collection: what to collect and how to collect it.
Reference: [17] <author> Steere, D. C. </author> <title> Using Dynamic Sets to Reduce the Aggregate Latency of Data Access. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1996. </year> <month> 11 </month>
Reference-contexts: Loss rates are reasonable. 4.2 Benchmarks We have selected three benchmarks to test the accuracy of trace modulation. The first benchmark involves a World Wide-Web workload <ref> [17] </ref>. Web reference traces of five users performing search tasks are replayed as fast as possible on a modified Mosaic v2.6 browser.
References-found: 17

