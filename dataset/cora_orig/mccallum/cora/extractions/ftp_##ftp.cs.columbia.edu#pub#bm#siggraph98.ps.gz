URL: ftp://ftp.cs.columbia.edu/pub/bm/siggraph98.ps.gz
Refering-URL: http://www.cs.columbia.edu/~bm/papers.html
Root-URL: http://www.cs.columbia.edu
Title: A Distributed 3D Graphics Library  
Author: Blair MacIntyre and Steven Feiner 
Keyword: CR Categories and Subject Descriptors: Program ming Techniques Concurrent Programming Distributed Pro gramming Information Systems Applications Office Automation Groupware Computer Graphics Graphics Systems Distributed/network graphics Computer Graph ics Methodology and Techniques Graphics data structures and data types Computer Graphics Three-Dimensional Graphics and Realism Virtual reality Additional Keywords and Phrases: object-oriented graphics, distributed shared memory, distributed virtual environments, shared-data object model.  
Affiliation: Department of Computer Science Columbia University  
Date: 1998  
Note: Computer Graphics Proceedings, Annual Conference Series,  the notion of  
Abstract: We present Repo-3D, a general-purpose, object-oriented library for developing distributed, interactive 3D graphics applications across a range of heterogeneous workstations. Repo-3D is designed to make it easy for programmers to rapidly build prototypes using a familiar multi-threaded, object-oriented programming paradigm. All data sharing of both graphical and non-graphical data is done via general-purpose remote and replicated objects, presenting the illusion of a single distributed shared memory. Graphical objects are directly distributed, circumventing the duplicate database problem and allowing programmers to focus on the application details. Repo-3D is embedded in Repo, an interpreted, lexically-scoped, distributed programming language, allowing entire applications to be rapidly prototyped. We discuss Repo-3Ds design, and introduce local variations to the graphical objects, which allow local changes to be applied to shared graphical structures. Local variations are needed to support transient local changes, such as highlighting, and responsive local editing operations. Finally, we discuss how our approach could be applied using other program ming languages, such as Java.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. B. Anderson, J. W. Barrus, J. H. Howard, C. Rich, C. Shen, and R. C. Waters. </author> <title> Building MultiUser Interactive Multimedia Environments at MERL. </title> <type> Technical Report Research Report TR95-17, </type> <institution> Mit-subishi Electric Research Laboratory, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Unfortunately, these efforts concentrate on the particulars of implementing shared virtual environments and fall short of providing a general-purpose shared graphics library. For example, the Open Communities work is being done on top of SPLINE <ref> [1] </ref>, which supports only a single top-level world in the local scene database. Most DVEs [11, 12, 16, 31, 32] provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications.
Reference: [2] <author> H. Bal, M. Kaashoek, and A. Tanenbaum. Orca: </author> <title> A Language for Parallel Programming of Distributed Systems. </title> <journal> IEEE Transactions on Software Engineering , 18(3):190205, </journal> <month> March </month> <year> 1992. </year>
Reference-contexts: Of course, these protocols are fine for replicating application state that will then be synchronized with a parallel graphical scene description, but that is what we are explicitly trying to avoid. Fortunately, there are replicated data systems (e.g., Orca <ref> [2] </ref> or COTERIE [24]) that provide replicated objects that are well suited to interactive applications, and it is upon the second of these systems that Repo-3D is built. 3 RELATED WORK There has been a significant amount of work that falls under the first, older definition of distributed graphics. <p> The above principle applies to operations on single objects. Making sequences of operations atomic is up to the programmer. The implementation of the Replicated Object package is based on the approach used in the Orca distributed programming language <ref> [2] </ref>. A full replication scheme is used, where a single object is either fully replicated in a process or not present at all. Avoiding partial replication significantly simplifies the implementation and the object model, and satisfies the primary rationale for replication: fast read-access to shared data.
Reference: [3] <author> K. Bharat and L. Cardelli. </author> <title> Migratory Applications. </title> <booktitle> In ACM UIST '95 pages 133-142, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: Finally, when data is replicated, local access must still be fast. The most widely used protocols for replicated data consistency, and thus many of the toolkits (e.g., ISIS [4] and Visual-Obliq <ref> [3] </ref>), allow data updates to proceed unimpeded, but block threads read ing local data until necessary updates arrive. The same reason we need replicated data in the first placefast local read access to the datamakes these protocols unsuitable for direct replication of the graphical data.
Reference: [4] <author> K. P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> CACM , 36(12):3653, </journal> <month> Dec </month> <year> 1993. </year>
Reference-contexts: CSCW and DVE systems with which we are familiar (e.g., [1, 7, 11, 12, 16, 28, 30, 31, 32, 34, 37, 41]) use the following approach: A mechanism is provided for distributing application state (either a custom solution or one based on a general-purpose distributed programming environment, such as ISIS <ref> [4] </ref> or Obliq [8]), and the state of the graphical display is maintained separately in the local graphics library. Keeping these dual databases synchronized is a complex, tedious, and error-prone endeavor. <p> Finally, when data is replicated, local access must still be fast. The most widely used protocols for replicated data consistency, and thus many of the toolkits (e.g., ISIS <ref> [4] </ref> and Visual-Obliq [3]), allow data updates to proceed unimpeded, but block threads read ing local data until necessary updates arrive. The same reason we need replicated data in the first placefast local read access to the datamakes these protocols unsuitable for direct replication of the graphical data.
Reference: [5] <author> A. Birrell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network Objects. </title> <booktitle> In Proc. 14th ACM Symp. on Operating Systems Principles </booktitle>
Reference-contexts: Of the tools available for integrating distributed objects into programming languages, client-server data sharing is by far the most common approach, as exemplified by CORBA [26], Modula-3 Network Objects <ref> [5] </ref>, and Java RMI [39]. Unfortunately, interactive graphical applications, such as virtual reality, require that the data used to refresh the display be local to the process doing the rendering or acceptable frame refresh rates will not be achieved. <p> One of its most important features for our work is that it gives us uniform access to these facilities across all architectures. Repo-3D relies on a number of Modula-3 libraries, as illustrated in Figure 2. Distributed data sharing is provided by two packages, the Network Object client-server object package <ref> [5] </ref>, and the Replicated Object shared object package [24] (see Section 4.1). DistAnim-3D is derived from Anim-3D [25], a powerful, non-distributed, general-purpose 3D library originally designed for 3D algorithm animation (see Section 4.2).
Reference: [6] <author> A Butz, </author> <title> Animation with CATHI, </title> <booktitle> In Proceedings of AAAI/IAAI '97 pages 957962, </booktitle> <year> 1997. </year>
Reference-contexts: This set of local operations supports the problems local variations were designed to solve, although some possible enhancements are discussed in Section 7. 6 EXAMPLE: AN ANIMATION EXAMINER As an example of the ease of prototyping distributed applications with Repo-3D, we created a distributed animation examiner for the CATHI <ref> [6] </ref> animation generation system. CATHI generates short informational animation clips to explain the operation of technical devices. It generates full-featured animation scripts, including camera and object motion, color and opacity effects, and lighting setup.
Reference: [7] <author> J. Calvin, A. Dickens, B. Gaines, P. Metzger, D. Miller, and D. Owen. </author> <title> The SIMNET Virtual World Architecture. </title> <booktitle> In Proc. IEEE VRAIS 93 , pages 450455, </booktitle> <month> Sept </month> <year> 1993. </year>
Reference-contexts: Some use communication schemes that prevent them from scaling beyond a relatively small number of distributed processes, but for most the focus is explicitly on efficient communication. SIMNET <ref> [7] </ref>, and the later NPSNet [41], are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment.
Reference: [8] <author> L. Cardelli. </author> <title> A Language with Distributed Scope. </title> <journal> Computing Sys tems , 8(1):2759, </journal> <month> Jan </month> <year> 1995. </year>
Reference-contexts: systems with which we are familiar (e.g., [1, 7, 11, 12, 16, 28, 30, 31, 32, 34, 37, 41]) use the following approach: A mechanism is provided for distributing application state (either a custom solution or one based on a general-purpose distributed programming environment, such as ISIS [4] or Obliq <ref> [8] </ref>), and the state of the graphical display is maintained separately in the local graphics library. Keeping these dual databases synchronized is a complex, tedious, and error-prone endeavor. <p> DistAnim-3D is derived from Anim-3D [25], a powerful, non-distributed, general-purpose 3D library originally designed for 3D algorithm animation (see Section 4.2). Finally, Repo itself is a direct descendant of Obliq <ref> [8] </ref>, and uses the Replicated Object package to add replicated data to Obliq (see Section 4.3). 4.1 Distributed Shared Memory Repo-3Ds data sharing mechanism is based on the Shared Data-Object Model of Distributed Shared Memory (DSM) [20]. <p> Since DistAnim-3D is embedded in Repo instead of Obliq (see Section 4.3), the resulting library is called Repo-3D. 4.3 Obliq and Repo Obliq <ref> [8] </ref> is a lexically-scoped, untyped, interpreted language for distributed object-oriented computation. It is implemented in, and tightly integrated with, Modula-3.
Reference: [9] <author> L. Cardelli and A. Gordon. </author> <booktitle> Mobile Ambients. In Foundations of Software Science and Computational Structures , Maurice Nivat (Ed.), LNCE 1378, </booktitle> <publisher> Springer, </publisher> <address> 140155. </address> <year> 1998. </year>
Reference-contexts: Work is also being done on interpreted, distributed programming languages on top of Java (e.g., Ambit <ref> [9] </ref>). Finally, Java 3D is very similar to Anim-3D, even though its design leans toward efficiency instead of generality when there are trade-offs to be made. For example, the designers chose to forgo Anim-3Ds general property inheritance mechanism because it imposes computational overhead.
Reference: [10] <author> R. Carey and G. Bell. </author> <title> The Annotated VRML 2.0 Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year>
Reference: [11] <author> C. Carlsson and O. Hagsand. </author> <title> DIVEA MultiUser Virtual Reality System. </title> <booktitle> In Proc. IEEE VRAIS 93 , pages 394400, </booktitle> <month> Sept </month> <year> 1993. </year>
Reference-contexts: For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database. Most DVEs <ref> [11, 12, 16, 31, 32] </ref> provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications. They implement a higher level of abstraction, providing support for rooms, objects, avatars, collision detection, and other things needed in single, shared, immersive virtual environments.
Reference: [12] <author> C. F. Codella, R. Jalili, L. Koved, and J. B. Lewis. </author> <title> A Toolkit for Developing MultiUser, Distributed Virtual Environments. </title> <booktitle> In Proc. IEEE VRAIS 93 , pages 401407, </booktitle> <month> Sept </month> <year> 1993. </year> <note> 7. Computed as an offset from January 1, </note> <year> 1997. </year> <title> 8. Implementation details of the combination of Network and Replicated Objects made it difficult for us to adopt a more advanced solution. </title> <booktitle> SIGGRAPH 98, </booktitle> <address> Orlando, Florida, </address> <month> July </month> <year> 1924, 1998. </year>
Reference-contexts: For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database. Most DVEs <ref> [11, 12, 16, 31, 32] </ref> provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications. They implement a higher level of abstraction, providing support for rooms, objects, avatars, collision detection, and other things needed in single, shared, immersive virtual environments.
Reference: [13] <author> C. Elliott, G. Schechter, R. Yeung and S. Abi-Ezzi. TBAG: </author> <title> A High Level Framework for Interactive, Animated 3D Graphics Applications, </title> <booktitle> In Proc. ACM SIGGRAPH 94 , pages 421434, </booktitle> <month> August, </month> <year> 1994. </year>
Reference-contexts: Others, such as Performer [29], provide support for distributing components of the 3D graphics rendering system across multiple processors, but do not support distribution across multiple machines. One notable exception is TBAG <ref> [13] </ref>, a high-level constraint-based, declarative 3D graphics framework. Scenes in TBAG are defined using constrained relationships between time-varying functions. TBAG allows a set of processes to share a single, replicated constraint graph. When any process asserts or retracts a constraint, it is asserted or retracted in all processes.
Reference: [14] <author> M. Fairen and A. Vinacua, </author> <title> ATLAS, A Platform for Distributed Graphics Applications, </title> <booktitle> In Proc. VI Eurographics Workshop on Pro gramming Paradigms in Graphics , pages 91102, </booktitle> <month> September, </month> <year> 1997. </year>
Reference-contexts: 1 INTRODUCTION Traditionally, distributed graphics has referred to the architecture of a single graphical application whose components are distributed over multiple machines <ref> [14, 15, 19, 27] </ref> (Figure 1 ). By taking advantage of the combined power of multiple machines, and the particular features of individual machines, otherwise impractical applications became feasible. <p> A large number of systems, ranging from established commercial products (e.g., IBM Visualization Data Explorer [21]) to research systems (e.g., PARADISE [19] and ATLAS <ref> [14] </ref>), have been created to distribute interactive graphical applications over a set of machines. However, the goal of these systems is to facilitate sharing of application data between processes, with one process doing the rendering.
Reference: [15] <author> S. Feiner, B. MacIntyre, M. Haupt, and E. Solomon. </author> <title> Windows on the World: 2D Windows for 3D Augmented Reality. </title> <booktitle> In Proc. ACM UIST 93 , pages 145155, </booktitle> <year> 1993. </year>
Reference-contexts: 1 INTRODUCTION Traditionally, distributed graphics has referred to the architecture of a single graphical application whose components are distributed over multiple machines <ref> [14, 15, 19, 27] </ref> (Figure 1 ). By taking advantage of the combined power of multiple machines, and the particular features of individual machines, otherwise impractical applications became feasible.
Reference: [16] <author> T. A. Funkhouser. </author> <title> RING: A Client-Server System for MultiUser Virtual Environments. </title> <booktitle> In Proc. 1995 ACM Symp. on Interactive 3D Graphics , pages 8592, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database. Most DVEs <ref> [11, 12, 16, 31, 32] </ref> provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications. They implement a higher level of abstraction, providing support for rooms, objects, avatars, collision detection, and other things needed in single, shared, immersive virtual environments.
Reference: [17] <author> G. Grimsdale. </author> <title> dVSDistributed Virtual Environment System. </title> <booktitle> In Proc. Computer Graphics 91 Conference </booktitle>
Reference: [18] <author> S. P. </author> <title> Harbison. </title> <publisher> Modula-3 . Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: Finally, while distributed games, such as Quake, have become very popular, they only distribute the minimum amount of application state necessary. They do not use (or provide) an abstract, high-level distributed 3D graphics system. 4 UNDERLYING INFRASTRUCTURE Our work was done in the Modula-3 programming language <ref> [18] </ref>. We decided to use Modula-3 because of the language itself and the availability of a set of packages that provide a solid foundation for our infrastructure. Modula-3 is a descendant of Pascal that corrects many of its deficiencies, and heavily inuenced the design of Java.
Reference: [19] <author> H.W. Holbrook, S.K. Singhal and D.R. Cheriton, </author> <title> Log-Based Receiver-Reliable Multicast for Distributed Interactive Simulation, </title> <booktitle> Proc. ACM SIGCOMM 95 , pages 328341, </booktitle> <year> 1995. </year>
Reference-contexts: 1 INTRODUCTION Traditionally, distributed graphics has referred to the architecture of a single graphical application whose components are distributed over multiple machines <ref> [14, 15, 19, 27] </ref> (Figure 1 ). By taking advantage of the combined power of multiple machines, and the particular features of individual machines, otherwise impractical applications became feasible. <p> A large number of systems, ranging from established commercial products (e.g., IBM Visualization Data Explorer [21]) to research systems (e.g., PARADISE <ref> [19] </ref> and ATLAS [14]), have been created to distribute interactive graphical applications over a set of machines. However, the goal of these systems is to facilitate sharing of application data between processes, with one process doing the rendering.
Reference: [20] <author> W. Levelt, M. Kaashoek, H. Bal, and A. Tanenbaum. </author> <title> A Comparison of Two Paradigms for Distributed Shared Memory. </title> <journal> Software Practice and Experience , 22(11):9851010, </journal> <month> Nov </month> <year> 1992. </year>
Reference-contexts: Finally, Repo itself is a direct descendant of Obliq [8], and uses the Replicated Object package to add replicated data to Obliq (see Section 4.3). 4.1 Distributed Shared Memory Repo-3Ds data sharing mechanism is based on the Shared Data-Object Model of Distributed Shared Memory (DSM) <ref> [20] </ref>. DSM allows a network of computers to be programmed much like a multiprocessor, since the programmer is presented with the familiar paradigm of a common shared memory.
Reference: [21] <author> B. Lucas. </author> <title> A Scientific Visualization Renderer. </title> <booktitle> In Proc. IEEE Visualization '92 , pp. </booktitle> <pages> 227-233, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: A large number of systems, ranging from established commercial products (e.g., IBM Visualization Data Explorer <ref> [21] </ref>) to research systems (e.g., PARADISE [19] and ATLAS [14]), have been created to distribute interactive graphical applications over a set of machines. However, the goal of these systems is to facilitate sharing of application data between processes, with one process doing the rendering.
Reference: [22] <author> V. Machiraju, </author> <title> A Framework for Migrating Objects in Distributed Graphics Applications, </title> <type> Masters Thesis, </type> <institution> University of Utah, Department of Computer Science, </institution> <address> Salt Lake City, UT, </address> <month> June, </month> <year> 1997. </year>
Reference-contexts: There is also no support for local variations of the scene in different processes. Computer Graphics Proceedings, Annual Conference Series, 1998 Machiraju <ref> [22] </ref> investigated an approach similar in avor to ours, but it was not aimed at the same fine-grained level of interactivity and was ultimately limited by the constraints of the implementation platform (CORBA and C++).
Reference: [23] <author> B. MacIntyre. Repo: </author> <title> Obliq with Replicated Objects. Programmers Guide and Reference Manual. </title> <institution> Columbia University Computer Science Department Research Report CUCS-023-97, 1997.- </institution>
Reference-contexts: Obliq uses, and supports, the Modula-3 thread, exception, and garbage-collec tion facilities. Its distributed-computation mechanism is based on Network Objects, allowing transparent support for multiple processes on heterogeneous machines. Objects are local to a site, while computations can roam over the network. Repo <ref> [23] </ref> is a descendant of Obliq that extends the Obliq object model to include replicated objects.
Reference: [24] <author> B. MacIntyre, and S. Feiner. </author> <title> Language-level Support for Exploratory Programming of Distributed Virtual Environments. </title> <booktitle> In Proc. ACM UIST 96 , pages 8394, </booktitle> <address> Seattle, WA, </address> <month> November 68, </month> <year> 1996. </year>
Reference-contexts: Of course, these protocols are fine for replicating application state that will then be synchronized with a parallel graphical scene description, but that is what we are explicitly trying to avoid. Fortunately, there are replicated data systems (e.g., Orca [2] or COTERIE <ref> [24] </ref>) that provide replicated objects that are well suited to interactive applications, and it is upon the second of these systems that Repo-3D is built. 3 RELATED WORK There has been a significant amount of work that falls under the first, older definition of distributed graphics. <p> Repo-3D relies on a number of Modula-3 libraries, as illustrated in Figure 2. Distributed data sharing is provided by two packages, the Network Object client-server object package [5], and the Replicated Object shared object package <ref> [24] </ref> (see Section 4.1). DistAnim-3D is derived from Anim-3D [25], a powerful, non-distributed, general-purpose 3D library originally designed for 3D algorithm animation (see Section 4.2).
Reference: [25] <author> M. A. Najork and M. H. Brown. Obliq-3D: </author> <title> A High-level, Fastturn-around 3D Animation System. </title> <journal> IEEE Transactions on Visualization and Computer Graphics , 1(2):175145, </journal> <month> June </month> <year> 1995. </year>
Reference-contexts: Extending this single database model to a distributed 3D graphics library is the goal of our work on Repo-3D. Repo-3D is an object-oriented, high-level graphics package, derived from Obliq-3D <ref> [25] </ref>. Its 3D graphics facilities are similar to those of other modern high-level graphics libraries. However, the objects used to create the graphical scenes are directly distribut-ablefrom the programmers viewpoint, the objects reside in one large distributed shared memory (DSM) instead of in a single process. <p> Repo-3D relies on a number of Modula-3 libraries, as illustrated in Figure 2. Distributed data sharing is provided by two packages, the Network Object client-server object package [5], and the Replicated Object shared object package [24] (see Section 4.1). DistAnim-3D is derived from Anim-3D <ref> [25] </ref>, a powerful, non-distributed, general-purpose 3D library originally designed for 3D algorithm animation (see Section 4.2).
Reference: [26] <author> R. Ben-Natan. </author> <title> CORBA: A Guide to the Common Object Request Broker Architecture, </title> <publisher> McGraw Hill, </publisher> <year> 1995. </year>
Reference-contexts: Of the tools available for integrating distributed objects into programming languages, client-server data sharing is by far the most common approach, as exemplified by CORBA <ref> [26] </ref>, Modula-3 Network Objects [5], and Java RMI [39]. Unfortunately, interactive graphical applications, such as virtual reality, require that the data used to refresh the display be local to the process doing the rendering or acceptable frame refresh rates will not be achieved.
Reference: [27] <author> D. Phillips, M. Pique, C. Moler, J. Torborg, D. Greenberg. </author> <title> Distributed Graphics: Where to Draw the Lines? Panel Transcript, </title> <note> SIGGRAPH 89, available at: http://www.siggraph.org:443/publications/panels/siggraphi89/ </note>
Reference-contexts: 1 INTRODUCTION Traditionally, distributed graphics has referred to the architecture of a single graphical application whose components are distributed over multiple machines <ref> [14, 15, 19, 27] </ref> (Figure 1 ). By taking advantage of the combined power of multiple machines, and the particular features of individual machines, otherwise impractical applications became feasible.
Reference: [28] <author> A. Prakash and H. S. Shim. DistView: </author> <title> Support for Building Efficient Collaborative Applications Using Replicated Objects. </title> <booktitle> In Proc. ACM CSCW 94 , pages 153162, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: SIMNET [7], and the later NPSNet [41], are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment. The techniques for object sharing implemented in recent CSCW toolkits <ref> [28, 30, 34, 37] </ref> provide some of the features we need, particularly automatic replication of data to ease construction of distributed applications. However, none of these toolkits has integrated the distribution of data into its programming languages object model as tightly as we desire.
Reference: [29] <author> J. Rohlf and J. Helman, IRIS Performer: </author> <title> A High Performance Multiprocessing Toolkit for Real-Time -3D- Graphics, </title> <booktitle> In Proc. ACM SIGGRAPH 94 , pages 381394, </booktitle> <year> 1994. </year>
Reference-contexts: This is the definition that we use here. While many excellent, high-level programming libraries are available for building stand-alone 3D applications (e.g. Inventor [35], Performer <ref> [29] </ref>, Java 3D [33]), there are no similarly powerful and general libraries for building distributed 3D graphics applications. <p> Most high-level graphics libraries, such as UGA [40], Inventor [35] and Java 3D [33], do not provide any support for distribution. Others, such as Performer <ref> [29] </ref>, provide support for distributing components of the 3D graphics rendering system across multiple processors, but do not support distribution across multiple machines. One notable exception is TBAG [13], a high-level constraint-based, declarative 3D graphics framework. Scenes in TBAG are defined using constrained relationships between time-varying functions.
Reference: [30] <author> M. Roseman and S. Greenberg. </author> <title> Building Real-Time Groupware with GroupKit, a Groupware Toolkit. </title> <journal> ACM Transactions on Computer-Human Interaction , 3(1):66106, </journal> <month> March </month> <year> 1996. </year>
Reference-contexts: SIMNET [7], and the later NPSNet [41], are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment. The techniques for object sharing implemented in recent CSCW toolkits <ref> [28, 30, 34, 37] </ref> provide some of the features we need, particularly automatic replication of data to ease construction of distributed applications. However, none of these toolkits has integrated the distribution of data into its programming languages object model as tightly as we desire.
Reference: [31] <author> C. Shaw and M. Green. </author> <title> The MR Toolkit Peers Package and Experiment. </title> <booktitle> In Proc. IEEE VRAIS 93 , pages 1822, </booktitle> <month> Sept </month> <year> 1993. </year>
Reference-contexts: For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database. Most DVEs <ref> [11, 12, 16, 31, 32] </ref> provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications. They implement a higher level of abstraction, providing support for rooms, objects, avatars, collision detection, and other things needed in single, shared, immersive virtual environments.
Reference: [32] <author> G. Singh, L. Serra, W. Png, A. Wong, and H. Ng. BrickNet: </author> <title> Sharing Object Behaviors on the Net. </title> <booktitle> In Proc. IEEE VRAIS 95 , pages 1925, </booktitle> <year> 1995. </year>
Reference-contexts: For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database. Most DVEs <ref> [11, 12, 16, 31, 32] </ref> provide support for creating shared virtual environments, not general purpose interactive 3D graphics applications. They implement a higher level of abstraction, providing support for rooms, objects, avatars, collision detection, and other things needed in single, shared, immersive virtual environments.
Reference: [33] <author> H. Sowizral, K. Rushforth, and M. Deering. </author> <title> The Java 3D API Specification, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1998. </year>
Reference-contexts: This is the definition that we use here. While many excellent, high-level programming libraries are available for building stand-alone 3D applications (e.g. Inventor [35], Performer [29], Java 3D <ref> [33] </ref>), there are no similarly powerful and general libraries for building distributed 3D graphics applications. <p> While some of these systems can be used to display graphics on more than one display, they were not designed to support high-level sharing of graphical scenes. Most high-level graphics libraries, such as UGA [40], Inventor [35] and Java 3D <ref> [33] </ref>, do not provide any support for distribution. Others, such as Performer [29], provide support for distributing components of the 3D graphics rendering system across multiple processors, but do not support distribution across multiple machines. One notable exception is TBAG [13], a high-level constraint-based, declarative 3D graphics framework.
Reference: [34] <author> M. Stefik, G. Foster, D. G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond The Chalkboard: Computer Support for Collaboration and Problem Solving in Meetings. </title> <type> CACM 47, </type> <month> January </month> <year> 1987. </year>
Reference-contexts: SIMNET [7], and the later NPSNet [41], are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment. The techniques for object sharing implemented in recent CSCW toolkits <ref> [28, 30, 34, 37] </ref> provide some of the features we need, particularly automatic replication of data to ease construction of distributed applications. However, none of these toolkits has integrated the distribution of data into its programming languages object model as tightly as we desire.
Reference: [35] <author> P. S. Strauss and R. Carey, </author> <title> An Object-Oriented 3D Graphics Toolkit, </title> <booktitle> In Computer Graphics (Proc. ACM SIGGRAPH 92) , pages 341349, </booktitle> <month> Aug, </month> <year> 1992. </year>
Reference-contexts: This is the definition that we use here. While many excellent, high-level programming libraries are available for building stand-alone 3D applications (e.g. Inventor <ref> [35] </ref>, Performer [29], Java 3D [33]), there are no similarly powerful and general libraries for building distributed 3D graphics applications. <p> Keeping these dual databases synchronized is a complex, tedious, and error-prone endeavor. In contrast, some non-distributed libraries, such as Inventor <ref> [35] </ref>, allow programmers to avoid this problem by using the graphical scene description to encode application state. Extending this single database model to a distributed 3D graphics library is the goal of our work on Repo-3D. Repo-3D is an object-oriented, high-level graphics package, derived from Obliq-3D [25]. <p> While some of these systems can be used to display graphics on more than one display, they were not designed to support high-level sharing of graphical scenes. Most high-level graphics libraries, such as UGA [40], Inventor <ref> [35] </ref> and Java 3D [33], do not provide any support for distribution. Others, such as Performer [29], provide support for distributing components of the 3D graphics rendering system across multiple processors, but do not support distribution across multiple machines.
Reference: [36] <author> Sun Microsystems, Inc. </author> <title> The Java Shared Data Toolkit, </title> <note> 1998. Unsupported software, available at: http://developer.javasoft.com/developer/earlyAccess/jsdt/ </note>
Reference-contexts: We do this in our Modula-3 implementation, and it would be equally applicable to an implementation in C++ or Java. For example, the JSDT <ref> [36] </ref> data-sharing package in Java uses a similar approach. Second, the Replicated Object package does not pay attention to (or even care) when the internal data fields of an object change. <p> While Java does not yet have a replicated object system as powerful as the Replicated Object package, a package such as JSDT <ref> [36] </ref> (which focuses more on data communication than high-level object semantics) may be a good starting point. Work is also being done on interpreted, distributed programming languages on top of Java (e.g., Ambit [9]).
Reference: [37] <author> I. Tou, S. Berson, G. Estrin, Y. Eterovic, and E. Wu. </author> <title> Prototyping Synchronous Group Applications. </title> <note> IEEE Computer May 1994. </note>
Reference-contexts: SIMNET [7], and the later NPSNet [41], are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment. The techniques for object sharing implemented in recent CSCW toolkits <ref> [28, 30, 34, 37] </ref> provide some of the features we need, particularly automatic replication of data to ease construction of distributed applications. However, none of these toolkits has integrated the distribution of data into its programming languages object model as tightly as we desire.
Reference: [38] <author> R. Waters and D. Anderson. </author> <title> The Java Open Community Version 0.9 Application Program Interface. </title> <month> Feb, </month> <year> 1997. </year> <note> Available online at: http://www.merl.com/opencom/opencom-java-api.html </note>
Reference-contexts: Most of the current effort has been focused on using Java as a mechanism to facilitate multi-user VRML worlds (e.g., Open Communities <ref> [38] </ref>). Unfortunately, these efforts concentrate on the particulars of implementing shared virtual environments and fall short of providing a general-purpose shared graphics library. For example, the Open Communities work is being done on top of SPLINE [1], which supports only a single top-level world in the local scene database.
Reference: [39] <author> A. Wollrath, R. Riggs, and J. Waldo. </author> <title> A Distributed Object Model for the Java System, </title> <booktitle> In Proc. USENIX COOTS 96 , pages 219231, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Of the tools available for integrating distributed objects into programming languages, client-server data sharing is by far the most common approach, as exemplified by CORBA [26], Modula-3 Network Objects [5], and Java RMI <ref> [39] </ref>. Unfortunately, interactive graphical applications, such as virtual reality, require that the data used to refresh the display be local to the process doing the rendering or acceptable frame refresh rates will not be achieved. <p> The package is similar to other remote method invocation (RMI) packages developed later, such as the Java RMI library <ref> [39] </ref>. All method invocations are forwarded to the original object, where they are executed in the order they are received. The Replicated Object package supports replicated objects. Each process can call any method of an object it shares, just as it can with a simple or remote object.
Reference: [40] <author> R. Zeleznik, D. Conner, M. Wloka, D. Aliaga, N. Huang, P. Hubbard, B. Knep, H. Kaufman, J. Hughes, and A. van Dam. </author> <title> An Object-oriented Framework for the Integration of Interactive Animation Techniques. </title> <booktitle> In Computer Graphics (SIGGRAPH '91 Proceedings) , pages 105112, </booktitle> <month> July, </month> <year> 1991. </year>
Reference-contexts: While some of these systems can be used to display graphics on more than one display, they were not designed to support high-level sharing of graphical scenes. Most high-level graphics libraries, such as UGA <ref> [40] </ref>, Inventor [35] and Java 3D [33], do not provide any support for distribution. Others, such as Performer [29], provide support for distributing components of the 3D graphics rendering system across multiple processors, but do not support distribution across multiple machines.
Reference: [41] <author> M. J. Zyda, D. R. Pratt, J. G. Monahan, and K. P. Wilson. NPSNET: </author> <title> Constructing a 3D Virtual World. </title> <booktitle> In Proc. 1992 ACM Symp. on Interactive 3D Graphics , pages 147156, </booktitle> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Some use communication schemes that prevent them from scaling beyond a relatively small number of distributed processes, but for most the focus is explicitly on efficient communication. SIMNET [7], and the later NPSNet <ref> [41] </ref>, are perhaps the best known large-scale distributed virtual-environment systems. They use a fixed, well-defined communication protocol designed to support a single, large-scale, shared, military virtual environment.
References-found: 41

