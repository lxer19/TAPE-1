URL: http://www.csl.sri.com/~gong/papers/sisis.ps.gz
Refering-URL: http://www.csl.sri.com/~gong/papers/pubs92.html
Root-URL: 
Email: reiter@cs.cornell.edu ken@cs.cornell.edu li@cambridge.oracorp.com  
Title: Integrating Security in a Group Oriented Distributed System  
Author: Michael Reiter Kenneth Birman Li Gong 
Address: 675 Massachusetts Ave. Ithaca, NY 14853 Ithaca, NY 14853 Cambridge, MA 02139  
Affiliation: Dept. of Computer Science Dept. of Computer Science ORA Corporation Cornell University Cornell University  
Abstract: A distributed security architecture is proposed for incorporation into group oriented distributed systems, and in particular, into the Isis distributed programming toolkit. The primary goal of the architecture is to make common group oriented abstractions robust in hostile settings, in order to facilitate the construction of high performance distributed applications that can tolerate both component failures and malicious attacks. These abstractions include process groups and causal group multicast. Moreover, a delegation and access control scheme is proposed for use in group oriented systems. The focus of the paper is the security architecture; particular cryptosystems and key exchange protocols are not emphasized. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Birman, K. P., Cooper, R., and Gleeson, B. </author> <title> Design alternatives for process group membership and multicast. </title> <type> Tech. Rep. 91-1257, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Many systems, however, utilize more general types of communication which have not enjoyed the same amount of attention from the security community. One such alternative is group oriented communication, based on the process group abstraction <ref> [1] </ref>. <p> Informally, one message is said to be causally before another if the former was sent before and could have affected the latter [16]. Causal delivery ordering has been shown to be crucial in systems such as Isis that exploit asynchronous operations to achieve high performance <ref> [1] </ref>, because when messages are asynchronously pipelined to destinations, a message could be received at the destination site before another causally before it. The danger is that, e.g., an update to a data structure could be delivered to an application before the message initializing the data structure.
Reference: [2] <author> Birman, K. P., and Joseph, T. A. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computing Systems 5, </journal> <month> 1 (Feb. </month> <year> 1987), </year> <pages> 47-76. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great. <p> or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. [18, 5, 2, 19, 23, 14, 13]) and have been shown to simplify the implementation of fault tolerant applications <ref> [5, 2, 14] </ref>. The benefit in preserving process group abstractions in hostile environments could therefore be great. In particular, it would facilitate the construction of applications that can tolerate both component failures and malicious attacks. <p> Secure group oriented foundations will enable applications to more easily realize the benefits of this research. This paper presents a distributed security architecture to be integrated with group oriented systems and, in particular, with the Isis toolkit <ref> [2] </ref>. 1 Isis is a toolkit for distributed programming that provides process group and reliable group multicast abstractions. With respect to Isis, the aims of this work are twofold. <p> A copy of MUTS learns about changes to the site membership of a group from the layer above it, which communicates with other sites in the group and with the Isis failure detector <ref> [2, 21] </ref> to make this determination. When MUTS receives a message from a higher layer to be multi-cast to a group, it opens a connection to the members of its current member list for that group, if one does not already exist.
Reference: [3] <author> Birman, K. P., Schiper, A., and Stephen-son, P. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computing Systems 9, </journal> <month> 3 (Aug. </month> <year> 1991), </year> <pages> 272-314. </pages>
Reference-contexts: The multicast primitive that provides this property is called CBCAST and is a fundamental building block on which other Isis abstractions are implemented <ref> [3] </ref>. To summarize, Isis provides process group and group multicast abstractions. Notification of group membership changes are coordinated with respect to the delivery of group multicasts. <p> Intuitively, s 3 might do this by omitting to include information on m 3 that conveys m 3 's causal relationship with m 1 . Such an attack is possible with several of the causal multicast protocols described in <ref> [3] </ref>. The danger in this is apparent in the OTC example of section 1: suppose that G 1 is the replicated trading service, m 1 contains a client's request to purchase stock, and m 2 reflects that (intended) purchase. <p> We provide these guarantees through a combination of several protocols described in <ref> [3] </ref>. Here we describe protocols that suffice when group memberships do not change; in the remainder of this section we treat each (uncorrupt) group as simply a static set of processes. (Although we synchronize communication on view changes precisely as in [3], this introduces complexities that are best omitted for the <p> guarantees through a combination of several protocols described in <ref> [3] </ref>. Here we describe protocols that suffice when group memberships do not change; in the remainder of this section we treat each (uncorrupt) group as simply a static set of processes. (Although we synchronize communication on view changes precisely as in [3], this introduces complexities that are best omitted for the sake of brevity.) The protocols described here also require that communication with corrupt sites be performed in a point-to-point fashion, as suggested at the beginning of section 4. <p> The proof that these protocols satisfy the first guarantee is given in <ref> [3] </ref>. We now argue that these protocols provide the second guarantee. Suppose that G and G 0 are different groups, and that ~m is received at r's site s r after m 0 was multicast, but delivered to r before m.
Reference: [4] <author> Birrell, A. D. </author> <title> Secure communication using remote procedure calls. </title> <journal> ACM Transactions on Computing Systems 3, </journal> <month> 1 (Feb. </month> <year> 1985), </year> <pages> 1-14. </pages>
Reference-contexts: 1 Introduction Systems that address security issues in distributed environments have traditionally been constructed upon the remote procedure call (RPC) paradigm of communication (e.g., <ref> [4, 24, 28, 17] </ref>). Many systems, however, utilize more general types of communication which have not enjoyed the same amount of attention from the security community. One such alternative is group oriented communication, based on the process group abstraction [1].
Reference: [5] <author> Cheriton, D. R., and Zwaenepoel, W. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Transactions on Computing Systems 3, </journal> <month> 2 (May </month> <year> 1985), </year> <pages> 77-107. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great. <p> or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. [18, 5, 2, 19, 23, 14, 13]) and have been shown to simplify the implementation of fault tolerant applications <ref> [5, 2, 14] </ref>. The benefit in preserving process group abstractions in hostile environments could therefore be great. In particular, it would facilitate the construction of applications that can tolerate both component failures and malicious attacks.
Reference: [6] <institution> Data encryption standard. National Bureau of Standards, Federal Information Processing Standards Publication 46, Government Printing Office, </institution> <address> Washington, D. C., </address> <year> 1977. </year>
Reference-contexts: In addition, an application can request that its message be encrypted, in which case any fragment of that message included in packet m will also be encrypted under K (e.g., using DES <ref> [6] </ref>). Provided that the connection is fresh (i.e., established with a non-replayed message), each destination can verify that m is not a replay, because it contains the sequence number for the connection.
Reference: [7] <author> Desmedt, Y. </author> <title> Society and group oriented cryptography: A new concept. </title> <booktitle> In Proceedings of CRYPTO '87 (Aug. </booktitle> <year> 1987), </year> <pages> pp. 120-127. </pages> <note> Published as Lecture Notes in Computer Science 293. </note>
Reference-contexts: Another impetus to preserve process group abstractions in hostile environments is that the cryptographic community has identified several practical security needs in settings where groups occur naturally <ref> [7] </ref>. Proposed solutions (e.g., [10, 15, 8]), however, presuppose a group oriented infrastructure which cannot be effectively provided in a hostile environment by current systems. Secure group oriented foundations will enable applications to more easily realize the benefits of this research.
Reference: [8] <author> Desmedt, Y., Frankel, Y., and Yung, M. </author> <title> Multi-receiver/multi-sender network security: Efficient authenticated multicast/feedback. </title> <booktitle> In Proceedings of IEEE INFOCOM (May 1992). </booktitle>
Reference-contexts: Another impetus to preserve process group abstractions in hostile environments is that the cryptographic community has identified several practical security needs in settings where groups occur naturally [7]. Proposed solutions (e.g., <ref> [10, 15, 8] </ref>), however, presuppose a group oriented infrastructure which cannot be effectively provided in a hostile environment by current systems. Secure group oriented foundations will enable applications to more easily realize the benefits of this research.
Reference: [9] <author> Diffie, W. </author> <title> The first ten years of public-key cryptography. </title> <booktitle> Proceedings of the IEEE 76, </booktitle> <month> 5 (May </month> <year> 1988), </year> <pages> 560-577. </pages>
Reference-contexts: In Isis we employ such a service to establish secure channels by which communication keys can be distributed. We choose a public key authentication service due to the security advantages that can be achieved <ref> [9] </ref>. Associated with the authentication service is a private key (known only to the service) and a corresponding public key.
Reference: [10] <author> Frankel, Y. </author> <title> A practical protocol for large group oriented networks. </title> <booktitle> In Proceedings of EU-ROCRYPT '89 (Apr. </booktitle> <year> 1989), </year> <pages> pp. 56-61. </pages> <note> Published as Lecture Notes in Computer Science 434. </note>
Reference-contexts: Another impetus to preserve process group abstractions in hostile environments is that the cryptographic community has identified several practical security needs in settings where groups occur naturally [7]. Proposed solutions (e.g., <ref> [10, 15, 8] </ref>), however, presuppose a group oriented infrastructure which cannot be effectively provided in a hostile environment by current systems. Secure group oriented foundations will enable applications to more easily realize the benefits of this research.
Reference: [11] <author> Gasser, M., and McDermott, E. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy (May 1990), </booktitle> <pages> pp. 20-30. </pages>
Reference-contexts: For example, if smart-card technology is available, then each user and site can be treated as an Isis group and the delegation mechanisms of section 5 can be used to authenticate the user identifiers of processes executed from remote sites in a fashion similar to that of DSSA <ref> [11] </ref>. Even without such technology, the authentication mechanisms of section 4.1 provide a secure communication channel between any two sites that facilitates the authentication of user identifiers. of virtual address spaces stored on external media. <p> This flavor of authorization is related to many concepts that have appeared in the literature in recent years, including authentication forwarding [26], cascaded authentication [25], and delegation <ref> [11] </ref>. Informally, each of these terms connotes the means by which one party confers access rights to another, as exemplified by the client delegating authority to the trading service in the previous example. <p> This is true because the delegating group can restrict what access rights are transferred to the delegated group by identifying itself appropriately. This is known as delegating by roles and has been used in other delegation schemes (e.g., <ref> [11, 17] </ref>). Intuitively, associated with each role of a group is some subset of the access rights that the group is allowed to delegate to others.
Reference: [12] <author> Gong, L. </author> <title> A secure identity-based capability system. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy (May 1989), </booktitle> <pages> pp. 56-63. </pages>
Reference-contexts: Thus, we expect that the economy of capabilities would impact overall system performance only minimally. The scheme we propose here is sufficiently powerful to be used as the sole means to control access to groups, although it could also easily be adapted for use in a hybrid scheme (e.g., <ref> [12] </ref>). The straightforward criteria on which to restrict access to groups are the owner and site of the process requesting access.
Reference: [13] <author> Kaashoek, F. M., and Tanenbaum, A. S. </author> <title> Group communication in the Amoeba distributed operating system. </title> <booktitle> In Proceedings of the IEEE International Conference on Distributed Computing Systems (May 1991), </booktitle> <pages> pp. 222-230. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great.
Reference: [14] <author> Ladin, R., Liskov, B., and Shrira, L. </author> <title> Lazy replication: Exploiting the semantics of distributed services. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Distributed Computing (Aug. </booktitle> <year> 1990), </year> <pages> pp. 43-57. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great. <p> or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. [18, 5, 2, 19, 23, 14, 13]) and have been shown to simplify the implementation of fault tolerant applications <ref> [5, 2, 14] </ref>. The benefit in preserving process group abstractions in hostile environments could therefore be great. In particular, it would facilitate the construction of applications that can tolerate both component failures and malicious attacks.
Reference: [15] <author> Laih, C. S., and Harn, L. </author> <title> Generalized threshold cryptosystems. </title> <booktitle> In Proceedings of ASI-ACRYPT '91 (Nov. </booktitle> <year> 1991). </year>
Reference-contexts: Another impetus to preserve process group abstractions in hostile environments is that the cryptographic community has identified several practical security needs in settings where groups occur naturally [7]. Proposed solutions (e.g., <ref> [10, 15, 8] </ref>), however, presuppose a group oriented infrastructure which cannot be effectively provided in a hostile environment by current systems. Secure group oriented foundations will enable applications to more easily realize the benefits of this research.
Reference: [16] <author> Lamport, L. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: One guarantee of particular interest in this paper is that messages are delivered in an order consistent with potential causality. Informally, one message is said to be causally before another if the former was sent before and could have affected the latter <ref> [16] </ref>. Causal delivery ordering has been shown to be crucial in systems such as Isis that exploit asynchronous operations to achieve high performance [1], because when messages are asynchronously pipelined to destinations, a message could be received at the destination site before another causally before it.
Reference: [17] <author> Lampson, B., Abadi, M., Burrows, M., and Wobber, E. </author> <title> Authentication in distributed systems: Theory and practice. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles (Oct. </booktitle> <year> 1991), </year> <pages> pp. 165-182. </pages> <note> Published as ACM Operating Systems Review 25, 5. </note>
Reference-contexts: 1 Introduction Systems that address security issues in distributed environments have traditionally been constructed upon the remote procedure call (RPC) paradigm of communication (e.g., <ref> [4, 24, 28, 17] </ref>). Many systems, however, utilize more general types of communication which have not enjoyed the same amount of attention from the security community. One such alternative is group oriented communication, based on the process group abstraction [1]. <p> This is true because the delegating group can restrict what access rights are transferred to the delegated group by identifying itself appropriately. This is known as delegating by roles and has been used in other delegation schemes (e.g., <ref> [11, 17] </ref>). Intuitively, associated with each role of a group is some subset of the access rights that the group is allowed to delegate to others.
Reference: [18] <author> Ousterhout, J. K., Scelza, D. A., and Sindhu, P. S. </author> <title> Medusa: An experiment in distributed operating system structure. </title> <journal> Communications of the ACM 23, </journal> <month> 2 (Feb. </month> <year> 1980), </year> <pages> 92-105. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great.
Reference: [19] <author> Peterson, L. L., Buchholz, N. C., and Schlichting, R. D. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computing Systems 7, </journal> <month> 3 (Aug. </month> <year> 1989), </year> <pages> 217-246. </pages>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great.
Reference: [20] <author> Reiter, M. K., and Birman, K. P. </author> <title> How to securely replicate services. </title> <note> Submitted for publication, </note> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: These are services provided by Isis and will be discussed briefly in sections 4.1 and 4.2, respectively. The security of these services is a topic of ongoing research; one possible approach is described in <ref> [20] </ref>. 4 Protecting the Isis abstractions Informally, we would like to make the Isis abstractions described in section 2 robust in the system model of section 3. In particular, we would like to ensure that all processes in a group observe correct deliveries of group views and messages. <p> Each site's certificate is subsequently disseminated from the site itself, with the site contacting the authentication service for a new certificate when its certificate expires. The exact implementation of the authentication service is a topic of ongoing research; one possible approach is described in <ref> [20] </ref>. A communication key is sent to a site after obtaining the site's certificate and encrypting the communication key under the site's public key. This exchange takes place as part of the group join protocol, which will be described in the next section.
Reference: [21] <author> Ricciardi, A. M., and Birman, K. P. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Distributed Computing (Aug. </booktitle> <year> 1991), </year> <pages> pp. 341-351. </pages>
Reference-contexts: A copy of MUTS learns about changes to the site membership of a group from the layer above it, which communicates with other sites in the group and with the Isis failure detector <ref> [2, 21] </ref> to make this determination. When MUTS receives a message from a higher layer to be multi-cast to a group, it opens a connection to the members of its current member list for that group, if one does not already exist.
Reference: [22] <author> Rivest, R. L. </author> <title> Cryptography. In Handbook of Theoretical Computer Science, Volume A, Algorithms and Complexity, </title> <editor> J. van Leeuwen, Ed. </editor> <publisher> El-sevier Science Publishers B. V., </publisher> <year> 1990, </year> <journal> ch. </journal> <volume> 13, </volume> <pages> pp. 717-755. </pages>
Reference-contexts: Thus, given a family of pseudo-random functions ff K g K2K , indexed by keys from some key space K, two parties that share a secret key K can authenticate messages between each other by appending f K (m) to each message m <ref> [22] </ref>. (In Isis, we will efficiently approximate this technique, e.g., with one-way hash functions [27].) For MUTS we generalize these ideas to take advantage of hardware multicast capabilities that may be exploited by the transport protocol.
Reference: [23] <author> Rozier, M., et al. </author> <title> Overview of the Chorus distributed operating systems. </title> <type> Tech. Rep. </type> <institution> CS/TR-90-25, Chorus Systemes, </institution> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Any opinions, conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views, policies or decisions of the National Science Foundation or the Department of Defense. <ref> [18, 5, 2, 19, 23, 14, 13] </ref>) and have been shown to simplify the implementation of fault tolerant applications [5, 2, 14]. The benefit in preserving process group abstractions in hostile environments could therefore be great.
Reference: [24] <author> Satyanarayanan, M. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM Transactions on Computing Systems 7, </journal> <month> 3 (Aug. </month> <year> 1989), </year> <pages> 247-280. </pages>
Reference-contexts: 1 Introduction Systems that address security issues in distributed environments have traditionally been constructed upon the remote procedure call (RPC) paradigm of communication (e.g., <ref> [4, 24, 28, 17] </ref>). Many systems, however, utilize more general types of communication which have not enjoyed the same amount of attention from the security community. One such alternative is group oriented communication, based on the process group abstraction [1].
Reference: [25] <author> Sollins, K. R. </author> <title> Cascaded authentication. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy (Apr. </booktitle> <year> 1988), </year> <pages> pp. 156-163. </pages>
Reference-contexts: This flavor of authorization is related to many concepts that have appeared in the literature in recent years, including authentication forwarding [26], cascaded authentication <ref> [25] </ref>, and delegation [11]. Informally, each of these terms connotes the means by which one party confers access rights to another, as exemplified by the client delegating authority to the trading service in the previous example. <p> Of course, G 3 could delegate yet further in a similar fashion, and in general, credentials could become arbitrarily long. This delegation scheme is similar to that in <ref> [25] </ref>, and the reader is referred there for a general discussion of its features. The choice of whether to delegate to a group name or a group address has subtle implications.
Reference: [26] <author> Steiner, J. G., Neuman, C., and Schiller, J. I. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of the USENIX Winter Conference (Feb. </booktitle> <year> 1988), </year> <pages> pp. 191-202. </pages>
Reference-contexts: This flavor of authorization is related to many concepts that have appeared in the literature in recent years, including authentication forwarding <ref> [26] </ref>, cascaded authentication [25], and delegation [11]. Informally, each of these terms connotes the means by which one party confers access rights to another, as exemplified by the client delegating authority to the trading service in the previous example.
Reference: [27] <author> Tsudik, G. </author> <title> Message authentication with one-way hash functions. </title> <booktitle> In Proceedings of IEEE IN-FOCOM (May 1992). </booktitle>
Reference-contexts: ff K g K2K , indexed by keys from some key space K, two parties that share a secret key K can authenticate messages between each other by appending f K (m) to each message m [22]. (In Isis, we will efficiently approximate this technique, e.g., with one-way hash functions <ref> [27] </ref>.) For MUTS we generalize these ideas to take advantage of hardware multicast capabilities that may be exploited by the transport protocol. Instead of estab-lishing a shared key for every pair of MUTS layers, we establish a shared key per connection, called a connection key.
Reference: [28] <author> Tygar, J. D., and Yee, B. S. Strongbox. </author> <title> In Camelot and Avalon, A Distributed Transaction Facility, </title> <editor> J. L. Eppinger, L. B. Mummert, and A. Z. Spector, Eds. </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Ma-teo, California, </address> <year> 1991, </year> <journal> ch. </journal> <volume> 24, </volume> <pages> pp. 381-400. </pages>
Reference-contexts: 1 Introduction Systems that address security issues in distributed environments have traditionally been constructed upon the remote procedure call (RPC) paradigm of communication (e.g., <ref> [4, 24, 28, 17] </ref>). Many systems, however, utilize more general types of communication which have not enjoyed the same amount of attention from the security community. One such alternative is group oriented communication, based on the process group abstraction [1].
Reference: [29] <author> Van Renesse, R., Birman, K., Glade, B., and Stephenson, P. </author> <title> Reliable multicast between micro-kernels. </title> <booktitle> In Proceedings of the USENIX Microkernels and Other Kernel Architectures Workshop (Apr. </booktitle> <year> 1992). </year>
Reference-contexts: We then formulate the specific causal guarantees we provide, and describe protocols to implement them. 4.1 Multicast authentication We introduce authentication mechanisms at the lowest layer of the Isis toolkit, namely the Multicast Transport Service (MUTS) <ref> [29] </ref>. A copy of MUTS resides on each site, logically at the transport layer of the ISO OSI Reference Model, and provides to the layers above it at-most-once, sequenced multicast communication to other sites.
Reference: [30] <author> Voydock, V. L., and Kent, S. T. </author> <title> Security mechanisms in high-level network protocols. </title> <journal> ACM Computing Surveys 15, </journal> <month> 2 (June </month> <year> 1983), </year> <pages> 135-171. </pages>
Reference-contexts: We also assume that the intruder does not engage in traffic analysis attacks; i.e., we do not consider such attacks here and assume that encryption is sufficient to hide the contents of a message from a network intruder. The reader should see <ref> [30] </ref> for a survey of network attacks. We also assume that sites may be corrupted by an intruder during system execution. Once corrupted, a site may exhibit arbitrarily malicious behaviors, again limited by the cryptosystems and signature schemes we employ.
References-found: 30

