URL: ftp://ftp.cs.pitt.edu/panos/PMDBnet/icde_97.ps.gz
Refering-URL: http://www.cs.pitt.edu/~panos/publications/all.html
Root-URL: 
Email: yjast1+@pitt.edu  panos@cs.pitt.edu  steve@ee.pitt.edu  
Title: An Argument in Favor of the Presumed Commit Protocol  
Author: Yousef J. Al-Houmaily Panos K. Chrysanthis Steven P. Levitan 
Address: Pittsburgh Pittsburgh, PA 15261  Pittsburgh Pittsburgh, PA 15260  Pittsburgh Pittsburgh, PA 15261  
Affiliation: Dept. of Electrical Engineering University of  Dept. of Computer Science University of  Dept. of Electrical Engineering University of  
Abstract: We argue in favor of the presumed commit protocol by proposing two new presumed commit variants that significantly reduce the cost of logging activities associated with the original presumed commit protocol. Furthermore, for read-only transactions, we apply our unsolicited update-vote optimization and show that the cost associated with this type of transactions is the same in both presumed commit and presumed abort protocols, thus, nullifying the basis for the argument that favors the presumed abort protocol. This is especially important for modern distributed environments which are characterized by high reliability and high probability of transactions being committed rather than aborted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Al-Houmaily and P. Chrysanthis. </author> <title> Two-Phase Commit in Gigabit-Networked Distributed Databases. </title> <booktitle> Proc. of the 8th Int'l Conf. on Parallel and Distributed Computing Systems, </booktitle> <pages> pp. 554-560, </pages> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions.
Reference: [2] <author> Y. Al-Houmaily and P. Chrysanthis. </author> <title> Dealing with Incompatible Presumptions of Commit Protocols in Multi-database Systems. </title> <booktitle> Proc. of the 11h ACM Annual Symposium on Applied Computing, </booktitle> <pages> pp. 554-560, </pages> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: This argument is further strengthened by the fact that the incompatibility between these two variants is not an issue anymore because PrA and PrC can be interoperated in a practical manner <ref> [2] </ref>. The rest of this paper is structured as follows. In the next section, to establish the stage for our arguments, we briefly overview the basic 2PC, PrA and PrC in the context of two-level as well as multi-level transaction execution models. We also discuss the traditional read-only optimization.
Reference: [3] <author> Y. Al-Houmaily and P. Chrysanthis. </author> <title> The Implicit Yes-Vote Commit Protocol with Delegation of Commitment. </title> <booktitle> Proc. of the 9th Int'l Conf. on Parallel and Distributed Computing Systems, </booktitle> <pages> pp. 804-810, </pages> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions.
Reference: [4] <author> Y. Al-Houmaily, P. Chrysanthis and S. Levitan. </author> <title> Enhancing the Performance of Presumed Commit Protocol. </title> <booktitle> Proc. of the 12h ACM Annual Symposium on Applied Computing, </booktitle> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: The second PrC variant is called the re-structured PrC protocol which is based on the idea of flattening the transaction trees [15]. After we have presented the new PrC variants, we present our unsolicited update-vote optimization <ref> [4] </ref> and apply it to both PrA and PrC (including the two proposed PrC variants) and show that the cost associated with read-only transactions becomes the same in both PrA and PrC, with PrC performing better than PrA for update and partially read-only transactions. 4.1. <p> The Unsolicited Update-Vote Optimization Recall that in the traditional read-only optimization (section 2.2), a coordinator determines read-only participants by explicitly polling their votes. To determine which participants are read-only without having to explicitly poll their votes, we have proposed the unsolicited update-vote optimization (UUV) <ref> [4] </ref>. In UUV, a coordinator looks at the participants from another perspective. That is, which participants are update participants. In UUV, when a transaction starts executing, its coordinator marks the transaction as a read-only one in its protocol table.
Reference: [5] <author> P. Bernstein, V. Hadzilacos and N. Goodman. </author> <title> Concur-rency Control and Recovery in Database Systems. </title> <address> Adison-Wesley, Reading, MA, </address> <year> 1987. </year>
Reference-contexts: When the coordinator receives an unsolicited update vote from a participant, it changes the status of the participant from read-only to update and resets the status of the transaction. In the case that each participant site employs a pessimistic <ref> [5] </ref> concurrency control protocol that also avoids cascading abort [5], such as strict two-phase locking [7], the most commercially used protocol, a transaction is guaranteed to be se-rializable and recoverable after all its operations have been executed and acknowledged (see [5] for proof). <p> When the coordinator receives an unsolicited update vote from a participant, it changes the status of the participant from read-only to update and resets the status of the transaction. In the case that each participant site employs a pessimistic <ref> [5] </ref> concurrency control protocol that also avoids cascading abort [5], such as strict two-phase locking [7], the most commercially used protocol, a transaction is guaranteed to be se-rializable and recoverable after all its operations have been executed and acknowledged (see [5] for proof). <p> In the case that each participant site employs a pessimistic <ref> [5] </ref> concurrency control protocol that also avoids cascading abort [5], such as strict two-phase locking [7], the most commercially used protocol, a transaction is guaranteed to be se-rializable and recoverable after all its operations have been executed and acknowledged (see [5] for proof). Thus, the coordinator of a transaction is guaranteed that the transaction is serializable and recoverable at each read-only participant after the execution of each read operation.
Reference: [6] <author> E. Braginski. </author> <title> The X/Open DTP Effort. </title> <booktitle> Proc. of the 4th Int'l Workshop on High Performance Transaction Systems, </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Our investigations led us to three techniques which are presented in this paper and which reduce, and under certain circumstances even eliminate, the logging activities from PrC. Whereas PrA has been the current choice of commercial systems and standards <ref> [6] </ref>, the proposed three techniques when combined with PrC form an argument in its favor to become part of the standards.
Reference: [7] <author> K. Eswaran, J. Gray, R. Lorie and I. Traiger. </author> <title> The Notion of Consistency and Predicate Locks in a Database System. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, Nov. 1976. 
Reference-contexts: In the case that each participant site employs a pessimistic [5] concurrency control protocol that also avoids cascading abort [5], such as strict two-phase locking <ref> [7] </ref>, the most commercially used protocol, a transaction is guaranteed to be se-rializable and recoverable after all its operations have been executed and acknowledged (see [5] for proof).
Reference: [8] <author> J. Gray. </author> <title> Notes on Data Base Operating Systems. In Operating Systems: An Advanced Course, </title> <editor> R. Bayer, R. Graham and G. Seegmuller (Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 60, </volume> <pages> pp. 393-481, </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: 1. Introduction In order to ensure consistent termination of distributed transactions despite site and communication failures, all the sites participating in a transaction's execution engage in an atomic commit protocol such as the two-phase commit protocol (2PC) <ref> [8, 10] </ref>. <p> When a transaction finishes its execution and submits its commit request, its coordinator initiates an atomic commit protocol, such as the two-phase commit protocol. The basic two-phase commit protocol (2PC) <ref> [8, 10] </ref>, as the name implies, consists of two phases, namely a voting phase and a decision phase (Figure 1).
Reference: [9] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. <p> Without loss of generality, we assume that the coordinator of a transaction is the transaction manager at the site where the transaction has been initiated. While still adhering to the traditional ACID (i.e., Atomicity, Consistency, Isolation and Durability) properties of transactions <ref> [9] </ref>, a distributed transaction is decomposed into a set of subtransactions, each of which executes at a single participant site. When a transaction finishes its execution and submits its commit request, its coordinator initiates an atomic commit protocol, such as the two-phase commit protocol. <p> As opposed to PrA, the presumed commit protocol (PrC) is designed to reduce the cost of committing transactions [12, 11]. Instead of interpreting missing information about 1 Writing the decision at the participants and acknowledging it in a lazy fashion <ref> [9] </ref> is an optimization that is not considered here. transactions as abort decisions, in PrC, coordinators interpret missing information about transactions as commit decisions. <p> Similarly, the use of Re-SPrC is limited when the establishment of new direct communication channels (i.e., sessions) between the coordinator and the participants are expensive and should be avoided as much as possible. A situation that exists in some commercial systems <ref> [9] </ref>. On the other hand, RPrC does not suffer from the applicability limitations of ReSPrC even for security reasons. <p> the unsolicited update-vote optimization provide sufficiently appealing efficiency characteristics that make them very attractive to be adopted in commercial systems that use a two-phase commit variant that also force writes initiation records such as the one's based on IBM SNA LU 6.2 architecture, the de facto standard of the industry <ref> [9] </ref>. Acknowledgments We would like to thank George Samaras and the anonymous referees for their helpful comments.
Reference: [10] <author> B. Lampson. </author> <title> Atomic Transactions. In Distributed Systems: Architectureand Implementation An Advanced Course, </title> <editor> B. Lampson (Ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 105, </volume> <pages> pp. 246-265, </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: 1. Introduction In order to ensure consistent termination of distributed transactions despite site and communication failures, all the sites participating in a transaction's execution engage in an atomic commit protocol such as the two-phase commit protocol (2PC) <ref> [8, 10] </ref>. <p> When a transaction finishes its execution and submits its commit request, its coordinator initiates an atomic commit protocol, such as the two-phase commit protocol. The basic two-phase commit protocol (2PC) <ref> [8, 10] </ref>, as the name implies, consists of two phases, namely a voting phase and a decision phase (Figure 1).
Reference: [11] <author> B. Lampson and D. Lomet. </author> <title> A New Presumed Commit Optimization for Two Phase Commit. </title> <booktitle> Proc. of the 19th VLDB Conference, </booktitle> <pages> pp. 630-640, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. <p> transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., [1, 3, 9, 11, 15, 18], most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) <ref> [12, 11] </ref>. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. <p> When the coordinator completes the protocol, it writes a non-forced end record, indicating that the log records pertaining to the transaction can be garbage collected when necessary. The basic 2PC is also referred to as the presumed nothing 2PC protocol (PrN) <ref> [11] </ref> because it treats all transactions uniformly, whether they are to be committed or aborted, requiring information to be explicitly exchanged and logged at all times. <p> However, in the case of a coordinator's failure, there is a hidden presumption in PrN by which the coordinator considers all active transactions at the time of the failure as aborted ones. The presumed abort protocol (PrA) makes this abort presumption explicit <ref> [12, 11] </ref>. Specifically, in PrA, when a coordinator decides to abort a transaction, it does not force-write the abort decision in its log as in PrN (Figure 2). <p> As opposed to PrA, the presumed commit protocol (PrC) is designed to reduce the cost of committing transactions <ref> [12, 11] </ref>. Instead of interpreting missing information about 1 Writing the decision at the participants and acknowledging it in a lazy fashion [9] is an optimization that is not considered here. transactions as abort decisions, in PrC, coordinators interpret missing information about transactions as commit decisions. <p> The same intention has been behind the design of the new presumed commit protocol for the two-level transaction execution model <ref> [11] </ref>. In this section, we present two new PrC variants that effectively eliminate all the intermediate initiation records from cascaded coordinators in the MLTE model. The first PrC variant is called the rooted PrC protocol where only the root coordinator force writes an initiation record.
Reference: [12] <author> C. Mohan, B. Lindsay and R. Obermarck. </author> <title> Transaction Management in the R fl Distributed Data Base Management System. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 378-396, </pages> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., [1, 3, 9, 11, 15, 18], most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) <ref> [12, 11] </ref>. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. <p> PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. To reduce the cost of commit processing further, a number of optimizations have also been proposed, of which the read-only optimization <ref> [12] </ref> is the most significant, given that read-only transactions are the majority in fl Supported in part by N.S.F. under grants IRI-9210588 and IRI-95020091 and a Saudi Arabian graduate student scholarship. any general database system. (See [15] for a survey of the most common two-phase commit optimizations.) Due to the cost <p> However, in the case of a coordinator's failure, there is a hidden presumption in PrN by which the coordinator considers all active transactions at the time of the failure as aborted ones. The presumed abort protocol (PrA) makes this abort presumption explicit <ref> [12, 11] </ref>. Specifically, in PrA, when a coordinator decides to abort a transaction, it does not force-write the abort decision in its log as in PrN (Figure 2). <p> As opposed to PrA, the presumed commit protocol (PrC) is designed to reduce the cost of committing transactions <ref> [12, 11] </ref>. Instead of interpreting missing information about 1 Writing the decision at the participants and acknowledging it in a lazy fashion [9] is an optimization that is not considered here. transactions as abort decisions, in PrC, coordinators interpret missing information about transactions as commit decisions. <p> However, in PrC, a coordinator has to force write an initiation (which is also called collecting in <ref> [12] </ref>) record for each transaction before sending prepare to commit messages to the participants. This record ensures that missing information about a transaction will not be misinterpreted as a commit after a coordinator failure. <p> Multi-Level PrA and PrC The multi-level transaction execution (MLTE) model, the one specified by the standards and adopted by commercial database systems, is similar to the tree of processes model <ref> [12] </ref>. In this model, a participant is a process that is able to decompose a subtransaction further. Thus, a partici pant can initiate other participant processes at its site or different sites. <p> If the final decision is a commit decision (Figure 5 (b)), a prepared to commit cascaded coordinator propagates the decision to its direct descendants, writes a non-forced commit record and, then, forgets the transaction. 2.2. Read-Only Transactions In the traditional read-only optimization <ref> [12] </ref>, when a participant that has executed only read operations on behalf of a transaction receives a prepare to commit message from the transaction's coordinator, it either replies with a No or Read-Only vote instead of a Yes and immediately releases all the resources held by the transaction without writing any
Reference: [13] <author> C. Mohan, K. Britton, A. Citron and G. Samaras. </author> <title> Generalized Presumed Abort: </title> <editor> Marrying Presumed Abort and SNA's LU 6.2 Commit Protocols. </editor> <booktitle> Proc. of the 5th Int'l Workshop on High Performance Transaction Systems, </booktitle> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: In this way, the identities of all participants and the chain of their ancestors are propagated to the root coordinator. This technique is similar to the one used with PrA to support heuristic decisions <ref> [13, 16] </ref>. When the transaction submits its commit request, the coordinator, force writes an initiation record that includes the identities of all participants in the transaction execution tree. Then, it sends out prepare to commit messages to its direct descendants. <p> Secondly, we have reduced the total number of log writes. That is, a cascaded coordinator in ReSPrC neither force writes an initiation record nor writes an end record for an aborted transaction. Furthermore, the use of the flattening technique provides a significant performance enhancement in the presence of loopbacks <ref> [13] </ref>. A loopback occurs when a process, for example P 1 at site Site 1 creates another process P 2 at Site 2 , which in turn creates P 3 back at Site 1 .
Reference: [14] <author> K. Rothermel and S. Pappe. </author> <title> Open Commit Protocols Tolerating Commission Failures. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 18(2) </volume> <pages> 289-332, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The re-structuring of a transaction tree has been previously used to enhance the reliability of commit processing by reducing the blocking effects of atomic commit protocols in case of failures <ref> [14] </ref>. Also, the flattening of a distributed transaction's tree has been suggested to reduce the cost of commit processing that is due to the serialization of messages in a transaction's tree [15].
Reference: [15] <author> G. Samaras, K. Britton, A. Citron C. Mohan. </author> <title> Two-Phase Commit Optimizations in a Commercial Distributed Environment. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(4) </volume> <pages> 325-360, </pages> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions. <p> further, a number of optimizations have also been proposed, of which the read-only optimization [12] is the most significant, given that read-only transactions are the majority in fl Supported in part by N.S.F. under grants IRI-9210588 and IRI-95020091 and a Saudi Arabian graduate student scholarship. any general database system. (See <ref> [15] </ref> for a survey of the most common two-phase commit optimizations.) Due to the cost of the logging activities associated with PrC even for read-only transactions, the argument usually goes in favor of PrA. <p> The first PrC variant is called the rooted PrC protocol where only the root coordinator force writes an initiation record. The second PrC variant is called the re-structured PrC protocol which is based on the idea of flattening the transaction trees <ref> [15] </ref>. <p> Also, the flattening of a distributed transaction's tree has been suggested to reduce the cost of commit processing that is due to the serialization of messages in a transaction's tree <ref> [15] </ref>. <p> This technique significantly reduces the cost of commit processing especially in deep trees <ref> [15] </ref>. In ReSPrC, when the root coordinator receives a commit request from a transaction, it sends prepare to commit messages directly to all participants. To be able to communicate directly with all the participants, the root coordinator needs to know the identities of all participants.
Reference: [16] <author> G. Samaras and S. Nikolopoulos. </author> <title> Algorithmic Techniques Incorporating Heuristic Decisions to Commit Protocols. </title> <booktitle> Proc. of the 21st Euromicro Conference, </booktitle> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: In this way, the identities of all participants and the chain of their ancestors are propagated to the root coordinator. This technique is similar to the one used with PrA to support heuristic decisions <ref> [13, 16] </ref>. When the transaction submits its commit request, the coordinator, force writes an initiation record that includes the identities of all participants in the transaction execution tree. Then, it sends out prepare to commit messages to its direct descendants.
Reference: [17] <author> D. Skeen. </author> <title> Non-blocking Commit Protocols. </title> <booktitle> Proc. of the ACM SIGMOD Int'l Conference on the Management of Data. </booktitle> <pages> pp. 133-142, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures <ref> [17] </ref>, a number of 2PC variants have appeared in the literature, e.g., [1, 3, 9, 11, 15, 18], most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11].
Reference: [18] <author> J. Stamos and F. Cristian. </author> <title> Coordinator Log Transaction Execution Protocol, </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 1(4) </volume> <pages> 383-408, </pages> <year> 1993. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing [19] and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., <ref> [1, 3, 9, 11, 15, 18] </ref>, most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11]. PrA has been designed to reduce the cost associated with aborting transactions while, its counterpart, PrC has been designed to reduce the cost associated with committing transactions.
Reference: [19] <author> P. Spiro, A. Joshi and T. Rengarajan. </author> <title> Designing an Optimized Transaction Commit Protocol. </title> <journal> Digital Technical Journal, </journal> <volume> 3(1), </volume> <month> Winter </month> <year> 1991. </year>
Reference-contexts: Since 2PC consumes a substantial amount of a transaction's execution time during normal processing <ref> [19] </ref> and is blocking in the case of both communication and site failures [17], a number of 2PC variants have appeared in the literature, e.g., [1, 3, 9, 11, 15, 18], most notably, the presumed abort protocol (PrA) and the presumed commit protocol (PrC) [12, 11].
References-found: 19

