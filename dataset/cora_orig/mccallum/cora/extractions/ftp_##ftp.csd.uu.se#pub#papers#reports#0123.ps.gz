URL: ftp://ftp.csd.uu.se/pub/papers/reports/0123.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Keyword: Structured communication for concurrent languages  
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Sven-Olof Nystrom  
Abstract: UPMAIL Technical Report No. 123 February 19, 1996 ISSN 1100-0686 Abstract I propose higher-level primitives for concurrent programming in Er-lang. The first construct is for the rather common situation where a message is a request for information, and the receiver of the message is supposed to reply to the sender. The second construct is intended to allow a form of process definition which appears to be very common in Erlang programs to be expressed in a simplified form. These primitives are intended to allow typical Erlang program to be expressed in a more clear and compact manner, and can be introduced without modifications to existing run-time systems. The use of these primitives could also be helpful in the development of a type system for Erlang processes, and makes it feasible to develop a static analysis of Erlang programs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joe Armstrong, Robert Virding, and Mike Williams. </author> <title> Concurrent Programming in ERLANG. </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference-contexts: Is it possible to, in a similar manner, find higher-level constructs for structured communication in concurrent languages? In this paper, we propose 1 two constructs for structured communication in asynchronous concurrent languages (such as Erlang <ref> [1] </ref>). Neither construct requires any modifications to the runtime systems of existing implementations, and programs using the constructs would still be able to communicate with traditional Erlang programs. <p> Consider the following example, which loosely follows <ref> [1, chapter 5] </ref>. Example 2.1 A counter process maintains the state of a counter. <p> For example, the type of the counter process above can be given as increment value : integer stop 4 The value message is the only one that will give a response, which will always be an integer. A more interesting example is a data base system <ref> [1, chapter 9] </ref>. <p> A relay will pass a request to the process Pid. The request received by Pid will be as indicated by Message. For example, in the two-level distributed database described by Arm-strong, Virding, and Williams <ref> [1, Section 9.3] </ref>, the first-level server processes are responsible for distributing messages to the second-level servers.
Reference: [2] <author> Per Brinch Hansen. </author> <title> The nucleus of a multiprogrammed system. </title> <journal> Communications of the ACM, </journal> <volume> 13(4) </volume> <pages> 238-250, </pages> <month> April </month> <year> 1970. </year>
Reference-contexts: Due to the lack of a control state, it should be possible to find more efficient implementations of server processes. 7 6 Related Work A mechanism to allow a process to respond to a message was described by Brinch Hansen <ref> [2] </ref>.
Reference: [3] <author> Kenneth Kahn, Eric Dean Tribble, Mark S. Miller, and Daniel G. Bo-brow. </author> <title> Objects in concurrent logic programming languages. </title> <booktitle> In Proceedings of OOPSLA, </booktitle> <pages> pages 242-257, </pages> <year> 1986. </year> <month> 8 </month>
Reference-contexts: Due to the lack of a control state, it should be possible to find more efficient implementations of server processes. 7 6 Related Work A mechanism to allow a process to respond to a message was described by Brinch Hansen [2]. Kahn, Tribble, Miller and Bobrow <ref> [3] </ref> present a concurrent object-oriented programming language in which the processes read and respond to messages in a manner quite similar to the behaviour of server processes described above. 7 Conclusions The proposed primitives can be introduced into existing Erlang implementations with no or small modifications of the run-time systems.
References-found: 3

