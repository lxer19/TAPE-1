URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P396.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/preprints.htm
Root-URL: http://www.mcs.anl.gov
Title: The Numerics Annex and Related Material Numerics Annex. It introduces a pair of user-selectable modes,
Author: K. W. Dritz 
Note: Annex K is the  This chapter was written with financial support from Intermetrics, Inc., to Argonne Na tional Laboratory under proposal No. P-91122.  
Address: Argonne, IL 60439  
Affiliation: Argonne National Laboratory  
Abstract: The features of Ada 9X that support numerically oriented applications are distributed over several parts of the (draft) Ada 9X reference manual [7]. Some of them are collected in the Numerics Annex, which, like the other special-needs annexes, is entirely optional; some appear in the core or in other mandatory annexes. The basic concepts underlying the real (i.e., floating-point and fixed-point) types are covered in Chapters 3 and 4 of the core and will not be discussed here. These chapters no longer include the details of a model of real arithmetic or the accuracy requirements for predefined arithmetic operations based on the model. Indeed, there are no accuracy requirements, unless the Numerics Annex is supported. The model and the accuracy requirements are discussed there. Included in Annex A (Core Language-Defined Attributes) are the definitions of the attributes of real types. Those that relate intimately to the accuracy of the predefined arithmetic operations are left implementation defined in Annex A and are revisited in the Numerics Annex. Annex C (Predefined Language Environment) includes the specifications of a generic package of elementary functions and a package that defines types and operations related to random number generation. By virtue of their placement in Annex C, these packages must be provided by all implementations. This requirement is appropriate because of their utility in a wide variety of applications, including some that may not be numerically intensive. For example, square roots and logarithms are useful in encoding and decoding, and random numbers are indispensable to simulations. A package defining Fortran-compatible types is included in Annex M (Interface to Other Languages), along with a discussion of the uses of the interfacing pragmas in a Fortran context. C and COBOL are also covered in this annex. Interface support for these languages is, of course, optional; if provided, it must conform with the specifications of this annex. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. S. Brown. </author> <title> A Simple but Realistic Model of Floating-Point Computation. </title> <type> TOMS 7(4) </type> <pages> 445-480, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: requirements of the strict mode at little or no cost to the user has no real incentive to offer the user another choice, and the two modes might be identical. 2.2 Accuracy Requirements for Predefined Floating-Point Operations Ada 83 had a model of floating-point arithmetic based on the Brown model <ref> [1] </ref>, which served as the basis for the accuracy requirements for the predefined floating-point arithmetic operations.
Reference: [2] <author> K. W. Dritz. </author> <title> Towards an Ada Standard for the Elementary Functions. </title> <editor> F. Long (ed.), </editor> <booktitle> Ada Yearbook 1991, </booktitle> <publisher> Chapman & Hall, </publisher> <address> London, </address> <year> 1991, </year> <pages> pp. 283-290. </pages>
Reference-contexts: In fact, implementations are no longer allowed to restrict the generic actual parameter to be an unconstrained subtype, as they are in the aforementioned draft international standard. With the appropriate changes implied by the above discussion, the account of the proposed secondary standard <ref> [2] </ref> in the Ada Yearbook 1991 is relevant also to the version contained in Ada 9X. 1 1.2 Random Numbers A basic capability for generating random numbers is provided by the package Ada.Numerics.Random_Numbers, whose specification is shown in Figure 1.
Reference: [3] <author> K. W. Dritz. </author> <title> Development of an Ada Standard for Primitive Floating-Point Functions. </title> <editor> F. Long (ed.), </editor> <booktitle> Ada Yearbook 1992, </booktitle> <publisher> Chapman & Hall, </publisher> <address> London, </address> <year> 1992, </year> <pages> pp. 295-302. </pages>
Reference-contexts: In order to avoid conflicts with other attributes of Ada 9X, we have changed some of their names, and there are slight differences in the complement of functions provided. With allowance for these changes, the account <ref> [3] </ref> of the proposed secondary standard in the 13 Ada Yearbook 1992 is also relevant to the version of the primitive functions in Ada 9X. 3
Reference: [4] <author> P. L'Ecuyer. </author> <title> Efficient and Portable Combined Random Number Generators. </title> <type> CACM 31(6) </type> <institution> 742-749,774, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: good examples of congruential generators [10] (for which the internal state is usually a single integer or floating-point number), the phenomenally long period Fibonacci generators [9] (for which the internal state is usually a modest array of integer or floating-point components, plus a carry or borrow bit), or combination generators <ref> [4, 11] </ref> (for which the internal state is usually a small array of integers).
Reference: [5] <author> P. N. Hilfinger. </author> <title> Implementing Ada Fixed-Point Types Having Arbitrary Scales. Computer Science Report No. </title> <type> 582, </type> <institution> Univ. of California at Berkeley, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: Algorithms for arbitrary smalls that made only modest assumptions about the hardware were published <ref> [5] </ref> but were never widely implemented. In Ada 9X, we have abandoned the application of the model of real arithmetic to fixed-point types. There no longer are model numbers, safe numbers, and machine numbers of fixed-point types.
Reference: [6] <author> G. S. Hodgson. </author> <title> The Developing Standards for Complex Scalar and Array Types, Basic Operations, and Elementary Functions for Ada. </title> <editor> C. Loftus (ed.), </editor> <booktitle> Ada Yearbook 1993, </booktitle> <publisher> IOS Press, </publisher> <address> Amsterdam, </address> <year> 1993, </year> <pages> pp. 369-382. </pages>
Reference-contexts: Thus, the rationale <ref> [6] </ref> published in the Ada Yearbook 1993 is now somewhat out of date. 6 This generic package has a generic formal package parameter.
Reference: [7] <institution> ISO/IEC CD 8652. </institution> <note> Programming Languages|Ada. Committee Draft, </note> <month> September </month> <year> 1993. </year>
Reference: [8] <author> ISO/IEC JTC1/SC22 N 1455. </author> <title> Programming Languages|Rationale for the Programming Language Ada. </title> <note> Draft version 4.0, </note> <month> September </month> <year> 1993. </year>
Reference: [9] <author> G. Marsaglia and A. Zaman. </author> <title> A New Class of Random Number Generators. </title> <journal> Annals of Applied Probability 1(3) </journal> <pages> 462-480, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The Numerics Annex does specify some fairly stringent performance requirements for the strict mode, but these will be satisfied by good examples of congruential generators [10] (for which the internal state is usually a single integer or floating-point number), the phenomenally long period Fibonacci generators <ref> [9] </ref> (for which the internal state is usually a modest array of integer or floating-point components, plus a carry or borrow bit), or combination generators [4, 11] (for which the internal state is usually a small array of integers).
Reference: [10] <author> S. K. Park and K. W. Miller. </author> <title> Random Number Generators: Good Ones are Hard to Find. </title> <journal> CACM 13(10) </journal> <pages> 1192-1201, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: The Numerics Annex does specify some fairly stringent performance requirements for the strict mode, but these will be satisfied by good examples of congruential generators <ref> [10] </ref> (for which the internal state is usually a single integer or floating-point number), the phenomenally long period Fibonacci generators [9] (for which the internal state is usually a modest array of integer or floating-point components, plus a carry or borrow bit), or combination generators [4, 11] (for which the internal
Reference: [11] <author> B. A. Wichmann and I. D. Hill. </author> <title> A Pseudo-Random Number Generator. </title> <type> Report DITC 6/82, </type> <institution> National Physical Laboratory, Teddington, </institution> <address> England, </address> <month> June </month> <year> 1982. </year> <title> 3 Subsequent to the publication of the 1992 yearbook, the proposed secondary standard for the primitive functions was also changed slightly in response to public comment. </title> <type> 14 </type>
Reference-contexts: good examples of congruential generators [10] (for which the internal state is usually a single integer or floating-point number), the phenomenally long period Fibonacci generators [9] (for which the internal state is usually a modest array of integer or floating-point components, plus a carry or borrow bit), or combination generators <ref> [4, 11] </ref> (for which the internal state is usually a small array of integers).
References-found: 11

