URL: http://www.cs.cmu.edu/~tara/hdfpaper.ps.Z
Refering-URL: http://www.cs.cmu.edu/~tara/thesis.html
Root-URL: http://www.cs.cmu.edu
Title: Intelligent, Adaptive File System Policy Selection  
Author: Tara M. Madhyastha Daniel A. Reed 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Traditionally, maximizing input/output performance has required tailoring application input/output patterns to the idiosyncrasies of specific input/output systems. In this paper, we show that one can achieve high application input/output performance via a low overhead input/output system that automatically recognizes file access patterns and adaptively modifies system policies to match application input/output needs. This approach reduces the application developer's input/output optimization effort by isolating input/output optimization decisions within a retargetable file system infrastructure. To validate these claims, we have built a lightweight file system policy testbed that uses a trained learning mechanism to recognize access patterns. The file system then uses these access pattern classifications to select appropriate caching strategies, dynamically adapting file system policies to changing input/output demands throughout application execution. Our experimental data show dramatic speedups on both benchmarks and input/output intensive scientific applications.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> EOSDIS: </author> <title> EOS Data and Information System. </title> <institution> National Aeronautics and Space Administration, </institution> <year> 1992. </year>
Reference-contexts: HDF input/output performance is particularly important because HDF is the standard data format for all NASA EOS (Earth Observing System) data products. The goal of the Earth Observing System Data and Information System (EOSDIS) <ref> [1] </ref> is to manage data from NASA's Earth science research satellites, providing researchers with a uniform information resource that can be used to assess global change. The collective data rate from satellites in this project is expected to rise as high as 500 terabytes per day by the year 2000.
Reference: [2] <author> Bershad, B. N., Savage, S., Pardyak, P., Sirer, E. G., Fiuczynski, M. E., Becker, D., Eggers, S., and Chambers, C. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (December 1995). </booktitle> <pages> 19 </pages>
Reference-contexts: Application specification of resource management policies has proven valuable in many domains, and many modern microkernels now support user control or extension of operating system services (e.g., SPIN <ref> [2] </ref> and exokernel [4]). We have adopted a similar approach in PPFS; a user-specified code fragment defines the set of possible PPFS file management policies and an algorithm for choosing among those policies based on the access pattern classification.
Reference: [3] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: 1 Introduction Input/output performance is the primary performance bottleneck of an important class of national challenge applications (e.g., global climate modeling). Many, if not all such applications exhibit complex, dynamic, often irregular input/output access patterns, rather than the regular, sequential patterns for which most file systems are optimized <ref> [3] </ref>. Often, to achieve acceptable performance, the developer is forced to tune the size, order and frequency of input/output requests to match the idiosyncrasies of a specific input/output system. <p> Experiments using large research codes on both the Intel Paragon XP/S and IBM SP-2 have shown that tuning PPFS file system policies to application needs, rather than forcing the application to use inappropriate and inefficient file access modes, is the key to performance <ref> [3] </ref>. In short, simple access pattern hints and cache policy controls can yield large performance benefits [8]. <p> Instead, one needs a general classification methodology that can adapt to exigencies (e.g., the need to refine the partition of possible access patterns). 3.1 Access Pattern Partitions Based on our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O initiative <ref> [3, 15] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequentiality, and request size; see Table 1. This ternary partition is not unique, and other useful partitions can be added (e.g., inter-request latency). <p> Superficially, the read-update-write pattern, where a file region is read and then rewritten, might seem excessively baroque. However, our characterization studies <ref> [3, 17] </ref> showed that this pattern occurs quite frequently in scientific codes. The second category, sequentiality, describes access orders. In addition to sequential accesses, strided accesses to large, out of core arrays are a frequent component of scientific computations. <p> Even simple access pattern information and rudimentary policy controls are useful; more complex classification and policy selection is likely to generate even better performance. 8 Related Work Recent studies of high-performance parallel applications have shown that they exhibit a wide variety of input/output access characteristics <ref> [3] </ref>. Given such natural variation, tailoring file system policies to application requirements can provide better performance than a uniformly imposed set of strategies; many studies have shown this under different workloads and environments.
Reference: [4] <author> Engler, D. R., Kaashoek, M. F., and Jr., J. O. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (December 1995). </booktitle>
Reference-contexts: Application specification of resource management policies has proven valuable in many domains, and many modern microkernels now support user control or extension of operating system services (e.g., SPIN [2] and exokernel <ref> [4] </ref>). We have adopted a similar approach in PPFS; a user-specified code fragment defines the set of possible PPFS file management policies and an algorithm for choosing among those policies based on the access pattern classification.
Reference: [5] <author> Feldman, G. C. </author> <title> Seawifs Project Homepage. </title> <institution> NASA Goddard Space Flight Center, </institution> <note> Available at http://seawifs.gsfc.nasa.gov/scripts/SEAWIFS.html, 1996. </note>
Reference-contexts: The goal of the SeaWiFS project is to provide a five year data set of global ocean color data to improve our understanding of the role of ocean primary production in the global carbon cycle <ref> [5] </ref>. The l0to1a application from the SeaWiFS processing software converts raw (level 0) satellite data to level 1A data products.
Reference: [6] <author> Grimshaw, A. S., and Loyot, Jr., E. C. </author> <title> ELFS: object-oriented extensible file systems. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems (1991), </booktitle> <address> p. </address> <month> 177. </month>
Reference-contexts: Several studies have demonstrated that file system policies can exploit knowledge of application access patterns to provide higher performance than is possible with policies that are oblivious to access patterns <ref> [6, 10, 14] </ref>.
Reference: [7] <author> Hinton, G. E. </author> <title> Connectionist Learning Procedures. </title> <booktitle> Artificial Intelligence 40 (1989), </booktitle> <volume> 185 - 234. </volume>
Reference-contexts: To automatically classify file access patterns, we have developed a feedforward artificial neural network <ref> [7] </ref> capable of producing a qualitative access pattern description. The inherent imprecision of neural networks makes it possible to usefully classify patterns that are "very close" to a well-defined pattern (e.g., a pattern close to sequential can still be classified as sequential).
Reference: [8] <author> Huber, J. V., Elford, C. L., Reed, D. A., Chien, A. A., and Blumenthal, D. S. </author> <title> PPFS: A High-Performance Portable Parallel File System. </title> <booktitle> In Proceedings of the 9th ACM International Conference on Supercomputing (July 1995), </booktitle> <pages> pp. 385-394. </pages>
Reference-contexts: To minimize implementation effort while focusing attention on the salient details, we have developed a user-level portable parallel file system (PPFS) <ref> [8] </ref>. PPFS is an input/output library, portable across parallel systems and workstation clusters, with a rich interface for application control of data placement and file system policies. <p> In short, simple access pattern hints and cache policy controls can yield large performance benefits <ref> [8] </ref>.
Reference: [9] <author> Korner, K. </author> <title> Intelligent Caching for Remote File Service. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems (May 1990), </booktitle> <pages> pp. 220-226. </pages>
Reference-contexts: Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [13]. Knowledge based caching has been proposed to enhance cache performance of remote file servers <ref> [9] </ref>.
Reference: [10] <author> Kotz, D., and Ellis, C. S. </author> <title> Prefetching in File Systems for MIMD Multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 2 (April </month> <year> 1990), </year> <pages> 218-230. </pages>
Reference-contexts: Several studies have demonstrated that file system policies can exploit knowledge of application access patterns to provide higher performance than is possible with policies that are oblivious to access patterns <ref> [6, 10, 14] </ref>.
Reference: [11] <author> Kotz, D., and Ellis, C. S. </author> <title> Practical Prefetching Techniques for Multiprocessor File Systems. </title> <journal> Journal of Distributed and Parallel Databases 1, </journal> <month> 1 (January </month> <year> 1993), </year> <pages> 33-51. </pages>
Reference-contexts: Kotz has studied detecting more complicated access patterns that are used to guide non-sequential prefetching within a file <ref> [11] </ref>. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time [13]. Knowledge based caching has been proposed to enhance cache performance of remote file servers [9].
Reference: [12] <author> NCSA. </author> <note> NCSA HDF, Version 2.0. </note> <institution> University of Illinois at Urbana-Champaign, National Center for Supercomputing Applications, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: In x6, we describe two large scientific codes that benefit from these adaptive techniques. 10 (a) Non-adaptive (b) Adaptive (a) Non-adaptive (b) Adaptive 11 6 HDF and Satellite Data Processing Applications The NCSA Hierarchical Data Format (HDF) <ref> [12] </ref> is a self-documenting physical file format that facilitates data transfer between machines and operating systems. It contains interfaces for storing and retrieving many types of scientific data, including images and n-dimensional data sets, together with information about the data.
Reference: [13] <author> Palmer, M., and Zdonik, S. B. </author> <title> Fido: A Cache That Learns to Fetch. </title> <booktitle> In Proceedings of the 17th International Conference on Very Large Data Bases (Barcelona, </booktitle> <month> September </month> <year> 1991), </year> <pages> pp. 255-262. </pages>
Reference-contexts: Kotz has studied detecting more complicated access patterns that are used to guide non-sequential prefetching within a file [11]. Fido is an example of a predictive cache that prefetches by using an associative memory to recognize access patterns over time <ref> [13] </ref>. Knowledge based caching has been proposed to enhance cache performance of remote file servers [9].
Reference: [14] <author> Patterson, R. H., Gibson, G. A., Ginting, E., Stodolsky, D., and Zelenka, J. </author> <title> Informed Prefetching and Caching. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (December 1995). To appear. </booktitle>
Reference-contexts: Several studies have demonstrated that file system policies can exploit knowledge of application access patterns to provide higher performance than is possible with policies that are oblivious to access patterns <ref> [6, 10, 14] </ref>. <p> Applications do not need to directly specify policies; they can provide hints (possibly inaccurate 18 access information) to guide a proactive file system. Patterson et al demonstrate the success of providing hints to guide prefetching of files that will be accessed in the future <ref> [14] </ref>. This is portable, but requires the application programmer (or an intelligent compiler) to specify knowledge of the application input/output behavior.
Reference: [15] <author> Poole, J. T. </author> <title> Scalable I/O Initiative. </title> <institution> California Institute of Technology, </institution> <note> Available at http://www.ccsf.caltech.edu/SIO/, 1996. </note>
Reference-contexts: Instead, one needs a general classification methodology that can adapt to exigencies (e.g., the need to refine the partition of possible access patterns). 3.1 Access Pattern Partitions Based on our ongoing characterization of scientific application input/output patterns as part of the Scalable I/O initiative <ref> [3, 15] </ref>, we partitioned access patterns based on three broad features: read/write mix, sequentiality, and request size; see Table 1. This ternary partition is not unique, and other useful partitions can be added (e.g., inter-request latency).
Reference: [16] <author> Reed, D. A. </author> <title> Experimental Performance Analysis of Parallel Systems: Techniques and Open Problems. </title> <booktitle> In Proceedings of the 7th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation (May 1994), </booktitle> <pages> pp. 25-51. </pages>
Reference-contexts: This write caching is extremely successful with a hit ratio exceeding 0.99. Finally, Figure 9 shows a histogram of the Pathfinder write times, obtained by instrumenting input/output calls with the Pablo instrumentation library <ref> [16] </ref>. Each bar in the UNIX histogram represents the time spent performing buffered UNIX input/output. Likewise, each bar in the PPFS histogram reflects the time spent in the PPFS input/output. The success of PPFS caching redistributes physical writes, changing the shape of the write time histogram.
Reference: [17] <author> Smirni, E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> I/O Requirements of Scientific Aapplications: An Evolutionary View. </title> <note> To appear (1996). 20 </note>
Reference-contexts: Superficially, the read-update-write pattern, where a file region is read and then rewritten, might seem excessively baroque. However, our characterization studies <ref> [3, 17] </ref> showed that this pattern occurs quite frequently in scientific codes. The second category, sequentiality, describes access orders. In addition to sequential accesses, strided accesses to large, out of core arrays are a frequent component of scientific computations.
References-found: 17

