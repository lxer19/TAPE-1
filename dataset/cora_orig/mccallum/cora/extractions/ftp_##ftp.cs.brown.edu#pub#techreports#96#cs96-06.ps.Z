URL: ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-06.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-96-06.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy, </author> <title> "Proof verification and the hardness of approximation problems," </title> <booktitle> Proceedings of the Thirty-third Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> (1992), </year> <pages> pp. 14-23. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP <ref> [1, 2] </ref>. The series of approximation algorithms given in [19] is based on the technique of local optimization [4, 16, 18, 21, 28, 8, 24, 9, 13, 6]. The k th algorithm in the series uses k-changes to achieve local optimality.
Reference: [2] <author> S. Arora, and S. Safra, </author> <title> "Probabilistic checking of proofs: A new characterization of NP," </title> <booktitle> Proceedings of the Thirty-third Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> (1992), </year> <pages> pp. 2-13. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP <ref> [1, 2] </ref>. The series of approximation algorithms given in [19] is based on the technique of local optimization [4, 16, 18, 21, 28, 8, 24, 9, 13, 6]. The k th algorithm in the series uses k-changes to achieve local optimality.
Reference: [3] <author> H. L. Bodlaender, </author> <title> "On linear time minor tests and depth first search," </title> <booktitle> Proceedings of Workshop on Algorithms and Data Structures, </booktitle> <year> (1989), </year> <pages> pp. 577-590. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [4] <author> G. A. Croes, </author> <title> "A method for solving traveling-salesman problems," </title> <note> Operations Research 6, (Nov.-Dec. </note> <year> 1958), </year> <pages> pp. 791-812. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [5] <author> E. W. Dijkstra, </author> <title> "Self-stabilizing systems in spite of distributed control," </title> <journal> Communications of ACM 17, </journal> <month> (Nov. </month> <year> 1974), </year> <pages> pp. 643-644. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied [12, 17, 23, 25, 7, 3, 19]. It has applications in circuit layouts and communication networks <ref> [5, 27] </ref>. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [6] <author> T. Dimitriou, and R. Impagliazzo, </author> <title> "Towards an analysis of local optimization algorithms," </title> <booktitle> Proceedings of the Twenty-eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <year> (1996). </year>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [7] <author> M. R. Fellows and M. A. Langston, </author> <title> "On well-partial-order theory and its applications to combinatorial problems of VLSI design," </title> <type> Technical Report CS-88-188, </type> <institution> Dept. of Computer Science, Washington State University, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [8] <author> M. Furer and B. Raghavachari, </author> <title> "Approximating the minimum degree spanning tree to within one from the optimal degree," </title> <booktitle> Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> (1992), </year> <pages> pp. 317-324. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [9] <author> M. Furer and B. Raghavachari, </author> <title> "Approximating the minimum-degree Steiner tree to within one of optimal", Journal of Algorithms 17, </title> <booktitle> (1994), p. </booktitle> <pages> 409-423. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [10] <author> G. Galbiati, F. Maffioli and A. Morzenti, </author> <title> "A short note on the approximability of the maximum leaves spanning tree problem," </title> <journal> Information Processing Letters 52, </journal> <year> (1994), </year> <pages> pp. 45-49. </pages>
Reference-contexts: The approximation ratios of the first two algorithms in the series are shown to be five and three. The observation leads to an open question: "is the series of algorithms a polynomial-time approximation scheme (PTAS) [14]?" The open question is answered negatively in <ref> [10] </ref>, which shows that Maximum Leaf Spanning Tree is MAX SNP-complete [22]. Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2].
Reference: [11] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP-completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco (1979). </address> <month> 5 </month>
Reference: [12] <author> J. R. Griggs, D. J. Kleitman, and A. Shastri, </author> <title> "Spanning trees with many leaves in cubic graphs," </title> <journal> Journal of Graph Theory 13, </journal> <year> (1989), </year> <pages> pp. 669-695. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [13] <author> M. M. </author> <title> Halldorsson "Approximating discrete collections via local improvements," </title> <booktitle> Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> (1995), </year> <pages> pp. 160-169. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [14] <author> D. S. Johnson, </author> <title> "Approximation algorithms for combinatorial problems," </title> <journal> Journal of Computer and System Sciences 37, </journal> <year> (1988), </year> <pages> pp. 79-100. </pages>
Reference-contexts: In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three. The observation leads to an open question: "is the series of algorithms a polynomial-time approximation scheme (PTAS) <ref> [14] </ref>?" The open question is answered negatively in [10], which shows that Maximum Leaf Spanning Tree is MAX SNP-complete [22]. Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2].
Reference: [15] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yannakakis, </author> <title> "How easy is local search?" Journal of Computer and System Sciences 37, </title> <booktitle> (1988), </booktitle> <pages> pp. 79-100. </pages>
Reference: [16] <author> B. W. Kernighan and S. Lin, </author> <title> "An efficient heuristic procedure for partitioning graphs," </title> <address> BSTJ 49, </address> <year> (1970), </year> <pages> pp. 291-308. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [17] <author> D. J. Kleitman and D. B. West, </author> <title> "Spanning trees with many leaves," </title> <note> SIAM Journal on Discrete Mathematics 4, </note> <month> (Feb. </month> <year> 1991), </year> <pages> pp. 99-106. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [18] <author> S. Lin and B. W. Kernighan, </author> <title> "An effective heuristic algorithm for the Traveling-Salesman Problem," </title> <note> Operations Research 21, </note> <year> (1973), </year> <pages> pp. 498-516. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [19] <author> H.-I. Lu and R. Ravi, </author> <title> "The power of local optimization: approximation algorithms for maximum-leaf spanning tree," </title> <booktitle> Proceedings of the Thirtieth Annual Allerton Conference on Communication, Control and Computing, </booktitle> <month> (Oct. </month> <year> 1992), </year> <pages> pp. 533-542. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three. <p> 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied [12, 17, 23, 25, 7, 3, 19]. It has applications in circuit layouts and communication networks [5, 27]. In <ref> [19] </ref> a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three. <p> Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in <ref> [19] </ref> is based on the technique of local optimization [4, 16, 18, 21, 28, 8, 24, 9, 13, 6]. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small. <p> Obtain a maximally leafy forest F for G. 2. Add edges to F to make it a spanning tree T for G. It follows from Theorem 1 that the approximation ratio of the above algorithm is three, which the same as the algorithm in <ref> [19] </ref>. We show that our algorithm can be implemented to run in time O ((m + n)ff (m; n)). We implement the first step of our algorithm as follows. For every node v in G do Create a set S (v) that contains only v. Let d (v) be zero.
Reference: [20] <author> C. H. Papadimitriou, A. A. Schaffer and M. Yannakakis, </author> <title> "On the complexity of local search (Extended Abstract)," </title> <booktitle> Proceedings of the Twenty-second Annual ACM Symposium on the Theory of Computing, </booktitle> <year> (1990), </year> <pages> pp. 438-445. </pages>
Reference: [21] <author> C. H. Papadimitriou and K. Steiglitz, </author> <title> Combinatorial Optimization: Algorithms and Complexity, </title> <publisher> Prentice-Hall, Inc. </publisher> <year> (1982). </year>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [22] <author> C. H. Papadimitriou and M. Yannakakis, </author> <title> "Optimization, Approximation, and Complexity classes," </title> <booktitle> Proceedings of the Twentieth Annual ACM Symposium on the Theory of Computing, (1988) pp. </booktitle> <pages> 229-234. </pages>
Reference-contexts: The observation leads to an open question: "is the series of algorithms a polynomial-time approximation scheme (PTAS) [14]?" The open question is answered negatively in [10], which shows that Maximum Leaf Spanning Tree is MAX SNP-complete <ref> [22] </ref>. Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization [4, 16, 18, 21, 28, 8, 24, 9, 13, 6].
Reference: [23] <author> C. Payan, M. Tchuente, and N. H. Xuong, </author> <title> "Arbres avec un nombres maximum de sommets pendants," </title> <booktitle> Discrete Mathematics 49, </booktitle> <year> (1984), </year> <pages> pp. 267-273. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [24] <author> R. Ravi, B. Raghavachari, and P. N. Klein, </author> <title> "Approximation through local optimality: Designing networks with small degree," </title> <booktitle> Proceedings, Twelfth Annual Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <month> (Dec. </month> <year> 1992), </year> <pages> LNCS 652, pp. 279-290. </pages>
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
Reference: [25] <author> J. A. Storer, </author> <title> "Constructing full spanning trees for cubic graphs," </title> <journal> Information Processing Letters 13, </journal> <year> (1981), </year> <pages> pp. 8-11. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied <ref> [12, 17, 23, 25, 7, 3, 19] </ref>. It has applications in circuit layouts and communication networks [5, 27]. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [26] <author> R. E. Tarjan, </author> <title> Data Structures and Network Algorithms, </title> <publisher> SIAM, </publisher> <address> Philadelphia, Pennsylvania, </address> <year> (1983). </year>
Reference-contexts: Union S (v) and S (u). Increase d (v) by d 0 . One can easily verify that the resulting F is a maximally leafy forest for G. Using the data structure in <ref> [26] </ref>, the first step runs in time O ((m + n)ff (m; n)). The second step can be done by shrinking each leafy subtree in F into a single node, and then finding a spanning tree for the corresponding shrinked graph.
Reference: [27] <author> M. Tchuente, "Sur l'auto-stabilisation dans un reseau d'odinateurs," R. A. I. R. O. Informa-tique Theorique 15, </author> <year> (1981), </year> <pages> pp. 47-66. </pages>
Reference-contexts: 1 Introduction The NP-complete Maximum Leaf Spanning Tree problem has been extensively studied [12, 17, 23, 25, 7, 3, 19]. It has applications in circuit layouts and communication networks <ref> [5, 27] </ref>. In [19] a series of approximation algorithms are given. The approximation ratios of the first two algorithms in the series are shown to be five and three.
Reference: [28] <author> M. Yannakakis, </author> <title> "The analysis of local search problems and their heuristics," </title> <booktitle> STACS, </booktitle> <year> (1990), </year> <pages> pp. 289-311 </pages> . 
Reference-contexts: Therefore there exists some constant * &gt; 0 such that there is no (1+*)-approximation for Maximum Leaf Spanning Tree unless P=NP [1, 2]. The series of approximation algorithms given in [19] is based on the technique of local optimization <ref> [4, 16, 18, 21, 28, 8, 24, 9, 13, 6] </ref>. The k th algorithm in the series uses k-changes to achieve local optimality. The time complexity, O (m k n k+1 ), is intolerably high even if k is small.
References-found: 28

