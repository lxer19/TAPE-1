URL: http://www.ai.mit.edu/people/ringrose/msthesis/msthesis.ps.Z
Refering-URL: http://www.ai.mit.edu/people/ringrose/msthesis/abstract.html
Root-URL: 
Title: Simulated Creatures: Adapting Control for Variations in Model or Desired Behavior  
Author: by Robert Ringrose Marc H. Raibert Campbell L. Searle 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science in Computer Science at the  c Robert Ringrose, MCMXCIII. All rights reserved. The author hereby grants to MIT permission to reproduce and to distribute copies of this thesis document in whole or in part, and to grant others the right to do so. Author  Certified by  Professor Thesis Supervisor Accepted by  Chair, Departmental Committee on Graduate Students  
Date: February 1993  Jan 15, 1993  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Karl Johan -Astrom and Bjorn Wittenmark. </author> <title> Adaptive Control. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: When the foot is placed further from the hip than the neutral point, the body decelerates during stance and the forward speed at liftoff is slower than the forward speed at touchdown (right) (Figure and caption from [11]). Figure B-2: Box diagram of a gain-scheduled controller (figure from <ref> [1] </ref>). actuators, and the gain schedule is the finite state machine. There is no way of compensating for an incorrect schedule within the context of the gain-scheduled control system, although the tuning process described in this paper is a method of creating a good gain schedule.
Reference: [2] <author> P. A. Grygier and H. Hemami. </author> <title> Distributed simulation models using a modular computer network. </title> <booktitle> Proc. Simulators Conference, </booktitle> <month> April </month> <year> 1984. </year> <title> Sponsored by the Society for Computer Simulation. </title>
Reference-contexts: A different search algorithm might parallelize better. Grygier and Hemami have also investigated the possibility of distributing a single simulation among several machines <ref> [2] </ref>. Distributing the simulations would permit further parallelization. 17 Chapter 3 Getting a Close Solution A goal of this work is to be able to automatically tune the control system when there are large changes in the physical characteristics of the creature.
Reference: [3] <author> J. J. Helferty, J. B. Collins, and M. Kam. </author> <title> A learning strategy for the control of a mobile robot that hops and runs. </title> <booktitle> In Proceedings of the 1988 International Association of Science and Technology for Development. IASTED, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: The program repeats this process until the transformation is complete. Other work on self-tuning controllers <ref> [3] </ref>, frequently using searching techniques such as genetic algorithms [6] or spacetime constraints [15], has addressed similar problems.
Reference: [4] <author> Jessica K. Hodgins and Marc H. </author> <title> Raibert. </title> <journal> Biped gymnastics. International Journal of Robotics Research, </journal> <month> September </month> <year> 1989. </year>
Reference-contexts: Appendix B contains further data about the control system, along with the twenty variable parameters to the control system and their initial values for a running quadruped. Some previous investigations into robotic behaviors while running are described in references <ref> [4, 5, 12] </ref>. 7 Chapter 2 Searching for Solutions In order to search for an appropriate set of control parameters you need a way of determining how well a set of parameters elicits a desired behavior.
Reference: [5] <author> Jessica K. Hodgins and Marc H. Raibert. </author> <title> Adjusting step length for rough terrain locomotion. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(3), </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: Appendix B contains further data about the control system, along with the twenty variable parameters to the control system and their initial values for a running quadruped. Some previous investigations into robotic behaviors while running are described in references <ref> [4, 5, 12] </ref>. 7 Chapter 2 Searching for Solutions In order to search for an appropriate set of control parameters you need a way of determining how well a set of parameters elicits a desired behavior.
Reference: [6] <author> Michael Pearse, Ronald Arkin, and Ashwin Ram. </author> <title> The learning of reactive control parameters through genetic algorithms. </title> <booktitle> Proc. IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <volume> 1 </volume> <pages> 130-137, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The program repeats this process until the transformation is complete. Other work on self-tuning controllers [3], frequently using searching techniques such as genetic algorithms <ref> [6] </ref> or spacetime constraints [15], has addressed similar problems. Tuning controllers for dynamically balanced legged systems is particularly challenging because the system is complex and there is usually only a limited area near the global minimum which does not result in catastrophic failure.
Reference: [7] <author> William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. </author> <title> Numerical Recipes in C, </title> <booktitle> chapter 10, </booktitle> <pages> pages 290-352. </pages> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: A downhill simplex search of an n-dimensional space uses a n-dimensional simplex formed by n+1 points P i in n-space such that the vectors between the points span the search space <ref> [7] </ref>. Each point, with its n coordinates, corresponds to a single parameter set. The search consists of moving these points so that the evaluations of the corresponding parameter sets give better results. <p> The idea is to replace P h with a point P n such that F (P n ) &lt; F (P s ). 13 The algorithm presented by Press, Flannery, Teukolsky, and Vetterling is as follows <ref> [7] </ref>: * Let P a be the point achieved by reflecting P h through L. * Let P b be the point achieved by reflecting P h twice as far through L. * Let P c be the point halfway between P h and L. * If F (P b )
Reference: [8] <author> Marc H. Raibert. </author> <title> Running with symmetry. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 5(4), </volume> <year> 1986. </year>
Reference-contexts: Because the control of forward speed is based on the principle of a neutral point as illustrated in figure B-1, parameters related to forward speed control have odd units <ref> [8] </ref>. Acceleration, for example, is measured in meters rather than meters per second per second, since placing the foot closer to the robot will result in the robot accelerating.
Reference: [9] <author> Marc H. Raibert. Trotting, </author> <title> pacing and bounding by a quadruped robot. </title> <journal> Journal of Biomechanics, </journal> <volume> 23, </volume> <year> 1990. </year> <month> 39 </month>
Reference-contexts: We use simulations of robots that run and hop to produce physically realistic computer generated animations and to test control algorithms. The simulation is based on a physical robot which is described by Raibert <ref> [9, 10] </ref>. The simulation is a rigid body simulation, the dynamics of which are generated using a commercial dynamic modeling program [14]. The rest of the simulation is automatically generated using the Creature Library, an aid to simulation generation we have written [13]. <p> This evaluation function reflects the fact that a control algorithm for a trotting quadruped needs to do more than propel the quadruped forward. Raibert's experimentation in quadruped control suggests that it should <ref> [9] </ref>: * control the forward velocity. * regulate the body attitude. * put reasonable constraints on the forces and torques applied. * limit the vertical motion of the body. * keep the running cycle stable. <p> as the one presented here will turn the art of tuning a simulation into the art of constructing an evaluation function|still an art, but one which is a little easier. 32 Appendix A Planar Quadruped Simulation The simulation used in the examples is a planar simulation of Raibert's quadruped robot <ref> [9] </ref>. The simulation uses rigid body dynamics and has the masses and moments of inertia listed in table A.1. The C code for the equations of motion was generated by a commercial dynamic modeling program [14].
Reference: [10] <author> Marc H. Raibert, Michael Chepponis, and Benjamin Brown, Jr. </author> <title> Running on four legs as though they were one. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(2), </volume> <month> June </month> <year> 1986. </year>
Reference-contexts: We use simulations of robots that run and hop to produce physically realistic computer generated animations and to test control algorithms. The simulation is based on a physical robot which is described by Raibert <ref> [9, 10] </ref>. The simulation is a rigid body simulation, the dynamics of which are generated using a commercial dynamic modeling program [14]. The rest of the simulation is automatically generated using the Creature Library, an aid to simulation generation we have written [13].
Reference: [11] <author> Marc H. Raibert and Jessica K. Hodgins. </author> <title> Animation of dynamic legged locomotion. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 349-358, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: When the foot is placed further from the hip than the neutral point, the body decelerates during stance and the forward speed at liftoff is slower than the forward speed at touchdown (right) (Figure and caption from <ref> [11] </ref>). Figure B-2: Box diagram of a gain-scheduled controller (figure from [1]). actuators, and the gain schedule is the finite state machine.
Reference: [12] <author> Marc H. Raibert, Jessica K. Hodgins, Robert R. Playter, and Robert P. Ringrose. </author> <title> Animation of maneuvers: Jumps, somersaults, and gait transitions. </title> <booktitle> In Imagina, </booktitle> <month> Jan </month> <year> 1992. </year>
Reference-contexts: The leg actuator is implemented as a spring with controllable rest length and different constants in compression and extension. The simulation is a planar rigid-body model. Further details are available in appendices A and B 6 for the Raibert trotting quadruped <ref> [12] </ref>. The simulated robot's control system used on the simulation uses measurements which could be sensed or calculated on a physical robot, such as position, velocity, actuator lengths, and ground contact. <p> Appendix B contains further data about the control system, along with the twenty variable parameters to the control system and their initial values for a running quadruped. Some previous investigations into robotic behaviors while running are described in references <ref> [4, 5, 12] </ref>. 7 Chapter 2 Searching for Solutions In order to search for an appropriate set of control parameters you need a way of determining how well a set of parameters elicits a desired behavior. <p> It is specifically designed for trotting, and has not produced any other productive behaviors. This control system is a planar variation of the one used in Raibert's quadruped robot simulation <ref> [12] </ref>.
Reference: [13] <author> Robert Ringrose. </author> <title> The creature library. Unpublished reference guide to a C library used to create physically realistic simulations. </title>
Reference-contexts: The simulation is a rigid body simulation, the dynamics of which are generated using a commercial dynamic modeling program [14]. The rest of the simulation is automatically generated using the Creature Library, an aid to simulation generation we have written <ref> [13] </ref>. Because simulation creation is automated it is possible to change and re-create any simulation. The planar quadruped used in the examples is illustrated in figure 1-1; appendix A contains further data about the simulation. <p> The C code for the equations of motion was generated by a commercial dynamic modeling program [14]. The remainder of the simulation software was generated by the Creature Library, an aid for simulation generation <ref> [13] </ref>. The planar quadruped has telescoping legs and pin joints at the hips. Figure 1-1 contains an illustration of the quadruped and the associated free-body diagram. It is modeled as a tree of rigid bodies connected by pin and sliding joints.
Reference: [14] <author> D. E. Rosenthal and M. A. Sherman. </author> <title> High performance multibody simulations via symbolic equation manipulation and kane's method. </title> <journal> Journal of Astronautical Sciences, </journal> <volume> 34(3) </volume> <pages> 223-239, </pages> <year> 1986. </year>
Reference-contexts: The simulation is based on a physical robot which is described by Raibert [9, 10]. The simulation is a rigid body simulation, the dynamics of which are generated using a commercial dynamic modeling program <ref> [14] </ref>. The rest of the simulation is automatically generated using the Creature Library, an aid to simulation generation we have written [13]. Because simulation creation is automated it is possible to change and re-create any simulation. <p> The simulation uses rigid body dynamics and has the masses and moments of inertia listed in table A.1. The C code for the equations of motion was generated by a commercial dynamic modeling program <ref> [14] </ref>. The remainder of the simulation software was generated by the Creature Library, an aid for simulation generation [13]. The planar quadruped has telescoping legs and pin joints at the hips. Figure 1-1 contains an illustration of the quadruped and the associated free-body diagram.
Reference: [15] <author> Andrew Witkin and Michael Kass. </author> <title> Spacetime constraints. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 159-168, </pages> <month> August </month> <year> 1988. </year> <month> 40 </month>
Reference-contexts: The program repeats this process until the transformation is complete. Other work on self-tuning controllers [3], frequently using searching techniques such as genetic algorithms [6] or spacetime constraints <ref> [15] </ref>, has addressed similar problems. Tuning controllers for dynamically balanced legged systems is particularly challenging because the system is complex and there is usually only a limited area near the global minimum which does not result in catastrophic failure.
References-found: 15

