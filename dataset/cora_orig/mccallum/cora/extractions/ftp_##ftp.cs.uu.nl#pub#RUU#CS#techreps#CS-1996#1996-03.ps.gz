URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-03.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: hansz@cs.ruu.nl  E-mail: geser@fmi.uni-passau.de  
Phone: 2  
Title: Non-Looping Rewriting  
Author: Hans ZANTEMA and Alfons GESER 
Address: Utrecht, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  94030 Passau, Germany,  
Affiliation: 1 Dept. of Computer Science, Universiteit  Lehrstuhl fur Programmiersysteme, Universitat Passau,  
Abstract: In this paper we present a number of necessary conditions for the existence of loops, i.e. reductions of the form t ! + R c[t]. We investigate which of the known termination preserving transformation methods also preserve the non-existence of loops. We characterize the existence of loops by overlap closures. We illustrate these methods at new examples of a one-rule term rewriting system and a two-rule string rewriting system which admit a non-terminating reduction but no loop.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bachmair, L., and Dershowitz, N. </author> <title> Commutation, transformation, and termination. </title> <booktitle> In Proc. 8th Int. Conf. Automated Deduction (July 1986), </booktitle> <editor> J. Siekmann, Ed., </editor> <publisher> Springer LNCS 230, Springer, </publisher> <pages> pp. 5-20. </pages>
Reference: [2] <author> Bellegarde, F., and Lescanne, P. </author> <title> Transformation ordering. </title> <booktitle> In 2nd TAPSOFT (1987), </booktitle> <publisher> Springer LNCS 249, </publisher> <pages> pp. 69-80. </pages>
Reference: [3] <author> Bellegarde, F., and Lescanne, P. </author> <title> Termination by completion. Applicable Algebra in Engineering, </title> <journal> Communication and Computing 1, </journal> <volume> 2 (1990), </volume> <pages> 79-96. </pages>
Reference: [4] <author> Dauchet, M. </author> <title> Simulation of Turing machines by a regular rewrite rule. </title> <booktitle> Theoretical Computer Science 103, 2 (1992), </booktitle> <pages> 409-420. </pages> <booktitle> Appeared before in Proceedings of RTA89, Lecture Notes in Computer Science 355, </booktitle> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: By Thm. 12 then, R admits no loop either. 9 Decidability In this section all signatures and TRSs are assumed to be finite. It is well known that termination of TRSs is an undecidable property, even for SRSs 20 [13] and for one-rule TRSs <ref> [4, 17] </ref>. The problem whether termination is undecidable for one-rule SRSs is still open. In this section we consider the question of decidability of loopingness. It turns out that, like termination, the existence of loops is undecidable even for one-rule TRSs. <p> Proof. Turing machines M can be transformed to SRSs R M such that R M is terminating if and only if M is uniformly halting [13]. In a similar way, Turing machines can be transformed to a one-rule TRS <ref> [4] </ref>. Now the proposition follows from the known fact that unifom halting of Turing machines is neither semi-decidable nor co-semi-decidable (for a proof see e.g. [5], p. 224). Now we arrive at the results on looping. Proposition 25. It is semi-decidable whether a TRS admits a loop. 21 Proof.
Reference: [5] <author> Davis, M. D., Sigal, R., and Weyuker, E. J. </author> <title> Computability, complexity, </title> <booktitle> and languages fundamentals of theoretical computer science, 2nd ed. Computer Science and Scientific Computing. </booktitle> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: In a similar way, Turing machines can be transformed to a one-rule TRS [4]. Now the proposition follows from the known fact that unifom halting of Turing machines is neither semi-decidable nor co-semi-decidable (for a proof see e.g. <ref> [5] </ref>, p. 224). Now we arrive at the results on looping. Proposition 25. It is semi-decidable whether a TRS admits a loop. 21 Proof. Since the signature is finite, there exists an enumeration t 1 ; t 2 ; t 3 ; : : : of all terms.
Reference: [6] <author> Dershowitz, N. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of the 8th International Colloquium on Automata, Languages and Programming (ICALP81) (1981), vol. 115 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 448-458. </pages>
Reference-contexts: The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich [19, 20] and Lescanne [17]. For ground TRSs termination has been proved to be decidable by Huet and Lankford [13]; this result easily extends to right-ground TRSs <ref> [6] </ref>. It is easy to see that for right-ground TRSs the notions of termination and non-loopingness coincide, hence non-loopingness is decidable for right-ground TRSs. As in the proof of proposition 25 it is easily seen that it is semi-decidable whether a term initiates a loop with respect to some TRS.
Reference: [7] <author> Dershowitz, N. </author> <title> Termination of rewriting. </title> <journal> J. Symb. Comput. </journal> <volume> 3, 1&2 (Feb./April 1987), </volume> <pages> 69-115. Corrigendum: 4, 3, </pages> <month> Dec. </month> <year> 1987, </year> <pages> 409-410. </pages>
Reference: [8] <author> Dershowitz, N., and Hoot, C. </author> <title> Natural termination. </title> <institution> Theoretical Comput. Sci. </institution> <year> (1994). </year> <note> submitted. </note>
Reference-contexts: A collection of results about forward closures and termination is presented in Dershowitz and Hoot <ref> [8] </ref>. 8 New Examples In this section we present a one-rule TRS and a two-rule SRS, each having an infinite reduction but no looping reduction. Example 8.
Reference: [9] <author> Dershowitz, N., and Jouannaud, J.-P. </author> <title> Notations for rewriting. </title> <journal> Bull. </journal> <note> EATCS 43 (1991), 162-172. </note>
Reference: [10] <author> Ferreira, M. C. F., and Zantema, H. </author> <title> Dummy elimination: Making termination easier. </title> <booktitle> In Proc. 10th Cpnf. Fundamentals of Computation Theory (1995), </booktitle> <editor> H. Reichel, Ed., </editor> <publisher> Springer LNCS965, Springer, </publisher> <pages> pp. 243-252. </pages>
Reference-contexts: In the introduction step 9 one puts a mark for the dead part in a right hand side of a rule; in the elimination step the right hand side is broken up at the marked position. Ferreira and Zantema <ref> [10] </ref> introduce a version for term rewriting; we restrict ourselves here to a technically simpler version for string rewriting, as in our RTA-95 paper [26]. Definition 9.
Reference: [11] <author> Geupel, O. </author> <title> Overlap closures and termination of term rewriting sys-tems. </title> <type> Tech. Rep. </type> <institution> MIP-8922, Universitat Passau, Germany, </institution> <year> 1989. </year>
Reference: [12] <author> Guttag, J. V., Kapur, D., and Musser, D. R. </author> <title> On proving uniform termination and restricted termination of rewriting systems. </title> <journal> SIAM J. Comput. </journal> <volume> 12 (1983), </volume> <pages> 189-214. </pages>
Reference-contexts: Several characterizations of termination by closures are known. In this section we will give a characterization of looping by means of overlap closures. Definition 17 (Overlap Closure, <ref> [12] </ref>). Let a TRS R be given.
Reference: [13] <author> Huet, G., and Lankford, D. S. </author> <title> On the uniform halting problem for term rewriting systems. </title> <note> Rapport Laboria 283, INRIA, </note> <year> 1978. </year>
Reference-contexts: By Thm. 12 then, R admits no loop either. 9 Decidability In this section all signatures and TRSs are assumed to be finite. It is well known that termination of TRSs is an undecidable property, even for SRSs 20 <ref> [13] </ref> and for one-rule TRSs [4, 17]. The problem whether termination is undecidable for one-rule SRSs is still open. In this section we consider the question of decidability of loopingness. It turns out that, like termination, the existence of loops is undecidable even for one-rule TRSs. <p> Proposition 24. Termination is neither semi-decidable nor co-semi-decidable, both for SRSs and for one rule TRSs. Proof. Turing machines M can be transformed to SRSs R M such that R M is terminating if and only if M is uniformly halting <ref> [13] </ref>. In a similar way, Turing machines can be transformed to a one-rule TRS [4]. Now the proposition follows from the known fact that unifom halting of Turing machines is neither semi-decidable nor co-semi-decidable (for a proof see e.g. [5], p. 224). Now we arrive at the results on looping. <p> For arbitrary TRSs this has been proved by Plaisted [22]. The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich [19, 20] and Lescanne [17]. For ground TRSs termination has been proved to be decidable by Huet and Lankford <ref> [13] </ref>; this result easily extends to right-ground TRSs [6]. It is easy to see that for right-ground TRSs the notions of termination and non-loopingness coincide, hence non-loopingness is decidable for right-ground TRSs.
Reference: [14] <author> Kurihara, M., and Ohuchi, A. </author> <title> Modularity of simple termination of term rewriting systems. </title> <journal> Journal of IPS Japan 31, </journal> <volume> 5 (1990), </volume> <pages> 633-642. </pages>
Reference-contexts: We take this as a heavy argument in favour of decidability of the existence of loops for one-rule SRSs. Finally, a remarkable connection to simple termination is worth mentioning. As Kurihara and Ohuchi <ref> [14] </ref> have shown, a finite TRS R over signature F is simply terminating if and only if, the transitive closure of the rewrite 22 relation of the TRS R [ Emb (F ) is irreflexive.
Reference: [15] <author> Kurth, W. </author> <title> Termination und Konfluenz von Semi-Thue-Systemen mit nur einer Regel. </title> <type> Dissertation, </type> <institution> Technische Universitat Clausthal, Ger-many, </institution> <year> 1990. </year>
Reference: [16] <author> Kurth, W. </author> <title> One-rule semi-thue systems with loops of length one, two, or three. </title> <journal> RAIRO Inform. Theor. </journal> <note> (1995). submitted. </note>
Reference-contexts: For SRSs, Otto [21] has shown that the existence of proper loops (i.e. loops that are not cycles) is undecidable. Kurth <ref> [16] </ref> has given a decision procedure for the problem whether a one-rule SRS admits a loop of length 1, 2, or 3. In a recent technical report [18], McNaughton has given a decidable property, namely the existence of infinite, "well-behaved" derivations, which is sufficient for the existence of loops.
Reference: [17] <author> Lescanne, P. </author> <title> On termination of one rule rewrite systems. </title> <booktitle> Theoretical Computer Science 132 (1994), </booktitle> <pages> 395-401. </pages>
Reference-contexts: By Thm. 12 then, R admits no loop either. 9 Decidability In this section all signatures and TRSs are assumed to be finite. It is well known that termination of TRSs is an undecidable property, even for SRSs 20 [13] and for one-rule TRSs <ref> [4, 17] </ref>. The problem whether termination is undecidable for one-rule SRSs is still open. In this section we consider the question of decidability of loopingness. It turns out that, like termination, the existence of loops is undecidable even for one-rule TRSs. <p> Proof. Due to proposition 25 it is sufficient to prove that non-loopingness is undecidable. For arbitrary TRSs this has been proved by Plaisted [22]. The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich [19, 20] and Lescanne <ref> [17] </ref>. For ground TRSs termination has been proved to be decidable by Huet and Lankford [13]; this result easily extends to right-ground TRSs [6]. It is easy to see that for right-ground TRSs the notions of termination and non-loopingness coincide, hence non-loopingness is decidable for right-ground TRSs.
Reference: [18] <author> McNaughton, R. </author> <title> Well-behaved derivations in one-rule Semi-Thue Systems. </title> <type> Tech. Rep. 95-15, </type> <institution> Dept. of Computer Science, Rensselaer Polytechnic Institute, </institution> <address> Troy, NY, </address> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: For SRSs, Otto [21] has shown that the existence of proper loops (i.e. loops that are not cycles) is undecidable. Kurth [16] has given a decision procedure for the problem whether a one-rule SRS admits a loop of length 1, 2, or 3. In a recent technical report <ref> [18] </ref>, McNaughton has given a decidable property, namely the existence of infinite, "well-behaved" derivations, which is sufficient for the existence of loops. We take this as a heavy argument in favour of decidability of the existence of loops for one-rule SRSs.
Reference: [19] <author> Middeldorp, A., and Gramlich, B. </author> <title> Simple termination is difficult. </title> <booktitle> In Proceedings of the 5th Conference on Rewriting Techniques and Applications (1993), </booktitle> <editor> C. Kirchner, Ed., </editor> <volume> vol. </volume> <booktitle> 690 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer. </publisher>
Reference-contexts: Proof. Due to proposition 25 it is sufficient to prove that non-loopingness is undecidable. For arbitrary TRSs this has been proved by Plaisted [22]. The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich <ref> [19, 20] </ref> and Lescanne [17]. For ground TRSs termination has been proved to be decidable by Huet and Lankford [13]; this result easily extends to right-ground TRSs [6].
Reference: [20] <author> Middeldorp, A., and Gramlich, B. </author> <title> Simple termination is difficult. Applicable Algebra in Engineering, </title> <journal> Communication and Computing 6, </journal> <volume> 2 (1995), </volume> <pages> 115-128. </pages>
Reference-contexts: Proof. Due to proposition 25 it is sufficient to prove that non-loopingness is undecidable. For arbitrary TRSs this has been proved by Plaisted [22]. The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich <ref> [19, 20] </ref> and Lescanne [17]. For ground TRSs termination has been proved to be decidable by Huet and Lankford [13]; this result easily extends to right-ground TRSs [6].
Reference: [21] <author> Otto, F. </author> <title> The undecidability of self-embedding for finite semi-Thue and Thue systems. </title> <journal> Theoretical Comput. Sci. </journal> <volume> 47 (1986), </volume> <pages> 225-232. </pages>
Reference-contexts: As a consequence, for classes of TRSs in which every infinite derivation contains a loop, for instance non-length-increasing TRSs and right-ground TRSs, it is decidable whether a term initiates an infinite derivation or not. For SRSs, Otto <ref> [21] </ref> has shown that the existence of proper loops (i.e. loops that are not cycles) is undecidable. Kurth [16] has given a decision procedure for the problem whether a one-rule SRS admits a loop of length 1, 2, or 3.
Reference: [22] <author> Plaisted, D. </author> <title> The undecidability of self-embedding for term rewriting systems. </title> <booktitle> Information Processing Letters 20 (1985), </booktitle> <pages> 61-64. 25 </pages>
Reference-contexts: Proposition 26. It is not co-semi-decidable whether a one rule TRS admits a loop. Proof. Due to proposition 25 it is sufficient to prove that non-loopingness is undecidable. For arbitrary TRSs this has been proved by Plaisted <ref> [22] </ref>. The stronger result for one rule TRSs has been proved by Middeldorp and Gramlich [19, 20] and Lescanne [17]. For ground TRSs termination has been proved to be decidable by Huet and Lankford [13]; this result easily extends to right-ground TRSs [6].
Reference: [23] <author> Purdom, Jr, P. W. </author> <title> Detecting looping simplifications. </title> <booktitle> In Proc. 2nd Int. Conf. Rewriting Techniques and Applications (May 1987), </booktitle> <editor> P. Les-canne, Ed., </editor> <publisher> Springer LNCS 256, Springer, </publisher> <pages> pp. 54-61. </pages>
Reference: [24] <author> Rosen, B. </author> <title> Tree-manipulating systems and church-rosser theorems. </title> <journal> J. ACM 20, </journal> <month> 1 (Jan. </month> <year> 1973), </year> <pages> 160-187. </pages>
Reference-contexts: If R is left-linear then OC (R) is left-linear. The fairly technical definition of overlap closure becomes clearer as soon as one considers the fate of the positions in the terms during the reduction. To this end, we use Rosen's <ref> [24] </ref> notion of residual. Intuitively, residual positions "correspond" to each other in a rewrite step. For the positions of the occurrence of the left hand side of the rule, there is no corresponding position at the right hand side: They are touched.
Reference: [25] <author> Zantema, H. </author> <title> Termination of term rewriting by semantic labelling. </title> <note> Fundamenta Informaticae 24 (1995), 89-105. </note>
Reference-contexts: Choose the one-rule system T = fggflf f f ! fl 0 g where fl 0 is a new dummy symbol. There are no critical pairs between T and R. The transformed system gf ! fl 0 trivially terminates. 6 Semantic Labelling The purpose of semantic labelling <ref> [25] </ref> is to collect global information of a term, and to deposit it as a label where it can be accessed locally. Local termination proof methods such as precedence-based path orders or monotonic interpretations may greatly profit from such a step.
Reference: [26] <author> Zantema, H., and Geser, A. </author> <title> A complete characterization of termination of 0 p 1 q ! 1 r 0 s . In Proceedings of the 6th Conference on Rewriting Techniques and Applications (1995), </title> <editor> J. Hsiang, Ed., </editor> <volume> vol. </volume> <booktitle> 914 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 41-55. </pages> <note> Appeared as report UU-CS-1994-44, </note> <institution> Utrecht University. </institution>
Reference-contexts: Ferreira and Zantema [10] introduce a version for term rewriting; we restrict ourselves here to a technically simpler version for string rewriting, as in our RTA-95 paper <ref> [26] </ref>. Definition 9. For each string of the form s = r 1 flr 2 flr n where r i 2 (A n fflg) fl for all i 2 f1; : : : ; ng, let E (s) = def fr 1 ; : : : ; r n g.
Reference: [27] <author> Zhang, X. </author> <title> Overlap closures do not suffice for termination of general term rewriting systems. </title> <journal> Inf. Process. Lett. </journal> <volume> 37, 1 (1991), </volume> <pages> 9-11. 26 </pages>
Reference-contexts: A TRS is called quasi-terminating if every reduction is either finite or ends in a cycle. 15 Theorem 21 ([12]). A left-linear, quasi-terminating TRS terminates (i.e., admits no cycle), if and only if there is no reflexive overlap closure. As Zhang <ref> [27] </ref> demonstrates, the left-linearity condition in both theorems is essential. It is now natural to seek a similar characterization for looping. We can offer a characterization result for SRSs. We will call an overlap closure of the form t ! + R ptq a looping overlap closure. Theorem 22.
References-found: 27

