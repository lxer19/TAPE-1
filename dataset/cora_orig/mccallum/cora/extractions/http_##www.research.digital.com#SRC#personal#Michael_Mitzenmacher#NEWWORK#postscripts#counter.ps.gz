URL: http://www.research.digital.com/SRC/personal/Michael_Mitzenmacher/NEWWORK/postscripts/counter.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/Michael_Mitzenmacher/NEWWORK/papers.html
Root-URL: http://www.research.digital.com
Title: Revisiting the COUNTER Algorithms for List Update  
Author: Susanne Albers Michael Mitzenmacher 
Abstract: 3 + *. In this paper we use a mixture of two COUNTER algorithms to achieve a competitiveness of 12=7, which is less than p 3. Furthermore, we demonstrate that it is impossible to prove a competitive ratio smaller than 12=7 for any mixture of COUNTER algorithms using the type of potential function argument that has been used so far. We also provide new lower bounds for the competitiveness of COUNTER algorithms in the standard cost model, including a 1.625 lower bound for the variant BIT and a matching 12/7 lower bound for our algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Albers, B. von Stengel, and R. Werchner. </author> <title> A combined BIT and TIMESTAMP algorithm for the list update problem. </title> <journal> Information Processing Letters, </journal> <volume> 56 </volume> <pages> 135-139, </pages> <year> 1995. </year> <month> 7 </month>
Reference-contexts: For any positive *, there are algorithms in this family that achieve a competitive ratio of 3 + * 1:73 + *. Randomized algorithms achieving a better competitive ratio were presented in <ref> [1] </ref>. A drawback of these algorithms is that, in a straightforward implementation, a second pass through the list is required after each request to an item. <p> With our lower bounds, we have achieved nearly tight bounds on members of the the COUNTER family. We conclude that beating the 1.6-competitive algorithm for list update from <ref> [1] </ref> will require different types of algorithms, although the simple COUNTER algorithms may be more useful in practice.
Reference: [2] <author> R. Bachrach and R. El-Yaniv. </author> <title> Online list accessing algorithms and their applications: Recent Empirical Evidence. </title> <booktitle> In Proceedings of the 8th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 53-62, </pages> <year> 1997. </year>
Reference-contexts: For more information, see, for example, [4] or <ref> [2] </ref>. The best competitive ratio that can be achieved by deterministic on-line algorithms is 2. Sleator and Tarjan [8] proved that the Move-To-Front rule is 2-competitive, and Karp and Raghavan [5] observed that this is the best achievable competitive ratio for any deterministic on-line algorithm for the problem.
Reference: [3] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the power of randomization in on-line algorithms. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <year> 2-14,1994. </year>
Reference-contexts: More recent work has focused on randomized list update algorithms. Here we consider algorithms against the oblivious adversary, see <ref> [3] </ref>. Against adaptive adversaries, no randomized on-line algorithm for list update can be better than 2-competitive. Reingold et al. [7] developed an elegant family of so-called COUNTER algorithms.
Reference: [4] <author> J.L. Bentley, D.S. Sleator, R.E. Tarjan, and V.K. Wei. </author> <title> A locally adaptive data compression scheme. </title> <journal> Communication of the ACM, </journal> <volume> 29 </volume> <pages> 320-330, </pages> <year> 1986. </year>
Reference-contexts: For more information, see, for example, <ref> [4] </ref> or [2]. The best competitive ratio that can be achieved by deterministic on-line algorithms is 2. Sleator and Tarjan [8] proved that the Move-To-Front rule is 2-competitive, and Karp and Raghavan [5] observed that this is the best achievable competitive ratio for any deterministic on-line algorithm for the problem.
Reference: [5] <author> R. Karp and P. Raghavan. </author> <title> From a personal communication cited in [7]. </title>
Reference-contexts: For more information, see, for example, [4] or [2]. The best competitive ratio that can be achieved by deterministic on-line algorithms is 2. Sleator and Tarjan [8] proved that the Move-To-Front rule is 2-competitive, and Karp and Raghavan <ref> [5] </ref> observed that this is the best achievable competitive ratio for any deterministic on-line algorithm for the problem. More recent work has focused on randomized list update algorithms. Here we consider algorithms against the oblivious adversary, see [3].
Reference: [6] <author> N. Reingold and J. Westbrook. </author> <title> Optimum off-line algorithms for the list update problem. </title> <type> Technical Report YALEU/DCS/TR-805, </type> <institution> Yale University, </institution> <year> 1990. </year>
Reference-contexts: Given a particular COUNTER algorithm and a sequence oe = oe (1); oe (2); : : :; oe (m) of accesses, let C CT (oe (t)) and C OP T (oe (t)) denote the actual costs incurred by COUNTER and OPT on oe (t), 1 t m. In <ref> [6] </ref>, it was shown that there exists an optimal o*ine algorithm that only uses paid exchanges to move items in the list; we will implicitly use this in what follows. Reingold et al. [7] analyzed list update algorithms using potential functions.
Reference: [7] <author> N. Reingold, J. Westbrook, and D.D. Sleator. </author> <title> Randomized competitive algorithms for the list update problem. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 15-32, </pages> <year> 1994. </year>
Reference-contexts: More recent work has focused on randomized list update algorithms. Here we consider algorithms against the oblivious adversary, see [3]. Against adaptive adversaries, no randomized on-line algorithm for list update can be better than 2-competitive. Reingold et al. <ref> [7] </ref> developed an elegant family of so-called COUNTER algorithms. On each request to an item in the list, these algorithms either move the item to the front of the list or leave it where it is. <p> Next, we develop new lower bounds on the competitive ratio of COUNTER algorithms in the standard model that are very close to the upper bounds developed by Reingold et al. <ref> [7] </ref>. Our results demonstrate that BIT, the simplest and most well-known member of the COUTNER family, is not better than 1.625-competitive. Also, it demonstrates that our analysis of the 12 7 -competitive mixed algorithm is tight. <p> An optimal o*ine algorithm knows the entire request sequence in advance and can serve it with minimum cost. In <ref> [7] </ref>, Reingold et al. first presented an elegant randomized algorithm, called BIT. For each item x in the list, BIT maintains a bit b (x). These bits are initialized independently and uniformly at random. Whenever an item x is accessed, its bit is complemented. <p> These bits are initialized independently and uniformly at random. Whenever an item x is accessed, its bit is complemented. If the bit changes to 0, the item is moved to the front of the list; otherwise the position of the item remains unchanged. Reingold et al. <ref> [7] </ref> showed that BIT is 1.75-competitive. The COUNTER algorithms are a generalization of the BIT algorithm. Let s be a positive integer, and let S be a nonempty subset of f0; : : :; s1g. <p> On each access to an item x, the counter of x is decremented by 1, and x is moved to the front of the list if the counter value is in S. Reingold et al. <ref> [7] </ref> showed that for any * &gt; 0, there is a ( p 3 + *)-competitive COUNTER algorithm. Note that COUNTER algorithms are barely random, which means that they use only a constant number of random bits (for the initialization of the counters) regardless of the number of requests. <p> Note that COUNTER algorithms are barely random, which means that they use only a constant number of random bits (for the initialization of the counters) regardless of the number of requests. Reingold et al. <ref> [7] </ref> also demonstrate a p 3-competitive algorithm that is not barely random, based on the similar family of RANDOM RESET algorithms. 3 Improved COUNTER algorithms In this section, we show how to mix COUNTER algorithms to achieve a better competitive ratio of 12 7 . <p> In [6], it was shown that there exists an optimal o*ine algorithm that only uses paid exchanges to move items in the list; we will implicitly use this in what follows. Reingold et al. <ref> [7] </ref> analyzed list update algorithms using potential functions. <p> Here E [] is the expected change in potential during the operation. b) c 2 -competitive on paid exchanges if E [] c 2 for any paid exchange made by OPT. The bounds of <ref> [7] </ref> are obtained by noting that if a COUNTER (s; S) algorithm is c 1 -competitive on accesses and c 2 -competitive on paid exchanges, then it is maxfc 1 ; c 2 g-competitive. We improve on this by taking mixtures of COUNTER algorithms. <p> We improve on this by taking mixtures of COUNTER algorithms. We introduce a key proposition, taken from Theorem 3.5 in <ref> [7] </ref>, that describes the competitiveness of COUNTER (s; S) algorithms on accesses and paid exchanges. <p> Again, these are both at least 6 1+6p 1 over the appropriate intervals. The proof follows. We note that the lower bound argument of Theorem 4 applies to the RANDOM RESET algorithms of <ref> [7] </ref>. Choosing the counter size randomly can be used to obtain algorithms with marginally better competitive ratios in the P d model for the list update problem described in [7] as well. 4 4 Lower bounds We now consider lower bounds on the competitive ratio of COUNTER algorithms in the standard <p> The proof follows. We note that the lower bound argument of Theorem 4 applies to the RANDOM RESET algorithms of <ref> [7] </ref>. Choosing the counter size randomly can be used to obtain algorithms with marginally better competitive ratios in the P d model for the list update problem described in [7] as well. 4 4 Lower bounds We now consider lower bounds on the competitive ratio of COUNTER algorithms in the standard model. First we give a general lower bound for COUNTER (s; S) algorithms that is very close to the upper bounds presented in Proposition 2. <p> Using this general lower bound, we are able to derive a lower bound for BIT. Previous lower bounds for BIT were given by Reingold et al. <ref> [7] </ref> in the i 1 cost model, in which an access to the i-th item in the list incurs a cost if i 1 rather than i. In fact, they showed that in this model, BIT is exactly 1:75-competitive.
Reference: [8] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communication of the ACM, </journal> <volume> 28 </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: For more information, see, for example, [4] or [2]. The best competitive ratio that can be achieved by deterministic on-line algorithms is 2. Sleator and Tarjan <ref> [8] </ref> proved that the Move-To-Front rule is 2-competitive, and Karp and Raghavan [5] observed that this is the best achievable competitive ratio for any deterministic on-line algorithm for the problem. More recent work has focused on randomized list update algorithms. Here we consider algorithms against the oblivious adversary, see [3].
Reference: [9] <author> J. Westbrook. </author> <title> Randomized algorithms for multiprocessor page migration. </title> <journal> SIAM Journal of Computing, </journal> <volume> 23 </volume> <pages> 951-965, </pages> <year> 1994. </year> <month> 8 </month>
Reference-contexts: Also, it demonstrates that our analysis of the 12 7 -competitive mixed algorithm is tight. Finally, we briefly describe how the technique of mixing COUNTER algorithms can be also used to improve similar counter-based on-line algorithms for page migration from <ref> [9] </ref>. 2 The list update problem and COUNTER algorithms We formally define the list update problem. Consider n items stored in an unsorted linear linked list. A list update algorithm receives a sequence of requests, where each request specifies one item in the list. <p> Hence the combination is at best 12 7 -competitive. The corresponding upper bound is proven in Theorem 3. 5 Page migration algorithms Choosing a counter size randomly to obtain algorithms with improved competitive ratios can also be applied to the randomized page migration algorithms found in <ref> [9] </ref>, which are similarly based on simple counters. For example, in the notation of [9], for uniform graphs where the page size D = 1, a 2.75-competitive randomized algorithm is given using a modulo 2 counter. <p> corresponding upper bound is proven in Theorem 3. 5 Page migration algorithms Choosing a counter size randomly to obtain algorithms with improved competitive ratios can also be applied to the randomized page migration algorithms found in <ref> [9] </ref>, which are similarly based on simple counters. For example, in the notation of [9], for uniform graphs where the page size D = 1, a 2.75-competitive randomized algorithm is given using a modulo 2 counter. <p> As D grows to infinity, however, the improvement obtainable using this method falls to 0. It is interesting to note for uniform graphs the analysis of <ref> [9] </ref> uses different potential functions for each possible counter size. <p> We point out that the random resetting and deterministic resetting algorithms suggested in <ref> [9] </ref> for the case of general graphs can be improved similarly by choosing the size of the counter randomly with appropriate weights. 6 Conclusion We have improved bounds for counter-based algorithms on the list update problem, by randomizing the choice of the counter size.
References-found: 9

