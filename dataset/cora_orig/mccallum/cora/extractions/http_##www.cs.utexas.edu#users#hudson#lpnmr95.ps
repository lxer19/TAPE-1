URL: http://www.cs.utexas.edu/users/hudson/lpnmr95.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: http://www.cs.utexas.edu
Email: (teodor@cs.ucr.edu)  (hudson@cs.utexas.edu)  
Title: Update by Means of Inference Rules  
Author: Teodor C. Przymusinski Hudson Turner 
Address: Riverside, CA 92521, USA  Austin, TX 78712 USA  
Affiliation: Department of Computer Science University of California  Department of Computer Sciences University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: [GL88] <author> M. Gelfond and V. Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Proceedings of the Fifth Logic Programming Symposium, </booktitle> <pages> pages 1070-1080, </pages> <address> Cambridge, Mass., </address> <year> 1988. </year> <title> Association for Logic Programming, </title> <publisher> MIT Press. </publisher>
Reference-contexts: The definition of an extension given above follows [GLPT91], and is equivalent to Reiter's definition. bodies as conjunctions of atoms, we can identify a positive logic program with a propositional Horn theory. 5 Definition 1. (Stable Models) <ref> [GL88] </ref> Let P be a logic program over a language K and let M be an interpretation of K.
Reference: [GL90] <author> M. Gelfond and V. Lifschitz. </author> <title> Logic programs with classical negation. </title> <booktitle> In Proceedings of the Seventh International Logic Programming Conference, Jerusalem, Israel, </booktitle> <pages> pages 579-597, </pages> <address> Cambridge, Mass., </address> <year> 1990. </year> <title> Association for Logic Programming, </title> <publisher> MIT Press. </publisher>
Reference-contexts: Since program P M is a Horn theory, it has a unique least model Least ( P M ). The interpretation M is called a stable model of the program P if M = Least ( P M ). ut Definition 2. (Extended Logic Programs) <ref> [GL90] </ref> (see also [Prz94]) Let K be a propositional language. Let K fl be an extended propositional language obtained from K by augmenting it with new propositional letters ~A, for some (or all) propositional letters A in K. <p> In particular, one can use the disjunctive stable semantics, originally introduced in <ref> [GL90, Prz91] </ref>. Another possibility, discussed later in the paper, is to translate revision programs into default logic. <p> This is reasonably straightforward, using the well-known equivalence between extended logic programming (under the stable semantics) and the corresponding subset of default logic <ref> [GL90] </ref>. 2 7.2 Extending rule update via disjunctive default logic It is possible to extend the definition of rule update so that it encompasses the disjunctive revision programs considered in Section 4.1. We briefly sketch this possibility below.
Reference: [GLPT91] <author> Michael Gelfond, Vladimir Lifschitz, Halina Przymusinska, and Miros law Truszczynski. </author> <title> Disjunctive defaults. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Second Int'l Conf., </booktitle> <pages> pages 230-237, </pages> <year> 1991. </year>
Reference-contexts: The translation into default logic provides a bridge between our newly introduced formalism and a well-known non-monotonic formalism. It also suggests a possible generalization of rule updates to "disjunctive rule updates" based on disjunctive default logic <ref> [GLPT91] </ref>. The introduction of rule update provides a new framework for interpretation updates and thus also for theory updates. <p> By interpreting lists of atoms in rule 3 At times we will find it convenient to identify a propositional formula with the inference rule True . 4 The definition of a default theory is due to Reiter [Rei80]. The definition of an extension given above follows <ref> [GLPT91] </ref>, and is equivalent to Reiter's definition. bodies as conjunctions of atoms, we can identify a positive logic program with a propositional Horn theory. 5 Definition 1. (Stable Models) [GL88] Let P be a logic program over a language K and let M be an interpretation of K. <p> According to the definition considered in Section 4.1, both ; and fag would be P -justified revisions of fag, whereas fag is the only update of fag by R. Using disjunctive default logic <ref> [GLPT91] </ref>, it is possible to incorporate these two different treatments of disjunction into a single definition of update. <p> Thus, disjunctive logic programming under the stable semantics is equivalent to a subclass of disjunctive default logic <ref> [GLPT91] </ref>. We rely on this fact below. Let R be a justification-free disjunctive default theory. So R is a set of rules of the form where all of ; 1 ; : : : ; n are propositional formulae. Let I; I 0 be interpretations.
Reference: [KM91] <author> Hirofumi Katsuno and Alberto O. Mendelzon. </author> <title> On the difference between updating a knowledge base and revising it. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Second Int'l Conf., </booktitle> <pages> pages 387-394, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Katsuno and Mendelzon <ref> [KM91] </ref> have distinguished two abstract frameworks for reasoning about change: theory revision and theory update. Theory revision involves a change in knowledge or belief with respect to a static world.
Reference: [MT93] <author> W. Marek and M. Truszczynski. </author> <title> Revision programming. </title> <type> Research report, </type> <institution> University of Kentucky, </institution> <year> 1993. </year>
Reference-contexts: The first part of the paper is devoted to the study of revision programs, introduced by Marek and Truszczynski <ref> [MT93, MT94, MT95a] </ref> to formalize interpretation update in a language similar to the language of logic programming. Revision programs are essentially sets of logic program rules, which can be interpreted as inference rules and used to update interpretations. <p> a stable model of P over K fl an extended stable model of P if there is no atom A 2 K such that both A and ~A are true in M . ut 3 Embedding Revision Programs into Logic Programs Revision programs were introduced by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> in order to formalize interpretation update in a language similar to the language of logic programming. <p> in (b); ~in I (a); ~in I (b)g which correspond to the two P-justified revisions fbg and fag. ut 11 Notice that now the inertia axioms for in () can be skipped. 4 Properties of Revision Programs Many of the results involving revision programs obtained by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> become simple consequences of the em-beddability of revision programs into logic programs with stable semantics.
Reference: [MT94] <author> W. Marek and M. Truszczynski. </author> <title> Revision specifications by means of revision programs. </title> <booktitle> In Logics in AI. Proceedings of JELIA '94. Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The first part of the paper is devoted to the study of revision programs, introduced by Marek and Truszczynski <ref> [MT93, MT94, MT95a] </ref> to formalize interpretation update in a language similar to the language of logic programming. Revision programs are essentially sets of logic program rules, which can be interpreted as inference rules and used to update interpretations. <p> a stable model of P over K fl an extended stable model of P if there is no atom A 2 K such that both A and ~A are true in M . ut 3 Embedding Revision Programs into Logic Programs Revision programs were introduced by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> in order to formalize interpretation update in a language similar to the language of logic programming. <p> formalism is strictly more general than logic programming: "This formalism properly extends logic programming with stable semantics. [...] However, revision programming is significantly more expressive. [...] While logic programs do not allow one to state that an atom must be absent from a model, revision programs explicitly talk about deletions" <ref> [MT94] </ref>. In this section we show that there is a simple embedding of revision programs into logic programs with stable semantics and into extended logic programs with stable semantics. Consequently, the two formalisms are precisely equivalent. <p> Consequently, the two formalisms are precisely equivalent. In the next section we show how one can easily derive various properties of revision programs from this translation and from known properties of logic programs. 3.1 Revision Programs We first recall the definition of revision programs. Following <ref> [MT94] </ref> we fix a countable set U . 5 Before continuing, we recall the fact that propositional programs and default theories can be viewed as instantiated versions of programs and theories with variables. Thus the results in this paper apply to the general case. Definition 3. (Revision Programs) [MT94] A revision <p> Following <ref> [MT94] </ref> we fix a countable set U . 5 Before continuing, we recall the fact that propositional programs and default theories can be viewed as instantiated versions of programs and theories with variables. Thus the results in this paper apply to the general case. Definition 3. (Revision Programs) [MT94] A revision in-rule or, simply, an in-rule, is any expression of the form in (p) in (q 1 ); : : : ; in (q m ); out (s 1 ); : : : ; out (s n ); (3) where p, q i , 1 i m, and s <p> However, as we will see below, they are given a special revision semantics which differs significantly from the least model semantics of positive logic programs. We first need the definition of the necessary change determined by a revision program. Definition 4. (Necessary Change) <ref> [MT94] </ref> Let P be a revision program with least model M . The necessary change determined by P is the pair (I; O), where I = fq : in (q) 2 M g and O = fq : out (q) 2 M g. <p> The revision program is called coherent if I " O = ;. ut Now we are ready to define the so-called P-justified revisions. Definition 5. (P-Justified Revision) <ref> [MT94] </ref> Suppose that P is a revision program, B I is the initial knowledge base and B R is the revised knowledge base. <p> propositional letters consists of fin (q) : q 2 U g [ fout (q) : q 2 U g [ fin I (q) : q 2 U g [ fout I (q) : q 2 U g. 6 Although the definition given below differs slightly from the one given in <ref> [MT94] </ref> it is easily seen to be equivalent. <p> in (b); ~in I (a); ~in I (b)g which correspond to the two P-justified revisions fbg and fag. ut 11 Notice that now the inertia axioms for in () can be skipped. 4 Properties of Revision Programs Many of the results involving revision programs obtained by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> become simple consequences of the em-beddability of revision programs into logic programs with stable semantics. <p> First, let us observe that the fact that the translation P (P; B I ) of a revision program is completely symmetric with respect to the atoms in and out immediately yields the following result: Theorem 10. <ref> [MT94] </ref> Let P be a revision program and let B I be a knowledge base. <p> a P -justified revision of B I if and only if U B R is a P D justified revision of U B I where P D is a dual of the program P obtained by simultaneously replacing everywhere in by out and vice versa. ut The following result from <ref> [MT94] </ref> stating that logic programs with stable semantics are embeddable into revision programs becomes an easy consequence: Theorem 11. [MT94] Let P be a logic program consisting of rules: p q 1 ; : : : ; q m ; not s 1 ; : : :; not s n and <p> revision of U B I where P D is a dual of the program P obtained by simultaneously replacing everywhere in by out and vice versa. ut The following result from <ref> [MT94] </ref> stating that logic programs with stable semantics are embeddable into revision programs becomes an easy consequence: Theorem 11. [MT94] Let P be a logic program consisting of rules: p q 1 ; : : : ; q m ; not s 1 ; : : :; not s n and let R (P ) be the revision program obtained by replacing each rule of P with the in-rule: in <p> Since revision programming is equivalent to logic programming under stable semantics, computational methods developed for the stable semantics (or, perhaps, for its approximations, such as the well-founded semantics) can be used to provide a query answering mechanism for revision programming. 4.1 Extending revision programming to disjunctive programs In <ref> [MT94] </ref> the authors propose an extension of revision programming to disjunctive revision programs consisting of rules of the following form. in (p 1 )_ _in (p k )_out (r 1 )_ _out (r l ) in (q 1 ); :::; in (q m ); out (s 1 ); :::; out (s <p> The definition of rule update is simpler than the definition of revision programming. It is also significantly more general, since it allows updates by means of arbitrary inference rules. 13 Mirek Truszczynski informed the authors that the definition contained in <ref> [MT94] </ref> is indeed incorrect. Definition 12. (Rule Update) Let R be a set of inference rules. Let I; I 0 be interpretations.
Reference: [MT95a] <author> W. Marek and M. Truszczynski. </author> <title> Revision programming, database updates and integrity constraints. </title> <booktitle> In Proceedings of the 5th International Conference on Database Theory | ICDT 95, </booktitle> <pages> pages 368-382. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The first part of the paper is devoted to the study of revision programs, introduced by Marek and Truszczynski <ref> [MT93, MT94, MT95a] </ref> to formalize interpretation update in a language similar to the language of logic programming. Revision programs are essentially sets of logic program rules, which can be interpreted as inference rules and used to update interpretations. <p> a stable model of P over K fl an extended stable model of P if there is no atom A 2 K such that both A and ~A are true in M . ut 3 Embedding Revision Programs into Logic Programs Revision programs were introduced by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> in order to formalize interpretation update in a language similar to the language of logic programming. <p> in (b); ~in I (a); ~in I (b)g which correspond to the two P-justified revisions fbg and fag. ut 11 Notice that now the inertia axioms for in () can be skipped. 4 Properties of Revision Programs Many of the results involving revision programs obtained by Marek and Truszczynski in <ref> [MT93, MT94, MT95a] </ref> become simple consequences of the em-beddability of revision programs into logic programs with stable semantics. <p> For example, the complexity results obtained in <ref> [MT95a, Theorem 4.2] </ref>, stating the NP-completeness of some problems involving the computation of P-justified revisions, can be easily seen to follow from similar results already known about the computation of stable models and from the equivalence of the two formalisms. Below we give some other examples illustrating this claim.
Reference: [MT95b] <author> Norman McCain and Hudson Turner. </author> <title> A causal theory of ramifications and qualifications (extended abstract). </title> <booktitle> In Working Notes: AAAI Spring Symposium on Extending Theories of Action, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: In spite of its great simplicity, rule update constitutes a powerful and expressive mechanism which determines updates of theories by arbitrarily complex sets of inference rules and is applicable to various knowledge domains. For example, in <ref> [MT95b] </ref> McCain and Turner apply rule update to the problem of reasoning about the effects of actions. We proceed with preliminary definitions in Section 2.
Reference: [Prz91] <author> T. C. Przymusinski. </author> <title> Stable semantics for disjunctive programs. </title> <journal> New Generation Computing Journal, </journal> <volume> 9 </volume> <pages> 401-424, </pages> <year> 1991. </year> <title> (Extended abstract appeared in: Extended stable semantics for normal and disjunctive logic programs. </title> <booktitle> Proceedings of the 7-th International Logic Programming Conference, Jerusalem, </booktitle> <pages> pages 459-477, </pages> <address> 1990. </address> <publisher> MIT Press.). </publisher>
Reference-contexts: In particular, one can use the disjunctive stable semantics, originally introduced in <ref> [GL90, Prz91] </ref>. Another possibility, discussed later in the paper, is to translate revision programs into default logic.
Reference: [Prz94] <author> T. C. Przymusinski. </author> <title> Static semantics for normal and disjunctive logic programs. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <note> 1994. (in print). </note>
Reference-contexts: Since program P M is a Horn theory, it has a unique least model Least ( P M ). The interpretation M is called a stable model of the program P if M = Least ( P M ). ut Definition 2. (Extended Logic Programs) [GL90] (see also <ref> [Prz94] </ref>) Let K be a propositional language. Let K fl be an extended propositional language obtained from K by augmenting it with new propositional letters ~A, for some (or all) propositional letters A in K. The new propositional symbols ~A are called strong (or "classical") negation of A.
Reference: [Rei80] <author> Raymond Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13(1,2):81-132, </volume> <year> 1980. </year>
Reference-contexts: By interpreting lists of atoms in rule 3 At times we will find it convenient to identify a propositional formula with the inference rule True . 4 The definition of a default theory is due to Reiter <ref> [Rei80] </ref>.
Reference: [Win88] <author> Marianne Winslett. </author> <title> Reasoning about action using a possible models approach. </title> <booktitle> In Proc. AAAI-88, </booktitle> <pages> pages 89-93, </pages> <year> 1988. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: In fact, it may be that your flight has just been cancelled. In this paper we are concerned with theory update. A key insight into the nature of update is due to Winslett <ref> [Win88] </ref> who showed that reasoning about the effects of actions should be done "interpretation by interpretation". This insight is apparent in the general definition of theory update due to Katsuno and Mendelzon, which can be stated as follows. Let and T be sets of propositional formulae. <p> In particular, we compare our definition of update by means of inference rules to the notion of update by means of formulae. For this purpose we define below a notion of "formula-update" of interpretations that corresponds to the notion of update in <ref> [Win88] </ref>, and we show that rule update is more general than formula update. We also investigate the expressiveness associated with the "directionality" of rules.
References-found: 12

