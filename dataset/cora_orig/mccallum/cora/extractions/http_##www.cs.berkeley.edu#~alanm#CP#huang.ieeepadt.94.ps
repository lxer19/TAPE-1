URL: http://www.cs.berkeley.edu/~alanm/CP/huang.ieeepadt.94.ps
Refering-URL: http://www.cs.berkeley.edu/~alanm/CP/bib.html
Root-URL: 
Title: Communication Issues in Parallel Computing across ATM Networks  
Author: Chengchang Huang and Philip K. McKinley 
Abstract: Technical Report MSU-CPS-94-34 June 1994 Revised September 1994 This paper has been accepted to appear in IEEE Parallel and Distributed Technology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. S. Sunderam, </author> <title> "PVM: A framework for parallel distributed computing," </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol. 2(4), </volume> <pages> pp. 315-339, </pages> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: First, high-performance workstations with microprocessors that challenge custom architectures are widely available at relatively low cost. Second, several software packages have been developed to assist the programmer in process management, interprocess communication, and program monitoring and debugging in a distributed environment <ref> [1] </ref>. Moreover, while both MPCs and clusters are characterized by the distribution of memory among processors, which improves system scalability, clusters are typically less expensive and more flexible. <p> We have implemented and tested these three multicast approaches on our ATM testbed. We incorporated the recursive doubling multicast tree algorithm into our local version of PVM <ref> [1] </ref>, a popular communications package available from Oak Ridge National Laboratory. As it is distributed, PVM provides a multicast operation, pvm mcast (), that uses separate addressing to distribute the message among nodes. Using hardware multicast required us to provide our own reliability atop AAL5.
Reference: [2] <author> H. T. Kung, R. Sansom, S. Schlick, P. Steenkiste, M. Arnould, F. J. Bitz, F. Christianson, E. C. Cooper, O. Menzilcioglu, D. Ombres, and B. Zill, </author> <title> "Network-based multicomputers: An emerging parallel architecture," </title> <booktitle> in Proceedings of Supercomputing'91, </booktitle> <pages> pp. 664-673, </pages> <publisher> IEEE CS Press, </publisher> <year> 1991. </year>
Reference-contexts: Indeed, such platforms have proved very successful in supporting certain classes of applications. However, shared physical media and inefficient protocol implementations can result in interprocess communication latencies that preclude effective execution of many other parallel applications. For communication-intensive applications, higher-speed networks with more efficient interfaces are needed <ref> [2] </ref>. Recently, several network architectures based on high-speed switches have been introduced. Examples include High Performance Parallel Interface (HiPPI) and the Fibre Channel Standard (FCS). In addition, fiber-optic LANs using Asynchronous Transfer Mode (ATM) protocols [3] are now commercially available [4].
Reference: [3] <author> A. Hac and H. B. Mutlu, </author> <title> "Synchronous optical network and broadband ISDN protocols," </title> <journal> IEEE Computer, </journal> <volume> vol. 11, </volume> <pages> pp. 26-34, </pages> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: For communication-intensive applications, higher-speed networks with more efficient interfaces are needed [2]. Recently, several network architectures based on high-speed switches have been introduced. Examples include High Performance Parallel Interface (HiPPI) and the Fibre Channel Standard (FCS). In addition, fiber-optic LANs using Asynchronous Transfer Mode (ATM) protocols <ref> [3] </ref> are now commercially available [4]. <p> Before proceeding with the main topic of the paper, we briefly review these two topics. 2.1 ATM Networking Asynchronous Transfer Mode was developed to support Broadband Integrated Digital Services Networks (BISDN) <ref> [3] </ref>, which are intended to provide a common solution to the communication demands of a wide range of present and future applications, including video telephony, multimedia conferencing, document and video retrieval, medical imaging, HDTV, electronic/multimedia newspaper distribution, and bulk data transfer. <p> The Physical Medium Dependent (PMD) layer defines the bit rate and physical signaling characteristics used on the medium. In wide area BISDN, the PMD layer is Sonet (Synchronous optical network) <ref> [3] </ref>, which supports bit rates of 155 Communications Research Group 5 Michigan State University and 622 megabits per second. The transmission convergence layer allows for other physical layers to be adapted for the transmission of ATM cells.
Reference: [4] <author> E. Biagioni and E. C. R. Sansom, </author> <title> "Designing a practical ATM LAN," </title> <journal> IEEE Network, </journal> <pages> pp. 32-39, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: Recently, several network architectures based on high-speed switches have been introduced. Examples include High Performance Parallel Interface (HiPPI) and the Fibre Channel Standard (FCS). In addition, fiber-optic LANs using Asynchronous Transfer Mode (ATM) protocols [3] are now commercially available <ref> [4] </ref>. <p> Over the past several months, we have extended the ComPaSS project to ATM-based clusters by implementing and testing collective operations atop the ATM testbed in our laboratory. workstations, three Fore Systems ASX100 ATM switches <ref> [4] </ref>, and a conventional Ethernet network. Each workstation is connected through fiber optic links to one of the ATM switches and through a conventional transceiver cable to the Ethernet.
Reference: [5] <author> S. Minzer and D. Spears, </author> <title> "New directions in signaling for broadband ISDN," </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 27, no. 2, </volume> <pages> pp. 6-14, </pages> <month> February </month> <year> 1989. </year> <title> [6] "CCITT I.363 B-ISDN ATM adaptation layer(AAL) specification." </title>
Reference-contexts: The bandwidth is allocated at call setup time and released as the circuit is dismantled when the call is completed. Because of its constant-bandwidth requirement, synchronous transfer mode was deemed unsuitable for transmitting variable-rate communication, such as compressed video, and inefficient for carrying bursty data <ref> [5] </ref>. Asynchronous transfer mode, on the other hand, is based on fast packet switching of small cells, each containing 53 bytes. As shown in Figure 2 (a), each cell comprises a 5-byte header and a 48-byte data payload.
Reference: [7] <author> A. Steffora, </author> <title> "ATM: </title> <booktitle> The year of the trial," IEEE Computer, </booktitle> <pages> pp. 8-10, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Although ATM services are beginning to appear in WANs, the market is presently dominated by ATM networking solutions for LANs <ref> [7] </ref>. A small-scale ATM switch can be configured as a high-speed LAN that provides large aggregate throughput and the potential for integration into future wide area networks. Many aspects of ATM remain areas of active research. <p> As the results of this research evolve into commercial products, and as the ATM standard stabilizes, the ATM market is expected to increase exponentially over the next few years <ref> [7] </ref>. 2.2 Communication Needs of Parallel Applications Several different programming paradigms may be used for parallel computing in a distributed-memory environment. Historically, the programmer has invoked various system primitives to send messages among processes executing on different nodes, resulting in a message-passing program. <p> As wide area ATM testbeds are now becoming available <ref> [7] </ref>, their experimental use is likely to be dominated by multimedia applications. However, we feel that it is also important to devote some time and resources to the study of distributed scientific computing on these platforms.
Reference: [8] <author> R. Rooholamini, V. Cherkassky, and M. Garver, </author> <title> "Finding the right ATM switch for the market," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 16-28, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: A small-scale ATM switch can be configured as a high-speed LAN that provides large aggregate throughput and the potential for integration into future wide area networks. Many aspects of ATM remain areas of active research. Many types of ATM switch architectures have been studied <ref> [8] </ref>, with proposed switch fabrics based on shared memory, shared media, crossbars, and many flavors of multistage interconnection networks. A wide variety of strategies for such fundamental issues as cell buffering, congestion control, and multicast communication, are still under investigation. <p> As shown in Figure 6 (c), the source sends the message to the switch, which replicates the message and delivers it to all the destinations. Such functionality is relatively easy to implement on a bus-based switch fabric; providing multicast on other switch fabrics is the subject of active research <ref> [8] </ref>. For example, the ATM switches in our laboratory can be programmed to replicate and forward an incoming message to an arbitrary set of outgoing channels in a single message-passing step. Since some of those channels may terminate at other switches, the resulting multicast connection may span a multiple-switch network.
Reference: [9] <author> D. B. Loveman, </author> <title> "High Performance Fortran," </title> <journal> IEEE Parallel and Distributed Technology, </journal> <volume> vol. 1, </volume> <pages> pp. 25-42, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: In order to further simplify the programmer's task and improve code portability, the programmer may use a data parallel language, such as High Performance Communications Research Group 6 Michigan State University Fortran (HPF) <ref> [9] </ref>, and leave it to the compiler to translate high-level data parallel language con-structs into appropriate low-level communication primitives. Finally, the system may support distributed shared-memory, in which processes are allowed to directly address memory located at other nodes [10]. <p> Such a capability can be provided in different ways. In one approach, a compiler translates a program written in a data parallel language, such as HPF <ref> [9] </ref>, into lower-level communication operations. In another approach, either a run-time library or the operating system implement a distributed shared virtual memory among the nodes of the cluster.
Reference: [10] <author> B. Nitzberg and V. Lo, </author> <title> "Distributed shared memory: A survey of issues and algorithms," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, </volume> <pages> pp. 52-60, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Finally, the system may support distributed shared-memory, in which processes are allowed to directly address memory located at other nodes <ref> [10] </ref>. In a distributed environment, all these programming paradigms are implemented by sending messages across the network. Depending on the paradigm, the messages may be generated by the user, a library, the compiler, the operating system, or even hardware.
Reference: [11] <author> Message Passing Interface Forum, </author> <title> "Document for standard message-passing interface," </title> <type> Tech. Rep. </type> <institution> CS-93-214, University of Tennessee, </institution> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The growing interest in collective operations is evidenced by their inclusion in the Message Passing Interface (MPI) <ref> [11] </ref>, an emerging standard for Communications Research Group 8 Michigan State University communication routines used by message-passing programs. <p> The communication patterns of many parallel applications are regular. In scientific computing, for instance, many applications exhibit a logical arrangement of processes that are two- or three-dimensional meshes. Besides point-to-point and collective communication, the MPI standard <ref> [11] </ref> also includes a chapter on process topologies, also known as virtual topologies, which provide processes with a communications interface that incorporates the underlying communication patterns. Process topologies allow one process to reference another process, or a group of processes, with respect to a particular arrangement.
Reference: [12] <author> P. K. McKinley, H. Xu, E. Kalns, and L. M. Ni, </author> <title> "ComPaSS: Efficient communication services for scalable architectures," </title> <booktitle> in Proceedings of Supercomputing'92, </booktitle> <pages> pp. 478 - 487, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The library, called ComPaSS (Communications Package for Scalable Software) <ref> [12] </ref>, is intended to support scalable software development on a variety of distributed-memory computing platforms, including both massively parallel computers and clusters.
Reference: [13] <author> V. Jacobson, R. Braden, and D. </author> <title> Borman, "TCP extensions for high performance." </title> <type> RFC 1323, </type> <month> May </month> <year> 1993. </year>
Reference-contexts: While large gains in performance are obtained by using the ATM switch instead of Ethernet, performance is further improved by using AAL5, which is accessed through the API network interface. Evidence has shown that good performance of TCP/IP on high-speed networks is possible if the protocols are reimplemented <ref> [13] </ref>, and we might expect such implementations to become widely available in the near future. However, interfaces such as API also provide functionality that cannot be efficiently implemented with TCP/IP messages, such as hardware multicast.
Reference: [14] <author> M. Lin, J. Hsieh, D. H. C. Du, J. P. Thomas, and J. A. MacDonald, </author> <title> "Distributed network computing over local ATM networks," </title> <type> Tech. Rep. </type> <institution> TR-94-17, University of Minnesota, </institution> <year> 1994. </year>
Reference-contexts: Although we will concentrate primarily on collective communication in this paper, other research groups have focused on improving unicast performance specifically on ATM workstation clusters. For example, Lin et al <ref> [14] </ref> compare unicast communication latency atop ATM and Ethernet using several protocols, including TCP/IP, AAL5, RPC, and PVM. In addition, von Eicken et al [15] have implemented active messages, an alternative message-passing facility, on ATM networks.
Reference: [15] <author> T. von Eicken, V. Avula, A. Basu, and V. </author> <title> Buch, "Low-latency communication over ATM networks using active messages," in Proceedings of Hot Interconnects II, </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> Calif., </address> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: For example, Lin et al [14] compare unicast communication latency atop ATM and Ethernet using several protocols, including TCP/IP, AAL5, RPC, and PVM. In addition, von Eicken et al <ref> [15] </ref> have implemented active messages, an alternative message-passing facility, on ATM networks.
Reference: [16] <author> L. M. Ni and P. K. McKinley, </author> <title> "A survey of wormhole routing techniques in direct networks," </title> <journal> IEEE Computer, </journal> <volume> vol. 26, </volume> <pages> pp. 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: In addition, the pipelining of cells across ATM virtual channels reduces the effect of path length on message transfer time. We have previously exploited this property in the design of collective communication operations for wormhole-routed massively parallel computers <ref> [16] </ref>, another distributed-memory platform in which messages are pipelined through a network. Finally, some collective operations may be fully or partially supported in hardware on the ATM switch. Efficient support of full bandwidth multicast communication, for example, is a potentially powerful feature of the ATM switch environment.
Reference: [17] <author> A. G. Fraser, </author> <title> "Early experiments with asynchronous time division networks," </title> <journal> IEEE Network, </journal> <pages> pp. 12-26, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Typically, such multicast support is unreliable, as in IP-multicast implemented on an Ethernet LAN, and must be accompanied by a protocol to guarantee reliability. Pioneering research of switch architectures supporting fast packet switching can be dated back to 1969, as described in Fraser's retrospective paper <ref> [17] </ref>. As new ATM switch architectures being proposed, a detailed understanding of these architectures constitutes the foundation of any further communication optimization. Switch characteristics such as blocking factor, scalability, and support for multicast will have significant effect on the strategy and implementation of collective communication libraries.
Reference: [18] <author> H. Ahmadi and W. E. Denzel, </author> <title> "A survey of modern high-performance switching techniques," </title> <journal> IEEE Journal of Selected Areas in Communications, </journal> <volume> vol. 7, </volume> <pages> pp. 1091-1103, </pages> <month> Sept. </month> <year> 1989. </year> <institution> Communications Research Group 24 Michigan State University </institution>
Reference-contexts: As new ATM switch architectures being proposed, a detailed understanding of these architectures constitutes the foundation of any further communication optimization. Switch characteristics such as blocking factor, scalability, and support for multicast will have significant effect on the strategy and implementation of collective communication libraries. Surveys reported in <ref> [18] </ref> and [19] highlight recent technological advances in high-speed switch architectures and their respective quantitative characteristics.
Reference: [19] <author> E. E. Witte, </author> <title> "A quantitative comparison of architectures for ATM switching systems," </title> <type> Tech. Rep. </type> <institution> WUCS-91-47, Department of Computer Science, </institution> <address> Campus Box 1045, Washington University, One Brook-ings Drive, St. Louis, MO, </address> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Switch characteristics such as blocking factor, scalability, and support for multicast will have significant effect on the strategy and implementation of collective communication libraries. Surveys reported in [18] and <ref> [19] </ref> highlight recent technological advances in high-speed switch architectures and their respective quantitative characteristics.
Reference: [20] <author> R. Rooholamini, V. Cherkassky, and M. Garver, </author> <title> "Finding the right ATM switch for the market," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 16-28, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Surveys reported in [18] and [19] highlight recent technological advances in high-speed switch architectures and their respective quantitative characteristics. A more recent article by Rooholamini et al. <ref> [20] </ref> studied several classic switch architectures as well as those used in commercial ATM switches. 4 Experimental Study of ATM Multicast Communication We began our study of collective communication on ATM networks with multicast, which is perhaps the most fundamental collective operation.
Reference: [21] <author> C. Huang, E. P. Kasten, and P. K. McKinley, </author> <title> "Design and implementation of multicast operations for ATM-based high performance computing," </title> <booktitle> in Proceedings of Supercomputing'94, </booktitle> <month> November </month> <year> 1994. </year> <note> accepted to appear. </note>
Reference-contexts: In summary, multicast implementations may take advantage of ATM characteristics either indirectly or directly. While both approaches improve performance, there are tradeoffs between the amount of performance gain and the portability of the implementation. Additional details can be found in <ref> [21] </ref>. (a) 4Kbyte message (b) 32Kbyte message Unicast-based multicast trees can be used to support other collective operations besides mul-ticast. In the scatter operation, for example, messages bound for the nodes in a common subtree are concatenated and sent together.
Reference: [22] <author> C. C. Huang and P. K. McKinley, </author> <title> "Parallel reduction operations on ATM networks," </title> <booktitle> in Proc. of the 1994 IEEE Symposium on High-Performance Distributed Computing, </booktitle> <month> Aug. </month> <year> 1994. </year> <note> accepted to appear. </note>
Reference-contexts: After dlog 2 N e steps, all N nodes contain the final result. In addition to supporting concurrent messages in the network, this approach also requires that each node be able to send and receive messages concurrently. We have conducted a study of global reduction operations atop ATM <ref> [22] </ref>. Several of ATM's salient features, such as full-duplex I/O, high bit rate, concurrent sends, and hardware multicast, were shown to be useful in reducing the turnaround time of such operations, compared to Ethernet implementations.
Reference: [23] <author> P. K. McKinley and J. W. S. Liu, </author> <title> "Multicast tree construction in bus-based computer networks," </title> <journal> Communications of the ACM, </journal> <volume> vol. 33, no. 1, </volume> <year> 1990. </year>
Reference-contexts: Finally, such a configuration can be used to efficiently support multicast to arbitrary sets of processes using algorithms designed for Communications Research Group 20 Michigan State University (a) 4-way multicast connection (b) 4 fi 4 logical grid multicast in grids of buses <ref> [23] </ref>.
Reference: [24] <author> J. Li and M. Chen, </author> <title> "Compiling communication-efficient programs for massively parallel machines," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 361-376, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: When an data parallel program is compiled for a distributed-memory MPC or a cluster, many of those communication operations generated by the compiler may be collective in nature, depending on how the data is distributed among the local memories <ref> [24] </ref>. For example, HPF contains so-called intrinsics, which perform reduction and scan, rearranging and reshaping, and scatter and gather operations on data arrays.
Reference: [25] <author> M. Annaratone, D. B. Loveman, and C. D. Offner, </author> <title> "High Performance Fortran on workstation farms," </title> <booktitle> in Proceedings of the Eighth International Parallel Processing Symposium, </booktitle> <pages> pp. 664-669, </pages> <publisher> IEEE, </publisher> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Given that HPF is already being supported on workstation clusters <ref> [25] </ref>, efficient collective communication algorithms for switch-based interconnects, such as ATM LANs, may help to improve performance. Methods to exploit ATM technology in distributed shared-memory implementations are also being explored.
Reference: [26] <author> C. A. Thekkath, H. M. Levy, and E. D. Lazowska, </author> <title> "Efficient support for multicomputing on ATM networks," </title> <type> Tech. Rep. </type> <institution> 93-04-03, Department of Computer Science and Engineering, University of Wash-ington, </institution> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Given that HPF is already being supported on workstation clusters [25], efficient collective communication algorithms for switch-based interconnects, such as ATM LANs, may help to improve performance. Methods to exploit ATM technology in distributed shared-memory implementations are also being explored. Thekkath, et al <ref> [26] </ref> have reported very promising results of emulating distributed shared-memory across an ATM LAN, using a remote procedure call paradigm. This remote memory access model provides application processes with a virtual view of distributed shared-memories.
Reference: [27] <author> S. Dwarkadas, P. Keleher, A. L. Cox, and W. Zwaenepoel, </author> <title> "Evaluation of release consistent software distributed shared memory on emerging network technology," </title> <booktitle> in Proc. of the 20th International Symposium on Computer Architecture, </booktitle> <address> (Los Alamitos, California), </address> <pages> pp. 144-155, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: This remote memory access model provides application processes with a virtual view of distributed shared-memories. References to information items residing on remote host's memory space are realized through emulated kernel instructions which are then translated into efficient message passing routines. Dwarkadas, et al <ref> [27] </ref> have studied software implementations of distributed shared memory on ATM networks. Using simulation, the authors of that paper showed that medium-grain applications should achieve good performance on an ATM LAN, as long as the proper DSM protocol is used. However, the project described in [27] points out the need for <p> Dwarkadas, et al <ref> [27] </ref> have studied software implementations of distributed shared memory on ATM networks. Using simulation, the authors of that paper showed that medium-grain applications should achieve good performance on an ATM LAN, as long as the proper DSM protocol is used. However, the project described in [27] points out the need for fast synchronization and multicast in order to support such protocols. Again, efficient implementations of collective operations on ATM networks may help to support such software.
Reference: [28] <author> D. D. Clark, B. S. Davie, D. J. Farber, I. S. Gopal, R. Guerin, W. D. Sincoskie, J. M. Smith, and D. L. Tennenhouse, </author> <title> "The AURORA testbed annual report," </title> <type> tech. rep., </type> <institution> University of Pennsylvania, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Again, efficient implementations of collective operations on ATM networks may help to support such software. Finally, in a collaborative project involving researchers from University of Pennsylvania, MIT, IBM, and Bellcore, the AURORA testbed <ref> [28] </ref> is being used to investigate several wide-area high-speed networking issues, ranging from workstation interface card design to operating system support.
Reference: [29] <author> C. Trefftz, P. K. McKinley, C. C. Huang, T.-Y. Li, and Z. Zeng, </author> <title> "Design and performance evaluation of a distributed eigenvalue solver on a workstation cluster," </title> <booktitle> in Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <year> 1994. </year> <note> accepted to appear. </note>
Reference-contexts: Our immediate next task is to use our ATM testbed to design, implement, and evaluate a complete set of low-level communication operations. We are also using these operations in related projects on parallel numerical and image-processing algorithms <ref> [29, 30] </ref>. Finally, we have started projects to investigate the use of these operations to support virtual topologies and DSM programming paradigms, complementing projects at other research laboratories. Research in parallel computing on ATM networks is really just starting, and many issues are open to study.
Reference: [30] <author> D. Judd, N. Ratha, P. K. McKinley, J. Weng, and A. K. Jain, </author> <title> "Implementation of parallel vision algorithms on workstation clusters." </title> <booktitle> accepted to appear in Proc. 12th International Conference on Pattern Recognition, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Our immediate next task is to use our ATM testbed to design, implement, and evaluate a complete set of low-level communication operations. We are also using these operations in related projects on parallel numerical and image-processing algorithms <ref> [29, 30] </ref>. Finally, we have started projects to investigate the use of these operations to support virtual topologies and DSM programming paradigms, complementing projects at other research laboratories. Research in parallel computing on ATM networks is really just starting, and many issues are open to study.
Reference: [31] <author> H. Nakanishi, V. Rego, and V.Sunderam, </author> <title> "Superconcurrent simulation of polymer chains on heterogeneous networks," </title> <booktitle> in Proceedings of Supercomputing'92, </booktitle> <pages> pp. 561 - 569, </pages> <month> Nov. </month> <year> 1992. </year> <institution> Communications Research Group 25 Michigan State University </institution>
Reference-contexts: Our project and those of other researchers are focusing primarily on ATM LANs, due largely to their present dominance of the ATM market. However, success in parallel computing over the Internet has already been demonstrated for some applications <ref> [31] </ref> and, after all, ATM was developed primarily to meet future wide area networking needs.
References-found: 30

