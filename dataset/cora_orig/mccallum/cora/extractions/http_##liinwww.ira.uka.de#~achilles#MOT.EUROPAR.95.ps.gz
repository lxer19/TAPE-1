URL: http://liinwww.ira.uka.de/~achilles/MOT.EUROPAR.95.ps.gz
Refering-URL: http://liinwww.ira.uka.de/~achilles/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: achilles@ira.uka.de  
Title: Optimal Emulation of Meshes on Meshes of Trees sorting algorithm for the mesh of trees
Author: Alf-Christian Achilles 
Note: N  
Address: Germany  
Affiliation: Department of Computer Science University of Karlsruhe  
Abstract: Many problems can be solved more efficiently on a mesh of trees network than on a mesh. Until now it has been an open problem whether the mesh of trees is always at least as fast as the mesh. In this paper, we present an emulation of N -node meshes on O(N)-node meshes of trees with constant slowdown, even though any embedding of a mesh into a mesh of trees requires dilation (log N ). This demonstrates that the mesh of trees is strictly more powerful than the mesh. As an application, we show how to construct an optimal O( p 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. N. Bhatt, F. R. K. Chung, J.-W. Hong, F. T. Leighton, and A. L Rosenberg. </author> <title> Optimal simulations by butterfly networks. </title> <booktitle> In Proceedings of the 20 th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 192-204, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: That embedding has load 1, congestion 2 and dilation fi (log N ), which yields an emulation with a slowdown of fi (log N ). In fact, this is also an asymptotically optimal embedding, since | as a consequence of the much more general result in <ref> [1] </ref> | any embedding of a mesh into a mesh of trees has dilation (log N ). Therefore any emulation of meshes on meshes of trees that is based on embeddings must have slowdown (log N ).
Reference: 2. <author> Christos Kaklamanis, Danny Krizanc, and Satish Rao. </author> <title> New graph decompositions and fast emulations in hypercubes and butterflies. </title> <booktitle> In 5th Annual ACM Symposium on Parallel Algorithms and Architectures (SPAA 93), </booktitle> <pages> pages 325-334. </pages> <publisher> ACM SIGACT, ACM SIGARCH, ACM Press, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: have already been employed to construct universal parallel computers [8, 9], to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks <ref> [2, 3] </ref>. Please note that the model makes no assumption about the size of the state of a processor (as in [4] and [2]), except that the computation of the next processor state takes constant time. <p> Please note that the model makes no assumption about the size of the state of a processor (as in [4] and <ref> [2] </ref>), except that the computation of the next processor state takes constant time. <p> We will describe the use of neighborhood covers and show how to generate neighborhood covers for the mesh. 3.1 Emulation through neighborhood covers The concept of t-neighborhood covers, formalized in <ref> [2] </ref>, is very useful to construct emulations: Definition 2. Let G = (V; E) be a graph. The t-neighborhood of a vertex v 2 V consists of all the nodes in V whose distance to v is at most t.
Reference: 3. <author> Christos Kaklamanis, Danny Krizanc, and Satish Rao. </author> <title> Universal emulations with sublogarithmic slowdown. </title> <booktitle> In Proceedings of the 34th IEEE Symposium Foundations of Computer Science (FOCS), </booktitle> <pages> pages 341-350, </pages> <year> 1993. </year>
Reference-contexts: have already been employed to construct universal parallel computers [8, 9], to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks <ref> [2, 3] </ref>. Please note that the model makes no assumption about the size of the state of a processor (as in [4] and [2]), except that the computation of the next processor state takes constant time.
Reference: 4. <author> Richard R. Koch, F. T. Leighton, Bruce Maggs, Satish B. Rao, and Arnold L. Rosenberg. </author> <title> Work-preserving emulations of fixed-connection networks. </title> <booktitle> In Proceedings of the 21 st Symposium on Theory of Computation, </booktitle> <pages> pages 227-240, </pages> <month> May </month> <year> 1989. </year> <note> Extended abstract. </note>
Reference-contexts: The expansion jV H j=jV G j indicates the relative size of G and H. Only slightly different models have already been employed to construct universal parallel computers [8, 9], to emulate meshes on butterflies with constant slowdown <ref> [4] </ref>, to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks [2, 3]. <p> Please note that the model makes no assumption about the size of the state of a processor (as in <ref> [4] </ref> and [2]), except that the computation of the next processor state takes constant time.
Reference: 5. <author> M. Kunde. </author> <title> Routing and sorting on mesh-connected arrays. </title> <editor> In J. Reif, editor, </editor> <booktitle> Proceedings of the 3 rd Aegean Workshop on Computing: VLSI Algorithms and Architectures, volume 319 of Lecture Notes in Computer Science, </booktitle> <pages> pages 423-433. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: An important example is sorting N elements. The best previously known sorting algorithm for the mesh of trees needs O ( p N log N ) steps whereas on the mesh only fi ( p N ) steps are needed (see e.g. <ref> [12, 10, 5] </ref>). 2 1.2 Previous Work Most of the work on interconnection networks has focused on finding efficient embeddings.
Reference: 6. <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays * Trees * Hypercubes, volume I. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA 94403, </address> <year> 1992. </year>
Reference-contexts: In this work we show that the mesh of trees is strictly more powerful than the mesh by emulating the mesh on the mesh of trees with constant slowdown (open problem 2.5 in <ref> [6] </ref>), and use that result to show the existence of an optimal fi ( N ) algorithm for the sorting problem on the mesh of trees. <p> The capabilities of the mesh of trees are extensively discussed in <ref> [6] </ref>. However, there are problems whose best known solutions require asymptotically more steps on the mesh of trees than on the mesh. An important example is sorting N elements.
Reference: 7. <author> Tom Leighton, Bruce Maggs, and Ramesh Sitamaran. </author> <title> On the fault tolerance of some popular bounded-degree networks. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 542-552, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Only slightly different models have already been employed to construct universal parallel computers [8, 9], to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks <ref> [7] </ref> and to emulate planar graphs on various classes of networks [2, 3]. Please note that the model makes no assumption about the size of the state of a processor (as in [4] and [2]), except that the computation of the next processor state takes constant time.
Reference: 8. <editor> Friedhelm Meyer auf der Heide. </editor> <title> Efficient simulations among several models of parallel computers. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(1) </volume> <pages> 106-119, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: The expansion jV H j=jV G j indicates the relative size of G and H. Only slightly different models have already been employed to construct universal parallel computers <ref> [8, 9] </ref>, to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks [2, 3].
Reference: 9. <author> Friedhelm Meyer auf der Heide and Rolf Wanka. </author> <title> Time-optimal simulations of networks by universal parallel computers. </title> <booktitle> In Proceedings of the 6th STACS, </booktitle> <pages> pages 120-131, </pages> <year> 1989. </year>
Reference-contexts: The expansion jV H j=jV G j indicates the relative size of G and H. Only slightly different models have already been employed to construct universal parallel computers <ref> [8, 9] </ref>, to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube [11], to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks [2, 3].
Reference: 10. <author> C. Schnorr and A. Shamir. </author> <title> An optimal sorting algorithm for mesh connected computers. </title> <booktitle> In Proceedings of the Eighteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 255-263, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: An important example is sorting N elements. The best previously known sorting algorithm for the mesh of trees needs O ( p N log N ) steps whereas on the mesh only fi ( p N ) steps are needed (see e.g. <ref> [12, 10, 5] </ref>). 2 1.2 Previous Work Most of the work on interconnection networks has focused on finding efficient embeddings.
Reference: 11. <author> Eric J. Schwabe. </author> <title> On the computational equivalence of hypercube-derived networks. </title> <booktitle> In 2nd Annual ACM Symposium on Parallel Algorithms and Arichitectures, </booktitle> <pages> pages 388-397. </pages> <publisher> ACM, ACM Press, </publisher> <month> July </month> <year> 1990. </year>
Reference-contexts: Only slightly different models have already been employed to construct universal parallel computers [8, 9], to emulate meshes on butterflies with constant slowdown [4], to show the equivalence of bounded-degree networks derived from the hypercube <ref> [11] </ref>, to tolerate faults in some interconnection networks [7] and to emulate planar graphs on various classes of networks [2, 3].
Reference: 12. <author> C. Thompson and H. Kung. </author> <title> Sorting on a mesh-connected parallel computer. </title> <journal> Communications of the ACM, </journal> <volume> 20(4) </volume> <pages> 263-271, </pages> <year> 1977. </year> <title> This article was processed using the L A T E X macro package with LLNCS style 12 </title>
Reference-contexts: An important example is sorting N elements. The best previously known sorting algorithm for the mesh of trees needs O ( p N log N ) steps whereas on the mesh only fi ( p N ) steps are needed (see e.g. <ref> [12, 10, 5] </ref>). 2 1.2 Previous Work Most of the work on interconnection networks has focused on finding efficient embeddings.
References-found: 12

