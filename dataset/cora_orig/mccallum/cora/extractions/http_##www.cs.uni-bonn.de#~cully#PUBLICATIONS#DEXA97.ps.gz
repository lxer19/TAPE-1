URL: http://www.cs.uni-bonn.de/~cully/PUBLICATIONS/DEXA97.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~cully/research2.html
Root-URL: http://cs.uni-bonn.de
Email: foleg,tb,abc,cully,jwg@cs.uni-bonn.de  rottmann@hbz-nrw.de  
Phone: 2 HBZ, Classen-Kappelmann-Str. 24,  
Title: A Library Application on Top of an RDBMS: Performance Aspects  
Author: O. Balownew T. Bode A.B. Cremers J. Kalinski J.E. Wolff H. Rottmann 
Address: Romerstr. 164, 53117 Bonn, Germany  50931 Koln, Germany  
Affiliation: 1 Institute of Computer Science III, University of Bonn,  
Abstract: Applications which require a combination of structured data with unstructured text fields are becoming of increasing practical interest. But whereas structured data are usually stored in a relational database, large text collections are maintained by proprietary text or information retrieval systems. The synthesis of both areas is still a topic of intensive research. We describe one such application, namely maintaining library catalogues, and study the efficiency of two implementation alternatives both based on RDBMS technology. In the first alternative word occurrence information is encoded using bitlists. The other chooses a direct implementation within the relational model. Performance tests are done which are based on real world data and real world user transactions. They demonstrate that the problem of the bitlist implementation is caused by conversions which are necessary to combine them with structured data. In contrast, our direct implementation benefits from today's sophisticated RDBMS technology and performs promisingly well. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> O. Balownew, T. Bode, A.B. Cremers, J. Kalinski, J.E. Wolff, and H. Rottmann. </author> <title> Maintaing Library Catalogues with an RDBMS | A Performance Study |. Technical Report IAI-TR-96-13, </title> <institution> University of Bonn, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: For each retrieval operation the exact number of documents satisfying the selection condition (hits) should be computed in about a second. Additionally, bibliographic data for the first twenty hits are to be presented to the user (for details see <ref> [1] </ref>). Table 1. HBZ transactions transaction percentage deletion 0.2% insertion 8.1% correction 8.1% retrieval 83.6% documents 24.3% corp. bodies 1.3% persons 4.8% browsing 34.3% navigation 14.5% other 4.4% The performance test was to measure response times for `real' user transactions on `real' data.
Reference: 2. <author> S. DeFazio, A. Daoud, L.A. Smith, and J. Srinivasan. </author> <title> Integrating IR and RDBMS using cooperative indexing. </title> <booktitle> In Proc. of the 18th Annual Int. SIGIR Conf. on Research and Development in Information Retrieval, </booktitle> <pages> pages 84-92, </pages> <year> 1995. </year>
Reference-contexts: It also has the advantage that its runtimes are nearly independent from the number of query words. 5 In their terms infrequent words appear in at most 0.1% of all documents. 7 Related Work DeFazio et al. <ref> [2] </ref> summarize experimental results when text indexing is not done by the DBMS, but remains in the responsibility of the application (i.e. text retrieval) software. They implemented a prototypical extension of ORACLE Rdb with alternative access methods and tables structured as indexes (index-only tables).
Reference: 3. <author> Deutsche Forschungsgemeinschaft | Bibliotheksausschu. </author> <title> Empfehlungen zur Migration der deutschen Bibliotheksverbunde. </title> <journal> ZfBB, </journal> <volume> 42(2) </volume> <pages> 105-136, </pages> <year> 1995. </year>
Reference-contexts: The central bibliographic database of a library network has to serve several hundred librarians working on millions of documents. First generation systems have reached critical internal restrictions and capacity limits. Recent proposals by the German Research Council <ref> [3] </ref> recommend a client-server architecture based on standard operating systems, interfaces and database management systems for next generation systems. <p> The current HBZ system has reached critical internal restrictions and capac-ity limits. As the number of libraries connected to HBZ is expected to increase and as HBZ wishes to provide a number of additional functionalities, the need for a new system has arisen. The German Research Council <ref> [3] </ref> recommends a client-server architecture based on standard software. This is why HBZ is interested in finding out whether this new system can be realized on top of a relational database management system.
Reference: 4. <author> W.B. Frakes and R. Baeza-Yates, </author> <title> editors. Information Retrieval | Data Structures and Algorithms. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Furthermore, Kaufmann and Schek did not have `real world' queries, and had to simulate all user activities. Many optimized methods for storing and retrieving text documents are known today (see e.g. Frakes and Baeza-Yates <ref> [4] </ref>) which are often evaluated against some kind of test collections like TREC [9] to allow comparable result studies.
Reference: 5. <author> Jurgen Freitag, Horst-Dieter Werner, and Wolfgang Wilkes. </author> <title> Strukturierte Attribute in Relationen zur Unterstutzung von IR-Anwendungen. </title> <booktitle> In GI 12. Jahres-tagung, </booktitle> <volume> Informatik-Fachberichte 57, </volume> <pages> pages 623-647. </pages> <publisher> Springer, </publisher> <year> 1982. </year>
Reference-contexts: Early studies concerning the suitability of RDBMS for text retrieval applications had come to negative results, the typical argument being that the `flat' structure of relational databases is conceptually inadequate as well as inefficient (see Schek [11], Freitag et al. <ref> [5] </ref>). Since its introduction the relational data model has not only undergone fundamental theoretical analyses, but has also found its way into convincingly powerful commercial products. Standardization efforts have led to a high degree of information interchangeability and portability.
Reference: 6. <author> Graham Hoare. </author> <title> Oracle TextServer3 | Workbench C Guide. Oracle Corp., 500 Oracle Parkway, </title> <address> Redwood City, CA 94065, </address> <year> 1995. </year> <note> Version 1.0, Part No. A22190-1. </note>
Reference-contexts: For illustration consider a query which combines a title word with the publication year. According to agreement with ORACLE we decided to make use of so-called hitlist tables. In a first step the text retrieval component of a query is executed by means of TextServer3 API-procedures (see <ref> [6] </ref>). These procedures also perform a conversion of bit vectors into hitlist table entries. If bit j is set in the result vector and title t j belongs to document d k , then the hitlist table contains a row with document ID d k .
Reference: 7. <author> H. Kaufmann and H.-J. Schek. </author> <title> Text Search Using Database Systems Revisited | Some Experiments |. In C.A. </title> <editor> Goble and J.A. Keane, editors, </editor> <booktitle> Proc. of the 13th British National Conference on Databases (BNCOD 13), </booktitle> <pages> pages 204-225. </pages> <publisher> Springer, LNCS 940, </publisher> <year> 1995. </year>
Reference-contexts: Since its introduction the relational data model has not only undergone fundamental theoretical analyses, but has also found its way into convincingly powerful commercial products. Standardization efforts have led to a high degree of information interchangeability and portability. As Kaufmann and Schek <ref> [7] </ref> are pointing out in a recent paper, it is especially the advent of client-server architectures and the development of parallel query evaluation algorithms on SMP and MMP platforms that call for a second assessment of text search with RDBMS. <p> This is why HBZ is interested in finding out whether this new system can be realized on top of a relational database management system. Our view of relational DBMS is in the line of Kaufmann and Schek's <ref> [7] </ref> that increasingly, relational database systems are being used as storage managers, upon which sophisticated object managers and application-oriented tools are built. We do not claim that our performance tests are able to assess the general suitability of RDBMS technology for text retrieval. <p> In this implementation 96% of all queries are answered within two seconds (the optimized case O in Fig. 2). Of course, there are alternative evaluation strategies. Implementation I makes use of the INTERSECT-operator. Kaufmann and Schek <ref> [7] </ref> already mentioned that ORACLE ignores the fact that index entries are already ordered and thus performs additional time-consuming sort operations. They propose to intersect the inverted lists of infrequent words 5 only, then read in the entire selected titles and filter out the final result. <p> He points out that the former is more flexible and is to be preferred, when relationships among data cannot be mapped onto predefined relations of the text model. Kaufmann and Schek <ref> [7] </ref> compare the information retrieval system BASIS-Plus with SQL*TextRetrieval (the predecessor of TextServer3) and a DBMS-based implementation resembling that of Sect. 6.
Reference: 8. <author> Ian A. Macleod. </author> <title> Text retrieval and the relational model. </title> <journal> Journal of the American Society for Information Science, </journal> <volume> 42(3) </volume> <pages> 155-165, </pages> <year> 1991. </year>
Reference-contexts: They implemented a prototypical extension of ORACLE Rdb with alternative access methods and tables structured as indexes (index-only tables). On small text collections the prototype achieved promisingly efficient for both retrievals and updates. In a recent article Macleod <ref> [8] </ref> compares the strengths and weaknesses of both the relational and the text model. He points out that the former is more flexible and is to be preferred, when relationships among data cannot be mapped onto predefined relations of the text model.
Reference: 9. <author> National Institute of Standards and Technology. </author> <booktitle> Proceedings of the Fourth Text REtrieval Conference (TREC-4), </booktitle> <address> Gaithersburg, Md., </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Furthermore, Kaufmann and Schek did not have `real world' queries, and had to simulate all user activities. Many optimized methods for storing and retrieving text documents are known today (see e.g. Frakes and Baeza-Yates [4]) which are often evaluated against some kind of test collections like TREC <ref> [9] </ref> to allow comparable result studies.
Reference: 10. <author> J. </author> <title> Newton and D.Y. Brenman. Oracle TextServer3 | Administrator's Guide. Oracle Corp., 500 Oracle Parkway, </title> <address> Redwood City, CA 94065, </address> <year> 1995. </year> <note> Version 3.0, Part No. A22191-1. </note>
Reference-contexts: Furthermore, RDBMS providers are in-creasingly becoming aware of the importance of `unstructured' data in addition to `structured' data as stored in relational tables. ORACLE, for example, offers TextServer3 <ref> [10] </ref> (formerly SQL*TextRetrieval, which was considered in Kauf-mann and Schek's study) as a tool which implements text retrieval functionality on top of their RDBMS. Document acquisition for library catalogues is an application where structured and unstructured data coexist and where both are typically combined in librarians' queries.
Reference: 11. <author> Hans-Jorg Schek. </author> <title> Methods for the administration of textual data in database systems. </title> <editor> In R.N. Oddy, S.E. Robertson, C.J. van Rijsbergen, and P.W. Williams, editors, </editor> <booktitle> Information Retrieval Research, </booktitle> <pages> pages 218-235. </pages> <publisher> Butterworths, </publisher> <year> 1981. </year>
Reference-contexts: Early studies concerning the suitability of RDBMS for text retrieval applications had come to negative results, the typical argument being that the `flat' structure of relational databases is conceptually inadequate as well as inefficient (see Schek <ref> [11] </ref>, Freitag et al. [5]). Since its introduction the relational data model has not only undergone fundamental theoretical analyses, but has also found its way into convincingly powerful commercial products. Standardization efforts have led to a high degree of information interchangeability and portability.
References-found: 11

