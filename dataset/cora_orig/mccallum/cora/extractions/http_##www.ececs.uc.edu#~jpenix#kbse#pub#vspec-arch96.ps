URL: http://www.ececs.uc.edu/~jpenix/kbse/pub/vspec-arch96.ps
Refering-URL: http://www.ececs.uc.edu/~jpenix/kbse/pub/
Root-URL: 
Email: fpbaraona,alexg@ece.uc.edu  
Title: Abstract Architecture Representation Using VSPEC  
Author: Phillip Baraona and Perry Alexander 
Date: April 22, 1996  
Address: Cincinnati, OH  
Affiliation: Department of Electrical and Computer Engineering and Computer Science The University of Cincinnati  
Abstract: This paper describes a formal means for defining architectures for digital systems. The methodology combines the structural architecture representation capabilities of vhdl with the formal component specification capabilities of vspec. Using vspec to represent component requirements and instantiating those components using a vhdl architecture supports formal architecture specification without additional formalisms beyond vspec. The technique defines an architecture state as the composition of vspec component states, uses the vhdl architecture to indicate interconnections and uses the vspec sensitive to clause to define synchronization. Canonical Larch interface language semantics are used to define the transform specified for a single component. Process algebra semantics are used to define the relationship between a sensitive to clause and the defined transformation. This work describes vspec's approach to specifying abstract architectures. fl This paper was submitted to the VLSI Design journal on February 29, 1996. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexander, P., Baraona, P., and Penix, J. </author> <title> Using Declarative Specifications and CaseBased Planning for System Synthesis. </title> <booktitle> Concurrent Engineering: Research and Applications 2, </booktitle> <month> 4 </month> <year> (1994). </year>
Reference-contexts: The constrained by clause defines relations over constraint variables. Currently, the defined constraint variables include power consumption, clock speed, area, pin-to-pin timing, and heat dissipation. Constraint theories written in lsl [11, 9] define each constraint type. Users may 1 Previous versions of vspec <ref> [6, 2, 1] </ref> did not have a sensitive to clause. 5 define their own constraints and theories if desired. The modifies clause lists variables, ports and signals whose values may be changed by the entity. <p> The behavior of a device can also be described by breaking it up into smaller pieces and connecting these pieces together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. <p> together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. This architectural description represents a refinement of the device's behavioral vhdl/vspec description. vhdl provides very nice facilities for defining architectural descriptions.
Reference: [2] <author> Alexander, P., Baraona, P., and Penix, J. </author> <title> Application of Software Synthesis Techniques to Composite Systems. </title> <booktitle> In Computers in Engineering Symposisum of the ASME ETCE (Houston, </booktitle> <address> TX, </address> <month> January </month> <year> 1995). </year>
Reference-contexts: The constrained by clause defines relations over constraint variables. Currently, the defined constraint variables include power consumption, clock speed, area, pin-to-pin timing, and heat dissipation. Constraint theories written in lsl [11, 9] define each constraint type. Users may 1 Previous versions of vspec <ref> [6, 2, 1] </ref> did not have a sensitive to clause. 5 define their own constraints and theories if desired. The modifies clause lists variables, ports and signals whose values may be changed by the entity. <p> The behavior of a device can also be described by breaking it up into smaller pieces and connecting these pieces together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. <p> together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. This architectural description represents a refinement of the device's behavioral vhdl/vspec description. vhdl provides very nice facilities for defining architectural descriptions.
Reference: [3] <author> Allen, R., and Garlan, D. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proc. Sixteenth International Conference on Software Engineering (May 1994), </booktitle> <pages> pp. 71-80. </pages>
Reference-contexts: Research in this field has led to the development of several architecture description languages, including UniCon [21], Wright <ref> [3, 4] </ref> and Rapide [16, 17]. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. <p> This is very different from a vspec abstract architecture which is used to verify that the class of solutions defined by the architecture implements the requirements specified by the vspec description of the component. The Wright architecture description language <ref> [3, 4] </ref> by Allen and Garlan is of particular interest when discussing abstract architectures in vspec. A Wright description consists of a collection of components interacting via instances of connector types. Each part of a Wright description is defined using a variant of csp [12].
Reference: [4] <author> Allen, R., and Garlan, D. </author> <title> A Case Study in Architectural Modelling: </title> <booktitle> The AEGIS System. In Proceedings of the 8th International Workshop on Software Specification and Design (March 1996). </booktitle>
Reference-contexts: Research in this field has led to the development of several architecture description languages, including UniCon [21], Wright <ref> [3, 4] </ref> and Rapide [16, 17]. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. <p> This is very different from a vspec abstract architecture which is used to verify that the class of solutions defined by the architecture implements the requirements specified by the vspec description of the component. The Wright architecture description language <ref> [3, 4] </ref> by Allen and Garlan is of particular interest when discussing abstract architectures in vspec. A Wright description consists of a collection of components interacting via instances of connector types. Each part of a Wright description is defined using a variant of csp [12].
Reference: [5] <author> Augustin, L., Luckham, D., Gennart, B., Huh, Y., and Stanculescu, A. </author> <title> Hardware Design and Simulation in VAL/VHDL. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Larch/vhdl annotations are added to a specific vhdl description to represent proof obligations for the verification process. In contrast to this, a vspec abstract architecture represents the requirements of a class of solutions that satisfy a specification (also given in vspec). Augustin and Luckham's val <ref> [5] </ref> is another attempt to annotate vhdl. The purpose of a val annotation to a vhdl description is to document the design for verification. val provides mechanisms for mapping a behavioral description to a structural description.
Reference: [6] <author> Baraona, P., Penix, J., and Alexander, P. VSPEC: </author> <title> A Declarative Requirements Specification Language for VHDL. In High-Level System Modeling: Specification Languages, </title> <editor> J.-M. Berge, O. Levia, and J. Rouillard, Eds., </editor> <volume> vol. </volume> <booktitle> 3 of Current Issues in Electronic Modeling. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995, </year> <journal> ch. </journal> <volume> 3, </volume> <pages> pp. 51-75. </pages>
Reference-contexts: The constrained by clause defines relations over constraint variables. Currently, the defined constraint variables include power consumption, clock speed, area, pin-to-pin timing, and heat dissipation. Constraint theories written in lsl [11, 9] define each constraint type. Users may 1 Previous versions of vspec <ref> [6, 2, 1] </ref> did not have a sensitive to clause. 5 define their own constraints and theories if desired. The modifies clause lists variables, ports and signals whose values may be changed by the entity. <p> The behavior of a device can also be described by breaking it up into smaller pieces and connecting these pieces together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. <p> together to form an architectural description 2 Previous versions of vspec <ref> [6, 2, 1] </ref> also contained a based on clause. The modified syntax of the includes clause described here made the based on clause obsolete. 3 Allowing includes clauses in package declarations is a change from previous versions of vspec [6, 2, 1] 6 of the device. This architectural description represents a refinement of the device's behavioral vhdl/vspec description. vhdl provides very nice facilities for defining architectural descriptions.
Reference: [7] <author> Cheon, Y., and Leavens, G. T. </author> <title> A quick overview of Larch/C++. </title> <journal> Journal of ObjectOriented Programming 7, </journal> <month> 6 (Oct. </month> <year> 1994), </year> <pages> 39-49. </pages>
Reference-contexts: Instead, it allows the verification that a structural description correctly maps to a behavioral description for the entity. 5.3 Larch Interface Languages Larch interface languages have been developed for a variety of programming languages, including LCL [10], Larch/C++ <ref> [7, 15] </ref> and LM3 [14], interface languages for C, C++ and Modula-3, respectively. Each of these languages allow the description of the pre and postconditions for procedures and functions in a sequential programming language.
Reference: [8] <author> Garlan, D., and Shaw, M. </author> <title> An Introduction to Software Architecture. In Advances in Software Eng. and Knowledge Eng., </title> <editor> V. Ambriola and G. Tortora, Eds., </editor> <volume> vol. 2. </volume> <publisher> World Scientific, </publisher> <address> New York, </address> <year> 1993, </year> <pages> pp. 1-39. </pages>
Reference-contexts: all three component's sensitive to clauses false and the concrete state of the architecture does not change again until something (such as activating reset) outside of mm changes it. 5 Related Work 5.1 Software Architecture The research area most closely related to abstract architecture representation in vspec is software architecture <ref> [8] </ref>. Research in this field has led to the development of several architecture description languages, including UniCon [21], Wright [3, 4] and Rapide [16, 17]. Each of these languages allow the definition of components and connectors to define a software architecture.
Reference: [9] <author> Guttag, J., Horning, J., and Wing, J. </author> <title> The Larch Family of Specification Languages. </title> <journal> IEEE Software 2, </journal> <volume> 5 (1985), </volume> <pages> 24-36. </pages>
Reference-contexts: The constrained by clause defines relations over constraint variables. Currently, the defined constraint variables include power consumption, clock speed, area, pin-to-pin timing, and heat dissipation. Constraint theories written in lsl <ref> [11, 9] </ref> define each constraint type. Users may 1 Previous versions of vspec [6, 2, 1] did not have a sensitive to clause. 5 define their own constraints and theories if desired. The modifies clause lists variables, ports and signals whose values may be changed by the entity. <p> The formal definition of the requires and ensures clauses was discussed in Section 2. It is very similar to the transform defined by a traditional Larch interface language <ref> [9, 11] </ref>. As described in Section 3.2, the sensitive to clause is used to synchronize components and define when the requires clause predicate must be satisfied. Formally, this is easily represented using a traditional process algebra such as csp [12].
Reference: [10] <author> Guttag, J. V., and Horning, J. J. </author> <title> Introduction to LCL, A Larch/C Interface Language. </title> <type> Tech. Rep. 74, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Instead, it allows the verification that a structural description correctly maps to a behavioral description for the entity. 5.3 Larch Interface Languages Larch interface languages have been developed for a variety of programming languages, including LCL <ref> [10] </ref>, Larch/C++ [7, 15] and LM3 [14], interface languages for C, C++ and Modula-3, respectively. Each of these languages allow the description of the pre and postconditions for procedures and functions in a sequential programming language.
Reference: [11] <author> Guttag, J. V., and Horning, J. J. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: The constrained by clause defines relations over constraint variables. Currently, the defined constraint variables include power consumption, clock speed, area, pin-to-pin timing, and heat dissipation. Constraint theories written in lsl <ref> [11, 9] </ref> define each constraint type. Users may 1 Previous versions of vspec [6, 2, 1] did not have a sensitive to clause. 5 define their own constraints and theories if desired. The modifies clause lists variables, ports and signals whose values may be changed by the entity. <p> The formal definition of the requires and ensures clauses was discussed in Section 2. It is very similar to the transform defined by a traditional Larch interface language <ref> [9, 11] </ref>. As described in Section 3.2, the sensitive to clause is used to synchronize components and define when the requires clause predicate must be satisfied. Formally, this is easily represented using a traditional process algebra such as csp [12].
Reference: [12] <author> Hoare, C. A. R. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1985. </year>
Reference-contexts: As described in Section 3.2, the sensitive to clause is used to synchronize components and define when the requires clause predicate must be satisfied. Formally, this is easily represented using a traditional process algebra such as csp <ref> [12] </ref>. Events are defined as changes in the state of the entity. Assume that F (St) is a function between two states of entity P that implements the requirements specified in P 's requires and ensures clauses (i.e. F (St) satisfies Equation 2). <p> The Wright architecture description language [3, 4] by Allen and Garlan is of particular interest when discussing abstract architectures in vspec. A Wright description consists of a collection of components interacting via instances of connector types. Each part of a Wright description is defined using a variant of csp <ref> [12] </ref>. Unlike vspec's use of csp to define only communications between components, Wright descriptions use csp to define the behavior of components as well. Wright's csp descriptions define the sequence of events a component or connector participates in.
Reference: [13] <author> Jamsek, D., and Bickford, M. </author> <title> Formal Verification of VHDL Models. </title> <type> Technical Report RL-TR-94-3, </type> <institution> Rome Laboratory, Griffiss Air Force Base, </institution> <address> NY, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: A major difference between Rapide and vspec is that vspec descriptions are not executable. They are intended for formal analysis. 5.2 Other vhdl Specification Languages Odyssey Research Associates (ORA) is developing Larch/vhdl, an alternative Larch interface language for vhdl <ref> [13] </ref>. Larch/vhdl is targeted for formal analysis of a vhdl description and ORA is defining a formal semantics for vhdl using lsl. The lsl representations are used in a 27 traditional theorem prover to verify system correctness.
Reference: [14] <author> Jones, K. LM3: </author> <title> A Larch Interface Language for Modula-3. A Definition and Introduction. Version 1.0. </title> <type> Technical Report 72, </type> <institution> DEC Systems Research Center, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Instead, it allows the verification that a structural description correctly maps to a behavioral description for the entity. 5.3 Larch Interface Languages Larch interface languages have been developed for a variety of programming languages, including LCL [10], Larch/C++ [7, 15] and LM3 <ref> [14] </ref>, interface languages for C, C++ and Modula-3, respectively. Each of these languages allow the description of the pre and postconditions for procedures and functions in a sequential programming language.
Reference: [15] <author> Leavens, G. T. </author> <note> Larch/C++ Reference Manual. Available at ftp://ftp.cs.iastate.edu/pub/larchc++/lcpp.ps.gz., </note> <year> 1995. </year>
Reference-contexts: Instead, it allows the verification that a structural description correctly maps to a behavioral description for the entity. 5.3 Larch Interface Languages Larch interface languages have been developed for a variety of programming languages, including LCL [10], Larch/C++ <ref> [7, 15] </ref> and LM3 [14], interface languages for C, C++ and Modula-3, respectively. Each of these languages allow the description of the pre and postconditions for procedures and functions in a sequential programming language.
Reference: [16] <author> Luckham, D., Kenney, J., Augustin, L., Vera, J., Bryan, D., and Mann, W. </author> <title> Specification and Analysis of System Architecture Using Rapide. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 4 (April </month> <year> 1995), </year> <pages> 315-355. </pages>
Reference-contexts: Research in this field has led to the development of several architecture description languages, including UniCon [21], Wright [3, 4] and Rapide <ref> [16, 17] </ref>. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. <p> Wright's csp descriptions define the sequence of events a component or connector participates in. Components and connectors interact when one component/connector observes an event provided by another. This may cause the second component/connector to provide events that cause further interactions. These interactions are all described using csp. Rapide <ref> [16, 17] </ref> is an executable architecture description language designed for prototyping architectures of distributed systems. A Rapide architecture consists of a set of module specifications (called interfaces), a set of connection rules defining communication between interfaces and a set of formal constraints that define legal patterns of communication.
Reference: [17] <author> Luckham, D., and Vera, J. </author> <title> An Event-Based Architecture Definition Language. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 9 (September </month> <year> 1995), </year> <pages> 717-734. </pages>
Reference-contexts: Research in this field has led to the development of several architecture description languages, including UniCon [21], Wright [3, 4] and Rapide <ref> [16, 17] </ref>. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. <p> Wright's csp descriptions define the sequence of events a component or connector participates in. Components and connectors interact when one component/connector observes an event provided by another. This may cause the second component/connector to provide events that cause further interactions. These interactions are all described using csp. Rapide <ref> [16, 17] </ref> is an executable architecture description language designed for prototyping architectures of distributed systems. A Rapide architecture consists of a set of module specifications (called interfaces), a set of connection rules defining communication between interfaces and a set of formal constraints that define legal patterns of communication.
Reference: [18] <author> Milner, R., Tofte, M., and Harper, R. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: A system's vspec description provides I and O. The abstraction function from the concrete to the abstract state provides the means for comparing the abstract and concrete states. Weak bisimulation <ref> [18] </ref> is used as the correctness criteria when attempting to verify that an abstract architecture satisfies a vspec description.
Reference: [19] <author> Perry, D. </author> <title> VHDL, 1st ed. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference: [20] <author> Roy, J., Kumar, N., Dutta, R., and Vemuri, R. </author> <title> DSS: A Distributed High-Level Synthesis System. </title> <journal> IEEE Design&Test of Computers (June 1992), </journal> <pages> 18-32. 30 </pages>
Reference-contexts: Even though b1 does not force a change in state, it does not prohibit one either. An external device (buffer instance b2) has caused the output signal to change values. 4.2 The Move Machine A more complex example is the specification of a Move Machine <ref> [20] </ref>. The Move Machine is a simple CPU that moves data from one memory location to another. It contains four instructions: jump, load register from memory, store register to memory, and halt. There are four adressing modes: absolute, immdediate, indirect and relative.
Reference: [21] <author> Shaw, M., DeLine, R., Klein, D., Ross, T., Young, D., and Zelesnik, G. </author> <title> Abstrac-tions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Transactions on Software Engineering 21, </journal> <month> 4 (April </month> <year> 1995), </year> <pages> 314-335. </pages>
Reference-contexts: Research in this field has led to the development of several architecture description languages, including UniCon <ref> [21] </ref>, Wright [3, 4] and Rapide [16, 17]. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. <p> development of several architecture description languages, including UniCon <ref> [21] </ref>, Wright [3, 4] and Rapide [16, 17]. Each of these languages allow the definition of components and connectors to define a software architecture. This is similar to the vhdl notion of a structural architecture described in this paper. Shaw's UniCon language [21] is one example of an architecture description language. A UniCon description consists of component and connector definitions.
Reference: [22] <author> Vemuri, R., Carter, H., and Alexander, P. </author> <title> Board and MCM Level Synthesis for Embedded Systems: The COMET Cosynthesis Environment. </title> <booktitle> In Proceedings of the 1 st Annual RASSP Conference (Washington, </booktitle> <address> DC, </address> <month> August </month> <year> 1994). </year> <month> 31 </month>
References-found: 22

