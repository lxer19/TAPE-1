URL: http://www.cs.rpi.edu/~blythes/docs/isss96.ps
Refering-URL: http://www.cs.rpi.edu/~blythes/pubs.html
Root-URL: http://www.cs.rpi.edu
Title: Toward a Practical Methodology for Completely Characterizing the Optimal Design Space  
Author: Stephen A. Blythe Robert A. Walker 
Address: Troy, NY 12180 Kent, OH 44242  
Affiliation: Rensselaer Polytechnic Institute Kent State University  
Abstract: One of the most compelling reasons for developing high-level synthesis systems has been the desire to quickly explore the design space. Since this problem is very difficult to solve optimally, most systems compute either lower bounds or estimates on the optimal tradeoff curve. The methodology described here goes beyond most previous work in several ways: (1) it computes all optimal tradeoff points so as to completely characterize the design space, (2) it solves not only the scheduling problem, but the clock determination and module selection problems as well, and (3) it carefully prunes the search space at each level of the design cycle. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Gajski, F. Vahid, S. Narayan, and J. Gong, </author> <title> Specification and Design of Embedded Systems. </title> <address> Englewood Cliffs, NJ 07632, USA: </address> <publisher> P T R Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction For many years, one of the most compelling reasons for developing high-level synthesis systems <ref> [1, 2] </ref> has been the desire to quickly explore a wide range of designs for the same behavioral description. Given a set of designs, two metrics are commonly used to evaluate their quality: area (ideally total area, but often only functional unit area), and time (the schedule length, or latency).
Reference: [2] <author> G. De Micheli, </author> <title> Synthesis and Optimization of Digital Circuits. </title> <booktitle> McGraw-Hill series in electrical and computer engineering, </booktitle> <address> New York, NY, USA: </address> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction For many years, one of the most compelling reasons for developing high-level synthesis systems <ref> [1, 2] </ref> has been the desire to quickly explore a wide range of designs for the same behavioral description. Given a set of designs, two metrics are commonly used to evaluate their quality: area (ideally total area, but often only functional unit area), and time (the schedule length, or latency). <p> Such points are called Pareto points <ref> [2, 6] </ref>, and can be 9th Int.
Reference: [3] <author> A. H. Timmer, M. J. M. Heijiligers, and J. A. G. Jess, </author> <title> "Fast System-Level Area-Delay Curve Prediction," </title> <booktitle> in Proc. of 1st APCHDLSA, </booktitle> <pages> pp. 198-207, </pages> <year> 1993. </year>
Reference-contexts: Finding the optimal tradeoff curve between these two metrics is called design space exploration. Design space exploration is generally considered too difficult to solve optimally in a reasonable amount of time, so the problem is usually limited to computing either lower bounds <ref> [3] </ref> or estimates [4] on the optimal tradeoff curve for some set of time or resource constraints. Moreover, the design space is usually determined by solving only the scheduling and functional unit allocation subproblems. The design space exploration methodology described here goes beyond traditional design space exploration in several ways. <p> As a simple example, consider the design space exploration problem for the DIFFEQ example [7], using library A from Table 1 (Timmer's "trivial" library 1 from <ref> [3] </ref>) and a clock length of 100. The minimum time 1 Note that, although we are solving only the TCS problem, this methodology is not limited to solving only that problem, and could be extended to include register allocation, interconnect allocation, control unit design, etc. <p> One method, described in [14], generates a number of module sets, and then selects the best one. Another method, presented in <ref> [3] </ref>, computes an initial module set through a MILP formulation, and determines its validity by scheduling; if no viable schedule is found, then the set (and its allocation) are updated, and the scheduling process is repeated. 4 As with some of the previous work on clock length determination, using such techniques <p> Therefore, only those module sets that contain at least one of those modules must be explored at that time constraint. Using library C, shown in Table 5 (Timmer's library 2 from <ref> [3] </ref>), and the DIFFEQ example, the methodology described above generates the design space shown in Figure 6. <p> Although these designs are optimal solutions for a particular clock length and module set, they are not Pareto points, so it is very important that the methodology correctly explores the design space. For example, <ref> [3] </ref> presents a method that begins at time constraint T max and alternately performs time and area lower-bounding to find a stair-step tradeoff curve.
Reference: [4] <author> L.-G. Chen and L.-G. Jeng, </author> <title> "Optimal Module Set and Clock Cycle Selection for DSP Synthesis," </title> <booktitle> in Proc. of 1991 IEEE International Symp. on Circuits and Systems., (Singapore), </booktitle> <pages> pp. 2200-2203, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June 11-14 </month> <year> 1991. </year>
Reference-contexts: Finding the optimal tradeoff curve between these two metrics is called design space exploration. Design space exploration is generally considered too difficult to solve optimally in a reasonable amount of time, so the problem is usually limited to computing either lower bounds [3] or estimates <ref> [4] </ref> on the optimal tradeoff curve for some set of time or resource constraints. Moreover, the design space is usually determined by solving only the scheduling and functional unit allocation subproblems. The design space exploration methodology described here goes beyond traditional design space exploration in several ways. <p> The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design. <p> Fortunately, such an exhaustive search is not necessary, as the set of candidate clock lengths to be scheduled can be reduced. In [12], Corazao et al. gave one method for reducing that set. A tighter method was introduced in <ref> [4] </ref>, and later proven correct in [13] and [8] this method computes a small set of candidate clock lengths (one of which must be the optimal clock length) by taking the ceiling of the integral divisors of each of the functional unit delays. 3.2 Pruning the Candidate Clock Lengths Even these <p> Instead of trying to find a single module set, the method found in <ref> [4] </ref> exhaustively explores all possible module sets. Since this method also exhaustively explores all integral divisor based clock lengths, its computational complexity is too large for optimal scheduling, so only estimates are computed. 4.2 Exploring Different Module Sets Fortunately, such an exhaustive search is not necessary.
Reference: [5] <author> M. C. McFarland, </author> <title> "Reevaluating the Design Space for Register Transfer Hardware Synthesis," </title> <booktitle> in Proc. of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <address> (Santa Clara, California), </address> <pages> pp. 262-265, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Nov. 9-12 </month> <year> 1987. </year>
Reference-contexts: Although there is a tradeoff between latency and area, the tradeoff curve is not smooth due to the finite combinations of the library modules available <ref> [5] </ref>. Consider the design space shown in Figure 1 this curve can be described by the set of points f (T; f (T ))g, where f (T ) is the minimum area required for a given time constraint T (i.e., the optimal solution to that TCS problem).
Reference: [6] <author> R. K. Brayton and R. Spence, </author> <title> Sensitivity and Optimization. Computer-aided design of electronic circuits, </title> <address> 52 Vandervilt Avenue, New York, NY 10017, USA: </address> <publisher> Elsevier Science Publishing Co., INC., </publisher> <year> 1984. </year>
Reference-contexts: Such points are called Pareto points <ref> [2, 6] </ref>, and can be 9th Int.
Reference: [7] <author> P. G. Paulin and J. P. Knight, </author> <title> "Force Directed Scheduling for the Behavioral Synthesis of ASICs," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 8, </volume> <pages> pp. 661-679, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: As a simple example, consider the design space exploration problem for the DIFFEQ example <ref> [7] </ref>, using library A from Table 1 (Timmer's "trivial" library 1 from [3]) and a clock length of 100.
Reference: [8] <author> S. Chaudhuri, S. A. Blythe, and R. A. Walker, </author> <title> "A Solution Methodology for Exact Design Space Exploration in a 3D Design Space." </title> <note> to appear in IEEE Trans. on VLSI. </note>
Reference-contexts: Given that set of time constraints, our Voyager design space exploration system <ref> [8] </ref> efficiently characterizes the design space as follows. The main loop (see of increasing latency. At each time constraint, an ASAP schedule is first calculated to determine if a feasible schedule exists for that time constraint and clock length. <p> The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design. <p> Therefore, the problem of clock length determination must be folded into the design space exploration problem. 3.1 Prior Work As described in <ref> [8] </ref>, the clock determination problem is usually ignored in favor of ad hoc decisions or estimates. For example, several early synthesis systems used the delay of the slowest functional unit as the estimated clock length, a choice which favored the use of chaining and disallowed multi-cycling. <p> Fortunately, such an exhaustive search is not necessary, as the set of candidate clock lengths to be scheduled can be reduced. In [12], Corazao et al. gave one method for reducing that set. A tighter method was introduced in [4], and later proven correct in [13] and <ref> [8] </ref> this method computes a small set of candidate clock lengths (one of which must be the optimal clock length) by taking the ceiling of the integral divisors of each of the functional unit delays. 3.2 Pruning the Candidate Clock Lengths Even these integral-divisor methods can lead to a set of
Reference: [9] <author> S. Chaudhuri, R. A. Walker, and J. E. Mitchell, </author> <title> "Analyzing and Exploiting the Structure of the Constraints in the ILP Approach to the Scheduling Problem," </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 456-471, </pages> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: It then uses a tighter (but more computationally-intensive) FU lower-bounding method based on LP-relaxation, and tries this procedure again (in this example, determining that time constraint 700 corresponds to a Pareto point). If this method also fails, then it solves a carefully-developed ILP formulation <ref> [9] </ref> to determine the optimal solution, using the bounds determined earlier to reduce the search space for that solution. Thus our base methodology quickly determines whether or not each time constraint corresponds to a 2 In the problem as specified so far, the area will never be larger.
Reference: [10] <author> V. Chaiyakul, A. C.-H. Wu, and D. D. Gajski, </author> <title> "Timing Models for High Level Synthesis," </title> <booktitle> in [15], </booktitle> <pages> pp. 60-65. </pages>
Reference-contexts: The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design.
Reference: [11] <author> S. Narayan and D. D. Gajski, </author> <title> "System Clock Estimation based on Clock Slack Minimization," </title> <booktitle> in [15], </booktitle> <pages> pp. 66-71. </pages>
Reference-contexts: The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design. <p> For example, several early synthesis systems used the delay of the slowest functional unit as the estimated clock length, a choice which favored the use of chaining and disallowed multi-cycling. A heuristic method for finding the clock length was given in <ref> [11] </ref>, but the result may not be optimal. To guarantee that the optimal clock length is chosen, 3 the scheduling problem could be solved repeatedly for every possible clock length a very computationally-intensive task. <p> Thus, changing the clock length to c fl can only improve the schedule. 2 To demonstrate the use of this theorem, consider library B, shown in Table 2 (the VDP100 library from <ref> [11] </ref>, augmented with areas similar to those of library A).
Reference: [12] <author> M. Corazao, M. Khalaf, L. Guerra, M. Potkonjak, and J. M. Rabaey, </author> <title> "Instruction Set Mapping for Performance Optimization ," in Proc. </title> <booktitle> of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <address> (Santa Clara, California), </address> <pages> pp. 518-521, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Nov. 7-11 </month> <year> 1993. </year>
Reference-contexts: The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design. <p> To guarantee that the optimal clock length is chosen, 3 the scheduling problem could be solved repeatedly for every possible clock length a very computationally-intensive task. Fortunately, such an exhaustive search is not necessary, as the set of candidate clock lengths to be scheduled can be reduced. In <ref> [12] </ref>, Corazao et al. gave one method for reducing that set.
Reference: [13] <author> P. Jha, S. Parameswaran, and N. Dutt, </author> <title> "Reclocking for High Level Synthesis," </title> <booktitle> in Proc. of the Asia-South Pacific Conference on Design Automation (ASP-DAC), (Makuhari Messe, Chiba, </booktitle> <address> Japan), </address> <publisher> IEEE Computer Society Press, </publisher> <address> Aug. 29-Sept. </address> <month> 1 </month> <year> 1995. </year>
Reference-contexts: The problem was simplified by assuming the clock length was known a priori, whereas recent work has shown that not only is determining the system clock length a difficult problem <ref> [4, 10, 11, 12, 13, 8] </ref>), but the choice of the clock length has a significant impact on the resulting design. <p> Fortunately, such an exhaustive search is not necessary, as the set of candidate clock lengths to be scheduled can be reduced. In [12], Corazao et al. gave one method for reducing that set. A tighter method was introduced in [4], and later proven correct in <ref> [13] </ref> and [8] this method computes a small set of candidate clock lengths (one of which must be the optimal clock length) by taking the ceiling of the integral divisors of each of the functional unit delays. 3.2 Pruning the Candidate Clock Lengths Even these integral-divisor methods can lead to a
Reference: [14] <author> R. Jain, A. C. Parker, and N. Park, </author> <title> "Module Selection for Pipeline Synthesis," </title> <booktitle> in Proc. of the 25th ACM/IEEE Design Automation Conf., </booktitle> <address> (Anaheim, California), </address> <pages> pp. 542-547, </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June 12-15 </month> <year> 1988. </year>
Reference-contexts: One method, described in <ref> [14] </ref>, generates a number of module sets, and then selects the best one.
Reference: [15] <editor> Proc. </editor> <booktitle> of the European Design Automation Conference (Euro-DAC), </booktitle> <address> (Hamburg, Germany), </address> <publisher> IEEE Computer Society Press, </publisher> <month> Feb. </month> <year> 1992. </year> <title> 5 Note that the bounding methodology described here would more fully characterize the design space than the one described in [3], for the reasons explained in Section 4.2. </title> <type> 6 </type>
References-found: 15

