URL: http://dimacs.rutgers.edu/techps/1994/94-42.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: hammer@rutcor.rutgers.edu  e-mail: kogan@rutcor.rutgers.edu  
Title: Essential and Redundant Rules in Horn Knowledge Bases a  
Author: by Peter L. Hammer ;b and Alexander Kogan b;c 
Address: P.O. Box 5062, New Brunswick, NJ 08903-5062  Ave., Newark, NJ 07102,  
Affiliation: b RUTCOR, Rutgers University,  c Accounting and Information Systems, Faculty of Management, Rutgers University, 180 University  
Note: a The authors gratefully acknowledge the partial support of AFOSR (Grant F49620-93-1-0041) and ONR (Grants N00014-92-J1375 and N00014-92-J4083).  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 94-42 August 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Blake. </author> <title> Canonical Expression in Boolean Algebra. </title> <type> Dissertation, </type> <institution> Chicago, </institution> <year> 1937. </year>
Reference-contexts: Horn formulae) these computations can be carried out in a very efficient way. We are not going to deal in this paper with methods of obtaining prime implicates. Perhaps, the best known method for the solution of this problem is the so-called consensus or resolution method, see <ref> [1, 15, 16] </ref>. It is known that finding all the prime impicates of a Boolean function is in general difficult from a computational point of view, although efficient methods are available for certain classes of problems.
Reference: [2] <author> E. Charles and O. Dubois. MELODIA: </author> <title> Logical methods for checking knowledge bases. In: Validation, Verification and Test of Knowledge-based Systems, </title> <editor> Eds.: M. Ayel and J.-P. Laurent, </editor> <publisher> Wiley & Sons 1991, </publisher> <pages> 95-105. </pages>
Reference: [3] <author> W.F. Dowling and J.H. Gallier. </author> <title> Linear time algorithms for testing the satisfiability of propositional Horn formulae. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 (1984), </volume> <pages> 267-284. </pages>
Reference-contexts: The most widely used and well known example is Horn production rule bases where inference has linear time complexity, see <ref> [3] </ref>. A production rule is called Horn iff it is of the form ^ x ! y x2S x ! FALSE - 5 - (with the usual convention that V x2; x = 1).
Reference: [4] <author> A. Ginsberg. </author> <title> Knowledge-base reduction: A new approach to checking knowledge bases for inconsistency & redundancy. </title> <booktitle> Proceedings of the 7th National Conference on Artificial Intelligence (AAAI-88), </booktitle> <year> 1988, </year> <pages> 585-589. </pages>
Reference: [5] <author> P.L. Hammer and A. Kogan. </author> <title> Horn functions and their DNFs. </title> <journal> Information Processing Letters, </journal> <volume> 44 (1992), </volume> <pages> 23-29. </pages>
Reference-contexts: It should however be noted that the same function f can be represented by a non-Horn CNF; e.g. f = (x _ :y _ :u _ z)(:z _ :u _ w)(:u _ :w): (11) The justification of the term Horn function lies in the following Proposition 2.1 (see <ref> [5] </ref>) Each prime implicate of a Horn function is either definite Horn or negative. Therefore, every prime CNF of a Horn function is Horn. It turns out that an irredundant prime representation of a Horn function can be obtained easily: Proposition 2.2 (see [5]) Any Horn CNF can be transformed to <p> lies in the following Proposition 2.1 (see <ref> [5] </ref>) Each prime implicate of a Horn function is either definite Horn or negative. Therefore, every prime CNF of a Horn function is Horn. It turns out that an irredundant prime representation of a Horn function can be obtained easily: Proposition 2.2 (see [5]) Any Horn CNF can be transformed to an equivalent irredundant prime CNF in time quadratic in the length of the given CNF. 3 Decomposition of Horn Functions Let us first remind that a unit clause is a clause consisting of exactly one literal. <p> In order to avoid this ambiguity, we shall define the definite Horn component h f of a Horn function f as a function represented by the conjunction of all definite clauses of an arbitrary prime CNF of f . This definition is consistent, as shown by Proposition 3.1 (see <ref> [5] </ref>) Let f be a Horn function and F = H ^ G (16) be a prime CNF of it, where H is the conjunction of all definite Horn clauses in (16), and G is the conjunction of all negative clauses in (16). <p> It is easy to see that, although (13) and (18) represent the same function, the conjunction of the negative clauses of (13) (:u _ :v _ :z)(:w _ :x) (:u _ :v _ :x)(:w _ :y) represent different Boolean functions. However, it can be proved that Proposition 3.2 (see <ref> [5] </ref>) All the negative restrictions of a Horn function contain the same number of clauses. In order to obtain a structural description of the negative restrictions of a Horn function f , we construct a directed graph G N (f ) in the following way. <p> Proposition 3.3 (see <ref> [5] </ref>) A negative conjunctive normal form F N is a negative restriction of a Horn function f if and only if it has the form F N = V m i=1 C i , where C i is a clause in N i (f ). <p> The structure of irredundant prime Horn CNFs is characterized by Theorem 3.4 (Decomposition Theorem, see <ref> [5] </ref>) A conjunctive normal form F is an irredundant and prime representation of a Horn function f if and only if F = H f ^ F where H f is an irredundant prime CNF of the definite Horn component h (f ), and where F is a negative restriction of
Reference: [6] <author> P.L. Hammer and A. Kogan. </author> <title> Optimal compression of propositional Horn knowledge bases: complexity and approximation. </title> <journal> Artificial Intelligence, </journal> <volume> 64 (1993), </volume> <pages> 131-145. </pages>
Reference-contexts: The final set R will be denoted S F and will be called the forward chaining closure of S under F . Different variants of the forward chaining procedure are commonly used as built-in inference strategies in expert systems (see e.g. [8]). The following two statements proved in <ref> [6] </ref> characterize the implicates of an arbitrary Horn CNF in terms of the forward chaining procedure. <p> If the answer is yes and a Horn CNF F 0 containing C is given, it can be checked in quadratic time that F 0 is an irredundant prime CNF of h. Remark that F 0 can be only polynomially longer than F (see <ref> [6] </ref>). Theorem 5.6 The Definite Horn Redundant Implicate Problem is NP-complete. Proof We will show how the following problem can be reduced in polynomial time to the Definite Horn Redundant Implicate Problem.
Reference: [7] <author> P.L. Hammer and A. Kogan. </author> <title> Quasi-Acyclic Propositional Horn Knowledge Bases: Optimal Compression. </title> <type> RUTCOR Research Report RRR 10-93, </type> <institution> Rutgers University, </institution> <address> New Brunswick, NJ, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: = W x2S 1 :x is an implicate of a Horn function f = F ^C 2 , where F is a definite Horn CNF and C 2 = W x2S 2 :x is a negative clause, if and only if S 2 S F The following statement proved in <ref> [7] </ref> shows that the forward chaining procedure can be efficiently implemented. We assume that the starting subset of variables S contains only variables present in the given definite Horn CNF F . <p> If it happens that all the clauses in an irredundant prime CNF are essential, then any other prime implicate of the function is redundant, and this CNF is the unique irredundant prime CNF of the function. Acyclic Horn knowledge bases (see <ref> [7] </ref>) provide an example of such functions. However, there are Horn functions in this class which are not acyclic.
Reference: [8] <author> J.P. Ignizio. </author> <title> Introduction to Expert Systems: The Development and Implementation of Rule-Based Expert Systems. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The final set R will be denoted S F and will be called the forward chaining closure of S under F . Different variants of the forward chaining procedure are commonly used as built-in inference strategies in expert systems (see e.g. <ref> [8] </ref>). The following two statements proved in [6] characterize the implicates of an arbitrary Horn CNF in terms of the forward chaining procedure.
Reference: [9] <author> H.R. Lewis. </author> <title> Renaming a set of clauses as a Horn set. </title> <journal> Journal of the ACM , 25 (1978), </journal> <pages> 134-135. </pages>
Reference: [10] <author> C.L. Lucchesi and S.L. Osborn. </author> <title> Candidate keys for relations. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 (1978), </volume> <pages> 270-279. - 15 </pages> - 
Reference-contexts: The Prime Attribute Name Problem Instance: A definite Horn CNF H in variables x 1 ; : : : ; x n . Question: Is there a negative prime implicate of H ^ ( W n i=1 :x i ) containing x 1 ? It has been shown in <ref> [10] </ref> that the Prime Attribute Name Problem is NP-complete. An instance of the Prime Attribute Name Problem can be transformed to an instance of the Definite Horn Redundant Implicate Problem in the following way.
Reference: [11] <author> D. Maier. </author> <title> Minimum covers in the relational database model. </title> <booktitle> Journal of the ACM , 27 (4) (1980), </booktitle> <pages> 664-674. </pages>
Reference-contexts: We will develop below another polynomially verifiable sufficient condition of redundancy that could be used to show that these prime implicates are redundant. The development that follows is based on the concept of direct determination introduced in <ref> [11] </ref>. Given a definite Horn CNF F , we shall call two subsets of variables S 1 and S 2 equivalent under F if S F 2 = S F 1 . Clearly, the equivalence of two given subsets of variables can be checked in linear time. <p> This approach is clearly intractable, since the number of implicates is typically exponentially large. The following statement, which is a reformulation of the result proved in <ref> [11] </ref>, shows that the directness of an implicate can be easily seen in any Horn CNF of the function.
Reference: [12] <author> M. Minoux. LTUR: </author> <title> A simplified linear-time unit resolution algorithm for Horn formulae and computer implementation. </title> <journal> Information Processing Letters, </journal> <volume> 29 (1988), </volume> <pages> 1-12. </pages>
Reference: [13] <author> M. Minoux. </author> <title> The Unique Horn-Satisfiability problem and quadratic Boolean equations. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 6 (1992), </volume> <pages> 253-266. </pages>
Reference: [14] <author> T.A. Nguyen, W.A. Perkins, T.J. Laffey, D. Pecora. </author> <title> Knowledge base verification. AI Magazine, </title> <booktitle> Summer 1987, </booktitle> <volume> Vol. 8, No. 2, </volume> <pages> 69-75. </pages>
Reference: [15] <author> W. Quine. </author> <title> A way to simplify truth functions. </title> <journal> American Mathematical Monthly, </journal> <volume> 62 (1955), </volume> <pages> 627-631. </pages>
Reference-contexts: Horn formulae) these computations can be carried out in a very efficient way. We are not going to deal in this paper with methods of obtaining prime implicates. Perhaps, the best known method for the solution of this problem is the so-called consensus or resolution method, see <ref> [1, 15, 16] </ref>. It is known that finding all the prime impicates of a Boolean function is in general difficult from a computational point of view, although efficient methods are available for certain classes of problems.
Reference: [16] <author> J.A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM , 12 (1965), </journal> <pages> 23-41. </pages>
Reference-contexts: Horn formulae) these computations can be carried out in a very efficient way. We are not going to deal in this paper with methods of obtaining prime implicates. Perhaps, the best known method for the solution of this problem is the so-called consensus or resolution method, see <ref> [1, 15, 16] </ref>. It is known that finding all the prime impicates of a Boolean function is in general difficult from a computational point of view, although efficient methods are available for certain classes of problems.
Reference: [17] <author> J. Tepandi. </author> <title> Comparison of expert system verification criteria: redundancy. In: Validation, Verification and Test of Knowledge-based Systems, </title> <editor> Eds.: M. Ayel and J.-P. Lau-rent, </editor> <publisher> Wiley & Sons 1991, </publisher> <pages> 49-62. </pages>
References-found: 17

