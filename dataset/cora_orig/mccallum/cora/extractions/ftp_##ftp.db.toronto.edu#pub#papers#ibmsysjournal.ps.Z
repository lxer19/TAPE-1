URL: ftp://ftp.db.toronto.edu/pub/papers/ibmsysjournal.ps.Z
Refering-URL: http://www.cs.toronto.edu/~mendel/papers.html
Root-URL: 
Title: Architecture and Applications of the Hy Visualization System  
Author: Mariano P. Consens, Frank Ch. Eigler, Masum Z. Hasan, Alberto O. Mendelzon, Emanuel G. Noik, Arthur G. Ryman, and Dimitra Vista 
Abstract: The Hy + system is a generic visualization tool that supports a novel visual query language called GraphLog. In Hy + , visualizations are based on a graphical formalism that allows comprehensible representations of databases, queries, and query answers to be interactively manipulated. This paper describes the design, architecture and features of Hy + with a number of applications in software engineering and network management. These examples demonstrate the benefits of using a visualization-based system to carry out tasks of ever-increasing complexity in these areas and others.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: The algorithm computes a depth-first spanning forest F of the input graph, and places containers by following tree arcs with respect to F <ref> [1] </ref>, and is similar to several approaches found in the literature [30, 36]. 5. nop: no layout. The positions of containers are not altered. This method can be used to provide a form of incremental layout capability. 6. overlap: overlap elimination.
Reference: [2] <author> C. Batini, T. Catarci, M.F. Costabile, and S. Levialdi. </author> <title> Visual Query Systems. </title> <type> Technical report, </type> <institution> Universita degli Studi di Roma La Sapienza, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: A related idea is to provide data manipulation tools that are themselves visually oriented. The iconic user interfaces common in today's workstations are examples of these. Visual query languages for databases <ref> [2] </ref> are more ambitious tools for visual data manipulation. In this paper, we give an overview of the approach to visual display and manipulation of databases that we have been investigating at the University of Toronto for the past few years.
Reference: [3] <author> M. P. Consens and A. O. Mendelzon. </author> <title> Low Complexity Aggregation in GraphLog and Datalog. </title> <journal> Theoretical Computer Science, </journal> <volume> 116(1) </volume> <pages> 379-394, </pages> <year> 1993. </year>
Reference-contexts: The language is also capable of expressing first order aggregation queries, as well as aggregation along path traversals (for example, shortest path queries) <ref> [3] </ref>. 3.3 Data Acquisition The Hy + system relies on other programs (which are part of the Data Acquisition subsystem) to supply the raw data to be visually manipulated within the system.
Reference: [4] <author> M.P. Consens. </author> <title> Graphlog: "real life" recursive queries using graphs. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: To describe queries, Hy + relies on a visual pattern-based notation. The patterns are expressions of the GraphLog query language <ref> [4, 9] </ref>. Overall, the system supports query visualization (that is, presenting the description of the query using a visual notation), visualization of data that constitutes the input to the query, and visual presentation of the result [5]. <p> The meaning of the define query hygraph is to define the predicate in this distinguished literal in terms of the rest of the pattern. The semantics of define queries is given by a translation to stratified Datalog <ref> [4] </ref>. Each define hygraph translates to a rule with the label of the distinguished edge or blob in the head, and as many literals in the body as there are non-distinguished edges and blobs in the hygraph.
Reference: [5] <author> M.P. Consens. </author> <title> Creating and Filtering Structural Data Visualizations using Hygraph Patterns. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Section 4 discusses further applications to software engineering and Section 5, to network management. We conclude with a discussion for further work in Section 6. 2 2 A Tour of Hy + Hy + provides a user interface with extensive support for visualizing structural (or relational) data as hygraphs <ref> [5] </ref>, an extension of graphs inspired by Harel's higraphs [17]. The Hy + system supports visualization of the actual database instances, not just diagrammatic representations of the database schema. <p> The derived data can later be presented visually by the system. The second capability is a way of using queries to decide what data to show. The user can selectively restrict the amount of information to be displayed. This filtering of relevant information <ref> [5] </ref> is fundamental for conveying manageable volumes of visual information to the user. <p> The patterns are expressions of the GraphLog query language [4, 9]. Overall, the system supports query visualization (that is, presenting the description of the query using a visual notation), visualization of data that constitutes the input to the query, and visual presentation of the result <ref> [5] </ref>. We present an example of using GraphLog and its environment Hy + for visualizing the structure of the National Institutes of Health (NIH) public domain C++ class library. <p> In a way, define queries generate theorems, while filter queries generate proofs. A formal definition of filter queries and filtering logic programs can be found in <ref> [5] </ref>. 9 GraphLog has the ability to collect multisets of tuples and to compute aggregate functions on them. The aggregate functions supported in GraphLog are the unary operators MAX, MIN, COUNT, SUM, and AVG.
Reference: [6] <author> M.P. Consens, I. Cruz, and A.O. Mendelzon. </author> <title> Visualizing Queries and Querying Visualizations. </title> <booktitle> In ACM SIGMOD Record, </booktitle> <pages> pages 39-46, </pages> <year> 1992. </year>
Reference-contexts: second hygraph in Figure 2 is a filter query which generates a hygraph that contain all the members blobs and all the subclass, calls, and uses edges that exist in the database. 3 System Architecture and Implementation Hy + has evolved from the G + Visual Query System presented in <ref> [6] </ref>. The new system is implemented as a front-end, written in Smalltalk, that communicates with other programs to carry on its tasks, including multiple database back-ends for the actual evaluation of the queries.
Reference: [7] <author> M.P. Consens and M.Z. Hasan. </author> <title> Supporting Network Management through Declaratively Specified Data Visualizations. </title> <editor> In H.G. Hegering and Y. Yemini, editors, </editor> <booktitle> Proceedings of 32 the IEEE/IFIP Third International Symposium on Integrated Network Management, III, </booktitle> <pages> pages 725-738. </pages> <publisher> Elsevier North Holland, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: The alert may fire for various reasons: congestion in gateways between the server and the clients or a hardware fault. Assume that we first hypothesized that the cause of the alert was 27 congestion, but the investigation (see <ref> [7] </ref>) showed no congestion, although it found that the clients of samba are not generating the expected traffic to the server. Our second hypothesis is that the cause of the alert is a hardware problem.
Reference: [8] <author> M.P. Consens, M.Z. Hasan, and A.O. Mendelzon. </author> <title> Debugging Distributed and Parallel Programs by Visualizing and Querying Event Traces. In A.O. Mendelzon, editor, Declarative Database Visualization: Recent Papers from the Hy+/GraphLog Project. </title> <institution> CSRI, University of Toronto, </institution> <month> June </month> <year> 1993. </year> <note> Technical Report CSRI-285. </note>
Reference-contexts: Hy + has been applied to software structures in [10], [11], and for debugging distributed applications in <ref> [8] </ref>. In this section, we give additional examples using the same database of Section 2, that is, the NIH C++ library. Once again, the objects of interest include classes, functions, and variables.
Reference: [9] <author> M.P. Consens and A.O. Mendelzon. </author> <title> GraphLog: a Visual Formalism for Real Life Recursion. </title> <booktitle> In Proceedings of the Ninth ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 404-416, </pages> <year> 1990. </year>
Reference-contexts: To describe queries, Hy + relies on a visual pattern-based notation. The patterns are expressions of the GraphLog query language <ref> [4, 9] </ref>. Overall, the system supports query visualization (that is, presenting the description of the query using a visual notation), visualization of data that constitutes the input to the query, and visual presentation of the result [5].
Reference: [10] <author> M.P. Consens, A.O. Mendelzon, and A.G. Ryman. </author> <title> Visualizing and Querying Software Structures. </title> <booktitle> In 14th. Intl. Conference on Software Engineering, </booktitle> <pages> pages 138-156, </pages> <year> 1992. </year>
Reference-contexts: Hy + has been applied to software structures in <ref> [10] </ref>, [11], and for debugging distributed applications in [8]. In this section, we give additional examples using the same database of Section 2, that is, the NIH C++ library. Once again, the objects of interest include classes, functions, and variables. <p> The visual query language GraphLog is a suitable notation for expressing the type of software engineering queries that 4Thought needs to support. 21 4Thought was initially targeted at programming-in-the-large tasks such as architecture, design, and performance tuning <ref> [10, 32] </ref> in which the database being visualized contains structural information about the program. Here GraphLog is used as a visual query language to specify graphical views, such as call graphs and inheritance hierarchies, of the program database.
Reference: [11] <author> M.P. Consens, A.O. Mendelzon, and D. </author> <title> Vista. Deductive Database Support for Data Visualization. </title> <booktitle> In Proceedings of the 4th International Conference on Extending Database Technology, </booktitle> <pages> pages 45-58, </pages> <year> 1994. </year>
Reference-contexts: Hy + has been applied to software structures in [10], <ref> [11] </ref>, and for debugging distributed applications in [8]. In this section, we give additional examples using the same database of Section 2, that is, the NIH C++ library. Once again, the objects of interest include classes, functions, and variables.
Reference: [12] <author> P. Eades. </author> <title> A Heuristic for Graph Drawing. </title> <journal> Congressus Numerantium, </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1990. </year>
Reference-contexts: The simulation continues until a low-energy state is reached resulting in the final layout; similar approaches have been described in <ref> [12, 15, 19] </ref>. 10. stack: stack layout. Containers are positioned along the axis that results in the most square (cubical) or compact drawing. 16 11. 1d: one-dimensional layout. Containers are positioned along one of the specified axes.
Reference: [13] <author> P. Eades, W. Lai, K. Misue, and K. Sugiyama. </author> <title> Preserving the Mental Map of a Diagram. </title> <type> Technical Report IIAS-RR-91-16E, </type> <institution> Fujitsu Laboratories, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: The positions of containers are not altered. This method can be used to provide a form of incremental layout capability. 6. overlap: overlap elimination. Containers are repositioned to eliminate overlaps in a manner similar to the horizontal shu*e algorithm <ref> [13] </ref>, except that containers are shu*ed along both the x and y axes (and z for 3-D layouts). 7. pack: quadtree-based two-dimensional bin packing. Containers are placed into a small enclosing region by an incremental (and heuristic) quadtree growing approach. 8. random: random layout.
Reference: [14] <author> F.Ch. Eigler. GXF: </author> <title> A Graph Exchange Format. </title> <type> Technical report, </type> <institution> CORDS, Computer Systems Research Institute, University of Toronto, </institution> <month> January </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: These files can also be obtained from relational and deductive databases. 3.4 External Hygraph Representation Graph Exchange Format (GXF) is a specification for a portable external representation for directed graphs and hygraphs <ref> [14] </ref>. Hy + can read and write graphs in GXF format from and to UNIX 2 files, and uses extensions of GXF to store all layout and display-related information.
Reference: [15] <author> T. Fruchterman and E. Reingold. </author> <title> Graph Drawing By Force-Directed Placement. </title> <type> Tech--nical Report UIUCDCS-R-90-1609, </type> <institution> Dept. of Comp. Sci., U. of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: The simulation continues until a low-energy state is reached resulting in the final layout; similar approaches have been described in <ref> [12, 15, 19] </ref>. 10. stack: stack layout. Containers are positioned along the axis that results in the most square (cubical) or compact drawing. 16 11. 1d: one-dimensional layout. Containers are positioned along one of the specified axes.
Reference: [16] <author> G. Gonnet. PAT 3.1: </author> <title> An efficient text searching system. </title> <type> Technical report, </type> <institution> UW Centre for the New OED, University of Waterloo, </institution> <year> 1987. </year>
Reference-contexts: Furthermore, the query evaluation component has been extended to handle a mixture of traditional and textual queries. The latter kind of queries are handled by the PAT Text Searching Engine <ref> [16] </ref>. 3 Lector and PAT are trademarks of Open Text Systems Inc. 13 3.6 Hygraph Layout When data are imported into Hy + from non-graphical sources, or when answers to queries are computed, it is necessary to compute a layout for the resulting hygraphs, that is, to determine how the abstract
Reference: [17] <author> D. Harel. </author> <title> On Visual Formalisms. </title> <journal> Communication of ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <year> 1988. </year>
Reference-contexts: We conclude with a discussion for further work in Section 6. 2 2 A Tour of Hy + Hy + provides a user interface with extensive support for visualizing structural (or relational) data as hygraphs [5], an extension of graphs inspired by Harel's higraphs <ref> [17] </ref>. The Hy + system supports visualization of the actual database instances, not just diagrammatic representations of the database schema. Given the large volume of data that the system must present to the user, it is fundamental to provide him or her with two fundamental capabilities. <p> Work is proceeding to extend Hy + in several directions, including dynamic visualizations, temporal queries, three-dimensional diagrams, incremental query and layout, and new emphasis techniques for large visualizations. We hope this work is contributing to achieving David Harel's vision <ref> [17] </ref>: We are entirely convinced the future is "visual." We believe that in the next few years many more of our daily technical and scientific chores will be carried out visually, and graphical facilities will be far better than today's.
Reference: [18] <author> T.R. Henry and S.E. Hudson. </author> <title> Interactive Graph Layout. </title> <booktitle> In ACM UIST '91, </booktitle> <pages> pages 55-64. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: Containers are divided into clusters according to size and shape similarity. Each cluster is laid out independently, and then resulting drawings are combined to form a composite, similar to the technique described in <ref> [18] </ref>. 2. circle: elliptical layout. Containers are positioned along the perimeter of an ellipse; containers are ordered to reduce (but not necessarily minimize) the number of arc crossings. 4 Each algorithm supports both two-dimensional and three-dimensional layouts. 15 3. grid: grid layout.
Reference: [19] <author> T. Kamada and S. Kawai. </author> <title> A General Framework for Visualizing Abstract Objects and Relations. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 10(1) </volume> <pages> 1-39, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The simulation continues until a low-energy state is reached resulting in the final layout; similar approaches have been described in <ref> [12, 15, 19] </ref>. 10. stack: stack layout. Containers are positioned along the axis that results in the most square (cubical) or compact drawing. 16 11. 1d: one-dimensional layout. Containers are positioned along one of the specified axes.
Reference: [20] <author> K. McCloghrie and M. T. Rose. </author> <title> Management Information Base for Network Management of TCP/IP based Internets - MIB-II. RFC 1213, Hughes LAN Systems, </title> <booktitle> Performance Systems International, </booktitle> <month> March, </month> <year> 1991. </year>
Reference-contexts: The example network management database contains information about the topology of the network and about its constituents. This information is obtained from MIBs (management information bases <ref> [20] </ref>). By executing the queries shown in Figure 11, we get the logical network layer map, shown on the right of the figure. Similar queries can produce the physical topology map. 24 To handle performance bottlenecks and faults, a network must be monitored continuously.
Reference: [21] <author> B.H. McCormick, T.A. DeFanti, and M.D. Brown. </author> <title> Visualization in Scientific Computing. </title> <journal> SIGGRAPH Computer Graphics, </journal> <volume> 21(6), </volume> <month> November </month> <year> 1987. </year> <note> Entire Issue. </note>
Reference-contexts: 1 History and Motivation Visual presentations are widely considered an effective tool to help manage large and complex collections of data. Researchers in scientific visualization (see, for example, <ref> [21] </ref>) were the first to exploit computer graphics technology to achieve dramatic improvements in the ability of people to understand the data they work with.
Reference: [22] <author> E.B. Messinger, L.A. Rowe, and R.R. Henry. </author> <title> A Divide-and-Conquer Algorithm for the Automatic Layout of Large Directed Graphs. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(1) </volume> <pages> 1-12, </pages> <year> 1991. </year>
Reference: [23] <author> S. Meyers. </author> <title> Effective C++. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Also, a class C2 that is a subclass of an incomplete class C1 and does not provide the implementation of the inherited pure virtual function is also an incomplete class. 19 The following two examples use Hy + for determining correctness of the C++ program. Both are taken from <ref> [23] </ref>, which discusses a number of specific ways to improve C++ programs and designs. The first example involves classes that do not have any virtual functions. <p> This means that none of its member functions can be overridden; all subclasses can add new functionality but cannot modify existing behavior, because non-virtual functions impose a mandatory implementation. This can be considered a form of limited inheritance and, according to <ref> [23] </ref>, may be an indication of a design problem. The query in Figure 9 finds such designs: the relation numOfVirtualFunctions is defined between every class C and the number of virtual functions that are defined in C. <p> If that number is zero, the class is complete; hence, subclasses may not modify any of the class's behavior. The filter query in Figure 9 requests to see the part of the hierarchy that uses any complete classes. 20 In the same spirit is the second example from <ref> [23] </ref>. A non-virtual function has both its interface and its implementation specified by the class in which it appears. According to [23], redefining such a function in a public subclass is not good design practice. The query in some superclass C2 of C1. <p> The filter query in Figure 9 requests to see the part of the hierarchy that uses any complete classes. 20 In the same spirit is the second example from <ref> [23] </ref>. A non-virtual function has both its interface and its implementation specified by the class in which it appears. According to [23], redefining such a function in a public subclass is not good design practice. The query in some superclass C2 of C1. The above queries can be seen as constraints imposed upon the structure of the database.
Reference: [24] <author> S.A. Naqvi and S. Tsur. </author> <title> A Logic Language for Data and Knowledge Bases. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year> <month> 34 </month>
Reference-contexts: (but there are options to present summaries of the information carried by the hidden edges). 3.2 Query Processing Query processing in Hy + is performed by translating queries (and data, if necessary) into logic programs suitable for execution by one of two back-ends: the logic programming language LDL of MCC <ref> [24] </ref> and the experimental deductive language CORAL of the University of Winsonsin [28].
Reference: [25] <author> E.G. Noik. </author> <title> Exploring Large Hyperdocuments: Fisheye Views of Nested Networks. </title> <booktitle> In Hypertext '93: ACM Conf. on Hypertext, </booktitle> <pages> pages 192-205, </pages> <address> Seattle, WA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Each layout algorithm can be controlled by manipulating a number of generic and algorithm-specific parameters whose descriptions, unfortunately, were too lengthy to be included in this paper. Furthermore, the graphite layout filter can also be used to generate non-geometric fish-eye views of nested graphs <ref> [25, 27] </ref>, that can be used to balance local detail and global context by automatically emphasizing some regions of the layout while simultaneously deemphasizing others.
Reference: [26] <author> E.G. Noik. Graphite: </author> <title> A Suite of Hygraph Visualization Utilities. In A.O. Mendelzon, editor, Declarative Database Visualization: Recent Papers from the Hy+/GraphLog Project, </title> <type> pages 108-126. Technical report CSRI-285, </type> <institution> University of Toronto, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: To compute hygraph layouts, Hy + uses the graphite utilities developed within our project <ref> [26] </ref>. The current implementation of graphite consists of several Unix filters.
Reference: [27] <author> E.G. Noik. </author> <title> Layout-independent Fisheye Views of Nested Graphs. </title> <booktitle> In VL '93: IEEE Symposium on Visual Languages, </booktitle> <pages> pages 336-341, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Each layout algorithm can be controlled by manipulating a number of generic and algorithm-specific parameters whose descriptions, unfortunately, were too lengthy to be included in this paper. Furthermore, the graphite layout filter can also be used to generate non-geometric fish-eye views of nested graphs <ref> [25, 27] </ref>, that can be used to balance local detail and global context by automatically emphasizing some regions of the layout while simultaneously deemphasizing others.
Reference: [28] <author> R. Ramakrishnan, D. Srivastava, and S. Sudarshan. </author> <title> CORAL: Control, Relations and Logic. </title> <booktitle> In Proceedings of International Conference on Very Large Databases, </booktitle> <year> 1992. </year>
Reference-contexts: the hidden edges). 3.2 Query Processing Query processing in Hy + is performed by translating queries (and data, if necessary) into logic programs suitable for execution by one of two back-ends: the logic programming language LDL of MCC [24] and the experimental deductive language CORAL of the University of Winsonsin <ref> [28] </ref>.
Reference: [29] <author> D. Raymond. </author> <title> Flexible Text Display with Lector. </title> <journal> IEEE Computer, </journal> <volume> 28(8) </volume> <pages> 49-60, </pages> <year> 1992. </year>
Reference-contexts: Of course, this approach is in addition of the use of Hy + to generate as many specifically tailored overviews as needed. Figure 5 has an example of such an integration [37]. To the right of a specialized hygraph browser there is a Lector 3 <ref> [29] </ref> window that displays the source code associated with the object selected in the browser (the code for class ('IdentDict')). The display synchronization works both ways: when the user changes the page of source code displayed by Lector, the object selected in the Hy + browser adjusts correspondingly.
Reference: [30] <author> E. Reingold and J. Tilford. </author> <title> Tidier Drawings of Trees. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-7(2):223-228, </volume> <year> 1981. </year>
Reference-contexts: The algorithm computes a depth-first spanning forest F of the input graph, and places containers by following tree arcs with respect to F [1], and is similar to several approaches found in the literature <ref> [30, 36] </ref>. 5. nop: no layout. The positions of containers are not altered. This method can be used to provide a form of incremental layout capability. 6. overlap: overlap elimination.
Reference: [31] <author> A.G. Ryman. </author> <title> Foundations of 4Thought. </title> <editor> In J. Botsford, A.G. Ryman, J. Slonim, and D. Taylor, editors, </editor> <booktitle> Proceedings of the 1992 CAS Conference, </booktitle> <volume> Volume I, </volume> <pages> pages 133-155, </pages> <address> Toronto, Ontario, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: The graphite graph layout filter has also been used to generate 3-D graph layouts for a prototype graph browser incorporated into 4Thought <ref> [31] </ref>. Layout architecture 14 To provide more flexible and powerful drawing facilities, we designed every graphite layout algorithm with respect to a generic container model: a container may recursively contain (sub)containers; containers may optionally be linked by directed arcs. <p> More interestingly, when the system fails to satisfy a constraint, Hy + can be used to display the violation in a meaningful context so a person can decide whether the violation is harmful or not. Technology Transfer: The Use of GraphLog in 4Thought The 4Thought prototype <ref> [31] </ref> is a tool whose goal is to explore applications of database visualization technology to software engineering. <p> In 1989, we presented what was then called the G + /GraphLog system at a technical vitality seminar at the IBM Toronto Lab, hosted by Shahram Javey. Arthur Ryman, a lab member working on an advanced software-development environment called 4Thought <ref> [31] </ref>, saw the potential of GraphLog as a query and manipulation tool in such an environment, leading to a collaboration within one of the first projects of the fledgling CAS.
Reference: [32] <author> A.G. Ryman. </author> <title> Constructing software design theories and models. </title> <editor> In David Alex Lamb and Sandra Crocker, editors, </editor> <booktitle> Proc. of the Workshop on Studies of Software Design, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: The visual query language GraphLog is a suitable notation for expressing the type of software engineering queries that 4Thought needs to support. 21 4Thought was initially targeted at programming-in-the-large tasks such as architecture, design, and performance tuning <ref> [10, 32] </ref> in which the database being visualized contains structural information about the program. Here GraphLog is used as a visual query language to specify graphical views, such as call graphs and inheritance hierarchies, of the program database.
Reference: [33] <author> A.G. Ryman. </author> <title> Illuminating software specifications. </title> <editor> In Ann Gawman, editor, </editor> <booktitle> Proceedings of the 1993 CAS Conference. </booktitle> <institution> IBM Canada Centre for Advanced Studies, </institution> <month> October </month> <year> 1993. </year> <month> 35 </month>
Reference-contexts: We believe that GraphLog is a very intuitive way to define program views since software engineers are used to think graphically and commonly employ a wide variety of structural diagrams. Later, 4Thought was applied to programming-in-the-small tasks such as specification <ref> [33] </ref> in which the database being visualized contains the application data. Here GraphLog is used as a visual specification language to define the computation being performed by the application.
Reference: [34] <author> J. Slonim, M. Bauer, P. Finnigan, P. Larson, A. Mendelzon, R. McBride, T. Teorey, Y. Yemini, and S. Yemini. </author> <title> Towards a New Distributed Programming Environment (CORDS). </title> <booktitle> In Proceedings of the 1991 CAS Conference, </booktitle> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Soon afterwards, we started interacting with Jacob Slonim, by then the head of CAS, on the possibilities of using the G + /GraphLog approach for visualizing various aspects of distributed systems, and this led to the data visualization component of the CORDS project <ref> [34] </ref>.
Reference: [35] <author> D. Vista and P. Wood. </author> <title> Efficient Visual Queries for Deductive Databases. </title> <booktitle> In Proceedings of the Workshop on Programming with Logic Databases, </booktitle> <year> 1993. </year>
Reference-contexts: Additional rules may be necessary to define the predicates 8 of non-distinguished edges or blobs that are labeled by regular expressions. The generation of these additional rules is based on the structure of the regular expression. An alternative translation is described in <ref> [35] </ref>. A hygraph pattern in a filter query (which is enclosed in a showGraphLog box) may have several distinguished nodes, edges, and blobs.
Reference: [36] <author> C. Wetherell and A. Shannon. </author> <title> Tidy Drawings of Trees. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(5):514-520, </volume> <year> 1979. </year>
Reference-contexts: The algorithm computes a depth-first spanning forest F of the input graph, and places containers by following tree arcs with respect to F [1], and is similar to several approaches found in the literature <ref> [30, 36] </ref>. 5. nop: no layout. The positions of containers are not altered. This method can be used to provide a form of incremental layout capability. 6. overlap: overlap elimination.
Reference: [37] <author> A. Yeung. </author> <title> Text Searching in the Hy + Visualization System. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <month> October </month> <year> 1993. </year> <month> 36 </month>
Reference-contexts: Of course, this approach is in addition of the use of Hy + to generate as many specifically tailored overviews as needed. Figure 5 has an example of such an integration <ref> [37] </ref>. To the right of a specialized hygraph browser there is a Lector 3 [29] window that displays the source code associated with the object selected in the browser (the code for class ('IdentDict')).
References-found: 37

