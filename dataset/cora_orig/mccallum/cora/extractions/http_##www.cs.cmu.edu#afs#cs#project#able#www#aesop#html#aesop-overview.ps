URL: http://www.cs.cmu.edu/afs/cs/project/able/www/aesop/html/aesop-overview.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/able/www/aesop/aesop_home.html
Root-URL: 
Title: An Introduction to the Aesop System  
Author: David Garlan 
Date: 11 July 1995  
Note: Version of  
Address: Pittsburgh PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: As the design of software architectures emerges as a discipline within software engineering, it becomes increasingly important to support architectural description and analysis with tools and environments. This paper provides a brief introduction to Aesop, a set of tools for developing architectural design environments that exploit architectural styles to guide software architects in producing specific systems.
Abstract-found: 1
Intro-found: 1
Reference: [AAG93] <author> Gregory Abowd, Robert Allen, and David Garlan. </author> <title> Using style to understand descriptions of software architecture. </title> <booktitle> In Proceedings of SIGSOFT'93: Foundations of Software Engineering, Software Engineering Notes 18(5), </booktitle> <pages> pages 9-20. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: For other examples of current research in software architecture you might look at the IEEE Transactions on Software Engineering, Special Issue on Software Architecture April, 1995. Architectural Style: There have been several attempts to understand and explicate the nature of style. Several of these have been formal <ref> [AAG93, MQR95] </ref>. Others have examined the general nature of style [Gar95] and ways to represent it [DC95]. As mentioned earlier, the paper [GAO94] has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is [Tra94]. 9
Reference: [AG94] <author> Robert Allen and David Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Software Engineering, </booktitle> <pages> pages 71-80, </pages> <address> Sorrento, Italy, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Moreover, connectors always associate a roles with a port, while a binding associates a port with another port, or a role with another role. 6 its protocol <ref> [AG94] </ref>. That information is often best manipulated by external non-architectural tools, such as compilers and proof checkers, and stored in an external database (such as the file system). <p> Semantic interpretation. In the prototype pipe-filter the semantics of filters is given by a simple, style-specific filter language. The associated tool provides typechecking and other static analyses. The semantics of pipes is described formally (but off-line) as in <ref> [AG94] </ref>. Analyses. In addition to the static semantic checks just outlined, we incorporated a tool for generating code from filter descriptions. <p> An introductory book on software architecture will be appearing soon [SG95]. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures <ref> [SDK + 95, LAK + 95, AG94] </ref>. To get a feeling for what is going on in the area, the Proceedings of the First International Workshop on Software Architecture is now available.
Reference: [BV93] <author> Pam Binns and Steve Vestal. </author> <title> Formal real-time architecture specification and analysis. </title> <booktitle> In Tenth IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A familiar example is the standard organization of a compiler into lexer, parser, typer, optimizer, code generator [PW92]. Other reference architectures include communication reference models (such as the ISO OSI 7-layer model [McC91]), some user interface frameworks, and a large variety of domain-specific approaches in areas such as avionics <ref> [BV93] </ref> and mobile robotics [SLF90, HR90]. In terms of their role in architectural design, architectural styles typically determine four kinds of properties: 1. They provide a vocabulary of design elements|component and connector types such as pipes, filters, clients, servers, parsers, databases, etc. 2.
Reference: [DC95] <author> Thomas R. Dean and James R. Cordy. </author> <title> A syntactic theory of software architecture. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: Architectural Style: There have been several attempts to understand and explicate the nature of style. Several of these have been formal [AAG93, MQR95]. Others have examined the general nature of style [Gar95] and ways to represent it <ref> [DC95] </ref>. As mentioned earlier, the paper [GAO94] has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is [Tra94]. 9
Reference: [Fro89] <author> Brian Fromme. </author> <title> HP Encapsulator: Bridging the generation gap. </title> <type> Technical Report SESD-89-26, </type> <institution> Hewlett-Packard Software Engineering Systems Division, Fort Collins, Colorado, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: In other cases often with more mature styles tools and environments have been produced to ease the developer's task in conforming to a style and in getting the benefits of improved analysis and code reuse. To take two illustrative industrial examples, the HP Softbench Encapsulator <ref> [Fro89] </ref> helps developers build applications that conform to a particular Softbench event-based style. Applications are integrated into a system by "wrappping" them with an interface that permits them to interact with other tools via event broadcast.
Reference: [GAO94] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIGSOFT'94: The Second ACM SIGSOFT Symposium on the Foundations of Software Engineering. </booktitle> <publisher> ACM Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: It augments the simple Pipe-Filter Style with component types repre sented by Unix binaries and scripts. 6 How Can I Find Out More? About Aesop For an expanded version of this overview the paper <ref> [GAO94] </ref> contains a more in-depth discussion of the first version of the Aesop System. (Currently we are distributing the second version, and so a number of details have changed.) Aesop was developed as part of the ABLE Project, whose WWW home page is URL: http://www.cs.cmu.edu/Web/Groups/able/ On-line information on Aesop is also <p> Architectural Style: There have been several attempts to understand and explicate the nature of style. Several of these have been formal [AAG93, MQR95]. Others have examined the general nature of style [Gar95] and ways to represent it [DC95]. As mentioned earlier, the paper <ref> [GAO94] </ref> has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is [Tra94]. 9
Reference: [Gar95] <author> David Garlan. </author> <booktitle> What is style? In Proceedings of the First International Workshop on Architectures for Software Systems, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Architectural Style: There have been several attempts to understand and explicate the nature of style. Several of these have been formal [AAG93, MQR95]. Others have examined the general nature of style <ref> [Gar95] </ref> and ways to represent it [DC95]. As mentioned earlier, the paper [GAO94] has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is [Tra94]. 9
Reference: [GHJV94] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Architectural styles fall into three broad (overlapping) 2 categories. Organizational Structures This category includes global organizational structures, such as lay ered systems, pipe-filter systems, client-server organizations, blackboards, etc. Patterns: This category includes localized patterns, such as model-view-controller and many other object-oriented patterns <ref> [GHJV94] </ref>. Unlike organizational idioms, which provide a broader design vocabulary, most patterns tend to focus on a small portion of a system's structure, and provide specialized solutions to specific localizable problems.
Reference: [GP95] <author> David Garlan and Dewayne Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: we mean by architectural style, and outline how Aesop works. 2 What is Architectural Style? While there is currently no single well-accepted definition of software architecture it is generally recognized that an architectural design of a system is concerned with describing its gross decomposition into computational elements and their interactions <ref> [PW92, GS93, GP95] </ref>. Issues relevant to this level of design include organization of a system as a composition of components; global control structures; protocols for communication, synchronization, and data access; assignment of functionality to design elements; physical distribution; scaling and performance; dimensions of evolution; and selection among design alternatives.
Reference: [GS93] <author> David Garlan and Mary Shaw. </author> <title> An introduction to software architecture. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 1-39, </pages> <address> Singapore, </address> <year> 1993. </year> <title> World Scientific Publishing Company. </title> <note> Also appears as SCS and SEI technical reports: CMU-CS-94-166, CMU/SEI-94-TR-21, ESC-TR-94-021. </note>
Reference-contexts: we mean by architectural style, and outline how Aesop works. 2 What is Architectural Style? While there is currently no single well-accepted definition of software architecture it is generally recognized that an architectural design of a system is concerned with describing its gross decomposition into computational elements and their interactions <ref> [PW92, GS93, GP95] </ref>. Issues relevant to this level of design include organization of a system as a composition of components; global control structures; protocols for communication, synchronization, and data access; assignment of functionality to design elements; physical distribution; scaling and performance; dimensions of evolution; and selection among design alternatives. <p> There is a growing body of literature on each of these topics. As a starting point: Software Architecture: Two good introductions to software architecture and some common architectural styles are <ref> [GS93] </ref> and [PW92]. An introductory book on software architecture will be appearing soon [SG95]. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures [SDK + 95, LAK + 95, AG94].
Reference: [HR90] <author> Barbara Hayes-Roth. </author> <title> Architectural foundations for real-time performance in intelligent agents. The Journal of Real-Time Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <pages> 2 99-125, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Other reference architectures include communication reference models (such as the ISO OSI 7-layer model [McC91]), some user interface frameworks, and a large variety of domain-specific approaches in areas such as avionics [BV93] and mobile robotics <ref> [SLF90, HR90] </ref>. In terms of their role in architectural design, architectural styles typically determine four kinds of properties: 1. They provide a vocabulary of design elements|component and connector types such as pipes, filters, clients, servers, parsers, databases, etc. 2.
Reference: [JC94] <author> G.R. Ribeiro Justo and P.R. Freire Cunha. </author> <title> Deadlock-free configuration programming. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: They define analyses that can be performed on systems built in that style. Examples include schedulability analysis for a style oriented toward real-time processing [Ves94] and deadlock detection for client-server message passing <ref> [JC94] </ref>. A specific, but important, special case of analysis is code generation: many styles support application generation (e.g., parser generators), or enable the reuse of code for certain shared facilities (e.g., user interface frameworks and support for communication between distributed processes).
Reference: [Jef93] <author> Kevin Jeffay. </author> <title> The real-time producer/consumer paradigm: A paradigm for the construction of efficient, predictable real-time systems. </title> <booktitle> In Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 796-804, </pages> <address> Indianapolis, </address> <note> IN, February 1993. ACM Press. 10 </note>
Reference-contexts: We created an Aesop environment for an architectural style, developed at the University of North Carolina, that supports the design of such systems <ref> [Jef93] </ref>. Underlying the architectural style is a body of theory for analyzing real-time systems. This theory allows one to determine the (scheduling) feasibility of a system from the processing rates of its component tasks, rates of inputs from external devices, and shared resource loads.
Reference: [LAK + 95] <author> David C Luckham, Lary M. Augustin, John J. Kenney, James Veera, Doug Bryan, and Walter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: An introductory book on software architecture will be appearing soon [SG95]. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures <ref> [SDK + 95, LAK + 95, AG94] </ref>. To get a feeling for what is going on in the area, the Proceedings of the First International Workshop on Software Architecture is now available.
Reference: [McC91] <author> Gary R. McClain, </author> <title> editor. Open Systems Interconnection Handbook. </title> <publisher> Intertext Publications McGraw-Hill Book Company, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: A familiar example is the standard organization of a compiler into lexer, parser, typer, optimizer, code generator [PW92]. Other reference architectures include communication reference models (such as the ISO OSI 7-layer model <ref> [McC91] </ref>), some user interface frameworks, and a large variety of domain-specific approaches in areas such as avionics [BV93] and mobile robotics [SLF90, HR90]. In terms of their role in architectural design, architectural styles typically determine four kinds of properties: 1.
Reference: [MQR95] <author> M. Moriconi, X. Qian, and R. Riemenschneider. </author> <title> Correct architecture refinement. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 356-372, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: For other examples of current research in software architecture you might look at the IEEE Transactions on Software Engineering, Special Issue on Software Architecture April, 1995. Architectural Style: There have been several attempts to understand and explicate the nature of style. Several of these have been formal <ref> [AAG93, MQR95] </ref>. Others have examined the general nature of style [Gar95] and ways to represent it [DC95]. As mentioned earlier, the paper [GAO94] has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is [Tra94]. 9
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The user interface to an Aesop environment is centered around a graphical editor and database browser provided by the Aesop system. This tool can be customized to provide style-specific 5 displays and views. The current graphical editor is based on Tcl/Tk <ref> [Ous94] </ref>. While this editor is provided as a default, it is important to note that it runs as a separate tool, and could be replaced or augmented with other interface tools.
Reference: [PW92] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: we mean by architectural style, and outline how Aesop works. 2 What is Architectural Style? While there is currently no single well-accepted definition of software architecture it is generally recognized that an architectural design of a system is concerned with describing its gross decomposition into computational elements and their interactions <ref> [PW92, GS93, GP95] </ref>. Issues relevant to this level of design include organization of a system as a composition of components; global control structures; protocols for communication, synchronization, and data access; assignment of functionality to design elements; physical distribution; scaling and performance; dimensions of evolution; and selection among design alternatives. <p> Reference models: This category includes system organizations that prescribe specific (often parameterized) configurations of components and interactions for specific application areas. A familiar example is the standard organization of a compiler into lexer, parser, typer, optimizer, code generator <ref> [PW92] </ref>. Other reference architectures include communication reference models (such as the ISO OSI 7-layer model [McC91]), some user interface frameworks, and a large variety of domain-specific approaches in areas such as avionics [BV93] and mobile robotics [SLF90, HR90]. <p> There is a growing body of literature on each of these topics. As a starting point: Software Architecture: Two good introductions to software architecture and some common architectural styles are [GS93] and <ref> [PW92] </ref>. An introductory book on software architecture will be appearing soon [SG95]. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures [SDK + 95, LAK + 95, AG94].
Reference: [SDK + 95] <author> Mary Shaw, Robert DeLine, Daniel V. Klein, Theodore L. Ross, David M. Young, and Gregory Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Software Architecture, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: An introductory book on software architecture will be appearing soon [SG95]. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures <ref> [SDK + 95, LAK + 95, AG94] </ref>. To get a feeling for what is going on in the area, the Proceedings of the First International Workshop on Software Architecture is now available.
Reference: [SG95] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: There is a growing body of literature on each of these topics. As a starting point: Software Architecture: Two good introductions to software architecture and some common architectural styles are [GS93] and [PW92]. An introductory book on software architecture will be appearing soon <ref> [SG95] </ref>. A number of architectural description languages have been proposed; each of these elaborates a view of what it means to define software architectures [SDK + 95, LAK + 95, AG94].
Reference: [SLF90] <author> Reid Simmons, Long-Ji Lin, and Christopher Fedor. </author> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the 5th IEEE International Symposium on Intelligent Control, </booktitle> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Other reference architectures include communication reference models (such as the ISO OSI 7-layer model [McC91]), some user interface frameworks, and a large variety of domain-specific approaches in areas such as avionics [BV93] and mobile robotics <ref> [SLF90, HR90] </ref>. In terms of their role in architectural design, architectural styles typically determine four kinds of properties: 1. They provide a vocabulary of design elements|component and connector types such as pipes, filters, clients, servers, parsers, databases, etc. 2.
Reference: [Tra94] <author> Will Tracz. </author> <title> Collected overview reports from the DSSA project. </title> <institution> Loral Federal Systems Owego, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Others have examined the general nature of style [Gar95] and ways to represent it [DC95]. As mentioned earlier, the paper [GAO94] has more details on Aesop itself. A number of "domain-specific" style have been investigated. One rich source of material on this topic is <ref> [Tra94] </ref>. 9
Reference: [Ves94] <author> Steve Vestal. </author> <title> Mode changes in real-time architecture description language. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: They define a semantic interpretation, whereby compositions of design elements, suitably constrained by the configuration rules, have well-defined meanings. 4. They define analyses that can be performed on systems built in that style. Examples include schedulability analysis for a style oriented toward real-time processing <ref> [Ves94] </ref> and deadlock detection for client-server message passing [JC94]. A specific, but important, special case of analysis is code generation: many styles support application generation (e.g., parser generators), or enable the reuse of code for certain shared facilities (e.g., user interface frameworks and support for communication between distributed processes). <p> Applications are integrated into a system by "wrappping" them with an interface that permits them to interact with other tools via event broadcast. Similarly, the Honeywell MetaH language and supporting development tools provide an architectural description language for real-time, embedded avionics applications <ref> [Ves94] </ref>. The tools check a system description for schedulability and other properties and generate the "glue" code that handles real-time process dispatching, communication, and resource synchronization.
References-found: 23

