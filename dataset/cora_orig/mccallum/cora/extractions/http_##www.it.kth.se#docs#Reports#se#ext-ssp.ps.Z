URL: http://www.it.kth.se/docs/Reports/se/ext-ssp.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/se/
Root-URL: http://www.it.kth.se
Email: email tarmo@it.kth.se  
Title: Extensions of Structural Synthesis of Programs  
Author: Tarmo Uustalu 
Address: Electrum 204, S-164 40 Kista (Stockholm), Sweden  
Affiliation: Dept of Teleinformatics, The Royal Institute of Technology  
Abstract: Structural synthesis of programs (SSP) is an approach to deductive synthesis of functional programs using types as specifications and based on the Curry-Howard correspondence and on an intensional treatment of the notion of type. The implemented programming environments employing SSP have been based on a fragment of intuitionistic propositional logic (simple type theory) and on a natural-deduction proof system. In the paper, we indicate that the proof search strategy used in these systems is applicable to a variety of natural-deduction proof systems (not necessarily of intuitionistic or propositional logics), and that the object-oriented user front-end specification language of the NUT programming environment can, in fact, be given a useful logical semantics in terms of intuitionistic first-order logic. 
Abstract-found: 1
Intro-found: 1
Reference: [How80] <author> W. A. Howard. </author> <title> The formula-as-types of construction. </title> <editor> In J. P. Seldin and J. R. Hindley, editors, To H. B. </editor> <booktitle> Curry: Essays on Combina-tory Logic, Lambda Calculus, and Formalism, </booktitle> <pages> pages 479-490. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1980. </year>
Reference-contexts: In Section 5, we formulate our conclusions. 2 Structural Synthesis of Programs As we stated already, structural synthesis of programs is an approach to deductive synthesis of functional programs where types are used as specifications. It is based on the Curry-Howard correspondence <ref> [How80] </ref> and on an intensional treatment of types as descriptors of the conceptual roles of values in computations.
Reference: [Lif89] <author> Vladimir Lifshitz. </author> <title> What is the inverse method? Journal of Automated Reasoning, </title> <booktitle> 5(1) </booktitle> <pages> 1-23, </pages> <year> 1989. </year>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) [Mas64] (for an accessible exposition, see <ref> [Lif89] </ref>), Mints (general resolution) [Min90a, Min90b, Min93], Stalmarck (the assure-method) [Sta90].
Reference: [Mas64] <author> S. Yu. Maslov. </author> <title> The inverse method for establishing deducibility in classical predicate calculus. </title> <journal> Soviet Math. Doklady, </journal> <volume> 5 </volume> <pages> 1420-1423, </pages> <year> 1964. </year>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) <ref> [Mas64] </ref> (for an accessible exposition, see [Lif89]), Mints (general resolution) [Min90a, Min90b, Min93], Stalmarck (the assure-method) [Sta90].
Reference: [Min90a] <author> Grigory Mints. </author> <title> Gentzen-type systems and resolution rule, Part I: Propositional logic. </title> <editor> In P. Martin-Lof and G. Mints, editors, </editor> <booktitle> Proc. Int'l Conf. on Computer Logic, COLOG-88, </booktitle> <address> Tallinn, </address> <month> Dec </month> <year> 1988, </year> <pages> pages 198-231, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. LNCS 417. </publisher>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) [Mas64] (for an accessible exposition, see [Lif89]), Mints (general resolution) <ref> [Min90a, Min90b, Min93] </ref>, Stalmarck (the assure-method) [Sta90].
Reference: [Min90b] <author> Grigory Mints. </author> <title> Gentzen-type systems and resolution rule, Part II: Predicate logic. </title> <booktitle> In Logic Colloquium '90, </booktitle> <year> 1990. </year>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) [Mas64] (for an accessible exposition, see [Lif89]), Mints (general resolution) <ref> [Min90a, Min90b, Min93] </ref>, Stalmarck (the assure-method) [Sta90].
Reference: [Min93] <author> Grigory Mints. </author> <title> Resolution calculus for the first order linear logic. </title> <journal> Journal of Logic, Language, and Information, </journal> <volume> 2(1) </volume> <pages> 59-83, </pages> <year> 1993. </year>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) [Mas64] (for an accessible exposition, see [Lif89]), Mints (general resolution) <ref> [Min90a, Min90b, Min93] </ref>, Stalmarck (the assure-method) [Sta90].
Reference: [MST91] <author> Grigory Mints, Jan M. Smith, and Enn Tyugu. </author> <title> Type-theoretic semantics of some declarative languages. </title> <editor> In J. Barzdin . s and D. Bjorner, 12 editors, </editor> <booktitle> Baltic Computer Science: Selected Papers, </booktitle> <pages> pages 18-32, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. LNCS 502. </publisher>
Reference-contexts: A similarly-formulated semantics of the Priz system (where differently from NUT, there are no classes; instead of instantiation from classes, cloning from objects is used) can be found in <ref> [MST91] </ref>. 10 Translation into predicate logic In the predicate logic semantics, we represent objects and deep component names by means of terms, and classes by means of binary predicates.
Reference: [MT82] <author> Grigory Mints and Enn Tyugu. </author> <title> Justification of the structural synthesis of programs. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 2(3) </volume> <pages> 215-240, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Structural synthesis of programs (SSP) as proposed and described by Mints and Tyugu <ref> [MT82] </ref> is an approach to deductive synthesis of functional programs using types as specifications and based on the Curry-Howard correspondence and on an intensional treatment of types as descriptors of the conceptual roles of values in computations. <p> It is based on the Curry-Howard correspondence [How80] and on an intensional treatment of types as descriptors of the conceptual roles of values in computations. The idea was proposed in the beginning of 1980s by Mints and Tyugu <ref> [MT82, MT90] </ref>, and has since then been tried out, in combination with other ideas, in a family of programming environments (Priz, ExpertPriz, CPriz, NUT) [MT88, Tyu91, Tyu94].
Reference: [MT88] <author> Grigory Mints and Enn Tyugu. </author> <title> The programming system PRIZ. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5(4) </volume> <pages> 359-375, </pages> <year> 1988. </year>
Reference-contexts: The idea was proposed in the beginning of 1980s by Mints and Tyugu [MT82, MT90], and has since then been tried out, in combination with other ideas, in a family of programming environments (Priz, ExpertPriz, CPriz, NUT) <ref> [MT88, Tyu91, Tyu94] </ref>. Since the theoretical justification of the technique, together with descriptions of the concrete programming systems and examples of applications can be found in the cited sources, we will only mention some essentials. 2 Structural synthesis was intended as a software engineering technique, for applica-tion in programming-in-the-large.
Reference: [MT90] <author> Grigory Mints and Enn Tyugu. </author> <title> Propositional logic programming and the PRIZ system. </title> <journal> Journal of Logic Programming, </journal> <volume> 9(2-3):179-193, </volume> <year> 1990. </year>
Reference-contexts: It is based on the Curry-Howard correspondence [How80] and on an intensional treatment of types as descriptors of the conceptual roles of values in computations. The idea was proposed in the beginning of 1980s by Mints and Tyugu <ref> [MT82, MT90] </ref>, and has since then been tried out, in combination with other ideas, in a family of programming environments (Priz, ExpertPriz, CPriz, NUT) [MT88, Tyu91, Tyu94].
Reference: [NPS90] <author> Bengt Nordstrom, Kent Petersson, and Jan M. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: In programming with types, the value extracted is a realization of the goal formula (semantically speaking, a witness of non-emptiness of a type). Quite obviously, the work on structural synthesis is related to work on programming in type theories as advocated in e.g. <ref> [NPS90] </ref>. The difference lies in the emphases. In programming in type theories, the main interests are verification of programs against specifications, and transformational development of specifications into programs. The type languages used are of a very rich expressive power.
Reference: [Pra65] <author> Dag Prawitz. </author> <title> Natural Deduction: A Proof-Theoretic Study. </title> <publisher> Almqvist & Wiksell, </publisher> <address> Stockholm, </address> <year> 1965. </year> <booktitle> Stockholm Studies in Philosophy 3. </booktitle>
Reference-contexts: We shall present the strategy and the theoretic results about it on the example 3 of two proof systems: the "canonical" natural-deduction calculus for intuition--istic propositional logic, formulated by Gentzen and Prawitz <ref> [Pra65] </ref>, and the Dilemma-system (a natural-deduction-inspired proof system for classical propositional logic), formulated by Stalmarck [Sta90]. SSP is an example of an application of the proof search strategy to the first proof system.
Reference: [Sta90] <author> Gunnar Stalmarck. </author> <title> The Assure method: A proof procedure for propositional logic. </title> <type> Technical Report 1, </type> <address> Logikkonsult NP AB, Stockholm, </address> <year> 1990. </year>
Reference-contexts: The proof search technique employed in SSP has been described in different formulations by a number of authors: Maslov (the inverse method) [Mas64] (for an accessible exposition, see [Lif89]), Mints (general resolution) [Min90a, Min90b, Min93], Stalmarck (the assure-method) <ref> [Sta90] </ref>. <p> We shall present the strategy and the theoretic results about it on the example 3 of two proof systems: the "canonical" natural-deduction calculus for intuition--istic propositional logic, formulated by Gentzen and Prawitz [Pra65], and the Dilemma-system (a natural-deduction-inspired proof system for classical propositional logic), formulated by Stalmarck <ref> [Sta90] </ref>. SSP is an example of an application of the proof search strategy to the first proof system.
Reference: [Tse68] <author> G. S. Tseytin. </author> <title> On the complexity of propositional calculus. </title> <journal> Zapiski Nauchnykh Seminarov LOMI, </journal> <volume> 8 </volume> <pages> 235-259, </pages> <year> 1968. </year> <note> In Russian. </note>
Reference-contexts: not yet been tried with the given antecedent, but whose premisses have been generated al ready; * atomic names are invented for the subformulae of the goal formulae; instead of working with subformulae directly, one works with their names (to my knowledge, this idea was first put forward by Tseitin <ref> [Tse68] </ref>); Two important results can be stated about the proof search strategy: * it is complete, i.e. if a goal sequent is provable, then the search procedure finds a proof for it; * the time-complexity of finding a proof of an i-easy goal sequent is O (NL i ) where 7
Reference: [Tyu91] <author> Enn Tyugu. </author> <title> Three new-generation software environments. </title> <journal> Communications of the ACM, </journal> <volume> 34(6) </volume> <pages> 46-59, </pages> <year> 1991. </year>
Reference-contexts: The idea was proposed in the beginning of 1980s by Mints and Tyugu [MT82, MT90], and has since then been tried out, in combination with other ideas, in a family of programming environments (Priz, ExpertPriz, CPriz, NUT) <ref> [MT88, Tyu91, Tyu94] </ref>. Since the theoretical justification of the technique, together with descriptions of the concrete programming systems and examples of applications can be found in the cited sources, we will only mention some essentials. 2 Structural synthesis was intended as a software engineering technique, for applica-tion in programming-in-the-large.
Reference: [Tyu94] <author> Enn Tyugu. </author> <title> Using classes as specifications for automatic construction of programs in the NUT system. </title> <journal> J. Automated Software Engineering, </journal> <volume> 1(3-4):315-334, </volume> <year> 1994. </year>
Reference-contexts: The idea was proposed in the beginning of 1980s by Mints and Tyugu [MT82, MT90], and has since then been tried out, in combination with other ideas, in a family of programming environments (Priz, ExpertPriz, CPriz, NUT) <ref> [MT88, Tyu91, Tyu94] </ref>. Since the theoretical justification of the technique, together with descriptions of the concrete programming systems and examples of applications can be found in the cited sources, we will only mention some essentials. 2 Structural synthesis was intended as a software engineering technique, for applica-tion in programming-in-the-large.
References-found: 16

