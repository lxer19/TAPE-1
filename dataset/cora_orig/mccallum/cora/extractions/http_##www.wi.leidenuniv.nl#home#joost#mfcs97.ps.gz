URL: http://www.wi.leidenuniv.nl/home/joost/mfcs97.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: marcello@cs.leidenuniv.nl and joost@cs.leidenuniv.nl  
Title: Specifying computations using hyper transition systems  
Author: Marcello M. Bonsangue and Joost N. Kok 
Date: June 3, 1997  
Address: P.O. Box 9512, 2300 RA Leiden, The Netherlands  
Affiliation: Department of Computer Science, Rijks Universiteit Leiden  
Abstract: We study hyper transition systems as a formalism to give semantics to specification languages like the specification language of Back's refinement calculus. These languages support both unbounded angelic and unbounded demonic non-determinism as well as recursion. Hyper transition systems are suited for the specification of computations by means of properties that atomic steps in a computation have to satisfy. Hyper transition are a generalization of transition systems in the sense that they relate configurations to sets of configurations. They are a natural formalism to describe the two kinds of non-determism in a single framework: the angelic non-determinism `inside' the transition, and the demonic non-determism as a choice between different transitions. We relate hyper transition systems to the standard transition systems. We define a way to collect information from hyper transitions by a kind of transitive closure on the hyper transition relation. As an application we present a hyper transition system for a small specification language. The hyper transition system is used to give an operational semantics to the language. We give a fixed point equation of which the operational semantics is the least fixed point, and we show that the operational semantics is compositional and that it is equivalent to the standard weakest precondition semantics. Hyper transition systems can also be interpreted as a game between two parties. We describe briefly this interpretation and, for the game induced by our specification language, relate it to standard weakest precondition semantics. Then we discuss how to extend specification languages with a form of concurrency. We give hyper transition rules for an interleaving operator, and generalize the notion of simulation to hyper transition systems.
Abstract-found: 1
Intro-found: 1
Reference: [Bac80] <author> Back, R.-J.R.: </author> <title> Correctness Preserving Program Refinements: Proof Theory and Applications, volume 131 of Mathematical Centre Tracts. </title> <publisher> Mathematical Centre, </publisher> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: As an application we present a hyper transition system and associated operational semantics for the specification language of the refinement calculus. From this operational semantics we derive a weakest precondition semantics which 1 coincides with the ordinary semantics of the refinement calculus <ref> [Bac80] </ref>. Working with a hyper transition system has the advantage that we can follow the computation step-by-step. Hence it is possible to introduce interleaving operators in the specification languages, and define a notion of simulation needed for a compositional semantical treatment of the interleaving operator. <p> sections we will show that this allows for a compositional specification of a computation in terms of the properties that the atomic steps of the computation have to satisfy. 3 Operational semantics for a specification language We now consider a language L with the specification constructs of the refinement calculus <ref> [Bac80] </ref>. The language has two conditionals `B!' and `fB g', a state transformer command `hf i', sequential composition `;', angelic choice ` W I ', demonic choice ` V I ', and recursion through procedure variables. <p> These axioms shows that our weakest precondition semantics of L induced by the operational semantics Op [[]] coincides with the ordinary lattice theoretical interpretation of the refinement calculus <ref> [Bac80] </ref>. 3.10. Theorem.
Reference: [Bon96] <author> Bonsangue, </author> <title> M.M.: Topological Dualities in Semantics. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit Amsterdam, </institution> <year> 1996. </year>
Reference-contexts: Since the language L is a proper class rather than a set, environments have to be used to store the partial results of recursive procedure. For more details see Chapter 4 of <ref> [Bon96] </ref>. 4 A game-theoretical interpretation We now briefly develop an alternative interpretation of a hyper transition system based on a game between two players, one called angel and another called demon.
Reference: [BW90] <author> Back, R.-J.R., von Wright, J.: </author> <title> Dualities in specification languages: a lattice theoretical approach. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 583-625, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction In this paper we study operational semantics for specification languages based on hyper transition systems. With specification languages we mean languages that include specification constructs like angelic choice or unbounded non-determinism. Such specification languages are useful as a starting point for program refinement <ref> [BW90] </ref>: In a typical program development by refinement, one starts from a program in a specification language and develops in correctness-preserving steps a program that is efficiently executable on a target architecture. One of the well-known specification languages is the language of the refinement calculus [BW96]. <p> Our notion of game is inspired by the game interpretation of the refinement calculus put forward by Back and Von Wright <ref> [BW90] </ref> and formally developed in [Hes94] and [BW96]. A hyper transition system hX ; 2 i defines the possible configurations of the game by means of the set X , and the possible moves of the game by means of the relation 2 .
Reference: [BW96] <author> Back, R.-J.R., von Wright, J.: </author> <title> Refinement Calculus: a Systematic Introduction. </title> <note> Preliminary version of a book submitted for publication, </note> <year> 1996. </year>
Reference-contexts: One of the well-known specification languages is the language of the refinement calculus <ref> [BW96] </ref>. For this language several semantic models based on input/output relations have been proposed, including a weakest precondition semantic and game-theoretic semantics based on a transition system. We use hyper transition systems because they provide a natural way to define operational semantics with both angelic and demonic non-determinism. <p> Next we discuss the main differences of our approach with other semantic models for the refinement calculus. Our operational interpretation differs in the following aspects from the game semantics of Back and Von Wright <ref> [BW96] </ref> and the game semantics of Hesselink [Hes94]. Back and Von Wright define a game interpretation of the commands of the refinement calculus using a standard transition system. A transition step corresponds to a move in the game. <p> However, both the hyper transition system induced by the refinement calculus and the way of collecting the information from it are different from our operational approach. Also, our game interpretation of the refinement calculus differs from both the game semantics of Back and Von Wright <ref> [BW96] </ref> and the game semantics of Hesselink [Hes94]. The main difference is that our games are not symmetric (and therefore we do not have to take sides): the angel always makes the first move. The goal of the angel is different from the goal of the demon. <p> Our notion of game is inspired by the game interpretation of the refinement calculus put forward by Back and Von Wright [BW90] and formally developed in [Hes94] and <ref> [BW96] </ref>. A hyper transition system hX ; 2 i defines the possible configurations of the game by means of the set X , and the possible moves of the game by means of the relation 2 . The game starts in a given configuration x 2 X .
Reference: [Hes94] <author> Hesselink, </author> <title> W.H.: Nondeterminacy and recursion via stacks and games. </title> <journal> Theoretical Computer Science, </journal> <volume> 124(2) </volume> <pages> 273-295, </pages> <year> 1994. </year>
Reference-contexts: Next we discuss the main differences of our approach with other semantic models for the refinement calculus. Our operational interpretation differs in the following aspects from the game semantics of Back and Von Wright [BW96] and the game semantics of Hesselink <ref> [Hes94] </ref>. Back and Von Wright define a game interpretation of the commands of the refinement calculus using a standard transition system. A transition step corresponds to a move in the game. <p> Also, our game interpretation of the refinement calculus differs from both the game semantics of Back and Von Wright [BW96] and the game semantics of Hesselink <ref> [Hes94] </ref>. The main difference is that our games are not symmetric (and therefore we do not have to take sides): the angel always makes the first move. The goal of the angel is different from the goal of the demon. <p> Our notion of game is inspired by the game interpretation of the refinement calculus put forward by Back and Von Wright [BW90] and formally developed in <ref> [Hes94] </ref> and [BW96]. A hyper transition system hX ; 2 i defines the possible configurations of the game by means of the set X , and the possible moves of the game by means of the relation 2 . The game starts in a given configuration x 2 X .
Reference: [Mil80] <author> Milner, R.: </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: This relation is a generalization of a simulation relation between ordinary transition systems which take in account also deadlock configurations and undefined transitions. By considering a symmetric version of it one obtains the ordinary notion of bisimulation <ref> [Mil80, Par81] </ref> which can be similarly generalized to hyper transition systems.
Reference: [MRS95] <author> Mislove, M.W., Roscoe, A.W., Schneider, S.A.: </author> <title> Fixed points without completeness. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 273-314, </pages> <year> 1995. </year>
Reference-contexts: For more details on this kind of arguments, see <ref> [MRS95] </ref>. We give the semantics of the language L by means of an hyper transition system. A semantics based on ordinary transition system can be derived by considering the transition system induced by the hyper transition system below.
Reference: [Nil82] <author> Nilsson, </author> <title> N.J.: </title> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: To specify set of computations by means of the properties that their atomic steps have to satisfy, hyper transition system can be used. Hyper transition systems occur under the name of AND/OR graphs or hyper-graphs in logic programming and artificial intelligence <ref> [Nil82] </ref>. 2.2. Definition.
Reference: [Par81] <author> Park, D.M.R.: </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> Proceedings of the 5th GI Conference, volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: This relation is a generalization of a simulation relation between ordinary transition systems which take in account also deadlock configurations and undefined transitions. By considering a symmetric version of it one obtains the ordinary notion of bisimulation <ref> [Mil80, Par81] </ref> which can be similarly generalized to hyper transition systems.
Reference: [Plo81] <author> Plotkin, G.D.: </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year> <month> 10 </month>
Reference-contexts: Michael Mislove and Wim Hesselink for their suggestions to improve this paper, and to Ralph Back for various discussions on the subject of this paper. 2 Transition systems and hyper transition systems Transition systems are a useful mathematical structure to describe the atomic steps of a computation of a program <ref> [Plo81] </ref>. 2.1. Definition. A transition system with deadlock is a tuple hX ; ffi; !i where X is the set of all proper configurations for a program, ffi 62 X denotes a deadlock configuration, and ! (X fi X ) [ (X fi fffig) is a transition relation.
References-found: 10

