URL: http://ptolemy.eecs.berkeley.edu/papers/PganRpmcDppo/erl-95-43.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/~murthy/pub.html
Root-URL: 
Title: Renesting Single Appearance Schedules to Minimize Buffer Memory  
Author: Shuvra S. Bhattacharyya, Praveen K. Murthy, and Edward A. Lee P. K. Murthy and E. A. Lee 
Address: East Tasman Drive, San Jose, California 95134, USA.  Berkeley, California 94720, USA.  
Affiliation: Semiconductor Research Laboratory, Hitachi America, Ltd., 201  Dept. of Electrical Engineering and Computer Sciences, University of California at  
Note: S. S. Bhattacharyya is with the  are with the  
Date: April 1, 1995  
Abstract: A portion of this research was undertaken as part of the Ptolemy project, which is supported by the Advanced Research Projects Agency and the U. S. Air Force (under the RASSP program, contract F33615-93-C-1317), Semiconductor Research Corporation (project 94-DC-008), National Science Foundation (MIP-9201605), Office of Naval Technology (via Naval Research Laboratories), the State of Cali-fornia MICRO program, and the following companies: Bell Northern Research, Dolby, Hitachi, Mentor Graphics, Mitsubishi, NEC, Pacific Bell, Philips, Rockwell, Sony, and Synopsys. ABSTRACT Minimizing memory requirements for program and data are critical objectives when synthesizing software for embedded DSP applications. In prior work, it has been demonstrated that for graphical DSP programs based on the widely-used synchronous dataow model, an important class of minimum code size implementations can be viewed as parenthesizations of lexical order-ings of the computational blocks. Such a parenthesization corresponds to the hierarchy of loops in the software implementation. In this paper, we present a dynamic programming technique for constructing a parenthesization that minimizes data memory cost from a given lexical ordering of a synchronous dataow graph. For graphs that do not contain delays on the edges, this technique always constructs a parenthesization that has minimum data memory cost from among all paren-thesizations for the given lexical ordering. When delays are present, the technique may make refinements to the lexical ordering while it is computing the parenthesization, and the data memory cost of the result is guaranteed to be less than or equal to the data memory cost of all valid parenthesizations for the initial (input) lexical ordering. Thus, our dynamic programming technique can be used to post-optimize the output for any algorithm that schedules SDF graphs into minimum code size loop hierarchies. On several practical examples, we demonstrate that significant improvement can be gained by such post-optimization when applied to two scheduling techniques that have been developed earlier. That is, the result of each scheduling algorithm combined with the post-optimization often requires significantly less data memory than the result of the scheduling algorithm without post-optimization. We also present an adaptation of our dynamic programming technique for post-optimizing an arbitrary (not necessarily minimum code size) schedule to optimally reduce the code size. UCB/ERL Technical Report, Memorandum No. UCB/ERL M95/43, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, CA 94720 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Benveniste and G. Berry, </author> <title> The Synchronous Approach to Reactive and Real-Time Systems, </title> <booktitle> Proceedings of the IEEE, </booktitle> <month> September, </month> <year> 1991. </year>
Reference-contexts: We represent these minimum numbers of firings by a vector , indexed by 1. This should not be confused with the use of synchronous in synchronous languages <ref> [1] </ref>. A B C D e e ( )src e ( )snk e ( )delay e ( )prod e ( )cons e ( )src e ( )snk 3 the actors in . We refer to as the repetitions vector of .
Reference: [2] <author> S. S. Bhattacharyya, P. K. Murthy, and E. A. Lee, </author> <title> Two Complementary Heuristics for Translating Graphical DSP Programs into Minimum Memory Implementations, </title> <note> Memorandum No. </note> <institution> UCB/ERL M95/3, Electronics Research Laboratory, University of California at Berkeley, Janu-ary, </institution> <year> 1995, </year> <note> WWW URL: http://ptolemy.eecs.berkeley.edu/papers/PganRpmcDppo. </note>
Reference-contexts: Since the introduction of the basic version of DPPO in [12], we have also developed and implemented two heuristics, called APGAN and RPMC, for efficiently constructing single appearance schedules that have low buffer memory requirement <ref> [2, 11] </ref> for acyclic graphs. In this paper, we present experimental results that demonstrate the ability of GDPPO to significantly improve the schedules constructed by APGAN and RPMC for practical SDF systems. <p> In contrast, we have found that the minimum achievable buffer memory requirement over all (not necessarily at) single appearance schedules is 1542 for this example, and this minimum value is achieved by the APGAN heuristic, which is discussed in <ref> [2] </ref>. When there is enough memory to accommodate the minimum context-switch schedules of [17], it is possible that these schedules will result in somewhat higher throughput than the schedules discussed in this paper, although the difference in context-switch overhead can often be significantly mitigated by the techniques described in [15]. <p> Dynamic Programming Post Optimization Suppose that is a connected, delayless, acyclic SDF graph, is valid single appearance schedule for , , and is an order-optimal schedule for . If contains at least two actors, then it can be shown <ref> [2] </ref> that there exists a valid schedule of the form such that and for some , and . Furthermore, from the order-optimality of , clearly, and must also be order-optimal. <p> To compute the minimum buffer memory requirement associated with an -actor subchain , we determine a value of that minimizes , (2) where for all and , the memory cost at the split if we split the subsequence between and is given by <ref> [2] </ref> 1 , (3) where (4) is the set of edges that cross the split. 3. Extension to Arbitrary Topologies DPPO can be extended to efficiently handle graphs that are not necessarily delayless, although a few additional considerations arise. We refer to our extension as Generalized DPPO (GDPPO). <p> In the absence of such a bound, GDPPO has time complexity that is , where is the number of edges in the input graph. 4. Experimental Results In <ref> [2] </ref>, two heuristics, called APGAN and RPMC, are described for constructing single appearance schedules that minimize the buffer memory requirement. APGAN is a bottom-up clustering technique that has been found to perform well for graphs that have regular topological structures and sample-rate changes. <p> Thus, APGAN and RPMC are complementary, when one of the techniques fails to construct a good schedule, the other can be expected to be find one <ref> [2] </ref>. Fig. 4 shows a screendump from the Ptolemy prototyping environment [5] that contains an SDF description of a four channel, nonuniform filter bank. The single appearance schedule obtained by APGAN on this system is , and the resulting buffer memory requirement is . <p> The columns labeled % Impr. show the percentage of buffer memory reduction obtained by GDPPO. The QMF tree filter banks fall into a class of graphs for which APGAN is guaranteed to produce optimal results <ref> [2] </ref>, and thus there is no room for GDPPO to produce improvement when APGAN is applied to these two examples. Overall, we see that GDPPO produces an improvement in 11 out of the 14 heuristic/application combinations.
Reference: [3] <author> S. S. Bhattacharyya, J. T. Buck, S. Ha, and E. A. Lee, </author> <title> A Scheduling Framework for Minimizing Memory Requirements of Multirate DSP Systems Represented as Dataow Graphs, VLSI Signal Processing VI, </title> <journal> IEEE Special Publications, </journal> <year> 1993. </year>
Reference-contexts: To a good first approximation, any valid single appearance schedule gives the minimum code size cost for in-line code generation. This approximation neglects second order affects such as loop overhead and the efficiency of data transfers between actors. Systematic synthesis of single appearance schedules is described in <ref> [3] </ref>. Given an SDF graph , a valid schedule , and an edge in , denotes the maximum number of tokens that are queued on during an execution of . For example, if for Fig. 1, and , then and .
Reference: [4] <author> G. Bilsen, M. Engels, R. Lauwereins, and J. A. Peperstraete, </author> <title> Static Scheduling of Multi-Rate and Cyclo-Static DSP-Applications, VLSI Signal Processing VII, </title> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Also, Lauwereins, Wauters, Ade, and Peperstraete have proposed an extension to SDF called cyclostatic dataow, which allows an important class of applications to be described in such a way that significantly less token traffic is required than the buffer activity that would result from the corresponding pure-SDF implementations <ref> [4] </ref>. However, the impact of this model on code size has not been explored in depth, nor have code size optimizations been developed that exploit the unique features of cyclostatic dataow.
Reference: [5] <author> J. T. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> International Journal of Computer Simulation, </journal> <month> April, </month> <year> 1994. </year>
Reference-contexts: Thus, APGAN and RPMC are complementary, when one of the techniques fails to construct a good schedule, the other can be expected to be find one [2]. Fig. 4 shows a screendump from the Ptolemy prototyping environment <ref> [5] </ref> that contains an SDF description of a four channel, nonuniform filter bank. The single appearance schedule obtained by APGAN on this system is , and the resulting buffer memory requirement is .
Reference: [6] <author> S. S. Godbole, </author> <title> On Efficient Computation of Matrix Chain Products, </title> <journal> IEEE Transactions on Computers, </journal> <month> September, </month> <year> 1973. </year>
Reference-contexts: However, when memory constraints are severe, the techniques discussed in this paper are superior. The basic structure of the dynamic programming techniques developed in this paper and in [12] was inspired by Godboles dynamic programming algorithm for matrix-chain multiplication, which is presented in <ref> [6] </ref>. 6 2. Dynamic Programming Post Optimization Suppose that is a connected, delayless, acyclic SDF graph, is valid single appearance schedule for , , and is an order-optimal schedule for .
Reference: [7] <author> R. Govindarajan, G. R. Gao, and P. Desai, </author> <title> Minimizing Memory Requirements in Rate-Optimal Schedules, </title> <booktitle> Proceedings of the International Conference on Application Specific Array Processors, </booktitle> <month> August, </month> <year> 1994. </year>
Reference-contexts: In contrast, Govindarajan, Gao, and Desai have developed scheduling algorithms to minimize data memory requirements, without considering code size, in a parallel processing context <ref> [7] </ref>. Also, Lauwereins, Wauters, Ade, and Peperstraete have proposed an extension to SDF called cyclostatic dataow, which allows an important class of applications to be described in such a way that significantly less token traffic is required than the buffer activity that would result from the corresponding pure-SDF implementations [4].
Reference: [8] <author> W. H. Ho, E. A. Lee, and D. G. Messerschmitt, </author> <title> High Level Dataow Programming for Digital Signal Processing, VLSI Signal Processing III, </title> <publisher> IEEE Press, </publisher> <year> 1988. </year>
Reference-contexts: For each actor in the valid schedule, a corresponding code block, obtained from a library of predefined actors, is instantiated. The resulting sequence of code blocks is encapsulated within an infinite loop to generate a software implementation of the SDF graph <ref> [8] </ref>. In [10], efficient algorithms are presented to determine whether or not a given SDF graph has a valid schedule, and to determine the minimum number of times that each actor must be fired in a valid schedule.
Reference: [9] <author> R. Lauwereins, M. Engels, J. A. Peperstraete, E. Steegmans, and J. Van Ginderdeuren, </author> <title> GRAPE: A CASE Tool for Digital Signal Parallel Processing, </title> <journal> IEEE ASSP Magazine, </journal> <month> April, </month> <year> 1990. </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model [10]. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models <ref> [9, 14, 13, 15, 16] </ref>.
Reference: [10] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> Static Scheduling of Synchronous Dataow Programs 17 for Digital Signal Processing, </title> <journal> IEEE Transactions on Computers, </journal> <month> February, </month> <year> 1987. </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model <ref> [10] </ref>. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models [9, 14, 13, 15, 16]. <p> For each actor in the valid schedule, a corresponding code block, obtained from a library of predefined actors, is instantiated. The resulting sequence of code blocks is encapsulated within an infinite loop to generate a software implementation of the SDF graph [8]. In <ref> [10] </ref>, efficient algorithms are presented to determine whether or not a given SDF graph has a valid schedule, and to determine the minimum number of times that each actor must be fired in a valid schedule. We represent these minimum numbers of firings by a vector , indexed by 1.
Reference: [11] <author> P. K. Murthy, S. S. Bhattacharyya, and E. A. Lee, </author> <title> Combined Code and Data Minimization for Synchronous Dataow Programs, </title> <note> Memorandum No. </note> <institution> UCB/ERL M94/93, Electronics Research Laboratory, University of California at Berkeley, </institution> <month> November, </month> <year> 1994, </year> <note> WWW URL: http// ptolemy.eecs.berkeley.edu/papers/jointCodeDataMinimize. </note>
Reference-contexts: Although perfectly valid target programs can be generated without this restriction, it can be shown that having a separate buffer on each edge is advantageous because it permits full exploitation of the memory savings attainable from nested loops, and it accommodates delays without complication <ref> [11] </ref>. Another advantage of this model is that by favoring the generation of nested loops, the model also favors schedules that have lower latency than single appearance schedules that are constructed to optimize various alternative cost measures [11]. <p> the memory savings attainable from nested loops, and it accommodates delays without complication <ref> [11] </ref>. Another advantage of this model is that by favoring the generation of nested loops, the model also favors schedules that have lower latency than single appearance schedules that are constructed to optimize various alternative cost measures [11]. Combining the analysis and techniques that we develop in this paper with methods for sharing storage among multiple buffers is a useful direction for further study. <p> Since the introduction of the basic version of DPPO in [12], we have also developed and implemented two heuristics, called APGAN and RPMC, for efficiently constructing single appearance schedules that have low buffer memory requirement <ref> [2, 11] </ref> for acyclic graphs. In this paper, we present experimental results that demonstrate the ability of GDPPO to significantly improve the schedules constructed by APGAN and RPMC for practical SDF systems. <p> As implied above, the memory requirements associated with at schedules are often significantly larger than the nested-loop schedules that we discuss in this paper, even if techniques are applied to share memory among multiple buffers for the at schedules <ref> [11] </ref>. For example for the mobile satellite receiver example discussed in [17], an optimum single appearance schedule under the criterion of Ritz, Willem and Meyr requires 1920 units of memory. <p> 2+ A n , , , and -= S ( )lexorder A 1 A 2 ,( ) A 2 A 3 ,( ) A n 1 A n ,( ) A i A i 1+ A i 2+ , ,( ) S ( )lexorder 7 traversal of the optimal splits <ref> [11] </ref>. In the th iteration of this bottom up approach, we have available the minimum buffer memory requirement for each subsequence that has less than or equal to members.
Reference: [12] <author> P. K. Murthy, S. S. Bhattacharyya, and E. A. Lee, </author> <title> Minimizing Memory Requirements for Chain-Structured Synchronous Dataow Programs, </title> <booktitle> Proceedings of the International Conference on Acoustics, Speech and Signal Processing, </booktitle> <month> April, </month> <year> 1994. </year>
Reference-contexts: In this paper we present a dynamic programming technique for post-processing a single appearance schedule with the goal of generating a modified single appearance schedule that has a significantly lower buffer memory requirement. The technique is an extension of the algorithm developed in <ref> [12] </ref> for constructing single appearance schedules for chain-structured SDF graphs, and a basic version of this technique, called Dynamic Programming Post Optimization (DPPO), that applies to delayless, acyclic graphs was outlined in [12]. <p> The technique is an extension of the algorithm developed in <ref> [12] </ref> for constructing single appearance schedules for chain-structured SDF graphs, and a basic version of this technique, called Dynamic Programming Post Optimization (DPPO), that applies to delayless, acyclic graphs was outlined in [12]. <p> Since the introduction of the basic version of DPPO in <ref> [12] </ref>, we have also developed and implemented two heuristics, called APGAN and RPMC, for efficiently constructing single appearance schedules that have low buffer memory requirement [2, 11] for acyclic graphs. <p> However, when memory constraints are severe, the techniques discussed in this paper are superior. The basic structure of the dynamic programming techniques developed in this paper and in <ref> [12] </ref> was inspired by Godboles dynamic programming algorithm for matrix-chain multiplication, which is presented in [6]. 6 2. Dynamic Programming Post Optimization Suppose that is a connected, delayless, acyclic SDF graph, is valid single appearance schedule for , , and is an order-optimal schedule for .
Reference: [13] <author> D. R. OHallaron, </author> <title> The Assign Parallel Program Generator, </title> <institution> Memorandum CMU-CS-91-141, School of Computer Science, Carnegie Mellon University, </institution> <month> May, </month> <year> 1991. </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model [10]. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models <ref> [9, 14, 13, 15, 16] </ref>.
Reference: [14] <author> J. Pino, S. Ha, E. A. Lee, and J. T. Buck, </author> <title> Software Synthesis for DSP Using Ptolemy, </title> <journal> Journal of VLSI Signal Processing, </journal> <month> January, </month> <year> 1995. </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model [10]. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models <ref> [9, 14, 13, 15, 16] </ref>.
Reference: [15] <author> D. B. Powell, E. A. Lee, and W. C. Newman, </author> <title> Direct Synthesis of Optimized DSP Assembly Code from Signal Flow Block Diagrams, </title> <booktitle> Proceedings of the International Conference on Acoustics, Speech, and Signal Processing, </booktitle> <month> March, </month> <year> 1992 </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model [10]. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models <ref> [9, 14, 13, 15, 16] </ref>. <p> When there is enough memory to accommodate the minimum context-switch schedules of [17], it is possible that these schedules will result in somewhat higher throughput than the schedules discussed in this paper, although the difference in context-switch overhead can often be significantly mitigated by the techniques described in <ref> [15] </ref>. However, when memory constraints are severe, the techniques discussed in this paper are superior. The basic structure of the dynamic programming techniques developed in this paper and in [12] was inspired by Godboles dynamic programming algorithm for matrix-chain multiplication, which is presented in [6]. 6 2.
Reference: [16] <author> S. Ritz, M. Pankert, and H. Meyr, </author> <title> High Level Software Synthesis for Signal Processing Systems, </title> <booktitle> Proceedings of the International Conference on Application Specific Array Processors, </booktitle> <month> August, </month> <year> 1992. </year>
Reference-contexts: 1. Background This paper develops a dynamic programming technique for reducing memory requirements when synthesizing software from graphical DSP programs that are based on the synchronous dataow (SDF) model [10]. Numerous DSP design environments, including a number of commercial tools, support SDF or closely related models <ref> [9, 14, 13, 15, 16] </ref>.
Reference: [17] <author> S. Ritz, M. Willems, and H. Meyr, </author> <title> Scheduling for Optimum Data Memory Compaction in Block Diagram Oriented Software Synthesis, </title> <booktitle> Proceedings of the International Conference on Acoustics, Speech and Signal Processing, to appear, </booktitle> <year> 1995. </year>
Reference-contexts: However, the impact of this model on code size has not been explored in depth, nor have code size optimizations been developed that exploit the unique features of cyclostatic dataow. In <ref> [17] </ref>, Ritz, Willems, and Meyr present techniques for minimizing the memory requirements of a class of single appearance schedules that minimize the rate of context-switches between actors. These schedules are called at schedules since they do not apply any nested loops. <p> For example for the mobile satellite receiver example discussed in <ref> [17] </ref>, an optimum single appearance schedule under the criterion of Ritz, Willem and Meyr requires 1920 units of memory. <p> When there is enough memory to accommodate the minimum context-switch schedules of <ref> [17] </ref>, it is possible that these schedules will result in somewhat higher throughput than the schedules discussed in this paper, although the difference in context-switch overhead can often be significantly mitigated by the techniques described in [15].
References-found: 17

