URL: http://www.cs.cornell.edu/home/caldwell/papers/TPHOL98.ps
Refering-URL: http://www.cs.cornell.edu/home/caldwell/papers.html
Root-URL: 
Email: caldwell@cs.cornell.edu  
Title: Classical Propositional Decidability via Nuprl Proof Extraction  
Author: James L. Caldwell 
Address: Ithaca, N.Y.  
Affiliation: Department of Computer Science Cornell University  
Abstract: This paper highlights a methodology of Nuprl proof that results in efficient programs that are more readable than those produced by other established methods for extracting programs from proofs. We describe a formal constructive proof of the decidability of a sequent calculus for classical propositional logic. The proof is implemented in the Nuprl system and the resulting proof object yields a "correct-by-construction" program for deciding propositional sequents. If the sequent is valid, the program reports that fact; otherwise, the program returns a counterexample in the form of a falsifying assignment. We employ Kleene's strong three-valued logic to give more informative counter-examples, it is also shown how this semantics agrees with the standard two-valued presentation.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Stuart F. Allen. </author> <title> From dy/dx to [ ]P: A matter of notation. In Proceedings of User Interfaces for Theorem Provers 1998. </title> <institution> Eindhoven University of Technology, </institution> <month> July </month> <year> 1998. </year>
Reference-contexts: Thus, the displayed form of a Nuprl term is never parsed, the editor displays the terms to the user as specified, but manipulates the actual underlying structure. All Nuprl terms occurring in this paper appear on the page as they do in the Nuprl editor and library. In <ref> [1] </ref> Allen gives an example of a non-trivial application of the display mechanism. 2.6 Decidability, Stability, the Squash Type, and Squash Stability Being constructive, Nuprl does not assume all propositions are decidable, i.e. in general the so-called law of excluded middle is not provable; that is, 8P:P.P_:P is not a theorem
Reference: 2. <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic. </title> <publisher> NY:Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form ? Part of this work was performed while the author was a member of the Formal Methods Group at NASA Langley Research Center in Hampton VA. of an IF-THEN-ELSE normalization procedure <ref> [2, 14, 16, 12, 15] </ref>. Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms.
Reference: 3. <author> James Caldwell. </author> <title> Extracting propositional decidability: A proof of propositional decidability in constructive type theory and its extract. </title> <note> Available at http://simon.cs.cornell.edu/Info/People/caldwell/papers.html, March 1997. </note>
Reference-contexts: The Kleene semantics account for partial assignments in a particularly clean way and allow for tighter counter-examples by allowing "don't care" conditions in assignments. The proof presented here is a version of the one presented by the author in <ref> [3] </ref> that has been optimized to produce more efficient and readable computational content. The Nuprl proofs for the earlier development are available on the web at the site noted in reference [3]. 2 An Overview of the Nuprl System The Nuprl type theory is a sequent presentation of a constructive type <p> The proof presented here is a version of the one presented by the author in <ref> [3] </ref> that has been optimized to produce more efficient and readable computational content. The Nuprl proofs for the earlier development are available on the web at the site noted in reference [3]. 2 An Overview of the Nuprl System The Nuprl type theory is a sequent presentation of a constructive type theory via type assignment rules. <p> contains enough information to determine a value for F. *ABS full sequent assignment Full (S) def = fa:Assignment| (a |= S _ a |6= S)g Validity is defined with respect to full assignments. *ABS sequent valid j= S def = 8a:Full (S). a j= S The author has shown elsewhere <ref> [3] </ref> that partial assignments are monotone with respect to satisfaction and falsification as defined here, thereby showing that the definition of validity just given agrees with the standard notion of validity over total Boolean assignments. 4 Decidability The most natural formalization of the decidability theorem would simply say a sequent is <p> A logically equivalent (and computationally stronger) form of falsifiablity gives the following theorem. 8S:Sequent. |= S _ 9a:Assignment. a |6= S A constructive proof of this theorem <ref> [3] </ref> results in a function accepting a sequent S as its argument and returning one of inl (t) or inr (ha,ei). We are interested here in the computational content of the theorem. The term t under the injection inl has no computational interest, and so we squash it. <p> Thus if any hypothesis of an invertible rule is falsified by a given assignment, then the conclusion is falsified by the same assignment. Each of these rules has been shown to be both sound and invertible <ref> [3] </ref>.
Reference: 4. <author> James Caldwell. </author> <title> Moving proofs-as-programs into practice. </title> <booktitle> In Proceedings, 12th IEEE International Conference Automated Software Engineering. IEEE Computer Society, </booktitle> <year> 1997. </year>
Reference-contexts: Set Type A method of generating efficient and readable extracts by the use of the set type (as opposed to the existential) was presented by the author in <ref> [4] </ref>. Earlier work by Hayashi [10] stressed a similar approach. We reiterate the main points here. Inhabitants of the existential 9x:T.P [x] are pairs &lt;a,b&gt; where a2T and b2P [a/x]. The term b inhabiting P [a/x] specifies, as far as the proofs-as-programs interpretation goes, how to prove P [a/x]. <p> This paper extends the work reported on in <ref> [4] </ref> and applies those techniques to a reasonably sized example. Propositional decidability is a well understood but non-trivial test-bed for these techniques.
Reference: 5. <author> R. Constable and D. Howe. </author> <title> Implementing metamathematics as an approach to automatic theorem proving. </title> <editor> In R.B. Banerji, editor, </editor> <title> Formal Techniques in Artificial Intelligence: A Source Book. </title> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: In their development they address issues related to the efficiency of the extracted program. 1.1 Overview of the Approach The development presented in this paper is based on the informal account given by Constable and Howe in <ref> [5] </ref>. The program extracted from the formal proof corresponds to the algorithm which searches for a sequent calculus proof via repeated (backward) application of the sequent rules until all propositional operators have been eliminated.
Reference: 6. <author> Robert L. Constable, et al. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: A complete presentation of the type theory can be found in the Nuprl book <ref> [6] </ref>. The Nuprl system, as distinguished from the type theory, implements a rich environment to support reasoning about and computing with the Nuprl type theory. <p> Equality on T is an equivalence relation when restricted to members of T, it is nonsense otherwise. Interpreting the type membership equality relation and type membership as types is made sensible via the propositions-as-types interpretation <ref> [6, pg.29-31] </ref>. In addition to the type membership equality provided with each type, there is an equality between types. Equality of types is intensional i.e. type equality in Nuprl is a structural equality modulo the direct computation rules. <p> Somewhat informally, a judgement asserts that, assuming the hypotheses are well-formed types, then the term S is an inhabited type and the extract s is an inhabitant <ref> [6, pg.141] </ref>. That the extract term s inhabits S is an artifact of the proof that S is inhabited. If S is inhabited there may be more than one inhabitant and different proofs may yield different inhabitants.
Reference: 7. <author> M. Davis and J. Schwartz. </author> <title> Metamathematical extensibility for theorm verifiers and proof checkers. </title> <type> Technical Report 12, </type> <institution> Courant Institute of Mathematical Sciences, </institution> <address> New York, </address> <year> 1977. </year>
Reference-contexts: The idea of verifying of decision procedures is not a new one; proposals to extend theorem provers by adding formally verified decision procedures were made as as early as 1977 <ref> [7] </ref>. Harrison provides a detailed survey of two approaches to the disciplined extension of prover capabilities in [9]. Actual formal verifications of decision procedures are less common.
Reference: 8. <author> Michael J. C. Gordon and Tom F. Melham. </author> <title> Introduction to HOL. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Extraction is the process of constructing a witness term as specified by proof. 2.5 The Nuprl system The Nuprl system supports construction of proofs by top-down refinement. The prover is implemented as a tactic based prover in the style of HOL <ref> [8] </ref>. Nuprl differs from HOL in that each tactic invocation defines more of the structure of an explicitly represented proof tree which is directly manipulated in the editor, stored in the Nuprl library, and retrieved for later editing. The tactic language is ML. <p> M: Formula List 6. f: Formula 7. N: Formula List <ref> [8] </ref>. hyp = M @ (f::N) ^ (f) &gt; 0 ` fL:Sequent List| #((8s2L. (s) = 0) ^ ((8s2L. |= s ) ) |= &lt;hyp, concl&gt; ) ^ (8a:Assignment. (9s2L. a |6= s) ) a |6= &lt;hyp, concl&gt;))g We provide the following term as a witness for the set type in <p> The conclusion contains non-atomic formula: This cased is similarly verified. After a second instantiation and decomposition of the the lemma list exists decomposition we must prove the following: 4. 9f2concl.((f) &gt; 0) 5. M: Formula List 6. f: Formula 7. N: Formula List <ref> [8] </ref>. concl = M @ (f::N) 2 Formula List ^ (f) &gt; 0 ` fL:Sequent List| #((8s2L. (s) = 0) ^ ((8s2L. |= s ) ) |= &lt;hyp, concl&gt; ) ^ (8a:Assignment. (9s2L. a |6= s) ) a |6= &lt;hyp, concl&gt;))g In this case the set type in the conclusion is
Reference: 9. <author> John Harrison. </author> <title> Metatheory and reflection in theorem proving: A survey and critique. </title> <type> Technical Report CRC-053, </type> <institution> SRI Cambridge, </institution> <address> Millers Yard, Cambridge, UK, </address> <year> 1995. </year>
Reference-contexts: The idea of verifying of decision procedures is not a new one; proposals to extend theorem provers by adding formally verified decision procedures were made as as early as 1977 [7]. Harrison provides a detailed survey of two approaches to the disciplined extension of prover capabilities in <ref> [9] </ref>. Actual formal verifications of decision procedures are less common.
Reference: 10. <author> Susumu Hayashi. </author> <title> Singleton, union, and intersection types for program extraction. </title> <booktitle> In Proceedings of the International Conference on Theoretical Aspects of Computer Software TACS'91, volume 526 of Lecture Notes in Computer Science, </booktitle> <pages> pages 701-730, </pages> <address> Berlin, 1991. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Set Type A method of generating efficient and readable extracts by the use of the set type (as opposed to the existential) was presented by the author in [4]. Earlier work by Hayashi <ref> [10] </ref> stressed a similar approach. We reiterate the main points here. Inhabitants of the existential 9x:T.P [x] are pairs &lt;a,b&gt; where a2T and b2P [a/x]. The term b inhabiting P [a/x] specifies, as far as the proofs-as-programs interpretation goes, how to prove P [a/x].
Reference: 11. <author> Susumu Hayashi and Hiroshi Nakano. PX: </author> <title> A Computational Logic. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: Both Shankar [17] and Hayashi <ref> [11] </ref> verify deciders for implicational fragments of propositional logic presented in sequent forms. Paulin-Mohring and Werner's work [15] is the closest in spirit to the work presented here in that they extract the program for the Boyer and Moore tautology checker from a constructive proof.
Reference: 12. <author> M. Hedberg. </author> <title> Normalising the associative law: An experiment with Martin-Lof's type theory. </title> <journal> Formal Aspects of Computing, </journal> <volume> 3 </volume> <pages> 218-252, </pages> <year> 1991. </year>
Reference-contexts: example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form ? Part of this work was performed while the author was a member of the Formal Methods Group at NASA Langley Research Center in Hampton VA. of an IF-THEN-ELSE normalization procedure <ref> [2, 14, 16, 12, 15] </ref>. Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms.
Reference: 13. <author> Stephen C. Kleene. </author> <title> Introduction to Metamathematics. </title> <publisher> van Nostrand, Princeton, </publisher> <year> 1952. </year>
Reference-contexts: q ! measure (p) + measure (q) + 1; The well-formedness theorem for the formula rank function certifies it is a func tion from formulas to natural numbers. 3.2 Three valued Semantics of propositional logic We define a semantics of classical propositional logic in terms of Kleene's strong three-valued logic <ref> [13] </ref>. A Kleene valuation reflects the classical interpretations of the standard propositional connectives under fully determined assignments (those assigning true or false to every variable in the formula). <p> N 3 is the three valued type containing elements displayed as 0 3 , 1 3 , and 2 3 denoting False, undefined, and True respectively. The operators of Kleene's three valued logic <ref> [13] </ref> are defined over N 3 as follows. ~ K 1 1 ^ K 0 1 2 1 0 1 1 _ K 0 1 2 1 1 1 2 ) K 0 1 2 1 1 1 2 Inspection of their matrices reveals that on inputs restricted to 0 3
Reference: 14. <author> J. Leszczylowski. </author> <title> An experiment with Edinburgh LCF. </title> <editor> In W. Bibel and R. Kowal-ski, editors, </editor> <booktitle> 5th International Conference on Automated Deduction, volume 87 of Lecture Notes in Computer Science, </booktitle> <pages> pages 170-181, </pages> <address> New York, 1981. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form ? Part of this work was performed while the author was a member of the Formal Methods Group at NASA Langley Research Center in Hampton VA. of an IF-THEN-ELSE normalization procedure <ref> [2, 14, 16, 12, 15] </ref>. Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms.
Reference: 15. <author> C. Paulin-Mohring and B. Werner. </author> <title> Synthesis of ML programs in the system Coq. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(5-6):607-640, </volume> <year> 1993. </year>
Reference-contexts: example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form ? Part of this work was performed while the author was a member of the Formal Methods Group at NASA Langley Research Center in Hampton VA. of an IF-THEN-ELSE normalization procedure <ref> [2, 14, 16, 12, 15] </ref>. Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms. <p> Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms. Paulin-Mohring and Werner's work <ref> [15] </ref> is the closest in spirit to the work presented here in that they extract the program for the Boyer and Moore tautology checker from a constructive proof.
Reference: 16. <author> Lawrence Paulson. </author> <title> Proving termination of normalization functions for conditional expressions. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 2 </volume> <pages> 63-74, </pages> <year> 1986. </year>
Reference-contexts: example that has been repeated a number of times is Boyer and Moore's propositional tautology checker in the form ? Part of this work was performed while the author was a member of the Formal Methods Group at NASA Langley Research Center in Hampton VA. of an IF-THEN-ELSE normalization procedure <ref> [2, 14, 16, 12, 15] </ref>. Both Shankar [17] and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms.
Reference: 17. <author> N Shanker. </author> <title> Towards mechanical metamathematics. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 1(4) </volume> <pages> 407-434, </pages> <year> 1985. </year>
Reference-contexts: Both Shankar <ref> [17] </ref> and Hayashi [11] verify deciders for implicational fragments of propositional logic presented in sequent forms. Paulin-Mohring and Werner's work [15] is the closest in spirit to the work presented here in that they extract the program for the Boyer and Moore tautology checker from a constructive proof.
References-found: 17

