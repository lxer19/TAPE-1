URL: ftp://ftp.cs.unc.edu/pub/users/stotts/pughPFA.ps.gz
Refering-URL: http://www.cs.unc.edu/~stotts/MMM/MMM1/paper/
Root-URL: http://www.cs.unc.edu
Title: Parallel Finite Automata for Modeling Concurrent Software Systems  
Author: P. David Stotts William Pugh 
Address: 3175, Sitterson Hall  Chapel Hill, NC, 27599-3175 College Park, MD 20742  
Affiliation: Department of Computer Science Department of Computer Science and CB  Institute for Advanced Computer Studies University of North Carolina University of Maryland  
Abstract: The class of parallel finite automata (PFA) is described that naturally expresses the interleaving parallelism inherent in Petri net notation without admitting the possibility of an infinite state space. The equivalence of this class to deterministic finite automata (DFA) is demonstrated using an algorithm for generating an equivalent nondeterministic finite automaton (NFA) from a PFA. A composition rule is given for constructing a PFA from a regular expression with the interleaving operator. Finally, the languages generated by this class are related to known classes of Petri net languages. Though the class PFA is equivalent in recognition power to the class DFA, the fact that DFAs are a structural subset of PFAs makes the PFA representation preferable for many applications requiring finite automata models. As an example, we discuss the usefulness of PFA notation as a structural model for hypertext, and non-linear interactive information networks in general.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: The proof consists of an algorithm for generating the transition diagram of an equivalent NFA, 6 along with a short argument that the construction terminates. The NFA can, of course, be converted into a DFA by the well-known "subset" algorithm (see <ref> [1, pages 117-119] </ref>). Each state of the NFA will represent a set of active PFA nodes.
Reference: [2] <author> H. Alayan and R. W. Newcomb. </author> <title> Binary petri-net relationships. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> CAS-34(5):565-568, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: It was previously noted that PFAs are best thought of as a form of Petri net with a modified (normalizing) execution rule. In this light, they bear some resemblance to the class of automata recently introduced as binary Petri Nets (BPN) <ref> [2] </ref>. The definition and execution behavior of BPNs has been explained, but their language theory remains undeveloped. <p> Due to this lost information, model checking on Petri nets cannot reliably answer all queries. Other PT models for which Trellis engines can easily be created include the previously mentioned debit nets [15] and binary Petri nets) <ref> [2] </ref>. Other finite state models with PT net syntax exist. One such model, the condition/event (C/E) system mentioned in section 3.4, has an execution rule that prevents a transition from firing if any of its output places are marked.
Reference: [3] <author> E. Clarke, E. A. Emerson, and S. Sistla. </author> <title> Automatic verification of concurrent systems. </title> <journal> ACM TOPLAS, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: One very promising approach involves adaptation of automated verification techniques called model checking <ref> [3] </ref> from the domain of concurrent programs. This approach allows verification of browsing properties of Trellis hyperprograms expressed in a temporal logic notation called CTL.
Reference: [4] <author> Richard Furuta and P. David Stotts. </author> <title> Programmable browsing semantics in Trellis. </title> <booktitle> In Hypertext '89 Proceedings, </booktitle> <pages> pages 27-42. </pages> <publisher> ACM, </publisher> <address> New York, </address> <month> November </month> <year> 1989. </year>
Reference-contexts: specifications in the lifecycle of concurrent and real-time software systems. 6 The design, construction, and study of Trellis is the work of Richard Furuta along with the first author; the bibliography lists several detailed reports about this project. 11 4.1 Trellis hyperprograms: PT nets with browsing semantics The Trellis project <ref> [16, 4] </ref> has investigated for the past several years the structure and semantics of human computer interaction, in the context of hypertext/hypermedia systems, program browsers, visual programming notations, and software process models. In the ensuing discussion, we will refer to an information structure in Trellis as a hyperprogram.
Reference: [5] <author> C. Ghezzi, M. Jazayeri, and D. Mandrioli. </author> <title> Fundamentals of Software Engineering. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Many other software engineering and system design researchers have developed applications for generic PT nets, though. For example, we refer the reader to the recent text by Ghezzi et al. <ref> [5] </ref> for an extended examples of how PT nets can be used as formal specifications in the lifecycle of concurrent and real-time software systems. 6 The design, construction, and study of Trellis is the work of Richard Furuta along with the first author; the bibliography lists several detailed reports about this
Reference: [6] <author> C. A. R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <year> 1978. </year>
Reference-contexts: A CSP program browser [12] is shown in figure 9. This specific example uses a CSP program taken from Hoare's original paper <ref> [6] </ref>. We wrote a translator to parse CSP programs and generate as output the storage format of Trellis hyperprograms. The translation converted the control structures of CSP statements and the message buffers between CSP processes into PT net structures with the appropriate control behaviors.
Reference: [7] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The notation and style is that commonly used in finite automata theory <ref> [7] </ref>. The formal development is straightforward, but presented in detail for completeness and clarity of understanding the execution of the transition diagrams in the ensuing examples. <p> represents. 7 2.2 Composition of PFAs from regular expressions For any regular expression r constructed from the normal operators (plus interleaving), a PFA P with transitions can be constructed such that L (P ) = L (r): The procedure is an augmentation of the one given in Hopcroft and Ullman <ref> [7, pages 30-32] </ref> for constructing an NFA from a regular expression without the interleaving operator. We first note that any NFA is also a PFA, by argument analogous to the one made in the proof of Theorem 1 showing that any DFA is a PFA.
Reference: [8] <author> T. Murata and H. Yamaguchi. </author> <title> A petri net model with negative tokens and its application to automated reasoning. </title> <booktitle> In Proceedings of the 33rd Midwest Symposium on Circuits and Systems, </booktitle> <pages> pages 7-10. </pages> <publisher> IEEE, </publisher> <month> August 12-15 </month> <year> 1990. </year>
Reference-contexts: Other Petri net extensions also can be used with PFAs to extend their expressive flexibility while retaining the analyzability of a finite state space. For example, the recently introduced concept of debit arcs [15] (similar to negative tokens <ref> [8] </ref>) can be employed to represent systems allowing physical phenomena similar to economic debt, or deferred actions.
Reference: [9] <author> Tadao Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Section 2.2 demonstrates a technique for composing PFAs fl This work partially supported by the National Science Foundation under grants IRI-9007746 and IRI-9015439. 1 We assume a familiarity with basic Petri net theory. An excellent introduction to the field can be found in the recent survey by Murata <ref> [9] </ref>, and a detailed exposition of more advanced theory can be found in the book by Reisig [11]. 1 directly from regular expressions with an interleaving operator. In section 3 we discuss several interesting modeling properties exhibited by PFAs and discuss their relationship to subclasses of Petri nets.
Reference: [10] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1981. </year>
Reference-contexts: Because the transitions leaving nodes 2 and 3 are tied together, control must be at both nodes concurrently for the move to occur. 1.5 Related work The language theory of regular expressions with interleaving is well known. Peterson <ref> [10, pp.169-171] </ref> restates (without proof) the result that type 0, 1, and 3 (regular) languages are closed under interleaving, and then (more to the point for this report) demonstrates a construction to support the fact that Petri net languages 5 are closed under interleaving as well. <p> This procedure is very similar to the previously mentioned NFA-to-DFA construction algorithm; it is also essentially the same procedure used to generate the coverability graph of a Petri net <ref> [10] </ref>, which, for bounded nets, can be thought of as a deterministic finite automaton. The NFA shown in figure 3 was generated by this construction and is equivalent to the PFA in figure 2. <p> PFA acceptance occurs whenever a reachable subset of the final nodes is obtained. A full description of the Petri net languages can be found in Peterson <ref> [10, pp. 154-188] </ref>. Theorem 2 essentially shows how to construct PFAs that are structurally and behaviorally equivalent to safe Petri nets given the language to be recognized.
Reference: [11] <author> Wolfgang Reisig. </author> <title> Petri Nets: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: An excellent introduction to the field can be found in the recent survey by Murata [9], and a detailed exposition of more advanced theory can be found in the book by Reisig <ref> [11] </ref>. 1 directly from regular expressions with an interleaving operator. In section 3 we discuss several interesting modeling properties exhibited by PFAs and discuss their relationship to subclasses of Petri nets. <p> Proof: by induction on the PFAs generated from each composition operator. 5 A net is termed k-bounded if no place (node) can ever contain more than k tokens. A 1-bounded net is termed safe. For details see Reisig <ref> [11] </ref>. 8 For regular expressions A and B, if M (A) and M (B) are safe PFAs, then M (AB), M (AjB) and M (A fl ) (and so M (A + )) are all safe because the composition rules create no new possible parallel activity. <p> As mentioned earlier, we adopted a DFA-like notation for familiarity and to make plain the fact that a PFA has a finite state space. 9 3.4 Forced safe firing Another useful PFA technique adapted from Petri nets (specifically from condition/event systems <ref> [11, pp. 21-23] </ref>) is the notion of forced safety, or forced safe firing.
Reference: [12] <author> P. D. Stotts and R. Furuta. </author> <title> Browsing parallel process networks,. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9(2) </volume> <pages> 224-235, </pages> <year> 1990. </year>
Reference-contexts: Example: Parallel program browsing The Trellis application illustrated in this section shows both the usefulness of the model for representing parallel threads of activity, and the usefulness of our hypertextual interpretation of the PT net for supporting human reasoning through browsing. A CSP program browser <ref> [12] </ref> is shown in figure 9. This specific example uses a CSP program taken from Hoare's original paper [6]. We wrote a translator to parse CSP programs and generate as output the storage format of Trellis hyperprograms.
Reference: [13] <author> P. D. Stotts and R. Furuta. </author> <title> Hypertextual concurrent control of a lisp kernel. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(2) </volume> <pages> 221-236, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This next example illustrates a facility of the model that also allows non-user directed control in a process simulation. The method uses timed transitions in the PT net, a Lisp interpreter in the Trellis engine, and chunks of Lisp code (called agents) on net transitions <ref> [17, 13] </ref>. When a transition is fired, its Lisp agent (if present) is executed. In this form, Trellis resembles the concurrent programming language Linda, in that a sequential kernel language (Lisp) is separate from, but works with, a parallel control flow language (timed PT nets).
Reference: [14] <author> P. D. Stotts, R. Furuta, and J. C. Ruiz. </author> <title> Hyperdocuments as automata: Trace-based browsing property verification. </title> <booktitle> In Proceedings of the 1992 European Conference on Hypertext (ECHT92: November 30-December 4, </booktitle> <address> Milan, Italy), </address> <pages> pages 272-281. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: By composing the truth values of these subformulae, one obtains a truth value for the entire formula. For PT nets, we obtain a state machine from the coverability graph. The details of our use of CTL are discussed elsewhere <ref> [14] </ref>. For this rationale, it is sufficient to give an idea of how the method is applied to net models.
Reference: [15] <author> P. D. Stotts and P. Godfrey. </author> <title> Place/transition nets with debit arcs. </title> <journal> Information Processing Letters, </journal> <volume> 41(1) </volume> <pages> 25-33, </pages> <month> January </month> <year> 1992. </year> <month> 19 </month>
Reference-contexts: Other Petri net extensions also can be used with PFAs to extend their expressive flexibility while retaining the analyzability of a finite state space. For example, the recently introduced concept of debit arcs <ref> [15] </ref> (similar to negative tokens [8]) can be employed to represent systems allowing physical phenomena similar to economic debt, or deferred actions. <p> Due to this lost information, model checking on Petri nets cannot reliably answer all queries. Other PT models for which Trellis engines can easily be created include the previously mentioned debit nets <ref> [15] </ref> and binary Petri nets) [2]. Other finite state models with PT net syntax exist. One such model, the condition/event (C/E) system mentioned in section 3.4, has an execution rule that prevents a transition from firing if any of its output places are marked.
Reference: [16] <author> P. David Stotts and Richard Furuta. </author> <title> Petri-net-based hypertext: Document structure with browsing semantics. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 7(1) </volume> <pages> 3-29, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: specifications in the lifecycle of concurrent and real-time software systems. 6 The design, construction, and study of Trellis is the work of Richard Furuta along with the first author; the bibliography lists several detailed reports about this project. 11 4.1 Trellis hyperprograms: PT nets with browsing semantics The Trellis project <ref> [16, 4] </ref> has investigated for the past several years the structure and semantics of human computer interaction, in the context of hypertext/hypermedia systems, program browsers, visual programming notations, and software process models. In the ensuing discussion, we will refer to an information structure in Trellis as a hyperprogram.
Reference: [17] <author> P. David Stotts and Richard Furuta. </author> <title> Temporal hyperprogramming. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(3) </volume> <pages> 237-253, </pages> <year> 1990. </year> <month> 20 </month>
Reference-contexts: This next example illustrates a facility of the model that also allows non-user directed control in a process simulation. The method uses timed transitions in the PT net, a Lisp interpreter in the Trellis engine, and chunks of Lisp code (called agents) on net transitions <ref> [17, 13] </ref>. When a transition is fired, its Lisp agent (if present) is executed. In this form, Trellis resembles the concurrent programming language Linda, in that a sequential kernel language (Lisp) is separate from, but works with, a parallel control flow language (timed PT nets).
References-found: 17

