URL: http://www.cs.wustl.edu/cs/techreports/1996/wucs-96-08.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Mobile UNITY: Reasoning and Specification in Mobile Computing  
Author: Gruia-Catalin Roman Peter J. McCann Jerome Y. Plun 
Date: January 22, 1997  
Address: IN ST LOUIS  Saint Louis, MO 63130-4899 One Brookings Drive Campus Box 1045  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Washington University Department of Computer Science  
Pubnum: WUCS-96-08  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport, </author> <title> An old-fashioned recipe for real-time, </title> <booktitle> in Lecture Notes in Computer Science, </booktitle> <volume> vol. 600, </volume> <editor> J. W. d. Bakker, C. Huizing, W. P. Roever, and G. Rosenberg, Eds.: </editor> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 1-27. </pages>
Reference-contexts: Also, we will see later that it is convenient to have the proof logic depend on the text of the program with only a few basic constructs such as co and ensures. Our treatment of location as a distinguished variable was inspired by <ref> [1] </ref>. In the following sections, we describe two communication mechanisms which use this notation and provide programs with the ability to interact with each other. 4.
Reference: [2] <author> A. Acharya, B. R. Badrinath, T. Imielinski, and J. C. Navas, </author> <title> A WWW-based Location-Dependent Information Service for Mobile Clients, </title> <note> submitted to the Fourth International WWW Conference, pp. </note> , <year> 1995. </year>
Reference-contexts: Two independent groups have worked on location-dependent World Wide Web applications for mobile computing. Voelker and Bershad [18] describe Mobisaic, a modification to existing web browser technology that resolves queries for pages based on the current location. Acharya et al. <ref> [2] </ref> describe a similar system. Schilit, Adams, and Want [15] argue that applications need to change their behavior in a location-dependent (and more generally in a context-dependent) manner.
Reference: [3] <author> B. R. Badrinath and G. Welling, </author> <title> Event Delivery Abstractions for Mobile Computing, </title> <institution> Rutgers University, </institution> <address> New Brunswick, NJ 08903, </address> <note> Technical Report LCSR-TR-242, </note> <year> 1995. </year>
Reference-contexts: An end-to-end mobile application must adapt to the widely varying bandwidth of the wireless connection, which might range from many megabits per second if a laptop is docked with a desktop workstation all the way down to zero as it leaves a wireless coverage area completely. Badrinath and Welling <ref> [3] </ref> describe a C++ abstraction for delivering events such as bandwidth variations, disconnections, and battery measurements to applications. Noble, Price, and Satyanarayanan [10] present the Odyssey application library for managing changing resources and emphasize the importance of application-and data typespecific policies for reacting to changes in the environment.
Reference: [4] <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Because of movement, frequent disconnections, power limitations, bandwidth restrictions, and limited local resources, designers tend to think of mobile computing as being distinct from traditional distributed computing. Models for nonmobile distributed systems, such standard UNITY <ref> [4] </ref>, are not adequate to the mobile computing domain, because they describe systems as static collections of components with fixed patterns of connectivity. This paper presents Mobile UNITY, a new model for specifying and reasoning about concurrent systems that contain dynamically reconfiguring components. <p> What is mobile computing? What are proper abstractions for communication and composition in the presence of mobility? These are precisely the kinds of questions we start addressing in this paper. A highly abstract version of the ad-hoc network serves as a vehicle for our investigation while UNITY <ref> [4] </ref> provides the needed programming notation and formal tools. The parsimony and static nature of UNITY is both a challenge and an opportunity. <p> This is clearly distinct from the modeling strategy we explore in this paper. baggage loader baggage unloader Fig. 1. A single cart moving along a linear track. In this paper we use the UNITY <ref> [4] </ref> notation to express the computation taking place within the mobile components of a system and the UNITY proof logic to reason about mobile computationsboth are extended appropriately to account for the effects of movement and transient interactions. <p> At this point, its main contribution to the field of formal methods is the ability to extend the concept of superposition in ways that offer dynamism and symmetry and which are meaningful to reasoning about mobility. 6. Proof Logic UNITY <ref> [4] </ref> provides a formal framework for proving system properties from the text of a program.
Reference: [5] <author> W. D. Clinger, </author> <title> Foundations of Actor Semantics, </title> <institution> MIT Artificial Intelligence Laboratory AI-TR-633, </institution> <year> 1981. </year>
Reference-contexts: In p-calculus, however, there is no formal concept of space. Mobility is equated to the ability to express processes which have changing structure. Under this definition any model able to pass processes as values, e.g., the Actor model <ref> [5] </ref>, or link names as values (p -calculus) qualifies. This is clearly distinct from the modeling strategy we explore in this paper. baggage loader baggage unloader Fig. 1. A single cart moving along a linear track.
Reference: [6] <author> D. B. Johnson, </author> <title> Routing in Ad Hoc Networks of Mobile Hosts, </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 158-163, </pages> <year> 1994. </year>
Reference-contexts: One such application is disaster management, where the fixed network might be damaged beyond usability. Another application may involve a group of conference participants engaged in a formal or informal meeting, sharing data and communicating among themselves. Both applications require an ad-hoc network. First coined by Johnson <ref> [6] </ref>, this term denotes a set of mobile nodes that have no (or only a very sparse) infrastructure of base stations and thus a greater reliance on individual nodes for control and routing functions.
Reference: [7] <author> L. Lamport, </author> <title> The temporal logic of actions, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 16, no. 3, </volume> <pages> pp. 872-923, </pages> <year> 1994. </year>
Reference-contexts: In this case, movement is no longer under the control of the environment but planned by the program which could request future data delivery at specific locations to be reached along the movement path. Our choice of UNITY over similar models of concurrency such as TLA <ref> [7] </ref> was dictated largely by our broad experience with UNITY and the simplicity with which programs are represented. Also, we will see later that it is convenient to have the proof logic depend on the text of the program with only a few basic constructs such as co and ensures.
Reference: [8] <author> R. Milner, J. Parrow, and D. Walker, </author> <title> A calculus of mobile processes. I, </title> <journal> Information and Computation, </journal> <volume> vol. 100, no. 1, </volume> <pages> pp. 1-40, </pages> <year> 1992. </year>
Reference-contexts: This is the reason why we treat mobility as a change in the location of a componenta mobile program. To the best of our knowledge, the only formal model of concurrency to refer to mobility explicitly is p-calculus <ref> [8] </ref>, a process algebra proposed by Milner and his colleagues. In p-calculus, however, there is no formal concept of space. Mobility is equated to the ability to express processes which have changing structure.
Reference: [9] <author> J. Misra, </author> <title> A Logic for Concurrent Programming: Safety, </title> <journal> Journal of Computer and Software Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 239-72, </pages> <year> 1995. </year>
Reference-contexts: We choose to use the basic safety property from <ref> [9] </ref> which is the co relation. The formula p co q states that in a state in which the predicate p is true, every program action will establish the predicate q.
Reference: [10] <author> B. D. Noble, M. Price, and M. Satyanarayanan, </author> <title> A Programming Interface for Application-Aware Adaptation in Mobile Computing, </title> <journal> Computing Systems, </journal> <volume> vol. 8, no. 4, </volume> <pages> pp. 345-63, </pages> <year> 1995. </year>
Reference-contexts: Badrinath and Welling [3] describe a C++ abstraction for delivering events such as bandwidth variations, disconnections, and battery measurements to applications. Noble, Price, and Satyanarayanan <ref> [10] </ref> present the Odyssey application library for managing changing resources and emphasize the importance of application-and data typespecific policies for reacting to changes in the environment. These works demonstrate that the issues in mobile computing are broader than just the packet routing problem.
Reference: [11] <author> C. Perkins, </author> <title> IP Mobility Support, </title> <institution> Internet Engineering Task Force, ftp://ftp.ietf.cnri.reston.va.us/internet-drafts/draft-ietf-mobileip-protocol-16-txt, Internet draft draft-ietf-mobileip-16, </institution> <month> April 22 </month> <year> 1996. </year>
Reference-contexts: So far, the literature on mobile computing is dominated by concerns having to do with the development of protocols and services. Perhaps the most prominent of these efforts is Mobile IP <ref> [11] </ref>, a protocol under development by the IETF Mobile IP Working Group. This work attempts to hide mobility at the network level, allowing higher-layer services such as TCP to continue uninterrupted as hosts move from subnet to subnet.
Reference: [12] <author> G.-C. Roman and H. C. Cunningham, </author> <title> Reasoning about Synchronic Groups, </title> <booktitle> in Research Directions in High-Level Parallel Programming Languages, </booktitle> <volume> vol. 574, </volume> <booktitle> Lecture Notes in Computer Science, </booktitle> <editor> J. P. Ban---tre and D. L. Mtayer, Eds. </editor> <address> New York, NY: </address> <publisher> Springer-Verlag, </publisher> <year> 1992, </year> <pages> pp. 21-38. </pages>
Reference-contexts: The coselection (a symmetric form of superposition) adds and removes, dynamically, actions corresponding to pairs of statements executed in parallel; the idea has its roots in the concept of dynamic synchrony [13] originally introduced in the Swarm model <ref> [12] </ref>. Similarly, an inhibition can be thought of as removing and restoring, dynamically, actions corresponding to singleton statements. The transient synchronization abstraction presented here allows for modular design of flexible components.
Reference: [13] <author> G.-C. Roman, J. Y. Plun, and C. D. Wilcox, </author> <title> Dynamic Synchrony Among Atomic Actions, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 6, </volume> <pages> pp. 677-685, </pages> <year> 1993. </year>
Reference-contexts: The coselection (a symmetric form of superposition) adds and removes, dynamically, actions corresponding to pairs of statements executed in parallel; the idea has its roots in the concept of dynamic synchrony <ref> [13] </ref> originally introduced in the Swarm model [12]. Similarly, an inhibition can be thought of as removing and restoring, dynamically, actions corresponding to singleton statements. The transient synchronization abstraction presented here allows for modular design of flexible components.
Reference: [14] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu, </author> <title> Experience with Disconnected Operation in a Mobile Computing Environment, </title> <booktitle> Proceedings of the USENIX Symposium on Mobile and Location-Indepedent Computing, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 11-28, </pages> <year> 1993. </year>
Reference-contexts: The dynamically changing resources present in the mobile setting can be dealt with in other ways as well. Mobile-tolerant file systems attempt to accommodate environmental changes by relaxing the consistency guarantees traditionally offered by distributed file systems. Satyanarayanan et al. <ref> [14] </ref> describe results from usage experience with the Coda file system, which offers users the ability to operate while completely disconnected from the network. This is accomplished by hoarding user files on client machines and emulating remote servers from the data in the local cache.
Reference: [15] <author> B. N. Schilit, N. Adams, and R. </author> <title> Want, </title> <booktitle> Context-Aware Computing Applications, Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 85-90, </pages> <year> 1994. </year>
Reference-contexts: Two independent groups have worked on location-dependent World Wide Web applications for mobile computing. Voelker and Bershad [18] describe Mobisaic, a modification to existing web browser technology that resolves queries for pages based on the current location. Acharya et al. [2] describe a similar system. Schilit, Adams, and Want <ref> [15] </ref> argue that applications need to change their behavior in a location-dependent (and more generally in a context-dependent) manner.
Reference: [16] <author> C. D. Tait and D. Duchamp, </author> <title> An Efficient Variable Consistency Replicated File Service, </title> <booktitle> Proceedings of the USENIX File Systems Workshop, </booktitle> <address> Ann Arbor, MI, </address> <pages> pp. 111-126, </pages> <year> 1992. </year>
Reference-contexts: Writes to the local cache are allowed to proceed, and files must be reintegrated when contact with the remote server is reestablished. The authors note that conflicts occur less often than might be expected due to the low degree of writesharing in a user file system. Tait and Duchamp <ref> [16] </ref> present an implementation of a variable-consistency file system that allows the application to determine the consistency model used when reading data. Although the authors do not emphasize disconnected operation, they do highlight the need for applicationspecific levels of consistency.
Reference: [17] <author> D. Terry, M. Theimer, K. Petersen, A. Demers, M. Spreitzer, and C. Hauser, </author> <title> Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System, </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 172-83, </pages> <year> 1995. </year>
Reference-contexts: Here too, however, work has illustrated the need for weaker consistency models in the face of mobile computing. The Bayou system described by Terry et al. <ref> [17] </ref> focuses on two applications, a meeting room scheduler and a bibliography data base, and provides for applicationspecific integration policies so that updates to the data base that were written while disconnected can be integrated later into a primary copy.
Reference: [18] <author> G. M. Voelker and B. N. Bershad, Mobisaic: </author> <title> An Information System for a Mobile Wireless Computing Environment, </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 185-90, </pages> <year> 1994. </year>
Reference-contexts: Re-integration is accomplished sporadically on a pairwise basis, and the only guarantee offered is eventual consistency. In addition to disconnected operation, users of mobile computers will also demand location-dependent services. Two independent groups have worked on location-dependent World Wide Web applications for mobile computing. Voelker and Bershad <ref> [18] </ref> describe Mobisaic, a modification to existing web browser technology that resolves queries for pages based on the current location. Acharya et al. [2] describe a similar system.
References-found: 18

