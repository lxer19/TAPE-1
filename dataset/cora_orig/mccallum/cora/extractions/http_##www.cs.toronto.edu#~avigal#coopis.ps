URL: http://www.cs.toronto.edu/~avigal/coopis.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Title: A Generic Integration Architecture for Cooperative Information Systems  
Author: John Mylopoulos Avigdor Gal Kostas Kontogiannis Martin Stanley 
Address: Toronto  
Affiliation: Department of Computer Science University of  
Abstract: Cooperative information systems consist of existing legacy systems integrated in terms of a generic architecture which supports data integration and coordination among the integrated components. This paper presents a proposal for a generic integration architecture named CoopWARE. The architecture is presented in terms of the mechanisms it provides for data integration, and coordination. Data integration is supported by an information repository with an extensible schema, while coordination is facilitated by a rule set and an event-driven rule execution mechanism. In addition, the paper describes implementation and application experiences for the architecture in the context of a 3-year software engineering project. keywords: cooperative information systems 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ansari, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Using flexible transaction to support multi-system telecommunication application. </title> <booktitle> In Proceedings of the 18th VLDB Conference, </booktitle> <address> Vancouver, british Columbia, Canada, </address> <year> 1992. </year>
Reference-contexts: Federated databases can also be implemented using tightly coupled systems, where a global conceptual schema is used to define the semantics of the global schema. Research in the workflow area has been influenced by the concepts of long running activities [11], multi-system applications <ref> [1] </ref>, polytrans multidatabases federated databases distributed databases heterogeneous databases workflows global information systems internet applications multi-view systems NONE FULL LOCAL AUTONOMY HIGH LOW DATA STRUCTURE actions [29], and application multiactivities [18]. METEOR [22] is an example of a project whose objective is to support multi-system workflow applications.
Reference: [2] <author> N. S. Barghouti. </author> <title> Supporting cooperation in the Marvel process-centered SDE. </title> <booktitle> In Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-30, </pages> <address> Tyson's Corner, Virginia, </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Such a model enables research in this area to be more focused on issues that are common to all the above mentioned systems, such as alternative paths of operations in case of network failures and the application of meta-data. MARVEL <ref> [2] </ref> is a process-centered environment that supports teams of users working on medium to large scale projects. An instantiated environment is created by an administrator who provides the data schema, process model, tool envelopes (which are equivalent to components), and coordination model for a specific application.
Reference: [3] <author> S. D. Bird. </author> <title> Towards a taxonomy of multi-agent systems. </title> <journal> International Journal of Man- Machine Studies, </journal> <volume> 39 </volume> <pages> 689-704, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Such integration architectures are being explored in several different areas of computer science, including Databases where the emphasis is on interoperation and data integration [19], Software Engineering where tool and environment integration issues dominate [5], AI where systems consisting of distributed intelligent agents are being developed and explored <ref> [3] </ref> and of course, Information Systems [23]. This paper proposes CoopWARE, a generic integration architecture, based on active database technology. It presents a natural, flexible and easy to set mechanism for supporting cooperative information systems.
Reference: [4] <author> Y. Breitbart, H. Garcia-Molina, and A. Silberschatz. </author> <title> Overview of multidatabase transaction management. </title> <journal> VLDB journal, </journal> <volume> 1(2) </volume> <pages> 181-239, </pages> <year> 1992. </year>
Reference-contexts: Global information systems are similar to multidatabases (e.g. [27]) in their approach. Both system types seek to support global updates, while preserving site autonomy. Distributed databases [7], unlike global information systems, do not have a full autonomy of their data. Issues in structuring heterogeneous databases are discussed in <ref> [4] </ref>, and others. Federated databases [28] can be implemented based on several architectures. For example, federated databases can be implemented using loosely coupled systems, where the responsibility for understanding the semantics of the global system is transferred to the user.
Reference: [5] <author> A. Brown et al. </author> <title> Principles of CASE Tool Integration. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Such integration architectures are being explored in several different areas of computer science, including Databases where the emphasis is on interoperation and data integration [19], Software Engineering where tool and environment integration issues dominate <ref> [5] </ref>, AI where systems consisting of distributed intelligent agents are being developed and explored [3] and of course, Information Systems [23]. This paper proposes CoopWARE, a generic integration architecture, based on active database technology. It presents a natural, flexible and easy to set mechanism for supporting cooperative information systems.
Reference: [6] <author> A. Carroll. ConversationBuilder: </author> <title> A Collaborative Erector Set. </title> <type> PhD thesis, </type> <institution> University of Illinois, </institution> <year> 1993. </year>
Reference-contexts: These messages form the basis for all communication in the system. The message server has been implemented on top of mbus, an existing public domain software bus technology <ref> [6] </ref>. This, in turn, is dependent on the presence of Unix software sockets; these protocols have been ported to almost all modern computer platforms, including Dos/Windows and Apple machines. Since the basis for integration is this communication, our architecture can incorporate tools running in heterogeneous environments.
Reference: [7] <author> S. Ceri and G. Pelagatti. </author> <title> Distributed Databases: </title> <booktitle> Principles and Systems. </booktitle> <publisher> Mcgraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: Global information systems [24] are systems that involve a large number of information resources distributed over computer networks, with autonomous maintenance of data. Global information systems are similar to multidatabases (e.g. [27]) in their approach. Both system types seek to support global updates, while preserving site autonomy. Distributed databases <ref> [7] </ref>, unlike global information systems, do not have a full autonomy of their data. Issues in structuring heterogeneous databases are discussed in [4], and others. Federated databases [28] can be implemented based on several architectures.
Reference: [8] <author> U. Chakravarthy. </author> <title> Rule management and evaluation: An active DBMS perspective. </title> <journal> ACM SIGMOD Record, </journal> <volume> 18(3) </volume> <pages> 20-28, </pages> <month> Sep </month> <year> 1989. </year>
Reference-contexts: The area of active databases has gained an increasing interest in the research community during the last few years, resulting in numerous models and prototypes. The leading paradigm in this area is the ECA (Event-Condition-Action) that was proposed in the framework of the HiPAC project <ref> [8] </ref>. Many of the ECA-based systems lack global control of an application's set of rules. This may result in non-deterministic behavior which would have disastrous consequences in cooperative information systems.
Reference: [9] <author> W. Cook. </author> <title> Application integration, not application distribution. </title> <booktitle> In ACM OOPS Messenger, Addendum to the Proceedings of OOPSLA 1993, </booktitle> <pages> pages 70-71, </pages> <month> Apr. </month> <year> 1994. </year> <title> Published as ACM OOPS Messenger, </title> <booktitle> Addendum to the Proceedings of OOPSLA 1993, </booktitle> <volume> volume 5, number 2. </volume>
Reference-contexts: This method, in many cases is less effective that the separation of events and conditions to different elements, evaluated at different steps. In addition, the recipes requires a long-term control, while rules in CoopWARE enable a flexible mechanism with short term atomicity enforcement. CORBA <ref> [9] </ref> provides a widely accepted formalism for specifying process communication in a client-server environment. In the CORBA model objects provide services, and clients issue requests. Object references are used for a client to locate the appropriate servers, so that it can direct its requests to them.
Reference: [10] <author> U. Dayal, A. Buchmann, and D. McCarthy. </author> <title> Rules are objects too: A knowledge model for an active object-oriented database model. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object-Oriented Databases, </booktitle> <pages> pages 140-149, </pages> <month> Sep </month> <year> 1988. </year>
Reference-contexts: In accordance with active database conventions <ref> [10] </ref>, each rule consists of three parts, namely an event, a condition and an action.
Reference: [11] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transactional model for long-running activities. </title> <booktitle> In Proceedings of the 17th VLDB, </booktitle> <pages> pages 113-122, </pages> <month> Sep </month> <year> 1991. </year>
Reference-contexts: Federated databases can also be implemented using tightly coupled systems, where a global conceptual schema is used to define the semantics of the global schema. Research in the workflow area has been influenced by the concepts of long running activities <ref> [11] </ref>, multi-system applications [1], polytrans multidatabases federated databases distributed databases heterogeneous databases workflows global information systems internet applications multi-view systems NONE FULL LOCAL AUTONOMY HIGH LOW DATA STRUCTURE actions [29], and application multiactivities [18]. METEOR [22] is an example of a project whose objective is to support multi-system workflow applications.
Reference: [12] <author> O. Etzion. </author> <title> Active interdatabase dependencies. </title> <journal> Information Sciences, </journal> <volume> 75 </volume> <pages> 133-163, </pages> <year> 1993. </year>
Reference-contexts: Consequently, the relationships among services is far more vague than the relationships among actions in an active database. A well defined semantics for these relationships is currently devised, based on previous works (e.g. <ref> [12] </ref>) to support priorities among services.
Reference: [13] <author> O. Etzion. </author> <title> PARDES | a data-driven oriented active database model. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 22(1) </volume> <pages> 7-14, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: Many of the ECA-based systems lack global control of an application's set of rules. This may result in non-deterministic behavior which would have disastrous consequences in cooperative information systems. An alternative approach to the ECA paradigm was proposed in the framework of the PARDES model <ref> [13] </ref> that is aimed at providing a high-level tool for derived data using a data-driven invariant language. The active model, as given in this work, is an extension of the PARDES and other similar models [14].
Reference: [14] <author> A. Gal. </author> <title> TALE | A Temporal Active Language and Execution Model. </title> <type> PhD thesis, </type> <institution> Technion|Israel Institute of Technology, Technion City, Haifa, Israel, </institution> <month> May </month> <year> 1995. </year> <note> Available through the author's WWW home page, http://www.cs.toronto.edu/avigal. </note>
Reference-contexts: The coordinator uses rules to define cooperation among information systems. Its intellectual origins resides in the active database research area, and it uses latest advances in this research area <ref> [14] </ref> to generate a mechanism that maintains the relationships among information systems in a cooperative environment. <p> Request edges are depicted using dotted lines, and represent data element that a service uses, yet its modification does not trigger the service. The dependency graph is used by the coordinator at run-time, based on an execution model as given in <ref> [14] </ref>. The results of events and messages are evaluated and any outgoing edges are triggered. For example, consider the dependency graph as given in Figure 8. Whenever a Rigi-Parses event occurs, Refine's rule is activated. Refine parses the source code and performs the CBC analysis. <p> The active model, as given in this work, is an extension of the PARDES and other similar models <ref> [14] </ref>. It uses the analysis and control capabilities of these models to generate a deterministic, well-understood cooperative architecture. 7 Conclusions We have presented a view of cooperative information systems which is based on the premise that such systems consist of legacy components integrated through an architecture.
Reference: [15] <author> A. Gal, O. Etzion, and A. Segev. </author> <title> Tale | a temporal active language and execution model. </title> <booktitle> In Proc. </booktitle> <address> CAiSE'96, Crete, Greece, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Efficient transmission of bulk data was deemed to be critical (rather than object-by-object retrieval), since that is the intended modus operandi for the integration architecture. The implementation of the rule language and execution engine is currently under design. It is based on work reported in <ref> [15] </ref>, notably the notion of a dependency graph, built by analyzing given rules and data elements. Figure 8 presents a partial dependency graph for the rules of the reverse engineering case study. Events are depicted as triangles, operations as circles, and data elements as rectangles.
Reference: [16] <author> M. Hammer and J. Champy. </author> <title> Re-Engineering the Corporation: A Manifesto for Business Revolution. </title> <publisher> HarperCollins Publishers, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Traditionally, information systems have been defined as software systems consisting of databases, application programs and user interfaces. However, current trends in business organizations point to a paradigm shift in organizational structures, away from traditional, task-based forms and towards goal- or customer-oriented processes <ref> [16] </ref>. These trends are forcing a new view of information systems, hereby referred to as cooperative information systems.
Reference: [17] <author> N. Jennings, L. Varga, R. Aarnts, J. Funchs, and P. Skarek. </author> <title> Transforming standalone expert systems into a community of cooperating agents. </title> <journal> Engineering applications of Artificial Intelligence, </journal> <volume> 6(4) </volume> <pages> 317-331, </pages> <year> 1993. </year>
Reference-contexts: In addition, the model imposes a rigid structure of rules, while Coop-WARE assumes a rule where its last phase (the services) conclude the liability of the central mechanism, thus enabling a simpler transaction model. ARCHON (Architecture for Cooperative Heterogeneous On-line Systems) <ref> [17] </ref> aimed to develop an architecture, software framework and methodology for multi-agent systems for real-world industrial applications in the area of power system control supervision.
Reference: [18] <author> L. Kalinichenko. </author> <title> A declerative framework for capturing dynamic behavior in heterogeneous interoperable information resource environment. </title> <booktitle> In Proceedings of the 3rd RIDE International Workshop on Interoperability in Multidatabase Systems (IMS'93), </booktitle> <month> Apr </month> <year> 1993. </year>
Reference-contexts: Research in the workflow area has been influenced by the concepts of long running activities [11], multi-system applications [1], polytrans multidatabases federated databases distributed databases heterogeneous databases workflows global information systems internet applications multi-view systems NONE FULL LOCAL AUTONOMY HIGH LOW DATA STRUCTURE actions [29], and application multiactivities <ref> [18] </ref>. METEOR [22] is an example of a project whose objective is to support multi-system workflow applications. Having considered the common features of the above mentioned models, we design the integration architecture to support common features while enabling different levels of autonomy, rigid structure and data integration.
Reference: [19] <author> K. Karlapalem, Q. Li, and C. Shum. Hodfa: </author> <title> An architecture framework for homogenizing heterogeneous legacy databases. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 24(1) </volume> <pages> 15-20, </pages> <month> Mar </month> <year> 1995. </year>
Reference-contexts: All these are integrated through an architecture so that the overall system continuously provides useful information services to the organization within which it functions. Such integration architectures are being explored in several different areas of computer science, including Databases where the emphasis is on interoperation and data integration <ref> [19] </ref>, Software Engineering where tool and environment integration issues dominate [5], AI where systems consisting of distributed intelligent agents are being developed and explored [3] and of course, Information Systems [23]. This paper proposes CoopWARE, a generic integration architecture, based on active database technology.
Reference: [20] <author> J. Klein and F. </author> <title> Upton IV. Constraint based transaction management. </title> <journal> IEEE Data Eng. Bull., </journal> <volume> 16(2):20, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: An algorithm is devised to generate and maintain a correct set of interrelated atomic transactions based on the relationships among events and services. A similar approach was taken in transaction models dealing with long transactions (e.g. <ref> [20] </ref>).
Reference: [21] <author> G. Kotik and L. Markosian. </author> <title> Automating software analysis and testing using a program transformation system. </title> <type> Technical report, </type> <institution> Reasoning Systems Inc., </institution> <year> 1989. </year>
Reference-contexts: One set of services common to all interfaces provides facilities for message passing among components. As a concrete example of the integration architecture, suppose that we wish to integrate two reverse engineering tools, Refine and Rigi. Refine is a commercial code analysis tool <ref> [21] </ref> which provides facilities for parsing the code being reverse engineered to generate abstract syntax trees, as well as a high level language for specifying patterns to be matched against abstract syntax trees.
Reference: [22] <author> N. Krishnakumar and A. Sheth. </author> <title> Specifying multi-system workflow applications in meteor. </title> <type> Technical Report TM-24198, </type> <institution> Bellcore, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: METEOR <ref> [22] </ref> is an example of a project whose objective is to support multi-system workflow applications. Having considered the common features of the above mentioned models, we design the integration architecture to support common features while enabling different levels of autonomy, rigid structure and data integration.
Reference: [23] <author> S. Laufmann, S. Spaccapietra, and T. </author> <title> Yokoi, </title> <editor> editors. </editor> <booktitle> Proceedings Third International Conference on Cooperative Information Systems, </booktitle> <address> Vienna, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: being explored in several different areas of computer science, including Databases where the emphasis is on interoperation and data integration [19], Software Engineering where tool and environment integration issues dominate [5], AI where systems consisting of distributed intelligent agents are being developed and explored [3] and of course, Information Systems <ref> [23] </ref>. This paper proposes CoopWARE, a generic integration architecture, based on active database technology. It presents a natural, flexible and easy to set mechanism for supporting cooperative information systems.
Reference: [24] <author> A. Levy, D. Srivastava, and T. Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 5 </volume> <pages> 121-143, </pages> <year> 1995. </year>
Reference-contexts: Distributed databases, heterogeneous databases, multidatabases, federated databases, multi-view systems, workflows, global information systems, Internet applications and many other types of information systems are considered to be cooperative information systems. Global information systems <ref> [24] </ref> are systems that involve a large number of information resources distributed over computer networks, with autonomous maintenance of data. Global information systems are similar to multidatabases (e.g. [27]) in their approach. Both system types seek to support global updates, while preserving site autonomy.
Reference: [25] <author> H. Muller, B. Corrie, and S. Tilley. </author> <title> Spatial and visual representations of software structures. </title> <type> Technical Report Tech. Rep. </type> <institution> TR-74. 086, IBM Canada Ltd., </institution> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: Such patterns can be defined to support the analysis of code by determining, for example, the call- or use-graph structure of a given piece of code. Rigi, on the other hand, is a research prototype <ref> [25] </ref> whose primary function is to assist in program understanding by offering useful visualizations of code structure. Rigi also offers a set of code analysis functions. One would ideally want to use either Refine or Rigi to analyze code and then display the results of the analysis using Rigi.
Reference: [26] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: Representing knowledge about information systems. </title> <journal> ACM Transactions on Information Systems, </journal> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: The information model needs to be supported with an efficient implementation so it does not become a bottleneck. The information model adopted for CoopWARE is based on Telos <ref> [26] </ref>.
Reference: [27] <author> M. Rusinkiewicz et al. OMNIBASE: </author> <title> Design and implementation of a multidatabase system. </title> <booktitle> In Proceedings 1st International Conference on Parallel and Distributed Processing, </booktitle> <pages> pages 162-169, </pages> <address> Dallas, TX, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Global information systems [24] are systems that involve a large number of information resources distributed over computer networks, with autonomous maintenance of data. Global information systems are similar to multidatabases (e.g. <ref> [27] </ref>) in their approach. Both system types seek to support global updates, while preserving site autonomy. Distributed databases [7], unlike global information systems, do not have a full autonomy of their data. Issues in structuring heterogeneous databases are discussed in [4], and others.
Reference: [28] <author> A. Sheth and J. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <year> 1990. </year>
Reference-contexts: Both system types seek to support global updates, while preserving site autonomy. Distributed databases [7], unlike global information systems, do not have a full autonomy of their data. Issues in structuring heterogeneous databases are discussed in [4], and others. Federated databases <ref> [28] </ref> can be implemented based on several architectures. For example, federated databases can be implemented using loosely coupled systems, where the responsibility for understanding the semantics of the global system is transferred to the user.
Reference: [29] <author> A. Sheth, M. Rusinkiewicz, and G. Karabatis. </author> <title> Using polytransactions to manage interdependent data. </title> <editor> In A. Elmagarmid, editor, </editor> <title> Transaction Models for Advanced Database Applications, chapter 14. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Research in the workflow area has been influenced by the concepts of long running activities [11], multi-system applications [1], polytrans multidatabases federated databases distributed databases heterogeneous databases workflows global information systems internet applications multi-view systems NONE FULL LOCAL AUTONOMY HIGH LOW DATA STRUCTURE actions <ref> [29] </ref>, and application multiactivities [18]. METEOR [22] is an example of a project whose objective is to support multi-system workflow applications.
Reference: [30] <author> G. Valetto and G. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In Proceedings of the 7th International Workshop on Computer-Aided Software Engineering (CASE'95), </booktitle> <pages> pages 40-48, </pages> <year> 1995. </year>
Reference-contexts: How each component actually connects to the architecture depends on what kind of access to its internals is available. We support a range of methodologies from black box to white box <ref> [30] </ref> and various shades of gray in between. For example, given that Refine runs on top of LISP, we may want to treat Refine as a black box with which we communicate through an external mediator program.
Reference: [31] <author> M. Whitney et al. </author> <title> Using an integrated toolset for program understanding. </title> <booktitle> In Proceedings of the CAS-CON'95, </booktitle> <pages> pages 262-274, </pages> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Our reported experiences are based primarily on a project whose aim has been to integrate a variety of reverse engineering tools in support of reverse engineering tasks <ref> [31] </ref>. 2 The CoopWARE Integration Archi tecture In a nutshell, an integration architecture provides a generic framework for information exchange and coordination among a variety of existing software systems.
References-found: 31

