URL: http://http.cs.berkeley.edu/~bukowski/masters.ps
Refering-URL: http://http.cs.berkeley.edu/~bukowski/
Root-URL: 
Title: The WALKTHRU Editor: Towards Realistic and Effective Interaction with Virtual Building Environments  
Author: Richard Bukowski Carlo Sequin 
Date: November 2, 1995  
Affiliation: Computer Science Division Department of Electrical Engineering and Computer Science University of California, Berkeley  
Note: Master's Project under the direction of  
Abstract: This thesis describes the development of WALKEDIT, an object placement editor for the Berkeley architectural WALKTHRU system. In addition to incorporating editing operations commonly found in 2D and 3D model editors, two new major results were achieved. First, a system for simple and natural direct manipulation of 3D objects was created. This system, which we call Object Associations, is a software framework that provides a unified method for designing and implementing convenient direct manipulation behaviors for objects in a 3D virtual environment. A combination of nearly realistic pseudophysical behavior and idealized goal-oriented properties is used to disambiguate 2D mouse actions on the display screen into appropriate and natural object motion in the 3D virtual world, and to determine valid and desirable final locations for objects being manipulated. Objects selected for relocation actively look for nearby objects or structures to associate and align themselves with. An automated implicit grouping mechanism falls out of this process. Concept, structure, and our implementation of this framework are presented. Second, the realism of the WALKTHRU real-time rendering system was enhanced by the addition of physical simulation software. A first set of routines provides the virtual user with an adjustable eye height, which is dynamically maintained through a combination of feedback control techniques and discrete time physical simulation. This gives a much more natural feeling to moving through the building, allowing the user to look up and down while walking, and permitting realistic use of stairs and elevators. In a separate experiment, the Lin-Canny closest features algorithm and a fast contact force computation algorithm was integrated with the object associations system, allowing true collision detection and pseudo-static simulation of moving objects. The implementation, tradeoffs, and success of this experiment are presented and discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Airey, John M. </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-Space Subdivision and Potentially Visible Set Calculations. </title> <type> Ph.D. thesis, </type> <institution> UNC Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough <ref> [1, 2, 10] </ref>, or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [2] <author> Airey, John M., John H. Rohlf, and Frederick P. Brooks, Jr. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, </booktitle> <volume> 24, 2 (1990), </volume> <pages> 41-50. </pages>
Reference-contexts: Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough <ref> [1, 2, 10] </ref>, or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [3] <author> AutoCAD Reference Manual, </author> <title> Release 10, </title> <publisher> Autodesk Inc., </publisher> <year> 1990. </year>
Reference-contexts: We do not consider CAD environments such as AutoCAD <ref> [3] </ref> to have direct manipulation interfaces; such tools are based on manipulation via numerical entry or operations such as offset vectors and constraint alignments, and make no pretense of offering natural manipulation of building contents or structure. Architectural environments offer a number of contextual advantages to direct manipulation.
Reference: [4] <author> Baraff, D. </author> <title> Fast Contact Force Computation for Nonpenetrating Rigid Bodies. </title> <booktitle> Proc. of SIGGRAPH '94 (Orlando, </booktitle> <address> FL, </address> <month> Jul. </month> <year> 1994), </year> <pages> pp. 23-34. </pages>
Reference-contexts: First, constraint systems can be difficult to solve at interactive rates, forcing the designers to use limited solution techniques and constraint sets that provide less functionality than one might want. Work on improving the techniques behind constraint solutions is an open mathematical problem <ref> [28, 4, 9] </ref>, one that is outside the scope of this thesis. Second, it is an onerous task for the user to manually specify and maintain the constraint networks needed for direct manipulation [35, 31]. <p> Second, while it can emulate some of the behavior of a physical simulation of the objects in the environment <ref> [4, 27] </ref>, it can be less constraining than our every-day world; objects can pass through one another and remain in physically impossible non-equilibrium positions under the control of suitable associations, which may be application-specific or may depend on the editing mode. <p> We are currently experimenting with a prototype implementation of such a collision detection routine based on the Lin-Canny algorithm that quickly finds closest features in pairs of convex shapes <ref> [32, 4] </ref>. Use of Visibility Information One of the main cues used to disambiguate the depth coordinate during object manipulation is the intersection of the cursor ray with a visible support surface. <p> In WKCM, we have implemented a contact force computation algorithm taken from a paper by David Baraff in SIGGRAPH '94 <ref> [4] </ref>. The paper points out that you can model contact forces on polyhedral, 52 frictionless rigid objects as point forces of two major types. Vertex to face contacts generate a force at the vertex-face intersection point, in a direction purely normal to the face. <p> Also, from physics, a = Af + b where A is a matrix representing masses and inertial forces, and b is a vector representing external forces such as gravity. These conditions define a linear complementarity problem or LCP. Baraff's SIGGRAPH paper <ref> [4] </ref> gives an algorithm for solving it.
Reference: [5] <author> Barlow, M. </author> <title> Of Mice and 3D Input Devices. </title> <booktitle> Computer-Aided Engineering 12, </booktitle> <month> 4 (Apr. </month> <year> 1993), </year> <pages> pp. 54-56. </pages>
Reference-contexts: Tracker radius limitations, wiring and cords, bulky and heavy equipment, and physical interference of the user's real body with the objects in the real world make them physically cumbersome. Most 6 DOF input devices such as the "SpaceBall" <ref> [5] </ref>, "DataGlove," or 3D mice [47] are awkward, tiring to use for an extended period of time, and too expensive for the typical user. They tend to have much lower sampling rates and far higher noise and jitter than 2D devices, due to the limitations of today's 3D tracking technology.
Reference: [6] <author> Bechtel, Inc. WALKTHRU: </author> <title> 3D Animation and Visualization System. Promotional literature, </title> <year> 1991. </year>
Reference-contexts: Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems <ref> [48, 6] </ref>) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [7] <author> Bier, </author> <title> E.A. Snap-Dragging in Three Dimensions. </title> <booktitle> Proc. of the 1990 Symposium on Interactive 3D Graphics (Snowbird, </booktitle> <address> UT, </address> <month> Mar. </month> <year> 1990), </year> <pages> pp. 193-204. </pages>
Reference-contexts: He notes that real-world behavior comes for "free" in a UI, in that the user is familiar with physical behavior from real life and needs very little training to use it well in a virtual environment. More virtual, "magic" tools, such as Eric Bier's snap-dragging <ref> [7] </ref>, come with a learning curve, requiring users to familiarize themselves with a new paradigm for interacting with objects. 5 Figueiredo identifies fast collision detection as a critical physical aspect of intuitive interaction with virtual objects [21], presenting some usability results for various techniques of interacting with objects using collision detection <p> Bier also combines constraints and snapping behavior with 3D widgets to provide an alignment solution for 3D direct manipulation <ref> [7] </ref>. Both methods have the advantage of not only providing the user the ability to manipulate 3D objects with the 2D mouse, but also permitting precise relative positioning by aligning lines, planes, and other geometries more easily than a pure constraint system. <p> These associations usually fall somewhere 17 between physical simulations and mathematical constraints, but can be less formal and more flexible than either. Our approach borrows heavily from several paradigms developed in the realm of interactive computer graphics over the past several decades. It first has notions of snap-dragging <ref> [7] </ref>, but without the need of explicitly dealing with visible alignment manifolds; most alignments are provided automatically by the association procedures rather than explicitly by the user.
Reference: [8] <author> Borning, A. </author> <title> The Programming Aspects of Thinglab, a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Trans. on Programming Languages and Systems 3, </journal> <volume> 4, </volume> <pages> pp. 353-387. </pages>
Reference-contexts: Third, while some associations can be described as constraints, our system does not require the rigid formality and associated solution machinery found in mechanism editors based on underlying geometric constraint systems <ref> [36, 8, 35, 28, 24] </ref>.
Reference: [9] <author> Borning, A. </author> <title> Constraint Hierarchies and their Applications. </title> <booktitle> 1991 IEEE CompCon Spring 1991 Digest of Papers. </booktitle> <publisher> IEEE Computer Society Press: </publisher> <address> Los Alamos, </address> <year> 1991, </year> <pages> pp. 376-381. </pages>
Reference-contexts: First, constraint systems can be difficult to solve at interactive rates, forcing the designers to use limited solution techniques and constraint sets that provide less functionality than one might want. Work on improving the techniques behind constraint solutions is an open mathematical problem <ref> [28, 4, 9] </ref>, one that is outside the scope of this thesis. Second, it is an onerous task for the user to manually specify and maintain the constraint networks needed for direct manipulation [35, 31].
Reference: [10] <author> Brooks, Jr., Frederick P. </author> <title> Walkthrough ADynamic Graphics System for Simulating Virtual Buildings. </title> <booktitle> Proceedings of the 1986 Workshop on Interactive 3D Graphics. </booktitle>
Reference-contexts: Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough <ref> [1, 2, 10] </ref>, or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [11] <author> Brown, Thurman A. </author> <title> Interactive Object Displacement in Building Walkthrough Models. </title> <type> Master's Thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley 1992. </institution>
Reference-contexts: The WALKEDIT project began several years ago with an effort by Thurman Brown to add standard editing operations to the WALKTHRU environment <ref> [11] </ref>. Since then, many new techniques have been added that allow the user to pick up, move, copy, and otherwise manipulate furniture and other objects interactively and intuitively from within the real-time rendering environment used in the original WALKTHRU application [23].
Reference: [12] <author> Bukowski, Richard W. and Carlo H. Sequin. </author> <title> Object Associations: A Simple and Practical Approach to Virtual 3D Manipulation. </title> <booktitle> Proc. of the 1995 Symposium on Interactive 3D Graphics (Monterey, </booktitle> <address> CA, </address> <month> April </month> <year> 1995), </year> <pages> pp. 131-138. </pages>
Reference: [13] <author> Cameron, S. </author> <title> Collision Detection by Four-Dimensional Interference Testing. </title> <booktitle> Proc. of International Conference on Robotics and Automation (1990) pp. </booktitle> <pages> 291-302. </pages>
Reference-contexts: Our bounding sphere cull is also similar to, but simpler than like approaches in the literature, such as four-dimensional sweep volumes <ref> [13, 30] </ref> or spatial tiling techniques such as that used in [34]. To a large degree, such complex culling techniques are made unnecessary by the existing WK cell structure, which produces a comparable result to these approaches in practice.
Reference: [14] <author> Chen, M., Mountford, S., and Sellen, A. </author> <title> A Study in Interactive 3D Rotation using 2D Control Devices. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (August </month> <year> 1988), </year> <pages> pp. 91-97. </pages>
Reference-contexts: Chen's work in 1988 supports this idea by showing that a combination of 2D input devices with these 3D widgets is no less accurate or harder to use than modern 3D, 6 DOF input devices for most 3D manipulation tasks <ref> [14] </ref>. However, even the latest work concedes that 3D widgets have a long way to go before a 3D widget set in a 3D virtual environment can rival the completeness of a 2D UI toolkit and direct manipulation widgets in a 2D application domain [41].
Reference: [15] <author> Codella, C, Jalili, R., Koved, L., Lewis, J., Ling, D., Lipscomb, J., Rabenhorst, D., Wang, C., Norton, A., Sweeney, P., and Turk, G. </author> <title> Interactive Simulation in a Multi-Person Virtual World. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Operating Systems CHI '92 (Monterey, </booktitle> <address> California, </address> <month> May </month> <year> 1992), </year> <pages> pp. 329-334. </pages>
Reference-contexts: far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context <ref> [38, 15, 19] </ref>. A virtual environment system that fully supports direct manipulation in a nontrivial world has yet to be presented. 2.2 Applications of Direct Manipulation to Architectural Environments The body of work on direct manipulation of mechanical or architectural models is relatively limited.
Reference: [16] <author> Cohen, J., Lin, M., Manocha, D., and Ponamgi, M. I-COLLIDE: </author> <title> An Interactive and Exact Collision Detection System for Large-Scale Environments. </title> <booktitle> Proc. of the 1995 Symposium on Interactive 3D Graphics (Monterey, </booktitle> <address> CA, </address> <month> April </month> <year> 1995), </year> <pages> pp. 189-196. </pages>
Reference-contexts: It is only recently that available hardware and software components have become powerful enough to support dynamics in extended interactive models <ref> [16, 19] </ref>. 2.1.5 Combined Techniques and Virtual Environment Frameworks Some approaches combine subsets of these three basic techniques to provide a more complete, structured direct manipulation system. <p> A newer public domain implementation of the Lin-Canny algorithm, called I-COLLIDE, that avoids this problem has been recently presented by Cohen et. al. <ref> [16] </ref>; we will be replacing the Mirtich code with the I-COLLIDE system in the near future. 4.2.4 Contact Force Computation For physical simulation, we need a contact force computation algorithm as well as a collision detector.
Reference: [17] <author> Dingeldein, D. and Lux, G. Theseus++: </author> <title> A High Level User Interface Toolkit for Graphical Applications. Computers and Graphics 17, </title> <booktitle> 2 (March/April 1993), </booktitle> <pages> pp. 147-154. 62 </pages>
Reference-contexts: The tendency of widgets to dominate 3D direct manipulation seems to be a legacy of the older 2D direct manipulation problem, for which we have an established and proven set of 2D constraints and widgets that provide easy-to-use and easy-to-generate 2D direct manipulation interfaces <ref> [17, 25] </ref>. The implicit assumption is that the techniques that worked in 2D will work equally well in 3D.
Reference: [18] <author> Khorramabadi, Delnaz. </author> <title> A Walk Through the Planned CS Building. </title> <type> Master's Thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley 1991. </institution>
Reference-contexts: Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU <ref> [18, 23, 44] </ref>, the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [19] <author> Faigle, C., Fox, G., Furmanski, W., Niemieo, J., and Simoni, D. </author> <title> Integrating Virtual Environments with High Performance Computing. </title> <booktitle> Proc. of the 1993 IEEE Annual Virtual Reality International Symposium (Seattle, </booktitle> <address> Washington, </address> <year> 1993), </year> <pages> pp. 62-68. </pages>
Reference-contexts: It is only recently that available hardware and software components have become powerful enough to support dynamics in extended interactive models <ref> [16, 19] </ref>. 2.1.5 Combined Techniques and Virtual Environment Frameworks Some approaches combine subsets of these three basic techniques to provide a more complete, structured direct manipulation system. <p> far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context <ref> [38, 15, 19] </ref>. A virtual environment system that fully supports direct manipulation in a nontrivial world has yet to be presented. 2.2 Applications of Direct Manipulation to Architectural Environments The body of work on direct manipulation of mechanical or architectural models is relatively limited.
Reference: [20] <author> Fiala, J. </author> <title> Generation of Smooth Trajectories Without Planning. </title> <type> NIST Internal Report IR4622, </type> <institution> National Institute of Standards and Technology, Gaithersburg, MD, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: First, the object is picked up or grabbed by some convenient handle. Second, a very quick, gross positioning step is used ("put that there"); this is often a large hand or body motion to get the object into place <ref> [20] </ref>. This step is characterized by avoidance of collisions and physics; the intent is to get the object to the vicinity of the goal position as quickly and easily as possible.
Reference: [21] <author> Figueiredo, M., Bohm, K., and Teixeira, J. </author> <title> Advanced Interaction Techniques in Virtual Environments. Computers and Graphics 17, </title> <booktitle> 6 (November/December 1993), </booktitle> <pages> pp. 655-661. </pages>
Reference-contexts: More virtual, "magic" tools, such as Eric Bier's snap-dragging [7], come with a learning curve, requiring users to familiarize themselves with a new paradigm for interacting with objects. 5 Figueiredo identifies fast collision detection as a critical physical aspect of intuitive interaction with virtual objects <ref> [21] </ref>, presenting some usability results for various techniques of interacting with objects using collision detection in toy environments. However, it is important that any direct manipulation scheme address the balance between physical simulation and magic approaches like snap-dragging.
Reference: [22] <author> Funkhouser, T.A. and Sequin, C.H. </author> <title> Adaptive Display Algorithm for Interactive Frame Rates during Visualization of Complex Virtual Environments. </title> <booktitle> Proc. of SIGGRAPH '93 (Anaheim, </booktitle> <address> CA, </address> <month> Aug. </month> <year> 1993), </year> <pages> pp. 247-254. </pages>
Reference-contexts: Geometric and database toolkits allow high-level coding and ease of modification. Our object associations normally cause little computational overhead to the WALKTHRU system. This is an important concern, since keeping the response time of the system fast and interactive is a crucial aspect of its usability and user-friendliness <ref> [22] </ref>. The result is a technique that makes object placement quick and accurate, works with "drag-and-drop" as well as "cut and paste" interaction techniques, can provide desirable local object behavior and an automated grouping facility, and greatly reduces the need for multiple editing modes in the user interface.
Reference: [23] <author> Funkhouser, Thomas A. </author> <title> Database and Display Algorithms for Interactive Visualization of Architectural Models. </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Division(EECS), University of California, Berkeley 1993. </institution>
Reference-contexts: Since then, many new techniques have been added that allow the user to pick up, move, copy, and otherwise manipulate furniture and other objects interactively and intuitively from within the real-time rendering environment used in the original WALKTHRU application <ref> [23] </ref>. Such interaction is facilitated by a newly developed 3D manipulation paradigm, called object associations, which provides intuitive object behaviors. <p> Physical simulation augments other methods, it does not replace them. A major problem with physical or dynamics-based systems is that they tend to be limited to small environments (one room or a few objects) in order to maintain interactive speeds. The relationship of usability to speed is well established <ref> [49, 23] </ref>; in order to maintain usable frame rates for interaction, the fastest of modern CPUs and most advanced simulation techniques must be used. <p> Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU <ref> [18, 23, 44] </ref>, the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [24] <author> Gleicher, M. Briar: </author> <title> A Constraint-Based Drawing Program. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Computing Systems CHI '92 (Monterey, </booktitle> <address> CA, </address> <month> May </month> <year> 1992), </year> <pages> pp. 661-662. </pages>
Reference-contexts: One example of an applied system is Gleicher's Briar system <ref> [24] </ref>, which provides an intuitive method for "rubberbanding" objects together in natural ways. Unfortunately, Briar requires extensive descriptions of how the objects work before they can be manipulated, and those descriptions may only be defined in terms of a limited set of linear constraints . <p> Third, while some associations can be described as constraints, our system does not require the rigid formality and associated solution machinery found in mechanism editors based on underlying geometric constraint systems <ref> [36, 8, 35, 28, 24] </ref>.
Reference: [25] <author> Gray, M., de Bear, D., Foley, J., and Mullet, K. </author> <title> Coupling Application Design and User Interface Design. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Operating Systems CHI '92 (Monterey, </booktitle> <address> California, </address> <month> May </month> <year> 1992), </year> <pages> pp. 658-658. </pages>
Reference-contexts: The tendency of widgets to dominate 3D direct manipulation seems to be a legacy of the older 2D direct manipulation problem, for which we have an established and proven set of 2D constraints and widgets that provide easy-to-use and easy-to-generate 2D direct manipulation interfaces <ref> [17, 25] </ref>. The implicit assumption is that the techniques that worked in 2D will work equally well in 3D.
Reference: [26] <author> Greenberg, D. </author> <title> More Accurate Simulations at Faster Rates. </title> <journal> IEEE Computer Graphics and Applications 11, </journal> <month> 1 (January </month> <year> 1991), </year> <pages> pp. 23-29. </pages>
Reference-contexts: In fact, the modeling problem provides many more difficulties than the rendering problem. People have frequently asked me "How long did it take to render the picture?" Rarely do questions relating to the duration of modeling tasks arise. Donald Greenberg, Jan. 1991 <ref> [26] </ref> Berkeley's building walkthrough program (WALKTHRU) was intended to provide the user with the ability to move in real time through models of large buildings fully populated with furniture.
Reference: [27] <author> Hahn, J.K. </author> <title> Realistic Animation of Rigid Bodies. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (Aug. </month> <year> 1988), </year> <pages> pp. 299-208. </pages>
Reference-contexts: Second, while it can emulate some of the behavior of a physical simulation of the objects in the environment <ref> [4, 27] </ref>, it can be less constraining than our every-day world; objects can pass through one another and remain in physically impossible non-equilibrium positions under the control of suitable associations, which may be application-specific or may depend on the editing mode.
Reference: [28] <author> Helm, R., Huynh, T., Lassez, C., and Marriott, K. </author> <title> Linear Constraint Technology for Interactive Graphic Systems. </title> <booktitle> Proc. of Graphics Interface '92 (Vancouver, </booktitle> <address> BC, Canada, </address> <month> May </month> <year> 1992), </year> <pages> pp. 301-309. </pages>
Reference-contexts: First, constraint systems can be difficult to solve at interactive rates, forcing the designers to use limited solution techniques and constraint sets that provide less functionality than one might want. Work on improving the techniques behind constraint solutions is an open mathematical problem <ref> [28, 4, 9] </ref>, one that is outside the scope of this thesis. Second, it is an onerous task for the user to manually specify and maintain the constraint networks needed for direct manipulation [35, 31]. <p> Third, while some associations can be described as constraints, our system does not require the rigid formality and associated solution machinery found in mechanism editors based on underlying geometric constraint systems <ref> [36, 8, 35, 28, 24] </ref>.
Reference: [29] <author> Houde, S. </author> <title> Iterative Design of an Interface for Easy 3D Direct Manipulation. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Operating Systems CHI '92 (Monterey, </booktitle> <address> California, </address> <month> May </month> <year> 1992), </year> <pages> pp. 135-141. </pages>
Reference-contexts: Likewise, cups, books, and other common objects always sit on a supporting surface. Users have shown a marked tendency to be comfortable with restrictions placed on 3D manipulation based on how an object "should" behave <ref> [29] </ref>. <p> In such cases, the system forces the user to go back to a CAD style, non-direct manipulation interface. Houde at Apple's user interface research group provides perhaps the most easy-to-use approach <ref> [29] </ref>, one which to some degree parallels our object association system. Houde does a series of user interface studies which attempt to develop a manipulation technique suitable for arranging furniture in virtual rooms. <p> orientation (rotating about the normal of the plane), and lifting (for stacking objects or placing them atop one another). 3. "Creating a composite mode for allowing easy access to rotation [about the plane normal] and translation [in the plane] allows users to make repetitive position adjustments in a smooth manner." <ref> [29] </ref> 4. "Reducing the number of possible degrees of 3-D manipulation freedom via context specific con straints, contributes to ease of use and a user's feeling of control in a 3-D environment." [29] Houde uses a bounding box with attached "narrative handles" (iconic handles with shapes that represent the handle's action) <p> plane normal] and translation [in the plane] allows users to make repetitive position adjustments in a smooth manner." <ref> [29] </ref> 4. "Reducing the number of possible degrees of 3-D manipulation freedom via context specific con straints, contributes to ease of use and a user's feeling of control in a 3-D environment." [29] Houde uses a bounding box with attached "narrative handles" (iconic handles with shapes that represent the handle's action) as a 3D widget. The user manipulates the object via these handles, implicitly selecting the manipulation mode based on the chosen handle.
Reference: [30] <author> Hubbard, </author> <title> P.M. Interactive Collision Detection. </title> <booktitle> Proc. of IEEE Symposium on Research Frontiers in Virtual Reality (October 1993). </booktitle>
Reference-contexts: Our bounding sphere cull is also similar to, but simpler than like approaches in the literature, such as four-dimensional sweep volumes <ref> [13, 30] </ref> or spatial tiling techniques such as that used in [34]. To a large degree, such complex culling techniques are made unnecessary by the existing WK cell structure, which produces a comparable result to these approaches in practice.
Reference: [31] <author> Kurlander, D. and Feiner, S. </author> <title> Inferring Constraints from Multiple Snapshots. </title> <journal> ACM Transactions on Graphics 12, </journal> <month> 4 (October </month> <year> 1993), </year> <pages> pp. 277-304. </pages>
Reference-contexts: Work on improving the techniques behind constraint solutions is an open mathematical problem [28, 4, 9], one that is outside the scope of this thesis. Second, it is an onerous task for the user to manually specify and maintain the constraint networks needed for direct manipulation <ref> [35, 31] </ref>. <p> Kurlander takes a different approach, allowing the user to feed the system "snapshots" of the configuration of the objects to be manipulated, from which the system infers and applies all possible constraints that are not invalidated by any snapshot <ref> [31] </ref>. Myers' approach is prone to underestimation, if the computer doesn't guess a constraint; in this case, the user must go back and explicitly add it. Likewise, Kurlander goes to the other extreme and overestimates.
Reference: [32] <author> Lin, M.C. and Canny, J.F. </author> <title> A fast algorithm for incremental distance calculation. </title> <booktitle> International Conference on Robotics and Automation, IEEE (May 1991), </booktitle> <pages> pp. 1008-1014. </pages>
Reference-contexts: We are currently experimenting with a prototype implementation of such a collision detection routine based on the Lin-Canny algorithm that quickly finds closest features in pairs of convex shapes <ref> [32, 4] </ref>. Use of Visibility Information One of the main cues used to disambiguate the depth coordinate during object manipulation is the intersection of the cursor ray with a visible support surface.
Reference: [33] <author> Lin, </author> <title> M.C. Efficient Collision Detection for Animation and Robotics. </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: simulation-oriented object data such as center of mass and moment of inertia. 48 old features are used as a starting point, finding the new features is very fast if the objects only moved a small amount; given the "small motion" assumption, run time of the incremental update is expected constant <ref> [33] </ref>. Brian Mirtich's implementation of the algorithm [34] was ported to the Walkthrough environment and integrated into WKCM.
Reference: [34] <author> Mirtich, B. and Canny, J. </author> <title> Impulse-based Simulation of Rigid Bodies. </title> <booktitle> Proc. of the 1995 Symposium on Interactive 3D Graphics (Monterey, </booktitle> <address> CA, </address> <month> April </month> <year> 1995), </year> <pages> pp. 181-188. 63 </pages>
Reference-contexts: Brian Mirtich's implementation of the algorithm <ref> [34] </ref> was ported to the Walkthrough environment and integrated into WKCM. The polyobject representation uses Mirtich's structures for the convex sub-pieces, so there is no translation layer involved; the library can directly call Mirtich's functions on the relevant subpart of two polyobjects to find their closest features. <p> Our bounding sphere cull is also similar to, but simpler than like approaches in the literature, such as four-dimensional sweep volumes [13, 30] or spatial tiling techniques such as that used in <ref> [34] </ref>. To a large degree, such complex culling techniques are made unnecessary by the existing WK cell structure, which produces a comparable result to these approaches in practice.
Reference: [35] <author> Myers, </author> <title> B.A. Creating User Interfaces using Programming by Example, Visual Programming, and Constraints. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 12, </volume> <month> 2 (Apr. </month> <year> 1990), </year> <pages> pp. 143-177. </pages>
Reference-contexts: Work on improving the techniques behind constraint solutions is an open mathematical problem [28, 4, 9], one that is outside the scope of this thesis. Second, it is an onerous task for the user to manually specify and maintain the constraint networks needed for direct manipulation <ref> [35, 31] </ref>. <p> Brad Myers attempts to solve the constraint maintenance problem by having the system try to guess which constraints the user wishes to impose; ideally, this reduces the problem to a matter of the user saying "yes" or "no" to the computer's guesses <ref> [35] </ref>. Unfortunately, answering the computers' constant requests for confirmation can still be annoying, and the system will inevitably miss some constraints, which sends the user back to manual entry. <p> Third, while some associations can be described as constraints, our system does not require the rigid formality and associated solution machinery found in mechanism editors based on underlying geometric constraint systems <ref> [36, 8, 35, 28, 24] </ref>.
Reference: [36] <author> Nelson, G. Juno, </author> <title> a Constraint-Based Graphics System. </title> <booktitle> Proc. of SIGGRAPH '85 (San Fransisco, </booktitle> <address> CA, </address> <month> Jul. </month> <pages> 22-26, </pages> <year> 1985). </year> <booktitle> In Computer Graphics 19, </booktitle> <month> 3 (Jul. </month> <year> 1985), </year> <pages> pp. 235-243. </pages>
Reference-contexts: Third, while some associations can be described as constraints, our system does not require the rigid formality and associated solution machinery found in mechanism editors based on underlying geometric constraint systems <ref> [36, 8, 35, 28, 24] </ref>.
Reference: [37] <author> Nielson, G. and Olsen, D. </author> <title> Direct Manipulation Techniques for 3D Objects Using 2D Locator Devices. </title> <booktitle> Proc. of the 1986 Workshop on Interactive 3-D Graphics (Chapel Hill, </booktitle> <address> NC, </address> <month> Oct. </month> <year> 1986), </year> <pages> pp. 175-182. </pages>
Reference-contexts: This construct is directly manipulated with the mouse to move the object in a clearly constrained way specific to the widget type. Neilson and Olsen provide an overview of many of the earlier widget-based techniques such as transformation and rotation handles <ref> [37] </ref>. Later work either improved the widgets themselves, such as the ARCBALL work which removed the hysteresis from the earlier "crystal ball" manipulator [39], or explored new, specialized 3D widget types, such as recent work at Brown on 3D widget classes based on deformation and constraint linkages [51, 41].
Reference: [38] <author> Shaw, C., Liang, J., Green, M., and Sun, Y. </author> <title> The Decoupled Simulation Model for Virtual Reality Systems. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Operating Systems CHI '92 (Monterey, </booktitle> <address> California, </address> <month> May </month> <year> 1992), </year> <pages> pp. 321-328. </pages>
Reference-contexts: far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context <ref> [38, 15, 19] </ref>. A virtual environment system that fully supports direct manipulation in a nontrivial world has yet to be presented. 2.2 Applications of Direct Manipulation to Architectural Environments The body of work on direct manipulation of mechanical or architectural models is relatively limited.
Reference: [39] <author> Shoemake, K. ARCBALL: </author> <title> A User Interface for Specifying Three-Dimensional Orientation Using a Mouse. </title> <booktitle> Proc. of Graphics Interface '92 (Vancouver, </booktitle> <address> BC, Canada, </address> <month> May </month> <year> 1992), </year> <pages> pp. 151-156. </pages>
Reference-contexts: Neilson and Olsen provide an overview of many of the earlier widget-based techniques such as transformation and rotation handles [37]. Later work either improved the widgets themselves, such as the ARCBALL work which removed the hysteresis from the earlier "crystal ball" manipulator <ref> [39] </ref>, or explored new, specialized 3D widget types, such as recent work at Brown on 3D widget classes based on deformation and constraint linkages [51, 41].
Reference: [40] <author> Smith, R. </author> <title> Experiences with Alternate Reality Kit: An Example of the Tension Between Literalism and Magic. </title> <journal> IEEE Computer Graphics and Applications 7, </journal> <month> 9 (September </month> <year> 1987), </year> <pages> pp. 42-50. </pages>
Reference-contexts: Some interesting work has been done to determine which aspects of the real world are the most helpful to direct manipulation in virtual environments. Smith identifies the balance of functionality between physical and "magic" (non-physical) behavior in Xerox PARC's Virtual Reality Kit <ref> [40] </ref>. He notes that real-world behavior comes for "free" in a UI, in that the user is familiar with physical behavior from real life and needs very little training to use it well in a virtual environment. <p> We would like to try for the best of both worlds: a mechanism that will provide the structure for, and encourage the interface programmer to provide, the proper tension between realism and virtual-world magic <ref> [40] </ref>. 15 Applying the Physical/Teleological Balance in WALKEDIT In WALKEDIT, we are primarily concerned with keeping objects supported against gravity, having them attached to and thus properly aligned with the ceiling, walls, or vertical surfaces of other objects, or having objects aligned with respect to each other.
Reference: [41] <author> Snibbe, S., Herndon, K., Robbins, D., Conner, D., and Van Dam, A. </author> <title> Using Deformations to Explore 3D Widget Design. </title> <booktitle> Proc. of SIGGRAPH '92 (Chicago, </booktitle> <address> Illinois, </address> <month> July 26-31, </month> <year> 1992). </year> <booktitle> In Computer Graphics 26, </booktitle> <month> 2 (July </month> <year> 1992), </year> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 351-352. </pages>
Reference-contexts: Later work either improved the widgets themselves, such as the ARCBALL work which removed the hysteresis from the earlier "crystal ball" manipulator [39], or explored new, specialized 3D widget types, such as recent work at Brown on 3D widget classes based on deformation and constraint linkages <ref> [51, 41] </ref>. Most commercial direct manipulation systems that are not true CAD systems, such as Silicon Graphics' Inventor modeling system [42], use 3D widgets to provide their direct manipulation capabilities. <p> However, even the latest work concedes that 3D widgets have a long way to go before a 3D widget set in a 3D virtual environment can rival the completeness of a 2D UI toolkit and direct manipulation widgets in a 2D application domain <ref> [41] </ref>. Standard 3D widgets perform well if the manipulation tasks are geometrically simple, involving only translations along or rotations around clearly defined axes, such as local or global coordinate axes.
Reference: [42] <author> Strauss, P., and Carey, R. </author> <title> An Object-Oriented 3D Graphics Toolkit. </title> <booktitle> Proc. of SIGGRAPH '92 (Chicago, </booktitle> <address> Illinois, </address> <month> July 26-31, </month> <year> 1992). </year> <booktitle> In Computer Graphics 26, </booktitle> <month> 2 (July </month> <year> 1992), </year> <booktitle> ACM SIGGRAPH, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 341-349. </pages>
Reference-contexts: Most commercial direct manipulation systems that are not true CAD systems, such as Silicon Graphics' Inventor modeling system <ref> [42] </ref>, use 3D widgets to provide their direct manipulation capabilities.
Reference: [43] <author> Teller, S.J., and Sequin, C.H. </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <booktitle> Proc. </booktitle> <address> of SIG-GRAPH '91 (Las Vegas, Nevada, </address> <month> Jul. </month> <title> 28-Aug. </title> <booktitle> 2, 1991). In Computer Graphics, </booktitle> <volume> 25, </volume> <month> 4 (Jul. </month> <year> 1991), </year> <pages> pp. 61-69. </pages>
Reference-contexts: Then, a general search is started in the vicinity of the selected object, relying on our cell-based spatial subdivision structure used for visibility precomputation and observer tracking <ref> [43] </ref>.
Reference: [44] <author> Teller, Seth J. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Other 3D direct manipulation design efforts concentrate on providing VR frameworks within which direct manipulation techniques can be embedded in a reasonable fashion. Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU <ref> [18, 23, 44] </ref>, the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems [48, 6]) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [45] <author> Van Emmerik, M. </author> <title> Direct Manipulation Technique for Specifying 3D Object Transformations with a 2D Input Device. </title> <booktitle> Computer Graphics Forum 9, </booktitle> <month> 4 (December </month> <year> 1990), </year> <pages> pp. 355-361. </pages>
Reference-contexts: For example, Van Emmerik combines CAD views with both constraints and "jacks," a type of 3D widget, to provide a complete solution for 6 DOF positioning via direct manipulation <ref> [45, 46] </ref>. Bier also combines constraints and snapping behavior with 3D widgets to provide an alignment solution for 3D direct manipulation [7].
Reference: [46] <author> Van Emmerik, M. </author> <title> Interactive Design of 3D Models with Geometric Constraints. </title> <booktitle> Visual Computer 7, </booktitle> <month> 5 (September </month> <year> 1991), </year> <pages> pp. 309-325. </pages>
Reference-contexts: For example, Van Emmerik combines CAD views with both constraints and "jacks," a type of 3D widget, to provide a complete solution for 6 DOF positioning via direct manipulation <ref> [45, 46] </ref>. Bier also combines constraints and snapping behavior with 3D widgets to provide an alignment solution for 3D direct manipulation [7].
Reference: [47] <author> Venolia, D. </author> <title> Facile 3D Direct Manipulation. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Computing Systems CHI 93 (Amsterdam, </booktitle> <address> Netherlands, </address> <month> Apr. </month> <year> 1993), </year> <pages> pp. 31-36. </pages>
Reference-contexts: Tracker radius limitations, wiring and cords, bulky and heavy equipment, and physical interference of the user's real body with the objects in the real world make them physically cumbersome. Most 6 DOF input devices such as the "SpaceBall" [5], "DataGlove," or 3D mice <ref> [47] </ref> are awkward, tiring to use for an extended period of time, and too expensive for the typical user. They tend to have much lower sampling rates and far higher noise and jitter than 2D devices, due to the limitations of today's 3D tracking technology.
Reference: [48] <author> Virtus Walkthrough. Promotional literature, </author> <year> 1991. </year>
Reference-contexts: Unfortunately, most non-trivial VR systems so far have either no interaction methods at all (such as our basic WALKTHRU [18, 23, 44], the UNC walkthrough [1, 2, 10], or the various commercial walkthrough systems <ref> [48, 6] </ref>) or have an "open interface" that supports attaching widgets to them, without many widgets actually implemented in a nontrivial context [38, 15, 19].
Reference: [49] <author> Ware, C. and Balakrishnan, R. </author> <title> Reaching for Objects in VR Displays: Lag and Frame Rate. </title> <journal> ACM Transactions on Computer-Human Interaction 1, </journal> <month> 4 (December </month> <year> 1994), </year> <pages> pp. 331-356. </pages>
Reference-contexts: Physical simulation augments other methods, it does not replace them. A major problem with physical or dynamics-based systems is that they tend to be limited to small environments (one room or a few objects) in order to maintain interactive speeds. The relationship of usability to speed is well established <ref> [49, 23] </ref>; in order to maintain usable frame rates for interaction, the fastest of modern CPUs and most advanced simulation techniques must be used.
Reference: [50] <author> Yoshimura, T., Nakamura, Y., and Sugiura, M. </author> <title> 3D Direct Manipulation Interface: </title> <booktitle> Development of the Zashiki-Warashi System. Computers and Graphics 18, 2 (March/April 1994), </booktitle> <pages> pp. 201-207. </pages>
Reference-contexts: A purely physical system can force the user to go through unnecessary contortions to accomplish a task that can easily be expressed by a simple, nonphysical constraint: an example is the Zashiki-Warashi system by Yoshimura <ref> [50] </ref>, which allows users to arrange furniture by "dropping" items with a gravity simulation. The approach worked well for tables, chairs, and books, but made it difficult to affix pictures or shelves to walls. Physical simulation augments other methods, it does not replace them. <p> Some systems have gotten around this problem by going to physical simulation, such as the Zashiki-Warashi "virtual room construction" software <ref> [50] </ref>, which provides the user with a 3D, 6 DOF tracked wand pointer with which objects can be "picked up," then dropped under gravitic force, which enforces a "reasonable" resting pose for the object.
Reference: [51] <author> Zeleznik, R., Herndon, K., Robbins, D., Huang, N., Meyer, T., Parker, N., and Hughes, J. </author> <title> An Interactive 3D Toolkit for Constructing 3D Widgets. </title> <booktitle> Proc. of SIGGRAPH '93 (Anaheim, </booktitle> <address> CA, </address> <month> Aug. </month> <year> 1993), </year> <pages> pp. 81-84. </pages>
Reference-contexts: Later work either improved the widgets themselves, such as the ARCBALL work which removed the hysteresis from the earlier "crystal ball" manipulator [39], or explored new, specialized 3D widget types, such as recent work at Brown on 3D widget classes based on deformation and constraint linkages <ref> [51, 41] </ref>. Most commercial direct manipulation systems that are not true CAD systems, such as Silicon Graphics' Inventor modeling system [42], use 3D widgets to provide their direct manipulation capabilities.
Reference: [52] <author> Zyda, Michael J., David R. Pratt, James G. Monahan, and Kalin P. Wilson. NPSNET: </author> <title> Constructing a 3D virtual world. </title> <booktitle> ACM SIGGRAPH Special Issue on 1992 Symposium on Interactive 3D Graphics, </booktitle> <month> March, </month> <year> 1992. </year> <month> 64 </month>
Reference-contexts: NPSNET, an interactive multi-user virtual environment which is already in place, provides a real-world demonstration of the feasibility of such environments <ref> [52] </ref>. 58 6 Conclusion The goal of the WALKEDIT project was to construct a placement editor for real-time interactive walk-through of large building databases.
References-found: 52

