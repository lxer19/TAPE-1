URL: http://cs.uni-bonn.de/~marek/publications/proc_cpm97.ps.Z
Refering-URL: http://cs.uni-bonn.de/~marek/index-en.html
Root-URL: http://cs.uni-bonn.de
Email: Email:berman@cse.psu.edu  Email:marek@cs.uni-bonn.de  Email:larmore@cs.unlv.edu  Email:wojtekpl@mimuw.edu.pl and rytter@mimuw.edu.pl.  
Title: On the Complexity of Pattern Matching for Highly Compressed Two-Dimensional Texts example, compressed 2d-matching is
Author: Piotr Berman Marek Karpinski Lawrence L. Larmore Wojciech Plandowski Wojciech Rytter 
Address: Park, PA16802, USA  Bonn, D-53117, Bonn, Germany.  Nevada, Las Vegas, NV  Bonn, Germany.  
Affiliation: Dept. of Computer Science Eng., Pensylvania State University, University  Dept. of Computer Science, University of  Department of Computer Science, University of  Institut Informatik V, Universitat  
Note: For  This research was partially supported by the DFG Grant KA 673/4-1  89154-4019. Research partially supported by National Science Foundation grant CCR-9503441. Part of this work was done while the author was visiting  Instytut Informatyki, Uniwersytet Warszawski, Banacha 2, 02-097 Warszawa, Poland. Supported by the grant KBN 8T11C01208.  
Abstract: We consider the complexity of problems related to 2-dimensional texts (2d-texts) described succinctly. In a succinct description, larger rectangular sub-texts are defined in terms of smaller parts in a way similar to that of Lempel-Ziv compression for 1-dimensional texts, or in shortly described strings as in [9], or in hierarchical graphs described by context-free graph grammars. A given 2d-text T with many internal repetitions can have a hierarchical description (denoted Compress(T )) which is up to exponentially smaller and which can be the only part of the input for a pattern-matching algorithm which gives information about T . Such a hierarchical description is given in terms of a straight-line program, see [9] or, equivalently, a 2-dimensional grammar. We consider compressed pattern-matching, where the input consists of a 2d-pattern P and of a hierarchical description of a 2d-text T , and fully compressed pattern-matching, where the input consists of hierarchical descriptions of both the pattern P and the text T . For 1-dimensional strings there exist polynomial-time deterministic algorithms for these problems, for similar types of succinct text descriptions [2, 6, 8, 9]. We show that the complexity dramatically increases in a 2-dimensional setting. On the other hand, we give efficient algorithms for the related problems of randomized equality We also show the surprising fact that the compressed size of a subrectangle of a compressed two testing and testing for a given occurrence of an uncompressed pattern.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman, </author> <title> The design and analysis of computer algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1974. </year>
Reference-contexts: Define a k fi 2 n 2d-text A by: A i;m = C i ( e m). Then the 3SAT question is equivalent to the following: does A contain a column consisting of k 1's (i.e. the pattern <ref> [1] </ref> 1 m )? We will reduce 3SAT to the compressed matching problem by showing how to compress A to an SLP with O (kn) statements. <p> We define the pattern and the test as follows: P 1 [0] 1 st U S 1 V <ref> [1] </ref> 2 m S 2 [0] 2 n The subrectangles S i 's are stripes of the text T . Observe first that T contains P if and only if there exists a column of T , say c, that contains P . <p> For each variable, edge and corner queries are stored in a list. The data structure for storing strip queries is more sophisticated. For each variable it is a 2-3-tree <ref> [1] </ref> in which keys are positions of strip rectangles in the variable. Recall that 2-3 trees provide operations split and join in O (log s) time where s is the number of elements in the tree.
Reference: [2] <author> A. Amir, G. Benson and M. Farach, </author> <title> Let sleeping files lie: pattern-matching in Z-compressed files, </title> <booktitle> in SODA'94. </booktitle>
Reference: [3] <author> A. Amir, G. Benson, </author> <title> Efficient two dimensional compressed matching, </title> <booktitle> Proc. of the 2nd IEEE Data Compression Conference 279-288 (1992). </booktitle>
Reference: [4] <author> A. Amir, G. Benson and M. Farach, </author> <title> Optimal two-dimensional compressed matching, </title> <booktitle> in ICALP'94 pp.215-225. </booktitle>
Reference-contexts: The only constants in our SLP's are symbols of an alphabet, interpreted as 1 fi 1 images. We view SLP's as compressed (descriptions of) images. The complexity of basic string problems for one dimensional texts is polynomial, see <ref> [4, 6, 8, 10] </ref>. Surprisingly, the complexity jumps if we pass to two dimensions. The compressed size of a subrectangle of a compressed two dimensional array A can be exponential with respect to the compressed size of A, though such a situation cannot occur in the 1-dimensional case.
Reference: [5] <author> M. Crochemore and W. Rytter, </author> <title> Text Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> New York (1994). </address>
Reference: [6] <author> M. Farach and M. </author> <title> Thorup, String matching in Lempel-Ziv compressed strings, </title> <booktitle> in STOC'95, </booktitle> <pages> pp. 703-712. </pages>
Reference-contexts: The only constants in our SLP's are symbols of an alphabet, interpreted as 1 fi 1 images. We view SLP's as compressed (descriptions of) images. The complexity of basic string problems for one dimensional texts is polynomial, see <ref> [4, 6, 8, 10] </ref>. Surprisingly, the complexity jumps if we pass to two dimensions. The compressed size of a subrectangle of a compressed two dimensional array A can be exponential with respect to the compressed size of A, though such a situation cannot occur in the 1-dimensional case. <p> By Lemma 3.1 9 there is an algorithm which solves the compressed pattern checking problem in O (njP j) time. We improve this by replacing n by log N log m. This is similar to the approach of <ref> [6] </ref>. If the 2d-text is not very highly compressed then log (N ) is close to log (n). The idea behind the algorithm is to consider point tests in groups, called a queries. Denote by V a text which is generated by a variable V . <p> Implementation of the Split operation, if it is not a division, requires merging 2-3 trees and this may result in a large number of splits of 2-3 trees. Fortunately, it is possible to prove the following lemma, using arguments similar to those of <ref> [6] </ref>. Lemma 6.3 The number of splits of 2-3 trees in algorithm CHECKING is O (m log N ). Theorem 6.4 The algorithm CHECKING works in O (jP j + n + (m log N )(log m)) time.
Reference: [7] <author> M.R. Garey and D.S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman (1979). </publisher>
Reference: [8] <author> L. Gasieniec, M. Karpinski, W. Plandowski and W. Rytter, </author> <title> Efficient Algorithms for Compressed Strings. </title> <booktitle> in proceedings of the SWAT'96 (1996). </booktitle>
Reference-contexts: The only constants in our SLP's are symbols of an alphabet, interpreted as 1 fi 1 images. We view SLP's as compressed (descriptions of) images. The complexity of basic string problems for one dimensional texts is polynomial, see <ref> [4, 6, 8, 10] </ref>. Surprisingly, the complexity jumps if we pass to two dimensions. The compressed size of a subrectangle of a compressed two dimensional array A can be exponential with respect to the compressed size of A, though such a situation cannot occur in the 1-dimensional case.
Reference: [9] <author> M. Karpinski, W. Rytter and A. Shinohara, </author> <title> Pattern-matching for strings with short description, in Combinatorial Pattern Matching, </title> <year> 1995. </year>
Reference: [10] <author> D. Knuth, </author> <title> The Art of Computing, Vol. II: Seminumerical Algorithms. Second edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: The only constants in our SLP's are symbols of an alphabet, interpreted as 1 fi 1 images. We view SLP's as compressed (descriptions of) images. The complexity of basic string problems for one dimensional texts is polynomial, see <ref> [4, 6, 8, 10] </ref>. Surprisingly, the complexity jumps if we pass to two dimensions. The compressed size of a subrectangle of a compressed two dimensional array A can be exponential with respect to the compressed size of A, though such a situation cannot occur in the 1-dimensional case.
Reference: [11] <author> A. Lempel and J. Ziv, </author> <title> On the complexity of finite sequences, </title> <journal> IEEE Trans. on Inf. Theory 22, </journal> <month> 75-81 </month> <year> (1976). </year>
Reference: [12] <author> A. Lempel and J. Ziv, </author> <title> Compression of two-dimensional images sequences, Combinatorial algorithms on words (ed. </title> <editor> A. Apostolico, </editor> <publisher> Z.Galil) Springer Verlag (1985) 141-156. </publisher>
Reference: [13] <author> R. Motwani, P. Raghavan, </author> <title> Randomized algorithms, </title> <publisher> Cambridge University Press 1995. </publisher>
Reference-contexts: The following result is a version of theorems given by Schwartz and by Zippel <ref> [13] </ref>. Lemma 2.2 Let P be a nonzero polynomial of degree at most d. Assume that we assign to each variable in P a random value from a set of integers of cardinality R. Then P robfP (x) 6= 0 g 1 d R . <p> Hence instead of computing the exact values of y 1 ; y 2 we choose a random prime number p from a suitable interval and compute values y 1 , y 2 modulo p. We refer the reader to Theorem 7.5 and the discussion in Example 7.1 in <ref> [13] </ref>, for details about randomized testing of the equality of two number using prime numbers and modular arithmetic with exponentially smaller number of bits than the numbers to be tested. If the computed values y 1 mod p and y 2 mod p are different, then the polynomials are different.
Reference: [14] <author> Papadimitriou, Ch. H., </author> <title> Computational complexity, </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1994. </year>
Reference-contexts: We prove that this problem is P 2 -complete, see <ref> [14] </ref> for the definition of the class P 2 . Theorem 4.1 (main result) Fully compressed matching for 2d-texts is P 2 -complete.
Reference: [15] <author> W. Plandowski, </author> <title> Testing equivalence of morphisms on context-free languages, </title> <booktitle> ESA'94, Lecture Notes in Computer Science 855, </booktitle> <publisher> Springer-Verlag, </publisher> <month> 460-470 </month> <year> (1994). </year>
Reference: [16] <author> J. Storer, </author> <title> Data compression: methods and theory, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference: [17] <author> R.E. Zippel, </author> <title> Probabilistic algorithms for sparse polynomials, </title> <booktitle> in EUROSAM 79, Lecture Notes in Comp. Science 72, </booktitle> <month> 216-226 </month> <year> (1979). </year>
Reference: [18] <author> J. Ziv and A. Lempel, </author> <title> A universal algorithm for sequential data compression, </title> <journal> IEEE Trans. on Inf. Theory vo. </journal> <volume> IT-23(3), </volume> <pages> 337-343, </pages> <year> 1977. </year> <month> 12 </month>
References-found: 18

