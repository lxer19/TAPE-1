URL: ftp://ftp.cs.arizona.edu/xkernel/Papers/jsac.ps.Z
Refering-URL: http://www.cs.arizona.edu/protocols/
Root-URL: http://www.cs.arizona.edu
Title: TCP Vegas: End to End Congestion Avoidance on a Global Internet  
Author: Lawrence S. Brakmo and Larry L. Peterson 
Keyword: TCP, Reno, Vegas, protocols, congestion avoid ance.  
Abstract: Vegas is an implementation of TCP that achieves between 37 and 71% better throughput on the Internet, with one-fifth to one-half the losses, as compared to the implementation of TCP in the Reno distribution of BSD Unix. This paper motivates and describes the three key techniques employed by Vegas, and presents the results of a comprehensive experimental performance studyusing both simulations and measurements on the Internetof the Vegas and Reno implementations of TCP. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-S. Ahn, P. B. Danzig, Z. Liu, and L. Yan. </author> <title> Experience with TCP Vegas: Emulation and Experiment. </title> <booktitle> In Proceedings of the SIGCOMM '95 Symposium, </booktitle> <month> Aug. </month> <year> 1995. </year> <note> In press. </note>
Reference-contexts: For example, we found the latest version of TCP, that found in BSD 4.4-lite, 9 achieves 14% worse throughput than our Reno during Internet type simulations [2]. Also, others <ref> [1] </ref> have compared Vegas with the SunOS implementation of TCP, which is derived from Reno, and have reached conclusions similar to those in this paper. 5.5 Alternative Approaches In addition to improving TCP's congestion control mechanism, there is a large body of research addressing the general question of how to fairly
Reference: [2] <author> L. S. Brakmo and L. L. Peterson. </author> <title> Performance Problems in BSD4.4 TCP. </title> <journal> ACM Computer Communication Review, </journal> <note> 1995. In press. </note>
Reference-contexts: For example, we found the latest version of TCP, that found in BSD 4.4-lite, 9 achieves 14% worse throughput than our Reno during Internet type simulations <ref> [2] </ref>.
Reference: [3] <author> P. Danzig and S. Jamin. tcplib: </author> <title> A Library of TCP Internetwork Traffic Characteristics. </title> <type> Technical Report CS-SYS-91-495, </type> <institution> Computer Science Department, USC, </institution> <year> 1991. </year>
Reference-contexts: It is also trivial to move protocols between the simulator and the real world, thereby providing a comprehensive protocol design, implementation, and testing environment. One of the most important protocols available in the simulator is called TRAFFICit implements TCP Internet traffic based on tcplib <ref> [3] </ref>. TRAFFIC starts conversations with interarrival times given by an exponential distribution. Each conversation can be of type TELNET, FTP, NNTP, or SMTP, each of which expects a set of parameters. For example, FTP expects the following parameters: number of items to transmit, control segment size, and the item sizes.
Reference: [4] <author> S. Floyd. </author> <title> TCP and Successive Fast Retrans-mits. </title> <type> Technical report, </type> <institution> Lawrence Berkeley Laboratory, </institution> <year> 1994. </year> <note> Available from anonymous ftp from ftp.ee.lbl.gov:papers/fastretrans.ps. 20 </note>
Reference-contexts: last window decrease do not imply that the network 3 This was tested on an implementation of Vegas which did not have the congestion avoidance and slow-start modification described later in this section. 4 This problem in the BSD versions of Reno has also been pointed out by Sally Floyd <ref> [4] </ref>. 5 is congested for the current congestion window size, and therefore, do not imply that it should be decreased again.
Reference: [5] <author> A. Heybey. </author> <title> The network simulator. </title> <type> Technical report, </type> <institution> MIT, </institution> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Section 5.4 discusses our results relative to newer versions of TCPBerkeley Network Release 2 (BNR2) and BSD 4.4. 2.1 Simulator Many of the results reported in this paper were obtained from a network simulator. Even though several good simulators are availablee.g., REAL [12] and Netsim <ref> [5] </ref> we decided to build our own simulator based on the x-kernel. In this environment, actual x-kernel protocol implementations run on a simulated network. Specifically, the simulator supports multiple hosts, each running a full protocol stack (TEST/TCP/IP/ETH), and several abstract link behaviors (point-to-point connections and ethernets).
Reference: [6] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Finally, Section 5 discusses several relevant issues and Section 6 makes some concluding remarks. 2 Tools This section briefly describes the tools used to implement and analyze the different versions of TCP. All of the protocols were developed and tested under the University of Arizona's x-kernel framework <ref> [6] </ref>. Our implementation of Reno was derived by retrofitting the BSD implementation into the x-kernel. Our implementation of Vegas was derived by modifying Reno. 1 We limit our discussion to Reno, which is both newer and better performing than Tahoe.
Reference: [7] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proceedings of the SIGCOMM '88 Symposium, </booktitle> <pages> pages 314-32, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Few would argue that one of TCP's strengths lies in its adaptive retransmission and congestion control mechanism, with Jacobson's paper <ref> [7] </ref> providing the cornerstone of that mechanism. This paper attempts to go beyond this earlier work; to provide some new insights into congestion control, and to propose modifications to the implementation of TCP that exploit these insights. <p> This is done by limiting the maximum window size such that it never exceeds the delay-bandwidth product of the connection plus the number of buffers at the bottleneck. This was done, for example, in <ref> [7] </ref>. However, this only works when one knows both the available bandwidth and the number of available buffers at the bottleneck. Given that one doesn't have this information under real conditions, we consider such experiments to be somewhat unrealistic. <p> when the background traffic is running in top of Vegas as compared to when the traffic is running on top of Reno (see Section 4). 9 3.3 Modified Slow-Start Mechanism TCP is a `self-clocking' protocol, that is, it uses ACKs as a `clock' to strobe new packets into the network <ref> [7] </ref>. When there are no segments in transit, such as at the beginning of a connection or after a retransmit timeout, there will be no ACKs to serve as a strobe. <p> This seems to suggest that if the whole world ran Vegas, Internet latency would not be adversely affected. 5.4 BSD Variations TCP has been a rather fluid protocol over the last several years, especially in its congestion control mechanism. Although the general form the original mechanism described in <ref> [7] </ref> has remained unchanged in all BSD-based implementations (e.g., Tahoe, Reno, BNR2, BSD 4.4), many of the constants have changed.
Reference: [8] <author> V. Jacobson and R. Braden. </author> <title> TCP Extensions for Long-Delay Paths. Request for Comments 1072, </title> <address> Oct. </address> <year> 1988. </year>
Reference-contexts: Second, even for a real-time connection, it would not be unreasonable for an application to request (and pay for) a minimally acceptable bandwidth guarantee, and then use a Vegas-like end-to-end mechanism to acquire as much additional bandwidth as the current load allows. As another example, selective ACKs <ref> [8, 9] </ref> have been proposed as a way to decrease the number of unnecessarily retransmitted packets and to provide information for a better retransmit mechanism than the one in Reno.
Reference: [9] <author> V. Jacobson, R. Braden, and D. </author> <title> Borman. TCP Extensions for High Performance. Request for Comments 1323, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: Second, even for a real-time connection, it would not be unreasonable for an application to request (and pay for) a minimally acceptable bandwidth guarantee, and then use a Vegas-like end-to-end mechanism to acquire as much additional bandwidth as the current load allows. As another example, selective ACKs <ref> [8, 9] </ref> have been proposed as a way to decrease the number of unnecessarily retransmitted packets and to provide information for a better retransmit mechanism than the one in Reno.
Reference: [10] <author> R. Jain. </author> <title> A Delay-Based Approach for Congestion Avoidance in Interconnected Heterogeneous Computer Networks. </title> <journal> ACM Computer Communication Review, </journal> <volume> 19(5) </volume> <pages> 56-71, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Given that one doesn't have this information under real conditions, we consider such experiments to be somewhat unrealistic. There are several previously proposed approaches for proactive congestion detection based on a common understanding of the network changes as it approaches congestion (an excellent development is given in <ref> [10] </ref>). These changes can be seen in Fig. 5 in the time interval from 4.5 to 7.5 seconds. One change is the increased queue size in the intermediate nodes of the connection, resulting in an increase of the RTT for each successive segment. <p> If it is, then the algorithm decreases the congestion window by one-eighth. Jain's CARD (Congestion Avoidance using Round-trip Delay) approach <ref> [10] </ref> is based on an analytic derivation of a socially optimum window size for a deterministic network. The decision as to whether or not to change the current window size is based on changes to both the RTT and the window size.
Reference: [11] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis: Techniques for ExperimentalDesign, Measurement, Simulation and Modeling. </title> <publisher> John Wiley and Sons, Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Also, given that so far the Internet community has found Reno's level of fairness acceptable, we decided to compare Vegas' fairness levels to Reno's and judge it in those terms. Before there can be any comparisons, we need a metric. We decided to use Jain's fairness index <ref> [11] </ref>, which is defined as follows: given a set of throughputs (x 1 ; x 2 ; : : : ; x n ) the following function assigns a fairness index to the set: f (x 1 ; x2; : : :; x n ) = P n n i=1 x
Reference: [12] <author> S. Keshav. </author> <title> REAL: A Network Simulator. </title> <type> Technical Report 88/472, </type> <institution> Department of Computer Science, UC Berkeley, </institution> <year> 1988. </year>
Reference-contexts: Section 5.4 discusses our results relative to newer versions of TCPBerkeley Network Release 2 (BNR2) and BSD 4.4. 2.1 Simulator Many of the results reported in this paper were obtained from a network simulator. Even though several good simulators are availablee.g., REAL <ref> [12] </ref> and Netsim [5] we decided to build our own simulator based on the x-kernel. In this environment, actual x-kernel protocol implementations run on a simulated network. Specifically, the simulator supports multiple hosts, each running a full protocol stack (TEST/TCP/IP/ETH), and several abstract link behaviors (point-to-point connections and ethernets).
Reference: [13] <author> S. Keshav. </author> <title> A Control-Theoretic Approach to Flow Control. </title> <booktitle> In Proceedings of the SIGCOMM '91 Symposium, </booktitle> <pages> pages 3-15, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: To simplify the following discussion, we refer to the alternative version of Vegas with an experimental slow-start mechanism as Vegas*. Vegas* is based on using the spacing of the acknowledgments to gauge the available bandwidth. The idea is similar to Keshav's Packet-Pair probing mechanism <ref> [13] </ref>, except that it uses the spacing 12 of four segments sent during the slow-start period rather than two. (Using four segments results in a more robust algorithm than using two segments.) This available bandwidth estimate is used to set the threshold window with an appropriate value, which makes Vegas* less
Reference: [14] <author> D. C. . S. S. R. Braden. </author> <title> Integrated Services in the Internet Architecture: an Overview. Request for Comments 1633, </title> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: We conclude this section by discussing the relevance of TCP Vegas to these other efforts. One example is gaining much attention is the question of how to guarantee bandwidth to real-time connections. The basic approach requires that a more intelligent buffer manager be placed in the Internet routers <ref> [14] </ref>. One might question the relevance of TCP Vegas in light of such mechanisms. We believe end-to-end congestion control will remain very important for two reasons.
Reference: [15] <author> W. R. Stevens. </author> <title> TCP/IP Illustrated, Volume 1: The Protocols. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: This unnecessarily large delay did not go unnoticed, and the Fast Retransmit and Fast Recovery mechanisms where incorporated into the Reno implementation of TCP (for a more detailed description see <ref> [15] </ref>). Reno not only retransmits when a coarse-grain timeout occurs, but also when it receives n duplicate ACKs (n is usually 3). Reno sends a duplicate ACK whenever it receives a new segment that it cannot acknowledge because it has not yet received all the previous segments.
Reference: [16] <author> Z. Wang and J. Crowcroft. </author> <title> A New Congestion Control Scheme: Slow Start and Search (Tri-S). </title> <journal> ACM Computer Communication Review, </journal> <volume> 21(1) </volume> <pages> 32-43, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Note that the window changes during every adjustment, that is, it oscillates around its optimal point. Another change seen as the network approaches congestion is the flattening of the sending rate. Wang and Crowcroft's Tri-S scheme <ref> [16] </ref> takes advantage of this fact. Every RTT, they increase the window size by one segment and compare the throughput achieved to the throughput when the window was one segment smaller.
Reference: [17] <author> Z. Wang and J. Crowcroft. </author> <title> Eliminating Periodic Packet Losses in 4.3-Tahoe BSD TCP Congestion Control Algorithm. </title> <journal> ACM Computer Communication Review, </journal> <volume> 22(2) </volume> <pages> 9-16, </pages> <month> Apr. </month> <year> 1992. </year>
Reference-contexts: These changes can be seen in Fig. 5 in the time interval from 4.5 to 7.5 seconds. One change is the increased queue size in the intermediate nodes of the connection, resulting in an increase of the RTT for each successive segment. Wang and Crowcroft's DUAL algorithm <ref> [17] </ref> is based on reacting to this increase of the round-trip delay. The congestion window normally increases as in Reno, but every two round-trip delays the algorithm checks to see if the current RTT is greater than the average of the minimum and maximum RTTs seen so far.
Reference: [18] <author> L. Zhang, S. Shenker, and D. D. Clark. </author> <title> Observations on the Dynamics of a Congestion Control Algorithm: The Effects of Two-Way Traffic. </title> <booktitle> In Proceedings of the SIGCOMM '91 Symposium, </booktitle> <pages> pages 133-147, </pages> <month> Sept. </month> <year> 1991. </year> <month> 21 </month>
Reference-contexts: On the whole, the results were similar, except for when we changed TCP's send-buffer size. Below we summarize these experiments and their results. * Two-way background traffic. There have been reports of change in TCP's behavior when the background traffic is two-way rather than one-way <ref> [18] </ref>. Thus, we modified the experiments by adding tcplib traffic from Host3b to Host3a. The throughput ratio stayed the same, but the loss ratio was much better: 0.29. Reno resent more data and Vegas remained about the same.
References-found: 18

