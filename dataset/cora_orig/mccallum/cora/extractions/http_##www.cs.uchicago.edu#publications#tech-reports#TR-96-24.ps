URL: http://www.cs.uchicago.edu/publications/tech-reports/TR-96-24.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Nondeterministic Polynomial Time versus Nondeterministic Logarithmic Space level of the polynomial-time hierarchy strictly contains NL.
Author: Lance Fortnow j. 
Note: Any nonconstant  
Date: December 4, 1996  
Address: AA1 P.O. Box 94079 NL-1090 GB Amsterdam The Netherlands  
Affiliation: University of Chicago CWI Dept.  
Abstract: We discuss the possibility of using the relatively old technique of diagonalization to separate complexity classes, in particular NL from NP. We show several results in this direction. * On the negative side, we present a relativized world where P = NP but any nonconstant level of the polynomial-time hierarchy differs from P.
Abstract-found: 1
Intro-found: 1
Reference: [BFT95] <author> H. Buhrman, L. Fortnow, and L. Torenvliet. </author> <title> Using autoreducibility to separate complexity classes. </title> <booktitle> In Proceedings of the 36th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 520-527. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Rather we should see what diagonalization will do for us in the light of our current understanding of complexity classes. Acknowledgments Much of the research of this paper was motivated by the author's research with Harry Buhrman and Leen Torenvliet on autoreducibility <ref> [BFT95] </ref>. The author also thanks Harry Buhrman for discussions directly related to this paper.
Reference: [BS90] <author> R. Boppana and M. Sipser. </author> <title> The complexity of finite functions. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, chapter 14, </booktitle> <pages> pages 757-804. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Separating complexity classes remains the most important and difficult of problems in theoretical computer science. Circuit complexity and other techniques on finite functions have seen some exciting early successes (see the survey of Boppana and Sipser <ref> [BS90] </ref>) but have yet to achieve their promise of separating complexity classes above logarithmic space. Other techniques based on logic and geometry also have given us separations only on very restricted models. We should turn back to a traditional separation technique|diagonalization.
Reference: [CKS81] <author> A. Chandra, D. Kozen, and L. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the ACM, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: However relativization results for space-bounded classes are hard to interpret (see Fortnow [For94]). In particular, any oracle model that collapses NL and NP will also collapse NL and AP (alternating polynomial time) even though we known PSPACE = AP <ref> [CKS81] </ref>, NL DSPACE [log 2 n] [Sav70] and PSPACE strictly contains DSPACE [log 2 n] [HS65]. Diagonalization also avoids the limits of combinatorial proofs described by Razborov and Rudich [RR94]. First we prove a powerful lemma showing that any nonconstant level of the polynomial-time hierarchy strictly contains NL. <p> Note that for constant functions s (n) = k, p s (n) corresponds to p k , the kth level of the tradi tional polynomial-time hierarchy. Chandra, Kozen and Stockmeyer <ref> [CKS81] </ref> show the surprising power of unlimited alternation. Theorem 2.2 (Chandra-Kozen-Stockmeyer) PSPACE = [ k p The class NC 1 consists of languages accepted by circuits of bounded fan-in and logarithmic depth. <p> The proof of Lemma 3.1 then follows from the following lemma. Lemma 3.3 For any monotone unbounded function s (n) n computable in time polynomial in n, NSPACE [s (n) log n] p The proof builds on ideas from the proof of Theorem 2.2 by Chandra, Kozen and Stock-meyer <ref> [CKS81] </ref> which itself builds on Savitch's Theorem [Sav70]. Proof: Fix a s (n) log n nondeterministic space-bounded Turing machine M and an input x. Consider the tableau of some potential accepting computation M . <p> We can assume that no configuration is repeated so there are at most 2 cs (n) log n rows for some constant c. The usual divide-and-conquer algorithm of Chandra, Kozen and Stockmeyer <ref> [CKS81] </ref> would require (s (n) log n) alternations so we need to be more careful. Instead of just dividing into two pieces like Chandra, Kozen and Stockmeyer, we divide the tableau into an appropriate polynomial number of pieces. This allows us to eliminate the extra log n term.
Reference: [For94] <author> L. Fortnow. </author> <title> The role of relativization in complexity theory. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 52 </volume> <pages> 229-244, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: We have no inherent reason to believe that diagonalization will not work to separate NL from NP. One may suggest that oracles exist that make NL A = NP A . However relativization results for space-bounded classes are hard to interpret (see Fortnow <ref> [For94] </ref>). In particular, any oracle model that collapses NL and NP will also collapse NL and AP (alternating polynomial time) even though we known PSPACE = AP [CKS81], NL DSPACE [log 2 n] [Sav70] and PSPACE strictly contains DSPACE [log 2 n] [HS65].
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and intractability. A Guide to the theory of NP-completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Definitions and basic results of these classes can be found in basic textbooks such as Hopcroft and Ullman [HU79] or Garey and Johnson <ref> [GJ79] </ref>. We need to generalize the polynomial-time hierarchy to have super-constant levels. Definition 2.1 The class p s (n) consists of the set of languages accepted by polynomial-time al ternating Turing machines that start in an 9 state and on input x, makes at most s (jxj) 1 alternations.
Reference: [GJ93] <author> Goldsmith and Joseph. </author> <title> Relativized isomorphisms of NP-complete sets. </title> <journal> Computational Complexity, </journal> <volume> 3 </volume> <pages> 186-205, </pages> <year> 1993. </year>
Reference-contexts: SAT A is in NTIME A [n]. 3. Whether is in SAT A depends only on strings of A of length less than jj. See Goldsmith and Joseph <ref> [GJ93] </ref> for a formal definition of SAT A . 3 Separation In this section, we will separate nonconstant levels of the polynomial-time hierarchy from nondeterministic logarithmic space. Lemma 3.1 Let s (n) be any monotone unbounded function computable in time polynomial in n.
Reference: [H-as89] <author> J. H-astad. </author> <title> Almost optimal lower bounds for small depth circuits. </title> <editor> In S. Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 143-170. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, </address> <year> 1989. </year>
Reference-contexts: This proof builds on techniques used by Ko [Ko89] who gives a relativized world where P = NP 6= PSPACE which in turn built on work by H-astad <ref> [H-as89] </ref>. In particular we make use of the following lower bound for parity: Lemma 5.3 (H-astad) For sufficiently large m and d, no depth d circuit of size 2 m 1=2d can compute parity of m input variables. <p> For every m and d, the parity of m bits can be computed by a depth d size m2 m 1=(d1) circuit of ^ and _ gates with negations only on the inputs (see H-astad <ref> [H-as89] </ref>). The parity of n s (n)1 bits can be computed with a circuit C of size n s (n)1 2 n and depth s (n). Consider the input variables as determining whether each string of B n is in A.
Reference: [HS65] <author> J. Hartmanis and R. Stearns. </author> <title> On the computational complexity of algorithms. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 117 </volume> <pages> 285-306, </pages> <year> 1965. </year>
Reference-contexts: In particular, any oracle model that collapses NL and NP will also collapse NL and AP (alternating polynomial time) even though we known PSPACE = AP [CKS81], NL DSPACE [log 2 n] [Sav70] and PSPACE strictly contains DSPACE [log 2 n] <ref> [HS65] </ref>. Diagonalization also avoids the limits of combinatorial proofs described by Razborov and Rudich [RR94]. First we prove a powerful lemma showing that any nonconstant level of the polynomial-time hierarchy strictly contains NL. The separation results relies on the strong nondeterministic space fl Email: fortnow@cwi.nl.
Reference: [HS66] <author> F. Hennie and R. Stearns. </author> <title> Two-tape simulation of multitape Turing machines. </title> <journal> Journal of the ACM, </journal> <volume> 13(4) </volume> <pages> 533-546, </pages> <month> October </month> <year> 1966. </year>
Reference-contexts: Assume Equation (1) holds for k. We wish to show it holds for k+1. One can simulate SAT QBF k in nondeterministic time n + 2nk3 jk log jk n. By using the oblivious Turing Machines of Hennie and Stearns <ref> [HS66] </ref>, we can reduce a nondeterministic time t (n) computation to a satisfiability question of a formula of size t (n) log t (n).
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1979. </year>
Reference-contexts: Definitions and basic results of these classes can be found in basic textbooks such as Hopcroft and Ullman <ref> [HU79] </ref> or Garey and Johnson [GJ79]. We need to generalize the polynomial-time hierarchy to have super-constant levels.
Reference: [Imm88] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(5) </volume> <pages> 935-938, </pages> <year> 1988. </year>
Reference-contexts: The separation results relies on the strong nondeterministic space fl Email: fortnow@cwi.nl. Supported in part by NSF grant CCR 92-53582 and a Fulbright Scholar award. 1 hierarchy that follows from the closure of nondeterministic space under complement <ref> [Imm88, Sze88] </ref>. Diagonalization forms the core of this hierarchy|one diagonalizes against smaller space machines one at a time. From this lemma we get a mild separation result for satisfiability, an NP-complete problem lying in NTIME [n]. <p> To prove Lemma 3.1 we need the following strong nondeterministic space hierarchy theorem. This follows from the work of Immerman <ref> [Imm88] </ref> and Szelepcsenyi [Sze88] showing that nondeterministic space is closed under complement. See Immerman [Imm88] for details. Theorem 3.2 (Immerman-Szelepcsenyi) Let s 1 (n) and s 2 (n) be any fully space constructible functions such that s 1 (n) log n and s 1 (n) = o (s 2 (n)). <p> To prove Lemma 3.1 we need the following strong nondeterministic space hierarchy theorem. This follows from the work of Immerman <ref> [Imm88] </ref> and Szelepcsenyi [Sze88] showing that nondeterministic space is closed under complement. See Immerman [Imm88] for details. Theorem 3.2 (Immerman-Szelepcsenyi) Let s 1 (n) and s 2 (n) be any fully space constructible functions such that s 1 (n) log n and s 1 (n) = o (s 2 (n)).
Reference: [Ko89] <author> K. Ko. </author> <title> Relativized polynomial time hierarchies having exactly k levels. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 392-408, </pages> <year> 1989. </year>
Reference-contexts: This proof builds on techniques used by Ko <ref> [Ko89] </ref> who gives a relativized world where P = NP 6= PSPACE which in turn built on work by H-astad [H-as89].
Reference: [RR94] <author> A. Razborov and S. Rudich. </author> <title> Natural proofs. </title> <booktitle> In Proceedings of the 26th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 204-213. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Diagonalization also avoids the limits of combinatorial proofs described by Razborov and Rudich <ref> [RR94] </ref>. First we prove a powerful lemma showing that any nonconstant level of the polynomial-time hierarchy strictly contains NL. The separation results relies on the strong nondeterministic space fl Email: fortnow@cwi.nl.
Reference: [Sav70] <author> W. Savitch. </author> <title> Relationship between nondeterministic and deterministic tape classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4 </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: However relativization results for space-bounded classes are hard to interpret (see Fortnow [For94]). In particular, any oracle model that collapses NL and NP will also collapse NL and AP (alternating polynomial time) even though we known PSPACE = AP [CKS81], NL DSPACE [log 2 n] <ref> [Sav70] </ref> and PSPACE strictly contains DSPACE [log 2 n] [HS65]. Diagonalization also avoids the limits of combinatorial proofs described by Razborov and Rudich [RR94]. First we prove a powerful lemma showing that any nonconstant level of the polynomial-time hierarchy strictly contains NL. <p> Lemma 3.3 For any monotone unbounded function s (n) n computable in time polynomial in n, NSPACE [s (n) log n] p The proof builds on ideas from the proof of Theorem 2.2 by Chandra, Kozen and Stock-meyer [CKS81] which itself builds on Savitch's Theorem <ref> [Sav70] </ref>. Proof: Fix a s (n) log n nondeterministic space-bounded Turing machine M and an input x. Consider the tableau of some potential accepting computation M .
Reference: [Sze88] <author> R. Szelepcsenyi. </author> <title> The method of forced enumeration for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year>
Reference-contexts: The separation results relies on the strong nondeterministic space fl Email: fortnow@cwi.nl. Supported in part by NSF grant CCR 92-53582 and a Fulbright Scholar award. 1 hierarchy that follows from the closure of nondeterministic space under complement <ref> [Imm88, Sze88] </ref>. Diagonalization forms the core of this hierarchy|one diagonalizes against smaller space machines one at a time. From this lemma we get a mild separation result for satisfiability, an NP-complete problem lying in NTIME [n]. <p> To prove Lemma 3.1 we need the following strong nondeterministic space hierarchy theorem. This follows from the work of Immerman [Imm88] and Szelepcsenyi <ref> [Sze88] </ref> showing that nondeterministic space is closed under complement. See Immerman [Imm88] for details. Theorem 3.2 (Immerman-Szelepcsenyi) Let s 1 (n) and s 2 (n) be any fully space constructible functions such that s 1 (n) log n and s 1 (n) = o (s 2 (n)).
Reference: [Tod91] <author> S. </author> <title> Toda. PP is as hard as the polynomial-time hierarchy. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(5) </volume> <pages> 865-877, </pages> <year> 1991. </year>
Reference-contexts: ID f ; 2 cs (n) log n ) and q (n) = n 2c we have ALT (2 cs (n) log n ) = 2 log n 2c (2 cs (n) log n ) = 2 log (n 2c ) cs (n) log n = s (n) 2 Toda <ref> [Tod91] </ref> showed that any constant level of the polynomial-time hierarchy can be reduced to the complexity class PP. We show that extending his result would yield a nice separation.
References-found: 16

