URL: ftp://ftp.cs.washington.edu/tr/1998/05/UW-CSE-98-05-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: famir,notking@cs.washington.edu  
Title: Illustrating Object-Oriented Library Reuse by Example A Tool-Based Approach  
Author: Amir Michail and David Notkin 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Dept. of Computer Science and Engineering University of Washington,  
Pubnum: Technical Report UW-CSE-98-05-01  
Abstract: In this paper, we present a tool-based approach that examines how example programs reuse a particular library. In particular, we (1) extract a unified class diagram for each example that merges the example class diagram with the library class diagram; (2) identify the reuse boundary in each unified class diagram, which shows instances of direct reuse of the library in the example; and (3) intersect each subset of the reuse boundaries to capture similarities and differences among library reuse patterns in the examples. By browsing the reuse boundary intersections, developers can immediately see what aspects of the library are demonstrated by the examples. In particular, our approach can facilitate reuse by: (1) guiding the developer towards important library classes of general utility; (2) guiding the developer towards library classes particularly useful for a specific application domain; and (3) providing access to the relevant source code in each example for further inspection. All aspects of our approach are supported by CodeWeb, a reuse tool we have built for C++ and Java libraries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. J. Biggerstaff. </author> <title> Design Recovery for Maintenance and Reuse. </title> <journal> Computer, </journal> <volume> 22(7) </volume> <pages> 36-49, </pages> <year> 1989. </year>
Reference-contexts: Moreover, as discussed earlier, reusing an object-oriented library requires some understanding of its design, so tools that help a developer examine an individual library in terms of structure can be useful <ref> [1, 6, 7, 10] </ref>. However, object-oriented libraries are often huge, consisting of hundreds or thousands of classes with non-trivial relationships between them.
Reference: [2] <author> P. Chen, R. Hennicker, and M. Jarke. </author> <title> On the Retrieval of Reusable Software Components. </title> <booktitle> In 2nd International Workshop on Software Reusability), </booktitle> <pages> pages 99-108. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [3], facets [8], signature matching [11], and formal specifications <ref> [2] </ref>. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library | even if the developer does not know exactly what kinds of classes to look for.
Reference: [3] <author> W. B. Frakes and B. A. Nejmeh. </author> <title> Software Reuse through Information Retrieval. </title> <booktitle> In 20th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 530-535. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing <ref> [3] </ref>, facets [8], signature matching [11], and formal specifications [2]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library | even if the developer does not know exactly what kinds of classes to look for.
Reference: [4] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlis-sides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In the remainder of this section, refer to Figure 2 which shows the reuse boundaries corresponding to the unified class diagrams in Figure 1. 3.1 Inheritance and Composition Reuse The two most common techniques for reuse in object-oriented systems are class inheritance and composition <ref> [4, p. 18] </ref>.
Reference: [5] <author> D. Gangopadhyay and S. Mitra. </author> <title> Understanding Frameworks by Exploration of Exemplars. </title> <booktitle> In 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 90-99. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1995. </year>
Reference-contexts: Moreover, the developer can pick examples to show those aspects of the library that are of interest. More recently, "exemplars" have been suggested as a way of library reuse <ref> [5] </ref>. An exemplar is an executable visual model consisting of one or more instances of at least one concrete class for each abstract class in a library.
Reference: [6] <author> R. Kazman and S. J. Carriere. </author> <title> View Extraction and View Fusion in Architectural Understanding. </title> <booktitle> In 5th International Conference on Software Reuse. IEEE, </booktitle> <year> 1998. </year>
Reference-contexts: Moreover, as discussed earlier, reusing an object-oriented library requires some understanding of its design, so tools that help a developer examine an individual library in terms of structure can be useful <ref> [1, 6, 7, 10] </ref>. However, object-oriented libraries are often huge, consisting of hundreds or thousands of classes with non-trivial relationships between them.
Reference: [7] <author> G. C. Murphy, D. Notkin, and K. Sullivan. </author> <title> Software Reflexion Models: Bridging the Gap between Source and High-Level Models. </title> <booktitle> In 3rd 9 ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 18-28, </pages> <year> 1995. </year>
Reference-contexts: Moreover, as discussed earlier, reusing an object-oriented library requires some understanding of its design, so tools that help a developer examine an individual library in terms of structure can be useful <ref> [1, 6, 7, 10] </ref>. However, object-oriented libraries are often huge, consisting of hundreds or thousands of classes with non-trivial relationships between them.
Reference: [8] <author> R. Prieto-Diaz and P. Freeman. </author> <title> Classifying Software for Reusability. </title> <journal> IEEE Software, </journal> <volume> 4(1) </volume> <pages> 6-16, </pages> <year> 1987. </year>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [3], facets <ref> [8] </ref>, signature matching [11], and formal specifications [2]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library | even if the developer does not know exactly what kinds of classes to look for.
Reference: [9] <author> S. Sparks, K. Benner, and C. Faris. </author> <title> Managing Object-Oriented Framework Reuse. </title> <journal> Computer, </journal> <volume> 29(9) </volume> <pages> 52-61, </pages> <year> 1996. </year>
Reference-contexts: Sparks, Benner and Faris give this advice for framework reuse: ". . . expect to train every staff member who will use a framework. This often means having individuals attend a one-week course at the vendor site or training large groups at the project site." <ref> [9, p. 54] </ref> A crucial aspect of these techniques is that example programs are used throughout to illustrate how to reuse the library. Indeed, most libraries come with many example programs to get the developer started. Moreover, the selection of the examples is important. <p> demon 1 To simplify the presentation, we use the term library to mean any large software component, including libraries, frame works, applications, etc. 1 strate the uses of all the features of the framework, rather than concentrating on how the framework is to be used in an ap plication context." <ref> [9, p. 60] </ref> In this paper, we present a tool-based approach that examines how user-selected example programs reuse a particular library. An important aspect of our approach is that it requires no extra effort on the part of the library developer and can be used with any existing object-oriented library.
Reference: [10] <author> A. S. Yeh, D. R. Harris, and M. P. Chase. </author> <title> Manipulating Recovered Software Architecture Views. </title> <booktitle> In Proceedings of the International Conference on Software Engineering, </booktitle> <pages> pages 184-194, </pages> <year> 1997. </year>
Reference-contexts: Moreover, as discussed earlier, reusing an object-oriented library requires some understanding of its design, so tools that help a developer examine an individual library in terms of structure can be useful <ref> [1, 6, 7, 10] </ref>. However, object-oriented libraries are often huge, consisting of hundreds or thousands of classes with non-trivial relationships between them.
Reference: [11] <author> A. M. Zaremski and J. M. Wing. </author> <title> Signature Matching: A Tool for Using Software Libraries. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(2) </volume> <pages> 146-170, </pages> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Perhaps the most well-known approaches are those concerned with finding a suitable component (such as a function or class) in a library that fits a particular need. Such work includes tools that use free-text indexing [3], facets [8], signature matching <ref> [11] </ref>, and formal specifications [2]. While our approach is not query-based, browsing reuse boundary intersections for example programs would show important classes and relationships between them in the library | even if the developer does not know exactly what kinds of classes to look for.
References-found: 11

