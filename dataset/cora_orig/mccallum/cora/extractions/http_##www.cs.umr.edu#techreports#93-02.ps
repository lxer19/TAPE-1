URL: http://www.cs.umr.edu/techreports/93-02.ps
Refering-URL: http://www.cs.umr.edu/techreports/
Root-URL: 
Phone: (314) 341-4491  
Title: Genetic Algorithms For Vertex Splitting in DAGs 1  
Author: Matthias Mayer and Fikret Ercal 
Address: Rolla, MO 65401, U.S.A.  
Affiliation: Department of Computer Science University of Missouri-Rolla  
Pubnum: CSC-93-02  
Abstract: 1 This paper has been submitted to the 5th International Conference on Genetic Algorithms 2 electronic mail address: matze@cs.umr.edu 3 electronic mail address: ercal@cs.umr.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baker, James E. </author> <year> (1985). </year> <title> Adaptive Selection Methods for Genetic Algorithms. </title> <booktitle> Proceedings of an International Conference on Genetic Algorithms and Their Applications, </booktitle> <pages> pp. 101-111. </pages>
Reference-contexts: In order to avoid premature convergence, different select strategies as suggested in <ref> [1] </ref> are planned to be implemented and tested. It is also worthwhile to look into a GA where select, crossover and mutate are guided by heuristics [8, 11].
Reference: [2] <author> Brglez, F. and Fujiwara, H. </author> <year> (1985). </year> <title> A Neutral Netlist of Ten Combinational Benchmark Circuits and a Target Translator in Fortran. </title> <booktitle> Proceedings IEEE Symposium on Circuits and Systems, </booktitle> <pages> pp. 663-666. </pages>
Reference-contexts: Test Beds (TBs): - TB 1: preserve duplicates and linear stepping - TB 2: preserve duplicates and multiple binary stepping - TB 3: random delete and linear stepping - TB 4: random delete and multiple binary stepping The experiments were run on graphs derived from the ISCAS-85 benchmark combinational circuits <ref> [2] </ref>. The vertices in the DAG model the gates in the circuit and the edges correspond to the connections between the gates. The delay for each edge was set to one. The characteristics of the circuits used in this study are given in Table 1.
Reference: [3] <author> Cramer, N.L. </author> <year> (1985). </year> <title> A representation for the adaptive generation of simple sequential programs. </title> <booktitle> Proceedings of an International Conference on Genetic Algorithms and Their Applications, </booktitle> <pages> pp. 183-187. </pages>
Reference-contexts: If a solution is found in a particular round, the next round attempts to shorten the string length and find a new solution with fewer number of vertices. Variable string length has been used before in GAs <ref> [3, 5, 6, 10] </ref>. A (suboptimal) solution for the DVSP is found, if the set of splitting vertices of one individual splits the graph in such a way that the resulting graph has a maximum path length d.
Reference: [4] <author> Goldberg, D.E. </author> <year> (1989). </year> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley </publisher>
Reference-contexts: GAs are loosely based upon Darwin's principle of natural selection and natural genetics. They have become increasingly popular in recent years as a method for solving complex search problems <ref> [4] </ref>. The DAG vertex splitting problem addressed in this paper has many applications in the fields of computer science and electrical engineering. An application would be to find the minimum number of placements of signal boosters in a network.
Reference: [5] <author> Goldberg, D.E, Korb, B., Deb, K. </author> <year> (1989). </year> <title> Messy Genetic Algorithms: Motivation, Analysis, and First Results. </title> <booktitle> Complex Systems 3, </booktitle> <pages> pp. 493-530. </pages>
Reference-contexts: If a solution is found in a particular round, the next round attempts to shorten the string length and find a new solution with fewer number of vertices. Variable string length has been used before in GAs <ref> [3, 5, 6, 10] </ref>. A (suboptimal) solution for the DVSP is found, if the set of splitting vertices of one individual splits the graph in such a way that the resulting graph has a maximum path length d.
Reference: [6] <author> Goldberg, D.E., Deb, K., Korb, B. </author> <year> (1990). </year> <title> Messy Genetic Algorithms Revisited: Studies in Mixed Size and Scale. </title> <booktitle> Complex Systems 4, </booktitle> <pages> pp. 415-444. </pages>
Reference-contexts: If a solution is found in a particular round, the next round attempts to shorten the string length and find a new solution with fewer number of vertices. Variable string length has been used before in GAs <ref> [3, 5, 6, 10] </ref>. A (suboptimal) solution for the DVSP is found, if the set of splitting vertices of one individual splits the graph in such a way that the resulting graph has a maximum path length d.
Reference: [7] <author> Grefenstette, J.J. </author> <year> (1986). </year> <title> Optimization of Control Parameters for Genetic Algorithms. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics. </journal> <volume> vol. SMC-16, no. 1, </volume> <pages> pp. 122-128. </pages>
Reference: [8] <author> Grefenstette, J.J. </author> <year> (1987). </year> <title> Incorporating Problem Specific Knowledge into Genetic Algorithms. Genetic Algorithms and Simulated Annealing, </title> <editor> L. Davis, ed. </editor> <publisher> (Pitman, </publisher> <address> London, </address> <year> 1987), </year> <pages> pp. 42-60. </pages>
Reference-contexts: In order to avoid premature convergence, different select strategies as suggested in [1] are planned to be implemented and tested. It is also worthwhile to look into a GA where select, crossover and mutate are guided by heuristics <ref> [8, 11] </ref>. Another method of solving the DVSP would be to start with a string length of one and to increase the string length until a solution can be found. 15
Reference: [9] <author> Holland, J.H. </author> <year> (1975). </year> <booktitle> Adaption in natural and artificial systems. </booktitle> <address> Ann Arbor: </address> <publisher> The University of Michigan Press </publisher>
Reference-contexts: 1. Introduction Genetic algorithms <ref> [9] </ref> (GAs) are adaptive search techniques that have been shown to be robust optimization algorithms. In contrast to other optimization techniques, genetic algorithms base their progress on the performance of a population of candidate solutions, rather than on one candidate solution.
Reference: [10] <author> Jujiko, C. and Dickinson, J. </author> <year> (1987). </year> <title> Using the genetic algorithm to generate LISP 16 source code to solve the prisoner's dilemma. </title> <booktitle> Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <pages> pp. 236-240. </pages>
Reference-contexts: If a solution is found in a particular round, the next round attempts to shorten the string length and find a new solution with fewer number of vertices. Variable string length has been used before in GAs <ref> [3, 5, 6, 10] </ref>. A (suboptimal) solution for the DVSP is found, if the set of splitting vertices of one individual splits the graph in such a way that the resulting graph has a maximum path length d.
Reference: [11] <author> Paik, D., Reddy, S., and Sahni, S. </author> <year> (1990). </year> <title> Vertex Splitting in Dags and Applications to Partial Scan Designs and Lossy Circuits. </title> <type> Technical Report TR90-034, </type> <institution> University of Florida </institution>
Reference-contexts: The DAG vertex splitting problem addressed in this paper has many applications in the fields of computer science and electrical engineering. An application would be to find the minimum number of placements of signal boosters in a network. The placement of flip-flops in partial scan designs <ref> [11] </ref> is another application. Heuristics [11] have been used earlier to solve the DAG vertex splitting problem. Section 2 introduces the DAG vertex splitting problem. The general outline of the genetic algorithm, along with a discussion about the functions that perform crossover, mutation, and recombination are discussed in Section 3. <p> An application would be to find the minimum number of placements of signal boosters in a network. The placement of flip-flops in partial scan designs <ref> [11] </ref> is another application. Heuristics [11] have been used earlier to solve the DAG vertex splitting problem. Section 2 introduces the DAG vertex splitting problem. The general outline of the genetic algorithm, along with a discussion about the functions that perform crossover, mutation, and recombination are discussed in Section 3. <p> Experimental results are reported in Section 5. Section 6 summarizes the results and indicates future research areas. 2. The DAG Vertex Splitting Problem The DAG vertex splitting problem (DVSP) can be stated as follows <ref> [11] </ref>: Let G = (V, E, w) be a weighted directed acyclic graph (WDAG) with vertex set V, edge 3 set E, and edge function w. w (i, j) is the weight of the edge &lt;i, j&gt; E. w (i, j) is a positive real number for &lt;i, j&gt; E and <p> Note that the DVSP has a solution iff max [w (i, j)] d, " &lt;i, j&gt; E. If w (i, j) = 1 " &lt;i, j&gt; E then the graph has unit weights 4 . It has been proven in <ref> [11] </ref> that finding a solution for DVSP is NP-hard for graphs with unit weights. Since the unit weight graphs are only a special case of general graphs the results also apply to the WDAG. 3. <p> Since it was not possible for us to determine the weight function used in <ref> [11] </ref>, a direct comparison with the heuristics used in [11] was not possible. 5 The strings in each individual of the population represent the set of splitting vertices (or split set for short) that are used to split the graph. <p> Since it was not possible for us to determine the weight function used in <ref> [11] </ref>, a direct comparison with the heuristics used in [11] was not possible. 5 The strings in each individual of the population represent the set of splitting vertices (or split set for short) that are used to split the graph. The genetic algorithm starts the search with an initial string length and continues with multiple rounds of optimization. <p> In order to avoid premature convergence, different select strategies as suggested in [1] are planned to be implemented and tested. It is also worthwhile to look into a GA where select, crossover and mutate are guided by heuristics <ref> [8, 11] </ref>. Another method of solving the DVSP would be to start with a string length of one and to increase the string length until a solution can be found. 15
Reference: [12] <author> Petty, C.B., Leuze, M.R., and Grefenstette, J.J. </author> <year> (1987). </year> <title> A Parallel Genetic Algorithm. </title> <booktitle> Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <pages> pp. 155 - 161. </pages>
Reference-contexts: The experiments also showed that the method preserve duplicates gets stuck in local optima and therefore does not yield good solutions. 14 Future research in this area will include an implementation of the GA onto a parallel machine to reduce the run time <ref> [12, 15] </ref>. In order to avoid premature convergence, different select strategies as suggested in [1] are planned to be implemented and tested. It is also worthwhile to look into a GA where select, crossover and mutate are guided by heuristics [8, 11].
Reference: [13] <author> Spears, W.M. and Anand, V. </author> <year> (1991). </year> <title> A Study of Crossover Operators in Genetic Programming. </title> <booktitle> Sixth International Symposium on Methodologies for Intelligent Systems. Charlotte, NC, </booktitle> <pages> pp. 409-418. </pages>
Reference-contexts: Since the goal of optimization is to minimize the longest path in the graph by splitting vertices, the fitness function is defined to be (1/longest_path). A so called uniform crossover <ref> [13, 14] </ref> function is used to generate offspring from the parents. The uniform crossover was shown to outperform the one-point and two-point crossover in most cases [13, 14]. While applying the uniform crossover, generation of multiple copies of the same vertex in a split set must be avoided. <p> A so called uniform crossover <ref> [13, 14] </ref> function is used to generate offspring from the parents. The uniform crossover was shown to outperform the one-point and two-point crossover in most cases [13, 14]. While applying the uniform crossover, generation of multiple copies of the same vertex in a split set must be avoided.
Reference: [14] <author> Syswerda, G. </author> <year> (1989). </year> <title> Uniform Crossover in Genetic Algorithms. </title> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers,, </publisher> <pages> pp. 2-9. </pages>
Reference-contexts: Since the goal of optimization is to minimize the longest path in the graph by splitting vertices, the fitness function is defined to be (1/longest_path). A so called uniform crossover <ref> [13, 14] </ref> function is used to generate offspring from the parents. The uniform crossover was shown to outperform the one-point and two-point crossover in most cases [13, 14]. While applying the uniform crossover, generation of multiple copies of the same vertex in a split set must be avoided. <p> A so called uniform crossover <ref> [13, 14] </ref> function is used to generate offspring from the parents. The uniform crossover was shown to outperform the one-point and two-point crossover in most cases [13, 14]. While applying the uniform crossover, generation of multiple copies of the same vertex in a split set must be avoided.
Reference: [15] <author> Tanese, R. </author> <year> (1987). </year> <title> Parallel Genetic Algorithm for a Hypercube. </title> <booktitle> Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <pages> pp. 177-183. </pages>
Reference-contexts: The experiments also showed that the method preserve duplicates gets stuck in local optima and therefore does not yield good solutions. 14 Future research in this area will include an implementation of the GA onto a parallel machine to reduce the run time <ref> [12, 15] </ref>. In order to avoid premature convergence, different select strategies as suggested in [1] are planned to be implemented and tested. It is also worthwhile to look into a GA where select, crossover and mutate are guided by heuristics [8, 11].
References-found: 15

