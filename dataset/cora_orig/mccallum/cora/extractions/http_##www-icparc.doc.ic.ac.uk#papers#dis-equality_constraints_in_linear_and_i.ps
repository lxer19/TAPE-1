URL: http://www-icparc.doc.ic.ac.uk/papers/dis-equality_constraints_in_linear_and_i.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: mh10@doc.ic.ac.uk  
Title: Dis-equality Constraints in Linear/Integer Programming  
Author: Mozafar T. Hajian 
Keyword: Mathematical Modelling, Linear/Integer Programming, Algorithms, Branch and Bound, Dis-equality Constraints.  
Date: June 21, 1996  
Address: College, London, SW7 2AZ.  
Affiliation: IC-Parc, William Penny Laboratory, Imperial  
Abstract: We have proposed an extension to the definition of general integer linear programs (ILP) to accept dis-equality constraints explicitly. A new class of logical variables is introduced to transform the extended ILP in general form to standard form. Branch and Bound algorithm is modified to solve this new class of ILP. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Bratko. </author> <title> PROLOG, </title> <booktitle> Programming for Artificial Intelligence. </booktitle> <publisher> Addison-Wesley Publishing Co, </publisher> <year> 1990. </year>
Reference-contexts: The description and the model for these problems are given in <ref> [1] </ref>.
Reference: [2] <author> E.F.D. Ellison, M.T. Hajian, R. Levkovitz, I. Maros, G. Mitra, and Sayers D. </author> <title> FortMP User Guide and Reference Manual. </title> <institution> Brunel Uni. and NAG Ltd, Maths and Stats Dept, Brunel Uni, </institution> <address> Uxbridge, Middex, UB8, 3PH. </address>
Reference-contexts: MPS input format was originally introduced by IBM and later updated to express linear and integer programs in a compact form; for a detailed introduction to MPS format, see for example FortMP User Guide and Reference Manual <ref> [2] </ref>. The ROWS section of a MPS format is used to declare the type of a given row. It uses certain tokens namely; N, E, G, and L to declare neutral, equality, greater-than-or-equality and less-than-or-equality type constraints respectively. it also allows the user to define a name for each constraint. <p> In the implementation of this branching scheme, the value of * can be set to different values before starting the execution. However, the default value for * is 10 6 which is equal to the RHS tolerance defined in <ref> [2] </ref>. This follows the branching scheme on Non-zero integer and real variables introduced in [3]. 5 Experimental Results In this section we summarise our experimental results. <p> We first modelled and solved a set of five classical problems using conventional ILP variables; we then used DI constraints directly to model 9 and solve these problems and compared the results. FortMP system <ref> [2] </ref> was modified and used for this experimentation. The input and mixed integer solver part of FortMP was modified to implement the new constraint types and new branching scheme. Table 1 presents the statistics of the mathematical models of these problems.
Reference: [3] <author> M.T. Hajian, R. Rodosek, and E. B. Richards. </author> <title> Introduction of a new class of variables to discrete and integer programming problems. </title> <type> Technical report, </type> <institution> IC-Parc, William Penny Laboratory, Imperial College, </institution> <address> London, SW7 2AZ, </address> <year> 1996. </year> <note> Under Preparation. </note>
Reference-contexts: For a discussion on how to select values for M and * see Hajian <ref> [3] </ref>. In the dis-equality relation (5), if all the coefficients (a ij s) are integer numbers and variables are defined as integer variables then * is normally set to 1. <p> This formulation requires two binary variables and an additional constraint (14). In order to avoid using these extra variables, Hajian <ref> [3] </ref> introduced a new class of discrete variables and called them Non-Zero (NZ) variables. [3] considered two types of NZ variables, namely Non-zero Real (NR) and Non-zero Integer (NI) variables. <p> This formulation requires two binary variables and an additional constraint (14). In order to avoid using these extra variables, Hajian <ref> [3] </ref> introduced a new class of discrete variables and called them Non-Zero (NZ) variables. [3] considered two types of NZ variables, namely Non-zero Real (NR) and Non-zero Integer (NI) variables. NZ variables are used to express DI type constraints implicitly in ILP without the use of additional binary variables and extra constraints in the model. <p> However, the default value for * is 10 6 which is equal to the RHS tolerance defined in [2]. This follows the branching scheme on Non-zero integer and real variables introduced in <ref> [3] </ref>. 5 Experimental Results In this section we summarise our experimental results. To study the effect of explicit representation of DI constraints on the size of a model and its solution performance, we conducted two sets of experiments.
Reference: [4] <author> A. Land and A. Doig. </author> <title> An automatic method for solving discrete programming problems. </title> <journal> Econometrica, </journal> <volume> 28(3) </volume> <pages> 497-520, </pages> <year> 1960. </year>
Reference-contexts: The term Branch and Bound refers to an enumerative technique which was first used for mixed ILP by Land and Doig <ref> [4] </ref>. The B&B algorithm follows the familiar idea of divide and conquer which can be described as a tree search characterised by the rules which perform the branching and bounding of the solution space. A search tree is composed of nodes and branches. A node corresponds to a sub-problem.
Reference: [5] <author> G. Mitra. </author> <title> Theory and Application of Mathematical Programming. </title> <publisher> Academic Press Inc, </publisher> <year> 1976. </year>
Reference-contexts: Many ILP solution techniques such as branch and bound (B&B) and cutting plane techniques, see Nemhauser [6] use variations of simplex algorithm, see Mitra <ref> [5] </ref>, to solve the LPR of the original ILP and a number of its sub-problems. Classic simplex algorithm deals with LP in standard form i.e. an LP in which all the constraints are equality and all the variables are non-negative. <p> Classic simplex algorithm deals with LP in standard form i.e. an LP in which all the constraints are equality and all the variables are non-negative. If some of the constraints 3 are inequality then they are converted to equality type constraints by adding logical variables <ref> [5] </ref>, before the start of the algorithm. Note that in computer implementation of simplex algorithm this conversion is taking place automatically at input time. An LP can be represented in four different forms which are equivalent to one another. <p> Note that in computer implementation of simplex algorithm this conversion is taking place automatically at input time. An LP can be represented in four different forms which are equivalent to one another. These are the Canonical form, General form, Mixed form and Standard form. Mitra <ref> [5] </ref> discuss these forms and show that by simple elementary operations all these forms can be transformed to one another. In this paper we first introduce the concept of dis-equality constraints in Mathematical Programming (MP).
Reference: [6] <author> G.L. Nemhauser and L.A. Wolsey. </author> <title> Integer and Combinatorial Optimisation. </title> <publisher> John Wiley and Sons, Inc, </publisher> <address> 1st edition, </address> <year> 1988. </year>
Reference-contexts: If in an ILP the integer restrictions (4) on variables are omitted then the remaining problem is called the Linear Programming Relaxation (LPR) of the ILP. Many ILP solution techniques such as branch and bound (B&B) and cutting plane techniques, see Nemhauser <ref> [6] </ref> use variations of simplex algorithm, see Mitra [5], to solve the LPR of the original ILP and a number of its sub-problems. Classic simplex algorithm deals with LP in standard form i.e. an LP in which all the constraints are equality and all the variables are non-negative.
Reference: [7] <author> R. Rodosek, M. Wallace, </author> <title> and M.T. Hajian. A new approach to integrating mixed integer programming and constraint logic programming. </title> <type> Technical report, </type> <institution> IC-Parc, William Penny Laboratory, Imperial College, </institution> <address> London, SW7 2AZ, </address> <year> 1996. </year>
Reference-contexts: This work is part of our ongoing research on integration of Constraint Logic programming (CLP) and ILP <ref> [7] </ref>. The main motivation for this research is to make ILP more flexible and to some 11 extent more compatible with the constraints of a CLP program. This is an early stage of the research; we believe that more results are needed to study these new formulations deeper.

References-found: 7

