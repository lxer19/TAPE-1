URL: http://www.cs.man.ac.uk/~kung-kiu/pub/lopstr98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Email: kung-kiu@cs.man.ac.uk  ornaghi@dsi.unimi.it  
Phone: 2  
Title: OOD Frameworks in Component-based Software Development in Computational Logic  
Author: Kung-Kiu Lau and Mario Ornaghi 
Address: Manchester M13 9PL, United Kingdom  Via Comelico 39/41, 20135 Milano, Italy  
Affiliation: 1 Department of Computer Science, University of Manchester  Dipartimento di Scienze dell'Informazione, Universita' degli studi di Milano  
Abstract: Current Object-oriented Design (OOD) methodologies tend to focus on objects as the unit of reuse, but it is increasingly recognised that frameworks, or groups of interacting objects, are a better unit of reuse. Thus, in next-generation Component-based Development (CBD) methodologies, we can expect components to be frameworks rather than objects. In this paper, we describe a preliminary attempt at a formal semantics for OOD frameworks in CBD in computational logic. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abadi and L. Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Nevertheless, refinement based on mediating theories is interesting, as also shown by SPECWARE [29], and it seems that it could be imported in our approach, as an orthogonal technique. Our model-theoretic characterisation of states and objects stands in contrast to the type-theoretic approach by Abadi & Cardelli <ref> [1] </ref>, however. The work that is most closely related to ours is that of Bourdeau & Cheng [3], which formalises a semantics for object model diagrams in OMT [27]. Basically they translate object model diagrams into algebraic specifications (and semantics) expressed in Larch [12].
Reference: 2. <author> A. Bertoni, G. Mauri, and P. Miglioli. </author> <title> On the power of model theory in specifying abstract data types and in capturing their recursiveness. </title> <note> Fundamenta Informaticae VI(2):127-170, </note> <year> 1983. </year>
Reference-contexts: They are similar to initial theories, which axiomatise reachable initial models. The latter are popular in algebraic abstract data types and specifications [30]. The difference is that initial models use homomorphisms, instead of isomorphic embeddings. We briefly discuss some relevant consequences here (for a more detailed comparison, see <ref> [2] </ref>).
Reference: 3. <author> R.H. Bourdeau and B.H.C. Cheng. </author> <title> A formal semantics for object model diagrams. </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 21(10) </volume> <pages> 799-821, </pages> <year> 1995. </year>
Reference-contexts: Our model-theoretic characterisation of states and objects stands in contrast to the type-theoretic approach by Abadi & Cardelli [1], however. The work that is most closely related to ours is that of Bourdeau & Cheng <ref> [3] </ref>, which formalises a semantics for object model diagrams in OMT [27]. Basically they translate object model diagrams into algebraic specifications (and semantics) expressed in Larch [12]. Thus they use initial theories, as opposed to isoinitial theories that we use. <p> Our preference for isoinitial semantics has already been discussed in Section 3. Another motivation is that, using initial semantics, additivity entails only that positive locally observable quantifier-free sentences are preserved at the system-level, i.e., any problems with negation will affect additivity. Moreover, the formalisation proposed by <ref> [3] </ref> is not oriented to (open) OOD frameworks, i.e. groups of interacting objects. In other words, they consider objects as the unit of reuse, whereas our formalisation supports OOD frameworks as the unit of reuse.
Reference: 4. <author> D. Coleman, P. Arnold, S. Bodoff, C. Dollin, H. Gilchrist, F. Hayes, and P. Jere-maes. </author> <title> Object-Oriented Development: The Fusion Method. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Most of the existing (semi-formal) Object-oriented Design (OOD) methods such as Fusion <ref> [4, 6] </ref> and Syntropy [5] use classes or objects as the basic unit of design or reuse. <p> Other approaches to formal semantics for CBD methodologies are mainly so-called integrated methods. For example France et al [9] derives Z [28] specifications from Fusion <ref> [4, 6] </ref> diagrams. At present, such methods do not have completely formal semantics. So far, our semantics provides a sound formalisation of OOD frameworks used in the CBD methodology Catalysis. However, in order to implement these frameworks, we need a formalism to describe and specify state transitions.
Reference: 5. <author> S. Cook and J. Daniels. </author> <title> Designing Object Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Most of the existing (semi-formal) Object-oriented Design (OOD) methods such as Fusion [4, 6] and Syntropy <ref> [5] </ref> use classes or objects as the basic unit of design or reuse. These methods are based on the traditional view of an object, as shown in Figure 1, which regards an object as a closed entity with one fixed role. visible functions structure internal encapsulated Fig. 1.
Reference: 6. <author> D.F. D'Souza and A.C. Wills. </author> <title> Extending Fusion: practical rigor and refinement. </title> <editor> In R. Malan et al , editors, </editor> <booktitle> Object-Oriented Development at Work . Prentice-Hall 1996. </booktitle>
Reference-contexts: 1 Introduction Most of the existing (semi-formal) Object-oriented Design (OOD) methods such as Fusion <ref> [4, 6] </ref> and Syntropy [5] use classes or objects as the basic unit of design or reuse. <p> Other approaches to formal semantics for CBD methodologies are mainly so-called integrated methods. For example France et al [9] derives Z [28] specifications from Fusion <ref> [4, 6] </ref> diagrams. At present, such methods do not have completely formal semantics. So far, our semantics provides a sound formalisation of OOD frameworks used in the CBD methodology Catalysis. However, in order to implement these frameworks, we need a formalism to describe and specify state transitions.
Reference: 7. <author> D.F. D'Souza and A.C. Wills. Catalysis: </author> <title> Components, Objects and Frameworks in UML. </title> <publisher> Addison-Wesley, </publisher> <month> October </month> <year> 1998. </year> <note> Draft available at http://www.trireme.com/catalysis/book. </note>
Reference-contexts: Typical design artefacts are rarely just about one object, but about groups of objects and the way they interact. Therefore in the next generation of component-based development (CBD) methodologies, we can expect components to be not just objects, but groups of (interacting) objects. In the CBD methodology Catalysis <ref> [7, 23, 16] </ref>, for example, objects can have multiple roles in different OOD frameworks, and are formed by composing frameworks, as depicted in Figure 2. Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks.
Reference: 8. <author> J.L. Fiadeiro and T. Maibaum. </author> <title> Categorical semantics of parallel program design. </title> <booktitle> Science of Computer Programming 28 </booktitle> <pages> 111-138, </pages> <year> 1997. </year>
Reference-contexts: After a first attempt, inspired by evolving algebras [11], we decided to model states by evolving axioms. At each time, an evolving axiom A represents an observable instantaneous property. Evolving axioms are not so far from dynamic attributes (as used in, e.g., <ref> [8] </ref> and TROLL [10]). For example, a dynamic attribute a : int with (current) value 5 corresponds to the (evolving) axiom a = 5, but evolving axioms allow us to describe larger classes of attributes, including data bases.
Reference: 9. <author> R.B. France, J.-M. Bruel, M. Larrondo-Petrie, E. Grant, and M. Saksena. </author> <title> Towards a rigorous object-oriented analysis and design method. </title> <booktitle> Proc. 1st IEEE Int. Conf. on Formal Engineering Methods, </booktitle> <pages> pages 7-16, </pages> <publisher> IEEE Computer Society, </publisher> <year> 1997. </year>
Reference-contexts: As we pointed out before, industry is increasingly recognising that objects are not the best focus for design, and OOD frameworks are becoming widely used as the basic unit of reuse. Other approaches to formal semantics for CBD methodologies are mainly so-called integrated methods. For example France et al <ref> [9] </ref> derives Z [28] specifications from Fusion [4, 6] diagrams. At present, such methods do not have completely formal semantics. So far, our semantics provides a sound formalisation of OOD frameworks used in the CBD methodology Catalysis.
Reference: 10. <author> A. Grau, J. Kuster Filipe, M. Kowsari, S. Eckstein, R. Pinger and H.-D. Ehrich. </author> <title> The TROLL approach to conceptual modelling: syntax, semantics and tools. </title> <editor> In T.W. Ling, S. Ram and M.L. Leebook, editors, </editor> <booktitle> Proc. 17th Int. Conference on Conceptual Modeling, </booktitle> <volume> LNCS 1507 </volume> <pages> 277-290, </pages> <publisher> Springer, </publisher> <year> 1998. </year>
Reference-contexts: After a first attempt, inspired by evolving algebras [11], we decided to model states by evolving axioms. At each time, an evolving axiom A represents an observable instantaneous property. Evolving axioms are not so far from dynamic attributes (as used in, e.g., [8] and TROLL <ref> [10] </ref>). For example, a dynamic attribute a : int with (current) value 5 corresponds to the (evolving) axiom a = 5, but evolving axioms allow us to describe larger classes of attributes, including data bases.
Reference: 11. <author> Y. Gurevich, </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specifi--cation and Validation Methods, </booktitle> <pages> pages 9-36, </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: More precisely, we cannot specify temporal properties, like liveness or deadlock freeness. In order to achieve this capability, we are studying a temporal model for systems of objects. After a first attempt, inspired by evolving algebras <ref> [11] </ref>, we decided to model states by evolving axioms. At each time, an evolving axiom A represents an observable instantaneous property. Evolving axioms are not so far from dynamic attributes (as used in, e.g., [8] and TROLL [10]).
Reference: 12. <author> J.V. Guttag and J.J. Horning. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The work that is most closely related to ours is that of Bourdeau & Cheng [3], which formalises a semantics for object model diagrams in OMT [27]. Basically they translate object model diagrams into algebraic specifications (and semantics) expressed in Larch <ref> [12] </ref>. Thus they use initial theories, as opposed to isoinitial theories that we use. Our preference for isoinitial semantics has already been discussed in Section 3.
Reference: 13. <author> R. Helm, I.M. Holland, and D. Gangopadhay. </author> <title> Contracts | Specifying behavioural compositions in OO systems. </title> <journal> Sigplan Notices 25(10) (Proc. </journal> <volume> ECOOP/OOPSLA 90 </volume> ). 
Reference-contexts: In particular, objects tend to have more than one role in more than one context or framework. Consequently, it is increasingly recognised that classes are not the best focus for design (see e.g. <ref> [13, 25] </ref>). Typical design artefacts are rarely just about one object, but about groups of objects and the way they interact. Therefore in the next generation of component-based development (CBD) methodologies, we can expect components to be not just objects, but groups of (interacting) objects.
Reference: 14. <author> C. Kreitz, K.-K. Lau, and M. Ornaghi. </author> <title> Formal reasoning about modules, reuse and their correctness. In D.M. </title> <editor> Gabbay and H.J. Ohlbach, editors, </editor> <booktitle> Proc. Int. Conf. on Formal and Applied Practical Reasoning, LNAI 1085 </booktitle> <pages> 384-399, </pages> <publisher> Springer-Verlag 1996. </publisher>
Reference-contexts: Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks. In computational logic, we have formulated a formal approach to program development <ref> [18, 19, 14] </ref>, in which we use what we call specification frameworks to formalise problem domains. These frameworks have purely declarative (model-theoretic) semantics. In this paper we will show (how) we can extend such frameworks to make them correspond to OOD frameworks. <p> By a completion procedure, we can build many closed expansions, that we call instances. Also, adequate open frameworks can be built incrementally, starting from a small, well understood kernel, and defining new symbols by adequate definitions, namely definitions that are inherited in a sound way (for more details, see <ref> [17, 14] </ref>). The existence of many instances implies reusability: every theorem, expansion, specification or correct program developed in an open framework are inherited, and can be reused in all its instances. Reusability was an important motivation behind open frameworks and has been used in [22] to treat parametric frameworks.
Reference: 15. <author> J. Kuster Filipe. </author> <title> Using a modular distributed temporal logic for in-the-large object specification. </title> <editor> In A. Brogi and P. Hill, editors, </editor> <booktitle> Proc. 1st Int. Workshop on Component-based Software Development in Computational Logic, </booktitle> <pages> pages 43-57, </pages> <month> September </month> <year> 1998, </year> <institution> Pisa, Italy. </institution>
Reference-contexts: To express dynamic behaviour, we need to model actions and time, taking into account the modularity induced by the presence of composite objects (similar ideas can be found, e.g., in <ref> [15] </ref>). Our aim is to introduce time in the specification language, and to deal with correctness of state transition methods in this extended context. Acknowledgements We wish to thank the referees for their helpful comments and suggestions.
Reference: 16. <author> K.-K. Lau, S. Liu, M. Ornaghi, and A. Wills. </author> <title> Interacting Frameworks in Catalysis. </title> <booktitle> To appear in Proc. 2nd IEEE Int. Conf. on Formal Engineering Methods, </booktitle> <month> 9-11 December </month> <year> 1998, </year> <institution> Brisbane, Australia. </institution>
Reference-contexts: Typical design artefacts are rarely just about one object, but about groups of objects and the way they interact. Therefore in the next generation of component-based development (CBD) methodologies, we can expect components to be not just objects, but groups of (interacting) objects. In the CBD methodology Catalysis <ref> [7, 23, 16] </ref>, for example, objects can have multiple roles in different OOD frameworks, and are formed by composing frameworks, as depicted in Figure 2. Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks. <p> Finally, we briefly discuss open OBJ-frameworks. In the previous example, both DRIVER and GU EST have the general structure of an user, i.e., they have 12 We will present a simplified version of the (UML-like) notation used in Catalysis. More details can be found in <ref> [23, 16] </ref>. PersonAsGuest MotelPerson stays&gt; PersonCar &lt;drives PersonAsDriver Fig. 5. PersonAsDriver and PersonAsGuest OOD frameworks. PersonCar &lt;drives PersonAsDriverGuest Motel stays&gt; Fig. 6. PersonAsDriverGuest OOD framework. the form &lt; U SER &gt; [&lt; U SIN G &gt;; &lt; U SED &gt;].
Reference: 17. <author> K.-K. Lau and M. Ornaghi. </author> <title> On specification frameworks and deductive synthesis of logic programs. </title> <editor> In L. Fribourg and F. Turini, editors, </editor> <booktitle> Proc. LOPSTR 94 and META 94 , Lecture Notes in Computer Science 883, </booktitle> <pages> pages 104-121, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: An explicit definition of a new function f is a ( + f )-formula of the form 8x : F (x; f (x)) where the defining formula F (x; y) is a -formula such that Ax ` 8x9!y : F (x; y): In <ref> [17] </ref> we have shown how adequate explicit definitions can be established by means of programs synthesis. In [26] it is shown that constructive proof-systems can be used to prove adequacy. <p> By a completion procedure, we can build many closed expansions, that we call instances. Also, adequate open frameworks can be built incrementally, starting from a small, well understood kernel, and defining new symbols by adequate definitions, namely definitions that are inherited in a sound way (for more details, see <ref> [17, 14] </ref>). The existence of many instances implies reusability: every theorem, expansion, specification or correct program developed in an open framework are inherited, and can be reused in all its instances. Reusability was an important motivation behind open frameworks and has been used in [22] to treat parametric frameworks.
Reference: 18. <author> K.-K. Lau and M. Ornaghi. </author> <title> Towards an object-oriented methodology for deductive synthesis of logic programs. </title> <editor> In M. Proietti, editor, </editor> <booktitle> Proc. </booktitle> <volume> LOPSTR 95 , LNCS 1048 </volume> <pages> 152-169, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks. In computational logic, we have formulated a formal approach to program development <ref> [18, 19, 14] </ref>, in which we use what we call specification frameworks to formalise problem domains. These frameworks have purely declarative (model-theoretic) semantics. In this paper we will show (how) we can extend such frameworks to make them correspond to OOD frameworks.
Reference: 19. <author> K.-K. Lau and M. Ornaghi. </author> <title> A formal approach to deductive synthesis of constraint logic programs. </title> <editor> In J.W. Lloyd, editor, </editor> <booktitle> Proc. 1995 Int. Logic Programming Symp., </booktitle> <pages> pages 543-557, </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks. In computational logic, we have formulated a formal approach to program development <ref> [18, 19, 14] </ref>, in which we use what we call specification frameworks to formalise problem domains. These frameworks have purely declarative (model-theoretic) semantics. In this paper we will show (how) we can extend such frameworks to make them correspond to OOD frameworks.
Reference: 20. <author> K.-K. Lau and M. Ornaghi, </author> <title> Isoinitial Models for Logic Programs: A Preliminary Study, </title> <editor> in J.L. Freire-Nistal, M. Falaschi, and M. Vilares-Ferro, editors, </editor> <booktitle> Proceedings of the 1998 Joint Conference on Declarative Programming, </booktitle> <pages> pages 443-455, </pages> <address> A Coru~na, Spain, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: This is a purely proof-theoretical condition, i.e., i j= : : : disappears. This makes it more manageable. For example, we have used it to link isoinitiality to termination of logic programs <ref> [20] </ref>, and in [26] a constructive proof-theory for isoinitiality has been based on atomic completeness. A third reason lies in our distinction between closed and open frameworks. Closed frameworks are required to be rich enough, to have an intended model.
Reference: 21. <author> K.-K. Lau and M. Ornaghi. </author> <title> On specification and correctness of OOD frameworks in computational logic. </title> <editor> In A. Brogi and P. Hill, editors, </editor> <booktitle> Proc. 1st Int. Workshop on Component-based Software Development in Computational Logic, </booktitle> <pages> pages 59-75, </pages> <month> September </month> <year> 1998, </year> <institution> Pisa, Italy. </institution>
Reference-contexts: Thus, frameworks capture the declarative semantics of reusable components needed by CBD methodologies, and of their correctness and their composition <ref> [21] </ref>. However, so far our frameworks are static, i.e. they are immutable theories.
Reference: 22. <author> K.-K. Lau, M. Ornaghi, and S.- A. </author> <title> Tarnlund. Steadfast logic programs. </title> <note> To appear in J. Logic Programming. </note>
Reference-contexts: At the bottom level are (correct) programs. For every specified relation r, a framework may contain a correct program for computing r. We have a model-theoretic definition of correctness, based on steadfastness <ref> [22] </ref>. Frameworks may be parametric, thus supporting classes, subclasses, inheritance, and framework composition. In particular, a composite framework inherits all the properties, specifications and correct programs of its components; correctness is preserved by framework composition, and the inherited programs can be composed to yield new correct (composed) programs. <p> The existence of many instances implies reusability: every theorem, expansion, specification or correct program developed in an open framework are inherited, and can be reused in all its instances. Reusability was an important motivation behind open frameworks and has been used in <ref> [22] </ref> to treat parametric frameworks. In this paper, we will also use them to define objects with states. To this end, we introduce a completion procedure based on explicit definitions.
Reference: 23. <author> K.-K. Lau, M. Ornaghi, and A. Wills. </author> <title> Frameworks in Catalysis: Pictorial Notation and Formal Semantics. </title> <booktitle> Proc. 1st IEEE Int. Conf. on Formal Engineering Methods, </booktitle> <pages> pages 213-220, </pages> <publisher> IEEE Computer Society, </publisher> <year> 1997. </year>
Reference-contexts: Typical design artefacts are rarely just about one object, but about groups of objects and the way they interact. Therefore in the next generation of component-based development (CBD) methodologies, we can expect components to be not just objects, but groups of (interacting) objects. In the CBD methodology Catalysis <ref> [7, 23, 16] </ref>, for example, objects can have multiple roles in different OOD frameworks, and are formed by composing frameworks, as depicted in Figure 2. Framework 1 + 2 role A role B role A Framework 1 Framework 2 role B Fig. 2. Objects by composing OOD frameworks. <p> Finally, we briefly discuss open OBJ-frameworks. In the previous example, both DRIVER and GU EST have the general structure of an user, i.e., they have 12 We will present a simplified version of the (UML-like) notation used in Catalysis. More details can be found in <ref> [23, 16] </ref>. PersonAsGuest MotelPerson stays&gt; PersonCar &lt;drives PersonAsDriver Fig. 5. PersonAsDriver and PersonAsGuest OOD frameworks. PersonCar &lt;drives PersonAsDriverGuest Motel stays&gt; Fig. 6. PersonAsDriverGuest OOD framework. the form &lt; U SER &gt; [&lt; U SIN G &gt;; &lt; U SED &gt;].
Reference: 24. <author> T. Maibaum. </author> <title> Conservative extensions, interpretations between theories and all that! In Proc. </title> <booktitle> TAPSOFT 97, </booktitle> <volume> LNCS 1214 </volume> <pages> 40-66, </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: We believe that the semantics classical first-order logic, based on classes of interpretations that satisfy common properties, models in a natural and intuitive way the variety of uses and meanings that open ADT's and classes can assume in different contexts. Our approach is similar to that proposed by Maibaum <ref> [24] </ref> in the use of theories as the units of construction and the relevant role of conservative (and, in our approach, adequate) extensions. However, we have a different emphasis on intended models.
Reference: 25. <author> R. Mauth. </author> <title> A better foundation: development frameworks let you build an application with reusable objects. </title> <address> BYTE 21(9):40IS 10-13, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: In particular, objects tend to have more than one role in more than one context or framework. Consequently, it is increasingly recognised that classes are not the best focus for design (see e.g. <ref> [13, 25] </ref>). Typical design artefacts are rarely just about one object, but about groups of objects and the way they interact. Therefore in the next generation of component-based development (CBD) methodologies, we can expect components to be not just objects, but groups of (interacting) objects.
Reference: 26. <author> P. Miglioli, U. Moscato and M. Ornaghi. </author> <title> Abstract parametric classes and abstract data types defined by classical and constructive logical methods. </title> <journal> J. Symb. Comp. </journal> <volume> 18 </volume> <pages> 41-81, </pages> <year> 1994. </year>
Reference-contexts: This is a purely proof-theoretical condition, i.e., i j= : : : disappears. This makes it more manageable. For example, we have used it to link isoinitiality to termination of logic programs [20], and in <ref> [26] </ref> a constructive proof-theory for isoinitiality has been based on atomic completeness. A third reason lies in our distinction between closed and open frameworks. Closed frameworks are required to be rich enough, to have an intended model. If such a model does not exist, then they are open. <p> In <ref> [26] </ref> it is shown that constructive proof-systems can be used to prove adequacy.
Reference: 27. <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Sorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: Our model-theoretic characterisation of states and objects stands in contrast to the type-theoretic approach by Abadi & Cardelli [1], however. The work that is most closely related to ours is that of Bourdeau & Cheng [3], which formalises a semantics for object model diagrams in OMT <ref> [27] </ref>. Basically they translate object model diagrams into algebraic specifications (and semantics) expressed in Larch [12]. Thus they use initial theories, as opposed to isoinitial theories that we use. Our preference for isoinitial semantics has already been discussed in Section 3.
Reference: 28. <author> J.M. Spivey. </author> <title> The Z Notation. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: Other approaches to formal semantics for CBD methodologies are mainly so-called integrated methods. For example France et al [9] derives Z <ref> [28] </ref> specifications from Fusion [4, 6] diagrams. At present, such methods do not have completely formal semantics. So far, our semantics provides a sound formalisation of OOD frameworks used in the CBD methodology Catalysis.
Reference: 29. <author> Y.V. Srinvas and R. Jullig Specware: </author> <title> Formal support for composing software. </title> <booktitle> In Proc. </booktitle> <volume> MCP 95, LNCS 947 </volume> <pages> 399-422, </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Another difference is that our modularity is ruled by framework constraints, rather than guaranteed by general conditions, like interpolability. Moreover, we want to model correct reusability of open programs, rather than stepwise implementation. Nevertheless, refinement based on mediating theories is interesting, as also shown by SPECWARE <ref> [29] </ref>, and it seems that it could be imported in our approach, as an orthogonal technique. Our model-theoretic characterisation of states and objects stands in contrast to the type-theoretic approach by Abadi & Cardelli [1], however.
Reference: 30. <author> M. Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 675-788. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Thus, our closed frameworks are isoinitial theories, namely theories with reachable isoinitial models. They are similar to initial theories, which axiomatise reachable initial models. The latter are popular in algebraic abstract data types and specifications <ref> [30] </ref>. The difference is that initial models use homomorphisms, instead of isomorphic embeddings. We briefly discuss some relevant consequences here (for a more detailed comparison, see [2]).
References-found: 30

