URL: http://www-lsr.imag.fr/users/Didier.Bert/Papers/wadt94.ps.gz
Refering-URL: http://www-lsr.imag.fr/Les.Groupes/scop/f-publi.html
Root-URL: http://www.imag.fr
Email: Email: fbert,echahedg@imag.fr  
Title: On the Operational Semantics of the Algebraic and Logic Programming Language LPG  
Author: Didier Bert and Rachid Echahed 
Address: BP 53, 38041 Grenoble cedex 9, France  
Affiliation: IMAG-LGI, CNRS,  
Abstract: This paper gives a brief description of the recent improvements of lpg, a programming language that integrates algebraic and logic programming paradigms. In this language, functions are defined by means of constructor-based conditional term rewriting systems and predicates are defined by means of Horn clauses where the bodies may contain classical literals as well as equations and negations of equations (disequations). The operational semantics of lpg is based on an extension of SLDresolution which deals with equations and disequations by using a narrowing-based algorithm. We investigate such a narrowing-based algorithm for solving equations and disequations and give new sufficient conditions that ensure the completeness of narrowing strategies, in presence of conditional term rewrite systems. Similarities and differencies with other logic and functional languages are pointed out. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Antoy, R. Echahed, and M. Hanus. </author> <title> A needed narrowing strategy. </title> <booktitle> In Proc. of POPL'94, </booktitle> <pages> pages 268-279, </pages> <address> Portland, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: When defined functions are partial, there are cases (goals) that cannot be solved completely by such strategies (see [9]). So, to consider a larger class of specifications where functions may be partial and TRS's are not even terminating, an extension of needed narrowing <ref> [1] </ref> to CTRS's will be a very good candidate. Another point is that narrowing strategies do not always avoid useless branches. Thus, other techniques can be used in order to detect wasted computations.
Reference: 2. <author> P. Arenas-Sanchez, A. Gil-Luezas, and J. Lopez-Fraguas. </author> <title> Combining Lazy narrowing with Disequality Constraints. </title> <booktitle> In Proc. of PLILP'94, </booktitle> <pages> pages 385-399. </pages> <note> LNCS 844, </note> <year> 1994. </year>
Reference-contexts: This fact allows the use of disequations within the bodies of Horn clauses without any problem. In other words, any completely instantiated lpg specification has an initial model. In languages based on conditional equational logic, the introduction of disequa-tions in specifications is not so easy. In <ref> [2] </ref>, an extension of babel [20] with disequations is sketched. Though traditional standard (initial) models do not always exist, the declarative semantics of babel ensures the existence of a kind of least model. In such a model some functions may be undefined (i.e., f (x) = ?).
Reference: 3. <author> D. Bert and R. Echahed. </author> <title> Design and implementation of a generic, </title> <booktitle> logic and functional programming language. In Proc. of ESOP'86, </booktitle> <pages> pages 119-132. </pages> <note> LNCS 213, </note> <year> 1986. </year>
Reference-contexts: In lpg system, when a term is ground, one may obtain its normal form by invoking a tool, called the interpreter, dedicated to such a task. This tool uses a compiled code of an abstract machine. By lack of place, the interpreter is not presented in this paper (see <ref> [3] </ref>). f1g vertical (a) ? for all k 1 : nat for all i 1 : nat a == c line (c dot (i 1,j 1),c dot (i 1,k 1)) k 1 =/= j 1 more solutions? y No more solutions. f1g x + y == x * y ? y <p> Fig. 6. Sample session of lpg solver. The solver is based on one complete inference rule, an extension of the SLD-resolution, called SLDEI-resolution <ref> [8, 3] </ref>. This inference rule is parameterized by an algorithm solving equations and disequations in initial models and may be easily extended in order to cope with other new constraints.
Reference: 4. <author> D. Bert, R. Echahed, and B. M. Ostvold. </author> <title> Abstract rewriting. </title> <booktitle> In Proc. of WSA'93, </booktitle> <pages> pages 178-192. </pages> <note> LNCS 724, </note> <year> 1993. </year>
Reference-contexts: Another point is that narrowing strategies do not always avoid useless branches. Thus, other techniques can be used in order to detect wasted computations. In <ref> [4] </ref> we have started the investigation of a new method, based on abstract analysis techniques, which tries to avoid narrowing over some unsatisfiable equations or disequations. We plan to continue such investigations.
Reference: 5. <author> D. Bert, R. Echahed, and J.-C. Reynaud. </author> <title> Reference manual of the LPG specification language and environment. Release with disequations. </title> <type> Technical report, </type> <institution> IMAG, University of Grenoble, </institution> <note> anonymous ftp distribution : at imag.fr,/pub/SCOP/LPG, </note> <year> 1994. </year>
Reference-contexts: A generic module can be instantiated by a model of its required property by need. The objects declared in the instantiated modules are available and can be used directly as non generic ones (for more information, see <ref> [5] </ref>). Several notations are available to denote such instantiated objects.
Reference: 6. <author> N. Dershowitz and J. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: At last, we conclude by a short comparison with other languages integrating functional and logic programming and give some insights into the possible future directions to improve the system. 2 Preliminaries In this section, we recall some important notions and notations. See <ref> [6, 17] </ref> for the missing definitions about rewriting theory. A many-sorted first order signature is a tuple (S; ; ) where S is a set of sorts, is an S fl -indexed family of operation sets, and is an S + -indexed family of predicate sets.
Reference: 7. <author> R. Echahed. </author> <title> On completeness of narrowing strategies. </title> <booktitle> In Proc. CAAP'88, </booktitle> <pages> pages 89-101. </pages> <note> LNCS 299, </note> <year> 1988. </year>
Reference-contexts: Thus, many strategies of narrowing have been proposed. One of the most interesting improvement of narrowing-based algorithms consists in using the so called narrowing position selection strategies (or narrowing strategies for short) <ref> [21, 7] </ref>. The advantage of these strategies is undeniable. They can reduce drastically the narrowing search tree as they perform narrowing only at one chosen position. Formally, a narrowing strategy N S is a partial function from terms to positions (sequence of naturals). <p> For a goal G, we write N S (G) to denote a narrowing position N S (e) such that e is an equation or a disequation in G. Unfortunately, the use of such strategies does not always preserve the completeness of narrowing algorithms (see <ref> [7] </ref> for a counterexample). So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed [7, 21, 9]. In this paper, we extend the conditions given in [9] to the case of CTRS's. <p> Unfortunately, the use of such strategies does not always preserve the completeness of narrowing algorithms (see [7] for a counterexample). So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed <ref> [7, 21, 9] </ref>. In this paper, we extend the conditions given in [9] to the case of CTRS's. In [9] we have proved that, in addition to termination and confluence of unconditional TRS's, a narrowing strategy is complete if it is uniform.
Reference: 8. <author> R. Echahed. </author> <title> Sur l'integration des langages algebriques et logiques. </title> <institution> These de l'Institut National Polytechnique de Grenoble, </institution> <year> 1990. </year>
Reference-contexts: Fig. 6. Sample session of lpg solver. The solver is based on one complete inference rule, an extension of the SLD-resolution, called SLDEI-resolution <ref> [8, 3] </ref>. This inference rule is parameterized by an algorithm solving equations and disequations in initial models and may be easily extended in order to cope with other new constraints. <p> The set of solutions computed by SLDEI-resolution for the goal G is a complete set of solutions of G. The proof of the completeness of SLDEI-resolution is quite similar to the one given in <ref> [8] </ref>. The consideration of disequations does not cause any substantial problem since the restriction of the use of disequations (Recall that disequations are not allowed in the bodies of conditional equations) ensures the existence of initial models.
Reference: 9. <author> R. Echahed. </author> <title> Uniform narrowing strategies. </title> <booktitle> In Proc. of ALP'92, </booktitle> <pages> pages 259-275. </pages> <note> LNCS 632, </note> <year> 1992. </year>
Reference-contexts: Unfortunately, the use of such strategies does not always preserve the completeness of narrowing algorithms (see [7] for a counterexample). So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed <ref> [7, 21, 9] </ref>. In this paper, we extend the conditions given in [9] to the case of CTRS's. In [9] we have proved that, in addition to termination and confluence of unconditional TRS's, a narrowing strategy is complete if it is uniform. <p> So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed [7, 21, 9]. In this paper, we extend the conditions given in <ref> [9] </ref> to the case of CTRS's. In [9] we have proved that, in addition to termination and confluence of unconditional TRS's, a narrowing strategy is complete if it is uniform. <p> So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed [7, 21, 9]. In this paper, we extend the conditions given in <ref> [9] </ref> to the case of CTRS's. In [9] we have proved that, in addition to termination and confluence of unconditional TRS's, a narrowing strategy is complete if it is uniform. <p> The following example shows that these conditions do not ensure any more the completeness of narrowing strategies in the case of conditional TRS's. Example 4.3 Consider the following CTRS. It is borrowed from [19] and mod ified in order to satisfy the uniformity condition <ref> [9] </ref>. f (d) ! a &lt;== d==b; d==c f (a) ! c d ! c This CTRS is confluent and terminating. Consider the goal f (d)==a. The identity substitution is a solution for this goal. However, we can find some uniform narrowing strategy that leads to no solution. <p> Then, there exists a substitution , computed by the inference system EQU ALIT Y such that i E oe [Var (G)]. If we consider unconditional TRS's we can see that the system EQU ALIT Y encompasses, on one hand the rules of solving equations using narrowing strategies <ref> [9] </ref> and on the other hand the rules of solving disequations given in [11] that we have corrected and improved by the use of narrowing strategies. The lpg solver (see Figure 6 for a sample session) implements additional inference rules that improve the operational semantics. <p> Indeed, the existence of such strategies is ensured only when defined functions are total (not partial). When defined functions are partial, there are cases (goals) that cannot be solved completely by such strategies (see <ref> [9] </ref>). So, to consider a larger class of specifications where functions may be partial and TRS's are not even terminating, an extension of needed narrowing [1] to CTRS's will be a very good candidate. Another point is that narrowing strategies do not always avoid useless branches.
Reference: 10. <author> H. Ehrig and B. Mahr. </author> <title> Fundamentals of Algebraic Specification 1: Equations and Initial Semantics, </title> <booktitle> volume 6 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The semantics of a generic data module is a strongly persistent free functor sending the class of models of the generic parameter to the class of models of the module <ref> [10] </ref>. But the operational semantics of the lpg language is defined for a single specification. So, for a modular specification SP , we need to compute a specification F lat (SP ), which is the flattened specification associated to SP , when it exists.
Reference: 11. <author> M. Fernandez. </author> <title> Narrowing based procedures for equational disunification. </title> <type> Technical Report 764, </type> <institution> LRI, University of Paris Sud, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The proof is given in appendix (Section 6). 4 Note that the corresponding rule in <ref> [11] </ref> is not sound. Proposition 4.7 Let SP = (; R; Cl) be a constructor-based specification such that 7! R is confluent and terminating, N S a uniform narrowing strategy, G a goal consisting of equations and disequations. Let oe be a ground solution of G. <p> If we consider unconditional TRS's we can see that the system EQU ALIT Y encompasses, on one hand the rules of solving equations using narrowing strategies [9] and on the other hand the rules of solving disequations given in <ref> [11] </ref> that we have corrected and improved by the use of narrowing strategies. The lpg solver (see Figure 6 for a sample session) implements additional inference rules that improve the operational semantics. Actually, we rather use normal narrowing, i.e., after each narrowing step, the considered term is normalized. <p> This last point does not really matter, since one can easily augment babel environment with narrowing strategies and use them whenever the considered TRS is constructor-based. Another tentative to handle disequations is presented in [14]. This implementation, which follows <ref> [11] </ref>, considers unconditional constructor-based TRS's and uses basic narrowing. Finally, we review some possible improvements of the solving tool. The use of narrowing strategies allows to prune drastically the narrowing search tree.
Reference: 12. <author> K. Futatsugi, J. A. Goguen, J.-P. Jouannaud, and J. Meseguer. </author> <booktitle> Principles of OBJ2. In Proc. of 12th ACM POPL, </booktitle> <pages> pages 51-60. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: Actually, it is very useful to declare that a data type is a special case of a well known mathematical structure described by an lpg property, thus giving a better information on the type being specified. This is the idea of "views" in the obj language <ref> [12] </ref> and also in recent languages for computer algebra. A simple application of this method is to specify that some operators are commutative, or associative, or both, if they are models of the adequate property.
Reference: 13. <author> J. A. Goguen and J. Meseguer. </author> <title> EQLOG: Equality, Types and Generic Modules for Logic Programming. In Functional and Logic Programming, </title> <editor> eds. DeGroot and Lindstrom. </editor> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: New results about the operational semantics are the presentation of a sound inference system for equalities and disequalities, the use of uniform strategies and the completeness of such strategies for conditional term rewriting systems. Among the different proposals of functional logic programming languages, eqlog <ref> [13] </ref> is by no means the closest to lpg. Both are based on Horn clause logic with equality and provide generic modules. However, eqlog offers subsort facilities which lack in lpg whereas lpg allows the use of disequalities which is not possible in eqlog. <p> However, eqlog offers subsort facilities which lack in lpg whereas lpg allows the use of disequalities which is not possible in eqlog. As far as we know, eqlog has not been implemented and its operational semantics has been only sketched in <ref> [13] </ref> without any seek for optimization or so. In lpg, predicates and functions are well distinguished. This fact allows the use of disequations within the bodies of Horn clauses without any problem. In other words, any completely instantiated lpg specification has an initial model.
Reference: 14. <author> M. Haberstrau. </author> <title> ECOLOG : an Environment for COnstraint LOGics. </title> <booktitle> In Proc. of CCL'94, </booktitle> <pages> pages 237-252. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This last point does not really matter, since one can easily augment babel environment with narrowing strategies and use them whenever the considered TRS is constructor-based. Another tentative to handle disequations is presented in <ref> [14] </ref>. This implementation, which follows [11], considers unconditional constructor-based TRS's and uses basic narrowing. Finally, we review some possible improvements of the solving tool. The use of narrowing strategies allows to prune drastically the narrowing search tree.
Reference: 15. <author> M. Hanus. </author> <title> The integration of functions into logic programming: From theory to practice. </title> <journal> Journal of Logic Programming, </journal> 19&20:583-628, 1994. 
Reference-contexts: 1 Introduction After the proposal of the language loglisp by Robinson and Sibert [22], many languages have been proposed to combine functional and logic programming paradigms, see for instance <ref> [15] </ref> for a recent survey.
Reference: 16. <author> J.-M. Hullot. </author> <title> Canonical forms and unification. </title> <booktitle> In Proc. 5th Conference on Automated Deduction, </booktitle> <volume> number 87, </volume> <pages> pages 318-334. </pages> <note> LNCS 87, </note> <year> 1980. </year>
Reference-contexts: In following, we present the inference rules that underlie such an algorithm which we have designed and implemented in lpg. This algorithm is based on narrowing <ref> [16] </ref>. It is well known that narrowing-based algorithms develop a very large search tree, computing very often redundant informations. Thus, many strategies of narrowing have been proposed.
Reference: 17. <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: At last, we conclude by a short comparison with other languages integrating functional and logic programming and give some insights into the possible future directions to improve the system. 2 Preliminaries In this section, we recall some important notions and notations. See <ref> [6, 17] </ref> for the missing definitions about rewriting theory. A many-sorted first order signature is a tuple (S; ; ) where S is a set of sorts, is an S fl -indexed family of operation sets, and is an S + -indexed family of predicate sets.
Reference: 18. <author> J. Meseguer. </author> <title> Multiparadigm logic programming. </title> <booktitle> In Proc. of ALP'92, </booktitle> <pages> pages 158-200. </pages> <note> LNCS 632, </note> <year> 1992. </year>
Reference-contexts: In this rough classification, lpg may be considered as an element of the second class, even if some features like the use of disequations are syntactically allowed. lpg can be considered as an example of a language based on the notion of strong logic programming defined by Meseguer in <ref> [18] </ref>. In this framework a program P is a signature together with a finite set of sentences (axioms) in a logic L. The denotational semantics of P is a model M S P of P , which is standard in a well defined sense.
Reference: 19. <author> A. Middeldorp and E. Hamoen. </author> <title> Counterexamples to completeness results for basic narrowing (extended abstract). </title> <booktitle> In Proc. of ALP'92, </booktitle> <pages> pages 244-258. </pages> <note> LNCS 632, </note> <year> 1992. </year>
Reference-contexts: The following example shows that these conditions do not ensure any more the completeness of narrowing strategies in the case of conditional TRS's. Example 4.3 Consider the following CTRS. It is borrowed from <ref> [19] </ref> and mod ified in order to satisfy the uniformity condition [9]. f (d) ! a &lt;== d==b; d==c f (a) ! c d ! c This CTRS is confluent and terminating. Consider the goal f (d)==a. The identity substitution is a solution for this goal. <p> However, at each step, the chosen position is uniform. To overcome this problem we need to reason upon a further rewrite relation <ref> [19] </ref> induced by CTRS's on goals. We note this relation 7! which is defined by : Definition 4.4 Let R be a CTRS and S and T two goals. <p> of a rewrite rule in R and a substitution oe such that : 1. e j p = oe (l) 3. for every equation s==t in c, oe (s) # R oe (t) The advantage of this relation consists in having a simple correspondence between conditional narrowing and conditional rewriting <ref> [19] </ref> as it is the case for unconditional TRS's. Thus the completeness proof of conditional narrowing becomes quite similar to unconditional narrowing and the conditions for the completeness of narrowing strategies concern rather the relation 7! R than ! R .
Reference: 20. <author> J. J. Moreno-Navarro and M. Rodriguez-Artalejo. </author> <title> Logic programming with functions and predicates: The language BABEL. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 191-223, </pages> <year> 1992. </year>
Reference-contexts: In other words, any completely instantiated lpg specification has an initial model. In languages based on conditional equational logic, the introduction of disequa-tions in specifications is not so easy. In [2], an extension of babel <ref> [20] </ref> with disequations is sketched. Though traditional standard (initial) models do not always exist, the declarative semantics of babel ensures the existence of a kind of least model. In such a model some functions may be undefined (i.e., f (x) = ?).
Reference: 21. <author> P. Padawitz. </author> <title> Computing in Horn Clause Theories, </title> <booktitle> volume 16 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Thus, many strategies of narrowing have been proposed. One of the most interesting improvement of narrowing-based algorithms consists in using the so called narrowing position selection strategies (or narrowing strategies for short) <ref> [21, 7] </ref>. The advantage of these strategies is undeniable. They can reduce drastically the narrowing search tree as they perform narrowing only at one chosen position. Formally, a narrowing strategy N S is a partial function from terms to positions (sequence of naturals). <p> Unfortunately, the use of such strategies does not always preserve the completeness of narrowing algorithms (see [7] for a counterexample). So, sufficient conditions on specifications that ensure the completeness of such strategies (particularly the outermost strategy) have been proposed <ref> [7, 21, 9] </ref>. In this paper, we extend the conditions given in [9] to the case of CTRS's. In [9] we have proved that, in addition to termination and confluence of unconditional TRS's, a narrowing strategy is complete if it is uniform.

Reference: 1. <author> G = k(g 1 ; : : : ; g n )=/=k 0 (g 0 m ) where k and k 0 are constructors. </author> <title> In this case, is the identity and oe 0 = oe. We have (G; id) ! EQU (;; id). </title>
Reference-contexts: When defined functions are partial, there are cases (goals) that cannot be solved completely by such strategies (see [9]). So, to consider a larger class of specifications where functions may be partial and TRS's are not even terminating, an extension of needed narrowing <ref> [1] </ref> to CTRS's will be a very good candidate. Another point is that narrowing strategies do not always avoid useless branches. Thus, other techniques can be used in order to detect wasted computations.




References-found: 22

