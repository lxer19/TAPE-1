URL: http://www-cad.eecs.berkeley.edu/~gms/pub/gmsVisCav.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~gms/projects/research.html
Root-URL: 
Title: An Iterative Method for Reached State Approximation  
Author: Cliff Cordeiro 
Abstract: In this paper we present a new method for computing the approximate reached state set of a finite state machine by modifying its transition relation. Both upper and lower bounds are computed using this method.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Touati, R. K. Brayton, and R. P. Kurshan, </author> <title> Checking Language Containment using BDDs, </title> <booktitle> in Proc. of Intl. Workshop on Formal Methods in VLSI Design, </booktitle> <address> (Miami, FL), </address> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Computing the set of reached states in a finite state machine (FSM) is a key operation in both verification <ref> [1] </ref> and synthesis [2] & [3]. The reached state set allows designers to check a design for errors and other unwanted behavior. It is a precise measure of the exact set of states a design can take under all possible inputs.
Reference: [2] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Sequential Circuit Design Using Synthesis and Optimization, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 328-333, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Computing the set of reached states in a finite state machine (FSM) is a key operation in both verification [1] and synthesis <ref> [2] </ref> & [3]. The reached state set allows designers to check a design for errors and other unwanted behavior. It is a precise measure of the exact set of states a design can take under all possible inputs.
Reference: [3] <author> H. Cho, G. D. Hachtel, and F. Somenzi, </author> <title> Redundancy Identification and Removal Based on Implicit State Enumeration, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 77-80, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Computing the set of reached states in a finite state machine (FSM) is a key operation in both verification [1] and synthesis [2] & <ref> [3] </ref>. The reached state set allows designers to check a design for errors and other unwanted behavior. It is a precise measure of the exact set of states a design can take under all possible inputs.
Reference: [4] <author> R. Bryant, </author> <title> Graph-based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-35, </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Unfortunately this computation explodes when the number of states in the FSM becomes very large, as is the case in real designs. This is often called the state explosion problem. To attempt to overcome this problem, an implicit representation called a binary decision diagram or BDD <ref> [4] </ref>, is used to represent the required quantities. e.g. the transition relation (TR), which implicitly represents the FSM's state transition graph, and the initial and reachable sets of states.
Reference: [5] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Implicit State Enumeration of Finite State Machines using BDD's, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This traversal may be breadth first or depth first. Touati et-al <ref> [5] </ref> Burch et-al [6], and Coudert et-al [7] independently extended this concept to handle reachability in large systems by using implicit methods. All quantities (transition relations, sets of states etc.) are represented by BDD's (binary decision diagrams), and the algorithm is represented by a fixed point computation. <p> To compute the function with the (heuristically) smallest BDD that lies between some upper bound f + d and lower bound f , the generalized cofactor f d may be used, as in <ref> [5] </ref>. This function was used to compute intermediate BDDs between our calculated TR BBDs and the actual TR BBD. The modified BDDs are then supplied to a function which computes the exact reached state set.
Reference: [6] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill, </author> <title> Symbolic Model Checking: 10 20 States and Beyond, </title> <journal> Information and Computation, </journal> <volume> vol. 98, no. 2, </volume> <pages> pp. 142-170, </pages> <year> 1992. </year>
Reference-contexts: This traversal may be breadth first or depth first. Touati et-al [5] Burch et-al <ref> [6] </ref>, and Coudert et-al [7] independently extended this concept to handle reachability in large systems by using implicit methods. All quantities (transition relations, sets of states etc.) are represented by BDD's (binary decision diagrams), and the algorithm is represented by a fixed point computation.
Reference: [7] <author> O. Coudert and J. C. Madre, </author> <title> A Unified Framework for the Formal Verification of Sequential Circuits, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 126-129, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This traversal may be breadth first or depth first. Touati et-al [5] Burch et-al [6], and Coudert et-al <ref> [7] </ref> independently extended this concept to handle reachability in large systems by using implicit methods. All quantities (transition relations, sets of states etc.) are represented by BDD's (binary decision diagrams), and the algorithm is represented by a fixed point computation.
Reference: [8] <author> K. Ravi and F. Somenzi, </author> <title> High Density Reachability Analysis, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 154-157, </pages> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: A solution to this problem is to compute only an approximation of the reached state set. Ravi et-al <ref> [8] </ref> have illustrated a method for computing a bound on the reached state set by modifying R (x) at each iteration. This decreases the size of R (x) and allows the computation to continue in order to reach more states.
References-found: 8

