URL: http://www.cs.wustl.edu/cs/techreports/1996/wucs-96-12.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Email: zubin@dworkin.wustl.edu  guru@cs.wustl.edu  jrc@cs.wustl.edu  
Title: The APIC Approach to High Performance Network Interface Design: Protected DMA and Other Techniques  
Author: Zubin D. Dittia Guru M. Parulkar Jerome R. Cox, Jr. 
Affiliation: NEC America, NIH, NTT, Samsung, Southwestern Bell, and Tektronix.  
Note: This work was supported in part by the Advanced Research Projects Agency (ARPA), the National Science Foundation (NSF), Rome Laboratories, and an industrial consortium of Ascom Nexion, Bay Networks, Bell Northern Research,  
Abstract: We are building a very high performance 1.2 Gb/s ATM network interface chip called the APIC (ATM Port Interconnect Controller). In addition to borrowing useful ideas from a number of research and commercial prototypes, the APIC design embraces several innovative features, and integrates all of these pieces into a coherent whole. This paper describes some of the novel ideas that have been incorporated in the APIC design with a view to improving the bandwidth and latency seen by end-applications. Among the techniques described, Protected DMA and Protected I/O were designed to allow applications to queue data for transmission or reception directly from user-space, effectively bypassing the kernel. This argues for moving the entire protocol stack including the interface device driver into user-space, thereby yielding better latency and throughput performance than kernel-resident implementations. Pool DMA when used with Packet Splitting, is a technique that can be used to build true zero-copy kernel-resident protocol stack implementations, using a page-remapping technique. Orchestrated Interrupts and Interrupt Demultiplex-ing are mechanisms that are used to reduce the frequency of interrupts issued by the APIC; the interrupt service time itself is significantly reduced through the use of a hardware Notification Queue which is used to report the occurrence of events in the APIC to software. Although our ideas have been developed in the context of an ATM network interface, we believe that many of these ideas can be effectively employed in other contexts too (including different types of network interfaces). In particular, we believe that protected DMA and protected I/O could be used by other devices in the system, thereby facilitating the construction of microkernels that can potentially deliver better performance than their monolithic counterparts. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Banks, D., and Prudence, M., </author> <title> A High Performance Network Architecture for a PA-RISC Workstation, </title> <journal> IEEE JSAC, </journal> <volume> Vol. 11 No. 2, </volume> <month> Feb. </month> <year> 1993. </year>
Reference: [2] <author> Buddhikot, M.M., Parulkar, G.M., and Cox, J.R., </author> <title> Design of a Large Scale Multimedia Server, </title> <journal> Journal of Computer Networks and ISDN Systems, </journal> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: In addition to interfacing to standard workstations, displays, and video cameras, the APIC is also The APIC Approach to High Performance Network Interface Design Page 21 going to be used to implement a high performance video storage server <ref> [2] </ref>, and a video wall. The APIC driver software and VHDL programming work is currently in progress. We have also successfully built and tested MBus prototype cards to test the bus interface. We expect the first set of APIC chips to be back from fabrication in late 1996.
Reference: [3] <author> Clark, D.D., Jacobsen, V., Romkey, J., Salwen, H., </author> <title> An Analysis of TCP Processing Overhead, </title> <journal> IEEE Communications Magazine, </journal> <volume> Vol. 27, No. 6, </volume> <year> 1989. </year>
Reference: [4] <author> Clark, </author> <title> D.D., and Tennenhouse, D.L., Architectural Considerations for a New Generation of Protocols, </title> <booktitle> Proc. ACM SIGCOMM 90, </booktitle> <month> Aug. </month> <year> 1990. </year>
Reference: [5] <author> Clark, </author> <title> D.D., The Structuring of Systems Using Upcalls, </title> <booktitle> Proc. 6th Symposium on Operating System Principles (SOSP), </booktitle> <year> 1985. </year>
Reference-contexts: An application thread may be delegated the responsibility of re-enabling interrupts after it has finished processing any received packets. Protected I/O would provide secure access to the APIC regis ter that is used to re-enable interrupts. Received packets may be delivered to an application using upcalls <ref> [5] </ref>. Interrupts can be re-enabled when the upcall returns. The upcall can be responsible for simple protocol processing, or it could be used to incorporate the contents of the packet into an on-going computation ( la Active Messages [15]).
Reference: [6] <author> Cranor, C.D., and Parulkar, G.M., </author> <title> Design of Universal Continuous Media I/O, </title> <booktitle> Proc. 5th Intl. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Note that in a zero-copy protocol stack implementation, a BSD socket type of API cannot be presented to applications. A suitable API is provided by fbufs [10], container shipping [26], or UCMIO <ref> [6] </ref>. Also note that using page-remapping to eliminate data copying is by no means a new idea [25]. The Axon [28] network interface was among the first to introduce the use of page-remapping as a method of avoiding data copying. . . .
Reference: [7] <author> Davie, B.S., </author> <title> The Architecture and Implementation of a High-Speed Host Interface, </title> <journal> IEEE JSAC, </journal> <volume> Vol. 11, No. 2, </volume> <month> Feb. </month> <year> 1993. </year>
Reference: [8] <author> Dittia, Z.D., Cox, J.R., and Parulkar, G.M., </author> <title> Design of the APIC: A High Performance ATM Host-Network Interface Chip, </title> <booktitle> Proc. IEEE INFOCOM 95, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: An example of an APIC-based DAN is shown in Figure 1 (a). An introduction to the APIC chip and APIC-based DANs, and a brief overview of the internal design of the APIC can be found in <ref> [8] </ref>.
Reference: [9] <author> Druschel, P., Peterson, L., and Davie, B.S. </author> <title> Experiences with a High-Speed Network Adaptor: A Software Perspective, </title> <booktitle> Proc. ACM SIGCOMM 94, </booktitle> <month> Sep. </month> <year> 1994. </year>
Reference-contexts: Although similar functionality has been provided earlier in the Bellcore OSIRIS <ref> [9] </ref> and in the Cornell U-Net [14] interfaces, their implementations are not amenable to straightforward hardware implementation, and result in higher cost interfaces. Section 3.3 of the paper, which deals with protected DMA, discusses the relative merits of our approach in more detail. <p> This is very similar to the protection mechanism used to support application device channels in the OSIRIS <ref> [9] </ref> interface, but our scheme extends that idea to allow the kernel to have a finer granularity of control over access permissions to individual device registers. Pool DMA with Packet Splitting: This technique enables true zero-copy 2 kernel-resident protocol stack implementations using page remapping. <p> Protected I/O should really have been called protected programmed I/O, but we chose the former name in the interests of brevity. Protected I/O is really just an extension of the protection mechanism that was used by Druschel et al. to implement application device channels (ADCs) in the OSIRIS interface <ref> [9] </ref>. The U-Net interface from Cornell [14] also uses the same mechanism as ADCs. Both of these efforts attempt to give an application read/write access to only those memory-mapped I/O registers on the interface that correspond to connections that are owned by the application. <p> As shown in Figure 9 (a), the data path should be between the user-space and the network interface. The control path operations (for example, connection setup and teardown), can still pass through the kernel without incurring a significant performance penalty. With this objective in mind, Druschel et al. <ref> [9] </ref> proposed using ADCs (described earlier in Section 2) to queue buffer descriptors directly on the network interface. The ADC protection mechanism would ensure that one user could not queue/dequeue descriptors to/from another users descriptor queue (see Figure 9 (b)). <p> All proposed solutions rely on batching multiple events so they can be handled with a single interrupt. Druschel et al. <ref> [9] </ref> suggest disabling transmit interrupts altogether, and checking for the completion of transmission as part of other driver activity.
Reference: [10] <author> Druschel, P., and Peterson, L., Fbufs: </author> <title> A High-Bandwidth Cross-Domain Transfer Facility, </title> <booktitle> Proc. 14th Symposium on Operating System Principles (SOSP), </booktitle> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Note that in a zero-copy protocol stack implementation, a BSD socket type of API cannot be presented to applications. A suitable API is provided by fbufs <ref> [10] </ref>, container shipping [26], or UCMIO [6]. Also note that using page-remapping to eliminate data copying is by no means a new idea [25]. The Axon [28] network interface was among the first to introduce the use of page-remapping as a method of avoiding data copying. . . .
Reference: [11] <author> Druschel, P., </author> <title> Operating System Support for High-Speed Networking, </title> <institution> University of Arizona Ph.D. Dissertation CS-94-24, </institution> <month> Aug. </month> <year> 1994. </year>
Reference: [12] <author> Edwards, A., Watson, G., Lumley, J., Banks, D., Calamvokis, C., and Dalton, C., </author> <title> User-Space Protocols Deliver High Performance to Applications on a Low-Cost Gb/s LAN, </title> <booktitle> Proc. ACM SIGCOMM 94, </booktitle> <month> Sep. </month> <year> 1994. </year>
Reference: [13] <author> Edwards, A., and Muir, S., </author> <title> Experiences Implementing a High Performance TCP in User-Space, </title> <booktitle> Proc. ACM SIGCOMM 95, </booktitle> <month> Aug. </month> <year> 1995. </year>
Reference: [14] <author> Eicken, T. von, Basu, A., Buch, V., Vogels, W., U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing, </title> <booktitle> Proc. 15th ACM Symposium on Operating System Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Although similar functionality has been provided earlier in the Bellcore OSIRIS [9] and in the Cornell U-Net <ref> [14] </ref> interfaces, their implementations are not amenable to straightforward hardware implementation, and result in higher cost interfaces. Section 3.3 of the paper, which deals with protected DMA, discusses the relative merits of our approach in more detail. <p> A definition of the term can be found in <ref> [14] </ref>. The APIC Approach to High Performance Network Interface Design Page 5 scenarios too. <p> Protected I/O is really just an extension of the protection mechanism that was used by Druschel et al. to implement application device channels (ADCs) in the OSIRIS interface [9]. The U-Net interface from Cornell <ref> [14] </ref> also uses the same mechanism as ADCs. Both of these efforts attempt to give an application read/write access to only those memory-mapped I/O registers on the interface that correspond to connections that are owned by the application. <p> The checks themselves were performed by the two on-board i-960 processors that were part of the OSIRIS network interface. The U-Net interface from Cornell <ref> [14] </ref> also relied on these same ideas to achieve a direct data path between user-space and the network adapter, but this work was done by modifying the firmware for the on-board i-960 processor on Fore-Systems SBA-200 ATM adapter.
Reference: [15] <author> Eicken, T. von, Culler, D.E., Goldstein, S.C., and Schauser, K.E., </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation, </title> <booktitle> Proc. 19th ISCA, </booktitle> <month> May </month> <year> 1992. </year> <title> The APIC Approach to High Performance Network Interface Design </title>
Reference-contexts: Received packets may be delivered to an application using upcalls [5]. Interrupts can be re-enabled when the upcall returns. The upcall can be responsible for simple protocol processing, or it could be used to incorporate the contents of the packet into an on-going computation ( la Active Messages <ref> [15] </ref>). The scheduling policy used could be a simple Unix-like priority scheme, or a periodic real-time The APIC Approach to High Performance Network Interface Design Page 20 scheme such as that used with Real-Time Upcalls (RTUs) [18,19].
Reference: [16] <author> Engler, D.R., Kaashoek, M.F., and OToole, J., Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management, </title> <booktitle> Proc. 15th ACM Symposium on Operating System Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: In particular, protected DMA and protected I/O can be used to off-load the task of controlling hardware in the system to applications running in user space. This facilitates the construction of new kernel architectures such as the MIT Exokernel <ref> [16] </ref>. By exposing the hardware to applications (as opposed to hiding it under an abstraction), significant performance gains are possible.
Reference: [17] <author> Forin, A., Golub, D., and Bershad, B., </author> <title> An I/O System for Mach 3.0, </title> <booktitle> Proc. USENIX Mach Symposium, </booktitle> <month> Nov. </month> <year> 1991. </year>
Reference: [18] <author> Gopalakrishnan, R., and Parulkar, G.M., </author> <title> Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing, </title> <booktitle> Proc. ACM SIGMETRICS 96. </booktitle>
Reference: [19] <author> Gopalakrishnan, R., and Parulkar, G.M., </author> <title> Application Level Protocol Implementations to provide QoS Guarantees at Endsystems, </title> <booktitle> Proc. 9th Annual IEEE Workshop on Computer Communications, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference: [20] <author> Hayter, M.D., and McAuley, </author> <title> D.R., The Desk Area Network, </title> <journal> Operating Systems Review, </journal> <volume> Vol. 25, No. 4, </volume> <month> Oct. </month> <year> 1991. </year>
Reference: [21] <author> Houh, H.H., Adam, J.F., Ismert, M., Lindblad, C.J., and Tennenhouse, </author> <title> D.L., The VuNet Desk Area Network: Architecture, Implementation, </title> <journal> and Experience, IEEE JSAC Vol. </journal> <volume> 13, No. 4, </volume> <month> May </month> <year> 1995. </year>
Reference: [22] <author> Hutchinson, </author> <title> N.C., and Peterson, L.L., The x-Kernel: An architecture for implementing network protocols, </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 17, No. 1, </volume> <month> Jan. </month> <year> 1991. </year>
Reference: [23] <author> Kanakia, H., and Cheriton, </author> <title> D.R., The VMP Network Adapter Board (NAB): High Performance Network Communication for Multiprocessors, </title> <booktitle> Proc. ACM SIGCOMM 88, </booktitle> <month> Aug. </month> <year> 1988. </year>
Reference: [24] <author> Maeda, C., and Bershad, B. </author> <title> Protocol Service Decomposition for High-Performance Networking, </title> <booktitle> Proc. 14th ACM Symposium on Operating System Principles, </booktitle> <month> Dec. </month> <year> 1993. </year>
Reference: [25] <author> Partridge, C., </author> <title> Gigabit Networking, </title> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Pool DMA with Packet Splitting: This technique enables true zero-copy 2 kernel-resident protocol stack implementations using page remapping. Although the idea of using page remapping to avoid data copying is not new <ref> [25] </ref>, we show how it can be done cleanly and efficiently in the context of ATM networks. Orchestrated Interrupts: When the CPU queues buffers for transmission or reception to the APIC, it can mark some of these buffers; the APIC will issue an interrupt whenever it encounters marked buffers. <p> Note that in a zero-copy protocol stack implementation, a BSD socket type of API cannot be presented to applications. A suitable API is provided by fbufs [10], container shipping [26], or UCMIO [6]. Also note that using page-remapping to eliminate data copying is by no means a new idea <ref> [25] </ref>. The Axon [28] network interface was among the first to introduce the use of page-remapping as a method of avoiding data copying. . . . Data 1 Data 3 Data 2 H H H Physical Memory . . .
Reference: [26] <author> Pasquale, J., Anderson, E., and Muller, P.K., </author> <title> Container Shipping: Operating System Support for I/O-Intensive Applications, </title> <journal> IEEE Computer, </journal> <volume> Vol. 27, No. 3, </volume> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Note that in a zero-copy protocol stack implementation, a BSD socket type of API cannot be presented to applications. A suitable API is provided by fbufs [10], container shipping <ref> [26] </ref>, or UCMIO [6]. Also note that using page-remapping to eliminate data copying is by no means a new idea [25]. The Axon [28] network interface was among the first to introduce the use of page-remapping as a method of avoiding data copying. . . .
Reference: [27] <author> Ramakrishnan, K.K. </author> <title> Performance Considerations in Designing Network Interfaces, </title> <journal> IEEE JSAC Vol. </journal> <volume> 11, No. 2, </volume> <month> Feb. </month> <year> 1993. </year>
Reference: [28] <author> Sterbenz, J., and Parulkar, G.M., Axon: </author> <title> Host-Network Interface Architecture for Gigabit Communication, Protocols for High Speed Networking, </title> <publisher> Elsevier (North Holland), </publisher> <year> 1991. </year>
Reference-contexts: A suitable API is provided by fbufs [10], container shipping [26], or UCMIO [6]. Also note that using page-remapping to eliminate data copying is by no means a new idea [25]. The Axon <ref> [28] </ref> network interface was among the first to introduce the use of page-remapping as a method of avoiding data copying. . . . Data 1 Data 3 Data 2 H H H Physical Memory . . .
Reference: [29] <author> Thekkath, C., Nguyen, T., Moy, E., and Lazowska, E. </author> <title> Implementing Network Protocols at User Level, </title> <booktitle> Proc. ACM SIGCOMM 93, </booktitle> <month> Sep. </month> <year> 1993. </year>
Reference: [30] <author> Traw, C.B.S., and Smith, J.M., </author> <title> Hardware/Software Organization of a High Performance ATM Host Interface, </title> <journal> IEEE JSAC Vol. </journal> <volume> 11, No. 2, </volume> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: On receive, they interrupt only when new data arrives and there is no old data that has not already been dequeued by the OS; this has the desirable effect of the interrupt being asserted only once per burst of incoming packets. Traw et al. <ref> [30] </ref> suggest disallowing interface interrupts altogether, and instead polling the interface on periodic hardware clock interrupts. This scheme is shown to perform well for high bandwidth applications, but is unsuitable for latency-critical LAN applications because the time between successive clock interrupts is typically of the order of milliseconds. <p> In the latter case, it is possible to entirely disable interrupts for a connection, and the application can periodically (in an RTU) check the receive queue for packet arrivals. This scheme has all the benefits of clocked interrupts <ref> [30] </ref>, and has the advantage that low latency applications can also be supported efficiently. Clearly, interrupt demultiplexing allows for a great deal of flexibility in the way in which protocol stacks are structured.
References-found: 30

