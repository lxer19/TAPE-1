URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3770/3770.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fseonho,agrawalag@cs.umd.edu  
Title: Dynamic Dispatching of Cyclic Real-Time Tasks with Relative Constraints  
Author: Seonho Choi Ashok K. Agrawala 
Keyword: Index Terms: Real-time, operating systems, scheduling, dispatching, relative constraints.  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies Department of Computer Science University of Maryland  
Abstract: In some hard real-time systems, relative timing constraints may be imposed on task executions, in addition to the release time and deadline constraints. A periodic task may have jitter constraints between the start or finish times of any two consecutive executions. Relative constraints such as separation or relative deadline constraints may be given between start or finish times of tasks [4]. One approach is to find a total order on a set of N jobs in a scheduling window, and cyclically use this order at run time to execute the jobs. However, in the presence of the relative constraints, if the job execution times are nondeterministic with defined lower and upper bound, it is not always possible to statically assign start times at pre-runtime without sacrificing the schedulability [4]. We develop a technique called dynamic cyclic dispatching to enforce relative constraints along with release time and deadline constraints. An ordered set of N jobs is assumed to be given within a scheduling window and this schedule(ordering) is cyclically repeated at runtime. An off-line algorithm is presented to check the schedulability of the job set and to obtain parametric lower and upper bounds on the start times of jobs, if the job set is schedulable. Then, these parametric bounds are evaluated at runtime to obtain a valid time interval during which jobs can be started. The complexity of this off-line component is shown to be O(n 2 N 3 ) where n is the number of jobs in a scheduling window that have relative constraints with jobs in the next scheduling window. An online algorithm can evaluate these bounds in O(N ) time. Especially, for a certain class of relative constraints, it is shown that the off-line component requires O(N 3 + n 5 ) computation time. Unlike static approaches which assign fixed start times to jobs in the scheduling window, our approach not only allows us to flexibly manage the slack times with the schedulability of a task set not affected, but also yields a guaranteed schedulability in the sense that, if other dispatching mechanism can schedule the job sequences satisfying all given constraints, then our mechanism can also schedule them. fl This work is supported in part by ONR and ARPA under contract N66001-95-C-8619 to the Computer Science Department at the University of Maryland. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Advanced Research Projects Agency, ONR or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Carpenter, K. Driscoll, K. Hoyme, and J. Carciofini. </author> <title> Arinc 659 scheduling: Problem definition. </title> <booktitle> In Proceedings, IEEE Real-time Systems Symposium, </booktitle> <address> San Juan, PR, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The occurrences of events in different tasks may also be constrained from the requirements and characteristics of the environment by separation or relative deadline constraints [4]. These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems <ref> [1] </ref>, etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints [6]. <p> Included in the m 1 constraints are those denoting the total ordering on jobs: 8j 2 <ref> [1; k] </ref> :: 8i 2 [1; N ) :: s i + e i s i+1 j j j+1 2. The set of release time and deadline constraints: 8j 2 [1; k] :: Bx j b j (4) where b j is an m 2 -dimensional column vector of non-positive integers <p> Included in the m 1 constraints are those denoting the total ordering on jobs: 8j 2 <ref> [1; k] </ref> :: 8i 2 [1; N ) :: s i + e i s i+1 j j j+1 2. The set of release time and deadline constraints: 8j 2 [1; k] :: Bx j b j (4) where b j is an m 2 -dimensional column vector of non-positive integers satisfying: b j = b 1 + (1 j)L and d j is an m 3 -dimensional column vector of non-negative integers satisfying: d j = d 1 + (j
Reference: [2] <author> S. Cheng and Ashok K. Agrawala. </author> <title> Scheduling of periodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3392, </type> <institution> UMIACS-TR-94-135, Department of Computer Science, University of Maryland, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: In a traditional time-based scheduling scheme the job start times are statically decided in a scheduling window, and this static schedule is cyclically used at run-time. In the presence of jitter constraints between start times of non-preemptive jobs, the problem of finding a static schedule has been addressed in <ref> [2] </ref>. However, this static cyclic scheduling approach only allows certain types of min/max constraints to be specified, and it only works under low utilization. Moreover, it is very difficult to flexibly manage job start times at run-time to incorporate any dynamic tasks such as aperiodic tasks into the schedule. <p> The first one is the static cyclic scheduling scheme <ref> [2] </ref> and the second one is the parametric scheduling scheme [4]. 3.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [2]. <p> The first one is the static cyclic scheduling scheme <ref> [2] </ref> and the second one is the parametric scheduling scheme [4]. 3.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [2]. The periodic task model is used, which means that every job has a release time and a deadline constraints, and only the jitter constraints between two job start times are allowed. <p> Obtaining the ordering and job start times is an NP-hard problem, since non-preemptive scheduling problem with release time and deadline constraints is NP-hard. Several priority based non-preemptive scheduling algorithms are presented and their performances are compared in <ref> [2] </ref>. Suppose that a job t j i 1 belongs to j , and a job t j+1 i 2 belongs to j+1 , and they have jitter constraints c 1 s i 2 s i 1 c 2 (0 &lt; c 1 c 2 L).
Reference: [3] <author> G. Dantzig and B. Eaves. </author> <title> Fourier-Motzkin Elimination and its Dual. </title> <journal> Journal of Combinatorial Theory(A), </journal> <volume> 14 </volume> <pages> 288-297, </pages> <year> 1973. </year>
Reference-contexts: Then the sentence 8x n 2 [l n ; u n ] :: C holds if and only if C 0 holds. The existential quantifier can be eliminated by using Fourier-Motzkin variable elimination technique <ref> [3] </ref>. Fourier-Motzkin Elimination. Consider a system of linear constraints C in n variables (x 1 ; x 2 ; : : : ; x n ).
Reference: [4] <author> R. Gerber, W. Pugh, and M. Saksena. </author> <title> Parametric Dispatching of Hard Real-Time Tasks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44(3), </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: That is, the difference of two event occurrence times, called jitter, should lie between a lower and an upper bound. The occurrences of events in different tasks may also be constrained from the requirements and characteristics of the environment by separation or relative deadline constraints <ref> [4] </ref>. These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems [1], etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints [6]. <p> Usually, these relative constraints between events are transformed into relative constraints between start or finish times of the jobs to make feasible the process of scheduling and dispatching of jobs <ref> [5, 4] </ref>. In [5] a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive jobs of periodic tasks. <p> However, other types of relative constraints are not allowed in that work and it is not possible to flexibly manage slack times at runtime for dynamic tasks. In <ref> [4] </ref> dispatching of a totally ordered non-preemptive job set with any min/max constraints is studied and a new scheduling mechanism called parametric scheduling is developed. <p> However, this approach can't be used in the presence of arbitrary relative constraints between start or finish times of jobs <ref> [4] </ref>. Also, this approach suffers from the loss of schedulability problem. Some task sets are not schedulable in this approach, even though they are schedulable if our approach is employed. This will be explained through an example later. <p> Some task sets are not schedulable in this approach, even though they are schedulable if our approach is employed. This will be explained through an example later. To cope with some of the above limitations the parametric scheduling scheme was developed in scope of real-time transaction scheduling <ref> [4] </ref>. However, as far as we know, the solution approach has not been found for general periodic task models where jobs in different scheduling windows may have relative constraints. <p> The first one is the static cyclic scheduling scheme [2] and the second one is the parametric scheduling scheme <ref> [4] </ref>. 3.1 Static Cyclic Scheduling The static cyclic scheduling problem has been studied in [2]. The periodic task model is used, which means that every job has a release time and a deadline constraints, and only the jitter constraints between two job start times are allowed. <p> In some real-time applications, the jitter constraints may be imposed between the finish times of the jobs rather than between the start times [5]. Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks <ref> [4] </ref>. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [4]. By transforming the jitter constraints across the boundary of j and j+1 into those between jobs within j , we are affecting the schedulability of job sets. <p> Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks <ref> [4] </ref>. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [4]. By transforming the jitter constraints across the boundary of j and j+1 into those between jobs within j , we are affecting the schedulability of job sets. <p> We will show that, under our new scheduling scheme in which this transformation is not necessary, the schedulability of job sets is increased, i.e., some job sets are not schedulable according to this scheme whereas it is schedulable by our scheme. 3.2 Parametric Scheduling Gerber et al. <ref> [4] </ref> proposes a parametric scheduling scheme in the scope of transaction scheduling, in which any standard constraints may be given between jobs in one transaction. <p> The actual form of these parametric functions are given in the following proposition. Proposition 1 (Parametric Bound Functions <ref> [4] </ref>) A parametric lower bound function for s j is of the following form: F min = max (p 1 + c 1 ; p 2 + c 2 ; : : : ; p a + c a ; ff min where each p i , 1 i a, belongs <p> s 1 2 max (20; s 1 + e 1 + 10; s 2 + e 2 ) s 3 min (22; s 1 + e 1 + 17; s 2 + e 2 + 4) 4 Dynamic Cyclic Dispatching As in the parametric scheduling approach developed for transaction scheduling <ref> [4] </ref>, we want to devise a schedulabil-ity test and an efficient dispatching mechanism when an 1-fold cyclically constrained job set, 1;1 , is given with its constraint matrices and vectors. We say 1;k , is schedulable if there exists any method which can successfully dispatch the jobs in 1;k . <p> Hence, once sched 1;k turns out to be False, then all sched 1;j , k j, are False, too. By this proposition, the schedulability of 1;1 is defined. 11 Definition 4 (Schedulability of 1;1 ) 1;1 is schedulable if and only if lim sched 1;k = True In <ref> [4] </ref>, it is shown that checking Predicate (9) is not trivial because of the nondeterministic job execution times and because of the existence of standard relative constraints among the jobs. This applies to the above sched 1;k predicate, too. The variable elimination techniques are used in [4] to eliminate variables from <p> 1;k = True In <ref> [4] </ref>, it is shown that checking Predicate (9) is not trivial because of the nondeterministic job execution times and because of the existence of standard relative constraints among the jobs. This applies to the above sched 1;k predicate, too. The variable elimination techniques are used in [4] to eliminate variables from Predicate (9). <p> 3 with G b Eliminate variables from Parametric Bound Functions for s 1 Not Schedulable Yes From Theorem 1 the total complexity of the off-line algorithm is O (n 2 N 3 ), since each loop iteration of Algorithm 3 may take at most O (N 3 ) computation time <ref> [4] </ref>.
Reference: [5] <author> C. Han, C. Hou, and K. Lin. </author> <title> Distance-Constrained Scheduling and Its Applications to Real-Time Systems. </title> <journal> IEEE Transactions on Computers. </journal> <note> To appear. </note>
Reference-contexts: Usually, these relative constraints between events are transformed into relative constraints between start or finish times of the jobs to make feasible the process of scheduling and dispatching of jobs <ref> [5, 4] </ref>. In [5] a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive jobs of periodic tasks. <p> Usually, these relative constraints between events are transformed into relative constraints between start or finish times of the jobs to make feasible the process of scheduling and dispatching of jobs [5, 4]. In <ref> [5] </ref> a preemptive fixed priority scheduling algorithm is developed to schedule periodic tasks with relative deadline constraints between finish times of two successive jobs of periodic tasks. <p> In some real-time applications, the jitter constraints may be imposed between the finish times of the jobs rather than between the start times <ref> [5] </ref>. Furthermore, a periodic task may be decomposed into several subtasks and any kind of standard constraints may be defined between these subtasks [4]. In these cases this static scheduling approach is no more applicable without sacrificing the schedulability [4]. <p> Then, 9x n :: C holds if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. <p> Then, 9x n :: C holds if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first.
Reference: [6] <author> Seung H. Hong. </author> <title> Scheduling Algorithm of Data Sampling Times in the Integrated Communication and Control Systems. </title> <journal> IEEE Transactions on Control Systems Technology, </journal> <volume> 3(2) </volume> <pages> 225-230, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: These relative constraints have to be enforced in many real-time control systems such as process control systems and flight control systems [1], etc. For example, in process control systems, it has been shown that jitter constraints have more influence on control systems performance than the frequency constraints <ref> [6] </ref>. Usually, these relative constraints between events are transformed into relative constraints between start or finish times of the jobs to make feasible the process of scheduling and dispatching of jobs [5, 4].
Reference: [7] <author> C. L. Liu and J. Layland. </author> <title> Scheduling Algorithm for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM., </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: 1 Introduction A common approach to characterize hard real-time tasks with repetitive requests is to use periodic task model <ref> [7] </ref>. In the model, every task needs to be executed once during each of its periods, and the executions, called jobs, of the same task in different periods are independent.
Reference: [8] <author> M. Saksena. </author> <title> Parametric Scheduling for Hard Real-Time Systems. </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <year> 1994. </year> <month> 30 </month>
Reference-contexts: Then, 9x n :: C holds if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. <p> Then, 9x n :: C holds if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. <p> Then, 9x n :: C holds if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 <ref> [5; 8] </ref> :: 9s 2 :: 8e 2 2 [8; 10] :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first. <p> if and only if C 0 holds. 3.2.2 Example Here, the variable elimination technique is applied to 9s 1 :: 8e 1 2 [5; 8] :: 9s 2 :: 8e 2 2 <ref> [8; 10] </ref> :: 9s 3 :: 8e 3 2 [5; 8] :: 9s 4 :: 8e 4 2 [8; 10] :: C 1;2 where C 1;2 is a constraint set given on 1;2 in Example 1. Initially, since e 4 is the innermost universally quantified variable, it can be eliminated first.
References-found: 8

