URL: http://www.cs.utah.edu/~ald/hicss.ps
Refering-URL: http://www.cs.utah.edu/~ald/
Root-URL: 
Title: Designing a Large Asynchronous Chip  
Author: Al Davis Ken Stevens Bill Coates 
Address: Palo Alto, CA 94019 Calgary, Alta T2N 1N4  
Affiliation: Computer Science Department HP Laboratories University of Calgary  
Note: The Post Office Experience:  
Abstract: The Post Office is an asynchronous, 300,000 transistor, full-custom CMOS chip designed as the communication component for the Mayfly scalable parallel processor. Performance requirements led to the development of a design style which permits the design of sequential circuits operating under a restricted form of multiple input change signalling called burst-mode. The Post Office complexity forced us to develop a set of design tools capable of correctly synthesizing transistor circuits from state machine and equation specifications, and capable of verifying the correctness of the resultant circuitry using implementation specific timing assumptions. The paper provides a case study of this design experience. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: This implies that the physical extent of the system is not fixed and poses serious problems when considering an implementation strategy which uses a common global clock. Clock skew is a possible headache for any synchronous design style, and is magnified as technology progresses <ref> [1] </ref>. In the case of extensible systems such as Mayfly, where the total number of boards is unbounded, the synchronous choice becomes intractable. We therefore chose an asynchronous design style for the Post Office implementation.
Reference: [2] <author> Erik Brunvand and Robert Sproull. </author> <title> Translating Concurrent Programs into Delay-Insensitive Circuits. </title> <booktitle> In IEEE International Conference on Computer Aided Design: Digest of Technical Papers, </booktitle> <pages> pages 262-265. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based <ref> [13, 23, 2] </ref>, or finite state machine based [18, 10]. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21]. <p> The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit. Compiled implementations based on programming language like specifications <ref> [13, 3, 23, 2] </ref>, while elegant and robust, suffer in performance because they are presently compiled into intermediate library modules rather than into optimized transistor networks. A module of significant concern is the C-element. C-elements are common circuit modules in asynchronous circuits and eliminating them completely is unlikely.
Reference: [3] <author> Steven M. Burns and Alain J. Martin. </author> <title> The Fusion of Hardware Design and Verification, chapter Synthesis of Self-Timed Circuits by Program Transformation, </title> <address> pages 99-116. </address> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked [18, 10, 7], delay-insensitive <ref> [13, 3, 23, 17] </ref>, or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit. Compiled implementations based on programming language like specifications <ref> [13, 3, 23, 2] </ref>, while elegant and robust, suffer in performance because they are presently compiled into intermediate library modules rather than into optimized transistor networks. A module of significant concern is the C-element. C-elements are common circuit modules in asynchronous circuits and eliminating them completely is unlikely.
Reference: [4] <author> Tam-Anh Chu. </author> <title> On the models for designing VLSI asynchronous digital systems. </title> <type> Technical Report MIT-LCS-TR-393, </type> <institution> MIT, </institution> <year> 1987. </year>
Reference-contexts: Yet another distinction could be made on the nature of the control specification: graph based <ref> [16, 4] </ref>, programming language based [13, 23, 2], or finite state machine based [18, 10]. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21].
Reference: [5] <author> Henry Y. H. Chuang and Santanu Das. </author> <title> Synthesis of multiple-input change asynchronous machines using controlled excitation and flip-flops. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-22(12):1103-1109, </volume> <month> December </month> <year> 1973. </year>
Reference-contexts: Multiple input change or MIC circuit design methods have been developed <ref> [22, 5] </ref> but either required input restrictions or involved implementation techniques that were unsuitable for our purposes. As a result we developed a design style that we call burst-mode which permits a certain style of multiple input change.
Reference: [6] <author> William S. Coates. </author> <title> "The Design of an Instruction Stream Memory Subsystem". </title> <type> Master's thesis, </type> <institution> University of Calgary, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: With the exception of the ISM chip <ref> [6] </ref>, these systems, including full scale computers [7], were board level designs rather than chips. We had also designed a number of complex synchronous widgets as well.
Reference: [7] <author> A. L. Davis. </author> <title> The Architecture of DDM1: A Recursively Structured Data-Driven Machine. </title> <type> Technical Report UUCS-77-113, </type> <institution> University of Utah, Computer Science Dept, </institution> <year> 1977. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked <ref> [18, 10, 7] </ref>, delay-insensitive [13, 3, 23, 17], or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> With the exception of the ISM chip [6], these systems, including full scale computers <ref> [7] </ref>, were board level designs rather than chips. We had also designed a number of complex synchronous widgets as well.
Reference: [8] <author> A. L. Davis. Mayfly: </author> <title> A General-Purpose, Scalable, </title> <booktitle> Parallel Processing Architecture. Lisp and Symbolic Computation, </booktitle> 5(1/2):7-47, May 1992. 
Reference-contexts: 1 Introduction The Post Office was designed to support inter-node communication for the Mayfly parallel processing system <ref> [8] </ref>. The Post Office handles all of the physical delivery aspects of packet communication. This includes local buffering, dynamic adaptive routing and congestion avoidance, deadlock avoidance, and virtual cut-through. The Mayfly topology was designed to be extensible and permits an unbounded number of PEs to be interconnected.
Reference: [9] <author> David Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. An ACM Distinguished Dissertation. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: We call this tool kit MEAT. During the development of MEAT, we were fortunate to have Steve Nowick spend two summers with us. He incorporated David Dill's verifier <ref> [9] </ref> into the tool kit, and modified the verifier to accommodate our burst-mode timing model. Steve had considerable influence on our ideas and his locally clocked design style [18] is another outcome of these earlier interactions. We are indebted to Steve for his influence on our design style.
Reference: [10] <author> A. B. Hayes. </author> <title> Stored State Asynchronous Sequential Circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(8), </volume> <month> August </month> <year> 1981. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked <ref> [18, 10, 7] </ref>, delay-insensitive [13, 3, 23, 17], or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based <ref> [18, 10] </ref>. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21]. The design style space is large and each design style has its own set of merits and demer-its.
Reference: [11] <author> Lee A. Hollaar. </author> <title> Direct implementation of asynchronous control units. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(12):1133-1141, </volume> <month> December </month> <year> 1982. </year>
Reference-contexts: For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned <ref> [11, 21] </ref>. The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit.
Reference: [12] <author> L. Lavagno, K. Keutzer, and A. Sangiovanni-Vincentelli. </author> <title> Synthesis of Verifiably Hazard-Free Asynchronous Control Circuits. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Proceedings of the 1991 UC Santa Cruz Conference on Advanced Research in VLSI. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: The state machine is specified in Figure 1. We have created a pool of Post Office AFSMs that we have made available to other researchers and synthesized implementations of this state machine in other methods can be found in <ref> [12, 18] </ref>. The specification of sbuf-send-ctl from Figure 1 is textually entered for MEAT by describing the AFSM name, input variables, output variables, and then each state transition in 2 text lines.
Reference: [13] <author> Alain Martin. </author> <title> Compiling Communicating Processes into Delay-Insensitive VLSI Circuits. </title> <journal> Distributed Computing, </journal> <volume> 1(1) </volume> <pages> 226-234, </pages> <year> 1986. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked [18, 10, 7], delay-insensitive <ref> [13, 3, 23, 17] </ref>, or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based <ref> [13, 23, 2] </ref>, or finite state machine based [18, 10]. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21]. <p> The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit. Compiled implementations based on programming language like specifications <ref> [13, 3, 23, 2] </ref>, while elegant and robust, suffer in performance because they are presently compiled into intermediate library modules rather than into optimized transistor networks. A module of significant concern is the C-element. C-elements are common circuit modules in asynchronous circuits and eliminating them completely is unlikely.
Reference: [14] <author> Alain Martin. </author> <title> The Limitations to Delay-Insensitivity in Asynchronous Circuits. </title> <editor> In William J. Dally, editor, </editor> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 263-278. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: A module of significant concern is the C-element. C-elements are common circuit modules in asynchronous circuits and eliminating them completely is unlikely. C-elements are both latches and synchronization points. Too much synchronization reduces parallelism and performance. The methods which produce DI circuits, while not perfect <ref> [14] </ref>, are the most tolerant of variations in device and wire delays. This tolerance improves the probability that a properly designed circuit will continue to function under variations in supply voltage, temperature, and process parameters.
Reference: [15] <author> C. Mead and L. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> McGraw-Hill, </publisher> <year> 1979. </year> <note> Chapter 7. </note>
Reference-contexts: Data is transferred between elements using a four-cycle self-timed bundled-data protocol [19]. This is a weaker model than that of speed-independence used for control signals inside state machines <ref> [15] </ref>. There are also some datapath circuits which are controlled in a clocked domain, rather than in a self-timed fashion. These datapath cells contain a stoppable clock or are clocked by state machine outputs.
Reference: [16] <author> Teresa Meng. </author> <title> Synchronization Design for Digital Systems. </title> <publisher> Kluwer Academic, </publisher> <year> 1990. </year>
Reference-contexts: Yet another distinction could be made on the nature of the control specification: graph based <ref> [16, 4] </ref>, programming language based [13, 23, 2], or finite state machine based [18, 10]. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21].
Reference: [17] <author> Charles E. Molnar, Ting-Pien Fang, and Fred-erick U. Rosenberger. </author> <title> Synthesis of Delay-Insensitive Modules. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 67-86. </pages> <publisher> Computer Science Press, </publisher> <year> 1985. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked [18, 10, 7], delay-insensitive <ref> [13, 3, 23, 17] </ref>, or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10].
Reference: [18] <author> Steven M. Nowick and David L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In 1991 IEEE International Conference on Computer-Aided Design. IEEE Computer Society, </booktitle> <year> 1991. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked <ref> [18, 10, 7] </ref>, delay-insensitive [13, 3, 23, 17], or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based <ref> [18, 10] </ref>. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21]. The design style space is large and each design style has its own set of merits and demer-its. <p> He incorporated David Dill's verifier [9] into the tool kit, and modified the verifier to accommodate our burst-mode timing model. Steve had considerable influence on our ideas and his locally clocked design style <ref> [18] </ref> is another outcome of these earlier interactions. We are indebted to Steve for his influence on our design style. The Post Office was fabricated using MOSIS revision 6 design rules in a 1.2 micron CMOS process. <p> The state machine is specified in Figure 1. We have created a pool of Post Office AFSMs that we have made available to other researchers and synthesized implementations of this state machine in other methods can be found in <ref> [12, 18] </ref>. The specification of sbuf-send-ctl from Figure 1 is textually entered for MEAT by describing the AFSM name, input variables, output variables, and then each state transition in 2 text lines.
Reference: [19] <author> I. E. Sutherland, R. F. Sproull, C. E. Molnar, and E. H. Frank. </author> <title> Asynchronous Systems, Volume I. </title> <type> Technical report, </type> <institution> Sutherland Sproull and Associates, </institution> <address> Palo Alto, CA, </address> <month> January </month> <year> 1985. </year>
Reference-contexts: The differences are minor and are a direct result of the need to cooperate with the signalling protocols imposed by the AFSMs in the control path. Data is transferred between elements using a four-cycle self-timed bundled-data protocol <ref> [19] </ref>. This is a weaker model than that of speed-independence used for control signals inside state machines [15]. There are also some datapath circuits which are controlled in a clocked domain, rather than in a self-timed fashion.
Reference: [20] <author> Ivan E. Sutherland and Robert F. Sproull. </author> <title> Logical effort: Designing for speed on the back of an envelope. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Proceedings of the 13th Conference on Advanced Research in VLSI, </booktitle> <pages> pages 1-16. </pages> <address> UC Santa Cruz, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: "deliver "latch-addr "idle* 1 - #deliver 2 - "begin-send #latch-addr 3 - #begin-send "send-pkt 4 - @ @R "ack-send #send-pkt "deliver 5 #ack-send #idle* - - #deliver "ack-send #send-pkt "latch-addr 7 #ack-send is complex, it can easily be broken up into a tree of complex gates with improved overall performance <ref> [20] </ref>. Typical state machines in the Post Office have an input to output delay of 2 to 5 inverter delays. 4 Design Example In order to illustrate the synthesis process from the designers point of view we will use a Post Office state machine called sbuf-send-ctl as a design example. <p> While we continually tried to focus on performance, we found that performance is an elusive target. Simply counting transistor delays is a false metric. A larger design with many more devices can result in a faster circuit if the gains and capacitances at each stage are balanced <ref> [20] </ref>. As device size shrinks and doping increases, inter-node capacitance and wire lengths become increasingly critical. Fast circuits can only be achieved when the output to input load ratio is small and the device gain is high. Point-to-point communication is the best way to achieve speed.
Reference: [21] <author> J. H. Tracey. </author> <title> Internal state assignments for asynchronous sequential machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15:551-560, </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned <ref> [11, 21] </ref>. The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit. <p> In contrast to synchronous control logic design, state codes may not be randomly assigned, but must be carefully chosen to prevent races. The MEAT state assignment algorithm is based on a method developed by Tracey <ref> [21] </ref>. The Tracey algorithm has the advantage that it produces Single Transition Time (STT) state assignments. In cases where two or more state variables must change value when transitioning to a new state, all variables involved are allowed to change concurrently, or race.
Reference: [22] <author> S.H. Unger. </author> <title> Asynchronous sequential switching circuits. </title> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference-contexts: One partition of design styles can be based on the type of asynchronous circuit target: locally clocked [18, 10, 7], delay-insensitive [13, 3, 23, 17], or various forms of single- and multiple- input change circuits <ref> [22] </ref>. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> In order to achieve the necessary hazard free asynchronous finite state machine (AFSM) implementation, it is necessary to place constraints on how their inputs are allowed to change. The most common is the single input change or SIC constraint <ref> [22] </ref>. SIC circuits inherently require state transitions after each input variable transition. <p> Multiple input change or MIC circuit design methods have been developed <ref> [22, 5] </ref> but either required input restrictions or involved implementation techniques that were unsuitable for our purposes. As a result we developed a design style that we call burst-mode which permits a certain style of multiple input change. <p> Each arc in the state diagram is mapped to a single statement in the text file, which indicates the source and destination states along with the associ ated input and output bursts. The first automated task performed by MEAT is to generate a primitive flow table <ref> [22] </ref> from the textual AFSM specification. This is a two-dimensional array structure which captures the behavior represented by the state diagram. Each row of this table represents a node in the state diagram; each column represents a unique combination of input signals. <p> The two inverters are merged and the output is forked to both logic blocks. This implementation is then verified. The verifier points out a d-trio hazard <ref> [22] </ref> which is removed by adding an inverter to change the sequencing of begin-send into the Y0 logic.
Reference: [23] <author> C. H. (Kees) van Berkel. </author> <title> Handshake circuits: an intermediary between communicating processes and VLSI. </title> <type> PhD thesis, </type> <institution> Technical University of Eindhoven, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: There are a large number of rather different design styles in today's asynchronous design community. One partition of design styles can be based on the type of asynchronous circuit target: locally clocked [18, 10, 7], delay-insensitive <ref> [13, 3, 23, 17] </ref>, or various forms of single- and multiple- input change circuits [22]. Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based [13, 23, 2], or finite state machine based [18, 10]. <p> Yet another distinction could be made on the nature of the control specification: graph based [16, 4], programming language based <ref> [13, 23, 2] </ref>, or finite state machine based [18, 10]. For the finite state machine based styles, there is a further distinction that can be made based on the method by which state variables are assigned [11, 21]. <p> The design style space is large and each design style has its own set of merits and demer-its. It is worthwhile to note that virtually all of the design styles focus on the design of the control path of the circuit. Compiled implementations based on programming language like specifications <ref> [13, 3, 23, 2] </ref>, while elegant and robust, suffer in performance because they are presently compiled into intermediate library modules rather than into optimized transistor networks. A module of significant concern is the C-element. C-elements are common circuit modules in asynchronous circuits and eliminating them completely is unlikely.
References-found: 23

