URL: http://www.eecs.umich.edu/~ashaikh/research/papers/rtss98.ps.Z
Refering-URL: http://www.eecs.umich.edu/~ashaikh/research/
Root-URL: http://www.cs.umich.edu
Email: fashaikh,zaher,zqwang,kgshin g@eecs.umich.edu mehraa@watson.ibm.com  
Title: Realizing Services for Guaranteed-QoS Communication on a Microkernel Operating System  
Author: Ashish Mehra Anees Shaikh, Tarek Abdelzaher, Zhiqun Wang, and Kang G. Shin 
Address: Ann Arbor, MI 481092122 Yorktown Heights, NY 10598-0704  
Affiliation: Real-Time Computing Laboratory Server and Enterprise Networking University of Michigan IBM T.J. Watson Research Center  
Abstract: Provision of end-to-end QoS guarantees on communication necessitates appropriate support in the end systems (i.e., hosts) and network routers that form the communication fabric. This paper focuses on the architectural and implementation challenges involved in realizing QoS-sensitive host communication subsystems on contemporary microkernel operating systems with limited real-time support. We motivate and describe the components constituting our integrated service architecture that together ensure QoS-sensitive handling of network traffic at both sending and receiving hosts and demonstrate a communication framework that can implement alternative QoS models by applying appropriate policies. An experimental evaluation in a controlled configuration demonstrates the efficacy with which QoS guarantees are maintained, despite limitations imposed by the underlying operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Abdelzaher, S. Dawson, W. Feng, S. Ghosh, F. Jaha-nian, S. Johnson, A. Mehra, T. Mitton, J. Norton, A. Shaikh, K. Shin, V. Vaidyan, Z. Wang, and H. Zou. </author> <title> ARMADA mid-dleware suite. </title> <booktitle> In Proc. of IEEE Workshop on Middleware for Distributed Real-Time Systems and Services, </booktitle> <pages> pages 11 18, </pages> <address> San Francisco, CA, </address> <month> December </month> <year> 1997. </year>
Reference-contexts: The overall service is currently being utilized in the ARMADA project <ref> [1] </ref>, which implements a set of communication and middleware services that support end-to-end guarantees and fault-tolerance in embedded real-time distributed applications.
Reference: [2] <author> T. Abdelzaher and K. Shin. </author> <title> End-host architecture for QoS-adaptive communication. </title> <booktitle> In to appear in Proc. Real-Time Technology and Applications Symposium, </booktitle> <address> Denver, Colorado, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: A relaxed admission control policy, for example, coupled with these component mechanisms could be used to implement a statistical guarantee model. Similarly, changing the policy for expression of application QoS requirements, along with a suitable admission control policy, facilitates QoS negotiation and adaptation, as is demonstrated in <ref> [2] </ref>. 4 Architecture Component Design Below, we discuss the salient features of each architectural component of the service along with its interaction with other components to provide QoS guarantees. <p> We have tested our prototype with transmission of stored compressed video and playout using mpeg play. We plan to conduct further experiments with a number of stored video traces. To allow for QoS-adaptation, we have implemented an end-host architecture for adaptive-QoS communication services <ref> [2] </ref>. In [26] we describe the complex process of parameterizing the overheads of the communication subsystem and target platform. These efforts illustrate the need for an automated approach to profiling and sys-tem parameterization. We have, therefore, also begun to explore self-parameterizing protocol stacks for QoS-sensitive communica tion subsystems [27].
Reference: [3] <author> R. Ahuja, S. Keshav, and H. Saran. </author> <title> Design, implementation, and performance of a native mode ATM transport layer. </title> <booktitle> In Proc. IEEE INFOCOM, </booktitle> <pages> pages 206214, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: A novel RSVP-based QoS architecture supporting integrated services in TCP/IP protocol stacks is described in [5]. A native-mode ATM transport layer has been designed and implemented in <ref> [3] </ref>. These architectures provide support for traffic policing and shaping but not for scheduling protocol processing and incorporating implementation overheads and constraints. Operating system support for QoS-sensitive communication: Real-time upcalls (RTUs) [17] are used to schedule protocol processing for networked multimedia applications via event-based up-calls [11].
Reference: [4] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. C. Verma, and H. Zhang. </author> <title> The Tenet real-time protocol suite: Design, implementation, and experiences. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 4(1):111, </volume> <month> February </month> <year> 1996. </year>
Reference-contexts: An extensive survey of QoS architectures is provided in [9], which provides a comprehensive view of the state of the art in the provisioning of end-to-end QoS. Network and protocol support for QoS: The Tenet real-time protocol suite <ref> [4] </ref> is an implementation of real-time communication on wide-area networks (WANs), but it did not address the problem of QoS-sensitive protocol processing inside hosts. Further, it does not incorporate implementation constraints and their associated overheads, or QoS-sensitive processing of traffic at the receiving host.
Reference: [5] <author> T. Barzilai, D. Kandlur, A. Mehra, D. Saha, and S. Wise. </author> <title> Design and implementation of an RSVP-based quality of service architecture for integrated services Internet. </title> <booktitle> In Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: While we have focused on a microkernel operating system, we believe that our design approach and issues highlighted are equally applicable, although with necessary modifications, to the in-kernel protocol stacks of monolithic Unix-like operating systems <ref> [5, 14] </ref>. When implementing the service architecture, lack of appropriate operating system mechanisms for scheduling and communication may negatively impact real-time communication performance. Accordingly, we have developed compensatory mechanisms in the communication subsystem to reduce the effects of platform unpredictability. <p> QoS-A [10] is a communication subsystem architecture which provides features similar to our service, but its realization would necessitate architectural mechanisms and extensions like those presented in this paper. A novel RSVP-based QoS architecture supporting integrated services in TCP/IP protocol stacks is described in <ref> [5] </ref>. A native-mode ATM transport layer has been designed and implemented in [3]. These architectures provide support for traffic policing and shaping but not for scheduling protocol processing and incorporating implementation overheads and constraints.
Reference: [6] <author> S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss. </author> <title> An architecture for differentiated services. Internet Draft (draft-ietf-diffserv-arch-01.txt), </title> <month> August </month> <year> 1998. </year>
Reference-contexts: Further, it does not incorporate implementation constraints and their associated overheads, or QoS-sensitive processing of traffic at the receiving host. While we focus on end-host design, support for QoS or preferential service in the network is being examined for provision of integrated and differentiated services on the Internet <ref> [6, 8, 12] </ref>. The signalling required to set up reservations for application flows can be provided by RSVP [34], which initiates reservation setup at the receiver, or ST-II [13], which initiates reservation setup at the sender.
Reference: [7] <author> G. Bollella and K. Jeffay. </author> <title> Supporting co-resident operating systems. </title> <booktitle> In Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 414, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: We focus on QoS-sensitive communication subsystem design while recognizing that real-time performance cannot be fully guaranteed without additional support from the operating system kernel. Such support could be in the form of processor capacity reserves for the service [28] or appropriate system partitioning <ref> [7] </ref>, and are beyond the scope of this paper.. We envision a system structure with the communication subsystem distinct from the computation subsystem. The communication subsystem handles all activities and resources involved in transmission and reception of data to and from the network.
Reference: [8] <author> R. Braden, D. Clark, and S. Shenker. </author> <title> Integrated services in the Internet architecture: An overview. Request for Comments RFC 1633, </title> <month> July </month> <year> 1994. </year> <note> Xerox PARC. </note>
Reference-contexts: Further, it does not incorporate implementation constraints and their associated overheads, or QoS-sensitive processing of traffic at the receiving host. While we focus on end-host design, support for QoS or preferential service in the network is being examined for provision of integrated and differentiated services on the Internet <ref> [6, 8, 12] </ref>. The signalling required to set up reservations for application flows can be provided by RSVP [34], which initiates reservation setup at the receiver, or ST-II [13], which initiates reservation setup at the sender.
Reference: [9] <author> A. T. Campbell, C. Aurrecoechea, and L. Hauw. </author> <title> A review of QoS architectures. </title> <journal> Multimedia Systems Journal, </journal> <year> 1996. </year>
Reference-contexts: An extensive survey of QoS architectures is provided in <ref> [9] </ref>, which provides a comprehensive view of the state of the art in the provisioning of end-to-end QoS.
Reference: [10] <author> A. T. Campbell, G. Coulson, and D. Hutchison. </author> <title> A quality of service architecture. </title> <journal> Computer Communication Review, </journal> <month> April </month> <year> 1994. </year>
Reference-contexts: OMEGA assumes appropriate support from the operating system for QoS-sensitive application execution, and the network subsystem for provision of transport-to-transport layer guarantees (the subject of this paper). QoS-A <ref> [10] </ref> is a communication subsystem architecture which provides features similar to our service, but its realization would necessitate architectural mechanisms and extensions like those presented in this paper. A novel RSVP-based QoS architecture supporting integrated services in TCP/IP protocol stacks is described in [5].
Reference: [11] <author> D. D. Clark. </author> <title> The structuring of systems using upcalls. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 171180, </pages> <year> 1985. </year>
Reference-contexts: These architectures provide support for traffic policing and shaping but not for scheduling protocol processing and incorporating implementation overheads and constraints. Operating system support for QoS-sensitive communication: Real-time upcalls (RTUs) [17] are used to schedule protocol processing for networked multimedia applications via event-based up-calls <ref> [11] </ref>. In contrast to RTUs, our approach adopts a thread-based execution model for protocol processing, schedules threads via a modified earliest-deadline-first (EDF) policy [22], and accounts for a number of implementation overheads.
Reference: [12] <author> D. D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanism. </title> <booktitle> In Proc. of ACM SIGCOMM, </booktitle> <pages> pages 1426, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Further, it does not incorporate implementation constraints and their associated overheads, or QoS-sensitive processing of traffic at the receiving host. While we focus on end-host design, support for QoS or preferential service in the network is being examined for provision of integrated and differentiated services on the Internet <ref> [6, 8, 12] </ref>. The signalling required to set up reservations for application flows can be provided by RSVP [34], which initiates reservation setup at the receiver, or ST-II [13], which initiates reservation setup at the sender.
Reference: [13] <author> L. Delgrossi and L. Berger. </author> <title> Internet stream protocol version 2 (ST-2) protocol specification version ST2+. Request for Comments RFC 1819, </title> <month> August </month> <year> 1995. </year> <institution> ST2 Working Group. </institution>
Reference-contexts: The signalling required to set up reservations for application flows can be provided by RSVP [34], which initiates reservation setup at the receiver, or ST-II <ref> [13] </ref>, which initiates reservation setup at the sender. QoS architectures: The OMEGA [30] end point architecture provides support for end-to-end QoS guarantees with a focus on an integrated framework for the specification and translation of application QoS requirements, and allocation of the necessary resources.
Reference: [14] <author> R. Engel, D. Kandlur, A. Mehra, and D. Saha. </author> <title> Exploring the performance impact of QoS support in TCP/IP protocol stacks. </title> <booktitle> In Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: While we have focused on a microkernel operating system, we believe that our design approach and issues highlighted are equally applicable, although with necessary modifications, to the in-kernel protocol stacks of monolithic Unix-like operating systems <ref> [5, 14] </ref>. When implementing the service architecture, lack of appropriate operating system mechanisms for scheduling and communication may negatively impact real-time communication performance. Accordingly, we have developed compensatory mechanisms in the communication subsystem to reduce the effects of platform unpredictability.
Reference: [15] <author> D. Ferrari and D. C. Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(3):368379, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: We have implemented a communication paradigm amenable to such an abstraction, namely the real-time channels model <ref> [15, 19] </ref>. A real-time channel is a uni-cast virtual connection between a source and destination host with associated performance guarantees on message delay and available bandwidth.
Reference: [16] <author> F.Travostino, E.Menze, and F.Reynolds. </author> <title> Paths: Programming with system resources in support of real-time distributed applications. </title> <booktitle> In Proc. IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: A path can be viewed as a logical channel through a multilayered system over which I/O data flows. As we demonstrate, the CORDS path abstraction <ref> [16] </ref>, similar to Scout paths, provides a rich framework for development of real-time communication services. Our architecture generalizes and extends the path abstraction to provide dynamic allocation and management of communication resources according to application QoS requirements. <p> While not a full-fledged real-time OS, MK 7.2 includes several features that facilitate provision of QoS guarantees. Specifically, though it provides only preemptive fixed-priority scheduling, the 7.2 release includes the CORDS (Communication Object for Real-time Dependable Systems) protocol environment <ref> [16] </ref> in which our implementation resides. CORDS is based on the x-kernel object-oriented networking framework originally developed at the University of Arizona [18], with some significant extensions for controlled allocation of system resources. <p> CORDS provides two abstractions, paths and allocators, for reservation and allocation of system resources within the CORDS framework. Resources associated with paths include dynamically allocated memory, input packet buffers, and input threads that shepherd messages up the protocol stack <ref> [16] </ref>. Paths, coupled with allocators, provide a capability for reserving and allocating resources at any protocol stack layer on behalf of a particular connection, or class of messages.
Reference: [17] <author> R. Gopalakrishnan and G. M. Parulkar. </author> <title> A real-time upcall facility for protocol processing with QoS guarantees. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> page 231, </pages> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: A native-mode ATM transport layer has been designed and implemented in [3]. These architectures provide support for traffic policing and shaping but not for scheduling protocol processing and incorporating implementation overheads and constraints. Operating system support for QoS-sensitive communication: Real-time upcalls (RTUs) <ref> [17] </ref> are used to schedule protocol processing for networked multimedia applications via event-based up-calls [11]. In contrast to RTUs, our approach adopts a thread-based execution model for protocol processing, schedules threads via a modified earliest-deadline-first (EDF) policy [22], and accounts for a number of implementation overheads.
Reference: [18] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 17(1):113, </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: Specifically, though it provides only preemptive fixed-priority scheduling, the 7.2 release includes the CORDS (Communication Object for Real-time Dependable Systems) protocol environment [16] in which our implementation resides. CORDS is based on the x-kernel object-oriented networking framework originally developed at the University of Arizona <ref> [18] </ref>, with some significant extensions for controlled allocation of system resources.
Reference: [19] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari. </author> <title> Real-time communication in multi-hop networks. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 5(10):10441056, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: We have implemented a communication paradigm amenable to such an abstraction, namely the real-time channels model <ref> [15, 19] </ref>. A real-time channel is a uni-cast virtual connection between a source and destination host with associated performance guarantees on message delay and available bandwidth. <p> The admission control policy for real-time channels implements the D order algorithm to perform schedulability analysis for CPU and link bandwidth allocation. Details on D order and subsequent extensions to account for CPU preemption costs and the relationship between CPU and link bandwidth are available in <ref> [19] </ref> and [24], respectively. 5 Service Implementation Our experimental testbed and implementation environment is based on the MK 7.2 microkernel operating system from the Open Group Research Institute. The hardware platform consists of several 133 MHz Pentium-based PCs connected by a Cisco 2900 Ethernet switch operating at 10MB/s.
Reference: [20] <author> D. G. Korn. </author> <title> Porting UNIX to windows NT. </title> <booktitle> In Proc. USENIX Winter Conference, </booktitle> <month> January </month> <year> 1997. </year>
Reference-contexts: In this paper we explore QoS-sensitive communication subsystem design for contemporary operating systems. We describe the general architecture, implementation, and evaluation of a guaranteed QoS communication service for a microkernel operating system. Microkernel operating systems continue to play an important role in operating system design <ref> [20] </ref>, and are being extended to y The work of this author was performed at the University of Michigan. The work reported in this paper was supported in part by the National Science Foundation under grant MIP9203895 and the Defense Advanced Research Project Agency under grant DOD-C-F30602-95-1-0044.
Reference: [21] <author> C. Lee, K. Yoshida, C. Mercer, and R. Rajkumar. </author> <title> Predictable communication protocol processing in Real-Time Mach. </title> <booktitle> In Proc. of 2nd Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Our architecture generalizes and extends the path abstraction to provide dynamic allocation and management of communication resources according to application QoS requirements. Recently, processor capacity reserves in Real-Time Mach [28] have been combined with user-level protocol processing [23] for predictable protocol processing inside hosts <ref> [21] </ref>. However, no support is provided for traffic enforcement or the ability to control protocol processing priority separate from application priority. 3 Real-Time Communication Service Architecture Our primary goal is to provide applications with a service to request and utilize guaranteed-QoS unicast connections between two hosts.
Reference: [22] <author> C. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 1(20):4661, </volume> <month> January </month> <year> 1973. </year>
Reference-contexts: Operating system support for QoS-sensitive communication: Real-time upcalls (RTUs) [17] are used to schedule protocol processing for networked multimedia applications via event-based up-calls [11]. In contrast to RTUs, our approach adopts a thread-based execution model for protocol processing, schedules threads via a modified earliest-deadline-first (EDF) policy <ref> [22] </ref>, and accounts for a number of implementation overheads. Similar to our approach, rate-based flow control of multimedia streams via kernel-based communication threads is also proposed in [33]. However, in contrast to our notion of per-connection threads, a coarser notion of per-process kernel threads is adopted.
Reference: [23] <author> C. Maeda and B. N. Bershad. </author> <title> Protocol service decomposition for high-performance networking. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 244255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Our architecture generalizes and extends the path abstraction to provide dynamic allocation and management of communication resources according to application QoS requirements. Recently, processor capacity reserves in Real-Time Mach [28] have been combined with user-level protocol processing <ref> [23] </ref> for predictable protocol processing inside hosts [21]. <p> Server-based implementation: While a server-based implementation is natural for a microkernel operating system, it may perform poorly compared to user-level protocol libraries due to excessive data copying and context switching <ref> [23, 32] </ref>. Implementing the service as a protocol library, however, distributes the functions of admission control and run-time resource management among several address spaces. Since applications may each compete for communication resources, controlling system-wide resources is more effectively done when these functions are localized in a single domain.
Reference: [24] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Resource management for real-time communication: Making theory meet practice. </title> <booktitle> In Proc. 2nd Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 130138, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: The admission control policy for real-time channels implements the D order algorithm to perform schedulability analysis for CPU and link bandwidth allocation. Details on D order and subsequent extensions to account for CPU preemption costs and the relationship between CPU and link bandwidth are available in [19] and <ref> [24] </ref>, respectively. 5 Service Implementation Our experimental testbed and implementation environment is based on the MK 7.2 microkernel operating system from the Open Group Research Institute. The hardware platform consists of several 133 MHz Pentium-based PCs connected by a Cisco 2900 Ethernet switch operating at 10MB/s.
Reference: [25] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Structuring communication software for quality of service guarantees. </title> <booktitle> In Proc. 17th Real-Time Systems Symposium, </booktitle> <pages> pages 144154, </pages> <month> De-cember </month> <year> 1996. </year>
Reference-contexts: Common to QoS-sensitive communication service models are the following three architectural requirements: (i) maintenance of per-connection QoS guarantees, (ii) overload protection via per-connection traffic enforcement, and (iii) fairness to best-effort traffic <ref> [25] </ref>. Earlier work in [25] presented and justified a high-level architectural design in the context of a specific communication service model. <p> Common to QoS-sensitive communication service models are the following three architectural requirements: (i) maintenance of per-connection QoS guarantees, (ii) overload protection via per-connection traffic enforcement, and (iii) fairness to best-effort traffic <ref> [25] </ref>. Earlier work in [25] presented and justified a high-level architectural design in the context of a specific communication service model. We generalize the architecture to apply to a number of service models, and focus on techniques and issues that arise in implementing the generic architectural components. guaranteed-QoS service at end-hosts.
Reference: [26] <author> A. Mehra, A. Shaikh, T. Abdelzaher, Z. Wang, and K. Shin. </author> <title> Realizing services for guaranteed-QoS communication on a microkernel operating system. </title> <type> Technical Report CSE-TR-375-98, </type> <institution> University of Michigan, Dept. of Electrical Engineering and Computer Science, </institution> <address> Ann Arbor, MI, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: It abstracts the communication overheads and costs of the host hardware and software platform and makes them available to admission control to account for protocol processing delay, packet transmission latency, message send delay, etc. Details of our profiling methodology, including measured parameters of our service implementation, are available in <ref> [26] </ref>. 4.5 Service Model Instantiation Our real-time communication architecture may be used to realize a family of service models that differ in the choice of QoS-parameters and admission control policy, as long as QoS parameters can be converted into a rate constraint (maximum number of packets sent per period), a storage <p> We have tested our prototype with transmission of stored compressed video and playout using mpeg play. We plan to conduct further experiments with a number of stored video traces. To allow for QoS-adaptation, we have implemented an end-host architecture for adaptive-QoS communication services [2]. In <ref> [26] </ref> we describe the complex process of parameterizing the overheads of the communication subsystem and target platform. These efforts illustrate the need for an automated approach to profiling and sys-tem parameterization. We have, therefore, also begun to explore self-parameterizing protocol stacks for QoS-sensitive communica tion subsystems [27].
Reference: [27] <author> A. Mehra, Z. Wang, and K. Shin. </author> <title> Self-parameterizing protocol stacks for guaranteed quality of service. </title> <note> available at ftp://rtcl.eecs.umich.edu/outgoing/ashish/selfparam.ps, </note> <month> June </month> <year> 1998. </year>
Reference-contexts: In [26] we describe the complex process of parameterizing the overheads of the communication subsystem and target platform. These efforts illustrate the need for an automated approach to profiling and sys-tem parameterization. We have, therefore, also begun to explore self-parameterizing protocol stacks for QoS-sensitive communica tion subsystems <ref> [27] </ref>.
Reference: [28] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor capacity reserves for multimedia operating systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: We focus on QoS-sensitive communication subsystem design while recognizing that real-time performance cannot be fully guaranteed without additional support from the operating system kernel. Such support could be in the form of processor capacity reserves for the service <ref> [28] </ref> or appropriate system partitioning [7], and are beyond the scope of this paper.. We envision a system structure with the communication subsystem distinct from the computation subsystem. The communication subsystem handles all activities and resources involved in transmission and reception of data to and from the network. <p> Our architecture generalizes and extends the path abstraction to provide dynamic allocation and management of communication resources according to application QoS requirements. Recently, processor capacity reserves in Real-Time Mach <ref> [28] </ref> have been combined with user-level protocol processing [23] for predictable protocol processing inside hosts [21].
Reference: [29] <author> D. Mosberger and L. L. Peterson. </author> <title> Making paths explicit in the Scout operating system. </title> <booktitle> In Proc. USENIX Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 153168, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Also, the architecture outlined in [33] does not provide signalling and resource management services within the communication subsystem. Explicit operating system support for communication is a focus of the Scout operating system, which uses paths as a fundamental operating system structuring technique <ref> [29] </ref>. A path can be viewed as a logical channel through a multilayered system over which I/O data flows. As we demonstrate, the CORDS path abstraction [16], similar to Scout paths, provides a rich framework for development of real-time communication services.
Reference: [30] <author> K. Nahrstedt and J. M. Smith. </author> <title> Design, implementation and experiences of the OMEGA end-point architecture. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(7):1263 1279, </volume> <month> September </month> <year> 1996. </year>
Reference-contexts: The signalling required to set up reservations for application flows can be provided by RSVP [34], which initiates reservation setup at the receiver, or ST-II [13], which initiates reservation setup at the sender. QoS architectures: The OMEGA <ref> [30] </ref> end point architecture provides support for end-to-end QoS guarantees with a focus on an integrated framework for the specification and translation of application QoS requirements, and allocation of the necessary resources.
Reference: [31] <author> S. Sommer and J. Potter. </author> <title> Operating system extensions for dynamic real-time applications. </title> <booktitle> In Proc. 17th Real-Time Systems Symposium, </booktitle> <pages> pages 4550, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of NSF or DARPA. support real-time and multimedia applications <ref> [31] </ref>. We describe how to map the architectural components of a QoS-sensitive communication subsystem onto the support furnished by the operating system in order to provide appropriate QoS guarantees. We discuss the difficulties in realizing real-time behavior on such platforms and our approach to providing predictability within platform limitations.
Reference: [32] <author> C. A. Thekkath, T. D. Nguyen, E. Moy, and E. Lazowska. </author> <title> Implementing network protocols at user level. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 1(5):554565, </volume> <month> October </month> <year> 1993. </year>
Reference-contexts: Server-based implementation: While a server-based implementation is natural for a microkernel operating system, it may perform poorly compared to user-level protocol libraries due to excessive data copying and context switching <ref> [23, 32] </ref>. Implementing the service as a protocol library, however, distributes the functions of admission control and run-time resource management among several address spaces. Since applications may each compete for communication resources, controlling system-wide resources is more effectively done when these functions are localized in a single domain.
Reference: [33] <author> D. K. Y. Yau and S. S. Lam. </author> <title> An architecture towards efficient OS support for distributed multimedia. </title> <booktitle> In Proc. Multimedia Computing and Networking (MMCN '96), </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: In contrast to RTUs, our approach adopts a thread-based execution model for protocol processing, schedules threads via a modified earliest-deadline-first (EDF) policy [22], and accounts for a number of implementation overheads. Similar to our approach, rate-based flow control of multimedia streams via kernel-based communication threads is also proposed in <ref> [33] </ref>. However, in contrast to our notion of per-connection threads, a coarser notion of per-process kernel threads is adopted. Also, the architecture outlined in [33] does not provide signalling and resource management services within the communication subsystem. <p> Similar to our approach, rate-based flow control of multimedia streams via kernel-based communication threads is also proposed in <ref> [33] </ref>. However, in contrast to our notion of per-connection threads, a coarser notion of per-process kernel threads is adopted. Also, the architecture outlined in [33] does not provide signalling and resource management services within the communication subsystem. Explicit operating system support for communication is a focus of the Scout operating system, which uses paths as a fundamental operating system structuring technique [29].
Reference: [34] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zap-pala. RSVP: </author> <title> A new resource ReSerVation Protocol. </title> <journal> IEEE Network, </journal> <pages> pages 818, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: While we focus on end-host design, support for QoS or preferential service in the network is being examined for provision of integrated and differentiated services on the Internet [6, 8, 12]. The signalling required to set up reservations for application flows can be provided by RSVP <ref> [34] </ref>, which initiates reservation setup at the receiver, or ST-II [13], which initiates reservation setup at the sender.
References-found: 34

