URL: http://s2k-ftp.cs.berkeley.edu:8000/postgres/papers/vis95-tioga2.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/tioga/research.html
Root-URL: http://www.cs.berkeley.edu
Email: email: tioga@postgres.berkeley.edu  
Title: The Tioga-2 Database Visualization Environment  
Author: Alexander Aiken Jolly Chen, Mark Lin, Mybrid Spalding, Michael Stonebraker and Allison Woodruff 
Address: Berkeley  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: This paper reports on user experience with Tioga, a DBMS-centric visualization tool developed at Berkeley. Based on this experience, we have designed Tioga-2 as a direct manipulation system that is more powerful and much easier to program. We present a detailed design of the revised system together with an extensive example of its application. We also give a progress report on a Tioga-2 implementation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Bier, M. Stone, K. Pier, W. Buxton, and T. DeRose. Toolglass and magic lenses: </author> <title> The see-through interface. </title> <booktitle> In Proc. of SIGGRAPH 1993, </booktitle> <pages> pages 73-80, </pages> <address> Anaheim, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Another example is Magic Lenses, which provides a set of primitive lenses (windows akin to our magnifying glasses) that can be placed over data and over each other to modify a visualization <ref> [1] </ref>. While we find paradigms appealing, we suspect a flaw in the assumption that the space of possible visualizations can or must be greatly restricted in advance. 3 In our experience, paradigms serve a class of users well and frustrate users with other applications.
Reference: 2. <author> J. Chen. </author> <title> Optimizing interactive browsing queries. </title> <type> Unpublished manuscript, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Finally, a database-centric visualization system raises the issue of how browsing queries are implemented with tolerable performance. This question is beyond the scope of this paper; the interested reader is referred to <ref> [2] </ref> for related work on the optimization and efficient implementation of browsing queries. 12 Conclusions We are now hard at work implementing Tioga-2. An initial version of the system is functional, and we expect to have a complete prototype by summer 1996.
Reference: 3. <author> P. Cox, M. Gorlick, and R. Razouk. </author> <title> Using weaves for software construction and analysis. </title> <booktitle> In Proc. of the 13th International Conference on Software Engineering, </booktitle> <pages> pages 23-34, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: These systems are similar to Tioga in their reliance on simplifying programming by using dataflow graphs. Thus, these systems share Tioga's basic problem that boxes-and-arrows notation alone does not simplify programming sufficiently for novice programmers (see Section 1.1). Weaves is another boxes-and-arrows system <ref> [3] </ref>. Weaves are intended to support visual programming, so the boxes-and-arrows program is itself the only visualization of interest. An extension of weaves supports limited drill down [5]. Many browsing systems are based on a "paradigm".
Reference: 4. <author> Allen Cypher. </author> <title> Watch What I Do: Programming by Demonstration. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: However, considerable programming is done by direct manipulation of the screen without reference to this data structure. 4. Every operation has a clear, well-specified semantics. Unlike many previous direct manipulation systems there is no inference procedure to synthesize a program from a user's examples <ref> [4] </ref>. Instead, every Tioga-2 operation has a straightforward, unambiguous meaning as a step in a program. 5. Retain the "big programmer/little programmer" model. We recognize that there are computations that cannot be specified in Tioga-2.
Reference: 5. <author> M. Gorlick and A. Quilici. </author> <title> Visual programming-in-the-large versus visual programming-in-the-small. </title> <booktitle> In Proc. of the IEEE Symposium on Visual Languages, </booktitle> <pages> pages 137-144, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Weaves is another boxes-and-arrows system [3]. Weaves are intended to support visual programming, so the boxes-and-arrows program is itself the only visualization of interest. An extension of weaves supports limited drill down <ref> [5] </ref>. Many browsing systems are based on a "paradigm". A classic example is the Fisheye interface, which magnifies data in the center of focus to a greater degree than data at the periphery [10].
Reference: 6. <author> R. Krishnamurthy and M. Zloof. RBE: </author> <title> Rendering by example. </title> <booktitle> In Proc. of the 11th International Conference on Data Engineeering, </booktitle> <pages> pages 288-297, </pages> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Within the area of browsers for databases, the work of Krishnamurthy and Zloof on Rendering By Example (RBE) is closest to our own. In particular, RBE shares our view on the importance of a system that is both highly programmable and easy to program <ref> [6] </ref>. RBE provides a more declarative programming interface than Tioga-2, but RBE can construct a much less general class of visualizations. Finally, a database-centric visualization system raises the issue of how browsing queries are implemented with tolerable performance.
Reference: 7. <author> B. Lucas, G.D. Abram, N.S. Collins, D.A. Epstein, et al. </author> <title> An architecture for a scientific visualization system. </title> <booktitle> In Proc. of the IEEE Visualization Conference, </booktitle> <pages> pages 107-114, </pages> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: In the rest of this introduction, we first discuss the problems and lessons from Tioga and then outline our solution to those problems in Tioga-2. 1.1 Tioga Tioga adopts the "boxes-and-arrows" programming paradigm popularized by AVS [13], Data Explorer <ref> [7] </ref>, and Khoros [9]. Every box is a user-defined function, which has been registered with POSTGRES. A programmer constructs a Tioga program using a drag and drop editor to move and connect boxes on the screen. <p> This section surveys a cross-section of related work. As discussed in Section 1, Tioga-2 retains the boxes-and-arrows notation for programs originally developed for dataflow languages and popularized for visualization by AVS [13], Data Explorer <ref> [7] </ref>, and Khoros [9]. These systems are similar to Tioga in their reliance on simplifying programming by using dataflow graphs. Thus, these systems share Tioga's basic problem that boxes-and-arrows notation alone does not simplify programming sufficiently for novice programmers (see Section 1.1). Weaves is another boxes-and-arrows system [3].
Reference: 8. <author> K. Perlin and D. Fox. </author> <title> Pad: An alternative approach to the computer interface. </title> <booktitle> In Proc. of SIGGRAPH, </booktitle> <pages> pages 57-64, </pages> <address> Anaheim, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: These displayables are useful for "trim" such as borders, titles, company logos, etc. Semantically, these displayables are objects associated with an overlay. We introduce two such types of objects: static and sticky (a term borrowed from the Pad project <ref> [8] </ref>). An example static object is a scale for the (x; y) dimensions with tick marks on the axes. These objects are static because they have constant position in the (x; y) dimensions. <p> In short, visualizations should be as programmable as possible. A different approach has been taken by the ambitious Pad project <ref> [8] </ref>. In Pad, all data lives on a two-dimensional plane. As in our system, every entity (an object in Pad, a tuple in Tioga-2) has a position and "knows" how to draw itself.
Reference: 9. <author> J. Rasure and M. Young. </author> <title> An open environment for image processing software development. </title> <booktitle> In Proc. of the SPIE Symposium on Electronic Image Processing, </booktitle> <pages> pages 300-310, </pages> <address> San Jose, CA, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: In the rest of this introduction, we first discuss the problems and lessons from Tioga and then outline our solution to those problems in Tioga-2. 1.1 Tioga Tioga adopts the "boxes-and-arrows" programming paradigm popularized by AVS [13], Data Explorer [7], and Khoros <ref> [9] </ref>. Every box is a user-defined function, which has been registered with POSTGRES. A programmer constructs a Tioga program using a drag and drop editor to move and connect boxes on the screen. Every Tioga program has a designated viewer connected to the output of a specified box. <p> This section surveys a cross-section of related work. As discussed in Section 1, Tioga-2 retains the boxes-and-arrows notation for programs originally developed for dataflow languages and popularized for visualization by AVS [13], Data Explorer [7], and Khoros <ref> [9] </ref>. These systems are similar to Tioga in their reliance on simplifying programming by using dataflow graphs. Thus, these systems share Tioga's basic problem that boxes-and-arrows notation alone does not simplify programming sufficiently for novice programmers (see Section 1.1). Weaves is another boxes-and-arrows system [3].
Reference: 10. <author> M. Sarkar and M.H. Brown. </author> <title> Graphical fisheye views. </title> <journal> Communications of the ACM, </journal> <pages> pages 73-84, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: An extension of weaves supports limited drill down [5]. Many browsing systems are based on a "paradigm". A classic example is the Fisheye interface, which magnifies data in the center of focus to a greater degree than data at the periphery <ref> [10] </ref>. Another example is Magic Lenses, which provides a set of primitive lenses (windows akin to our magnifying glasses) that can be placed over data and over each other to modify a visualization [1].
Reference: 11. <author> M. Stonebraker, R. Agrawal, U. Dayal, E. Neuhold, and A. Reuter. </author> <title> DBMS research at a crossroads: The Vienna update. </title> <booktitle> In Proc. of the 19th International Conference on Very Large Data Bases, </booktitle> <pages> pages 688-692, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Thus, at present the expanding capabilities of database systems can be exploited fully only by expert programmers. Making databases easier to use and program, and thereby more accessible, is an important issue today and will become more important as database technology becomes faster, cheaper, and more powerful <ref> [11] </ref>. This paper reports on the design of Tioga-2, a new database visualization environment. We use the term "visualization environment" rather than "programming environment" to emphasize that most programming operations in Tioga-2 are performed by manipulating graphical representations of either programs or data.
Reference: 12. <author> M. Stonebraker, J. Chen, N. Nathan, C. Paxson, and J. Wu. </author> <title> Tioga: Providing data management support for scientific visualization applications. </title> <booktitle> In Proc. of the 19th International Conference on Very Large Data Bases, </booktitle> <pages> pages 25-38, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Tioga-2 has not been designed in a vacuum. Previously, we reported on the design and implementation of Tioga, a visualization system that is coupled closely with the POSTGRES DBMS <ref> [12] </ref>. The design of Tioga-2 has been influenced heavily by what we learned from user experiences with Tioga and a companion commercial product, Illustra Object-Knowledge, based on the same ideas. <p> The boxes-and-arrows editor is very similar to the one reported in <ref> [12] </ref> and is not discussed here. The paint program implementation is largely complete, with the exception of wormholes, and is described in Sections 9.2-9.5.
Reference: 13. <author> C. Upson et al. </author> <title> The application visualization system. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4) </volume> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: In the rest of this introduction, we first discuss the problems and lessons from Tioga and then outline our solution to those problems in Tioga-2. 1.1 Tioga Tioga adopts the "boxes-and-arrows" programming paradigm popularized by AVS <ref> [13] </ref>, Data Explorer [7], and Khoros [9]. Every box is a user-defined function, which has been registered with POSTGRES. A programmer constructs a Tioga program using a drag and drop editor to move and connect boxes on the screen. <p> This section surveys a cross-section of related work. As discussed in Section 1, Tioga-2 retains the boxes-and-arrows notation for programs originally developed for dataflow languages and popularized for visualization by AVS <ref> [13] </ref>, Data Explorer [7], and Khoros [9]. These systems are similar to Tioga in their reliance on simplifying programming by using dataflow graphs. Thus, these systems share Tioga's basic problem that boxes-and-arrows notation alone does not simplify programming sufficiently for novice programmers (see Section 1.1).
Reference: 14. <author> A. Woodruff, P. Wisnovsky, C. Taylor, M. Stonebraker, C. Paxson, J. Chen, and A. Aiken. </author> <title> Zooming and tunneling in Tioga: Supporting navigation in multidimensional space. </title> <booktitle> In Proc. of the IEEE Symposium on Visual Languages, </booktitle> <pages> pages 191-193, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1994. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: For example, a state map of the United States could become a county map upon suitable zooming. In addition, we specified but never implemented the features of multiple viewers, viewers within viewers, cloning of viewers, slaving of viewers, and wormholes <ref> [14] </ref>. Experience with Tioga and Illustra Object-Knowledge can be summarized as follows: 1. Programmer model Tioga is based on the idea that an expert programmer constructs POST-GRES user-defined functions (boxes) and that a second programmer uses an editor to "wire up" visualizations.
References-found: 14

