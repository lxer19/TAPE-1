URL: http://euler.mcs.utulsa.edu/~sandip/ijhcs-scheduler.ps
Refering-URL: http://euler.mcs.utulsa.edu/~sandip/DAI.html
Root-URL: 
Email: e-mail:[sandip,haynes,arora]@euler.mcs.utulsa.edu  
Title: Satisfying User Preferences While Negotiating Meetings  
Author: Sandip Sen, Thomas Haynes, and Neeraj Arora 
Address: College Ave.  600 South College Avenue, Tulsa, OK 74104-3189  
Affiliation: 600 South  Department of Mathematical Computer Sciences The University of Tulsa  
Abstract: Our research agenda focuses on building software agents that can facilitate and streamline group problem solving in organizations. We are particularly interested in developing intelligent agents that can partially automate routine information processing tasks by representing and reasoning with the preferences and biases of associated users. The distributed meeting scheduler is a collection of agents, responsible for scheduling meetings for their respective users. Users have preferences on when they like to meet, e.g. time of day, day of week, status of other invitees, topic of the meeting, etc. The agent must balance such concerns, proposing and accepting meeting times that satisfy as many of these criteria as possible. For example, a user might prefer not to meet at lunchtime unless the president of the company is hosting the meeting. We apply techniques from voting theory to arrive at consensus choices for meeting times while balancing different preferences. 
Abstract-found: 1
Intro-found: 1
Reference: [ Brams and Fishburn, 1991 ] <author> Steven J. Brams and Peter C. Fishburn. </author> <title> Alternative voting systems. </title> <editor> In L. Sandy Maisel, editor, </editor> <booktitle> Political Parties and Elections in the United States: An Encyclopedia, </booktitle> <volume> volume 1, </volume> <pages> pages 23-31. </pages> <publisher> Garland, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: However our approach is for different preferences of the same user to vote on what is a preferable meeting time, and hence is a cooperative voting system. Thus even though the Borda count is vulnerable to strategic manipulation <ref> [ Brams and Fishburn, 1991 ] </ref> , we can exploit the cooperative nature of the meeting scheduler agent to avoid manipulation. Another difference is that they require a cardinal utility evaluation of alternatives while we require an ordinal evaluation.
Reference: [ CACM July issue, 1994 ] <institution> Communications of the ACM, </institution> <month> july </month> <year> 1994, </year> <journal> volume 37, </journal> <volume> number 7, </volume> <year> 1994. </year> <note> Special Issue on Intelligent Agents. </note>
Reference-contexts: The usefulness of intelligent agents is further appreciated with the advent of the information superhighway <ref> [ CACM July issue, 1994 ] </ref> . Some of the people in a typical organization spend a large percentage of their working time in scheduling and attending meetings [ Clark, 1987, Kelley and Chapanis, 1982 ] .
Reference: [ Clark, 1987 ] <author> Phil Clark. </author> <title> Office automation: Automation gains municipal ground. </title> <publisher> American City & County, </publisher> <pages> page 10, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: The usefulness of intelligent agents is further appreciated with the advent of the information superhighway [ CACM July issue, 1994 ] . Some of the people in a typical organization spend a large percentage of their working time in scheduling and attending meetings <ref> [ Clark, 1987, Kelley and Chapanis, 1982 ] </ref> . The efficiency of the scheduling process used and the quality of the schedules generated, then, affects the working of an organization to a large extent.
Reference: [ Crispin, 1994 ] <author> M. Crispin. </author> <title> INTERNET MESSAGE ACCESS PROTOCOL VERSION 4. Request for Comments (Experimental) RFC 1730, </title> <institution> Internet Engineering Task Force, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: When it finds such a message, it translates the e-mail message into an appropriate internal format and posts it on the working memory. To prevent cluttering the mailbox of users, we are using the Internet Message Access Protocol, version 4 (IMAP4 <ref> [ Crispin, 1994 ] </ref> ), to monitor and delete messages relevant to the meeting schedulers. contained in the header string denotes that this is a meeting scheduling message for a meeting with an ID of "*MS*aroraFriNov1:13:08:12CST1996" (formed by appending the login id of the user originating the meeting request with the
Reference: [ Dent et al., 1992 ] <author> Lisa Dent, Jesus Boticario, John McDermott, Tom Mitchell, and David Zabowski. </author> <title> A personal learning apprentice. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 96-103, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: None of these, however, completely automate the meeting scheduling process. For example, a number of these researchers <ref> [ Dent et al., 1992, Maes, 1994 ] </ref> have focused on learning personal assistants that learn user preferences by watching the user scheduling meetings. The goal is to assist users in making decisions by suggesting alternatives, and not to automate the process. <p> In the future, we plan to investigate learning user preferences, either from observed behavior of the user <ref> [ Dent et al., 1992, Maes, 1994 ] </ref> (in accepting or rejecting the recommended meeting times) or from querying other agents.
Reference: [ Ephrati and Rosenschein, 1991 ] <author> Eithan Ephrati and Jeffrey S. Rosenschein. </author> <title> The clarke tax as a consensus mechanism amoung automated agents. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 173-178, </pages> <address> Anaheim, CA, </address> <month> July </month> <year> 1991. </year>
Reference: [ Ephrati and Rosenschein, 1996 ] <author> Eithan Ephrati and Jeffrey S. Rosenschein. </author> <title> Deriving consensus in multiagent systems. </title> <journal> Artificial Intelligence, </journal> <volume> 87(1-2):21-74, </volume> <month> November </month> <year> 1996. </year>
Reference: [ Ephrati et al., 1994 ] <author> Eithan Ephrati, Gilad Zlotkin, and Jeffrey S. Rosenschein. </author> <title> A non-manipulable meeting scheduling system. </title> <booktitle> In 13th International Workshop on Distributed Artificial Intelligence, </booktitle> <month> July </month> <year> 1994. </year> <month> 27 </month>
Reference-contexts: The goal is to assist users in making decisions by suggesting alternatives, and not to automate the process. In the work by Kautz et al. [ Kautz et al., 1994 ] , the user has to rank each proposed meeting. A similar assumption is made by Ephrati et al. <ref> [ Ephrati et al., 1994 ] </ref> in their attempt to develop a meeting scheduling system which cannot be unduly influenced by a single user. We relieve the user of this cognitive load by automating the ranking of options and finding alternative choices best on stored preferences of the user. <p> Voting systems have previously been applied to distributed artificial intelligence domains [ Ephrati and Rosenschein, 1991, Rosenschein, 1995, Ephrati and Rosenschein, 1996 ] and meeting schedulers in particular <ref> [ Ephrati et al., 1994 ] </ref> , but not in the context of cooperative voters. <p> particular <ref> [ Ephrati et al., 1994 ] </ref> , but not in the context of cooperative voters. Ephrati et al.'s approach focuses on voting by all users of a meeting to reach consensus on an acceptable time for the meeting and is a non-cooperative voting scenario where voters can vote insincerely [ Ephrati et al., 1994 ] . They can therefore use only those voting strategies that cannot be sabotaged by strategic manipulation [ Ordeshook, 1995, Straffin, 1980 ] .
Reference: [ Flanagan, 1996 ] <author> David Flanagan. </author> <title> Java in Nutshell. </title> <address> O'Reilly, </address> <year> 1996. </year>
Reference-contexts: The pro 20 Dimension A 4,5 R 6 C 4,5,6 R E 4,6 R 5 G 4,5,6 R Table 4: Rankings of election of proposals 4, 5, 6, and Reject (R). gramming language used for the current implementation is Java <ref> [ Flanagan, 1996 ] </ref> , which was chosen for its portability and object-oriented features. The architecture of our meeting scheduling agents is as described in Figure 7. We first briefly outline the functionalities of each of the components of the meeting scheduler, and then describe their implementations in more detail.
Reference: [ Greenberg, 1991 ] <author> S. Greenberg. </author> <title> Computer-supported cooperative work and groupware: and introduction to the special issue. </title> <journal> International Journal of man-machine studies, </journal> <volume> 34(2):133, </volume> <month> February </month> <year> 1991. </year>
Reference: [ Greif, 1982 ] <author> Irene Greif. PCAL: </author> <title> A personal calendar. </title> <type> Technical Report TM-213, </type> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, Mass, </address> <year> 1982. </year>
Reference-contexts: Automating meeting scheduling is important, therefore, not only because it can save time and effort on the part of humans, but also because this may lead to more efficient schedules and to changes in how information is exchanged within organizations. Past efforts <ref> [ Greif, 1982, Malone et al., 1987 ] </ref> in developing automated meeting schedulers have met with limited success, although they are available in a number of office software systems [ Grudin, 1987 ] . 6 Most of the commercially available software for scheduling over computer networks have been personal computer based
Reference: [ Grudin, 1987 ] <author> Jonathan Grudin. </author> <title> Social evaluation of the user interface: Who does the work and who gets the benefit? In H. </title> <editor> Bullinger and B. Shacketl, editors, </editor> <booktitle> Human Computer Interaction - INTERACT87, </booktitle> <pages> pages 805-811. </pages> <publisher> North Holland, </publisher> <year> 1987. </year>
Reference-contexts: Past efforts [ Greif, 1982, Malone et al., 1987 ] in developing automated meeting schedulers have met with limited success, although they are available in a number of office software systems <ref> [ Grudin, 1987 ] </ref> . 6 Most of the commercially available software for scheduling over computer networks have been personal computer based systems. A good survey of the most promising of these products can be found in [ Taub, 1993 ] .
Reference: [ Grudin, 1994 ] <author> Jonathan Grudin. </author> <title> Groupware and social dynamics: Eight challenges for developers. </title> <journal> Communications of the ACM, </journal> <volume> 35(1) </volume> <pages> 92-105, </pages> <month> January </month> <year> 1994. </year>
Reference: [ Johansen, 1988 ] <author> Robert Johansen. </author> <title> Groupware: Computer Support for Business Teams. </title> <publisher> Free Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: Communication between the schedulers follows a standardized, well-understood protocol. Group composition: Though a peer group assumption is made regarding connectivity between users, the hierarchical structure of the organization is embedded in encoded user preferences. In his categorization of groupware tools Johansen <ref> [ Johansen, 1988 ] </ref> have observed that most groupware system facilitates the users to work at different times in different places. Our work is aimed at building "surrogate" agents that allow users in groupd to perform multiple tasks at the same time by automating some of its information processing needs.
Reference: [ Johansen, 1991 ] <author> Robert Johansen. </author> <title> Groupware: Future directions and wild cards. </title> <journal> Journal of Organizational Computing, </journal> <volume> 1(2):229, </volume> <year> 1991. </year>
Reference: [ Kautz et al., 1994 ] <author> Henry Kautz, Bart Selman, Michael Coen, Steven Ketchpel, and Chris Ramming. </author> <title> An experiment in the design of software agents. </title> <booktitle> In National Conference on Artificial Intelligence, </booktitle> <pages> pages 438-443, </pages> <year> 1994. </year>
Reference-contexts: The goal is to assist users in making decisions by suggesting alternatives, and not to automate the process. In the work by Kautz et al. <ref> [ Kautz et al., 1994 ] </ref> , the user has to rank each proposed meeting. A similar assumption is made by Ephrati et al. [ Ephrati et al., 1994 ] in their attempt to develop a meeting scheduling system which cannot be unduly influenced by a single user.
Reference: [ Kelley and Chapanis, 1982 ] <author> J. F. Kelley and A. Chapanis. </author> <title> How professional persons keep their calendars: Implications for computerization. </title> <journal> Journal of Occupational Psychology, </journal> <volume> 55 </volume> <pages> 141-156, </pages> <year> 1982. </year>
Reference-contexts: The usefulness of intelligent agents is further appreciated with the advent of the information superhighway [ CACM July issue, 1994 ] . Some of the people in a typical organization spend a large percentage of their working time in scheduling and attending meetings <ref> [ Clark, 1987, Kelley and Chapanis, 1982 ] </ref> . The efficiency of the scheduling process used and the quality of the schedules generated, then, affects the working of an organization to a large extent.
Reference: [ Krasner et al., 1991 ] <author> Herb Krasner, John McInroy, and Diane B. Walz. </author> <title> Groupware research and technology issues with application to software process management. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(4) </volume> <pages> 704-712, </pages> <month> July/August </month> <year> 1991. </year>
Reference-contexts: The major difference between this implementation and other work on meeting scheduling [ Dent et al., 1992, Kautz et al., 1994, Maes, 1994 ] is that we are more interested in efficiently automating the scheduling process rather than learning about user preferences. Krasner et al. <ref> [ Krasner et al., 1991 ] </ref> have identified several dimensions along which group-ware systems can be evaluated.
Reference: [ Maes, 1994 ] <editor> Pattie Maes. </editor> <title> Agents that reduce work and information overload. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: None of these, however, completely automate the meeting scheduling process. For example, a number of these researchers <ref> [ Dent et al., 1992, Maes, 1994 ] </ref> have focused on learning personal assistants that learn user preferences by watching the user scheduling meetings. The goal is to assist users in making decisions by suggesting alternatives, and not to automate the process. <p> In the future, we plan to investigate learning user preferences, either from observed behavior of the user <ref> [ Dent et al., 1992, Maes, 1994 ] </ref> (in accepting or rejecting the recommended meeting times) or from querying other agents.
Reference: [ Malone et al., 1987 ] <author> Thomas W. Malone, Kenneth R. Grant, Franklyn A. Turbak, Stephen A. Brobst, and Michael D. Cohen. </author> <title> Intelligent information-sharing systems. </title> <journal> Communications of the ACM, </journal> <volume> 30(5) </volume> <pages> 390-402, </pages> <year> 1987. </year>
Reference-contexts: Techniques from artificial intelligence can introduce "intelligent agents" into organizational computing systems, where these agents use knowledge about the interests and priorities of people to perform routine organizational tasks such as automatically screening, directing, and even responding to information <ref> [ Malone et al., 1987 ] </ref> . The usefulness of intelligent agents is further appreciated with the advent of the information superhighway [ CACM July issue, 1994 ] . <p> Automating meeting scheduling is important, therefore, not only because it can save time and effort on the part of humans, but also because this may lead to more efficient schedules and to changes in how information is exchanged within organizations. Past efforts <ref> [ Greif, 1982, Malone et al., 1987 ] </ref> in developing automated meeting schedulers have met with limited success, although they are available in a number of office software systems [ Grudin, 1987 ] . 6 Most of the commercially available software for scheduling over computer networks have been personal computer based
Reference: [ Ordeshook, 1995 ] <author> Peter C. Ordeshook. </author> <title> Game Theory and Political Theory: An Introduction. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: In this research, we have adapted methods developed in the voting theory literature to find compromises between conflicting preferences. Voting is a well understood mechanism for reaching consensus <ref> [ Ordeshook, 1995, Straffin, 1980 ] </ref> . One of our key goals is that we effectively capture the interactions between the many and conflicting preferences that the user has for a meeting. <p> They can therefore use only those voting strategies that cannot be sabotaged by strategic manipulation <ref> [ Ordeshook, 1995, Straffin, 1980 ] </ref> . However our approach is for different preferences of the same user to vote on what is a preferable meeting time, and hence is a cooperative voting system.
Reference: [ Rasmus, 1995 ] <author> Daniel Rasmus. </author> <title> Groupware: </title> <booktitle> Reconnecting with human intelligence. PC AI, </booktitle> <address> 9(6):27, </address> <year> 1995. </year>
Reference: [ Rosenschein, 1995 ] <author> Jeffrey S. Rosenschein. </author> <title> Multiagent planning as a social process: Voting, privacy, and manipulation. </title> <editor> In Victor Lesser, editor, </editor> <booktitle> Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> page 431, </pages> <address> San Francisco, CA, 1995. </address> <publisher> MIT Press. (invited speaker talk). </publisher>
Reference: [ Sen and Durfee, 1991 ] <author> Sandip Sen and Edmund H. Durfee. </author> <title> A formal study of distributed meeting scheduling: Preliminary results. </title> <booktitle> In Proceedings of the ACM Conference on Organizational Computing Systems, </booktitle> <pages> pages 55-68, </pages> <month> November </month> <year> 1991. </year>
Reference: [ Sen and Durfee, 1994 ] <author> Sandip Sen and Edmund H. Durfee. </author> <title> On the design of an adaptive meeting scheduler. </title> <booktitle> In Proc. of the Tenth IEEE Conference on AI Applications, </booktitle> <pages> pages 40-46, </pages> <month> March </month> <year> 1994. </year> <month> 29 </month>
Reference-contexts: Whereas our prior work focused primarily on agents adapting to environmental changes <ref> [ Sen, 1993, Sen and Durfee, 1994 ] </ref> , our current efforts are directed towards effectively representing and utilizing user preferences.
Reference: [ Sen and Durfee, 1996 ] <author> Sandip Sen and Edmund H. Durfee. </author> <title> A contracting model for flexible distributed scheduling. </title> <journal> Annals of Operations Research, </journal> <volume> 65 </volume> <pages> 195-222, </pages> <year> 1996. </year>
Reference: [ Sen, 1993 ] <author> Sandip Sen. </author> <title> Predicting Tradeoffs in Contract-Based Distributed Scheduling. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Whereas our prior work focused primarily on agents adapting to environmental changes <ref> [ Sen, 1993, Sen and Durfee, 1994 ] </ref> , our current efforts are directed towards effectively representing and utilizing user preferences.
Reference: [ Sen, 1997 ] <author> Sandip Sen. </author> <title> An automated meeting scheduling system that utilizes user preferences. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents, </booktitle> <pages> pages 308-315, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: This agent negotiates with the agents corresponding to the other users to schedule the meeting. Since all meeting requests and calendar accesses are routed through the meeting scheduling agent, it can protect the privacy of its associated user while satisfying preferences of this individual <ref> [ Sen, 1997 ] </ref> . The meeting scheduling agent uses the calendar manager software to manipulate the user's calendar, and uses the e-mail system to communicate messages with other meeting scheduling agents (see Figure 1).
Reference: [ Smith, 1980 ] <author> Reid G. Smith. </author> <title> The contract net protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(12):1104-1113, </volume> <month> December </month> <year> 1980. </year>
Reference-contexts: set of attendees, * proposed length of the meeting, * priority assigned to the meeting, * a set of possible starting times on the calendar for the meeting (e.g., sometime next week, Friday afternoon, etc.), * a scheduling deadline, * any additional constraints. 8 Our scheduling agents use contract-based negotiation <ref> [ Smith, 1980 ] </ref> to find mutually acceptable time slots for meetings.
Reference: [ Straffin, 1980 ] <author> Philip D. Jr. Straffin. </author> <title> Topics in the theory of voting. The UMAP expository monograph series. </title> <publisher> Birkhauser, </publisher> <address> Boston, MA, </address> <year> 1980. </year>
Reference-contexts: In this research, we have adapted methods developed in the voting theory literature to find compromises between conflicting preferences. Voting is a well understood mechanism for reaching consensus <ref> [ Ordeshook, 1995, Straffin, 1980 ] </ref> . One of our key goals is that we effectively capture the interactions between the many and conflicting preferences that the user has for a meeting. <p> In each pairing, the vote proceeds by ignoring the proposals other than those in the pairing. Straffin has listed several criterion to rate the desirability of the outcome different voting rules <ref> [ Straffin, 1980 ] </ref> : Pareto If every voter prefers an alternative x to an alternative y, a voting rule should not produce y as a winner. <p> They can therefore use only those voting strategies that cannot be sabotaged by strategic manipulation <ref> [ Ordeshook, 1995, Straffin, 1980 ] </ref> . However our approach is for different preferences of the same user to vote on what is a preferable meeting time, and hence is a cooperative voting system.

References-found: 30

