URL: ftp://ftp.cs.toronto.edu/pub/kbms/cikm95.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Email: fshrufi,thodorosg@cs.toronto.edu  
Title: Query Processing for Knowledge Bases Using Join Indices  
Author: Adel Shrufi and Thodoros Topaloglou 
Address: Toronto, Ontario, M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: This paper addresses the problem of physical query processing for large object-oriented, temporal knowledge bases. The major tasks being investigated are how to generate the space of all possible execution plans for a given knowledge base query and how to traverse this space in order to choose an efficient execution plan. The results of this work include: (a) the formulation of a set of access level operations which depend on the underlying storage model and the development of a cost model for estimating their cost; (b) the exploration of various optimization heuristics for selecting efficient execution plans for temporal path queries which make use of the join index relations that are provided by the storage model; and (c) a performance study that shows the benefits of join index based query processing techniques for knowledge bases compared to the traditional tuple-oriented (characteristic of the AI-DB coupling systems) and bulk join query processing approaches in database systems. 
Abstract-found: 1
Intro-found: 1
Reference: [All83] <author> J.F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Both t h and t b are intervals consisting of a starting and an ending time point which are conventional dates. Time intervals are related in temporal assertions by using the Allen's <ref> [All83] </ref> thirteen interval relations.
Reference: [BK89] <author> E. Bertino and W. Kim. </author> <title> Indexing Techniques for Queries on Nested Objects. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(2) </volume> <pages> 196-214, </pages> <year> 1989. </year>
Reference-contexts: Instead, query processing techniques which reflect properties of a knowledge base must be sought. This conclusion although is shown in the context of the Telos KBMS has more general scope as further studies have shown [Cha94]. Our work relates to earlier work on path queries for object oriented databases <ref> [BK89] </ref>. However, the indices proposed there, nested index and path index, are not applicable in our case because of the time versioning of attributes in a knowledge base and the frequency of updates.
Reference: [Cha94] <author> Vinay K Chaudhri. </author> <title> Transaction Synchronization in Knowledge Bases: Concepts, Realization and Quantitative Evaluation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1994. </year>
Reference-contexts: Finally, a page size of 4K was used throughout. We note here that some of the parameters used here, such as the number of classes, are based on observations obtained from empirical studies of real knowledge bases in <ref> [Cha94] </ref>. For the above knowledge base, we generated random queries with path expressions in a way that we controlled the fanout and the depth of the query graph (QG). <p> Instead, query processing techniques which reflect properties of a knowledge base must be sought. This conclusion although is shown in the context of the Telos KBMS has more general scope as further studies have shown <ref> [Cha94] </ref>. Our work relates to earlier work on path queries for object oriented databases [BK89]. However, the indices proposed there, nested index and path index, are not applicable in our case because of the time versioning of attributes in a knowledge base and the frequency of updates.
Reference: [CK85] <author> G.P. Copeland and S.N. Khoshafian. </author> <title> A Decomposition Storage Model. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 268-279, </pages> <year> 1985. </year>
Reference-contexts: Telos knowledge bases are stored using the Controlled Decomposition storage Model (CDM) [Top93]. CDM is a flexible combination of the n-ary (direct) storage model (NSM) and the decomposition storage model (DSM) <ref> [CK85] </ref>, [VKC86]. NSM utilizes a single relation for each object class where DSM stores an object oriented schema by generating a binary relation for each attribute of a class.
Reference: [IK91] <author> Y. E. Ioannidis and Y. C. Kang. </author> <title> Left-Deep vs. Bushy Trees: An Analysis of Strategy Spaces and its Implications for Query Optimization. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 168-177, </pages> <year> 1991. </year>
Reference-contexts: In what follows, we briefly explain these operations and give their respective costs and the output size estimates. In order to reduce the complexity of the cost formulas, we had to adopt some generally-accepted assumptions <ref> [IK91] </ref>. Specifically, intermediate results are always materialized before they are fed as input to subsequent operations. Secondly, we assume minimal buffering of data or index pages between operations. These assumptions eliminate the complex problems that arise with the incorporation of buffering in the cost formulas. <p> As far as the heuristic search is concerned, we distinguish two possibilities. The first is a heuristic enumeration of the most promising execution plans based on the selectivity of classes. The second is to use a randomized searching algorithms to reach a near-optimal plan <ref> [IK91] </ref>. The latter requires some transformation rules that model the transition from one state (execution tree) to another. Here we show two such rules.
Reference: [LG89] <author> Douglas B. Lenat and R.V. Guha. </author> <title> Building Large Knowledge-based Systems: Representation and inference in the Cyc Project. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction A critical factor to the success of knowledge base system technology, that deals with large-scale knowledge bases such as those referred in <ref> [LG89] </ref>, [NFF + 91], will be its ability to provide robust performance comparable to that of database systems. This is particularly crucial for large disk-resident knowledge bases where the goal is to provide access efficiency by minimizing the number of disk I/Os incurred during query execution.
Reference: [MBJK90] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: A Language for Representing Knowledge About Information Systems. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362, </pages> <year> 1990. </year>
Reference-contexts: Furthermore, these structures, along with the novel indexing techniques for knowledge bases, require more sophisticated cost model formulas than the ones encountered in traditional systems. In this paper we address the access planning phase for Telos knowledge bases <ref> [MBJK90] </ref> whose implementation is based on the controlled decomposition storage model [Top93]. Our earlier work on semantic query optimization in Telos is reported in [TIS92]. <p> Section 4 discusses the developed access language, cost model and employed optimizations. Section 5 provides a quantitative evaluation, and section 6 concludes with a summary and directions for future work. 2 Querying Knowledge Bases 2.1 The Telos Knowledge Model Telos <ref> [MBJK90] </ref> offers a representational framework which includes structuring mechanisms analogous to those offered by semantic networks and semantic data models. It also provides an assertional sublanguage for the expression of deductive rules and integrity constraints. <p> Queries are specified through the ASK operation <ref> [MBJK90] </ref> which has a general syntax shown as follows: ASKx 1 =S 1 ; :::; x n =S n : W ON t 1 x 1 ; :::; x n are assumed to be target variables for which the query processor needs to provide values; S 1 ; :::; S n
Reference: [MCP + 95] <author> J. Mylopoulos, V. Chaudhri, D. Plexousakis, A. Shrufi, and T. Topaloglou. </author> <title> Building Knowledge Base Management Systems. </title> <type> Technical report, </type> <note> The VLDB Journal (to appear), </note> <year> 1995. </year>
Reference-contexts: This work is part of a more general approach towards the development of knowledge base management systems which we report in <ref> [MCP + 95] </ref>. In general, query processing is considered a highly complex process requiring two primary phases which are applied in tandem.
Reference: [NFF + 91] <author> R. Neches, R. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. Swartout. </author> <title> Enabling Technology for Knowledge Sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction A critical factor to the success of knowledge base system technology, that deals with large-scale knowledge bases such as those referred in [LG89], <ref> [NFF + 91] </ref>, will be its ability to provide robust performance comparable to that of database systems. This is particularly crucial for large disk-resident knowledge bases where the goal is to provide access efficiency by minimizing the number of disk I/Os incurred during query execution.
Reference: [SAC + 79] <author> G. Selinger, M. Astrahan, D. Chamberlin, R. Lo-rie, and T. Price. </author> <title> Access Path Selection in a Relational Database Management System. </title> <booktitle> In Proceedings of the ACM/SIGMOD Conference on Management of Data, </booktitle> <pages> pages 23-34, </pages> <year> 1979. </year>
Reference-contexts: Once again, time comes to play a role as well. For instance, the selectivity of a selection operation such as employee.salary=50K ON 1989..1991 will be the selectivity of the operation as in <ref> [SAC + 79] </ref> multiplied by a temporal selectivity factor. Thus, instead of simply referring to selectivity of predicates, we speak of temporal selectivity of predicates. This also implies that the cost model formulas must be revised to take this into account, as we show later on. <p> Temporal Selectivity. The selectivity of a non-temporal qualification on a temporal data domain is estimated as in <ref> [SAC + 79] </ref>. For a temporal qualification, the selectivity T is obtained by multiplying by a temporal selectivity factor t . <p> Unfortunately, the substitution of the primitive operations on the parameterized tree implies a O (2 n1 ) for the size of the execution space that practically prevents the enumeration of the possible execution strategies as done in <ref> [SAC + 79] </ref>. In order to pick an execution tree that has an efficient cost, we utilize the cost formulas presented earlier to estimate the cost of each access plan corresponding to each execution tree.
Reference: [SMK93] <author> M. Steinbrunn, G. Moerkotte, and A. Kemper. </author> <title> Optimizing Join Orders. </title> <type> Technical Report MIP-9307, </type> <institution> Fakultat fur Mathematik and Informatik, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The rationale for focusing on left-deep trees, rather than the more generalized bushy trees, stems from three reasons: First, the search space in the latter becomes unreasonably large, second, it has been argued in the literature <ref> [SMK93] </ref> that the left-deep trees space contain the most feasible execution strategies, and third, in our case, left-deep trees utilize better the available storage structure. The number of all possible P O trees for a query graph with n nodes is n (n1).
Reference: [Sno87] <author> Richard Snodgrass. </author> <title> The Temporal Query Language TQuel. </title> <journal> ACM Transcactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: A variation of this query is to ask the same expression according to what the system currently believes just by omitting the AS OF part. ASK e/Employee: e.dept.comp.name = "IBM" and e.dept.name = "dbgroup" ON 1990 .. 1991 According to <ref> [Sno87] </ref>, a query with both of the above time qualifications is termed a temporal, while one with only the first temporal qualification is called a historical query.
Reference: [TIS92] <author> T. Topaloglou, A. Illarramendi, and L. Sbat-tella. </author> <title> Query Optimization for KBMSs: Temporal, Syntactic and Semantic Transformation. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 310-319, </pages> <year> 1992. </year>
Reference-contexts: In this paper we address the access planning phase for Telos knowledge bases [MBJK90] whose implementation is based on the controlled decomposition storage model [Top93]. Our earlier work on semantic query optimization in Telos is reported in <ref> [TIS92] </ref>. The query processing tasks that we concentrate on are how to generate the space of all possible execution plans and how to traverse this space in order to choose an efficient execution plan.
Reference: [Top93] <author> Thodoros Topaloglou. </author> <title> Storage Management for Knowledge Bases. </title> <booktitle> In Proceedings of Second International Conference on Information and Knowledge Management (CIKM'93), </booktitle> <year> 1993. </year>
Reference-contexts: Furthermore, these structures, along with the novel indexing techniques for knowledge bases, require more sophisticated cost model formulas than the ones encountered in traditional systems. In this paper we address the access planning phase for Telos knowledge bases [MBJK90] whose implementation is based on the controlled decomposition storage model <ref> [Top93] </ref>. Our earlier work on semantic query optimization in Telos is reported in [TIS92]. The query processing tasks that we concentrate on are how to generate the space of all possible execution plans and how to traverse this space in order to choose an efficient execution plan. <p> Telos knowledge bases are stored using the Controlled Decomposition storage Model (CDM) <ref> [Top93] </ref>. CDM is a flexible combination of the n-ary (direct) storage model (NSM) and the decomposition storage model (DSM) [CK85], [VKC86]. NSM utilizes a single relation for each object class where DSM stores an object oriented schema by generating a binary relation for each attribute of a class. <p> In CDM we have minimized these inefficiencies and we have also integrated historical time with the storage structures. In the next section, we outline the features of CDM emphasizing on those that are relevant to the development of this paper. A detailed description of CDM can be found in <ref> [Top93] </ref>. 3.1 The Controlled Decomposition Model The Controlled Decomposition algorithm operates on a description of the knowledge base structure and generates a logical schema and the associated index methods for it. <p> CD4 A token is stored as a tuple in the relation corresponding to the most general class of which the token is an instance. Object identifiers are assigned to each tuple using a hierarchical scheme (see <ref> [Top93] </ref>). <p> In addition, these indices are hierarchical in the sense that one index stores information for all the instances of a class (including inherited ones). Below we simply present their 3 definitions, the interested reader can find more details about their functionality and performance in <ref> [Top93] </ref>. The restriction temporal index is used on attributes with primitive domains. Its search key is a pair of a domain value and a time segment i.e., hvalue, timei and the returned value is a list of qualified token identifiers. <p> For a temporal qualification, the selectivity T is obtained by multiplying by a temporal selectivity factor t . The value of t depends on the distribution of the temporal domain and the query time (T q ). <ref> [Top93] </ref> analyzes the temporal selectivity of three different types of temporal 4 domains: (1) point values without duration, (2) uniform dis-tribution of intervals of the same size g, and (3) right-ended intervals. <p> In fact, our results show that in the presence of time indices consisting of paths of join indices offer a better option <ref> [Top93] </ref>. The advantages of join indices for supporting efficient navigation in object-oriented databases are also shown in [XH94] where the concept of join index hierarchies is introduced.
Reference: [Val87] <author> Patrick Valduriez. </author> <title> Join Indices. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(2) </volume> <pages> 218-246, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: The existence of complex attributes, on the other hand, makes the join index relations <ref> [Val87] </ref> to be highly promising access methods for knowledge bases. These two observations were the key criteria in designing the access methods supported by the CDM storage manager.
Reference: [VKC86] <author> P. Valduriez, S. Khoshafian, and G. Copeland. </author> <title> Implementation Techniques of Complex Objects. </title> <booktitle> In Proceedings of the 12th VLDB Conference, </booktitle> <pages> pages 101-109, </pages> <address> Kyoto, Japan, </address> <year> 1986. </year>
Reference-contexts: Telos knowledge bases are stored using the Controlled Decomposition storage Model (CDM) [Top93]. CDM is a flexible combination of the n-ary (direct) storage model (NSM) and the decomposition storage model (DSM) [CK85], <ref> [VKC86] </ref>. NSM utilizes a single relation for each object class where DSM stores an object oriented schema by generating a binary relation for each attribute of a class.
Reference: [XH94] <author> Z. Xie and J. Han. </author> <title> Join index hierarchies for supporting efficient navigations in object-oriented databases. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <pages> pages 522-533, </pages> <year> 1994. </year>
Reference-contexts: In fact, our results show that in the presence of time indices consisting of paths of join indices offer a better option [Top93]. The advantages of join indices for supporting efficient navigation in object-oriented databases are also shown in <ref> [XH94] </ref> where the concept of join index hierarchies is introduced. As for future work, there are many interesting directions to pursue, including: Extending the cost model so it is capable of handling wider range of queries such as recursive queries.
Reference: [Yao77] <author> S.B. Yao. </author> <title> Approximating Block Accesses in Database Organizations. </title> <journal> Communications of ACM, </journal> <volume> 20(4) </volume> <pages> 260-261, </pages> <year> 1977. </year> <month> 9 </month>
Reference-contexts: The restriction index is implemented an R-tree or B-tree depending on whether its indexing domain is a temporal or a regular one. Cost of Data Fetching. Finally, in order to estimate the number of pages accessed as a result of fetching data objects, we utilize Yao's formula <ref> [Yao77] </ref>. This formula has the generic form of Yao (K; M; N ) where K is the number of data items to be fetched which are randomly placed among N objects, and M is the total number of pages.
References-found: 18

